begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qstandarditemmodel.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STANDARDITEMMODEL
end_ifndef
begin_include
include|#
directive|include
file|<QtCore/qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmap.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpair.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvariant.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvector.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qbitarray.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmimedata.h>
end_include
begin_include
include|#
directive|include
file|<private/qstandarditemmodel_p.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QStandardItemModelLessThan
class|class
name|QStandardItemModelLessThan
block|{
public|public:
DECL|function|QStandardItemModelLessThan
specifier|inline
name|QStandardItemModelLessThan
parameter_list|()
block|{ }
DECL|function|operator ()
specifier|inline
name|bool
name|operator
name|()
parameter_list|(
specifier|const
name|QPair
argument_list|<
name|QStandardItem
modifier|*
argument_list|,
name|int
argument_list|>
modifier|&
name|l
parameter_list|,
specifier|const
name|QPair
argument_list|<
name|QStandardItem
modifier|*
argument_list|,
name|int
argument_list|>
modifier|&
name|r
parameter_list|)
specifier|const
block|{
return|return
operator|*
operator|(
name|l
operator|.
name|first
operator|)
operator|<
operator|*
operator|(
name|r
operator|.
name|first
operator|)
return|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|QStandardItemModelGreaterThan
class|class
name|QStandardItemModelGreaterThan
block|{
public|public:
DECL|function|QStandardItemModelGreaterThan
specifier|inline
name|QStandardItemModelGreaterThan
parameter_list|()
block|{ }
DECL|function|operator ()
specifier|inline
name|bool
name|operator
name|()
parameter_list|(
specifier|const
name|QPair
argument_list|<
name|QStandardItem
modifier|*
argument_list|,
name|int
argument_list|>
modifier|&
name|l
parameter_list|,
specifier|const
name|QPair
argument_list|<
name|QStandardItem
modifier|*
argument_list|,
name|int
argument_list|>
modifier|&
name|r
parameter_list|)
specifier|const
block|{
return|return
operator|*
operator|(
name|r
operator|.
name|first
operator|)
operator|<
operator|*
operator|(
name|l
operator|.
name|first
operator|)
return|;
block|}
block|}
class|;
end_class
begin_comment
comment|/*!   \internal */
end_comment
begin_destructor
DECL|function|~QStandardItemPrivate
name|QStandardItemPrivate
operator|::
name|~
name|QStandardItemPrivate
parameter_list|()
block|{
name|QVector
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
operator|::
name|const_iterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|children
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|children
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QStandardItem
modifier|*
name|child
init|=
operator|*
name|it
decl_stmt|;
if|if
condition|(
name|child
condition|)
name|child
operator|->
name|d_func
argument_list|()
operator|->
name|setModel
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|child
expr_stmt|;
block|}
name|children
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|parent
operator|&&
name|model
condition|)
name|parent
operator|->
name|d_func
argument_list|()
operator|->
name|childDeleted
argument_list|(
name|q_func
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|position
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|QStandardItemPrivate
operator|::
name|position
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|QStandardItem
modifier|*
name|par
init|=
name|parent
condition|)
block|{
name|int
name|idx
init|=
name|par
operator|->
name|d_func
argument_list|()
operator|->
name|childIndex
argument_list|(
name|q_func
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
return|return
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
return|;
return|return
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|(
name|idx
operator|/
name|par
operator|->
name|columnCount
argument_list|()
argument_list|,
name|idx
operator|%
name|par
operator|->
name|columnCount
argument_list|()
argument_list|)
return|;
block|}
comment|// ### support header items?
return|return
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|setChild
name|void
name|QStandardItemPrivate
operator|::
name|setChild
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
name|QStandardItem
modifier|*
name|item
parameter_list|,
name|bool
name|emitChanged
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|==
name|q
condition|)
block|{
name|qWarning
argument_list|(
literal|"QStandardItem::setChild: Can't make an item a child of itself %p"
argument_list|,
name|item
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|(
name|row
operator|<
literal|0
operator|)
operator|||
operator|(
name|column
operator|<
literal|0
operator|)
condition|)
return|return;
if|if
condition|(
name|rows
operator|<=
name|row
condition|)
name|q
operator|->
name|setRowCount
argument_list|(
name|row
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|columns
operator|<=
name|column
condition|)
name|q
operator|->
name|setColumnCount
argument_list|(
name|column
operator|+
literal|1
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|childIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|index
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|oldItem
init|=
name|children
operator|.
name|at
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|==
name|oldItem
condition|)
return|return;
if|if
condition|(
name|item
condition|)
block|{
if|if
condition|(
name|item
operator|->
name|d_func
argument_list|()
operator|->
name|parent
operator|==
literal|0
condition|)
block|{
name|item
operator|->
name|d_func
argument_list|()
operator|->
name|setParentAndModel
argument_list|(
name|q
argument_list|,
name|model
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QStandardItem::setChild: Ignoring duplicate insertion of item %p"
argument_list|,
name|item
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|oldItem
condition|)
name|oldItem
operator|->
name|d_func
argument_list|()
operator|->
name|setModel
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|oldItem
expr_stmt|;
name|children
operator|.
name|replace
argument_list|(
name|index
argument_list|,
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|emitChanged
operator|&&
name|model
condition|)
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|itemChanged
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|changeFlags
name|void
name|QStandardItemPrivate
operator|::
name|changeFlags
parameter_list|(
name|bool
name|enable
parameter_list|,
name|Qt
operator|::
name|ItemFlags
name|f
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|ItemFlags
name|flags
init|=
name|q
operator|->
name|flags
argument_list|()
decl_stmt|;
if|if
condition|(
name|enable
condition|)
name|flags
operator||=
name|f
expr_stmt|;
else|else
name|flags
operator|&=
operator|~
name|f
expr_stmt|;
name|q
operator|->
name|setFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|childDeleted
name|void
name|QStandardItemPrivate
operator|::
name|childDeleted
parameter_list|(
name|QStandardItem
modifier|*
name|child
parameter_list|)
block|{
name|int
name|index
init|=
name|childIndex
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|index
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|children
operator|.
name|replace
argument_list|(
name|index
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|setItemData
name|void
name|QStandardItemPrivate
operator|::
name|setItemData
parameter_list|(
specifier|const
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
modifier|&
name|roles
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
comment|//let's build the vector of new values
name|QVector
argument_list|<
name|QStandardItemData
argument_list|>
name|newValues
decl_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
operator|::
name|const_iterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|roles
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|roles
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QVariant
name|value
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|int
name|role
init|=
name|it
operator|.
name|key
argument_list|()
decl_stmt|;
name|role
operator|=
operator|(
name|role
operator|==
name|Qt
operator|::
name|EditRole
operator|)
condition|?
name|Qt
operator|::
name|DisplayRole
else|:
name|role
expr_stmt|;
name|QStandardItemData
name|wid
argument_list|(
name|role
argument_list|,
name|it
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|newValues
operator|.
name|append
argument_list|(
name|wid
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|values
operator|!=
name|newValues
condition|)
block|{
name|values
operator|=
name|newValues
expr_stmt|;
if|if
condition|(
name|model
condition|)
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|itemChanged
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|itemData
specifier|const
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
name|QStandardItemPrivate
operator|::
name|itemData
parameter_list|()
specifier|const
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
name|result
decl_stmt|;
name|QVector
argument_list|<
name|QStandardItemData
argument_list|>
operator|::
name|const_iterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|values
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|values
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|result
operator|.
name|insert
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|role
argument_list|,
operator|(
operator|*
name|it
operator|)
operator|.
name|value
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|sortChildren
name|void
name|QStandardItemPrivate
operator|::
name|sortChildren
parameter_list|(
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
if|if
condition|(
name|column
operator|>=
name|columnCount
argument_list|()
condition|)
return|return;
name|QVector
argument_list|<
name|QPair
argument_list|<
name|QStandardItem
modifier|*
argument_list|,
name|int
argument_list|>
argument_list|>
name|sortable
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|unsortable
decl_stmt|;
name|sortable
operator|.
name|reserve
argument_list|(
name|rowCount
argument_list|()
argument_list|)
expr_stmt|;
name|unsortable
operator|.
name|reserve
argument_list|(
name|rowCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|rowCount
argument_list|()
condition|;
operator|++
name|row
control|)
block|{
name|QStandardItem
modifier|*
name|itm
init|=
name|q
operator|->
name|child
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|itm
condition|)
name|sortable
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QStandardItem
operator|*
argument_list|,
name|int
argument_list|>
argument_list|(
name|itm
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|unsortable
operator|.
name|append
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|order
operator|==
name|Qt
operator|::
name|AscendingOrder
condition|)
block|{
name|QStandardItemModelLessThan
name|lt
decl_stmt|;
name|qStableSort
argument_list|(
name|sortable
operator|.
name|begin
argument_list|()
argument_list|,
name|sortable
operator|.
name|end
argument_list|()
argument_list|,
name|lt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QStandardItemModelGreaterThan
name|gt
decl_stmt|;
name|qStableSort
argument_list|(
name|sortable
operator|.
name|begin
argument_list|()
argument_list|,
name|sortable
operator|.
name|end
argument_list|()
argument_list|,
name|gt
argument_list|)
expr_stmt|;
block|}
name|QModelIndexList
name|changedPersistentIndexesFrom
decl_stmt|,
name|changedPersistentIndexesTo
decl_stmt|;
name|QVector
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|sorted_children
argument_list|(
name|children
operator|.
name|count
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|r
init|=
operator|(
name|i
operator|<
name|sortable
operator|.
name|count
argument_list|()
condition|?
name|sortable
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
else|:
name|unsortable
operator|.
name|at
argument_list|(
name|i
operator|-
name|sortable
operator|.
name|count
argument_list|()
argument_list|)
operator|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columnCount
argument_list|()
condition|;
operator|++
name|c
control|)
block|{
name|QStandardItem
modifier|*
name|itm
init|=
name|q
operator|->
name|child
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|sorted_children
index|[
name|childIndex
argument_list|(
name|i
argument_list|,
name|c
argument_list|)
index|]
operator|=
name|itm
expr_stmt|;
if|if
condition|(
name|model
condition|)
block|{
name|QModelIndex
name|from
init|=
name|model
operator|->
name|createIndex
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|persistent
operator|.
name|indexes
operator|.
name|contains
argument_list|(
name|from
argument_list|)
condition|)
block|{
name|QModelIndex
name|to
init|=
name|model
operator|->
name|createIndex
argument_list|(
name|i
argument_list|,
name|c
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|changedPersistentIndexesFrom
operator|.
name|append
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|changedPersistentIndexesTo
operator|.
name|append
argument_list|(
name|to
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|children
operator|=
name|sorted_children
expr_stmt|;
if|if
condition|(
name|model
condition|)
block|{
name|model
operator|->
name|changePersistentIndexList
argument_list|(
name|changedPersistentIndexesFrom
argument_list|,
name|changedPersistentIndexesTo
argument_list|)
expr_stmt|;
block|}
name|QVector
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
operator|::
name|iterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|children
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|children
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|*
name|it
condition|)
operator|(
operator|*
name|it
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|sortChildren
argument_list|(
name|column
argument_list|,
name|order
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \internal   set the model of this item and all its children   */
end_comment
begin_function
DECL|function|setModel
name|void
name|QStandardItemPrivate
operator|::
name|setModel
parameter_list|(
name|QStandardItemModel
modifier|*
name|mod
parameter_list|)
block|{
if|if
condition|(
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|model
condition|)
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|invalidatePersistentIndex
argument_list|(
name|model
operator|->
name|indexFromItem
argument_list|(
name|q_ptr
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|=
name|mod
expr_stmt|;
block|}
else|else
block|{
name|QStack
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|stack
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|q_ptr
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStandardItem
modifier|*
name|itm
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|itm
operator|->
name|d_func
argument_list|()
operator|->
name|model
condition|)
block|{
name|itm
operator|->
name|d_func
argument_list|()
operator|->
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|invalidatePersistentIndex
argument_list|(
name|itm
operator|->
name|d_func
argument_list|()
operator|->
name|model
operator|->
name|indexFromItem
argument_list|(
name|itm
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|itm
operator|->
name|d_func
argument_list|()
operator|->
name|model
operator|=
name|mod
expr_stmt|;
specifier|const
name|QVector
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
modifier|&
name|childList
init|=
name|itm
operator|->
name|d_func
argument_list|()
operator|->
name|children
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QStandardItem
modifier|*
name|chi
init|=
name|childList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|chi
condition|)
name|stack
operator|.
name|push
argument_list|(
name|chi
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_constructor
DECL|function|QStandardItemModelPrivate
name|QStandardItemModelPrivate
operator|::
name|QStandardItemModelPrivate
parameter_list|()
member_init_list|:
name|root
argument_list|(
operator|new
name|QStandardItem
argument_list|)
member_init_list|,
name|itemPrototype
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sortRole
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|)
block|{
name|root
operator|->
name|setFlags
argument_list|(
name|Qt
operator|::
name|ItemIsDropEnabled
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   \internal */
end_comment
begin_destructor
DECL|function|~QStandardItemModelPrivate
name|QStandardItemModelPrivate
operator|::
name|~
name|QStandardItemModelPrivate
parameter_list|()
block|{
operator|delete
name|itemPrototype
expr_stmt|;
name|qDeleteAll
argument_list|(
name|columnHeaderItems
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|rowHeaderItems
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|init
name|void
name|QStandardItemModelPrivate
operator|::
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_emitItemChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|_q_emitItemChanged
name|void
name|QStandardItemModelPrivate
operator|::
name|_q_emitItemChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|bottomRight
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|QModelIndex
name|parent
init|=
name|topLeft
operator|.
name|parent
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
name|topLeft
operator|.
name|row
argument_list|()
init|;
name|row
operator|<=
name|bottomRight
operator|.
name|row
argument_list|()
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|column
init|=
name|topLeft
operator|.
name|column
argument_list|()
init|;
name|column
operator|<=
name|bottomRight
operator|.
name|column
argument_list|()
condition|;
operator|++
name|column
control|)
block|{
name|QModelIndex
name|index
init|=
name|q
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|QStandardItem
modifier|*
name|item
init|=
name|itemFromIndex
argument_list|(
name|index
argument_list|)
condition|)
emit|emit
name|q
operator|->
name|itemChanged
argument_list|(
name|item
argument_list|)
emit|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|insertRows
name|bool
name|QStandardItemPrivate
operator|::
name|insertRows
parameter_list|(
name|int
name|row
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
modifier|&
name|items
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|row
operator|<
literal|0
operator|)
operator|||
operator|(
name|row
operator|>
name|rowCount
argument_list|()
operator|)
condition|)
return|return
literal|false
return|;
name|int
name|count
init|=
name|items
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
condition|)
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|rowsAboutToBeInserted
argument_list|(
name|q
argument_list|,
name|row
argument_list|,
name|row
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|rowCount
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|columnCount
argument_list|()
operator|==
literal|0
condition|)
name|q
operator|->
name|setColumnCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|children
operator|.
name|resize
argument_list|(
name|columnCount
argument_list|()
operator|*
name|count
argument_list|)
expr_stmt|;
name|rows
operator|=
name|count
expr_stmt|;
block|}
else|else
block|{
name|rows
operator|+=
name|count
expr_stmt|;
name|int
name|index
init|=
name|childIndex
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
name|children
operator|.
name|insert
argument_list|(
name|index
argument_list|,
name|columnCount
argument_list|()
operator|*
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QStandardItem
modifier|*
name|item
init|=
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|item
operator|->
name|d_func
argument_list|()
operator|->
name|model
operator|=
name|model
expr_stmt|;
name|item
operator|->
name|d_func
argument_list|()
operator|->
name|parent
operator|=
name|q
expr_stmt|;
name|int
name|index
init|=
name|childIndex
argument_list|(
name|i
operator|+
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|children
operator|.
name|replace
argument_list|(
name|index
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|model
condition|)
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|rowsInserted
argument_list|(
name|q
argument_list|,
name|row
argument_list|,
name|count
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|insertRows
name|bool
name|QStandardItemPrivate
operator|::
name|insertRows
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
modifier|&
name|items
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|count
operator|<
literal|1
operator|)
operator|||
operator|(
name|row
operator|<
literal|0
operator|)
operator|||
operator|(
name|row
operator|>
name|rowCount
argument_list|()
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|model
condition|)
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|rowsAboutToBeInserted
argument_list|(
name|q
argument_list|,
name|row
argument_list|,
name|row
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|rowCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|children
operator|.
name|resize
argument_list|(
name|columnCount
argument_list|()
operator|*
name|count
argument_list|)
expr_stmt|;
name|rows
operator|=
name|count
expr_stmt|;
block|}
else|else
block|{
name|rows
operator|+=
name|count
expr_stmt|;
name|int
name|index
init|=
name|childIndex
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
name|children
operator|.
name|insert
argument_list|(
name|index
argument_list|,
name|columnCount
argument_list|()
operator|*
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|items
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|index
init|=
name|childIndex
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|limit
init|=
name|qMin
argument_list|(
name|items
operator|.
name|count
argument_list|()
argument_list|,
name|columnCount
argument_list|()
operator|*
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
operator|++
name|i
control|)
block|{
name|QStandardItem
modifier|*
name|item
init|=
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
condition|)
block|{
if|if
condition|(
name|item
operator|->
name|d_func
argument_list|()
operator|->
name|parent
operator|==
literal|0
condition|)
block|{
name|item
operator|->
name|d_func
argument_list|()
operator|->
name|setParentAndModel
argument_list|(
name|q
argument_list|,
name|model
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QStandardItem::insertRows: Ignoring duplicate insertion of item %p"
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|item
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|children
operator|.
name|replace
argument_list|(
name|index
argument_list|,
name|item
argument_list|)
expr_stmt|;
operator|++
name|index
expr_stmt|;
block|}
block|}
if|if
condition|(
name|model
condition|)
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|rowsInserted
argument_list|(
name|q
argument_list|,
name|row
argument_list|,
name|count
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|insertColumns
name|bool
name|QStandardItemPrivate
operator|::
name|insertColumns
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
modifier|&
name|items
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|count
operator|<
literal|1
operator|)
operator|||
operator|(
name|column
operator|<
literal|0
operator|)
operator|||
operator|(
name|column
operator|>
name|columnCount
argument_list|()
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|model
condition|)
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|columnsAboutToBeInserted
argument_list|(
name|q
argument_list|,
name|column
argument_list|,
name|column
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|columnCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|children
operator|.
name|resize
argument_list|(
name|rowCount
argument_list|()
operator|*
name|count
argument_list|)
expr_stmt|;
name|columns
operator|=
name|count
expr_stmt|;
block|}
else|else
block|{
name|columns
operator|+=
name|count
expr_stmt|;
name|int
name|index
init|=
name|childIndex
argument_list|(
literal|0
argument_list|,
name|column
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|rowCount
argument_list|()
condition|;
operator|++
name|row
control|)
block|{
name|children
operator|.
name|insert
argument_list|(
name|index
argument_list|,
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|index
operator|+=
name|columnCount
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|items
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|limit
init|=
name|qMin
argument_list|(
name|items
operator|.
name|count
argument_list|()
argument_list|,
name|rowCount
argument_list|()
operator|*
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
operator|++
name|i
control|)
block|{
name|QStandardItem
modifier|*
name|item
init|=
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
condition|)
block|{
if|if
condition|(
name|item
operator|->
name|d_func
argument_list|()
operator|->
name|parent
operator|==
literal|0
condition|)
block|{
name|item
operator|->
name|d_func
argument_list|()
operator|->
name|setParentAndModel
argument_list|(
name|q
argument_list|,
name|model
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QStandardItem::insertColumns: Ignoring duplicate insertion of item %p"
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|item
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|int
name|r
init|=
name|i
operator|/
name|count
decl_stmt|;
name|int
name|c
init|=
name|column
operator|+
operator|(
name|i
operator|%
name|count
operator|)
decl_stmt|;
name|int
name|index
init|=
name|childIndex
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|children
operator|.
name|replace
argument_list|(
name|index
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|model
condition|)
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|columnsInserted
argument_list|(
name|q
argument_list|,
name|column
argument_list|,
name|count
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|itemChanged
name|void
name|QStandardItemModelPrivate
operator|::
name|itemChanged
parameter_list|(
name|QStandardItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|->
name|d_func
argument_list|()
operator|->
name|parent
operator|==
literal|0
condition|)
block|{
comment|// Header item
name|int
name|idx
init|=
name|columnHeaderItems
operator|.
name|indexOf
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
block|{
emit|emit
name|q
operator|->
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|,
name|idx
argument_list|,
name|idx
argument_list|)
emit|;
block|}
else|else
block|{
name|idx
operator|=
name|rowHeaderItems
operator|.
name|indexOf
argument_list|(
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
emit|emit
name|q
operator|->
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|,
name|idx
argument_list|,
name|idx
argument_list|)
emit|;
block|}
block|}
else|else
block|{
comment|// Normal item
name|QModelIndex
name|index
init|=
name|q
operator|->
name|indexFromItem
argument_list|(
name|item
argument_list|)
decl_stmt|;
emit|emit
name|q
operator|->
name|dataChanged
argument_list|(
name|index
argument_list|,
name|index
argument_list|)
emit|;
block|}
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|rowsAboutToBeInserted
name|void
name|QStandardItemModelPrivate
operator|::
name|rowsAboutToBeInserted
parameter_list|(
name|QStandardItem
modifier|*
name|parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|q
operator|->
name|indexFromItem
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|q
operator|->
name|beginInsertRows
argument_list|(
name|index
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|columnsAboutToBeInserted
name|void
name|QStandardItemModelPrivate
operator|::
name|columnsAboutToBeInserted
parameter_list|(
name|QStandardItem
modifier|*
name|parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|q
operator|->
name|indexFromItem
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|q
operator|->
name|beginInsertColumns
argument_list|(
name|index
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|rowsAboutToBeRemoved
name|void
name|QStandardItemModelPrivate
operator|::
name|rowsAboutToBeRemoved
parameter_list|(
name|QStandardItem
modifier|*
name|parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|q
operator|->
name|indexFromItem
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|q
operator|->
name|beginRemoveRows
argument_list|(
name|index
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|columnsAboutToBeRemoved
name|void
name|QStandardItemModelPrivate
operator|::
name|columnsAboutToBeRemoved
parameter_list|(
name|QStandardItem
modifier|*
name|parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|q
operator|->
name|indexFromItem
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|q
operator|->
name|beginRemoveColumns
argument_list|(
name|index
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|rowsInserted
name|void
name|QStandardItemModelPrivate
operator|::
name|rowsInserted
parameter_list|(
name|QStandardItem
modifier|*
name|parent
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|==
name|root
operator|.
name|data
argument_list|()
condition|)
name|rowHeaderItems
operator|.
name|insert
argument_list|(
name|row
argument_list|,
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|q
operator|->
name|endInsertRows
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|columnsInserted
name|void
name|QStandardItemModelPrivate
operator|::
name|columnsInserted
parameter_list|(
name|QStandardItem
modifier|*
name|parent
parameter_list|,
name|int
name|column
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|==
name|root
operator|.
name|data
argument_list|()
condition|)
name|columnHeaderItems
operator|.
name|insert
argument_list|(
name|column
argument_list|,
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|q
operator|->
name|endInsertColumns
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|rowsRemoved
name|void
name|QStandardItemModelPrivate
operator|::
name|rowsRemoved
parameter_list|(
name|QStandardItem
modifier|*
name|parent
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|==
name|root
operator|.
name|data
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|row
init|;
name|i
operator|<
name|row
operator|+
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QStandardItem
modifier|*
name|oldItem
init|=
name|rowHeaderItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldItem
condition|)
name|oldItem
operator|->
name|d_func
argument_list|()
operator|->
name|setModel
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|oldItem
expr_stmt|;
block|}
name|rowHeaderItems
operator|.
name|remove
argument_list|(
name|row
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|q
operator|->
name|endRemoveRows
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|columnsRemoved
name|void
name|QStandardItemModelPrivate
operator|::
name|columnsRemoved
parameter_list|(
name|QStandardItem
modifier|*
name|parent
parameter_list|,
name|int
name|column
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|==
name|root
operator|.
name|data
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|column
init|;
name|i
operator|<
name|column
operator|+
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QStandardItem
modifier|*
name|oldItem
init|=
name|columnHeaderItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldItem
condition|)
name|oldItem
operator|->
name|d_func
argument_list|()
operator|->
name|setModel
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|oldItem
expr_stmt|;
block|}
name|columnHeaderItems
operator|.
name|remove
argument_list|(
name|column
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|q
operator|->
name|endRemoveColumns
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QStandardItem     \brief The QStandardItem class provides an item for use with the     QStandardItemModel class.     \since 4.2     \ingroup model-view     \inmodule QtGui      Items usually contain text, icons, or checkboxes.      Each item can have its own background brush which is set with the     setBackground() function. The current background brush can be found with     background().  The text label for each item can be rendered with its own     font and brush. These are specified with the setFont() and setForeground()     functions, and read with font() and foreground().      By default, items are enabled, editable, selectable, checkable, and can be     used both as the source of a drag and drop operation and as a drop target.     Each item's flags can be changed by calling setFlags(). Checkable items     can be checked and unchecked with the setCheckState() function. The     corresponding checkState() function indicates whether the item is     currently checked.      You can store application-specific data in an item by calling setData().      Each item can have a two-dimensional table of child items. This makes it     possible to build hierarchies of items. The typical hierarchy is the tree,     in which case the child table is a table with a single column (a list).      The dimensions of the child table can be set with setRowCount() and     setColumnCount(). Items can be positioned in the child table with     setChild(). Get a pointer to a child item with child(). New rows and     columns of children can also be inserted with insertRow() and     insertColumn(), or appended with appendRow() and appendColumn(). When     using the append and insert functions, the dimensions of the child table     will grow as needed.      An existing row of children can be removed with removeRow() or takeRow();     correspondingly, a column can be removed with removeColumn() or     takeColumn().      An item's children can be sorted by calling sortChildren().      \section1 Subclassing      When subclassing QStandardItem to provide custom items, it is possible to     define new types for them so that they can be distinguished from the base     class. The type() function should be reimplemented to return a new type     value equal to or greater than \l UserType.      Reimplement data() and setData() if you want to perform custom handling of     data queries and/or control how an item's data is represented.      Reimplement clone() if you want QStandardItemModel to be able to create     instances of your custom item class on demand (see     QStandardItemModel::setItemPrototype()).      Reimplement read() and write() if you want to control how items are     represented in their serialized form.      Reimplement \l{operator<()} if you want to control the semantics of item     comparison. \l{operator<()} determines the sorted order when sorting items     with sortChildren() or with QStandardItemModel::sort().      \sa QStandardItemModel, {Item View Convenience Classes}, {Model/View Programming} */
end_comment
begin_comment
comment|/*!     \enum QStandardItem::ItemType      This enum describes the types that are used to describe standard items.      \value Type     The default type for standard items.     \value UserType The minimum value for custom types. Values below UserType are                     reserved by Qt.      You can define new user types in QStandardItem subclasses to ensure that     custom items are treated specially; for example, when items are sorted.      \sa type() */
end_comment
begin_comment
comment|/*!     Constructs an item. */
end_comment
begin_constructor
DECL|function|QStandardItem
name|QStandardItem
operator|::
name|QStandardItem
parameter_list|()
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QStandardItemPrivate
argument_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
name|d
operator|->
name|q_ptr
operator|=
name|this
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs an item with the given \a text. */
end_comment
begin_constructor
DECL|function|QStandardItem
name|QStandardItem
operator|::
name|QStandardItem
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QStandardItemPrivate
argument_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
name|d
operator|->
name|q_ptr
operator|=
name|this
expr_stmt|;
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs an item with the given \a icon and \a text. */
end_comment
begin_constructor
DECL|function|QStandardItem
name|QStandardItem
operator|::
name|QStandardItem
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QStandardItemPrivate
argument_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
name|d
operator|->
name|q_ptr
operator|=
name|this
expr_stmt|;
name|setIcon
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!    Constructs an item with \a rows rows and \a columns columns of child items. */
end_comment
begin_constructor
DECL|function|QStandardItem
name|QStandardItem
operator|::
name|QStandardItem
parameter_list|(
name|int
name|rows
parameter_list|,
name|int
name|columns
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QStandardItemPrivate
argument_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
name|d
operator|->
name|q_ptr
operator|=
name|this
expr_stmt|;
name|setRowCount
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|setColumnCount
argument_list|(
name|columns
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   \internal */
end_comment
begin_constructor
DECL|function|QStandardItem
name|QStandardItem
operator|::
name|QStandardItem
parameter_list|(
name|QStandardItemPrivate
modifier|&
name|dd
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
operator|&
name|dd
argument_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
name|d
operator|->
name|q_ptr
operator|=
name|this
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   Constructs a copy of \a other. Note that model() is   not copied.    This function is useful when reimplementing clone(). */
end_comment
begin_constructor
DECL|function|QStandardItem
name|QStandardItem
operator|::
name|QStandardItem
parameter_list|(
specifier|const
name|QStandardItem
modifier|&
name|other
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QStandardItemPrivate
argument_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
name|d
operator|->
name|q_ptr
operator|=
name|this
expr_stmt|;
name|operator
name|=
parameter_list|(
name|other
parameter_list|)
function_decl|;
block|}
end_constructor
begin_comment
comment|/*!   Assigns \a other's data and flags to this item. Note that   type() and model() are not copied.    This function is useful when reimplementing clone(). */
end_comment
begin_function
DECL|function|operator =
name|QStandardItem
modifier|&
name|QStandardItem
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QStandardItem
modifier|&
name|other
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
name|d
operator|->
name|values
operator|=
name|other
operator|.
name|d_func
argument_list|()
operator|->
name|values
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!   Destructs the item.   This causes the item's children to be destructed as well. */
end_comment
begin_destructor
DECL|function|~QStandardItem
name|QStandardItem
operator|::
name|~
name|QStandardItem
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!   Returns the item's parent item, or 0 if the item has no parent.   \note For toplevel items parent() returns 0. To receive toplevel   item's parent use QStandardItemModel::invisibleRootItem() instead.    \sa child(), QStandardItemModel::invisibleRootItem() */
end_comment
begin_function
DECL|function|parent
name|QStandardItem
modifier|*
name|QStandardItem
operator|::
name|parent
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItem
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|model
operator|||
operator|(
name|d
operator|->
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|root
operator|.
name|data
argument_list|()
operator|!=
name|d
operator|->
name|parent
operator|)
condition|)
return|return
name|d
operator|->
name|parent
return|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the item's data for the given \a role to the specified \a value.      If you subclass QStandardItem and reimplement this function, your     reimplementation should call emitDataChanged() if you do not call     the base implementation of setData(). This will ensure that e.g.     views using the model are notified of the changes.      \note The default implementation treats Qt::EditRole and Qt::DisplayRole     as referring to the same data.      \sa Qt::ItemDataRole, data(), setFlags() */
end_comment
begin_function
DECL|function|setData
name|void
name|QStandardItem
operator|::
name|setData
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|role
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
name|role
operator|=
operator|(
name|role
operator|==
name|Qt
operator|::
name|EditRole
operator|)
condition|?
name|Qt
operator|::
name|DisplayRole
else|:
name|role
expr_stmt|;
name|QVector
argument_list|<
name|QStandardItemData
argument_list|>
operator|::
name|iterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|d
operator|->
name|values
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|d
operator|->
name|values
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|.
name|role
operator|==
name|role
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|.
name|value
operator|.
name|type
argument_list|()
operator|==
name|value
operator|.
name|type
argument_list|()
operator|&&
operator|(
operator|*
name|it
operator|)
operator|.
name|value
operator|==
name|value
condition|)
return|return;
operator|(
operator|*
name|it
operator|)
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|values
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|model
condition|)
name|d
operator|->
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|itemChanged
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|d
operator|->
name|values
operator|.
name|append
argument_list|(
name|QStandardItemData
argument_list|(
name|role
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|model
condition|)
name|d
operator|->
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|itemChanged
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the item's data for the given \a role, or an invalid     QVariant if there is no data for the role.      \note The default implementation treats Qt::EditRole and Qt::DisplayRole     as referring to the same data. */
end_comment
begin_function
DECL|function|data
name|QVariant
name|QStandardItem
operator|::
name|data
parameter_list|(
name|int
name|role
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItem
argument_list|)
expr_stmt|;
name|role
operator|=
operator|(
name|role
operator|==
name|Qt
operator|::
name|EditRole
operator|)
condition|?
name|Qt
operator|::
name|DisplayRole
else|:
name|role
expr_stmt|;
name|QVector
argument_list|<
name|QStandardItemData
argument_list|>
operator|::
name|const_iterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|d
operator|->
name|values
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|d
operator|->
name|values
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|.
name|role
operator|==
name|role
condition|)
return|return
operator|(
operator|*
name|it
operator|)
operator|.
name|value
return|;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \since 4.4    Causes the model associated with this item to emit a   \l{QAbstractItemModel::dataChanged()}{dataChanged}() signal for this   item.    You normally only need to call this function if you have subclassed   QStandardItem and reimplemented data() and/or setData().    \sa setData() */
end_comment
begin_function
DECL|function|emitDataChanged
name|void
name|QStandardItem
operator|::
name|emitDataChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|model
condition|)
name|d
operator|->
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|itemChanged
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Sets the item flags for the item to \a flags.    The item flags determine how the user can interact with the item.   This is often used to disable an item.    \sa flags(), setData() */
end_comment
begin_function
DECL|function|setFlags
name|void
name|QStandardItem
operator|::
name|setFlags
parameter_list|(
name|Qt
operator|::
name|ItemFlags
name|flags
parameter_list|)
block|{
name|setData
argument_list|(
operator|(
name|int
operator|)
name|flags
argument_list|,
name|Qt
operator|::
name|UserRole
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the item flags for the item.    The item flags determine how the user can interact with the item.    By default, items are enabled, editable, selectable, checkable, and can be   used both as the source of a drag and drop operation and as a drop target.    \sa setFlags() */
end_comment
begin_function
DECL|function|flags
name|Qt
operator|::
name|ItemFlags
name|QStandardItem
operator|::
name|flags
parameter_list|()
specifier|const
block|{
name|QVariant
name|v
init|=
name|data
argument_list|(
name|Qt
operator|::
name|UserRole
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|v
operator|.
name|isValid
argument_list|()
condition|)
return|return
operator|(
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsEditable
operator||
name|Qt
operator|::
name|ItemIsDragEnabled
operator||
name|Qt
operator|::
name|ItemIsDropEnabled
operator|)
return|;
return|return
name|Qt
operator|::
name|ItemFlags
argument_list|(
name|v
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QString QStandardItem::text() const      Returns the item's text. This is the text that's presented to the user     in a view.      \sa setText() */
end_comment
begin_comment
comment|/*!     \fn void QStandardItem::setText(const QString&text)      Sets the item's text to the \a text specified.      \sa text(), setFont(), setForeground() */
end_comment
begin_comment
comment|/*!     \fn QIcon QStandardItem::icon() const      Returns the item's icon.      \sa setIcon(), {QAbstractItemView::iconSize}{iconSize} */
end_comment
begin_comment
comment|/*!     \fn void QStandardItem::setIcon(const QIcon&icon)      Sets the item's icon to the \a icon specified. */
end_comment
begin_comment
comment|/*!     \fn QString QStandardItem::statusTip() const      Returns the item's status tip.      \sa setStatusTip(), toolTip(), whatsThis() */
end_comment
begin_comment
comment|/*!     \fn void QStandardItem::setStatusTip(const QString&statusTip)      Sets the item's status tip to the string specified by \a statusTip.      \sa statusTip(), setToolTip(), setWhatsThis() */
end_comment
begin_comment
comment|/*!     \fn QString QStandardItem::toolTip() const      Returns the item's tooltip.      \sa setToolTip(), statusTip(), whatsThis() */
end_comment
begin_comment
comment|/*!     \fn void QStandardItem::setToolTip(const QString&toolTip)      Sets the item's tooltip to the string specified by \a toolTip.      \sa toolTip(), setStatusTip(), setWhatsThis() */
end_comment
begin_comment
comment|/*!     \fn QString QStandardItem::whatsThis() const      Returns the item's "What's This?" help.      \sa setWhatsThis(), toolTip(), statusTip() */
end_comment
begin_comment
comment|/*!     \fn void QStandardItem::setWhatsThis(const QString&whatsThis)      Sets the item's "What's This?" help to the string specified by \a whatsThis.      \sa whatsThis(), setStatusTip(), setToolTip() */
end_comment
begin_comment
comment|/*!     \fn QFont QStandardItem::font() const      Returns the font used to render the item's text.      \sa setFont() */
end_comment
begin_comment
comment|/*!     \fn void QStandardItem::setFont(const QFont&font)      Sets the font used to display the item's text to the given \a font.      \sa font(), setText(), setForeground() */
end_comment
begin_comment
comment|/*!     \fn QBrush QStandardItem::background() const      Returns the brush used to render the item's background.      \sa foreground(), setBackground() */
end_comment
begin_comment
comment|/*!     \fn void QStandardItem::setBackground(const QBrush&brush)      Sets the item's background brush to the specified \a brush.      \sa background(), setForeground() */
end_comment
begin_comment
comment|/*!     \fn QBrush QStandardItem::foreground() const      Returns the brush used to render the item's foreground (e.g. text).      \sa setForeground(), background() */
end_comment
begin_comment
comment|/*!     \fn void QStandardItem::setForeground(const QBrush&brush)      Sets the brush used to display the item's foreground (e.g. text) to the     given \a brush.      \sa foreground(), setBackground(), setFont() */
end_comment
begin_comment
comment|/*!     \fn int QStandardItem::textAlignment() const      Returns the text alignment for the item's text. */
end_comment
begin_comment
comment|/*!     \fn void QStandardItem::setTextAlignment(Qt::Alignment alignment)      Sets the text alignment for the item's text to the \a alignment     specified.      \sa textAlignment() */
end_comment
begin_comment
comment|/*!     \fn QSize QStandardItem::sizeHint() const      Returns the size hint set for the item, or an invalid QSize if no     size hint has been set.      If no size hint has been set, the item delegate will compute the     size hint based on the item data.      \sa setSizeHint() */
end_comment
begin_comment
comment|/*!     \fn void QStandardItem::setSizeHint(const QSize&size)      Sets the size hint for the item to be \a size.     If no size hint is set, the item delegate will compute the     size hint based on the item data.      \sa sizeHint() */
end_comment
begin_comment
comment|/*!     \fn Qt::CheckState QStandardItem::checkState() const      Returns the checked state of the item.      \sa setCheckState(), isCheckable() */
end_comment
begin_comment
comment|/*!     \fn void QStandardItem::setCheckState(Qt::CheckState state)      Sets the check state of the item to be \a state.      \sa checkState(), setCheckable() */
end_comment
begin_comment
comment|/*!     \fn QString QStandardItem::accessibleText() const      Returns the item's accessible text.      The accessible text is used by assistive technologies (i.e. for users who     cannot use conventional means of interaction).      \sa setAccessibleText(), accessibleDescription() */
end_comment
begin_comment
comment|/*!     \fn void QStandardItem::setAccessibleText(const QString&accessibleText)      Sets the item's accessible text to the string specified by \a accessibleText.      The accessible text is used by assistive technologies (i.e. for users who     cannot use conventional means of interaction).      \sa accessibleText(), setAccessibleDescription() */
end_comment
begin_comment
comment|/*!     \fn QString QStandardItem::accessibleDescription() const      Returns the item's accessible description.      The accessible description is used by assistive technologies (i.e. for     users who cannot use conventional means of interaction).      \sa setAccessibleDescription(), accessibleText() */
end_comment
begin_comment
comment|/*!     \fn void QStandardItem::setAccessibleDescription(const QString&accessibleDescription)      Sets the item's accessible description to the string specified by \a     accessibleDescription.      The accessible description is used by assistive technologies (i.e. for     users who cannot use conventional means of interaction).      \sa accessibleDescription(), setAccessibleText() */
end_comment
begin_comment
comment|/*!   Sets whether the item is enabled. If \a enabled is true, the item is enabled,   meaning that the user can interact with the item; if \a enabled is false, the   user cannot interact with the item.    This flag takes precedence over the other item flags; e.g. if an item is not   enabled, it cannot be selected by the user, even if the Qt::ItemIsSelectable   flag has been set.    \sa isEnabled(), Qt::ItemIsEnabled, setFlags() */
end_comment
begin_function
DECL|function|setEnabled
name|void
name|QStandardItem
operator|::
name|setEnabled
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
name|d
operator|->
name|changeFlags
argument_list|(
name|enabled
argument_list|,
name|Qt
operator|::
name|ItemIsEnabled
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \fn bool QStandardItem::isEnabled() const    Returns whether the item is enabled.    When an item is enabled, the user can interact with it. The possible   types of interaction are specified by the other item flags, such as   isEditable() and isSelectable().    The default value is true.    \sa setEnabled(), flags() */
end_comment
begin_comment
comment|/*!   Sets whether the item is editable. If \a editable is true, the item can be   edited by the user; otherwise, the user cannot edit the item.    How the user can edit items in a view is determined by the view's edit   triggers; see QAbstractItemView::editTriggers.    \sa isEditable(), setFlags() */
end_comment
begin_function
DECL|function|setEditable
name|void
name|QStandardItem
operator|::
name|setEditable
parameter_list|(
name|bool
name|editable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
name|d
operator|->
name|changeFlags
argument_list|(
name|editable
argument_list|,
name|Qt
operator|::
name|ItemIsEditable
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \fn bool QStandardItem::isEditable() const    Returns whether the item can be edited by the user.    When an item is editable (and enabled), the user can edit the item by   invoking one of the view's edit triggers; see   QAbstractItemView::editTriggers.    The default value is true.    \sa setEditable(), flags() */
end_comment
begin_comment
comment|/*!   Sets whether the item is selectable. If \a selectable is true, the item   can be selected by the user; otherwise, the user cannot select the item.    You can control the selection behavior and mode by manipulating their   view properties; see QAbstractItemView::selectionMode and   QAbstractItemView::selectionBehavior.    \sa isSelectable(), setFlags() */
end_comment
begin_function
DECL|function|setSelectable
name|void
name|QStandardItem
operator|::
name|setSelectable
parameter_list|(
name|bool
name|selectable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
name|d
operator|->
name|changeFlags
argument_list|(
name|selectable
argument_list|,
name|Qt
operator|::
name|ItemIsSelectable
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \fn bool QStandardItem::isSelectable() const    Returns whether the item is selectable by the user.    The default value is true.    \sa setSelectable(), flags() */
end_comment
begin_comment
comment|/*!   Sets whether the item is user-checkable. If \a checkable is true, the   item can be checked by the user; otherwise, the user cannot check   the item.    The item delegate will render a checkable item with a check box next to the   item's text.    \sa isCheckable(), setCheckState(), setTristate() */
end_comment
begin_function
DECL|function|setCheckable
name|void
name|QStandardItem
operator|::
name|setCheckable
parameter_list|(
name|bool
name|checkable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkable
operator|&&
operator|!
name|isCheckable
argument_list|()
condition|)
block|{
comment|// make sure there's data for the checkstate role
if|if
condition|(
operator|!
name|data
argument_list|(
name|Qt
operator|::
name|CheckStateRole
argument_list|)
operator|.
name|isValid
argument_list|()
condition|)
name|setData
argument_list|(
name|Qt
operator|::
name|Unchecked
argument_list|,
name|Qt
operator|::
name|CheckStateRole
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|changeFlags
argument_list|(
name|checkable
argument_list|,
name|Qt
operator|::
name|ItemIsUserCheckable
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \fn bool QStandardItem::isCheckable() const    Returns whether the item is user-checkable.    The default value is false.    \sa setCheckable(), checkState(), isTristate() */
end_comment
begin_comment
comment|/*!   Sets whether the item is tristate. If \a tristate is true, the   item is checkable with three separate states; otherwise, the item   is checkable with two states. (Note that this also requires that   the item is checkable; see isCheckable().)    \sa isTristate(), setCheckable(), setCheckState() */
end_comment
begin_function
DECL|function|setTristate
name|void
name|QStandardItem
operator|::
name|setTristate
parameter_list|(
name|bool
name|tristate
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
name|d
operator|->
name|changeFlags
argument_list|(
name|tristate
argument_list|,
name|Qt
operator|::
name|ItemIsTristate
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \fn bool QStandardItem::isTristate() const    Returns whether the item is tristate; that is, if it's checkable with three   separate states.    The default value is false.    \sa setTristate(), isCheckable(), checkState() */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_comment
comment|/*!   Sets whether the item is drag enabled. If \a dragEnabled is true, the item   can be dragged by the user; otherwise, the user cannot drag the item.    Note that you also need to ensure that item dragging is enabled in the view;   see QAbstractItemView::dragEnabled.    \sa isDragEnabled(), setDropEnabled(), setFlags() */
end_comment
begin_function
DECL|function|setDragEnabled
name|void
name|QStandardItem
operator|::
name|setDragEnabled
parameter_list|(
name|bool
name|dragEnabled
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
name|d
operator|->
name|changeFlags
argument_list|(
name|dragEnabled
argument_list|,
name|Qt
operator|::
name|ItemIsDragEnabled
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \fn bool QStandardItem::isDragEnabled() const    Returns whether the item is drag enabled. An item that is drag enabled can   be dragged by the user.    The default value is true.    Note that item dragging must be enabled in the view for dragging to work;   see QAbstractItemView::dragEnabled.    \sa setDragEnabled(), isDropEnabled(), flags() */
end_comment
begin_comment
comment|/*!   Sets whether the item is drop enabled. If \a dropEnabled is true, the item   can be used as a drop target; otherwise, it cannot.    Note that you also need to ensure that drops are enabled in the view; see   QWidget::acceptDrops(); and that the model supports the desired drop actions;   see QAbstractItemModel::supportedDropActions().    \sa isDropEnabled(), setDragEnabled(), setFlags() */
end_comment
begin_function
DECL|function|setDropEnabled
name|void
name|QStandardItem
operator|::
name|setDropEnabled
parameter_list|(
name|bool
name|dropEnabled
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
name|d
operator|->
name|changeFlags
argument_list|(
name|dropEnabled
argument_list|,
name|Qt
operator|::
name|ItemIsDropEnabled
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \fn bool QStandardItem::isDropEnabled() const    Returns whether the item is drop enabled. When an item is drop enabled, it   can be used as a drop target.    The default value is true.    \sa setDropEnabled(), isDragEnabled(), flags() */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
begin_comment
comment|/*!   Returns the row where the item is located in its parent's child table, or   -1 if the item has no parent.    \sa column(), parent() */
end_comment
begin_function
DECL|function|row
name|int
name|QStandardItem
operator|::
name|row
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItem
argument_list|)
expr_stmt|;
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|pos
init|=
name|d
operator|->
name|position
argument_list|()
decl_stmt|;
return|return
name|pos
operator|.
name|first
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the column where the item is located in its parent's child table,   or -1 if the item has no parent.    \sa row(), parent() */
end_comment
begin_function
DECL|function|column
name|int
name|QStandardItem
operator|::
name|column
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItem
argument_list|)
expr_stmt|;
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|pos
init|=
name|d
operator|->
name|position
argument_list|()
decl_stmt|;
return|return
name|pos
operator|.
name|second
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the QModelIndex associated with this item.    When you need to invoke item functionality in a QModelIndex-based API (e.g.   QAbstractItemView), you can call this function to obtain an index that   corresponds to the item's location in the model.    If the item is not associated with a model, an invalid QModelIndex is   returned.    \sa model(), QStandardItemModel::itemFromIndex() */
end_comment
begin_function
DECL|function|index
name|QModelIndex
name|QStandardItem
operator|::
name|index
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItem
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
condition|?
name|d
operator|->
name|model
operator|->
name|indexFromItem
argument_list|(
name|this
argument_list|)
else|:
name|QModelIndex
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the QStandardItemModel that this item belongs to.    If the item is not a child of another item that belongs to the model, this   function returns 0.    \sa index() */
end_comment
begin_function
DECL|function|model
name|QStandardItemModel
modifier|*
name|QStandardItem
operator|::
name|model
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItem
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the number of child item rows to \a rows. If this is less than     rowCount(), the data in the unwanted rows is discarded.      \sa rowCount(), setColumnCount() */
end_comment
begin_function
DECL|function|setRowCount
name|void
name|QStandardItem
operator|::
name|setRowCount
parameter_list|(
name|int
name|rows
parameter_list|)
block|{
name|int
name|rc
init|=
name|rowCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
operator|==
name|rows
condition|)
return|return;
if|if
condition|(
name|rc
operator|<
name|rows
condition|)
name|insertRows
argument_list|(
name|qMax
argument_list|(
name|rc
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rows
operator|-
name|rc
argument_list|)
expr_stmt|;
else|else
name|removeRows
argument_list|(
name|qMax
argument_list|(
name|rows
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rc
operator|-
name|rows
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of child item rows that the item has.      \sa setRowCount(), columnCount() */
end_comment
begin_function
DECL|function|rowCount
name|int
name|QStandardItem
operator|::
name|rowCount
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItem
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|rowCount
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the number of child item columns to \a columns. If this is less than     columnCount(), the data in the unwanted columns is discarded.      \sa columnCount(), setRowCount() */
end_comment
begin_function
DECL|function|setColumnCount
name|void
name|QStandardItem
operator|::
name|setColumnCount
parameter_list|(
name|int
name|columns
parameter_list|)
block|{
name|int
name|cc
init|=
name|columnCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|cc
operator|==
name|columns
condition|)
return|return;
if|if
condition|(
name|cc
operator|<
name|columns
condition|)
name|insertColumns
argument_list|(
name|qMax
argument_list|(
name|cc
argument_list|,
literal|0
argument_list|)
argument_list|,
name|columns
operator|-
name|cc
argument_list|)
expr_stmt|;
else|else
name|removeColumns
argument_list|(
name|qMax
argument_list|(
name|columns
argument_list|,
literal|0
argument_list|)
argument_list|,
name|cc
operator|-
name|columns
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of child item columns that the item has.      \sa setColumnCount(), rowCount() */
end_comment
begin_function
DECL|function|columnCount
name|int
name|QStandardItem
operator|::
name|columnCount
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItem
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|columnCount
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Inserts a row at \a row containing \a items. If necessary, the column     count is increased to the size of \a items.      \sa insertRows(), insertColumn() */
end_comment
begin_function
DECL|function|insertRow
name|void
name|QStandardItem
operator|::
name|insertRow
parameter_list|(
name|int
name|row
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
modifier|&
name|items
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|<
literal|0
condition|)
return|return;
if|if
condition|(
name|columnCount
argument_list|()
operator|<
name|items
operator|.
name|count
argument_list|()
condition|)
name|setColumnCount
argument_list|(
name|items
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|insertRows
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|items
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Inserts \a items at \a row. The column count wont be changed.      \sa insertRow(), insertColumn() */
end_comment
begin_function
DECL|function|insertRows
name|void
name|QStandardItem
operator|::
name|insertRows
parameter_list|(
name|int
name|row
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
modifier|&
name|items
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|<
literal|0
condition|)
return|return;
name|d
operator|->
name|insertRows
argument_list|(
name|row
argument_list|,
name|items
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Inserts a column at \a column containing \a items. If necessary,     the row count is increased to the size of \a items.      \sa insertColumns(), insertRow() */
end_comment
begin_function
DECL|function|insertColumn
name|void
name|QStandardItem
operator|::
name|insertColumn
parameter_list|(
name|int
name|column
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
modifier|&
name|items
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
if|if
condition|(
name|column
operator|<
literal|0
condition|)
return|return;
if|if
condition|(
name|rowCount
argument_list|()
operator|<
name|items
operator|.
name|count
argument_list|()
condition|)
name|setRowCount
argument_list|(
name|items
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|insertColumns
argument_list|(
name|column
argument_list|,
literal|1
argument_list|,
name|items
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Inserts \a count rows of child items at row \a row.      \sa insertRow(), insertColumns() */
end_comment
begin_function
DECL|function|insertRows
name|void
name|QStandardItem
operator|::
name|insertRows
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
if|if
condition|(
name|rowCount
argument_list|()
operator|<
name|row
condition|)
block|{
name|count
operator|+=
name|row
operator|-
name|rowCount
argument_list|()
expr_stmt|;
name|row
operator|=
name|rowCount
argument_list|()
expr_stmt|;
block|}
name|d
operator|->
name|insertRows
argument_list|(
name|row
argument_list|,
name|count
argument_list|,
name|QList
argument_list|<
name|QStandardItem
operator|*
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Inserts \a count columns of child items at column \a column.      \sa insertColumn(), insertRows() */
end_comment
begin_function
DECL|function|insertColumns
name|void
name|QStandardItem
operator|::
name|insertColumns
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
if|if
condition|(
name|columnCount
argument_list|()
operator|<
name|column
condition|)
block|{
name|count
operator|+=
name|column
operator|-
name|columnCount
argument_list|()
expr_stmt|;
name|column
operator|=
name|columnCount
argument_list|()
expr_stmt|;
block|}
name|d
operator|->
name|insertColumns
argument_list|(
name|column
argument_list|,
name|count
argument_list|,
name|QList
argument_list|<
name|QStandardItem
operator|*
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QStandardItem::appendRow(const QList<QStandardItem*>&items)      Appends a row containing \a items. If necessary, the column count is     increased to the size of \a items.      \sa insertRow() */
end_comment
begin_comment
comment|/*!     \fn void QStandardItem::appendRows(const QList<QStandardItem*>&items)      Appends rows containing \a items.  The column count will not change.      \sa insertRow() */
end_comment
begin_comment
comment|/*!     \fn void QStandardItem::appendColumn(const QList<QStandardItem*>&items)      Appends a column containing \a items. If necessary, the row count is     increased to the size of \a items.      \sa insertColumn() */
end_comment
begin_comment
comment|/*!     \fn bool QStandardItemModel::insertRow(int row, const QModelIndex&parent)      Inserts a single row before the given \a row in the child items of the     \a parent specified. Returns true if the row is inserted; otherwise     returns false.      \sa insertRows(), insertColumn(), removeRow() */
end_comment
begin_comment
comment|/*!     \fn bool QStandardItemModel::insertColumn(int column, const QModelIndex&parent)      Inserts a single column before the given \a column in the child items of     the \a parent specified. Returns true if the column is inserted; otherwise     returns false.      \sa insertColumns(), insertRow(), removeColumn() */
end_comment
begin_comment
comment|/*!     \fn QStandardItem::insertRow(int row, QStandardItem *item)     \overload      Inserts a row at \a row containing \a item.      When building a list or a tree that has only one column, this function     provides a convenient way to insert a single new item. */
end_comment
begin_comment
comment|/*!     \fn QStandardItem::appendRow(QStandardItem *item)     \overload      Appends a row containing \a item.      When building a list or a tree that has only one column, this function     provides a convenient way to append a single new item. */
end_comment
begin_comment
comment|/*!     Removes the given \a row. The items that were in the row are deleted.      \sa takeRow(), removeRows(), removeColumn() */
end_comment
begin_function
DECL|function|removeRow
name|void
name|QStandardItem
operator|::
name|removeRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|removeRows
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Removes the given \a column. The items that were in the     column are deleted.      \sa takeColumn(), removeColumns(), removeRow() */
end_comment
begin_function
DECL|function|removeColumn
name|void
name|QStandardItem
operator|::
name|removeColumn
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|removeColumns
argument_list|(
name|column
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Removes \a count rows at row \a row. The items that were in those rows are     deleted.      \sa removeRow(), removeColumn() */
end_comment
begin_function
DECL|function|removeRows
name|void
name|QStandardItem
operator|::
name|removeRows
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|count
operator|<
literal|1
operator|)
operator|||
operator|(
name|row
operator|<
literal|0
operator|)
operator|||
operator|(
operator|(
name|row
operator|+
name|count
operator|)
operator|>
name|rowCount
argument_list|()
operator|)
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|model
condition|)
name|d
operator|->
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|rowsAboutToBeRemoved
argument_list|(
name|this
argument_list|,
name|row
argument_list|,
name|row
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|d
operator|->
name|childIndex
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|n
init|=
name|count
operator|*
name|d
operator|->
name|columnCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<
name|n
operator|+
name|i
condition|;
operator|++
name|j
control|)
block|{
name|QStandardItem
modifier|*
name|oldItem
init|=
name|d
operator|->
name|children
operator|.
name|at
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldItem
condition|)
name|oldItem
operator|->
name|d_func
argument_list|()
operator|->
name|setModel
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|oldItem
expr_stmt|;
block|}
name|d
operator|->
name|children
operator|.
name|remove
argument_list|(
name|qMax
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|d
operator|->
name|rows
operator|-=
name|count
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|model
condition|)
name|d
operator|->
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|rowsRemoved
argument_list|(
name|this
argument_list|,
name|row
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Removes \a count columns at column \a column. The items that were in those     columns are deleted.      \sa removeColumn(), removeRows() */
end_comment
begin_function
DECL|function|removeColumns
name|void
name|QStandardItem
operator|::
name|removeColumns
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|count
operator|<
literal|1
operator|)
operator|||
operator|(
name|column
operator|<
literal|0
operator|)
operator|||
operator|(
operator|(
name|column
operator|+
name|count
operator|)
operator|>
name|columnCount
argument_list|()
operator|)
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|model
condition|)
name|d
operator|->
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|columnsAboutToBeRemoved
argument_list|(
name|this
argument_list|,
name|column
argument_list|,
name|column
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
name|d
operator|->
name|rowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>=
literal|0
condition|;
operator|--
name|row
control|)
block|{
name|int
name|i
init|=
name|d
operator|->
name|childIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<
name|i
operator|+
name|count
condition|;
operator|++
name|j
control|)
block|{
name|QStandardItem
modifier|*
name|oldItem
init|=
name|d
operator|->
name|children
operator|.
name|at
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldItem
condition|)
name|oldItem
operator|->
name|d_func
argument_list|()
operator|->
name|setModel
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|oldItem
expr_stmt|;
block|}
name|d
operator|->
name|children
operator|.
name|remove
argument_list|(
name|i
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|columns
operator|-=
name|count
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|model
condition|)
name|d
operator|->
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|columnsRemoved
argument_list|(
name|this
argument_list|,
name|column
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns true if this item has any children; otherwise returns false.      \sa rowCount(), columnCount(), child() */
end_comment
begin_function
DECL|function|hasChildren
name|bool
name|QStandardItem
operator|::
name|hasChildren
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|rowCount
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|(
name|columnCount
argument_list|()
operator|>
literal|0
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the child item at (\a row, \a column) to \a item. This item (the parent     item) takes ownership of \a item. If necessary, the row count and column     count are increased to fit the item.      \sa child() */
end_comment
begin_function
DECL|function|setChild
name|void
name|QStandardItem
operator|::
name|setChild
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
name|QStandardItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
name|d
operator|->
name|setChild
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|item
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn QStandardItem::setChild(int row, QStandardItem *item)     \overload      Sets the child at \a row to \a item. */
end_comment
begin_comment
comment|/*!     Returns the child item at (\a row, \a column) if one has been set; otherwise     returns 0.      \sa setChild(), takeChild(), parent() */
end_comment
begin_function
DECL|function|child
name|QStandardItem
modifier|*
name|QStandardItem
operator|::
name|child
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItem
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|d
operator|->
name|childIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
return|return
literal|0
return|;
return|return
name|d
operator|->
name|children
operator|.
name|at
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Removes the child item at (\a row, \a column) without deleting it, and returns     a pointer to the item. If there was no child at the given location, then     this function returns 0.      Note that this function, unlike takeRow() and takeColumn(), does not affect     the dimensions of the child table.      \sa child(), takeRow(), takeColumn() */
end_comment
begin_function
DECL|function|takeChild
name|QStandardItem
modifier|*
name|QStandardItem
operator|::
name|takeChild
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|item
init|=
literal|0
decl_stmt|;
name|int
name|index
init|=
name|d
operator|->
name|childIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|item
operator|=
name|d
operator|->
name|children
operator|.
name|at
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
condition|)
name|item
operator|->
name|d_func
argument_list|()
operator|->
name|setParentAndModel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|children
operator|.
name|replace
argument_list|(
name|index
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|item
return|;
block|}
end_function
begin_comment
comment|/*!     Removes \a row without deleting the row items, and returns a list of     pointers to the removed items. For items in the row that have not been     set, the corresponding pointers in the list will be 0.      \sa removeRow(), insertRow(), takeColumn() */
end_comment
begin_function
DECL|function|takeRow
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|QStandardItem
operator|::
name|takeRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|row
operator|<
literal|0
operator|)
operator|||
operator|(
name|row
operator|>=
name|rowCount
argument_list|()
operator|)
condition|)
return|return
name|QList
argument_list|<
name|QStandardItem
operator|*
argument_list|>
argument_list|()
return|;
if|if
condition|(
name|d
operator|->
name|model
condition|)
name|d
operator|->
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|rowsAboutToBeRemoved
argument_list|(
name|this
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|items
decl_stmt|;
name|int
name|index
init|=
name|d
operator|->
name|childIndex
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// Will return -1 if there are no columns
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|int
name|col_count
init|=
name|d
operator|->
name|columnCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|col_count
condition|;
operator|++
name|column
control|)
block|{
name|QStandardItem
modifier|*
name|ch
init|=
name|d
operator|->
name|children
operator|.
name|at
argument_list|(
name|index
operator|+
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
condition|)
name|ch
operator|->
name|d_func
argument_list|()
operator|->
name|setParentAndModel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|items
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|children
operator|.
name|remove
argument_list|(
name|index
argument_list|,
name|col_count
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|rows
operator|--
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|model
condition|)
name|d
operator|->
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|rowsRemoved
argument_list|(
name|this
argument_list|,
name|row
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|items
return|;
block|}
end_function
begin_comment
comment|/*!     Removes \a column without deleting the column items, and returns a list of     pointers to the removed items. For items in the column that have not been     set, the corresponding pointers in the list will be 0.      \sa removeColumn(), insertColumn(), takeRow() */
end_comment
begin_function
DECL|function|takeColumn
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|QStandardItem
operator|::
name|takeColumn
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|column
operator|<
literal|0
operator|)
operator|||
operator|(
name|column
operator|>=
name|columnCount
argument_list|()
operator|)
condition|)
return|return
name|QList
argument_list|<
name|QStandardItem
operator|*
argument_list|>
argument_list|()
return|;
if|if
condition|(
name|d
operator|->
name|model
condition|)
name|d
operator|->
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|columnsAboutToBeRemoved
argument_list|(
name|this
argument_list|,
name|column
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|items
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
name|d
operator|->
name|rowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>=
literal|0
condition|;
operator|--
name|row
control|)
block|{
name|int
name|index
init|=
name|d
operator|->
name|childIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
name|QStandardItem
modifier|*
name|ch
init|=
name|d
operator|->
name|children
operator|.
name|at
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
condition|)
name|ch
operator|->
name|d_func
argument_list|()
operator|->
name|setParentAndModel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|children
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|items
operator|.
name|prepend
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|columns
operator|--
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|model
condition|)
name|d
operator|->
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|columnsRemoved
argument_list|(
name|this
argument_list|,
name|column
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|items
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if this item is less than \a other; otherwise returns false.      The default implementation uses the data for the item's sort role (see     QStandardItemModel::sortRole) to perform the comparison if the item     belongs to a model; otherwise, the data for the item's Qt::DisplayRole     (text()) is used to perform the comparison.      sortChildren() and QStandardItemModel::sort() use this function when     sorting items. If you want custom sorting, you can subclass QStandardItem     and reimplement this function. */
end_comment
begin_function
DECL|function|operator <
name|bool
name|QStandardItem
operator|::
name|operator
name|<
parameter_list|(
specifier|const
name|QStandardItem
modifier|&
name|other
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|role
init|=
name|model
argument_list|()
condition|?
name|model
argument_list|()
operator|->
name|sortRole
argument_list|()
else|:
name|Qt
operator|::
name|DisplayRole
decl_stmt|;
specifier|const
name|QVariant
name|l
init|=
name|data
argument_list|(
name|role
argument_list|)
decl_stmt|,
name|r
init|=
name|other
operator|.
name|data
argument_list|(
name|role
argument_list|)
decl_stmt|;
comment|// this code is copied from QSortFilterProxyModel::lessThan()
switch|switch
condition|(
name|l
operator|.
name|userType
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Invalid
case|:
return|return
operator|(
name|r
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Invalid
operator|)
return|;
case|case
name|QVariant
operator|::
name|Int
case|:
return|return
name|l
operator|.
name|toInt
argument_list|()
operator|<
name|r
operator|.
name|toInt
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|UInt
case|:
return|return
name|l
operator|.
name|toUInt
argument_list|()
operator|<
name|r
operator|.
name|toUInt
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|LongLong
case|:
return|return
name|l
operator|.
name|toLongLong
argument_list|()
operator|<
name|r
operator|.
name|toLongLong
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|ULongLong
case|:
return|return
name|l
operator|.
name|toULongLong
argument_list|()
operator|<
name|r
operator|.
name|toULongLong
argument_list|()
return|;
case|case
name|QMetaType
operator|::
name|Float
case|:
return|return
name|l
operator|.
name|toFloat
argument_list|()
operator|<
name|r
operator|.
name|toFloat
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|Double
case|:
return|return
name|l
operator|.
name|toDouble
argument_list|()
operator|<
name|r
operator|.
name|toDouble
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|Char
case|:
return|return
name|l
operator|.
name|toChar
argument_list|()
operator|<
name|r
operator|.
name|toChar
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|Date
case|:
return|return
name|l
operator|.
name|toDate
argument_list|()
operator|<
name|r
operator|.
name|toDate
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|Time
case|:
return|return
name|l
operator|.
name|toTime
argument_list|()
operator|<
name|r
operator|.
name|toTime
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|DateTime
case|:
return|return
name|l
operator|.
name|toDateTime
argument_list|()
operator|<
name|r
operator|.
name|toDateTime
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|String
case|:
default|default:
return|return
name|l
operator|.
name|toString
argument_list|()
operator|.
name|compare
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
operator|<
literal|0
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     Sorts the children of the item using the given \a order, by the values in     the given \a column.      \note This function is recursive, therefore it sorts the children of the     item, its grandchildren, etc.      \sa {operator<()} */
end_comment
begin_function
DECL|function|sortChildren
name|void
name|QStandardItem
operator|::
name|sortChildren
parameter_list|(
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|column
operator|<
literal|0
operator|)
operator|||
operator|(
name|rowCount
argument_list|()
operator|==
literal|0
operator|)
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|model
condition|)
emit|emit
name|d
operator|->
name|model
operator|->
name|layoutAboutToBeChanged
argument_list|()
emit|;
name|d
operator|->
name|sortChildren
argument_list|(
name|column
argument_list|,
name|order
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|model
condition|)
emit|emit
name|d
operator|->
name|model
operator|->
name|layoutChanged
argument_list|()
emit|;
block|}
end_function
begin_comment
comment|/*!     Returns a copy of this item. The item's children are not copied.      When subclassing QStandardItem, you can reimplement this function     to provide QStandardItemModel with a factory that it can use to     create new items on demand.      \sa QStandardItemModel::setItemPrototype(), operator=() */
end_comment
begin_function
DECL|function|clone
name|QStandardItem
modifier|*
name|QStandardItem
operator|::
name|clone
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|QStandardItem
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the type of this item. The type is used to distinguish custom     items from the base class. When subclassing QStandardItem, you should     reimplement this function and return a new value greater than or equal     to \l UserType.      \sa QStandardItem::Type */
end_comment
begin_function
DECL|function|type
name|int
name|QStandardItem
operator|::
name|type
parameter_list|()
specifier|const
block|{
return|return
name|Type
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_comment
comment|/*!     Reads the item from stream \a in. Only the data and flags of the item are     read, not the child items.      \sa write() */
end_comment
begin_function
DECL|function|read
name|void
name|QStandardItem
operator|::
name|read
parameter_list|(
name|QDataStream
modifier|&
name|in
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItem
argument_list|)
expr_stmt|;
name|in
operator|>>
name|d
operator|->
name|values
expr_stmt|;
name|qint32
name|flags
decl_stmt|;
name|in
operator|>>
name|flags
expr_stmt|;
name|setFlags
argument_list|(
name|Qt
operator|::
name|ItemFlags
argument_list|(
name|flags
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Writes the item to stream \a out. Only the data and flags of the item     are written, not the child items.      \sa read() */
end_comment
begin_function
DECL|function|write
name|void
name|QStandardItem
operator|::
name|write
parameter_list|(
name|QDataStream
modifier|&
name|out
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItem
argument_list|)
expr_stmt|;
name|out
operator|<<
name|d
operator|->
name|values
expr_stmt|;
name|out
operator|<<
name|flags
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \relates QStandardItem     \since 4.2      Reads a QStandardItem from stream \a in into \a item.      This operator uses QStandardItem::read().      \sa {Serializing Qt Data Types} */
end_comment
begin_function
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|in
parameter_list|,
name|QStandardItem
modifier|&
name|item
parameter_list|)
block|{
name|item
operator|.
name|read
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|in
return|;
block|}
end_function
begin_comment
comment|/*!     \relates QStandardItem     \since 4.2      Writes the QStandardItem \a item to stream \a out.      This operator uses QStandardItem::write().      \sa {Serializing Qt Data Types} */
end_comment
begin_function
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|out
parameter_list|,
specifier|const
name|QStandardItem
modifier|&
name|item
parameter_list|)
block|{
name|item
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATASTREAM
end_comment
begin_comment
comment|/*!     \class QStandardItemModel     \brief The QStandardItemModel class provides a generic model for storing custom data.     \ingroup model-view     \inmodule QtGui      QStandardItemModel can be used as a repository for standard Qt     data types. It is one of the \l {Model/View Classes} and is part     of Qt's \l {Model/View Programming}{model/view} framework.      QStandardItemModel provides a classic item-based approach to working with     the model.  The items in a QStandardItemModel are provided by     QStandardItem.      QStandardItemModel implements the QAbstractItemModel interface, which     means that the model can be used to provide data in any view that supports     that interface (such as QListView, QTableView and QTreeView, and your own     custom views). For performance and flexibility, you may want to subclass     QAbstractItemModel to provide support for different kinds of data     repositories. For example, the QDirModel provides a model interface to the     underlying file system.      When you want a list or tree, you typically create an empty     QStandardItemModel and use appendRow() to add items to the model, and     item() to access an item.  If your model represents a table, you typically     pass the dimensions of the table to the QStandardItemModel constructor and     use setItem() to position items into the table. You can also use setRowCount()     and setColumnCount() to alter the dimensions of the model. To insert items,     use insertRow() or insertColumn(), and to remove items, use removeRow() or     removeColumn().      You can set the header labels of your model with setHorizontalHeaderLabels()     and setVerticalHeaderLabels().      You can search for items in the model with findItems(), and sort the model by     calling sort().      Call clear() to remove all items from the model.      An example usage of QStandardItemModel to create a table:      \snippet code/src_gui_itemviews_qstandarditemmodel.cpp 0      An example usage of QStandardItemModel to create a tree:      \snippet code/src_gui_itemviews_qstandarditemmodel.cpp 1      After setting the model on a view, you typically want to react to user     actions, such as an item being clicked. Since a QAbstractItemView provides     QModelIndex-based signals and functions, you need a way to obtain the     QStandardItem that corresponds to a given QModelIndex, and vice     versa. itemFromIndex() and indexFromItem() provide this mapping. Typical     usage of itemFromIndex() includes obtaining the item at the current index     in a view, and obtaining the item that corresponds to an index carried by     a QAbstractItemView signal, such as QAbstractItemView::clicked(). First     you connect the view's signal to a slot in your class:      \snippet code/src_gui_itemviews_qstandarditemmodel.cpp 2      When you receive the signal, you call itemFromIndex() on the given model     index to get a pointer to the item:      \snippet code/src_gui_itemviews_qstandarditemmodel.cpp 3      Conversely, you must obtain the QModelIndex of an item when you want to     invoke a model/view function that takes an index as argument. You can     obtain the index either by using the model's indexFromItem() function, or,     equivalently, by calling QStandardItem::index():      \snippet code/src_gui_itemviews_qstandarditemmodel.cpp 4      You are, of course, not required to use the item-based approach; you could     instead rely entirely on the QAbstractItemModel interface when working with     the model, or use a combination of the two as appropriate.      \sa QStandardItem, {Model/View Programming}, QAbstractItemModel,     {itemviews/simpletreemodel}{Simple Tree Model example},     {Item View Convenience Classes} */
end_comment
begin_comment
comment|/*!     \fn void QStandardItemModel::itemChanged(QStandardItem *item)     \since 4.2      This signal is emitted whenever the data of \a item has changed. */
end_comment
begin_comment
comment|/*!     Constructs a new item model with the given \a parent. */
end_comment
begin_constructor
DECL|function|QStandardItemModel
name|QStandardItemModel
operator|::
name|QStandardItemModel
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemModel
argument_list|(
operator|*
operator|new
name|QStandardItemModelPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
name|d
operator|->
name|root
operator|->
name|d_func
argument_list|()
operator|->
name|setModel
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a new item model that initially has \a rows rows and \a columns     columns, and that has the given \a parent. */
end_comment
begin_constructor
DECL|function|QStandardItemModel
name|QStandardItemModel
operator|::
name|QStandardItemModel
parameter_list|(
name|int
name|rows
parameter_list|,
name|int
name|columns
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemModel
argument_list|(
operator|*
operator|new
name|QStandardItemModelPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
name|d
operator|->
name|root
operator|->
name|insertColumns
argument_list|(
literal|0
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|d
operator|->
name|columnHeaderItems
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|columns
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|root
operator|->
name|insertRows
argument_list|(
literal|0
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|d
operator|->
name|rowHeaderItems
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|rows
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|root
operator|->
name|d_func
argument_list|()
operator|->
name|setModel
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   \internal */
end_comment
begin_constructor
DECL|function|QStandardItemModel
name|QStandardItemModel
operator|::
name|QStandardItemModel
parameter_list|(
name|QStandardItemModelPrivate
modifier|&
name|dd
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemModel
argument_list|(
name|dd
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destructs the model. The model destroys all its items. */
end_comment
begin_destructor
DECL|function|~QStandardItemModel
name|QStandardItemModel
operator|::
name|~
name|QStandardItemModel
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Sets the item role names to \a roleNames. */
end_comment
begin_function
DECL|function|setItemRoleNames
name|void
name|QStandardItemModel
operator|::
name|setItemRoleNames
parameter_list|(
specifier|const
name|QHash
argument_list|<
name|int
argument_list|,
name|QByteArray
argument_list|>
modifier|&
name|roleNames
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|roleNames
operator|=
name|roleNames
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Removes all items (including header items) from the model and sets the     number of rows and columns to zero.      \sa removeColumns(), removeRows() */
end_comment
begin_function
DECL|function|clear
name|void
name|QStandardItemModel
operator|::
name|clear
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|beginResetModel
argument_list|()
expr_stmt|;
name|d
operator|->
name|root
operator|.
name|reset
argument_list|(
operator|new
name|QStandardItem
argument_list|)
expr_stmt|;
name|d
operator|->
name|root
operator|->
name|d_func
argument_list|()
operator|->
name|setModel
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|d
operator|->
name|columnHeaderItems
argument_list|)
expr_stmt|;
name|d
operator|->
name|columnHeaderItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|d
operator|->
name|rowHeaderItems
argument_list|)
expr_stmt|;
name|d
operator|->
name|rowHeaderItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|endResetModel
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns a pointer to the QStandardItem associated with the given \a index.      Calling this function is typically the initial step when processing     QModelIndex-based signals from a view, such as     QAbstractItemView::activated(). In your slot, you call itemFromIndex(),     with the QModelIndex carried by the signal as argument, to obtain a     pointer to the corresponding QStandardItem.      Note that this function will lazily create an item for the index (using     itemPrototype()), and set it in the parent item's child table, if no item     already exists at that index.      If \a index is an invalid index, this function returns 0.      \sa indexFromItem() */
end_comment
begin_function
DECL|function|itemFromIndex
name|QStandardItem
modifier|*
name|QStandardItemModel
operator|::
name|itemFromIndex
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItemModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|index
operator|.
name|row
argument_list|()
operator|<
literal|0
operator|)
operator|||
operator|(
name|index
operator|.
name|column
argument_list|()
operator|<
literal|0
operator|)
operator|||
operator|(
name|index
operator|.
name|model
argument_list|()
operator|!=
name|this
operator|)
condition|)
return|return
literal|0
return|;
name|QStandardItem
modifier|*
name|parent
init|=
cast|static_cast
argument_list|<
name|QStandardItem
operator|*
argument_list|>
argument_list|(
name|index
operator|.
name|internalPointer
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|0
condition|)
return|return
literal|0
return|;
name|QStandardItem
modifier|*
name|item
init|=
name|parent
operator|->
name|child
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
decl_stmt|;
comment|// lazy part
if|if
condition|(
name|item
operator|==
literal|0
condition|)
block|{
name|item
operator|=
name|d
operator|->
name|createItem
argument_list|()
expr_stmt|;
name|parent
operator|->
name|d_func
argument_list|()
operator|->
name|setChild
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
return|return
name|item
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the QModelIndex associated with the given \a item.      Use this function when you want to perform an operation that requires the     QModelIndex of the item, such as     QAbstractItemView::scrollTo(). QStandardItem::index() is provided as     convenience; it is equivalent to calling this function.      \sa itemFromIndex(), QStandardItem::index() */
end_comment
begin_function
DECL|function|indexFromItem
name|QModelIndex
name|QStandardItemModel
operator|::
name|indexFromItem
parameter_list|(
specifier|const
name|QStandardItem
modifier|*
name|item
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|item
operator|&&
name|item
operator|->
name|d_func
argument_list|()
operator|->
name|parent
condition|)
block|{
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|pos
init|=
name|item
operator|->
name|d_func
argument_list|()
operator|->
name|position
argument_list|()
decl_stmt|;
return|return
name|createIndex
argument_list|(
name|pos
operator|.
name|first
argument_list|,
name|pos
operator|.
name|second
argument_list|,
name|item
operator|->
name|d_func
argument_list|()
operator|->
name|parent
argument_list|)
return|;
block|}
return|return
name|QModelIndex
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Sets the number of rows in this model to \a rows. If     this is less than rowCount(), the data in the unwanted rows     is discarded.      \sa setColumnCount() */
end_comment
begin_function
DECL|function|setRowCount
name|void
name|QStandardItemModel
operator|::
name|setRowCount
parameter_list|(
name|int
name|rows
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|root
operator|->
name|setRowCount
argument_list|(
name|rows
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Sets the number of columns in this model to \a columns. If     this is less than columnCount(), the data in the unwanted columns     is discarded.      \sa setRowCount() */
end_comment
begin_function
DECL|function|setColumnCount
name|void
name|QStandardItemModel
operator|::
name|setColumnCount
parameter_list|(
name|int
name|columns
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|root
operator|->
name|setColumnCount
argument_list|(
name|columns
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Sets the item for the given \a row and \a column to \a item. The model     takes ownership of the item. If necessary, the row count and column count     are increased to fit the item. The previous item at the given location (if     there was one) is deleted.      \sa item() */
end_comment
begin_function
DECL|function|setItem
name|void
name|QStandardItemModel
operator|::
name|setItem
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
name|QStandardItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|root
operator|->
name|d_func
argument_list|()
operator|->
name|setChild
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|item
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \fn QStandardItemModel::setItem(int row, QStandardItem *item)   \overload */
end_comment
begin_comment
comment|/*!     \since 4.2      Returns the item for the given \a row and \a column if one has been set;     otherwise returns 0.      \sa setItem(), takeItem(), itemFromIndex() */
end_comment
begin_function
DECL|function|item
name|QStandardItem
modifier|*
name|QStandardItemModel
operator|::
name|item
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItemModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|root
operator|->
name|child
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the model's invisible root item.      The invisible root item provides access to the model's top-level items     through the QStandardItem API, making it possible to write functions that     can treat top-level items and their children in a uniform way; for     example, recursive functions involving a tree model.      \note Calling \l{QAbstractItemModel::index()}{index()} on the QStandardItem object     retrieved from this function is not valid. */
end_comment
begin_function
DECL|function|invisibleRootItem
name|QStandardItem
modifier|*
name|QStandardItemModel
operator|::
name|invisibleRootItem
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItemModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|root
operator|.
name|data
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Sets the horizontal header item for \a column to \a item.  The model takes     ownership of the item. If necessary, the column count is increased to fit     the item. The previous header item (if there was one) is deleted.      \sa horizontalHeaderItem(), setHorizontalHeaderLabels(),     setVerticalHeaderItem() */
end_comment
begin_function
DECL|function|setHorizontalHeaderItem
name|void
name|QStandardItemModel
operator|::
name|setHorizontalHeaderItem
parameter_list|(
name|int
name|column
parameter_list|,
name|QStandardItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|column
operator|<
literal|0
condition|)
return|return;
if|if
condition|(
name|columnCount
argument_list|()
operator|<=
name|column
condition|)
name|setColumnCount
argument_list|(
name|column
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|oldItem
init|=
name|d
operator|->
name|columnHeaderItems
operator|.
name|at
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|==
name|oldItem
condition|)
return|return;
if|if
condition|(
name|item
condition|)
block|{
if|if
condition|(
name|item
operator|->
name|model
argument_list|()
operator|==
literal|0
condition|)
block|{
name|item
operator|->
name|d_func
argument_list|()
operator|->
name|setModel
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QStandardItem::setHorizontalHeaderItem: Ignoring duplicate insertion of item %p"
argument_list|,
name|item
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|oldItem
condition|)
name|oldItem
operator|->
name|d_func
argument_list|()
operator|->
name|setModel
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|oldItem
expr_stmt|;
name|d
operator|->
name|columnHeaderItems
operator|.
name|replace
argument_list|(
name|column
argument_list|,
name|item
argument_list|)
expr_stmt|;
emit|emit
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|,
name|column
argument_list|,
name|column
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the horizontal header item for \a column if one has been set;     otherwise returns 0.      \sa setHorizontalHeaderItem(), verticalHeaderItem() */
end_comment
begin_function
DECL|function|horizontalHeaderItem
name|QStandardItem
modifier|*
name|QStandardItemModel
operator|::
name|horizontalHeaderItem
parameter_list|(
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItemModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|column
operator|<
literal|0
operator|)
operator|||
operator|(
name|column
operator|>=
name|columnCount
argument_list|()
operator|)
condition|)
return|return
literal|0
return|;
return|return
name|d
operator|->
name|columnHeaderItems
operator|.
name|at
argument_list|(
name|column
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Sets the vertical header item for \a row to \a item.  The model takes     ownership of the item. If necessary, the row count is increased to fit the     item. The previous header item (if there was one) is deleted.      \sa verticalHeaderItem(), setVerticalHeaderLabels(),     setHorizontalHeaderItem() */
end_comment
begin_function
DECL|function|setVerticalHeaderItem
name|void
name|QStandardItemModel
operator|::
name|setVerticalHeaderItem
parameter_list|(
name|int
name|row
parameter_list|,
name|QStandardItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|<
literal|0
condition|)
return|return;
if|if
condition|(
name|rowCount
argument_list|()
operator|<=
name|row
condition|)
name|setRowCount
argument_list|(
name|row
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|oldItem
init|=
name|d
operator|->
name|rowHeaderItems
operator|.
name|at
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|==
name|oldItem
condition|)
return|return;
if|if
condition|(
name|item
condition|)
block|{
if|if
condition|(
name|item
operator|->
name|model
argument_list|()
operator|==
literal|0
condition|)
block|{
name|item
operator|->
name|d_func
argument_list|()
operator|->
name|setModel
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QStandardItem::setVerticalHeaderItem: Ignoring duplicate insertion of item %p"
argument_list|,
name|item
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|oldItem
condition|)
name|oldItem
operator|->
name|d_func
argument_list|()
operator|->
name|setModel
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|oldItem
expr_stmt|;
name|d
operator|->
name|rowHeaderItems
operator|.
name|replace
argument_list|(
name|row
argument_list|,
name|item
argument_list|)
expr_stmt|;
emit|emit
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the vertical header item for row \a row if one has been set;     otherwise returns 0.      \sa setVerticalHeaderItem(), horizontalHeaderItem() */
end_comment
begin_function
DECL|function|verticalHeaderItem
name|QStandardItem
modifier|*
name|QStandardItemModel
operator|::
name|verticalHeaderItem
parameter_list|(
name|int
name|row
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItemModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|row
operator|<
literal|0
operator|)
operator|||
operator|(
name|row
operator|>=
name|rowCount
argument_list|()
operator|)
condition|)
return|return
literal|0
return|;
return|return
name|d
operator|->
name|rowHeaderItems
operator|.
name|at
argument_list|(
name|row
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Sets the horizontal header labels using \a labels. If necessary, the     column count is increased to the size of \a labels.      \sa setHorizontalHeaderItem() */
end_comment
begin_function
DECL|function|setHorizontalHeaderLabels
name|void
name|QStandardItemModel
operator|::
name|setHorizontalHeaderLabels
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|labels
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|columnCount
argument_list|()
operator|<
name|labels
operator|.
name|count
argument_list|()
condition|)
name|setColumnCount
argument_list|(
name|labels
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|labels
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QStandardItem
modifier|*
name|item
init|=
name|horizontalHeaderItem
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|item
condition|)
block|{
name|item
operator|=
name|d
operator|->
name|createItem
argument_list|()
expr_stmt|;
name|setHorizontalHeaderItem
argument_list|(
name|i
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
name|item
operator|->
name|setText
argument_list|(
name|labels
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Sets the vertical header labels using \a labels. If necessary, the row     count is increased to the size of \a labels.      \sa setVerticalHeaderItem() */
end_comment
begin_function
DECL|function|setVerticalHeaderLabels
name|void
name|QStandardItemModel
operator|::
name|setVerticalHeaderLabels
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|labels
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|rowCount
argument_list|()
operator|<
name|labels
operator|.
name|count
argument_list|()
condition|)
name|setRowCount
argument_list|(
name|labels
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|labels
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QStandardItem
modifier|*
name|item
init|=
name|verticalHeaderItem
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|item
condition|)
block|{
name|item
operator|=
name|d
operator|->
name|createItem
argument_list|()
expr_stmt|;
name|setVerticalHeaderItem
argument_list|(
name|i
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
name|item
operator|->
name|setText
argument_list|(
name|labels
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Sets the item prototype for the model to the specified \a item. The model     takes ownership of the prototype.      The item prototype acts as a QStandardItem factory, by relying on the     QStandardItem::clone() function.  To provide your own prototype, subclass     QStandardItem, reimplement QStandardItem::clone() and set the prototype to     be an instance of your custom class. Whenever QStandardItemModel needs to     create an item on demand (for instance, when a view or item delegate calls     setData())), the new items will be instances of your custom class.      \sa itemPrototype(), QStandardItem::clone() */
end_comment
begin_function
DECL|function|setItemPrototype
name|void
name|QStandardItemModel
operator|::
name|setItemPrototype
parameter_list|(
specifier|const
name|QStandardItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|itemPrototype
operator|!=
name|item
condition|)
block|{
operator|delete
name|d
operator|->
name|itemPrototype
expr_stmt|;
name|d
operator|->
name|itemPrototype
operator|=
name|item
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the item prototype used by the model. The model uses the item     prototype as an item factory when it needs to construct new items on     demand (for instance, when a view or item delegate calls setData()).      \sa setItemPrototype() */
end_comment
begin_function
DECL|function|itemPrototype
specifier|const
name|QStandardItem
modifier|*
name|QStandardItemModel
operator|::
name|itemPrototype
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItemModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|itemPrototype
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns a list of items that match the given \a text, using the given \a     flags, in the given \a column. */
end_comment
begin_function
DECL|function|findItems
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|QStandardItemModel
operator|::
name|findItems
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|Qt
operator|::
name|MatchFlags
name|flags
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
block|{
name|QModelIndexList
name|indexes
init|=
name|match
argument_list|(
name|index
argument_list|(
literal|0
argument_list|,
name|column
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|text
argument_list|,
operator|-
literal|1
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|items
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|items
operator|.
name|append
argument_list|(
name|itemFromIndex
argument_list|(
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|items
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Appends a row containing \a items. If necessary, the column count is     increased to the size of \a items.      \sa insertRow(), appendColumn() */
end_comment
begin_function
DECL|function|appendRow
name|void
name|QStandardItemModel
operator|::
name|appendRow
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
modifier|&
name|items
parameter_list|)
block|{
name|invisibleRootItem
argument_list|()
operator|->
name|appendRow
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Appends a column containing \a items. If necessary, the row count is     increased to the size of \a items.      \sa insertColumn(), appendRow() */
end_comment
begin_function
DECL|function|appendColumn
name|void
name|QStandardItemModel
operator|::
name|appendColumn
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
modifier|&
name|items
parameter_list|)
block|{
name|invisibleRootItem
argument_list|()
operator|->
name|appendColumn
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2     \fn QStandardItemModel::appendRow(QStandardItem *item)     \overload      When building a list or a tree that has only one column, this function     provides a convenient way to append a single new \a item. */
end_comment
begin_comment
comment|/*!     \since 4.2      Inserts a row at \a row containing \a items. If necessary, the column     count is increased to the size of \a items.      \sa takeRow(), appendRow(), insertColumn() */
end_comment
begin_function
DECL|function|insertRow
name|void
name|QStandardItemModel
operator|::
name|insertRow
parameter_list|(
name|int
name|row
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
modifier|&
name|items
parameter_list|)
block|{
name|invisibleRootItem
argument_list|()
operator|->
name|insertRow
argument_list|(
name|row
argument_list|,
name|items
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      \fn void QStandardItemModel::insertRow(int row, QStandardItem *item)     \overload      Inserts a row at \a row containing \a item.      When building a list or a tree that has only one column, this function     provides a convenient way to append a single new item. */
end_comment
begin_comment
comment|/*!     \since 4.2      Inserts a column at \a column containing \a items. If necessary, the row     count is increased to the size of \a items.      \sa takeColumn(), appendColumn(), insertRow() */
end_comment
begin_function
DECL|function|insertColumn
name|void
name|QStandardItemModel
operator|::
name|insertColumn
parameter_list|(
name|int
name|column
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
modifier|&
name|items
parameter_list|)
block|{
name|invisibleRootItem
argument_list|()
operator|->
name|insertColumn
argument_list|(
name|column
argument_list|,
name|items
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Removes the item at (\a row, \a column) without deleting it. The model     releases ownership of the item.      \sa item(), takeRow(), takeColumn() */
end_comment
begin_function
DECL|function|takeItem
name|QStandardItem
modifier|*
name|QStandardItemModel
operator|::
name|takeItem
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|root
operator|->
name|takeChild
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Removes the given \a row without deleting the row items, and returns a     list of pointers to the removed items. The model releases ownership of the     items. For items in the row that have not been set, the corresponding     pointers in the list will be 0.      \sa takeColumn() */
end_comment
begin_function
DECL|function|takeRow
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|QStandardItemModel
operator|::
name|takeRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|root
operator|->
name|takeRow
argument_list|(
name|row
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Removes the given \a column without deleting the column items, and returns     a list of pointers to the removed items. The model releases ownership of     the items. For items in the column that have not been set, the     corresponding pointers in the list will be 0.      \sa takeRow() */
end_comment
begin_function
DECL|function|takeColumn
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|QStandardItemModel
operator|::
name|takeColumn
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|root
operator|->
name|takeColumn
argument_list|(
name|column
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Removes the horizontal header item at \a column from the header without     deleting it, and returns a pointer to the item. The model releases     ownership of the item.      \sa horizontalHeaderItem(), takeVerticalHeaderItem() */
end_comment
begin_function
DECL|function|takeHorizontalHeaderItem
name|QStandardItem
modifier|*
name|QStandardItemModel
operator|::
name|takeHorizontalHeaderItem
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|column
operator|<
literal|0
operator|)
operator|||
operator|(
name|column
operator|>=
name|columnCount
argument_list|()
operator|)
condition|)
return|return
literal|0
return|;
name|QStandardItem
modifier|*
name|headerItem
init|=
name|d
operator|->
name|columnHeaderItems
operator|.
name|at
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerItem
condition|)
block|{
name|headerItem
operator|->
name|d_func
argument_list|()
operator|->
name|setParentAndModel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|columnHeaderItems
operator|.
name|replace
argument_list|(
name|column
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|headerItem
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Removes the vertical header item at \a row from the header without     deleting it, and returns a pointer to the item. The model releases     ownership of the item.      \sa verticalHeaderItem(), takeHorizontalHeaderItem() */
end_comment
begin_function
DECL|function|takeVerticalHeaderItem
name|QStandardItem
modifier|*
name|QStandardItemModel
operator|::
name|takeVerticalHeaderItem
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|row
operator|<
literal|0
operator|)
operator|||
operator|(
name|row
operator|>=
name|rowCount
argument_list|()
operator|)
condition|)
return|return
literal|0
return|;
name|QStandardItem
modifier|*
name|headerItem
init|=
name|d
operator|->
name|rowHeaderItems
operator|.
name|at
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerItem
condition|)
block|{
name|headerItem
operator|->
name|d_func
argument_list|()
operator|->
name|setParentAndModel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|rowHeaderItems
operator|.
name|replace
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|headerItem
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2     \property QStandardItemModel::sortRole     \brief the item role that is used to query the model's data when sorting items      The default value is Qt::DisplayRole.      \sa sort(), QStandardItem::sortChildren() */
end_comment
begin_function
DECL|function|sortRole
name|int
name|QStandardItemModel
operator|::
name|sortRole
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItemModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|sortRole
return|;
block|}
end_function
begin_function
DECL|function|setSortRole
name|void
name|QStandardItemModel
operator|::
name|setSortRole
parameter_list|(
name|int
name|role
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|sortRole
operator|=
name|role
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|columnCount
name|int
name|QStandardItemModel
operator|::
name|columnCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|item
init|=
name|d
operator|->
name|itemFromIndex
argument_list|(
name|parent
argument_list|)
decl_stmt|;
return|return
name|item
condition|?
name|item
operator|->
name|columnCount
argument_list|()
else|:
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|data
name|QVariant
name|QStandardItemModel
operator|::
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|item
init|=
name|d
operator|->
name|itemFromIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|item
condition|?
name|item
operator|->
name|data
argument_list|(
name|role
argument_list|)
else|:
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|flags
name|Qt
operator|::
name|ItemFlags
name|QStandardItemModel
operator|::
name|flags
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItemModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|indexValid
argument_list|(
name|index
argument_list|)
condition|)
return|return
name|d
operator|->
name|root
operator|->
name|flags
argument_list|()
return|;
name|QStandardItem
modifier|*
name|item
init|=
name|d
operator|->
name|itemFromIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
condition|)
return|return
name|item
operator|->
name|flags
argument_list|()
return|;
return|return
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsEditable
operator||
name|Qt
operator|::
name|ItemIsDragEnabled
operator||
name|Qt
operator|::
name|ItemIsDropEnabled
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|hasChildren
name|bool
name|QStandardItemModel
operator|::
name|hasChildren
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|item
init|=
name|d
operator|->
name|itemFromIndex
argument_list|(
name|parent
argument_list|)
decl_stmt|;
return|return
name|item
condition|?
name|item
operator|->
name|hasChildren
argument_list|()
else|:
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|headerData
name|QVariant
name|QStandardItemModel
operator|::
name|headerData
parameter_list|(
name|int
name|section
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItemModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|section
operator|<
literal|0
operator|)
operator|||
operator|(
operator|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|)
operator|&&
operator|(
name|section
operator|>=
name|columnCount
argument_list|()
operator|)
operator|)
operator|||
operator|(
operator|(
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
operator|)
operator|&&
operator|(
name|section
operator|>=
name|rowCount
argument_list|()
operator|)
operator|)
condition|)
block|{
return|return
name|QVariant
argument_list|()
return|;
block|}
name|QStandardItem
modifier|*
name|headerItem
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|headerItem
operator|=
name|d
operator|->
name|columnHeaderItems
operator|.
name|at
argument_list|(
name|section
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
condition|)
name|headerItem
operator|=
name|d
operator|->
name|rowHeaderItems
operator|.
name|at
argument_list|(
name|section
argument_list|)
expr_stmt|;
return|return
name|headerItem
condition|?
name|headerItem
operator|->
name|data
argument_list|(
name|role
argument_list|)
else|:
name|QAbstractItemModel
operator|::
name|headerData
argument_list|(
name|section
argument_list|,
name|orientation
argument_list|,
name|role
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp      QStandardItemModel supports both copy and move. */
end_comment
begin_function
DECL|function|supportedDropActions
name|Qt
operator|::
name|DropActions
name|QStandardItemModel
operator|::
name|supportedDropActions
parameter_list|()
specifier|const
block|{
return|return
name|Qt
operator|::
name|CopyAction
operator||
name|Qt
operator|::
name|MoveAction
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|index
name|QModelIndex
name|QStandardItemModel
operator|::
name|index
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|parentItem
init|=
name|d
operator|->
name|itemFromIndex
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|parentItem
operator|==
literal|0
operator|)
operator|||
operator|(
name|row
operator|<
literal|0
operator|)
operator|||
operator|(
name|column
operator|<
literal|0
operator|)
operator|||
operator|(
name|row
operator|>=
name|parentItem
operator|->
name|rowCount
argument_list|()
operator|)
operator|||
operator|(
name|column
operator|>=
name|parentItem
operator|->
name|columnCount
argument_list|()
operator|)
condition|)
block|{
return|return
name|QModelIndex
argument_list|()
return|;
block|}
return|return
name|createIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|parentItem
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|insertColumns
name|bool
name|QStandardItemModel
operator|::
name|insertColumns
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|item
init|=
name|parent
operator|.
name|isValid
argument_list|()
condition|?
name|itemFromIndex
argument_list|(
name|parent
argument_list|)
else|:
name|d
operator|->
name|root
operator|.
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
name|item
operator|==
literal|0
condition|)
return|return
literal|false
return|;
return|return
name|item
operator|->
name|d_func
argument_list|()
operator|->
name|insertColumns
argument_list|(
name|column
argument_list|,
name|count
argument_list|,
name|QList
argument_list|<
name|QStandardItem
operator|*
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|insertRows
name|bool
name|QStandardItemModel
operator|::
name|insertRows
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|item
init|=
name|parent
operator|.
name|isValid
argument_list|()
condition|?
name|itemFromIndex
argument_list|(
name|parent
argument_list|)
else|:
name|d
operator|->
name|root
operator|.
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
name|item
operator|==
literal|0
condition|)
return|return
literal|false
return|;
return|return
name|item
operator|->
name|d_func
argument_list|()
operator|->
name|insertRows
argument_list|(
name|row
argument_list|,
name|count
argument_list|,
name|QList
argument_list|<
name|QStandardItem
operator|*
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|itemData
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
name|QStandardItemModel
operator|::
name|itemData
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|item
init|=
name|d
operator|->
name|itemFromIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|item
condition|?
name|item
operator|->
name|d_func
argument_list|()
operator|->
name|itemData
argument_list|()
else|:
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|parent
name|QModelIndex
name|QStandardItemModel
operator|::
name|parent
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|child
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItemModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|indexValid
argument_list|(
name|child
argument_list|)
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|QStandardItem
modifier|*
name|parentItem
init|=
cast|static_cast
argument_list|<
name|QStandardItem
operator|*
argument_list|>
argument_list|(
name|child
operator|.
name|internalPointer
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|indexFromItem
argument_list|(
name|parentItem
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|removeColumns
name|bool
name|QStandardItemModel
operator|::
name|removeColumns
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|item
init|=
name|d
operator|->
name|itemFromIndex
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|item
operator|==
literal|0
operator|)
operator|||
operator|(
name|count
operator|<
literal|1
operator|)
operator|||
operator|(
name|column
operator|<
literal|0
operator|)
operator|||
operator|(
operator|(
name|column
operator|+
name|count
operator|)
operator|>
name|item
operator|->
name|columnCount
argument_list|()
operator|)
condition|)
return|return
literal|false
return|;
name|item
operator|->
name|removeColumns
argument_list|(
name|column
argument_list|,
name|count
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|removeRows
name|bool
name|QStandardItemModel
operator|::
name|removeRows
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|item
init|=
name|d
operator|->
name|itemFromIndex
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|item
operator|==
literal|0
operator|)
operator|||
operator|(
name|count
operator|<
literal|1
operator|)
operator|||
operator|(
name|row
operator|<
literal|0
operator|)
operator|||
operator|(
operator|(
name|row
operator|+
name|count
operator|)
operator|>
name|item
operator|->
name|rowCount
argument_list|()
operator|)
condition|)
return|return
literal|false
return|;
name|item
operator|->
name|removeRows
argument_list|(
name|row
argument_list|,
name|count
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|rowCount
name|int
name|QStandardItemModel
operator|::
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|item
init|=
name|d
operator|->
name|itemFromIndex
argument_list|(
name|parent
argument_list|)
decl_stmt|;
return|return
name|item
condition|?
name|item
operator|->
name|rowCount
argument_list|()
else|:
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|setData
name|bool
name|QStandardItemModel
operator|::
name|setData
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|role
parameter_list|)
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|QStandardItem
modifier|*
name|item
init|=
name|itemFromIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|==
literal|0
condition|)
return|return
literal|false
return|;
name|item
operator|->
name|setData
argument_list|(
name|value
argument_list|,
name|role
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|setHeaderData
name|bool
name|QStandardItemModel
operator|::
name|setHeaderData
parameter_list|(
name|int
name|section
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|role
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|section
operator|<
literal|0
operator|)
operator|||
operator|(
operator|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|)
operator|&&
operator|(
name|section
operator|>=
name|columnCount
argument_list|()
operator|)
operator|)
operator|||
operator|(
operator|(
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
operator|)
operator|&&
operator|(
name|section
operator|>=
name|rowCount
argument_list|()
operator|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|QStandardItem
modifier|*
name|headerItem
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|headerItem
operator|=
name|d
operator|->
name|columnHeaderItems
operator|.
name|at
argument_list|(
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|headerItem
operator|==
literal|0
condition|)
block|{
name|headerItem
operator|=
name|d
operator|->
name|createItem
argument_list|()
expr_stmt|;
name|headerItem
operator|->
name|d_func
argument_list|()
operator|->
name|setModel
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|columnHeaderItems
operator|.
name|replace
argument_list|(
name|section
argument_list|,
name|headerItem
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
condition|)
block|{
name|headerItem
operator|=
name|d
operator|->
name|rowHeaderItems
operator|.
name|at
argument_list|(
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|headerItem
operator|==
literal|0
condition|)
block|{
name|headerItem
operator|=
name|d
operator|->
name|createItem
argument_list|()
expr_stmt|;
name|headerItem
operator|->
name|d_func
argument_list|()
operator|->
name|setModel
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|rowHeaderItems
operator|.
name|replace
argument_list|(
name|section
argument_list|,
name|headerItem
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|headerItem
condition|)
block|{
name|headerItem
operator|->
name|setData
argument_list|(
name|value
argument_list|,
name|role
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|setItemData
name|bool
name|QStandardItemModel
operator|::
name|setItemData
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
specifier|const
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
modifier|&
name|roles
parameter_list|)
block|{
name|QStandardItem
modifier|*
name|item
init|=
name|itemFromIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|==
literal|0
condition|)
return|return
literal|false
return|;
name|item
operator|->
name|d_func
argument_list|()
operator|->
name|setItemData
argument_list|(
name|roles
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|sort
name|void
name|QStandardItemModel
operator|::
name|sort
parameter_list|(
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|root
operator|->
name|sortChildren
argument_list|(
name|column
argument_list|,
name|order
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \fn QObject *QStandardItemModel::parent() const   \internal */
end_comment
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|mimeTypes
name|QStringList
name|QStandardItemModel
operator|::
name|mimeTypes
parameter_list|()
specifier|const
block|{
return|return
name|QAbstractItemModel
operator|::
name|mimeTypes
argument_list|()
operator|<<
name|QLatin1String
argument_list|(
literal|"application/x-qstandarditemmodeldatalist"
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|mimeData
name|QMimeData
modifier|*
name|QStandardItemModel
operator|::
name|mimeData
parameter_list|(
specifier|const
name|QModelIndexList
modifier|&
name|indexes
parameter_list|)
specifier|const
block|{
name|QMimeData
modifier|*
name|data
init|=
name|QAbstractItemModel
operator|::
name|mimeData
argument_list|(
name|indexes
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|data
condition|)
return|return
literal|0
return|;
name|QString
name|format
init|=
name|QLatin1String
argument_list|(
literal|"application/x-qstandarditemmodeldatalist"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mimeTypes
argument_list|()
operator|.
name|contains
argument_list|(
name|format
argument_list|)
condition|)
return|return
name|data
return|;
name|QByteArray
name|encoded
decl_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|encoded
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|QSet
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|itemsSet
decl_stmt|;
name|QStack
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|stack
decl_stmt|;
name|itemsSet
operator|.
name|reserve
argument_list|(
name|indexes
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|stack
operator|.
name|reserve
argument_list|(
name|indexes
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QStandardItem
modifier|*
name|item
init|=
name|itemFromIndex
argument_list|(
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|itemsSet
operator|<<
name|item
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
comment|//remove duplicates childrens
block|{
name|QSet
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|seen
decl_stmt|;
while|while
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStandardItem
modifier|*
name|itm
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|seen
operator|.
name|contains
argument_list|(
name|itm
argument_list|)
condition|)
continue|continue;
name|seen
operator|.
name|insert
argument_list|(
name|itm
argument_list|)
expr_stmt|;
specifier|const
name|QVector
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
modifier|&
name|childList
init|=
name|itm
operator|->
name|d_func
argument_list|()
operator|->
name|children
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QStandardItem
modifier|*
name|chi
init|=
name|childList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|chi
condition|)
block|{
name|QSet
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
operator|::
name|iterator
name|it
init|=
name|itemsSet
operator|.
name|find
argument_list|(
name|chi
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|itemsSet
operator|.
name|end
argument_list|()
condition|)
block|{
name|itemsSet
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
name|stack
operator|.
name|push
argument_list|(
name|chi
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|stack
operator|.
name|reserve
argument_list|(
name|itemsSet
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QStandardItem
modifier|*
name|item
decl|,
name|itemsSet
control|)
block|{
name|stack
operator|.
name|push
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
comment|//stream everything recursively
while|while
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStandardItem
modifier|*
name|item
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|itemsSet
operator|.
name|contains
argument_list|(
name|item
argument_list|)
condition|)
block|{
comment|//if the item is selection 'top-level', strem its position
name|stream
operator|<<
name|item
operator|->
name|row
argument_list|()
operator|<<
name|item
operator|->
name|column
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|item
condition|)
block|{
name|stream
operator|<<
operator|*
name|item
operator|<<
name|item
operator|->
name|columnCount
argument_list|()
operator|<<
name|item
operator|->
name|d_ptr
operator|->
name|children
operator|.
name|count
argument_list|()
expr_stmt|;
name|stack
operator|+=
name|item
operator|->
name|d_ptr
operator|->
name|children
expr_stmt|;
block|}
else|else
block|{
name|QStandardItem
name|dummy
decl_stmt|;
name|stream
operator|<<
name|dummy
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
block|}
block|}
name|data
operator|->
name|setData
argument_list|(
name|format
argument_list|,
name|encoded
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
end_function
begin_comment
comment|/* \internal     Used by QStandardItemModel::dropMimeData     stream out an item and his children   */
end_comment
begin_function
DECL|function|decodeDataRecursive
name|void
name|QStandardItemModelPrivate
operator|::
name|decodeDataRecursive
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|,
name|QStandardItem
modifier|*
name|item
parameter_list|)
block|{
name|int
name|colCount
decl_stmt|,
name|childCount
decl_stmt|;
name|stream
operator|>>
operator|*
name|item
expr_stmt|;
name|stream
operator|>>
name|colCount
operator|>>
name|childCount
expr_stmt|;
name|item
operator|->
name|setColumnCount
argument_list|(
name|colCount
argument_list|)
expr_stmt|;
name|int
name|childPos
init|=
name|childCount
decl_stmt|;
while|while
condition|(
name|childPos
operator|>
literal|0
condition|)
block|{
name|childPos
operator|--
expr_stmt|;
name|QStandardItem
modifier|*
name|child
init|=
name|createItem
argument_list|()
decl_stmt|;
name|decodeDataRecursive
argument_list|(
name|stream
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|item
operator|->
name|setChild
argument_list|(
name|childPos
operator|/
name|colCount
argument_list|,
name|childPos
operator|%
name|colCount
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|dropMimeData
name|bool
name|QStandardItemModel
operator|::
name|dropMimeData
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|DropAction
name|action
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStandardItemModel
argument_list|)
expr_stmt|;
comment|// check if the action is supported
if|if
condition|(
operator|!
name|data
operator|||
operator|!
operator|(
name|action
operator|==
name|Qt
operator|::
name|CopyAction
operator|||
name|action
operator|==
name|Qt
operator|::
name|MoveAction
operator|)
condition|)
return|return
literal|false
return|;
comment|// check if the format is supported
name|QString
name|format
init|=
name|QLatin1String
argument_list|(
literal|"application/x-qstandarditemmodeldatalist"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|->
name|hasFormat
argument_list|(
name|format
argument_list|)
condition|)
return|return
name|QAbstractItemModel
operator|::
name|dropMimeData
argument_list|(
name|data
argument_list|,
name|action
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|parent
argument_list|)
return|;
if|if
condition|(
name|row
operator|>
name|rowCount
argument_list|(
name|parent
argument_list|)
condition|)
name|row
operator|=
name|rowCount
argument_list|(
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|==
operator|-
literal|1
condition|)
name|row
operator|=
name|rowCount
argument_list|(
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|column
operator|==
operator|-
literal|1
condition|)
name|column
operator|=
literal|0
expr_stmt|;
comment|// decode and insert
name|QByteArray
name|encoded
init|=
name|data
operator|->
name|data
argument_list|(
name|format
argument_list|)
decl_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|encoded
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
comment|//code based on QAbstractItemModel::decodeData
comment|// adapted to work with QStandardItem
name|int
name|top
init|=
name|INT_MAX
decl_stmt|;
name|int
name|left
init|=
name|INT_MAX
decl_stmt|;
name|int
name|bottom
init|=
literal|0
decl_stmt|;
name|int
name|right
init|=
literal|0
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|rows
decl_stmt|,
name|columns
decl_stmt|;
name|QVector
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|items
decl_stmt|;
while|while
condition|(
operator|!
name|stream
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|int
name|r
decl_stmt|,
name|c
decl_stmt|;
name|QStandardItem
modifier|*
name|item
init|=
name|d
operator|->
name|createItem
argument_list|()
decl_stmt|;
name|stream
operator|>>
name|r
operator|>>
name|c
expr_stmt|;
name|d
operator|->
name|decodeDataRecursive
argument_list|(
name|stream
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|rows
operator|.
name|append
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|columns
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|items
operator|.
name|append
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|top
operator|=
name|qMin
argument_list|(
name|r
argument_list|,
name|top
argument_list|)
expr_stmt|;
name|left
operator|=
name|qMin
argument_list|(
name|c
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|bottom
operator|=
name|qMax
argument_list|(
name|r
argument_list|,
name|bottom
argument_list|)
expr_stmt|;
name|right
operator|=
name|qMax
argument_list|(
name|c
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
comment|// insert the dragged items into the table, use a bit array to avoid overwriting items,
comment|// since items from different tables can have the same row and column
name|int
name|dragRowCount
init|=
literal|0
decl_stmt|;
name|int
name|dragColumnCount
init|=
name|right
operator|-
name|left
operator|+
literal|1
decl_stmt|;
comment|// Compute the number of continuous rows upon insertion and modify the rows to match
name|QVector
argument_list|<
name|int
argument_list|>
name|rowsToInsert
argument_list|(
name|bottom
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|rowsToInsert
index|[
name|rows
operator|.
name|at
argument_list|(
name|i
argument_list|)
index|]
operator|=
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowsToInsert
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|rowsToInsert
index|[
name|i
index|]
operator|==
literal|1
condition|)
block|{
name|rowsToInsert
index|[
name|i
index|]
operator|=
name|dragRowCount
expr_stmt|;
operator|++
name|dragRowCount
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|rows
index|[
name|i
index|]
operator|=
name|top
operator|+
name|rowsToInsert
index|[
name|rows
index|[
name|i
index|]
index|]
expr_stmt|;
name|QBitArray
name|isWrittenTo
argument_list|(
name|dragRowCount
operator|*
name|dragColumnCount
argument_list|)
decl_stmt|;
comment|// make space in the table for the dropped data
name|int
name|colCount
init|=
name|columnCount
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|colCount
operator|<
name|dragColumnCount
operator|+
name|column
condition|)
block|{
name|insertColumns
argument_list|(
name|colCount
argument_list|,
name|dragColumnCount
operator|+
name|column
operator|-
name|colCount
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|colCount
operator|=
name|columnCount
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
name|insertRows
argument_list|(
name|row
argument_list|,
name|dragRowCount
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|row
operator|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|column
operator|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|parentItem
init|=
name|itemFromIndex
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parentItem
condition|)
name|parentItem
operator|=
name|invisibleRootItem
argument_list|()
expr_stmt|;
name|QVector
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|newIndexes
argument_list|(
name|items
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// set the data in the table
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|items
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|int
name|relativeRow
init|=
name|rows
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|-
name|top
decl_stmt|;
name|int
name|relativeColumn
init|=
name|columns
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|-
name|left
decl_stmt|;
name|int
name|destinationRow
init|=
name|relativeRow
operator|+
name|row
decl_stmt|;
name|int
name|destinationColumn
init|=
name|relativeColumn
operator|+
name|column
decl_stmt|;
name|int
name|flat
init|=
operator|(
name|relativeRow
operator|*
name|dragColumnCount
operator|)
operator|+
name|relativeColumn
decl_stmt|;
comment|// if the item was already written to, or we just can't fit it in the table, create a new row
if|if
condition|(
name|destinationColumn
operator|>=
name|colCount
operator|||
name|isWrittenTo
operator|.
name|testBit
argument_list|(
name|flat
argument_list|)
condition|)
block|{
name|destinationColumn
operator|=
name|qBound
argument_list|(
name|column
argument_list|,
name|destinationColumn
argument_list|,
name|colCount
operator|-
literal|1
argument_list|)
expr_stmt|;
name|destinationRow
operator|=
name|row
operator|+
name|dragRowCount
expr_stmt|;
name|insertRows
argument_list|(
name|row
operator|+
name|dragRowCount
argument_list|,
literal|1
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|flat
operator|=
operator|(
name|dragRowCount
operator|*
name|dragColumnCount
operator|)
operator|+
name|relativeColumn
expr_stmt|;
name|isWrittenTo
operator|.
name|resize
argument_list|(
operator|++
name|dragRowCount
operator|*
name|dragColumnCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isWrittenTo
operator|.
name|testBit
argument_list|(
name|flat
argument_list|)
condition|)
block|{
name|newIndexes
index|[
name|j
index|]
operator|=
name|index
argument_list|(
name|destinationRow
argument_list|,
name|destinationColumn
argument_list|,
name|parentItem
operator|->
name|index
argument_list|()
argument_list|)
expr_stmt|;
name|isWrittenTo
operator|.
name|setBit
argument_list|(
name|flat
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|newIndexes
operator|.
name|size
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
if|if
condition|(
name|newIndexes
operator|.
name|at
argument_list|(
name|k
argument_list|)
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|parentItem
operator|->
name|setChild
argument_list|(
name|newIndexes
operator|.
name|at
argument_list|(
name|k
argument_list|)
operator|.
name|row
argument_list|()
argument_list|,
name|newIndexes
operator|.
name|at
argument_list|(
name|k
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
name|items
operator|.
name|at
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|delete
name|items
operator|.
name|at
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qstandarditemmodel.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_STANDARDITEMMODEL
end_comment
end_unit
