begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"private/qmemrotate_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
if|#
directive|if
name|QT_ROTATION_ALGORITHM
operator|==
name|QT_ROTATION_TILED
DECL|variable|tileSize
specifier|static
specifier|const
name|int
name|tileSize
init|=
literal|32
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_BIG_ENDIAN
end_if
begin_if
if|#
directive|if
name|QT_ROTATION_ALGORITHM
operator|==
name|QT_ROTATION_PACKED
operator|||
name|QT_ROTATION_ALGORITHM
operator|==
name|QT_ROTATION_TILED
end_if
begin_error
error|#
directive|error
error|Big endian version not implemented for the transformed driver!
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
name|Q_STATIC_TEMPLATE_FUNCTION
DECL|function|qt_memrotate90_cachedRead
specifier|inline
name|void
name|qt_memrotate90_cachedRead
parameter_list|(
specifier|const
name|T
modifier|*
name|src
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|sstride
parameter_list|,
name|T
modifier|*
name|dest
parameter_list|,
name|int
name|dstride
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|s
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|char
modifier|*
name|d
init|=
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|dest
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
name|w
operator|-
literal|1
init|;
name|x
operator|>=
literal|0
condition|;
operator|--
name|x
control|)
block|{
name|T
modifier|*
name|destline
init|=
cast|reinterpret_cast
argument_list|<
name|T
operator|*
argument_list|>
argument_list|(
name|d
operator|+
operator|(
name|w
operator|-
name|x
operator|-
literal|1
operator|)
operator|*
name|dstride
argument_list|)
decl_stmt|;
name|destline
index|[
name|y
index|]
operator|=
name|src
index|[
name|x
index|]
expr_stmt|;
block|}
name|s
operator|+=
name|sstride
expr_stmt|;
name|src
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|T
operator|*
argument_list|>
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
name|Q_STATIC_TEMPLATE_FUNCTION
DECL|function|qt_memrotate270_cachedRead
specifier|inline
name|void
name|qt_memrotate270_cachedRead
parameter_list|(
specifier|const
name|T
modifier|*
name|src
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|sstride
parameter_list|,
name|T
modifier|*
name|dest
parameter_list|,
name|int
name|dstride
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|s
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|char
modifier|*
name|d
init|=
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|s
operator|+=
operator|(
name|h
operator|-
literal|1
operator|)
operator|*
name|sstride
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
name|h
operator|-
literal|1
init|;
name|y
operator|>=
literal|0
condition|;
operator|--
name|y
control|)
block|{
name|src
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|T
operator|*
argument_list|>
argument_list|(
name|s
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
name|T
modifier|*
name|destline
init|=
cast|reinterpret_cast
argument_list|<
name|T
operator|*
argument_list|>
argument_list|(
name|d
operator|+
name|x
operator|*
name|dstride
argument_list|)
decl_stmt|;
name|destline
index|[
name|h
operator|-
name|y
operator|-
literal|1
index|]
operator|=
name|src
index|[
name|x
index|]
expr_stmt|;
block|}
name|s
operator|-=
name|sstride
expr_stmt|;
block|}
block|}
end_function
begin_if
if|#
directive|if
name|QT_ROTATION_ALGORITHM
operator|==
name|QT_ROTATION_CACHEDWRITE
end_if
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
name|Q_STATIC_TEMPLATE_FUNCTION
DECL|function|qt_memrotate90_cachedWrite
specifier|inline
name|void
name|qt_memrotate90_cachedWrite
parameter_list|(
specifier|const
name|T
modifier|*
name|src
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|sstride
parameter_list|,
name|T
modifier|*
name|dest
parameter_list|,
name|int
name|dstride
parameter_list|)
block|{
for|for
control|(
name|int
name|x
init|=
name|w
operator|-
literal|1
init|;
name|x
operator|>=
literal|0
condition|;
operator|--
name|x
control|)
block|{
name|T
modifier|*
name|d
init|=
name|dest
operator|+
operator|(
name|w
operator|-
name|x
operator|-
literal|1
operator|)
operator|*
name|dstride
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
operator|*
name|d
operator|++
operator|=
name|src
index|[
name|y
operator|*
name|sstride
operator|+
name|x
index|]
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
name|Q_STATIC_TEMPLATE_FUNCTION
DECL|function|qt_memrotate270_cachedWrite
specifier|inline
name|void
name|qt_memrotate270_cachedWrite
parameter_list|(
specifier|const
name|T
modifier|*
name|src
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|sstride
parameter_list|,
name|T
modifier|*
name|dest
parameter_list|,
name|int
name|dstride
parameter_list|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
name|T
modifier|*
name|d
init|=
name|dest
operator|+
name|x
operator|*
name|dstride
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|h
operator|-
literal|1
init|;
name|y
operator|>=
literal|0
condition|;
operator|--
name|y
control|)
block|{
operator|*
name|d
operator|++
operator|=
name|src
index|[
name|y
operator|*
name|sstride
operator|+
name|x
index|]
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_ROTATION_CACHEDWRITE
end_comment
begin_if
if|#
directive|if
name|QT_ROTATION_ALGORITHM
operator|==
name|QT_ROTATION_PACKING
end_if
begin_comment
comment|// TODO: packing algorithms should probably be modified on 64-bit architectures
end_comment
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
name|Q_STATIC_TEMPLATE_FUNCTION
DECL|function|qt_memrotate90_packing
specifier|inline
name|void
name|qt_memrotate90_packing
parameter_list|(
specifier|const
name|T
modifier|*
name|src
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|sstride
parameter_list|,
name|T
modifier|*
name|dest
parameter_list|,
name|int
name|dstride
parameter_list|)
block|{
name|sstride
operator|/=
sizeof|sizeof
argument_list|(
name|T
argument_list|)
expr_stmt|;
name|dstride
operator|/=
sizeof|sizeof
argument_list|(
name|T
argument_list|)
expr_stmt|;
specifier|const
name|int
name|pack
init|=
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|T
argument_list|)
decl_stmt|;
specifier|const
name|int
name|unaligned
init|=
name|int
argument_list|(
operator|(
name|long
argument_list|(
name|dest
argument_list|)
operator|&
operator|(
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
operator|-
literal|1
operator|)
operator|)
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|T
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|w
operator|-
literal|1
init|;
name|x
operator|>=
literal|0
condition|;
operator|--
name|x
control|)
block|{
name|int
name|y
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|unaligned
condition|;
operator|++
name|i
control|)
block|{
name|dest
index|[
operator|(
name|w
operator|-
name|x
operator|-
literal|1
operator|)
operator|*
name|dstride
operator|+
name|y
index|]
operator|=
name|src
index|[
name|y
operator|*
name|sstride
operator|+
name|x
index|]
expr_stmt|;
operator|++
name|y
expr_stmt|;
block|}
name|quint32
modifier|*
name|d
init|=
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|dest
operator|+
operator|(
name|w
operator|-
name|x
operator|-
literal|1
operator|)
operator|*
name|dstride
operator|+
name|unaligned
argument_list|)
decl_stmt|;
specifier|const
name|int
name|rest
init|=
operator|(
name|h
operator|-
name|unaligned
operator|)
operator|%
name|pack
decl_stmt|;
while|while
condition|(
name|y
operator|<
name|h
operator|-
name|rest
condition|)
block|{
name|quint32
name|c
init|=
name|src
index|[
name|y
operator|*
name|sstride
operator|+
name|x
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pack
condition|;
operator|++
name|i
control|)
block|{
name|c
operator||=
name|src
index|[
operator|(
name|y
operator|+
name|i
operator|)
operator|*
name|sstride
operator|+
name|x
index|]
operator|<<
operator|(
sizeof|sizeof
argument_list|(
name|int
argument_list|)
operator|*
literal|8
operator|/
name|pack
operator|*
name|i
operator|)
expr_stmt|;
block|}
operator|*
name|d
operator|++
operator|=
name|c
expr_stmt|;
name|y
operator|+=
name|pack
expr_stmt|;
block|}
while|while
condition|(
name|y
operator|<
name|h
condition|)
block|{
name|dest
index|[
operator|(
name|w
operator|-
name|x
operator|-
literal|1
operator|)
operator|*
name|dstride
operator|+
name|y
index|]
operator|=
name|src
index|[
name|y
operator|*
name|sstride
operator|+
name|x
index|]
expr_stmt|;
operator|++
name|y
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
name|Q_STATIC_TEMPLATE_FUNCTION
DECL|function|qt_memrotate270_packing
specifier|inline
name|void
name|qt_memrotate270_packing
parameter_list|(
specifier|const
name|T
modifier|*
name|src
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|sstride
parameter_list|,
name|T
modifier|*
name|dest
parameter_list|,
name|int
name|dstride
parameter_list|)
block|{
name|sstride
operator|/=
sizeof|sizeof
argument_list|(
name|T
argument_list|)
expr_stmt|;
name|dstride
operator|/=
sizeof|sizeof
argument_list|(
name|T
argument_list|)
expr_stmt|;
specifier|const
name|int
name|pack
init|=
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|T
argument_list|)
decl_stmt|;
specifier|const
name|int
name|unaligned
init|=
name|int
argument_list|(
operator|(
name|long
argument_list|(
name|dest
argument_list|)
operator|&
operator|(
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
operator|-
literal|1
operator|)
operator|)
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|T
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
name|int
name|y
init|=
name|h
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|unaligned
condition|;
operator|++
name|i
control|)
block|{
name|dest
index|[
name|x
operator|*
name|dstride
operator|+
name|h
operator|-
name|y
operator|-
literal|1
index|]
operator|=
name|src
index|[
name|y
operator|*
name|sstride
operator|+
name|x
index|]
expr_stmt|;
operator|--
name|y
expr_stmt|;
block|}
name|quint32
modifier|*
name|d
init|=
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|dest
operator|+
name|x
operator|*
name|dstride
operator|+
name|unaligned
argument_list|)
decl_stmt|;
specifier|const
name|int
name|rest
init|=
operator|(
name|h
operator|-
name|unaligned
operator|)
operator|%
name|pack
decl_stmt|;
while|while
condition|(
name|y
operator|>
name|rest
condition|)
block|{
name|quint32
name|c
init|=
name|src
index|[
name|y
operator|*
name|sstride
operator|+
name|x
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pack
condition|;
operator|++
name|i
control|)
block|{
name|c
operator||=
name|src
index|[
operator|(
name|y
operator|-
name|i
operator|)
operator|*
name|sstride
operator|+
name|x
index|]
operator|<<
operator|(
sizeof|sizeof
argument_list|(
name|int
argument_list|)
operator|*
literal|8
operator|/
name|pack
operator|*
name|i
operator|)
expr_stmt|;
block|}
operator|*
name|d
operator|++
operator|=
name|c
expr_stmt|;
name|y
operator|-=
name|pack
expr_stmt|;
block|}
while|while
condition|(
name|y
operator|>=
literal|0
condition|)
block|{
name|dest
index|[
name|x
operator|*
name|dstride
operator|+
name|h
operator|-
name|y
operator|-
literal|1
index|]
operator|=
name|src
index|[
name|y
operator|*
name|sstride
operator|+
name|x
index|]
expr_stmt|;
operator|--
name|y
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_ROTATION_PACKING
end_comment
begin_if
if|#
directive|if
name|QT_ROTATION_ALGORITHM
operator|==
name|QT_ROTATION_TILED
end_if
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
name|Q_STATIC_TEMPLATE_FUNCTION
DECL|function|qt_memrotate90_tiled
specifier|inline
name|void
name|qt_memrotate90_tiled
parameter_list|(
specifier|const
name|T
modifier|*
name|src
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|sstride
parameter_list|,
name|T
modifier|*
name|dest
parameter_list|,
name|int
name|dstride
parameter_list|)
block|{
name|sstride
operator|/=
sizeof|sizeof
argument_list|(
name|T
argument_list|)
expr_stmt|;
name|dstride
operator|/=
sizeof|sizeof
argument_list|(
name|T
argument_list|)
expr_stmt|;
specifier|const
name|int
name|pack
init|=
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|T
argument_list|)
decl_stmt|;
specifier|const
name|int
name|unaligned
init|=
name|qMin
argument_list|(
name|uint
argument_list|(
operator|(
name|quintptr
argument_list|(
name|dest
argument_list|)
operator|&
operator|(
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
operator|-
literal|1
operator|)
operator|)
operator|/
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
argument_list|,
name|uint
argument_list|(
name|h
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|int
name|restX
init|=
name|w
operator|%
name|tileSize
decl_stmt|;
specifier|const
name|int
name|restY
init|=
operator|(
name|h
operator|-
name|unaligned
operator|)
operator|%
name|tileSize
decl_stmt|;
specifier|const
name|int
name|unoptimizedY
init|=
name|restY
operator|%
name|pack
decl_stmt|;
specifier|const
name|int
name|numTilesX
init|=
name|w
operator|/
name|tileSize
operator|+
operator|(
name|restX
operator|>
literal|0
operator|)
decl_stmt|;
specifier|const
name|int
name|numTilesY
init|=
operator|(
name|h
operator|-
name|unaligned
operator|)
operator|/
name|tileSize
operator|+
operator|(
name|restY
operator|>=
name|pack
operator|)
decl_stmt|;
for|for
control|(
name|int
name|tx
init|=
literal|0
init|;
name|tx
operator|<
name|numTilesX
condition|;
operator|++
name|tx
control|)
block|{
specifier|const
name|int
name|startx
init|=
name|w
operator|-
name|tx
operator|*
name|tileSize
operator|-
literal|1
decl_stmt|;
specifier|const
name|int
name|stopx
init|=
name|qMax
argument_list|(
name|startx
operator|-
name|tileSize
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|unaligned
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
name|startx
init|;
name|x
operator|>=
name|stopx
condition|;
operator|--
name|x
control|)
block|{
name|T
modifier|*
name|d
init|=
name|dest
operator|+
operator|(
name|w
operator|-
name|x
operator|-
literal|1
operator|)
operator|*
name|dstride
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|unaligned
condition|;
operator|++
name|y
control|)
block|{
operator|*
name|d
operator|++
operator|=
name|src
index|[
name|y
operator|*
name|sstride
operator|+
name|x
index|]
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|ty
init|=
literal|0
init|;
name|ty
operator|<
name|numTilesY
condition|;
operator|++
name|ty
control|)
block|{
specifier|const
name|int
name|starty
init|=
name|ty
operator|*
name|tileSize
operator|+
name|unaligned
decl_stmt|;
specifier|const
name|int
name|stopy
init|=
name|qMin
argument_list|(
name|starty
operator|+
name|tileSize
argument_list|,
name|h
operator|-
name|unoptimizedY
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|startx
init|;
name|x
operator|>=
name|stopx
condition|;
operator|--
name|x
control|)
block|{
name|quint32
modifier|*
name|d
init|=
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|dest
operator|+
operator|(
name|w
operator|-
name|x
operator|-
literal|1
operator|)
operator|*
name|dstride
operator|+
name|starty
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|starty
init|;
name|y
operator|<
name|stopy
condition|;
name|y
operator|+=
name|pack
control|)
block|{
name|quint32
name|c
init|=
name|src
index|[
name|y
operator|*
name|sstride
operator|+
name|x
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pack
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|shift
init|=
operator|(
sizeof|sizeof
argument_list|(
name|int
argument_list|)
operator|*
literal|8
operator|/
name|pack
operator|*
name|i
operator|)
decl_stmt|;
specifier|const
name|T
name|color
init|=
name|src
index|[
operator|(
name|y
operator|+
name|i
operator|)
operator|*
name|sstride
operator|+
name|x
index|]
decl_stmt|;
name|c
operator||=
name|color
operator|<<
name|shift
expr_stmt|;
block|}
operator|*
name|d
operator|++
operator|=
name|c
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|unoptimizedY
condition|)
block|{
specifier|const
name|int
name|starty
init|=
name|h
operator|-
name|unoptimizedY
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|startx
init|;
name|x
operator|>=
name|stopx
condition|;
operator|--
name|x
control|)
block|{
name|T
modifier|*
name|d
init|=
name|dest
operator|+
operator|(
name|w
operator|-
name|x
operator|-
literal|1
operator|)
operator|*
name|dstride
operator|+
name|starty
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|starty
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
operator|*
name|d
operator|++
operator|=
name|src
index|[
name|y
operator|*
name|sstride
operator|+
name|x
index|]
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
name|Q_STATIC_TEMPLATE_FUNCTION
DECL|function|qt_memrotate90_tiled_unpacked
specifier|inline
name|void
name|qt_memrotate90_tiled_unpacked
parameter_list|(
specifier|const
name|T
modifier|*
name|src
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|sstride
parameter_list|,
name|T
modifier|*
name|dest
parameter_list|,
name|int
name|dstride
parameter_list|)
block|{
specifier|const
name|int
name|numTilesX
init|=
operator|(
name|w
operator|+
name|tileSize
operator|-
literal|1
operator|)
operator|/
name|tileSize
decl_stmt|;
specifier|const
name|int
name|numTilesY
init|=
operator|(
name|h
operator|+
name|tileSize
operator|-
literal|1
operator|)
operator|/
name|tileSize
decl_stmt|;
for|for
control|(
name|int
name|tx
init|=
literal|0
init|;
name|tx
operator|<
name|numTilesX
condition|;
operator|++
name|tx
control|)
block|{
specifier|const
name|int
name|startx
init|=
name|w
operator|-
name|tx
operator|*
name|tileSize
operator|-
literal|1
decl_stmt|;
specifier|const
name|int
name|stopx
init|=
name|qMax
argument_list|(
name|startx
operator|-
name|tileSize
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|ty
init|=
literal|0
init|;
name|ty
operator|<
name|numTilesY
condition|;
operator|++
name|ty
control|)
block|{
specifier|const
name|int
name|starty
init|=
name|ty
operator|*
name|tileSize
decl_stmt|;
specifier|const
name|int
name|stopy
init|=
name|qMin
argument_list|(
name|starty
operator|+
name|tileSize
argument_list|,
name|h
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|startx
init|;
name|x
operator|>=
name|stopx
condition|;
operator|--
name|x
control|)
block|{
name|T
modifier|*
name|d
init|=
operator|(
name|T
operator|*
operator|)
operator|(
operator|(
name|char
operator|*
operator|)
name|dest
operator|+
operator|(
name|w
operator|-
name|x
operator|-
literal|1
operator|)
operator|*
name|dstride
operator|)
operator|+
name|starty
decl_stmt|;
specifier|const
name|char
modifier|*
name|s
init|=
operator|(
specifier|const
name|char
operator|*
operator|)
operator|(
name|src
operator|+
name|x
operator|)
operator|+
name|starty
operator|*
name|sstride
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|starty
init|;
name|y
operator|<
name|stopy
condition|;
operator|++
name|y
control|)
block|{
operator|*
name|d
operator|++
operator|=
operator|*
operator|(
specifier|const
name|T
operator|*
operator|)
operator|(
name|s
operator|)
expr_stmt|;
name|s
operator|+=
name|sstride
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
name|Q_STATIC_TEMPLATE_FUNCTION
DECL|function|qt_memrotate270_tiled
specifier|inline
name|void
name|qt_memrotate270_tiled
parameter_list|(
specifier|const
name|T
modifier|*
name|src
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|sstride
parameter_list|,
name|T
modifier|*
name|dest
parameter_list|,
name|int
name|dstride
parameter_list|)
block|{
name|sstride
operator|/=
sizeof|sizeof
argument_list|(
name|T
argument_list|)
expr_stmt|;
name|dstride
operator|/=
sizeof|sizeof
argument_list|(
name|T
argument_list|)
expr_stmt|;
specifier|const
name|int
name|pack
init|=
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|T
argument_list|)
decl_stmt|;
specifier|const
name|int
name|unaligned
init|=
name|qMin
argument_list|(
name|uint
argument_list|(
operator|(
name|long
argument_list|(
name|dest
argument_list|)
operator|&
operator|(
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
operator|-
literal|1
operator|)
operator|)
operator|/
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
argument_list|,
name|uint
argument_list|(
name|h
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|int
name|restX
init|=
name|w
operator|%
name|tileSize
decl_stmt|;
specifier|const
name|int
name|restY
init|=
operator|(
name|h
operator|-
name|unaligned
operator|)
operator|%
name|tileSize
decl_stmt|;
specifier|const
name|int
name|unoptimizedY
init|=
name|restY
operator|%
name|pack
decl_stmt|;
specifier|const
name|int
name|numTilesX
init|=
name|w
operator|/
name|tileSize
operator|+
operator|(
name|restX
operator|>
literal|0
operator|)
decl_stmt|;
specifier|const
name|int
name|numTilesY
init|=
operator|(
name|h
operator|-
name|unaligned
operator|)
operator|/
name|tileSize
operator|+
operator|(
name|restY
operator|>=
name|pack
operator|)
decl_stmt|;
for|for
control|(
name|int
name|tx
init|=
literal|0
init|;
name|tx
operator|<
name|numTilesX
condition|;
operator|++
name|tx
control|)
block|{
specifier|const
name|int
name|startx
init|=
name|tx
operator|*
name|tileSize
decl_stmt|;
specifier|const
name|int
name|stopx
init|=
name|qMin
argument_list|(
name|startx
operator|+
name|tileSize
argument_list|,
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|unaligned
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
name|startx
init|;
name|x
operator|<
name|stopx
condition|;
operator|++
name|x
control|)
block|{
name|T
modifier|*
name|d
init|=
name|dest
operator|+
name|x
operator|*
name|dstride
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|h
operator|-
literal|1
init|;
name|y
operator|>=
name|h
operator|-
name|unaligned
condition|;
operator|--
name|y
control|)
block|{
operator|*
name|d
operator|++
operator|=
name|src
index|[
name|y
operator|*
name|sstride
operator|+
name|x
index|]
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|ty
init|=
literal|0
init|;
name|ty
operator|<
name|numTilesY
condition|;
operator|++
name|ty
control|)
block|{
specifier|const
name|int
name|starty
init|=
name|h
operator|-
literal|1
operator|-
name|unaligned
operator|-
name|ty
operator|*
name|tileSize
decl_stmt|;
specifier|const
name|int
name|stopy
init|=
name|qMax
argument_list|(
name|starty
operator|-
name|tileSize
argument_list|,
name|unoptimizedY
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|startx
init|;
name|x
operator|<
name|stopx
condition|;
operator|++
name|x
control|)
block|{
name|quint32
modifier|*
name|d
init|=
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|dest
operator|+
name|x
operator|*
name|dstride
operator|+
name|h
operator|-
literal|1
operator|-
name|starty
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|starty
init|;
name|y
operator|>
name|stopy
condition|;
name|y
operator|-=
name|pack
control|)
block|{
name|quint32
name|c
init|=
name|src
index|[
name|y
operator|*
name|sstride
operator|+
name|x
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pack
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|shift
init|=
operator|(
sizeof|sizeof
argument_list|(
name|int
argument_list|)
operator|*
literal|8
operator|/
name|pack
operator|*
name|i
operator|)
decl_stmt|;
specifier|const
name|T
name|color
init|=
name|src
index|[
operator|(
name|y
operator|-
name|i
operator|)
operator|*
name|sstride
operator|+
name|x
index|]
decl_stmt|;
name|c
operator||=
name|color
operator|<<
name|shift
expr_stmt|;
block|}
operator|*
name|d
operator|++
operator|=
name|c
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|unoptimizedY
condition|)
block|{
specifier|const
name|int
name|starty
init|=
name|unoptimizedY
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|startx
init|;
name|x
operator|<
name|stopx
condition|;
operator|++
name|x
control|)
block|{
name|T
modifier|*
name|d
init|=
name|dest
operator|+
name|x
operator|*
name|dstride
operator|+
name|h
operator|-
literal|1
operator|-
name|starty
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|starty
init|;
name|y
operator|>=
literal|0
condition|;
operator|--
name|y
control|)
block|{
operator|*
name|d
operator|++
operator|=
name|src
index|[
name|y
operator|*
name|sstride
operator|+
name|x
index|]
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
name|Q_STATIC_TEMPLATE_FUNCTION
DECL|function|qt_memrotate270_tiled_unpacked
specifier|inline
name|void
name|qt_memrotate270_tiled_unpacked
parameter_list|(
specifier|const
name|T
modifier|*
name|src
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|sstride
parameter_list|,
name|T
modifier|*
name|dest
parameter_list|,
name|int
name|dstride
parameter_list|)
block|{
specifier|const
name|int
name|numTilesX
init|=
operator|(
name|w
operator|+
name|tileSize
operator|-
literal|1
operator|)
operator|/
name|tileSize
decl_stmt|;
specifier|const
name|int
name|numTilesY
init|=
operator|(
name|h
operator|+
name|tileSize
operator|-
literal|1
operator|)
operator|/
name|tileSize
decl_stmt|;
for|for
control|(
name|int
name|tx
init|=
literal|0
init|;
name|tx
operator|<
name|numTilesX
condition|;
operator|++
name|tx
control|)
block|{
specifier|const
name|int
name|startx
init|=
name|tx
operator|*
name|tileSize
decl_stmt|;
specifier|const
name|int
name|stopx
init|=
name|qMin
argument_list|(
name|startx
operator|+
name|tileSize
argument_list|,
name|w
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|ty
init|=
literal|0
init|;
name|ty
operator|<
name|numTilesY
condition|;
operator|++
name|ty
control|)
block|{
specifier|const
name|int
name|starty
init|=
name|h
operator|-
literal|1
operator|-
name|ty
operator|*
name|tileSize
decl_stmt|;
specifier|const
name|int
name|stopy
init|=
name|qMax
argument_list|(
name|starty
operator|-
name|tileSize
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|startx
init|;
name|x
operator|<
name|stopx
condition|;
operator|++
name|x
control|)
block|{
name|T
modifier|*
name|d
init|=
operator|(
name|T
operator|*
operator|)
operator|(
operator|(
name|char
operator|*
operator|)
name|dest
operator|+
name|x
operator|*
name|dstride
operator|)
operator|+
name|h
operator|-
literal|1
operator|-
name|starty
decl_stmt|;
specifier|const
name|char
modifier|*
name|s
init|=
operator|(
specifier|const
name|char
operator|*
operator|)
operator|(
name|src
operator|+
name|x
operator|)
operator|+
name|starty
operator|*
name|sstride
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|starty
init|;
name|y
operator|>=
name|stopy
condition|;
operator|--
name|y
control|)
block|{
operator|*
name|d
operator|++
operator|=
operator|*
operator|(
specifier|const
name|T
operator|*
operator|)
name|s
expr_stmt|;
name|s
operator|-=
name|sstride
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_ROTATION_ALGORITHM
end_comment
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
name|Q_STATIC_TEMPLATE_FUNCTION
DECL|function|qt_memrotate90_template
specifier|inline
name|void
name|qt_memrotate90_template
parameter_list|(
specifier|const
name|T
modifier|*
name|src
parameter_list|,
name|int
name|srcWidth
parameter_list|,
name|int
name|srcHeight
parameter_list|,
name|int
name|srcStride
parameter_list|,
name|T
modifier|*
name|dest
parameter_list|,
name|int
name|dstStride
parameter_list|)
block|{
if|#
directive|if
name|QT_ROTATION_ALGORITHM
operator|==
name|QT_ROTATION_CACHEDREAD
name|qt_memrotate90_cachedRead
argument_list|<
name|T
argument_list|>
argument_list|(
name|src
argument_list|,
name|srcWidth
argument_list|,
name|srcHeight
argument_list|,
name|srcStride
argument_list|,
name|dest
argument_list|,
name|dstStride
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|QT_ROTATION_ALGORITHM
operator|==
name|QT_ROTATION_CACHEDWRITE
name|qt_memrotate90_cachedWrite
argument_list|<
name|T
argument_list|>
argument_list|(
name|src
argument_list|,
name|srcWidth
argument_list|,
name|srcHeight
argument_list|,
name|srcStride
argument_list|,
name|dest
argument_list|,
name|dstStride
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|QT_ROTATION_ALGORITHM
operator|==
name|QT_ROTATION_PACKING
name|qt_memrotate90_packing
argument_list|<
name|T
argument_list|>
argument_list|(
name|src
argument_list|,
name|srcWidth
argument_list|,
name|srcHeight
argument_list|,
name|srcStride
argument_list|,
name|dest
argument_list|,
name|dstStride
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|QT_ROTATION_ALGORITHM
operator|==
name|QT_ROTATION_TILED
name|qt_memrotate90_tiled
argument_list|<
name|T
argument_list|>
argument_list|(
name|src
argument_list|,
name|srcWidth
argument_list|,
name|srcHeight
argument_list|,
name|srcStride
argument_list|,
name|dest
argument_list|,
name|dstStride
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
name|Q_STATIC_TEMPLATE_FUNCTION
DECL|function|qt_memrotate180_template
specifier|inline
name|void
name|qt_memrotate180_template
parameter_list|(
specifier|const
name|T
modifier|*
name|src
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|sstride
parameter_list|,
name|T
modifier|*
name|dest
parameter_list|,
name|int
name|dstride
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|s
init|=
operator|(
specifier|const
name|char
operator|*
operator|)
operator|(
name|src
operator|)
operator|+
operator|(
name|h
operator|-
literal|1
operator|)
operator|*
name|sstride
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|h
operator|-
literal|1
init|;
name|y
operator|>=
literal|0
condition|;
operator|--
name|y
control|)
block|{
name|T
modifier|*
name|d
init|=
cast|reinterpret_cast
argument_list|<
name|T
operator|*
argument_list|>
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|(
name|dest
operator|)
operator|+
operator|(
name|h
operator|-
name|y
operator|-
literal|1
operator|)
operator|*
name|dstride
argument_list|)
decl_stmt|;
name|src
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|T
operator|*
argument_list|>
argument_list|(
name|s
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
name|w
operator|-
literal|1
init|;
name|x
operator|>=
literal|0
condition|;
operator|--
name|x
control|)
block|{
name|d
index|[
name|w
operator|-
name|x
operator|-
literal|1
index|]
operator|=
name|src
index|[
name|x
index|]
expr_stmt|;
block|}
name|s
operator|-=
name|sstride
expr_stmt|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
name|Q_STATIC_TEMPLATE_FUNCTION
DECL|function|qt_memrotate270_template
specifier|inline
name|void
name|qt_memrotate270_template
parameter_list|(
specifier|const
name|T
modifier|*
name|src
parameter_list|,
name|int
name|srcWidth
parameter_list|,
name|int
name|srcHeight
parameter_list|,
name|int
name|srcStride
parameter_list|,
name|T
modifier|*
name|dest
parameter_list|,
name|int
name|dstStride
parameter_list|)
block|{
if|#
directive|if
name|QT_ROTATION_ALGORITHM
operator|==
name|QT_ROTATION_CACHEDREAD
name|qt_memrotate270_cachedRead
argument_list|<
name|T
argument_list|>
argument_list|(
name|src
argument_list|,
name|srcWidth
argument_list|,
name|srcHeight
argument_list|,
name|srcStride
argument_list|,
name|dest
argument_list|,
name|dstStride
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|QT_ROTATION_ALGORITHM
operator|==
name|QT_ROTATION_CACHEDWRITE
name|qt_memrotate270_cachedWrite
argument_list|<
name|T
argument_list|>
argument_list|(
name|src
argument_list|,
name|srcWidth
argument_list|,
name|srcHeight
argument_list|,
name|srcStride
argument_list|,
name|dest
argument_list|,
name|dstStride
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|QT_ROTATION_ALGORITHM
operator|==
name|QT_ROTATION_PACKING
name|qt_memrotate270_packing
argument_list|<
name|T
argument_list|>
argument_list|(
name|src
argument_list|,
name|srcWidth
argument_list|,
name|srcHeight
argument_list|,
name|srcStride
argument_list|,
name|dest
argument_list|,
name|dstStride
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|QT_ROTATION_ALGORITHM
operator|==
name|QT_ROTATION_TILED
name|qt_memrotate270_tiled_unpacked
argument_list|<
name|T
argument_list|>
argument_list|(
name|src
argument_list|,
name|srcWidth
argument_list|,
name|srcHeight
argument_list|,
name|srcStride
argument_list|,
name|dest
argument_list|,
name|dstStride
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|qt_memrotate90_template
specifier|inline
name|void
name|qt_memrotate90_template
argument_list|<
name|quint24
argument_list|>
parameter_list|(
specifier|const
name|quint24
modifier|*
name|src
parameter_list|,
name|int
name|srcWidth
parameter_list|,
name|int
name|srcHeight
parameter_list|,
name|int
name|srcStride
parameter_list|,
name|quint24
modifier|*
name|dest
parameter_list|,
name|int
name|dstStride
parameter_list|)
block|{
if|#
directive|if
name|QT_ROTATION_ALGORITHM
operator|==
name|QT_ROTATION_CACHEDREAD
name|qt_memrotate90_cachedRead
argument_list|<
name|quint24
argument_list|>
argument_list|(
name|src
argument_list|,
name|srcWidth
argument_list|,
name|srcHeight
argument_list|,
name|srcStride
argument_list|,
name|dest
argument_list|,
name|dstStride
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|QT_ROTATION_ALGORITHM
operator|==
name|QT_ROTATION_CACHEDWRITE
name|qt_memrotate90_cachedWrite
argument_list|<
name|quint24
argument_list|>
argument_list|(
name|src
argument_list|,
name|srcWidth
argument_list|,
name|srcHeight
argument_list|,
name|srcStride
argument_list|,
name|dest
argument_list|,
name|dstStride
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|QT_ROTATION_ALGORITHM
operator|==
name|QT_ROTATION_PACKING
comment|// packed algorithm not implemented
name|qt_memrotate90_cachedRead
argument_list|<
name|quint24
argument_list|>
argument_list|(
name|src
argument_list|,
name|srcWidth
argument_list|,
name|srcHeight
argument_list|,
name|srcStride
argument_list|,
name|dest
argument_list|,
name|dstStride
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|QT_ROTATION_ALGORITHM
operator|==
name|QT_ROTATION_TILED
comment|// packed algorithm not implemented
name|qt_memrotate90_tiled_unpacked
argument_list|<
name|quint24
argument_list|>
argument_list|(
name|src
argument_list|,
name|srcWidth
argument_list|,
name|srcHeight
argument_list|,
name|srcStride
argument_list|,
name|dest
argument_list|,
name|dstStride
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_define
DECL|macro|QT_IMPL_MEMROTATE
define|#
directive|define
name|QT_IMPL_MEMROTATE
parameter_list|(
name|type
parameter_list|)
define|\
value|Q_GUI_EXPORT void qt_memrotate90(const type *src, int w, int h, int sstride, \                                  type *dest, int dstride)           \ {                                                                   \     qt_memrotate90_template(src, w, h, sstride, dest, dstride);     \ }                                                                   \ Q_GUI_EXPORT void qt_memrotate180(const type *src, int w, int h, int sstride, \                                   type *dest, int dstride)          \ {                                                                   \     qt_memrotate180_template(src, w, h, sstride, dest, dstride);    \ }                                                                   \ Q_GUI_EXPORT void qt_memrotate270(const type *src, int w, int h, int sstride, \                                   type *dest, int dstride)          \ {                                                                   \     qt_memrotate270_template(src, w, h, sstride, dest, dstride);    \ }
end_define
begin_define
DECL|macro|QT_IMPL_SIMPLE_MEMROTATE
define|#
directive|define
name|QT_IMPL_SIMPLE_MEMROTATE
parameter_list|(
name|type
parameter_list|)
define|\
value|Q_GUI_EXPORT void qt_memrotate90(const type *src, int w, int h, int sstride,  \                                  type *dest, int dstride)           \ {                                                                   \     qt_memrotate90_tiled_unpacked<type>(src, w, h, sstride, dest, dstride); \ }                                                                   \ Q_GUI_EXPORT void qt_memrotate180(const type *src, int w, int h, int sstride, \                                   type *dest, int dstride)          \ {                                                                   \     qt_memrotate180_template(src, w, h, sstride, dest, dstride);    \ }                                                                   \ Q_GUI_EXPORT void qt_memrotate270(const type *src, int w, int h, int sstride, \                                   type *dest, int dstride)          \ {                                                                   \     qt_memrotate270_tiled_unpacked<type>(src, w, h, sstride, dest, dstride); \ }
end_define
begin_macro
name|QT_IMPL_MEMROTATE
argument_list|(
argument|quint32
argument_list|)
end_macro
begin_macro
name|QT_IMPL_MEMROTATE
argument_list|(
argument|quint16
argument_list|)
end_macro
begin_macro
name|QT_IMPL_MEMROTATE
argument_list|(
argument|quint24
argument_list|)
end_macro
begin_macro
name|QT_IMPL_MEMROTATE
argument_list|(
argument|quint8
argument_list|)
end_macro
begin_function
DECL|function|qt_memrotate90_8
name|void
name|qt_memrotate90_8
parameter_list|(
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|)
block|{
name|qt_memrotate90
argument_list|(
name|srcPixels
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|sbpl
argument_list|,
name|destPixels
argument_list|,
name|dbpl
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_memrotate180_8
name|void
name|qt_memrotate180_8
parameter_list|(
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|)
block|{
name|qt_memrotate180
argument_list|(
name|srcPixels
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|sbpl
argument_list|,
name|destPixels
argument_list|,
name|dbpl
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_memrotate270_8
name|void
name|qt_memrotate270_8
parameter_list|(
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|)
block|{
name|qt_memrotate270
argument_list|(
name|srcPixels
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|sbpl
argument_list|,
name|destPixels
argument_list|,
name|dbpl
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_memrotate90_16
name|void
name|qt_memrotate90_16
parameter_list|(
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|)
block|{
name|qt_memrotate90
argument_list|(
operator|(
specifier|const
name|ushort
operator|*
operator|)
name|srcPixels
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|sbpl
argument_list|,
operator|(
name|ushort
operator|*
operator|)
name|destPixels
argument_list|,
name|dbpl
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_memrotate180_16
name|void
name|qt_memrotate180_16
parameter_list|(
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|)
block|{
name|qt_memrotate180
argument_list|(
operator|(
specifier|const
name|ushort
operator|*
operator|)
name|srcPixels
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|sbpl
argument_list|,
operator|(
name|ushort
operator|*
operator|)
name|destPixels
argument_list|,
name|dbpl
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_memrotate270_16
name|void
name|qt_memrotate270_16
parameter_list|(
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|)
block|{
name|qt_memrotate270
argument_list|(
operator|(
specifier|const
name|ushort
operator|*
operator|)
name|srcPixels
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|sbpl
argument_list|,
operator|(
name|ushort
operator|*
operator|)
name|destPixels
argument_list|,
name|dbpl
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_memrotate90_32
name|void
name|qt_memrotate90_32
parameter_list|(
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|)
block|{
name|qt_memrotate90
argument_list|(
operator|(
specifier|const
name|uint
operator|*
operator|)
name|srcPixels
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|sbpl
argument_list|,
operator|(
name|uint
operator|*
operator|)
name|destPixels
argument_list|,
name|dbpl
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_memrotate180_32
name|void
name|qt_memrotate180_32
parameter_list|(
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|)
block|{
name|qt_memrotate180
argument_list|(
operator|(
specifier|const
name|uint
operator|*
operator|)
name|srcPixels
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|sbpl
argument_list|,
operator|(
name|uint
operator|*
operator|)
name|destPixels
argument_list|,
name|dbpl
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_memrotate270_32
name|void
name|qt_memrotate270_32
parameter_list|(
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|)
block|{
name|qt_memrotate270
argument_list|(
operator|(
specifier|const
name|uint
operator|*
operator|)
name|srcPixels
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|sbpl
argument_list|,
operator|(
name|uint
operator|*
operator|)
name|destPixels
argument_list|,
name|dbpl
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|qMemRotateFunctions
name|MemRotateFunc
name|qMemRotateFunctions
index|[
name|QImage
operator|::
name|NImageFormats
index|]
index|[
literal|3
index|]
init|=
comment|// 90, 180, 270
block|{
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_Invalid,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_Mono,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_MonoLSB,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_Indexed8,
block|{
name|qt_memrotate90_32
block|,
name|qt_memrotate180_32
block|,
name|qt_memrotate270_32
block|}
block|,
comment|// Format_RGB32,
block|{
name|qt_memrotate90_32
block|,
name|qt_memrotate180_32
block|,
name|qt_memrotate270_32
block|}
block|,
comment|// Format_ARGB32,
block|{
name|qt_memrotate90_32
block|,
name|qt_memrotate180_32
block|,
name|qt_memrotate270_32
block|}
block|,
comment|// Format_ARGB32_Premultiplied,
block|{
name|qt_memrotate90_16
block|,
name|qt_memrotate180_16
block|,
name|qt_memrotate270_16
block|}
block|,
comment|// Format_RGB16,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_ARGB8565_Premultiplied,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB666,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_ARGB6666_Premultiplied,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB555,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_ARGB8555_Premultiplied,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB888,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB444,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_ARGB4444_Premultiplied,
block|{
name|qt_memrotate90_32
block|,
name|qt_memrotate180_32
block|,
name|qt_memrotate270_32
block|}
block|,
comment|// Format_RGBX8888,
block|{
name|qt_memrotate90_32
block|,
name|qt_memrotate180_32
block|,
name|qt_memrotate270_32
block|}
block|,
comment|// Format_RGBA8888,
block|{
name|qt_memrotate90_32
block|,
name|qt_memrotate180_32
block|,
name|qt_memrotate270_32
block|}
block|,
comment|// Format_RGBA8888_Premultiplied,
block|{
name|qt_memrotate90_32
block|,
name|qt_memrotate180_32
block|,
name|qt_memrotate270_32
block|}
block|,
comment|// Format_BGB30,
block|{
name|qt_memrotate90_32
block|,
name|qt_memrotate180_32
block|,
name|qt_memrotate270_32
block|}
block|,
comment|// Format_A2BGR30_Premultiplied,
block|{
name|qt_memrotate90_32
block|,
name|qt_memrotate180_32
block|,
name|qt_memrotate270_32
block|}
block|,
comment|// Format_RGB30,
block|{
name|qt_memrotate90_32
block|,
name|qt_memrotate180_32
block|,
name|qt_memrotate270_32
block|}
block|,
comment|// Format_A2RGB30_Premultiplied,
block|{
name|qt_memrotate90_8
block|,
name|qt_memrotate180_8
block|,
name|qt_memrotate270_8
block|}
block|,
comment|// Format_Alpha8,
block|{
name|qt_memrotate90_8
block|,
name|qt_memrotate180_8
block|,
name|qt_memrotate270_8
block|}
block|,
comment|// Format_Grayscale8,
block|}
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
