begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QBEZIER_P_H
end_ifndef
begin_define
DECL|macro|QBEZIER_P_H
define|#
directive|define
name|QBEZIER_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of other Qt classes.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtCore/qpoint.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qline.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qrect.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qvector.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qlist.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qpair.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qtransform.h"
end_include
begin_include
include|#
directive|include
file|<private/qdatabuffer_p.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QPolygonF
name|class
name|QPolygonF
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QBezier
block|{
name|public
label|:
specifier|static
name|QBezier
name|fromPoints
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p1
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|p2
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|p3
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|p4
parameter_list|)
function_decl|;
specifier|static
name|void
name|coefficients
parameter_list|(
name|qreal
name|t
parameter_list|,
name|qreal
modifier|&
name|a
parameter_list|,
name|qreal
modifier|&
name|b
parameter_list|,
name|qreal
modifier|&
name|c
parameter_list|,
name|qreal
modifier|&
name|d
parameter_list|)
function_decl|;
specifier|inline
name|QPointF
name|pointAt
argument_list|(
name|qreal
name|t
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|QPointF
name|normalVector
argument_list|(
name|qreal
name|t
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|QPointF
name|derivedAt
argument_list|(
name|qreal
name|t
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|QPointF
name|secondDerivedAt
argument_list|(
name|qreal
name|t
argument_list|)
decl|const
decl_stmt|;
name|QPolygonF
name|toPolygon
argument_list|(
name|qreal
name|bezier_flattening_threshold
operator|=
literal|0.5
argument_list|)
decl|const
decl_stmt|;
name|void
name|addToPolygon
argument_list|(
name|QPolygonF
operator|*
name|p
argument_list|,
name|qreal
name|bezier_flattening_threshold
operator|=
literal|0.5
argument_list|)
decl|const
decl_stmt|;
name|void
name|addToPolygon
argument_list|(
name|QDataBuffer
operator|<
name|QPointF
operator|>
operator|&
name|polygon
argument_list|,
name|qreal
name|bezier_flattening_threshold
argument_list|)
decl|const
decl_stmt|;
name|QRectF
name|bounds
argument_list|()
specifier|const
expr_stmt|;
name|qreal
name|length
argument_list|(
name|qreal
name|error
operator|=
literal|0.01
argument_list|)
decl|const
decl_stmt|;
name|void
name|addIfClose
argument_list|(
name|qreal
operator|*
name|length
argument_list|,
name|qreal
name|error
argument_list|)
decl|const
decl_stmt|;
name|qreal
name|tAtLength
argument_list|(
name|qreal
name|len
argument_list|)
decl|const
decl_stmt|;
name|int
name|stationaryYPoints
argument_list|(
name|qreal
operator|&
name|t0
argument_list|,
name|qreal
operator|&
name|t1
argument_list|)
decl|const
decl_stmt|;
name|qreal
name|tForY
argument_list|(
name|qreal
name|t0
argument_list|,
name|qreal
name|t1
argument_list|,
name|qreal
name|y
argument_list|)
decl|const
decl_stmt|;
name|QPointF
name|pt1
argument_list|()
specifier|const
block|{
return|return
name|QPointF
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
return|;
block|}
name|QPointF
name|pt2
argument_list|()
specifier|const
block|{
return|return
name|QPointF
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
return|;
block|}
name|QPointF
name|pt3
argument_list|()
specifier|const
block|{
return|return
name|QPointF
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|)
return|;
block|}
name|QPointF
name|pt4
argument_list|()
specifier|const
block|{
return|return
name|QPointF
argument_list|(
name|x4
argument_list|,
name|y4
argument_list|)
return|;
block|}
name|QBezier
name|mapBy
argument_list|(
specifier|const
name|QTransform
operator|&
name|transform
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|QPointF
name|midPoint
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QLineF
name|midTangent
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QLineF
name|startTangent
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QLineF
name|endTangent
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|void
name|parameterSplitLeft
parameter_list|(
name|qreal
name|t
parameter_list|,
name|QBezier
modifier|*
name|left
parameter_list|)
function_decl|;
specifier|inline
name|void
name|split
argument_list|(
name|QBezier
operator|*
name|firstHalf
argument_list|,
name|QBezier
operator|*
name|secondHalf
argument_list|)
decl|const
decl_stmt|;
name|int
name|shifted
argument_list|(
name|QBezier
operator|*
name|curveSegments
argument_list|,
name|int
name|maxSegmets
argument_list|,
name|qreal
name|offset
argument_list|,
name|float
name|threshold
argument_list|)
decl|const
decl_stmt|;
name|QBezier
name|bezierOnInterval
argument_list|(
name|qreal
name|t0
argument_list|,
name|qreal
name|t1
argument_list|)
decl|const
decl_stmt|;
name|QBezier
name|getSubRange
argument_list|(
name|qreal
name|t0
argument_list|,
name|qreal
name|t1
argument_list|)
decl|const
decl_stmt|;
name|qreal
name|x1
decl_stmt|,
name|y1
decl_stmt|,
name|x2
decl_stmt|,
name|y2
decl_stmt|,
name|x3
decl_stmt|,
name|y3
decl_stmt|,
name|x4
decl_stmt|,
name|y4
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
DECL|function|midPoint
specifier|inline
name|QPointF
name|QBezier
operator|::
name|midPoint
argument_list|()
specifier|const
block|{
return|return
name|QPointF
argument_list|(
operator|(
name|x1
operator|+
name|x4
operator|+
literal|3
operator|*
operator|(
name|x2
operator|+
name|x3
operator|)
operator|)
operator|/
literal|8.
argument_list|,
operator|(
name|y1
operator|+
name|y4
operator|+
literal|3
operator|*
operator|(
name|y2
operator|+
name|y3
operator|)
operator|)
operator|/
literal|8.
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|midTangent
specifier|inline
name|QLineF
name|QBezier
operator|::
name|midTangent
argument_list|()
specifier|const
block|{
name|QPointF
name|mid
operator|=
name|midPoint
argument_list|()
block|;
name|QLineF
name|dir
argument_list|(
name|QLineF
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|)
operator|.
name|pointAt
argument_list|(
literal|0.5
argument_list|)
argument_list|,
name|QLineF
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|,
name|x4
argument_list|,
name|y4
argument_list|)
operator|.
name|pointAt
argument_list|(
literal|0.5
argument_list|)
argument_list|)
block|;
return|return
name|QLineF
argument_list|(
name|mid
operator|.
name|x
argument_list|()
operator|-
name|dir
operator|.
name|dx
argument_list|()
argument_list|,
name|mid
operator|.
name|y
argument_list|()
operator|-
name|dir
operator|.
name|dy
argument_list|()
argument_list|,
name|mid
operator|.
name|x
argument_list|()
operator|+
name|dir
operator|.
name|dx
argument_list|()
argument_list|,
name|mid
operator|.
name|y
argument_list|()
operator|+
name|dir
operator|.
name|dy
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|startTangent
specifier|inline
name|QLineF
name|QBezier
operator|::
name|startTangent
argument_list|()
specifier|const
block|{
name|QLineF
name|tangent
argument_list|(
name|pt1
argument_list|()
argument_list|,
name|pt2
argument_list|()
argument_list|)
block|;
if|if
condition|(
name|tangent
operator|.
name|isNull
argument_list|()
condition|)
name|tangent
operator|=
name|QLineF
argument_list|(
name|pt1
argument_list|()
argument_list|,
name|pt3
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|tangent
operator|.
name|isNull
argument_list|()
condition|)
name|tangent
operator|=
name|QLineF
argument_list|(
name|pt1
argument_list|()
argument_list|,
name|pt4
argument_list|()
argument_list|)
expr_stmt|;
end_if
begin_return
return|return
name|tangent
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|endTangent
name|QLineF
name|QBezier
operator|::
name|endTangent
argument_list|()
specifier|const
block|{
name|QLineF
name|tangent
argument_list|(
name|pt4
argument_list|()
argument_list|,
name|pt3
argument_list|()
argument_list|)
block|;
if|if
condition|(
name|tangent
operator|.
name|isNull
argument_list|()
condition|)
name|tangent
operator|=
name|QLineF
argument_list|(
name|pt4
argument_list|()
argument_list|,
name|pt2
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|tangent
operator|.
name|isNull
argument_list|()
condition|)
name|tangent
operator|=
name|QLineF
argument_list|(
name|pt4
argument_list|()
argument_list|,
name|pt1
argument_list|()
argument_list|)
expr_stmt|;
end_if
begin_return
return|return
name|tangent
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|coefficients
name|void
name|QBezier
operator|::
name|coefficients
argument_list|(
argument|qreal t
argument_list|,
argument|qreal&a
argument_list|,
argument|qreal&b
argument_list|,
argument|qreal&c
argument_list|,
argument|qreal&d
argument_list|)
block|{
name|qreal
name|m_t
operator|=
literal|1.
operator|-
name|t
block|;
name|b
operator|=
name|m_t
operator|*
name|m_t
block|;
name|c
operator|=
name|t
operator|*
name|t
block|;
name|d
operator|=
name|c
operator|*
name|t
block|;
name|a
operator|=
name|b
operator|*
name|m_t
block|;
name|b
operator|*=
literal|3.
operator|*
name|t
block|;
name|c
operator|*=
literal|3.
operator|*
name|m_t
block|; }
DECL|function|pointAt
specifier|inline
name|QPointF
name|QBezier
operator|::
name|pointAt
argument_list|(
argument|qreal t
argument_list|)
specifier|const
block|{
comment|// numerically more stable:
name|qreal
name|x
block|,
name|y
block|;
name|qreal
name|m_t
operator|=
literal|1.
operator|-
name|t
block|;
block|{
name|qreal
name|a
operator|=
name|x1
operator|*
name|m_t
operator|+
name|x2
operator|*
name|t
block|;
name|qreal
name|b
operator|=
name|x2
operator|*
name|m_t
operator|+
name|x3
operator|*
name|t
block|;
name|qreal
name|c
operator|=
name|x3
operator|*
name|m_t
operator|+
name|x4
operator|*
name|t
block|;
name|a
operator|=
name|a
operator|*
name|m_t
operator|+
name|b
operator|*
name|t
block|;
name|b
operator|=
name|b
operator|*
name|m_t
operator|+
name|c
operator|*
name|t
block|;
name|x
operator|=
name|a
operator|*
name|m_t
operator|+
name|b
operator|*
name|t
block|;     }
block|{
name|qreal
name|a
operator|=
name|y1
operator|*
name|m_t
operator|+
name|y2
operator|*
name|t
block|;
name|qreal
name|b
operator|=
name|y2
operator|*
name|m_t
operator|+
name|y3
operator|*
name|t
block|;
name|qreal
name|c
operator|=
name|y3
operator|*
name|m_t
operator|+
name|y4
operator|*
name|t
block|;
name|a
operator|=
name|a
operator|*
name|m_t
operator|+
name|b
operator|*
name|t
block|;
name|b
operator|=
name|b
operator|*
name|m_t
operator|+
name|c
operator|*
name|t
block|;
name|y
operator|=
name|a
operator|*
name|m_t
operator|+
name|b
operator|*
name|t
block|;     }
return|return
name|QPointF
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|normalVector
specifier|inline
name|QPointF
name|QBezier
operator|::
name|normalVector
argument_list|(
argument|qreal t
argument_list|)
specifier|const
block|{
name|qreal
name|m_t
operator|=
literal|1.
operator|-
name|t
block|;
name|qreal
name|a
operator|=
name|m_t
operator|*
name|m_t
block|;
name|qreal
name|b
operator|=
name|t
operator|*
name|m_t
block|;
name|qreal
name|c
operator|=
name|t
operator|*
name|t
block|;
return|return
name|QPointF
argument_list|(
operator|(
name|y2
operator|-
name|y1
operator|)
operator|*
name|a
operator|+
operator|(
name|y3
operator|-
name|y2
operator|)
operator|*
name|b
operator|+
operator|(
name|y4
operator|-
name|y3
operator|)
operator|*
name|c
argument_list|,
operator|-
operator|(
name|x2
operator|-
name|x1
operator|)
operator|*
name|a
operator|-
operator|(
name|x3
operator|-
name|x2
operator|)
operator|*
name|b
operator|-
operator|(
name|x4
operator|-
name|x3
operator|)
operator|*
name|c
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|derivedAt
specifier|inline
name|QPointF
name|QBezier
operator|::
name|derivedAt
argument_list|(
argument|qreal t
argument_list|)
specifier|const
block|{
comment|// p'(t) = 3 * (-(1-2t+t^2) * p0 + (1 - 4 * t + 3 * t^2) * p1 + (2 * t - 3 * t^2) * p2 + t^2 * p3)
name|qreal
name|m_t
operator|=
literal|1.
operator|-
name|t
block|;
name|qreal
name|d
operator|=
name|t
operator|*
name|t
block|;
name|qreal
name|a
operator|=
operator|-
name|m_t
operator|*
name|m_t
block|;
name|qreal
name|b
operator|=
literal|1
operator|-
literal|4
operator|*
name|t
operator|+
literal|3
operator|*
name|d
block|;
name|qreal
name|c
operator|=
literal|2
operator|*
name|t
operator|-
literal|3
operator|*
name|d
block|;
return|return
literal|3
operator|*
name|QPointF
argument_list|(
name|a
operator|*
name|x1
operator|+
name|b
operator|*
name|x2
operator|+
name|c
operator|*
name|x3
operator|+
name|d
operator|*
name|x4
argument_list|,
name|a
operator|*
name|y1
operator|+
name|b
operator|*
name|y2
operator|+
name|c
operator|*
name|y3
operator|+
name|d
operator|*
name|y4
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|secondDerivedAt
specifier|inline
name|QPointF
name|QBezier
operator|::
name|secondDerivedAt
argument_list|(
argument|qreal t
argument_list|)
specifier|const
block|{
name|qreal
name|a
operator|=
literal|2.
operator|-
literal|2.
operator|*
name|t
block|;
name|qreal
name|b
operator|=
operator|-
literal|4
operator|+
literal|6
operator|*
name|t
block|;
name|qreal
name|c
operator|=
literal|2
operator|-
literal|6
operator|*
name|t
block|;
name|qreal
name|d
operator|=
literal|2
operator|*
name|t
block|;
return|return
literal|3
operator|*
name|QPointF
argument_list|(
name|a
operator|*
name|x1
operator|+
name|b
operator|*
name|x2
operator|+
name|c
operator|*
name|x3
operator|+
name|d
operator|*
name|x4
argument_list|,
name|a
operator|*
name|y1
operator|+
name|b
operator|*
name|y2
operator|+
name|c
operator|*
name|y3
operator|+
name|d
operator|*
name|y4
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|split
specifier|inline
name|void
name|QBezier
operator|::
name|split
argument_list|(
argument|QBezier *firstHalf
argument_list|,
argument|QBezier *secondHalf
argument_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|firstHalf
argument_list|)
block|;
name|Q_ASSERT
argument_list|(
name|secondHalf
argument_list|)
block|;
name|qreal
name|c
operator|=
operator|(
name|x2
operator|+
name|x3
operator|)
operator|*
literal|.5
block|;
name|firstHalf
operator|->
name|x2
operator|=
operator|(
name|x1
operator|+
name|x2
operator|)
operator|*
literal|.5
block|;
name|secondHalf
operator|->
name|x3
operator|=
operator|(
name|x3
operator|+
name|x4
operator|)
operator|*
literal|.5
block|;
name|firstHalf
operator|->
name|x1
operator|=
name|x1
block|;
name|secondHalf
operator|->
name|x4
operator|=
name|x4
block|;
name|firstHalf
operator|->
name|x3
operator|=
operator|(
name|firstHalf
operator|->
name|x2
operator|+
name|c
operator|)
operator|*
literal|.5
block|;
name|secondHalf
operator|->
name|x2
operator|=
operator|(
name|secondHalf
operator|->
name|x3
operator|+
name|c
operator|)
operator|*
literal|.5
block|;
name|firstHalf
operator|->
name|x4
operator|=
name|secondHalf
operator|->
name|x1
operator|=
operator|(
name|firstHalf
operator|->
name|x3
operator|+
name|secondHalf
operator|->
name|x2
operator|)
operator|*
literal|.5
block|;
name|c
operator|=
operator|(
name|y2
operator|+
name|y3
operator|)
operator|/
literal|2
block|;
name|firstHalf
operator|->
name|y2
operator|=
operator|(
name|y1
operator|+
name|y2
operator|)
operator|*
literal|.5
block|;
name|secondHalf
operator|->
name|y3
operator|=
operator|(
name|y3
operator|+
name|y4
operator|)
operator|*
literal|.5
block|;
name|firstHalf
operator|->
name|y1
operator|=
name|y1
block|;
name|secondHalf
operator|->
name|y4
operator|=
name|y4
block|;
name|firstHalf
operator|->
name|y3
operator|=
operator|(
name|firstHalf
operator|->
name|y2
operator|+
name|c
operator|)
operator|*
literal|.5
block|;
name|secondHalf
operator|->
name|y2
operator|=
operator|(
name|secondHalf
operator|->
name|y3
operator|+
name|c
operator|)
operator|*
literal|.5
block|;
name|firstHalf
operator|->
name|y4
operator|=
name|secondHalf
operator|->
name|y1
operator|=
operator|(
name|firstHalf
operator|->
name|y3
operator|+
name|secondHalf
operator|->
name|y2
operator|)
operator|*
literal|.5
block|; }
DECL|function|parameterSplitLeft
specifier|inline
name|void
name|QBezier
operator|::
name|parameterSplitLeft
argument_list|(
argument|qreal t
argument_list|,
argument|QBezier *left
argument_list|)
block|{
name|left
operator|->
name|x1
operator|=
name|x1
block|;
name|left
operator|->
name|y1
operator|=
name|y1
block|;
name|left
operator|->
name|x2
operator|=
name|x1
operator|+
name|t
operator|*
operator|(
name|x2
operator|-
name|x1
operator|)
block|;
name|left
operator|->
name|y2
operator|=
name|y1
operator|+
name|t
operator|*
operator|(
name|y2
operator|-
name|y1
operator|)
block|;
name|left
operator|->
name|x3
operator|=
name|x2
operator|+
name|t
operator|*
operator|(
name|x3
operator|-
name|x2
operator|)
block|;
comment|// temporary holding spot
name|left
operator|->
name|y3
operator|=
name|y2
operator|+
name|t
operator|*
operator|(
name|y3
operator|-
name|y2
operator|)
block|;
comment|// temporary holding spot
name|x3
operator|=
name|x3
operator|+
name|t
operator|*
operator|(
name|x4
operator|-
name|x3
operator|)
block|;
name|y3
operator|=
name|y3
operator|+
name|t
operator|*
operator|(
name|y4
operator|-
name|y3
operator|)
block|;
name|x2
operator|=
name|left
operator|->
name|x3
operator|+
name|t
operator|*
operator|(
name|x3
operator|-
name|left
operator|->
name|x3
operator|)
block|;
name|y2
operator|=
name|left
operator|->
name|y3
operator|+
name|t
operator|*
operator|(
name|y3
operator|-
name|left
operator|->
name|y3
operator|)
block|;
name|left
operator|->
name|x3
operator|=
name|left
operator|->
name|x2
operator|+
name|t
operator|*
operator|(
name|left
operator|->
name|x3
operator|-
name|left
operator|->
name|x2
operator|)
block|;
name|left
operator|->
name|y3
operator|=
name|left
operator|->
name|y2
operator|+
name|t
operator|*
operator|(
name|left
operator|->
name|y3
operator|-
name|left
operator|->
name|y2
operator|)
block|;
name|left
operator|->
name|x4
operator|=
name|x1
operator|=
name|left
operator|->
name|x3
operator|+
name|t
operator|*
operator|(
name|x2
operator|-
name|left
operator|->
name|x3
operator|)
block|;
name|left
operator|->
name|y4
operator|=
name|y1
operator|=
name|left
operator|->
name|y3
operator|+
name|t
operator|*
operator|(
name|y2
operator|-
name|left
operator|->
name|y3
operator|)
block|; }
name|QT_END_NAMESPACE
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QBEZIER_P_H
end_comment
end_unit
