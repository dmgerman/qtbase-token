begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QPRINTENGINE_PDF_P_H
end_ifndef
begin_define
DECL|macro|QPRINTENGINE_PDF_P_H
define|#
directive|define
name|QPRINTENGINE_PDF_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtGui/qprintengine.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
end_ifndef
begin_include
include|#
directive|include
file|"QtCore/qmap.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qmatrix.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qstring.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qvector.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qpaintengine.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qpainterpath.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qdatastream.h"
end_include
begin_include
include|#
directive|include
file|"private/qfontengine_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qpdf_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qpaintengine_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// #define USE_NATIVE_GRADIENTS
DECL|variable|QImage
name|class
name|QImage
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDataStream
name|class
name|QDataStream
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPen
name|class
name|QPen
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPointF
name|class
name|QPointF
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QRegion
name|class
name|QRegion
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QFile
name|class
name|QFile
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPdfEngine
name|class
name|QPdfEngine
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPdfEnginePrivate
name|class
name|QPdfEnginePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QPdfEngine
range|:
name|public
name|QPdfBaseEngine
block|{
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QPdfEngine
argument_list|)
name|public
operator|:
name|QPdfEngine
argument_list|(
argument|QPrinter::PrinterMode m
argument_list|)
block|;
name|virtual
operator|~
name|QPdfEngine
argument_list|()
block|;
comment|// reimplementations QPaintEngine
name|bool
name|begin
argument_list|(
name|QPaintDevice
operator|*
name|pdev
argument_list|)
block|;
name|bool
name|end
argument_list|()
block|;
name|void
name|drawPixmap
argument_list|(
specifier|const
name|QRectF
operator|&
name|rectangle
argument_list|,
specifier|const
name|QPixmap
operator|&
name|pixmap
argument_list|,
specifier|const
name|QRectF
operator|&
name|sr
argument_list|)
block|;
name|void
name|drawImage
argument_list|(
argument|const QRectF&r
argument_list|,
argument|const QImage&pm
argument_list|,
argument|const QRectF&sr
argument_list|,
argument|Qt::ImageConversionFlags flags = Qt::AutoColor
argument_list|)
block|;
name|void
name|drawTiledPixmap
argument_list|(
specifier|const
name|QRectF
operator|&
name|rectangle
argument_list|,
specifier|const
name|QPixmap
operator|&
name|pixmap
argument_list|,
specifier|const
name|QPointF
operator|&
name|point
argument_list|)
block|;
name|Type
name|type
argument_list|()
specifier|const
block|;
comment|// end reimplementations QPaintEngine
comment|// reimplementations QPrintEngine
name|bool
name|abort
argument_list|()
block|{
return|return
name|false
return|;
block|}
name|bool
name|newPage
argument_list|()
block|;
name|QPrinter
operator|::
name|PrinterState
name|printerState
argument_list|()
specifier|const
block|{
return|return
name|state
return|;
block|}
comment|// end reimplementations QPrintEngine
name|void
name|setBrush
argument_list|()
block|;
comment|// ### unused, should have something for this in QPrintEngine
name|void
name|setAuthor
argument_list|(
specifier|const
name|QString
operator|&
name|author
argument_list|)
block|;
name|QString
name|author
argument_list|()
specifier|const
block|;
name|void
name|setDevice
argument_list|(
name|QIODevice
operator|*
name|dev
argument_list|)
block|;
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
argument|QPdfEngine
argument_list|)
name|QPrinter
operator|::
name|PrinterState
name|state
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QPdfEnginePrivate
range|:
name|public
name|QPdfBaseEnginePrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QPdfEngine
argument_list|)
name|public
operator|:
name|QPdfEnginePrivate
argument_list|(
argument|QPrinter::PrinterMode m
argument_list|)
block|;
operator|~
name|QPdfEnginePrivate
argument_list|()
block|;
name|void
name|newPage
argument_list|()
block|;
name|int
name|width
argument_list|()
specifier|const
block|{
name|QRect
name|r
operator|=
name|paperRect
argument_list|()
block|;
return|return
name|qRound
argument_list|(
name|r
operator|.
name|width
argument_list|()
operator|*
literal|72.
operator|/
name|resolution
argument_list|)
return|;
block|}
name|int
name|height
argument_list|()
specifier|const
block|{
name|QRect
name|r
operator|=
name|paperRect
argument_list|()
block|;
return|return
name|qRound
argument_list|(
name|r
operator|.
name|height
argument_list|()
operator|*
literal|72.
operator|/
name|resolution
argument_list|)
return|;
block|}
name|void
name|writeHeader
argument_list|()
block|;
name|void
name|writeTail
argument_list|()
block|;
name|int
name|addImage
argument_list|(
argument|const QImage&image
argument_list|,
argument|bool *bitmap
argument_list|,
argument|qint64 serial_no
argument_list|)
block|;
name|int
name|addConstantAlphaObject
argument_list|(
argument|int brushAlpha
argument_list|,
argument|int penAlpha =
literal|255
argument_list|)
block|;
name|int
name|addBrushPattern
argument_list|(
specifier|const
name|QTransform
operator|&
name|matrix
argument_list|,
name|bool
operator|*
name|specifyColor
argument_list|,
name|int
operator|*
name|gStateObject
argument_list|)
block|;
name|void
name|drawTextItem
argument_list|(
specifier|const
name|QPointF
operator|&
name|p
argument_list|,
specifier|const
name|QTextItemInt
operator|&
name|ti
argument_list|)
block|;
name|QTransform
name|pageMatrix
argument_list|()
specifier|const
block|;
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
argument|QPdfEnginePrivate
argument_list|)
ifdef|#
directive|ifdef
name|USE_NATIVE_GRADIENTS
name|int
name|gradientBrush
argument_list|(
specifier|const
name|QBrush
operator|&
name|b
argument_list|,
specifier|const
name|QMatrix
operator|&
name|matrix
argument_list|,
name|int
operator|*
name|gStateObject
argument_list|)
block|;
endif|#
directive|endif
name|void
name|writeInfo
argument_list|()
block|;
name|void
name|writePageRoot
argument_list|()
block|;
name|void
name|writeFonts
argument_list|()
block|;
name|void
name|embedFont
argument_list|(
name|QFontSubset
operator|*
name|font
argument_list|)
block|;
name|QVector
operator|<
name|int
operator|>
name|xrefPositions
block|;
name|QDataStream
operator|*
name|stream
block|;
name|int
name|streampos
block|;
name|int
name|writeImage
argument_list|(
argument|const QByteArray&data
argument_list|,
argument|int width
argument_list|,
argument|int height
argument_list|,
argument|int depth
argument_list|,
argument|int maskObject
argument_list|,
argument|int softMaskObject
argument_list|,
argument|bool dct = false
argument_list|)
block|;
name|void
name|writePage
argument_list|()
block|;
name|int
name|addXrefEntry
argument_list|(
argument|int object
argument_list|,
argument|bool printostr = true
argument_list|)
block|;
name|void
name|printString
argument_list|(
specifier|const
name|QString
operator|&
name|string
argument_list|)
block|;
name|void
name|xprintf
argument_list|(
specifier|const
name|char
operator|*
name|fmt
argument_list|,
operator|...
argument_list|)
block|;
specifier|inline
name|void
name|write
argument_list|(
argument|const QByteArray&data
argument_list|)
block|{
name|stream
operator|->
name|writeRawData
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|streampos
operator|+=
name|data
operator|.
name|size
argument_list|()
block|;     }
name|int
name|writeCompressed
argument_list|(
argument|const char *src
argument_list|,
argument|int len
argument_list|)
block|;
specifier|inline
name|int
name|writeCompressed
argument_list|(
argument|const QByteArray&data
argument_list|)
block|{
return|return
name|writeCompressed
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
name|int
name|writeCompressed
argument_list|(
name|QIODevice
operator|*
name|dev
argument_list|)
block|;
comment|// various PDF objects
name|int
name|pageRoot
block|,
name|catalog
block|,
name|info
block|,
name|graphicsState
block|,
name|patternColorSpace
block|;
name|QVector
operator|<
name|uint
operator|>
name|pages
block|;
name|QHash
operator|<
name|qint64
block|,
name|uint
operator|>
name|imageCache
block|;
name|QHash
operator|<
name|QPair
operator|<
name|uint
block|,
name|uint
operator|>
block|,
name|uint
operator|>
name|alphaCache
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PRINTER
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QPRINTENGINE_PDF_P_H
end_comment
end_unit
