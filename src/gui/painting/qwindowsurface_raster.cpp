begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_comment
comment|// for Q_WS_WIN define (non-PCH)
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WIN
end_ifdef
begin_include
include|#
directive|include
file|<qlibrary.h>
end_include
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtGui/qpaintdevice.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qwidget.h>
end_include
begin_include
include|#
directive|include
file|"private/qwindowsurface_raster_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qnativeimage_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qwidget_p.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_include
include|#
directive|include
file|"private/qpixmap_x11_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qt_x11_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qwidget_p.h"
end_include
begin_include
include|#
directive|include
file|"qx11info_x11.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"private/qdrawhelper_p.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_MAC
end_ifdef
begin_include
include|#
directive|include
file|<private/qt_cocoa_helpers_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<QMainWindow>
end_include
begin_include
include|#
directive|include
file|<private/qmainwindowlayout_p.h>
end_include
begin_include
include|#
directive|include
file|<QToolBar>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QRasterWindowSurfacePrivate
class|class
name|QRasterWindowSurfacePrivate
block|{
public|public:
DECL|member|image
name|QNativeImage
modifier|*
name|image
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
DECL|member|gc
name|GC
name|gc
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MITSHM
name|uint
name|needsSync
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
name|uint
name|translucentBackground
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
endif|#
directive|endif
name|uint
name|inSetGeometry
range|:
literal|1
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QRasterWindowSurface
name|QRasterWindowSurface
operator|::
name|QRasterWindowSurface
parameter_list|(
name|QWidget
modifier|*
name|window
parameter_list|,
name|bool
name|setDefaultSurface
parameter_list|)
member_init_list|:
name|QWindowSurface
argument_list|(
name|window
argument_list|,
name|setDefaultSurface
argument_list|)
member_init_list|,
name|d_ptr
argument_list|(
operator|new
name|QRasterWindowSurfacePrivate
argument_list|)
block|{
ifdef|#
directive|ifdef
name|Q_WS_X11
name|d_ptr
operator|->
name|gc
operator|=
name|XCreateGC
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|window
operator|->
name|handle
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
name|d_ptr
operator|->
name|translucentBackground
operator|=
name|X11
operator|->
name|use_xrender
operator|&&
name|window
operator|->
name|x11Info
argument_list|()
operator|.
name|depth
argument_list|()
operator|==
literal|32
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_MITHSM
name|d_ptr
operator|->
name|needsSync
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
name|d_ptr
operator|->
name|image
operator|=
literal|0
expr_stmt|;
name|d_ptr
operator|->
name|inSetGeometry
operator|=
literal|false
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_MAC_USE_COCOA
name|needsFlush
operator|=
literal|false
expr_stmt|;
name|regionToFlush
operator|=
name|QRegion
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// QT_MAC_USE_COCOA
block|}
end_constructor
begin_destructor
DECL|function|~QRasterWindowSurface
name|QRasterWindowSurface
operator|::
name|~
name|QRasterWindowSurface
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_WS_X11
name|XFreeGC
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|d_ptr
operator|->
name|gc
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|d_ptr
operator|->
name|image
condition|)
operator|delete
name|d_ptr
operator|->
name|image
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|paintDevice
name|QPaintDevice
modifier|*
name|QRasterWindowSurface
operator|::
name|paintDevice
parameter_list|()
block|{
return|return
operator|&
name|d_ptr
operator|->
name|image
operator|->
name|image
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_MITSHM
argument_list|)
end_if
begin_function
DECL|function|syncX
name|void
name|QRasterWindowSurface
operator|::
name|syncX
parameter_list|()
block|{
comment|// delay writing to the backbuffer until we know for sure X is done reading from it
if|if
condition|(
name|d_ptr
operator|->
name|needsSync
condition|)
block|{
name|XSync
argument_list|(
name|X11
operator|->
name|display
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|needsSync
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|beginPaint
name|void
name|QRasterWindowSurface
operator|::
name|beginPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_MITSHM
argument_list|)
name|syncX
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_XRENDER
argument_list|)
operator|)
operator|||
operator|(
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
operator|)
if|if
condition|(
operator|!
name|qt_widget_private
argument_list|(
name|window
argument_list|()
argument_list|)
operator|->
name|isOpaque
operator|&&
name|window
argument_list|()
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_TranslucentBackground
argument_list|)
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
if|if
condition|(
name|d_ptr
operator|->
name|image
operator|->
name|image
operator|.
name|format
argument_list|()
operator|!=
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
condition|)
name|prepareBuffer
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|,
name|window
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QPainter
name|p
argument_list|(
operator|&
name|d_ptr
operator|->
name|image
operator|->
name|image
argument_list|)
decl_stmt|;
name|p
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Source
argument_list|)
expr_stmt|;
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|rgn
operator|.
name|rects
argument_list|()
decl_stmt|;
specifier|const
name|QColor
name|blank
init|=
name|Qt
operator|::
name|transparent
decl_stmt|;
for|for
control|(
name|QVector
argument_list|<
name|QRect
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|rects
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|rects
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|p
operator|.
name|fillRect
argument_list|(
operator|*
name|it
argument_list|,
name|blank
argument_list|)
expr_stmt|;
block|}
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|rgn
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|flush
name|void
name|QRasterWindowSurface
operator|::
name|flush
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QRasterWindowSurface
argument_list|)
expr_stmt|;
comment|// Not ready for painting yet, bail out. This can happen in
comment|// QWidget::create_sys()
if|if
condition|(
operator|!
name|d
operator|->
name|image
operator|||
name|rgn
operator|.
name|rectCount
argument_list|()
operator|==
literal|0
condition|)
return|return;
ifdef|#
directive|ifdef
name|Q_WS_WIN
name|QRect
name|br
init|=
name|rgn
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
if|if
condition|(
operator|!
name|qt_widget_private
argument_list|(
name|window
argument_list|()
argument_list|)
operator|->
name|isOpaque
operator|&&
name|window
argument_list|()
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_TranslucentBackground
argument_list|)
operator|&&
operator|(
name|qt_widget_private
argument_list|(
name|window
argument_list|()
argument_list|)
operator|->
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
condition|)
block|{
name|QRect
name|r
init|=
name|window
argument_list|()
operator|->
name|frameGeometry
argument_list|()
decl_stmt|;
name|QPoint
name|frameOffset
init|=
name|qt_widget_private
argument_list|(
name|window
argument_list|()
argument_list|)
operator|->
name|frameStrut
argument_list|()
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|QRect
name|dirtyRect
init|=
name|br
operator|.
name|translated
argument_list|(
name|offset
operator|+
name|frameOffset
argument_list|)
decl_stmt|;
name|SIZE
name|size
init|=
block|{
name|r
operator|.
name|width
argument_list|()
block|,
name|r
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|POINT
name|ptDst
init|=
block|{
name|r
operator|.
name|x
argument_list|()
block|,
name|r
operator|.
name|y
argument_list|()
block|}
decl_stmt|;
name|POINT
name|ptSrc
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|BLENDFUNCTION
name|blend
init|=
block|{
name|AC_SRC_OVER
block|,
literal|0
block|,
call|(
name|int
call|)
argument_list|(
literal|255.0
operator|*
name|window
argument_list|()
operator|->
name|windowOpacity
argument_list|()
argument_list|)
block|,
name|Q_AC_SRC_ALPHA
block|}
decl_stmt|;
name|RECT
name|dirty
init|=
block|{
name|dirtyRect
operator|.
name|x
argument_list|()
block|,
name|dirtyRect
operator|.
name|y
argument_list|()
block|,
name|dirtyRect
operator|.
name|x
argument_list|()
operator|+
name|dirtyRect
operator|.
name|width
argument_list|()
block|,
name|dirtyRect
operator|.
name|y
argument_list|()
operator|+
name|dirtyRect
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|Q_UPDATELAYEREDWINDOWINFO
name|info
init|=
block|{
sizeof|sizeof
argument_list|(
name|info
argument_list|)
block|,
name|NULL
block|,
operator|&
name|ptDst
block|,
operator|&
name|size
block|,
name|d
operator|->
name|image
operator|->
name|hdc
block|,
operator|&
name|ptSrc
block|,
literal|0
block|,
operator|&
name|blend
block|,
name|Q_ULW_ALPHA
block|,
operator|&
name|dirty
block|}
decl_stmt|;
name|ptrUpdateLayeredWindowIndirect
argument_list|(
name|window
argument_list|()
operator|->
name|internalWinId
argument_list|()
argument_list|,
operator|&
name|info
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|QPoint
name|wOffset
init|=
name|qt_qwidget_data
argument_list|(
name|widget
argument_list|)
operator|->
name|wrect
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|HDC
name|widget_dc
init|=
name|widget
operator|->
name|getDC
argument_list|()
decl_stmt|;
name|QRect
name|wbr
init|=
name|br
operator|.
name|translated
argument_list|(
operator|-
name|wOffset
argument_list|)
decl_stmt|;
name|BitBlt
argument_list|(
name|widget_dc
argument_list|,
name|wbr
operator|.
name|x
argument_list|()
argument_list|,
name|wbr
operator|.
name|y
argument_list|()
argument_list|,
name|wbr
operator|.
name|width
argument_list|()
argument_list|,
name|wbr
operator|.
name|height
argument_list|()
argument_list|,
name|d
operator|->
name|image
operator|->
name|hdc
argument_list|,
name|br
operator|.
name|x
argument_list|()
operator|+
name|offset
operator|.
name|x
argument_list|()
argument_list|,
name|br
operator|.
name|y
argument_list|()
operator|+
name|offset
operator|.
name|y
argument_list|()
argument_list|,
name|SRCCOPY
argument_list|)
expr_stmt|;
name|widget
operator|->
name|releaseDC
argument_list|(
name|widget_dc
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
specifier|static
name|bool
name|flush
init|=
operator|!
name|qgetenv
argument_list|(
literal|"QT_FLUSH_WINDOWSURFACE"
argument_list|)
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|flush
condition|)
block|{
name|SelectObject
argument_list|(
name|qt_win_display_dc
argument_list|()
argument_list|,
name|GetStockObject
argument_list|(
name|BLACK_BRUSH
argument_list|)
argument_list|)
expr_stmt|;
name|Rectangle
argument_list|(
name|qt_win_display_dc
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|d
operator|->
name|image
operator|->
name|width
argument_list|()
operator|+
literal|2
argument_list|,
name|d
operator|->
name|image
operator|->
name|height
argument_list|()
operator|+
literal|2
argument_list|)
expr_stmt|;
name|BitBlt
argument_list|(
name|qt_win_display_dc
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|d
operator|->
name|image
operator|->
name|width
argument_list|()
argument_list|,
name|d
operator|->
name|image
operator|->
name|height
argument_list|()
argument_list|,
name|d
operator|->
name|image
operator|->
name|hdc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SRCCOPY
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_WS_X11
specifier|extern
name|void
modifier|*
name|qt_getClipRects
argument_list|(
specifier|const
name|QRegion
operator|&
name|r
argument_list|,
name|int
operator|&
name|num
argument_list|)
decl_stmt|;
comment|// in qpaintengine_x11.cpp
specifier|extern
name|QWidgetData
modifier|*
name|qt_widget_data
argument_list|(
name|QWidget
operator|*
argument_list|)
decl_stmt|;
name|QPoint
name|wOffset
init|=
name|qt_qwidget_data
argument_list|(
name|widget
argument_list|)
operator|->
name|wrect
operator|.
name|topLeft
argument_list|()
decl_stmt|;
if|if
condition|(
name|widget
operator|->
name|window
argument_list|()
operator|!=
name|window
argument_list|()
condition|)
block|{
name|XFreeGC
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|d_ptr
operator|->
name|gc
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|gc
operator|=
name|XCreateGC
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|widget
operator|->
name|handle
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|QRegion
name|wrgn
argument_list|(
name|rgn
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|wOffset
operator|.
name|isNull
argument_list|()
condition|)
name|wrgn
operator|.
name|translate
argument_list|(
operator|-
name|wOffset
argument_list|)
expr_stmt|;
name|QRect
name|wbr
init|=
name|wrgn
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|wrgn
operator|.
name|rectCount
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|int
name|num
decl_stmt|;
name|XRectangle
modifier|*
name|rects
init|=
operator|(
name|XRectangle
operator|*
operator|)
name|qt_getClipRects
argument_list|(
name|wrgn
argument_list|,
name|num
argument_list|)
decl_stmt|;
name|XSetClipRectangles
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|d_ptr
operator|->
name|gc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rects
argument_list|,
name|num
argument_list|,
name|YXBanded
argument_list|)
expr_stmt|;
block|}
name|QRect
name|br
init|=
name|rgn
operator|.
name|boundingRect
argument_list|()
operator|.
name|translated
argument_list|(
name|offset
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MITSHM
if|if
condition|(
name|d_ptr
operator|->
name|image
operator|->
name|xshmpm
condition|)
block|{
name|XCopyArea
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|d_ptr
operator|->
name|image
operator|->
name|xshmpm
argument_list|,
name|widget
operator|->
name|handle
argument_list|()
argument_list|,
name|d_ptr
operator|->
name|gc
argument_list|,
name|br
operator|.
name|x
argument_list|()
argument_list|,
name|br
operator|.
name|y
argument_list|()
argument_list|,
name|br
operator|.
name|width
argument_list|()
argument_list|,
name|br
operator|.
name|height
argument_list|()
argument_list|,
name|wbr
operator|.
name|x
argument_list|()
argument_list|,
name|wbr
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|needsSync
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d_ptr
operator|->
name|image
operator|->
name|xshmimg
condition|)
block|{
specifier|const
name|QImage
modifier|&
name|src
init|=
name|d
operator|->
name|image
operator|->
name|image
decl_stmt|;
name|br
operator|=
name|br
operator|.
name|intersected
argument_list|(
name|src
operator|.
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|XShmPutImage
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|widget
operator|->
name|handle
argument_list|()
argument_list|,
name|d_ptr
operator|->
name|gc
argument_list|,
name|d_ptr
operator|->
name|image
operator|->
name|xshmimg
argument_list|,
name|br
operator|.
name|x
argument_list|()
argument_list|,
name|br
operator|.
name|y
argument_list|()
argument_list|,
name|wbr
operator|.
name|x
argument_list|()
argument_list|,
name|wbr
operator|.
name|y
argument_list|()
argument_list|,
name|br
operator|.
name|width
argument_list|()
argument_list|,
name|br
operator|.
name|height
argument_list|()
argument_list|,
name|False
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|needsSync
operator|=
literal|true
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
specifier|const
name|QImage
modifier|&
name|src
init|=
name|d
operator|->
name|image
operator|->
name|image
decl_stmt|;
name|br
operator|=
name|br
operator|.
name|intersected
argument_list|(
name|src
operator|.
name|rect
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|src
operator|.
name|format
argument_list|()
operator|!=
name|QImage
operator|::
name|Format_RGB32
operator|||
name|widget
operator|->
name|x11Info
argument_list|()
operator|.
name|depth
argument_list|()
operator|<
literal|24
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|src
operator|.
name|depth
argument_list|()
operator|>=
literal|16
argument_list|)
expr_stmt|;
specifier|const
name|QImage
name|sub_src
argument_list|(
name|src
operator|.
name|scanLine
argument_list|(
name|br
operator|.
name|y
argument_list|()
argument_list|)
operator|+
name|br
operator|.
name|x
argument_list|()
operator|*
operator|(
name|uint
argument_list|(
name|src
operator|.
name|depth
argument_list|()
argument_list|)
operator|/
literal|8
operator|)
argument_list|,
name|br
operator|.
name|width
argument_list|()
argument_list|,
name|br
operator|.
name|height
argument_list|()
argument_list|,
name|src
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
name|src
operator|.
name|format
argument_list|()
argument_list|)
decl_stmt|;
name|QX11PixmapData
modifier|*
name|data
init|=
operator|new
name|QX11PixmapData
argument_list|(
name|QPixmapData
operator|::
name|PixmapType
argument_list|)
decl_stmt|;
name|data
operator|->
name|xinfo
operator|=
name|widget
operator|->
name|x11Info
argument_list|()
expr_stmt|;
name|data
operator|->
name|fromImage
argument_list|(
name|sub_src
argument_list|,
name|Qt
operator|::
name|NoOpaqueDetection
argument_list|)
expr_stmt|;
name|QPixmap
name|pm
init|=
name|QPixmap
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|XCopyArea
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|pm
operator|.
name|handle
argument_list|()
argument_list|,
name|widget
operator|->
name|handle
argument_list|()
argument_list|,
name|d_ptr
operator|->
name|gc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|br
operator|.
name|width
argument_list|()
argument_list|,
name|br
operator|.
name|height
argument_list|()
argument_list|,
name|wbr
operator|.
name|x
argument_list|()
argument_list|,
name|wbr
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// qpaintengine_x11.cpp
specifier|extern
name|void
name|qt_x11_drawImage
argument_list|(
specifier|const
name|QRect
operator|&
name|rect
argument_list|,
specifier|const
name|QPoint
operator|&
name|pos
argument_list|,
specifier|const
name|QImage
operator|&
name|image
argument_list|,
name|Drawable
name|hd
argument_list|,
name|GC
name|gc
argument_list|,
name|Display
operator|*
name|dpy
argument_list|,
name|Visual
operator|*
name|visual
argument_list|,
name|int
name|depth
argument_list|)
decl_stmt|;
name|qt_x11_drawImage
argument_list|(
name|br
argument_list|,
name|wbr
operator|.
name|topLeft
argument_list|()
argument_list|,
name|src
argument_list|,
name|widget
operator|->
name|handle
argument_list|()
argument_list|,
name|d_ptr
operator|->
name|gc
argument_list|,
name|X11
operator|->
name|display
argument_list|,
operator|(
name|Visual
operator|*
operator|)
name|widget
operator|->
name|x11Info
argument_list|()
operator|.
name|visual
argument_list|()
argument_list|,
name|widget
operator|->
name|x11Info
argument_list|()
operator|.
name|depth
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|wrgn
operator|.
name|rectCount
argument_list|()
operator|!=
literal|1
condition|)
name|XSetClipMask
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|d_ptr
operator|->
name|gc
argument_list|,
name|XNone
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// FALCON
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|Q_UNUSED
argument_list|(
name|offset
argument_list|)
expr_stmt|;
comment|// This is mainly done for native components like native "open file" dialog.
if|if
condition|(
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
block|{
return|return;
block|}
ifdef|#
directive|ifdef
name|QT_MAC_USE_COCOA
name|this
operator|->
name|needsFlush
operator|=
literal|true
expr_stmt|;
name|this
operator|->
name|regionToFlush
operator|+=
name|rgn
expr_stmt|;
comment|// The actual flushing will be processed in [view drawRect:rect]
name|qt_mac_setNeedsDisplay
argument_list|(
name|widget
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// Get a context for the widget.
name|CGContextRef
name|context
decl_stmt|;
name|CGrafPtr
name|port
init|=
name|GetWindowPort
argument_list|(
name|qt_mac_window_for
argument_list|(
name|widget
argument_list|)
argument_list|)
decl_stmt|;
name|QDBeginCGContext
argument_list|(
name|port
argument_list|,
operator|&
name|context
argument_list|)
expr_stmt|;
name|CGContextRetain
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|CGContextSaveGState
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// Flip context.
name|CGContextTranslateCTM
argument_list|(
name|context
argument_list|,
literal|0
argument_list|,
name|widget
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|CGContextScaleCTM
argument_list|(
name|context
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Clip to region.
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
modifier|&
name|rects
init|=
name|rgn
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRect
modifier|&
name|rect
init|=
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|CGContextAddRect
argument_list|(
name|context
argument_list|,
name|CGRectMake
argument_list|(
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CGContextClip
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|QRect
name|r
init|=
name|rgn
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
specifier|const
name|CGRect
name|area
init|=
name|CGRectMake
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|CGImageRef
name|image
init|=
name|CGBitmapContextCreateImage
argument_list|(
name|d
operator|->
name|image
operator|->
name|cg
argument_list|)
decl_stmt|;
name|CGImageRef
name|subImage
init|=
name|CGImageCreateWithImageInRect
argument_list|(
name|image
argument_list|,
name|area
argument_list|)
decl_stmt|;
name|qt_mac_drawCGImage
argument_list|(
name|context
argument_list|,
operator|&
name|area
argument_list|,
name|subImage
argument_list|)
expr_stmt|;
name|CGImageRelease
argument_list|(
name|subImage
argument_list|)
expr_stmt|;
name|CGImageRelease
argument_list|(
name|image
argument_list|)
expr_stmt|;
name|QDEndCGContext
argument_list|(
name|port
argument_list|,
operator|&
name|context
argument_list|)
expr_stmt|;
comment|// Restore context.
name|CGContextRestoreGState
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|CGContextRelease
argument_list|(
name|context
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_MAC_USE_COCOA
endif|#
directive|endif
comment|// Q_WS_MAC
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|Q_UNUSED
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|rgn
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setGeometry
name|void
name|QRasterWindowSurface
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|QWindowSurface
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QRasterWindowSurface
argument_list|)
expr_stmt|;
name|d
operator|->
name|inSetGeometry
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|image
operator|==
literal|0
operator|||
name|d
operator|->
name|image
operator|->
name|width
argument_list|()
operator|<
name|rect
operator|.
name|width
argument_list|()
operator|||
name|d
operator|->
name|image
operator|->
name|height
argument_list|()
operator|<
name|rect
operator|.
name|height
argument_list|()
condition|)
block|{
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_XRENDER
argument_list|)
operator|)
operator|||
operator|(
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
operator|)
ifndef|#
directive|ifndef
name|Q_WS_WIN
if|if
condition|(
name|d_ptr
operator|->
name|translucentBackground
condition|)
else|#
directive|else
if|if
condition|(
operator|!
name|qt_widget_private
argument_list|(
name|window
argument_list|()
argument_list|)
operator|->
name|isOpaque
condition|)
endif|#
directive|endif
name|prepareBuffer
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|,
name|window
argument_list|()
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
name|prepareBuffer
argument_list|(
name|QNativeImage
operator|::
name|systemFormat
argument_list|()
argument_list|,
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|inSetGeometry
operator|=
literal|false
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_MAC_USE_COCOA
argument_list|)
name|QMainWindow
modifier|*
name|mWindow
init|=
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|window
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mWindow
condition|)
block|{
name|QMainWindowLayout
modifier|*
name|mLayout
init|=
name|qobject_cast
argument_list|<
name|QMainWindowLayout
operator|*
argument_list|>
argument_list|(
name|mWindow
operator|->
name|layout
argument_list|()
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QToolBar
modifier|*
argument_list|>
name|toolbarList
init|=
name|mLayout
operator|->
name|qtoolbarsInUnifiedToolbarList
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toolbarList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QToolBar
modifier|*
name|toolbar
init|=
name|toolbarList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|mLayout
operator|->
name|toolBarArea
argument_list|(
name|toolbar
argument_list|)
operator|==
name|Qt
operator|::
name|TopToolBarArea
condition|)
block|{
name|QWidget
modifier|*
name|tbWidget
init|=
operator|(
name|QWidget
operator|*
operator|)
name|toolbar
decl_stmt|;
if|if
condition|(
name|tbWidget
operator|->
name|d_func
argument_list|()
operator|->
name|unifiedSurface
condition|)
block|{
name|tbWidget
operator|->
name|d_func
argument_list|()
operator|->
name|unifiedSurface
operator|->
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
endif|#
directive|endif
comment|// Q_WS_MAC&& QT_MAC_USE_COCOA
block|}
end_function
begin_comment
comment|// from qwindowsurface.cpp
end_comment
begin_function_decl
specifier|extern
name|void
name|qt_scrollRectInImage
parameter_list|(
name|QImage
modifier|&
name|img
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|scroll
name|bool
name|QRasterWindowSurface
operator|::
name|scroll
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|area
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_WS_WIN
name|Q_D
argument_list|(
name|QRasterWindowSurface
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|image
operator|||
operator|!
name|d
operator|->
name|image
operator|->
name|hdc
condition|)
return|return
literal|false
return|;
name|QRect
name|rect
init|=
name|area
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
name|BitBlt
argument_list|(
name|d
operator|->
name|image
operator|->
name|hdc
argument_list|,
name|rect
operator|.
name|x
argument_list|()
operator|+
name|dx
argument_list|,
name|rect
operator|.
name|y
argument_list|()
operator|+
name|dy
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|d
operator|->
name|image
operator|->
name|hdc
argument_list|,
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|SRCCOPY
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
else|#
directive|else
name|Q_D
argument_list|(
name|QRasterWindowSurface
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|image
operator|||
name|d
operator|->
name|image
operator|->
name|image
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|false
return|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_MITSHM
argument_list|)
name|syncX
argument_list|()
expr_stmt|;
endif|#
directive|endif
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|area
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|qt_scrollRectInImage
argument_list|(
name|d
operator|->
name|image
operator|->
name|image
argument_list|,
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|QPoint
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|features
name|QWindowSurface
operator|::
name|WindowSurfaceFeatures
name|QRasterWindowSurface
operator|::
name|features
parameter_list|()
specifier|const
block|{
return|return
name|QWindowSurface
operator|::
name|AllFeatures
return|;
block|}
end_function
begin_function
DECL|function|prepareBuffer
name|void
name|QRasterWindowSurface
operator|::
name|prepareBuffer
parameter_list|(
name|QImage
operator|::
name|Format
name|format
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QRasterWindowSurface
argument_list|)
expr_stmt|;
name|int
name|width
init|=
name|window
argument_list|()
operator|->
name|width
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|window
argument_list|()
operator|->
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|image
condition|)
block|{
name|width
operator|=
name|qMax
argument_list|(
name|d
operator|->
name|image
operator|->
name|width
argument_list|()
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|height
operator|=
name|qMax
argument_list|(
name|d
operator|->
name|image
operator|->
name|height
argument_list|()
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|width
operator|==
literal|0
operator|||
name|height
operator|==
literal|0
condition|)
block|{
operator|delete
name|d
operator|->
name|image
expr_stmt|;
name|d
operator|->
name|image
operator|=
literal|0
expr_stmt|;
return|return;
block|}
name|QNativeImage
modifier|*
name|oldImage
init|=
name|d
operator|->
name|image
decl_stmt|;
name|d
operator|->
name|image
operator|=
operator|new
name|QNativeImage
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
literal|false
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldImage
operator|&&
name|d
operator|->
name|inSetGeometry
operator|&&
name|hasStaticContents
argument_list|()
condition|)
block|{
comment|// Make sure we use the const version of bits() (no detach).
specifier|const
name|uchar
modifier|*
name|src
init|=
cast|const_cast
argument_list|<
specifier|const
name|QImage
operator|&
argument_list|>
argument_list|(
name|oldImage
operator|->
name|image
argument_list|)
operator|.
name|bits
argument_list|()
decl_stmt|;
name|uchar
modifier|*
name|dst
init|=
name|d
operator|->
name|image
operator|->
name|image
operator|.
name|bits
argument_list|()
decl_stmt|;
specifier|const
name|int
name|srcBytesPerLine
init|=
name|oldImage
operator|->
name|image
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
specifier|const
name|int
name|dstBytesPerLine
init|=
name|d
operator|->
name|image
operator|->
name|image
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
specifier|const
name|int
name|bytesPerPixel
init|=
name|oldImage
operator|->
name|image
operator|.
name|depth
argument_list|()
operator|>>
literal|3
decl_stmt|;
name|QRegion
name|staticRegion
argument_list|(
name|staticContents
argument_list|()
argument_list|)
decl_stmt|;
comment|// Make sure we're inside the boundaries of the old image.
name|staticRegion
operator|&=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|oldImage
operator|->
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|oldImage
operator|->
name|image
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
modifier|&
name|rects
init|=
name|staticRegion
operator|.
name|rects
argument_list|()
decl_stmt|;
specifier|const
name|QRect
modifier|*
name|srcRect
init|=
name|rects
operator|.
name|constData
argument_list|()
decl_stmt|;
comment|// Copy the static content of the old image into the new one.
name|int
name|numRectsLeft
init|=
name|rects
operator|.
name|size
argument_list|()
decl_stmt|;
do|do
block|{
specifier|const
name|int
name|bytesOffset
init|=
name|srcRect
operator|->
name|x
argument_list|()
operator|*
name|bytesPerPixel
decl_stmt|;
specifier|const
name|int
name|dy
init|=
name|srcRect
operator|->
name|y
argument_list|()
decl_stmt|;
comment|// Adjust src and dst to point to the right offset.
specifier|const
name|uchar
modifier|*
name|s
init|=
name|src
operator|+
name|dy
operator|*
name|srcBytesPerLine
operator|+
name|bytesOffset
decl_stmt|;
name|uchar
modifier|*
name|d
init|=
name|dst
operator|+
name|dy
operator|*
name|dstBytesPerLine
operator|+
name|bytesOffset
decl_stmt|;
specifier|const
name|int
name|numBytes
init|=
name|srcRect
operator|->
name|width
argument_list|()
operator|*
name|bytesPerPixel
decl_stmt|;
name|int
name|numScanLinesLeft
init|=
name|srcRect
operator|->
name|height
argument_list|()
decl_stmt|;
do|do
block|{
operator|::
name|memcpy
argument_list|(
name|d
argument_list|,
name|s
argument_list|,
name|numBytes
argument_list|)
expr_stmt|;
name|d
operator|+=
name|dstBytesPerLine
expr_stmt|;
name|s
operator|+=
name|srcBytesPerLine
expr_stmt|;
block|}
do|while
condition|(
operator|--
name|numScanLinesLeft
condition|)
do|;
operator|++
name|srcRect
expr_stmt|;
block|}
do|while
condition|(
operator|--
name|numRectsLeft
condition|)
do|;
block|}
operator|delete
name|oldImage
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_MAC_USE_COCOA
end_ifdef
begin_function
DECL|function|imageContext
name|CGContextRef
name|QRasterWindowSurface
operator|::
name|imageContext
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QRasterWindowSurface
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|image
operator|->
name|cg
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_MAC_USE_COCOA
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
