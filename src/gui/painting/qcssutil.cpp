begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qcssutil_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qcssparser_p.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CSSPARSER
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_using
using|using
namespace|namespace
name|QCss
namespace|;
end_using
begin_function
DECL|function|qPenFromStyle
specifier|static
name|QPen
name|qPenFromStyle
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|b
parameter_list|,
name|qreal
name|width
parameter_list|,
name|BorderStyle
name|s
parameter_list|)
block|{
name|Qt
operator|::
name|PenStyle
name|ps
init|=
name|Qt
operator|::
name|NoPen
decl_stmt|;
switch|switch
condition|(
name|s
condition|)
block|{
case|case
name|BorderStyle_Dotted
case|:
name|ps
operator|=
name|Qt
operator|::
name|DotLine
expr_stmt|;
break|break;
case|case
name|BorderStyle_Dashed
case|:
name|ps
operator|=
name|width
operator|==
literal|1
condition|?
name|Qt
operator|::
name|DotLine
else|:
name|Qt
operator|::
name|DashLine
expr_stmt|;
break|break;
case|case
name|BorderStyle_DotDash
case|:
name|ps
operator|=
name|Qt
operator|::
name|DashDotLine
expr_stmt|;
break|break;
case|case
name|BorderStyle_DotDotDash
case|:
name|ps
operator|=
name|Qt
operator|::
name|DashDotDotLine
expr_stmt|;
break|break;
case|case
name|BorderStyle_Inset
case|:
case|case
name|BorderStyle_Outset
case|:
case|case
name|BorderStyle_Solid
case|:
name|ps
operator|=
name|Qt
operator|::
name|SolidLine
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|QPen
argument_list|(
name|b
argument_list|,
name|width
argument_list|,
name|ps
argument_list|,
name|Qt
operator|::
name|FlatCap
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qDrawRoundedCorners
name|void
name|qDrawRoundedCorners
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
name|qreal
name|x1
parameter_list|,
name|qreal
name|y1
parameter_list|,
name|qreal
name|x2
parameter_list|,
name|qreal
name|y2
parameter_list|,
specifier|const
name|QSizeF
modifier|&
name|r1
parameter_list|,
specifier|const
name|QSizeF
modifier|&
name|r2
parameter_list|,
name|Edge
name|edge
parameter_list|,
name|BorderStyle
name|s
parameter_list|,
name|QBrush
name|c
parameter_list|)
block|{
specifier|const
name|qreal
name|pw
init|=
operator|(
name|edge
operator|==
name|TopEdge
operator|||
name|edge
operator|==
name|BottomEdge
operator|)
condition|?
name|y2
operator|-
name|y1
else|:
name|x2
operator|-
name|x1
decl_stmt|;
if|if
condition|(
name|s
operator|==
name|BorderStyle_Double
condition|)
block|{
name|qreal
name|wby3
init|=
name|pw
operator|/
literal|3
decl_stmt|;
switch|switch
condition|(
name|edge
condition|)
block|{
case|case
name|TopEdge
case|:
case|case
name|BottomEdge
case|:
name|qDrawRoundedCorners
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y1
operator|+
name|wby3
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|,
name|edge
argument_list|,
name|BorderStyle_Solid
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|qDrawRoundedCorners
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y2
operator|-
name|wby3
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|,
name|edge
argument_list|,
name|BorderStyle_Solid
argument_list|,
name|c
argument_list|)
expr_stmt|;
break|break;
case|case
name|LeftEdge
case|:
name|qDrawRoundedCorners
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
name|x1
operator|+
name|wby3
argument_list|,
name|y2
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|,
name|LeftEdge
argument_list|,
name|BorderStyle_Solid
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|qDrawRoundedCorners
argument_list|(
name|p
argument_list|,
name|x2
operator|-
name|wby3
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|,
name|LeftEdge
argument_list|,
name|BorderStyle_Solid
argument_list|,
name|c
argument_list|)
expr_stmt|;
break|break;
case|case
name|RightEdge
case|:
name|qDrawRoundedCorners
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
name|x1
operator|+
name|wby3
argument_list|,
name|y2
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|,
name|RightEdge
argument_list|,
name|BorderStyle_Solid
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|qDrawRoundedCorners
argument_list|(
name|p
argument_list|,
name|x2
operator|-
name|wby3
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|,
name|RightEdge
argument_list|,
name|BorderStyle_Solid
argument_list|,
name|c
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return;
block|}
elseif|else
if|if
condition|(
name|s
operator|==
name|BorderStyle_Ridge
operator|||
name|s
operator|==
name|BorderStyle_Groove
condition|)
block|{
name|BorderStyle
name|s1
decl_stmt|,
name|s2
decl_stmt|;
if|if
condition|(
name|s
operator|==
name|BorderStyle_Groove
condition|)
block|{
name|s1
operator|=
name|BorderStyle_Inset
expr_stmt|;
name|s2
operator|=
name|BorderStyle_Outset
expr_stmt|;
block|}
else|else
block|{
name|s1
operator|=
name|BorderStyle_Outset
expr_stmt|;
name|s2
operator|=
name|BorderStyle_Inset
expr_stmt|;
block|}
name|int
name|pwby2
init|=
name|qRound
argument_list|(
name|pw
operator|/
literal|2
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|edge
condition|)
block|{
case|case
name|TopEdge
case|:
name|qDrawRoundedCorners
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y1
operator|+
name|pwby2
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|,
name|TopEdge
argument_list|,
name|s1
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|qDrawRoundedCorners
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
operator|+
name|pwby2
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|,
name|TopEdge
argument_list|,
name|s2
argument_list|,
name|c
argument_list|)
expr_stmt|;
break|break;
case|case
name|BottomEdge
case|:
name|qDrawRoundedCorners
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
operator|+
name|pwby2
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|,
name|BottomEdge
argument_list|,
name|s1
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|qDrawRoundedCorners
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
operator|-
name|pwby2
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|,
name|BottomEdge
argument_list|,
name|s2
argument_list|,
name|c
argument_list|)
expr_stmt|;
break|break;
case|case
name|LeftEdge
case|:
name|qDrawRoundedCorners
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
operator|+
name|pwby2
argument_list|,
name|y2
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|,
name|LeftEdge
argument_list|,
name|s1
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|qDrawRoundedCorners
argument_list|(
name|p
argument_list|,
name|x1
operator|+
name|pwby2
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|,
name|LeftEdge
argument_list|,
name|s2
argument_list|,
name|c
argument_list|)
expr_stmt|;
break|break;
case|case
name|RightEdge
case|:
name|qDrawRoundedCorners
argument_list|(
name|p
argument_list|,
name|x1
operator|+
name|pwby2
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|,
name|RightEdge
argument_list|,
name|s1
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|qDrawRoundedCorners
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
name|pwby2
argument_list|,
name|y2
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|,
name|RightEdge
argument_list|,
name|s2
argument_list|,
name|c
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|s
operator|==
name|BorderStyle_Outset
operator|&&
operator|(
name|edge
operator|==
name|TopEdge
operator|||
name|edge
operator|==
name|LeftEdge
operator|)
operator|)
operator|||
operator|(
name|s
operator|==
name|BorderStyle_Inset
operator|&&
operator|(
name|edge
operator|==
name|BottomEdge
operator|||
name|edge
operator|==
name|RightEdge
operator|)
operator|)
condition|)
name|c
operator|=
name|c
operator|.
name|color
argument_list|()
operator|.
name|lighter
argument_list|()
expr_stmt|;
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|qreal
name|pwby2
init|=
name|pw
operator|/
literal|2
decl_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
name|QPen
name|pen
init|=
name|qPenFromStyle
argument_list|(
name|c
argument_list|,
name|pw
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|pen
operator|.
name|setCapStyle
argument_list|(
name|Qt
operator|::
name|SquareCap
argument_list|)
expr_stmt|;
comment|// this eliminates the offby1 errors that we might hit below
name|p
operator|->
name|setPen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|edge
condition|)
block|{
case|case
name|TopEdge
case|:
if|if
condition|(
operator|!
name|r1
operator|.
name|isEmpty
argument_list|()
condition|)
name|p
operator|->
name|drawArc
argument_list|(
name|QRectF
argument_list|(
name|x1
operator|-
name|r1
operator|.
name|width
argument_list|()
operator|+
name|pwby2
argument_list|,
name|y1
operator|+
name|pwby2
argument_list|,
literal|2
operator|*
name|r1
operator|.
name|width
argument_list|()
operator|-
name|pw
argument_list|,
literal|2
operator|*
name|r1
operator|.
name|height
argument_list|()
operator|-
name|pw
argument_list|)
argument_list|,
literal|135
operator|*
literal|16
argument_list|,
operator|-
literal|45
operator|*
literal|16
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|r2
operator|.
name|isEmpty
argument_list|()
condition|)
name|p
operator|->
name|drawArc
argument_list|(
name|QRectF
argument_list|(
name|x2
operator|-
name|r2
operator|.
name|width
argument_list|()
operator|+
name|pwby2
argument_list|,
name|y1
operator|+
name|pwby2
argument_list|,
literal|2
operator|*
name|r2
operator|.
name|width
argument_list|()
operator|-
name|pw
argument_list|,
literal|2
operator|*
name|r2
operator|.
name|height
argument_list|()
operator|-
name|pw
argument_list|)
argument_list|,
literal|45
operator|*
literal|16
argument_list|,
literal|45
operator|*
literal|16
argument_list|)
expr_stmt|;
break|break;
case|case
name|BottomEdge
case|:
if|if
condition|(
operator|!
name|r1
operator|.
name|isEmpty
argument_list|()
condition|)
name|p
operator|->
name|drawArc
argument_list|(
name|QRectF
argument_list|(
name|x1
operator|-
name|r1
operator|.
name|width
argument_list|()
operator|+
name|pwby2
argument_list|,
name|y2
operator|-
literal|2
operator|*
name|r1
operator|.
name|height
argument_list|()
operator|+
name|pwby2
argument_list|,
literal|2
operator|*
name|r1
operator|.
name|width
argument_list|()
operator|-
name|pw
argument_list|,
literal|2
operator|*
name|r1
operator|.
name|height
argument_list|()
operator|-
name|pw
argument_list|)
argument_list|,
operator|-
literal|90
operator|*
literal|16
argument_list|,
operator|-
literal|45
operator|*
literal|16
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|r2
operator|.
name|isEmpty
argument_list|()
condition|)
name|p
operator|->
name|drawArc
argument_list|(
name|QRectF
argument_list|(
name|x2
operator|-
name|r2
operator|.
name|width
argument_list|()
operator|+
name|pwby2
argument_list|,
name|y2
operator|-
literal|2
operator|*
name|r2
operator|.
name|height
argument_list|()
operator|+
name|pwby2
argument_list|,
literal|2
operator|*
name|r2
operator|.
name|width
argument_list|()
operator|-
name|pw
argument_list|,
literal|2
operator|*
name|r2
operator|.
name|height
argument_list|()
operator|-
name|pw
argument_list|)
argument_list|,
operator|-
literal|90
operator|*
literal|16
argument_list|,
literal|45
operator|*
literal|16
argument_list|)
expr_stmt|;
break|break;
case|case
name|LeftEdge
case|:
if|if
condition|(
operator|!
name|r1
operator|.
name|isEmpty
argument_list|()
condition|)
name|p
operator|->
name|drawArc
argument_list|(
name|QRectF
argument_list|(
name|x1
operator|+
name|pwby2
argument_list|,
name|y1
operator|-
name|r1
operator|.
name|height
argument_list|()
operator|+
name|pwby2
argument_list|,
literal|2
operator|*
name|r1
operator|.
name|width
argument_list|()
operator|-
name|pw
argument_list|,
literal|2
operator|*
name|r1
operator|.
name|height
argument_list|()
operator|-
name|pw
argument_list|)
argument_list|,
literal|135
operator|*
literal|16
argument_list|,
literal|45
operator|*
literal|16
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|r2
operator|.
name|isEmpty
argument_list|()
condition|)
name|p
operator|->
name|drawArc
argument_list|(
name|QRectF
argument_list|(
name|x1
operator|+
name|pwby2
argument_list|,
name|y2
operator|-
name|r2
operator|.
name|height
argument_list|()
operator|+
name|pwby2
argument_list|,
literal|2
operator|*
name|r2
operator|.
name|width
argument_list|()
operator|-
name|pw
argument_list|,
literal|2
operator|*
name|r2
operator|.
name|height
argument_list|()
operator|-
name|pw
argument_list|)
argument_list|,
literal|180
operator|*
literal|16
argument_list|,
literal|45
operator|*
literal|16
argument_list|)
expr_stmt|;
break|break;
case|case
name|RightEdge
case|:
if|if
condition|(
operator|!
name|r1
operator|.
name|isEmpty
argument_list|()
condition|)
name|p
operator|->
name|drawArc
argument_list|(
name|QRectF
argument_list|(
name|x2
operator|-
literal|2
operator|*
name|r1
operator|.
name|width
argument_list|()
operator|+
name|pwby2
argument_list|,
name|y1
operator|-
name|r1
operator|.
name|height
argument_list|()
operator|+
name|pwby2
argument_list|,
literal|2
operator|*
name|r1
operator|.
name|width
argument_list|()
operator|-
name|pw
argument_list|,
literal|2
operator|*
name|r1
operator|.
name|height
argument_list|()
operator|-
name|pw
argument_list|)
argument_list|,
literal|45
operator|*
literal|16
argument_list|,
operator|-
literal|45
operator|*
literal|16
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|r2
operator|.
name|isEmpty
argument_list|()
condition|)
name|p
operator|->
name|drawArc
argument_list|(
name|QRectF
argument_list|(
name|x2
operator|-
literal|2
operator|*
name|r2
operator|.
name|width
argument_list|()
operator|+
name|pwby2
argument_list|,
name|y2
operator|-
name|r2
operator|.
name|height
argument_list|()
operator|+
name|pwby2
argument_list|,
literal|2
operator|*
name|r2
operator|.
name|width
argument_list|()
operator|-
name|pw
argument_list|,
literal|2
operator|*
name|r2
operator|.
name|height
argument_list|()
operator|-
name|pw
argument_list|)
argument_list|,
literal|315
operator|*
literal|16
argument_list|,
literal|45
operator|*
literal|16
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qDrawEdge
name|void
name|qDrawEdge
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
name|qreal
name|x1
parameter_list|,
name|qreal
name|y1
parameter_list|,
name|qreal
name|x2
parameter_list|,
name|qreal
name|y2
parameter_list|,
name|qreal
name|dw1
parameter_list|,
name|qreal
name|dw2
parameter_list|,
name|QCss
operator|::
name|Edge
name|edge
parameter_list|,
name|QCss
operator|::
name|BorderStyle
name|style
parameter_list|,
name|QBrush
name|c
parameter_list|)
block|{
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
specifier|const
name|qreal
name|width
init|=
operator|(
name|edge
operator|==
name|TopEdge
operator|||
name|edge
operator|==
name|BottomEdge
operator|)
condition|?
operator|(
name|y2
operator|-
name|y1
operator|)
else|:
operator|(
name|x2
operator|-
name|x1
operator|)
decl_stmt|;
if|if
condition|(
name|width
operator|<=
literal|2
operator|&&
name|style
operator|==
name|BorderStyle_Double
condition|)
name|style
operator|=
name|BorderStyle_Solid
expr_stmt|;
switch|switch
condition|(
name|style
condition|)
block|{
case|case
name|BorderStyle_Inset
case|:
case|case
name|BorderStyle_Outset
case|:
if|if
condition|(
operator|(
name|style
operator|==
name|BorderStyle_Outset
operator|&&
operator|(
name|edge
operator|==
name|TopEdge
operator|||
name|edge
operator|==
name|LeftEdge
operator|)
operator|)
operator|||
operator|(
name|style
operator|==
name|BorderStyle_Inset
operator|&&
operator|(
name|edge
operator|==
name|BottomEdge
operator|||
name|edge
operator|==
name|RightEdge
operator|)
operator|)
condition|)
name|c
operator|=
name|c
operator|.
name|color
argument_list|()
operator|.
name|lighter
argument_list|()
expr_stmt|;
comment|// fall through!
case|case
name|BorderStyle_Solid
case|:
block|{
name|p
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|width
operator|==
literal|1
operator|||
operator|(
name|dw1
operator|==
literal|0
operator|&&
name|dw2
operator|==
literal|0
operator|)
condition|)
block|{
name|p
operator|->
name|drawRect
argument_list|(
name|QRectF
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
name|x1
argument_list|,
name|y2
operator|-
name|y1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// draw trapezoid
name|QPolygonF
name|quad
decl_stmt|;
switch|switch
condition|(
name|edge
condition|)
block|{
case|case
name|TopEdge
case|:
name|quad
operator|<<
name|QPointF
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
operator|<<
name|QPointF
argument_list|(
name|x1
operator|+
name|dw1
argument_list|,
name|y2
argument_list|)
operator|<<
name|QPointF
argument_list|(
name|x2
operator|-
name|dw2
argument_list|,
name|y2
argument_list|)
operator|<<
name|QPointF
argument_list|(
name|x2
argument_list|,
name|y1
argument_list|)
expr_stmt|;
break|break;
case|case
name|BottomEdge
case|:
name|quad
operator|<<
name|QPointF
argument_list|(
name|x1
operator|+
name|dw1
argument_list|,
name|y1
argument_list|)
operator|<<
name|QPointF
argument_list|(
name|x1
argument_list|,
name|y2
argument_list|)
operator|<<
name|QPointF
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
operator|<<
name|QPointF
argument_list|(
name|x2
operator|-
name|dw2
argument_list|,
name|y1
argument_list|)
expr_stmt|;
break|break;
case|case
name|LeftEdge
case|:
name|quad
operator|<<
name|QPointF
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
operator|<<
name|QPointF
argument_list|(
name|x1
argument_list|,
name|y2
argument_list|)
operator|<<
name|QPointF
argument_list|(
name|x2
argument_list|,
name|y2
operator|-
name|dw2
argument_list|)
operator|<<
name|QPointF
argument_list|(
name|x2
argument_list|,
name|y1
operator|+
name|dw1
argument_list|)
expr_stmt|;
break|break;
case|case
name|RightEdge
case|:
name|quad
operator|<<
name|QPointF
argument_list|(
name|x1
argument_list|,
name|y1
operator|+
name|dw1
argument_list|)
operator|<<
name|QPointF
argument_list|(
name|x1
argument_list|,
name|y2
operator|-
name|dw2
argument_list|)
operator|<<
name|QPointF
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
operator|<<
name|QPointF
argument_list|(
name|x2
argument_list|,
name|y1
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|p
operator|->
name|drawConvexPolygon
argument_list|(
name|quad
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|BorderStyle_Dotted
case|:
case|case
name|BorderStyle_Dashed
case|:
case|case
name|BorderStyle_DotDash
case|:
case|case
name|BorderStyle_DotDotDash
case|:
name|p
operator|->
name|setPen
argument_list|(
name|qPenFromStyle
argument_list|(
name|c
argument_list|,
name|width
argument_list|,
name|style
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|width
operator|==
literal|1
condition|)
name|p
operator|->
name|drawLine
argument_list|(
name|QLineF
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
literal|1
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|edge
operator|==
name|TopEdge
operator|||
name|edge
operator|==
name|BottomEdge
condition|)
name|p
operator|->
name|drawLine
argument_list|(
name|QLineF
argument_list|(
name|x1
operator|+
name|width
operator|/
literal|2
argument_list|,
operator|(
name|y1
operator|+
name|y2
operator|)
operator|/
literal|2
argument_list|,
name|x2
operator|-
name|width
operator|/
literal|2
argument_list|,
operator|(
name|y1
operator|+
name|y2
operator|)
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|p
operator|->
name|drawLine
argument_list|(
name|QLineF
argument_list|(
operator|(
name|x1
operator|+
name|x2
operator|)
operator|/
literal|2
argument_list|,
name|y1
operator|+
name|width
operator|/
literal|2
argument_list|,
operator|(
name|x1
operator|+
name|x2
operator|)
operator|/
literal|2
argument_list|,
name|y2
operator|-
name|width
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|BorderStyle_Double
case|:
block|{
name|int
name|wby3
init|=
name|qRound
argument_list|(
name|width
operator|/
literal|3
argument_list|)
decl_stmt|;
name|int
name|dw1by3
init|=
name|qRound
argument_list|(
name|dw1
operator|/
literal|3
argument_list|)
decl_stmt|;
name|int
name|dw2by3
init|=
name|qRound
argument_list|(
name|dw2
operator|/
literal|3
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|edge
condition|)
block|{
case|case
name|TopEdge
case|:
name|qDrawEdge
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y1
operator|+
name|wby3
argument_list|,
name|dw1by3
argument_list|,
name|dw2by3
argument_list|,
name|TopEdge
argument_list|,
name|BorderStyle_Solid
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|qDrawEdge
argument_list|(
name|p
argument_list|,
name|x1
operator|+
name|dw1
operator|-
name|dw1by3
argument_list|,
name|y2
operator|-
name|wby3
argument_list|,
name|x2
operator|-
name|dw2
operator|+
name|dw1by3
argument_list|,
name|y2
argument_list|,
name|dw1by3
argument_list|,
name|dw2by3
argument_list|,
name|TopEdge
argument_list|,
name|BorderStyle_Solid
argument_list|,
name|c
argument_list|)
expr_stmt|;
break|break;
case|case
name|LeftEdge
case|:
name|qDrawEdge
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
operator|+
name|wby3
argument_list|,
name|y2
argument_list|,
name|dw1by3
argument_list|,
name|dw2by3
argument_list|,
name|LeftEdge
argument_list|,
name|BorderStyle_Solid
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|qDrawEdge
argument_list|(
name|p
argument_list|,
name|x2
operator|-
name|wby3
argument_list|,
name|y1
operator|+
name|dw1
operator|-
name|dw1by3
argument_list|,
name|x2
argument_list|,
name|y2
operator|-
name|dw2
operator|+
name|dw2by3
argument_list|,
name|dw1by3
argument_list|,
name|dw2by3
argument_list|,
name|LeftEdge
argument_list|,
name|BorderStyle_Solid
argument_list|,
name|c
argument_list|)
expr_stmt|;
break|break;
case|case
name|BottomEdge
case|:
name|qDrawEdge
argument_list|(
name|p
argument_list|,
name|x1
operator|+
name|dw1
operator|-
name|dw1by3
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
name|dw2
operator|+
name|dw2by3
argument_list|,
name|y1
operator|+
name|wby3
argument_list|,
name|dw1by3
argument_list|,
name|dw2by3
argument_list|,
name|BottomEdge
argument_list|,
name|BorderStyle_Solid
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|qDrawEdge
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y2
operator|-
name|wby3
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|dw1by3
argument_list|,
name|dw2by3
argument_list|,
name|BottomEdge
argument_list|,
name|BorderStyle_Solid
argument_list|,
name|c
argument_list|)
expr_stmt|;
break|break;
case|case
name|RightEdge
case|:
name|qDrawEdge
argument_list|(
name|p
argument_list|,
name|x2
operator|-
name|wby3
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|dw1by3
argument_list|,
name|dw2by3
argument_list|,
name|RightEdge
argument_list|,
name|BorderStyle_Solid
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|qDrawEdge
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
operator|+
name|dw1
operator|-
name|dw1by3
argument_list|,
name|x1
operator|+
name|wby3
argument_list|,
name|y2
operator|-
name|dw2
operator|+
name|dw2by3
argument_list|,
name|dw1by3
argument_list|,
name|dw2by3
argument_list|,
name|RightEdge
argument_list|,
name|BorderStyle_Solid
argument_list|,
name|c
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
break|break;
block|}
case|case
name|BorderStyle_Ridge
case|:
case|case
name|BorderStyle_Groove
case|:
block|{
name|BorderStyle
name|s1
decl_stmt|,
name|s2
decl_stmt|;
if|if
condition|(
name|style
operator|==
name|BorderStyle_Groove
condition|)
block|{
name|s1
operator|=
name|BorderStyle_Inset
expr_stmt|;
name|s2
operator|=
name|BorderStyle_Outset
expr_stmt|;
block|}
else|else
block|{
name|s1
operator|=
name|BorderStyle_Outset
expr_stmt|;
name|s2
operator|=
name|BorderStyle_Inset
expr_stmt|;
block|}
name|int
name|dw1by2
init|=
name|qFloor
argument_list|(
name|dw1
operator|/
literal|2
argument_list|)
decl_stmt|,
name|dw2by2
init|=
name|qFloor
argument_list|(
name|dw2
operator|/
literal|2
argument_list|)
decl_stmt|;
name|int
name|wby2
init|=
name|qRound
argument_list|(
name|width
operator|/
literal|2
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|edge
condition|)
block|{
case|case
name|TopEdge
case|:
name|qDrawEdge
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y1
operator|+
name|wby2
argument_list|,
name|dw1by2
argument_list|,
name|dw2by2
argument_list|,
name|TopEdge
argument_list|,
name|s1
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|qDrawEdge
argument_list|(
name|p
argument_list|,
name|x1
operator|+
name|dw1by2
argument_list|,
name|y1
operator|+
name|wby2
argument_list|,
name|x2
operator|-
name|dw2by2
argument_list|,
name|y2
argument_list|,
name|dw1by2
argument_list|,
name|dw2by2
argument_list|,
name|TopEdge
argument_list|,
name|s2
argument_list|,
name|c
argument_list|)
expr_stmt|;
break|break;
case|case
name|BottomEdge
case|:
name|qDrawEdge
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
operator|+
name|wby2
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|dw1by2
argument_list|,
name|dw2by2
argument_list|,
name|BottomEdge
argument_list|,
name|s1
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|qDrawEdge
argument_list|(
name|p
argument_list|,
name|x1
operator|+
name|dw1by2
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
name|dw2by2
argument_list|,
name|y1
operator|+
name|wby2
argument_list|,
name|dw1by2
argument_list|,
name|dw2by2
argument_list|,
name|BottomEdge
argument_list|,
name|s2
argument_list|,
name|c
argument_list|)
expr_stmt|;
break|break;
case|case
name|LeftEdge
case|:
name|qDrawEdge
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
operator|+
name|wby2
argument_list|,
name|y2
argument_list|,
name|dw1by2
argument_list|,
name|dw2by2
argument_list|,
name|LeftEdge
argument_list|,
name|s1
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|qDrawEdge
argument_list|(
name|p
argument_list|,
name|x1
operator|+
name|wby2
argument_list|,
name|y1
operator|+
name|dw1by2
argument_list|,
name|x2
argument_list|,
name|y2
operator|-
name|dw2by2
argument_list|,
name|dw1by2
argument_list|,
name|dw2by2
argument_list|,
name|LeftEdge
argument_list|,
name|s2
argument_list|,
name|c
argument_list|)
expr_stmt|;
break|break;
case|case
name|RightEdge
case|:
name|qDrawEdge
argument_list|(
name|p
argument_list|,
name|x1
operator|+
name|wby2
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|dw1by2
argument_list|,
name|dw2by2
argument_list|,
name|RightEdge
argument_list|,
name|s1
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|qDrawEdge
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
operator|+
name|dw1by2
argument_list|,
name|x1
operator|+
name|wby2
argument_list|,
name|y2
operator|-
name|dw2by2
argument_list|,
name|dw1by2
argument_list|,
name|dw2by2
argument_list|,
name|RightEdge
argument_list|,
name|s2
argument_list|,
name|c
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
default|default:
break|break;
block|}
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qNormalizeRadii
name|void
name|qNormalizeRadii
parameter_list|(
specifier|const
name|QRect
modifier|&
name|br
parameter_list|,
specifier|const
name|QSize
modifier|*
name|radii
parameter_list|,
name|QSize
modifier|*
name|tlr
parameter_list|,
name|QSize
modifier|*
name|trr
parameter_list|,
name|QSize
modifier|*
name|blr
parameter_list|,
name|QSize
modifier|*
name|brr
parameter_list|)
block|{
operator|*
name|tlr
operator|=
name|radii
index|[
literal|0
index|]
operator|.
name|expandedTo
argument_list|(
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
operator|*
name|trr
operator|=
name|radii
index|[
literal|1
index|]
operator|.
name|expandedTo
argument_list|(
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
operator|*
name|blr
operator|=
name|radii
index|[
literal|2
index|]
operator|.
name|expandedTo
argument_list|(
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
operator|*
name|brr
operator|=
name|radii
index|[
literal|3
index|]
operator|.
name|expandedTo
argument_list|(
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tlr
operator|->
name|width
argument_list|()
operator|+
name|trr
operator|->
name|width
argument_list|()
operator|>
name|br
operator|.
name|width
argument_list|()
condition|)
operator|*
name|tlr
operator|=
operator|*
name|trr
operator|=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|blr
operator|->
name|width
argument_list|()
operator|+
name|brr
operator|->
name|width
argument_list|()
operator|>
name|br
operator|.
name|width
argument_list|()
condition|)
operator|*
name|blr
operator|=
operator|*
name|brr
operator|=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|tlr
operator|->
name|height
argument_list|()
operator|+
name|blr
operator|->
name|height
argument_list|()
operator|>
name|br
operator|.
name|height
argument_list|()
condition|)
operator|*
name|tlr
operator|=
operator|*
name|blr
operator|=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|trr
operator|->
name|height
argument_list|()
operator|+
name|brr
operator|->
name|height
argument_list|()
operator|>
name|br
operator|.
name|height
argument_list|()
condition|)
operator|*
name|trr
operator|=
operator|*
name|brr
operator|=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Determines if Edge e1 draws over Edge e2. Depending on this trapezoids or rectanges are drawn
end_comment
begin_function
DECL|function|paintsOver
specifier|static
name|bool
name|paintsOver
parameter_list|(
specifier|const
name|QCss
operator|::
name|BorderStyle
modifier|*
name|styles
parameter_list|,
specifier|const
name|QBrush
modifier|*
name|colors
parameter_list|,
name|QCss
operator|::
name|Edge
name|e1
parameter_list|,
name|QCss
operator|::
name|Edge
name|e2
parameter_list|)
block|{
name|QCss
operator|::
name|BorderStyle
name|s1
init|=
name|styles
index|[
name|e1
index|]
decl_stmt|;
name|QCss
operator|::
name|BorderStyle
name|s2
init|=
name|styles
index|[
name|e2
index|]
decl_stmt|;
if|if
condition|(
name|s2
operator|==
name|BorderStyle_None
operator|||
name|colors
index|[
name|e2
index|]
operator|==
name|Qt
operator|::
name|transparent
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|(
name|s1
operator|==
name|BorderStyle_Solid
operator|&&
name|s2
operator|==
name|BorderStyle_Solid
operator|)
operator|&&
operator|(
name|colors
index|[
name|e1
index|]
operator|==
name|colors
index|[
name|e2
index|]
operator|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|qDrawBorder
name|void
name|qDrawBorder
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QCss
operator|::
name|BorderStyle
modifier|*
name|styles
parameter_list|,
specifier|const
name|int
modifier|*
name|borders
parameter_list|,
specifier|const
name|QBrush
modifier|*
name|colors
parameter_list|,
specifier|const
name|QSize
modifier|*
name|radii
parameter_list|)
block|{
specifier|const
name|QRectF
name|br
argument_list|(
name|rect
argument_list|)
decl_stmt|;
name|QSize
name|tlr
decl_stmt|,
name|trr
decl_stmt|,
name|blr
decl_stmt|,
name|brr
decl_stmt|;
name|qNormalizeRadii
argument_list|(
name|rect
argument_list|,
name|radii
argument_list|,
operator|&
name|tlr
argument_list|,
operator|&
name|trr
argument_list|,
operator|&
name|blr
argument_list|,
operator|&
name|brr
argument_list|)
expr_stmt|;
comment|// Drawn in increasing order of precendence
if|if
condition|(
name|styles
index|[
name|BottomEdge
index|]
operator|!=
name|BorderStyle_None
operator|&&
name|borders
index|[
name|BottomEdge
index|]
operator|>
literal|0
condition|)
block|{
name|qreal
name|dw1
init|=
operator|(
name|blr
operator|.
name|width
argument_list|()
operator|||
name|paintsOver
argument_list|(
name|styles
argument_list|,
name|colors
argument_list|,
name|BottomEdge
argument_list|,
name|LeftEdge
argument_list|)
operator|)
condition|?
literal|0
else|:
name|borders
index|[
name|LeftEdge
index|]
decl_stmt|;
name|qreal
name|dw2
init|=
operator|(
name|brr
operator|.
name|width
argument_list|()
operator|||
name|paintsOver
argument_list|(
name|styles
argument_list|,
name|colors
argument_list|,
name|BottomEdge
argument_list|,
name|RightEdge
argument_list|)
operator|)
condition|?
literal|0
else|:
name|borders
index|[
name|RightEdge
index|]
decl_stmt|;
name|qreal
name|x1
init|=
name|br
operator|.
name|x
argument_list|()
operator|+
name|blr
operator|.
name|width
argument_list|()
decl_stmt|;
name|qreal
name|y1
init|=
name|br
operator|.
name|y
argument_list|()
operator|+
name|br
operator|.
name|height
argument_list|()
operator|-
name|borders
index|[
name|BottomEdge
index|]
decl_stmt|;
name|qreal
name|x2
init|=
name|br
operator|.
name|x
argument_list|()
operator|+
name|br
operator|.
name|width
argument_list|()
operator|-
name|brr
operator|.
name|width
argument_list|()
decl_stmt|;
name|qreal
name|y2
init|=
name|br
operator|.
name|y
argument_list|()
operator|+
name|br
operator|.
name|height
argument_list|()
decl_stmt|;
name|qDrawEdge
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|dw1
argument_list|,
name|dw2
argument_list|,
name|BottomEdge
argument_list|,
name|styles
index|[
name|BottomEdge
index|]
argument_list|,
name|colors
index|[
name|BottomEdge
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|blr
operator|.
name|width
argument_list|()
operator|||
name|brr
operator|.
name|width
argument_list|()
condition|)
name|qDrawRoundedCorners
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|blr
argument_list|,
name|brr
argument_list|,
name|BottomEdge
argument_list|,
name|styles
index|[
name|BottomEdge
index|]
argument_list|,
name|colors
index|[
name|BottomEdge
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|styles
index|[
name|RightEdge
index|]
operator|!=
name|BorderStyle_None
operator|&&
name|borders
index|[
name|RightEdge
index|]
operator|>
literal|0
condition|)
block|{
name|qreal
name|dw1
init|=
operator|(
name|trr
operator|.
name|height
argument_list|()
operator|||
name|paintsOver
argument_list|(
name|styles
argument_list|,
name|colors
argument_list|,
name|RightEdge
argument_list|,
name|TopEdge
argument_list|)
operator|)
condition|?
literal|0
else|:
name|borders
index|[
name|TopEdge
index|]
decl_stmt|;
name|qreal
name|dw2
init|=
operator|(
name|brr
operator|.
name|height
argument_list|()
operator|||
name|paintsOver
argument_list|(
name|styles
argument_list|,
name|colors
argument_list|,
name|RightEdge
argument_list|,
name|BottomEdge
argument_list|)
operator|)
condition|?
literal|0
else|:
name|borders
index|[
name|BottomEdge
index|]
decl_stmt|;
name|qreal
name|x1
init|=
name|br
operator|.
name|x
argument_list|()
operator|+
name|br
operator|.
name|width
argument_list|()
operator|-
name|borders
index|[
name|RightEdge
index|]
decl_stmt|;
name|qreal
name|y1
init|=
name|br
operator|.
name|y
argument_list|()
operator|+
name|trr
operator|.
name|height
argument_list|()
decl_stmt|;
name|qreal
name|x2
init|=
name|br
operator|.
name|x
argument_list|()
operator|+
name|br
operator|.
name|width
argument_list|()
decl_stmt|;
name|qreal
name|y2
init|=
name|br
operator|.
name|y
argument_list|()
operator|+
name|br
operator|.
name|height
argument_list|()
operator|-
name|brr
operator|.
name|height
argument_list|()
decl_stmt|;
name|qDrawEdge
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|dw1
argument_list|,
name|dw2
argument_list|,
name|RightEdge
argument_list|,
name|styles
index|[
name|RightEdge
index|]
argument_list|,
name|colors
index|[
name|RightEdge
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|trr
operator|.
name|height
argument_list|()
operator|||
name|brr
operator|.
name|height
argument_list|()
condition|)
name|qDrawRoundedCorners
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|trr
argument_list|,
name|brr
argument_list|,
name|RightEdge
argument_list|,
name|styles
index|[
name|RightEdge
index|]
argument_list|,
name|colors
index|[
name|RightEdge
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|styles
index|[
name|LeftEdge
index|]
operator|!=
name|BorderStyle_None
operator|&&
name|borders
index|[
name|LeftEdge
index|]
operator|>
literal|0
condition|)
block|{
name|qreal
name|dw1
init|=
operator|(
name|tlr
operator|.
name|height
argument_list|()
operator|||
name|paintsOver
argument_list|(
name|styles
argument_list|,
name|colors
argument_list|,
name|LeftEdge
argument_list|,
name|TopEdge
argument_list|)
operator|)
condition|?
literal|0
else|:
name|borders
index|[
name|TopEdge
index|]
decl_stmt|;
name|qreal
name|dw2
init|=
operator|(
name|blr
operator|.
name|height
argument_list|()
operator|||
name|paintsOver
argument_list|(
name|styles
argument_list|,
name|colors
argument_list|,
name|LeftEdge
argument_list|,
name|BottomEdge
argument_list|)
operator|)
condition|?
literal|0
else|:
name|borders
index|[
name|BottomEdge
index|]
decl_stmt|;
name|qreal
name|x1
init|=
name|br
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|y1
init|=
name|br
operator|.
name|y
argument_list|()
operator|+
name|tlr
operator|.
name|height
argument_list|()
decl_stmt|;
name|qreal
name|x2
init|=
name|br
operator|.
name|x
argument_list|()
operator|+
name|borders
index|[
name|LeftEdge
index|]
decl_stmt|;
name|qreal
name|y2
init|=
name|br
operator|.
name|y
argument_list|()
operator|+
name|br
operator|.
name|height
argument_list|()
operator|-
name|blr
operator|.
name|height
argument_list|()
decl_stmt|;
name|qDrawEdge
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|dw1
argument_list|,
name|dw2
argument_list|,
name|LeftEdge
argument_list|,
name|styles
index|[
name|LeftEdge
index|]
argument_list|,
name|colors
index|[
name|LeftEdge
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|tlr
operator|.
name|height
argument_list|()
operator|||
name|blr
operator|.
name|height
argument_list|()
condition|)
name|qDrawRoundedCorners
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|tlr
argument_list|,
name|blr
argument_list|,
name|LeftEdge
argument_list|,
name|styles
index|[
name|LeftEdge
index|]
argument_list|,
name|colors
index|[
name|LeftEdge
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|styles
index|[
name|TopEdge
index|]
operator|!=
name|BorderStyle_None
operator|&&
name|borders
index|[
name|TopEdge
index|]
operator|>
literal|0
condition|)
block|{
name|qreal
name|dw1
init|=
operator|(
name|tlr
operator|.
name|width
argument_list|()
operator|||
name|paintsOver
argument_list|(
name|styles
argument_list|,
name|colors
argument_list|,
name|TopEdge
argument_list|,
name|LeftEdge
argument_list|)
operator|)
condition|?
literal|0
else|:
name|borders
index|[
name|LeftEdge
index|]
decl_stmt|;
name|qreal
name|dw2
init|=
operator|(
name|trr
operator|.
name|width
argument_list|()
operator|||
name|paintsOver
argument_list|(
name|styles
argument_list|,
name|colors
argument_list|,
name|TopEdge
argument_list|,
name|RightEdge
argument_list|)
operator|)
condition|?
literal|0
else|:
name|borders
index|[
name|RightEdge
index|]
decl_stmt|;
name|qreal
name|x1
init|=
name|br
operator|.
name|x
argument_list|()
operator|+
name|tlr
operator|.
name|width
argument_list|()
decl_stmt|;
name|qreal
name|y1
init|=
name|br
operator|.
name|y
argument_list|()
decl_stmt|;
name|qreal
name|x2
init|=
name|br
operator|.
name|left
argument_list|()
operator|+
name|br
operator|.
name|width
argument_list|()
operator|-
name|trr
operator|.
name|width
argument_list|()
decl_stmt|;
name|qreal
name|y2
init|=
name|br
operator|.
name|y
argument_list|()
operator|+
name|borders
index|[
name|TopEdge
index|]
decl_stmt|;
name|qDrawEdge
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|dw1
argument_list|,
name|dw2
argument_list|,
name|TopEdge
argument_list|,
name|styles
index|[
name|TopEdge
index|]
argument_list|,
name|colors
index|[
name|TopEdge
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|tlr
operator|.
name|width
argument_list|()
operator|||
name|trr
operator|.
name|width
argument_list|()
condition|)
name|qDrawRoundedCorners
argument_list|(
name|p
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|tlr
argument_list|,
name|trr
argument_list|,
name|TopEdge
argument_list|,
name|styles
index|[
name|TopEdge
index|]
argument_list|,
name|colors
index|[
name|TopEdge
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_CSSPARSER
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
