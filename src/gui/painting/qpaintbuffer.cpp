begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_include
include|#
directive|include
file|<private/qpainterpath_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintbuffer_p.h>
end_include
begin_comment
comment|//#include<private/qtextengine_p.h>
end_comment
begin_include
include|#
directive|include
file|<private/qfontengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qemulationpaintengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qimage_p.h>
end_include
begin_include
include|#
directive|include
file|<qstatictext.h>
end_include
begin_include
include|#
directive|include
file|<private/qstatictext_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qrawfont_p.h>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_comment
comment|// #define QPAINTBUFFER_DEBUG_DRAW
end_comment
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|void
name|qt_format_text
parameter_list|(
specifier|const
name|QFont
modifier|&
name|font
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|_r
parameter_list|,
name|int
name|tf
parameter_list|,
specifier|const
name|QTextOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|QRectF
modifier|*
name|brect
parameter_list|,
name|int
name|tabstops
parameter_list|,
name|int
modifier|*
name|tabarray
parameter_list|,
name|int
name|tabarraylen
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|)
function_decl|;
end_function_decl
begin_constructor
DECL|function|QTextItemIntCopy
name|QTextItemIntCopy
operator|::
name|QTextItemIntCopy
parameter_list|(
specifier|const
name|QTextItem
modifier|&
name|item
parameter_list|)
member_init_list|:
name|m_item
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|QTextItemInt
operator|&
argument_list|>
argument_list|(
name|item
argument_list|)
argument_list|)
block|{
name|QChar
modifier|*
name|chars
init|=
operator|new
name|QChar
index|[
name|m_item
operator|.
name|num_chars
index|]
decl_stmt|;
name|unsigned
name|short
modifier|*
name|logClusters
init|=
operator|new
name|unsigned
name|short
index|[
name|m_item
operator|.
name|num_chars
index|]
decl_stmt|;
name|memcpy
argument_list|(
name|chars
argument_list|,
name|m_item
operator|.
name|chars
argument_list|,
name|m_item
operator|.
name|num_chars
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|logClusters
argument_list|,
name|m_item
operator|.
name|logClusters
argument_list|,
name|m_item
operator|.
name|num_chars
operator|*
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
argument_list|)
expr_stmt|;
name|m_item
operator|.
name|chars
operator|=
name|chars
expr_stmt|;
name|m_item
operator|.
name|logClusters
operator|=
name|logClusters
expr_stmt|;
name|char
modifier|*
name|glyphLayoutData
init|=
operator|new
name|char
index|[
name|m_item
operator|.
name|glyphs
operator|.
name|numGlyphs
operator|*
name|QGlyphLayout
operator|::
name|SpaceNeeded
index|]
decl_stmt|;
name|QGlyphLayout
name|glyphs
argument_list|(
name|glyphLayoutData
argument_list|,
name|m_item
operator|.
name|glyphs
operator|.
name|numGlyphs
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
name|glyphs
operator|.
name|offsets
argument_list|,
name|m_item
operator|.
name|glyphs
operator|.
name|offsets
argument_list|,
name|m_item
operator|.
name|glyphs
operator|.
name|numGlyphs
operator|*
sizeof|sizeof
argument_list|(
name|QFixedPoint
argument_list|)
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|glyphs
operator|.
name|glyphs
argument_list|,
name|m_item
operator|.
name|glyphs
operator|.
name|glyphs
argument_list|,
name|m_item
operator|.
name|glyphs
operator|.
name|numGlyphs
operator|*
sizeof|sizeof
argument_list|(
name|glyph_t
argument_list|)
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|glyphs
operator|.
name|advances
argument_list|,
name|m_item
operator|.
name|glyphs
operator|.
name|advances
argument_list|,
name|m_item
operator|.
name|glyphs
operator|.
name|numGlyphs
operator|*
sizeof|sizeof
argument_list|(
name|QFixed
argument_list|)
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|glyphs
operator|.
name|justifications
argument_list|,
name|m_item
operator|.
name|glyphs
operator|.
name|justifications
argument_list|,
name|m_item
operator|.
name|glyphs
operator|.
name|numGlyphs
operator|*
sizeof|sizeof
argument_list|(
name|QGlyphJustification
argument_list|)
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|glyphs
operator|.
name|attributes
argument_list|,
name|m_item
operator|.
name|glyphs
operator|.
name|attributes
argument_list|,
name|m_item
operator|.
name|glyphs
operator|.
name|numGlyphs
operator|*
sizeof|sizeof
argument_list|(
name|QGlyphAttributes
argument_list|)
argument_list|)
expr_stmt|;
name|m_item
operator|.
name|glyphs
operator|=
name|glyphs
expr_stmt|;
name|m_font
operator|=
operator|*
name|m_item
operator|.
name|f
expr_stmt|;
name|m_item
operator|.
name|f
operator|=
operator|&
name|m_font
expr_stmt|;
name|m_item
operator|.
name|fontEngine
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
comment|// Increment reference count.
block|}
end_constructor
begin_destructor
DECL|function|~QTextItemIntCopy
name|QTextItemIntCopy
operator|::
name|~
name|QTextItemIntCopy
parameter_list|()
block|{
operator|delete
index|[]
name|m_item
operator|.
name|chars
expr_stmt|;
operator|delete
index|[]
name|m_item
operator|.
name|logClusters
expr_stmt|;
operator|delete
index|[]
name|m_item
operator|.
name|glyphs
operator|.
name|data
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|m_item
operator|.
name|fontEngine
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|m_item
operator|.
name|fontEngine
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/************************************************************************  *  * QPaintBufferPrivate  *  ************************************************************************/
end_comment
begin_constructor
DECL|function|QPaintBufferPrivate
name|QPaintBufferPrivate
operator|::
name|QPaintBufferPrivate
parameter_list|()
member_init_list|:
name|ref
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|engine
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|penWidthAdjustment
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|calculateBoundingRect
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|cache
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QPaintBufferPrivate
name|QPaintBufferPrivate
operator|::
name|~
name|QPaintBufferPrivate
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|commands
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPaintBufferCommand
modifier|&
name|cmd
init|=
name|commands
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|id
operator|==
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawTextItem
condition|)
operator|delete
cast|reinterpret_cast
argument_list|<
name|QTextItemIntCopy
operator|*
argument_list|>
argument_list|(
name|qvariant_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|updateBoundingRect
specifier|inline
name|void
name|QPaintBufferPrivate
operator|::
name|updateBoundingRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|br
parameter_list|)
block|{
comment|// transform to device coords and adjust for pen width
name|Q_ASSERT
argument_list|(
name|engine
operator|&&
name|engine
operator|->
name|painter
argument_list|()
argument_list|)
expr_stmt|;
name|QPainter
modifier|*
name|painter
init|=
name|engine
operator|->
name|painter
argument_list|()
decl_stmt|;
specifier|const
name|QTransform
name|transform
init|=
name|painter
operator|->
name|transform
argument_list|()
decl_stmt|;
name|QRectF
name|devRect
init|=
name|transform
operator|.
name|mapRect
argument_list|(
name|br
argument_list|)
decl_stmt|;
if|if
condition|(
name|penWidthAdjustment
operator|>
literal|0
condition|)
block|{
name|devRect
operator|=
name|devRect
operator|.
name|adjusted
argument_list|(
operator|-
name|penWidthAdjustment
argument_list|,
operator|-
name|penWidthAdjustment
argument_list|,
name|penWidthAdjustment
argument_list|,
name|penWidthAdjustment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|boundingRect
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boundingRect
operator|=
name|devRect
expr_stmt|;
block|}
else|else
block|{
name|qreal
name|min_x
init|=
name|qMin
argument_list|(
name|devRect
operator|.
name|left
argument_list|()
argument_list|,
name|boundingRect
operator|.
name|left
argument_list|()
argument_list|)
decl_stmt|;
name|qreal
name|min_y
init|=
name|qMin
argument_list|(
name|devRect
operator|.
name|top
argument_list|()
argument_list|,
name|boundingRect
operator|.
name|top
argument_list|()
argument_list|)
decl_stmt|;
name|qreal
name|max_x
init|=
name|qMax
argument_list|(
name|devRect
operator|.
name|right
argument_list|()
argument_list|,
name|boundingRect
operator|.
name|right
argument_list|()
argument_list|)
decl_stmt|;
name|qreal
name|max_y
init|=
name|qMax
argument_list|(
name|devRect
operator|.
name|bottom
argument_list|()
argument_list|,
name|boundingRect
operator|.
name|bottom
argument_list|()
argument_list|)
decl_stmt|;
name|boundingRect
operator|=
name|QRectF
argument_list|(
name|min_x
argument_list|,
name|min_y
argument_list|,
name|max_x
operator|-
name|min_x
argument_list|,
name|max_y
operator|-
name|min_y
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|painter
operator|->
name|hasClipping
argument_list|()
condition|)
name|boundingRect
operator|&=
name|transform
operator|.
name|mapRect
argument_list|(
name|painter
operator|->
name|clipRegion
argument_list|()
operator|.
name|boundingRect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/************************************************************************  *  * QPaintBuffer  *  ************************************************************************/
end_comment
begin_constructor
DECL|function|QPaintBuffer
name|QPaintBuffer
operator|::
name|QPaintBuffer
parameter_list|()
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QPaintBufferPrivate
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QPaintBuffer
name|QPaintBuffer
operator|::
name|~
name|QPaintBuffer
parameter_list|()
block|{
if|if
condition|(
operator|!
name|d_ptr
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|d_ptr
expr_stmt|;
block|}
end_destructor
begin_constructor
DECL|function|QPaintBuffer
name|QPaintBuffer
operator|::
name|QPaintBuffer
parameter_list|(
specifier|const
name|QPaintBuffer
modifier|&
name|other
parameter_list|)
member_init_list|:
name|QPaintDevice
argument_list|()
member_init_list|,
name|d_ptr
argument_list|(
name|other
operator|.
name|d_ptr
argument_list|)
block|{
name|d_ptr
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
end_constructor
begin_function
DECL|function|paintEngine
name|QPaintEngine
modifier|*
name|QPaintBuffer
operator|::
name|paintEngine
parameter_list|()
specifier|const
block|{
name|QPaintBufferPrivate
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QPaintBuffer
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|d_ptr
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|engine
condition|)
name|d
operator|->
name|engine
operator|=
operator|new
name|QPaintBufferEngine
argument_list|(
name|d
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|engine
return|;
block|}
end_function
begin_function
DECL|function|metric
name|int
name|QPaintBuffer
operator|::
name|metric
parameter_list|(
name|PaintDeviceMetric
name|metric
parameter_list|)
specifier|const
block|{
name|int
name|val
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|metric
condition|)
block|{
case|case
name|PdmWidth
case|:
name|val
operator|=
name|qCeil
argument_list|(
name|d_ptr
operator|->
name|boundingRect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PdmHeight
case|:
name|val
operator|=
name|qCeil
argument_list|(
name|d_ptr
operator|->
name|boundingRect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PdmDpiX
case|:
case|case
name|PdmPhysicalDpiX
case|:
name|val
operator|=
name|qt_defaultDpiX
argument_list|()
expr_stmt|;
break|break;
case|case
name|PdmDpiY
case|:
case|case
name|PdmPhysicalDpiY
case|:
name|val
operator|=
name|qt_defaultDpiY
argument_list|()
expr_stmt|;
break|break;
default|default:
name|val
operator|=
name|QPaintDevice
operator|::
name|metric
argument_list|(
name|metric
argument_list|)
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
end_function
begin_function
DECL|function|devType
name|int
name|QPaintBuffer
operator|::
name|devType
parameter_list|()
specifier|const
block|{
return|return
name|QInternal
operator|::
name|PaintBuffer
return|;
block|}
end_function
begin_function
DECL|function|operator =
name|QPaintBuffer
modifier|&
name|QPaintBuffer
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QPaintBuffer
modifier|&
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|d_ptr
operator|!=
name|d_ptr
condition|)
block|{
name|QPaintBufferPrivate
modifier|*
name|data
init|=
name|other
operator|.
name|d_ptr
decl_stmt|;
name|data
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
if|if
condition|(
name|d_ptr
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|d_ptr
expr_stmt|;
name|d_ptr
operator|=
name|data
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
end_function
begin_function
DECL|function|isEmpty
name|bool
name|QPaintBuffer
operator|::
name|isEmpty
parameter_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|commands
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|draw
name|void
name|QPaintBuffer
operator|::
name|draw
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
name|int
name|frame
parameter_list|)
specifier|const
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBuffer::draw() --------------------------------"
expr_stmt|;
name|Q_D
argument_list|(
specifier|const
name|QPaintBuffer
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"Float buffer:"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|floats
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|i
operator|%
literal|10
operator|)
operator|==
literal|0
condition|)
block|{
name|printf
argument_list|(
literal|"\n%4d-%4d: "
argument_list|,
name|i
argument_list|,
name|i
operator|+
literal|9
argument_list|)
expr_stmt|;
block|}
name|printf
argument_list|(
literal|"%4.2f  "
argument_list|,
name|d
operator|->
name|floats
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|printf
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"Int Buffer:"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|ints
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|i
operator|%
literal|10
operator|)
operator|==
literal|0
condition|)
block|{
name|printf
argument_list|(
literal|"\n%4d-%4d: "
argument_list|,
name|i
argument_list|,
name|i
operator|+
literal|10
argument_list|)
expr_stmt|;
block|}
name|printf
argument_list|(
literal|"%5d"
argument_list|,
name|d
operator|->
name|ints
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|printf
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|processCommands
argument_list|(
name|painter
argument_list|,
name|frameStartIndex
argument_list|(
name|frame
argument_list|)
argument_list|,
name|frameEndIndex
argument_list|(
name|frame
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBuffer::draw() -------------------------------- DONE!"
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|frameStartIndex
name|int
name|QPaintBuffer
operator|::
name|frameStartIndex
parameter_list|(
name|int
name|frame
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|frame
operator|==
literal|0
operator|)
condition|?
literal|0
else|:
name|d_ptr
operator|->
name|frames
operator|.
name|at
argument_list|(
name|frame
operator|-
literal|1
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|frameEndIndex
name|int
name|QPaintBuffer
operator|::
name|frameEndIndex
parameter_list|(
name|int
name|frame
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|frame
operator|==
name|d_ptr
operator|->
name|frames
operator|.
name|size
argument_list|()
operator|)
condition|?
name|d_ptr
operator|->
name|commands
operator|.
name|size
argument_list|()
else|:
name|d_ptr
operator|->
name|frames
operator|.
name|at
argument_list|(
name|frame
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|processCommands
name|int
name|QPaintBuffer
operator|::
name|processCommands
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
name|int
name|begin
parameter_list|,
name|int
name|end
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|painter
operator|||
operator|!
name|painter
operator|->
name|isActive
argument_list|()
condition|)
return|return
literal|0
return|;
name|QPaintEngineEx
modifier|*
name|xengine
init|=
name|painter
operator|->
name|paintEngine
argument_list|()
operator|->
name|isExtended
argument_list|()
condition|?
operator|(
name|QPaintEngineEx
operator|*
operator|)
name|painter
operator|->
name|paintEngine
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|xengine
condition|)
block|{
name|QPaintEngineExReplayer
name|player
decl_stmt|;
name|player
operator|.
name|processCommands
argument_list|(
operator|*
name|this
argument_list|,
name|painter
argument_list|,
name|begin
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPainterReplayer
name|player
decl_stmt|;
name|player
operator|.
name|processCommands
argument_list|(
operator|*
name|this
argument_list|,
name|painter
argument_list|,
name|begin
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
name|int
name|depth
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|begin
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPaintBufferCommand
modifier|&
name|cmd
init|=
name|d_ptr
operator|->
name|commands
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|id
operator|==
name|QPaintBufferPrivate
operator|::
name|Cmd_Save
condition|)
operator|++
name|depth
expr_stmt|;
elseif|else
if|if
condition|(
name|cmd
operator|.
name|id
operator|==
name|QPaintBufferPrivate
operator|::
name|Cmd_Restore
condition|)
operator|--
name|depth
expr_stmt|;
block|}
return|return
name|depth
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_function
DECL|function|commandDescription
name|QString
name|QPaintBuffer
operator|::
name|commandDescription
parameter_list|(
name|int
name|command
parameter_list|)
specifier|const
block|{
name|QString
name|desc
decl_stmt|;
name|QDebug
name|debug
argument_list|(
operator|&
name|desc
argument_list|)
decl_stmt|;
specifier|const
name|QPaintBufferCommand
modifier|&
name|cmd
init|=
name|d_ptr
operator|->
name|commands
operator|.
name|at
argument_list|(
name|command
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|cmd
operator|.
name|id
condition|)
block|{
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_Save
case|:
block|{
name|debug
operator|<<
literal|"Cmd_Save"
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_Restore
case|:
block|{
name|debug
operator|<<
literal|"Cmd_Restore"
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SetBrush
case|:
block|{
name|QBrush
name|brush
init|=
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|d_ptr
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
argument_list|)
decl_stmt|;
name|debug
operator|<<
literal|"Cmd_SetBrush: "
operator|<<
name|brush
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SetBrushOrigin
case|:
block|{
name|debug
operator|<<
literal|"Cmd_SetBrushOrigin: "
operator|<<
name|d_ptr
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|toPointF
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SetCompositionMode
case|:
block|{
name|QPainter
operator|::
name|CompositionMode
name|mode
init|=
operator|(
name|QPainter
operator|::
name|CompositionMode
operator|)
name|cmd
operator|.
name|extra
decl_stmt|;
name|debug
operator|<<
literal|"ExCmd_SetCompositionMode, mode: "
operator|<<
name|mode
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SetOpacity
case|:
block|{
name|debug
operator|<<
literal|"ExCmd_SetOpacity: "
operator|<<
name|d_ptr
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|toDouble
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawVectorPath
case|:
block|{
name|debug
operator|<<
literal|"ExCmd_DrawVectorPath: size: "
operator|<<
name|cmd
operator|.
name|size
comment|//<< ", hints:"<< d->ints[cmd.offset2+cmd.size]
operator|<<
literal|"pts/elms:"
operator|<<
name|cmd
operator|.
name|offset
operator|<<
name|cmd
operator|.
name|offset2
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_StrokeVectorPath
case|:
block|{
name|QPen
name|pen
init|=
name|qvariant_cast
argument_list|<
name|QPen
argument_list|>
argument_list|(
name|d_ptr
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|)
decl_stmt|;
name|debug
operator|<<
literal|"ExCmd_StrokeVectorPath: size: "
operator|<<
name|cmd
operator|.
name|size
comment|//<< ", hints:"<< d->ints[cmd.offset2+cmd.size]
operator|<<
literal|"pts/elms:"
operator|<<
name|cmd
operator|.
name|offset
operator|<<
name|cmd
operator|.
name|offset2
operator|<<
name|pen
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_FillVectorPath
case|:
block|{
name|QBrush
name|brush
init|=
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|d_ptr
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|)
decl_stmt|;
name|debug
operator|<<
literal|"ExCmd_FillVectorPath: size: "
operator|<<
name|cmd
operator|.
name|size
comment|//<< ", hints:"<< d->ints[cmd.offset2+cmd.size]
operator|<<
literal|"pts/elms:"
operator|<<
name|cmd
operator|.
name|offset
operator|<<
name|cmd
operator|.
name|offset2
operator|<<
name|brush
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_FillRectBrush
case|:
block|{
name|QBrush
name|brush
init|=
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|d_ptr
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|)
decl_stmt|;
name|QRectF
modifier|*
name|rect
init|=
operator|(
name|QRectF
operator|*
operator|)
operator|(
name|d_ptr
operator|->
name|floats
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
decl_stmt|;
name|debug
operator|<<
literal|"ExCmd_FillRectBrush, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" rect: "
operator|<<
operator|*
name|rect
operator|<<
literal|" brush: "
operator|<<
name|brush
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_FillRectColor
case|:
block|{
name|QColor
name|color
init|=
name|qvariant_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|d_ptr
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|)
decl_stmt|;
name|QRectF
modifier|*
name|rect
init|=
operator|(
name|QRectF
operator|*
operator|)
operator|(
name|d_ptr
operator|->
name|floats
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
decl_stmt|;
name|debug
operator|<<
literal|"ExCmd_FillRectBrush, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" rect: "
operator|<<
operator|*
name|rect
operator|<<
literal|" color: "
operator|<<
name|color
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPolygonF
case|:
block|{
name|debug
operator|<<
literal|"ExCmd_DrawPolygonF, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
operator|<<
literal|" mode: "
operator|<<
name|cmd
operator|.
name|extra
operator|<<
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|<<
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
operator|+
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPolygonI
case|:
block|{
name|debug
operator|<<
literal|"ExCmd_DrawPolygonI, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
operator|<<
literal|" mode: "
operator|<<
name|cmd
operator|.
name|extra
operator|<<
name|d_ptr
operator|->
name|ints
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|<<
name|d_ptr
operator|->
name|ints
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
operator|+
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawEllipseF
case|:
block|{
name|debug
operator|<<
literal|"ExCmd_DrawEllipseF, offset: "
operator|<<
name|cmd
operator|.
name|offset
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawLineF
case|:
block|{
name|debug
operator|<<
literal|"ExCmd_DrawLineF, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawLineI
case|:
block|{
name|debug
operator|<<
literal|"ExCmd_DrawLineI, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPointsF
case|:
block|{
name|debug
operator|<<
literal|"ExCmd_DrawPointsF, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPointsI
case|:
block|{
name|debug
operator|<<
literal|"ExCmd_DrawPointsI, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPolylineF
case|:
block|{
name|debug
operator|<<
literal|"ExCmd_DrawPolylineF, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPolylineI
case|:
block|{
name|debug
operator|<<
literal|"ExCmd_DrawPolylineI, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawRectF
case|:
block|{
name|debug
operator|<<
literal|"ExCmd_DrawRectF, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawRectI
case|:
block|{
name|debug
operator|<<
literal|"ExCmd_DrawRectI, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SetClipEnabled
case|:
block|{
name|bool
name|clipEnabled
init|=
name|d_ptr
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|toBool
argument_list|()
decl_stmt|;
name|debug
operator|<<
literal|"ExCmd_SetClipEnabled:"
operator|<<
name|clipEnabled
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_ClipVectorPath
case|:
block|{
name|QVectorPathCmd
name|path
argument_list|(
name|d_ptr
argument_list|,
name|cmd
argument_list|)
decl_stmt|;
name|debug
operator|<<
literal|"ExCmd_ClipVectorPath:"
operator|<<
name|path
argument_list|()
operator|.
name|elementCount
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_ClipRect
case|:
block|{
name|QRect
name|rect
argument_list|(
name|QPoint
argument_list|(
name|d_ptr
operator|->
name|ints
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|ints
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|,
name|QPoint
argument_list|(
name|d_ptr
operator|->
name|ints
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
operator|+
literal|2
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|ints
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
operator|+
literal|3
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|debug
operator|<<
literal|"ExCmd_ClipRect:"
operator|<<
name|rect
operator|<<
name|cmd
operator|.
name|extra
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_ClipRegion
case|:
block|{
name|QRegion
name|region
argument_list|(
name|d_ptr
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|value
argument_list|<
name|QRegion
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|debug
operator|<<
literal|"ExCmd_ClipRegion:"
operator|<<
name|region
operator|.
name|boundingRect
argument_list|()
operator|<<
name|cmd
operator|.
name|extra
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SetPen
case|:
block|{
name|QPen
name|pen
init|=
name|qvariant_cast
argument_list|<
name|QPen
argument_list|>
argument_list|(
name|d_ptr
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
argument_list|)
decl_stmt|;
name|debug
operator|<<
literal|"Cmd_SetPen: "
operator|<<
name|pen
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SetTransform
case|:
block|{
name|QTransform
name|xform
init|=
name|qvariant_cast
argument_list|<
name|QTransform
argument_list|>
argument_list|(
name|d_ptr
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
argument_list|)
decl_stmt|;
name|debug
operator|<<
literal|"Cmd_SetTransform, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
name|xform
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SetRenderHints
case|:
block|{
name|debug
operator|<<
literal|"Cmd_SetRenderHints, hints: "
operator|<<
name|cmd
operator|.
name|extra
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SetBackgroundMode
case|:
block|{
name|debug
operator|<<
literal|"Cmd_SetBackgroundMode: "
operator|<<
name|cmd
operator|.
name|extra
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawConvexPolygonF
case|:
block|{
name|debug
operator|<<
literal|"Cmd_DrawConvexPolygonF, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawConvexPolygonI
case|:
block|{
name|debug
operator|<<
literal|"Cmd_DrawConvexPolygonI, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawEllipseI
case|:
block|{
name|debug
operator|<<
literal|"Cmd_DrawEllipseI, offset: "
operator|<<
name|cmd
operator|.
name|offset
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPixmapRect
case|:
block|{
name|QPixmap
name|pm
argument_list|(
name|d_ptr
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|value
argument_list|<
name|QPixmap
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|QRectF
name|r
argument_list|(
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|1
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|2
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|QRectF
name|sr
argument_list|(
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|4
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|5
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|6
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|7
argument_list|)
argument_list|)
decl_stmt|;
name|debug
operator|<<
literal|"Cmd_DrawPixmapRect:"
operator|<<
name|r
operator|<<
name|sr
operator|<<
name|pm
operator|.
name|size
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPixmapPos
case|:
block|{
name|QPixmap
name|pm
argument_list|(
name|d_ptr
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|value
argument_list|<
name|QPixmap
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|QPointF
name|pos
argument_list|(
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|debug
operator|<<
literal|"Cmd_DrawPixmapPos:"
operator|<<
name|pos
operator|<<
name|pm
operator|.
name|size
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawTiledPixmap
case|:
block|{
name|QPixmap
name|pm
argument_list|(
name|d_ptr
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|value
argument_list|<
name|QPixmap
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|QRectF
name|r
argument_list|(
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|1
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|2
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|QPointF
name|offset
argument_list|(
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|4
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|debug
operator|<<
literal|"Cmd_DrawTiledPixmap:"
operator|<<
name|r
operator|<<
name|offset
operator|<<
name|pm
operator|.
name|size
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawImageRect
case|:
block|{
name|QImage
name|image
argument_list|(
name|d_ptr
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|value
argument_list|<
name|QImage
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|QRectF
name|r
argument_list|(
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|1
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|2
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|QRectF
name|sr
argument_list|(
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|4
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|5
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|6
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|7
argument_list|)
argument_list|)
decl_stmt|;
name|debug
operator|<<
literal|"Cmd_DrawImageRect:"
operator|<<
name|r
operator|<<
name|sr
operator|<<
name|image
operator|.
name|size
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawImagePos
case|:
block|{
name|QImage
name|image
argument_list|(
name|d_ptr
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|value
argument_list|<
name|QImage
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|QPointF
name|pos
argument_list|(
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|debug
operator|<<
literal|"Cmd_DrawImagePos:"
operator|<<
name|pos
operator|<<
name|image
operator|.
name|size
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawText
case|:
block|{
name|QPointF
name|pos
argument_list|(
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|variants
argument_list|(
name|d_ptr
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|value
argument_list|<
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|QFont
name|font
argument_list|(
name|variants
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|<
name|QFont
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|text
argument_list|(
name|variants
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|<
name|QString
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|debug
operator|<<
literal|"Cmd_DrawText:"
operator|<<
name|pos
operator|<<
name|text
operator|<<
name|font
operator|.
name|family
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawTextItem
case|:
block|{
name|QPointF
name|pos
argument_list|(
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|QTextItemIntCopy
modifier|*
name|tiCopy
init|=
cast|reinterpret_cast
argument_list|<
name|QTextItemIntCopy
operator|*
argument_list|>
argument_list|(
name|qvariant_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|d_ptr
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QTextItemInt
modifier|&
name|ti
init|=
call|(
modifier|*
name|tiCopy
call|)
argument_list|()
decl_stmt|;
name|QString
name|text
argument_list|(
name|ti
operator|.
name|text
argument_list|()
argument_list|)
decl_stmt|;
name|debug
operator|<<
literal|"Cmd_DrawTextItem:"
operator|<<
name|pos
operator|<<
literal|" "
operator|<<
name|text
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SystemStateChanged
case|:
block|{
name|QRegion
name|systemClip
argument_list|(
name|d_ptr
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|value
argument_list|<
name|QRegion
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|debug
operator|<<
literal|"Cmd_SystemStateChanged:"
operator|<<
name|systemClip
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_Translate
case|:
block|{
name|QPointF
name|delta
argument_list|(
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|debug
operator|<<
literal|"Cmd_Translate:"
operator|<<
name|delta
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawStaticText
case|:
block|{
name|debug
operator|<<
literal|"Cmd_DrawStaticText"
expr_stmt|;
break|break;
block|}
block|}
return|return
name|desc
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|boundingRect
name|QRectF
name|QPaintBuffer
operator|::
name|boundingRect
parameter_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|boundingRect
return|;
block|}
end_function
begin_function
DECL|function|setBoundingRect
name|void
name|QPaintBuffer
operator|::
name|setBoundingRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
block|{
name|d_ptr
operator|->
name|boundingRect
operator|=
name|rect
expr_stmt|;
name|d_ptr
operator|->
name|calculateBoundingRect
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QPaintBufferEnginePrivate
class|class
name|QPaintBufferEnginePrivate
super|:
specifier|public
name|QPaintEngineExPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QPaintBufferEngine
parameter_list|)
specifier|public
private|:
DECL|function|systemStateChanged
name|void
name|systemStateChanged
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QPaintBufferEngine
argument_list|)
expr_stmt|;
name|q
operator|->
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_SystemStateChanged
argument_list|,
name|QVariant
argument_list|(
name|systemClip
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|member|last
name|QTransform
name|last
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/************************************************************************  *  * QPaintBufferEngine  *  ************************************************************************/
end_comment
begin_constructor
DECL|function|QPaintBufferEngine
name|QPaintBufferEngine
operator|::
name|QPaintBufferEngine
parameter_list|(
name|QPaintBufferPrivate
modifier|*
name|b
parameter_list|)
member_init_list|:
name|QPaintEngineEx
argument_list|(
operator|*
operator|(
operator|new
name|QPaintBufferEnginePrivate
operator|)
argument_list|)
member_init_list|,
name|buffer
argument_list|(
name|b
argument_list|)
member_init_list|,
name|m_begin_detected
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_save_detected
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_stream_raw_text_items
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|begin
name|bool
name|QPaintBufferEngine
operator|::
name|begin
parameter_list|(
name|QPaintDevice
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPaintBufferEngine
argument_list|)
expr_stmt|;
name|painter
argument_list|()
operator|->
name|save
argument_list|()
expr_stmt|;
name|d
operator|->
name|systemStateChanged
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|end
name|bool
name|QPaintBufferEngine
operator|::
name|end
parameter_list|()
block|{
name|painter
argument_list|()
operator|->
name|restore
argument_list|()
expr_stmt|;
name|m_created_state
operator|=
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|createState
name|QPainterState
modifier|*
name|QPaintBufferEngine
operator|::
name|createState
parameter_list|(
name|QPainterState
modifier|*
name|orig
parameter_list|)
specifier|const
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: createState, orig="
operator|<<
name|orig
operator|<<
literal|", current="
operator|<<
name|state
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|Q_ASSERT
argument_list|(
operator|!
name|m_begin_detected
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|m_save_detected
argument_list|)
expr_stmt|;
if|if
condition|(
name|orig
operator|==
literal|0
condition|)
block|{
name|m_begin_detected
operator|=
literal|true
expr_stmt|;
return|return
operator|new
name|QPainterState
argument_list|()
return|;
block|}
else|else
block|{
name|m_save_detected
operator|=
literal|true
expr_stmt|;
return|return
operator|new
name|QPainterState
argument_list|(
name|orig
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|clip
name|void
name|QPaintBufferEngine
operator|::
name|clip
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: clip vpath:"
operator|<<
name|path
operator|.
name|elementCount
argument_list|()
operator|<<
literal|"op:"
operator|<<
name|op
expr_stmt|;
endif|#
directive|endif
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_ClipVectorPath
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|op
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clip
name|void
name|QPaintBufferEngine
operator|::
name|clip
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: clip rect:"
operator|<<
name|rect
operator|<<
literal|"op:"
operator|<<
name|op
expr_stmt|;
endif|#
directive|endif
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_ClipRect
argument_list|,
operator|(
name|int
operator|*
operator|)
operator|&
name|rect
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|op
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clip
name|void
name|QPaintBufferEngine
operator|::
name|clip
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: clip region br:"
operator|<<
name|region
operator|.
name|boundingRect
argument_list|()
operator|<<
literal|"op:"
operator|<<
name|op
expr_stmt|;
endif|#
directive|endif
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_ClipRegion
argument_list|,
name|QVariant
argument_list|(
name|region
argument_list|)
argument_list|)
decl_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|op
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clip
name|void
name|QPaintBufferEngine
operator|::
name|clip
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
comment|// ### TODO
comment|//     QPaintBufferCommand *cmd =
comment|//         buffer->addCommand(QPaintBufferPrivate::Cmd_ClipPath, QVariant(path));
comment|//     cmd->extra = op;
name|QPaintEngineEx
operator|::
name|clip
argument_list|(
name|path
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clipEnabledChanged
name|void
name|QPaintBufferEngine
operator|::
name|clipEnabledChanged
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: clip enable change"
operator|<<
name|state
argument_list|()
operator|->
name|clipEnabled
expr_stmt|;
endif|#
directive|endif
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_SetClipEnabled
argument_list|,
name|state
argument_list|()
operator|->
name|clipEnabled
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|penChanged
name|void
name|QPaintBufferEngine
operator|::
name|penChanged
parameter_list|()
block|{
specifier|const
name|QPen
modifier|&
name|pen
init|=
name|state
argument_list|()
operator|->
name|pen
decl_stmt|;
if|if
condition|(
operator|!
name|buffer
operator|->
name|commands
operator|.
name|isEmpty
argument_list|()
operator|&&
name|buffer
operator|->
name|commands
operator|.
name|last
argument_list|()
operator|.
name|id
operator|==
name|QPaintBufferPrivate
operator|::
name|Cmd_SetPen
condition|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: penChanged (compressed)"
operator|<<
name|state
argument_list|()
operator|->
name|pen
expr_stmt|;
endif|#
directive|endif
name|buffer
operator|->
name|variants
index|[
name|buffer
operator|->
name|commands
operator|.
name|last
argument_list|()
operator|.
name|offset
index|]
operator|=
name|pen
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|buffer
operator|->
name|calculateBoundingRect
condition|)
block|{
if|if
condition|(
name|pen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoPen
condition|)
block|{
name|buffer
operator|->
name|penWidthAdjustment
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|qreal
name|penWidth
init|=
operator|(
name|pen
operator|.
name|widthF
argument_list|()
operator|==
literal|0
operator|)
condition|?
literal|1
else|:
name|pen
operator|.
name|widthF
argument_list|()
decl_stmt|;
name|QPointF
name|transformedWidth
argument_list|(
name|penWidth
argument_list|,
name|penWidth
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|qt_pen_is_cosmetic
argument_list|(
name|pen
argument_list|,
name|state
argument_list|()
operator|->
name|renderHints
argument_list|)
condition|)
name|transformedWidth
operator|=
name|painter
argument_list|()
operator|->
name|transform
argument_list|()
operator|.
name|map
argument_list|(
name|transformedWidth
argument_list|)
expr_stmt|;
name|buffer
operator|->
name|penWidthAdjustment
operator|=
name|transformedWidth
operator|.
name|x
argument_list|()
operator|/
literal|2.0
expr_stmt|;
block|}
block|}
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: penChanged"
operator|<<
name|state
argument_list|()
operator|->
name|pen
expr_stmt|;
endif|#
directive|endif
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_SetPen
argument_list|,
name|pen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|brushChanged
name|void
name|QPaintBufferEngine
operator|::
name|brushChanged
parameter_list|()
block|{
specifier|const
name|QBrush
modifier|&
name|brush
init|=
name|state
argument_list|()
operator|->
name|brush
decl_stmt|;
if|if
condition|(
operator|!
name|buffer
operator|->
name|commands
operator|.
name|isEmpty
argument_list|()
operator|&&
name|buffer
operator|->
name|commands
operator|.
name|last
argument_list|()
operator|.
name|id
operator|==
name|QPaintBufferPrivate
operator|::
name|Cmd_SetBrush
condition|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: brushChanged (compressed)"
operator|<<
name|state
argument_list|()
operator|->
name|brush
expr_stmt|;
endif|#
directive|endif
name|buffer
operator|->
name|variants
index|[
name|buffer
operator|->
name|commands
operator|.
name|last
argument_list|()
operator|.
name|offset
index|]
operator|=
name|brush
expr_stmt|;
return|return;
block|}
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: brushChanged"
operator|<<
name|state
argument_list|()
operator|->
name|brush
expr_stmt|;
endif|#
directive|endif
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_SetBrush
argument_list|,
name|brush
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|brushOriginChanged
name|void
name|QPaintBufferEngine
operator|::
name|brushOriginChanged
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: brush origin changed"
operator|<<
name|state
argument_list|()
operator|->
name|brushOrigin
expr_stmt|;
endif|#
directive|endif
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_SetBrushOrigin
argument_list|,
name|state
argument_list|()
operator|->
name|brushOrigin
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|opacityChanged
name|void
name|QPaintBufferEngine
operator|::
name|opacityChanged
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: opacity changed"
operator|<<
name|state
argument_list|()
operator|->
name|opacity
expr_stmt|;
endif|#
directive|endif
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_SetOpacity
argument_list|,
name|state
argument_list|()
operator|->
name|opacity
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compositionModeChanged
name|void
name|QPaintBufferEngine
operator|::
name|compositionModeChanged
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: composition mode"
operator|<<
name|state
argument_list|()
operator|->
name|composition_mode
expr_stmt|;
endif|#
directive|endif
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_SetCompositionMode
argument_list|)
decl_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|state
argument_list|()
operator|->
name|composition_mode
expr_stmt|;
block|}
end_function
begin_function
DECL|function|renderHintsChanged
name|void
name|QPaintBufferEngine
operator|::
name|renderHintsChanged
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: render hints changed"
operator|<<
name|state
argument_list|()
operator|->
name|renderHints
expr_stmt|;
endif|#
directive|endif
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_SetRenderHints
argument_list|)
decl_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|state
argument_list|()
operator|->
name|renderHints
expr_stmt|;
block|}
end_function
begin_function
DECL|function|transformChanged
name|void
name|QPaintBufferEngine
operator|::
name|transformChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPaintBufferEngine
argument_list|)
expr_stmt|;
specifier|const
name|QTransform
modifier|&
name|transform
init|=
name|state
argument_list|()
operator|->
name|matrix
decl_stmt|;
name|QTransform
name|delta
decl_stmt|;
name|bool
name|invertible
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|transform
operator|.
name|type
argument_list|()
operator|<=
name|QTransform
operator|::
name|TxScale
operator|&&
name|transform
operator|.
name|type
argument_list|()
operator|==
name|d
operator|->
name|last
operator|.
name|type
argument_list|()
condition|)
name|delta
operator|=
name|transform
operator|*
name|d
operator|->
name|last
operator|.
name|inverted
argument_list|(
operator|&
name|invertible
argument_list|)
expr_stmt|;
name|d
operator|->
name|last
operator|=
name|transform
expr_stmt|;
if|if
condition|(
name|invertible
operator|&&
name|delta
operator|.
name|type
argument_list|()
operator|==
name|QTransform
operator|::
name|TxNone
condition|)
return|return;
if|if
condition|(
name|invertible
operator|&&
name|delta
operator|.
name|type
argument_list|()
operator|==
name|QTransform
operator|::
name|TxTranslate
condition|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: transformChanged (translate only) "
operator|<<
name|state
argument_list|()
operator|->
name|matrix
expr_stmt|;
endif|#
directive|endif
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_Translate
argument_list|)
decl_stmt|;
name|qreal
name|data
index|[]
init|=
block|{
name|delta
operator|.
name|dx
argument_list|()
block|,
name|delta
operator|.
name|dy
argument_list|()
block|}
decl_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|buffer
operator|->
name|addData
argument_list|(
operator|(
name|qreal
operator|*
operator|)
name|data
argument_list|,
literal|2
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// ### accumulate, like in QBrush case...
if|if
condition|(
operator|!
name|buffer
operator|->
name|commands
operator|.
name|isEmpty
argument_list|()
operator|&&
name|buffer
operator|->
name|commands
operator|.
name|last
argument_list|()
operator|.
name|id
operator|==
name|QPaintBufferPrivate
operator|::
name|Cmd_SetTransform
condition|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: transformChanged (compressing) "
operator|<<
name|state
argument_list|()
operator|->
name|matrix
expr_stmt|;
endif|#
directive|endif
name|buffer
operator|->
name|variants
index|[
name|buffer
operator|->
name|commands
operator|.
name|last
argument_list|()
operator|.
name|offset
index|]
operator|=
name|state
argument_list|()
operator|->
name|matrix
expr_stmt|;
return|return;
block|}
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: transformChanged:"
operator|<<
name|state
argument_list|()
operator|->
name|matrix
expr_stmt|;
endif|#
directive|endif
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_SetTransform
argument_list|,
name|state
argument_list|()
operator|->
name|matrix
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|backgroundModeChanged
name|void
name|QPaintBufferEngine
operator|::
name|backgroundModeChanged
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintEngineBuffer: background mode changed"
operator|<<
name|state
argument_list|()
operator|->
name|bgMode
expr_stmt|;
endif|#
directive|endif
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_SetBackgroundMode
argument_list|)
decl_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|state
argument_list|()
operator|->
name|bgMode
expr_stmt|;
block|}
end_function
begin_function
DECL|function|draw
name|void
name|QPaintBufferEngine
operator|::
name|draw
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: draw vpath:"
operator|<<
name|path
operator|.
name|elementCount
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|bool
name|hasBrush
init|=
name|qbrush_style
argument_list|(
name|state
argument_list|()
operator|->
name|brush
argument_list|)
operator|!=
name|Qt
operator|::
name|NoBrush
decl_stmt|;
name|bool
name|hasPen
init|=
name|qpen_style
argument_list|(
name|state
argument_list|()
operator|->
name|pen
argument_list|)
operator|!=
name|Qt
operator|::
name|NoPen
operator|&&
name|qbrush_style
argument_list|(
name|qpen_brush
argument_list|(
name|state
argument_list|()
operator|->
name|pen
argument_list|)
argument_list|)
operator|!=
name|Qt
operator|::
name|NoBrush
decl_stmt|;
if|if
condition|(
name|hasPen
operator|||
name|hasBrush
condition|)
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawVectorPath
argument_list|,
name|path
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
else|else
name|qDebug
argument_list|()
operator|<<
literal|" - no pen or brush active, discarded...\n"
expr_stmt|;
endif|#
directive|endif
comment|//     if (buffer->calculateBoundingRect) {
comment|//         QRealRect r = path.controlPointRect();
comment|//         buffer->updateBoundingRect(QRectF(r.x1, r.y1, r.x2 - r.x1, r.y2 - r.y1));
comment|//     }
block|}
end_function
begin_function
DECL|function|fill
name|void
name|QPaintBufferEngine
operator|::
name|fill
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: fill vpath:"
operator|<<
name|path
operator|.
name|elementCount
argument_list|()
operator|<<
name|brush
expr_stmt|;
endif|#
directive|endif
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_FillVectorPath
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|buffer
operator|->
name|addData
argument_list|(
name|QVariant
argument_list|(
name|brush
argument_list|)
argument_list|)
expr_stmt|;
comment|//     if (buffer->calculateBoundingRect) {
comment|//         QRealRect r = path.controlPointRect();
comment|//         buffer->updateBoundingRect(QRectF(r.x1, r.y1, r.x2 - r.x1, r.y2 - r.y1));
comment|//     }
block|}
end_function
begin_function
DECL|function|stroke
name|void
name|QPaintBufferEngine
operator|::
name|stroke
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: stroke vpath:"
operator|<<
name|path
operator|.
name|elementCount
argument_list|()
operator|<<
name|pen
expr_stmt|;
endif|#
directive|endif
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_StrokeVectorPath
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|buffer
operator|->
name|addData
argument_list|(
name|QVariant
argument_list|(
name|pen
argument_list|)
argument_list|)
expr_stmt|;
comment|//     if (buffer->calculateBoundingRect) {
comment|//         QRealRect r = path.controlPointRect();
comment|//         buffer->updateBoundingRect(QRectF(r.x1, r.y1, r.x2 - r.x1, r.y2 - r.y1));
comment|//     }
block|}
end_function
begin_function
DECL|function|fillRect
name|void
name|QPaintBufferEngine
operator|::
name|fillRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: fillRect brush:"
operator|<<
name|rect
operator|<<
name|brush
expr_stmt|;
endif|#
directive|endif
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_FillRectBrush
argument_list|,
operator|(
name|qreal
operator|*
operator|)
operator|&
name|rect
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|buffer
operator|->
name|addData
argument_list|(
name|brush
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|->
name|calculateBoundingRect
condition|)
name|buffer
operator|->
name|updateBoundingRect
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillRect
name|void
name|QPaintBufferEngine
operator|::
name|fillRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: fillRect color:"
operator|<<
name|rect
operator|<<
name|color
expr_stmt|;
endif|#
directive|endif
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_FillRectColor
argument_list|,
operator|(
name|qreal
operator|*
operator|)
operator|&
name|rect
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|buffer
operator|->
name|addData
argument_list|(
name|color
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|->
name|calculateBoundingRect
condition|)
name|buffer
operator|->
name|updateBoundingRect
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawRects
name|void
name|QPaintBufferEngine
operator|::
name|drawRects
parameter_list|(
specifier|const
name|QRect
modifier|*
name|rects
parameter_list|,
name|int
name|rectCount
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: drawRectsI:"
operator|<<
name|rectCount
expr_stmt|;
endif|#
directive|endif
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawRectI
argument_list|,
operator|(
name|int
operator|*
operator|)
name|rects
argument_list|,
literal|4
operator|*
name|rectCount
argument_list|,
name|rectCount
argument_list|)
decl_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|rectCount
expr_stmt|;
if|if
condition|(
name|buffer
operator|->
name|calculateBoundingRect
condition|)
block|{
if|if
condition|(
name|rectCount
operator|==
literal|1
condition|)
block|{
name|buffer
operator|->
name|updateBoundingRect
argument_list|(
name|rects
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|min_x
init|=
name|rects
index|[
literal|0
index|]
operator|.
name|left
argument_list|()
decl_stmt|;
name|int
name|min_y
init|=
name|rects
index|[
literal|0
index|]
operator|.
name|top
argument_list|()
decl_stmt|;
name|int
name|max_x
init|=
name|rects
index|[
literal|0
index|]
operator|.
name|left
argument_list|()
operator|+
name|rects
index|[
literal|0
index|]
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|max_y
init|=
name|rects
index|[
literal|0
index|]
operator|.
name|top
argument_list|()
operator|+
name|rects
index|[
literal|0
index|]
operator|.
name|height
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|rectCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|rects
index|[
name|i
index|]
operator|.
name|left
argument_list|()
operator|<
name|min_x
condition|)
name|min_x
operator|=
name|rects
index|[
name|i
index|]
operator|.
name|left
argument_list|()
expr_stmt|;
if|if
condition|(
name|rects
index|[
name|i
index|]
operator|.
name|top
argument_list|()
operator|<
name|min_y
condition|)
name|min_y
operator|=
name|rects
index|[
name|i
index|]
operator|.
name|top
argument_list|()
expr_stmt|;
if|if
condition|(
name|rects
index|[
name|i
index|]
operator|.
name|right
argument_list|()
operator|>
name|max_x
condition|)
name|max_x
operator|=
name|rects
index|[
name|i
index|]
operator|.
name|left
argument_list|()
operator|+
name|rects
index|[
name|i
index|]
operator|.
name|width
argument_list|()
expr_stmt|;
if|if
condition|(
name|rects
index|[
name|i
index|]
operator|.
name|bottom
argument_list|()
operator|>
name|max_y
condition|)
name|max_y
operator|=
name|rects
index|[
name|i
index|]
operator|.
name|top
argument_list|()
operator|+
name|rects
index|[
name|i
index|]
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
name|buffer
operator|->
name|updateBoundingRect
argument_list|(
name|QRectF
argument_list|(
name|min_x
argument_list|,
name|min_y
argument_list|,
name|max_x
operator|-
name|min_x
argument_list|,
name|max_y
operator|-
name|min_y
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|drawRects
name|void
name|QPaintBufferEngine
operator|::
name|drawRects
parameter_list|(
specifier|const
name|QRectF
modifier|*
name|rects
parameter_list|,
name|int
name|rectCount
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: drawRectsF:"
operator|<<
name|rectCount
expr_stmt|;
endif|#
directive|endif
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawRectF
argument_list|,
operator|(
name|qreal
operator|*
operator|)
name|rects
argument_list|,
literal|4
operator|*
name|rectCount
argument_list|,
name|rectCount
argument_list|)
decl_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|rectCount
expr_stmt|;
if|if
condition|(
name|buffer
operator|->
name|calculateBoundingRect
condition|)
block|{
if|if
condition|(
name|rectCount
operator|==
literal|1
condition|)
block|{
name|buffer
operator|->
name|updateBoundingRect
argument_list|(
name|rects
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qreal
name|min_x
init|=
name|rects
index|[
literal|0
index|]
operator|.
name|left
argument_list|()
decl_stmt|;
name|qreal
name|min_y
init|=
name|rects
index|[
literal|0
index|]
operator|.
name|top
argument_list|()
decl_stmt|;
name|qreal
name|max_x
init|=
name|rects
index|[
literal|0
index|]
operator|.
name|right
argument_list|()
decl_stmt|;
name|qreal
name|max_y
init|=
name|rects
index|[
literal|0
index|]
operator|.
name|bottom
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|rectCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|rects
index|[
name|i
index|]
operator|.
name|left
argument_list|()
operator|<
name|min_x
condition|)
name|min_x
operator|=
name|rects
index|[
name|i
index|]
operator|.
name|left
argument_list|()
expr_stmt|;
if|if
condition|(
name|rects
index|[
name|i
index|]
operator|.
name|top
argument_list|()
operator|<
name|min_y
condition|)
name|min_y
operator|=
name|rects
index|[
name|i
index|]
operator|.
name|top
argument_list|()
expr_stmt|;
if|if
condition|(
name|rects
index|[
name|i
index|]
operator|.
name|right
argument_list|()
operator|>
name|max_x
condition|)
name|max_x
operator|=
name|rects
index|[
name|i
index|]
operator|.
name|right
argument_list|()
expr_stmt|;
if|if
condition|(
name|rects
index|[
name|i
index|]
operator|.
name|bottom
argument_list|()
operator|>
name|max_y
condition|)
name|max_y
operator|=
name|rects
index|[
name|i
index|]
operator|.
name|bottom
argument_list|()
expr_stmt|;
block|}
name|buffer
operator|->
name|updateBoundingRect
argument_list|(
name|QRectF
argument_list|(
name|min_x
argument_list|,
name|min_y
argument_list|,
name|max_x
operator|-
name|min_x
argument_list|,
name|max_y
operator|-
name|min_y
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|drawLines
name|void
name|QPaintBufferEngine
operator|::
name|drawLines
parameter_list|(
specifier|const
name|QLine
modifier|*
name|lines
parameter_list|,
name|int
name|lineCount
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: drawLinesI:"
operator|<<
name|lineCount
expr_stmt|;
endif|#
directive|endif
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawLineI
argument_list|,
operator|(
name|int
operator|*
operator|)
name|lines
argument_list|,
literal|4
operator|*
name|lineCount
argument_list|,
name|lineCount
argument_list|)
decl_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|lineCount
expr_stmt|;
if|if
condition|(
name|buffer
operator|->
name|calculateBoundingRect
condition|)
block|{
name|int
name|min_x
init|=
name|lines
index|[
literal|0
index|]
operator|.
name|p1
argument_list|()
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|min_y
init|=
name|lines
index|[
literal|0
index|]
operator|.
name|p1
argument_list|()
operator|.
name|y
argument_list|()
decl_stmt|;
name|int
name|max_x
init|=
name|lines
index|[
literal|0
index|]
operator|.
name|p2
argument_list|()
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|max_y
init|=
name|lines
index|[
literal|0
index|]
operator|.
name|p2
argument_list|()
operator|.
name|y
argument_list|()
decl_stmt|;
if|if
condition|(
name|min_x
operator|>
name|max_x
condition|)
name|qSwap
argument_list|(
name|min_x
argument_list|,
name|max_x
argument_list|)
expr_stmt|;
if|if
condition|(
name|min_y
operator|>
name|max_y
condition|)
name|qSwap
argument_list|(
name|min_y
argument_list|,
name|max_y
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|lineCount
condition|;
operator|++
name|i
control|)
block|{
name|int
name|p1_x
init|=
name|lines
index|[
name|i
index|]
operator|.
name|p1
argument_list|()
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|p1_y
init|=
name|lines
index|[
name|i
index|]
operator|.
name|p1
argument_list|()
operator|.
name|y
argument_list|()
decl_stmt|;
name|int
name|p2_x
init|=
name|lines
index|[
name|i
index|]
operator|.
name|p2
argument_list|()
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|p2_y
init|=
name|lines
index|[
name|i
index|]
operator|.
name|p2
argument_list|()
operator|.
name|y
argument_list|()
decl_stmt|;
if|if
condition|(
name|p1_x
operator|>
name|p2_x
condition|)
block|{
name|min_x
operator|=
name|qMin
argument_list|(
name|p2_x
argument_list|,
name|min_x
argument_list|)
expr_stmt|;
name|max_x
operator|=
name|qMax
argument_list|(
name|p1_x
argument_list|,
name|max_x
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|min_x
operator|=
name|qMin
argument_list|(
name|p1_x
argument_list|,
name|min_x
argument_list|)
expr_stmt|;
name|max_x
operator|=
name|qMax
argument_list|(
name|p2_x
argument_list|,
name|max_x
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p1_y
operator|>
name|p2_y
condition|)
block|{
name|min_y
operator|=
name|qMin
argument_list|(
name|p2_y
argument_list|,
name|min_y
argument_list|)
expr_stmt|;
name|max_y
operator|=
name|qMax
argument_list|(
name|p1_y
argument_list|,
name|max_y
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|min_y
operator|=
name|qMin
argument_list|(
name|p1_y
argument_list|,
name|min_y
argument_list|)
expr_stmt|;
name|max_y
operator|=
name|qMax
argument_list|(
name|p2_y
argument_list|,
name|max_y
argument_list|)
expr_stmt|;
block|}
block|}
name|buffer
operator|->
name|updateBoundingRect
argument_list|(
name|QRectF
argument_list|(
name|min_x
argument_list|,
name|min_y
argument_list|,
name|max_x
operator|-
name|min_x
argument_list|,
name|max_y
operator|-
name|min_y
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawLines
name|void
name|QPaintBufferEngine
operator|::
name|drawLines
parameter_list|(
specifier|const
name|QLineF
modifier|*
name|lines
parameter_list|,
name|int
name|lineCount
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: drawLinesF:"
operator|<<
name|lineCount
expr_stmt|;
endif|#
directive|endif
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawLineF
argument_list|,
operator|(
name|qreal
operator|*
operator|)
name|lines
argument_list|,
literal|4
operator|*
name|lineCount
argument_list|,
name|lineCount
argument_list|)
decl_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|lineCount
expr_stmt|;
if|if
condition|(
name|buffer
operator|->
name|calculateBoundingRect
condition|)
block|{
name|qreal
name|min_x
init|=
name|lines
index|[
literal|0
index|]
operator|.
name|p1
argument_list|()
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|min_y
init|=
name|lines
index|[
literal|0
index|]
operator|.
name|p1
argument_list|()
operator|.
name|y
argument_list|()
decl_stmt|;
name|qreal
name|max_x
init|=
name|lines
index|[
literal|0
index|]
operator|.
name|p2
argument_list|()
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|max_y
init|=
name|lines
index|[
literal|0
index|]
operator|.
name|p2
argument_list|()
operator|.
name|y
argument_list|()
decl_stmt|;
if|if
condition|(
name|min_x
operator|>
name|max_x
condition|)
name|qSwap
argument_list|(
name|min_x
argument_list|,
name|max_x
argument_list|)
expr_stmt|;
if|if
condition|(
name|min_y
operator|>
name|max_y
condition|)
name|qSwap
argument_list|(
name|min_y
argument_list|,
name|max_y
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|lineCount
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|p1_x
init|=
name|lines
index|[
name|i
index|]
operator|.
name|p1
argument_list|()
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|p1_y
init|=
name|lines
index|[
name|i
index|]
operator|.
name|p1
argument_list|()
operator|.
name|y
argument_list|()
decl_stmt|;
name|qreal
name|p2_x
init|=
name|lines
index|[
name|i
index|]
operator|.
name|p2
argument_list|()
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|p2_y
init|=
name|lines
index|[
name|i
index|]
operator|.
name|p2
argument_list|()
operator|.
name|y
argument_list|()
decl_stmt|;
if|if
condition|(
name|p1_x
operator|>
name|p2_x
condition|)
block|{
name|min_x
operator|=
name|qMin
argument_list|(
name|p2_x
argument_list|,
name|min_x
argument_list|)
expr_stmt|;
name|max_x
operator|=
name|qMax
argument_list|(
name|p1_x
argument_list|,
name|max_x
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|min_x
operator|=
name|qMin
argument_list|(
name|p1_x
argument_list|,
name|min_x
argument_list|)
expr_stmt|;
name|max_x
operator|=
name|qMax
argument_list|(
name|p2_x
argument_list|,
name|max_x
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p1_y
operator|>
name|p2_y
condition|)
block|{
name|min_y
operator|=
name|qMin
argument_list|(
name|p2_y
argument_list|,
name|min_y
argument_list|)
expr_stmt|;
name|max_y
operator|=
name|qMax
argument_list|(
name|p1_y
argument_list|,
name|max_y
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|min_y
operator|=
name|qMin
argument_list|(
name|p1_y
argument_list|,
name|min_y
argument_list|)
expr_stmt|;
name|max_y
operator|=
name|qMax
argument_list|(
name|p2_y
argument_list|,
name|max_y
argument_list|)
expr_stmt|;
block|}
block|}
name|buffer
operator|->
name|updateBoundingRect
argument_list|(
name|QRectF
argument_list|(
name|min_x
argument_list|,
name|min_y
argument_list|,
name|max_x
operator|-
name|min_x
argument_list|,
name|max_y
operator|-
name|min_y
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawEllipse
name|void
name|QPaintBufferEngine
operator|::
name|drawEllipse
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: drawEllipseF:"
operator|<<
name|r
expr_stmt|;
endif|#
directive|endif
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawEllipseF
argument_list|,
operator|(
name|qreal
operator|*
operator|)
operator|&
name|r
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|->
name|calculateBoundingRect
condition|)
name|buffer
operator|->
name|updateBoundingRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawEllipse
name|void
name|QPaintBufferEngine
operator|::
name|drawEllipse
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: drawEllipseI:"
operator|<<
name|r
expr_stmt|;
endif|#
directive|endif
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawEllipseI
argument_list|,
operator|(
name|int
operator|*
operator|)
operator|&
name|r
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|->
name|calculateBoundingRect
condition|)
name|buffer
operator|->
name|updateBoundingRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPath
name|void
name|QPaintBufferEngine
operator|::
name|drawPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
comment|// #ifdef QPAINTBUFFER_DEBUG_DRAW
comment|//     qDebug()<< "QPaintBufferEngine: drawPath: element count:"<< path.elementCount();
comment|// #endif
comment|//     // ### Path -> QVariant
comment|//     // buffer->addCommand(QPaintBufferPrivate::Cmd_DrawPath, QVariant(path));
name|QPaintEngineEx
operator|::
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|//     if (buffer->calculateBoundingRect)
comment|//         buffer->updateBoundingRect(path.boundingRect());
block|}
end_function
begin_function
DECL|function|drawPoints
name|void
name|QPaintBufferEngine
operator|::
name|drawPoints
parameter_list|(
specifier|const
name|QPoint
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: drawPointsI: "
operator|<<
name|pointCount
expr_stmt|;
endif|#
directive|endif
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPointsI
argument_list|,
operator|(
name|int
operator|*
operator|)
name|points
argument_list|,
literal|2
operator|*
name|pointCount
argument_list|,
name|pointCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|->
name|calculateBoundingRect
condition|)
block|{
name|int
name|min_x
init|=
name|points
index|[
literal|0
index|]
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|min_y
init|=
name|points
index|[
literal|0
index|]
operator|.
name|y
argument_list|()
decl_stmt|;
name|int
name|max_x
init|=
name|points
index|[
literal|0
index|]
operator|.
name|x
argument_list|()
operator|+
literal|1
decl_stmt|;
name|int
name|max_y
init|=
name|points
index|[
literal|0
index|]
operator|.
name|y
argument_list|()
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pointCount
condition|;
operator|++
name|i
control|)
block|{
name|int
name|x
init|=
name|points
index|[
name|i
index|]
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|points
index|[
name|i
index|]
operator|.
name|y
argument_list|()
decl_stmt|;
name|min_x
operator|=
name|qMin
argument_list|(
name|min_x
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|min_y
operator|=
name|qMin
argument_list|(
name|min_y
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|max_x
operator|=
name|qMax
argument_list|(
name|max_x
argument_list|,
name|x
operator|+
literal|1
argument_list|)
expr_stmt|;
name|max_y
operator|=
name|qMax
argument_list|(
name|max_y
argument_list|,
name|y
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|->
name|updateBoundingRect
argument_list|(
name|QRectF
argument_list|(
name|min_x
argument_list|,
name|min_y
argument_list|,
name|max_x
operator|-
name|min_x
argument_list|,
name|max_y
operator|-
name|min_y
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawPoints
name|void
name|QPaintBufferEngine
operator|::
name|drawPoints
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: drawPointsF: "
operator|<<
name|pointCount
expr_stmt|;
endif|#
directive|endif
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPointsF
argument_list|,
operator|(
name|qreal
operator|*
operator|)
name|points
argument_list|,
literal|2
operator|*
name|pointCount
argument_list|,
name|pointCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|->
name|calculateBoundingRect
condition|)
block|{
name|qreal
name|min_x
init|=
name|points
index|[
literal|0
index|]
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|min_y
init|=
name|points
index|[
literal|0
index|]
operator|.
name|y
argument_list|()
decl_stmt|;
name|qreal
name|max_x
init|=
name|points
index|[
literal|0
index|]
operator|.
name|x
argument_list|()
operator|+
literal|1
decl_stmt|;
name|qreal
name|max_y
init|=
name|points
index|[
literal|0
index|]
operator|.
name|y
argument_list|()
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pointCount
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|x
init|=
name|points
index|[
name|i
index|]
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|y
init|=
name|points
index|[
name|i
index|]
operator|.
name|y
argument_list|()
decl_stmt|;
name|min_x
operator|=
name|qMin
argument_list|(
name|min_x
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|min_y
operator|=
name|qMin
argument_list|(
name|min_y
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|max_x
operator|=
name|qMax
argument_list|(
name|max_x
argument_list|,
name|x
operator|+
literal|1
argument_list|)
expr_stmt|;
name|max_y
operator|=
name|qMax
argument_list|(
name|max_y
argument_list|,
name|y
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|->
name|updateBoundingRect
argument_list|(
name|QRectF
argument_list|(
name|min_x
argument_list|,
name|min_y
argument_list|,
name|max_x
operator|-
name|min_x
argument_list|,
name|max_y
operator|-
name|min_y
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawPolygon
name|void
name|QPaintBufferEngine
operator|::
name|drawPolygon
parameter_list|(
specifier|const
name|QPoint
modifier|*
name|pts
parameter_list|,
name|int
name|count
parameter_list|,
name|PolygonDrawMode
name|mode
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: drawPolygonI: size:"
operator|<<
name|count
operator|<<
literal|", mode:"
operator|<<
name|mode
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|mode
operator|==
name|QPaintEngine
operator|::
name|OddEvenMode
operator|||
name|mode
operator|==
name|QPaintEngine
operator|::
name|WindingMode
condition|)
block|{
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPolygonI
argument_list|,
operator|(
name|int
operator|*
operator|)
name|pts
argument_list|,
literal|2
operator|*
name|count
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|mode
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|QPaintEngine
operator|::
name|PolylineMode
condition|)
block|{
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPolylineI
argument_list|,
operator|(
name|int
operator|*
operator|)
name|pts
argument_list|,
literal|2
operator|*
name|count
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawConvexPolygonI
argument_list|,
operator|(
name|int
operator|*
operator|)
name|pts
argument_list|,
literal|2
operator|*
name|count
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|buffer
operator|->
name|calculateBoundingRect
condition|)
block|{
name|int
name|min_x
init|=
name|pts
index|[
literal|0
index|]
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|min_y
init|=
name|pts
index|[
literal|0
index|]
operator|.
name|y
argument_list|()
decl_stmt|;
name|int
name|max_x
init|=
name|pts
index|[
literal|0
index|]
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|max_y
init|=
name|pts
index|[
literal|0
index|]
operator|.
name|y
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|int
name|x
init|=
name|pts
index|[
name|i
index|]
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|pts
index|[
name|i
index|]
operator|.
name|y
argument_list|()
decl_stmt|;
name|min_x
operator|=
name|qMin
argument_list|(
name|min_x
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|min_y
operator|=
name|qMin
argument_list|(
name|min_y
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|max_x
operator|=
name|qMax
argument_list|(
name|max_x
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|max_y
operator|=
name|qMax
argument_list|(
name|max_y
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|->
name|updateBoundingRect
argument_list|(
name|QRectF
argument_list|(
name|min_x
argument_list|,
name|min_y
argument_list|,
name|max_x
operator|-
name|min_x
argument_list|,
name|max_y
operator|-
name|min_y
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawPolygon
name|void
name|QPaintBufferEngine
operator|::
name|drawPolygon
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|pts
parameter_list|,
name|int
name|count
parameter_list|,
name|PolygonDrawMode
name|mode
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: drawPolygonF: size:"
operator|<<
name|count
operator|<<
literal|", mode:"
operator|<<
name|mode
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|mode
operator|==
name|QPaintEngine
operator|::
name|OddEvenMode
operator|||
name|mode
operator|==
name|QPaintEngine
operator|::
name|WindingMode
condition|)
block|{
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPolygonF
argument_list|,
operator|(
name|qreal
operator|*
operator|)
name|pts
argument_list|,
literal|2
operator|*
name|count
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|mode
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|QPaintEngine
operator|::
name|PolylineMode
condition|)
block|{
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPolylineF
argument_list|,
operator|(
name|qreal
operator|*
operator|)
name|pts
argument_list|,
literal|2
operator|*
name|count
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawConvexPolygonF
argument_list|,
operator|(
name|qreal
operator|*
operator|)
name|pts
argument_list|,
literal|2
operator|*
name|count
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|buffer
operator|->
name|calculateBoundingRect
condition|)
block|{
name|qreal
name|min_x
init|=
name|pts
index|[
literal|0
index|]
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|min_y
init|=
name|pts
index|[
literal|0
index|]
operator|.
name|y
argument_list|()
decl_stmt|;
name|qreal
name|max_x
init|=
name|pts
index|[
literal|0
index|]
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|max_y
init|=
name|pts
index|[
literal|0
index|]
operator|.
name|y
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|x
init|=
name|pts
index|[
name|i
index|]
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|y
init|=
name|pts
index|[
name|i
index|]
operator|.
name|y
argument_list|()
decl_stmt|;
name|min_x
operator|=
name|qMin
argument_list|(
name|min_x
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|min_y
operator|=
name|qMin
argument_list|(
name|min_y
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|max_x
operator|=
name|qMax
argument_list|(
name|max_x
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|max_y
operator|=
name|qMax
argument_list|(
name|max_y
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|->
name|updateBoundingRect
argument_list|(
name|QRectF
argument_list|(
name|min_x
argument_list|,
name|min_y
argument_list|,
name|max_x
operator|-
name|min_x
argument_list|,
name|max_y
operator|-
name|min_y
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawPixmap
name|void
name|QPaintBufferEngine
operator|::
name|drawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: drawPixmap: src/dest rects "
operator|<<
name|r
operator|<<
name|sr
expr_stmt|;
endif|#
directive|endif
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPixmapRect
argument_list|,
name|QVariant
argument_list|(
name|pm
argument_list|)
argument_list|)
decl_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|buffer
operator|->
name|addData
argument_list|(
operator|(
name|qreal
operator|*
operator|)
operator|&
name|r
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|buffer
operator|->
name|addData
argument_list|(
operator|(
name|qreal
operator|*
operator|)
operator|&
name|sr
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|->
name|calculateBoundingRect
condition|)
name|buffer
operator|->
name|updateBoundingRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPixmap
name|void
name|QPaintBufferEngine
operator|::
name|drawPixmap
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: drawPixmap: pos:"
operator|<<
name|pos
expr_stmt|;
endif|#
directive|endif
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPixmapPos
argument_list|,
name|QVariant
argument_list|(
name|pm
argument_list|)
argument_list|)
decl_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|buffer
operator|->
name|addData
argument_list|(
operator|(
name|qreal
operator|*
operator|)
operator|&
name|pos
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|->
name|calculateBoundingRect
condition|)
name|buffer
operator|->
name|updateBoundingRect
argument_list|(
name|QRectF
argument_list|(
name|pos
argument_list|,
name|pm
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qpaintbuffer_storable_image
specifier|static
specifier|inline
name|QImage
name|qpaintbuffer_storable_image
parameter_list|(
specifier|const
name|QImage
modifier|&
name|src
parameter_list|)
block|{
name|QImageData
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QImage
operator|&
argument_list|>
argument_list|(
name|src
argument_list|)
operator|.
name|data_ptr
argument_list|()
decl_stmt|;
return|return
name|d
operator|->
name|own_data
condition|?
name|src
else|:
name|src
operator|.
name|copy
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|drawImage
name|void
name|QPaintBufferEngine
operator|::
name|drawImage
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
comment|/*flags */
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: drawImage: src/dest rects "
operator|<<
name|r
operator|<<
name|sr
expr_stmt|;
endif|#
directive|endif
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawImageRect
argument_list|,
name|QVariant
argument_list|(
name|qpaintbuffer_storable_image
argument_list|(
name|image
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|buffer
operator|->
name|addData
argument_list|(
operator|(
name|qreal
operator|*
operator|)
operator|&
name|r
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|buffer
operator|->
name|addData
argument_list|(
operator|(
name|qreal
operator|*
operator|)
operator|&
name|sr
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// ### flags...
if|if
condition|(
name|buffer
operator|->
name|calculateBoundingRect
condition|)
name|buffer
operator|->
name|updateBoundingRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawImage
name|void
name|QPaintBufferEngine
operator|::
name|drawImage
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: drawImage: pos:"
operator|<<
name|pos
expr_stmt|;
endif|#
directive|endif
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawImagePos
argument_list|,
name|QVariant
argument_list|(
name|qpaintbuffer_storable_image
argument_list|(
name|image
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|buffer
operator|->
name|addData
argument_list|(
operator|(
name|qreal
operator|*
operator|)
operator|&
name|pos
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|->
name|calculateBoundingRect
condition|)
name|buffer
operator|->
name|updateBoundingRect
argument_list|(
name|QRectF
argument_list|(
name|pos
argument_list|,
name|image
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawTiledPixmap
name|void
name|QPaintBufferEngine
operator|::
name|drawTiledPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|s
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: drawTiledPixmap: src rect/offset:"
operator|<<
name|r
operator|<<
name|s
expr_stmt|;
endif|#
directive|endif
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawTiledPixmap
argument_list|,
name|QVariant
argument_list|(
name|pm
argument_list|)
argument_list|)
decl_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|buffer
operator|->
name|addData
argument_list|(
operator|(
name|qreal
operator|*
operator|)
operator|&
name|r
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|buffer
operator|->
name|addData
argument_list|(
operator|(
name|qreal
operator|*
operator|)
operator|&
name|s
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|->
name|calculateBoundingRect
condition|)
name|buffer
operator|->
name|updateBoundingRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawStaticTextItem
name|void
name|QPaintBufferEngine
operator|::
name|drawStaticTextItem
parameter_list|(
name|QStaticTextItem
modifier|*
name|staticTextItem
parameter_list|)
block|{
if|if
condition|(
name|staticTextItem
operator|->
name|usesRawFont
condition|)
block|{
name|QPaintEngineEx
operator|::
name|drawStaticTextItem
argument_list|(
name|staticTextItem
argument_list|)
expr_stmt|;
comment|// Draw as path
return|return;
block|}
name|QVariantList
name|variants
decl_stmt|;
name|variants
operator|<<
name|QVariant
argument_list|(
name|staticTextItem
operator|->
name|font
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|staticTextItem
operator|->
name|numGlyphs
condition|;
operator|++
name|i
control|)
block|{
name|variants
operator|.
name|append
argument_list|(
name|staticTextItem
operator|->
name|glyphs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|variants
operator|.
name|append
argument_list|(
name|staticTextItem
operator|->
name|glyphPositions
index|[
name|i
index|]
operator|.
name|toPointF
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawStaticText
argument_list|,
name|QVariant
argument_list|(
name|variants
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawTextItem
name|void
name|QPaintBufferEngine
operator|::
name|drawTextItem
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QTextItem
modifier|&
name|ti
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: drawTextItem: pos:"
operator|<<
name|pos
operator|<<
name|ti
operator|.
name|text
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|m_stream_raw_text_items
condition|)
block|{
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawTextItem
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
operator|new
name|QTextItemIntCopy
argument_list|(
name|ti
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QFont
name|font
argument_list|(
name|ti
operator|.
name|font
argument_list|()
argument_list|)
decl_stmt|;
name|font
operator|.
name|setUnderline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|font
operator|.
name|setStrikeOut
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|font
operator|.
name|setOverline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|const
name|QTextItemInt
modifier|&
name|si
init|=
cast|static_cast
argument_list|<
specifier|const
name|QTextItemInt
operator|&
argument_list|>
argument_list|(
name|ti
argument_list|)
decl_stmt|;
name|qreal
name|justificationWidth
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|si
operator|.
name|justified
condition|)
name|justificationWidth
operator|=
name|si
operator|.
name|width
operator|.
name|toReal
argument_list|()
expr_stmt|;
name|int
name|renderFlags
init|=
name|ti
operator|.
name|renderFlags
argument_list|()
decl_stmt|;
name|qreal
name|scaleFactor
init|=
name|font
operator|.
name|d
operator|->
name|dpi
operator|/
name|qreal
argument_list|(
name|qt_defaultDpiY
argument_list|()
argument_list|)
decl_stmt|;
name|buffer
operator|->
name|addData
argument_list|(
name|QVariant
argument_list|(
name|font
argument_list|)
argument_list|)
expr_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|buffer
operator|->
name|addData
argument_list|(
operator|(
name|qreal
operator|*
operator|)
operator|&
name|pos
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|buffer
operator|->
name|addData
argument_list|(
operator|(
name|qreal
operator|*
operator|)
operator|&
name|justificationWidth
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|buffer
operator|->
name|addData
argument_list|(
operator|(
name|qreal
operator|*
operator|)
operator|&
name|scaleFactor
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cmd
operator|->
name|offset2
operator|=
name|buffer
operator|->
name|addData
argument_list|(
operator|(
name|int
operator|*
operator|)
operator|&
name|renderFlags
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|variants
decl_stmt|;
name|variants
operator|<<
name|QVariant
argument_list|(
name|ti
operator|.
name|font
argument_list|()
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|ti
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|QPaintBufferCommand
modifier|*
name|cmd
init|=
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawText
argument_list|,
name|QVariant
argument_list|(
name|variants
argument_list|)
argument_list|)
decl_stmt|;
name|cmd
operator|->
name|extra
operator|=
name|buffer
operator|->
name|addData
argument_list|(
operator|(
name|qreal
operator|*
operator|)
operator|&
name|pos
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|buffer
operator|->
name|calculateBoundingRect
condition|)
name|buffer
operator|->
name|updateBoundingRect
argument_list|(
name|QRectF
argument_list|(
name|pos
argument_list|,
name|QSize
argument_list|(
name|ti
operator|.
name|width
argument_list|()
argument_list|,
name|ti
operator|.
name|ascent
argument_list|()
operator|+
name|ti
operator|.
name|descent
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setState
name|void
name|QPaintBufferEngine
operator|::
name|setState
parameter_list|(
name|QPainterState
modifier|*
name|s
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPaintBufferEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_begin_detected
condition|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: setState: begin, ignoring."
expr_stmt|;
endif|#
directive|endif
name|m_begin_detected
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_save_detected
condition|)
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: setState: save."
expr_stmt|;
endif|#
directive|endif
name|m_save_detected
operator|=
literal|false
expr_stmt|;
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_Save
argument_list|)
expr_stmt|;
block|}
else|else
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintBufferEngine: setState: restore."
expr_stmt|;
endif|#
directive|endif
name|buffer
operator|->
name|addCommand
argument_list|(
name|QPaintBufferPrivate
operator|::
name|Cmd_Restore
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|last
operator|=
name|s
operator|->
name|matrix
expr_stmt|;
name|QPaintEngineEx
operator|::
name|setState
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***********************************************************************  *  * class QPaintBufferPlayback_Painter  *  */
end_comment
begin_comment
comment|// QFakeDevice is used to create fonts with a custom DPI
end_comment
begin_comment
comment|//
end_comment
begin_class
DECL|class|QFakeDevice
class|class
name|QFakeDevice
super|:
specifier|public
name|QPaintDevice
block|{
public|public:
DECL|function|QFakeDevice
name|QFakeDevice
parameter_list|()
block|{
name|dpi_x
operator|=
name|qt_defaultDpiX
argument_list|()
expr_stmt|;
name|dpi_y
operator|=
name|qt_defaultDpiY
argument_list|()
expr_stmt|;
block|}
DECL|function|setDpiX
name|void
name|setDpiX
parameter_list|(
name|int
name|dpi
parameter_list|)
block|{
name|dpi_x
operator|=
name|dpi
expr_stmt|;
block|}
DECL|function|setDpiY
name|void
name|setDpiY
parameter_list|(
name|int
name|dpi
parameter_list|)
block|{
name|dpi_y
operator|=
name|dpi
expr_stmt|;
block|}
DECL|function|paintEngine
name|QPaintEngine
modifier|*
name|paintEngine
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
DECL|function|metric
name|int
name|metric
parameter_list|(
name|PaintDeviceMetric
name|m
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|m
condition|)
block|{
case|case
name|PdmPhysicalDpiX
case|:
case|case
name|PdmDpiX
case|:
return|return
name|dpi_x
return|;
case|case
name|PdmPhysicalDpiY
case|:
case|case
name|PdmDpiY
case|:
return|return
name|dpi_y
return|;
default|default:
return|return
name|QPaintDevice
operator|::
name|metric
argument_list|(
name|m
argument_list|)
return|;
block|}
block|}
private|private:
DECL|member|dpi_x
name|int
name|dpi_x
decl_stmt|;
DECL|member|dpi_y
name|int
name|dpi_y
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|setupTransform
name|void
name|QPainterReplayer
operator|::
name|setupTransform
parameter_list|(
name|QPainter
modifier|*
name|_painter
parameter_list|)
block|{
name|painter
operator|=
name|_painter
expr_stmt|;
name|m_world_matrix
operator|=
name|painter
operator|->
name|transform
argument_list|()
expr_stmt|;
name|m_world_matrix
operator|.
name|scale
argument_list|(
name|qreal
argument_list|(
name|painter
operator|->
name|device
argument_list|()
operator|->
name|logicalDpiX
argument_list|()
argument_list|)
operator|/
name|qreal
argument_list|(
name|qt_defaultDpiX
argument_list|()
argument_list|)
argument_list|,
name|qreal
argument_list|(
name|painter
operator|->
name|device
argument_list|()
operator|->
name|logicalDpiY
argument_list|()
argument_list|)
operator|/
name|qreal
argument_list|(
name|qt_defaultDpiY
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setTransform
argument_list|(
name|m_world_matrix
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|processCommands
name|void
name|QPainterReplayer
operator|::
name|processCommands
parameter_list|(
specifier|const
name|QPaintBuffer
modifier|&
name|buffer
parameter_list|,
name|QPainter
modifier|*
name|p
parameter_list|,
name|int
name|begin
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|d
operator|=
name|buffer
operator|.
name|d_ptr
expr_stmt|;
name|painter
operator|=
name|p
expr_stmt|;
for|for
control|(
name|int
name|cmdIndex
init|=
name|begin
init|;
name|cmdIndex
operator|<
name|end
condition|;
operator|++
name|cmdIndex
control|)
block|{
specifier|const
name|QPaintBufferCommand
modifier|&
name|cmd
init|=
name|d
operator|->
name|commands
operator|.
name|at
argument_list|(
name|cmdIndex
argument_list|)
decl_stmt|;
name|process
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|beginNewFrame
name|void
name|QPaintBuffer
operator|::
name|beginNewFrame
parameter_list|()
block|{
if|if
condition|(
operator|!
name|d_ptr
operator|->
name|commands
operator|.
name|isEmpty
argument_list|()
condition|)
name|d_ptr
operator|->
name|frames
operator|<<
name|d_ptr
operator|->
name|commands
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|numFrames
name|int
name|QPaintBuffer
operator|::
name|numFrames
parameter_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|frames
operator|.
name|size
argument_list|()
operator|+
literal|1
return|;
block|}
end_function
begin_function
DECL|function|process
name|void
name|QPainterReplayer
operator|::
name|process
parameter_list|(
specifier|const
name|QPaintBufferCommand
modifier|&
name|cmd
parameter_list|)
block|{
switch|switch
condition|(
name|cmd
operator|.
name|id
condition|)
block|{
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_Save
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_Save"
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_Restore
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_Restore"
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SetPen
case|:
block|{
name|QPen
name|pen
init|=
name|qvariant_cast
argument_list|<
name|QPen
argument_list|>
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_SetPen: "
operator|<<
name|pen
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|setPen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SetBrush
case|:
block|{
name|QBrush
name|brush
init|=
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_SetBrush: "
operator|<<
name|brush
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|setBrush
argument_list|(
name|brush
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SetBrushOrigin
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_SetBrushOrigin: "
operator|<<
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|toPointF
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|setBrushOrigin
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|toPointF
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SetTransform
case|:
block|{
name|QTransform
name|xform
init|=
name|qvariant_cast
argument_list|<
name|QTransform
argument_list|>
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_SetTransform, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
name|xform
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|setTransform
argument_list|(
name|xform
operator|*
name|m_world_matrix
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_Translate
case|:
block|{
name|QPointF
name|delta
argument_list|(
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|,
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_Translate, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
name|delta
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|translate
argument_list|(
name|delta
operator|.
name|x
argument_list|()
argument_list|,
name|delta
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SetCompositionMode
case|:
block|{
name|QPainter
operator|::
name|CompositionMode
name|mode
init|=
operator|(
name|QPainter
operator|::
name|CompositionMode
operator|)
name|cmd
operator|.
name|extra
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_SetCompositionMode, mode: "
operator|<<
name|mode
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|setCompositionMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SetRenderHints
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_SetRenderHints, hints: "
operator|<<
name|cmd
operator|.
name|extra
expr_stmt|;
endif|#
directive|endif
name|QPainter
operator|::
name|RenderHints
name|ph
init|=
name|painter
operator|->
name|renderHints
argument_list|()
decl_stmt|;
name|QPainter
operator|::
name|RenderHints
name|nh
init|=
operator|(
name|QPainter
operator|::
name|RenderHints
operator|)
name|cmd
operator|.
name|extra
decl_stmt|;
name|QPainter
operator|::
name|RenderHints
name|xored
init|=
name|ph
operator|^
name|nh
decl_stmt|;
if|if
condition|(
name|xored
operator|&
name|QPainter
operator|::
name|Antialiasing
condition|)
name|painter
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|,
name|nh
operator|&
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
if|if
condition|(
name|xored
operator|&
name|QPainter
operator|::
name|HighQualityAntialiasing
condition|)
name|painter
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|HighQualityAntialiasing
argument_list|,
name|nh
operator|&
name|QPainter
operator|::
name|HighQualityAntialiasing
argument_list|)
expr_stmt|;
if|if
condition|(
name|xored
operator|&
name|QPainter
operator|::
name|TextAntialiasing
condition|)
name|painter
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|TextAntialiasing
argument_list|,
name|nh
operator|&
name|QPainter
operator|::
name|TextAntialiasing
argument_list|)
expr_stmt|;
if|if
condition|(
name|xored
operator|&
name|QPainter
operator|::
name|SmoothPixmapTransform
condition|)
name|painter
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|SmoothPixmapTransform
argument_list|,
name|nh
operator|&
name|QPainter
operator|::
name|SmoothPixmapTransform
argument_list|)
expr_stmt|;
if|if
condition|(
name|xored
operator|&
name|QPainter
operator|::
name|NonCosmeticDefaultPen
condition|)
name|painter
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|NonCosmeticDefaultPen
argument_list|,
name|nh
operator|&
name|QPainter
operator|::
name|NonCosmeticDefaultPen
argument_list|)
expr_stmt|;
if|if
condition|(
name|xored
operator|&
name|QPainter
operator|::
name|Qt4CompatiblePainting
condition|)
name|painter
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Qt4CompatiblePainting
argument_list|,
name|nh
operator|&
name|QPainter
operator|::
name|Qt4CompatiblePainting
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SetOpacity
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_SetOpacity: "
operator|<<
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|toDouble
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|setOpacity
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SetBackgroundMode
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_SetBackgroundMode: "
operator|<<
name|cmd
operator|.
name|extra
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|setBackgroundMode
argument_list|(
operator|(
name|Qt
operator|::
name|BGMode
operator|)
name|cmd
operator|.
name|extra
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawVectorPath
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_DrawVectorPath: size: "
operator|<<
name|cmd
operator|.
name|size
comment|//<< ", hints:"<< d->ints[cmd.offset2+cmd.size]
operator|<<
literal|"pts/elms:"
operator|<<
name|cmd
operator|.
name|offset
operator|<<
name|cmd
operator|.
name|offset2
expr_stmt|;
endif|#
directive|endif
name|QVectorPathCmd
name|path
argument_list|(
name|d
argument_list|,
name|cmd
argument_list|)
decl_stmt|;
name|painter
operator|->
name|drawPath
argument_list|(
name|path
argument_list|()
operator|.
name|convertToPainterPath
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_StrokeVectorPath
case|:
block|{
name|QPen
name|pen
init|=
name|qvariant_cast
argument_list|<
name|QPen
argument_list|>
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_StrokeVectorPath: size: "
operator|<<
name|cmd
operator|.
name|size
comment|//<< ", hints:"<< d->ints[cmd.offset2+cmd.size]
operator|<<
literal|"pts/elms:"
operator|<<
name|cmd
operator|.
name|offset
operator|<<
name|cmd
operator|.
name|offset2
expr_stmt|;
endif|#
directive|endif
name|QVectorPathCmd
name|path
argument_list|(
name|d
argument_list|,
name|cmd
argument_list|)
decl_stmt|;
name|painter
operator|->
name|strokePath
argument_list|(
name|path
argument_list|()
operator|.
name|convertToPainterPath
argument_list|()
argument_list|,
name|pen
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_FillVectorPath
case|:
block|{
name|QBrush
name|brush
init|=
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_FillVectorPath: size: "
operator|<<
name|cmd
operator|.
name|size
comment|//<< ", hints:"<< d->ints[cmd.offset2+cmd.size]
operator|<<
literal|"pts/elms:"
operator|<<
name|cmd
operator|.
name|offset
operator|<<
name|cmd
operator|.
name|offset2
operator|<<
name|brush
expr_stmt|;
endif|#
directive|endif
name|QVectorPathCmd
name|path
argument_list|(
name|d
argument_list|,
name|cmd
argument_list|)
decl_stmt|;
name|painter
operator|->
name|fillPath
argument_list|(
name|path
argument_list|()
operator|.
name|convertToPainterPath
argument_list|()
argument_list|,
name|brush
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPolygonF
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_DrawPolygonF, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
operator|<<
literal|" mode: "
operator|<<
name|cmd
operator|.
name|extra
operator|<<
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|<<
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
operator|+
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Qt
operator|::
name|FillRule
name|fill
init|=
operator|(
name|QPaintEngine
operator|::
name|PolygonDrawMode
operator|)
name|cmd
operator|.
name|extra
operator|==
name|QPaintEngine
operator|::
name|OddEvenMode
condition|?
name|Qt
operator|::
name|OddEvenFill
else|:
name|Qt
operator|::
name|WindingFill
decl_stmt|;
name|painter
operator|->
name|drawPolygon
argument_list|(
operator|(
name|QPointF
operator|*
operator|)
operator|(
name|d
operator|->
name|floats
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|,
name|cmd
operator|.
name|size
argument_list|,
name|fill
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPolygonI
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_DrawPolygonI, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
operator|<<
literal|" mode: "
operator|<<
name|cmd
operator|.
name|extra
operator|<<
name|d
operator|->
name|ints
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|<<
name|d
operator|->
name|ints
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
operator|+
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Qt
operator|::
name|FillRule
name|fill
init|=
operator|(
name|QPaintEngine
operator|::
name|PolygonDrawMode
operator|)
name|cmd
operator|.
name|extra
operator|==
name|QPaintEngine
operator|::
name|OddEvenMode
condition|?
name|Qt
operator|::
name|OddEvenFill
else|:
name|Qt
operator|::
name|WindingFill
decl_stmt|;
name|painter
operator|->
name|drawPolygon
argument_list|(
operator|(
name|QPoint
operator|*
operator|)
operator|(
name|d
operator|->
name|ints
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|,
name|cmd
operator|.
name|size
argument_list|,
name|fill
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPolylineF
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_DrawPolylineF, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|drawPolyline
argument_list|(
operator|(
name|QPointF
operator|*
operator|)
operator|(
name|d
operator|->
name|floats
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|,
name|cmd
operator|.
name|size
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPolylineI
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_DrawPolylineI, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|drawPolyline
argument_list|(
operator|(
name|QPoint
operator|*
operator|)
operator|(
name|d
operator|->
name|ints
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|,
name|cmd
operator|.
name|size
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawConvexPolygonF
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_DrawConvexPolygonF, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|drawConvexPolygon
argument_list|(
operator|(
name|QPointF
operator|*
operator|)
operator|(
name|d
operator|->
name|floats
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|,
name|cmd
operator|.
name|size
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawConvexPolygonI
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_DrawConvexPolygonI, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|drawConvexPolygon
argument_list|(
operator|(
name|QPoint
operator|*
operator|)
operator|(
name|d
operator|->
name|ints
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|,
name|cmd
operator|.
name|size
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawEllipseF
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_DrawEllipseF, offset: "
operator|<<
name|cmd
operator|.
name|offset
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|drawEllipse
argument_list|(
operator|*
operator|(
name|QRectF
operator|*
operator|)
operator|(
name|d
operator|->
name|floats
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawEllipseI
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_DrawEllipseI, offset: "
operator|<<
name|cmd
operator|.
name|offset
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|drawEllipse
argument_list|(
operator|*
operator|(
name|QRect
operator|*
operator|)
operator|(
name|d
operator|->
name|ints
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawLineF
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_DrawLineF, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|drawLines
argument_list|(
operator|(
name|QLineF
operator|*
operator|)
operator|(
name|d
operator|->
name|floats
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|,
name|cmd
operator|.
name|size
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawLineI
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_DrawLineI, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|drawLines
argument_list|(
operator|(
name|QLine
operator|*
operator|)
operator|(
name|d
operator|->
name|ints
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|,
name|cmd
operator|.
name|size
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPointsF
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_DrawPointsF, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|drawPoints
argument_list|(
operator|(
name|QPointF
operator|*
operator|)
operator|(
name|d
operator|->
name|floats
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|,
name|cmd
operator|.
name|size
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPointsI
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_DrawPointsI, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|drawPoints
argument_list|(
operator|(
name|QPoint
operator|*
operator|)
operator|(
name|d
operator|->
name|ints
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|,
name|cmd
operator|.
name|size
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPixmapRect
case|:
block|{
name|QPixmap
name|pm
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|value
argument_list|<
name|QPixmap
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|QRectF
name|r
argument_list|(
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|,
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|1
argument_list|)
argument_list|,
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|2
argument_list|)
argument_list|,
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|QRectF
name|sr
argument_list|(
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|4
argument_list|)
argument_list|,
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|5
argument_list|)
argument_list|,
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|6
argument_list|)
argument_list|,
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|7
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_DrawPixmapRect:"
operator|<<
name|r
operator|<<
name|sr
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|drawPixmap
argument_list|(
name|r
argument_list|,
name|pm
argument_list|,
name|sr
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPixmapPos
case|:
block|{
name|QPixmap
name|pm
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|value
argument_list|<
name|QPixmap
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|QPointF
name|pos
argument_list|(
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|,
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_DrawPixmapPos:"
operator|<<
name|pos
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|drawPixmap
argument_list|(
name|pos
argument_list|,
name|pm
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawTiledPixmap
case|:
block|{
name|QPixmap
name|pm
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|value
argument_list|<
name|QPixmap
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|QRectF
name|r
argument_list|(
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|,
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|1
argument_list|)
argument_list|,
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|2
argument_list|)
argument_list|,
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|QPointF
name|offset
argument_list|(
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|4
argument_list|)
argument_list|,
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|5
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_DrawTiledPixmap:"
operator|<<
name|r
operator|<<
name|offset
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|drawTiledPixmap
argument_list|(
name|r
argument_list|,
name|pm
argument_list|,
name|offset
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawImageRect
case|:
block|{
name|QImage
name|image
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|value
argument_list|<
name|QImage
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|QRectF
name|r
argument_list|(
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|,
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|1
argument_list|)
argument_list|,
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|2
argument_list|)
argument_list|,
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|QRectF
name|sr
argument_list|(
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|4
argument_list|)
argument_list|,
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|5
argument_list|)
argument_list|,
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|6
argument_list|)
argument_list|,
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|7
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_DrawImageRect:"
operator|<<
name|r
operator|<<
name|sr
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|drawImage
argument_list|(
name|r
argument_list|,
name|image
argument_list|,
name|sr
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawImagePos
case|:
block|{
name|QImage
name|image
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|value
argument_list|<
name|QImage
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|QPointF
name|pos
argument_list|(
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|,
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_DrawImagePos:"
operator|<<
name|pos
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|drawImage
argument_list|(
name|pos
argument_list|,
name|image
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawRectF
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_DrawRectF, offset: "
operator|<<
name|cmd
operator|.
name|offset
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|drawRects
argument_list|(
operator|(
name|QRectF
operator|*
operator|)
operator|(
name|d
operator|->
name|floats
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|,
name|cmd
operator|.
name|size
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawRectI
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_DrawRectI, offset: "
operator|<<
name|cmd
operator|.
name|offset
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|drawRects
argument_list|(
operator|(
name|QRect
operator|*
operator|)
operator|(
name|d
operator|->
name|ints
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|,
name|cmd
operator|.
name|size
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_FillRectBrush
case|:
block|{
name|QBrush
name|brush
init|=
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|)
decl_stmt|;
name|QRectF
modifier|*
name|rect
init|=
operator|(
name|QRectF
operator|*
operator|)
operator|(
name|d
operator|->
name|floats
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_FillRectBrush, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" rect: "
operator|<<
operator|*
name|rect
operator|<<
literal|" brush: "
operator|<<
name|brush
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|fillRect
argument_list|(
operator|*
name|rect
argument_list|,
name|brush
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_FillRectColor
case|:
block|{
name|QColor
name|color
init|=
name|qvariant_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|)
decl_stmt|;
name|QRectF
modifier|*
name|rect
init|=
operator|(
name|QRectF
operator|*
operator|)
operator|(
name|d
operator|->
name|floats
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_FillRectBrush, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" rect: "
operator|<<
operator|*
name|rect
operator|<<
literal|" color: "
operator|<<
name|color
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|fillRect
argument_list|(
operator|*
name|rect
argument_list|,
name|color
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SetClipEnabled
case|:
block|{
name|bool
name|clipEnabled
init|=
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|toBool
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_SetClipEnabled:"
operator|<<
name|clipEnabled
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|setClipping
argument_list|(
name|clipEnabled
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_ClipVectorPath
case|:
block|{
name|QVectorPathCmd
name|path
argument_list|(
name|d
argument_list|,
name|cmd
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_ClipVectorPath:"
operator|<<
name|path
argument_list|()
operator|.
name|elementCount
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|setClipPath
argument_list|(
name|path
argument_list|()
operator|.
name|convertToPainterPath
argument_list|()
argument_list|,
name|Qt
operator|::
name|ClipOperation
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_ClipRect
case|:
block|{
name|QRect
name|rect
argument_list|(
name|QPoint
argument_list|(
name|d
operator|->
name|ints
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
argument_list|,
name|d
operator|->
name|ints
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|,
name|QPoint
argument_list|(
name|d
operator|->
name|ints
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
operator|+
literal|2
argument_list|)
argument_list|,
name|d
operator|->
name|ints
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
operator|+
literal|3
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_ClipRect:"
operator|<<
name|rect
operator|<<
name|cmd
operator|.
name|extra
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|setClipRect
argument_list|(
name|rect
argument_list|,
name|Qt
operator|::
name|ClipOperation
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_ClipRegion
case|:
block|{
name|QRegion
name|region
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|value
argument_list|<
name|QRegion
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_ClipRegion:"
operator|<<
name|region
operator|.
name|boundingRect
argument_list|()
operator|<<
name|cmd
operator|.
name|extra
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|setClipRegion
argument_list|(
name|region
argument_list|,
name|Qt
operator|::
name|ClipOperation
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_RAWFONT
argument_list|)
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawStaticText
case|:
block|{
name|QVariantList
name|variants
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|value
argument_list|<
name|QVariantList
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|QFont
name|font
init|=
name|variants
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|<
name|QFont
argument_list|>
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|quint32
argument_list|>
name|glyphIndexes
decl_stmt|;
name|QVector
argument_list|<
name|QPointF
argument_list|>
name|positions
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|variants
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|/
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|glyphIndexes
operator|.
name|append
argument_list|(
name|variants
operator|.
name|at
argument_list|(
name|i
operator|*
literal|2
operator|+
literal|1
argument_list|)
operator|.
name|toUInt
argument_list|()
argument_list|)
expr_stmt|;
name|positions
operator|.
name|append
argument_list|(
name|variants
operator|.
name|at
argument_list|(
name|i
operator|*
literal|2
operator|+
literal|2
argument_list|)
operator|.
name|toPointF
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|QRawFont
name|rawFont
decl_stmt|;
name|QRawFontPrivate
modifier|*
name|rawFontD
init|=
name|QRawFontPrivate
operator|::
name|get
argument_list|(
name|rawFont
argument_list|)
decl_stmt|;
name|QFontPrivate
modifier|*
name|fontD
init|=
name|QFontPrivate
operator|::
name|get
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|rawFontD
operator|->
name|fontEngine
operator|=
name|fontD
operator|->
name|engineForScript
argument_list|(
name|QChar
operator|::
name|Script_Common
argument_list|)
expr_stmt|;
name|rawFontD
operator|->
name|fontEngine
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|QGlyphRun
name|glyphs
decl_stmt|;
name|glyphs
operator|.
name|setRawFont
argument_list|(
name|rawFont
argument_list|)
expr_stmt|;
name|glyphs
operator|.
name|setGlyphIndexes
argument_list|(
name|glyphIndexes
argument_list|)
expr_stmt|;
name|glyphs
operator|.
name|setPositions
argument_list|(
name|positions
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawGlyphRun
argument_list|(
name|QPointF
argument_list|()
argument_list|,
name|glyphs
argument_list|)
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawText
case|:
block|{
name|QPointF
name|pos
argument_list|(
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|,
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|variants
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|value
argument_list|<
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|QFont
name|font
argument_list|(
name|variants
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|<
name|QFont
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|text
argument_list|(
name|variants
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|<
name|QString
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|painter
operator|->
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawText
argument_list|(
name|pos
argument_list|,
name|text
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawTextItem
case|:
block|{
name|QPointF
name|pos
argument_list|(
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|,
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|QTextItemIntCopy
modifier|*
name|tiCopy
init|=
cast|reinterpret_cast
argument_list|<
name|QTextItemIntCopy
operator|*
argument_list|>
argument_list|(
name|qvariant_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QTextItemInt
modifier|&
name|ti
init|=
call|(
modifier|*
name|tiCopy
call|)
argument_list|()
decl_stmt|;
name|QString
name|text
argument_list|(
name|ti
operator|.
name|text
argument_list|()
argument_list|)
decl_stmt|;
name|QFont
name|font
argument_list|(
name|ti
operator|.
name|font
argument_list|()
argument_list|)
decl_stmt|;
name|font
operator|.
name|setUnderline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|font
operator|.
name|setStrikeOut
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|font
operator|.
name|setOverline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|const
name|QTextItemInt
modifier|&
name|si
init|=
cast|static_cast
argument_list|<
specifier|const
name|QTextItemInt
operator|&
argument_list|>
argument_list|(
name|ti
argument_list|)
decl_stmt|;
name|qreal
name|justificationWidth
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|si
operator|.
name|justified
condition|)
name|justificationWidth
operator|=
name|si
operator|.
name|width
operator|.
name|toReal
argument_list|()
expr_stmt|;
name|qreal
name|scaleFactor
init|=
name|font
operator|.
name|d
operator|->
name|dpi
operator|/
name|qreal
argument_list|(
name|qt_defaultDpiY
argument_list|()
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_DrawTextItem:"
operator|<<
name|pos
operator|<<
literal|" "
operator|<<
name|text
operator|<<
literal|" "
operator|<<
name|scaleFactor
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|scaleFactor
operator|!=
literal|1.0
condition|)
block|{
name|QFont
name|fnt
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|QFakeDevice
name|fake
decl_stmt|;
name|fake
operator|.
name|setDpiX
argument_list|(
name|qRound
argument_list|(
name|scaleFactor
operator|*
name|qt_defaultDpiX
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fake
operator|.
name|setDpiY
argument_list|(
name|qRound
argument_list|(
name|scaleFactor
operator|*
name|qt_defaultDpiY
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|=
name|QFont
argument_list|(
name|fnt
argument_list|,
operator|&
name|fake
argument_list|)
expr_stmt|;
block|}
name|int
name|flags
init|=
name|Qt
operator|::
name|TextSingleLine
operator||
name|Qt
operator|::
name|TextDontClip
operator||
name|Qt
operator|::
name|TextForceLeftToRight
decl_stmt|;
name|QSizeF
name|size
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|justificationWidth
operator|>
literal|0
condition|)
block|{
name|size
operator|.
name|setWidth
argument_list|(
name|justificationWidth
argument_list|)
expr_stmt|;
name|flags
operator||=
name|Qt
operator|::
name|TextJustificationForced
expr_stmt|;
name|flags
operator||=
name|Qt
operator|::
name|AlignJustify
expr_stmt|;
block|}
name|QFontMetrics
name|fm
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|QPointF
name|pt
argument_list|(
name|pos
operator|.
name|x
argument_list|()
argument_list|,
name|pos
operator|.
name|y
argument_list|()
operator|-
name|fm
operator|.
name|ascent
argument_list|()
argument_list|)
decl_stmt|;
name|qt_format_text
argument_list|(
name|font
argument_list|,
name|QRectF
argument_list|(
name|pt
argument_list|,
name|size
argument_list|)
argument_list|,
name|flags
argument_list|,
comment|/*opt*/
literal|0
argument_list|,
name|text
argument_list|,
comment|/*brect=*/
literal|0
argument_list|,
comment|/*tabstops=*/
literal|0
argument_list|,
comment|/*...*/
literal|0
argument_list|,
comment|/*tabarraylen=*/
literal|0
argument_list|,
name|painter
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SystemStateChanged
case|:
block|{
name|QRegion
name|systemClip
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|value
argument_list|<
name|QRegion
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> Cmd_SystemStateChanged:"
operator|<<
name|systemClip
expr_stmt|;
endif|#
directive|endif
name|painter
operator|->
name|paintEngine
argument_list|()
operator|->
name|setSystemClip
argument_list|(
name|systemClip
argument_list|)
expr_stmt|;
name|painter
operator|->
name|paintEngine
argument_list|()
operator|->
name|d_ptr
operator|->
name|systemStateChanged
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|process
name|void
name|QPaintEngineExReplayer
operator|::
name|process
parameter_list|(
specifier|const
name|QPaintBufferCommand
modifier|&
name|cmd
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|painter
operator|->
name|paintEngine
argument_list|()
operator|->
name|isExtended
argument_list|()
argument_list|)
expr_stmt|;
name|QPaintEngineEx
modifier|*
name|xengine
init|=
cast|static_cast
argument_list|<
name|QPaintEngineEx
operator|*
argument_list|>
argument_list|(
name|painter
operator|->
name|paintEngine
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|cmd
operator|.
name|id
condition|)
block|{
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SetBrushOrigin
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_SetBrushOrigin: "
operator|<<
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|toPointF
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|xengine
operator|->
name|state
argument_list|()
operator|->
name|brushOrigin
operator|=
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|toPointF
argument_list|()
expr_stmt|;
name|xengine
operator|->
name|brushOriginChanged
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SetCompositionMode
case|:
block|{
name|QPainter
operator|::
name|CompositionMode
name|mode
init|=
operator|(
name|QPainter
operator|::
name|CompositionMode
operator|)
name|cmd
operator|.
name|extra
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_SetCompositionMode, mode: "
operator|<<
name|mode
expr_stmt|;
endif|#
directive|endif
name|xengine
operator|->
name|state
argument_list|()
operator|->
name|composition_mode
operator|=
name|mode
expr_stmt|;
name|xengine
operator|->
name|compositionModeChanged
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SetOpacity
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_SetOpacity: "
operator|<<
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|toDouble
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|xengine
operator|->
name|state
argument_list|()
operator|->
name|opacity
operator|=
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|toDouble
argument_list|()
expr_stmt|;
name|xengine
operator|->
name|opacityChanged
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawVectorPath
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_DrawVectorPath: size: "
operator|<<
name|cmd
operator|.
name|size
comment|//<< ", hints:"<< d->ints[cmd.offset2+cmd.size]
operator|<<
literal|"pts/elms:"
operator|<<
name|cmd
operator|.
name|offset
operator|<<
name|cmd
operator|.
name|offset2
expr_stmt|;
endif|#
directive|endif
name|QVectorPathCmd
name|path
argument_list|(
name|d
argument_list|,
name|cmd
argument_list|)
decl_stmt|;
name|xengine
operator|->
name|draw
argument_list|(
name|path
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_StrokeVectorPath
case|:
block|{
name|QPen
name|pen
init|=
name|qvariant_cast
argument_list|<
name|QPen
argument_list|>
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_StrokeVectorPath: size: "
operator|<<
name|cmd
operator|.
name|size
comment|//<< ", hints:"<< d->ints[cmd.offset2+cmd.size]
operator|<<
literal|"pts/elms:"
operator|<<
name|cmd
operator|.
name|offset
operator|<<
name|cmd
operator|.
name|offset2
expr_stmt|;
endif|#
directive|endif
name|QVectorPathCmd
name|path
argument_list|(
name|d
argument_list|,
name|cmd
argument_list|)
decl_stmt|;
name|xengine
operator|->
name|stroke
argument_list|(
name|path
argument_list|()
argument_list|,
name|pen
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_FillVectorPath
case|:
block|{
name|QBrush
name|brush
init|=
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_FillVectorPath: size: "
operator|<<
name|cmd
operator|.
name|size
comment|//<< ", hints:"<< d->ints[cmd.offset2+cmd.size]
operator|<<
literal|"pts/elms:"
operator|<<
name|cmd
operator|.
name|offset
operator|<<
name|cmd
operator|.
name|offset2
operator|<<
name|brush
expr_stmt|;
endif|#
directive|endif
name|QVectorPathCmd
name|path
argument_list|(
name|d
argument_list|,
name|cmd
argument_list|)
decl_stmt|;
name|xengine
operator|->
name|fill
argument_list|(
name|path
argument_list|()
argument_list|,
name|brush
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_FillRectBrush
case|:
block|{
name|QBrush
name|brush
init|=
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|)
decl_stmt|;
name|QRectF
modifier|*
name|rect
init|=
operator|(
name|QRectF
operator|*
operator|)
operator|(
name|d
operator|->
name|floats
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_FillRectBrush, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" rect: "
operator|<<
operator|*
name|rect
operator|<<
literal|" brush: "
operator|<<
name|brush
expr_stmt|;
endif|#
directive|endif
name|xengine
operator|->
name|fillRect
argument_list|(
operator|*
name|rect
argument_list|,
name|brush
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_FillRectColor
case|:
block|{
name|QColor
name|color
init|=
name|qvariant_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|)
decl_stmt|;
name|QRectF
modifier|*
name|rect
init|=
operator|(
name|QRectF
operator|*
operator|)
operator|(
name|d
operator|->
name|floats
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_FillRectBrush, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" rect: "
operator|<<
operator|*
name|rect
operator|<<
literal|" color: "
operator|<<
name|color
expr_stmt|;
endif|#
directive|endif
name|xengine
operator|->
name|fillRect
argument_list|(
operator|*
name|rect
argument_list|,
name|color
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPolygonF
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_DrawPolygonF, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
operator|<<
literal|" mode: "
operator|<<
name|cmd
operator|.
name|extra
operator|<<
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|<<
name|d
operator|->
name|floats
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
operator|+
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|xengine
operator|->
name|drawPolygon
argument_list|(
operator|(
name|QPointF
operator|*
operator|)
operator|(
name|d
operator|->
name|floats
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|,
name|cmd
operator|.
name|size
argument_list|,
operator|(
name|QPaintEngine
operator|::
name|PolygonDrawMode
operator|)
name|cmd
operator|.
name|extra
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPolygonI
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_DrawPolygonI, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
operator|<<
literal|" mode: "
operator|<<
name|cmd
operator|.
name|extra
operator|<<
name|d
operator|->
name|ints
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|<<
name|d
operator|->
name|ints
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
operator|+
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|xengine
operator|->
name|drawPolygon
argument_list|(
operator|(
name|QPoint
operator|*
operator|)
operator|(
name|d
operator|->
name|ints
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|,
name|cmd
operator|.
name|size
argument_list|,
operator|(
name|QPaintEngine
operator|::
name|PolygonDrawMode
operator|)
name|cmd
operator|.
name|extra
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawEllipseF
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_DrawEllipseF, offset: "
operator|<<
name|cmd
operator|.
name|offset
expr_stmt|;
endif|#
directive|endif
name|xengine
operator|->
name|drawEllipse
argument_list|(
operator|*
operator|(
name|QRectF
operator|*
operator|)
operator|(
name|d
operator|->
name|floats
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawEllipseI
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_DrawEllipseI, offset: "
operator|<<
name|cmd
operator|.
name|offset
expr_stmt|;
endif|#
directive|endif
name|xengine
operator|->
name|drawEllipse
argument_list|(
operator|*
operator|(
name|QRect
operator|*
operator|)
operator|(
name|d
operator|->
name|ints
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawLineF
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_DrawLineF, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
endif|#
directive|endif
name|xengine
operator|->
name|drawLines
argument_list|(
operator|(
name|QLineF
operator|*
operator|)
operator|(
name|d
operator|->
name|floats
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|,
name|cmd
operator|.
name|size
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawLineI
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_DrawLineI, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
endif|#
directive|endif
name|xengine
operator|->
name|drawLines
argument_list|(
operator|(
name|QLine
operator|*
operator|)
operator|(
name|d
operator|->
name|ints
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|,
name|cmd
operator|.
name|size
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPointsF
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_DrawPointsF, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
endif|#
directive|endif
name|xengine
operator|->
name|drawPoints
argument_list|(
operator|(
name|QPointF
operator|*
operator|)
operator|(
name|d
operator|->
name|floats
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|,
name|cmd
operator|.
name|size
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPointsI
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_DrawPointsI, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
endif|#
directive|endif
name|xengine
operator|->
name|drawPoints
argument_list|(
operator|(
name|QPoint
operator|*
operator|)
operator|(
name|d
operator|->
name|ints
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|,
name|cmd
operator|.
name|size
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPolylineF
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_DrawPolylineF, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
endif|#
directive|endif
name|xengine
operator|->
name|drawPolygon
argument_list|(
operator|(
name|QPointF
operator|*
operator|)
operator|(
name|d
operator|->
name|floats
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|,
name|cmd
operator|.
name|size
argument_list|,
name|QPaintEngine
operator|::
name|PolylineMode
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawPolylineI
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_DrawPolylineI, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
endif|#
directive|endif
name|xengine
operator|->
name|drawPolygon
argument_list|(
operator|(
name|QPoint
operator|*
operator|)
operator|(
name|d
operator|->
name|ints
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|,
name|cmd
operator|.
name|size
argument_list|,
name|QPaintEngine
operator|::
name|PolylineMode
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawRectF
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_DrawRectF, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
endif|#
directive|endif
name|xengine
operator|->
name|drawRects
argument_list|(
operator|(
name|QRectF
operator|*
operator|)
operator|(
name|d
operator|->
name|floats
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|,
name|cmd
operator|.
name|size
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_DrawRectI
case|:
block|{
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_DrawRectI, offset: "
operator|<<
name|cmd
operator|.
name|offset
operator|<<
literal|" size: "
operator|<<
name|cmd
operator|.
name|size
expr_stmt|;
endif|#
directive|endif
name|xengine
operator|->
name|drawRects
argument_list|(
operator|(
name|QRect
operator|*
operator|)
operator|(
name|d
operator|->
name|ints
operator|.
name|constData
argument_list|()
operator|+
name|cmd
operator|.
name|offset
operator|)
argument_list|,
name|cmd
operator|.
name|size
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_SetClipEnabled
case|:
block|{
name|bool
name|clipEnabled
init|=
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|toBool
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_SetClipEnabled:"
operator|<<
name|clipEnabled
expr_stmt|;
endif|#
directive|endif
name|xengine
operator|->
name|state
argument_list|()
operator|->
name|clipEnabled
operator|=
name|clipEnabled
expr_stmt|;
name|xengine
operator|->
name|clipEnabledChanged
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_ClipVectorPath
case|:
block|{
name|QVectorPathCmd
name|path
argument_list|(
name|d
argument_list|,
name|cmd
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_ClipVectorPath:"
operator|<<
name|path
argument_list|()
operator|.
name|elementCount
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|xengine
operator|->
name|clip
argument_list|(
name|path
argument_list|()
argument_list|,
name|Qt
operator|::
name|ClipOperation
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_ClipRect
case|:
block|{
name|QRect
name|rect
argument_list|(
name|QPoint
argument_list|(
name|d
operator|->
name|ints
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
argument_list|,
name|d
operator|->
name|ints
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|,
name|QPoint
argument_list|(
name|d
operator|->
name|ints
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
operator|+
literal|2
argument_list|)
argument_list|,
name|d
operator|->
name|ints
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
operator|+
literal|3
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_ClipRect:"
operator|<<
name|rect
operator|<<
name|cmd
operator|.
name|extra
expr_stmt|;
endif|#
directive|endif
name|xengine
operator|->
name|clip
argument_list|(
name|rect
argument_list|,
name|Qt
operator|::
name|ClipOperation
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QPaintBufferPrivate
operator|::
name|Cmd_ClipRegion
case|:
block|{
name|QRegion
name|region
argument_list|(
name|d
operator|->
name|variants
operator|.
name|at
argument_list|(
name|cmd
operator|.
name|offset
argument_list|)
operator|.
name|value
argument_list|<
name|QRegion
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QPAINTBUFFER_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" -> ExCmd_ClipRegion:"
operator|<<
name|region
operator|.
name|boundingRect
argument_list|()
operator|<<
name|cmd
operator|.
name|extra
expr_stmt|;
endif|#
directive|endif
name|xengine
operator|->
name|clip
argument_list|(
name|region
argument_list|,
name|Qt
operator|::
name|ClipOperation
argument_list|(
name|cmd
operator|.
name|extra
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
name|QPainterReplayer
operator|::
name|process
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|,
specifier|const
name|QPaintBufferCommand
modifier|&
name|command
parameter_list|)
block|{
name|quint32
name|id
init|=
name|command
operator|.
name|id
decl_stmt|;
name|quint32
name|size
init|=
name|command
operator|.
name|size
decl_stmt|;
name|stream
operator|<<
name|id
operator|<<
name|size
expr_stmt|;
name|stream
operator|<<
name|command
operator|.
name|offset
operator|<<
name|command
operator|.
name|offset2
operator|<<
name|command
operator|.
name|extra
expr_stmt|;
return|return
name|stream
return|;
block|}
end_function
begin_function
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|,
name|QPaintBufferCommand
modifier|&
name|command
parameter_list|)
block|{
name|quint32
name|id
decl_stmt|;
name|quint32
name|size
decl_stmt|;
name|stream
operator|>>
name|id
operator|>>
name|size
expr_stmt|;
name|stream
operator|>>
name|command
operator|.
name|offset
operator|>>
name|command
operator|.
name|offset2
operator|>>
name|command
operator|.
name|extra
expr_stmt|;
name|command
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|command
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|stream
return|;
block|}
end_function
begin_struct
DECL|struct|QPaintBufferCacheEntry
struct|struct
name|QPaintBufferCacheEntry
block|{
DECL|member|type
name|QVariant
operator|::
name|Type
name|type
decl_stmt|;
DECL|member|cacheKey
name|quint64
name|cacheKey
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|QPaintBufferCacheEntryV2
struct|struct
name|QPaintBufferCacheEntryV2
block|{
DECL|enum|Type
enum|enum
name|Type
block|{
DECL|enumerator|ImageKey
name|ImageKey
block|,
DECL|enumerator|PixmapKey
name|PixmapKey
block|}
enum|;
DECL|struct|Flags
struct|struct
name|Flags
block|{
DECL|member|type
name|uint
name|type
range|:
literal|8
decl_stmt|;
DECL|member|key
name|uint
name|key
range|:
literal|24
decl_stmt|;
block|}
struct|;
union|union
block|{
DECL|member|flags
name|Flags
name|flags
decl_stmt|;
DECL|member|bits
name|uint
name|bits
decl_stmt|;
block|}
union|;
block|}
struct|;
end_struct
begin_decl_stmt
name|QT_END_NAMESPACE
name|Q_DECLARE_METATYPE
argument_list|(
name|QPaintBufferCacheEntry
argument_list|)
name|Q_DECLARE_METATYPE
argument_list|(
name|QPaintBufferCacheEntryV2
argument_list|)
name|QT_BEGIN_NAMESPACE
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
argument_list|(
name|QDataStream
operator|&
name|stream
argument_list|,
specifier|const
name|QPaintBufferCacheEntry
operator|&
name|entry
argument_list|)
argument_list|{     return
name|stream
operator|<<
name|entry
operator|.
name|type
operator|<<
name|entry
operator|.
name|cacheKey
argument_list|; }
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
argument_list|(
name|QDataStream
operator|&
name|stream
argument_list|,
name|QPaintBufferCacheEntry
operator|&
name|entry
argument_list|)
argument_list|{     return
name|stream
operator|>>
name|entry
operator|.
name|type
operator|>>
name|entry
operator|.
name|cacheKey
argument_list|; }
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
argument_list|(
name|QDataStream
operator|&
name|stream
argument_list|,
specifier|const
name|QPaintBufferCacheEntryV2
operator|&
name|entry
argument_list|)
argument_list|{     return
name|stream
operator|<<
name|entry
operator|.
name|bits
argument_list|; }
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
argument_list|(
name|QDataStream
operator|&
name|stream
argument_list|,
name|QPaintBufferCacheEntryV2
operator|&
name|entry
argument_list|)
argument_list|{     return
name|stream
operator|>>
name|entry
operator|.
name|bits
argument_list|; }
decl|static
DECL|function|qRegisterPaintBufferMetaTypes
name|void
name|qRegisterPaintBufferMetaTypes
argument_list|()
argument_list|{
name|qRegisterMetaTypeStreamOperators
argument_list|<
name|QPaintBufferCacheEntry
argument_list|>
argument_list|()
argument_list|;
name|qRegisterMetaTypeStreamOperators
argument_list|<
name|QPaintBufferCacheEntryV2
argument_list|>
argument_list|()
argument_list|; }
name|Q_CONSTRUCTOR_FUNCTION
argument_list|(
name|qRegisterPaintBufferMetaTypes
argument_list|)
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
argument_list|(
name|QDataStream
operator|&
name|stream
argument_list|,
specifier|const
name|QPaintBuffer
operator|&
name|buffer
argument_list|)
argument_list|{
name|QHash
argument_list|<
name|qint64
argument_list|,
name|uint
argument_list|>
name|pixmapKeys
argument_list|;
name|QHash
argument_list|<
name|qint64
argument_list|,
name|uint
argument_list|>
name|imageKeys
argument_list|;
name|QHash
argument_list|<
name|qint64
argument_list|,
name|QPixmap
argument_list|>
name|pixmaps
argument_list|;
name|QHash
argument_list|<
name|qint64
argument_list|,
name|QImage
argument_list|>
name|images
argument_list|;
name|QVector
argument_list|<
name|QVariant
argument_list|>
name|variants
operator|=
name|buffer
operator|.
name|d_ptr
operator|->
name|variants
argument_list|;     for
operator|(
name|int
name|i
operator|=
literal|0
expr|;
name|i
operator|<
name|variants
operator|.
name|size
argument_list|()
expr|;
operator|++
name|i
operator|)
block|{
specifier|const
name|QVariant
operator|&
name|v
operator|=
name|variants
operator|.
name|at
argument_list|(
name|i
argument_list|)
block|;
if|if
condition|(
name|v
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Image
condition|)
block|{
specifier|const
name|QImage
name|image
argument_list|(
name|v
operator|.
name|value
argument_list|<
name|QImage
argument_list|>
argument_list|()
argument_list|)
block|;
name|QPaintBufferCacheEntryV2
name|entry
expr_stmt|;
name|entry
operator|.
name|flags
operator|.
name|type
operator|=
name|QPaintBufferCacheEntryV2
operator|::
name|ImageKey
argument_list|;
name|QHash
argument_list|<
name|qint64
argument_list|,
name|uint
argument_list|>
operator|::
name|iterator
name|it
operator|=
name|imageKeys
operator|.
name|find
argument_list|(
name|image
operator|.
name|cacheKey
argument_list|()
argument_list|)
argument_list|;             if
operator|(
name|it
operator|!=
name|imageKeys
operator|.
name|end
argument_list|()
operator|)
block|{
name|entry
operator|.
name|flags
operator|.
name|key
operator|=
operator|*
name|it
block|;             }
else|else
block|{
name|imageKeys
index|[
name|image
operator|.
name|cacheKey
argument_list|()
index|]
operator|=
name|entry
operator|.
name|flags
operator|.
name|key
operator|=
name|images
operator|.
name|size
argument_list|()
block|;
name|images
index|[
name|images
operator|.
name|size
argument_list|()
index|]
operator|=
name|image
block|;             }
name|variants
index|[
name|i
index|]
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|entry
argument_list|)
expr_stmt|;
argument_list|}
decl|else if
argument_list|(
name|v
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Pixmap
argument_list|)
argument_list|{
specifier|const
name|QPixmap
name|pixmap
argument_list|(
name|v
operator|.
name|value
argument_list|<
name|QPixmap
argument_list|>
argument_list|()
argument_list|)
argument_list|;
name|QPaintBufferCacheEntryV2
name|entry
argument_list|;
name|entry
operator|.
name|flags
operator|.
name|type
operator|=
name|QPaintBufferCacheEntryV2
operator|::
name|PixmapKey
argument_list|;
name|QHash
argument_list|<
name|qint64
argument_list|,
name|uint
argument_list|>
operator|::
name|iterator
name|it
operator|=
name|pixmapKeys
operator|.
name|find
argument_list|(
name|pixmap
operator|.
name|cacheKey
argument_list|()
argument_list|)
argument_list|;             if
operator|(
name|it
operator|!=
name|pixmapKeys
operator|.
name|end
argument_list|()
operator|)
block|{
name|entry
operator|.
name|flags
operator|.
name|key
operator|=
operator|*
name|it
block|;             }
else|else
block|{
name|pixmapKeys
index|[
name|pixmap
operator|.
name|cacheKey
argument_list|()
index|]
operator|=
name|entry
operator|.
name|flags
operator|.
name|key
operator|=
name|pixmaps
operator|.
name|size
argument_list|()
block|;
name|pixmaps
index|[
name|pixmaps
operator|.
name|size
argument_list|()
index|]
operator|=
name|pixmap
block|;             }
name|variants
index|[
name|i
index|]
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|entry
argument_list|)
expr_stmt|;
argument_list|}
end_decl_stmt
begin_expr_stmt
unit|}      stream
operator|<<
name|pixmaps
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|stream
operator|<<
name|images
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|stream
operator|<<
name|buffer
operator|.
name|d_ptr
operator|->
name|ints
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|stream
operator|<<
name|buffer
operator|.
name|d_ptr
operator|->
name|floats
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|stream
operator|<<
name|variants
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|stream
operator|<<
name|buffer
operator|.
name|d_ptr
operator|->
name|commands
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|stream
operator|<<
name|buffer
operator|.
name|d_ptr
operator|->
name|boundingRect
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|stream
operator|<<
name|buffer
operator|.
name|d_ptr
operator|->
name|frames
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|stream
return|;
end_return
begin_expr_stmt
unit|}  QDataStream
DECL|function|operator >>
operator|&
name|operator
name|>>
operator|(
name|QDataStream
operator|&
name|stream
operator|,
name|QPaintBuffer
operator|&
name|buffer
operator|)
block|{
name|QHash
argument_list|<
name|qint64
argument_list|,
name|QPixmap
argument_list|>
name|pixmaps
block|;
name|QHash
argument_list|<
name|qint64
argument_list|,
name|QImage
argument_list|>
name|images
block|;
name|stream
operator|>>
name|pixmaps
block|;
name|stream
operator|>>
name|images
block|;
name|stream
operator|>>
name|buffer
operator|.
name|d_ptr
operator|->
name|ints
block|;
name|stream
operator|>>
name|buffer
operator|.
name|d_ptr
operator|->
name|floats
block|;
name|stream
operator|>>
name|buffer
operator|.
name|d_ptr
operator|->
name|variants
block|;
name|stream
operator|>>
name|buffer
operator|.
name|d_ptr
operator|->
name|commands
block|;
name|stream
operator|>>
name|buffer
operator|.
name|d_ptr
operator|->
name|boundingRect
block|;
name|stream
operator|>>
name|buffer
operator|.
name|d_ptr
operator|->
name|frames
block|;
name|QVector
argument_list|<
name|QVariant
argument_list|>
operator|&
name|variants
operator|=
name|buffer
operator|.
name|d_ptr
operator|->
name|variants
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|variants
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QVariant
modifier|&
name|v
init|=
name|variants
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|canConvert
argument_list|<
name|QPaintBufferCacheEntry
argument_list|>
argument_list|()
condition|)
block|{
name|QPaintBufferCacheEntry
name|entry
init|=
name|v
operator|.
name|value
argument_list|<
name|QPaintBufferCacheEntry
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|type
operator|==
name|QVariant
operator|::
name|Image
condition|)
name|variants
index|[
name|i
index|]
operator|=
name|QVariant
argument_list|(
name|images
operator|.
name|value
argument_list|(
name|entry
operator|.
name|cacheKey
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|variants
index|[
name|i
index|]
operator|=
name|QVariant
argument_list|(
name|pixmaps
operator|.
name|value
argument_list|(
name|entry
operator|.
name|cacheKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_elseif
elseif|else
if|if
condition|(
name|v
operator|.
name|canConvert
argument_list|<
name|QPaintBufferCacheEntryV2
argument_list|>
argument_list|()
condition|)
block|{
name|QPaintBufferCacheEntryV2
name|entry
init|=
name|v
operator|.
name|value
argument_list|<
name|QPaintBufferCacheEntryV2
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|flags
operator|.
name|type
operator|==
name|QPaintBufferCacheEntryV2
operator|::
name|ImageKey
condition|)
name|variants
index|[
name|i
index|]
operator|=
name|QVariant
argument_list|(
name|images
operator|.
name|value
argument_list|(
name|entry
operator|.
name|flags
operator|.
name|key
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|entry
operator|.
name|flags
operator|.
name|type
operator|==
name|QPaintBufferCacheEntryV2
operator|::
name|PixmapKey
condition|)
name|variants
index|[
name|i
index|]
operator|=
name|QVariant
argument_list|(
name|pixmaps
operator|.
name|value
argument_list|(
name|entry
operator|.
name|flags
operator|.
name|key
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|qWarning
argument_list|()
operator|<<
literal|"operator<<(QDataStream&stream, QPaintBuffer&buffer): unrecognized cache entry type:"
operator|<<
name|entry
operator|.
name|flags
operator|.
name|type
expr_stmt|;
block|}
end_elseif
begin_expr_stmt
unit|}      return
name|stream
expr_stmt|;
end_expr_stmt
unit|}  QT_END_NAMESPACE
end_unit
