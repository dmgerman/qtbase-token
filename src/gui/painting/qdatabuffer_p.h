begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QDATABUFFER_P_H
end_ifndef
begin_define
DECL|macro|QDATABUFFER_P_H
define|#
directive|define
name|QDATABUFFER_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of other Qt classes.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtCore/qbytearray.h"
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
name|template
operator|<
name|typename
name|Type
operator|>
name|class
name|QDataBuffer
block|{
name|public
operator|:
name|QDataBuffer
argument_list|(
argument|int res
argument_list|)
block|{
name|capacity
operator|=
name|res
block|;
if|if
condition|(
name|res
condition|)
name|buffer
operator|=
operator|(
name|Type
operator|*
operator|)
name|malloc
argument_list|(
name|capacity
operator|*
sizeof|sizeof
argument_list|(
name|Type
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|buffer
operator|=
literal|0
expr_stmt|;
name|siz
operator|=
literal|0
block|;     }
operator|~
name|QDataBuffer
argument_list|()
block|{
if|if
condition|(
name|buffer
condition|)
name|free
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|reset
parameter_list|()
block|{
name|siz
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|bool
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
name|siz
operator|==
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|size
argument_list|()
specifier|const
block|{
return|return
name|siz
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|Type
operator|*
name|data
argument_list|()
specifier|const
block|{
return|return
name|buffer
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|Type
modifier|&
name|at
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|siz
argument_list|)
expr_stmt|;
return|return
name|buffer
index|[
name|i
index|]
return|;
block|}
end_function
begin_decl_stmt
specifier|inline
specifier|const
name|Type
modifier|&
name|at
argument_list|(
name|int
name|i
argument_list|)
decl|const
block|{
name|Q_ASSERT
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|siz
argument_list|)
expr_stmt|;
return|return
name|buffer
index|[
name|i
index|]
return|;
block|}
end_decl_stmt
begin_function
specifier|inline
name|Type
modifier|&
name|last
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|buffer
index|[
name|siz
operator|-
literal|1
index|]
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
specifier|const
name|Type
operator|&
name|last
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
block|;
return|return
name|buffer
index|[
name|siz
operator|-
literal|1
index|]
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|Type
modifier|&
name|first
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|buffer
index|[
literal|0
index|]
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
specifier|const
name|Type
operator|&
name|first
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
block|;
return|return
name|buffer
index|[
literal|0
index|]
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|add
parameter_list|(
specifier|const
name|Type
modifier|&
name|t
parameter_list|)
block|{
name|reserve
argument_list|(
name|siz
operator|+
literal|1
argument_list|)
expr_stmt|;
name|buffer
index|[
name|siz
index|]
operator|=
name|t
expr_stmt|;
operator|++
name|siz
expr_stmt|;
block|}
end_function
begin_function
specifier|inline
name|void
name|pop_back
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|siz
operator|>
literal|0
argument_list|)
expr_stmt|;
operator|--
name|siz
expr_stmt|;
block|}
end_function
begin_function
specifier|inline
name|void
name|resize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|reserve
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|siz
operator|=
name|size
expr_stmt|;
block|}
end_function
begin_function
specifier|inline
name|void
name|reserve
parameter_list|(
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|>
name|capacity
condition|)
block|{
if|if
condition|(
name|capacity
operator|==
literal|0
condition|)
name|capacity
operator|=
literal|1
expr_stmt|;
while|while
condition|(
name|capacity
operator|<
name|size
condition|)
name|capacity
operator|*=
literal|2
expr_stmt|;
name|buffer
operator|=
operator|(
name|Type
operator|*
operator|)
name|realloc
argument_list|(
name|buffer
argument_list|,
name|capacity
operator|*
sizeof|sizeof
argument_list|(
name|Type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
specifier|inline
name|void
name|shrink
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|capacity
operator|=
name|size
expr_stmt|;
if|if
condition|(
name|size
condition|)
name|buffer
operator|=
operator|(
name|Type
operator|*
operator|)
name|realloc
argument_list|(
name|buffer
argument_list|,
name|capacity
operator|*
sizeof|sizeof
argument_list|(
name|Type
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
name|free
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|buffer
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_decl_stmt
specifier|inline
name|void
name|swap
argument_list|(
name|QDataBuffer
operator|<
name|Type
operator|>
operator|&
name|other
argument_list|)
block|{
name|qSwap
argument_list|(
name|capacity
argument_list|,
name|other
operator|.
name|capacity
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|siz
argument_list|,
name|other
operator|.
name|siz
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|buffer
argument_list|,
name|other
operator|.
name|buffer
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|QDataBuffer
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|Type
operator|&
name|t
operator|)
block|{
name|add
argument_list|(
name|t
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|int
name|capacity
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|siz
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Type
modifier|*
name|buffer
decl_stmt|;
end_decl_stmt
begin_macro
unit|};
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QDATABUFFER_P_H
end_comment
end_unit
