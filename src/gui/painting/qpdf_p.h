begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QPDF_P_H
end_ifndef
begin_define
DECL|macro|QPDF_P_H
define|#
directive|define
name|QPDF_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtGui/qmatrix.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qstring.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qvector.h"
end_include
begin_include
include|#
directive|include
file|"private/qstroker_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qpaintengine_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qfontengine_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qfontsubset_p.h"
end_include
begin_comment
comment|// #define USE_NATIVE_GRADIENTS
end_comment
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|const
name|char
modifier|*
name|qt_real_to_string
parameter_list|(
name|qreal
name|val
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|char
modifier|*
name|qt_int_to_string
parameter_list|(
name|int
name|val
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|namespace
name|QPdf
block|{
name|class
name|ByteStream
block|{
name|public
label|:
comment|// fileBacking means that ByteStream will buffer the contents on disk
comment|// if the size exceeds a certain threshold. In this case, if a byte
comment|// array was passed in, its contents may no longer correspond to the
comment|// ByteStream contents.
name|explicit
name|ByteStream
parameter_list|(
name|bool
name|fileBacking
init|=
name|false
parameter_list|)
function_decl|;
name|explicit
name|ByteStream
parameter_list|(
name|QByteArray
modifier|*
name|ba
parameter_list|,
name|bool
name|fileBacking
init|=
name|false
parameter_list|)
function_decl|;
operator|~
name|ByteStream
argument_list|()
expr_stmt|;
name|ByteStream
operator|&
name|operator
operator|<<
operator|(
name|char
name|chr
operator|)
expr_stmt|;
name|ByteStream
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|char
operator|*
name|str
operator|)
expr_stmt|;
name|ByteStream
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|QByteArray
operator|&
name|str
operator|)
expr_stmt|;
name|ByteStream
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|ByteStream
operator|&
name|src
operator|)
expr_stmt|;
name|ByteStream
operator|&
name|operator
operator|<<
operator|(
name|qreal
name|val
operator|)
expr_stmt|;
name|ByteStream
operator|&
name|operator
operator|<<
operator|(
name|int
name|val
operator|)
expr_stmt|;
name|ByteStream
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|QPointF
operator|&
name|p
operator|)
expr_stmt|;
comment|// Note that the stream may be invalidated by calls that insert data.
name|QIODevice
modifier|*
name|stream
parameter_list|()
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
specifier|static
specifier|inline
name|int
name|maxMemorySize
parameter_list|()
block|{
return|return
literal|100000000
return|;
block|}
specifier|static
specifier|inline
name|int
name|chunkSize
parameter_list|()
block|{
return|return
literal|10000000
return|;
block|}
name|protected
label|:
name|void
name|constructor_helper
parameter_list|(
name|QIODevice
modifier|*
name|dev
parameter_list|)
function_decl|;
name|void
name|constructor_helper
parameter_list|(
name|QByteArray
modifier|*
name|ba
parameter_list|)
function_decl|;
name|private
label|:
name|void
name|prepareBuffer
parameter_list|()
function_decl|;
name|private
label|:
name|QIODevice
modifier|*
name|dev
decl_stmt|;
name|QByteArray
name|ba
decl_stmt|;
name|bool
name|fileBackingEnabled
decl_stmt|;
name|bool
name|fileBackingActive
decl_stmt|;
name|bool
name|handleDirty
decl_stmt|;
block|}
empty_stmt|;
enum|enum
name|PathFlags
block|{
name|ClipPath
block|,
name|FillPath
block|,
name|StrokePath
block|,
name|FillAndStrokePath
block|}
enum|;
name|QByteArray
name|generatePath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|PathFlags
name|flags
parameter_list|)
function_decl|;
name|QByteArray
name|generateMatrix
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|)
function_decl|;
name|QByteArray
name|generateDashes
parameter_list|(
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
function_decl|;
name|QByteArray
name|patternForBrush
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|b
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|USE_NATIVE_GRADIENTS
name|QByteArray
name|generateLinearGradientShader
parameter_list|(
specifier|const
name|QLinearGradient
modifier|*
name|lg
parameter_list|,
specifier|const
name|QPointF
modifier|*
name|page_rect
parameter_list|,
name|bool
name|alpha
init|=
name|false
parameter_list|)
function_decl|;
endif|#
directive|endif
struct|struct
name|Stroker
block|{
name|Stroker
argument_list|()
expr_stmt|;
name|void
name|setPen
parameter_list|(
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
function_decl|;
name|void
name|strokePath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
function_decl|;
name|ByteStream
modifier|*
name|stream
decl_stmt|;
name|bool
name|first
decl_stmt|;
name|QTransform
name|matrix
decl_stmt|;
name|bool
name|cosmeticPen
decl_stmt|;
name|private
label|:
name|QStroker
name|basicStroker
decl_stmt|;
name|QDashStroker
name|dashStroker
decl_stmt|;
name|QStrokerOps
modifier|*
name|stroker
decl_stmt|;
block|}
struct|;
name|QByteArray
name|ascii85Encode
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|input
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|toHex
parameter_list|(
name|ushort
name|u
parameter_list|,
name|char
modifier|*
name|buffer
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|toHex
parameter_list|(
name|uchar
name|u
parameter_list|,
name|char
modifier|*
name|buffer
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_decl_stmt
name|class
name|QPdfPage
range|:
name|public
name|QPdf
operator|::
name|ByteStream
block|{
name|public
operator|:
name|QPdfPage
argument_list|()
block|;
name|QVector
operator|<
name|uint
operator|>
name|images
block|;
name|QVector
operator|<
name|uint
operator|>
name|graphicStates
block|;
name|QVector
operator|<
name|uint
operator|>
name|patterns
block|;
name|QVector
operator|<
name|uint
operator|>
name|fonts
block|;
name|QVector
operator|<
name|uint
operator|>
name|annotations
block|;
name|void
name|streamImage
argument_list|(
argument|int w
argument_list|,
argument|int h
argument_list|,
argument|int object
argument_list|)
block|;
name|QSize
name|pageSize
block|;
name|private
operator|:
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPdfWriter
name|class
name|QPdfWriter
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPdfEnginePrivate
name|class
name|QPdfEnginePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QPdfEngine
range|:
name|public
name|QPaintEngine
block|{
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QPdfEngine
argument_list|)
name|friend
name|class
name|QPdfWriter
block|;
name|public
operator|:
name|QPdfEngine
argument_list|()
block|;
name|QPdfEngine
argument_list|(
name|QPdfEnginePrivate
operator|&
name|d
argument_list|)
block|;
operator|~
name|QPdfEngine
argument_list|()
block|{}
name|void
name|setOutputFilename
argument_list|(
specifier|const
name|QString
operator|&
name|filename
argument_list|)
block|;
specifier|inline
name|void
name|setResolution
argument_list|(
argument|int resolution
argument_list|)
block|;
comment|// reimplementations QPaintEngine
name|bool
name|begin
argument_list|(
name|QPaintDevice
operator|*
name|pdev
argument_list|)
block|;
name|bool
name|end
argument_list|()
block|;
name|void
name|drawPoints
argument_list|(
argument|const QPointF *points
argument_list|,
argument|int pointCount
argument_list|)
block|;
name|void
name|drawLines
argument_list|(
argument|const QLineF *lines
argument_list|,
argument|int lineCount
argument_list|)
block|;
name|void
name|drawRects
argument_list|(
argument|const QRectF *rects
argument_list|,
argument|int rectCount
argument_list|)
block|;
name|void
name|drawPolygon
argument_list|(
argument|const QPointF *points
argument_list|,
argument|int pointCount
argument_list|,
argument|PolygonDrawMode mode
argument_list|)
block|;
name|void
name|drawPath
argument_list|(
specifier|const
name|QPainterPath
operator|&
name|path
argument_list|)
block|;
name|void
name|drawTextItem
argument_list|(
specifier|const
name|QPointF
operator|&
name|p
argument_list|,
specifier|const
name|QTextItem
operator|&
name|textItem
argument_list|)
block|;
name|void
name|drawPixmap
argument_list|(
specifier|const
name|QRectF
operator|&
name|rectangle
argument_list|,
specifier|const
name|QPixmap
operator|&
name|pixmap
argument_list|,
specifier|const
name|QRectF
operator|&
name|sr
argument_list|)
block|;
name|void
name|drawImage
argument_list|(
argument|const QRectF&r
argument_list|,
argument|const QImage&pm
argument_list|,
argument|const QRectF&sr
argument_list|,
argument|Qt::ImageConversionFlags flags = Qt::AutoColor
argument_list|)
block|;
name|void
name|drawTiledPixmap
argument_list|(
specifier|const
name|QRectF
operator|&
name|rectangle
argument_list|,
specifier|const
name|QPixmap
operator|&
name|pixmap
argument_list|,
specifier|const
name|QPointF
operator|&
name|point
argument_list|)
block|;
name|void
name|updateState
argument_list|(
specifier|const
name|QPaintEngineState
operator|&
name|state
argument_list|)
block|;
name|int
name|metric
argument_list|(
argument|QPaintDevice::PaintDeviceMetric metricType
argument_list|)
specifier|const
block|;
name|Type
name|type
argument_list|()
specifier|const
block|;
comment|// end reimplementations QPaintEngine
comment|// Printer stuff...
name|bool
name|newPage
argument_list|()
block|;
name|void
name|setPen
argument_list|()
block|;
name|void
name|setBrush
argument_list|()
block|;
name|void
name|setupGraphicsState
argument_list|(
argument|QPaintEngine::DirtyFlags flags
argument_list|)
block|;
name|private
operator|:
name|void
name|updateClipPath
argument_list|(
argument|const QPainterPath& path
argument_list|,
argument|Qt::ClipOperation op
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QPdfEnginePrivate
range|:
name|public
name|QPaintEnginePrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QPdfEngine
argument_list|)
name|public
operator|:
name|QPdfEnginePrivate
argument_list|()
block|;
operator|~
name|QPdfEnginePrivate
argument_list|()
block|;
specifier|inline
name|uint
name|requestObject
argument_list|()
block|{
return|return
name|currentObject
operator|++
return|;
block|}
name|QRect
name|paperRect
argument_list|()
specifier|const
block|;
name|QRect
name|pageRect
argument_list|()
specifier|const
block|;
name|int
name|width
argument_list|()
specifier|const
block|{
name|QRect
name|r
operator|=
name|paperRect
argument_list|()
block|;
return|return
name|qRound
argument_list|(
name|r
operator|.
name|width
argument_list|()
operator|*
literal|72.
operator|/
name|resolution
argument_list|)
return|;
block|}
name|int
name|height
argument_list|()
specifier|const
block|{
name|QRect
name|r
operator|=
name|paperRect
argument_list|()
block|;
return|return
name|qRound
argument_list|(
name|r
operator|.
name|height
argument_list|()
operator|*
literal|72.
operator|/
name|resolution
argument_list|)
return|;
block|}
name|void
name|writeHeader
argument_list|()
block|;
name|void
name|writeTail
argument_list|()
block|;
name|int
name|addImage
argument_list|(
argument|const QImage&image
argument_list|,
argument|bool *bitmap
argument_list|,
argument|qint64 serial_no
argument_list|)
block|;
name|int
name|addConstantAlphaObject
argument_list|(
argument|int brushAlpha
argument_list|,
argument|int penAlpha =
literal|255
argument_list|)
block|;
name|int
name|addBrushPattern
argument_list|(
specifier|const
name|QTransform
operator|&
name|matrix
argument_list|,
name|bool
operator|*
name|specifyColor
argument_list|,
name|int
operator|*
name|gStateObject
argument_list|)
block|;
name|void
name|drawTextItem
argument_list|(
specifier|const
name|QPointF
operator|&
name|p
argument_list|,
specifier|const
name|QTextItemInt
operator|&
name|ti
argument_list|)
block|;
name|QTransform
name|pageMatrix
argument_list|()
specifier|const
block|;
name|void
name|newPage
argument_list|()
block|;
name|bool
name|postscript
block|;
name|int
name|currentObject
block|;
name|QPdfPage
operator|*
name|currentPage
block|;
name|QPdf
operator|::
name|Stroker
name|stroker
block|;
name|QPointF
name|brushOrigin
block|;
name|QBrush
name|brush
block|;
name|QPen
name|pen
block|;
name|QList
operator|<
name|QPainterPath
operator|>
name|clips
block|;
name|bool
name|clipEnabled
block|;
name|bool
name|allClipped
block|;
name|bool
name|hasPen
block|;
name|bool
name|hasBrush
block|;
name|bool
name|simplePen
block|;
name|qreal
name|opacity
block|;
name|QHash
operator|<
name|QFontEngine
operator|::
name|FaceId
block|,
name|QFontSubset
operator|*
operator|>
name|fonts
block|;
name|QPaintDevice
operator|*
name|pdev
block|;
comment|// the device the output is in the end streamed to.
name|QIODevice
operator|*
name|outDevice
block|;
name|bool
name|ownsDevice
block|;
comment|// printer options
name|QString
name|outputFileName
block|;
name|QString
name|title
block|;
name|QString
name|creator
block|;
name|bool
name|fullPage
block|;
name|bool
name|embedFonts
block|;
name|int
name|resolution
block|;
name|bool
name|landscape
block|;
name|bool
name|grayscale
block|;
comment|// in postscript points
name|QSizeF
name|paperSize
block|;
name|qreal
name|leftMargin
block|,
name|topMargin
block|,
name|rightMargin
block|,
name|bottomMargin
block|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
name|QString
name|cupsTempFile
block|;
endif|#
directive|endif
name|private
operator|:
ifdef|#
directive|ifdef
name|USE_NATIVE_GRADIENTS
name|int
name|gradientBrush
argument_list|(
specifier|const
name|QBrush
operator|&
name|b
argument_list|,
specifier|const
name|QMatrix
operator|&
name|matrix
argument_list|,
name|int
operator|*
name|gStateObject
argument_list|)
block|;
endif|#
directive|endif
name|void
name|writeInfo
argument_list|()
block|;
name|void
name|writePageRoot
argument_list|()
block|;
name|void
name|writeFonts
argument_list|()
block|;
name|void
name|embedFont
argument_list|(
name|QFontSubset
operator|*
name|font
argument_list|)
block|;
name|QVector
operator|<
name|int
operator|>
name|xrefPositions
block|;
name|QDataStream
operator|*
name|stream
block|;
name|int
name|streampos
block|;
name|int
name|writeImage
argument_list|(
argument|const QByteArray&data
argument_list|,
argument|int width
argument_list|,
argument|int height
argument_list|,
argument|int depth
argument_list|,
argument|int maskObject
argument_list|,
argument|int softMaskObject
argument_list|,
argument|bool dct = false
argument_list|)
block|;
name|void
name|writePage
argument_list|()
block|;
name|int
name|addXrefEntry
argument_list|(
argument|int object
argument_list|,
argument|bool printostr = true
argument_list|)
block|;
name|void
name|printString
argument_list|(
specifier|const
name|QString
operator|&
name|string
argument_list|)
block|;
name|void
name|xprintf
argument_list|(
specifier|const
name|char
operator|*
name|fmt
argument_list|,
operator|...
argument_list|)
block|;
specifier|inline
name|void
name|write
argument_list|(
argument|const QByteArray&data
argument_list|)
block|{
name|stream
operator|->
name|writeRawData
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|streampos
operator|+=
name|data
operator|.
name|size
argument_list|()
block|;     }
name|int
name|writeCompressed
argument_list|(
argument|const char *src
argument_list|,
argument|int len
argument_list|)
block|;
specifier|inline
name|int
name|writeCompressed
argument_list|(
argument|const QByteArray&data
argument_list|)
block|{
return|return
name|writeCompressed
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
name|int
name|writeCompressed
argument_list|(
name|QIODevice
operator|*
name|dev
argument_list|)
block|;
comment|// various PDF objects
name|int
name|pageRoot
block|,
name|catalog
block|,
name|info
block|,
name|graphicsState
block|,
name|patternColorSpace
block|;
name|QVector
operator|<
name|uint
operator|>
name|pages
block|;
name|QHash
operator|<
name|qint64
block|,
name|uint
operator|>
name|imageCache
block|;
name|QHash
operator|<
name|QPair
operator|<
name|uint
block|,
name|uint
operator|>
block|,
name|uint
operator|>
name|alphaCache
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|function|setResolution
name|void
name|QPdfEngine
operator|::
name|setResolution
argument_list|(
argument|int resolution
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
block|;
name|d
operator|->
name|resolution
operator|=
name|resolution
block|; }
name|QT_END_NAMESPACE
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QPDF_P_H
end_comment
end_unit
