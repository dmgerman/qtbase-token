begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QPAINTENGINE_BLITTER_P_H
end_ifndef
begin_define
DECL|macro|QPAINTENGINE_BLITTER_P_H
define|#
directive|define
name|QPAINTENGINE_BLITTER_P_H
end_define
begin_include
include|#
directive|include
file|"private/qpaintengineex_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qpaintengine_raster_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BLITTABLE
end_ifndef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QBlitterPaintEnginePrivate
name|class
name|QBlitterPaintEnginePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QBlittablePixmapData
name|class
name|QBlittablePixmapData
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QBlittable
name|class
name|QBlittable
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QBlitterPaintEngine
range|:
name|public
name|QPaintEngineEx
block|{
name|Q_DECLARE_PRIVATE
argument_list|(
name|QBlitterPaintEngine
argument_list|)
block|;
name|public
operator|:
name|QBlitterPaintEngine
argument_list|(
name|QBlittablePixmapData
operator|*
name|p
argument_list|)
block|;
operator|~
name|QBlitterPaintEngine
argument_list|()
block|;
name|virtual
name|QPainterState
operator|*
name|createState
argument_list|(
argument|QPainterState *orig
argument_list|)
specifier|const
block|;
name|virtual
name|QPaintEngine
operator|::
name|Type
name|type
argument_list|()
specifier|const
block|{
return|return
name|Blitter
return|;
block|}
name|virtual
name|bool
name|begin
argument_list|(
name|QPaintDevice
operator|*
name|pdev
argument_list|)
block|;
name|virtual
name|bool
name|end
argument_list|()
block|;
name|virtual
name|void
name|fill
argument_list|(
specifier|const
name|QVectorPath
operator|&
name|path
argument_list|,
specifier|const
name|QBrush
operator|&
name|brush
argument_list|)
block|;
name|virtual
name|void
name|stroke
argument_list|(
specifier|const
name|QVectorPath
operator|&
name|path
argument_list|,
specifier|const
name|QPen
operator|&
name|pen
argument_list|)
block|;
name|virtual
name|void
name|clip
argument_list|(
argument|const QVectorPath&path
argument_list|,
argument|Qt::ClipOperation op
argument_list|)
block|;
name|virtual
name|void
name|clip
argument_list|(
argument|const QRect&rect
argument_list|,
argument|Qt::ClipOperation op
argument_list|)
block|;
name|virtual
name|void
name|clip
argument_list|(
argument|const QRegion&region
argument_list|,
argument|Qt::ClipOperation op
argument_list|)
block|;
name|virtual
name|void
name|clipEnabledChanged
argument_list|()
block|;
name|virtual
name|void
name|penChanged
argument_list|()
block|;
name|virtual
name|void
name|brushChanged
argument_list|()
block|;
name|virtual
name|void
name|brushOriginChanged
argument_list|()
block|;
name|virtual
name|void
name|opacityChanged
argument_list|()
block|;
name|virtual
name|void
name|compositionModeChanged
argument_list|()
block|;
name|virtual
name|void
name|renderHintsChanged
argument_list|()
block|;
name|virtual
name|void
name|transformChanged
argument_list|()
block|;
name|virtual
name|void
name|fillRect
argument_list|(
specifier|const
name|QRectF
operator|&
name|rect
argument_list|,
specifier|const
name|QBrush
operator|&
name|brush
argument_list|)
block|;
name|virtual
name|void
name|fillRect
argument_list|(
specifier|const
name|QRectF
operator|&
name|rect
argument_list|,
specifier|const
name|QColor
operator|&
name|color
argument_list|)
block|;
name|virtual
name|void
name|drawRects
argument_list|(
argument|const QRect *rects
argument_list|,
argument|int rectCount
argument_list|)
block|;
name|virtual
name|void
name|drawRects
argument_list|(
argument|const QRectF *rects
argument_list|,
argument|int rectCount
argument_list|)
block|;
name|virtual
name|void
name|drawPixmap
argument_list|(
specifier|const
name|QRectF
operator|&
name|r
argument_list|,
specifier|const
name|QPixmap
operator|&
name|pm
argument_list|,
specifier|const
name|QRectF
operator|&
name|sr
argument_list|)
block|;
name|virtual
name|void
name|drawImage
argument_list|(
argument|const QRectF&r
argument_list|,
argument|const QImage&pm
argument_list|,
argument|const QRectF&sr
argument_list|,
argument|Qt::ImageConversionFlags flags
argument_list|)
block|;
name|virtual
name|void
name|drawTextItem
argument_list|(
specifier|const
name|QPointF
operator|&
name|pos
argument_list|,
specifier|const
name|QTextItem
operator|&
name|ti
argument_list|)
block|;
name|virtual
name|void
name|drawStaticTextItem
argument_list|(
name|QStaticTextItem
operator|*
argument_list|)
block|;
name|virtual
name|void
name|drawEllipse
argument_list|(
specifier|const
name|QRectF
operator|&
name|r
argument_list|)
block|;
name|virtual
name|void
name|setState
argument_list|(
name|QPainterState
operator|*
name|s
argument_list|)
block|;
specifier|inline
name|QPainterState
operator|*
name|state
argument_list|()
block|{
return|return
name|raster
argument_list|()
operator|->
name|state
argument_list|()
return|;
block|}
specifier|inline
specifier|const
name|QPainterState
operator|*
name|state
argument_list|()
specifier|const
block|{
specifier|const
name|QPainterState
operator|*
name|state
operator|=
name|raster
argument_list|()
operator|->
name|state
argument_list|()
block|;
return|return
name|state
return|;
block|}
specifier|inline
specifier|const
name|QClipData
operator|*
name|clip
argument_list|()
block|{
return|return
name|raster
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|clip
argument_list|()
return|;
block|}
name|private
operator|:
name|QRasterPaintEngine
operator|*
name|raster
argument_list|()
specifier|const
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_BLITTABLE
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QPAINTENGINE_BLITTER_P_H
end_comment
end_unit
