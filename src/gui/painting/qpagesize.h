begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 John Layt<jlayt@kde.org> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QPAGESIZE_H
end_ifndef
begin_define
DECL|macro|QPAGESIZE_H
define|#
directive|define
name|QPAGESIZE_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qsharedpointer.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|B0
argument_list|)
DECL|macro|B0
undef|#
directive|undef
name|B0
comment|// Terminal hang-up.  We assume that you do not want that.
endif|#
directive|endif
DECL|variable|QPageSizePrivate
name|class
name|QPageSizePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QString
name|class
name|QString
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QSize
name|class
name|QSize
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QSizeF
name|class
name|QSizeF
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QPageSize
block|{
name|public
label|:
comment|// ### Qt6 Re-order and remove duplicates
comment|// NOTE: Must keep in sync with QPagedPrintEngine and QPrinter
enum|enum
name|PageSizeId
block|{
comment|// Existing Qt sizes
name|A4
block|,
name|B5
block|,
name|Letter
block|,
name|Legal
block|,
name|Executive
block|,
name|A0
block|,
name|A1
block|,
name|A2
block|,
name|A3
block|,
name|A5
block|,
name|A6
block|,
name|A7
block|,
name|A8
block|,
name|A9
block|,
name|B0
block|,
name|B1
block|,
name|B10
block|,
name|B2
block|,
name|B3
block|,
name|B4
block|,
name|B6
block|,
name|B7
block|,
name|B8
block|,
name|B9
block|,
name|C5E
block|,
name|Comm10E
block|,
name|DLE
block|,
name|Folio
block|,
name|Ledger
block|,
name|Tabloid
block|,
name|Custom
block|,
comment|// New values derived from PPD standard
name|A10
block|,
name|A3Extra
block|,
name|A4Extra
block|,
name|A4Plus
block|,
name|A4Small
block|,
name|A5Extra
block|,
name|B5Extra
block|,
name|JisB0
block|,
name|JisB1
block|,
name|JisB2
block|,
name|JisB3
block|,
name|JisB4
block|,
name|JisB5
block|,
name|JisB6
block|,
name|JisB7
block|,
name|JisB8
block|,
name|JisB9
block|,
name|JisB10
block|,
comment|// AnsiA = Letter,
comment|// AnsiB = Ledger,
name|AnsiC
block|,
name|AnsiD
block|,
name|AnsiE
block|,
name|LegalExtra
block|,
name|LetterExtra
block|,
name|LetterPlus
block|,
name|LetterSmall
block|,
name|TabloidExtra
block|,
name|ArchA
block|,
name|ArchB
block|,
name|ArchC
block|,
name|ArchD
block|,
name|ArchE
block|,
name|Imperial7x9
block|,
name|Imperial8x10
block|,
name|Imperial9x11
block|,
name|Imperial9x12
block|,
name|Imperial10x11
block|,
name|Imperial10x13
block|,
name|Imperial10x14
block|,
name|Imperial12x11
block|,
name|Imperial15x11
block|,
name|ExecutiveStandard
block|,
name|Note
block|,
name|Quarto
block|,
name|Statement
block|,
name|SuperA
block|,
name|SuperB
block|,
name|Postcard
block|,
name|DoublePostcard
block|,
name|Prc16K
block|,
name|Prc32K
block|,
name|Prc32KBig
block|,
name|FanFoldUS
block|,
name|FanFoldGerman
block|,
name|FanFoldGermanLegal
block|,
name|EnvelopeB4
block|,
name|EnvelopeB5
block|,
name|EnvelopeB6
block|,
name|EnvelopeC0
block|,
name|EnvelopeC1
block|,
name|EnvelopeC2
block|,
name|EnvelopeC3
block|,
name|EnvelopeC4
block|,
comment|// EnvelopeC5 = C5E,
name|EnvelopeC6
block|,
name|EnvelopeC65
block|,
name|EnvelopeC7
block|,
comment|// EnvelopeDL = DLE,
name|Envelope9
block|,
comment|// Envelope10 = Comm10E,
name|Envelope11
block|,
name|Envelope12
block|,
name|Envelope14
block|,
name|EnvelopeMonarch
block|,
name|EnvelopePersonal
block|,
name|EnvelopeChou3
block|,
name|EnvelopeChou4
block|,
name|EnvelopeInvite
block|,
name|EnvelopeItalian
block|,
name|EnvelopeKaku2
block|,
name|EnvelopeKaku3
block|,
name|EnvelopePrc1
block|,
name|EnvelopePrc2
block|,
name|EnvelopePrc3
block|,
name|EnvelopePrc4
block|,
name|EnvelopePrc5
block|,
name|EnvelopePrc6
block|,
name|EnvelopePrc7
block|,
name|EnvelopePrc8
block|,
name|EnvelopePrc9
block|,
name|EnvelopePrc10
block|,
name|EnvelopeYou4
block|,
comment|// Last item, with commonly used synynoms from QPagedPrintEngine / QPrinter
name|LastPageSize
init|=
name|EnvelopeYou4
block|,
name|NPageSize
init|=
name|LastPageSize
block|,
name|NPaperSize
init|=
name|LastPageSize
block|,
comment|// Convenience overloads for naming consistency
name|AnsiA
init|=
name|Letter
block|,
name|AnsiB
init|=
name|Ledger
block|,
name|EnvelopeC5
init|=
name|C5E
block|,
name|EnvelopeDL
init|=
name|DLE
block|,
name|Envelope10
init|=
name|Comm10E
block|}
enum|;
comment|// NOTE: Must keep in sync with QPageLayout::Unit and QPrinter::Unit
enum|enum
name|Unit
block|{
name|Millimeter
block|,
name|Point
block|,
name|Inch
block|,
name|Pica
block|,
name|Didot
block|,
name|Cicero
block|}
enum|;
enum|enum
name|SizeMatchPolicy
block|{
name|FuzzyMatch
block|,
name|FuzzyOrientationMatch
block|,
name|ExactMatch
block|}
enum|;
name|QPageSize
argument_list|()
expr_stmt|;
name|explicit
name|QPageSize
argument_list|(
name|QPageSize
operator|::
name|PageSizeId
name|pageSizeId
argument_list|)
decl_stmt|;
name|QPageSize
argument_list|(
argument|const QSize&pointSize
argument_list|,
argument|const QString&name = QString()
argument_list|,
argument|QPageSize::SizeMatchPolicy matchPolicy = QPageSize::FuzzyMatch
argument_list|)
empty_stmt|;
name|QPageSize
argument_list|(
argument|const QSizeF&size
argument_list|,
argument|QPageSize::Unit units
argument_list|,
argument|const QString&name = QString()
argument_list|,
argument|QPageSize::SizeMatchPolicy matchPolicy = QPageSize::FuzzyMatch
argument_list|)
empty_stmt|;
name|QPageSize
argument_list|(
specifier|const
name|QPageSize
operator|&
name|other
argument_list|)
expr_stmt|;
operator|~
name|QPageSize
argument_list|()
expr_stmt|;
name|QPageSize
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QPageSize
operator|&
name|other
operator|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
name|QPageSize
modifier|&
name|operator
init|=
operator|(
name|QPageSize
operator|&&
name|other
operator|)
block|{
name|swap
argument_list|(
name|other
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
endif|#
directive|endif
name|void
name|swap
parameter_list|(
name|QPageSize
modifier|&
name|other
parameter_list|)
block|{
name|d
operator|.
name|swap
argument_list|(
name|other
operator|.
name|d
argument_list|)
expr_stmt|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QPageSize
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
name|bool
name|isEquivalentTo
argument_list|(
specifier|const
name|QPageSize
operator|&
name|other
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isValid
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|key
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|name
argument_list|()
specifier|const
expr_stmt|;
name|QPageSize
operator|::
name|PageSizeId
name|id
argument_list|()
specifier|const
expr_stmt|;
name|int
name|windowsId
argument_list|()
specifier|const
expr_stmt|;
name|QSizeF
name|definitionSize
argument_list|()
specifier|const
expr_stmt|;
name|QPageSize
operator|::
name|Unit
name|definitionUnits
argument_list|()
specifier|const
expr_stmt|;
name|QSizeF
name|size
argument_list|(
name|QPageSize
operator|::
name|Unit
name|units
argument_list|)
decl|const
decl_stmt|;
name|QSize
name|sizePoints
argument_list|()
specifier|const
expr_stmt|;
name|QSize
name|sizePixels
argument_list|(
name|int
name|resolution
argument_list|)
decl|const
decl_stmt|;
name|QRectF
name|rect
argument_list|(
name|QPageSize
operator|::
name|Unit
name|units
argument_list|)
decl|const
decl_stmt|;
name|QRect
name|rectPoints
argument_list|()
specifier|const
expr_stmt|;
name|QRect
name|rectPixels
argument_list|(
name|int
name|resolution
argument_list|)
decl|const
decl_stmt|;
specifier|static
name|QString
name|key
argument_list|(
name|QPageSize
operator|::
name|PageSizeId
name|pageSizeId
argument_list|)
decl_stmt|;
specifier|static
name|QString
name|name
argument_list|(
name|QPageSize
operator|::
name|PageSizeId
name|pageSizeId
argument_list|)
decl_stmt|;
specifier|static
name|QPageSize
operator|::
name|PageSizeId
name|id
argument_list|(
argument|const QSize&pointSize
argument_list|,
argument|QPageSize::SizeMatchPolicy matchPolicy = QPageSize::FuzzyMatch
argument_list|)
expr_stmt|;
specifier|static
name|QPageSize
operator|::
name|PageSizeId
name|id
argument_list|(
argument|const QSizeF&size
argument_list|,
argument|QPageSize::Unit units
argument_list|,
argument|QPageSize::SizeMatchPolicy matchPolicy = QPageSize::FuzzyMatch
argument_list|)
expr_stmt|;
specifier|static
name|QPageSize
operator|::
name|PageSizeId
name|id
argument_list|(
argument|int windowsId
argument_list|)
expr_stmt|;
specifier|static
name|int
name|windowsId
argument_list|(
name|QPageSize
operator|::
name|PageSizeId
name|pageSizeId
argument_list|)
decl_stmt|;
specifier|static
name|QSizeF
name|definitionSize
argument_list|(
name|QPageSize
operator|::
name|PageSizeId
name|pageSizeId
argument_list|)
decl_stmt|;
specifier|static
name|QPageSize
operator|::
name|Unit
name|definitionUnits
argument_list|(
argument|QPageSize::PageSizeId pageSizeId
argument_list|)
expr_stmt|;
specifier|static
name|QSizeF
name|size
argument_list|(
name|QPageSize
operator|::
name|PageSizeId
name|pageSizeId
argument_list|,
name|QPageSize
operator|::
name|Unit
name|units
argument_list|)
decl_stmt|;
specifier|static
name|QSize
name|sizePoints
argument_list|(
name|QPageSize
operator|::
name|PageSizeId
name|pageSizeId
argument_list|)
decl_stmt|;
specifier|static
name|QSize
name|sizePixels
argument_list|(
name|QPageSize
operator|::
name|PageSizeId
name|pageSizeId
argument_list|,
name|int
name|resolution
argument_list|)
decl_stmt|;
name|private
label|:
name|friend
name|class
name|QPageSizePrivate
decl_stmt|;
name|friend
name|class
name|QPlatformPrintDevice
decl_stmt|;
name|QPageSize
argument_list|(
specifier|const
name|QString
operator|&
name|key
argument_list|,
specifier|const
name|QSize
operator|&
name|pointSize
argument_list|,
specifier|const
name|QString
operator|&
name|name
argument_list|)
expr_stmt|;
name|QPageSize
argument_list|(
argument|int windowsId
argument_list|,
argument|const QSize&pointSize
argument_list|,
argument|const QString&name
argument_list|)
empty_stmt|;
name|QPageSize
argument_list|(
name|QPageSizePrivate
operator|&
name|dd
argument_list|)
expr_stmt|;
name|QSharedDataPointer
operator|<
name|QPageSizePrivate
operator|>
name|d
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|Q_DECLARE_SHARED
argument_list|(
argument|QPageSize
argument_list|)
end_macro
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|Q_GUI_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
name|dbg
operator|,
specifier|const
name|QPageSize
operator|&
name|pageSize
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_END_NAMESPACE
name|Q_DECLARE_METATYPE
argument_list|(
name|QPageSize
argument_list|)
name|Q_DECLARE_METATYPE
argument_list|(
name|QPageSize
operator|::
name|PageSizeId
argument_list|)
name|Q_DECLARE_METATYPE
argument_list|(
name|QPageSize
operator|::
name|Unit
argument_list|)
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QPAGESIZE_H
end_comment
end_unit
