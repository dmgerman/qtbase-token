begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QDRAWHELPER_P_H
end_ifndef
begin_define
DECL|macro|QDRAWHELPER_P_H
define|#
directive|define
name|QDRAWHELPER_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtCore/qglobal.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qcolor.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qpainter.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qimage.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_FT_BEGIN_HEADER
end_ifndef
begin_define
DECL|macro|QT_FT_BEGIN_HEADER
define|#
directive|define
name|QT_FT_BEGIN_HEADER
end_define
begin_define
DECL|macro|QT_FT_END_HEADER
define|#
directive|define
name|QT_FT_END_HEADER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"private/qrasterdefs_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qsimd_p.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
operator|&&
name|_MSCVER
operator|<=
literal|1300
operator|&&
operator|!
name|defined
argument_list|(
name|Q_CC_INTEL
argument_list|)
DECL|macro|Q_STATIC_TEMPLATE_SPECIALIZATION
define|#
directive|define
name|Q_STATIC_TEMPLATE_SPECIALIZATION
value|static
else|#
directive|else
define|#
directive|define
name|Q_STATIC_TEMPLATE_SPECIALIZATION
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_RVCT
argument_list|)
comment|// RVCT doesn't like static template functions
DECL|macro|Q_STATIC_TEMPLATE_FUNCTION
define|#
directive|define
name|Q_STATIC_TEMPLATE_FUNCTION
DECL|macro|Q_STATIC_INLINE_FUNCTION
define|#
directive|define
name|Q_STATIC_INLINE_FUNCTION
value|static __forceinline
else|#
directive|else
define|#
directive|define
name|Q_STATIC_TEMPLATE_FUNCTION
value|static
define|#
directive|define
name|Q_STATIC_INLINE_FUNCTION
value|static inline
endif|#
directive|endif
DECL|variable|AMASK
specifier|static
specifier|const
name|uint
name|AMASK
init|=
literal|0xff000000
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|RMASK
specifier|static
specifier|const
name|uint
name|RMASK
init|=
literal|0x00ff0000
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|GMASK
specifier|static
specifier|const
name|uint
name|GMASK
init|=
literal|0x0000ff00
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|BMASK
specifier|static
specifier|const
name|uint
name|BMASK
init|=
literal|0x000000ff
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*******************************************************************************  * QSpan  *  * duplicate definition of FT_Span  */
end_comment
begin_typedef
DECL|typedef|QSpan
typedef|typedef
name|QT_FT_Span
name|QSpan
typedef|;
end_typedef
begin_struct_decl
struct_decl|struct
name|QSolidData
struct_decl|;
end_struct_decl
begin_struct_decl
struct_decl|struct
name|QTextureData
struct_decl|;
end_struct_decl
begin_struct_decl
struct_decl|struct
name|QGradientData
struct_decl|;
end_struct_decl
begin_struct_decl
struct_decl|struct
name|QLinearGradientData
struct_decl|;
end_struct_decl
begin_struct_decl
struct_decl|struct
name|QRadialGradientData
struct_decl|;
end_struct_decl
begin_struct_decl
struct_decl|struct
name|QConicalGradientData
struct_decl|;
end_struct_decl
begin_struct_decl
struct_decl|struct
name|QSpanData
struct_decl|;
end_struct_decl
begin_decl_stmt
DECL|variable|QGradient
name|class
name|QGradient
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QRasterBuffer
name|class
name|QRasterBuffer
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QClipData
name|class
name|QClipData
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QRasterPaintEngineState
name|class
name|QRasterPaintEngineState
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|ProcessSpans
typedef|typedef
name|QT_FT_SpanFunc
name|ProcessSpans
typedef|;
end_typedef
begin_typedef
DECL|typedef|BitmapBlitFunc
typedef|typedef
name|void
function_decl|(
modifier|*
name|BitmapBlitFunc
function_decl|)
parameter_list|(
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|quint32
name|color
parameter_list|,
specifier|const
name|uchar
modifier|*
name|bitmap
parameter_list|,
name|int
name|mapWidth
parameter_list|,
name|int
name|mapHeight
parameter_list|,
name|int
name|mapStride
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|AlphamapBlitFunc
typedef|typedef
name|void
function_decl|(
modifier|*
name|AlphamapBlitFunc
function_decl|)
parameter_list|(
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|quint32
name|color
parameter_list|,
specifier|const
name|uchar
modifier|*
name|bitmap
parameter_list|,
name|int
name|mapWidth
parameter_list|,
name|int
name|mapHeight
parameter_list|,
name|int
name|mapStride
parameter_list|,
specifier|const
name|QClipData
modifier|*
name|clip
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|AlphaRGBBlitFunc
typedef|typedef
name|void
function_decl|(
modifier|*
name|AlphaRGBBlitFunc
function_decl|)
parameter_list|(
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|quint32
name|color
parameter_list|,
specifier|const
name|uint
modifier|*
name|rgbmask
parameter_list|,
name|int
name|mapWidth
parameter_list|,
name|int
name|mapHeight
parameter_list|,
name|int
name|mapStride
parameter_list|,
specifier|const
name|QClipData
modifier|*
name|clip
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|RectFillFunc
typedef|typedef
name|void
function_decl|(
modifier|*
name|RectFillFunc
function_decl|)
parameter_list|(
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|quint32
name|color
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|SrcOverBlendFunc
typedef|typedef
name|void
function_decl|(
modifier|*
name|SrcOverBlendFunc
function_decl|)
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|src
parameter_list|,
name|int
name|spbl
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|const_alpha
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|SrcOverScaleFunc
typedef|typedef
name|void
function_decl|(
modifier|*
name|SrcOverScaleFunc
function_decl|)
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|src
parameter_list|,
name|int
name|spbl
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|targetRect
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sourceRect
parameter_list|,
specifier|const
name|QRect
modifier|&
name|clipRect
parameter_list|,
name|int
name|const_alpha
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|SrcOverTransformFunc
typedef|typedef
name|void
function_decl|(
modifier|*
name|SrcOverTransformFunc
function_decl|)
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|src
parameter_list|,
name|int
name|spbl
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|targetRect
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sourceRect
parameter_list|,
specifier|const
name|QRect
modifier|&
name|clipRect
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|targetRectTransform
parameter_list|,
name|int
name|const_alpha
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|MemRotateFunc
typedef|typedef
name|void
function_decl|(
modifier|*
name|MemRotateFunc
function_decl|)
parameter_list|(
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|)
function_decl|;
end_typedef
begin_struct
DECL|struct|DrawHelper
struct|struct
name|DrawHelper
block|{
DECL|member|blendColor
name|ProcessSpans
name|blendColor
decl_stmt|;
DECL|member|blendGradient
name|ProcessSpans
name|blendGradient
decl_stmt|;
DECL|member|bitmapBlit
name|BitmapBlitFunc
name|bitmapBlit
decl_stmt|;
DECL|member|alphamapBlit
name|AlphamapBlitFunc
name|alphamapBlit
decl_stmt|;
DECL|member|alphaRGBBlit
name|AlphaRGBBlitFunc
name|alphaRGBBlit
decl_stmt|;
DECL|member|fillRect
name|RectFillFunc
name|fillRect
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
specifier|extern
name|SrcOverBlendFunc
name|qBlendFunctions
index|[
name|QImage
operator|::
name|NImageFormats
index|]
index|[
name|QImage
operator|::
name|NImageFormats
index|]
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|SrcOverScaleFunc
name|qScaleFunctions
index|[
name|QImage
operator|::
name|NImageFormats
index|]
index|[
name|QImage
operator|::
name|NImageFormats
index|]
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|SrcOverTransformFunc
name|qTransformFunctions
index|[
name|QImage
operator|::
name|NImageFormats
index|]
index|[
name|QImage
operator|::
name|NImageFormats
index|]
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|MemRotateFunc
name|qMemRotateFunctions
index|[
name|QImage
operator|::
name|NImageFormats
index|]
index|[
literal|3
index|]
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|DrawHelper
name|qDrawHelper
index|[
name|QImage
operator|::
name|NImageFormats
index|]
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|qBlendTexture
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
function_decl|;
end_function_decl
begin_typedef
DECL|typedef|CompositionFunction
typedef|typedef
name|void
function_decl|(
name|QT_FASTCALL
modifier|*
name|CompositionFunction
function_decl|)
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|CompositionFunctionSolid
typedef|typedef
name|void
function_decl|(
name|QT_FASTCALL
modifier|*
name|CompositionFunctionSolid
function_decl|)
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_typedef
begin_function_decl
name|void
name|qInitDrawhelperAsm
parameter_list|()
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|QRasterPaintEngine
name|class
name|QRasterPaintEngine
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|QSolidData
struct|struct
name|QSolidData
block|{
DECL|member|color
name|uint
name|color
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|QLinearGradientData
struct|struct
name|QLinearGradientData
block|{
struct|struct
block|{
DECL|member|x
name|qreal
name|x
decl_stmt|;
DECL|member|y
name|qreal
name|y
decl_stmt|;
block|}
DECL|member|origin
name|origin
struct|;
struct|struct
block|{
DECL|member|x
name|qreal
name|x
decl_stmt|;
DECL|member|y
name|qreal
name|y
decl_stmt|;
block|}
DECL|member|end
name|end
struct|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|QRadialGradientData
struct|struct
name|QRadialGradientData
block|{
struct|struct
block|{
DECL|member|x
name|qreal
name|x
decl_stmt|;
DECL|member|y
name|qreal
name|y
decl_stmt|;
block|}
DECL|member|center
name|center
struct|;
struct|struct
block|{
DECL|member|x
name|qreal
name|x
decl_stmt|;
DECL|member|y
name|qreal
name|y
decl_stmt|;
block|}
DECL|member|focal
name|focal
struct|;
DECL|member|radius
name|qreal
name|radius
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|QConicalGradientData
struct|struct
name|QConicalGradientData
block|{
struct|struct
block|{
DECL|member|x
name|qreal
name|x
decl_stmt|;
DECL|member|y
name|qreal
name|y
decl_stmt|;
block|}
DECL|member|center
name|center
struct|;
DECL|member|angle
name|qreal
name|angle
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|QGradientData
struct|struct
name|QGradientData
block|{
DECL|member|spread
name|QGradient
operator|::
name|Spread
name|spread
expr_stmt|;
union|union
block|{
DECL|member|linear
name|QLinearGradientData
name|linear
decl_stmt|;
DECL|member|radial
name|QRadialGradientData
name|radial
decl_stmt|;
DECL|member|conical
name|QConicalGradientData
name|conical
decl_stmt|;
block|}
union|;
DECL|macro|GRADIENT_STOPTABLE_SIZE
define|#
directive|define
name|GRADIENT_STOPTABLE_SIZE
value|1024
DECL|member|colorTable
name|uint
modifier|*
name|colorTable
decl_stmt|;
comment|//[GRADIENT_STOPTABLE_SIZE];
DECL|member|alphaColor
name|uint
name|alphaColor
range|:
literal|1
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|QTextureData
struct|struct
name|QTextureData
block|{
DECL|member|imageData
specifier|const
name|uchar
modifier|*
name|imageData
decl_stmt|;
DECL|function|scanLine
specifier|const
name|uchar
modifier|*
name|scanLine
argument_list|(
name|int
name|y
argument_list|)
decl|const
block|{
return|return
name|imageData
operator|+
name|y
operator|*
name|bytesPerLine
return|;
block|}
DECL|member|width
name|int
name|width
decl_stmt|;
DECL|member|height
name|int
name|height
decl_stmt|;
comment|// clip rect
DECL|member|x1
name|int
name|x1
decl_stmt|;
DECL|member|y1
name|int
name|y1
decl_stmt|;
DECL|member|x2
name|int
name|x2
decl_stmt|;
DECL|member|y2
name|int
name|y2
decl_stmt|;
DECL|member|bytesPerLine
name|int
name|bytesPerLine
decl_stmt|;
DECL|member|format
name|QImage
operator|::
name|Format
name|format
expr_stmt|;
DECL|member|colorTable
specifier|const
name|QVector
operator|<
name|QRgb
operator|>
operator|*
name|colorTable
expr_stmt|;
DECL|member|hasAlpha
name|bool
name|hasAlpha
decl_stmt|;
DECL|enum|Type
enum|enum
name|Type
block|{
DECL|enumerator|Plain
name|Plain
block|,
DECL|enumerator|Tiled
name|Tiled
block|}
enum|;
DECL|member|type
name|Type
name|type
decl_stmt|;
DECL|member|const_alpha
name|int
name|const_alpha
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|QSpanData
struct|struct
name|QSpanData
block|{
DECL|function|QSpanData
name|QSpanData
argument_list|()
operator|:
name|tempImage
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|~QSpanData
operator|~
name|QSpanData
argument_list|()
block|{
name|delete
name|tempImage
block|; }
DECL|member|rasterBuffer
name|QRasterBuffer
operator|*
name|rasterBuffer
expr_stmt|;
DECL|member|blend
name|ProcessSpans
name|blend
decl_stmt|;
DECL|member|unclipped_blend
name|ProcessSpans
name|unclipped_blend
decl_stmt|;
DECL|member|bitmapBlit
name|BitmapBlitFunc
name|bitmapBlit
decl_stmt|;
DECL|member|alphamapBlit
name|AlphamapBlitFunc
name|alphamapBlit
decl_stmt|;
DECL|member|alphaRGBBlit
name|AlphaRGBBlitFunc
name|alphaRGBBlit
decl_stmt|;
DECL|member|fillRect
name|RectFillFunc
name|fillRect
decl_stmt|;
DECL|member|m11
DECL|member|m12
DECL|member|m13
DECL|member|m21
DECL|member|m22
DECL|member|m23
DECL|member|m33
DECL|member|dx
DECL|member|dy
name|qreal
name|m11
decl_stmt|,
name|m12
decl_stmt|,
name|m13
decl_stmt|,
name|m21
decl_stmt|,
name|m22
decl_stmt|,
name|m23
decl_stmt|,
name|m33
decl_stmt|,
name|dx
decl_stmt|,
name|dy
decl_stmt|;
comment|// inverse xform matrix
DECL|member|clip
specifier|const
name|QClipData
modifier|*
name|clip
decl_stmt|;
DECL|enum|Type
enum|enum
name|Type
block|{
DECL|enumerator|None
name|None
block|,
DECL|enumerator|Solid
name|Solid
block|,
DECL|enumerator|LinearGradient
name|LinearGradient
block|,
DECL|enumerator|RadialGradient
name|RadialGradient
block|,
DECL|enumerator|ConicalGradient
name|ConicalGradient
block|,
DECL|enumerator|Texture
name|Texture
block|}
DECL|member|type
name|type
range|:
literal|8
enum|;
DECL|member|txop
name|int
name|txop
range|:
literal|8
decl_stmt|;
DECL|member|fast_matrix
name|int
name|fast_matrix
range|:
literal|1
decl_stmt|;
DECL|member|bilinear
name|bool
name|bilinear
decl_stmt|;
DECL|member|tempImage
name|QImage
modifier|*
name|tempImage
decl_stmt|;
union|union
block|{
DECL|member|solid
name|QSolidData
name|solid
decl_stmt|;
DECL|member|gradient
name|QGradientData
name|gradient
decl_stmt|;
DECL|member|texture
name|QTextureData
name|texture
decl_stmt|;
block|}
union|;
name|void
name|init
parameter_list|(
name|QRasterBuffer
modifier|*
name|rb
parameter_list|,
specifier|const
name|QRasterPaintEngine
modifier|*
name|pe
parameter_list|)
function_decl|;
name|void
name|setup
argument_list|(
specifier|const
name|QBrush
operator|&
name|brush
argument_list|,
name|int
name|alpha
argument_list|,
name|QPainter
operator|::
name|CompositionMode
name|compositionMode
argument_list|)
decl_stmt|;
name|void
name|setupMatrix
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|int
name|bilinear
parameter_list|)
function_decl|;
name|void
name|initTexture
argument_list|(
specifier|const
name|QImage
operator|*
name|image
argument_list|,
name|int
name|alpha
argument_list|,
name|QTextureData
operator|::
name|Type
operator|=
name|QTextureData
operator|::
name|Plain
argument_list|,
specifier|const
name|QRect
operator|&
name|sourceRect
operator|=
name|QRect
argument_list|()
argument_list|)
decl_stmt|;
name|void
name|adjustSpanMethods
parameter_list|()
function_decl|;
block|}
struct|;
end_struct
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_RVCT
argument_list|)
end_if
begin_pragma
pragma|#
directive|pragma
name|push
end_pragma
begin_pragma
pragma|#
directive|pragma
name|arm
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|INTERPOLATE_PIXEL_255
name|Q_STATIC_INLINE_FUNCTION
name|uint
name|INTERPOLATE_PIXEL_255
parameter_list|(
name|uint
name|x
parameter_list|,
name|uint
name|a
parameter_list|,
name|uint
name|y
parameter_list|,
name|uint
name|b
parameter_list|)
block|{
name|uint
name|t
init|=
operator|(
name|x
operator|&
literal|0xff00ff
operator|)
operator|*
name|a
operator|+
operator|(
name|y
operator|&
literal|0xff00ff
operator|)
operator|*
name|b
decl_stmt|;
name|t
operator|=
operator|(
name|t
operator|+
operator|(
operator|(
name|t
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|+
literal|0x800080
operator|)
operator|>>
literal|8
expr_stmt|;
name|t
operator|&=
literal|0xff00ff
expr_stmt|;
name|x
operator|=
operator|(
operator|(
name|x
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|*
name|a
operator|+
operator|(
operator|(
name|y
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|*
name|b
expr_stmt|;
name|x
operator|=
operator|(
name|x
operator|+
operator|(
operator|(
name|x
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|+
literal|0x800080
operator|)
expr_stmt|;
name|x
operator|&=
literal|0xff00ff00
expr_stmt|;
name|x
operator||=
name|t
expr_stmt|;
return|return
name|x
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_RVCT
argument_list|)
end_if
begin_pragma
pragma|#
directive|pragma
name|pop
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|QT_POINTER_SIZE
operator|==
literal|8
end_if
begin_comment
comment|// 64-bit versions
end_comment
begin_function
DECL|function|INTERPOLATE_PIXEL_256
name|Q_STATIC_INLINE_FUNCTION
name|uint
name|INTERPOLATE_PIXEL_256
parameter_list|(
name|uint
name|x
parameter_list|,
name|uint
name|a
parameter_list|,
name|uint
name|y
parameter_list|,
name|uint
name|b
parameter_list|)
block|{
name|quint64
name|t
init|=
operator|(
operator|(
operator|(
name|quint64
argument_list|(
name|x
argument_list|)
operator|)
operator||
operator|(
operator|(
name|quint64
argument_list|(
name|x
argument_list|)
operator|)
operator|<<
literal|24
operator|)
operator|)
operator|&
literal|0x00ff00ff00ff00ff
operator|)
operator|*
name|a
decl_stmt|;
name|t
operator|+=
operator|(
operator|(
operator|(
name|quint64
argument_list|(
name|y
argument_list|)
operator|)
operator||
operator|(
operator|(
name|quint64
argument_list|(
name|y
argument_list|)
operator|)
operator|<<
literal|24
operator|)
operator|)
operator|&
literal|0x00ff00ff00ff00ff
operator|)
operator|*
name|b
expr_stmt|;
name|t
operator|>>=
literal|8
expr_stmt|;
name|t
operator|&=
literal|0x00ff00ff00ff00ff
expr_stmt|;
return|return
operator|(
name|uint
argument_list|(
name|t
argument_list|)
operator|)
operator||
operator|(
name|uint
argument_list|(
name|t
operator|>>
literal|24
argument_list|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|BYTE_MUL
name|Q_STATIC_INLINE_FUNCTION
name|uint
name|BYTE_MUL
parameter_list|(
name|uint
name|x
parameter_list|,
name|uint
name|a
parameter_list|)
block|{
name|quint64
name|t
init|=
operator|(
operator|(
operator|(
name|quint64
argument_list|(
name|x
argument_list|)
operator|)
operator||
operator|(
operator|(
name|quint64
argument_list|(
name|x
argument_list|)
operator|)
operator|<<
literal|24
operator|)
operator|)
operator|&
literal|0x00ff00ff00ff00ff
operator|)
operator|*
name|a
decl_stmt|;
name|t
operator|=
operator|(
name|t
operator|+
operator|(
operator|(
name|t
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff00ff00ff
operator|)
operator|+
literal|0x80008000800080
operator|)
operator|>>
literal|8
expr_stmt|;
name|t
operator|&=
literal|0x00ff00ff00ff00ff
expr_stmt|;
return|return
operator|(
name|uint
argument_list|(
name|t
argument_list|)
operator|)
operator||
operator|(
name|uint
argument_list|(
name|t
operator|>>
literal|24
argument_list|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|PREMUL
name|Q_STATIC_INLINE_FUNCTION
name|uint
name|PREMUL
parameter_list|(
name|uint
name|x
parameter_list|)
block|{
name|uint
name|a
init|=
name|x
operator|>>
literal|24
decl_stmt|;
name|quint64
name|t
init|=
operator|(
operator|(
operator|(
name|quint64
argument_list|(
name|x
argument_list|)
operator|)
operator||
operator|(
operator|(
name|quint64
argument_list|(
name|x
argument_list|)
operator|)
operator|<<
literal|24
operator|)
operator|)
operator|&
literal|0x00ff00ff00ff00ff
operator|)
operator|*
name|a
decl_stmt|;
name|t
operator|=
operator|(
name|t
operator|+
operator|(
operator|(
name|t
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff00ff00ff
operator|)
operator|+
literal|0x80008000800080
operator|)
operator|>>
literal|8
expr_stmt|;
name|t
operator|&=
literal|0x000000ff00ff00ff
expr_stmt|;
return|return
operator|(
name|uint
argument_list|(
name|t
argument_list|)
operator|)
operator||
operator|(
name|uint
argument_list|(
name|t
operator|>>
literal|24
argument_list|)
operator|)
operator||
operator|(
name|a
operator|<<
literal|24
operator|)
return|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_comment
comment|// 32-bit versions
end_comment
begin_function
DECL|function|INTERPOLATE_PIXEL_256
name|Q_STATIC_INLINE_FUNCTION
name|uint
name|INTERPOLATE_PIXEL_256
parameter_list|(
name|uint
name|x
parameter_list|,
name|uint
name|a
parameter_list|,
name|uint
name|y
parameter_list|,
name|uint
name|b
parameter_list|)
block|{
name|uint
name|t
init|=
operator|(
name|x
operator|&
literal|0xff00ff
operator|)
operator|*
name|a
operator|+
operator|(
name|y
operator|&
literal|0xff00ff
operator|)
operator|*
name|b
decl_stmt|;
name|t
operator|>>=
literal|8
expr_stmt|;
name|t
operator|&=
literal|0xff00ff
expr_stmt|;
name|x
operator|=
operator|(
operator|(
name|x
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|*
name|a
operator|+
operator|(
operator|(
name|y
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|*
name|b
expr_stmt|;
name|x
operator|&=
literal|0xff00ff00
expr_stmt|;
name|x
operator||=
name|t
expr_stmt|;
return|return
name|x
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_RVCT
argument_list|)
end_if
begin_pragma
pragma|#
directive|pragma
name|push
end_pragma
begin_pragma
pragma|#
directive|pragma
name|arm
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|BYTE_MUL
name|Q_STATIC_INLINE_FUNCTION
name|uint
name|BYTE_MUL
parameter_list|(
name|uint
name|x
parameter_list|,
name|uint
name|a
parameter_list|)
block|{
name|uint
name|t
init|=
operator|(
name|x
operator|&
literal|0xff00ff
operator|)
operator|*
name|a
decl_stmt|;
name|t
operator|=
operator|(
name|t
operator|+
operator|(
operator|(
name|t
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|+
literal|0x800080
operator|)
operator|>>
literal|8
expr_stmt|;
name|t
operator|&=
literal|0xff00ff
expr_stmt|;
name|x
operator|=
operator|(
operator|(
name|x
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|*
name|a
expr_stmt|;
name|x
operator|=
operator|(
name|x
operator|+
operator|(
operator|(
name|x
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|+
literal|0x800080
operator|)
expr_stmt|;
name|x
operator|&=
literal|0xff00ff00
expr_stmt|;
name|x
operator||=
name|t
expr_stmt|;
return|return
name|x
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_RVCT
argument_list|)
end_if
begin_pragma
pragma|#
directive|pragma
name|pop
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|PREMUL
name|Q_STATIC_INLINE_FUNCTION
name|uint
name|PREMUL
parameter_list|(
name|uint
name|x
parameter_list|)
block|{
name|uint
name|a
init|=
name|x
operator|>>
literal|24
decl_stmt|;
name|uint
name|t
init|=
operator|(
name|x
operator|&
literal|0xff00ff
operator|)
operator|*
name|a
decl_stmt|;
name|t
operator|=
operator|(
name|t
operator|+
operator|(
operator|(
name|t
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|+
literal|0x800080
operator|)
operator|>>
literal|8
expr_stmt|;
name|t
operator|&=
literal|0xff00ff
expr_stmt|;
name|x
operator|=
operator|(
operator|(
name|x
operator|>>
literal|8
operator|)
operator|&
literal|0xff
operator|)
operator|*
name|a
expr_stmt|;
name|x
operator|=
operator|(
name|x
operator|+
operator|(
operator|(
name|x
operator|>>
literal|8
operator|)
operator|&
literal|0xff
operator|)
operator|+
literal|0x80
operator|)
expr_stmt|;
name|x
operator|&=
literal|0xff00
expr_stmt|;
name|x
operator||=
name|t
operator||
operator|(
name|a
operator|<<
literal|24
operator|)
expr_stmt|;
return|return
name|x
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|BYTE_MUL_RGB16
name|Q_STATIC_INLINE_FUNCTION
name|uint
name|BYTE_MUL_RGB16
parameter_list|(
name|uint
name|x
parameter_list|,
name|uint
name|a
parameter_list|)
block|{
name|a
operator|+=
literal|1
expr_stmt|;
name|uint
name|t
init|=
operator|(
operator|(
operator|(
name|x
operator|&
literal|0x07e0
operator|)
operator|*
name|a
operator|)
operator|>>
literal|8
operator|)
operator|&
literal|0x07e0
decl_stmt|;
name|t
operator||=
operator|(
operator|(
operator|(
name|x
operator|&
literal|0xf81f
operator|)
operator|*
operator|(
name|a
operator|>>
literal|2
operator|)
operator|)
operator|>>
literal|6
operator|)
operator|&
literal|0xf81f
expr_stmt|;
return|return
name|t
return|;
block|}
end_function
begin_function
DECL|function|BYTE_MUL_RGB16_32
name|Q_STATIC_INLINE_FUNCTION
name|uint
name|BYTE_MUL_RGB16_32
parameter_list|(
name|uint
name|x
parameter_list|,
name|uint
name|a
parameter_list|)
block|{
name|uint
name|t
init|=
operator|(
operator|(
operator|(
name|x
operator|&
literal|0xf81f07e0
operator|)
operator|>>
literal|5
operator|)
operator|*
name|a
operator|)
operator|&
literal|0xf81f07e0
decl_stmt|;
name|t
operator||=
operator|(
operator|(
operator|(
name|x
operator|&
literal|0x07e0f81f
operator|)
operator|*
name|a
operator|)
operator|>>
literal|5
operator|)
operator|&
literal|0x07e0f81f
expr_stmt|;
return|return
name|t
return|;
block|}
end_function
begin_define
DECL|macro|INV_PREMUL
define|#
directive|define
name|INV_PREMUL
parameter_list|(
name|p
parameter_list|)
define|\
value|(qAlpha(p) == 0 ? 0 :                               \     ((qAlpha(p)<< 24)                                  \      | (((255*qRed(p))/ qAlpha(p))<< 16)               \      | (((255*qGreen(p)) / qAlpha(p))<< 8)            \      | ((255*qBlue(p)) / qAlpha(p))))
end_define
begin_expr_stmt
DECL|variable|DST
name|template
operator|<
name|class
name|DST
operator|,
name|class
name|SRC
operator|>
DECL|function|qt_colorConvert
specifier|inline
name|DST
name|qt_colorConvert
argument_list|(
argument|SRC color
argument_list|,
argument|DST dummy
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
name|dummy
argument_list|)
block|;
return|return
name|DST
argument_list|(
name|color
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
DECL|function|qt_colorConvert
specifier|inline
name|quint32
name|qt_colorConvert
argument_list|(
argument|quint16 color
argument_list|,
argument|quint32 dummy
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
name|dummy
argument_list|)
block|;
specifier|const
name|int
name|r
operator|=
operator|(
name|color
operator|&
literal|0xf800
operator|)
block|;
specifier|const
name|int
name|g
operator|=
operator|(
name|color
operator|&
literal|0x07e0
operator|)
block|;
specifier|const
name|int
name|b
operator|=
operator|(
name|color
operator|&
literal|0x001f
operator|)
block|;
specifier|const
name|int
name|tr
operator|=
operator|(
name|r
operator|>>
literal|8
operator|)
operator||
operator|(
name|r
operator|>>
literal|13
operator|)
block|;
specifier|const
name|int
name|tg
operator|=
operator|(
name|g
operator|>>
literal|3
operator|)
operator||
operator|(
name|g
operator|>>
literal|9
operator|)
block|;
specifier|const
name|int
name|tb
operator|=
operator|(
name|b
operator|<<
literal|3
operator|)
operator||
operator|(
name|b
operator|>>
literal|2
operator|)
block|;
return|return
name|qRgb
argument_list|(
name|tr
argument_list|,
name|tg
argument_list|,
name|tb
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
DECL|function|qt_colorConvert
specifier|inline
name|quint16
name|qt_colorConvert
argument_list|(
argument|quint32 color
argument_list|,
argument|quint16 dummy
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
name|dummy
argument_list|)
block|;
specifier|const
name|int
name|r
operator|=
name|qRed
argument_list|(
name|color
argument_list|)
operator|<<
literal|8
block|;
specifier|const
name|int
name|g
operator|=
name|qGreen
argument_list|(
name|color
argument_list|)
operator|<<
literal|3
block|;
specifier|const
name|int
name|b
operator|=
name|qBlue
argument_list|(
name|color
argument_list|)
operator|>>
literal|3
block|;
return|return
operator|(
name|r
operator|&
literal|0xf800
operator|)
operator||
operator|(
name|g
operator|&
literal|0x07e0
operator|)
operator||
operator|(
name|b
operator|&
literal|0x001f
operator|)
return|;
block|}
end_expr_stmt
begin_decl_stmt
name|class
name|quint32p
block|{
name|public
label|:
specifier|inline
name|quint32p
argument_list|(
argument|quint32 v
argument_list|)
operator|:
name|data
argument_list|(
argument|PREMUL(v)
argument_list|)
block|{}
specifier|inline
name|operator
name|quint32
argument_list|()
specifier|const
block|{
return|return
name|data
return|;
block|}
specifier|inline
name|operator
name|quint16
argument_list|()
specifier|const
block|{
return|return
name|qt_colorConvert
operator|<
name|quint16
operator|,
name|quint32
operator|>
operator|(
name|data
operator|,
literal|0
operator|)
return|;
block|}
name|Q_STATIC_INLINE_FUNCTION
name|quint32p
name|fromRawData
parameter_list|(
name|quint32
name|v
parameter_list|)
block|{
name|quint32p
name|p
decl_stmt|;
name|p
operator|.
name|data
operator|=
name|v
expr_stmt|;
return|return
name|p
return|;
block|}
name|private
label|:
name|quint32p
argument_list|()
block|{}
name|quint32
name|data
decl_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
name|Q_PACKED
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|class
name|qabgr8888
block|{
name|public
label|:
specifier|inline
name|qabgr8888
argument_list|(
argument|quint32 v
argument_list|)
block|{
name|data
operator|=
name|qRgba
argument_list|(
name|qBlue
argument_list|(
name|v
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|v
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|v
argument_list|)
argument_list|,
name|qAlpha
argument_list|(
name|v
argument_list|)
argument_list|)
block|;     }
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|qabgr8888
operator|&
name|v
operator|)
specifier|const
block|{
return|return
name|data
operator|==
name|v
operator|.
name|data
return|;
block|}
name|private
label|:
name|quint32
name|data
decl_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
name|Q_PACKED
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|qrgb565
name|class
name|qrgb565
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|qargb8565
block|{
name|public
label|:
name|Q_STATIC_INLINE_FUNCTION
name|bool
name|hasAlpha
parameter_list|()
block|{
return|return
name|true
return|;
block|}
specifier|inline
name|qargb8565
argument_list|()
block|{}
specifier|inline
name|qargb8565
argument_list|(
argument|quint32 v
argument_list|)
expr_stmt|;
specifier|inline
name|explicit
name|qargb8565
parameter_list|(
name|quint32p
name|v
parameter_list|)
function_decl|;
specifier|inline
name|qargb8565
argument_list|(
specifier|const
name|qargb8565
operator|&
name|v
argument_list|)
expr_stmt|;
specifier|inline
name|qargb8565
argument_list|(
specifier|const
name|qrgb565
operator|&
name|v
argument_list|)
expr_stmt|;
specifier|inline
name|operator
name|quint32
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|operator
name|quint16
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|quint8
name|alpha
argument_list|()
specifier|const
block|{
return|return
name|data
index|[
literal|0
index|]
return|;
block|}
specifier|inline
name|qargb8565
name|truncedAlpha
parameter_list|()
block|{
name|data
index|[
literal|0
index|]
operator|&=
literal|0xf8
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|&=
literal|0xdf
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|Q_STATIC_INLINE_FUNCTION
name|quint8
name|alpha
parameter_list|(
name|quint8
name|a
parameter_list|)
block|{
return|return
operator|(
name|a
operator|+
literal|1
operator|)
operator|>>
literal|3
return|;
block|}
name|Q_STATIC_INLINE_FUNCTION
name|quint8
name|ialpha
parameter_list|(
name|quint8
name|a
parameter_list|)
block|{
return|return
literal|0x20
operator|-
name|alpha
argument_list|(
name|a
argument_list|)
return|;
block|}
specifier|inline
name|qargb8565
name|byte_mul
argument_list|(
name|quint8
name|a
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|qargb8565
name|operator
operator|+
operator|(
name|qargb8565
name|v
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|qargb8565
operator|&
name|v
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|quint32
name|rawValue
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|quint16
name|rawValue16
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|friend
name|class
name|qrgb565
decl_stmt|;
name|quint8
name|data
index|[
literal|3
index|]
decl_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
name|Q_PACKED
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|class
name|qrgb565
block|{
name|public
label|:
name|Q_STATIC_INLINE_FUNCTION
name|bool
name|hasAlpha
parameter_list|()
block|{
return|return
name|false
return|;
block|}
name|qrgb565
argument_list|(
argument|int v =
literal|0
argument_list|)
block|:
name|data
argument_list|(
argument|v
argument_list|)
block|{}
specifier|inline
name|explicit
name|qrgb565
parameter_list|(
name|quint32p
name|v
parameter_list|)
function_decl|;
specifier|inline
name|explicit
name|qrgb565
parameter_list|(
name|quint32
name|v
parameter_list|)
function_decl|;
specifier|inline
name|explicit
name|qrgb565
parameter_list|(
specifier|const
name|qargb8565
modifier|&
name|v
parameter_list|)
function_decl|;
specifier|inline
name|operator
name|quint32
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|operator
name|quint16
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|qrgb565
name|operator
operator|+
operator|(
name|qrgb565
name|v
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|quint8
name|alpha
argument_list|()
specifier|const
block|{
return|return
literal|0xff
return|;
block|}
specifier|inline
name|qrgb565
name|truncedAlpha
parameter_list|()
block|{
return|return
operator|*
name|this
return|;
block|}
name|Q_STATIC_INLINE_FUNCTION
name|quint8
name|alpha
parameter_list|(
name|quint8
name|a
parameter_list|)
block|{
return|return
operator|(
name|a
operator|+
literal|1
operator|)
operator|>>
literal|3
return|;
block|}
name|Q_STATIC_INLINE_FUNCTION
name|quint8
name|ialpha
parameter_list|(
name|quint8
name|a
parameter_list|)
block|{
return|return
literal|0x20
operator|-
name|alpha
argument_list|(
name|a
argument_list|)
return|;
block|}
specifier|inline
name|qrgb565
name|byte_mul
argument_list|(
name|quint8
name|a
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|qrgb565
operator|&
name|v
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|quint16
name|rawValue
argument_list|()
specifier|const
block|{
return|return
name|data
return|;
block|}
name|private
label|:
name|friend
name|class
name|qargb8565
decl_stmt|;
name|quint16
name|data
decl_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
name|Q_PACKED
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|function|qargb8565
name|qargb8565
operator|::
name|qargb8565
argument_list|(
argument|quint32 v
argument_list|)
block|{
operator|*
name|this
operator|=
name|qargb8565
argument_list|(
name|quint32p
argument_list|(
name|v
argument_list|)
argument_list|)
block|; }
DECL|function|qargb8565
name|qargb8565
operator|::
name|qargb8565
argument_list|(
argument|quint32p v
argument_list|)
block|{
name|data
index|[
literal|0
index|]
operator|=
name|qAlpha
argument_list|(
name|v
argument_list|)
block|;
specifier|const
name|int
name|r
operator|=
name|qRed
argument_list|(
name|v
argument_list|)
block|;
specifier|const
name|int
name|g
operator|=
name|qGreen
argument_list|(
name|v
argument_list|)
block|;
specifier|const
name|int
name|b
operator|=
name|qBlue
argument_list|(
name|v
argument_list|)
block|;
name|data
index|[
literal|1
index|]
operator|=
operator|(
operator|(
name|g
operator|<<
literal|3
operator|)
operator|&
literal|0xe0
operator|)
operator||
operator|(
name|b
operator|>>
literal|3
operator|)
block|;
name|data
index|[
literal|2
index|]
operator|=
operator|(
name|r
operator|&
literal|0xf8
operator|)
operator||
operator|(
name|g
operator|>>
literal|5
operator|)
block|; }
DECL|function|qargb8565
name|qargb8565
operator|::
name|qargb8565
argument_list|(
argument|const qargb8565&v
argument_list|)
block|{
name|data
index|[
literal|0
index|]
operator|=
name|v
operator|.
name|data
index|[
literal|0
index|]
block|;
name|data
index|[
literal|1
index|]
operator|=
name|v
operator|.
name|data
index|[
literal|1
index|]
block|;
name|data
index|[
literal|2
index|]
operator|=
name|v
operator|.
name|data
index|[
literal|2
index|]
block|; }
DECL|function|qargb8565
name|qargb8565
operator|::
name|qargb8565
argument_list|(
argument|const qrgb565&v
argument_list|)
block|{
name|data
index|[
literal|0
index|]
operator|=
literal|0xff
block|;
name|data
index|[
literal|1
index|]
operator|=
name|v
operator|.
name|data
operator|&
literal|0xff
block|;
name|data
index|[
literal|2
index|]
operator|=
name|v
operator|.
name|data
operator|>>
literal|8
block|; }
DECL|function|quint32
name|qargb8565
operator|::
name|operator
name|quint32
argument_list|()
specifier|const
block|{
specifier|const
name|quint16
name|rgb
operator|=
operator|(
name|data
index|[
literal|2
index|]
operator|<<
literal|8
operator|)
operator||
name|data
index|[
literal|1
index|]
block|;
specifier|const
name|int
name|a
operator|=
name|data
index|[
literal|0
index|]
block|;
specifier|const
name|int
name|r
operator|=
operator|(
name|rgb
operator|&
literal|0xf800
operator|)
block|;
specifier|const
name|int
name|g
operator|=
operator|(
name|rgb
operator|&
literal|0x07e0
operator|)
block|;
specifier|const
name|int
name|b
operator|=
operator|(
name|rgb
operator|&
literal|0x001f
operator|)
block|;
specifier|const
name|int
name|tr
operator|=
name|qMin
argument_list|(
name|a
argument_list|,
operator|(
name|r
operator|>>
literal|8
operator|)
operator||
operator|(
name|r
operator|>>
literal|13
operator|)
argument_list|)
block|;
specifier|const
name|int
name|tg
operator|=
name|qMin
argument_list|(
name|a
argument_list|,
operator|(
name|g
operator|>>
literal|3
operator|)
operator||
operator|(
name|g
operator|>>
literal|9
operator|)
argument_list|)
block|;
specifier|const
name|int
name|tb
operator|=
name|qMin
argument_list|(
name|a
argument_list|,
operator|(
name|b
operator|<<
literal|3
operator|)
operator||
operator|(
name|b
operator|>>
literal|2
operator|)
argument_list|)
block|;
return|return
name|qRgba
argument_list|(
name|tr
argument_list|,
name|tg
argument_list|,
name|tb
argument_list|,
name|data
index|[
literal|0
index|]
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|quint16
name|qargb8565
operator|::
name|operator
name|quint16
argument_list|()
specifier|const
block|{
return|return
operator|(
name|data
index|[
literal|2
index|]
operator|<<
literal|8
operator|)
operator||
name|data
index|[
literal|1
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|qargb8565
name|qargb8565
operator|::
name|operator
operator|+
operator|(
name|qargb8565
name|v
operator|)
specifier|const
block|{
name|qargb8565
name|t
block|;
name|t
operator|.
name|data
index|[
literal|0
index|]
operator|=
name|data
index|[
literal|0
index|]
operator|+
name|v
operator|.
name|data
index|[
literal|0
index|]
block|;
specifier|const
name|quint16
name|rgb
operator|=
operator|(
operator|(
name|data
index|[
literal|2
index|]
operator|+
name|v
operator|.
name|data
index|[
literal|2
index|]
operator|)
operator|<<
literal|8
operator|)
operator|+
operator|(
name|data
index|[
literal|1
index|]
operator|+
name|v
operator|.
name|data
index|[
literal|1
index|]
operator|)
block|;
name|t
operator|.
name|data
index|[
literal|1
index|]
operator|=
name|rgb
operator|&
literal|0xff
block|;
name|t
operator|.
name|data
index|[
literal|2
index|]
operator|=
name|rgb
operator|>>
literal|8
block|;
return|return
name|t
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|byte_mul
name|qargb8565
name|qargb8565
operator|::
name|byte_mul
argument_list|(
argument|quint8 a
argument_list|)
specifier|const
block|{
name|qargb8565
name|result
block|;
name|result
operator|.
name|data
index|[
literal|0
index|]
operator|=
operator|(
name|data
index|[
literal|0
index|]
operator|*
name|a
operator|)
operator|>>
literal|5
block|;
specifier|const
name|quint16
name|x
operator|=
operator|(
name|data
index|[
literal|2
index|]
operator|<<
literal|8
operator|)
operator||
name|data
index|[
literal|1
index|]
block|;
specifier|const
name|quint16
name|t
operator|=
operator|(
operator|(
operator|(
operator|(
name|x
operator|&
literal|0x07e0
operator|)
operator|>>
literal|5
operator|)
operator|*
name|a
operator|)
operator|&
literal|0x07e0
operator|)
operator||
operator|(
operator|(
operator|(
operator|(
name|x
operator|&
literal|0xf81f
operator|)
operator|*
name|a
operator|)
operator|>>
literal|5
operator|)
operator|&
literal|0xf81f
operator|)
block|;
name|result
operator|.
name|data
index|[
literal|1
index|]
operator|=
name|t
operator|&
literal|0xff
block|;
name|result
operator|.
name|data
index|[
literal|2
index|]
operator|=
name|t
operator|>>
literal|8
block|;
return|return
name|result
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|bool
name|qargb8565
operator|::
name|operator
operator|==
operator|(
specifier|const
name|qargb8565
operator|&
name|v
operator|)
specifier|const
block|{
return|return
name|data
index|[
literal|0
index|]
operator|==
name|v
operator|.
name|data
index|[
literal|0
index|]
operator|&&
name|data
index|[
literal|1
index|]
operator|==
name|v
operator|.
name|data
index|[
literal|1
index|]
operator|&&
name|data
index|[
literal|2
index|]
operator|==
name|v
operator|.
name|data
index|[
literal|2
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|rawValue
name|quint32
name|qargb8565
operator|::
name|rawValue
argument_list|()
specifier|const
block|{
return|return
operator|(
name|data
index|[
literal|2
index|]
operator|<<
literal|16
operator|)
operator||
operator|(
name|data
index|[
literal|1
index|]
operator|<<
literal|8
operator|)
operator||
name|data
index|[
literal|0
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|rawValue16
name|quint16
name|qargb8565
operator|::
name|rawValue16
argument_list|()
specifier|const
block|{
return|return
operator|(
name|data
index|[
literal|2
index|]
operator|<<
literal|8
operator|)
operator||
name|data
index|[
literal|1
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|qrgb565
name|qrgb565
operator|::
name|qrgb565
argument_list|(
argument|quint32p v
argument_list|)
block|{
operator|*
name|this
operator|=
name|qrgb565
argument_list|(
name|quint32
argument_list|(
name|v
argument_list|)
argument_list|)
block|; }
DECL|function|qrgb565
name|qrgb565
operator|::
name|qrgb565
argument_list|(
argument|quint32 v
argument_list|)
block|{
specifier|const
name|int
name|r
operator|=
name|qRed
argument_list|(
name|v
argument_list|)
operator|<<
literal|8
block|;
specifier|const
name|int
name|g
operator|=
name|qGreen
argument_list|(
name|v
argument_list|)
operator|<<
literal|3
block|;
specifier|const
name|int
name|b
operator|=
name|qBlue
argument_list|(
name|v
argument_list|)
operator|>>
literal|3
block|;
name|data
operator|=
operator|(
name|r
operator|&
literal|0xf800
operator|)
operator||
operator|(
name|g
operator|&
literal|0x07e0
operator|)
operator||
operator|(
name|b
operator|&
literal|0x001f
operator|)
block|; }
DECL|function|qrgb565
name|qrgb565
operator|::
name|qrgb565
argument_list|(
argument|const qargb8565&v
argument_list|)
block|{
name|data
operator|=
operator|(
name|v
operator|.
name|data
index|[
literal|2
index|]
operator|<<
literal|8
operator|)
operator||
name|v
operator|.
name|data
index|[
literal|1
index|]
block|; }
DECL|function|quint32
name|qrgb565
operator|::
name|operator
name|quint32
argument_list|()
specifier|const
block|{
specifier|const
name|int
name|r
operator|=
operator|(
name|data
operator|&
literal|0xf800
operator|)
block|;
specifier|const
name|int
name|g
operator|=
operator|(
name|data
operator|&
literal|0x07e0
operator|)
block|;
specifier|const
name|int
name|b
operator|=
operator|(
name|data
operator|&
literal|0x001f
operator|)
block|;
specifier|const
name|int
name|tr
operator|=
operator|(
name|r
operator|>>
literal|8
operator|)
operator||
operator|(
name|r
operator|>>
literal|13
operator|)
block|;
specifier|const
name|int
name|tg
operator|=
operator|(
name|g
operator|>>
literal|3
operator|)
operator||
operator|(
name|g
operator|>>
literal|9
operator|)
block|;
specifier|const
name|int
name|tb
operator|=
operator|(
name|b
operator|<<
literal|3
operator|)
operator||
operator|(
name|b
operator|>>
literal|2
operator|)
block|;
return|return
name|qRgb
argument_list|(
name|tr
argument_list|,
name|tg
argument_list|,
name|tb
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|quint16
name|qrgb565
operator|::
name|operator
name|quint16
argument_list|()
specifier|const
block|{
return|return
name|data
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|qrgb565
name|qrgb565
operator|::
name|operator
operator|+
operator|(
name|qrgb565
name|v
operator|)
specifier|const
block|{
name|qrgb565
name|t
block|;
name|t
operator|.
name|data
operator|=
name|data
operator|+
name|v
operator|.
name|data
block|;
return|return
name|t
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|byte_mul
name|qrgb565
name|qrgb565
operator|::
name|byte_mul
argument_list|(
argument|quint8 a
argument_list|)
specifier|const
block|{
name|qrgb565
name|result
block|;
name|result
operator|.
name|data
operator|=
operator|(
operator|(
operator|(
operator|(
name|data
operator|&
literal|0x07e0
operator|)
operator|>>
literal|5
operator|)
operator|*
name|a
operator|)
operator|&
literal|0x07e0
operator|)
operator||
operator|(
operator|(
operator|(
operator|(
name|data
operator|&
literal|0xf81f
operator|)
operator|*
name|a
operator|)
operator|>>
literal|5
operator|)
operator|&
literal|0xf81f
operator|)
block|;
return|return
name|result
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|bool
name|qrgb565
operator|::
name|operator
operator|==
operator|(
specifier|const
name|qrgb565
operator|&
name|v
operator|)
specifier|const
block|{
return|return
name|data
operator|==
name|v
operator|.
name|data
return|;
block|}
end_expr_stmt
begin_decl_stmt
name|class
name|qbgr565
block|{
name|public
label|:
specifier|inline
name|qbgr565
argument_list|(
argument|quint16 v
argument_list|)
block|{
name|data
operator|=
operator|(
operator|(
name|v
operator|&
literal|0x001f
operator|)
operator|<<
literal|11
operator|)
operator||
operator|(
name|v
operator|&
literal|0x07e0
operator|)
operator||
operator|(
operator|(
name|v
operator|&
literal|0xf800
operator|)
operator|>>
literal|11
operator|)
block|;     }
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|qbgr565
operator|&
name|v
operator|)
specifier|const
block|{
return|return
name|data
operator|==
name|v
operator|.
name|data
return|;
block|}
name|private
label|:
name|quint16
name|data
decl_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
name|Q_PACKED
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|qrgb555
name|class
name|qrgb555
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|qargb8555
block|{
name|public
label|:
name|Q_STATIC_INLINE_FUNCTION
name|bool
name|hasAlpha
parameter_list|()
block|{
return|return
name|true
return|;
block|}
name|qargb8555
argument_list|()
block|{}
specifier|inline
name|qargb8555
argument_list|(
argument|quint32 v
argument_list|)
expr_stmt|;
specifier|inline
name|explicit
name|qargb8555
parameter_list|(
name|quint32p
name|v
parameter_list|)
function_decl|;
specifier|inline
name|qargb8555
argument_list|(
specifier|const
name|qargb8555
operator|&
name|v
argument_list|)
expr_stmt|;
specifier|inline
name|qargb8555
argument_list|(
specifier|const
name|qrgb555
operator|&
name|v
argument_list|)
expr_stmt|;
specifier|inline
name|operator
name|quint32
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|quint8
name|alpha
argument_list|()
specifier|const
block|{
return|return
name|data
index|[
literal|0
index|]
return|;
block|}
specifier|inline
name|qargb8555
name|truncedAlpha
parameter_list|()
block|{
name|data
index|[
literal|0
index|]
operator|&=
literal|0xf8
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|Q_STATIC_INLINE_FUNCTION
name|quint8
name|alpha
parameter_list|(
name|quint8
name|a
parameter_list|)
block|{
return|return
operator|(
name|a
operator|+
literal|1
operator|)
operator|>>
literal|3
return|;
block|}
name|Q_STATIC_INLINE_FUNCTION
name|quint8
name|ialpha
parameter_list|(
name|quint8
name|a
parameter_list|)
block|{
return|return
literal|0x20
operator|-
name|alpha
argument_list|(
name|a
argument_list|)
return|;
block|}
specifier|inline
name|qargb8555
name|operator
operator|+
operator|(
name|qargb8555
name|v
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|qargb8555
name|byte_mul
argument_list|(
name|quint8
name|a
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|qargb8555
operator|&
name|v
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|quint32
name|rawValue
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|friend
name|class
name|qrgb555
decl_stmt|;
name|quint8
name|data
index|[
literal|3
index|]
decl_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
name|Q_PACKED
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|class
name|qrgb555
block|{
name|public
label|:
name|Q_STATIC_INLINE_FUNCTION
name|bool
name|hasAlpha
parameter_list|()
block|{
return|return
name|false
return|;
block|}
specifier|inline
name|qrgb555
argument_list|(
argument|int v =
literal|0
argument_list|)
operator|:
name|data
argument_list|(
argument|v
argument_list|)
block|{}
specifier|inline
name|explicit
name|qrgb555
argument_list|(
argument|quint32p v
argument_list|)
block|{
operator|*
name|this
operator|=
name|qrgb555
argument_list|(
name|quint32
argument_list|(
name|v
argument_list|)
argument_list|)
block|; }
specifier|inline
name|explicit
name|qrgb555
argument_list|(
argument|quint32 v
argument_list|)
block|{
specifier|const
name|int
name|r
operator|=
name|qRed
argument_list|(
name|v
argument_list|)
operator|<<
literal|7
block|;
specifier|const
name|int
name|g
operator|=
name|qGreen
argument_list|(
name|v
argument_list|)
operator|<<
literal|2
block|;
specifier|const
name|int
name|b
operator|=
name|qBlue
argument_list|(
name|v
argument_list|)
operator|>>
literal|3
block|;
name|data
operator|=
operator|(
name|r
operator|&
literal|0x7c00
operator|)
operator||
operator|(
name|g
operator|&
literal|0x03e0
operator|)
operator||
operator|(
name|b
operator|&
literal|0x001f
operator|)
block|;     }
specifier|inline
name|explicit
name|qrgb555
argument_list|(
argument|quint16 v
argument_list|)
block|{
name|data
operator|=
operator|(
operator|(
name|v
operator|>>
literal|1
operator|)
operator|&
operator|(
literal|0x7c00
operator||
literal|0x03e0
operator|)
operator|)
operator||
operator|(
name|v
operator|&
literal|0x001f
operator|)
block|;     }
specifier|inline
name|explicit
name|qrgb555
argument_list|(
specifier|const
name|qargb8555
operator|&
name|v
argument_list|)
expr_stmt|;
specifier|inline
name|operator
name|quint32
argument_list|()
specifier|const
block|{
specifier|const
name|int
name|r
operator|=
operator|(
name|data
operator|&
literal|0x7c00
operator|)
block|;
specifier|const
name|int
name|g
operator|=
operator|(
name|data
operator|&
literal|0x03e0
operator|)
block|;
specifier|const
name|int
name|b
operator|=
operator|(
name|data
operator|&
literal|0x001f
operator|)
block|;
specifier|const
name|int
name|tr
operator|=
operator|(
name|r
operator|>>
literal|7
operator|)
operator||
operator|(
name|r
operator|>>
literal|12
operator|)
block|;
specifier|const
name|int
name|tg
operator|=
operator|(
name|g
operator|>>
literal|2
operator|)
operator||
operator|(
name|g
operator|>>
literal|7
operator|)
block|;
specifier|const
name|int
name|tb
operator|=
operator|(
name|b
operator|<<
literal|3
operator|)
operator||
operator|(
name|b
operator|>>
literal|2
operator|)
block|;
return|return
name|qRgb
argument_list|(
name|tr
argument_list|,
name|tg
argument_list|,
name|tb
argument_list|)
return|;
block|}
specifier|inline
name|operator
name|quint16
argument_list|()
specifier|const
block|{
specifier|const
name|int
name|r
operator|=
operator|(
operator|(
name|data
operator|&
literal|0x7c00
operator|)
operator|<<
literal|1
operator|)
operator|&
literal|0xf800
block|;
specifier|const
name|int
name|g
operator|=
operator|(
operator|(
operator|(
name|data
operator|&
literal|0x03e0
operator|)
operator|<<
literal|1
operator|)
operator||
operator|(
operator|(
name|data
operator|>>
literal|4
operator|)
operator|&
literal|0x0020
operator|)
operator|)
operator|&
literal|0x07e0
block|;
specifier|const
name|int
name|b
operator|=
operator|(
name|data
operator|&
literal|0x001f
operator|)
block|;
return|return
name|r
operator||
name|g
operator||
name|b
return|;
block|}
specifier|inline
name|qrgb555
name|operator
operator|+
operator|(
name|qrgb555
name|v
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|qrgb555
name|byte_mul
argument_list|(
name|quint8
name|a
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|quint8
name|alpha
argument_list|()
specifier|const
block|{
return|return
literal|0xff
return|;
block|}
specifier|inline
name|qrgb555
name|truncedAlpha
parameter_list|()
block|{
return|return
operator|*
name|this
return|;
block|}
name|Q_STATIC_INLINE_FUNCTION
name|quint8
name|alpha
parameter_list|(
name|quint8
name|a
parameter_list|)
block|{
return|return
operator|(
name|a
operator|+
literal|1
operator|)
operator|>>
literal|3
return|;
block|}
name|Q_STATIC_INLINE_FUNCTION
name|quint8
name|ialpha
parameter_list|(
name|quint8
name|a
parameter_list|)
block|{
return|return
literal|0x20
operator|-
name|alpha
argument_list|(
name|a
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|qrgb555
operator|&
name|v
operator|)
specifier|const
block|{
return|return
name|v
operator|.
name|data
operator|==
name|data
return|;
block|}
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|qrgb555
operator|&
name|v
operator|)
specifier|const
block|{
return|return
name|v
operator|.
name|data
operator|!=
name|data
return|;
block|}
specifier|inline
name|quint16
name|rawValue
argument_list|()
specifier|const
block|{
return|return
name|data
return|;
block|}
name|private
label|:
name|friend
name|class
name|qargb8555
decl_stmt|;
name|friend
name|class
name|qbgr555
decl_stmt|;
name|quint16
name|data
decl_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
name|Q_PACKED
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|function|qrgb555
name|qrgb555
operator|::
name|qrgb555
argument_list|(
argument|const qargb8555&v
argument_list|)
block|{
name|data
operator|=
operator|(
name|v
operator|.
name|data
index|[
literal|2
index|]
operator|<<
literal|8
operator|)
operator||
name|v
operator|.
name|data
index|[
literal|1
index|]
block|; }
DECL|function|operator
name|qrgb555
name|qrgb555
operator|::
name|operator
operator|+
operator|(
name|qrgb555
name|v
operator|)
specifier|const
block|{
name|qrgb555
name|t
block|;
name|t
operator|.
name|data
operator|=
name|data
operator|+
name|v
operator|.
name|data
block|;
return|return
name|t
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|byte_mul
name|qrgb555
name|qrgb555
operator|::
name|byte_mul
argument_list|(
argument|quint8 a
argument_list|)
specifier|const
block|{
name|quint16
name|t
operator|=
operator|(
operator|(
operator|(
name|data
operator|&
literal|0x3e0
operator|)
operator|*
name|a
operator|)
operator|>>
literal|5
operator|)
operator|&
literal|0x03e0
block|;
name|t
operator||=
operator|(
operator|(
operator|(
name|data
operator|&
literal|0x7c1f
operator|)
operator|*
name|a
operator|)
operator|>>
literal|5
operator|)
operator|&
literal|0x7c1f
block|;
name|qrgb555
name|result
block|;
name|result
operator|.
name|data
operator|=
name|t
block|;
return|return
name|result
return|;
block|}
end_expr_stmt
begin_decl_stmt
name|class
name|qbgr555
block|{
name|public
label|:
specifier|inline
name|qbgr555
argument_list|(
argument|quint32 v
argument_list|)
block|{
operator|*
name|this
operator|=
name|qbgr555
argument_list|(
name|qrgb555
argument_list|(
name|v
argument_list|)
argument_list|)
block|; }
specifier|inline
name|qbgr555
argument_list|(
argument|qrgb555 v
argument_list|)
block|{
name|data
operator|=
operator|(
operator|(
name|v
operator|.
name|data
operator|&
literal|0x001f
operator|)
operator|<<
literal|10
operator|)
operator||
operator|(
name|v
operator|.
name|data
operator|&
literal|0x03e0
operator|)
operator||
operator|(
operator|(
name|v
operator|.
name|data
operator|&
literal|0x7c00
operator|)
operator|>>
literal|10
operator|)
block|;     }
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|qbgr555
operator|&
name|v
operator|)
specifier|const
block|{
return|return
name|data
operator|==
name|v
operator|.
name|data
return|;
block|}
name|private
label|:
name|quint16
name|data
decl_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
name|Q_PACKED
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|function|qargb8555
name|qargb8555
operator|::
name|qargb8555
argument_list|(
argument|quint32 v
argument_list|)
block|{
name|v
operator|=
name|quint32p
argument_list|(
name|v
argument_list|)
block|;
name|data
index|[
literal|0
index|]
operator|=
name|qAlpha
argument_list|(
name|v
argument_list|)
block|;
specifier|const
name|int
name|r
operator|=
name|qRed
argument_list|(
name|v
argument_list|)
block|;
specifier|const
name|int
name|g
operator|=
name|qGreen
argument_list|(
name|v
argument_list|)
block|;
specifier|const
name|int
name|b
operator|=
name|qBlue
argument_list|(
name|v
argument_list|)
block|;
name|data
index|[
literal|1
index|]
operator|=
operator|(
operator|(
name|g
operator|<<
literal|2
operator|)
operator|&
literal|0xe0
operator|)
operator||
operator|(
name|b
operator|>>
literal|3
operator|)
block|;
name|data
index|[
literal|2
index|]
operator|=
operator|(
operator|(
name|r
operator|>>
literal|1
operator|)
operator|&
literal|0x7c
operator|)
operator||
operator|(
name|g
operator|>>
literal|6
operator|)
block|;  }
DECL|function|qargb8555
name|qargb8555
operator|::
name|qargb8555
argument_list|(
argument|quint32p v
argument_list|)
block|{
name|data
index|[
literal|0
index|]
operator|=
name|qAlpha
argument_list|(
name|v
argument_list|)
block|;
specifier|const
name|int
name|r
operator|=
name|qRed
argument_list|(
name|v
argument_list|)
block|;
specifier|const
name|int
name|g
operator|=
name|qGreen
argument_list|(
name|v
argument_list|)
block|;
specifier|const
name|int
name|b
operator|=
name|qBlue
argument_list|(
name|v
argument_list|)
block|;
name|data
index|[
literal|1
index|]
operator|=
operator|(
operator|(
name|g
operator|<<
literal|2
operator|)
operator|&
literal|0xe0
operator|)
operator||
operator|(
name|b
operator|>>
literal|3
operator|)
block|;
name|data
index|[
literal|2
index|]
operator|=
operator|(
operator|(
name|r
operator|>>
literal|1
operator|)
operator|&
literal|0x7c
operator|)
operator||
operator|(
name|g
operator|>>
literal|6
operator|)
block|; }
DECL|function|qargb8555
name|qargb8555
operator|::
name|qargb8555
argument_list|(
argument|const qargb8555&v
argument_list|)
block|{
name|data
index|[
literal|0
index|]
operator|=
name|v
operator|.
name|data
index|[
literal|0
index|]
block|;
name|data
index|[
literal|1
index|]
operator|=
name|v
operator|.
name|data
index|[
literal|1
index|]
block|;
name|data
index|[
literal|2
index|]
operator|=
name|v
operator|.
name|data
index|[
literal|2
index|]
block|; }
DECL|function|qargb8555
name|qargb8555
operator|::
name|qargb8555
argument_list|(
argument|const qrgb555&v
argument_list|)
block|{
name|data
index|[
literal|0
index|]
operator|=
literal|0xff
block|;
name|data
index|[
literal|1
index|]
operator|=
name|v
operator|.
name|data
operator|&
literal|0xff
block|;
name|data
index|[
literal|2
index|]
operator|=
name|v
operator|.
name|data
operator|>>
literal|8
block|; }
DECL|function|quint32
name|qargb8555
operator|::
name|operator
name|quint32
argument_list|()
specifier|const
block|{
specifier|const
name|quint16
name|rgb
operator|=
operator|(
name|data
index|[
literal|2
index|]
operator|<<
literal|8
operator|)
operator||
name|data
index|[
literal|1
index|]
block|;
specifier|const
name|int
name|r
operator|=
operator|(
name|rgb
operator|&
literal|0x7c00
operator|)
block|;
specifier|const
name|int
name|g
operator|=
operator|(
name|rgb
operator|&
literal|0x03e0
operator|)
block|;
specifier|const
name|int
name|b
operator|=
operator|(
name|rgb
operator|&
literal|0x001f
operator|)
block|;
specifier|const
name|int
name|tr
operator|=
operator|(
name|r
operator|>>
literal|7
operator|)
operator||
operator|(
name|r
operator|>>
literal|12
operator|)
block|;
specifier|const
name|int
name|tg
operator|=
operator|(
name|g
operator|>>
literal|2
operator|)
operator||
operator|(
name|g
operator|>>
literal|7
operator|)
block|;
specifier|const
name|int
name|tb
operator|=
operator|(
name|b
operator|<<
literal|3
operator|)
operator||
operator|(
name|b
operator|>>
literal|2
operator|)
block|;
return|return
name|qRgba
argument_list|(
name|tr
argument_list|,
name|tg
argument_list|,
name|tb
argument_list|,
name|data
index|[
literal|0
index|]
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|bool
name|qargb8555
operator|::
name|operator
operator|==
operator|(
specifier|const
name|qargb8555
operator|&
name|v
operator|)
specifier|const
block|{
return|return
name|data
index|[
literal|0
index|]
operator|==
name|v
operator|.
name|data
index|[
literal|0
index|]
operator|&&
name|data
index|[
literal|1
index|]
operator|==
name|v
operator|.
name|data
index|[
literal|1
index|]
operator|&&
name|data
index|[
literal|2
index|]
operator|==
name|v
operator|.
name|data
index|[
literal|2
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|rawValue
name|quint32
name|qargb8555
operator|::
name|rawValue
argument_list|()
specifier|const
block|{
return|return
operator|(
name|data
index|[
literal|2
index|]
operator|<<
literal|16
operator|)
operator||
operator|(
name|data
index|[
literal|1
index|]
operator|<<
literal|8
operator|)
operator||
name|data
index|[
literal|0
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|qargb8555
name|qargb8555
operator|::
name|operator
operator|+
operator|(
name|qargb8555
name|v
operator|)
specifier|const
block|{
name|qargb8555
name|t
block|;
name|t
operator|.
name|data
index|[
literal|0
index|]
operator|=
name|data
index|[
literal|0
index|]
operator|+
name|v
operator|.
name|data
index|[
literal|0
index|]
block|;
specifier|const
name|quint16
name|rgb
operator|=
operator|(
operator|(
name|data
index|[
literal|2
index|]
operator|+
name|v
operator|.
name|data
index|[
literal|2
index|]
operator|)
operator|<<
literal|8
operator|)
operator|+
operator|(
name|data
index|[
literal|1
index|]
operator|+
name|v
operator|.
name|data
index|[
literal|1
index|]
operator|)
block|;
name|t
operator|.
name|data
index|[
literal|1
index|]
operator|=
name|rgb
operator|&
literal|0xff
block|;
name|t
operator|.
name|data
index|[
literal|2
index|]
operator|=
name|rgb
operator|>>
literal|8
block|;
return|return
name|t
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|byte_mul
name|qargb8555
name|qargb8555
operator|::
name|byte_mul
argument_list|(
argument|quint8 a
argument_list|)
specifier|const
block|{
name|qargb8555
name|result
block|;
name|result
operator|.
name|data
index|[
literal|0
index|]
operator|=
operator|(
name|data
index|[
literal|0
index|]
operator|*
name|a
operator|)
operator|>>
literal|5
block|;
specifier|const
name|quint16
name|x
operator|=
operator|(
name|data
index|[
literal|2
index|]
operator|<<
literal|8
operator|)
operator||
name|data
index|[
literal|1
index|]
block|;
name|quint16
name|t
operator|=
operator|(
operator|(
operator|(
name|x
operator|&
literal|0x3e0
operator|)
operator|*
name|a
operator|)
operator|>>
literal|5
operator|)
operator|&
literal|0x03e0
block|;
name|t
operator||=
operator|(
operator|(
operator|(
name|x
operator|&
literal|0x7c1f
operator|)
operator|*
name|a
operator|)
operator|>>
literal|5
operator|)
operator|&
literal|0x7c1f
block|;
name|result
operator|.
name|data
index|[
literal|1
index|]
operator|=
name|t
operator|&
literal|0xff
block|;
name|result
operator|.
name|data
index|[
literal|2
index|]
operator|=
name|t
operator|>>
literal|8
block|;
return|return
name|result
return|;
block|}
end_expr_stmt
begin_decl_stmt
DECL|variable|qrgb666
name|class
name|qrgb666
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|qargb6666
block|{
name|public
label|:
name|Q_STATIC_INLINE_FUNCTION
name|bool
name|hasAlpha
parameter_list|()
block|{
return|return
name|true
return|;
block|}
specifier|inline
name|qargb6666
argument_list|()
block|{}
specifier|inline
name|qargb6666
argument_list|(
argument|quint32 v
argument_list|)
block|{
operator|*
name|this
operator|=
name|qargb6666
argument_list|(
name|quint32p
argument_list|(
name|v
argument_list|)
argument_list|)
block|; }
specifier|inline
name|explicit
name|qargb6666
argument_list|(
argument|quint32p v
argument_list|)
expr_stmt|;
specifier|inline
name|qargb6666
argument_list|(
specifier|const
name|qargb6666
operator|&
name|v
argument_list|)
expr_stmt|;
specifier|inline
name|qargb6666
argument_list|(
specifier|const
name|qrgb666
operator|&
name|v
argument_list|)
expr_stmt|;
specifier|inline
name|operator
name|quint32
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|quint8
name|alpha
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|qargb6666
name|truncedAlpha
parameter_list|()
block|{
return|return
operator|*
name|this
return|;
block|}
name|Q_STATIC_INLINE_FUNCTION
name|quint8
name|alpha
parameter_list|(
name|quint8
name|a
parameter_list|)
block|{
return|return
operator|(
name|a
operator|+
literal|1
operator|)
operator|>>
literal|2
return|;
block|}
name|Q_STATIC_INLINE_FUNCTION
name|quint8
name|ialpha
parameter_list|(
name|quint8
name|a
parameter_list|)
block|{
return|return
operator|(
literal|255
operator|-
name|a
operator|+
literal|1
operator|)
operator|>>
literal|2
return|;
block|}
specifier|inline
name|qargb6666
name|byte_mul
argument_list|(
name|quint8
name|a
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|qargb6666
name|operator
operator|+
operator|(
name|qargb6666
name|v
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|qargb6666
operator|&
name|v
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|quint32
name|rawValue
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|friend
name|class
name|qrgb666
decl_stmt|;
name|quint8
name|data
index|[
literal|3
index|]
decl_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
name|Q_PACKED
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|class
name|qrgb666
block|{
name|public
label|:
name|Q_STATIC_INLINE_FUNCTION
name|bool
name|hasAlpha
parameter_list|()
block|{
return|return
name|false
return|;
block|}
specifier|inline
name|qrgb666
argument_list|()
block|{}
specifier|inline
name|qrgb666
argument_list|(
argument|quint32 v
argument_list|)
expr_stmt|;
specifier|inline
name|qrgb666
argument_list|(
specifier|const
name|qargb6666
operator|&
name|v
argument_list|)
expr_stmt|;
specifier|inline
name|operator
name|quint32
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|quint8
name|alpha
argument_list|()
specifier|const
block|{
return|return
literal|0xff
return|;
block|}
specifier|inline
name|qrgb666
name|truncedAlpha
parameter_list|()
block|{
return|return
operator|*
name|this
return|;
block|}
name|Q_STATIC_INLINE_FUNCTION
name|quint8
name|alpha
parameter_list|(
name|quint8
name|a
parameter_list|)
block|{
return|return
operator|(
name|a
operator|+
literal|1
operator|)
operator|>>
literal|2
return|;
block|}
name|Q_STATIC_INLINE_FUNCTION
name|quint8
name|ialpha
parameter_list|(
name|quint8
name|a
parameter_list|)
block|{
return|return
operator|(
literal|255
operator|-
name|a
operator|+
literal|1
operator|)
operator|>>
literal|2
return|;
block|}
specifier|inline
name|qrgb666
name|operator
operator|+
operator|(
name|qrgb666
name|v
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|qrgb666
name|byte_mul
argument_list|(
name|quint8
name|a
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|qrgb666
operator|&
name|v
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|qrgb666
operator|&
name|v
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|v
operator|)
return|;
block|}
specifier|inline
name|quint32
name|rawValue
argument_list|()
specifier|const
block|{
return|return
operator|(
name|data
index|[
literal|2
index|]
operator|<<
literal|16
operator|)
operator||
operator|(
name|data
index|[
literal|1
index|]
operator|<<
literal|8
operator|)
operator||
name|data
index|[
literal|0
index|]
return|;
block|}
name|private
label|:
name|friend
name|class
name|qargb6666
decl_stmt|;
name|quint8
name|data
index|[
literal|3
index|]
decl_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
name|Q_PACKED
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|function|qrgb666
name|qrgb666
operator|::
name|qrgb666
argument_list|(
argument|quint32 v
argument_list|)
block|{
specifier|const
name|uchar
name|b
operator|=
name|qBlue
argument_list|(
name|v
argument_list|)
block|;
specifier|const
name|uchar
name|g
operator|=
name|qGreen
argument_list|(
name|v
argument_list|)
block|;
specifier|const
name|uchar
name|r
operator|=
name|qRed
argument_list|(
name|v
argument_list|)
block|;
specifier|const
name|uint
name|p
operator|=
operator|(
name|b
operator|>>
literal|2
operator|)
operator||
operator|(
operator|(
name|g
operator|>>
literal|2
operator|)
operator|<<
literal|6
operator|)
operator||
operator|(
operator|(
name|r
operator|>>
literal|2
operator|)
operator|<<
literal|12
operator|)
block|;
name|data
index|[
literal|0
index|]
operator|=
name|qBlue
argument_list|(
name|p
argument_list|)
block|;
name|data
index|[
literal|1
index|]
operator|=
name|qGreen
argument_list|(
name|p
argument_list|)
block|;
name|data
index|[
literal|2
index|]
operator|=
name|qRed
argument_list|(
name|p
argument_list|)
block|; }
DECL|function|qrgb666
name|qrgb666
operator|::
name|qrgb666
argument_list|(
argument|const qargb6666&v
argument_list|)
block|{
name|data
index|[
literal|0
index|]
operator|=
name|v
operator|.
name|data
index|[
literal|0
index|]
block|;
name|data
index|[
literal|1
index|]
operator|=
name|v
operator|.
name|data
index|[
literal|1
index|]
block|;
name|data
index|[
literal|2
index|]
operator|=
name|v
operator|.
name|data
index|[
literal|2
index|]
operator|&
literal|0x03
block|; }
DECL|function|quint32
name|qrgb666
operator|::
name|operator
name|quint32
argument_list|()
specifier|const
block|{
specifier|const
name|uchar
name|r
operator|=
operator|(
name|data
index|[
literal|2
index|]
operator|<<
literal|6
operator|)
operator||
operator|(
operator|(
name|data
index|[
literal|1
index|]
operator|&
literal|0xf0
operator|)
operator|>>
literal|2
operator|)
operator||
operator|(
name|data
index|[
literal|2
index|]
operator|&
literal|0x3
operator|)
block|;
specifier|const
name|uchar
name|g
operator|=
operator|(
name|data
index|[
literal|1
index|]
operator|<<
literal|4
operator|)
operator||
operator|(
operator|(
name|data
index|[
literal|0
index|]
operator|&
literal|0xc0
operator|)
operator|>>
literal|4
operator|)
operator||
operator|(
operator|(
name|data
index|[
literal|1
index|]
operator|&
literal|0x0f
operator|)
operator|>>
literal|2
operator|)
block|;
specifier|const
name|uchar
name|b
operator|=
operator|(
name|data
index|[
literal|0
index|]
operator|<<
literal|2
operator|)
operator||
operator|(
operator|(
name|data
index|[
literal|0
index|]
operator|&
literal|0x3f
operator|)
operator|>>
literal|4
operator|)
block|;
return|return
name|qRgb
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|qrgb666
name|qrgb666
operator|::
name|operator
operator|+
operator|(
name|qrgb666
name|v
operator|)
specifier|const
block|{
specifier|const
name|quint32
name|x1
operator|=
operator|(
name|data
index|[
literal|2
index|]
operator|<<
literal|16
operator|)
operator||
operator|(
name|data
index|[
literal|1
index|]
operator|<<
literal|8
operator|)
operator||
name|data
index|[
literal|0
index|]
block|;
specifier|const
name|quint32
name|x2
operator|=
operator|(
name|v
operator|.
name|data
index|[
literal|2
index|]
operator|<<
literal|16
operator|)
operator||
operator|(
name|v
operator|.
name|data
index|[
literal|1
index|]
operator|<<
literal|8
operator|)
operator||
name|v
operator|.
name|data
index|[
literal|0
index|]
block|;
specifier|const
name|quint32
name|t
operator|=
name|x1
operator|+
name|x2
block|;
name|qrgb666
name|r
block|;
name|r
operator|.
name|data
index|[
literal|0
index|]
operator|=
name|t
operator|&
literal|0xff
block|;
name|r
operator|.
name|data
index|[
literal|1
index|]
operator|=
operator|(
name|t
operator|>>
literal|8
operator|)
operator|&
literal|0xff
block|;
name|r
operator|.
name|data
index|[
literal|2
index|]
operator|=
operator|(
name|t
operator|>>
literal|16
operator|)
operator|&
literal|0xff
block|;
return|return
name|r
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|byte_mul
name|qrgb666
name|qrgb666
operator|::
name|byte_mul
argument_list|(
argument|quint8 a
argument_list|)
specifier|const
block|{
specifier|const
name|quint32
name|x
operator|=
operator|(
name|data
index|[
literal|2
index|]
operator|<<
literal|16
operator|)
operator||
operator|(
name|data
index|[
literal|1
index|]
operator|<<
literal|8
operator|)
operator||
name|data
index|[
literal|0
index|]
block|;
specifier|const
name|quint32
name|t
operator|=
operator|(
operator|(
operator|(
operator|(
name|x
operator|&
literal|0x03f03f
operator|)
operator|*
name|a
operator|)
operator|>>
literal|6
operator|)
operator|&
literal|0x03f03f
operator|)
operator||
operator|(
operator|(
operator|(
operator|(
name|x
operator|&
literal|0x000fc0
operator|)
operator|*
name|a
operator|)
operator|>>
literal|6
operator|)
operator|&
literal|0x000fc0
operator|)
block|;
name|qrgb666
name|r
block|;
name|r
operator|.
name|data
index|[
literal|0
index|]
operator|=
name|t
operator|&
literal|0xff
block|;
name|r
operator|.
name|data
index|[
literal|1
index|]
operator|=
operator|(
name|t
operator|>>
literal|8
operator|)
operator|&
literal|0xff
block|;
name|r
operator|.
name|data
index|[
literal|2
index|]
operator|=
operator|(
name|t
operator|>>
literal|16
operator|)
operator|&
literal|0xff
block|;
return|return
name|r
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|bool
name|qrgb666
operator|::
name|operator
operator|==
operator|(
specifier|const
name|qrgb666
operator|&
name|v
operator|)
specifier|const
block|{
return|return
operator|(
name|data
index|[
literal|0
index|]
operator|==
name|v
operator|.
name|data
index|[
literal|0
index|]
operator|&&
name|data
index|[
literal|1
index|]
operator|==
name|v
operator|.
name|data
index|[
literal|1
index|]
operator|&&
name|data
index|[
literal|2
index|]
operator|==
name|v
operator|.
name|data
index|[
literal|2
index|]
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|qargb6666
name|qargb6666
operator|::
name|qargb6666
argument_list|(
argument|quint32p v
argument_list|)
block|{
specifier|const
name|quint8
name|b
operator|=
name|qBlue
argument_list|(
name|v
argument_list|)
operator|>>
literal|2
block|;
specifier|const
name|quint8
name|g
operator|=
name|qGreen
argument_list|(
name|v
argument_list|)
operator|>>
literal|2
block|;
specifier|const
name|quint8
name|r
operator|=
name|qRed
argument_list|(
name|v
argument_list|)
operator|>>
literal|2
block|;
specifier|const
name|quint8
name|a
operator|=
name|qAlpha
argument_list|(
name|v
argument_list|)
operator|>>
literal|2
block|;
specifier|const
name|uint
name|p
operator|=
operator|(
name|a
operator|<<
literal|18
operator|)
operator||
operator|(
name|r
operator|<<
literal|12
operator|)
operator||
operator|(
name|g
operator|<<
literal|6
operator|)
operator||
name|b
block|;
name|data
index|[
literal|0
index|]
operator|=
name|qBlue
argument_list|(
name|p
argument_list|)
block|;
name|data
index|[
literal|1
index|]
operator|=
name|qGreen
argument_list|(
name|p
argument_list|)
block|;
name|data
index|[
literal|2
index|]
operator|=
name|qRed
argument_list|(
name|p
argument_list|)
block|; }
DECL|function|qargb6666
name|qargb6666
operator|::
name|qargb6666
argument_list|(
argument|const qargb6666&v
argument_list|)
block|{
name|data
index|[
literal|0
index|]
operator|=
name|v
operator|.
name|data
index|[
literal|0
index|]
block|;
name|data
index|[
literal|1
index|]
operator|=
name|v
operator|.
name|data
index|[
literal|1
index|]
block|;
name|data
index|[
literal|2
index|]
operator|=
name|v
operator|.
name|data
index|[
literal|2
index|]
block|; }
DECL|function|qargb6666
name|qargb6666
operator|::
name|qargb6666
argument_list|(
argument|const qrgb666&v
argument_list|)
block|{
name|data
index|[
literal|0
index|]
operator|=
name|v
operator|.
name|data
index|[
literal|0
index|]
block|;
name|data
index|[
literal|1
index|]
operator|=
name|v
operator|.
name|data
index|[
literal|1
index|]
block|;
name|data
index|[
literal|2
index|]
operator|=
operator|(
name|v
operator|.
name|data
index|[
literal|2
index|]
operator||
literal|0xfc
operator|)
block|; }
DECL|function|quint32
name|qargb6666
operator|::
name|operator
name|quint32
argument_list|()
specifier|const
block|{
specifier|const
name|quint8
name|r
operator|=
operator|(
name|data
index|[
literal|2
index|]
operator|<<
literal|6
operator|)
operator||
operator|(
operator|(
name|data
index|[
literal|1
index|]
operator|&
literal|0xf0
operator|)
operator|>>
literal|2
operator|)
operator||
operator|(
name|data
index|[
literal|2
index|]
operator|&
literal|0x3
operator|)
block|;
specifier|const
name|quint8
name|g
operator|=
operator|(
name|data
index|[
literal|1
index|]
operator|<<
literal|4
operator|)
operator||
operator|(
operator|(
name|data
index|[
literal|0
index|]
operator|&
literal|0xc0
operator|)
operator|>>
literal|4
operator|)
operator||
operator|(
operator|(
name|data
index|[
literal|1
index|]
operator|&
literal|0x0f
operator|)
operator|>>
literal|2
operator|)
block|;
specifier|const
name|quint8
name|b
operator|=
operator|(
name|data
index|[
literal|0
index|]
operator|<<
literal|2
operator|)
operator||
operator|(
operator|(
name|data
index|[
literal|0
index|]
operator|&
literal|0x3f
operator|)
operator|>>
literal|4
operator|)
block|;
specifier|const
name|quint8
name|a
operator|=
operator|(
name|data
index|[
literal|2
index|]
operator|&
literal|0xfc
operator|)
operator||
operator|(
name|data
index|[
literal|2
index|]
operator|>>
literal|6
operator|)
block|;
return|return
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|qargb6666
name|qargb6666
operator|::
name|operator
operator|+
operator|(
name|qargb6666
name|v
operator|)
specifier|const
block|{
specifier|const
name|quint32
name|x1
operator|=
operator|(
name|data
index|[
literal|2
index|]
operator|<<
literal|16
operator|)
operator||
operator|(
name|data
index|[
literal|1
index|]
operator|<<
literal|8
operator|)
operator||
name|data
index|[
literal|0
index|]
block|;
specifier|const
name|quint32
name|x2
operator|=
operator|(
name|v
operator|.
name|data
index|[
literal|2
index|]
operator|<<
literal|16
operator|)
operator||
operator|(
name|v
operator|.
name|data
index|[
literal|1
index|]
operator|<<
literal|8
operator|)
operator||
name|v
operator|.
name|data
index|[
literal|0
index|]
block|;
specifier|const
name|quint32
name|t
operator|=
name|x1
operator|+
name|x2
block|;
name|qargb6666
name|r
block|;
name|r
operator|.
name|data
index|[
literal|0
index|]
operator|=
name|t
operator|&
literal|0xff
block|;
name|r
operator|.
name|data
index|[
literal|1
index|]
operator|=
operator|(
name|t
operator|>>
literal|8
operator|)
operator|&
literal|0xff
block|;
name|r
operator|.
name|data
index|[
literal|2
index|]
operator|=
operator|(
name|t
operator|>>
literal|16
operator|)
operator|&
literal|0xff
block|;
return|return
name|r
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|alpha
name|quint8
name|qargb6666
operator|::
name|alpha
argument_list|()
specifier|const
block|{
return|return
operator|(
name|data
index|[
literal|2
index|]
operator|&
literal|0xfc
operator|)
operator||
operator|(
name|data
index|[
literal|2
index|]
operator|>>
literal|6
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|byte_mul
specifier|inline
name|qargb6666
name|qargb6666
operator|::
name|byte_mul
argument_list|(
argument|quint8 a
argument_list|)
specifier|const
block|{
specifier|const
name|quint32
name|x
operator|=
operator|(
name|data
index|[
literal|2
index|]
operator|<<
literal|16
operator|)
operator||
operator|(
name|data
index|[
literal|1
index|]
operator|<<
literal|8
operator|)
operator||
name|data
index|[
literal|0
index|]
block|;
specifier|const
name|quint32
name|t
operator|=
operator|(
operator|(
operator|(
operator|(
name|x
operator|&
literal|0x03f03f
operator|)
operator|*
name|a
operator|)
operator|>>
literal|6
operator|)
operator|&
literal|0x03f03f
operator|)
operator||
operator|(
operator|(
operator|(
operator|(
name|x
operator|&
literal|0xfc0fc0
operator|)
operator|*
name|a
operator|)
operator|>>
literal|6
operator|)
operator|&
literal|0xfc0fc0
operator|)
block|;
name|qargb6666
name|r
block|;
name|r
operator|.
name|data
index|[
literal|0
index|]
operator|=
name|t
operator|&
literal|0xff
block|;
name|r
operator|.
name|data
index|[
literal|1
index|]
operator|=
operator|(
name|t
operator|>>
literal|8
operator|)
operator|&
literal|0xff
block|;
name|r
operator|.
name|data
index|[
literal|2
index|]
operator|=
operator|(
name|t
operator|>>
literal|16
operator|)
operator|&
literal|0xff
block|;
return|return
name|r
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|bool
name|qargb6666
operator|::
name|operator
operator|==
operator|(
specifier|const
name|qargb6666
operator|&
name|v
operator|)
specifier|const
block|{
return|return
name|data
index|[
literal|0
index|]
operator|==
name|v
operator|.
name|data
index|[
literal|0
index|]
operator|&&
name|data
index|[
literal|1
index|]
operator|==
name|v
operator|.
name|data
index|[
literal|1
index|]
operator|&&
name|data
index|[
literal|2
index|]
operator|==
name|v
operator|.
name|data
index|[
literal|2
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|rawValue
name|quint32
name|qargb6666
operator|::
name|rawValue
argument_list|()
specifier|const
block|{
return|return
operator|(
name|data
index|[
literal|2
index|]
operator|<<
literal|16
operator|)
operator||
operator|(
name|data
index|[
literal|1
index|]
operator|<<
literal|8
operator|)
operator||
name|data
index|[
literal|0
index|]
return|;
block|}
end_expr_stmt
begin_decl_stmt
name|class
name|qrgb888
block|{
name|public
label|:
name|Q_STATIC_INLINE_FUNCTION
name|bool
name|hasAlpha
parameter_list|()
block|{
return|return
name|false
return|;
block|}
specifier|inline
name|qrgb888
argument_list|()
block|{}
specifier|inline
name|qrgb888
argument_list|(
argument|quint32 v
argument_list|)
expr_stmt|;
specifier|inline
name|operator
name|quint32
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|quint8
name|alpha
argument_list|()
specifier|const
block|{
return|return
literal|0xff
return|;
block|}
specifier|inline
name|qrgb888
name|truncedAlpha
parameter_list|()
block|{
return|return
operator|*
name|this
return|;
block|}
name|Q_STATIC_INLINE_FUNCTION
name|quint8
name|alpha
parameter_list|(
name|quint8
name|a
parameter_list|)
block|{
return|return
name|a
return|;
block|}
name|Q_STATIC_INLINE_FUNCTION
name|quint8
name|ialpha
parameter_list|(
name|quint8
name|a
parameter_list|)
block|{
return|return
literal|255
operator|-
name|a
return|;
block|}
specifier|inline
name|qrgb888
name|byte_mul
argument_list|(
name|quint8
name|a
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|qrgb888
name|operator
operator|+
operator|(
name|qrgb888
name|v
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|operator
operator|==
operator|(
name|qrgb888
name|v
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|quint32
name|rawValue
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|uchar
name|data
index|[
literal|3
index|]
decl_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
name|Q_PACKED
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|function|qrgb888
name|qrgb888
operator|::
name|qrgb888
argument_list|(
argument|quint32 v
argument_list|)
block|{
name|data
index|[
literal|0
index|]
operator|=
name|qRed
argument_list|(
name|v
argument_list|)
block|;
name|data
index|[
literal|1
index|]
operator|=
name|qGreen
argument_list|(
name|v
argument_list|)
block|;
name|data
index|[
literal|2
index|]
operator|=
name|qBlue
argument_list|(
name|v
argument_list|)
block|; }
DECL|function|quint32
name|qrgb888
operator|::
name|operator
name|quint32
argument_list|()
specifier|const
block|{
return|return
name|qRgb
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|,
name|data
index|[
literal|1
index|]
argument_list|,
name|data
index|[
literal|2
index|]
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|qrgb888
name|qrgb888
operator|::
name|operator
operator|+
operator|(
name|qrgb888
name|v
operator|)
specifier|const
block|{
name|qrgb888
name|t
operator|=
operator|*
name|this
block|;
name|t
operator|.
name|data
index|[
literal|0
index|]
operator|+=
name|v
operator|.
name|data
index|[
literal|0
index|]
block|;
name|t
operator|.
name|data
index|[
literal|1
index|]
operator|+=
name|v
operator|.
name|data
index|[
literal|1
index|]
block|;
name|t
operator|.
name|data
index|[
literal|2
index|]
operator|+=
name|v
operator|.
name|data
index|[
literal|2
index|]
block|;
return|return
name|t
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|byte_mul
name|qrgb888
name|qrgb888
operator|::
name|byte_mul
argument_list|(
argument|quint8 a
argument_list|)
specifier|const
block|{
name|quint32
name|x
argument_list|(
operator|*
name|this
argument_list|)
block|;
name|quint32
name|t
operator|=
operator|(
name|x
operator|&
literal|0xff00ff
operator|)
operator|*
name|a
block|;
name|t
operator|=
operator|(
name|t
operator|+
operator|(
operator|(
name|t
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|+
literal|0x800080
operator|)
operator|>>
literal|8
block|;
name|t
operator|&=
literal|0xff00ff
block|;
name|x
operator|=
operator|(
operator|(
name|x
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|*
name|a
block|;
name|x
operator|=
operator|(
name|x
operator|+
operator|(
operator|(
name|x
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|+
literal|0x800080
operator|)
block|;
name|x
operator|&=
literal|0xff00ff00
block|;
name|x
operator||=
name|t
block|;
return|return
name|qrgb888
argument_list|(
name|x
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|bool
name|qrgb888
operator|::
name|operator
operator|==
operator|(
name|qrgb888
name|v
operator|)
specifier|const
block|{
return|return
operator|(
name|data
index|[
literal|0
index|]
operator|==
name|v
operator|.
name|data
index|[
literal|0
index|]
operator|&&
name|data
index|[
literal|1
index|]
operator|==
name|v
operator|.
name|data
index|[
literal|1
index|]
operator|&&
name|data
index|[
literal|2
index|]
operator|==
name|v
operator|.
name|data
index|[
literal|2
index|]
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|rawValue
name|quint32
name|qrgb888
operator|::
name|rawValue
argument_list|()
specifier|const
block|{
return|return
operator|(
name|data
index|[
literal|2
index|]
operator|<<
literal|16
operator|)
operator||
operator|(
name|data
index|[
literal|1
index|]
operator|<<
literal|8
operator|)
operator||
name|data
index|[
literal|0
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
DECL|function|qt_colorConvert
specifier|inline
name|qrgb888
name|qt_colorConvert
argument_list|(
argument|quint32 color
argument_list|,
argument|qrgb888 dummy
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
name|dummy
argument_list|)
block|;
return|return
name|qrgb888
argument_list|(
name|color
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
DECL|function|qt_colorConvert
specifier|inline
name|quint32
name|qt_colorConvert
argument_list|(
argument|qrgb888 color
argument_list|,
argument|quint32 dummy
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
name|dummy
argument_list|)
block|;
return|return
name|quint32
argument_list|(
name|color
argument_list|)
return|;
block|}
end_expr_stmt
begin_comment
comment|// hw: endianess??
end_comment
begin_decl_stmt
name|class
name|quint24
block|{
name|public
label|:
specifier|inline
name|quint24
argument_list|(
argument|quint32 v
argument_list|)
block|{
name|data
index|[
literal|0
index|]
operator|=
name|qBlue
argument_list|(
name|v
argument_list|)
block|;
name|data
index|[
literal|1
index|]
operator|=
name|qGreen
argument_list|(
name|v
argument_list|)
block|;
name|data
index|[
literal|2
index|]
operator|=
name|qRed
argument_list|(
name|v
argument_list|)
block|;     }
specifier|inline
name|operator
name|quint32
argument_list|()
block|{
return|return
name|qRgb
argument_list|(
name|data
index|[
literal|2
index|]
argument_list|,
name|data
index|[
literal|1
index|]
argument_list|,
name|data
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|quint24
operator|&
name|v
operator|)
specifier|const
block|{
return|return
name|data
index|[
literal|0
index|]
operator|==
name|v
operator|.
name|data
index|[
literal|0
index|]
operator|&&
name|data
index|[
literal|1
index|]
operator|==
name|v
operator|.
name|data
index|[
literal|1
index|]
operator|&&
name|data
index|[
literal|2
index|]
operator|==
name|v
operator|.
name|data
index|[
literal|2
index|]
return|;
block|}
name|private
label|:
name|uchar
name|data
index|[
literal|3
index|]
decl_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
name|Q_PACKED
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
DECL|function|qt_colorConvert
specifier|inline
name|quint24
name|qt_colorConvert
argument_list|(
argument|quint32 color
argument_list|,
argument|quint24 dummy
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
name|dummy
argument_list|)
block|;
return|return
name|quint24
argument_list|(
name|color
argument_list|)
return|;
block|}
end_expr_stmt
begin_comment
comment|// hw: endianess??
end_comment
begin_decl_stmt
name|class
name|quint18
block|{
name|public
label|:
specifier|inline
name|quint18
argument_list|(
argument|quint32 v
argument_list|)
block|{
name|uchar
name|b
operator|=
name|qBlue
argument_list|(
name|v
argument_list|)
block|;
name|uchar
name|g
operator|=
name|qGreen
argument_list|(
name|v
argument_list|)
block|;
name|uchar
name|r
operator|=
name|qRed
argument_list|(
name|v
argument_list|)
block|;
name|uint
name|p
operator|=
operator|(
name|b
operator|>>
literal|2
operator|)
operator||
operator|(
operator|(
name|g
operator|>>
literal|2
operator|)
operator|<<
literal|6
operator|)
operator||
operator|(
operator|(
name|r
operator|>>
literal|2
operator|)
operator|<<
literal|12
operator|)
block|;
name|data
index|[
literal|0
index|]
operator|=
name|qBlue
argument_list|(
name|p
argument_list|)
block|;
name|data
index|[
literal|1
index|]
operator|=
name|qGreen
argument_list|(
name|p
argument_list|)
block|;
name|data
index|[
literal|2
index|]
operator|=
name|qRed
argument_list|(
name|p
argument_list|)
block|;     }
specifier|inline
name|operator
name|quint32
argument_list|()
block|{
specifier|const
name|uchar
name|r
operator|=
operator|(
name|data
index|[
literal|2
index|]
operator|<<
literal|6
operator|)
operator||
operator|(
operator|(
name|data
index|[
literal|1
index|]
operator|&
literal|0xf0
operator|)
operator|>>
literal|2
operator|)
operator||
operator|(
name|data
index|[
literal|2
index|]
operator|&
literal|0x3
operator|)
block|;
specifier|const
name|uchar
name|g
operator|=
operator|(
name|data
index|[
literal|1
index|]
operator|<<
literal|4
operator|)
operator||
operator|(
operator|(
name|data
index|[
literal|0
index|]
operator|&
literal|0xc0
operator|)
operator|>>
literal|4
operator|)
operator||
operator|(
operator|(
name|data
index|[
literal|1
index|]
operator|&
literal|0x0f
operator|)
operator|>>
literal|2
operator|)
block|;
specifier|const
name|uchar
name|b
operator|=
operator|(
name|data
index|[
literal|0
index|]
operator|<<
literal|2
operator|)
operator||
operator|(
operator|(
name|data
index|[
literal|0
index|]
operator|&
literal|0x3f
operator|)
operator|>>
literal|4
operator|)
block|;
return|return
name|qRgb
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|)
return|;
block|}
name|private
label|:
name|uchar
name|data
index|[
literal|3
index|]
decl_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
name|Q_PACKED
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
DECL|function|qt_colorConvert
specifier|inline
name|quint18
name|qt_colorConvert
argument_list|(
argument|quint32 color
argument_list|,
argument|quint18 dummy
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
name|dummy
argument_list|)
block|;
return|return
name|quint18
argument_list|(
name|color
argument_list|)
return|;
block|}
end_expr_stmt
begin_decl_stmt
DECL|variable|qrgb444
name|class
name|qrgb444
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|qargb4444
block|{
name|public
label|:
name|Q_STATIC_INLINE_FUNCTION
name|bool
name|hasAlpha
parameter_list|()
block|{
return|return
name|true
return|;
block|}
specifier|inline
name|qargb4444
argument_list|()
block|{}
specifier|inline
name|qargb4444
argument_list|(
argument|quint32 v
argument_list|)
block|{
operator|*
name|this
operator|=
name|qargb4444
argument_list|(
name|quint32p
argument_list|(
name|v
argument_list|)
argument_list|)
block|; }
specifier|inline
name|explicit
name|qargb4444
argument_list|(
argument|quint32p v
argument_list|)
expr_stmt|;
specifier|inline
name|qargb4444
argument_list|(
specifier|const
name|qrgb444
operator|&
name|v
argument_list|)
expr_stmt|;
specifier|inline
name|operator
name|quint32
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|operator
name|quint8
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|qargb4444
name|operator
operator|+
operator|(
name|qargb4444
name|v
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|quint8
name|alpha
argument_list|()
specifier|const
block|{
return|return
operator|(
operator|(
name|data
operator|&
literal|0xf000
operator|)
operator|>>
literal|8
operator|)
operator||
operator|(
operator|(
name|data
operator|&
literal|0xf000
operator|)
operator|>>
literal|12
operator|)
return|;
block|}
specifier|inline
name|qargb4444
name|truncedAlpha
parameter_list|()
block|{
return|return
operator|*
name|this
return|;
block|}
name|Q_STATIC_INLINE_FUNCTION
name|quint8
name|alpha
parameter_list|(
name|quint8
name|a
parameter_list|)
block|{
return|return
operator|(
name|a
operator|+
literal|1
operator|)
operator|>>
literal|4
return|;
block|}
name|Q_STATIC_INLINE_FUNCTION
name|quint8
name|ialpha
parameter_list|(
name|quint8
name|a
parameter_list|)
block|{
return|return
literal|0x10
operator|-
name|alpha
argument_list|(
name|a
argument_list|)
return|;
block|}
specifier|inline
name|qargb4444
name|byte_mul
argument_list|(
name|quint8
name|a
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|qargb4444
operator|&
name|v
operator|)
specifier|const
block|{
return|return
name|data
operator|==
name|v
operator|.
name|data
return|;
block|}
specifier|inline
name|quint16
name|rawValue
argument_list|()
specifier|const
block|{
return|return
name|data
return|;
block|}
name|private
label|:
name|friend
name|class
name|qrgb444
decl_stmt|;
name|quint16
name|data
decl_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
name|Q_PACKED
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|class
name|qrgb444
block|{
name|public
label|:
name|Q_STATIC_INLINE_FUNCTION
name|bool
name|hasAlpha
parameter_list|()
block|{
return|return
name|false
return|;
block|}
specifier|inline
name|qrgb444
argument_list|()
block|{}
specifier|inline
name|qrgb444
argument_list|(
argument|quint32 v
argument_list|)
expr_stmt|;
specifier|inline
name|explicit
name|qrgb444
parameter_list|(
name|qargb4444
name|v
parameter_list|)
function_decl|;
specifier|inline
name|operator
name|quint32
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|operator
name|quint8
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|qrgb444
name|operator
operator|+
operator|(
name|qrgb444
name|v
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|quint8
name|alpha
argument_list|()
specifier|const
block|{
return|return
literal|0xff
return|;
block|}
specifier|inline
name|qrgb444
name|truncedAlpha
parameter_list|()
block|{
return|return
operator|*
name|this
return|;
block|}
name|Q_STATIC_INLINE_FUNCTION
name|quint8
name|alpha
parameter_list|(
name|quint8
name|a
parameter_list|)
block|{
return|return
operator|(
name|a
operator|+
literal|1
operator|)
operator|>>
literal|4
return|;
block|}
name|Q_STATIC_INLINE_FUNCTION
name|quint8
name|ialpha
parameter_list|(
name|quint8
name|a
parameter_list|)
block|{
return|return
literal|0x10
operator|-
name|alpha
argument_list|(
name|a
argument_list|)
return|;
block|}
specifier|inline
name|qrgb444
name|byte_mul
argument_list|(
name|quint8
name|a
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|qrgb444
operator|&
name|v
operator|)
specifier|const
block|{
return|return
name|data
operator|==
name|v
operator|.
name|data
return|;
block|}
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|qrgb444
operator|&
name|v
operator|)
specifier|const
block|{
return|return
name|data
operator|!=
name|v
operator|.
name|data
return|;
block|}
specifier|inline
name|quint16
name|rawValue
argument_list|()
specifier|const
block|{
return|return
name|data
return|;
block|}
name|private
label|:
name|friend
name|class
name|qargb4444
decl_stmt|;
name|quint16
name|data
decl_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
name|Q_PACKED
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|function|qargb4444
name|qargb4444
operator|::
name|qargb4444
argument_list|(
argument|quint32p color
argument_list|)
block|{
name|quint32
name|v
operator|=
name|color
block|;
name|v
operator|&=
literal|0xf0f0f0f0
block|;
specifier|const
name|int
name|a
operator|=
name|qAlpha
argument_list|(
name|v
argument_list|)
operator|<<
literal|8
block|;
specifier|const
name|int
name|r
operator|=
name|qRed
argument_list|(
name|v
argument_list|)
operator|<<
literal|4
block|;
specifier|const
name|int
name|g
operator|=
name|qGreen
argument_list|(
name|v
argument_list|)
block|;
specifier|const
name|int
name|b
operator|=
name|qBlue
argument_list|(
name|v
argument_list|)
operator|>>
literal|4
block|;
name|data
operator|=
name|a
operator||
name|r
operator||
name|g
operator||
name|b
block|; }
DECL|function|qargb4444
name|qargb4444
operator|::
name|qargb4444
argument_list|(
argument|const qrgb444&v
argument_list|)
block|{
name|data
operator|=
name|v
operator|.
name|data
operator||
literal|0xf000
block|; }
DECL|function|quint32
name|qargb4444
operator|::
name|operator
name|quint32
argument_list|()
specifier|const
block|{
specifier|const
name|int
name|a
operator|=
operator|(
name|data
operator|&
literal|0xf000
operator|)
block|;
specifier|const
name|int
name|r
operator|=
operator|(
name|data
operator|&
literal|0x0f00
operator|)
block|;
specifier|const
name|int
name|g
operator|=
operator|(
name|data
operator|&
literal|0x00f0
operator|)
block|;
specifier|const
name|int
name|b
operator|=
operator|(
name|data
operator|&
literal|0x000f
operator|)
block|;
specifier|const
name|int
name|ta
operator|=
operator|(
name|a
operator|>>
literal|8
operator|)
operator||
operator|(
name|a
operator|>>
literal|12
operator|)
block|;
specifier|const
name|int
name|tr
operator|=
operator|(
name|r
operator|>>
literal|4
operator|)
operator||
operator|(
name|r
operator|>>
literal|8
operator|)
block|;
specifier|const
name|int
name|tg
operator|=
name|g
operator||
operator|(
name|g
operator|>>
literal|4
operator|)
block|;
specifier|const
name|int
name|tb
operator|=
operator|(
name|b
operator|<<
literal|4
operator|)
operator||
name|b
block|;
return|return
name|qRgba
argument_list|(
name|tr
argument_list|,
name|tg
argument_list|,
name|tb
argument_list|,
name|ta
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|quint8
name|qargb4444
operator|::
name|operator
name|quint8
argument_list|()
specifier|const
block|{
comment|// hw: optimize!
return|return
name|qt_colorConvert
operator|<
name|quint8
operator|,
name|quint32
operator|>
operator|(
name|operator
name|quint32
argument_list|()
operator|,
literal|0
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|qargb4444
name|qargb4444
operator|::
name|operator
operator|+
operator|(
name|qargb4444
name|v
operator|)
specifier|const
block|{
name|qargb4444
name|t
block|;
name|t
operator|.
name|data
operator|=
name|data
operator|+
name|v
operator|.
name|data
block|;
return|return
name|t
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|byte_mul
name|qargb4444
name|qargb4444
operator|::
name|byte_mul
argument_list|(
argument|quint8 a
argument_list|)
specifier|const
block|{
name|quint16
name|t
operator|=
operator|(
operator|(
operator|(
name|data
operator|&
literal|0xf0f0
operator|)
operator|*
name|a
operator|)
operator|>>
literal|4
operator|)
operator|&
literal|0xf0f0
block|;
name|t
operator||=
operator|(
operator|(
operator|(
name|data
operator|&
literal|0x0f0f
operator|)
operator|*
name|a
operator|)
operator|>>
literal|4
operator|)
operator|&
literal|0x0f0f
block|;
name|qargb4444
name|result
block|;
name|result
operator|.
name|data
operator|=
name|t
block|;
return|return
name|result
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|qrgb444
name|qrgb444
operator|::
name|qrgb444
argument_list|(
argument|quint32 v
argument_list|)
block|{
name|v
operator|&=
literal|0xf0f0f0f0
block|;
specifier|const
name|int
name|r
operator|=
name|qRed
argument_list|(
name|v
argument_list|)
operator|<<
literal|4
block|;
specifier|const
name|int
name|g
operator|=
name|qGreen
argument_list|(
name|v
argument_list|)
block|;
specifier|const
name|int
name|b
operator|=
name|qBlue
argument_list|(
name|v
argument_list|)
operator|>>
literal|4
block|;
name|data
operator|=
name|r
operator||
name|g
operator||
name|b
block|; }
DECL|function|qrgb444
name|qrgb444
operator|::
name|qrgb444
argument_list|(
argument|qargb4444 v
argument_list|)
block|{
name|data
operator|=
name|v
operator|.
name|data
operator|&
literal|0x0fff
block|; }
DECL|function|quint32
name|qrgb444
operator|::
name|operator
name|quint32
argument_list|()
specifier|const
block|{
specifier|const
name|int
name|r
operator|=
operator|(
name|data
operator|&
literal|0x0f00
operator|)
block|;
specifier|const
name|int
name|g
operator|=
operator|(
name|data
operator|&
literal|0x00f0
operator|)
block|;
specifier|const
name|int
name|b
operator|=
operator|(
name|data
operator|&
literal|0x000f
operator|)
block|;
specifier|const
name|int
name|tr
operator|=
operator|(
name|r
operator|>>
literal|4
operator|)
operator||
operator|(
name|r
operator|>>
literal|8
operator|)
block|;
specifier|const
name|int
name|tg
operator|=
name|g
operator||
operator|(
name|g
operator|>>
literal|4
operator|)
block|;
specifier|const
name|int
name|tb
operator|=
operator|(
name|b
operator|<<
literal|4
operator|)
operator||
name|b
block|;
return|return
name|qRgb
argument_list|(
name|tr
argument_list|,
name|tg
argument_list|,
name|tb
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|quint8
name|qrgb444
operator|::
name|operator
name|quint8
argument_list|()
specifier|const
block|{
comment|// hw: optimize!
return|return
name|qt_colorConvert
operator|<
name|quint8
operator|,
name|quint32
operator|>
operator|(
name|operator
name|quint32
argument_list|()
operator|,
literal|0
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|qrgb444
name|qrgb444
operator|::
name|operator
operator|+
operator|(
name|qrgb444
name|v
operator|)
specifier|const
block|{
name|qrgb444
name|t
block|;
name|t
operator|.
name|data
operator|=
name|data
operator|+
name|v
operator|.
name|data
block|;
return|return
name|t
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|byte_mul
name|qrgb444
name|qrgb444
operator|::
name|byte_mul
argument_list|(
argument|quint8 a
argument_list|)
specifier|const
block|{
name|quint16
name|t
operator|=
operator|(
operator|(
operator|(
name|data
operator|&
literal|0xf0f0
operator|)
operator|*
name|a
operator|)
operator|>>
literal|4
operator|)
operator|&
literal|0xf0f0
block|;
name|t
operator||=
operator|(
operator|(
operator|(
name|data
operator|&
literal|0x0f0f
operator|)
operator|*
name|a
operator|)
operator|>>
literal|4
operator|)
operator|&
literal|0x0f0f
block|;
name|qrgb444
name|result
block|;
name|result
operator|.
name|data
operator|=
name|t
block|;
return|return
name|result
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|void
name|qt_memfill
argument_list|(
argument|T *dest
argument_list|,
argument|T value
argument_list|,
argument|int count
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|function|qt_memfill
name|template
operator|<
operator|>
specifier|inline
name|void
name|qt_memfill
argument_list|(
argument|quint32 *dest
argument_list|,
argument|quint32 color
argument_list|,
argument|int count
argument_list|)
block|{
specifier|extern
name|void
argument_list|(
argument|*qt_memfill32
argument_list|)
operator|(
name|quint32
operator|*
name|dest
operator|,
name|quint32
name|value
operator|,
name|int
name|count
operator|)
block|;
name|qt_memfill32
argument_list|(
name|dest
argument_list|,
name|color
argument_list|,
name|count
argument_list|)
block|; }
DECL|function|qt_memfill
name|template
operator|<
operator|>
specifier|inline
name|void
name|qt_memfill
argument_list|(
argument|quint16 *dest
argument_list|,
argument|quint16 color
argument_list|,
argument|int count
argument_list|)
block|{
specifier|extern
name|void
argument_list|(
argument|*qt_memfill16
argument_list|)
operator|(
name|quint16
operator|*
name|dest
operator|,
name|quint16
name|value
operator|,
name|int
name|count
operator|)
block|;
name|qt_memfill16
argument_list|(
name|dest
argument_list|,
name|color
argument_list|,
name|count
argument_list|)
block|; }
DECL|function|qt_memfill
name|template
operator|<
operator|>
specifier|inline
name|void
name|qt_memfill
argument_list|(
argument|quint8 *dest
argument_list|,
argument|quint8 color
argument_list|,
argument|int count
argument_list|)
block|{
name|memset
argument_list|(
name|dest
argument_list|,
name|color
argument_list|,
name|count
argument_list|)
block|; }
name|template
operator|<
name|class
name|T
operator|>
DECL|function|qt_memfill
specifier|inline
name|void
name|qt_memfill
argument_list|(
argument|T *dest
argument_list|,
argument|T value
argument_list|,
argument|int count
argument_list|)
block|{
if|if
condition|(
operator|!
name|count
condition|)
return|return;
name|int
name|n
operator|=
operator|(
name|count
operator|+
literal|7
operator|)
operator|/
literal|8
expr_stmt|;
end_expr_stmt
begin_switch
switch|switch
condition|(
name|count
operator|&
literal|0x07
condition|)
block|{
case|case
literal|0
case|:
do|do
block|{
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|7
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|6
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|5
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|4
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|3
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|2
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|1
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
block|}
do|while
condition|(
operator|--
name|n
operator|>
literal|0
condition|)
do|;
block|}
end_switch
begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
DECL|function|qt_rectfill
specifier|inline
name|void
name|qt_rectfill
argument_list|(
argument|T *dest
argument_list|,
argument|T value
argument_list|,
argument|int x
argument_list|,
argument|int y
argument_list|,
argument|int width
argument_list|,
argument|int height
argument_list|,
argument|int stride
argument_list|)
block|{
name|char
operator|*
name|d
operator|=
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|dest
operator|+
name|x
operator|)
operator|+
name|y
operator|*
name|stride
block|;
if|if
condition|(
name|uint
argument_list|(
name|stride
argument_list|)
operator|==
operator|(
name|width
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|)
condition|)
block|{
name|qt_memfill
argument_list|(
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|d
operator|)
argument_list|,
name|value
argument_list|,
name|width
operator|*
name|height
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|height
condition|;
operator|++
name|j
control|)
block|{
name|dest
operator|=
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|d
operator|)
expr_stmt|;
name|qt_memfill
argument_list|(
name|dest
argument_list|,
name|value
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|d
operator|+=
name|stride
expr_stmt|;
block|}
block|}
end_else
begin_expr_stmt
unit|}  template
DECL|variable|DST
operator|<
name|class
name|DST
operator|,
name|class
name|SRC
operator|>
DECL|function|qt_memconvert
specifier|inline
name|void
name|qt_memconvert
argument_list|(
argument|DST *dest
argument_list|,
argument|const SRC *src
argument_list|,
argument|int count
argument_list|)
block|{
if|if
condition|(
sizeof|sizeof
argument_list|(
name|DST
argument_list|)
operator|==
literal|1
condition|)
block|{
while|while
condition|(
name|count
condition|)
block|{
name|int
name|n
init|=
literal|1
decl_stmt|;
specifier|const
name|SRC
name|color
init|=
operator|*
name|src
operator|++
decl_stmt|;
specifier|const
name|DST
name|dstColor
init|=
name|qt_colorConvert
operator|<
name|DST
decl_stmt|,
name|SRC
decl|>
argument_list|(
name|color
argument_list|,
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
operator|--
name|count
operator|&&
operator|(
operator|*
name|src
operator|==
name|color
operator|||
name|dstColor
operator|==
name|qt_colorConvert
operator|<
name|DST
operator|,
name|SRC
operator|>
operator|(
operator|*
name|src
operator|,
literal|0
operator|)
operator|)
condition|)
block|{
operator|++
name|n
expr_stmt|;
operator|++
name|src
expr_stmt|;
block|}
name|qt_memfill
argument_list|(
name|dest
argument_list|,
name|dstColor
argument_list|,
name|n
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|dest
operator|+=
name|n
expr_stmt|;
end_expr_stmt
begin_else
unit|}     }
else|else
block|{
comment|/* Duff's device */
name|int
name|n
init|=
operator|(
name|count
operator|+
literal|7
operator|)
operator|/
literal|8
decl_stmt|;
switch|switch
condition|(
name|count
operator|&
literal|0x07
condition|)
block|{
case|case
literal|0
case|:
do|do
block|{
operator|*
name|dest
operator|++
operator|=
name|qt_colorConvert
operator|<
name|DST
operator|,
name|SRC
operator|>
operator|(
operator|*
name|src
operator|++
operator|,
literal|0
operator|)
expr_stmt|;
case|case
literal|7
case|:
operator|*
name|dest
operator|++
operator|=
name|qt_colorConvert
operator|<
name|DST
operator|,
name|SRC
operator|>
operator|(
operator|*
name|src
operator|++
operator|,
literal|0
operator|)
expr_stmt|;
case|case
literal|6
case|:
operator|*
name|dest
operator|++
operator|=
name|qt_colorConvert
operator|<
name|DST
operator|,
name|SRC
operator|>
operator|(
operator|*
name|src
operator|++
operator|,
literal|0
operator|)
expr_stmt|;
case|case
literal|5
case|:
operator|*
name|dest
operator|++
operator|=
name|qt_colorConvert
operator|<
name|DST
operator|,
name|SRC
operator|>
operator|(
operator|*
name|src
operator|++
operator|,
literal|0
operator|)
expr_stmt|;
case|case
literal|4
case|:
operator|*
name|dest
operator|++
operator|=
name|qt_colorConvert
operator|<
name|DST
operator|,
name|SRC
operator|>
operator|(
operator|*
name|src
operator|++
operator|,
literal|0
operator|)
expr_stmt|;
case|case
literal|3
case|:
operator|*
name|dest
operator|++
operator|=
name|qt_colorConvert
operator|<
name|DST
operator|,
name|SRC
operator|>
operator|(
operator|*
name|src
operator|++
operator|,
literal|0
operator|)
expr_stmt|;
case|case
literal|2
case|:
operator|*
name|dest
operator|++
operator|=
name|qt_colorConvert
operator|<
name|DST
operator|,
name|SRC
operator|>
operator|(
operator|*
name|src
operator|++
operator|,
literal|0
operator|)
expr_stmt|;
case|case
literal|1
case|:
operator|*
name|dest
operator|++
operator|=
name|qt_colorConvert
operator|<
name|DST
operator|,
name|SRC
operator|>
operator|(
operator|*
name|src
operator|++
operator|,
literal|0
operator|)
expr_stmt|;
block|}
do|while
condition|(
operator|--
name|n
operator|>
literal|0
condition|)
do|;
block|}
block|}
end_else
begin_define
DECL|macro|QT_TRIVIAL_MEMCONVERT_IMPL
unit|}
define|#
directive|define
name|QT_TRIVIAL_MEMCONVERT_IMPL
parameter_list|(
name|T
parameter_list|)
define|\
value|template<> \     inline void qt_memconvert(T *dest, const T *src, int count) \     { \         memcpy(dest, src, count * sizeof(T)); \     }
end_define
begin_expr_stmt
unit|QT_TRIVIAL_MEMCONVERT_IMPL
DECL|function|QT_TRIVIAL_MEMCONVERT_IMPL
operator|(
name|quint32
operator|)
name|QT_TRIVIAL_MEMCONVERT_IMPL
argument_list|(
argument|qrgb888
argument_list|)
name|QT_TRIVIAL_MEMCONVERT_IMPL
argument_list|(
argument|qargb6666
argument_list|)
name|QT_TRIVIAL_MEMCONVERT_IMPL
argument_list|(
argument|qrgb666
argument_list|)
name|QT_TRIVIAL_MEMCONVERT_IMPL
argument_list|(
argument|quint16
argument_list|)
name|QT_TRIVIAL_MEMCONVERT_IMPL
argument_list|(
argument|qrgb565
argument_list|)
name|QT_TRIVIAL_MEMCONVERT_IMPL
argument_list|(
argument|qargb8565
argument_list|)
name|QT_TRIVIAL_MEMCONVERT_IMPL
argument_list|(
argument|qargb8555
argument_list|)
name|QT_TRIVIAL_MEMCONVERT_IMPL
argument_list|(
argument|qrgb555
argument_list|)
name|QT_TRIVIAL_MEMCONVERT_IMPL
argument_list|(
argument|qargb4444
argument_list|)
name|QT_TRIVIAL_MEMCONVERT_IMPL
argument_list|(
argument|qrgb444
argument_list|)
DECL|macro|QT_TRIVIAL_MEMCONVERT_IMPL
undef|#
directive|undef
name|QT_TRIVIAL_MEMCONVERT_IMPL
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_LITTLE_ENDIAN
name|template
operator|<
operator|>
specifier|inline
name|void
name|qt_memconvert
argument_list|(
argument|qrgb666 *dest
argument_list|,
argument|const quint32 *src
argument_list|,
argument|int count
argument_list|)
block|{
if|if
condition|(
name|count
operator|<
literal|3
condition|)
block|{
switch|switch
condition|(
name|count
condition|)
block|{
case|case
literal|2
case|:
operator|*
name|dest
operator|++
operator|=
name|qrgb666
argument_list|(
operator|*
name|src
operator|++
argument_list|)
expr_stmt|;
case|case
literal|1
case|:
operator|*
name|dest
operator|=
name|qrgb666
argument_list|(
operator|*
name|src
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return;
end_return
begin_decl_stmt
unit|}      const
name|int
name|align
init|=
operator|(
name|quintptr
argument_list|(
name|dest
argument_list|)
operator|&
literal|3
operator|)
decl_stmt|;
end_decl_stmt
begin_switch
switch|switch
condition|(
name|align
condition|)
block|{
case|case
literal|1
case|:
operator|*
name|dest
operator|++
operator|=
name|qrgb666
argument_list|(
operator|*
name|src
operator|++
argument_list|)
expr_stmt|;
operator|--
name|count
expr_stmt|;
case|case
literal|2
case|:
operator|*
name|dest
operator|++
operator|=
name|qrgb666
argument_list|(
operator|*
name|src
operator|++
argument_list|)
expr_stmt|;
operator|--
name|count
expr_stmt|;
case|case
literal|3
case|:
operator|*
name|dest
operator|++
operator|=
name|qrgb666
argument_list|(
operator|*
name|src
operator|++
argument_list|)
expr_stmt|;
operator|--
name|count
expr_stmt|;
block|}
end_switch
begin_decl_stmt
name|quint32
modifier|*
name|dest32
init|=
name|reinterpret_cast
operator|<
name|quint32
operator|*
operator|>
operator|(
name|dest
operator|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|sourceCount
init|=
name|count
operator|>>
literal|2
decl_stmt|;
end_decl_stmt
begin_while
while|while
condition|(
name|sourceCount
operator|--
condition|)
block|{
name|dest32
index|[
literal|0
index|]
operator|=
operator|(
operator|(
name|src
index|[
literal|1
index|]
operator|&
literal|0x00000c00
operator|)
operator|<<
literal|20
operator|)
operator||
operator|(
operator|(
name|src
index|[
literal|1
index|]
operator|&
literal|0x000000fc
operator|)
operator|<<
literal|22
operator|)
operator||
operator|(
operator|(
name|src
index|[
literal|0
index|]
operator|&
literal|0x00fc0000
operator|)
operator|>>
literal|6
operator|)
operator||
operator|(
operator|(
name|src
index|[
literal|0
index|]
operator|&
literal|0x0000fc00
operator|)
operator|>>
literal|4
operator|)
operator||
operator|(
operator|(
name|src
index|[
literal|0
index|]
operator|&
literal|0x000000fc
operator|)
operator|>>
literal|2
operator|)
expr_stmt|;
name|dest32
index|[
literal|1
index|]
operator|=
operator|(
operator|(
name|src
index|[
literal|2
index|]
operator|&
literal|0x003c0000
operator|)
operator|<<
literal|10
operator|)
operator||
operator|(
operator|(
name|src
index|[
literal|2
index|]
operator|&
literal|0x0000fc00
operator|)
operator|<<
literal|12
operator|)
operator||
operator|(
operator|(
name|src
index|[
literal|2
index|]
operator|&
literal|0x000000fc
operator|)
operator|<<
literal|14
operator|)
operator||
operator|(
operator|(
name|src
index|[
literal|1
index|]
operator|&
literal|0x00fc0000
operator|)
operator|>>
literal|14
operator|)
operator||
operator|(
operator|(
name|src
index|[
literal|1
index|]
operator|&
literal|0x0000f000
operator|)
operator|>>
literal|12
operator|)
expr_stmt|;
name|dest32
index|[
literal|2
index|]
operator|=
operator|(
operator|(
name|src
index|[
literal|3
index|]
operator|&
literal|0x00fc0000
operator|)
operator|<<
literal|2
operator|)
operator||
operator|(
operator|(
name|src
index|[
literal|3
index|]
operator|&
literal|0x0000fc00
operator|)
operator|<<
literal|4
operator|)
operator||
operator|(
operator|(
name|src
index|[
literal|3
index|]
operator|&
literal|0x000000fc
operator|)
operator|<<
literal|6
operator|)
operator||
operator|(
operator|(
name|src
index|[
literal|2
index|]
operator|&
literal|0x00c00000
operator|)
operator|>>
literal|22
operator|)
expr_stmt|;
name|dest32
operator|+=
literal|3
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
block|}
end_while
begin_expr_stmt
name|dest
operator|=
name|reinterpret_cast
operator|<
name|qrgb666
operator|*
operator|>
operator|(
name|dest32
operator|)
expr_stmt|;
end_expr_stmt
begin_switch
switch|switch
condition|(
name|count
operator|&
literal|3
condition|)
block|{
case|case
literal|3
case|:
operator|*
name|dest
operator|++
operator|=
name|qrgb666
argument_list|(
operator|*
name|src
operator|++
argument_list|)
expr_stmt|;
case|case
literal|2
case|:
operator|*
name|dest
operator|++
operator|=
name|qrgb666
argument_list|(
operator|*
name|src
operator|++
argument_list|)
expr_stmt|;
case|case
literal|1
case|:
operator|*
name|dest
operator|=
name|qrgb666
argument_list|(
operator|*
name|src
argument_list|)
expr_stmt|;
block|}
end_switch
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_BYTE_ORDER
end_comment
begin_expr_stmt
unit|template
operator|<
name|class
name|T
operator|>
DECL|function|qt_rectcopy
specifier|inline
name|void
name|qt_rectcopy
argument_list|(
argument|T *dest
argument_list|,
argument|const T *src
argument_list|,
argument|int x
argument_list|,
argument|int y
argument_list|,
argument|int width
argument_list|,
argument|int height
argument_list|,
argument|int dstStride
argument_list|,
argument|int srcStride
argument_list|)
block|{
name|char
operator|*
name|d
operator|=
operator|(
name|char
operator|*
operator|)
operator|(
name|dest
operator|+
name|x
operator|)
operator|+
name|y
operator|*
name|dstStride
block|;
specifier|const
name|char
operator|*
name|s
operator|=
operator|(
name|char
operator|*
operator|)
operator|(
name|src
operator|)
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|height
condition|;
operator|++
name|i
control|)
block|{
operator|::
name|memcpy
argument_list|(
name|d
argument_list|,
name|s
argument_list|,
name|width
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|+=
name|dstStride
expr_stmt|;
name|s
operator|+=
name|srcStride
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
unit|}  template
DECL|variable|DST
operator|<
name|class
name|DST
operator|,
name|class
name|SRC
operator|>
DECL|function|qt_rectconvert
specifier|inline
name|void
name|qt_rectconvert
argument_list|(
argument|DST *dest
argument_list|,
argument|const SRC *src
argument_list|,
argument|int x
argument_list|,
argument|int y
argument_list|,
argument|int width
argument_list|,
argument|int height
argument_list|,
argument|int dstStride
argument_list|,
argument|int srcStride
argument_list|)
block|{
name|char
operator|*
name|d
operator|=
operator|(
name|char
operator|*
operator|)
operator|(
name|dest
operator|+
name|x
operator|)
operator|+
name|y
operator|*
name|dstStride
block|;
specifier|const
name|char
operator|*
name|s
operator|=
operator|(
name|char
operator|*
operator|)
operator|(
name|src
operator|)
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|height
condition|;
operator|++
name|i
control|)
block|{
name|qt_memconvert
operator|<
name|DST
operator|,
name|SRC
operator|>
operator|(
operator|(
name|DST
operator|*
operator|)
name|d
operator|,
operator|(
specifier|const
name|SRC
operator|*
operator|)
name|s
operator|,
name|width
operator|)
expr_stmt|;
name|d
operator|+=
name|dstStride
expr_stmt|;
name|s
operator|+=
name|srcStride
expr_stmt|;
block|}
end_expr_stmt
begin_define
DECL|macro|QT_RECTCONVERT_TRIVIAL_IMPL
unit|}
define|#
directive|define
name|QT_RECTCONVERT_TRIVIAL_IMPL
parameter_list|(
name|T
parameter_list|)
define|\
value|template<>                                                         \     inline void qt_rectconvert(T *dest, const T *src,                   \                                int x, int y, int width, int height,     \                                int dstStride, int srcStride)            \     {                                                                   \         qt_rectcopy(dest, src, x, y, width, height, dstStride, srcStride); \     }
end_define
begin_expr_stmt
unit|QT_RECTCONVERT_TRIVIAL_IMPL
DECL|function|QT_RECTCONVERT_TRIVIAL_IMPL
operator|(
name|quint32
operator|)
name|QT_RECTCONVERT_TRIVIAL_IMPL
argument_list|(
argument|qrgb888
argument_list|)
name|QT_RECTCONVERT_TRIVIAL_IMPL
argument_list|(
argument|qargb6666
argument_list|)
name|QT_RECTCONVERT_TRIVIAL_IMPL
argument_list|(
argument|qrgb666
argument_list|)
name|QT_RECTCONVERT_TRIVIAL_IMPL
argument_list|(
argument|qrgb565
argument_list|)
name|QT_RECTCONVERT_TRIVIAL_IMPL
argument_list|(
argument|qargb8565
argument_list|)
name|QT_RECTCONVERT_TRIVIAL_IMPL
argument_list|(
argument|quint16
argument_list|)
name|QT_RECTCONVERT_TRIVIAL_IMPL
argument_list|(
argument|qargb8555
argument_list|)
name|QT_RECTCONVERT_TRIVIAL_IMPL
argument_list|(
argument|qrgb555
argument_list|)
name|QT_RECTCONVERT_TRIVIAL_IMPL
argument_list|(
argument|qargb4444
argument_list|)
name|QT_RECTCONVERT_TRIVIAL_IMPL
argument_list|(
argument|qrgb444
argument_list|)
DECL|macro|QT_RECTCONVERT_TRIVIAL_IMPL
undef|#
directive|undef
name|QT_RECTCONVERT_TRIVIAL_IMPL
DECL|macro|QT_MEMFILL_UINT
define|#
directive|define
name|QT_MEMFILL_UINT
parameter_list|(
name|dest
parameter_list|,
name|length
parameter_list|,
name|color
parameter_list|)
define|\
value|qt_memfill<quint32>(dest, color, length);
DECL|macro|QT_MEMFILL_USHORT
define|#
directive|define
name|QT_MEMFILL_USHORT
parameter_list|(
name|dest
parameter_list|,
name|length
parameter_list|,
name|color
parameter_list|)
define|\
value|qt_memfill<quint16>(dest, color, length);
DECL|macro|QT_MEMCPY_REV_UINT
define|#
directive|define
name|QT_MEMCPY_REV_UINT
parameter_list|(
name|dest
parameter_list|,
name|src
parameter_list|,
name|length
parameter_list|)
define|\
value|do {                                          \
comment|/* Duff's device */
value|\     uint *_d = (uint*)(dest) + length;         \     const uint *_s = (uint*)(src) + length;    \     register int n = ((length) + 7) / 8;      \     switch ((length)& 0x07)                  \     {                                         \     case 0: do { *--_d = *--_s;                 \     case 7:      *--_d = *--_s;                 \     case 6:      *--_d = *--_s;                 \     case 5:      *--_d = *--_s;                 \     case 4:      *--_d = *--_s;                 \     case 3:      *--_d = *--_s;                 \     case 2:      *--_d = *--_s;                 \     case 1:      *--_d = *--_s;                 \     } while (--n> 0);                        \     }                                         \ } while (0)
DECL|macro|QT_MEMCPY_USHORT
define|#
directive|define
name|QT_MEMCPY_USHORT
parameter_list|(
name|dest
parameter_list|,
name|src
parameter_list|,
name|length
parameter_list|)
define|\
value|do {                                          \
comment|/* Duff's device */
value|\     ushort *_d = (ushort*)(dest);         \     const ushort *_s = (ushort*)(src);    \     register int n = ((length) + 7) / 8;      \     switch ((length)& 0x07)                  \     {                                         \     case 0: do { *_d++ = *_s++;                 \     case 7:      *_d++ = *_s++;                 \     case 6:      *_d++ = *_s++;                 \     case 5:      *_d++ = *_s++;                 \     case 4:      *_d++ = *_s++;                 \     case 3:      *_d++ = *_s++;                 \     case 2:      *_d++ = *_s++;                 \     case 1:      *_d++ = *_s++;                 \     } while (--n> 0);                        \     }                                         \ } while (0)
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_RVCT
argument_list|)
pragma|#
directive|pragma
name|push
pragma|#
directive|pragma
name|arm
endif|#
directive|endif
name|Q_STATIC_INLINE_FUNCTION
name|int
name|qt_div_255
argument_list|(
argument|int x
argument_list|)
block|{
return|return
operator|(
name|x
operator|+
operator|(
name|x
operator|>>
literal|8
operator|)
operator|+
literal|0x80
operator|)
operator|>>
literal|8
return|;
block|}
end_expr_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_RVCT
argument_list|)
end_if
begin_pragma
pragma|#
directive|pragma
name|pop
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qConvertRgb32To16
specifier|inline
name|ushort
name|qConvertRgb32To16
parameter_list|(
name|uint
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
name|c
operator|)
operator|>>
literal|3
operator|)
operator|&
literal|0x001f
operator|)
operator||
operator|(
operator|(
operator|(
name|c
operator|)
operator|>>
literal|5
operator|)
operator|&
literal|0x07e0
operator|)
operator||
operator|(
operator|(
operator|(
name|c
operator|)
operator|>>
literal|8
operator|)
operator|&
literal|0xf800
operator|)
return|;
block|}
end_function
begin_function
DECL|function|qConvertRgb16To32
specifier|inline
name|QRgb
name|qConvertRgb16To32
parameter_list|(
name|uint
name|c
parameter_list|)
block|{
return|return
literal|0xff000000
operator||
operator|(
operator|(
operator|(
operator|(
name|c
operator|)
operator|<<
literal|3
operator|)
operator|&
literal|0xf8
operator|)
operator||
operator|(
operator|(
operator|(
name|c
operator|)
operator|>>
literal|2
operator|)
operator|&
literal|0x7
operator|)
operator|)
operator||
operator|(
operator|(
operator|(
operator|(
name|c
operator|)
operator|<<
literal|5
operator|)
operator|&
literal|0xfc00
operator|)
operator||
operator|(
operator|(
operator|(
name|c
operator|)
operator|>>
literal|1
operator|)
operator|&
literal|0x300
operator|)
operator|)
operator||
operator|(
operator|(
operator|(
operator|(
name|c
operator|)
operator|<<
literal|8
operator|)
operator|&
literal|0xf80000
operator|)
operator||
operator|(
operator|(
operator|(
name|c
operator|)
operator|<<
literal|3
operator|)
operator|&
literal|0x70000
operator|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|qRed565
specifier|inline
name|int
name|qRed565
parameter_list|(
name|quint16
name|rgb
parameter_list|)
block|{
specifier|const
name|int
name|r
init|=
operator|(
name|rgb
operator|&
literal|0xf800
operator|)
decl_stmt|;
return|return
operator|(
name|r
operator|>>
literal|8
operator|)
operator||
operator|(
name|r
operator|>>
literal|13
operator|)
return|;
block|}
end_function
begin_function
DECL|function|qGreen565
specifier|inline
name|int
name|qGreen565
parameter_list|(
name|quint16
name|rgb
parameter_list|)
block|{
specifier|const
name|int
name|g
init|=
operator|(
name|rgb
operator|&
literal|0x07e0
operator|)
decl_stmt|;
return|return
operator|(
name|g
operator|>>
literal|3
operator|)
operator||
operator|(
name|g
operator|>>
literal|9
operator|)
return|;
block|}
end_function
begin_function
DECL|function|qBlue565
specifier|inline
name|int
name|qBlue565
parameter_list|(
name|quint16
name|rgb
parameter_list|)
block|{
specifier|const
name|int
name|b
init|=
operator|(
name|rgb
operator|&
literal|0x001f
operator|)
decl_stmt|;
return|return
operator|(
name|b
operator|<<
literal|3
operator|)
operator||
operator|(
name|b
operator|>>
literal|2
operator|)
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|qt_bayer_matrix
specifier|const
name|uint
name|qt_bayer_matrix
index|[
literal|16
index|]
index|[
literal|16
index|]
init|=
block|{
block|{
literal|0x1
block|,
literal|0xc0
block|,
literal|0x30
block|,
literal|0xf0
block|,
literal|0xc
block|,
literal|0xcc
block|,
literal|0x3c
block|,
literal|0xfc
block|,
literal|0x3
block|,
literal|0xc3
block|,
literal|0x33
block|,
literal|0xf3
block|,
literal|0xf
block|,
literal|0xcf
block|,
literal|0x3f
block|,
literal|0xff
block|}
block|,
block|{
literal|0x80
block|,
literal|0x40
block|,
literal|0xb0
block|,
literal|0x70
block|,
literal|0x8c
block|,
literal|0x4c
block|,
literal|0xbc
block|,
literal|0x7c
block|,
literal|0x83
block|,
literal|0x43
block|,
literal|0xb3
block|,
literal|0x73
block|,
literal|0x8f
block|,
literal|0x4f
block|,
literal|0xbf
block|,
literal|0x7f
block|}
block|,
block|{
literal|0x20
block|,
literal|0xe0
block|,
literal|0x10
block|,
literal|0xd0
block|,
literal|0x2c
block|,
literal|0xec
block|,
literal|0x1c
block|,
literal|0xdc
block|,
literal|0x23
block|,
literal|0xe3
block|,
literal|0x13
block|,
literal|0xd3
block|,
literal|0x2f
block|,
literal|0xef
block|,
literal|0x1f
block|,
literal|0xdf
block|}
block|,
block|{
literal|0xa0
block|,
literal|0x60
block|,
literal|0x90
block|,
literal|0x50
block|,
literal|0xac
block|,
literal|0x6c
block|,
literal|0x9c
block|,
literal|0x5c
block|,
literal|0xa3
block|,
literal|0x63
block|,
literal|0x93
block|,
literal|0x53
block|,
literal|0xaf
block|,
literal|0x6f
block|,
literal|0x9f
block|,
literal|0x5f
block|}
block|,
block|{
literal|0x8
block|,
literal|0xc8
block|,
literal|0x38
block|,
literal|0xf8
block|,
literal|0x4
block|,
literal|0xc4
block|,
literal|0x34
block|,
literal|0xf4
block|,
literal|0xb
block|,
literal|0xcb
block|,
literal|0x3b
block|,
literal|0xfb
block|,
literal|0x7
block|,
literal|0xc7
block|,
literal|0x37
block|,
literal|0xf7
block|}
block|,
block|{
literal|0x88
block|,
literal|0x48
block|,
literal|0xb8
block|,
literal|0x78
block|,
literal|0x84
block|,
literal|0x44
block|,
literal|0xb4
block|,
literal|0x74
block|,
literal|0x8b
block|,
literal|0x4b
block|,
literal|0xbb
block|,
literal|0x7b
block|,
literal|0x87
block|,
literal|0x47
block|,
literal|0xb7
block|,
literal|0x77
block|}
block|,
block|{
literal|0x28
block|,
literal|0xe8
block|,
literal|0x18
block|,
literal|0xd8
block|,
literal|0x24
block|,
literal|0xe4
block|,
literal|0x14
block|,
literal|0xd4
block|,
literal|0x2b
block|,
literal|0xeb
block|,
literal|0x1b
block|,
literal|0xdb
block|,
literal|0x27
block|,
literal|0xe7
block|,
literal|0x17
block|,
literal|0xd7
block|}
block|,
block|{
literal|0xa8
block|,
literal|0x68
block|,
literal|0x98
block|,
literal|0x58
block|,
literal|0xa4
block|,
literal|0x64
block|,
literal|0x94
block|,
literal|0x54
block|,
literal|0xab
block|,
literal|0x6b
block|,
literal|0x9b
block|,
literal|0x5b
block|,
literal|0xa7
block|,
literal|0x67
block|,
literal|0x97
block|,
literal|0x57
block|}
block|,
block|{
literal|0x2
block|,
literal|0xc2
block|,
literal|0x32
block|,
literal|0xf2
block|,
literal|0xe
block|,
literal|0xce
block|,
literal|0x3e
block|,
literal|0xfe
block|,
literal|0x1
block|,
literal|0xc1
block|,
literal|0x31
block|,
literal|0xf1
block|,
literal|0xd
block|,
literal|0xcd
block|,
literal|0x3d
block|,
literal|0xfd
block|}
block|,
block|{
literal|0x82
block|,
literal|0x42
block|,
literal|0xb2
block|,
literal|0x72
block|,
literal|0x8e
block|,
literal|0x4e
block|,
literal|0xbe
block|,
literal|0x7e
block|,
literal|0x81
block|,
literal|0x41
block|,
literal|0xb1
block|,
literal|0x71
block|,
literal|0x8d
block|,
literal|0x4d
block|,
literal|0xbd
block|,
literal|0x7d
block|}
block|,
block|{
literal|0x22
block|,
literal|0xe2
block|,
literal|0x12
block|,
literal|0xd2
block|,
literal|0x2e
block|,
literal|0xee
block|,
literal|0x1e
block|,
literal|0xde
block|,
literal|0x21
block|,
literal|0xe1
block|,
literal|0x11
block|,
literal|0xd1
block|,
literal|0x2d
block|,
literal|0xed
block|,
literal|0x1d
block|,
literal|0xdd
block|}
block|,
block|{
literal|0xa2
block|,
literal|0x62
block|,
literal|0x92
block|,
literal|0x52
block|,
literal|0xae
block|,
literal|0x6e
block|,
literal|0x9e
block|,
literal|0x5e
block|,
literal|0xa1
block|,
literal|0x61
block|,
literal|0x91
block|,
literal|0x51
block|,
literal|0xad
block|,
literal|0x6d
block|,
literal|0x9d
block|,
literal|0x5d
block|}
block|,
block|{
literal|0xa
block|,
literal|0xca
block|,
literal|0x3a
block|,
literal|0xfa
block|,
literal|0x6
block|,
literal|0xc6
block|,
literal|0x36
block|,
literal|0xf6
block|,
literal|0x9
block|,
literal|0xc9
block|,
literal|0x39
block|,
literal|0xf9
block|,
literal|0x5
block|,
literal|0xc5
block|,
literal|0x35
block|,
literal|0xf5
block|}
block|,
block|{
literal|0x8a
block|,
literal|0x4a
block|,
literal|0xba
block|,
literal|0x7a
block|,
literal|0x86
block|,
literal|0x46
block|,
literal|0xb6
block|,
literal|0x76
block|,
literal|0x89
block|,
literal|0x49
block|,
literal|0xb9
block|,
literal|0x79
block|,
literal|0x85
block|,
literal|0x45
block|,
literal|0xb5
block|,
literal|0x75
block|}
block|,
block|{
literal|0x2a
block|,
literal|0xea
block|,
literal|0x1a
block|,
literal|0xda
block|,
literal|0x26
block|,
literal|0xe6
block|,
literal|0x16
block|,
literal|0xd6
block|,
literal|0x29
block|,
literal|0xe9
block|,
literal|0x19
block|,
literal|0xd9
block|,
literal|0x25
block|,
literal|0xe5
block|,
literal|0x15
block|,
literal|0xd5
block|}
block|,
block|{
literal|0xaa
block|,
literal|0x6a
block|,
literal|0x9a
block|,
literal|0x5a
block|,
literal|0xa6
block|,
literal|0x66
block|,
literal|0x96
block|,
literal|0x56
block|,
literal|0xa9
block|,
literal|0x69
block|,
literal|0x99
block|,
literal|0x59
block|,
literal|0xa5
block|,
literal|0x65
block|,
literal|0x95
block|,
literal|0x55
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|ARGB_COMBINE_ALPHA
define|#
directive|define
name|ARGB_COMBINE_ALPHA
parameter_list|(
name|argb
parameter_list|,
name|alpha
parameter_list|)
define|\
value|((((argb>> 24) * alpha)>> 8)<< 24) | (argb& 0x00ffffff)
end_define
begin_if
if|#
directive|if
name|QT_POINTER_SIZE
operator|==
literal|8
end_if
begin_comment
comment|// 64-bit versions
end_comment
begin_define
DECL|macro|AMIX
define|#
directive|define
name|AMIX
parameter_list|(
name|mask
parameter_list|)
value|(qMin(((qint64(s)&mask) + (qint64(d)&mask)), qint64(mask)))
end_define
begin_define
DECL|macro|MIX
define|#
directive|define
name|MIX
parameter_list|(
name|mask
parameter_list|)
value|(qMin(((qint64(s)&mask) + (qint64(d)&mask)), qint64(mask)))
end_define
begin_else
else|#
directive|else
end_else
begin_comment
comment|// 32 bits
end_comment
begin_comment
comment|// The mask for alpha can overflow over 32 bits
end_comment
begin_define
DECL|macro|AMIX
define|#
directive|define
name|AMIX
parameter_list|(
name|mask
parameter_list|)
value|quint32(qMin(((qint64(s)&mask) + (qint64(d)&mask)), qint64(mask)))
end_define
begin_define
DECL|macro|MIX
define|#
directive|define
name|MIX
parameter_list|(
name|mask
parameter_list|)
value|(qMin(((quint32(s)&mask) + (quint32(d)&mask)), quint32(mask)))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|comp_func_Plus_one_pixel_const_alpha
specifier|inline
name|int
name|comp_func_Plus_one_pixel_const_alpha
parameter_list|(
name|uint
name|d
parameter_list|,
specifier|const
name|uint
name|s
parameter_list|,
specifier|const
name|uint
name|const_alpha
parameter_list|,
specifier|const
name|uint
name|one_minus_const_alpha
parameter_list|)
block|{
specifier|const
name|int
name|result
init|=
operator|(
name|AMIX
argument_list|(
name|AMASK
argument_list|)
operator||
name|MIX
argument_list|(
name|RMASK
argument_list|)
operator||
name|MIX
argument_list|(
name|GMASK
argument_list|)
operator||
name|MIX
argument_list|(
name|BMASK
argument_list|)
operator|)
decl_stmt|;
return|return
name|INTERPOLATE_PIXEL_255
argument_list|(
name|result
argument_list|,
name|const_alpha
argument_list|,
name|d
argument_list|,
name|one_minus_const_alpha
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|comp_func_Plus_one_pixel
specifier|inline
name|int
name|comp_func_Plus_one_pixel
parameter_list|(
name|uint
name|d
parameter_list|,
specifier|const
name|uint
name|s
parameter_list|)
block|{
specifier|const
name|int
name|result
init|=
operator|(
name|AMIX
argument_list|(
name|AMASK
argument_list|)
operator||
name|MIX
argument_list|(
name|RMASK
argument_list|)
operator||
name|MIX
argument_list|(
name|GMASK
argument_list|)
operator||
name|MIX
argument_list|(
name|BMASK
argument_list|)
operator|)
decl_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_undef
DECL|macro|MIX
undef|#
directive|undef
name|MIX
end_undef
begin_undef
DECL|macro|AMIX
undef|#
directive|undef
name|AMIX
end_undef
begin_comment
comment|// prototypes of all the composition functions
end_comment
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_SourceOver
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_DestinationOver
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_Clear
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_Source
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_Destination
parameter_list|(
name|uint
modifier|*
parameter_list|,
specifier|const
name|uint
modifier|*
parameter_list|,
name|int
parameter_list|,
name|uint
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_SourceIn
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_DestinationIn
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_SourceOut
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_DestinationOut
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_SourceAtop
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_DestinationAtop
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_XOR
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_Plus
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_Multiply
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_Screen
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_Overlay
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_Darken
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_Lighten
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_ColorDodge
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_ColorBurn
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_HardLight
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_SoftLight
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_Difference
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_Exclusion
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|rasterop_SourceOrDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|rasterop_SourceAndDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|rasterop_SourceXorDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|rasterop_NotSourceAndNotDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|rasterop_NotSourceOrNotDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|rasterop_NotSourceXorDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|rasterop_NotSource
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|rasterop_NotSourceAndDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|rasterop_SourceAndNotDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// prototypes of all the solid composition functions
end_comment
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_SourceOver
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_DestinationOver
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_Clear
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_Source
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_Destination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_SourceIn
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_DestinationIn
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_SourceOut
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_DestinationOut
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_SourceAtop
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_DestinationAtop
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_XOR
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_Plus
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_Multiply
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_Screen
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_Overlay
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_Darken
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_Lighten
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_ColorDodge
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_ColorBurn
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_HardLight
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_SoftLight
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_Difference
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|comp_func_solid_Exclusion
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|rasterop_solid_SourceOrDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|rasterop_solid_SourceAndDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|rasterop_solid_SourceXorDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|rasterop_solid_NotSourceAndNotDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|rasterop_solid_NotSourceOrNotDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|rasterop_solid_NotSourceXorDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|rasterop_solid_NotSource
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|rasterop_solid_NotSourceAndDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|QT_FASTCALL
name|rasterop_solid_SourceAndNotDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QDRAWHELPER_P_H
end_comment
end_unit
