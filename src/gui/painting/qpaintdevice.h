begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QPAINTDEVICE_H
end_ifndef
begin_define
DECL|macro|QPAINTDEVICE_H
define|#
directive|define
name|QPAINTDEVICE_H
end_define
begin_include
include|#
directive|include
file|<QtGui/qwindowdefs.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qrect.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QPaintEngine
name|class
name|QPaintEngine
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPaintDevicePrivate
name|class
name|QPaintDevicePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QPaintDevice
comment|// device for QPainter
block|{
name|public
label|:
enum|enum
name|PaintDeviceMetric
block|{
name|PdmWidth
init|=
literal|1
block|,
name|PdmHeight
block|,
name|PdmWidthMM
block|,
name|PdmHeightMM
block|,
name|PdmNumColors
block|,
name|PdmDepth
block|,
name|PdmDpiX
block|,
name|PdmDpiY
block|,
name|PdmPhysicalDpiX
block|,
name|PdmPhysicalDpiY
block|,
name|PdmDevicePixelRatio
block|}
enum|;
name|virtual
operator|~
name|QPaintDevice
argument_list|()
expr_stmt|;
name|virtual
name|int
name|devType
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|paintingActive
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QPaintEngine
operator|*
name|paintEngine
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|int
name|width
argument_list|()
specifier|const
block|{
return|return
name|metric
argument_list|(
name|PdmWidth
argument_list|)
return|;
block|}
name|int
name|height
argument_list|()
specifier|const
block|{
return|return
name|metric
argument_list|(
name|PdmHeight
argument_list|)
return|;
block|}
name|int
name|widthMM
argument_list|()
specifier|const
block|{
return|return
name|metric
argument_list|(
name|PdmWidthMM
argument_list|)
return|;
block|}
name|int
name|heightMM
argument_list|()
specifier|const
block|{
return|return
name|metric
argument_list|(
name|PdmHeightMM
argument_list|)
return|;
block|}
name|int
name|logicalDpiX
argument_list|()
specifier|const
block|{
return|return
name|metric
argument_list|(
name|PdmDpiX
argument_list|)
return|;
block|}
name|int
name|logicalDpiY
argument_list|()
specifier|const
block|{
return|return
name|metric
argument_list|(
name|PdmDpiY
argument_list|)
return|;
block|}
name|int
name|physicalDpiX
argument_list|()
specifier|const
block|{
return|return
name|metric
argument_list|(
name|PdmPhysicalDpiX
argument_list|)
return|;
block|}
name|int
name|physicalDpiY
argument_list|()
specifier|const
block|{
return|return
name|metric
argument_list|(
name|PdmPhysicalDpiY
argument_list|)
return|;
block|}
name|int
name|devicePixelRatio
argument_list|()
specifier|const
block|{
return|return
name|metric
argument_list|(
name|PdmDevicePixelRatio
argument_list|)
return|;
block|}
name|int
name|colorCount
argument_list|()
specifier|const
block|{
return|return
name|metric
argument_list|(
name|PdmNumColors
argument_list|)
return|;
block|}
name|int
name|depth
argument_list|()
specifier|const
block|{
return|return
name|metric
argument_list|(
name|PdmDepth
argument_list|)
return|;
block|}
name|protected
label|:
name|QPaintDevice
argument_list|()
expr_stmt|;
name|virtual
name|int
name|metric
argument_list|(
name|PaintDeviceMetric
name|metric
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|void
name|initPainter
argument_list|(
name|QPainter
operator|*
name|painter
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|QPaintDevice
modifier|*
name|redirected
argument_list|(
name|QPoint
operator|*
name|offset
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|QPainter
operator|*
name|sharedPainter
argument_list|()
specifier|const
expr_stmt|;
name|ushort
name|painters
decl_stmt|;
comment|// refcount
name|private
label|:
name|Q_DISABLE_COPY
argument_list|(
argument|QPaintDevice
argument_list|)
name|QPaintDevicePrivate
modifier|*
name|reserved
decl_stmt|;
name|friend
name|class
name|QPainter
decl_stmt|;
name|friend
name|class
name|QPainterPrivate
decl_stmt|;
name|friend
name|class
name|QFontEngineMac
decl_stmt|;
name|friend
name|class
name|QX11PaintEngine
decl_stmt|;
name|friend
name|Q_GUI_EXPORT
name|int
name|qt_paint_device_metric
parameter_list|(
specifier|const
name|QPaintDevice
modifier|*
name|device
parameter_list|,
name|PaintDeviceMetric
name|metric
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|/*****************************************************************************   Inline functions  *****************************************************************************/
end_comment
begin_expr_stmt
DECL|function|devType
specifier|inline
name|int
name|QPaintDevice
operator|::
name|devType
argument_list|()
specifier|const
block|{
return|return
name|QInternal
operator|::
name|UnknownDevice
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|paintingActive
specifier|inline
name|bool
name|QPaintDevice
operator|::
name|paintingActive
argument_list|()
specifier|const
block|{
return|return
name|painters
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QPAINTDEVICE_H
end_comment
end_unit
