begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QPAINTDEVICE_H
end_ifndef
begin_define
DECL|macro|QPAINTDEVICE_H
define|#
directive|define
name|QPAINTDEVICE_H
end_define
begin_include
include|#
directive|include
file|<QtGui/qwindowdefs.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qrect.h>
end_include
begin_function
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
parameter_list|(
name|Gui
parameter_list|)
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
name|class
name|QWSDisplay
decl_stmt|;
endif|#
directive|endif
DECL|variable|QPaintEngine
name|class
name|QPaintEngine
decl_stmt|;
name|class
name|Q_GUI_EXPORT
name|QPaintDevice
comment|// device for QPainter
decl_stmt|{ public:     enum PaintDeviceMetric
block|{
name|PdmWidth
operator|=
literal|1
operator|,
name|PdmHeight
operator|,
name|PdmWidthMM
operator|,
name|PdmHeightMM
operator|,
name|PdmNumColors
operator|,
name|PdmDepth
operator|,
name|PdmDpiX
operator|,
name|PdmDpiY
operator|,
name|PdmPhysicalDpiX
operator|,
name|PdmPhysicalDpiY
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|virtual
operator|~
name|QPaintDevice
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|virtual
name|int
name|devType
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|bool
name|paintingActive
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|virtual
name|QPaintEngine
operator|*
name|paintEngine
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
end_expr_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
end_if
begin_function_decl
specifier|static
name|QWSDisplay
modifier|*
name|qwsDisplay
parameter_list|()
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WIN
end_ifdef
begin_expr_stmt
name|virtual
name|HDC
name|getDC
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|virtual
name|void
name|releaseDC
argument_list|(
name|HDC
name|hdc
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|int
name|width
argument_list|()
specifier|const
block|{
return|return
name|metric
argument_list|(
name|PdmWidth
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|int
name|height
argument_list|()
specifier|const
block|{
return|return
name|metric
argument_list|(
name|PdmHeight
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|int
name|widthMM
argument_list|()
specifier|const
block|{
return|return
name|metric
argument_list|(
name|PdmWidthMM
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|int
name|heightMM
argument_list|()
specifier|const
block|{
return|return
name|metric
argument_list|(
name|PdmHeightMM
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|int
name|logicalDpiX
argument_list|()
specifier|const
block|{
return|return
name|metric
argument_list|(
name|PdmDpiX
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|int
name|logicalDpiY
argument_list|()
specifier|const
block|{
return|return
name|metric
argument_list|(
name|PdmDpiY
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|int
name|physicalDpiX
argument_list|()
specifier|const
block|{
return|return
name|metric
argument_list|(
name|PdmPhysicalDpiX
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|int
name|physicalDpiY
argument_list|()
specifier|const
block|{
return|return
name|metric
argument_list|(
name|PdmPhysicalDpiY
argument_list|)
return|;
block|}
end_expr_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|QT_DEPRECATED
end_ifdef
begin_expr_stmt
name|QT_DEPRECATED
name|int
name|numColors
argument_list|()
specifier|const
block|{
return|return
name|metric
argument_list|(
name|PdmNumColors
argument_list|)
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|int
name|colorCount
argument_list|()
specifier|const
block|{
return|return
name|metric
argument_list|(
name|PdmNumColors
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|int
name|depth
argument_list|()
specifier|const
block|{
return|return
name|metric
argument_list|(
name|PdmDepth
argument_list|)
return|;
block|}
end_expr_stmt
begin_label
name|protected
label|:
end_label
begin_expr_stmt
name|QPaintDevice
argument_list|()
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|virtual
name|int
name|metric
argument_list|(
name|PaintDeviceMetric
name|metric
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|ushort
name|painters
decl_stmt|;
end_decl_stmt
begin_comment
comment|// refcount
end_comment
begin_label
name|private
label|:
end_label
begin_macro
name|Q_DISABLE_COPY
argument_list|(
argument|QPaintDevice
argument_list|)
end_macro
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT3_SUPPORT
argument_list|)
end_if
begin_label
name|public
label|:
end_label
begin_expr_stmt
name|QT3_SUPPORT
name|Display
operator|*
name|x11Display
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QT3_SUPPORT
name|int
name|x11Screen
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QT3_SUPPORT
name|int
name|x11Depth
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QT3_SUPPORT
name|int
name|x11Cells
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QT3_SUPPORT
name|Qt
operator|::
name|HANDLE
name|x11Colormap
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QT3_SUPPORT
name|bool
name|x11DefaultColormap
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QT3_SUPPORT
name|void
operator|*
name|x11Visual
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QT3_SUPPORT
name|bool
name|x11DefaultVisual
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
specifier|static
name|QT3_SUPPORT
name|Display
modifier|*
name|x11AppDisplay
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QT3_SUPPORT
name|int
name|x11AppScreen
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QT3_SUPPORT
name|int
name|x11AppDepth
parameter_list|(
name|int
name|screen
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QT3_SUPPORT
name|int
name|x11AppCells
parameter_list|(
name|int
name|screen
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
specifier|static
name|QT3_SUPPORT
name|Qt
operator|::
name|HANDLE
name|x11AppRootWindow
argument_list|(
argument|int screen = -
literal|1
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|static
name|QT3_SUPPORT
name|Qt
operator|::
name|HANDLE
name|x11AppColormap
argument_list|(
argument|int screen = -
literal|1
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function_decl
specifier|static
name|QT3_SUPPORT
name|void
modifier|*
name|x11AppVisual
parameter_list|(
name|int
name|screen
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QT3_SUPPORT
name|bool
name|x11AppDefaultColormap
parameter_list|(
name|int
name|screen
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QT3_SUPPORT
name|bool
name|x11AppDefaultVisual
parameter_list|(
name|int
name|screen
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QT3_SUPPORT
name|int
name|x11AppDpiX
parameter_list|(
name|int
name|screen
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QT3_SUPPORT
name|int
name|x11AppDpiY
parameter_list|(
name|int
name|screen
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QT3_SUPPORT
name|void
name|x11SetAppDpiX
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QT3_SUPPORT
name|void
name|x11SetAppDpiY
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|friend
name|class
name|QPainter
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QFontEngineMac
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QX11PaintEngine
decl_stmt|;
end_decl_stmt
begin_function_decl
name|friend
name|Q_GUI_EXPORT
name|int
name|qt_paint_device_metric
parameter_list|(
specifier|const
name|QPaintDevice
modifier|*
name|device
parameter_list|,
name|PaintDeviceMetric
name|metric
parameter_list|)
function_decl|;
end_function_decl
begin_ifdef
unit|};
ifdef|#
directive|ifdef
name|QT3_SUPPORT
end_ifdef
begin_function_decl
name|QT3_SUPPORT
name|Q_GUI_EXPORT
name|void
name|bitBlt
parameter_list|(
name|QPaintDevice
modifier|*
name|dst
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|,
specifier|const
name|QPaintDevice
modifier|*
name|src
parameter_list|,
name|int
name|sx
init|=
literal|0
parameter_list|,
name|int
name|sy
init|=
literal|0
parameter_list|,
name|int
name|sw
init|=
operator|-
literal|1
parameter_list|,
name|int
name|sh
init|=
operator|-
literal|1
parameter_list|,
name|bool
name|ignoreMask
init|=
name|false
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QT3_SUPPORT
name|Q_GUI_EXPORT
name|void
name|bitBlt
parameter_list|(
name|QPaintDevice
modifier|*
name|dst
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|,
specifier|const
name|QImage
modifier|*
name|src
parameter_list|,
name|int
name|sx
init|=
literal|0
parameter_list|,
name|int
name|sy
init|=
literal|0
parameter_list|,
name|int
name|sw
init|=
operator|-
literal|1
parameter_list|,
name|int
name|sh
init|=
operator|-
literal|1
parameter_list|,
name|int
name|conversion_flags
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QT3_SUPPORT
name|Q_GUI_EXPORT
name|void
name|bitBlt
parameter_list|(
name|QPaintDevice
modifier|*
name|dst
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|dp
parameter_list|,
specifier|const
name|QPaintDevice
modifier|*
name|src
parameter_list|,
specifier|const
name|QRect
modifier|&
name|sr
init|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
parameter_list|,
name|bool
name|ignoreMask
init|=
name|false
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*****************************************************************************   Inline functions  *****************************************************************************/
end_comment
begin_expr_stmt
DECL|function|devType
specifier|inline
name|int
name|QPaintDevice
operator|::
name|devType
argument_list|()
specifier|const
block|{
return|return
name|QInternal
operator|::
name|UnknownDevice
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|paintingActive
specifier|inline
name|bool
name|QPaintDevice
operator|::
name|paintingActive
argument_list|()
specifier|const
block|{
return|return
name|painters
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QPAINTDEVICE_H
end_comment
end_unit
