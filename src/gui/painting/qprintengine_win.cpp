begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
end_ifndef
begin_include
include|#
directive|include
file|"qprinter_p.h"
end_include
begin_include
include|#
directive|include
file|"qprintengine_win_p.h"
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<private/qfont_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qfontengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpainter_p.h>
end_include
begin_include
include|#
directive|include
file|<qbitmap.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qvector.h>
end_include
begin_include
include|#
directive|include
file|<qpicture.h>
end_include
begin_include
include|#
directive|include
file|<private/qpicture_p.h>
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|QPainterPath
name|qt_regionToPath
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// #define QT_DEBUG_DRAW
end_comment
begin_function_decl
specifier|static
name|void
name|draw_text_item_win
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|_pos
parameter_list|,
specifier|const
name|QTextItemInt
modifier|&
name|ti
parameter_list|,
name|HDC
name|hdc
parameter_list|,
name|bool
name|convertToText
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|xform
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|topLeft
parameter_list|)
function_decl|;
end_function_decl
begin_struct
specifier|static
specifier|const
struct|struct
block|{
DECL|member|winSizeName
name|int
name|winSizeName
decl_stmt|;
DECL|member|qtSizeName
name|QPrinter
operator|::
name|PaperSize
name|qtSizeName
decl_stmt|;
block|}
DECL|variable|dmMapping
name|dmMapping
index|[]
init|=
block|{
block|{
name|DMPAPER_LETTER
block|,
name|QPrinter
operator|::
name|Letter
block|}
block|,
block|{
name|DMPAPER_LETTERSMALL
block|,
name|QPrinter
operator|::
name|Letter
block|}
block|,
block|{
name|DMPAPER_TABLOID
block|,
name|QPrinter
operator|::
name|Tabloid
block|}
block|,
block|{
name|DMPAPER_LEDGER
block|,
name|QPrinter
operator|::
name|Ledger
block|}
block|,
block|{
name|DMPAPER_LEGAL
block|,
name|QPrinter
operator|::
name|Legal
block|}
block|,
block|{
name|DMPAPER_EXECUTIVE
block|,
name|QPrinter
operator|::
name|Executive
block|}
block|,
block|{
name|DMPAPER_A3
block|,
name|QPrinter
operator|::
name|A3
block|}
block|,
block|{
name|DMPAPER_A4
block|,
name|QPrinter
operator|::
name|A4
block|}
block|,
block|{
name|DMPAPER_A4SMALL
block|,
name|QPrinter
operator|::
name|A4
block|}
block|,
block|{
name|DMPAPER_A5
block|,
name|QPrinter
operator|::
name|A5
block|}
block|,
block|{
name|DMPAPER_B4
block|,
name|QPrinter
operator|::
name|B4
block|}
block|,
block|{
name|DMPAPER_B5
block|,
name|QPrinter
operator|::
name|B5
block|}
block|,
block|{
name|DMPAPER_FOLIO
block|,
name|QPrinter
operator|::
name|Folio
block|}
block|,
block|{
name|DMPAPER_ENV_10
block|,
name|QPrinter
operator|::
name|Comm10E
block|}
block|,
block|{
name|DMPAPER_ENV_DL
block|,
name|QPrinter
operator|::
name|DLE
block|}
block|,
block|{
name|DMPAPER_ENV_C3
block|,
name|QPrinter
operator|::
name|C5E
block|}
block|,
block|{
name|DMPAPER_LETTER_EXTRA
block|,
name|QPrinter
operator|::
name|Letter
block|}
block|,
block|{
name|DMPAPER_LEGAL_EXTRA
block|,
name|QPrinter
operator|::
name|Legal
block|}
block|,
block|{
name|DMPAPER_TABLOID_EXTRA
block|,
name|QPrinter
operator|::
name|Tabloid
block|}
block|,
block|{
name|DMPAPER_A4_EXTRA
block|,
name|QPrinter
operator|::
name|A4
block|}
block|,
block|{
name|DMPAPER_LETTER_TRANSVERSE
block|,
name|QPrinter
operator|::
name|Letter
block|}
block|,
block|{
name|DMPAPER_A4_TRANSVERSE
block|,
name|QPrinter
operator|::
name|A4
block|}
block|,
block|{
name|DMPAPER_LETTER_EXTRA_TRANSVERSE
block|,
name|QPrinter
operator|::
name|Letter
block|}
block|,
block|{
name|DMPAPER_A_PLUS
block|,
name|QPrinter
operator|::
name|A4
block|}
block|,
block|{
name|DMPAPER_B_PLUS
block|,
name|QPrinter
operator|::
name|A3
block|}
block|,
block|{
name|DMPAPER_LETTER_PLUS
block|,
name|QPrinter
operator|::
name|Letter
block|}
block|,
block|{
name|DMPAPER_A4_PLUS
block|,
name|QPrinter
operator|::
name|A4
block|}
block|,
block|{
name|DMPAPER_A5_TRANSVERSE
block|,
name|QPrinter
operator|::
name|A5
block|}
block|,
block|{
name|DMPAPER_B5_TRANSVERSE
block|,
name|QPrinter
operator|::
name|B5
block|}
block|,
block|{
name|DMPAPER_A3_EXTRA
block|,
name|QPrinter
operator|::
name|A3
block|}
block|,
block|{
name|DMPAPER_A5_EXTRA
block|,
name|QPrinter
operator|::
name|A5
block|}
block|,
block|{
name|DMPAPER_B5_EXTRA
block|,
name|QPrinter
operator|::
name|B5
block|}
block|,
block|{
name|DMPAPER_A2
block|,
name|QPrinter
operator|::
name|A2
block|}
block|,
block|{
name|DMPAPER_A3_TRANSVERSE
block|,
name|QPrinter
operator|::
name|A3
block|}
block|,
block|{
name|DMPAPER_A3_EXTRA_TRANSVERSE
block|,
name|QPrinter
operator|::
name|A3
block|}
block|,
block|{
literal|0
block|,
name|QPrinter
operator|::
name|Custom
block|}
block|}
struct|;
end_struct
begin_function
DECL|function|mapDevmodePaperSize
name|QPrinter
operator|::
name|PaperSize
name|mapDevmodePaperSize
parameter_list|(
name|int
name|s
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|dmMapping
index|[
name|i
index|]
operator|.
name|winSizeName
operator|>
literal|0
operator|)
operator|&&
operator|(
name|dmMapping
index|[
name|i
index|]
operator|.
name|winSizeName
operator|!=
name|s
operator|)
condition|)
name|i
operator|++
expr_stmt|;
return|return
name|dmMapping
index|[
name|i
index|]
operator|.
name|qtSizeName
return|;
block|}
end_function
begin_function
DECL|function|mapPaperSizeDevmode
specifier|static
name|int
name|mapPaperSizeDevmode
parameter_list|(
name|QPrinter
operator|::
name|PaperSize
name|s
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|dmMapping
index|[
name|i
index|]
operator|.
name|winSizeName
operator|>
literal|0
operator|)
operator|&&
operator|(
name|dmMapping
index|[
name|i
index|]
operator|.
name|qtSizeName
operator|!=
name|s
operator|)
condition|)
name|i
operator|++
expr_stmt|;
return|return
name|dmMapping
index|[
name|i
index|]
operator|.
name|winSizeName
return|;
block|}
end_function
begin_struct
specifier|static
specifier|const
struct|struct
block|{
DECL|member|winSourceName
name|int
name|winSourceName
decl_stmt|;
DECL|member|qtSourceName
name|QPrinter
operator|::
name|PaperSource
name|qtSourceName
decl_stmt|;
block|}
DECL|variable|sources
name|sources
index|[]
init|=
block|{
block|{
name|DMBIN_ONLYONE
block|,
name|QPrinter
operator|::
name|OnlyOne
block|}
block|,
block|{
name|DMBIN_LOWER
block|,
name|QPrinter
operator|::
name|Lower
block|}
block|,
block|{
name|DMBIN_MIDDLE
block|,
name|QPrinter
operator|::
name|Middle
block|}
block|,
block|{
name|DMBIN_MANUAL
block|,
name|QPrinter
operator|::
name|Manual
block|}
block|,
block|{
name|DMBIN_ENVELOPE
block|,
name|QPrinter
operator|::
name|Envelope
block|}
block|,
block|{
name|DMBIN_ENVMANUAL
block|,
name|QPrinter
operator|::
name|EnvelopeManual
block|}
block|,
block|{
name|DMBIN_AUTO
block|,
name|QPrinter
operator|::
name|Auto
block|}
block|,
block|{
name|DMBIN_TRACTOR
block|,
name|QPrinter
operator|::
name|Tractor
block|}
block|,
block|{
name|DMBIN_SMALLFMT
block|,
name|QPrinter
operator|::
name|SmallFormat
block|}
block|,
block|{
name|DMBIN_LARGEFMT
block|,
name|QPrinter
operator|::
name|LargeFormat
block|}
block|,
block|{
name|DMBIN_LARGECAPACITY
block|,
name|QPrinter
operator|::
name|LargeCapacity
block|}
block|,
block|{
name|DMBIN_CASSETTE
block|,
name|QPrinter
operator|::
name|Cassette
block|}
block|,
block|{
name|DMBIN_FORMSOURCE
block|,
name|QPrinter
operator|::
name|FormSource
block|}
block|,
block|{
literal|0
block|,
operator|(
name|QPrinter
operator|::
name|PaperSource
operator|)
operator|-
literal|1
block|}
block|}
struct|;
end_struct
begin_function
DECL|function|mapDevmodePaperSource
specifier|static
name|QPrinter
operator|::
name|PaperSource
name|mapDevmodePaperSource
parameter_list|(
name|int
name|s
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|sources
index|[
name|i
index|]
operator|.
name|winSourceName
operator|>
literal|0
operator|)
operator|&&
operator|(
name|sources
index|[
name|i
index|]
operator|.
name|winSourceName
operator|!=
name|s
operator|)
condition|)
name|i
operator|++
expr_stmt|;
return|return
name|sources
index|[
name|i
index|]
operator|.
name|winSourceName
condition|?
name|sources
index|[
name|i
index|]
operator|.
name|qtSourceName
else|:
operator|(
name|QPrinter
operator|::
name|PaperSource
operator|)
name|s
return|;
block|}
end_function
begin_function
DECL|function|mapPaperSourceDevmode
specifier|static
name|int
name|mapPaperSourceDevmode
parameter_list|(
name|QPrinter
operator|::
name|PaperSource
name|s
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|sources
index|[
name|i
index|]
operator|.
name|qtSourceName
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|sources
index|[
name|i
index|]
operator|.
name|qtSourceName
operator|!=
name|s
operator|)
condition|)
name|i
operator|++
expr_stmt|;
return|return
name|sources
index|[
name|i
index|]
operator|.
name|winSourceName
condition|?
name|sources
index|[
name|i
index|]
operator|.
name|winSourceName
else|:
name|s
return|;
block|}
end_function
begin_constructor
DECL|function|QWin32PrintEngine
name|QWin32PrintEngine
operator|::
name|QWin32PrintEngine
parameter_list|(
name|QPrinter
operator|::
name|PrinterMode
name|mode
parameter_list|)
member_init_list|:
name|QAlphaPaintEngine
argument_list|(
operator|*
operator|(
operator|new
name|QWin32PrintEnginePrivate
operator|)
argument_list|,
name|PaintEngineFeatures
argument_list|(
name|PrimitiveTransform
operator||
name|PixmapTransform
operator||
name|PerspectiveTransform
operator||
name|PainterPaths
operator||
name|Antialiasing
operator||
name|PaintOutsidePaintEvent
argument_list|)
argument_list|)
block|{
name|Q_D
argument_list|(
name|QWin32PrintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|docName
operator|=
name|QLatin1String
argument_list|(
literal|"document1"
argument_list|)
expr_stmt|;
name|d
operator|->
name|mode
operator|=
name|mode
expr_stmt|;
name|d
operator|->
name|queryDefault
argument_list|()
expr_stmt|;
name|d
operator|->
name|initialize
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|begin
name|bool
name|QWin32PrintEngine
operator|::
name|begin
parameter_list|(
name|QPaintDevice
modifier|*
name|pdev
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWin32PrintEngine
argument_list|)
expr_stmt|;
name|QAlphaPaintEngine
operator|::
name|begin
argument_list|(
name|pdev
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|continueCall
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|d
operator|->
name|reinit
condition|)
block|{
name|d
operator|->
name|resetDC
argument_list|()
expr_stmt|;
name|d
operator|->
name|reinit
operator|=
literal|false
expr_stmt|;
block|}
comment|// ### set default colors and stuff...
name|bool
name|ok
init|=
name|d
operator|->
name|state
operator|==
name|QPrinter
operator|::
name|Idle
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|hdc
condition|)
return|return
literal|false
return|;
comment|// Assign the FILE: to get the query...
if|if
condition|(
name|d
operator|->
name|printToFile
operator|&&
name|d
operator|->
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|->
name|fileName
operator|=
name|d
operator|->
name|port
expr_stmt|;
name|d
operator|->
name|devMode
operator|->
name|dmCopies
operator|=
name|d
operator|->
name|num_copies
expr_stmt|;
name|DOCINFO
name|di
decl_stmt|;
name|memset
argument_list|(
operator|&
name|di
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|DOCINFO
argument_list|)
argument_list|)
expr_stmt|;
name|di
operator|.
name|cbSize
operator|=
sizeof|sizeof
argument_list|(
name|DOCINFO
argument_list|)
expr_stmt|;
name|di
operator|.
name|lpszDocName
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|docName
operator|.
name|utf16
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|printToFile
operator|&&
operator|!
name|d
operator|->
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
name|di
operator|.
name|lpszOutput
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|fileName
operator|.
name|utf16
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok
operator|&&
name|StartDoc
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
operator|&
name|di
argument_list|)
operator|==
name|SP_ERROR
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"QWin32PrintEngine::begin: StartDoc failed"
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|StartPage
argument_list|(
name|d
operator|->
name|hdc
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"QWin32PrintEngine::begin: StartPage failed"
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ok
condition|)
block|{
name|d
operator|->
name|state
operator|=
name|QPrinter
operator|::
name|Idle
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|state
operator|=
name|QPrinter
operator|::
name|Active
expr_stmt|;
block|}
name|d
operator|->
name|matrix
operator|=
name|QTransform
argument_list|()
expr_stmt|;
name|d
operator|->
name|has_pen
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|pen
operator|=
name|QColor
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|d
operator|->
name|has_brush
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|complex_xform
operator|=
literal|false
expr_stmt|;
name|updateMatrix
argument_list|(
name|d
operator|->
name|matrix
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
name|cleanUp
argument_list|()
expr_stmt|;
return|return
name|ok
return|;
block|}
end_function
begin_function
DECL|function|end
name|bool
name|QWin32PrintEngine
operator|::
name|end
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWin32PrintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hdc
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|state
operator|==
name|QPrinter
operator|::
name|Aborted
condition|)
block|{
name|cleanUp
argument_list|()
expr_stmt|;
name|AbortDoc
argument_list|(
name|d
operator|->
name|hdc
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|QAlphaPaintEngine
operator|::
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|continueCall
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|d
operator|->
name|hdc
condition|)
block|{
name|EndPage
argument_list|(
name|d
operator|->
name|hdc
argument_list|)
expr_stmt|;
comment|// end; printing done
name|EndDoc
argument_list|(
name|d
operator|->
name|hdc
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|state
operator|=
name|QPrinter
operator|::
name|Idle
expr_stmt|;
name|d
operator|->
name|reinit
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|newPage
name|bool
name|QWin32PrintEngine
operator|::
name|newPage
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWin32PrintEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|hdc
argument_list|)
expr_stmt|;
name|flushAndInit
argument_list|()
expr_stmt|;
name|bool
name|transparent
init|=
name|GetBkMode
argument_list|(
name|d
operator|->
name|hdc
argument_list|)
operator|==
name|TRANSPARENT
decl_stmt|;
if|if
condition|(
operator|!
name|EndPage
argument_list|(
name|d
operator|->
name|hdc
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"QWin32PrintEngine::newPage: EndPage failed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|d
operator|->
name|reinit
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|resetDC
argument_list|()
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"QWin32PrintEngine::newPage: ResetDC failed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|d
operator|->
name|reinit
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StartPage
argument_list|(
name|d
operator|->
name|hdc
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"Win32PrintEngine::newPage: StartPage failed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|SetTextAlign
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|TA_BASELINE
argument_list|)
expr_stmt|;
if|if
condition|(
name|transparent
condition|)
name|SetBkMode
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|TRANSPARENT
argument_list|)
expr_stmt|;
comment|// ###
return|return
literal|true
return|;
name|bool
name|success
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|hdc
operator|&&
name|d
operator|->
name|state
operator|==
name|QPrinter
operator|::
name|Active
condition|)
block|{
if|if
condition|(
name|EndPage
argument_list|(
name|d
operator|->
name|hdc
argument_list|)
operator|!=
name|SP_ERROR
condition|)
block|{
comment|// reinitialize the DC before StartPage if needed,
comment|// because resetdc is disabled between calls to the StartPage and EndPage functions
comment|// (see StartPage documentation in the Platform SDK:Windows GDI)
comment|//          state = PST_ACTIVEDOC;
comment|//          reinit();
comment|//          state = PST_ACTIVE;
comment|// start the new page now
if|if
condition|(
name|d
operator|->
name|reinit
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|resetDC
argument_list|()
condition|)
name|qErrnoWarning
argument_list|(
literal|"QWin32PrintEngine::newPage(), ResetDC failed (2)"
argument_list|)
expr_stmt|;
name|d
operator|->
name|reinit
operator|=
literal|false
expr_stmt|;
block|}
name|success
operator|=
operator|(
name|StartPage
argument_list|(
name|d
operator|->
name|hdc
argument_list|)
operator|!=
name|SP_ERROR
operator|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|d
operator|->
name|state
operator|=
name|QPrinter
operator|::
name|Aborted
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|abort
name|bool
name|QWin32PrintEngine
operator|::
name|abort
parameter_list|()
block|{
comment|// do nothing loop.
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|drawTextItem
name|void
name|QWin32PrintEngine
operator|::
name|drawTextItem
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QTextItem
modifier|&
name|textItem
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QWin32PrintEngine
argument_list|)
expr_stmt|;
name|QAlphaPaintEngine
operator|::
name|drawTextItem
argument_list|(
name|p
argument_list|,
name|textItem
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|continueCall
argument_list|()
condition|)
return|return;
specifier|const
name|QTextItemInt
modifier|&
name|ti
init|=
cast|static_cast
argument_list|<
specifier|const
name|QTextItemInt
operator|&
argument_list|>
argument_list|(
name|textItem
argument_list|)
decl_stmt|;
name|QRgb
name|brushColor
init|=
name|state
operator|->
name|pen
argument_list|()
operator|.
name|brush
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|rgb
argument_list|()
decl_stmt|;
name|bool
name|fallBack
init|=
name|state
operator|->
name|pen
argument_list|()
operator|.
name|brush
argument_list|()
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|SolidPattern
operator|||
name|qAlpha
argument_list|(
name|brushColor
argument_list|)
operator|!=
literal|0xff
operator|||
name|d
operator|->
name|txop
operator|>=
name|QTransform
operator|::
name|TxProject
operator|||
name|ti
operator|.
name|fontEngine
operator|->
name|type
argument_list|()
operator|!=
name|QFontEngine
operator|::
name|Win
decl_stmt|;
if|if
condition|(
operator|!
name|fallBack
condition|)
block|{
name|QFontEngineWin
modifier|*
name|fe
init|=
cast|static_cast
argument_list|<
name|QFontEngineWin
operator|*
argument_list|>
argument_list|(
name|ti
operator|.
name|fontEngine
argument_list|)
decl_stmt|;
comment|// Try selecting the font to see if we get a substitution font
name|SelectObject
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|fe
operator|->
name|hfont
argument_list|)
expr_stmt|;
if|if
condition|(
name|GetDeviceCaps
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|TECHNOLOGY
argument_list|)
operator|!=
name|DT_CHARSTREAM
condition|)
block|{
name|wchar_t
name|n
index|[
literal|64
index|]
decl_stmt|;
name|GetTextFace
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
literal|64
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|fallBack
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|n
argument_list|)
operator|!=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|fe
operator|->
name|logfont
operator|.
name|lfFaceName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fallBack
condition|)
block|{
name|QPaintEngine
operator|::
name|drawTextItem
argument_list|(
name|p
argument_list|,
name|textItem
argument_list|)
expr_stmt|;
return|return ;
block|}
comment|// We only want to convert the glyphs to text if the entire string is compatible with ASCII
comment|// and if we actually have access to the chars.
name|bool
name|convertToText
init|=
name|ti
operator|.
name|chars
operator|!=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ti
operator|.
name|num_chars
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|ti
operator|.
name|chars
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
operator|>=
literal|0x80
condition|)
block|{
name|convertToText
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|ti
operator|.
name|logClusters
index|[
name|i
index|]
operator|!=
name|i
condition|)
block|{
name|convertToText
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
name|COLORREF
name|cf
init|=
name|RGB
argument_list|(
name|qRed
argument_list|(
name|brushColor
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|brushColor
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|brushColor
argument_list|)
argument_list|)
decl_stmt|;
name|SelectObject
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|CreateSolidBrush
argument_list|(
name|cf
argument_list|)
argument_list|)
expr_stmt|;
name|SelectObject
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|CreatePen
argument_list|(
name|PS_SOLID
argument_list|,
literal|1
argument_list|,
name|cf
argument_list|)
argument_list|)
expr_stmt|;
name|SetTextColor
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|cf
argument_list|)
expr_stmt|;
name|draw_text_item_win
argument_list|(
name|p
argument_list|,
name|ti
argument_list|,
name|d
operator|->
name|hdc
argument_list|,
name|convertToText
argument_list|,
name|d
operator|->
name|matrix
argument_list|,
name|d
operator|->
name|devPaperRect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|SelectObject
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|GetStockObject
argument_list|(
name|HOLLOW_BRUSH
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|SelectObject
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|GetStockObject
argument_list|(
name|BLACK_PEN
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mmToInches
specifier|static
specifier|inline
name|qreal
name|mmToInches
parameter_list|(
name|double
name|mm
parameter_list|)
block|{
return|return
name|mm
operator|*
literal|0.039370147
return|;
block|}
end_function
begin_function
DECL|function|inchesToMM
specifier|static
specifier|inline
name|qreal
name|inchesToMM
parameter_list|(
name|double
name|in
parameter_list|)
block|{
return|return
name|in
operator|/
literal|0.039370147
return|;
block|}
end_function
begin_function
DECL|function|metric
name|int
name|QWin32PrintEngine
operator|::
name|metric
parameter_list|(
name|QPaintDevice
operator|::
name|PaintDeviceMetric
name|m
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWin32PrintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|hdc
condition|)
return|return
literal|0
return|;
name|int
name|val
decl_stmt|;
name|int
name|res
init|=
name|d
operator|->
name|resolution
decl_stmt|;
switch|switch
condition|(
name|m
condition|)
block|{
case|case
name|QPaintDevice
operator|::
name|PdmWidth
case|:
if|if
condition|(
name|d
operator|->
name|has_custom_paper_size
condition|)
block|{
name|val
operator|=
name|qRound
argument_list|(
name|d
operator|->
name|paper_size
operator|.
name|width
argument_list|()
operator|*
name|res
operator|/
literal|72.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|logPixelsX
init|=
name|GetDeviceCaps
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|LOGPIXELSX
argument_list|)
decl_stmt|;
if|if
condition|(
name|logPixelsX
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QWin32PrintEngine::metric: GetDeviceCaps() failed, "
literal|"might be a driver problem"
argument_list|)
expr_stmt|;
name|logPixelsX
operator|=
literal|600
expr_stmt|;
comment|// Reasonable default
block|}
name|val
operator|=
name|res
operator|*
name|GetDeviceCaps
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|d
operator|->
name|fullPage
condition|?
name|PHYSICALWIDTH
else|:
name|HORZRES
argument_list|)
operator|/
name|logPixelsX
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|pageMarginsSet
condition|)
name|val
operator|-=
name|int
argument_list|(
name|mmToInches
argument_list|(
operator|(
name|d
operator|->
name|previousDialogMargins
operator|.
name|left
argument_list|()
operator|+
name|d
operator|->
name|previousDialogMargins
operator|.
name|width
argument_list|()
operator|)
operator|/
literal|100.0
argument_list|)
operator|*
name|res
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmHeight
case|:
if|if
condition|(
name|d
operator|->
name|has_custom_paper_size
condition|)
block|{
name|val
operator|=
name|qRound
argument_list|(
name|d
operator|->
name|paper_size
operator|.
name|height
argument_list|()
operator|*
name|res
operator|/
literal|72.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|logPixelsY
init|=
name|GetDeviceCaps
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|LOGPIXELSY
argument_list|)
decl_stmt|;
if|if
condition|(
name|logPixelsY
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QWin32PrintEngine::metric: GetDeviceCaps() failed, "
literal|"might be a driver problem"
argument_list|)
expr_stmt|;
name|logPixelsY
operator|=
literal|600
expr_stmt|;
comment|// Reasonable default
block|}
name|val
operator|=
name|res
operator|*
name|GetDeviceCaps
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|d
operator|->
name|fullPage
condition|?
name|PHYSICALHEIGHT
else|:
name|VERTRES
argument_list|)
operator|/
name|logPixelsY
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|pageMarginsSet
condition|)
name|val
operator|-=
name|int
argument_list|(
name|mmToInches
argument_list|(
operator|(
name|d
operator|->
name|previousDialogMargins
operator|.
name|top
argument_list|()
operator|+
name|d
operator|->
name|previousDialogMargins
operator|.
name|height
argument_list|()
operator|)
operator|/
literal|100.0
argument_list|)
operator|*
name|res
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmDpiX
case|:
name|val
operator|=
name|res
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmDpiY
case|:
name|val
operator|=
name|res
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmPhysicalDpiX
case|:
name|val
operator|=
name|GetDeviceCaps
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|LOGPIXELSX
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmPhysicalDpiY
case|:
name|val
operator|=
name|GetDeviceCaps
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|LOGPIXELSY
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmWidthMM
case|:
if|if
condition|(
name|d
operator|->
name|has_custom_paper_size
condition|)
block|{
name|val
operator|=
name|qRound
argument_list|(
name|d
operator|->
name|paper_size
operator|.
name|width
argument_list|()
operator|*
literal|25.4
operator|/
literal|72
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|fullPage
condition|)
block|{
name|val
operator|=
name|GetDeviceCaps
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|HORZSIZE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|float
name|wi
init|=
literal|25.4
operator|*
name|GetDeviceCaps
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|PHYSICALWIDTH
argument_list|)
decl_stmt|;
name|int
name|logPixelsX
init|=
name|GetDeviceCaps
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|LOGPIXELSX
argument_list|)
decl_stmt|;
if|if
condition|(
name|logPixelsX
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QWin32PrintEngine::metric: GetDeviceCaps() failed, "
literal|"might be a driver problem"
argument_list|)
expr_stmt|;
name|logPixelsX
operator|=
literal|600
expr_stmt|;
comment|// Reasonable default
block|}
name|val
operator|=
name|qRound
argument_list|(
name|wi
operator|/
name|logPixelsX
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|d
operator|->
name|pageMarginsSet
condition|)
name|val
operator|-=
operator|(
name|d
operator|->
name|previousDialogMargins
operator|.
name|left
argument_list|()
operator|+
name|d
operator|->
name|previousDialogMargins
operator|.
name|width
argument_list|()
operator|)
operator|/
literal|100.0
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmHeightMM
case|:
if|if
condition|(
name|d
operator|->
name|has_custom_paper_size
condition|)
block|{
name|val
operator|=
name|qRound
argument_list|(
name|d
operator|->
name|paper_size
operator|.
name|height
argument_list|()
operator|*
literal|25.4
operator|/
literal|72
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|fullPage
condition|)
block|{
name|val
operator|=
name|GetDeviceCaps
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|VERTSIZE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|float
name|hi
init|=
literal|25.4
operator|*
name|GetDeviceCaps
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|PHYSICALHEIGHT
argument_list|)
decl_stmt|;
name|int
name|logPixelsY
init|=
name|GetDeviceCaps
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|LOGPIXELSY
argument_list|)
decl_stmt|;
if|if
condition|(
name|logPixelsY
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QWin32PrintEngine::metric: GetDeviceCaps() failed, "
literal|"might be a driver problem"
argument_list|)
expr_stmt|;
name|logPixelsY
operator|=
literal|600
expr_stmt|;
comment|// Reasonable default
block|}
name|val
operator|=
name|qRound
argument_list|(
name|hi
operator|/
name|logPixelsY
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|d
operator|->
name|pageMarginsSet
condition|)
name|val
operator|-=
operator|(
name|d
operator|->
name|previousDialogMargins
operator|.
name|top
argument_list|()
operator|+
name|d
operator|->
name|previousDialogMargins
operator|.
name|height
argument_list|()
operator|)
operator|/
literal|100.0
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmNumColors
case|:
block|{
name|int
name|bpp
init|=
name|GetDeviceCaps
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|BITSPIXEL
argument_list|)
decl_stmt|;
if|if
condition|(
name|bpp
operator|==
literal|32
condition|)
name|val
operator|=
name|INT_MAX
expr_stmt|;
elseif|else
if|if
condition|(
name|bpp
operator|<=
literal|8
condition|)
name|val
operator|=
name|GetDeviceCaps
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|NUMCOLORS
argument_list|)
expr_stmt|;
else|else
name|val
operator|=
literal|1
operator|<<
operator|(
name|bpp
operator|*
name|GetDeviceCaps
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|PLANES
argument_list|)
operator|)
expr_stmt|;
block|}
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmDepth
case|:
name|val
operator|=
name|GetDeviceCaps
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|PLANES
argument_list|)
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"QPrinter::metric: Invalid metric command"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|val
return|;
block|}
end_function
begin_function
DECL|function|updateState
name|void
name|QWin32PrintEngine
operator|::
name|updateState
parameter_list|(
specifier|const
name|QPaintEngineState
modifier|&
name|state
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWin32PrintEngine
argument_list|)
expr_stmt|;
name|QAlphaPaintEngine
operator|::
name|updateState
argument_list|(
name|state
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|continueCall
argument_list|()
condition|)
return|return;
if|if
condition|(
name|state
operator|.
name|state
argument_list|()
operator|&
name|DirtyTransform
condition|)
block|{
name|updateMatrix
argument_list|(
name|state
operator|.
name|transform
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|.
name|state
argument_list|()
operator|&
name|DirtyPen
condition|)
block|{
name|d
operator|->
name|pen
operator|=
name|state
operator|.
name|pen
argument_list|()
expr_stmt|;
name|d
operator|->
name|has_pen
operator|=
name|d
operator|->
name|pen
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoPen
operator|&&
name|d
operator|->
name|pen
operator|.
name|isSolid
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|.
name|state
argument_list|()
operator|&
name|DirtyBrush
condition|)
block|{
name|QBrush
name|brush
init|=
name|state
operator|.
name|brush
argument_list|()
decl_stmt|;
name|d
operator|->
name|has_brush
operator|=
name|brush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidPattern
expr_stmt|;
name|d
operator|->
name|brush_color
operator|=
name|brush
operator|.
name|color
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|.
name|state
argument_list|()
operator|&
name|DirtyClipEnabled
condition|)
block|{
if|if
condition|(
name|state
operator|.
name|isClipEnabled
argument_list|()
condition|)
name|updateClipPath
argument_list|(
name|painter
argument_list|()
operator|->
name|clipPath
argument_list|()
argument_list|,
name|Qt
operator|::
name|ReplaceClip
argument_list|)
expr_stmt|;
else|else
name|updateClipPath
argument_list|(
name|QPainterPath
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoClip
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|.
name|state
argument_list|()
operator|&
name|DirtyClipPath
condition|)
block|{
name|updateClipPath
argument_list|(
name|state
operator|.
name|clipPath
argument_list|()
argument_list|,
name|state
operator|.
name|clipOperation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|.
name|state
argument_list|()
operator|&
name|DirtyClipRegion
condition|)
block|{
name|QRegion
name|clipRegion
init|=
name|state
operator|.
name|clipRegion
argument_list|()
decl_stmt|;
name|QPainterPath
name|clipPath
init|=
name|qt_regionToPath
argument_list|(
name|clipRegion
argument_list|)
decl_stmt|;
name|updateClipPath
argument_list|(
name|clipPath
argument_list|,
name|state
operator|.
name|clipOperation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateClipPath
name|void
name|QWin32PrintEngine
operator|::
name|updateClipPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|clipPath
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWin32PrintEngine
argument_list|)
expr_stmt|;
name|bool
name|doclip
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|op
operator|==
name|Qt
operator|::
name|NoClip
condition|)
block|{
name|SelectClipRgn
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doclip
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|doclip
condition|)
block|{
name|QPainterPath
name|xformed
init|=
name|clipPath
operator|*
name|d
operator|->
name|matrix
decl_stmt|;
if|if
condition|(
name|xformed
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QRegion
name|empty
argument_list|(
operator|-
literal|0x1000000
argument_list|,
operator|-
literal|0x1000000
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SelectClipRgn
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|empty
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|composeGdiPath
argument_list|(
name|xformed
argument_list|)
expr_stmt|;
specifier|const
name|int
name|ops
index|[]
init|=
block|{
operator|-
literal|1
block|,
comment|// Qt::NoClip, covered above
name|RGN_COPY
block|,
comment|// Qt::ReplaceClip
name|RGN_AND
block|,
comment|// Qt::IntersectClip
name|RGN_OR
comment|// Qt::UniteClip
block|}
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|op
operator|>
literal|0
operator|&&
name|unsigned
argument_list|(
name|op
argument_list|)
operator|<=
sizeof|sizeof
argument_list|(
name|ops
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|int
argument_list|)
argument_list|)
expr_stmt|;
name|SelectClipPath
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|ops
index|[
name|op
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|QPainterPath
name|aclip
init|=
name|qt_regionToPath
argument_list|(
name|alphaClipping
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|aclip
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QTransform
name|tx
argument_list|(
name|d
operator|->
name|stretch_x
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|d
operator|->
name|stretch_y
argument_list|,
name|d
operator|->
name|origin_x
argument_list|,
name|d
operator|->
name|origin_y
argument_list|)
decl_stmt|;
name|d
operator|->
name|composeGdiPath
argument_list|(
name|tx
operator|.
name|map
argument_list|(
name|aclip
argument_list|)
argument_list|)
expr_stmt|;
name|SelectClipPath
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|RGN_DIFF
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateMatrix
name|void
name|QWin32PrintEngine
operator|::
name|updateMatrix
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|m
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWin32PrintEngine
argument_list|)
expr_stmt|;
name|QTransform
name|stretch
argument_list|(
name|d
operator|->
name|stretch_x
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|d
operator|->
name|stretch_y
argument_list|,
name|d
operator|->
name|origin_x
argument_list|,
name|d
operator|->
name|origin_y
argument_list|)
decl_stmt|;
name|d
operator|->
name|painterMatrix
operator|=
name|m
expr_stmt|;
name|d
operator|->
name|matrix
operator|=
name|d
operator|->
name|painterMatrix
operator|*
name|stretch
expr_stmt|;
name|d
operator|->
name|txop
operator|=
name|d
operator|->
name|matrix
operator|.
name|type
argument_list|()
expr_stmt|;
name|d
operator|->
name|complex_xform
operator|=
operator|(
name|d
operator|->
name|txop
operator|>
name|QTransform
operator|::
name|TxScale
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPixmap
name|void
name|QWin32PrintEngine
operator|::
name|drawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|targetRect
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|originalPixmap
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sourceRect
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWin32PrintEngine
argument_list|)
expr_stmt|;
name|QAlphaPaintEngine
operator|::
name|drawPixmap
argument_list|(
name|targetRect
argument_list|,
name|originalPixmap
argument_list|,
name|sourceRect
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|continueCall
argument_list|()
condition|)
return|return;
specifier|const
name|int
name|tileSize
init|=
literal|2048
decl_stmt|;
name|QRectF
name|r
init|=
name|targetRect
decl_stmt|;
name|QRectF
name|sr
init|=
name|sourceRect
decl_stmt|;
name|QPixmap
name|pixmap
init|=
name|originalPixmap
decl_stmt|;
if|if
condition|(
name|sr
operator|.
name|size
argument_list|()
operator|!=
name|pixmap
operator|.
name|size
argument_list|()
condition|)
block|{
name|pixmap
operator|=
name|pixmap
operator|.
name|copy
argument_list|(
name|sr
operator|.
name|toRect
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|qreal
name|scaleX
init|=
literal|1.0f
decl_stmt|;
name|qreal
name|scaleY
init|=
literal|1.0f
decl_stmt|;
name|QTransform
name|scaleMatrix
init|=
name|QTransform
operator|::
name|fromScale
argument_list|(
name|r
operator|.
name|width
argument_list|()
operator|/
name|pixmap
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
operator|/
name|pixmap
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|QTransform
name|adapted
init|=
name|QPixmap
operator|::
name|trueMatrix
argument_list|(
name|d
operator|->
name|painterMatrix
operator|*
name|scaleMatrix
argument_list|,
name|pixmap
operator|.
name|width
argument_list|()
argument_list|,
name|pixmap
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|qreal
name|xform_offset_x
init|=
name|adapted
operator|.
name|dx
argument_list|()
decl_stmt|;
name|qreal
name|xform_offset_y
init|=
name|adapted
operator|.
name|dy
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|complex_xform
condition|)
block|{
name|pixmap
operator|=
name|pixmap
operator|.
name|transformed
argument_list|(
name|adapted
argument_list|)
expr_stmt|;
name|scaleX
operator|=
name|d
operator|->
name|stretch_x
expr_stmt|;
name|scaleY
operator|=
name|d
operator|->
name|stretch_y
expr_stmt|;
block|}
else|else
block|{
name|scaleX
operator|=
name|d
operator|->
name|stretch_x
operator|*
operator|(
name|r
operator|.
name|width
argument_list|()
operator|/
name|pixmap
operator|.
name|width
argument_list|()
operator|)
operator|*
name|d
operator|->
name|painterMatrix
operator|.
name|m11
argument_list|()
expr_stmt|;
name|scaleY
operator|=
name|d
operator|->
name|stretch_y
operator|*
operator|(
name|r
operator|.
name|height
argument_list|()
operator|/
name|pixmap
operator|.
name|height
argument_list|()
operator|)
operator|*
name|d
operator|->
name|painterMatrix
operator|.
name|m22
argument_list|()
expr_stmt|;
block|}
name|QPointF
name|topLeft
init|=
name|r
operator|.
name|topLeft
argument_list|()
operator|*
name|d
operator|->
name|painterMatrix
decl_stmt|;
name|int
name|tx
init|=
name|int
argument_list|(
name|topLeft
operator|.
name|x
argument_list|()
operator|*
name|d
operator|->
name|stretch_x
operator|+
name|d
operator|->
name|origin_x
argument_list|)
decl_stmt|;
name|int
name|ty
init|=
name|int
argument_list|(
name|topLeft
operator|.
name|y
argument_list|()
operator|*
name|d
operator|->
name|stretch_y
operator|+
name|d
operator|->
name|origin_y
argument_list|)
decl_stmt|;
name|int
name|tw
init|=
name|qAbs
argument_list|(
name|int
argument_list|(
name|pixmap
operator|.
name|width
argument_list|()
operator|*
name|scaleX
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|th
init|=
name|qAbs
argument_list|(
name|int
argument_list|(
name|pixmap
operator|.
name|height
argument_list|()
operator|*
name|scaleY
argument_list|)
argument_list|)
decl_stmt|;
name|xform_offset_x
operator|*=
name|d
operator|->
name|stretch_x
expr_stmt|;
name|xform_offset_y
operator|*=
name|d
operator|->
name|stretch_y
expr_stmt|;
name|int
name|dc_state
init|=
name|SaveDC
argument_list|(
name|d
operator|->
name|hdc
argument_list|)
decl_stmt|;
name|int
name|tilesw
init|=
name|pixmap
operator|.
name|width
argument_list|()
operator|/
name|tileSize
decl_stmt|;
name|int
name|tilesh
init|=
name|pixmap
operator|.
name|height
argument_list|()
operator|/
name|tileSize
decl_stmt|;
operator|++
name|tilesw
expr_stmt|;
operator|++
name|tilesh
expr_stmt|;
name|int
name|txinc
init|=
name|tileSize
operator|*
name|scaleX
decl_stmt|;
name|int
name|tyinc
init|=
name|tileSize
operator|*
name|scaleY
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|tilesh
condition|;
operator|++
name|y
control|)
block|{
name|int
name|tposy
init|=
name|ty
operator|+
operator|(
name|y
operator|*
name|tyinc
operator|)
decl_stmt|;
name|int
name|imgh
init|=
name|tileSize
decl_stmt|;
name|int
name|height
init|=
name|tyinc
decl_stmt|;
if|if
condition|(
name|y
operator|==
operator|(
name|tilesh
operator|-
literal|1
operator|)
condition|)
block|{
name|imgh
operator|=
name|pixmap
operator|.
name|height
argument_list|()
operator|-
operator|(
name|y
operator|*
name|tileSize
operator|)
expr_stmt|;
name|height
operator|=
operator|(
name|th
operator|-
operator|(
name|y
operator|*
name|tyinc
operator|)
operator|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|tilesw
condition|;
operator|++
name|x
control|)
block|{
name|int
name|tposx
init|=
name|tx
operator|+
operator|(
name|x
operator|*
name|txinc
operator|)
decl_stmt|;
name|int
name|imgw
init|=
name|tileSize
decl_stmt|;
name|int
name|width
init|=
name|txinc
decl_stmt|;
if|if
condition|(
name|x
operator|==
operator|(
name|tilesw
operator|-
literal|1
operator|)
condition|)
block|{
name|imgw
operator|=
name|pixmap
operator|.
name|width
argument_list|()
operator|-
operator|(
name|x
operator|*
name|tileSize
operator|)
expr_stmt|;
name|width
operator|=
operator|(
name|tw
operator|-
operator|(
name|x
operator|*
name|txinc
operator|)
operator|)
expr_stmt|;
block|}
name|QPixmap
name|p
init|=
name|pixmap
operator|.
name|copy
argument_list|(
name|tileSize
operator|*
name|x
argument_list|,
name|tileSize
operator|*
name|y
argument_list|,
name|imgw
argument_list|,
name|imgh
argument_list|)
decl_stmt|;
name|HBITMAP
name|hbitmap
init|=
name|p
operator|.
name|toWinHBITMAP
argument_list|(
name|QPixmap
operator|::
name|NoAlpha
argument_list|)
decl_stmt|;
name|HDC
name|display_dc
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|HDC
name|hbitmap_hdc
init|=
name|CreateCompatibleDC
argument_list|(
name|display_dc
argument_list|)
decl_stmt|;
name|HGDIOBJ
name|null_bitmap
init|=
name|SelectObject
argument_list|(
name|hbitmap_hdc
argument_list|,
name|hbitmap
argument_list|)
decl_stmt|;
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|display_dc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|StretchBlt
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|qRound
argument_list|(
name|tposx
operator|-
name|xform_offset_x
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|tposy
operator|-
name|xform_offset_y
argument_list|)
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|hbitmap_hdc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|p
operator|.
name|width
argument_list|()
argument_list|,
name|p
operator|.
name|height
argument_list|()
argument_list|,
name|SRCCOPY
argument_list|)
condition|)
name|qErrnoWarning
argument_list|(
literal|"QWin32PrintEngine::drawPixmap, StretchBlt failed"
argument_list|)
expr_stmt|;
name|SelectObject
argument_list|(
name|hbitmap_hdc
argument_list|,
name|null_bitmap
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|hbitmap
argument_list|)
expr_stmt|;
name|DeleteDC
argument_list|(
name|hbitmap_hdc
argument_list|)
expr_stmt|;
block|}
block|}
name|RestoreDC
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|dc_state
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawTiledPixmap
name|void
name|QWin32PrintEngine
operator|::
name|drawTiledPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWin32PrintEngine
argument_list|)
expr_stmt|;
name|QAlphaPaintEngine
operator|::
name|drawTiledPixmap
argument_list|(
name|r
argument_list|,
name|pm
argument_list|,
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|continueCall
argument_list|()
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|complex_xform
operator|||
operator|!
name|pos
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QPaintEngine
operator|::
name|drawTiledPixmap
argument_list|(
name|r
argument_list|,
name|pm
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|dc_state
init|=
name|SaveDC
argument_list|(
name|d
operator|->
name|hdc
argument_list|)
decl_stmt|;
name|HDC
name|display_dc
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|HBITMAP
name|hbitmap
init|=
name|pm
operator|.
name|toWinHBITMAP
argument_list|(
name|QPixmap
operator|::
name|NoAlpha
argument_list|)
decl_stmt|;
name|HDC
name|hbitmap_hdc
init|=
name|CreateCompatibleDC
argument_list|(
name|display_dc
argument_list|)
decl_stmt|;
name|HGDIOBJ
name|null_bitmap
init|=
name|SelectObject
argument_list|(
name|hbitmap_hdc
argument_list|,
name|hbitmap
argument_list|)
decl_stmt|;
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|display_dc
argument_list|)
expr_stmt|;
name|QRectF
name|trect
init|=
name|d
operator|->
name|painterMatrix
operator|.
name|mapRect
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|int
name|tx
init|=
name|int
argument_list|(
name|trect
operator|.
name|left
argument_list|()
operator|*
name|d
operator|->
name|stretch_x
operator|+
name|d
operator|->
name|origin_x
argument_list|)
decl_stmt|;
name|int
name|ty
init|=
name|int
argument_list|(
name|trect
operator|.
name|top
argument_list|()
operator|*
name|d
operator|->
name|stretch_y
operator|+
name|d
operator|->
name|origin_y
argument_list|)
decl_stmt|;
name|int
name|xtiles
init|=
name|int
argument_list|(
name|trect
operator|.
name|width
argument_list|()
operator|/
name|pm
operator|.
name|width
argument_list|()
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|ytiles
init|=
name|int
argument_list|(
name|trect
operator|.
name|height
argument_list|()
operator|/
name|pm
operator|.
name|height
argument_list|()
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|xinc
init|=
name|int
argument_list|(
name|pm
operator|.
name|width
argument_list|()
operator|*
name|d
operator|->
name|stretch_x
argument_list|)
decl_stmt|;
name|int
name|yinc
init|=
name|int
argument_list|(
name|pm
operator|.
name|height
argument_list|()
operator|*
name|d
operator|->
name|stretch_y
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|ytiles
condition|;
operator|++
name|y
control|)
block|{
name|int
name|ity
init|=
name|ty
operator|+
operator|(
name|yinc
operator|*
name|y
operator|)
decl_stmt|;
name|int
name|ith
init|=
name|pm
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
name|y
operator|==
operator|(
name|ytiles
operator|-
literal|1
operator|)
condition|)
block|{
name|ith
operator|=
name|int
argument_list|(
name|trect
operator|.
name|height
argument_list|()
operator|-
operator|(
name|pm
operator|.
name|height
argument_list|()
operator|*
name|y
operator|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|xtiles
condition|;
operator|++
name|x
control|)
block|{
name|int
name|itx
init|=
name|tx
operator|+
operator|(
name|xinc
operator|*
name|x
operator|)
decl_stmt|;
name|int
name|itw
init|=
name|pm
operator|.
name|width
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|==
operator|(
name|xtiles
operator|-
literal|1
operator|)
condition|)
block|{
name|itw
operator|=
name|int
argument_list|(
name|trect
operator|.
name|width
argument_list|()
operator|-
operator|(
name|pm
operator|.
name|width
argument_list|()
operator|*
name|x
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StretchBlt
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|itx
argument_list|,
name|ity
argument_list|,
name|int
argument_list|(
name|itw
operator|*
name|d
operator|->
name|stretch_x
argument_list|)
argument_list|,
name|int
argument_list|(
name|ith
operator|*
name|d
operator|->
name|stretch_y
argument_list|)
argument_list|,
name|hbitmap_hdc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|itw
argument_list|,
name|ith
argument_list|,
name|SRCCOPY
argument_list|)
condition|)
name|qErrnoWarning
argument_list|(
literal|"QWin32PrintEngine::drawPixmap, StretchBlt failed"
argument_list|)
expr_stmt|;
block|}
block|}
name|SelectObject
argument_list|(
name|hbitmap_hdc
argument_list|,
name|null_bitmap
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|hbitmap
argument_list|)
expr_stmt|;
name|DeleteDC
argument_list|(
name|hbitmap_hdc
argument_list|)
expr_stmt|;
name|RestoreDC
argument_list|(
name|d
operator|->
name|hdc
argument_list|,
name|dc_state
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|composeGdiPath
name|void
name|QWin32PrintEnginePrivate
operator|::
name|composeGdiPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|BeginPath
argument_list|(
name|hdc
argument_list|)
condition|)
name|qErrnoWarning
argument_list|(
literal|"QWin32PrintEnginePrivate::drawPath: BeginPath failed"
argument_list|)
expr_stmt|;
comment|// Drawing the subpaths
name|int
name|start
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPainterPath
operator|::
name|Element
modifier|&
name|elm
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|elm
operator|.
name|type
condition|)
block|{
case|case
name|QPainterPath
operator|::
name|MoveToElement
case|:
if|if
condition|(
name|start
operator|>=
literal|0
operator|&&
name|path
operator|.
name|elementAt
argument_list|(
name|start
argument_list|)
operator|.
name|x
operator|==
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|x
operator|&&
name|path
operator|.
name|elementAt
argument_list|(
name|start
argument_list|)
operator|.
name|y
operator|==
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|y
condition|)
name|CloseFigure
argument_list|(
name|hdc
argument_list|)
expr_stmt|;
name|start
operator|=
name|i
expr_stmt|;
name|MoveToEx
argument_list|(
name|hdc
argument_list|,
name|qRound
argument_list|(
name|elm
operator|.
name|x
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|elm
operator|.
name|y
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|LineToElement
case|:
name|LineTo
argument_list|(
name|hdc
argument_list|,
name|qRound
argument_list|(
name|elm
operator|.
name|x
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|elm
operator|.
name|y
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToElement
case|:
block|{
name|POINT
name|pts
index|[
literal|3
index|]
init|=
block|{
block|{
name|qRound
argument_list|(
name|elm
operator|.
name|x
argument_list|)
block|,
name|qRound
argument_list|(
argument|elm.y
argument_list|)
block|}
block|,
block|{
name|qRound
argument_list|(
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|x
argument_list|)
block|,
name|qRound
argument_list|(
argument|path.elementAt(i+
literal|1
argument|).y
argument_list|)
block|}
block|,
block|{
name|qRound
argument_list|(
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
operator|.
name|x
argument_list|)
block|,
name|qRound
argument_list|(
argument|path.elementAt(i+
literal|2
argument|).y
argument_list|)
block|}
block|}
decl_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
name|PolyBezierTo
argument_list|(
name|hdc
argument_list|,
name|pts
argument_list|,
literal|3
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
name|qFatal
argument_list|(
literal|"QWin32PaintEngine::drawPath: Unhandled type: %d"
argument_list|,
name|elm
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|start
operator|>=
literal|0
operator|&&
name|path
operator|.
name|elementAt
argument_list|(
name|start
argument_list|)
operator|.
name|x
operator|==
name|path
operator|.
name|elementAt
argument_list|(
name|path
operator|.
name|elementCount
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|x
operator|&&
name|path
operator|.
name|elementAt
argument_list|(
name|start
argument_list|)
operator|.
name|y
operator|==
name|path
operator|.
name|elementAt
argument_list|(
name|path
operator|.
name|elementCount
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|y
condition|)
name|CloseFigure
argument_list|(
name|hdc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|EndPath
argument_list|(
name|hdc
argument_list|)
condition|)
name|qErrnoWarning
argument_list|(
literal|"QWin32PaintEngine::drawPath: EndPath failed"
argument_list|)
expr_stmt|;
name|SetPolyFillMode
argument_list|(
name|hdc
argument_list|,
name|path
operator|.
name|fillRule
argument_list|()
operator|==
name|Qt
operator|::
name|WindingFill
condition|?
name|WINDING
else|:
name|ALTERNATE
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillPath_dev
name|void
name|QWin32PrintEnginePrivate
operator|::
name|fillPath_dev
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" --- QWin32PrintEnginePrivate::fillPath() bound:"
operator|<<
name|path
operator|.
name|boundingRect
argument_list|()
operator|<<
name|color
expr_stmt|;
endif|#
directive|endif
name|composeGdiPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|HBRUSH
name|brush
init|=
name|CreateSolidBrush
argument_list|(
name|RGB
argument_list|(
name|color
operator|.
name|red
argument_list|()
argument_list|,
name|color
operator|.
name|green
argument_list|()
argument_list|,
name|color
operator|.
name|blue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|HGDIOBJ
name|old_brush
init|=
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|brush
argument_list|)
decl_stmt|;
name|FillPath
argument_list|(
name|hdc
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|old_brush
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|strokePath_dev
name|void
name|QWin32PrintEnginePrivate
operator|::
name|strokePath_dev
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|,
name|qreal
name|penWidth
parameter_list|)
block|{
name|composeGdiPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|LOGBRUSH
name|brush
decl_stmt|;
name|brush
operator|.
name|lbStyle
operator|=
name|BS_SOLID
expr_stmt|;
name|brush
operator|.
name|lbColor
operator|=
name|RGB
argument_list|(
name|color
operator|.
name|red
argument_list|()
argument_list|,
name|color
operator|.
name|green
argument_list|()
argument_list|,
name|color
operator|.
name|blue
argument_list|()
argument_list|)
expr_stmt|;
name|DWORD
name|capStyle
init|=
name|PS_ENDCAP_SQUARE
decl_stmt|;
name|DWORD
name|joinStyle
init|=
name|PS_JOIN_BEVEL
decl_stmt|;
if|if
condition|(
name|pen
operator|.
name|capStyle
argument_list|()
operator|==
name|Qt
operator|::
name|FlatCap
condition|)
name|capStyle
operator|=
name|PS_ENDCAP_FLAT
expr_stmt|;
elseif|else
if|if
condition|(
name|pen
operator|.
name|capStyle
argument_list|()
operator|==
name|Qt
operator|::
name|RoundCap
condition|)
name|capStyle
operator|=
name|PS_ENDCAP_ROUND
expr_stmt|;
if|if
condition|(
name|pen
operator|.
name|joinStyle
argument_list|()
operator|==
name|Qt
operator|::
name|MiterJoin
condition|)
name|joinStyle
operator|=
name|PS_JOIN_MITER
expr_stmt|;
elseif|else
if|if
condition|(
name|pen
operator|.
name|joinStyle
argument_list|()
operator|==
name|Qt
operator|::
name|RoundJoin
condition|)
name|joinStyle
operator|=
name|PS_JOIN_ROUND
expr_stmt|;
name|HPEN
name|pen
init|=
name|ExtCreatePen
argument_list|(
operator|(
operator|(
name|penWidth
operator|==
literal|0
operator|)
condition|?
name|PS_COSMETIC
else|:
name|PS_GEOMETRIC
operator|)
operator||
name|PS_SOLID
operator||
name|capStyle
operator||
name|joinStyle
argument_list|,
operator|(
name|penWidth
operator|==
literal|0
operator|)
condition|?
literal|1
else|:
name|penWidth
argument_list|,
operator|&
name|brush
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|HGDIOBJ
name|old_pen
init|=
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|pen
argument_list|)
decl_stmt|;
name|StrokePath
argument_list|(
name|hdc
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|old_pen
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillPath
name|void
name|QWin32PrintEnginePrivate
operator|::
name|fillPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|fillPath_dev
argument_list|(
name|path
operator|*
name|matrix
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|strokePath
name|void
name|QWin32PrintEnginePrivate
operator|::
name|strokePath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|QPainterPathStroker
name|stroker
decl_stmt|;
if|if
condition|(
name|pen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|CustomDashLine
condition|)
block|{
name|stroker
operator|.
name|setDashPattern
argument_list|(
name|pen
operator|.
name|dashPattern
argument_list|()
argument_list|)
expr_stmt|;
name|stroker
operator|.
name|setDashOffset
argument_list|(
name|pen
operator|.
name|dashOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stroker
operator|.
name|setDashPattern
argument_list|(
name|pen
operator|.
name|style
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stroker
operator|.
name|setCapStyle
argument_list|(
name|pen
operator|.
name|capStyle
argument_list|()
argument_list|)
expr_stmt|;
name|stroker
operator|.
name|setJoinStyle
argument_list|(
name|pen
operator|.
name|joinStyle
argument_list|()
argument_list|)
expr_stmt|;
name|stroker
operator|.
name|setMiterLimit
argument_list|(
name|pen
operator|.
name|miterLimit
argument_list|()
argument_list|)
expr_stmt|;
name|QPainterPath
name|stroke
decl_stmt|;
name|qreal
name|width
init|=
name|pen
operator|.
name|widthF
argument_list|()
decl_stmt|;
if|if
condition|(
name|pen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidLine
operator|&&
operator|(
name|pen
operator|.
name|isCosmetic
argument_list|()
operator|||
name|matrix
operator|.
name|type
argument_list|()
operator|<
name|QTransform
operator|::
name|TxScale
operator|)
condition|)
block|{
name|strokePath_dev
argument_list|(
name|path
operator|*
name|matrix
argument_list|,
name|color
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stroker
operator|.
name|setWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
if|if
condition|(
name|pen
operator|.
name|isCosmetic
argument_list|()
condition|)
block|{
name|stroke
operator|=
name|stroker
operator|.
name|createStroke
argument_list|(
name|path
operator|*
name|matrix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stroke
operator|=
name|stroker
operator|.
name|createStroke
argument_list|(
name|path
argument_list|)
operator|*
name|painterMatrix
expr_stmt|;
name|QTransform
name|stretch
argument_list|(
name|stretch_x
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|stretch_y
argument_list|,
name|origin_x
argument_list|,
name|origin_y
argument_list|)
decl_stmt|;
name|stroke
operator|=
name|stroke
operator|*
name|stretch
expr_stmt|;
block|}
if|if
condition|(
name|stroke
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|fillPath_dev
argument_list|(
name|stroke
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawPath
name|void
name|QWin32PrintEngine
operator|::
name|drawPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" - QWin32PrintEngine::drawPath(), bounds: "
operator|<<
name|path
operator|.
name|boundingRect
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|Q_D
argument_list|(
name|QWin32PrintEngine
argument_list|)
expr_stmt|;
name|QAlphaPaintEngine
operator|::
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|continueCall
argument_list|()
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|has_brush
condition|)
name|d
operator|->
name|fillPath
argument_list|(
name|path
argument_list|,
name|d
operator|->
name|brush_color
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|has_pen
condition|)
name|d
operator|->
name|strokePath
argument_list|(
name|path
argument_list|,
name|d
operator|->
name|pen
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPolygon
name|void
name|QWin32PrintEngine
operator|::
name|drawPolygon
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|PolygonDrawMode
name|mode
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" - QWin32PrintEngine::drawPolygon(), pointCount: "
operator|<<
name|pointCount
expr_stmt|;
endif|#
directive|endif
name|QAlphaPaintEngine
operator|::
name|drawPolygon
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|,
name|mode
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|continueCall
argument_list|()
condition|)
return|return;
name|Q_ASSERT
argument_list|(
name|pointCount
operator|>
literal|1
argument_list|)
expr_stmt|;
name|QPainterPath
name|path
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pointCount
condition|;
operator|++
name|i
control|)
block|{
name|path
operator|.
name|lineTo
argument_list|(
name|points
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|Q_D
argument_list|(
name|QWin32PrintEngine
argument_list|)
expr_stmt|;
name|bool
name|has_brush
init|=
name|d
operator|->
name|has_brush
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|PolylineMode
condition|)
name|d
operator|->
name|has_brush
operator|=
literal|false
expr_stmt|;
comment|// No brush for polylines
else|else
name|path
operator|.
name|closeSubpath
argument_list|()
expr_stmt|;
comment|// polygons are should always be closed.
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|d
operator|->
name|has_brush
operator|=
name|has_brush
expr_stmt|;
block|}
end_function
begin_function
DECL|function|queryDefault
name|void
name|QWin32PrintEnginePrivate
operator|::
name|queryDefault
parameter_list|()
block|{
comment|/* Read the default printer name, driver and port with the intuitive function      * Strings "windows" and "device" are specified in the MSDN under EnumPrinters()      */
name|QString
name|noPrinters
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_no_printers"
argument_list|)
argument_list|)
decl_stmt|;
name|wchar_t
name|buffer
index|[
literal|256
index|]
decl_stmt|;
name|GetProfileString
argument_list|(
literal|L"windows"
argument_list|,
literal|L"device"
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|noPrinters
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|buffer
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|QString
name|output
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|output
operator|.
name|isEmpty
argument_list|()
operator|||
name|output
operator|==
name|noPrinters
condition|)
comment|// no printers
return|return;
name|QStringList
name|info
init|=
name|output
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|infoSize
init|=
name|info
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|infoSize
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
name|name
operator|=
name|info
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|program
operator|.
name|isEmpty
argument_list|()
operator|&&
name|infoSize
operator|>
literal|1
condition|)
name|program
operator|=
name|info
operator|.
name|at
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|port
operator|.
name|isEmpty
argument_list|()
operator|&&
name|infoSize
operator|>
literal|2
condition|)
name|port
operator|=
name|info
operator|.
name|at
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_destructor
DECL|function|~QWin32PrintEnginePrivate
name|QWin32PrintEnginePrivate
operator|::
name|~
name|QWin32PrintEnginePrivate
parameter_list|()
block|{
if|if
condition|(
name|hdc
condition|)
name|release
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|initialize
name|void
name|QWin32PrintEnginePrivate
operator|::
name|initialize
parameter_list|()
block|{
if|if
condition|(
name|hdc
condition|)
name|release
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|hPrinter
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|hdc
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|devMode
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|pInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|txop
operator|=
name|QTransform
operator|::
name|TxNone
expr_stmt|;
name|bool
name|ok
init|=
name|OpenPrinter
argument_list|(
operator|(
name|LPWSTR
operator|)
name|name
operator|.
name|utf16
argument_list|()
argument_list|,
operator|(
name|LPHANDLE
operator|)
operator|&
name|hPrinter
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"QWin32PrintEngine::initialize: OpenPrinter failed"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Fetch the PRINTER_INFO_2 with DEVMODE data containing the
comment|// printer settings.
name|DWORD
name|infoSize
decl_stmt|,
name|numBytes
decl_stmt|;
name|GetPrinter
argument_list|(
name|hPrinter
argument_list|,
literal|2
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
operator|&
name|infoSize
argument_list|)
expr_stmt|;
name|hMem
operator|=
name|GlobalAlloc
argument_list|(
name|GHND
argument_list|,
name|infoSize
argument_list|)
expr_stmt|;
name|pInfo
operator|=
operator|(
name|PRINTER_INFO_2
operator|*
operator|)
name|GlobalLock
argument_list|(
name|hMem
argument_list|)
expr_stmt|;
name|ok
operator|=
name|GetPrinter
argument_list|(
name|hPrinter
argument_list|,
literal|2
argument_list|,
operator|(
name|LPBYTE
operator|)
name|pInfo
argument_list|,
name|infoSize
argument_list|,
operator|&
name|numBytes
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"QWin32PrintEngine::initialize: GetPrinter failed"
argument_list|)
expr_stmt|;
name|GlobalUnlock
argument_list|(
name|pInfo
argument_list|)
expr_stmt|;
name|GlobalFree
argument_list|(
name|hMem
argument_list|)
expr_stmt|;
name|ClosePrinter
argument_list|(
name|hPrinter
argument_list|)
expr_stmt|;
name|pInfo
operator|=
literal|0
expr_stmt|;
name|hMem
operator|=
literal|0
expr_stmt|;
name|hPrinter
operator|=
literal|0
expr_stmt|;
return|return;
block|}
name|devMode
operator|=
name|pInfo
operator|->
name|pDevMode
expr_stmt|;
name|hdc
operator|=
name|CreateDC
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|program
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|name
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
name|devMode
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|hPrinter
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|pInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|devMode
condition|)
block|{
name|num_copies
operator|=
name|devMode
operator|->
name|dmCopies
expr_stmt|;
block|}
name|initHDC
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QWin32PrintEngine::initialize()"
operator|<<
name|endl
operator|<<
literal|" - paperRect"
operator|<<
name|devPaperRect
operator|<<
name|endl
operator|<<
literal|" - pageRect"
operator|<<
name|devPageRect
operator|<<
name|endl
operator|<<
literal|" - stretch_x"
operator|<<
name|stretch_x
operator|<<
name|endl
operator|<<
literal|" - stretch_y"
operator|<<
name|stretch_y
operator|<<
name|endl
operator|<<
literal|" - origin_x"
operator|<<
name|origin_x
operator|<<
name|endl
operator|<<
literal|" - origin_y"
operator|<<
name|origin_y
operator|<<
name|endl
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|initHDC
name|void
name|QWin32PrintEnginePrivate
operator|::
name|initHDC
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|hdc
argument_list|)
expr_stmt|;
name|HDC
name|display_dc
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|dpi_x
operator|=
name|GetDeviceCaps
argument_list|(
name|hdc
argument_list|,
name|LOGPIXELSX
argument_list|)
expr_stmt|;
name|dpi_y
operator|=
name|GetDeviceCaps
argument_list|(
name|hdc
argument_list|,
name|LOGPIXELSY
argument_list|)
expr_stmt|;
name|dpi_display
operator|=
name|GetDeviceCaps
argument_list|(
name|display_dc
argument_list|,
name|LOGPIXELSY
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|display_dc
argument_list|)
expr_stmt|;
if|if
condition|(
name|dpi_display
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QWin32PrintEngine::metric: GetDeviceCaps() failed, "
literal|"might be a driver problem"
argument_list|)
expr_stmt|;
name|dpi_display
operator|=
literal|96
expr_stmt|;
comment|// Reasonable default
block|}
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|QPrinter
operator|::
name|ScreenResolution
case|:
name|resolution
operator|=
name|dpi_display
expr_stmt|;
name|stretch_x
operator|=
name|dpi_x
operator|/
name|double
argument_list|(
name|dpi_display
argument_list|)
expr_stmt|;
name|stretch_y
operator|=
name|dpi_y
operator|/
name|double
argument_list|(
name|dpi_display
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPrinter
operator|::
name|PrinterResolution
case|:
case|case
name|QPrinter
operator|::
name|HighResolution
case|:
name|resolution
operator|=
name|dpi_y
expr_stmt|;
name|stretch_x
operator|=
literal|1
expr_stmt|;
name|stretch_y
operator|=
literal|1
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|initDevRects
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initDevRects
name|void
name|QWin32PrintEnginePrivate
operator|::
name|initDevRects
parameter_list|()
block|{
name|devPaperRect
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|GetDeviceCaps
argument_list|(
name|hdc
argument_list|,
name|PHYSICALWIDTH
argument_list|)
argument_list|,
name|GetDeviceCaps
argument_list|(
name|hdc
argument_list|,
name|PHYSICALHEIGHT
argument_list|)
argument_list|)
expr_stmt|;
name|devPhysicalPageRect
operator|=
name|QRect
argument_list|(
name|GetDeviceCaps
argument_list|(
name|hdc
argument_list|,
name|PHYSICALOFFSETX
argument_list|)
argument_list|,
name|GetDeviceCaps
argument_list|(
name|hdc
argument_list|,
name|PHYSICALOFFSETY
argument_list|)
argument_list|,
name|GetDeviceCaps
argument_list|(
name|hdc
argument_list|,
name|HORZRES
argument_list|)
argument_list|,
name|GetDeviceCaps
argument_list|(
name|hdc
argument_list|,
name|VERTRES
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pageMarginsSet
condition|)
name|devPageRect
operator|=
name|devPhysicalPageRect
expr_stmt|;
else|else
name|devPageRect
operator|=
name|devPaperRect
operator|.
name|adjusted
argument_list|(
name|qRound
argument_list|(
name|mmToInches
argument_list|(
name|previousDialogMargins
operator|.
name|left
argument_list|()
operator|/
literal|100.0
argument_list|)
operator|*
name|dpi_x
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|mmToInches
argument_list|(
name|previousDialogMargins
operator|.
name|top
argument_list|()
operator|/
literal|100.0
argument_list|)
operator|*
name|dpi_y
argument_list|)
argument_list|,
operator|-
name|qRound
argument_list|(
name|mmToInches
argument_list|(
name|previousDialogMargins
operator|.
name|width
argument_list|()
operator|/
literal|100.0
argument_list|)
operator|*
name|dpi_x
argument_list|)
argument_list|,
operator|-
name|qRound
argument_list|(
name|mmToInches
argument_list|(
name|previousDialogMargins
operator|.
name|height
argument_list|()
operator|/
literal|100.0
argument_list|)
operator|*
name|dpi_y
argument_list|)
argument_list|)
expr_stmt|;
name|updateOrigin
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setPageMargins
name|void
name|QWin32PrintEnginePrivate
operator|::
name|setPageMargins
parameter_list|(
name|int
name|marginLeft
parameter_list|,
name|int
name|marginTop
parameter_list|,
name|int
name|marginRight
parameter_list|,
name|int
name|marginBottom
parameter_list|)
block|{
name|pageMarginsSet
operator|=
literal|true
expr_stmt|;
name|previousDialogMargins
operator|=
name|QRect
argument_list|(
name|marginLeft
argument_list|,
name|marginTop
argument_list|,
name|marginRight
argument_list|,
name|marginBottom
argument_list|)
expr_stmt|;
name|devPageRect
operator|=
name|devPaperRect
operator|.
name|adjusted
argument_list|(
name|qRound
argument_list|(
name|mmToInches
argument_list|(
name|marginLeft
operator|/
literal|100.0
argument_list|)
operator|*
name|dpi_x
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|mmToInches
argument_list|(
name|marginTop
operator|/
literal|100.0
argument_list|)
operator|*
name|dpi_y
argument_list|)
argument_list|,
operator|-
name|qRound
argument_list|(
name|mmToInches
argument_list|(
name|marginRight
operator|/
literal|100.0
argument_list|)
operator|*
name|dpi_x
argument_list|)
argument_list|,
operator|-
name|qRound
argument_list|(
name|mmToInches
argument_list|(
name|marginBottom
operator|/
literal|100.0
argument_list|)
operator|*
name|dpi_y
argument_list|)
argument_list|)
expr_stmt|;
name|updateOrigin
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getPageMargins
name|QRect
name|QWin32PrintEnginePrivate
operator|::
name|getPageMargins
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|pageMarginsSet
condition|)
return|return
name|previousDialogMargins
return|;
else|else
return|return
name|QRect
argument_list|(
name|qRound
argument_list|(
name|inchesToMM
argument_list|(
name|devPhysicalPageRect
operator|.
name|left
argument_list|()
argument_list|)
operator|*
literal|100.0
operator|/
name|dpi_x
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|inchesToMM
argument_list|(
name|devPhysicalPageRect
operator|.
name|top
argument_list|()
argument_list|)
operator|*
literal|100.0
operator|/
name|dpi_y
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|inchesToMM
argument_list|(
name|devPaperRect
operator|.
name|right
argument_list|()
operator|-
name|devPhysicalPageRect
operator|.
name|right
argument_list|()
argument_list|)
operator|*
literal|100.0
operator|/
name|dpi_x
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|inchesToMM
argument_list|(
name|devPaperRect
operator|.
name|bottom
argument_list|()
operator|-
name|devPhysicalPageRect
operator|.
name|bottom
argument_list|()
argument_list|)
operator|*
literal|100.0
operator|/
name|dpi_y
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|release
name|void
name|QWin32PrintEnginePrivate
operator|::
name|release
parameter_list|()
block|{
if|if
condition|(
name|hdc
operator|==
literal|0
condition|)
return|return;
if|if
condition|(
name|globalDevMode
condition|)
block|{
comment|// Devmode comes from print dialog
name|GlobalUnlock
argument_list|(
name|globalDevMode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Devmode comes from initialize...
comment|// devMode is a part of the same memory block as pInfo so one free is enough...
name|GlobalUnlock
argument_list|(
name|hMem
argument_list|)
expr_stmt|;
name|GlobalFree
argument_list|(
name|hMem
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hPrinter
condition|)
name|ClosePrinter
argument_list|(
name|hPrinter
argument_list|)
expr_stmt|;
name|DeleteDC
argument_list|(
name|hdc
argument_list|)
expr_stmt|;
name|hdc
operator|=
literal|0
expr_stmt|;
name|hPrinter
operator|=
literal|0
expr_stmt|;
name|pInfo
operator|=
literal|0
expr_stmt|;
name|hMem
operator|=
literal|0
expr_stmt|;
name|devMode
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|queryResolutions
name|QList
argument_list|<
name|QVariant
argument_list|>
name|QWin32PrintEnginePrivate
operator|::
name|queryResolutions
parameter_list|()
specifier|const
block|{
comment|// Read the supported resolutions of the printer.
name|QList
argument_list|<
name|QVariant
argument_list|>
name|list
decl_stmt|;
name|DWORD
name|numRes
init|=
name|DeviceCapabilities
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|name
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|port
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|DC_ENUMRESOLUTIONS
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|numRes
operator|==
operator|(
name|DWORD
operator|)
operator|-
literal|1
condition|)
return|return
name|list
return|;
name|LONG
modifier|*
name|enumRes
init|=
operator|(
name|LONG
operator|*
operator|)
name|malloc
argument_list|(
name|numRes
operator|*
literal|2
operator|*
sizeof|sizeof
argument_list|(
name|LONG
argument_list|)
argument_list|)
decl_stmt|;
name|DWORD
name|errRes
init|=
name|DeviceCapabilities
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|name
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|port
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|DC_ENUMRESOLUTIONS
argument_list|,
operator|(
name|LPWSTR
operator|)
name|enumRes
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|errRes
operator|==
operator|(
name|DWORD
operator|)
operator|-
literal|1
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"QWin32PrintEngine::queryResolutions: DeviceCapabilities failed"
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRes
condition|;
operator|++
name|i
control|)
name|list
operator|.
name|append
argument_list|(
name|int
argument_list|(
name|enumRes
index|[
name|i
operator|*
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_function
DECL|function|doReinit
name|void
name|QWin32PrintEnginePrivate
operator|::
name|doReinit
parameter_list|()
block|{
if|if
condition|(
name|state
operator|==
name|QPrinter
operator|::
name|Active
condition|)
block|{
name|reinit
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|resetDC
argument_list|()
expr_stmt|;
name|initDevRects
argument_list|()
expr_stmt|;
name|reinit
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateOrigin
name|void
name|QWin32PrintEnginePrivate
operator|::
name|updateOrigin
parameter_list|()
block|{
if|if
condition|(
name|fullPage
condition|)
block|{
comment|// subtract physical margins to make (0,0) absolute top corner of paper
comment|// then add user defined margins
name|origin_x
operator|=
operator|-
name|devPhysicalPageRect
operator|.
name|x
argument_list|()
expr_stmt|;
name|origin_y
operator|=
operator|-
name|devPhysicalPageRect
operator|.
name|y
argument_list|()
expr_stmt|;
if|if
condition|(
name|pageMarginsSet
condition|)
block|{
name|origin_x
operator|+=
name|devPageRect
operator|.
name|left
argument_list|()
expr_stmt|;
name|origin_y
operator|+=
name|devPageRect
operator|.
name|top
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|origin_x
operator|=
literal|0
expr_stmt|;
name|origin_y
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|pageMarginsSet
condition|)
block|{
name|origin_x
operator|=
name|devPageRect
operator|.
name|left
argument_list|()
operator|-
name|devPhysicalPageRect
operator|.
name|x
argument_list|()
expr_stmt|;
name|origin_y
operator|=
name|devPageRect
operator|.
name|top
argument_list|()
operator|-
name|devPhysicalPageRect
operator|.
name|y
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setProperty
name|void
name|QWin32PrintEngine
operator|::
name|setProperty
parameter_list|(
name|PrintEnginePropertyKey
name|key
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWin32PrintEngine
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|key
condition|)
block|{
case|case
name|PPK_CollateCopies
case|:
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|devMode
condition|)
break|break;
name|d
operator|->
name|devMode
operator|->
name|dmCollate
operator|=
name|value
operator|.
name|toBool
argument_list|()
condition|?
name|DMCOLLATE_TRUE
else|:
name|DMCOLLATE_FALSE
expr_stmt|;
name|d
operator|->
name|doReinit
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|PPK_ColorMode
case|:
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|devMode
condition|)
break|break;
name|d
operator|->
name|devMode
operator|->
name|dmColor
operator|=
operator|(
name|value
operator|.
name|toInt
argument_list|()
operator|==
name|QPrinter
operator|::
name|Color
operator|)
condition|?
name|DMCOLOR_COLOR
else|:
name|DMCOLOR_MONOCHROME
expr_stmt|;
name|d
operator|->
name|doReinit
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|PPK_Creator
case|:
break|break;
case|case
name|PPK_DocumentName
case|:
if|if
condition|(
name|isActive
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QWin32PrintEngine: Cannot change document name while printing is active"
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|docName
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_FullPage
case|:
name|d
operator|->
name|fullPage
operator|=
name|value
operator|.
name|toBool
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateOrigin
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_CopyCount
case|:
comment|// fallthrough
case|case
name|PPK_NumberOfCopies
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|devMode
condition|)
break|break;
name|d
operator|->
name|num_copies
operator|=
name|value
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|d
operator|->
name|devMode
operator|->
name|dmCopies
operator|=
name|d
operator|->
name|num_copies
expr_stmt|;
name|d
operator|->
name|doReinit
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_Orientation
case|:
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|devMode
condition|)
break|break;
name|int
name|orientation
init|=
name|value
operator|.
name|toInt
argument_list|()
operator|==
name|QPrinter
operator|::
name|Landscape
condition|?
name|DMORIENT_LANDSCAPE
else|:
name|DMORIENT_PORTRAIT
decl_stmt|;
name|int
name|old_orientation
init|=
name|d
operator|->
name|devMode
operator|->
name|dmOrientation
decl_stmt|;
name|d
operator|->
name|devMode
operator|->
name|dmOrientation
operator|=
name|orientation
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|has_custom_paper_size
operator|&&
name|old_orientation
operator|!=
name|orientation
condition|)
name|d
operator|->
name|paper_size
operator|=
name|QSizeF
argument_list|(
name|d
operator|->
name|paper_size
operator|.
name|height
argument_list|()
argument_list|,
name|d
operator|->
name|paper_size
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|doReinit
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|PPK_OutputFileName
case|:
if|if
condition|(
name|isActive
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QWin32PrintEngine: Cannot change filename while printing"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|fileName
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
name|d
operator|->
name|printToFile
operator|=
operator|!
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|PPK_PaperSize
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|devMode
condition|)
break|break;
name|d
operator|->
name|devMode
operator|->
name|dmPaperSize
operator|=
name|mapPaperSizeDevmode
argument_list|(
name|QPrinter
operator|::
name|PaperSize
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|has_custom_paper_size
operator|=
operator|(
name|QPrinter
operator|::
name|PaperSize
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
operator|==
name|QPrinter
operator|::
name|Custom
operator|)
expr_stmt|;
name|d
operator|->
name|doReinit
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_PaperSource
case|:
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|devMode
condition|)
break|break;
name|int
name|dmMapped
init|=
name|DMBIN_AUTO
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|v
init|=
name|property
argument_list|(
name|PPK_PaperSources
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|contains
argument_list|(
name|value
argument_list|)
condition|)
name|dmMapped
operator|=
name|mapPaperSourceDevmode
argument_list|(
name|QPrinter
operator|::
name|PaperSource
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|devMode
operator|->
name|dmDefaultSource
operator|=
name|dmMapped
expr_stmt|;
name|d
operator|->
name|doReinit
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|PPK_PrinterName
case|:
name|d
operator|->
name|name
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|->
name|queryDefault
argument_list|()
expr_stmt|;
name|d
operator|->
name|initialize
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_Resolution
case|:
block|{
name|d
operator|->
name|resolution
operator|=
name|value
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|d
operator|->
name|stretch_x
operator|=
name|d
operator|->
name|dpi_x
operator|/
name|double
argument_list|(
name|d
operator|->
name|resolution
argument_list|)
expr_stmt|;
name|d
operator|->
name|stretch_y
operator|=
name|d
operator|->
name|dpi_y
operator|/
name|double
argument_list|(
name|d
operator|->
name|resolution
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PPK_SelectionOption
case|:
break|break;
case|case
name|PPK_SupportedResolutions
case|:
break|break;
case|case
name|PPK_WindowsPageSize
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|devMode
condition|)
break|break;
name|d
operator|->
name|has_custom_paper_size
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|devMode
operator|->
name|dmPaperSize
operator|=
name|value
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|d
operator|->
name|doReinit
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_CustomPaperSize
case|:
block|{
name|d
operator|->
name|has_custom_paper_size
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|paper_size
operator|=
name|value
operator|.
name|toSizeF
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|devMode
condition|)
break|break;
name|int
name|orientation
init|=
name|d
operator|->
name|devMode
operator|->
name|dmOrientation
decl_stmt|;
name|DWORD
name|needed
init|=
literal|0
decl_stmt|;
name|DWORD
name|returned
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|EnumForms
argument_list|(
name|d
operator|->
name|hPrinter
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|needed
argument_list|,
operator|&
name|returned
argument_list|)
condition|)
block|{
name|BYTE
modifier|*
name|forms
init|=
operator|(
name|BYTE
operator|*
operator|)
name|malloc
argument_list|(
name|needed
argument_list|)
decl_stmt|;
if|if
condition|(
name|EnumForms
argument_list|(
name|d
operator|->
name|hPrinter
argument_list|,
literal|1
argument_list|,
name|forms
argument_list|,
name|needed
argument_list|,
operator|&
name|needed
argument_list|,
operator|&
name|returned
argument_list|)
condition|)
block|{
for|for
control|(
name|DWORD
name|i
init|=
literal|0
init|;
name|i
operator|<
name|returned
condition|;
operator|++
name|i
control|)
block|{
name|FORM_INFO_1
modifier|*
name|formArray
init|=
cast|reinterpret_cast
argument_list|<
name|FORM_INFO_1
operator|*
argument_list|>
argument_list|(
name|forms
argument_list|)
decl_stmt|;
comment|// the form sizes are specified in 1000th of a mm,
comment|// convert the size to Points
name|QSizeF
name|size
argument_list|(
operator|(
name|formArray
index|[
name|i
index|]
operator|.
name|Size
operator|.
name|cx
operator|*
literal|72
operator|/
literal|25.4
operator|)
operator|/
literal|1000.0
argument_list|,
operator|(
name|formArray
index|[
name|i
index|]
operator|.
name|Size
operator|.
name|cy
operator|*
literal|72
operator|/
literal|25.4
operator|)
operator|/
literal|1000.0
argument_list|)
decl_stmt|;
if|if
condition|(
name|qAbs
argument_list|(
name|d
operator|->
name|paper_size
operator|.
name|width
argument_list|()
operator|-
name|size
operator|.
name|width
argument_list|()
argument_list|)
operator|<=
literal|2
operator|&&
name|qAbs
argument_list|(
name|d
operator|->
name|paper_size
operator|.
name|height
argument_list|()
operator|-
name|size
operator|.
name|height
argument_list|()
argument_list|)
operator|<=
literal|2
condition|)
block|{
name|d
operator|->
name|devMode
operator|->
name|dmPaperSize
operator|=
name|i
operator|+
literal|1
expr_stmt|;
break|break;
block|}
block|}
block|}
name|free
argument_list|(
name|forms
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|orientation
operator|!=
name|DMORIENT_PORTRAIT
condition|)
name|d
operator|->
name|paper_size
operator|=
name|QSizeF
argument_list|(
name|d
operator|->
name|paper_size
operator|.
name|height
argument_list|()
argument_list|,
name|d
operator|->
name|paper_size
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PPK_PageMargins
case|:
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|margins
argument_list|(
name|value
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|margins
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|int
name|left
decl_stmt|,
name|top
decl_stmt|,
name|right
decl_stmt|,
name|bottom
decl_stmt|;
comment|// specified in 1/100 mm
name|left
operator|=
operator|(
name|margins
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toReal
argument_list|()
operator|*
literal|25.4
operator|/
literal|72.0
operator|)
operator|*
literal|100
expr_stmt|;
name|top
operator|=
operator|(
name|margins
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toReal
argument_list|()
operator|*
literal|25.4
operator|/
literal|72.0
operator|)
operator|*
literal|100
expr_stmt|;
name|right
operator|=
operator|(
name|margins
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toReal
argument_list|()
operator|*
literal|25.4
operator|/
literal|72.0
operator|)
operator|*
literal|100
expr_stmt|;
name|bottom
operator|=
operator|(
name|margins
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|toReal
argument_list|()
operator|*
literal|25.4
operator|/
literal|72.0
operator|)
operator|*
literal|100
expr_stmt|;
name|d
operator|->
name|setPageMargins
argument_list|(
name|left
argument_list|,
name|top
argument_list|,
name|right
argument_list|,
name|bottom
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
comment|// Do nothing
break|break;
block|}
block|}
end_function
begin_function
DECL|function|property
name|QVariant
name|QWin32PrintEngine
operator|::
name|property
parameter_list|(
name|PrintEnginePropertyKey
name|key
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWin32PrintEngine
argument_list|)
expr_stmt|;
name|QVariant
name|value
decl_stmt|;
switch|switch
condition|(
name|key
condition|)
block|{
case|case
name|PPK_CollateCopies
case|:
name|value
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|PPK_ColorMode
case|:
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|devMode
condition|)
block|{
name|value
operator|=
name|QPrinter
operator|::
name|Color
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
operator|(
name|d
operator|->
name|devMode
operator|->
name|dmColor
operator|==
name|DMCOLOR_COLOR
operator|)
condition|?
name|QPrinter
operator|::
name|Color
else|:
name|QPrinter
operator|::
name|GrayScale
expr_stmt|;
block|}
block|}
break|break;
case|case
name|PPK_DocumentName
case|:
name|value
operator|=
name|d
operator|->
name|docName
expr_stmt|;
break|break;
case|case
name|PPK_FullPage
case|:
name|value
operator|=
name|d
operator|->
name|fullPage
expr_stmt|;
break|break;
case|case
name|PPK_CopyCount
case|:
name|value
operator|=
name|d
operator|->
name|num_copies
expr_stmt|;
break|break;
case|case
name|PPK_SupportsMultipleCopies
case|:
name|value
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|PPK_NumberOfCopies
case|:
name|value
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|PPK_Orientation
case|:
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|devMode
condition|)
block|{
name|value
operator|=
name|QPrinter
operator|::
name|Portrait
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
operator|(
name|d
operator|->
name|devMode
operator|->
name|dmOrientation
operator|==
name|DMORIENT_LANDSCAPE
operator|)
condition|?
name|QPrinter
operator|::
name|Landscape
else|:
name|QPrinter
operator|::
name|Portrait
expr_stmt|;
block|}
block|}
break|break;
case|case
name|PPK_OutputFileName
case|:
name|value
operator|=
name|d
operator|->
name|fileName
expr_stmt|;
break|break;
case|case
name|PPK_PageRect
case|:
if|if
condition|(
name|d
operator|->
name|has_custom_paper_size
condition|)
block|{
name|QRect
name|rect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|qRound
argument_list|(
name|d
operator|->
name|paper_size
operator|.
name|width
argument_list|()
operator|*
name|d
operator|->
name|resolution
operator|/
literal|72.0
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|d
operator|->
name|paper_size
operator|.
name|height
argument_list|()
operator|*
name|d
operator|->
name|resolution
operator|/
literal|72.0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|pageMarginsSet
condition|)
block|{
name|rect
operator|=
name|rect
operator|.
name|adjusted
argument_list|(
name|qRound
argument_list|(
name|mmToInches
argument_list|(
name|d
operator|->
name|previousDialogMargins
operator|.
name|left
argument_list|()
operator|/
literal|100.0
argument_list|)
operator|*
name|d
operator|->
name|resolution
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|mmToInches
argument_list|(
name|d
operator|->
name|previousDialogMargins
operator|.
name|top
argument_list|()
operator|/
literal|100.0
argument_list|)
operator|*
name|d
operator|->
name|resolution
argument_list|)
argument_list|,
operator|-
name|qRound
argument_list|(
name|mmToInches
argument_list|(
name|d
operator|->
name|previousDialogMargins
operator|.
name|width
argument_list|()
operator|/
literal|100.0
argument_list|)
operator|*
name|d
operator|->
name|resolution
argument_list|)
argument_list|,
operator|-
name|qRound
argument_list|(
name|mmToInches
argument_list|(
name|d
operator|->
name|previousDialogMargins
operator|.
name|height
argument_list|()
operator|/
literal|100.0
argument_list|)
operator|*
name|d
operator|->
name|resolution
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|rect
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|QTransform
argument_list|(
literal|1
operator|/
name|d
operator|->
name|stretch_x
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
operator|/
name|d
operator|->
name|stretch_y
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|mapRect
argument_list|(
name|d
operator|->
name|fullPage
condition|?
name|d
operator|->
name|devPhysicalPageRect
else|:
name|d
operator|->
name|devPageRect
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PPK_PaperSize
case|:
if|if
condition|(
name|d
operator|->
name|has_custom_paper_size
condition|)
block|{
name|value
operator|=
name|QPrinter
operator|::
name|Custom
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|devMode
condition|)
block|{
name|value
operator|=
name|QPrinter
operator|::
name|A4
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|mapDevmodePaperSize
argument_list|(
name|d
operator|->
name|devMode
operator|->
name|dmPaperSize
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|PPK_PaperRect
case|:
if|if
condition|(
name|d
operator|->
name|has_custom_paper_size
condition|)
block|{
name|value
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|qRound
argument_list|(
name|d
operator|->
name|paper_size
operator|.
name|width
argument_list|()
operator|*
name|d
operator|->
name|resolution
operator|/
literal|72.0
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|d
operator|->
name|paper_size
operator|.
name|height
argument_list|()
operator|*
name|d
operator|->
name|resolution
operator|/
literal|72.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|QTransform
argument_list|(
literal|1
operator|/
name|d
operator|->
name|stretch_x
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
operator|/
name|d
operator|->
name|stretch_y
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|mapRect
argument_list|(
name|d
operator|->
name|devPaperRect
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PPK_PaperSource
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|devMode
condition|)
block|{
name|value
operator|=
name|QPrinter
operator|::
name|Auto
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|mapDevmodePaperSource
argument_list|(
name|d
operator|->
name|devMode
operator|->
name|dmDefaultSource
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PPK_PrinterName
case|:
name|value
operator|=
name|d
operator|->
name|name
expr_stmt|;
break|break;
case|case
name|PPK_Resolution
case|:
if|if
condition|(
name|d
operator|->
name|resolution
operator|||
operator|!
name|d
operator|->
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
name|value
operator|=
name|d
operator|->
name|resolution
expr_stmt|;
break|break;
case|case
name|PPK_SupportedResolutions
case|:
name|value
operator|=
name|d
operator|->
name|queryResolutions
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_WindowsPageSize
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|devMode
condition|)
block|{
name|value
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|d
operator|->
name|devMode
operator|->
name|dmPaperSize
expr_stmt|;
block|}
break|break;
case|case
name|PPK_PaperSources
case|:
block|{
name|int
name|available
init|=
name|DeviceCapabilities
argument_list|(
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|d
operator|->
name|name
operator|.
name|utf16
argument_list|()
argument_list|,
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|d
operator|->
name|port
operator|.
name|utf16
argument_list|()
argument_list|,
name|DC_BINS
argument_list|,
literal|0
argument_list|,
name|d
operator|->
name|devMode
argument_list|)
decl_stmt|;
if|if
condition|(
name|available
operator|<=
literal|0
condition|)
break|break;
name|wchar_t
modifier|*
name|data
init|=
operator|new
name|wchar_t
index|[
name|available
index|]
decl_stmt|;
name|int
name|count
init|=
name|DeviceCapabilities
argument_list|(
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|d
operator|->
name|name
operator|.
name|utf16
argument_list|()
argument_list|,
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|d
operator|->
name|port
operator|.
name|utf16
argument_list|()
argument_list|,
name|DC_BINS
argument_list|,
name|data
argument_list|,
name|d
operator|->
name|devMode
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|out
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QPrinter
operator|::
name|PaperSource
name|src
init|=
name|mapDevmodePaperSource
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|src
operator|!=
operator|-
literal|1
condition|)
name|out
operator|<<
operator|(
name|int
operator|)
name|src
expr_stmt|;
block|}
name|value
operator|=
name|out
expr_stmt|;
operator|delete
index|[]
name|data
expr_stmt|;
block|}
break|break;
case|case
name|PPK_CustomPaperSize
case|:
name|value
operator|=
name|d
operator|->
name|paper_size
expr_stmt|;
break|break;
case|case
name|PPK_PageMargins
case|:
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|margins
decl_stmt|;
name|QRect
name|pageMargins
argument_list|(
name|d
operator|->
name|getPageMargins
argument_list|()
argument_list|)
decl_stmt|;
comment|// specified in 1/100 mm
name|margins
operator|<<
operator|(
name|mmToInches
argument_list|(
name|pageMargins
operator|.
name|left
argument_list|()
operator|/
literal|100.0
argument_list|)
operator|*
literal|72
operator|)
operator|<<
operator|(
name|mmToInches
argument_list|(
name|pageMargins
operator|.
name|top
argument_list|()
operator|/
literal|100.0
argument_list|)
operator|*
literal|72
operator|)
operator|<<
operator|(
name|mmToInches
argument_list|(
name|pageMargins
operator|.
name|width
argument_list|()
operator|/
literal|100.0
argument_list|)
operator|*
literal|72
operator|)
operator|<<
operator|(
name|mmToInches
argument_list|(
name|pageMargins
operator|.
name|height
argument_list|()
operator|/
literal|100.0
argument_list|)
operator|*
literal|72
operator|)
expr_stmt|;
name|value
operator|=
name|margins
expr_stmt|;
break|break;
block|}
default|default:
comment|// Do nothing
break|break;
block|}
return|return
name|value
return|;
block|}
end_function
begin_function
DECL|function|printerState
name|QPrinter
operator|::
name|PrinterState
name|QWin32PrintEngine
operator|::
name|printerState
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|state
return|;
block|}
end_function
begin_function
DECL|function|getDC
name|HDC
name|QWin32PrintEngine
operator|::
name|getDC
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|hdc
return|;
block|}
end_function
begin_function
DECL|function|releaseDC
name|void
name|QWin32PrintEngine
operator|::
name|releaseDC
parameter_list|(
name|HDC
parameter_list|)
specifier|const
block|{  }
end_function
begin_function
DECL|function|createDevNames
name|HGLOBAL
modifier|*
name|QWin32PrintEnginePrivate
operator|::
name|createDevNames
parameter_list|()
block|{
name|int
name|size
init|=
sizeof|sizeof
argument_list|(
name|DEVNAMES
argument_list|)
operator|+
name|program
operator|.
name|length
argument_list|()
operator|*
literal|2
operator|+
literal|2
operator|+
name|name
operator|.
name|length
argument_list|()
operator|*
literal|2
operator|+
literal|2
operator|+
name|port
operator|.
name|length
argument_list|()
operator|*
literal|2
operator|+
literal|2
decl_stmt|;
name|HGLOBAL
modifier|*
name|hGlobal
init|=
operator|(
name|HGLOBAL
operator|*
operator|)
name|GlobalAlloc
argument_list|(
name|GMEM_MOVEABLE
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|DEVNAMES
modifier|*
name|dn
init|=
operator|(
name|DEVNAMES
operator|*
operator|)
name|GlobalLock
argument_list|(
name|hGlobal
argument_list|)
decl_stmt|;
name|dn
operator|->
name|wDriverOffset
operator|=
sizeof|sizeof
argument_list|(
name|DEVNAMES
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
expr_stmt|;
name|dn
operator|->
name|wDeviceOffset
operator|=
name|dn
operator|->
name|wDriverOffset
operator|+
name|program
operator|.
name|length
argument_list|()
operator|+
literal|1
expr_stmt|;
name|dn
operator|->
name|wOutputOffset
operator|=
name|dn
operator|->
name|wDeviceOffset
operator|+
name|name
operator|.
name|length
argument_list|()
operator|+
literal|1
expr_stmt|;
name|memcpy
argument_list|(
operator|(
name|ushort
operator|*
operator|)
name|dn
operator|+
name|dn
operator|->
name|wDriverOffset
argument_list|,
name|program
operator|.
name|utf16
argument_list|()
argument_list|,
name|program
operator|.
name|length
argument_list|()
operator|*
literal|2
operator|+
literal|2
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
operator|(
name|ushort
operator|*
operator|)
name|dn
operator|+
name|dn
operator|->
name|wDeviceOffset
argument_list|,
name|name
operator|.
name|utf16
argument_list|()
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|*
literal|2
operator|+
literal|2
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
operator|(
name|ushort
operator|*
operator|)
name|dn
operator|+
name|dn
operator|->
name|wOutputOffset
argument_list|,
name|port
operator|.
name|utf16
argument_list|()
argument_list|,
name|port
operator|.
name|length
argument_list|()
operator|*
literal|2
operator|+
literal|2
argument_list|)
expr_stmt|;
name|dn
operator|->
name|wDefault
operator|=
literal|0
expr_stmt|;
name|GlobalUnlock
argument_list|(
name|hGlobal
argument_list|)
expr_stmt|;
comment|//         printf("QPrintDialogWinPrivate::createDevNames()\n"
comment|//                " -> wDriverOffset: %d\n"
comment|//                " -> wDeviceOffset: %d\n"
comment|//                " -> wOutputOffset: %d\n",
comment|//                dn->wDriverOffset,
comment|//                dn->wDeviceOffset,
comment|//                dn->wOutputOffset);
comment|//         printf("QPrintDialogWinPrivate::createDevNames(): %s, %s, %s\n",
comment|//                QString::fromWCharArray((wchar_t*)(dn) + dn->wDriverOffset).latin1(),
comment|//                QString::fromWCharArray((wchar_t*)(dn) + dn->wDeviceOffset).latin1(),
comment|//                QString::fromWCharArray((wchar_t*)(dn) + dn->wOutputOffset).latin1());
return|return
name|hGlobal
return|;
block|}
end_function
begin_function
DECL|function|readDevnames
name|void
name|QWin32PrintEnginePrivate
operator|::
name|readDevnames
parameter_list|(
name|HGLOBAL
name|globalDevnames
parameter_list|)
block|{
if|if
condition|(
name|globalDevnames
condition|)
block|{
name|DEVNAMES
modifier|*
name|dn
init|=
operator|(
name|DEVNAMES
operator|*
operator|)
name|GlobalLock
argument_list|(
name|globalDevnames
argument_list|)
decl_stmt|;
name|name
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
operator|(
name|dn
operator|)
operator|+
name|dn
operator|->
name|wDeviceOffset
argument_list|)
expr_stmt|;
name|port
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
operator|(
name|dn
operator|)
operator|+
name|dn
operator|->
name|wOutputOffset
argument_list|)
expr_stmt|;
name|program
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
operator|(
name|dn
operator|)
operator|+
name|dn
operator|->
name|wDriverOffset
argument_list|)
expr_stmt|;
name|GlobalUnlock
argument_list|(
name|globalDevnames
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|readDevmode
name|void
name|QWin32PrintEnginePrivate
operator|::
name|readDevmode
parameter_list|(
name|HGLOBAL
name|globalDevmode
parameter_list|)
block|{
if|if
condition|(
name|globalDevmode
condition|)
block|{
name|DEVMODE
modifier|*
name|dm
init|=
operator|(
name|DEVMODE
operator|*
operator|)
name|GlobalLock
argument_list|(
name|globalDevmode
argument_list|)
decl_stmt|;
name|release
argument_list|()
expr_stmt|;
name|globalDevMode
operator|=
name|globalDevmode
expr_stmt|;
name|devMode
operator|=
name|dm
expr_stmt|;
name|hdc
operator|=
name|CreateDC
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|program
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|name
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
name|dm
argument_list|)
expr_stmt|;
name|num_copies
operator|=
name|devMode
operator|->
name|dmCopies
expr_stmt|;
if|if
condition|(
operator|!
name|OpenPrinter
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|name
operator|.
name|utf16
argument_list|()
argument_list|,
operator|&
name|hPrinter
argument_list|,
literal|0
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"QPrinter: OpenPrinter() failed after reading DEVMODE."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hdc
condition|)
name|initHDC
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|draw_text_item_win
specifier|static
name|void
name|draw_text_item_win
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QTextItemInt
modifier|&
name|ti
parameter_list|,
name|HDC
name|hdc
parameter_list|,
name|bool
name|convertToText
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|xform
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|topLeft
parameter_list|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
name|ti
operator|.
name|fontEngine
decl_stmt|;
name|QPointF
name|baseline_pos
init|=
name|xform
operator|.
name|inverted
argument_list|()
operator|.
name|map
argument_list|(
name|xform
operator|.
name|map
argument_list|(
name|pos
argument_list|)
operator|-
name|topLeft
argument_list|)
decl_stmt|;
name|SetTextAlign
argument_list|(
name|hdc
argument_list|,
name|TA_BASELINE
argument_list|)
expr_stmt|;
name|SetBkMode
argument_list|(
name|hdc
argument_list|,
name|TRANSPARENT
argument_list|)
expr_stmt|;
name|bool
name|has_kerning
init|=
name|ti
operator|.
name|f
operator|&&
name|ti
operator|.
name|f
operator|->
name|kerning
argument_list|()
decl_stmt|;
name|QFontEngineWin
modifier|*
name|winfe
init|=
operator|(
name|fe
operator|->
name|type
argument_list|()
operator|==
name|QFontEngine
operator|::
name|Win
operator|)
condition|?
cast|static_cast
argument_list|<
name|QFontEngineWin
operator|*
argument_list|>
argument_list|(
name|fe
argument_list|)
else|:
literal|0
decl_stmt|;
name|HFONT
name|hfont
decl_stmt|;
name|bool
name|ttf
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|winfe
condition|)
block|{
name|hfont
operator|=
name|winfe
operator|->
name|hfont
expr_stmt|;
name|ttf
operator|=
name|winfe
operator|->
name|ttf
expr_stmt|;
block|}
else|else
block|{
name|hfont
operator|=
operator|(
name|HFONT
operator|)
name|GetStockObject
argument_list|(
name|ANSI_VAR_FONT
argument_list|)
expr_stmt|;
block|}
name|HGDIOBJ
name|old_font
init|=
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|hfont
argument_list|)
decl_stmt|;
name|unsigned
name|int
name|options
init|=
operator|(
name|ttf
operator|&&
operator|!
name|convertToText
operator|)
condition|?
name|ETO_GLYPH_INDEX
else|:
literal|0
decl_stmt|;
name|wchar_t
modifier|*
name|convertedGlyphs
init|=
operator|(
name|wchar_t
operator|*
operator|)
name|ti
operator|.
name|chars
decl_stmt|;
name|QGlyphLayout
name|glyphs
init|=
name|ti
operator|.
name|glyphs
decl_stmt|;
name|bool
name|fast
init|=
operator|!
name|has_kerning
operator|&&
operator|!
operator|(
name|ti
operator|.
name|flags
operator|&
name|QTextItem
operator|::
name|RightToLeft
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|fast
operator|&&
name|i
operator|<
name|glyphs
operator|.
name|numGlyphs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|x
operator|!=
literal|0
operator|||
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|y
operator|!=
literal|0
operator|||
name|glyphs
operator|.
name|justifications
index|[
name|i
index|]
operator|.
name|space_18d6
operator|!=
literal|0
operator|||
name|glyphs
operator|.
name|attributes
index|[
name|i
index|]
operator|.
name|dontPrint
condition|)
block|{
name|fast
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
comment|// Scale, rotate and translate here.
name|XFORM
name|win_xform
decl_stmt|;
name|win_xform
operator|.
name|eM11
operator|=
name|xform
operator|.
name|m11
argument_list|()
expr_stmt|;
name|win_xform
operator|.
name|eM12
operator|=
name|xform
operator|.
name|m12
argument_list|()
expr_stmt|;
name|win_xform
operator|.
name|eM21
operator|=
name|xform
operator|.
name|m21
argument_list|()
expr_stmt|;
name|win_xform
operator|.
name|eM22
operator|=
name|xform
operator|.
name|m22
argument_list|()
expr_stmt|;
name|win_xform
operator|.
name|eDx
operator|=
name|xform
operator|.
name|dx
argument_list|()
expr_stmt|;
name|win_xform
operator|.
name|eDy
operator|=
name|xform
operator|.
name|dy
argument_list|()
expr_stmt|;
name|SetGraphicsMode
argument_list|(
name|hdc
argument_list|,
name|GM_ADVANCED
argument_list|)
expr_stmt|;
name|SetWorldTransform
argument_list|(
name|hdc
argument_list|,
operator|&
name|win_xform
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|fast
condition|)
block|{
comment|// fast path
name|QVarLengthArray
argument_list|<
name|wchar_t
argument_list|>
name|g
argument_list|(
name|glyphs
operator|.
name|numGlyphs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|.
name|numGlyphs
condition|;
operator|++
name|i
control|)
name|g
index|[
name|i
index|]
operator|=
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
expr_stmt|;
name|ExtTextOut
argument_list|(
name|hdc
argument_list|,
name|qRound
argument_list|(
name|baseline_pos
operator|.
name|x
argument_list|()
operator|+
name|glyphs
operator|.
name|offsets
index|[
literal|0
index|]
operator|.
name|x
operator|.
name|toReal
argument_list|()
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|baseline_pos
operator|.
name|y
argument_list|()
operator|+
name|glyphs
operator|.
name|offsets
index|[
literal|0
index|]
operator|.
name|y
operator|.
name|toReal
argument_list|()
argument_list|)
argument_list|,
name|options
argument_list|,
literal|0
argument_list|,
name|convertToText
condition|?
name|convertedGlyphs
else|:
name|g
operator|.
name|data
argument_list|()
argument_list|,
name|glyphs
operator|.
name|numGlyphs
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVarLengthArray
argument_list|<
name|QFixedPoint
argument_list|>
name|positions
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|glyph_t
argument_list|>
name|_glyphs
decl_stmt|;
name|QTransform
name|matrix
init|=
name|QTransform
operator|::
name|fromTranslate
argument_list|(
name|baseline_pos
operator|.
name|x
argument_list|()
argument_list|,
name|baseline_pos
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|ti
operator|.
name|fontEngine
operator|->
name|getGlyphPositions
argument_list|(
name|ti
operator|.
name|glyphs
argument_list|,
name|matrix
argument_list|,
name|ti
operator|.
name|flags
argument_list|,
name|_glyphs
argument_list|,
name|positions
argument_list|)
expr_stmt|;
if|if
condition|(
name|_glyphs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|old_font
argument_list|)
expr_stmt|;
return|return;
block|}
name|convertToText
operator|=
name|convertToText
operator|&&
name|glyphs
operator|.
name|numGlyphs
operator|==
name|_glyphs
operator|.
name|size
argument_list|()
expr_stmt|;
name|bool
name|outputEntireItem
init|=
name|_glyphs
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|outputEntireItem
condition|)
block|{
name|options
operator||=
name|ETO_PDY
expr_stmt|;
name|QVarLengthArray
argument_list|<
name|INT
argument_list|>
name|glyphDistances
argument_list|(
name|_glyphs
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|wchar_t
argument_list|>
name|g
argument_list|(
name|_glyphs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|_glyphs
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|glyphDistances
index|[
name|i
operator|*
literal|2
index|]
operator|=
name|qRound
argument_list|(
name|positions
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|x
argument_list|)
operator|-
name|qRound
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|x
argument_list|)
expr_stmt|;
name|glyphDistances
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
name|qRound
argument_list|(
name|positions
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|y
argument_list|)
operator|-
name|qRound
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|y
argument_list|)
expr_stmt|;
name|g
index|[
name|i
index|]
operator|=
name|_glyphs
index|[
name|i
index|]
expr_stmt|;
block|}
name|glyphDistances
index|[
operator|(
name|_glyphs
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|*
literal|2
index|]
operator|=
literal|0
expr_stmt|;
name|glyphDistances
index|[
operator|(
name|_glyphs
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|g
index|[
name|_glyphs
operator|.
name|size
argument_list|()
operator|-
literal|1
index|]
operator|=
name|_glyphs
index|[
name|_glyphs
operator|.
name|size
argument_list|()
operator|-
literal|1
index|]
expr_stmt|;
name|ExtTextOut
argument_list|(
name|hdc
argument_list|,
name|qRound
argument_list|(
name|positions
index|[
literal|0
index|]
operator|.
name|x
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|positions
index|[
literal|0
index|]
operator|.
name|y
argument_list|)
argument_list|,
name|options
argument_list|,
literal|0
argument_list|,
name|convertToText
condition|?
name|convertedGlyphs
else|:
name|g
operator|.
name|data
argument_list|()
argument_list|,
name|_glyphs
operator|.
name|size
argument_list|()
argument_list|,
name|glyphDistances
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|_glyphs
operator|.
name|size
argument_list|()
condition|)
block|{
name|wchar_t
name|g
init|=
name|_glyphs
index|[
name|i
index|]
decl_stmt|;
name|ExtTextOut
argument_list|(
name|hdc
argument_list|,
name|qRound
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|x
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|y
argument_list|)
argument_list|,
name|options
argument_list|,
literal|0
argument_list|,
name|convertToText
condition|?
name|convertedGlyphs
operator|+
name|i
else|:
operator|&
name|g
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
block|}
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|win_xform
operator|.
name|eM11
operator|=
name|win_xform
operator|.
name|eM22
operator|=
literal|1.0
expr_stmt|;
name|win_xform
operator|.
name|eM12
operator|=
name|win_xform
operator|.
name|eM21
operator|=
name|win_xform
operator|.
name|eDx
operator|=
name|win_xform
operator|.
name|eDy
operator|=
literal|0.0
expr_stmt|;
name|SetWorldTransform
argument_list|(
name|hdc
argument_list|,
operator|&
name|win_xform
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|old_font
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateCustomPaperSize
name|void
name|QWin32PrintEnginePrivate
operator|::
name|updateCustomPaperSize
parameter_list|()
block|{
name|uint
name|paperSize
init|=
name|devMode
operator|->
name|dmPaperSize
decl_stmt|;
if|if
condition|(
name|paperSize
operator|>
literal|0
operator|&&
name|mapDevmodePaperSize
argument_list|(
name|paperSize
argument_list|)
operator|==
name|QPrinter
operator|::
name|Custom
condition|)
block|{
name|has_custom_paper_size
operator|=
literal|true
expr_stmt|;
name|DWORD
name|needed
init|=
literal|0
decl_stmt|;
name|DWORD
name|returned
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|EnumForms
argument_list|(
name|hPrinter
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|needed
argument_list|,
operator|&
name|returned
argument_list|)
condition|)
block|{
name|BYTE
modifier|*
name|forms
init|=
operator|(
name|BYTE
operator|*
operator|)
name|malloc
argument_list|(
name|needed
argument_list|)
decl_stmt|;
if|if
condition|(
name|EnumForms
argument_list|(
name|hPrinter
argument_list|,
literal|1
argument_list|,
name|forms
argument_list|,
name|needed
argument_list|,
operator|&
name|needed
argument_list|,
operator|&
name|returned
argument_list|)
condition|)
block|{
if|if
condition|(
name|paperSize
operator|<=
name|returned
condition|)
block|{
name|FORM_INFO_1
modifier|*
name|formArray
init|=
operator|(
name|FORM_INFO_1
operator|*
operator|)
name|forms
decl_stmt|;
name|int
name|width
init|=
name|formArray
index|[
name|paperSize
operator|-
literal|1
index|]
operator|.
name|Size
operator|.
name|cx
decl_stmt|;
comment|// 1/1000 of a mm
name|int
name|height
init|=
name|formArray
index|[
name|paperSize
operator|-
literal|1
index|]
operator|.
name|Size
operator|.
name|cy
decl_stmt|;
comment|// 1/1000 of a mm
name|paper_size
operator|=
name|QSizeF
argument_list|(
operator|(
name|width
operator|*
literal|72
operator|/
literal|25.4
operator|)
operator|/
literal|1000.0
argument_list|,
operator|(
name|height
operator|*
literal|72
operator|/
literal|25.4
operator|)
operator|/
literal|1000.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|has_custom_paper_size
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|free
argument_list|(
name|forms
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|has_custom_paper_size
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PRINTER
end_comment
end_unit
