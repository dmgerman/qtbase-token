begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qcolor.h"
end_include
begin_include
include|#
directive|include
file|"qcolor_p.h"
end_include
begin_include
include|#
directive|include
file|"qnamespace.h"
end_include
begin_include
include|#
directive|include
file|"qcolormap.h"
end_include
begin_include
include|#
directive|include
file|"qdatastream.h"
end_include
begin_include
include|#
directive|include
file|"qvariant.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qx11info_x11.h"
end_include
begin_include
include|#
directive|include
file|"private/qt_x11_p.h"
end_include
begin_decl_stmt
DECL|variable|allowX11ColorNames
specifier|static
name|bool
name|allowX11ColorNames
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*!     \class QColor     \brief The QColor class provides colors based on RGB, HSV or CMYK values.      \ingroup painting     \ingroup appearance       A color is normally specified in terms of RGB (red, green, and     blue) components, but it is also possible to specify it in terms     of HSV (hue, saturation, and value) and CMYK (cyan, magenta,     yellow and black) components. In addition a color can be specified     using a color name. The color name can be any of the SVG 1.0 color     names.      \table     \header     \o RGB \o HSV \o CMYK     \row     \o \inlineimage qcolor-rgb.png     \o \inlineimage qcolor-hsv.png     \o \inlineimage qcolor-cmyk.png     \endtable      The QColor constructor creates the color based on RGB values.  To     create a QColor based on either HSV or CMYK values, use the     toHsv() and toCmyk() functions respectively. These functions     return a copy of the color using the desired format. In addition     the static fromRgb(), fromHsv() and fromCmyk() functions create     colors from the specified values. Alternatively, a color can be     converted to any of the three formats using the convertTo()     function (returning a copy of the color in the desired format), or     any of the setRgb(), setHsv() and setCmyk() functions altering \e     this color's format. The spec() function tells how the color was     specified.      A color can be set by passing an RGB string (such as "#112233"),     or a color name (such as "blue"), to the setNamedColor() function.     The color names are taken from the SVG 1.0 color names. The name()     function returns the name of the color in the format     "#RRGGBB". Colors can also be set using setRgb(), setHsv() and     setCmyk(). To get a lighter or darker color use the lighter() and     darker() functions respectively.      The isValid() function indicates whether a QColor is legal at     all. For example, a RGB color with RGB values out of range is     illegal. For performance reasons, QColor mostly disregards illegal     colors, and for that reason, the result of using an invalid color     is undefined.      The color components can be retrieved individually, e.g with     red(), hue() and cyan(). The values of the color components can     also be retrieved in one go using the getRgb(), getHsv() and     getCmyk() functions. Using the RGB color model, the color     components can in addition be accessed with rgb().      There are several related non-members: QRgb is a typdef for an     unsigned int representing the RGB value triplet (r, g, b). Note     that it also can hold a value for the alpha-channel (for more     information, see the \l {QColor#Alpha-Blended     Drawing}{Alpha-Blended Drawing} section). The qRed(), qBlue() and     qGreen() functions return the respective component of the given     QRgb value, while the qRgb() and qRgba() functions create and     return the QRgb triplet based on the given component     values. Finally, the qAlpha() function returns the alpha component     of the provided QRgb, and the qGray() function calculates and     return a gray value based on the given value.      QColor is platform and device independent. The QColormap class     maps the color to the hardware.      For more information about painting in general, see the \l{Paint     System} documentation.      \tableofcontents      \section1 Integer vs. Floating Point Precision      QColor supports floating point precision and provides floating     point versions of all the color components functions,     e.g. getRgbF(), hueF() and fromCmykF(). Note that since the     components are stored using 16-bit integers, there might be minor     deviations between the values set using, for example, setRgbF()     and the values returned by the getRgbF() function due to rounding.      While the integer based functions take values in the range 0-255     (except hue() which must have values within the range 0-359),     the floating point functions accept values in the range 0.0 - 1.0.      \section1 Alpha-Blended Drawing      QColor also support alpha-blended outlining and filling. The     alpha channel of a color specifies the transparency effect, 0     represents a fully transparent color, while 255 represents a fully     opaque color. For example:      \snippet doc/src/snippets/code/src_gui_painting_qcolor.cpp 0      The code above produces the following output:      \img alphafill.png      Alpha-blended drawing is supported on Windows, Mac OS X, and on     X11 systems that have the X Render extension installed.      The alpha channel of a color can be retrieved and set using the     alpha() and setAlpha() functions if its value is an integer, and     alphaF() and setAlphaF() if its value is qreal (double). By     default, the alpha-channel is set to 255 (opaque). To retrieve and     set \e all the RGB color components (including the alpha-channel)     in one go, use the rgba() and setRgba() functions.      \section1 Predefined Colors      There are 20 predefined QColors described by the Qt::GlobalColor enum,     including black, white, primary and secondary colors, darker versions     of these colors and three shades of gray. QColor also recognizes a     variety of color names; the static colorNames() function returns a     QStringList color names that QColor knows about.      \img qt-colors.png Qt Colors      Additionally, the Qt::color0, Qt::color1 and Qt::transparent colors     are used for special purposes.      Qt::color0 (zero pixel value) and Qt::color1 (non-zero pixel value)     are special colors for drawing in QBitmaps. Painting with Qt::color0     sets the bitmap bits to 0 (transparent; i.e., background), and painting     with Qt::color1 sets the bits to 1 (opaque; i.e., foreground).      Qt::transparent is used to indicate a transparent pixel. When painting     with this value, a pixel value will be used that is appropriate for the     underlying pixel format in use.      \section1 The HSV Color Model      The RGB model is hardware-oriented. Its representation is close to     what most monitors show. In contrast, HSV represents color in a way     more suited to the human perception of color. For example, the     relationships "stronger than", "darker than", and "the opposite of"     are easily expressed in HSV but are much harder to express in RGB.      HSV, like RGB, has three components:      \list     \o H, for hue, is in the range 0 to 359 if the color is chromatic (not     gray), or meaningless if it is gray. It represents degrees on the     color wheel familiar to most people. Red is 0 (degrees), green is     120, and blue is 240.      \inlineimage qcolor-hue.png      \o S, for saturation, is in the range 0 to 255, and the bigger it is,     the stronger the color is. Grayish colors have saturation near 0; very     strong colors have saturation near 255.      \inlineimage qcolor-saturation.png      \o V, for value, is in the range 0 to 255 and represents lightness or     brightness of the color. 0 is black; 255 is as far from black as     possible.      \inlineimage qcolor-value.png     \endlist      Here are some examples: pure red is H=0, S=255, V=255; a dark red,     moving slightly towards the magenta, could be H=350 (equivalent to     -10), S=255, V=180; a grayish light red could have H about 0 (say     350-359 or 0-10), S about 50-100, and S=255.      Qt returns a hue value of -1 for achromatic colors. If you pass a     hue value that is too large, Qt forces it into range. Hue 360 or 720 is     treated as 0; hue 540 is treated as 180.      In addition to the standard HSV model, Qt provides an     alpha-channel to feature \l {QColor#Alpha-Blended     Drawing}{alpha-blended drawing}.      \section1 The HSL Color Model      HSL is similar to HSV. Instead of value parameter from HSV,     HSL has the lightness parameter.     The lightness parameter goes from black to color and from color to white.     If you go outside at the night its black or dark gray. At day its colorful but     if you look in a really strong light a things they are going to white and     wash out.      \section1 The CMYK Color Model      While the RGB and HSV color models are used for display on     computer monitors, the CMYK model is used in the four-color     printing process of printing presses and some hard-copy     devices.      CMYK has four components, all in the range 0-255: cyan (C),     magenta (M), yellow (Y) and black (K).  Cyan, magenta and yellow     are called subtractive colors; the CMYK color model creates color     by starting with a white surface and then subtracting color by     applying the appropriate components. While combining cyan, magenta     and yellow gives the color black, subtracting one or more will     yield any other color. When combined in various percentages, these     three colors can create the entire spectrum of colors.      Mixing 100 percent of cyan, magenta and yellow \e does produce     black, but the result is unsatisfactory since it wastes ink,     increases drying time, and gives a muddy colour when printing. For     that reason, black is added in professional printing to provide a     solid black tone; hence the term 'four color process'.      In addition to the standard CMYK model, Qt provides an     alpha-channel to feature \l {QColor#Alpha-Blended     Drawing}{alpha-blended drawing}.      \sa QPalette, QBrush, QApplication::setColorSpec() */
DECL|macro|QCOLOR_INT_RANGE_CHECK
define|#
directive|define
name|QCOLOR_INT_RANGE_CHECK
parameter_list|(
name|fn
parameter_list|,
name|var
parameter_list|)
define|\
value|do { \         if (var< 0 || var> 255) { \             qWarning(#fn": invalid value %d", var); \             var = qMax(0, qMin(var, 255)); \         } \     } while (0)
DECL|macro|QCOLOR_REAL_RANGE_CHECK
define|#
directive|define
name|QCOLOR_REAL_RANGE_CHECK
parameter_list|(
name|fn
parameter_list|,
name|var
parameter_list|)
define|\
value|do { \         if (var< qreal(0.0) || var> qreal(1.0)) { \             qWarning(#fn": invalid value %g", var); \             var = qMax(qreal(0.0), qMin(var, qreal(1.0)));      \         } \     } while (0)
comment|/*****************************************************************************   QColor member functions  *****************************************************************************/
comment|/*!     \enum QColor::Spec      The type of color specified, either RGB, HSV, CMYK or HSL.      \value Rgb     \value Hsv     \value Cmyk     \value Hsl     \value Invalid      \sa spec(), convertTo() */
comment|/*!     \fn Spec QColor::spec() const      Returns how the color was specified.      \sa Spec, convertTo() */
comment|/*!     \fn QColor::QColor()      Constructs an invalid color with the RGB value (0, 0, 0). An     invalid color is a color that is not properly set up for the     underlying window system.      The alpha value of an invalid color is unspecified.      \sa isValid() */
comment|/*!     \overload      Constructs a new color with a color value of \a color.      \sa isValid(), {QColor#Predefined Colors}{Predefined Colors}  */
DECL|function|QColor
name|QColor
operator|::
name|QColor
parameter_list|(
name|Qt
operator|::
name|GlobalColor
name|color
parameter_list|)
block|{
DECL|macro|QRGB
define|#
directive|define
name|QRGB
parameter_list|(
name|r
parameter_list|,
name|g
parameter_list|,
name|b
parameter_list|)
define|\
value|QRgb(((0xffu<< 24) | ((r& 0xff)<< 16) | ((g& 0xff)<< 8) | (b& 0xff)))
DECL|macro|QRGBA
define|#
directive|define
name|QRGBA
parameter_list|(
name|r
parameter_list|,
name|g
parameter_list|,
name|b
parameter_list|,
name|a
parameter_list|)
define|\
value|QRgb(((a& 0xff)<< 24) | ((r& 0xff)<< 16) | ((g& 0xff)<< 8) | (b& 0xff))
specifier|static
specifier|const
name|QRgb
name|global_colors
index|[]
init|=
block|{
name|QRGB
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|)
block|,
comment|// Qt::color0
name|QRGB
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|,
comment|// Qt::color1
name|QRGB
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|,
comment|// black
name|QRGB
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|)
block|,
comment|// white
comment|/*          * From the "The Palette Manager: How and Why" by Ron Gery,          * March 23, 1992, archived on MSDN:          *          *     The Windows system palette is broken up into two          *     sections, one with fixed colors and one with colors          *     that can be changed by applications. The system palette          *     predefines 20 entries; these colors are known as the          *     static or reserved colors and consist of the 16 colors          *     found in the Windows version 3.0 VGA driver and 4          *     additional colors chosen for their visual appeal.  The          *     DEFAULT_PALETTE stock object is, as the name implies,          *     the default palette selected into a device context (DC)          *     and consists of these static colors. Applications can          *     set the remaining 236 colors using the Palette Manager.          *          * The 20 reserved entries have indices in [0,9] and          * [246,255]. We reuse 17 of them.          */
name|QRGB
argument_list|(
literal|128
argument_list|,
literal|128
argument_list|,
literal|128
argument_list|)
block|,
comment|// index 248   medium gray
name|QRGB
argument_list|(
literal|160
argument_list|,
literal|160
argument_list|,
literal|164
argument_list|)
block|,
comment|// index 247   light gray
name|QRGB
argument_list|(
literal|192
argument_list|,
literal|192
argument_list|,
literal|192
argument_list|)
block|,
comment|// index 7     light gray
name|QRGB
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|,
comment|// index 249   red
name|QRGB
argument_list|(
literal|0
argument_list|,
literal|255
argument_list|,
literal|0
argument_list|)
block|,
comment|// index 250   green
name|QRGB
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
block|,
comment|// index 252   blue
name|QRGB
argument_list|(
literal|0
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|)
block|,
comment|// index 254   cyan
name|QRGB
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
block|,
comment|// index 253   magenta
name|QRGB
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|0
argument_list|)
block|,
comment|// index 251   yellow
name|QRGB
argument_list|(
literal|128
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|,
comment|// index 1     dark red
name|QRGB
argument_list|(
literal|0
argument_list|,
literal|128
argument_list|,
literal|0
argument_list|)
block|,
comment|// index 2     dark green
name|QRGB
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|128
argument_list|)
block|,
comment|// index 4     dark blue
name|QRGB
argument_list|(
literal|0
argument_list|,
literal|128
argument_list|,
literal|128
argument_list|)
block|,
comment|// index 6     dark cyan
name|QRGB
argument_list|(
literal|128
argument_list|,
literal|0
argument_list|,
literal|128
argument_list|)
block|,
comment|// index 5     dark magenta
name|QRGB
argument_list|(
literal|128
argument_list|,
literal|128
argument_list|,
literal|0
argument_list|)
block|,
comment|// index 3     dark yellow
name|QRGBA
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
comment|//             transparent
block|}
decl_stmt|;
DECL|macro|QRGB
undef|#
directive|undef
name|QRGB
DECL|macro|QRGBA
undef|#
directive|undef
name|QRGBA
name|setRgb
argument_list|(
name|qRed
argument_list|(
name|global_colors
index|[
name|color
index|]
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|global_colors
index|[
name|color
index|]
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|global_colors
index|[
name|color
index|]
argument_list|)
argument_list|,
name|qAlpha
argument_list|(
name|global_colors
index|[
name|color
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn QColor::QColor(int r, int g, int b, int a = 255)      Constructs a color with the RGB value \a r, \a g, \a b, and the     alpha-channel (transparency) value of \a a.      The color is left invalid if any of the arguments are invalid.      \sa setRgba(), isValid() */
end_comment
begin_comment
comment|/*!     Constructs a color with the value \a color. The alpha component is     ignored and set to solid.      \sa fromRgb(), isValid() */
end_comment
begin_constructor
DECL|function|QColor
name|QColor
operator|::
name|QColor
parameter_list|(
name|QRgb
name|color
parameter_list|)
block|{
name|cspec
operator|=
name|Rgb
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|alpha
operator|=
literal|0xffff
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|red
operator|=
name|qRed
argument_list|(
name|color
argument_list|)
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|green
operator|=
name|qGreen
argument_list|(
name|color
argument_list|)
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|blue
operator|=
name|qBlue
argument_list|(
name|color
argument_list|)
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|pad
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal      Constructs a color with the given \a spec.      This function is primarly present to avoid that QColor::Invalid     becomes a valid color by accident. */
end_comment
begin_constructor
DECL|function|QColor
name|QColor
operator|::
name|QColor
parameter_list|(
name|Spec
name|spec
parameter_list|)
block|{
switch|switch
condition|(
name|spec
condition|)
block|{
case|case
name|Invalid
case|:
name|invalidate
argument_list|()
expr_stmt|;
break|break;
case|case
name|Rgb
case|:
name|setRgb
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|Hsv
case|:
name|setHsv
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|Cmyk
case|:
name|setCmyk
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|Hsl
case|:
name|setHsl
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_constructor
begin_comment
comment|/*!     \fn QColor::QColor(const QString&name)      Constructs a named color in the same way as setNamedColor() using     the given \a name.      The color is left invalid if the \a name cannot be parsed.      \sa setNamedColor(), name(), isValid() */
end_comment
begin_comment
comment|/*!     \fn QColor::QColor(const char *name)      Constructs a named color in the same way as setNamedColor() using     the given \a name.      The color is left invalid if the \a name cannot be parsed.      \sa setNamedColor(), name(), isValid() */
end_comment
begin_comment
comment|/*!     \fn QColor::QColor(const QColor&color)      Constructs a color that is a copy of \a color.      \sa isValid() */
end_comment
begin_comment
comment|/*!     \fn bool QColor::isValid() const      Returns true if the color is valid; otherwise returns false. */
end_comment
begin_comment
comment|/*!     Returns the name of the color in the format "#RRGGBB"; i.e. a "#"     character followed by three two-digit hexadecimal numbers.      \sa setNamedColor() */
end_comment
begin_function
DECL|function|name
name|QString
name|QColor
operator|::
name|name
parameter_list|()
specifier|const
block|{
name|QString
name|s
decl_stmt|;
name|s
operator|.
name|sprintf
argument_list|(
literal|"#%02x%02x%02x"
argument_list|,
name|red
argument_list|()
argument_list|,
name|green
argument_list|()
argument_list|,
name|blue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the RGB value of this QColor to \a name, which may be in one     of these formats:      \list     \i #RGB (each of R, G, and B is a single hex digit)     \i #RRGGBB     \i #RRRGGGBBB     \i #RRRRGGGGBBBB     \i A name from the list of colors defined in the list of \l{SVG color keyword names}        provided by the World Wide Web Consortium; for example, "steelblue" or "gainsboro".        These color names work on all platforms. Note that these color names are \e not the        same as defined by the Qt::GlobalColor enums, e.g. "green" and Qt::green does not        refer to the same color.     \i \c transparent - representing the absence of a color.     \i \e{X11 only}: If allowX11ColorNames() returns true, any valid X11 color name. See        the documentation for \c XParseColor() for information about valid X11 color names.     \endlist      The color is invalid if \a name cannot be parsed.      \sa QColor(), name(), isValid(), allowX11ColorNames() */
end_comment
begin_function
DECL|function|setNamedColor
name|void
name|QColor
operator|::
name|setNamedColor
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|setColorFromString
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!    \since 4.7     Returns true if the \a name is a valid color name and can    be used to construct a valid QColor object, otherwise returns    false.     It uses the same algorithm used in setNamedColor().     \sa setNamedColor() */
end_comment
begin_function
DECL|function|isValidColor
name|bool
name|QColor
operator|::
name|isValidColor
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
return|return
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
operator|&&
name|QColor
argument_list|()
operator|.
name|setColorFromString
argument_list|(
name|name
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setColorFromString
name|bool
name|QColor
operator|::
name|setColorFromString
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|invalidate
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'#'
argument_list|)
argument_list|)
condition|)
block|{
name|QRgb
name|rgb
decl_stmt|;
if|if
condition|(
name|qt_get_hex_rgb
argument_list|(
name|name
operator|.
name|constData
argument_list|()
argument_list|,
name|name
operator|.
name|length
argument_list|()
argument_list|,
operator|&
name|rgb
argument_list|)
condition|)
block|{
name|setRgb
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|invalidate
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_COLORNAMES
name|QRgb
name|rgb
decl_stmt|;
if|if
condition|(
name|qt_get_named_rgb
argument_list|(
name|name
operator|.
name|constData
argument_list|()
argument_list|,
name|name
operator|.
name|length
argument_list|()
argument_list|,
operator|&
name|rgb
argument_list|)
condition|)
block|{
name|setRgba
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
endif|#
directive|endif
block|{
ifdef|#
directive|ifdef
name|Q_WS_X11
name|XColor
name|result
decl_stmt|;
if|if
condition|(
name|allowX11ColorNames
argument_list|()
operator|&&
name|QApplication
operator|::
name|instance
argument_list|()
operator|&&
name|QX11Info
operator|::
name|display
argument_list|()
operator|&&
name|XParseColor
argument_list|(
name|QX11Info
operator|::
name|display
argument_list|()
argument_list|,
name|QX11Info
operator|::
name|appColormap
argument_list|()
argument_list|,
name|name
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
operator|&
name|result
argument_list|)
condition|)
block|{
name|setRgb
argument_list|(
name|result
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|result
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|result
operator|.
name|blue
operator|>>
literal|8
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
endif|#
directive|endif
block|{
name|invalidate
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     Returns a QStringList containing the color names Qt knows about.      \sa {QColor#Predefined Colors}{Predefined Colors} */
end_comment
begin_function
DECL|function|colorNames
name|QStringList
name|QColor
operator|::
name|colorNames
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_COLORNAMES
return|return
name|qt_get_colornames
argument_list|()
return|;
else|#
directive|else
return|return
name|QStringList
argument_list|()
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     Sets the contents pointed to by \a h, \a s, \a v, and \a a, to the hue,     saturation, value, and alpha-channel (transparency) components of the     color's HSV value.      These components can be retrieved individually using the hueF(),     saturationF(), valueF() and alphaF() functions.      \sa setHsv() {QColor#The HSV Color Model}{The HSV Color Model} */
end_comment
begin_function
DECL|function|getHsvF
name|void
name|QColor
operator|::
name|getHsvF
parameter_list|(
name|qreal
modifier|*
name|h
parameter_list|,
name|qreal
modifier|*
name|s
parameter_list|,
name|qreal
modifier|*
name|v
parameter_list|,
name|qreal
modifier|*
name|a
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|h
operator|||
operator|!
name|s
operator|||
operator|!
name|v
condition|)
return|return;
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Hsv
condition|)
block|{
name|toHsv
argument_list|()
operator|.
name|getHsvF
argument_list|(
name|h
argument_list|,
name|s
argument_list|,
name|v
argument_list|,
name|a
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|h
operator|=
name|ct
operator|.
name|ahsv
operator|.
name|hue
operator|==
name|USHRT_MAX
condition|?
name|qreal
argument_list|(
operator|-
literal|1.0
argument_list|)
else|:
name|ct
operator|.
name|ahsv
operator|.
name|hue
operator|/
name|qreal
argument_list|(
literal|36000.0
argument_list|)
expr_stmt|;
operator|*
name|s
operator|=
name|ct
operator|.
name|ahsv
operator|.
name|saturation
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
expr_stmt|;
operator|*
name|v
operator|=
name|ct
operator|.
name|ahsv
operator|.
name|value
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
condition|)
operator|*
name|a
operator|=
name|ct
operator|.
name|ahsv
operator|.
name|alpha
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the contents pointed to by \a h, \a s, \a v, and \a a, to the hue,     saturation, value, and alpha-channel (transparency) components of the     color's HSV value.      These components can be retrieved individually using the hue(),     saturation(), value() and alpha() functions.      \sa setHsv(), {QColor#The HSV Color Model}{The HSV Color Model} */
end_comment
begin_function
DECL|function|getHsv
name|void
name|QColor
operator|::
name|getHsv
parameter_list|(
name|int
modifier|*
name|h
parameter_list|,
name|int
modifier|*
name|s
parameter_list|,
name|int
modifier|*
name|v
parameter_list|,
name|int
modifier|*
name|a
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|h
operator|||
operator|!
name|s
operator|||
operator|!
name|v
condition|)
return|return;
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Hsv
condition|)
block|{
name|toHsv
argument_list|()
operator|.
name|getHsv
argument_list|(
name|h
argument_list|,
name|s
argument_list|,
name|v
argument_list|,
name|a
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|h
operator|=
name|ct
operator|.
name|ahsv
operator|.
name|hue
operator|==
name|USHRT_MAX
condition|?
operator|-
literal|1
else|:
name|ct
operator|.
name|ahsv
operator|.
name|hue
operator|/
literal|100
expr_stmt|;
operator|*
name|s
operator|=
name|ct
operator|.
name|ahsv
operator|.
name|saturation
operator|>>
literal|8
expr_stmt|;
operator|*
name|v
operator|=
name|ct
operator|.
name|ahsv
operator|.
name|value
operator|>>
literal|8
expr_stmt|;
if|if
condition|(
name|a
condition|)
operator|*
name|a
operator|=
name|ct
operator|.
name|ahsv
operator|.
name|alpha
operator|>>
literal|8
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets a HSV color value; \a h is the hue, \a s is the saturation, \a v is     the value and \a a is the alpha component of the HSV color.      All the values must be in the range 0.0-1.0.      \sa getHsvF(), setHsv(), {QColor#The HSV Color Model}{The HSV     Color Model} */
end_comment
begin_function
DECL|function|setHsvF
name|void
name|QColor
operator|::
name|setHsvF
parameter_list|(
name|qreal
name|h
parameter_list|,
name|qreal
name|s
parameter_list|,
name|qreal
name|v
parameter_list|,
name|qreal
name|a
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|h
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|h
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|)
operator|&&
name|h
operator|!=
name|qreal
argument_list|(
operator|-
literal|1.0
argument_list|)
operator|)
operator|||
operator|(
name|s
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|s
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|)
operator|||
operator|(
name|v
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|v
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|)
operator|||
operator|(
name|a
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|a
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QColor::setHsvF: HSV parameters out of range"
argument_list|)
expr_stmt|;
return|return;
block|}
name|cspec
operator|=
name|Hsv
expr_stmt|;
name|ct
operator|.
name|ahsv
operator|.
name|alpha
operator|=
name|qRound
argument_list|(
name|a
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|ct
operator|.
name|ahsv
operator|.
name|hue
operator|=
name|h
operator|==
name|qreal
argument_list|(
operator|-
literal|1.0
argument_list|)
condition|?
name|USHRT_MAX
else|:
name|qRound
argument_list|(
name|h
operator|*
literal|36000
argument_list|)
expr_stmt|;
name|ct
operator|.
name|ahsv
operator|.
name|saturation
operator|=
name|qRound
argument_list|(
name|s
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|ct
operator|.
name|ahsv
operator|.
name|value
operator|=
name|qRound
argument_list|(
name|v
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|ct
operator|.
name|ahsv
operator|.
name|pad
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets a HSV color value; \a h is the hue, \a s is the saturation, \a v is     the value and \a a is the alpha component of the HSV color.      The saturation, value and alpha-channel values must be in the range 0-255,     and the hue value must be greater than -1.      \sa getHsv(), setHsvF(), {QColor#The HSV Color Model}{The HSV     Color Model} */
end_comment
begin_function
DECL|function|setHsv
name|void
name|QColor
operator|::
name|setHsv
parameter_list|(
name|int
name|h
parameter_list|,
name|int
name|s
parameter_list|,
name|int
name|v
parameter_list|,
name|int
name|a
parameter_list|)
block|{
if|if
condition|(
name|h
argument_list|<
operator|-
literal|1
operator|||
operator|(
name|uint
operator|)
name|s
argument_list|>
literal|255
operator|||
operator|(
name|uint
operator|)
name|v
operator|>
literal|255
operator|||
operator|(
name|uint
operator|)
name|a
operator|>
literal|255
condition|)
block|{
name|qWarning
argument_list|(
literal|"QColor::setHsv: HSV parameters out of range"
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
return|return;
block|}
name|cspec
operator|=
name|Hsv
expr_stmt|;
name|ct
operator|.
name|ahsv
operator|.
name|alpha
operator|=
name|a
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|ahsv
operator|.
name|hue
operator|=
name|h
operator|==
operator|-
literal|1
condition|?
name|USHRT_MAX
else|:
operator|(
name|h
operator|%
literal|360
operator|)
operator|*
literal|100
expr_stmt|;
name|ct
operator|.
name|ahsv
operator|.
name|saturation
operator|=
name|s
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|ahsv
operator|.
name|value
operator|=
name|v
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|ahsv
operator|.
name|pad
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.6      Sets the contents pointed to by \a h, \a s, \a l, and \a a, to the hue,     saturation, lightness, and alpha-channel (transparency) components of the     color's HSL value.      These components can be retrieved individually using the hueHslF(),     saturationHslF(), lightnessF() and alphaF() functions.      \sa setHsl() */
end_comment
begin_function
DECL|function|getHslF
name|void
name|QColor
operator|::
name|getHslF
parameter_list|(
name|qreal
modifier|*
name|h
parameter_list|,
name|qreal
modifier|*
name|s
parameter_list|,
name|qreal
modifier|*
name|l
parameter_list|,
name|qreal
modifier|*
name|a
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|h
operator|||
operator|!
name|s
operator|||
operator|!
name|l
condition|)
return|return;
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Hsl
condition|)
block|{
name|toHsl
argument_list|()
operator|.
name|getHslF
argument_list|(
name|h
argument_list|,
name|s
argument_list|,
name|l
argument_list|,
name|a
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|h
operator|=
name|ct
operator|.
name|ahsl
operator|.
name|hue
operator|==
name|USHRT_MAX
condition|?
name|qreal
argument_list|(
operator|-
literal|1.0
argument_list|)
else|:
name|ct
operator|.
name|ahsl
operator|.
name|hue
operator|/
name|qreal
argument_list|(
literal|36000.0
argument_list|)
expr_stmt|;
operator|*
name|s
operator|=
name|ct
operator|.
name|ahsl
operator|.
name|saturation
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
expr_stmt|;
operator|*
name|l
operator|=
name|ct
operator|.
name|ahsl
operator|.
name|lightness
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
condition|)
operator|*
name|a
operator|=
name|ct
operator|.
name|ahsl
operator|.
name|alpha
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.6      Sets the contents pointed to by \a h, \a s, \a l, and \a a, to the hue,     saturation, lightness, and alpha-channel (transparency) components of the     color's HSL value.      These components can be retrieved individually using the hueHsl(),     saturationHsl(), lightness() and alpha() functions.      \sa setHsl() */
end_comment
begin_function
DECL|function|getHsl
name|void
name|QColor
operator|::
name|getHsl
parameter_list|(
name|int
modifier|*
name|h
parameter_list|,
name|int
modifier|*
name|s
parameter_list|,
name|int
modifier|*
name|l
parameter_list|,
name|int
modifier|*
name|a
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|h
operator|||
operator|!
name|s
operator|||
operator|!
name|l
condition|)
return|return;
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Hsl
condition|)
block|{
name|toHsl
argument_list|()
operator|.
name|getHsl
argument_list|(
name|h
argument_list|,
name|s
argument_list|,
name|l
argument_list|,
name|a
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|h
operator|=
name|ct
operator|.
name|ahsl
operator|.
name|hue
operator|==
name|USHRT_MAX
condition|?
operator|-
literal|1
else|:
name|ct
operator|.
name|ahsl
operator|.
name|hue
operator|/
literal|100
expr_stmt|;
operator|*
name|s
operator|=
name|ct
operator|.
name|ahsl
operator|.
name|saturation
operator|>>
literal|8
expr_stmt|;
operator|*
name|l
operator|=
name|ct
operator|.
name|ahsl
operator|.
name|lightness
operator|>>
literal|8
expr_stmt|;
if|if
condition|(
name|a
condition|)
operator|*
name|a
operator|=
name|ct
operator|.
name|ahsl
operator|.
name|alpha
operator|>>
literal|8
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.6      Sets a HSL color lightness; \a h is the hue, \a s is the saturation, \a l is     the lightness and \a a is the alpha component of the HSL color.      All the values must be in the range 0.0-1.0.      \sa getHslF(), setHsl() */
end_comment
begin_function
DECL|function|setHslF
name|void
name|QColor
operator|::
name|setHslF
parameter_list|(
name|qreal
name|h
parameter_list|,
name|qreal
name|s
parameter_list|,
name|qreal
name|l
parameter_list|,
name|qreal
name|a
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|h
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|h
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|)
operator|&&
name|h
operator|!=
name|qreal
argument_list|(
operator|-
literal|1.0
argument_list|)
operator|)
operator|||
operator|(
name|s
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|s
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|)
operator|||
operator|(
name|l
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|l
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|)
operator|||
operator|(
name|a
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|a
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QColor::setHsvF: HSV parameters out of range"
argument_list|)
expr_stmt|;
return|return;
block|}
name|cspec
operator|=
name|Hsl
expr_stmt|;
name|ct
operator|.
name|ahsl
operator|.
name|alpha
operator|=
name|qRound
argument_list|(
name|a
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|ct
operator|.
name|ahsl
operator|.
name|hue
operator|=
name|h
operator|==
name|qreal
argument_list|(
operator|-
literal|1.0
argument_list|)
condition|?
name|USHRT_MAX
else|:
name|qRound
argument_list|(
name|h
operator|*
literal|36000
argument_list|)
expr_stmt|;
name|ct
operator|.
name|ahsl
operator|.
name|saturation
operator|=
name|qRound
argument_list|(
name|s
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|ct
operator|.
name|ahsl
operator|.
name|lightness
operator|=
name|qRound
argument_list|(
name|l
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|ct
operator|.
name|ahsl
operator|.
name|pad
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.6      Sets a HSL color value; \a h is the hue, \a s is the saturation, \a l is     the lightness and \a a is the alpha component of the HSL color.      The saturation, value and alpha-channel values must be in the range 0-255,     and the hue value must be greater than -1.      \sa getHsl(), setHslF() */
end_comment
begin_function
DECL|function|setHsl
name|void
name|QColor
operator|::
name|setHsl
parameter_list|(
name|int
name|h
parameter_list|,
name|int
name|s
parameter_list|,
name|int
name|l
parameter_list|,
name|int
name|a
parameter_list|)
block|{
if|if
condition|(
name|h
argument_list|<
operator|-
literal|1
operator|||
operator|(
name|uint
operator|)
name|s
argument_list|>
literal|255
operator|||
operator|(
name|uint
operator|)
name|l
operator|>
literal|255
operator|||
operator|(
name|uint
operator|)
name|a
operator|>
literal|255
condition|)
block|{
name|qWarning
argument_list|(
literal|"QColor::setHsv: HSV parameters out of range"
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
return|return;
block|}
name|cspec
operator|=
name|Hsl
expr_stmt|;
name|ct
operator|.
name|ahsl
operator|.
name|alpha
operator|=
name|a
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|ahsl
operator|.
name|hue
operator|=
name|h
operator|==
operator|-
literal|1
condition|?
name|USHRT_MAX
else|:
operator|(
name|h
operator|%
literal|360
operator|)
operator|*
literal|100
expr_stmt|;
name|ct
operator|.
name|ahsl
operator|.
name|saturation
operator|=
name|s
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|ahsl
operator|.
name|lightness
operator|=
name|l
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|ahsl
operator|.
name|pad
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the contents pointed to by \a r, \a g, \a b, and \a a, to the red,     green, blue, and alpha-channel (transparency) components of the color's     RGB value.      These components can be retrieved individually using the redF(), greenF(),     blueF() and alphaF() functions.      \sa rgb(), setRgb() */
end_comment
begin_function
DECL|function|getRgbF
name|void
name|QColor
operator|::
name|getRgbF
parameter_list|(
name|qreal
modifier|*
name|r
parameter_list|,
name|qreal
modifier|*
name|g
parameter_list|,
name|qreal
modifier|*
name|b
parameter_list|,
name|qreal
modifier|*
name|a
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|r
operator|||
operator|!
name|g
operator|||
operator|!
name|b
condition|)
return|return;
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Rgb
condition|)
block|{
name|toRgb
argument_list|()
operator|.
name|getRgbF
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|r
operator|=
name|ct
operator|.
name|argb
operator|.
name|red
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
expr_stmt|;
operator|*
name|g
operator|=
name|ct
operator|.
name|argb
operator|.
name|green
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
expr_stmt|;
operator|*
name|b
operator|=
name|ct
operator|.
name|argb
operator|.
name|blue
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
condition|)
operator|*
name|a
operator|=
name|ct
operator|.
name|argb
operator|.
name|alpha
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the contents pointed to by \a r, \a g, \a b, and \a a, to the red,     green, blue, and alpha-channel (transparency) components of the color's     RGB value.      These components can be retrieved individually using the red(), green(),     blue() and alpha() functions.      \sa rgb(), setRgb() */
end_comment
begin_function
DECL|function|getRgb
name|void
name|QColor
operator|::
name|getRgb
parameter_list|(
name|int
modifier|*
name|r
parameter_list|,
name|int
modifier|*
name|g
parameter_list|,
name|int
modifier|*
name|b
parameter_list|,
name|int
modifier|*
name|a
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|r
operator|||
operator|!
name|g
operator|||
operator|!
name|b
condition|)
return|return;
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Rgb
condition|)
block|{
name|toRgb
argument_list|()
operator|.
name|getRgb
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|r
operator|=
name|ct
operator|.
name|argb
operator|.
name|red
operator|>>
literal|8
expr_stmt|;
operator|*
name|g
operator|=
name|ct
operator|.
name|argb
operator|.
name|green
operator|>>
literal|8
expr_stmt|;
operator|*
name|b
operator|=
name|ct
operator|.
name|argb
operator|.
name|blue
operator|>>
literal|8
expr_stmt|;
if|if
condition|(
name|a
condition|)
operator|*
name|a
operator|=
name|ct
operator|.
name|argb
operator|.
name|alpha
operator|>>
literal|8
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \obsolete     \fn void QColor::getRgba(int *r, int *g, int *b, int *a) const      Use getRgb() instead. */
end_comment
begin_comment
comment|/*!     \fn void QColor::setRgbF(qreal r, qreal g, qreal b, qreal a)      Sets the color channels of this color to \a r (red), \a g (green),     \a b (blue) and \a a (alpha, transparency).      All values must be in the range 0.0-1.0.      \sa rgb(), getRgbF(), setRgb() */
end_comment
begin_function
DECL|function|setRgbF
name|void
name|QColor
operator|::
name|setRgbF
parameter_list|(
name|qreal
name|r
parameter_list|,
name|qreal
name|g
parameter_list|,
name|qreal
name|b
parameter_list|,
name|qreal
name|a
parameter_list|)
block|{
if|if
condition|(
name|r
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|r
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|||
name|g
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|g
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|||
name|b
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|b
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|||
name|a
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|a
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QColor::setRgbF: RGB parameters out of range"
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
return|return;
block|}
name|cspec
operator|=
name|Rgb
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|alpha
operator|=
name|qRound
argument_list|(
name|a
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|red
operator|=
name|qRound
argument_list|(
name|r
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|green
operator|=
name|qRound
argument_list|(
name|g
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|blue
operator|=
name|qRound
argument_list|(
name|b
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|pad
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the RGB value to \a r, \a g, \a b and the alpha value to \a a.      All the values must be in the range 0-255.      \sa rgb(), getRgb(), setRgbF() */
end_comment
begin_function
DECL|function|setRgb
name|void
name|QColor
operator|::
name|setRgb
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|g
parameter_list|,
name|int
name|b
parameter_list|,
name|int
name|a
parameter_list|)
block|{
if|if
condition|(
operator|(
name|uint
operator|)
name|r
operator|>
literal|255
operator|||
operator|(
name|uint
operator|)
name|g
operator|>
literal|255
operator|||
operator|(
name|uint
operator|)
name|b
operator|>
literal|255
operator|||
operator|(
name|uint
operator|)
name|a
operator|>
literal|255
condition|)
block|{
name|qWarning
argument_list|(
literal|"QColor::setRgb: RGB parameters out of range"
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
return|return;
block|}
name|cspec
operator|=
name|Rgb
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|alpha
operator|=
name|a
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|red
operator|=
name|r
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|green
operator|=
name|g
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|blue
operator|=
name|b
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|pad
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \obsolete     \fn void QColor::setRgba(int r, int g, int b, int a)      Use setRgb() instead. */
end_comment
begin_comment
comment|/*!     \fn QRgb QColor::rgba() const      Returns the RGB value of the color, including its alpha.      For an invalid color, the alpha value of the returned color is unspecified.      \sa setRgba(), rgb() */
end_comment
begin_function
DECL|function|rgba
name|QRgb
name|QColor
operator|::
name|rgba
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Rgb
condition|)
return|return
name|toRgb
argument_list|()
operator|.
name|rgba
argument_list|()
return|;
return|return
name|qRgba
argument_list|(
name|ct
operator|.
name|argb
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|ct
operator|.
name|argb
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|ct
operator|.
name|argb
operator|.
name|blue
operator|>>
literal|8
argument_list|,
name|ct
operator|.
name|argb
operator|.
name|alpha
operator|>>
literal|8
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the RGB value to \a rgba, including its alpha.      \sa rgba(), rgb() */
end_comment
begin_function
DECL|function|setRgba
name|void
name|QColor
operator|::
name|setRgba
parameter_list|(
name|QRgb
name|rgba
parameter_list|)
block|{
name|cspec
operator|=
name|Rgb
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|alpha
operator|=
name|qAlpha
argument_list|(
name|rgba
argument_list|)
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|red
operator|=
name|qRed
argument_list|(
name|rgba
argument_list|)
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|green
operator|=
name|qGreen
argument_list|(
name|rgba
argument_list|)
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|blue
operator|=
name|qBlue
argument_list|(
name|rgba
argument_list|)
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|pad
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn QRgb QColor::rgb() const      Returns the RGB value of the color. The alpha value is opaque.      \sa getRgb(), rgba() */
end_comment
begin_function
DECL|function|rgb
name|QRgb
name|QColor
operator|::
name|rgb
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Rgb
condition|)
return|return
name|toRgb
argument_list|()
operator|.
name|rgb
argument_list|()
return|;
return|return
name|qRgb
argument_list|(
name|ct
operator|.
name|argb
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|ct
operator|.
name|argb
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|ct
operator|.
name|argb
operator|.
name|blue
operator|>>
literal|8
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the RGB value to \a rgb. The alpha value is set to opaque. */
end_comment
begin_function
DECL|function|setRgb
name|void
name|QColor
operator|::
name|setRgb
parameter_list|(
name|QRgb
name|rgb
parameter_list|)
block|{
name|cspec
operator|=
name|Rgb
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|alpha
operator|=
literal|0xffff
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|red
operator|=
name|qRed
argument_list|(
name|rgb
argument_list|)
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|green
operator|=
name|qGreen
argument_list|(
name|rgb
argument_list|)
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|blue
operator|=
name|qBlue
argument_list|(
name|rgb
argument_list|)
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|pad
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the alpha color component of this color.      \sa setAlpha(), alphaF(), {QColor#Alpha-Blended     Drawing}{Alpha-Blended Drawing} */
end_comment
begin_function
DECL|function|alpha
name|int
name|QColor
operator|::
name|alpha
parameter_list|()
specifier|const
block|{
return|return
name|ct
operator|.
name|argb
operator|.
name|alpha
operator|>>
literal|8
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the alpha of this color to \a alpha. Integer alpha is specified in the     range 0-255.      \sa alpha(), alphaF(), {QColor#Alpha-Blended     Drawing}{Alpha-Blended Drawing} */
end_comment
begin_function
DECL|function|setAlpha
name|void
name|QColor
operator|::
name|setAlpha
parameter_list|(
name|int
name|alpha
parameter_list|)
block|{
name|QCOLOR_INT_RANGE_CHECK
argument_list|(
literal|"QColor::setAlpha"
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|alpha
operator|=
name|alpha
operator|*
literal|0x101
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the alpha color component of this color.      \sa setAlphaF(), alpha(),  {QColor#Alpha-Blended     Drawing}{Alpha-Blended Drawing} */
end_comment
begin_function
DECL|function|alphaF
name|qreal
name|QColor
operator|::
name|alphaF
parameter_list|()
specifier|const
block|{
return|return
name|ct
operator|.
name|argb
operator|.
name|alpha
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the alpha of this color to \a alpha. qreal alpha is specified in the     range 0.0-1.0.      \sa alphaF(), alpha(), {QColor#Alpha-Blended     Drawing}{Alpha-Blended Drawing}  */
end_comment
begin_function
DECL|function|setAlphaF
name|void
name|QColor
operator|::
name|setAlphaF
parameter_list|(
name|qreal
name|alpha
parameter_list|)
block|{
name|QCOLOR_REAL_RANGE_CHECK
argument_list|(
literal|"QColor::setAlphaF"
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
name|qreal
name|tmp
init|=
name|alpha
operator|*
name|USHRT_MAX
decl_stmt|;
name|ct
operator|.
name|argb
operator|.
name|alpha
operator|=
name|qRound
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the red color component of this color.      \sa setRed(), redF(), getRgb() */
end_comment
begin_function
DECL|function|red
name|int
name|QColor
operator|::
name|red
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Rgb
condition|)
return|return
name|toRgb
argument_list|()
operator|.
name|red
argument_list|()
return|;
return|return
name|ct
operator|.
name|argb
operator|.
name|red
operator|>>
literal|8
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the red color component of this color to \a red. Integer components     are specified in the range 0-255.      \sa red(), redF(), setRgb() */
end_comment
begin_function
DECL|function|setRed
name|void
name|QColor
operator|::
name|setRed
parameter_list|(
name|int
name|red
parameter_list|)
block|{
name|QCOLOR_INT_RANGE_CHECK
argument_list|(
literal|"QColor::setRed"
argument_list|,
name|red
argument_list|)
expr_stmt|;
if|if
condition|(
name|cspec
operator|!=
name|Rgb
condition|)
name|setRgb
argument_list|(
name|red
argument_list|,
name|green
argument_list|()
argument_list|,
name|blue
argument_list|()
argument_list|,
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ct
operator|.
name|argb
operator|.
name|red
operator|=
name|red
operator|*
literal|0x101
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the green color component of this color.      \sa setGreen(), greenF(), getRgb() */
end_comment
begin_function
DECL|function|green
name|int
name|QColor
operator|::
name|green
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Rgb
condition|)
return|return
name|toRgb
argument_list|()
operator|.
name|green
argument_list|()
return|;
return|return
name|ct
operator|.
name|argb
operator|.
name|green
operator|>>
literal|8
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the green color component of this color to \a green. Integer     components are specified in the range 0-255.      \sa green(), greenF(),  setRgb() */
end_comment
begin_function
DECL|function|setGreen
name|void
name|QColor
operator|::
name|setGreen
parameter_list|(
name|int
name|green
parameter_list|)
block|{
name|QCOLOR_INT_RANGE_CHECK
argument_list|(
literal|"QColor::setGreen"
argument_list|,
name|green
argument_list|)
expr_stmt|;
if|if
condition|(
name|cspec
operator|!=
name|Rgb
condition|)
name|setRgb
argument_list|(
name|red
argument_list|()
argument_list|,
name|green
argument_list|,
name|blue
argument_list|()
argument_list|,
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ct
operator|.
name|argb
operator|.
name|green
operator|=
name|green
operator|*
literal|0x101
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the blue color component of this color.      \sa setBlue(), blueF(), getRgb() */
end_comment
begin_function
DECL|function|blue
name|int
name|QColor
operator|::
name|blue
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Rgb
condition|)
return|return
name|toRgb
argument_list|()
operator|.
name|blue
argument_list|()
return|;
return|return
name|ct
operator|.
name|argb
operator|.
name|blue
operator|>>
literal|8
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the blue color component of this color to \a blue. Integer components     are specified in the range 0-255.      \sa blue(), blueF(), setRgb() */
end_comment
begin_function
DECL|function|setBlue
name|void
name|QColor
operator|::
name|setBlue
parameter_list|(
name|int
name|blue
parameter_list|)
block|{
name|QCOLOR_INT_RANGE_CHECK
argument_list|(
literal|"QColor::setBlue"
argument_list|,
name|blue
argument_list|)
expr_stmt|;
if|if
condition|(
name|cspec
operator|!=
name|Rgb
condition|)
name|setRgb
argument_list|(
name|red
argument_list|()
argument_list|,
name|green
argument_list|()
argument_list|,
name|blue
argument_list|,
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ct
operator|.
name|argb
operator|.
name|blue
operator|=
name|blue
operator|*
literal|0x101
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the red color component of this color.      \sa setRedF(), red(), getRgbF() */
end_comment
begin_function
DECL|function|redF
name|qreal
name|QColor
operator|::
name|redF
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Rgb
condition|)
return|return
name|toRgb
argument_list|()
operator|.
name|redF
argument_list|()
return|;
return|return
name|ct
operator|.
name|argb
operator|.
name|red
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the red color component of this color to \a red. Float components     are specified in the range 0.0-1.0.      \sa redF(), red(), setRgbF() */
end_comment
begin_function
DECL|function|setRedF
name|void
name|QColor
operator|::
name|setRedF
parameter_list|(
name|qreal
name|red
parameter_list|)
block|{
name|QCOLOR_REAL_RANGE_CHECK
argument_list|(
literal|"QColor::setRedF"
argument_list|,
name|red
argument_list|)
expr_stmt|;
if|if
condition|(
name|cspec
operator|!=
name|Rgb
condition|)
name|setRgbF
argument_list|(
name|red
argument_list|,
name|greenF
argument_list|()
argument_list|,
name|blueF
argument_list|()
argument_list|,
name|alphaF
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ct
operator|.
name|argb
operator|.
name|red
operator|=
name|qRound
argument_list|(
name|red
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the green color component of this color.      \sa setGreenF(), green(), getRgbF() */
end_comment
begin_function
DECL|function|greenF
name|qreal
name|QColor
operator|::
name|greenF
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Rgb
condition|)
return|return
name|toRgb
argument_list|()
operator|.
name|greenF
argument_list|()
return|;
return|return
name|ct
operator|.
name|argb
operator|.
name|green
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the green color component of this color to \a green. Float components     are specified in the range 0.0-1.0.      \sa greenF(), green(), setRgbF() */
end_comment
begin_function
DECL|function|setGreenF
name|void
name|QColor
operator|::
name|setGreenF
parameter_list|(
name|qreal
name|green
parameter_list|)
block|{
name|QCOLOR_REAL_RANGE_CHECK
argument_list|(
literal|"QColor::setGreenF"
argument_list|,
name|green
argument_list|)
expr_stmt|;
if|if
condition|(
name|cspec
operator|!=
name|Rgb
condition|)
name|setRgbF
argument_list|(
name|redF
argument_list|()
argument_list|,
name|green
argument_list|,
name|blueF
argument_list|()
argument_list|,
name|alphaF
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ct
operator|.
name|argb
operator|.
name|green
operator|=
name|qRound
argument_list|(
name|green
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the blue color component of this color.       \sa setBlueF(), blue(), getRgbF() */
end_comment
begin_function
DECL|function|blueF
name|qreal
name|QColor
operator|::
name|blueF
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Rgb
condition|)
return|return
name|toRgb
argument_list|()
operator|.
name|blueF
argument_list|()
return|;
return|return
name|ct
operator|.
name|argb
operator|.
name|blue
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the blue color component of this color to \a blue. Float components     are specified in the range 0.0-1.0.      \sa blueF(), blue(), setRgbF() */
end_comment
begin_function
DECL|function|setBlueF
name|void
name|QColor
operator|::
name|setBlueF
parameter_list|(
name|qreal
name|blue
parameter_list|)
block|{
name|QCOLOR_REAL_RANGE_CHECK
argument_list|(
literal|"QColor::setBlueF"
argument_list|,
name|blue
argument_list|)
expr_stmt|;
if|if
condition|(
name|cspec
operator|!=
name|Rgb
condition|)
name|setRgbF
argument_list|(
name|redF
argument_list|()
argument_list|,
name|greenF
argument_list|()
argument_list|,
name|blue
argument_list|,
name|alphaF
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ct
operator|.
name|argb
operator|.
name|blue
operator|=
name|qRound
argument_list|(
name|blue
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the hue color component of this color.      The color is implicitly converted to HSV.      \sa hsvHue(), hueF(), getHsv(), {QColor#The HSV Color Model}{The HSV Color     Model} */
end_comment
begin_function
DECL|function|hue
name|int
name|QColor
operator|::
name|hue
parameter_list|()
specifier|const
block|{
return|return
name|hsvHue
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the hue color component of this color.      \sa hueF(), getHsv(), {QColor#The HSV Color Model}{The HSV Color     Model} */
end_comment
begin_function
DECL|function|hsvHue
name|int
name|QColor
operator|::
name|hsvHue
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Hsv
condition|)
return|return
name|toHsv
argument_list|()
operator|.
name|hue
argument_list|()
return|;
return|return
name|ct
operator|.
name|ahsv
operator|.
name|hue
operator|==
name|USHRT_MAX
condition|?
operator|-
literal|1
else|:
name|ct
operator|.
name|ahsv
operator|.
name|hue
operator|/
literal|100
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the saturation color component of this color.      The color is implicitly converted to HSV.      \sa hsvSaturation(), saturationF(), getHsv(), {QColor#The HSV Color Model}{The HSV Color     Model} */
end_comment
begin_function
DECL|function|saturation
name|int
name|QColor
operator|::
name|saturation
parameter_list|()
specifier|const
block|{
return|return
name|hsvSaturation
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the saturation color component of this color.      \sa saturationF(), getHsv(), {QColor#The HSV Color Model}{The HSV Color     Model} */
end_comment
begin_function
DECL|function|hsvSaturation
name|int
name|QColor
operator|::
name|hsvSaturation
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Hsv
condition|)
return|return
name|toHsv
argument_list|()
operator|.
name|saturation
argument_list|()
return|;
return|return
name|ct
operator|.
name|ahsv
operator|.
name|saturation
operator|>>
literal|8
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the value color component of this color.      \sa valueF(), getHsv(), {QColor#The HSV Color Model}{The HSV Color     Model} */
end_comment
begin_function
DECL|function|value
name|int
name|QColor
operator|::
name|value
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Hsv
condition|)
return|return
name|toHsv
argument_list|()
operator|.
name|value
argument_list|()
return|;
return|return
name|ct
operator|.
name|ahsv
operator|.
name|value
operator|>>
literal|8
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the hue color component of this color.      The color is implicitly converted to HSV.      \sa hsvHueF(), hue(), getHsvF(), {QColor#The HSV Color Model}{The HSV Color     Model} */
end_comment
begin_function
DECL|function|hueF
name|qreal
name|QColor
operator|::
name|hueF
parameter_list|()
specifier|const
block|{
return|return
name|hsvHueF
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the hue color component of this color.      \sa hue(), getHsvF(), {QColor#The HSV Color Model}{The HSV Color     Model} */
end_comment
begin_function
DECL|function|hsvHueF
name|qreal
name|QColor
operator|::
name|hsvHueF
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Hsv
condition|)
return|return
name|toHsv
argument_list|()
operator|.
name|hueF
argument_list|()
return|;
return|return
name|ct
operator|.
name|ahsv
operator|.
name|hue
operator|==
name|USHRT_MAX
condition|?
name|qreal
argument_list|(
operator|-
literal|1.0
argument_list|)
else|:
name|ct
operator|.
name|ahsv
operator|.
name|hue
operator|/
name|qreal
argument_list|(
literal|36000.0
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the saturation color component of this color.       The color is implicitly converted to HSV.      \sa hsvSaturationF(), saturation() getHsvF(), {QColor#The HSV Color Model}{The HSV Color     Model} */
end_comment
begin_function
DECL|function|saturationF
name|qreal
name|QColor
operator|::
name|saturationF
parameter_list|()
specifier|const
block|{
return|return
name|hsvSaturationF
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the saturation color component of this color.      \sa saturation() getHsvF(), {QColor#The HSV Color Model}{The HSV Color     Model} */
end_comment
begin_function
DECL|function|hsvSaturationF
name|qreal
name|QColor
operator|::
name|hsvSaturationF
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Hsv
condition|)
return|return
name|toHsv
argument_list|()
operator|.
name|saturationF
argument_list|()
return|;
return|return
name|ct
operator|.
name|ahsv
operator|.
name|saturation
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the value color component of this color.      \sa value() getHsvF(), {QColor#The HSV Color Model}{The HSV Color     Model} */
end_comment
begin_function
DECL|function|valueF
name|qreal
name|QColor
operator|::
name|valueF
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Hsv
condition|)
return|return
name|toHsv
argument_list|()
operator|.
name|valueF
argument_list|()
return|;
return|return
name|ct
operator|.
name|ahsv
operator|.
name|value
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.6      Returns the hue color component of this color.      \sa getHslF(), getHsl() */
end_comment
begin_function
DECL|function|hslHue
name|int
name|QColor
operator|::
name|hslHue
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Hsl
condition|)
return|return
name|toHsl
argument_list|()
operator|.
name|hslHue
argument_list|()
return|;
return|return
name|ct
operator|.
name|ahsl
operator|.
name|hue
operator|==
name|USHRT_MAX
condition|?
operator|-
literal|1
else|:
name|ct
operator|.
name|ahsl
operator|.
name|hue
operator|/
literal|100
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.6      Returns the saturation color component of this color.      \sa saturationF(), getHsv(), {QColor#The HSV Color Model}{The HSV Color     Model} */
end_comment
begin_function
DECL|function|hslSaturation
name|int
name|QColor
operator|::
name|hslSaturation
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Hsl
condition|)
return|return
name|toHsl
argument_list|()
operator|.
name|hslSaturation
argument_list|()
return|;
return|return
name|ct
operator|.
name|ahsl
operator|.
name|saturation
operator|>>
literal|8
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.6      Returns the lightness color component of this color.      \sa lightnessF(), getHsl() */
end_comment
begin_function
DECL|function|lightness
name|int
name|QColor
operator|::
name|lightness
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Hsl
condition|)
return|return
name|toHsl
argument_list|()
operator|.
name|lightness
argument_list|()
return|;
return|return
name|ct
operator|.
name|ahsl
operator|.
name|lightness
operator|>>
literal|8
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.6      Returns the hue color component of this color.      \sa hue(), getHslF() */
end_comment
begin_function
DECL|function|hslHueF
name|qreal
name|QColor
operator|::
name|hslHueF
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Hsl
condition|)
return|return
name|toHsl
argument_list|()
operator|.
name|hslHueF
argument_list|()
return|;
return|return
name|ct
operator|.
name|ahsl
operator|.
name|hue
operator|==
name|USHRT_MAX
condition|?
name|qreal
argument_list|(
operator|-
literal|1.0
argument_list|)
else|:
name|ct
operator|.
name|ahsl
operator|.
name|hue
operator|/
name|qreal
argument_list|(
literal|36000.0
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.6      Returns the saturation color component of this color.      \sa saturationF() getHslF() */
end_comment
begin_function
DECL|function|hslSaturationF
name|qreal
name|QColor
operator|::
name|hslSaturationF
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Hsl
condition|)
return|return
name|toHsl
argument_list|()
operator|.
name|hslSaturationF
argument_list|()
return|;
return|return
name|ct
operator|.
name|ahsl
operator|.
name|saturation
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.6      Returns the lightness color component of this color.      \sa value() getHslF() */
end_comment
begin_function
DECL|function|lightnessF
name|qreal
name|QColor
operator|::
name|lightnessF
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Hsl
condition|)
return|return
name|toHsl
argument_list|()
operator|.
name|lightnessF
argument_list|()
return|;
return|return
name|ct
operator|.
name|ahsl
operator|.
name|lightness
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the cyan color component of this color.      \sa cyanF(), getCmyk(), {QColor#The CMYK Color Model}{The CMYK     Color Model} */
end_comment
begin_function
DECL|function|cyan
name|int
name|QColor
operator|::
name|cyan
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Cmyk
condition|)
return|return
name|toCmyk
argument_list|()
operator|.
name|cyan
argument_list|()
return|;
return|return
name|ct
operator|.
name|acmyk
operator|.
name|cyan
operator|>>
literal|8
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the magenta color component of this color.      \sa magentaF(), getCmyk(), {QColor#The CMYK Color Model}{The CMYK     Color Model} */
end_comment
begin_function
DECL|function|magenta
name|int
name|QColor
operator|::
name|magenta
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Cmyk
condition|)
return|return
name|toCmyk
argument_list|()
operator|.
name|magenta
argument_list|()
return|;
return|return
name|ct
operator|.
name|acmyk
operator|.
name|magenta
operator|>>
literal|8
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the yellow color component of this color.      \sa yellowF(), getCmyk(), {QColor#The CMYK Color Model}{The CMYK     Color Model} */
end_comment
begin_function
DECL|function|yellow
name|int
name|QColor
operator|::
name|yellow
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Cmyk
condition|)
return|return
name|toCmyk
argument_list|()
operator|.
name|yellow
argument_list|()
return|;
return|return
name|ct
operator|.
name|acmyk
operator|.
name|yellow
operator|>>
literal|8
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the black color component of this color.      \sa blackF(), getCmyk(), {QColor#The CMYK Color Model}{The CMYK     Color Model}  */
end_comment
begin_function
DECL|function|black
name|int
name|QColor
operator|::
name|black
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Cmyk
condition|)
return|return
name|toCmyk
argument_list|()
operator|.
name|black
argument_list|()
return|;
return|return
name|ct
operator|.
name|acmyk
operator|.
name|black
operator|>>
literal|8
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the cyan color component of this color.      \sa cyan(), getCmykF(), {QColor#The CMYK Color Model}{The CMYK     Color Model} */
end_comment
begin_function
DECL|function|cyanF
name|qreal
name|QColor
operator|::
name|cyanF
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Cmyk
condition|)
return|return
name|toCmyk
argument_list|()
operator|.
name|cyanF
argument_list|()
return|;
return|return
name|ct
operator|.
name|acmyk
operator|.
name|cyan
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the magenta color component of this color.      \sa magenta(), getCmykF(), {QColor#The CMYK Color Model}{The CMYK     Color Model} */
end_comment
begin_function
DECL|function|magentaF
name|qreal
name|QColor
operator|::
name|magentaF
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Cmyk
condition|)
return|return
name|toCmyk
argument_list|()
operator|.
name|magentaF
argument_list|()
return|;
return|return
name|ct
operator|.
name|acmyk
operator|.
name|magenta
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the yellow color component of this color.       \sa yellow(), getCmykF(), {QColor#The CMYK Color Model}{The CMYK     Color Model} */
end_comment
begin_function
DECL|function|yellowF
name|qreal
name|QColor
operator|::
name|yellowF
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Cmyk
condition|)
return|return
name|toCmyk
argument_list|()
operator|.
name|yellowF
argument_list|()
return|;
return|return
name|ct
operator|.
name|acmyk
operator|.
name|yellow
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the black color component of this color.      \sa black(), getCmykF(), {QColor#The CMYK Color Model}{The CMYK     Color Model} */
end_comment
begin_function
DECL|function|blackF
name|qreal
name|QColor
operator|::
name|blackF
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Cmyk
condition|)
return|return
name|toCmyk
argument_list|()
operator|.
name|blackF
argument_list|()
return|;
return|return
name|ct
operator|.
name|acmyk
operator|.
name|black
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Create and returns an RGB QColor based on this color.      \sa fromRgb(), convertTo(), isValid() */
end_comment
begin_function
DECL|function|toRgb
name|QColor
name|QColor
operator|::
name|toRgb
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
operator|||
name|cspec
operator|==
name|Rgb
condition|)
return|return
operator|*
name|this
return|;
name|QColor
name|color
decl_stmt|;
name|color
operator|.
name|cspec
operator|=
name|Rgb
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|alpha
operator|=
name|ct
operator|.
name|argb
operator|.
name|alpha
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|pad
operator|=
literal|0
expr_stmt|;
switch|switch
condition|(
name|cspec
condition|)
block|{
case|case
name|Hsv
case|:
block|{
if|if
condition|(
name|ct
operator|.
name|ahsv
operator|.
name|saturation
operator|==
literal|0
operator|||
name|ct
operator|.
name|ahsv
operator|.
name|hue
operator|==
name|USHRT_MAX
condition|)
block|{
comment|// achromatic case
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|red
operator|=
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|green
operator|=
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|blue
operator|=
name|ct
operator|.
name|ahsv
operator|.
name|value
expr_stmt|;
break|break;
block|}
comment|// chromatic case
specifier|const
name|qreal
name|h
init|=
name|ct
operator|.
name|ahsv
operator|.
name|hue
operator|==
literal|36000
condition|?
literal|0
else|:
name|ct
operator|.
name|ahsv
operator|.
name|hue
operator|/
literal|6000.
decl_stmt|;
specifier|const
name|qreal
name|s
init|=
name|ct
operator|.
name|ahsv
operator|.
name|saturation
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|v
init|=
name|ct
operator|.
name|ahsv
operator|.
name|value
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
decl_stmt|;
specifier|const
name|int
name|i
init|=
name|int
argument_list|(
name|h
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|f
init|=
name|h
operator|-
name|i
decl_stmt|;
specifier|const
name|qreal
name|p
init|=
name|v
operator|*
operator|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|-
name|s
operator|)
decl_stmt|;
if|if
condition|(
name|i
operator|&
literal|1
condition|)
block|{
specifier|const
name|qreal
name|q
init|=
name|v
operator|*
operator|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|-
operator|(
name|s
operator|*
name|f
operator|)
operator|)
decl_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|1
case|:
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|red
operator|=
name|qRound
argument_list|(
name|q
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|green
operator|=
name|qRound
argument_list|(
name|v
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|blue
operator|=
name|qRound
argument_list|(
name|p
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|red
operator|=
name|qRound
argument_list|(
name|p
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|green
operator|=
name|qRound
argument_list|(
name|q
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|blue
operator|=
name|qRound
argument_list|(
name|v
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|red
operator|=
name|qRound
argument_list|(
name|v
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|green
operator|=
name|qRound
argument_list|(
name|p
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|blue
operator|=
name|qRound
argument_list|(
name|q
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
specifier|const
name|qreal
name|t
init|=
name|v
operator|*
operator|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|-
operator|(
name|s
operator|*
operator|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|-
name|f
operator|)
operator|)
operator|)
decl_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|red
operator|=
name|qRound
argument_list|(
name|v
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|green
operator|=
name|qRound
argument_list|(
name|t
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|blue
operator|=
name|qRound
argument_list|(
name|p
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|red
operator|=
name|qRound
argument_list|(
name|p
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|green
operator|=
name|qRound
argument_list|(
name|v
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|blue
operator|=
name|qRound
argument_list|(
name|t
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|red
operator|=
name|qRound
argument_list|(
name|t
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|green
operator|=
name|qRound
argument_list|(
name|p
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|blue
operator|=
name|qRound
argument_list|(
name|v
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
break|break;
block|}
case|case
name|Hsl
case|:
block|{
if|if
condition|(
name|ct
operator|.
name|ahsl
operator|.
name|saturation
operator|==
literal|0
operator|||
name|ct
operator|.
name|ahsl
operator|.
name|hue
operator|==
name|USHRT_MAX
condition|)
block|{
comment|// achromatic case
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|red
operator|=
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|green
operator|=
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|blue
operator|=
name|ct
operator|.
name|ahsl
operator|.
name|lightness
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ct
operator|.
name|ahsl
operator|.
name|lightness
operator|==
literal|0
condition|)
block|{
comment|// lightness 0
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|red
operator|=
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|green
operator|=
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|blue
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
comment|// chromatic case
specifier|const
name|qreal
name|h
init|=
name|ct
operator|.
name|ahsl
operator|.
name|hue
operator|==
literal|36000
condition|?
literal|0
else|:
name|ct
operator|.
name|ahsl
operator|.
name|hue
operator|/
literal|36000.
decl_stmt|;
specifier|const
name|qreal
name|s
init|=
name|ct
operator|.
name|ahsl
operator|.
name|saturation
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|l
init|=
name|ct
operator|.
name|ahsl
operator|.
name|lightness
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
decl_stmt|;
name|qreal
name|temp2
decl_stmt|;
if|if
condition|(
name|l
operator|<
name|qreal
argument_list|(
literal|0.5
argument_list|)
condition|)
name|temp2
operator|=
name|l
operator|*
operator|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|+
name|s
operator|)
expr_stmt|;
else|else
name|temp2
operator|=
name|l
operator|+
name|s
operator|-
operator|(
name|l
operator|*
name|s
operator|)
expr_stmt|;
specifier|const
name|qreal
name|temp1
init|=
operator|(
name|qreal
argument_list|(
literal|2.0
argument_list|)
operator|*
name|l
operator|)
operator|-
name|temp2
decl_stmt|;
name|qreal
name|temp3
index|[
literal|3
index|]
init|=
block|{
name|h
operator|+
operator|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|/
name|qreal
argument_list|(
literal|3.0
argument_list|)
operator|)
block|,
name|h
block|,
name|h
operator|-
operator|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|/
name|qreal
argument_list|(
literal|3.0
argument_list|)
operator|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
literal|3
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|temp3
index|[
name|i
index|]
operator|<
name|qreal
argument_list|(
literal|0.0
argument_list|)
condition|)
name|temp3
index|[
name|i
index|]
operator|+=
name|qreal
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|temp3
index|[
name|i
index|]
operator|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
condition|)
name|temp3
index|[
name|i
index|]
operator|-=
name|qreal
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
specifier|const
name|qreal
name|sixtemp3
init|=
name|temp3
index|[
name|i
index|]
operator|*
name|qreal
argument_list|(
literal|6.0
argument_list|)
decl_stmt|;
if|if
condition|(
name|sixtemp3
operator|<
name|qreal
argument_list|(
literal|1.0
argument_list|)
condition|)
name|color
operator|.
name|ct
operator|.
name|array
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|qRound
argument_list|(
operator|(
name|temp1
operator|+
operator|(
name|temp2
operator|-
name|temp1
operator|)
operator|*
name|sixtemp3
operator|)
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
name|temp3
index|[
name|i
index|]
operator|*
name|qreal
argument_list|(
literal|2.0
argument_list|)
operator|)
operator|<
name|qreal
argument_list|(
literal|1.0
argument_list|)
condition|)
name|color
operator|.
name|ct
operator|.
name|array
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|qRound
argument_list|(
name|temp2
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
name|temp3
index|[
name|i
index|]
operator|*
name|qreal
argument_list|(
literal|3.0
argument_list|)
operator|)
operator|<
name|qreal
argument_list|(
literal|2.0
argument_list|)
condition|)
name|color
operator|.
name|ct
operator|.
name|array
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|qRound
argument_list|(
operator|(
name|temp1
operator|+
operator|(
name|temp2
operator|-
name|temp1
operator|)
operator|*
operator|(
name|qreal
argument_list|(
literal|2.0
argument_list|)
operator|/
name|qreal
argument_list|(
literal|3.0
argument_list|)
operator|-
name|temp3
index|[
name|i
index|]
operator|)
operator|*
name|qreal
argument_list|(
literal|6.0
argument_list|)
operator|)
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
else|else
name|color
operator|.
name|ct
operator|.
name|array
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|qRound
argument_list|(
name|temp1
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
block|}
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|red
operator|=
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|red
operator|==
literal|1
condition|?
literal|0
else|:
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|red
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|green
operator|=
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|green
operator|==
literal|1
condition|?
literal|0
else|:
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|green
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|blue
operator|=
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|blue
operator|==
literal|1
condition|?
literal|0
else|:
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|blue
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Cmyk
case|:
block|{
specifier|const
name|qreal
name|c
init|=
name|ct
operator|.
name|acmyk
operator|.
name|cyan
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|m
init|=
name|ct
operator|.
name|acmyk
operator|.
name|magenta
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|y
init|=
name|ct
operator|.
name|acmyk
operator|.
name|yellow
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|k
init|=
name|ct
operator|.
name|acmyk
operator|.
name|black
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
decl_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|red
operator|=
name|qRound
argument_list|(
operator|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|-
operator|(
name|c
operator|*
operator|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|-
name|k
operator|)
operator|+
name|k
operator|)
operator|)
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|green
operator|=
name|qRound
argument_list|(
operator|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|-
operator|(
name|m
operator|*
operator|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|-
name|k
operator|)
operator|+
name|k
operator|)
operator|)
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|blue
operator|=
name|qRound
argument_list|(
operator|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|-
operator|(
name|y
operator|*
operator|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|-
name|k
operator|)
operator|+
name|k
operator|)
operator|)
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
return|return
name|color
return|;
block|}
end_function
begin_define
DECL|macro|Q_MAX_3
define|#
directive|define
name|Q_MAX_3
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|( ( a> b&& a> c) ? a : (b> c ? b : c) )
end_define
begin_define
DECL|macro|Q_MIN_3
define|#
directive|define
name|Q_MIN_3
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|( ( a< b&& a< c) ? a : (b< c ? b : c) )
end_define
begin_comment
comment|/*!     Creates and returns an HSV QColor based on this color.      \sa fromHsv(), convertTo(), isValid(), {QColor#The HSV Color     Model}{The HSV Color Model} */
end_comment
begin_function
DECL|function|toHsv
name|QColor
name|QColor
operator|::
name|toHsv
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
operator|||
name|cspec
operator|==
name|Hsv
condition|)
return|return
operator|*
name|this
return|;
if|if
condition|(
name|cspec
operator|!=
name|Rgb
condition|)
return|return
name|toRgb
argument_list|()
operator|.
name|toHsv
argument_list|()
return|;
name|QColor
name|color
decl_stmt|;
name|color
operator|.
name|cspec
operator|=
name|Hsv
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|alpha
operator|=
name|ct
operator|.
name|argb
operator|.
name|alpha
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|pad
operator|=
literal|0
expr_stmt|;
specifier|const
name|qreal
name|r
init|=
name|ct
operator|.
name|argb
operator|.
name|red
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|g
init|=
name|ct
operator|.
name|argb
operator|.
name|green
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|b
init|=
name|ct
operator|.
name|argb
operator|.
name|blue
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|max
init|=
name|Q_MAX_3
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|min
init|=
name|Q_MIN_3
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|delta
init|=
name|max
operator|-
name|min
decl_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|value
operator|=
name|qRound
argument_list|(
name|max
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
if|if
condition|(
name|qFuzzyIsNull
argument_list|(
name|delta
argument_list|)
condition|)
block|{
comment|// achromatic case, hue is undefined
name|color
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|hue
operator|=
name|USHRT_MAX
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|saturation
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
comment|// chromatic case
name|qreal
name|hue
init|=
literal|0
decl_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|saturation
operator|=
name|qRound
argument_list|(
operator|(
name|delta
operator|/
name|max
operator|)
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
if|if
condition|(
name|qFuzzyCompare
argument_list|(
name|r
argument_list|,
name|max
argument_list|)
condition|)
block|{
name|hue
operator|=
operator|(
operator|(
name|g
operator|-
name|b
operator|)
operator|/
name|delta
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qFuzzyCompare
argument_list|(
name|g
argument_list|,
name|max
argument_list|)
condition|)
block|{
name|hue
operator|=
operator|(
name|qreal
argument_list|(
literal|2.0
argument_list|)
operator|+
operator|(
name|b
operator|-
name|r
operator|)
operator|/
name|delta
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qFuzzyCompare
argument_list|(
name|b
argument_list|,
name|max
argument_list|)
condition|)
block|{
name|hue
operator|=
operator|(
name|qreal
argument_list|(
literal|4.0
argument_list|)
operator|+
operator|(
name|r
operator|-
name|g
operator|)
operator|/
name|delta
operator|)
expr_stmt|;
block|}
else|else
block|{
name|Q_ASSERT_X
argument_list|(
literal|false
argument_list|,
literal|"QColor::toHsv"
argument_list|,
literal|"internal error"
argument_list|)
expr_stmt|;
block|}
name|hue
operator|*=
name|qreal
argument_list|(
literal|60.0
argument_list|)
expr_stmt|;
if|if
condition|(
name|hue
operator|<
name|qreal
argument_list|(
literal|0.0
argument_list|)
condition|)
name|hue
operator|+=
name|qreal
argument_list|(
literal|360.0
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|hue
operator|=
name|qRound
argument_list|(
name|hue
operator|*
literal|100
argument_list|)
expr_stmt|;
block|}
return|return
name|color
return|;
block|}
end_function
begin_comment
comment|/*!     Creates and returns an HSL QColor based on this color.      \sa fromHsl(), convertTo(), isValid() */
end_comment
begin_function
DECL|function|toHsl
name|QColor
name|QColor
operator|::
name|toHsl
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
operator|||
name|cspec
operator|==
name|Hsl
condition|)
return|return
operator|*
name|this
return|;
if|if
condition|(
name|cspec
operator|!=
name|Rgb
condition|)
return|return
name|toRgb
argument_list|()
operator|.
name|toHsl
argument_list|()
return|;
name|QColor
name|color
decl_stmt|;
name|color
operator|.
name|cspec
operator|=
name|Hsl
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|alpha
operator|=
name|ct
operator|.
name|argb
operator|.
name|alpha
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|pad
operator|=
literal|0
expr_stmt|;
specifier|const
name|qreal
name|r
init|=
name|ct
operator|.
name|argb
operator|.
name|red
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|g
init|=
name|ct
operator|.
name|argb
operator|.
name|green
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|b
init|=
name|ct
operator|.
name|argb
operator|.
name|blue
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|max
init|=
name|Q_MAX_3
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|min
init|=
name|Q_MIN_3
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|delta
init|=
name|max
operator|-
name|min
decl_stmt|;
specifier|const
name|qreal
name|delta2
init|=
name|max
operator|+
name|min
decl_stmt|;
specifier|const
name|qreal
name|lightness
init|=
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|*
name|delta2
decl_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|lightness
operator|=
name|qRound
argument_list|(
name|lightness
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
if|if
condition|(
name|qFuzzyIsNull
argument_list|(
name|delta
argument_list|)
condition|)
block|{
comment|// achromatic case, hue is undefined
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|hue
operator|=
name|USHRT_MAX
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|saturation
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
comment|// chromatic case
name|qreal
name|hue
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|lightness
operator|<
name|qreal
argument_list|(
literal|0.5
argument_list|)
condition|)
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|saturation
operator|=
name|qRound
argument_list|(
operator|(
name|delta
operator|/
name|delta2
operator|)
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
else|else
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|saturation
operator|=
name|qRound
argument_list|(
operator|(
name|delta
operator|/
operator|(
name|qreal
argument_list|(
literal|2.0
argument_list|)
operator|-
name|delta2
operator|)
operator|)
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
if|if
condition|(
name|qFuzzyCompare
argument_list|(
name|r
argument_list|,
name|max
argument_list|)
condition|)
block|{
name|hue
operator|=
operator|(
operator|(
name|g
operator|-
name|b
operator|)
operator|/
name|delta
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qFuzzyCompare
argument_list|(
name|g
argument_list|,
name|max
argument_list|)
condition|)
block|{
name|hue
operator|=
operator|(
name|qreal
argument_list|(
literal|2.0
argument_list|)
operator|+
operator|(
name|b
operator|-
name|r
operator|)
operator|/
name|delta
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qFuzzyCompare
argument_list|(
name|b
argument_list|,
name|max
argument_list|)
condition|)
block|{
name|hue
operator|=
operator|(
name|qreal
argument_list|(
literal|4.0
argument_list|)
operator|+
operator|(
name|r
operator|-
name|g
operator|)
operator|/
name|delta
operator|)
expr_stmt|;
block|}
else|else
block|{
name|Q_ASSERT_X
argument_list|(
literal|false
argument_list|,
literal|"QColor::toHsv"
argument_list|,
literal|"internal error"
argument_list|)
expr_stmt|;
block|}
name|hue
operator|*=
name|qreal
argument_list|(
literal|60.0
argument_list|)
expr_stmt|;
if|if
condition|(
name|hue
operator|<
name|qreal
argument_list|(
literal|0.0
argument_list|)
condition|)
name|hue
operator|+=
name|qreal
argument_list|(
literal|360.0
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|hue
operator|=
name|qRound
argument_list|(
name|hue
operator|*
literal|100
argument_list|)
expr_stmt|;
block|}
return|return
name|color
return|;
block|}
end_function
begin_comment
comment|/*!     Creates and returns a CMYK QColor based on this color.      \sa fromCmyk(), convertTo(), isValid(), {QColor#The CMYK Color     Model}{The CMYK Color Model} */
end_comment
begin_function
DECL|function|toCmyk
name|QColor
name|QColor
operator|::
name|toCmyk
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
operator|||
name|cspec
operator|==
name|Cmyk
condition|)
return|return
operator|*
name|this
return|;
if|if
condition|(
name|cspec
operator|!=
name|Rgb
condition|)
return|return
name|toRgb
argument_list|()
operator|.
name|toCmyk
argument_list|()
return|;
name|QColor
name|color
decl_stmt|;
name|color
operator|.
name|cspec
operator|=
name|Cmyk
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|acmyk
operator|.
name|alpha
operator|=
name|ct
operator|.
name|argb
operator|.
name|alpha
expr_stmt|;
comment|// rgb -> cmy
specifier|const
name|qreal
name|r
init|=
name|ct
operator|.
name|argb
operator|.
name|red
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|g
init|=
name|ct
operator|.
name|argb
operator|.
name|green
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|b
init|=
name|ct
operator|.
name|argb
operator|.
name|blue
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
decl_stmt|;
name|qreal
name|c
init|=
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|-
name|r
decl_stmt|;
name|qreal
name|m
init|=
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|-
name|g
decl_stmt|;
name|qreal
name|y
init|=
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|-
name|b
decl_stmt|;
comment|// cmy -> cmyk
specifier|const
name|qreal
name|k
init|=
name|qMin
argument_list|(
name|c
argument_list|,
name|qMin
argument_list|(
name|m
argument_list|,
name|y
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|qFuzzyIsNull
argument_list|(
name|k
operator|-
literal|1
argument_list|)
condition|)
block|{
name|c
operator|=
operator|(
name|c
operator|-
name|k
operator|)
operator|/
operator|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|-
name|k
operator|)
expr_stmt|;
name|m
operator|=
operator|(
name|m
operator|-
name|k
operator|)
operator|/
operator|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|-
name|k
operator|)
expr_stmt|;
name|y
operator|=
operator|(
name|y
operator|-
name|k
operator|)
operator|/
operator|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|-
name|k
operator|)
expr_stmt|;
block|}
name|color
operator|.
name|ct
operator|.
name|acmyk
operator|.
name|cyan
operator|=
name|qRound
argument_list|(
name|c
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|acmyk
operator|.
name|magenta
operator|=
name|qRound
argument_list|(
name|m
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|acmyk
operator|.
name|yellow
operator|=
name|qRound
argument_list|(
name|y
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|acmyk
operator|.
name|black
operator|=
name|qRound
argument_list|(
name|k
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
return|return
name|color
return|;
block|}
end_function
begin_function
DECL|function|convertTo
name|QColor
name|QColor
operator|::
name|convertTo
parameter_list|(
name|QColor
operator|::
name|Spec
name|colorSpec
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|colorSpec
operator|==
name|cspec
condition|)
return|return
operator|*
name|this
return|;
switch|switch
condition|(
name|colorSpec
condition|)
block|{
case|case
name|Rgb
case|:
return|return
name|toRgb
argument_list|()
return|;
case|case
name|Hsv
case|:
return|return
name|toHsv
argument_list|()
return|;
case|case
name|Cmyk
case|:
return|return
name|toCmyk
argument_list|()
return|;
case|case
name|Hsl
case|:
return|return
name|toHsl
argument_list|()
return|;
case|case
name|Invalid
case|:
break|break;
block|}
return|return
name|QColor
argument_list|()
return|;
comment|// must be invalid
block|}
end_function
begin_comment
comment|/*!     Static convenience function that returns a QColor constructed from the     given QRgb value \a rgb.      The alpha component of \a rgb is ignored (i.e. it is automatically set to     255), use the fromRgba() function to include the alpha-channel specified by     the given QRgb value.      \sa fromRgba(), fromRgbF(), toRgb(), isValid() */
end_comment
begin_function
DECL|function|fromRgb
name|QColor
name|QColor
operator|::
name|fromRgb
parameter_list|(
name|QRgb
name|rgb
parameter_list|)
block|{
return|return
name|fromRgb
argument_list|(
name|qRed
argument_list|(
name|rgb
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|rgb
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|rgb
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Static convenience function that returns a QColor constructed from the     given QRgb value \a rgba.      Unlike the fromRgb() function, the alpha-channel specified by the given     QRgb value is included.      \sa fromRgb(), isValid() */
end_comment
begin_function
DECL|function|fromRgba
name|QColor
name|QColor
operator|::
name|fromRgba
parameter_list|(
name|QRgb
name|rgba
parameter_list|)
block|{
return|return
name|fromRgb
argument_list|(
name|qRed
argument_list|(
name|rgba
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|rgba
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|rgba
argument_list|)
argument_list|,
name|qAlpha
argument_list|(
name|rgba
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Static convenience function that returns a QColor constructed from the RGB     color values, \a r (red), \a g (green), \a b (blue), and \a a     (alpha-channel, i.e. transparency).      All the values must be in the range 0-255.      \sa toRgb(), fromRgbF(), isValid() */
end_comment
begin_function
DECL|function|fromRgb
name|QColor
name|QColor
operator|::
name|fromRgb
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|g
parameter_list|,
name|int
name|b
parameter_list|,
name|int
name|a
parameter_list|)
block|{
if|if
condition|(
name|r
argument_list|<
literal|0
operator|||
name|r
argument_list|>
literal|255
operator|||
name|g
argument_list|<
literal|0
operator|||
name|g
argument_list|>
literal|255
operator|||
name|b
argument_list|<
literal|0
operator|||
name|b
argument_list|>
literal|255
operator|||
name|a
argument_list|<
literal|0
operator|||
name|a
argument_list|>
literal|255
condition|)
block|{
name|qWarning
argument_list|(
literal|"QColor::fromRgb: RGB parameters out of range"
argument_list|)
expr_stmt|;
return|return
name|QColor
argument_list|()
return|;
block|}
name|QColor
name|color
decl_stmt|;
name|color
operator|.
name|cspec
operator|=
name|Rgb
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|alpha
operator|=
name|a
operator|*
literal|0x101
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|red
operator|=
name|r
operator|*
literal|0x101
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|green
operator|=
name|g
operator|*
literal|0x101
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|blue
operator|=
name|b
operator|*
literal|0x101
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|pad
operator|=
literal|0
expr_stmt|;
return|return
name|color
return|;
block|}
end_function
begin_comment
comment|/*!     Static convenience function that returns a QColor constructed from the RGB     color values, \a r (red), \a g (green), \a b (blue), and \a a     (alpha-channel, i.e. transparency).      All the values must be in the range 0.0-1.0.      \sa fromRgb(), toRgb(), isValid() */
end_comment
begin_function
DECL|function|fromRgbF
name|QColor
name|QColor
operator|::
name|fromRgbF
parameter_list|(
name|qreal
name|r
parameter_list|,
name|qreal
name|g
parameter_list|,
name|qreal
name|b
parameter_list|,
name|qreal
name|a
parameter_list|)
block|{
if|if
condition|(
name|r
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|r
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|||
name|g
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|g
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|||
name|b
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|b
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|||
name|a
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|a
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QColor::fromRgbF: RGB parameters out of range"
argument_list|)
expr_stmt|;
return|return
name|QColor
argument_list|()
return|;
block|}
name|QColor
name|color
decl_stmt|;
name|color
operator|.
name|cspec
operator|=
name|Rgb
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|alpha
operator|=
name|qRound
argument_list|(
name|a
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|red
operator|=
name|qRound
argument_list|(
name|r
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|green
operator|=
name|qRound
argument_list|(
name|g
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|blue
operator|=
name|qRound
argument_list|(
name|b
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|pad
operator|=
literal|0
expr_stmt|;
return|return
name|color
return|;
block|}
end_function
begin_comment
comment|/*!     Static convenience function that returns a QColor constructed from the HSV     color values, \a h (hue), \a s (saturation), \a v (value), and \a a     (alpha-channel, i.e. transparency).      The value of \a s, \a v, and \a a must all be in the range 0-255; the value     of \a h must be in the range 0-359.      \sa toHsv(), fromHsvF(), isValid(), {QColor#The HSV Color     Model}{The HSV Color Model} */
end_comment
begin_function
DECL|function|fromHsv
name|QColor
name|QColor
operator|::
name|fromHsv
parameter_list|(
name|int
name|h
parameter_list|,
name|int
name|s
parameter_list|,
name|int
name|v
parameter_list|,
name|int
name|a
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|h
operator|<
literal|0
operator|||
name|h
operator|>=
literal|360
operator|)
operator|&&
name|h
operator|!=
operator|-
literal|1
operator|)
operator|||
name|s
argument_list|<
literal|0
operator|||
name|s
argument_list|>
literal|255
operator|||
name|v
argument_list|<
literal|0
operator|||
name|v
argument_list|>
literal|255
operator|||
name|a
argument_list|<
literal|0
operator|||
name|a
argument_list|>
literal|255
condition|)
block|{
name|qWarning
argument_list|(
literal|"QColor::fromHsv: HSV parameters out of range"
argument_list|)
expr_stmt|;
return|return
name|QColor
argument_list|()
return|;
block|}
name|QColor
name|color
decl_stmt|;
name|color
operator|.
name|cspec
operator|=
name|Hsv
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|alpha
operator|=
name|a
operator|*
literal|0x101
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|hue
operator|=
name|h
operator|==
operator|-
literal|1
condition|?
name|USHRT_MAX
else|:
operator|(
name|h
operator|%
literal|360
operator|)
operator|*
literal|100
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|saturation
operator|=
name|s
operator|*
literal|0x101
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|value
operator|=
name|v
operator|*
literal|0x101
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|pad
operator|=
literal|0
expr_stmt|;
return|return
name|color
return|;
block|}
end_function
begin_comment
comment|/*!     \overload      Static convenience function that returns a QColor constructed from the HSV     color values, \a h (hue), \a s (saturation), \a v (value), and \a a     (alpha-channel, i.e. transparency).      All the values must be in the range 0.0-1.0.      \sa toHsv(), fromHsv(), isValid(), {QColor#The HSV Color     Model}{The HSV Color Model} */
end_comment
begin_function
DECL|function|fromHsvF
name|QColor
name|QColor
operator|::
name|fromHsvF
parameter_list|(
name|qreal
name|h
parameter_list|,
name|qreal
name|s
parameter_list|,
name|qreal
name|v
parameter_list|,
name|qreal
name|a
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|h
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|h
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|)
operator|&&
name|h
operator|!=
name|qreal
argument_list|(
operator|-
literal|1.0
argument_list|)
operator|)
operator|||
operator|(
name|s
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|s
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|)
operator|||
operator|(
name|v
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|v
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|)
operator|||
operator|(
name|a
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|a
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QColor::fromHsvF: HSV parameters out of range"
argument_list|)
expr_stmt|;
return|return
name|QColor
argument_list|()
return|;
block|}
name|QColor
name|color
decl_stmt|;
name|color
operator|.
name|cspec
operator|=
name|Hsv
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|alpha
operator|=
name|qRound
argument_list|(
name|a
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|hue
operator|=
name|h
operator|==
name|qreal
argument_list|(
operator|-
literal|1.0
argument_list|)
condition|?
name|USHRT_MAX
else|:
name|qRound
argument_list|(
name|h
operator|*
literal|36000
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|saturation
operator|=
name|qRound
argument_list|(
name|s
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|value
operator|=
name|qRound
argument_list|(
name|v
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|pad
operator|=
literal|0
expr_stmt|;
return|return
name|color
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.6      Static convenience function that returns a QColor constructed from the HSV     color values, \a h (hue), \a s (saturation), \a l (lightness), and \a a     (alpha-channel, i.e. transparency).      The value of \a s, \a l, and \a a must all be in the range 0-255; the value     of \a h must be in the range 0-359.      \sa toHsl(), fromHslF(), isValid() */
end_comment
begin_function
DECL|function|fromHsl
name|QColor
name|QColor
operator|::
name|fromHsl
parameter_list|(
name|int
name|h
parameter_list|,
name|int
name|s
parameter_list|,
name|int
name|l
parameter_list|,
name|int
name|a
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|h
operator|<
literal|0
operator|||
name|h
operator|>=
literal|360
operator|)
operator|&&
name|h
operator|!=
operator|-
literal|1
operator|)
operator|||
name|s
argument_list|<
literal|0
operator|||
name|s
argument_list|>
literal|255
operator|||
name|l
argument_list|<
literal|0
operator|||
name|l
argument_list|>
literal|255
operator|||
name|a
argument_list|<
literal|0
operator|||
name|a
argument_list|>
literal|255
condition|)
block|{
name|qWarning
argument_list|(
literal|"QColor::fromHsv: HSV parameters out of range"
argument_list|)
expr_stmt|;
return|return
name|QColor
argument_list|()
return|;
block|}
name|QColor
name|color
decl_stmt|;
name|color
operator|.
name|cspec
operator|=
name|Hsl
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|alpha
operator|=
name|a
operator|*
literal|0x101
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|hue
operator|=
name|h
operator|==
operator|-
literal|1
condition|?
name|USHRT_MAX
else|:
operator|(
name|h
operator|%
literal|360
operator|)
operator|*
literal|100
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|saturation
operator|=
name|s
operator|*
literal|0x101
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|lightness
operator|=
name|l
operator|*
literal|0x101
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|pad
operator|=
literal|0
expr_stmt|;
return|return
name|color
return|;
block|}
end_function
begin_comment
comment|/*!     \overload     \since 4.6      Static convenience function that returns a QColor constructed from the HSV     color values, \a h (hue), \a s (saturation), \a l (lightness), and \a a     (alpha-channel, i.e. transparency).      All the values must be in the range 0.0-1.0.      \sa toHsl(), fromHsl(), isValid() */
end_comment
begin_function
DECL|function|fromHslF
name|QColor
name|QColor
operator|::
name|fromHslF
parameter_list|(
name|qreal
name|h
parameter_list|,
name|qreal
name|s
parameter_list|,
name|qreal
name|l
parameter_list|,
name|qreal
name|a
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|h
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|h
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|)
operator|&&
name|h
operator|!=
name|qreal
argument_list|(
operator|-
literal|1.0
argument_list|)
operator|)
operator|||
operator|(
name|s
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|s
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|)
operator|||
operator|(
name|l
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|l
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|)
operator|||
operator|(
name|a
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|a
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QColor::fromHsvF: HSV parameters out of range"
argument_list|)
expr_stmt|;
return|return
name|QColor
argument_list|()
return|;
block|}
name|QColor
name|color
decl_stmt|;
name|color
operator|.
name|cspec
operator|=
name|Hsl
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|alpha
operator|=
name|qRound
argument_list|(
name|a
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|hue
operator|=
operator|(
name|h
operator|==
name|qreal
argument_list|(
operator|-
literal|1.0
argument_list|)
operator|)
condition|?
name|USHRT_MAX
else|:
name|qRound
argument_list|(
name|h
operator|*
literal|36000
argument_list|)
expr_stmt|;
if|if
condition|(
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|hue
operator|==
literal|36000
condition|)
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|hue
operator|=
literal|0
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|saturation
operator|=
name|qRound
argument_list|(
name|s
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|lightness
operator|=
name|qRound
argument_list|(
name|l
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|pad
operator|=
literal|0
expr_stmt|;
return|return
name|color
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the contents pointed to by \a c, \a m, \a y, \a k, and \a a, to the     cyan, magenta, yellow, black, and alpha-channel (transparency) components     of the color's CMYK value.      These components can be retrieved individually using the cyan(), magenta(),     yellow(), black() and alpha() functions.      \sa setCmyk(), {QColor#The CMYK Color Model}{The CMYK Color Model} */
end_comment
begin_function
DECL|function|getCmyk
name|void
name|QColor
operator|::
name|getCmyk
parameter_list|(
name|int
modifier|*
name|c
parameter_list|,
name|int
modifier|*
name|m
parameter_list|,
name|int
modifier|*
name|y
parameter_list|,
name|int
modifier|*
name|k
parameter_list|,
name|int
modifier|*
name|a
parameter_list|)
block|{
if|if
condition|(
operator|!
name|c
operator|||
operator|!
name|m
operator|||
operator|!
name|y
operator|||
operator|!
name|k
condition|)
return|return;
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Cmyk
condition|)
block|{
name|toCmyk
argument_list|()
operator|.
name|getCmyk
argument_list|(
name|c
argument_list|,
name|m
argument_list|,
name|y
argument_list|,
name|k
argument_list|,
name|a
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|c
operator|=
name|ct
operator|.
name|acmyk
operator|.
name|cyan
operator|>>
literal|8
expr_stmt|;
operator|*
name|m
operator|=
name|ct
operator|.
name|acmyk
operator|.
name|magenta
operator|>>
literal|8
expr_stmt|;
operator|*
name|y
operator|=
name|ct
operator|.
name|acmyk
operator|.
name|yellow
operator|>>
literal|8
expr_stmt|;
operator|*
name|k
operator|=
name|ct
operator|.
name|acmyk
operator|.
name|black
operator|>>
literal|8
expr_stmt|;
if|if
condition|(
name|a
condition|)
operator|*
name|a
operator|=
name|ct
operator|.
name|acmyk
operator|.
name|alpha
operator|>>
literal|8
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the contents pointed to by \a c, \a m, \a y, \a k, and \a a, to the     cyan, magenta, yellow, black, and alpha-channel (transparency) components     of the color's CMYK value.      These components can be retrieved individually using the cyanF(),     magentaF(), yellowF(), blackF() and alphaF() functions.      \sa setCmykF(), {QColor#The CMYK Color Model}{The CMYK Color Model} */
end_comment
begin_function
DECL|function|getCmykF
name|void
name|QColor
operator|::
name|getCmykF
parameter_list|(
name|qreal
modifier|*
name|c
parameter_list|,
name|qreal
modifier|*
name|m
parameter_list|,
name|qreal
modifier|*
name|y
parameter_list|,
name|qreal
modifier|*
name|k
parameter_list|,
name|qreal
modifier|*
name|a
parameter_list|)
block|{
if|if
condition|(
operator|!
name|c
operator|||
operator|!
name|m
operator|||
operator|!
name|y
operator|||
operator|!
name|k
condition|)
return|return;
if|if
condition|(
name|cspec
operator|!=
name|Invalid
operator|&&
name|cspec
operator|!=
name|Cmyk
condition|)
block|{
name|toCmyk
argument_list|()
operator|.
name|getCmykF
argument_list|(
name|c
argument_list|,
name|m
argument_list|,
name|y
argument_list|,
name|k
argument_list|,
name|a
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|c
operator|=
name|ct
operator|.
name|acmyk
operator|.
name|cyan
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
expr_stmt|;
operator|*
name|m
operator|=
name|ct
operator|.
name|acmyk
operator|.
name|magenta
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
expr_stmt|;
operator|*
name|y
operator|=
name|ct
operator|.
name|acmyk
operator|.
name|yellow
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
expr_stmt|;
operator|*
name|k
operator|=
name|ct
operator|.
name|acmyk
operator|.
name|black
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
condition|)
operator|*
name|a
operator|=
name|ct
operator|.
name|acmyk
operator|.
name|alpha
operator|/
name|qreal
argument_list|(
name|USHRT_MAX
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the color to CMYK values, \a c (cyan), \a m (magenta), \a y (yellow),     \a k (black), and \a a (alpha-channel, i.e. transparency).      All the values must be in the range 0-255.      \sa getCmyk(), setCmykF(), {QColor#The CMYK Color Model}{The     CMYK Color Model} */
end_comment
begin_function
DECL|function|setCmyk
name|void
name|QColor
operator|::
name|setCmyk
parameter_list|(
name|int
name|c
parameter_list|,
name|int
name|m
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|k
parameter_list|,
name|int
name|a
parameter_list|)
block|{
if|if
condition|(
name|c
argument_list|<
literal|0
operator|||
name|c
argument_list|>
literal|255
operator|||
name|m
argument_list|<
literal|0
operator|||
name|m
argument_list|>
literal|255
operator|||
name|y
argument_list|<
literal|0
operator|||
name|y
argument_list|>
literal|255
operator|||
name|k
argument_list|<
literal|0
operator|||
name|k
argument_list|>
literal|255
operator|||
name|a
argument_list|<
literal|0
operator|||
name|a
argument_list|>
literal|255
condition|)
block|{
name|qWarning
argument_list|(
literal|"QColor::setCmyk: CMYK parameters out of range"
argument_list|)
expr_stmt|;
return|return;
block|}
name|cspec
operator|=
name|Cmyk
expr_stmt|;
name|ct
operator|.
name|acmyk
operator|.
name|alpha
operator|=
name|a
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|acmyk
operator|.
name|cyan
operator|=
name|c
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|acmyk
operator|.
name|magenta
operator|=
name|m
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|acmyk
operator|.
name|yellow
operator|=
name|y
operator|*
literal|0x101
expr_stmt|;
name|ct
operator|.
name|acmyk
operator|.
name|black
operator|=
name|k
operator|*
literal|0x101
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the color to CMYK values, \a c (cyan), \a m (magenta), \a y (yellow),     \a k (black), and \a a (alpha-channel, i.e. transparency).      All the values must be in the range 0.0-1.0.      \sa getCmykF() setCmyk(), {QColor#The CMYK Color Model}{The CMYK     Color Model} */
end_comment
begin_function
DECL|function|setCmykF
name|void
name|QColor
operator|::
name|setCmykF
parameter_list|(
name|qreal
name|c
parameter_list|,
name|qreal
name|m
parameter_list|,
name|qreal
name|y
parameter_list|,
name|qreal
name|k
parameter_list|,
name|qreal
name|a
parameter_list|)
block|{
if|if
condition|(
name|c
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|c
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|||
name|m
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|m
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|||
name|y
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|y
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|||
name|k
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|k
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|||
name|a
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|a
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QColor::setCmykF: CMYK parameters out of range"
argument_list|)
expr_stmt|;
return|return;
block|}
name|cspec
operator|=
name|Cmyk
expr_stmt|;
name|ct
operator|.
name|acmyk
operator|.
name|alpha
operator|=
name|qRound
argument_list|(
name|a
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|ct
operator|.
name|acmyk
operator|.
name|cyan
operator|=
name|qRound
argument_list|(
name|c
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|ct
operator|.
name|acmyk
operator|.
name|magenta
operator|=
name|qRound
argument_list|(
name|m
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|ct
operator|.
name|acmyk
operator|.
name|yellow
operator|=
name|qRound
argument_list|(
name|y
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|ct
operator|.
name|acmyk
operator|.
name|black
operator|=
name|qRound
argument_list|(
name|k
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Static convenience function that returns a QColor constructed from the     given CMYK color values: \a c (cyan), \a m (magenta), \a y (yellow), \a k     (black), and \a a (alpha-channel, i.e. transparency).      All the values must be in the range 0-255.      \sa toCmyk(), fromCmykF(), isValid(), {QColor#The CMYK Color Model}{The CMYK     Color Model} */
end_comment
begin_function
DECL|function|fromCmyk
name|QColor
name|QColor
operator|::
name|fromCmyk
parameter_list|(
name|int
name|c
parameter_list|,
name|int
name|m
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|k
parameter_list|,
name|int
name|a
parameter_list|)
block|{
if|if
condition|(
name|c
argument_list|<
literal|0
operator|||
name|c
argument_list|>
literal|255
operator|||
name|m
argument_list|<
literal|0
operator|||
name|m
argument_list|>
literal|255
operator|||
name|y
argument_list|<
literal|0
operator|||
name|y
argument_list|>
literal|255
operator|||
name|k
argument_list|<
literal|0
operator|||
name|k
argument_list|>
literal|255
operator|||
name|a
argument_list|<
literal|0
operator|||
name|a
argument_list|>
literal|255
condition|)
block|{
name|qWarning
argument_list|(
literal|"QColor::fromCmyk: CMYK parameters out of range"
argument_list|)
expr_stmt|;
return|return
name|QColor
argument_list|()
return|;
block|}
name|QColor
name|color
decl_stmt|;
name|color
operator|.
name|cspec
operator|=
name|Cmyk
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|acmyk
operator|.
name|alpha
operator|=
name|a
operator|*
literal|0x101
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|acmyk
operator|.
name|cyan
operator|=
name|c
operator|*
literal|0x101
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|acmyk
operator|.
name|magenta
operator|=
name|m
operator|*
literal|0x101
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|acmyk
operator|.
name|yellow
operator|=
name|y
operator|*
literal|0x101
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|acmyk
operator|.
name|black
operator|=
name|k
operator|*
literal|0x101
expr_stmt|;
return|return
name|color
return|;
block|}
end_function
begin_comment
comment|/*!     \overload      Static convenience function that returns a QColor constructed from the     given CMYK color values: \a c (cyan), \a m (magenta), \a y (yellow), \a k     (black), and \a a (alpha-channel, i.e. transparency).      All the values must be in the range 0.0-1.0.      \sa toCmyk(), fromCmyk(), isValid(), {QColor#The CMYK Color     Model}{The CMYK Color Model} */
end_comment
begin_function
DECL|function|fromCmykF
name|QColor
name|QColor
operator|::
name|fromCmykF
parameter_list|(
name|qreal
name|c
parameter_list|,
name|qreal
name|m
parameter_list|,
name|qreal
name|y
parameter_list|,
name|qreal
name|k
parameter_list|,
name|qreal
name|a
parameter_list|)
block|{
if|if
condition|(
name|c
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|c
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|||
name|m
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|m
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|||
name|y
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|y
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|||
name|k
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|k
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|||
name|a
argument_list|<
name|qreal
operator|(
literal|0.0
operator|)
operator|||
name|a
argument_list|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QColor::fromCmykF: CMYK parameters out of range"
argument_list|)
expr_stmt|;
return|return
name|QColor
argument_list|()
return|;
block|}
name|QColor
name|color
decl_stmt|;
name|color
operator|.
name|cspec
operator|=
name|Cmyk
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|acmyk
operator|.
name|alpha
operator|=
name|qRound
argument_list|(
name|a
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|acmyk
operator|.
name|cyan
operator|=
name|qRound
argument_list|(
name|c
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|acmyk
operator|.
name|magenta
operator|=
name|qRound
argument_list|(
name|m
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|acmyk
operator|.
name|yellow
operator|=
name|qRound
argument_list|(
name|y
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|acmyk
operator|.
name|black
operator|=
name|qRound
argument_list|(
name|k
operator|*
name|USHRT_MAX
argument_list|)
expr_stmt|;
return|return
name|color
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QColor QColor::lighter(int factor) const     \since 4.3      Returns a lighter (or darker) color, but does not change this object.      If the \a factor is greater than 100, this functions returns a lighter     color. Setting \a factor to 150 returns a color that is 50% brighter. If     the \a factor is less than 100, the return color is darker, but we     recommend using the darker() function for this purpose. If the \a factor     is 0 or negative, the return value is unspecified.      The function converts the current RGB color to HSV, multiplies the value     (V) component by \a factor and converts the color back to RGB.      \sa darker(), isValid() */
end_comment
begin_comment
comment|/*!     \obsolete      Use lighter(\a factor) instead. */
end_comment
begin_function
DECL|function|light
name|QColor
name|QColor
operator|::
name|light
parameter_list|(
name|int
name|factor
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|factor
operator|<=
literal|0
condition|)
comment|// invalid lightness factor
return|return
operator|*
name|this
return|;
elseif|else
if|if
condition|(
name|factor
operator|<
literal|100
condition|)
comment|// makes color darker
return|return
name|darker
argument_list|(
literal|10000
operator|/
name|factor
argument_list|)
return|;
name|QColor
name|hsv
init|=
name|toHsv
argument_list|()
decl_stmt|;
name|int
name|s
init|=
name|hsv
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|saturation
decl_stmt|;
name|int
name|v
init|=
name|hsv
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|value
decl_stmt|;
name|v
operator|=
operator|(
name|factor
operator|*
name|v
operator|)
operator|/
literal|100
expr_stmt|;
if|if
condition|(
name|v
operator|>
name|USHRT_MAX
condition|)
block|{
comment|// overflow... adjust saturation
name|s
operator|-=
name|v
operator|-
name|USHRT_MAX
expr_stmt|;
if|if
condition|(
name|s
operator|<
literal|0
condition|)
name|s
operator|=
literal|0
expr_stmt|;
name|v
operator|=
name|USHRT_MAX
expr_stmt|;
block|}
name|hsv
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|saturation
operator|=
name|s
expr_stmt|;
name|hsv
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|value
operator|=
name|v
expr_stmt|;
comment|// convert back to same color spec as original color
return|return
name|hsv
operator|.
name|convertTo
argument_list|(
name|cspec
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QColor QColor::darker(int factor) const     \since 4.3      Returns a darker (or lighter) color, but does not change this object.      If the \a factor is greater than 100, this functions returns a darker     color. Setting \a factor to 300 returns a color that has one-third the     brightness. If the \a factor is less than 100, the return color is lighter,     but we recommend using the lighter() function for this purpose. If the     \a factor is 0 or negative, the return value is unspecified.      The function converts the current RGB color to HSV, divides the value (V)     component by \a factor and converts the color back to RGB.      \sa lighter(), isValid() */
end_comment
begin_comment
comment|/*!     \obsolete      Use darker(\a factor) instead. */
end_comment
begin_function
DECL|function|dark
name|QColor
name|QColor
operator|::
name|dark
parameter_list|(
name|int
name|factor
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|factor
operator|<=
literal|0
condition|)
comment|// invalid darkness factor
return|return
operator|*
name|this
return|;
elseif|else
if|if
condition|(
name|factor
operator|<
literal|100
condition|)
comment|// makes color lighter
return|return
name|lighter
argument_list|(
literal|10000
operator|/
name|factor
argument_list|)
return|;
name|QColor
name|hsv
init|=
name|toHsv
argument_list|()
decl_stmt|;
name|hsv
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|value
operator|=
operator|(
name|hsv
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|value
operator|*
literal|100
operator|)
operator|/
name|factor
expr_stmt|;
comment|// convert back to same color spec as original color
return|return
name|hsv
operator|.
name|convertTo
argument_list|(
name|cspec
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Assigns a copy of \a color to this color, and returns a reference to it. */
end_comment
begin_function
DECL|function|operator =
name|QColor
modifier|&
name|QColor
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|cspec
operator|=
name|color
operator|.
name|cspec
expr_stmt|;
name|ct
operator|.
name|argb
operator|=
name|color
operator|.
name|ct
operator|.
name|argb
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*! \overload     Assigns a copy of \a color and returns a reference to this color.  */
end_comment
begin_function
DECL|function|operator =
name|QColor
modifier|&
name|QColor
operator|::
name|operator
name|=
parameter_list|(
name|Qt
operator|::
name|GlobalColor
name|color
parameter_list|)
block|{
return|return
name|operator
name|=
argument_list|(
name|QColor
argument_list|(
name|color
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if this color has the same RGB and alpha values as \a color;     otherwise returns false. */
end_comment
begin_function
DECL|function|operator ==
name|bool
name|QColor
operator|::
name|operator
name|==
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|cspec
operator|==
name|Hsl
operator|&&
name|cspec
operator|==
name|color
operator|.
name|cspec
condition|)
block|{
return|return
operator|(
name|ct
operator|.
name|argb
operator|.
name|alpha
operator|==
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|alpha
operator|&&
operator|(
operator|(
operator|(
operator|(
name|ct
operator|.
name|ahsl
operator|.
name|hue
operator|%
literal|36000
operator|)
operator|==
operator|(
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|hue
operator|%
literal|36000
operator|)
operator|)
operator|)
operator|||
operator|(
name|ct
operator|.
name|ahsl
operator|.
name|hue
operator|==
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|hue
operator|)
operator|)
operator|&&
operator|(
name|qAbs
argument_list|(
name|ct
operator|.
name|ahsl
operator|.
name|saturation
operator|-
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|saturation
argument_list|)
operator|<
literal|50
operator|||
name|ct
operator|.
name|ahsl
operator|.
name|lightness
operator|==
literal|0
operator|||
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|lightness
operator|==
literal|0
operator|||
name|ct
operator|.
name|ahsl
operator|.
name|lightness
operator|==
name|USHRT_MAX
operator|||
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|lightness
operator|==
name|USHRT_MAX
operator|)
operator|&&
operator|(
name|qAbs
argument_list|(
name|ct
operator|.
name|ahsl
operator|.
name|lightness
operator|-
name|color
operator|.
name|ct
operator|.
name|ahsl
operator|.
name|lightness
argument_list|)
operator|)
operator|<
literal|50
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|cspec
operator|==
name|color
operator|.
name|cspec
operator|&&
name|ct
operator|.
name|argb
operator|.
name|alpha
operator|==
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|alpha
operator|&&
operator|(
operator|(
operator|(
name|cspec
operator|==
name|QColor
operator|::
name|Hsv
operator|)
operator|&&
operator|(
operator|(
name|ct
operator|.
name|ahsv
operator|.
name|hue
operator|%
literal|36000
operator|)
operator|==
operator|(
name|color
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|hue
operator|%
literal|36000
operator|)
operator|)
operator|)
operator|||
operator|(
name|ct
operator|.
name|ahsv
operator|.
name|hue
operator|==
name|color
operator|.
name|ct
operator|.
name|ahsv
operator|.
name|hue
operator|)
operator|)
operator|&&
name|ct
operator|.
name|argb
operator|.
name|green
operator|==
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|green
operator|&&
name|ct
operator|.
name|argb
operator|.
name|blue
operator|==
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|blue
operator|&&
name|ct
operator|.
name|argb
operator|.
name|pad
operator|==
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|pad
operator|)
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns true if this color has a different RGB and alpha values from     \a color; otherwise returns false. */
end_comment
begin_function
DECL|function|operator !=
name|bool
name|QColor
operator|::
name|operator
name|!=
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
specifier|const
block|{
return|return
operator|!
name|operator
name|==
argument_list|(
name|color
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the color as a QVariant */
end_comment
begin_function
DECL|function|operator QVariant
name|QColor
operator|::
name|operator
name|QVariant
parameter_list|()
specifier|const
block|{
return|return
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Color
argument_list|,
name|this
argument_list|)
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_comment
comment|/*!     Returns true if setNamedColor() is allowed to look up colors in the X11     color database. By default, this function returns false.      \note This function is only available on the X11 platform.      \sa setAllowX11ColorNames() */
end_comment
begin_function
DECL|function|allowX11ColorNames
name|bool
name|QColor
operator|::
name|allowX11ColorNames
parameter_list|()
block|{
return|return
operator|::
name|allowX11ColorNames
return|;
block|}
end_function
begin_comment
comment|/*!     Allow setNamedColor() to look up colors in the X11 color database if     \a enabled. By default, setNamedColor() does \e not look up colors in the     X11 color database.      \note This function is only available on the X11 platform.      \sa setNamedColor(), allowX11ColorNames() */
end_comment
begin_function
DECL|function|setAllowX11ColorNames
name|void
name|QColor
operator|::
name|setAllowX11ColorNames
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
operator|::
name|allowX11ColorNames
operator|=
name|enabled
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*! \internal      Marks the color as invalid and sets all components to zero (alpha is set     to fully opaque for compatibility with Qt 3). */
end_comment
begin_function
DECL|function|invalidate
name|void
name|QColor
operator|::
name|invalidate
parameter_list|()
block|{
name|cspec
operator|=
name|Invalid
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|alpha
operator|=
name|USHRT_MAX
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|red
operator|=
literal|0
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|green
operator|=
literal|0
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|blue
operator|=
literal|0
expr_stmt|;
name|ct
operator|.
name|argb
operator|.
name|pad
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   QColor stream functions  *****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|dbg
parameter_list|,
specifier|const
name|QColor
modifier|&
name|c
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_BROKEN_DEBUG_STREAM
if|if
condition|(
operator|!
name|c
operator|.
name|isValid
argument_list|()
condition|)
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QColor(Invalid)"
expr_stmt|;
elseif|else
if|if
condition|(
name|c
operator|.
name|spec
argument_list|()
operator|==
name|QColor
operator|::
name|Rgb
condition|)
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QColor(ARGB "
operator|<<
name|c
operator|.
name|alphaF
argument_list|()
operator|<<
literal|", "
operator|<<
name|c
operator|.
name|redF
argument_list|()
operator|<<
literal|", "
operator|<<
name|c
operator|.
name|greenF
argument_list|()
operator|<<
literal|", "
operator|<<
name|c
operator|.
name|blueF
argument_list|()
operator|<<
literal|')'
expr_stmt|;
elseif|else
if|if
condition|(
name|c
operator|.
name|spec
argument_list|()
operator|==
name|QColor
operator|::
name|Hsv
condition|)
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QColor(AHSV "
operator|<<
name|c
operator|.
name|alphaF
argument_list|()
operator|<<
literal|", "
operator|<<
name|c
operator|.
name|hueF
argument_list|()
operator|<<
literal|", "
operator|<<
name|c
operator|.
name|saturationF
argument_list|()
operator|<<
literal|", "
operator|<<
name|c
operator|.
name|valueF
argument_list|()
operator|<<
literal|')'
expr_stmt|;
elseif|else
if|if
condition|(
name|c
operator|.
name|spec
argument_list|()
operator|==
name|QColor
operator|::
name|Cmyk
condition|)
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QColor(ACMYK "
operator|<<
name|c
operator|.
name|alphaF
argument_list|()
operator|<<
literal|", "
operator|<<
name|c
operator|.
name|cyanF
argument_list|()
operator|<<
literal|", "
operator|<<
name|c
operator|.
name|magentaF
argument_list|()
operator|<<
literal|", "
operator|<<
name|c
operator|.
name|yellowF
argument_list|()
operator|<<
literal|", "
operator|<<
name|c
operator|.
name|blackF
argument_list|()
operator|<<
literal|')'
expr_stmt|;
elseif|else
if|if
condition|(
name|c
operator|.
name|spec
argument_list|()
operator|==
name|QColor
operator|::
name|Hsl
condition|)
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QColor(AHSL "
operator|<<
name|c
operator|.
name|alphaF
argument_list|()
operator|<<
literal|", "
operator|<<
name|c
operator|.
name|hslHueF
argument_list|()
operator|<<
literal|", "
operator|<<
name|c
operator|.
name|hslSaturationF
argument_list|()
operator|<<
literal|", "
operator|<<
name|c
operator|.
name|lightnessF
argument_list|()
operator|<<
literal|')'
expr_stmt|;
return|return
name|dbg
operator|.
name|space
argument_list|()
return|;
else|#
directive|else
name|qWarning
argument_list|(
literal|"This compiler doesn't support streaming QColor to QDebug"
argument_list|)
expr_stmt|;
return|return
name|dbg
return|;
name|Q_UNUSED
argument_list|(
name|c
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_comment
comment|/*!     \fn QDataStream&operator<<(QDataStream&stream, const QColor&color)     \relates QColor      Writes the \a color to the \a stream.      \sa {Serializing Qt Data Types} */
end_comment
begin_function
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
if|if
condition|(
name|stream
operator|.
name|version
argument_list|()
operator|<
literal|7
condition|)
block|{
if|if
condition|(
operator|!
name|color
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|stream
operator|<<
name|quint32
argument_list|(
literal|0x49000000
argument_list|)
return|;
name|quint32
name|p
init|=
operator|(
name|quint32
operator|)
name|color
operator|.
name|rgb
argument_list|()
decl_stmt|;
if|if
condition|(
name|stream
operator|.
name|version
argument_list|()
operator|==
literal|1
condition|)
comment|// Swap red and blue
name|p
operator|=
operator|(
operator|(
name|p
operator|<<
literal|16
operator|)
operator|&
literal|0xff0000
operator|)
operator||
operator|(
operator|(
name|p
operator|>>
literal|16
operator|)
operator|&
literal|0xff
operator|)
operator||
operator|(
name|p
operator|&
literal|0xff00ff00
operator|)
expr_stmt|;
return|return
name|stream
operator|<<
name|p
return|;
block|}
name|qint8
name|s
init|=
name|color
operator|.
name|cspec
decl_stmt|;
name|quint16
name|a
init|=
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|alpha
decl_stmt|;
name|quint16
name|r
init|=
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|red
decl_stmt|;
name|quint16
name|g
init|=
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|green
decl_stmt|;
name|quint16
name|b
init|=
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|blue
decl_stmt|;
name|quint16
name|p
init|=
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|pad
decl_stmt|;
name|stream
operator|<<
name|s
expr_stmt|;
name|stream
operator|<<
name|a
expr_stmt|;
name|stream
operator|<<
name|r
expr_stmt|;
name|stream
operator|<<
name|g
expr_stmt|;
name|stream
operator|<<
name|b
expr_stmt|;
name|stream
operator|<<
name|p
expr_stmt|;
return|return
name|stream
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QDataStream&operator>>(QDataStream&stream, QColor&color)     \relates QColor      Reads the \a color from the \a stream.      \sa {Serializing Qt Data Types} */
end_comment
begin_function
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|,
name|QColor
modifier|&
name|color
parameter_list|)
block|{
if|if
condition|(
name|stream
operator|.
name|version
argument_list|()
operator|<
literal|7
condition|)
block|{
name|quint32
name|p
decl_stmt|;
name|stream
operator|>>
name|p
expr_stmt|;
if|if
condition|(
name|p
operator|==
literal|0x49000000
condition|)
block|{
name|color
operator|.
name|invalidate
argument_list|()
expr_stmt|;
return|return
name|stream
return|;
block|}
if|if
condition|(
name|stream
operator|.
name|version
argument_list|()
operator|==
literal|1
condition|)
comment|// Swap red and blue
name|p
operator|=
operator|(
operator|(
name|p
operator|<<
literal|16
operator|)
operator|&
literal|0xff0000
operator|)
operator||
operator|(
operator|(
name|p
operator|>>
literal|16
operator|)
operator|&
literal|0xff
operator|)
operator||
operator|(
name|p
operator|&
literal|0xff00ff00
operator|)
expr_stmt|;
name|color
operator|.
name|setRgb
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
name|stream
return|;
block|}
name|qint8
name|s
decl_stmt|;
name|quint16
name|a
decl_stmt|,
name|r
decl_stmt|,
name|g
decl_stmt|,
name|b
decl_stmt|,
name|p
decl_stmt|;
name|stream
operator|>>
name|s
expr_stmt|;
name|stream
operator|>>
name|a
expr_stmt|;
name|stream
operator|>>
name|r
expr_stmt|;
name|stream
operator|>>
name|g
expr_stmt|;
name|stream
operator|>>
name|b
expr_stmt|;
name|stream
operator|>>
name|p
expr_stmt|;
name|color
operator|.
name|cspec
operator|=
name|QColor
operator|::
name|Spec
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|alpha
operator|=
name|a
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|red
operator|=
name|r
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|green
operator|=
name|g
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|blue
operator|=
name|b
expr_stmt|;
name|color
operator|.
name|ct
operator|.
name|argb
operator|.
name|pad
operator|=
name|p
expr_stmt|;
return|return
name|stream
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATASTREAM
end_comment
begin_comment
comment|/*****************************************************************************   QColor global functions (documentation only)  *****************************************************************************/
end_comment
begin_comment
comment|/*!     \fn int qRed(QRgb rgb)     \relates QColor      Returns the red component of the ARGB quadruplet \a rgb.      \sa qRgb(), QColor::red() */
end_comment
begin_comment
comment|/*!     \fn int qGreen(QRgb rgb)     \relates QColor      Returns the green component of the ARGB quadruplet \a rgb.      \sa qRgb(), QColor::green() */
end_comment
begin_comment
comment|/*!     \fn int qBlue(QRgb rgb)     \relates QColor      Returns the blue component of the ARGB quadruplet \a rgb.      \sa qRgb(), QColor::blue() */
end_comment
begin_comment
comment|/*!     \fn int qAlpha(QRgb rgba)     \relates QColor      Returns the alpha component of the ARGB quadruplet \a rgba.      \sa qRgb(), QColor::alpha() */
end_comment
begin_comment
comment|/*!     \fn QRgb qRgb(int r, int g, int b)     \relates QColor      Returns the ARGB quadruplet (255, \a{r}, \a{g}, \a{b}).      \sa qRgba(), qRed(), qGreen(), qBlue() */
end_comment
begin_comment
comment|/*!     \fn QRgb qRgba(int r, int g, int b, int a)     \relates QColor      Returns the ARGB quadruplet (\a{a}, \a{r}, \a{g}, \a{b}).      \sa qRgb(), qRed(), qGreen(), qBlue() */
end_comment
begin_comment
comment|/*!     \fn int qGray(int r, int g, int b)     \relates QColor      Returns a gray value (0 to 255) from the (\a r, \a g, \a b)     triplet.      The gray value is calculated using the formula (\a r * 11 + \a g * 16 +     \a b * 5)/32. */
end_comment
begin_comment
comment|/*!     \fn int qGray(QRgb rgb)     \overload     \relates QColor      Returns a gray value (0 to 255) from the given ARGB quadruplet \a rgb.      The gray value is calculated using the formula (R * 11 + G * 16 + B * 5)/32;     the alpha-channel is ignored. */
end_comment
begin_comment
comment|/*!     \fn QColor::QColor(int x, int y, int z, Spec colorSpec)      Use one of the other QColor constructors, or one of the static convenience     functions, instead. */
end_comment
begin_comment
comment|/*!     \fn QColor::rgb(int *r, int *g, int *b) const      Use getRgb() instead. */
end_comment
begin_comment
comment|/*!     \fn QColor::hsv(int *h, int *s, int *v) const      Use getHsv() instead. */
end_comment
begin_comment
comment|/*!     \fn QColor QColor::convertTo(Spec colorSpec) const      Creates a copy of \e this color in the format specified by \a colorSpec.      \sa spec(), toCmyk(), toHsv(), toRgb(), isValid() */
end_comment
begin_comment
comment|/*!     \typedef QRgb     \relates QColor      An ARGB quadruplet on the format #AARRGGBB, equivalent to an unsigned int.      The type also holds a value for the alpha-channel. The default alpha     channel is \c ff, i.e opaque. For more information, see the     \l{QColor#Alpha-Blended Drawing}{Alpha-Blended Drawing} section.      \sa QColor::rgb(), QColor::rgba() */
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
