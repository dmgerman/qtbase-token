begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qgraphicssystemfactory_p.h"
end_include
begin_include
include|#
directive|include
file|"qgraphicssystemplugin_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qfactoryloader_p.h"
end_include
begin_include
include|#
directive|include
file|"qmutex.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|"qgraphicssystem_raster_p.h"
end_include
begin_include
include|#
directive|include
file|"qgraphicssystem_runtime_p.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
name|Q_GLOBAL_STATIC_WITH_ARGS
argument_list|(
name|QFactoryLoader
argument_list|,
name|loader
argument_list|,
operator|(
name|QGraphicsSystemFactoryInterface_iid
operator|,
name|QLatin1String
argument_list|(
literal|"/graphicssystems"
argument_list|)
operator|,
name|Qt
operator|::
name|CaseInsensitive
operator|)
argument_list|)
endif|#
directive|endif
DECL|function|create
name|QGraphicsSystem
modifier|*
name|QGraphicsSystemFactory
operator|::
name|create
argument_list|(
specifier|const
name|QString
operator|&
name|key
argument_list|)
argument_list|{
name|QGraphicsSystem
operator|*
name|ret
operator|=
literal|0
argument_list|;
name|QString
name|system
operator|=
name|key
operator|.
name|toLower
argument_list|()
argument_list|;
if|#
directive|if
name|defined
argument_list|(
name|QT_GRAPHICSSYSTEM_OPENGL
argument_list|)
argument_list|if
operator|(
name|system
operator|.
name|isEmpty
argument_list|()
operator|)
block|{
name|system
operator|=
name|QLatin1String
argument_list|(
literal|"opengl"
argument_list|)
block|;     }
elif|#
directive|elif
name|defined
argument_list|(
name|QT_GRAPHICSSYSTEM_OPENVG
argument_list|)
if|if
condition|(
name|system
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|system
operator|=
name|QLatin1String
argument_list|(
literal|"openvg"
argument_list|)
block|;     }
end_decl_stmt
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|QT_GRAPHICSSYSTEM_RUNTIME
argument_list|)
end_elif
begin_if
if|if
condition|(
name|system
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|system
operator|=
name|QLatin1String
argument_list|(
literal|"runtime"
argument_list|)
expr_stmt|;
block|}
end_if
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|QT_GRAPHICSSYSTEM_RASTER
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
operator|||
operator|(
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_MAC_USE_COCOA
argument_list|)
operator|)
end_elif
begin_if
if|if
condition|(
name|system
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|system
operator|=
name|QLatin1String
argument_list|(
literal|"raster"
argument_list|)
expr_stmt|;
block|}
end_if
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QApplicationPrivate
operator|::
name|graphics_system_name
operator|=
name|system
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|system
operator|==
name|QLatin1String
argument_list|(
literal|"raster"
argument_list|)
condition|)
return|return
operator|new
name|QRasterGraphicsSystem
return|;
elseif|else
if|if
condition|(
name|system
operator|==
name|QLatin1String
argument_list|(
literal|"runtime"
argument_list|)
condition|)
return|return
operator|new
name|QRuntimeGraphicsSystem
return|;
elseif|else
if|if
condition|(
name|system
operator|.
name|isEmpty
argument_list|()
operator|||
name|system
operator|==
name|QLatin1String
argument_list|(
literal|"native"
argument_list|)
condition|)
return|return
literal|0
return|;
end_if
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
end_ifndef
begin_if
if|if
condition|(
operator|!
name|ret
condition|)
block|{
if|if
condition|(
name|QGraphicsSystemFactoryInterface
modifier|*
name|factory
init|=
name|qobject_cast
argument_list|<
name|QGraphicsSystemFactoryInterface
operator|*
argument_list|>
argument_list|(
name|loader
argument_list|()
operator|->
name|instance
argument_list|(
name|system
argument_list|)
argument_list|)
condition|)
name|ret
operator|=
name|factory
operator|->
name|create
argument_list|(
name|system
argument_list|)
expr_stmt|;
block|}
end_if
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|if
condition|(
operator|!
name|ret
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"Unable to load graphicssystem"
operator|<<
name|system
expr_stmt|;
end_if
begin_return
return|return
name|ret
return|;
end_return
begin_comment
unit|}
comment|/*!     Returns the list of valid keys, i.e. the keys this factory can     create styles for.      \sa create() */
end_comment
begin_macro
unit|QStringList
DECL|function|keys
name|QGraphicsSystemFactory
end_macro
begin_expr_stmt
DECL|function|keys
operator|::
name|keys
operator|(
operator|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
name|QStringList
name|list
operator|=
name|loader
argument_list|()
operator|->
name|keys
argument_list|()
block|;
else|#
directive|else
name|QStringList
name|list
block|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|list
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"Raster"
argument_list|)
argument_list|)
condition|)
name|list
operator|<<
name|QLatin1String
argument_list|(
literal|"raster"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|list
return|;
end_return
unit|}  QT_END_NAMESPACE
end_unit
