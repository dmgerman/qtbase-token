begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<private/qprintengine_qws_p.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
end_ifndef
begin_include
include|#
directive|include
file|<private/qpaintengine_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<qimage.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QCopChannel>
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
DECL|macro|MM
define|#
directive|define
name|MM
parameter_list|(
name|n
parameter_list|)
value|int((n * 720 + 127) / 254)
DECL|macro|IN
define|#
directive|define
name|IN
parameter_list|(
name|n
parameter_list|)
value|int(n * 72)
specifier|extern
name|QSizeF
name|qt_paperSizeToQSizeF
parameter_list|(
name|QPrinter
operator|::
name|PaperSize
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_constructor
DECL|function|QtopiaPrintEngine
name|QtopiaPrintEngine
operator|::
name|QtopiaPrintEngine
parameter_list|(
name|QPrinter
operator|::
name|PrinterMode
name|mode
parameter_list|)
member_init_list|:
name|QPaintEngine
argument_list|(
operator|*
operator|(
operator|new
name|QtopiaPrintEnginePrivate
argument_list|(
name|mode
argument_list|)
operator|)
argument_list|)
block|{
name|d_func
argument_list|()
operator|->
name|initialize
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|begin
name|bool
name|QtopiaPrintEngine
operator|::
name|begin
parameter_list|(
name|QPaintDevice
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QtopiaPrintEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|d
operator|->
name|printerState
operator|==
name|QPrinter
operator|::
name|Idle
argument_list|,
literal|"QtopiaPrintEngine"
argument_list|,
literal|"printer already active"
argument_list|)
expr_stmt|;
comment|// Create a new off-screen monochrome image to handle the drawing process.
name|QSize
name|size
init|=
name|paperRect
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|pageImage
condition|)
operator|delete
name|d
operator|->
name|pageImage
expr_stmt|;
name|d
operator|->
name|pageImage
operator|=
operator|new
name|QImage
argument_list|(
name|size
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|pageImage
operator|)
condition|)
return|return
literal|false
return|;
comment|// Recreate the paint engine on the new image.
operator|delete
name|d
operator|->
name|_paintEngine
expr_stmt|;
name|d
operator|->
name|_paintEngine
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|paintEngine
argument_list|()
operator|->
name|state
operator|=
name|state
expr_stmt|;
comment|// Begin the paint process on the image.
if|if
condition|(
operator|!
name|d
operator|->
name|paintEngine
argument_list|()
operator|->
name|begin
argument_list|(
name|d
operator|->
name|pageImage
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// Clear the first page to all-white.
name|clearPage
argument_list|()
expr_stmt|;
comment|// Clear the print buffer and output the image header.
name|d
operator|->
name|buffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|writeG3FaxHeader
argument_list|()
expr_stmt|;
comment|// The print engine is currently active.
name|d
operator|->
name|printerState
operator|=
name|QPrinter
operator|::
name|Active
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|end
name|bool
name|QtopiaPrintEngine
operator|::
name|end
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QtopiaPrintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|paintEngine
argument_list|()
operator|->
name|end
argument_list|()
expr_stmt|;
comment|// Flush the last page.
name|flushPage
argument_list|()
expr_stmt|;
comment|// Output the fax data to a file (TODO: send to the print queuing daemon).
name|QString
name|filename
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|outputFileName
operator|.
name|isEmpty
argument_list|()
condition|)
name|filename
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"HOME"
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"/Documents/"
argument_list|)
operator|+
name|d
operator|->
name|outputFileName
expr_stmt|;
else|else
name|filename
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"HOME"
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"/tmp/qwsfax.tiff"
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_OutputFileName
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
condition|)
block|{
name|qDebug
argument_list|(
literal|"Failed to open %s for printer output"
argument_list|,
name|filename
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|.
name|write
argument_list|(
name|d
operator|->
name|buffer
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Free up the memory for the image buffer.
name|d
operator|->
name|buffer
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Finalize the print job.
name|d
operator|->
name|printerState
operator|=
name|QPrinter
operator|::
name|Idle
expr_stmt|;
comment|// call qcop service
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<=
name|QPrintEngine
operator|::
name|PPK_Duplex
condition|;
name|x
operator|++
control|)
name|map
operator|.
name|insert
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|x
argument_list|)
argument_list|,
name|property
argument_list|(
call|(
name|QPrintEngine
operator|::
name|PrintEnginePropertyKey
call|)
argument_list|(
name|x
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVariant
name|variant
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|QByteArray
name|data
decl_stmt|;
name|QDataStream
name|out
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|out
operator|<<
name|variant
expr_stmt|;
name|QCopChannel
operator|::
name|send
argument_list|(
name|QLatin1String
argument_list|(
literal|"QPE/Service/Print"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"print(QVariant)"
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|paintEngine
name|QPaintEngine
modifier|*
name|QtopiaPrintEngine
operator|::
name|paintEngine
parameter_list|()
specifier|const
block|{
return|return
cast|const_cast
argument_list|<
name|QtopiaPrintEnginePrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
operator|->
name|paintEngine
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|drawPixmap
name|void
name|QtopiaPrintEngine
operator|::
name|drawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QtopiaPrintEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|printerState
operator|==
name|QPrinter
operator|::
name|Active
argument_list|)
expr_stmt|;
name|d
operator|->
name|paintEngine
argument_list|()
operator|->
name|drawPixmap
argument_list|(
name|r
argument_list|,
name|pm
argument_list|,
name|sr
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawTextItem
name|void
name|QtopiaPrintEngine
operator|::
name|drawTextItem
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QTextItem
modifier|&
name|ti
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QtopiaPrintEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|printerState
operator|==
name|QPrinter
operator|::
name|Active
argument_list|)
expr_stmt|;
name|d
operator|->
name|paintEngine
argument_list|()
operator|->
name|drawTextItem
argument_list|(
name|p
argument_list|,
name|ti
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateState
name|void
name|QtopiaPrintEngine
operator|::
name|updateState
parameter_list|(
specifier|const
name|QPaintEngineState
modifier|&
name|state
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QtopiaPrintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|paintEngine
argument_list|()
operator|->
name|updateState
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paperRect
name|QRect
name|QtopiaPrintEngine
operator|::
name|paperRect
parameter_list|()
specifier|const
block|{
name|QSizeF
name|s
init|=
name|qt_paperSizeToQSizeF
argument_list|(
name|d_func
argument_list|()
operator|->
name|paperSize
argument_list|)
decl_stmt|;
name|s
operator|.
name|rwidth
argument_list|()
operator|=
name|MM
argument_list|(
name|s
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|rheight
argument_list|()
operator|=
name|MM
argument_list|(
name|s
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|w
init|=
name|qRound
argument_list|(
name|s
operator|.
name|width
argument_list|()
operator|*
name|d_func
argument_list|()
operator|->
name|resolution
operator|/
literal|72.
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|qRound
argument_list|(
name|s
operator|.
name|height
argument_list|()
operator|*
name|d_func
argument_list|()
operator|->
name|resolution
operator|/
literal|72.
argument_list|)
decl_stmt|;
if|if
condition|(
name|d_func
argument_list|()
operator|->
name|orientation
operator|==
name|QPrinter
operator|::
name|Portrait
condition|)
return|return
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
return|;
else|else
return|return
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|h
argument_list|,
name|w
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|pageRect
name|QRect
name|QtopiaPrintEngine
operator|::
name|pageRect
parameter_list|()
specifier|const
block|{
name|QRect
name|r
init|=
name|paperRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|d_func
argument_list|()
operator|->
name|fullPage
condition|)
return|return
name|r
return|;
comment|// would be nice to get better margins than this.
return|return
name|QRect
argument_list|(
name|d_func
argument_list|()
operator|->
name|resolution
operator|/
literal|3
argument_list|,
name|d_func
argument_list|()
operator|->
name|resolution
operator|/
literal|3
argument_list|,
name|r
operator|.
name|width
argument_list|()
operator|-
literal|2
operator|*
name|d_func
argument_list|()
operator|->
name|resolution
operator|/
literal|3
argument_list|,
name|r
operator|.
name|height
argument_list|()
operator|-
literal|2
operator|*
name|d_func
argument_list|()
operator|->
name|resolution
operator|/
literal|3
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|newPage
name|bool
name|QtopiaPrintEngine
operator|::
name|newPage
parameter_list|()
block|{
name|flushPage
argument_list|()
expr_stmt|;
name|clearPage
argument_list|()
expr_stmt|;
operator|++
operator|(
name|d_func
argument_list|()
operator|->
name|pageNumber
operator|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|abort
name|bool
name|QtopiaPrintEngine
operator|::
name|abort
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|printerState
name|QPrinter
operator|::
name|PrinterState
name|QtopiaPrintEngine
operator|::
name|printerState
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|printerState
return|;
block|}
end_function
begin_function
DECL|function|metric
name|int
name|QtopiaPrintEngine
operator|::
name|metric
parameter_list|(
name|QPaintDevice
operator|::
name|PaintDeviceMetric
name|metricType
parameter_list|)
specifier|const
block|{
name|int
name|val
decl_stmt|;
name|QRect
name|r
init|=
name|d_func
argument_list|()
operator|->
name|fullPage
condition|?
name|paperRect
argument_list|()
else|:
name|pageRect
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|metricType
condition|)
block|{
case|case
name|QPaintDevice
operator|::
name|PdmWidth
case|:
name|val
operator|=
name|r
operator|.
name|width
argument_list|()
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmHeight
case|:
name|val
operator|=
name|r
operator|.
name|height
argument_list|()
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmDpiX
case|:
name|val
operator|=
name|d_func
argument_list|()
operator|->
name|resolution
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmDpiY
case|:
name|val
operator|=
name|d_func
argument_list|()
operator|->
name|resolution
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmPhysicalDpiX
case|:
case|case
name|QPaintDevice
operator|::
name|PdmPhysicalDpiY
case|:
name|val
operator|=
name|QT_QWS_PRINTER_DEFAULT_DPI
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmWidthMM
case|:
name|val
operator|=
name|qRound
argument_list|(
name|r
operator|.
name|width
argument_list|()
operator|*
literal|25.4
operator|/
name|d_func
argument_list|()
operator|->
name|resolution
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmHeightMM
case|:
name|val
operator|=
name|qRound
argument_list|(
name|r
operator|.
name|height
argument_list|()
operator|*
literal|25.4
operator|/
name|d_func
argument_list|()
operator|->
name|resolution
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmNumColors
case|:
name|val
operator|=
literal|2
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmDepth
case|:
name|val
operator|=
literal|1
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"QtopiaPrintEngine::metric: Invalid metric command"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|val
return|;
block|}
end_function
begin_function
DECL|function|property
name|QVariant
name|QtopiaPrintEngine
operator|::
name|property
parameter_list|(
name|PrintEnginePropertyKey
name|key
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QtopiaPrintEngine
argument_list|)
expr_stmt|;
name|QVariant
name|ret
decl_stmt|;
switch|switch
condition|(
name|key
condition|)
block|{
case|case
name|PPK_CollateCopies
case|:
name|ret
operator|=
name|d
operator|->
name|collateCopies
expr_stmt|;
break|break;
case|case
name|PPK_ColorMode
case|:
name|ret
operator|=
name|d
operator|->
name|colorMode
expr_stmt|;
break|break;
case|case
name|PPK_Creator
case|:
name|ret
operator|=
name|d
operator|->
name|creator
expr_stmt|;
break|break;
case|case
name|PPK_DocumentName
case|:
name|ret
operator|=
name|d
operator|->
name|docName
expr_stmt|;
break|break;
case|case
name|PPK_FullPage
case|:
name|ret
operator|=
name|d
operator|->
name|fullPage
expr_stmt|;
break|break;
case|case
name|PPK_CopyCount
case|:
comment|// fallthrough
case|case
name|PPK_NumberOfCopies
case|:
name|ret
operator|=
name|d
operator|->
name|numCopies
expr_stmt|;
break|break;
case|case
name|PPK_SupportsMultipleCopies
case|:
name|ret
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|PPK_Orientation
case|:
name|ret
operator|=
name|d
operator|->
name|orientation
expr_stmt|;
break|break;
case|case
name|PPK_OutputFileName
case|:
name|ret
operator|=
name|d
operator|->
name|outputFileName
expr_stmt|;
break|break;
case|case
name|PPK_PageOrder
case|:
name|ret
operator|=
name|d
operator|->
name|pageOrder
expr_stmt|;
break|break;
case|case
name|PPK_PageRect
case|:
name|ret
operator|=
name|pageRect
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_PaperSize
case|:
name|ret
operator|=
name|d
operator|->
name|paperSize
expr_stmt|;
break|break;
case|case
name|PPK_PaperRect
case|:
name|ret
operator|=
name|paperRect
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_PaperSource
case|:
name|ret
operator|=
name|d
operator|->
name|paperSource
expr_stmt|;
break|break;
case|case
name|PPK_PrinterName
case|:
name|ret
operator|=
name|d
operator|->
name|printerName
expr_stmt|;
break|break;
case|case
name|PPK_PrinterProgram
case|:
name|ret
operator|=
name|d
operator|->
name|printProgram
expr_stmt|;
break|break;
case|case
name|PPK_Resolution
case|:
name|ret
operator|=
name|d
operator|->
name|resolution
expr_stmt|;
break|break;
case|case
name|PPK_SupportedResolutions
case|:
name|ret
operator|=
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QT_QWS_PRINTER_DEFAULT_DPI
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|setProperty
name|void
name|QtopiaPrintEngine
operator|::
name|setProperty
parameter_list|(
name|PrintEnginePropertyKey
name|key
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QtopiaPrintEngine
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|key
condition|)
block|{
case|case
name|PPK_CollateCopies
case|:
name|d
operator|->
name|collateCopies
operator|=
name|value
operator|.
name|toBool
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_ColorMode
case|:
name|d
operator|->
name|colorMode
operator|=
name|QPrinter
operator|::
name|ColorMode
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PPK_Creator
case|:
name|d
operator|->
name|creator
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_DocumentName
case|:
name|d
operator|->
name|docName
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_FullPage
case|:
name|d
operator|->
name|fullPage
operator|=
name|value
operator|.
name|toBool
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_CopyCount
case|:
comment|// fallthrough
case|case
name|PPK_NumberOfCopies
case|:
name|d
operator|->
name|numCopies
operator|=
name|value
operator|.
name|toInt
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_Orientation
case|:
name|d
operator|->
name|orientation
operator|=
name|QPrinter
operator|::
name|Orientation
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PPK_OutputFileName
case|:
name|d
operator|->
name|outputFileName
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_PageOrder
case|:
name|d
operator|->
name|pageOrder
operator|=
name|QPrinter
operator|::
name|PageOrder
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PPK_PaperSize
case|:
name|d
operator|->
name|paperSize
operator|=
name|QPrinter
operator|::
name|PaperSize
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PPK_PaperSource
case|:
name|d
operator|->
name|paperSource
operator|=
name|QPrinter
operator|::
name|PaperSource
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
case|case
name|PPK_PrinterName
case|:
name|d
operator|->
name|printerName
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_PrinterProgram
case|:
name|d
operator|->
name|printProgram
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_Resolution
case|:
name|d
operator|->
name|resolution
operator|=
name|value
operator|.
name|toInt
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
end_function
begin_function
DECL|function|clearPage
name|void
name|QtopiaPrintEngine
operator|::
name|clearPage
parameter_list|()
block|{
name|d_func
argument_list|()
operator|->
name|pageImage
operator|->
name|fill
argument_list|(
name|QColor
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|flushPage
name|void
name|QtopiaPrintEngine
operator|::
name|flushPage
parameter_list|()
block|{
name|d_func
argument_list|()
operator|->
name|writeG3FaxPage
argument_list|()
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~QtopiaPrintEnginePrivate
name|QtopiaPrintEnginePrivate
operator|::
name|~
name|QtopiaPrintEnginePrivate
parameter_list|()
block|{
if|if
condition|(
name|pageImage
condition|)
operator|delete
name|pageImage
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|initialize
name|void
name|QtopiaPrintEnginePrivate
operator|::
name|initialize
parameter_list|()
block|{
name|_paintEngine
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintEngine
name|QPaintEngine
modifier|*
name|QtopiaPrintEnginePrivate
operator|::
name|paintEngine
parameter_list|()
block|{
if|if
condition|(
operator|!
name|_paintEngine
condition|)
name|_paintEngine
operator|=
operator|new
name|QRasterPaintEngine
argument_list|(
name|pageImage
argument_list|)
expr_stmt|;
return|return
name|_paintEngine
return|;
block|}
end_function
begin_function
DECL|function|writeG3FaxHeader
name|void
name|QtopiaPrintEnginePrivate
operator|::
name|writeG3FaxHeader
parameter_list|()
block|{
comment|// Write the TIFF file magic number (little-endian TIFF).
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
literal|'I'
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
literal|'I'
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
literal|42
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
literal|0
argument_list|)
expr_stmt|;
comment|// Leave a place-holder for the IFD offset of the first page.
name|ifdPatch
operator|=
name|buffer
operator|.
name|size
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|int
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Tag values, from RFC 2301.
end_comment
begin_define
DECL|macro|TIFF_IFD_NEW_SUB_FILE_TYPE
define|#
directive|define
name|TIFF_IFD_NEW_SUB_FILE_TYPE
value|254
end_define
begin_define
DECL|macro|TIFF_IFD_IMAGE_WIDTH
define|#
directive|define
name|TIFF_IFD_IMAGE_WIDTH
value|256
end_define
begin_define
DECL|macro|TIFF_IFD_IMAGE_LENGTH
define|#
directive|define
name|TIFF_IFD_IMAGE_LENGTH
value|257
end_define
begin_define
DECL|macro|TIFF_IFD_BITS_PER_SAMPLE
define|#
directive|define
name|TIFF_IFD_BITS_PER_SAMPLE
value|258
end_define
begin_define
DECL|macro|TIFF_IFD_COMPRESSION
define|#
directive|define
name|TIFF_IFD_COMPRESSION
value|259
end_define
begin_define
DECL|macro|TIFF_IFD_PHOTOMETRIC_INTERP
define|#
directive|define
name|TIFF_IFD_PHOTOMETRIC_INTERP
value|262
end_define
begin_define
DECL|macro|TIFF_IFD_FILL_ORDER
define|#
directive|define
name|TIFF_IFD_FILL_ORDER
value|266
end_define
begin_define
DECL|macro|TIFF_IFD_STRIP_OFFSETS
define|#
directive|define
name|TIFF_IFD_STRIP_OFFSETS
value|273
end_define
begin_define
DECL|macro|TIFF_IFD_ORIENTATION
define|#
directive|define
name|TIFF_IFD_ORIENTATION
value|274
end_define
begin_define
DECL|macro|TIFF_IFD_SAMPLES_PER_PIXEL
define|#
directive|define
name|TIFF_IFD_SAMPLES_PER_PIXEL
value|277
end_define
begin_define
DECL|macro|TIFF_IFD_ROWS_PER_STRIP
define|#
directive|define
name|TIFF_IFD_ROWS_PER_STRIP
value|278
end_define
begin_define
DECL|macro|TIFF_IFD_STRIP_BYTE_COUNTS
define|#
directive|define
name|TIFF_IFD_STRIP_BYTE_COUNTS
value|279
end_define
begin_define
DECL|macro|TIFF_IFD_X_RESOLUTION
define|#
directive|define
name|TIFF_IFD_X_RESOLUTION
value|282
end_define
begin_define
DECL|macro|TIFF_IFD_Y_RESOLUTION
define|#
directive|define
name|TIFF_IFD_Y_RESOLUTION
value|283
end_define
begin_define
DECL|macro|TIFF_IFD_PLANAR_CONFIG
define|#
directive|define
name|TIFF_IFD_PLANAR_CONFIG
value|284
end_define
begin_define
DECL|macro|TIFF_IFD_T4_OPTIONS
define|#
directive|define
name|TIFF_IFD_T4_OPTIONS
value|292
end_define
begin_define
DECL|macro|TIFF_IFD_RESOLUTION_UNIT
define|#
directive|define
name|TIFF_IFD_RESOLUTION_UNIT
value|296
end_define
begin_define
DECL|macro|TIFF_IFD_PAGE_NUMBER
define|#
directive|define
name|TIFF_IFD_PAGE_NUMBER
value|297
end_define
begin_define
DECL|macro|TIFF_IFD_CLEAN_FAX_DATA
define|#
directive|define
name|TIFF_IFD_CLEAN_FAX_DATA
value|327
end_define
begin_comment
comment|// IFD type values.
end_comment
begin_define
DECL|macro|TIFF_TYPE_SHORT
define|#
directive|define
name|TIFF_TYPE_SHORT
value|3
end_define
begin_define
DECL|macro|TIFF_TYPE_LONG
define|#
directive|define
name|TIFF_TYPE_LONG
value|4
end_define
begin_define
DECL|macro|TIFF_TYPE_RATIONAL
define|#
directive|define
name|TIFF_TYPE_RATIONAL
value|5
end_define
begin_comment
comment|// Construct a SHORT pair from two values.
end_comment
begin_define
DECL|macro|TIFF_SHORT_PAIR
define|#
directive|define
name|TIFF_SHORT_PAIR
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|(((a)& 0xFFFF) | ((b)<< 16))
end_define
begin_comment
comment|// Width of a FAX page in pixels, in the baseline specification from RFC 2301.
end_comment
begin_comment
comment|// This must be hard-wired, as per the RFC.  We truncate any pixels that
end_comment
begin_comment
comment|// are beyond this limit, or pad lines to reach this limit.
end_comment
begin_define
DECL|macro|TIFF_FAX_WIDTH
define|#
directive|define
name|TIFF_FAX_WIDTH
value|1728
end_define
begin_function
DECL|function|writeG3FaxPage
name|void
name|QtopiaPrintEnginePrivate
operator|::
name|writeG3FaxPage
parameter_list|()
block|{
comment|// Pad the image file to a word boundary, just in case.
name|buffer
operator|.
name|pad
argument_list|()
expr_stmt|;
comment|// Back-patch the IFD link for the previous page.
name|buffer
operator|.
name|patch
argument_list|(
name|ifdPatch
argument_list|,
name|buffer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Output the contents of the IFD for this page (these must be
comment|// in ascending order of tag value).
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|short
operator|)
literal|19
argument_list|)
expr_stmt|;
comment|// Number of IFD entries.
name|writeG3IFDEntry
argument_list|(
name|TIFF_IFD_NEW_SUB_FILE_TYPE
argument_list|,
name|TIFF_TYPE_LONG
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|writeG3IFDEntry
argument_list|(
name|TIFF_IFD_IMAGE_WIDTH
argument_list|,
name|TIFF_TYPE_LONG
argument_list|,
literal|1
argument_list|,
name|TIFF_FAX_WIDTH
argument_list|)
expr_stmt|;
name|writeG3IFDEntry
argument_list|(
name|TIFF_IFD_IMAGE_LENGTH
argument_list|,
name|TIFF_TYPE_LONG
argument_list|,
literal|1
argument_list|,
name|pageImage
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|writeG3IFDEntry
argument_list|(
name|TIFF_IFD_BITS_PER_SAMPLE
argument_list|,
name|TIFF_TYPE_SHORT
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|writeG3IFDEntry
argument_list|(
name|TIFF_IFD_COMPRESSION
argument_list|,
name|TIFF_TYPE_SHORT
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|writeG3IFDEntry
argument_list|(
name|TIFF_IFD_PHOTOMETRIC_INTERP
argument_list|,
name|TIFF_TYPE_SHORT
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writeG3IFDEntry
argument_list|(
name|TIFF_IFD_FILL_ORDER
argument_list|,
name|TIFF_TYPE_SHORT
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|int
name|stripOffsets
init|=
name|writeG3IFDEntry
argument_list|(
name|TIFF_IFD_STRIP_OFFSETS
argument_list|,
name|TIFF_TYPE_LONG
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|writeG3IFDEntry
argument_list|(
name|TIFF_IFD_ORIENTATION
argument_list|,
name|TIFF_TYPE_SHORT
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|writeG3IFDEntry
argument_list|(
name|TIFF_IFD_SAMPLES_PER_PIXEL
argument_list|,
name|TIFF_TYPE_SHORT
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|writeG3IFDEntry
argument_list|(
name|TIFF_IFD_ROWS_PER_STRIP
argument_list|,
name|TIFF_TYPE_LONG
argument_list|,
literal|1
argument_list|,
name|pageImage
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|stripBytes
init|=
name|writeG3IFDEntry
argument_list|(
name|TIFF_IFD_STRIP_BYTE_COUNTS
argument_list|,
name|TIFF_TYPE_LONG
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|xres
init|=
name|writeG3IFDEntry
argument_list|(
name|TIFF_IFD_X_RESOLUTION
argument_list|,
name|TIFF_TYPE_RATIONAL
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|yres
init|=
name|writeG3IFDEntry
argument_list|(
name|TIFF_IFD_Y_RESOLUTION
argument_list|,
name|TIFF_TYPE_RATIONAL
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|writeG3IFDEntry
argument_list|(
name|TIFF_IFD_PLANAR_CONFIG
argument_list|,
name|TIFF_TYPE_SHORT
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|writeG3IFDEntry
argument_list|(
name|TIFF_IFD_T4_OPTIONS
argument_list|,
name|TIFF_TYPE_LONG
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|writeG3IFDEntry
argument_list|(
name|TIFF_IFD_RESOLUTION_UNIT
argument_list|,
name|TIFF_TYPE_SHORT
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|writeG3IFDEntry
argument_list|(
name|TIFF_IFD_PAGE_NUMBER
argument_list|,
name|TIFF_TYPE_SHORT
argument_list|,
literal|2
argument_list|,
name|TIFF_SHORT_PAIR
argument_list|(
name|pageNumber
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|writeG3IFDEntry
argument_list|(
name|TIFF_IFD_CLEAN_FAX_DATA
argument_list|,
name|TIFF_TYPE_SHORT
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Leave a place-holder for the IFD offset of the next page.
name|ifdPatch
operator|=
name|buffer
operator|.
name|size
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|int
operator|)
literal|0
argument_list|)
expr_stmt|;
comment|// Output the X and Y resolutions, as rational values (usually 200/1).
name|buffer
operator|.
name|patch
argument_list|(
name|xres
argument_list|,
name|buffer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|int
operator|)
name|resolution
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|patch
argument_list|(
name|yres
argument_list|,
name|buffer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|int
operator|)
name|resolution
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|// We are now at the start of the image data - set the strip offset.
name|int
name|start
init|=
name|buffer
operator|.
name|size
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|patch
argument_list|(
name|stripOffsets
argument_list|,
name|start
argument_list|)
expr_stmt|;
comment|// Output the image data.
name|int
name|width
init|=
name|pageImage
operator|->
name|width
argument_list|()
decl_stmt|;
name|QImage
operator|::
name|Format
name|imageFormat
init|=
name|pageImage
operator|->
name|format
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|pageImage
operator|->
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
block|{
name|unsigned
name|char
modifier|*
name|scan
init|=
name|pageImage
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|int
name|prev
decl_stmt|,
name|pixel
decl_stmt|,
name|len
decl_stmt|;
name|writeG3EOL
argument_list|()
expr_stmt|;
name|prev
operator|=
literal|0
expr_stmt|;
name|len
operator|=
literal|0
expr_stmt|;
name|uint
name|currentColor
init|=
name|qRgb
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|)
decl_stmt|;
comment|// start with white
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
operator|&&
name|x
operator|<
name|TIFF_FAX_WIDTH
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
name|imageFormat
operator|==
name|QImage
operator|::
name|Format_RGB32
condition|)
block|{
comment|// read color of the current pixel
name|uint
modifier|*
name|p
init|=
operator|(
name|uint
operator|*
operator|)
name|scan
operator|+
name|x
decl_stmt|;
if|if
condition|(
operator|*
name|p
operator|==
name|currentColor
condition|)
block|{
comment|// if it is the same color
name|len
operator|++
expr_stmt|;
comment|// imcrement length
block|}
else|else
block|{
comment|// otherwise write color into the buffer
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|currentColor
operator|==
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
condition|)
name|writeG3BlackRun
argument_list|(
name|len
argument_list|)
expr_stmt|;
else|else
name|writeG3WhiteRun
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
comment|// initialise length and color;
name|len
operator|=
literal|1
expr_stmt|;
name|currentColor
operator|=
operator|*
name|p
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|imageFormat
operator|==
name|QImage
operator|::
name|Format_Mono
condition|)
block|{
name|pixel
operator|=
operator|(
operator|(
name|scan
index|[
name|x
operator|>>
literal|3
index|]
operator|&
operator|(
literal|1
operator|<<
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
if|if
condition|(
name|pixel
operator|!=
name|prev
condition|)
block|{
if|if
condition|(
name|prev
condition|)
block|{
name|writeG3BlackRun
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeG3WhiteRun
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
name|prev
operator|=
name|pixel
expr_stmt|;
name|len
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
operator|++
name|len
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|imageFormat
operator|==
name|QImage
operator|::
name|Format_RGB32
condition|)
block|{
comment|// Output the last run on the line, and pad to TIFF_FAX_WIDTH.
if|if
condition|(
name|len
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|currentColor
operator|==
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
condition|)
name|writeG3BlackRun
argument_list|(
name|len
argument_list|)
expr_stmt|;
else|else
name|writeG3WhiteRun
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|width
operator|<
name|TIFF_FAX_WIDTH
condition|)
name|writeG3WhiteRun
argument_list|(
name|TIFF_FAX_WIDTH
operator|-
name|width
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|imageFormat
operator|==
name|QImage
operator|::
name|Format_Mono
condition|)
block|{
if|if
condition|(
name|len
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|prev
condition|)
block|{
name|writeG3BlackRun
argument_list|(
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|width
operator|<
name|TIFF_FAX_WIDTH
condition|)
block|{
name|writeG3WhiteRun
argument_list|(
name|TIFF_FAX_WIDTH
operator|-
name|width
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|width
operator|<
name|TIFF_FAX_WIDTH
condition|)
block|{
name|writeG3WhiteRun
argument_list|(
name|len
operator|+
operator|(
name|TIFF_FAX_WIDTH
operator|-
name|width
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeG3WhiteRun
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// Flush the last partial byte, which is padded with zero fill bits.
if|if
condition|(
name|partialBits
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|partialByte
operator|<<
operator|(
literal|8
operator|-
name|partialBits
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|partialByte
operator|=
literal|0
expr_stmt|;
name|partialBits
operator|=
literal|0
expr_stmt|;
block|}
comment|// end of page add six EOLs
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
name|writeG3EOL
argument_list|()
expr_stmt|;
comment|// Update the byte count for the image data strip.
name|buffer
operator|.
name|patch
argument_list|(
name|stripBytes
argument_list|,
name|buffer
operator|.
name|size
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeG3IFDEntry
name|int
name|QtopiaPrintEnginePrivate
operator|::
name|writeG3IFDEntry
parameter_list|(
name|int
name|tag
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|short
operator|)
name|tag
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|short
operator|)
name|type
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|size
argument_list|()
operator|-
literal|4
return|;
comment|// Offset of the value for back-patching.
block|}
end_function
begin_function
DECL|function|writeG3Code
name|void
name|QtopiaPrintEnginePrivate
operator|::
name|writeG3Code
parameter_list|(
name|int
name|code
parameter_list|,
name|int
name|bits
parameter_list|)
block|{
name|partialByte
operator|=
operator|(
operator|(
name|partialByte
operator|<<
name|bits
operator|)
operator||
name|code
operator|)
expr_stmt|;
name|partialBits
operator|+=
name|bits
expr_stmt|;
while|while
condition|(
name|partialBits
operator|>=
literal|8
condition|)
block|{
name|partialBits
operator|-=
literal|8
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|partialByte
operator|>>
name|partialBits
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeG3WhiteRun
name|void
name|QtopiaPrintEnginePrivate
operator|::
name|writeG3WhiteRun
parameter_list|(
name|int
name|len
parameter_list|)
block|{
specifier|static
struct|struct
block|{
name|unsigned
name|short
name|code
decl_stmt|;
name|unsigned
name|short
name|bits
decl_stmt|;
block|}
name|whiteCodes
index|[
literal|64
operator|+
literal|27
index|]
init|=
block|{
block|{
literal|0x0035
block|,
literal|8
block|}
block|,
comment|// 0
block|{
literal|0x0007
block|,
literal|6
block|}
block|,
block|{
literal|0x0007
block|,
literal|4
block|}
block|,
block|{
literal|0x0008
block|,
literal|4
block|}
block|,
block|{
literal|0x000B
block|,
literal|4
block|}
block|,
block|{
literal|0x000C
block|,
literal|4
block|}
block|,
block|{
literal|0x000E
block|,
literal|4
block|}
block|,
block|{
literal|0x000F
block|,
literal|4
block|}
block|,
block|{
literal|0x0013
block|,
literal|5
block|}
block|,
comment|// 8
block|{
literal|0x0014
block|,
literal|5
block|}
block|,
block|{
literal|0x0007
block|,
literal|5
block|}
block|,
block|{
literal|0x0008
block|,
literal|5
block|}
block|,
block|{
literal|0x0008
block|,
literal|6
block|}
block|,
block|{
literal|0x0003
block|,
literal|6
block|}
block|,
block|{
literal|0x0034
block|,
literal|6
block|}
block|,
block|{
literal|0x0035
block|,
literal|6
block|}
block|,
block|{
literal|0x002A
block|,
literal|6
block|}
block|,
comment|// 16
block|{
literal|0x002B
block|,
literal|6
block|}
block|,
block|{
literal|0x0027
block|,
literal|7
block|}
block|,
block|{
literal|0x000C
block|,
literal|7
block|}
block|,
block|{
literal|0x0008
block|,
literal|7
block|}
block|,
block|{
literal|0x0017
block|,
literal|7
block|}
block|,
block|{
literal|0x0003
block|,
literal|7
block|}
block|,
block|{
literal|0x0004
block|,
literal|7
block|}
block|,
block|{
literal|0x0028
block|,
literal|7
block|}
block|,
comment|// 24
block|{
literal|0x002B
block|,
literal|7
block|}
block|,
block|{
literal|0x0013
block|,
literal|7
block|}
block|,
block|{
literal|0x0024
block|,
literal|7
block|}
block|,
block|{
literal|0x0018
block|,
literal|7
block|}
block|,
block|{
literal|0x0002
block|,
literal|8
block|}
block|,
block|{
literal|0x0003
block|,
literal|8
block|}
block|,
block|{
literal|0x001A
block|,
literal|8
block|}
block|,
block|{
literal|0x001B
block|,
literal|8
block|}
block|,
comment|// 32
block|{
literal|0x0012
block|,
literal|8
block|}
block|,
block|{
literal|0x0013
block|,
literal|8
block|}
block|,
block|{
literal|0x0014
block|,
literal|8
block|}
block|,
block|{
literal|0x0015
block|,
literal|8
block|}
block|,
block|{
literal|0x0016
block|,
literal|8
block|}
block|,
block|{
literal|0x0017
block|,
literal|8
block|}
block|,
block|{
literal|0x0028
block|,
literal|8
block|}
block|,
block|{
literal|0x0029
block|,
literal|8
block|}
block|,
comment|// 40
block|{
literal|0x002A
block|,
literal|8
block|}
block|,
block|{
literal|0x002B
block|,
literal|8
block|}
block|,
block|{
literal|0x002C
block|,
literal|8
block|}
block|,
block|{
literal|0x002D
block|,
literal|8
block|}
block|,
block|{
literal|0x0004
block|,
literal|8
block|}
block|,
block|{
literal|0x0005
block|,
literal|8
block|}
block|,
block|{
literal|0x000A
block|,
literal|8
block|}
block|,
block|{
literal|0x000B
block|,
literal|8
block|}
block|,
comment|// 48
block|{
literal|0x0052
block|,
literal|8
block|}
block|,
block|{
literal|0x0053
block|,
literal|8
block|}
block|,
block|{
literal|0x0054
block|,
literal|8
block|}
block|,
block|{
literal|0x0055
block|,
literal|8
block|}
block|,
block|{
literal|0x0024
block|,
literal|8
block|}
block|,
block|{
literal|0x0025
block|,
literal|8
block|}
block|,
block|{
literal|0x0058
block|,
literal|8
block|}
block|,
block|{
literal|0x0059
block|,
literal|8
block|}
block|,
comment|// 56
block|{
literal|0x005A
block|,
literal|8
block|}
block|,
block|{
literal|0x005B
block|,
literal|8
block|}
block|,
block|{
literal|0x004A
block|,
literal|8
block|}
block|,
block|{
literal|0x004B
block|,
literal|8
block|}
block|,
block|{
literal|0x0032
block|,
literal|8
block|}
block|,
block|{
literal|0x0033
block|,
literal|8
block|}
block|,
block|{
literal|0x0034
block|,
literal|8
block|}
block|,
block|{
literal|0x001B
block|,
literal|5
block|}
block|,
comment|// Make up codes: 64
block|{
literal|0x0012
block|,
literal|5
block|}
block|,
comment|// 128
block|{
literal|0x0017
block|,
literal|6
block|}
block|,
comment|// 192
block|{
literal|0x0037
block|,
literal|7
block|}
block|,
comment|// 256
block|{
literal|0x0036
block|,
literal|8
block|}
block|,
comment|// 320
block|{
literal|0x0037
block|,
literal|8
block|}
block|,
comment|// 384
block|{
literal|0x0064
block|,
literal|8
block|}
block|,
comment|// 448
block|{
literal|0x0065
block|,
literal|8
block|}
block|,
comment|// 512
block|{
literal|0x0068
block|,
literal|8
block|}
block|,
comment|// 576
block|{
literal|0x0067
block|,
literal|8
block|}
block|,
comment|// 640
block|{
literal|0x00CC
block|,
literal|9
block|}
block|,
comment|// 704
block|{
literal|0x00CD
block|,
literal|9
block|}
block|,
comment|// 768
block|{
literal|0x00D2
block|,
literal|9
block|}
block|,
comment|// 832
block|{
literal|0x00D3
block|,
literal|9
block|}
block|,
comment|// 896
block|{
literal|0x00D4
block|,
literal|9
block|}
block|,
comment|// 960
block|{
literal|0x00D5
block|,
literal|9
block|}
block|,
comment|// 1024
block|{
literal|0x00D6
block|,
literal|9
block|}
block|,
comment|// 1088
block|{
literal|0x00D7
block|,
literal|9
block|}
block|,
comment|// 1152
block|{
literal|0x00D8
block|,
literal|9
block|}
block|,
comment|// 1216
block|{
literal|0x00D9
block|,
literal|9
block|}
block|,
comment|// 1280
block|{
literal|0x00DA
block|,
literal|9
block|}
block|,
comment|// 1344
block|{
literal|0x00DB
block|,
literal|9
block|}
block|,
comment|// 1408
block|{
literal|0x0098
block|,
literal|9
block|}
block|,
comment|// 1472
block|{
literal|0x0099
block|,
literal|9
block|}
block|,
comment|// 1536
block|{
literal|0x009A
block|,
literal|9
block|}
block|,
comment|// 1600
block|{
literal|0x0018
block|,
literal|6
block|}
block|,
comment|// 1664
block|{
literal|0x009B
block|,
literal|9
block|}
block|,
comment|// 1728
block|}
struct|;
if|if
condition|(
name|len
operator|>=
literal|64
condition|)
block|{
name|int
name|index
init|=
literal|63
operator|+
operator|(
name|len
operator|>>
literal|6
operator|)
decl_stmt|;
name|writeG3Code
argument_list|(
name|whiteCodes
index|[
name|index
index|]
operator|.
name|code
argument_list|,
name|whiteCodes
index|[
name|index
index|]
operator|.
name|bits
argument_list|)
expr_stmt|;
name|len
operator|&=
literal|63
expr_stmt|;
block|}
name|writeG3Code
argument_list|(
name|whiteCodes
index|[
name|len
index|]
operator|.
name|code
argument_list|,
name|whiteCodes
index|[
name|len
index|]
operator|.
name|bits
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeG3BlackRun
name|void
name|QtopiaPrintEnginePrivate
operator|::
name|writeG3BlackRun
parameter_list|(
name|int
name|len
parameter_list|)
block|{
specifier|static
struct|struct
block|{
name|unsigned
name|short
name|code
decl_stmt|;
name|unsigned
name|short
name|bits
decl_stmt|;
block|}
name|blackCodes
index|[
literal|64
operator|+
literal|27
index|]
init|=
block|{
block|{
literal|0x0037
block|,
literal|10
block|}
block|,
comment|// 0
block|{
literal|0x0002
block|,
literal|3
block|}
block|,
block|{
literal|0x0003
block|,
literal|2
block|}
block|,
block|{
literal|0x0002
block|,
literal|2
block|}
block|,
block|{
literal|0x0003
block|,
literal|3
block|}
block|,
block|{
literal|0x0003
block|,
literal|4
block|}
block|,
block|{
literal|0x0002
block|,
literal|4
block|}
block|,
block|{
literal|0x0003
block|,
literal|5
block|}
block|,
block|{
literal|0x0005
block|,
literal|6
block|}
block|,
comment|// 8
block|{
literal|0x0004
block|,
literal|6
block|}
block|,
block|{
literal|0x0004
block|,
literal|7
block|}
block|,
block|{
literal|0x0005
block|,
literal|7
block|}
block|,
block|{
literal|0x0007
block|,
literal|7
block|}
block|,
block|{
literal|0x0004
block|,
literal|8
block|}
block|,
block|{
literal|0x0007
block|,
literal|8
block|}
block|,
block|{
literal|0x0018
block|,
literal|9
block|}
block|,
block|{
literal|0x0017
block|,
literal|10
block|}
block|,
comment|// 16
block|{
literal|0x0018
block|,
literal|10
block|}
block|,
block|{
literal|0x0008
block|,
literal|10
block|}
block|,
block|{
literal|0x0067
block|,
literal|11
block|}
block|,
block|{
literal|0x0068
block|,
literal|11
block|}
block|,
block|{
literal|0x006C
block|,
literal|11
block|}
block|,
block|{
literal|0x0037
block|,
literal|11
block|}
block|,
block|{
literal|0x0028
block|,
literal|11
block|}
block|,
block|{
literal|0x0017
block|,
literal|11
block|}
block|,
comment|// 24
block|{
literal|0x0018
block|,
literal|11
block|}
block|,
block|{
literal|0x00CA
block|,
literal|12
block|}
block|,
block|{
literal|0x00CB
block|,
literal|12
block|}
block|,
block|{
literal|0x00CC
block|,
literal|12
block|}
block|,
block|{
literal|0x00CD
block|,
literal|12
block|}
block|,
block|{
literal|0x0068
block|,
literal|12
block|}
block|,
block|{
literal|0x0069
block|,
literal|12
block|}
block|,
block|{
literal|0x006A
block|,
literal|12
block|}
block|,
comment|// 32
block|{
literal|0x006B
block|,
literal|12
block|}
block|,
block|{
literal|0x00D2
block|,
literal|12
block|}
block|,
block|{
literal|0x00D3
block|,
literal|12
block|}
block|,
block|{
literal|0x00D4
block|,
literal|12
block|}
block|,
block|{
literal|0x00D5
block|,
literal|12
block|}
block|,
block|{
literal|0x00D6
block|,
literal|12
block|}
block|,
block|{
literal|0x00D7
block|,
literal|12
block|}
block|,
block|{
literal|0x006C
block|,
literal|12
block|}
block|,
comment|// 40
block|{
literal|0x006D
block|,
literal|12
block|}
block|,
block|{
literal|0x00DA
block|,
literal|12
block|}
block|,
block|{
literal|0x00DB
block|,
literal|12
block|}
block|,
block|{
literal|0x0054
block|,
literal|12
block|}
block|,
block|{
literal|0x0055
block|,
literal|12
block|}
block|,
block|{
literal|0x0056
block|,
literal|12
block|}
block|,
block|{
literal|0x0057
block|,
literal|12
block|}
block|,
block|{
literal|0x0064
block|,
literal|12
block|}
block|,
comment|// 48
block|{
literal|0x0065
block|,
literal|12
block|}
block|,
block|{
literal|0x0052
block|,
literal|12
block|}
block|,
block|{
literal|0x0053
block|,
literal|12
block|}
block|,
block|{
literal|0x0024
block|,
literal|12
block|}
block|,
block|{
literal|0x0037
block|,
literal|12
block|}
block|,
block|{
literal|0x0038
block|,
literal|12
block|}
block|,
block|{
literal|0x0027
block|,
literal|12
block|}
block|,
block|{
literal|0x0028
block|,
literal|12
block|}
block|,
comment|// 56
block|{
literal|0x0058
block|,
literal|12
block|}
block|,
block|{
literal|0x0059
block|,
literal|12
block|}
block|,
block|{
literal|0x002B
block|,
literal|12
block|}
block|,
block|{
literal|0x002C
block|,
literal|12
block|}
block|,
block|{
literal|0x005A
block|,
literal|12
block|}
block|,
block|{
literal|0x0066
block|,
literal|12
block|}
block|,
block|{
literal|0x0067
block|,
literal|12
block|}
block|,
block|{
literal|0x000F
block|,
literal|10
block|}
block|,
comment|// Make up codes: 64
block|{
literal|0x00C8
block|,
literal|12
block|}
block|,
comment|// 128
block|{
literal|0x00C9
block|,
literal|12
block|}
block|,
comment|// 192
block|{
literal|0x005B
block|,
literal|12
block|}
block|,
comment|// 256
block|{
literal|0x0033
block|,
literal|12
block|}
block|,
comment|// 320
block|{
literal|0x0034
block|,
literal|12
block|}
block|,
comment|// 384
block|{
literal|0x0035
block|,
literal|12
block|}
block|,
comment|// 448
block|{
literal|0x006C
block|,
literal|13
block|}
block|,
comment|// 512
block|{
literal|0x006D
block|,
literal|13
block|}
block|,
comment|// 576
block|{
literal|0x004A
block|,
literal|13
block|}
block|,
comment|// 640
block|{
literal|0x004B
block|,
literal|13
block|}
block|,
comment|// 704
block|{
literal|0x004C
block|,
literal|13
block|}
block|,
comment|// 768
block|{
literal|0x004D
block|,
literal|13
block|}
block|,
comment|// 832
block|{
literal|0x0072
block|,
literal|13
block|}
block|,
comment|// 896
block|{
literal|0x0073
block|,
literal|13
block|}
block|,
comment|// 960
block|{
literal|0x0074
block|,
literal|13
block|}
block|,
comment|// 1024
block|{
literal|0x0075
block|,
literal|13
block|}
block|,
comment|// 1088
block|{
literal|0x0076
block|,
literal|13
block|}
block|,
comment|// 1152
block|{
literal|0x0077
block|,
literal|13
block|}
block|,
comment|// 1216
block|{
literal|0x0052
block|,
literal|13
block|}
block|,
comment|// 1280
block|{
literal|0x0053
block|,
literal|13
block|}
block|,
comment|// 1344
block|{
literal|0x0054
block|,
literal|13
block|}
block|,
comment|// 1408
block|{
literal|0x0055
block|,
literal|13
block|}
block|,
comment|// 1472
block|{
literal|0x005A
block|,
literal|13
block|}
block|,
comment|// 1536
block|{
literal|0x005B
block|,
literal|13
block|}
block|,
comment|// 1600
block|{
literal|0x0064
block|,
literal|13
block|}
block|,
comment|// 1664
block|{
literal|0x0065
block|,
literal|13
block|}
block|,
comment|// 1728
block|}
struct|;
if|if
condition|(
name|len
operator|>=
literal|64
condition|)
block|{
name|int
name|index
init|=
literal|63
operator|+
operator|(
name|len
operator|>>
literal|6
operator|)
decl_stmt|;
name|writeG3Code
argument_list|(
name|blackCodes
index|[
name|index
index|]
operator|.
name|code
argument_list|,
name|blackCodes
index|[
name|index
index|]
operator|.
name|bits
argument_list|)
expr_stmt|;
name|len
operator|&=
literal|63
expr_stmt|;
block|}
name|writeG3Code
argument_list|(
name|blackCodes
index|[
name|len
index|]
operator|.
name|code
argument_list|,
name|blackCodes
index|[
name|len
index|]
operator|.
name|bits
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeG3EOL
name|void
name|QtopiaPrintEnginePrivate
operator|::
name|writeG3EOL
parameter_list|()
block|{
name|int
name|bitToPad
decl_stmt|;
if|if
condition|(
name|partialBits
operator|<=
literal|4
condition|)
block|{
name|bitToPad
operator|=
literal|4
operator|-
name|partialBits
expr_stmt|;
block|}
else|else
block|{
name|bitToPad
operator|=
literal|8
operator|-
name|partialBits
operator|+
literal|4
expr_stmt|;
block|}
name|partialByte
operator|=
operator|(
operator|(
name|partialByte
operator|<<
operator|(
name|bitToPad
operator|+
literal|12
operator|)
operator|)
operator||
literal|0x0001
operator|)
expr_stmt|;
name|partialBits
operator|+=
name|bitToPad
operator|+
literal|12
expr_stmt|;
while|while
condition|(
name|partialBits
operator|>=
literal|8
condition|)
block|{
name|partialBits
operator|-=
literal|8
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|partialByte
operator|>>
name|partialBits
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//    writeG3Code( 0x0001, 12 );
block|}
end_function
begin_function
DECL|function|append
name|void
name|QtopiaPrintBuffer
operator|::
name|append
parameter_list|(
name|short
name|value
parameter_list|)
block|{
if|if
condition|(
name|_bigEndian
condition|)
block|{
name|_data
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|value
operator|>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|_data
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|_data
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|value
argument_list|)
expr_stmt|;
name|_data
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|value
operator|>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|append
name|void
name|QtopiaPrintBuffer
operator|::
name|append
parameter_list|(
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|_bigEndian
condition|)
block|{
name|_data
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|value
operator|>>
literal|24
argument_list|)
argument_list|)
expr_stmt|;
name|_data
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|value
operator|>>
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|_data
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|value
operator|>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|_data
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|_data
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|value
argument_list|)
expr_stmt|;
name|_data
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|value
operator|>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|_data
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|value
operator|>>
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|_data
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|value
operator|>>
literal|24
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|patch
name|void
name|QtopiaPrintBuffer
operator|::
name|patch
parameter_list|(
name|int
name|posn
parameter_list|,
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|_bigEndian
condition|)
block|{
name|_data
index|[
name|posn
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|value
operator|>>
literal|24
argument_list|)
expr_stmt|;
name|_data
index|[
name|posn
operator|+
literal|1
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|value
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|_data
index|[
name|posn
operator|+
literal|2
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|value
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|_data
index|[
name|posn
operator|+
literal|3
index|]
operator|=
operator|(
name|char
operator|)
name|value
expr_stmt|;
block|}
else|else
block|{
name|_data
index|[
name|posn
index|]
operator|=
operator|(
name|char
operator|)
name|value
expr_stmt|;
name|_data
index|[
name|posn
operator|+
literal|1
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|value
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|_data
index|[
name|posn
operator|+
literal|2
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|value
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|_data
index|[
name|posn
operator|+
literal|3
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|value
operator|>>
literal|24
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|pad
name|void
name|QtopiaPrintBuffer
operator|::
name|pad
parameter_list|()
block|{
while|while
condition|(
operator|(
name|_data
operator|.
name|size
argument_list|()
operator|%
literal|4
operator|)
operator|!=
literal|0
condition|)
name|_data
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PRINTER
end_comment
end_unit
