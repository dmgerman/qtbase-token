begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmutex.h>
end_include
begin_define
DECL|macro|QT_FT_BEGIN_HEADER
define|#
directive|define
name|QT_FT_BEGIN_HEADER
end_define
begin_define
DECL|macro|QT_FT_END_HEADER
define|#
directive|define
name|QT_FT_END_HEADER
end_define
begin_include
include|#
directive|include
file|<private/qrasterdefs_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qgrayraster_p.h>
end_include
begin_include
include|#
directive|include
file|<qpainterpath.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qbitmap.h>
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_comment
comment|//   #include<private/qdatabuffer_p.h>
end_comment
begin_comment
comment|//   #include<private/qpainter_p.h>
end_comment
begin_include
include|#
directive|include
file|<private/qtextengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qfontengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpixmap_raster_p.h>
end_include
begin_comment
comment|//   #include<private/qpolygonclipper_p.h>
end_comment
begin_comment
comment|//   #include<private/qrasterizer_p.h>
end_comment
begin_include
include|#
directive|include
file|<private/qimage_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qstatictext_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qcosmeticstroker_p.h>
end_include
begin_include
include|#
directive|include
file|"qmemrotate_p.h"
end_include
begin_include
include|#
directive|include
file|"qrgba64_p.h"
end_include
begin_include
include|#
directive|include
file|"qpaintengine_raster_p.h"
end_include
begin_comment
comment|//   #include "qbezier_p.h"
end_comment
begin_include
include|#
directive|include
file|"qoutlinemapper_p.h"
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_include
include|#
directive|include
file|<qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<private/qfontengine_p.h>
end_include
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN64
end_ifdef
begin_include
include|#
directive|include
file|<malloc.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QRectVectorPath
class|class
name|QRectVectorPath
super|:
specifier|public
name|QVectorPath
block|{
public|public:
DECL|function|set
specifier|inline
name|void
name|set
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
block|{
name|qreal
name|left
init|=
name|r
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|right
init|=
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
decl_stmt|;
name|qreal
name|top
init|=
name|r
operator|.
name|y
argument_list|()
decl_stmt|;
name|qreal
name|bottom
init|=
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
decl_stmt|;
name|pts
index|[
literal|0
index|]
operator|=
name|left
expr_stmt|;
name|pts
index|[
literal|1
index|]
operator|=
name|top
expr_stmt|;
name|pts
index|[
literal|2
index|]
operator|=
name|right
expr_stmt|;
name|pts
index|[
literal|3
index|]
operator|=
name|top
expr_stmt|;
name|pts
index|[
literal|4
index|]
operator|=
name|right
expr_stmt|;
name|pts
index|[
literal|5
index|]
operator|=
name|bottom
expr_stmt|;
name|pts
index|[
literal|6
index|]
operator|=
name|left
expr_stmt|;
name|pts
index|[
literal|7
index|]
operator|=
name|bottom
expr_stmt|;
block|}
DECL|function|set
specifier|inline
name|void
name|set
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|)
block|{
name|qreal
name|left
init|=
name|r
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|right
init|=
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
decl_stmt|;
name|qreal
name|top
init|=
name|r
operator|.
name|y
argument_list|()
decl_stmt|;
name|qreal
name|bottom
init|=
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
decl_stmt|;
name|pts
index|[
literal|0
index|]
operator|=
name|left
expr_stmt|;
name|pts
index|[
literal|1
index|]
operator|=
name|top
expr_stmt|;
name|pts
index|[
literal|2
index|]
operator|=
name|right
expr_stmt|;
name|pts
index|[
literal|3
index|]
operator|=
name|top
expr_stmt|;
name|pts
index|[
literal|4
index|]
operator|=
name|right
expr_stmt|;
name|pts
index|[
literal|5
index|]
operator|=
name|bottom
expr_stmt|;
name|pts
index|[
literal|6
index|]
operator|=
name|left
expr_stmt|;
name|pts
index|[
literal|7
index|]
operator|=
name|bottom
expr_stmt|;
block|}
DECL|function|QRectVectorPath
specifier|inline
name|QRectVectorPath
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
member_init_list|:
name|QVectorPath
argument_list|(
name|pts
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
name|QVectorPath
operator|::
name|RectangleHint
operator||
name|QVectorPath
operator|::
name|ImplicitClose
argument_list|)
block|{
name|set
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
DECL|function|QRectVectorPath
specifier|inline
name|QRectVectorPath
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|)
member_init_list|:
name|QVectorPath
argument_list|(
name|pts
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
name|QVectorPath
operator|::
name|RectangleHint
operator||
name|QVectorPath
operator|::
name|ImplicitClose
argument_list|)
block|{
name|set
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
DECL|function|QRectVectorPath
specifier|inline
name|QRectVectorPath
parameter_list|()
member_init_list|:
name|QVectorPath
argument_list|(
name|pts
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
name|QVectorPath
operator|::
name|RectangleHint
operator||
name|QVectorPath
operator|::
name|ImplicitClose
argument_list|)
block|{ }
DECL|member|pts
name|qreal
name|pts
index|[
literal|8
index|]
decl_stmt|;
block|}
class|;
end_class
begin_function_decl
name|Q_GUI_EXPORT
specifier|extern
name|bool
name|qt_scaleForTransform
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|,
name|qreal
modifier|*
name|scale
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// qtransform.cpp
end_comment
begin_define
DECL|macro|qreal_to_fixed_26_6
define|#
directive|define
name|qreal_to_fixed_26_6
parameter_list|(
name|f
parameter_list|)
value|(int(f * 64))
end_define
begin_define
DECL|macro|qt_swap_int
define|#
directive|define
name|qt_swap_int
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|{ int tmp = (x); (x) = (y); (y) = tmp; }
end_define
begin_define
DECL|macro|qt_swap_qreal
define|#
directive|define
name|qt_swap_qreal
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|{ qreal tmp = (x); (x) = (y); (y) = tmp; }
end_define
begin_comment
comment|// #define QT_DEBUG_DRAW
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
end_ifdef
begin_function_decl
name|void
name|dumpClip
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
specifier|const
name|QClipData
modifier|*
name|clip
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|QT_FAST_SPANS
define|#
directive|define
name|QT_FAST_SPANS
end_define
begin_comment
comment|// A little helper macro to get a better approximation of dimensions.
end_comment
begin_comment
comment|// If we have a rect that starting at 0.5 of width 3.5 it should span
end_comment
begin_comment
comment|// 4 pixels.
end_comment
begin_define
DECL|macro|int_dim
define|#
directive|define
name|int_dim
parameter_list|(
name|pos
parameter_list|,
name|dim
parameter_list|)
value|(int(pos+dim) - int(pos))
end_define
begin_decl_stmt
DECL|variable|aliasedCoordinateDelta
specifier|static
specifier|const
name|qreal
name|aliasedCoordinateDelta
init|=
literal|0.5
operator|-
literal|0.015625
decl_stmt|;
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_function
DECL|function|winClearTypeFontsEnabled
specifier|static
specifier|inline
name|bool
name|winClearTypeFontsEnabled
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINRT
return|return
literal|false
return|;
else|#
directive|else
comment|// Q_OS_WINRT
name|UINT
name|result
init|=
literal|0
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|SPI_GETFONTSMOOTHINGTYPE
argument_list|)
comment|// MinGW
define|#
directive|define
name|SPI_GETFONTSMOOTHINGTYPE
value|0x200A
define|#
directive|define
name|FE_FONTSMOOTHINGCLEARTYPE
value|0x002
endif|#
directive|endif
name|SystemParametersInfo
argument_list|(
name|SPI_GETFONTSMOOTHINGTYPE
argument_list|,
literal|0
argument_list|,
operator|&
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
operator|==
name|FE_FONTSMOOTHINGCLEARTYPE
return|;
endif|#
directive|endif
comment|// !Q_OS_WINRT
block|}
end_function
begin_comment
comment|/*!     \internal  */
end_comment
begin_function
DECL|function|clearTypeFontsEnabled
name|bool
name|QRasterPaintEngine
operator|::
name|clearTypeFontsEnabled
parameter_list|()
block|{
specifier|static
specifier|const
name|bool
name|result
init|=
name|winClearTypeFontsEnabled
argument_list|()
decl_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_WIN
end_comment
begin_comment
comment|/********************************************************************************  * Span functions  */
end_comment
begin_function_decl
specifier|static
name|void
name|qt_span_fill_clipRect
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|qt_span_fill_clipped
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|qt_span_clip
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
function_decl|;
end_function_decl
begin_struct
DECL|struct|ClipData
struct|struct
name|ClipData
block|{
DECL|member|oldClip
name|QClipData
modifier|*
name|oldClip
decl_stmt|;
DECL|member|newClip
name|QClipData
modifier|*
name|newClip
decl_stmt|;
DECL|member|operation
name|Qt
operator|::
name|ClipOperation
name|operation
decl_stmt|;
block|}
struct|;
end_struct
begin_enum
DECL|enum|LineDrawMode
enum|enum
name|LineDrawMode
block|{
DECL|enumerator|LineDrawClipped
name|LineDrawClipped
block|,
DECL|enumerator|LineDrawNormal
name|LineDrawNormal
block|,
DECL|enumerator|LineDrawIncludeLastPixel
name|LineDrawIncludeLastPixel
block|}
enum|;
end_enum
begin_function_decl
specifier|static
name|void
name|drawEllipse_midpoint_i
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QRect
modifier|&
name|clip
parameter_list|,
name|ProcessSpans
name|pen_func
parameter_list|,
name|ProcessSpans
name|brush_func
parameter_list|,
name|QSpanData
modifier|*
name|pen_data
parameter_list|,
name|QSpanData
modifier|*
name|brush_data
parameter_list|)
function_decl|;
end_function_decl
begin_struct
DECL|struct|QRasterFloatPoint
struct|struct
name|QRasterFloatPoint
block|{
DECL|member|x
name|qreal
name|x
decl_stmt|;
DECL|member|y
name|qreal
name|y
decl_stmt|;
block|}
struct|;
end_struct
begin_ifdef
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
end_ifdef
begin_function
DECL|function|boundingRect
specifier|static
specifier|const
name|QRectF
name|boundingRect
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|)
block|{
specifier|const
name|QPointF
modifier|*
name|e
init|=
name|points
decl_stmt|;
specifier|const
name|QPointF
modifier|*
name|last
init|=
name|points
operator|+
name|pointCount
decl_stmt|;
name|qreal
name|minx
decl_stmt|,
name|maxx
decl_stmt|,
name|miny
decl_stmt|,
name|maxy
decl_stmt|;
name|minx
operator|=
name|maxx
operator|=
name|e
operator|->
name|x
argument_list|()
expr_stmt|;
name|miny
operator|=
name|maxy
operator|=
name|e
operator|->
name|y
argument_list|()
expr_stmt|;
while|while
condition|(
operator|++
name|e
operator|<
name|last
condition|)
block|{
if|if
condition|(
name|e
operator|->
name|x
argument_list|()
operator|<
name|minx
condition|)
name|minx
operator|=
name|e
operator|->
name|x
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|e
operator|->
name|x
argument_list|()
operator|>
name|maxx
condition|)
name|maxx
operator|=
name|e
operator|->
name|x
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|y
argument_list|()
operator|<
name|miny
condition|)
name|miny
operator|=
name|e
operator|->
name|y
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|e
operator|->
name|y
argument_list|()
operator|>
name|maxy
condition|)
name|maxy
operator|=
name|e
operator|->
name|y
argument_list|()
expr_stmt|;
block|}
return|return
name|QRectF
argument_list|(
name|QPointF
argument_list|(
name|minx
argument_list|,
name|miny
argument_list|)
argument_list|,
name|QPointF
argument_list|(
name|maxx
argument_list|,
name|maxy
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qt_ft_outline_move_to
specifier|static
name|void
name|qt_ft_outline_move_to
parameter_list|(
name|qfixed
name|x
parameter_list|,
name|qfixed
name|y
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
operator|(
operator|(
name|QOutlineMapper
operator|*
operator|)
name|data
operator|)
operator|->
name|moveTo
argument_list|(
name|QPointF
argument_list|(
name|qt_fixed_to_real
argument_list|(
name|x
argument_list|)
argument_list|,
name|qt_fixed_to_real
argument_list|(
name|y
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_ft_outline_line_to
specifier|static
name|void
name|qt_ft_outline_line_to
parameter_list|(
name|qfixed
name|x
parameter_list|,
name|qfixed
name|y
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
operator|(
operator|(
name|QOutlineMapper
operator|*
operator|)
name|data
operator|)
operator|->
name|lineTo
argument_list|(
name|QPointF
argument_list|(
name|qt_fixed_to_real
argument_list|(
name|x
argument_list|)
argument_list|,
name|qt_fixed_to_real
argument_list|(
name|y
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_ft_outline_cubic_to
specifier|static
name|void
name|qt_ft_outline_cubic_to
parameter_list|(
name|qfixed
name|c1x
parameter_list|,
name|qfixed
name|c1y
parameter_list|,
name|qfixed
name|c2x
parameter_list|,
name|qfixed
name|c2y
parameter_list|,
name|qfixed
name|ex
parameter_list|,
name|qfixed
name|ey
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
operator|(
operator|(
name|QOutlineMapper
operator|*
operator|)
name|data
operator|)
operator|->
name|curveTo
argument_list|(
name|QPointF
argument_list|(
name|qt_fixed_to_real
argument_list|(
name|c1x
argument_list|)
argument_list|,
name|qt_fixed_to_real
argument_list|(
name|c1y
argument_list|)
argument_list|)
argument_list|,
name|QPointF
argument_list|(
name|qt_fixed_to_real
argument_list|(
name|c2x
argument_list|)
argument_list|,
name|qt_fixed_to_real
argument_list|(
name|c2y
argument_list|)
argument_list|)
argument_list|,
name|QPointF
argument_list|(
name|qt_fixed_to_real
argument_list|(
name|ex
argument_list|)
argument_list|,
name|qt_fixed_to_real
argument_list|(
name|ey
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DEBUG
argument_list|)
operator|&&
literal|0
end_if
begin_function
DECL|function|qt_debug_path
specifier|static
name|void
name|qt_debug_path
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|names
index|[]
init|=
block|{
literal|"MoveTo     "
block|,
literal|"LineTo     "
block|,
literal|"CurveTo    "
block|,
literal|"CurveToData"
block|}
decl_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"\nQPainterPath: elementCount=%d\n"
argument_list|,
name|path
operator|.
name|elementCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPainterPath
operator|::
name|Element
modifier|&
name|e
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|e
operator|.
name|type
operator|>=
literal|0
operator|&&
name|e
operator|.
name|type
operator|<=
name|QPainterPath
operator|::
name|CurveToDataElement
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|" - %3d:: %s, (%.2f, %.2f)\n"
argument_list|,
name|i
argument_list|,
name|names
index|[
name|e
operator|.
name|type
index|]
argument_list|,
name|e
operator|.
name|x
argument_list|,
name|e
operator|.
name|y
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|QRasterPaintEnginePrivate
name|QRasterPaintEnginePrivate
operator|::
name|QRasterPaintEnginePrivate
parameter_list|()
member_init_list|:
name|QPaintEngineExPrivate
argument_list|()
member_init_list|,
name|cachedLines
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \class QRasterPaintEngine     \preliminary     \ingroup qws     \inmodule QtGui     \since 4.2      \brief The QRasterPaintEngine class enables hardware acceleration     of painting operations in Qt for Embedded Linux.      Note that this functionality is only available in     Qt for Embedded Linux.      In Qt for Embedded Linux, painting is a pure software     implementation. But starting with Qt 4.2, it is     possible to add an accelerated graphics driver to take advantage     of available hardware resources.      Hardware acceleration is accomplished by creating a custom screen     driver, accelerating the copying from memory to the screen, and     implementing a custom paint engine accelerating the various     painting operations. Then a custom paint device and a custom     window surface must be implemented to make     Qt for Embedded Linux aware of the accelerated driver.      \note The QRasterPaintEngine class does not support 8-bit images.     Instead, they need to be converted to a supported format, such as     QImage::Format_ARGB32_Premultiplied.      \sa QPaintEngine */
end_comment
begin_comment
comment|/*!     \fn Type QRasterPaintEngine::type() const     \reimp */
end_comment
begin_comment
comment|/*!     \typedef QSpan     \relates QRasterPaintEngine      A struct equivalent to QT_FT_Span, containing a position (x,     y), the span's length in pixels and its color/coverage (a value     ranging from 0 to 255). */
end_comment
begin_comment
comment|/*!     \since 4.5      Creates a raster based paint engine for operating on the given     \a device, with the complete set of \l     {QPaintEngine::PaintEngineFeature}{paint engine features and     capabilities}. */
end_comment
begin_constructor
DECL|function|QRasterPaintEngine
name|QRasterPaintEngine
operator|::
name|QRasterPaintEngine
parameter_list|(
name|QPaintDevice
modifier|*
name|device
parameter_list|)
member_init_list|:
name|QPaintEngineEx
argument_list|(
operator|*
operator|(
operator|new
name|QRasterPaintEnginePrivate
operator|)
argument_list|)
block|{
name|d_func
argument_list|()
operator|->
name|device
operator|=
name|device
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_constructor
DECL|function|QRasterPaintEngine
name|QRasterPaintEngine
operator|::
name|QRasterPaintEngine
parameter_list|(
name|QRasterPaintEnginePrivate
modifier|&
name|dd
parameter_list|,
name|QPaintDevice
modifier|*
name|device
parameter_list|)
member_init_list|:
name|QPaintEngineEx
argument_list|(
name|dd
argument_list|)
block|{
name|d_func
argument_list|()
operator|->
name|device
operator|=
name|device
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|init
name|void
name|QRasterPaintEngine
operator|::
name|init
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|d
operator|->
name|hdc
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
comment|// The antialiasing raster.
name|d
operator|->
name|grayRaster
operator|.
name|reset
argument_list|(
operator|new
name|QT_FT_Raster
argument_list|)
expr_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|d
operator|->
name|grayRaster
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|qt_ft_grays_raster
operator|.
name|raster_new
argument_list|(
name|d
operator|->
name|grayRaster
operator|.
name|data
argument_list|()
argument_list|)
condition|)
name|QT_THROW
argument_list|(
name|std
operator|::
name|bad_alloc
argument_list|()
argument_list|)
expr_stmt|;
comment|// an error creating the raster is caused by a bad malloc
name|d
operator|->
name|rasterizer
operator|.
name|reset
argument_list|(
operator|new
name|QRasterizer
argument_list|)
expr_stmt|;
name|d
operator|->
name|rasterBuffer
operator|.
name|reset
argument_list|(
operator|new
name|QRasterBuffer
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|outlineMapper
operator|.
name|reset
argument_list|(
operator|new
name|QOutlineMapper
argument_list|)
expr_stmt|;
name|d
operator|->
name|outlinemapper_xform_dirty
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|basicStroker
operator|.
name|setMoveToHook
argument_list|(
name|qt_ft_outline_move_to
argument_list|)
expr_stmt|;
name|d
operator|->
name|basicStroker
operator|.
name|setLineToHook
argument_list|(
name|qt_ft_outline_line_to
argument_list|)
expr_stmt|;
name|d
operator|->
name|basicStroker
operator|.
name|setCubicToHook
argument_list|(
name|qt_ft_outline_cubic_to
argument_list|)
expr_stmt|;
name|d
operator|->
name|baseClip
operator|.
name|reset
argument_list|(
operator|new
name|QClipData
argument_list|(
name|d
operator|->
name|device
operator|->
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|baseClip
operator|->
name|setClipRect
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|d
operator|->
name|device
operator|->
name|width
argument_list|()
argument_list|,
name|d
operator|->
name|device
operator|->
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|image_filler
operator|.
name|init
argument_list|(
name|d
operator|->
name|rasterBuffer
operator|.
name|data
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|image_filler
operator|.
name|type
operator|=
name|QSpanData
operator|::
name|Texture
expr_stmt|;
name|d
operator|->
name|image_filler_xform
operator|.
name|init
argument_list|(
name|d
operator|->
name|rasterBuffer
operator|.
name|data
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|image_filler_xform
operator|.
name|type
operator|=
name|QSpanData
operator|::
name|Texture
expr_stmt|;
name|d
operator|->
name|solid_color_filler
operator|.
name|init
argument_list|(
name|d
operator|->
name|rasterBuffer
operator|.
name|data
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|solid_color_filler
operator|.
name|type
operator|=
name|QSpanData
operator|::
name|Solid
expr_stmt|;
name|d
operator|->
name|deviceDepth
operator|=
name|d
operator|->
name|device
operator|->
name|depth
argument_list|()
expr_stmt|;
name|d
operator|->
name|mono_surface
operator|=
literal|false
expr_stmt|;
name|gccaps
operator|&=
operator|~
name|PorterDuff
expr_stmt|;
name|QImage
operator|::
name|Format
name|format
init|=
name|QImage
operator|::
name|Format_Invalid
decl_stmt|;
switch|switch
condition|(
name|d
operator|->
name|device
operator|->
name|devType
argument_list|()
condition|)
block|{
case|case
name|QInternal
operator|::
name|Pixmap
case|:
name|qWarning
argument_list|(
literal|"QRasterPaintEngine: unsupported for pixmaps..."
argument_list|)
expr_stmt|;
break|break;
case|case
name|QInternal
operator|::
name|Image
case|:
name|format
operator|=
name|d
operator|->
name|rasterBuffer
operator|->
name|prepare
argument_list|(
cast|static_cast
argument_list|<
name|QImage
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|device
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"QRasterPaintEngine: unsupported target device %d\n"
argument_list|,
name|d
operator|->
name|device
operator|->
name|devType
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|device
operator|=
literal|0
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_MonoLSB
case|:
case|case
name|QImage
operator|::
name|Format_Mono
case|:
name|d
operator|->
name|mono_surface
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|QImage
operator|::
name|toPixelFormat
argument_list|(
name|format
argument_list|)
operator|.
name|alphaUsage
argument_list|()
operator|==
name|QPixelFormat
operator|::
name|UsesAlpha
condition|)
name|gccaps
operator||=
name|PorterDuff
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_comment
comment|/*!     Destroys this paint engine. */
end_comment
begin_destructor
DECL|function|~QRasterPaintEngine
name|QRasterPaintEngine
operator|::
name|~
name|QRasterPaintEngine
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|qt_ft_grays_raster
operator|.
name|raster_done
argument_list|(
operator|*
name|d
operator|->
name|grayRaster
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|begin
name|bool
name|QRasterPaintEngine
operator|::
name|begin
parameter_list|(
name|QPaintDevice
modifier|*
name|device
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|device
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Pixmap
condition|)
block|{
name|QPixmap
modifier|*
name|pixmap
init|=
cast|static_cast
argument_list|<
name|QPixmap
operator|*
argument_list|>
argument_list|(
name|device
argument_list|)
decl_stmt|;
name|QPlatformPixmap
modifier|*
name|pd
init|=
name|pixmap
operator|->
name|handle
argument_list|()
decl_stmt|;
if|if
condition|(
name|pd
operator|->
name|classId
argument_list|()
operator|==
name|QPlatformPixmap
operator|::
name|RasterClass
operator|||
name|pd
operator|->
name|classId
argument_list|()
operator|==
name|QPlatformPixmap
operator|::
name|BlitterClass
condition|)
name|d
operator|->
name|device
operator|=
name|pd
operator|->
name|buffer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|device
operator|=
name|device
expr_stmt|;
block|}
comment|// Make sure QPaintEngine::paintDevice() returns the proper device.
name|d
operator|->
name|pdev
operator|=
name|d
operator|->
name|device
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|device
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Image
operator|||
name|d
operator|->
name|device
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|CustomRaster
argument_list|)
expr_stmt|;
name|d
operator|->
name|systemStateChanged
argument_list|()
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
name|ensureOutlineMapper
argument_list|()
expr_stmt|;
name|d
operator|->
name|outlineMapper
operator|->
name|m_clip_rect
operator|=
name|d
operator|->
name|deviceRect
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|outlineMapper
operator|->
name|m_clip_rect
operator|.
name|width
argument_list|()
operator|>
name|QT_RASTER_COORD_LIMIT
condition|)
name|d
operator|->
name|outlineMapper
operator|->
name|m_clip_rect
operator|.
name|setWidth
argument_list|(
name|QT_RASTER_COORD_LIMIT
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|outlineMapper
operator|->
name|m_clip_rect
operator|.
name|height
argument_list|()
operator|>
name|QT_RASTER_COORD_LIMIT
condition|)
name|d
operator|->
name|outlineMapper
operator|->
name|m_clip_rect
operator|.
name|setHeight
argument_list|(
name|QT_RASTER_COORD_LIMIT
argument_list|)
expr_stmt|;
name|d
operator|->
name|rasterizer
operator|->
name|setClipRect
argument_list|(
name|d
operator|->
name|deviceRect
argument_list|)
expr_stmt|;
name|s
operator|->
name|penData
operator|.
name|init
argument_list|(
name|d
operator|->
name|rasterBuffer
operator|.
name|data
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|s
operator|->
name|penData
operator|.
name|setup
argument_list|(
name|s
operator|->
name|pen
operator|.
name|brush
argument_list|()
argument_list|,
name|s
operator|->
name|intOpacity
argument_list|,
name|s
operator|->
name|composition_mode
argument_list|)
expr_stmt|;
name|s
operator|->
name|stroker
operator|=
operator|&
name|d
operator|->
name|basicStroker
expr_stmt|;
name|d
operator|->
name|basicStroker
operator|.
name|setClipRect
argument_list|(
name|d
operator|->
name|deviceRect
argument_list|)
expr_stmt|;
name|s
operator|->
name|brushData
operator|.
name|init
argument_list|(
name|d
operator|->
name|rasterBuffer
operator|.
name|data
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|s
operator|->
name|brushData
operator|.
name|setup
argument_list|(
name|s
operator|->
name|brush
argument_list|,
name|s
operator|->
name|intOpacity
argument_list|,
name|s
operator|->
name|composition_mode
argument_list|)
expr_stmt|;
name|d
operator|->
name|rasterBuffer
operator|->
name|compositionMode
operator|=
name|QPainter
operator|::
name|CompositionMode_SourceOver
expr_stmt|;
name|setDirty
argument_list|(
name|DirtyBrushOrigin
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QRasterPaintEngine::begin("
operator|<<
operator|(
name|void
operator|*
operator|)
name|device
operator|<<
literal|") devType:"
operator|<<
name|device
operator|->
name|devType
argument_list|()
operator|<<
literal|"devRect:"
operator|<<
name|d
operator|->
name|deviceRect
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|baseClip
condition|)
block|{
name|dumpClip
argument_list|(
name|d
operator|->
name|rasterBuffer
operator|->
name|width
argument_list|()
argument_list|,
name|d
operator|->
name|rasterBuffer
operator|->
name|height
argument_list|()
argument_list|,
operator|&
operator|*
name|d
operator|->
name|baseClip
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|d
operator|->
name|mono_surface
condition|)
name|d
operator|->
name|glyphCacheFormat
operator|=
name|QFontEngine
operator|::
name|Format_Mono
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
elseif|else
if|if
condition|(
name|clearTypeFontsEnabled
argument_list|()
condition|)
else|#
directive|else
elseif|else
if|if
condition|(
literal|false
condition|)
endif|#
directive|endif
block|{
name|QImage
operator|::
name|Format
name|format
init|=
cast|static_cast
argument_list|<
name|QImage
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|device
argument_list|)
operator|->
name|format
argument_list|()
decl_stmt|;
if|if
condition|(
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
operator|||
name|format
operator|==
name|QImage
operator|::
name|Format_RGB32
condition|)
name|d
operator|->
name|glyphCacheFormat
operator|=
name|QFontEngine
operator|::
name|Format_A32
expr_stmt|;
else|else
name|d
operator|->
name|glyphCacheFormat
operator|=
name|QFontEngine
operator|::
name|Format_A8
expr_stmt|;
block|}
else|else
name|d
operator|->
name|glyphCacheFormat
operator|=
name|QFontEngine
operator|::
name|Format_A8
expr_stmt|;
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|end
name|bool
name|QRasterPaintEngine
operator|::
name|end
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"QRasterPaintEngine::end devRect:"
operator|<<
name|d
operator|->
name|deviceRect
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|baseClip
condition|)
block|{
name|dumpClip
argument_list|(
name|d
operator|->
name|rasterBuffer
operator|->
name|width
argument_list|()
argument_list|,
name|d
operator|->
name|rasterBuffer
operator|->
name|height
argument_list|()
argument_list|,
operator|&
operator|*
name|d
operator|->
name|baseClip
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|releaseBuffer
name|void
name|QRasterPaintEngine
operator|::
name|releaseBuffer
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|rasterBuffer
operator|.
name|reset
argument_list|(
operator|new
name|QRasterBuffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|size
name|QSize
name|QRasterPaintEngine
operator|::
name|size
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
return|return
name|QSize
argument_list|(
name|d
operator|->
name|rasterBuffer
operator|->
name|width
argument_list|()
argument_list|,
name|d
operator|->
name|rasterBuffer
operator|->
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
end_ifndef
begin_function
DECL|function|saveBuffer
name|void
name|QRasterPaintEngine
operator|::
name|saveBuffer
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|rasterBuffer
operator|->
name|bufferImage
argument_list|()
operator|.
name|save
argument_list|(
name|s
argument_list|,
literal|"PNG"
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|updateMatrix
name|void
name|QRasterPaintEngine
operator|::
name|updateMatrix
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|)
block|{
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
comment|// FALCON: get rid of this line, see drawImage call below.
name|s
operator|->
name|matrix
operator|=
name|matrix
expr_stmt|;
name|QTransform
operator|::
name|TransformationType
name|txop
init|=
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|txop
condition|)
block|{
case|case
name|QTransform
operator|::
name|TxNone
case|:
name|s
operator|->
name|flags
operator|.
name|int_xform
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QTransform
operator|::
name|TxTranslate
case|:
name|s
operator|->
name|flags
operator|.
name|int_xform
operator|=
name|qreal
argument_list|(
name|int
argument_list|(
name|s
operator|->
name|matrix
operator|.
name|dx
argument_list|()
argument_list|)
argument_list|)
operator|==
name|s
operator|->
name|matrix
operator|.
name|dx
argument_list|()
operator|&&
name|qreal
argument_list|(
name|int
argument_list|(
name|s
operator|->
name|matrix
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|)
operator|==
name|s
operator|->
name|matrix
operator|.
name|dy
argument_list|()
expr_stmt|;
break|break;
case|case
name|QTransform
operator|::
name|TxScale
case|:
name|s
operator|->
name|flags
operator|.
name|int_xform
operator|=
name|qreal
argument_list|(
name|int
argument_list|(
name|s
operator|->
name|matrix
operator|.
name|dx
argument_list|()
argument_list|)
argument_list|)
operator|==
name|s
operator|->
name|matrix
operator|.
name|dx
argument_list|()
operator|&&
name|qreal
argument_list|(
name|int
argument_list|(
name|s
operator|->
name|matrix
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|)
operator|==
name|s
operator|->
name|matrix
operator|.
name|dy
argument_list|()
operator|&&
name|qreal
argument_list|(
name|int
argument_list|(
name|s
operator|->
name|matrix
operator|.
name|m11
argument_list|()
argument_list|)
argument_list|)
operator|==
name|s
operator|->
name|matrix
operator|.
name|m11
argument_list|()
operator|&&
name|qreal
argument_list|(
name|int
argument_list|(
name|s
operator|->
name|matrix
operator|.
name|m22
argument_list|()
argument_list|)
argument_list|)
operator|==
name|s
operator|->
name|matrix
operator|.
name|m22
argument_list|()
expr_stmt|;
break|break;
default|default:
comment|// shear / perspective...
name|s
operator|->
name|flags
operator|.
name|int_xform
operator|=
literal|false
expr_stmt|;
break|break;
block|}
name|s
operator|->
name|flags
operator|.
name|tx_noshear
operator|=
name|qt_scaleForTransform
argument_list|(
name|s
operator|->
name|matrix
argument_list|,
operator|&
name|s
operator|->
name|txscale
argument_list|)
expr_stmt|;
name|ensureOutlineMapper
argument_list|()
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~QRasterPaintEngineState
name|QRasterPaintEngineState
operator|::
name|~
name|QRasterPaintEngineState
parameter_list|()
block|{
if|if
condition|(
name|flags
operator|.
name|has_clip_ownership
condition|)
operator|delete
name|clip
expr_stmt|;
block|}
end_destructor
begin_constructor
DECL|function|QRasterPaintEngineState
name|QRasterPaintEngineState
operator|::
name|QRasterPaintEngineState
parameter_list|()
block|{
name|stroker
operator|=
literal|0
expr_stmt|;
name|fillFlags
operator|=
literal|0
expr_stmt|;
name|strokeFlags
operator|=
literal|0
expr_stmt|;
name|pixmapFlags
operator|=
literal|0
expr_stmt|;
name|intOpacity
operator|=
literal|256
expr_stmt|;
name|txscale
operator|=
literal|1.
expr_stmt|;
name|flags
operator|.
name|fast_pen
operator|=
literal|true
expr_stmt|;
name|flags
operator|.
name|antialiased
operator|=
literal|false
expr_stmt|;
name|flags
operator|.
name|bilinear
operator|=
literal|false
expr_stmt|;
name|flags
operator|.
name|legacy_rounding
operator|=
literal|false
expr_stmt|;
name|flags
operator|.
name|fast_text
operator|=
literal|true
expr_stmt|;
name|flags
operator|.
name|int_xform
operator|=
literal|true
expr_stmt|;
name|flags
operator|.
name|tx_noshear
operator|=
literal|true
expr_stmt|;
name|flags
operator|.
name|fast_images
operator|=
literal|true
expr_stmt|;
name|clip
operator|=
literal|0
expr_stmt|;
name|flags
operator|.
name|has_clip_ownership
operator|=
literal|false
expr_stmt|;
name|dirty
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QRasterPaintEngineState
name|QRasterPaintEngineState
operator|::
name|QRasterPaintEngineState
parameter_list|(
name|QRasterPaintEngineState
modifier|&
name|s
parameter_list|)
member_init_list|:
name|QPainterState
argument_list|(
name|s
argument_list|)
member_init_list|,
name|lastPen
argument_list|(
name|s
operator|.
name|lastPen
argument_list|)
member_init_list|,
name|penData
argument_list|(
name|s
operator|.
name|penData
argument_list|)
member_init_list|,
name|stroker
argument_list|(
name|s
operator|.
name|stroker
argument_list|)
member_init_list|,
name|strokeFlags
argument_list|(
name|s
operator|.
name|strokeFlags
argument_list|)
member_init_list|,
name|lastBrush
argument_list|(
name|s
operator|.
name|lastBrush
argument_list|)
member_init_list|,
name|brushData
argument_list|(
name|s
operator|.
name|brushData
argument_list|)
member_init_list|,
name|fillFlags
argument_list|(
name|s
operator|.
name|fillFlags
argument_list|)
member_init_list|,
name|pixmapFlags
argument_list|(
name|s
operator|.
name|pixmapFlags
argument_list|)
member_init_list|,
name|intOpacity
argument_list|(
name|s
operator|.
name|intOpacity
argument_list|)
member_init_list|,
name|txscale
argument_list|(
name|s
operator|.
name|txscale
argument_list|)
member_init_list|,
name|clip
argument_list|(
name|s
operator|.
name|clip
argument_list|)
member_init_list|,
name|dirty
argument_list|(
name|s
operator|.
name|dirty
argument_list|)
member_init_list|,
name|flag_bits
argument_list|(
name|s
operator|.
name|flag_bits
argument_list|)
block|{
name|brushData
operator|.
name|tempImage
operator|=
literal|0
expr_stmt|;
name|penData
operator|.
name|tempImage
operator|=
literal|0
expr_stmt|;
name|flags
operator|.
name|has_clip_ownership
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|createState
name|QPainterState
modifier|*
name|QRasterPaintEngine
operator|::
name|createState
parameter_list|(
name|QPainterState
modifier|*
name|orig
parameter_list|)
specifier|const
block|{
name|QRasterPaintEngineState
modifier|*
name|s
decl_stmt|;
if|if
condition|(
operator|!
name|orig
condition|)
name|s
operator|=
operator|new
name|QRasterPaintEngineState
argument_list|()
expr_stmt|;
else|else
name|s
operator|=
operator|new
name|QRasterPaintEngineState
argument_list|(
operator|*
cast|static_cast
argument_list|<
name|QRasterPaintEngineState
operator|*
argument_list|>
argument_list|(
name|orig
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setState
name|void
name|QRasterPaintEngine
operator|::
name|setState
parameter_list|(
name|QPainterState
modifier|*
name|s
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QPaintEngineEx
operator|::
name|setState
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|d
operator|->
name|rasterBuffer
operator|->
name|compositionMode
operator|=
name|s
operator|->
name|composition_mode
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn QRasterPaintEngineState *QRasterPaintEngine::state()     \internal */
end_comment
begin_comment
comment|/*!     \fn const QRasterPaintEngineState *QRasterPaintEngine::state() const     \internal */
end_comment
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|penChanged
name|void
name|QRasterPaintEngine
operator|::
name|penChanged
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QRasterPaintEngine::penChanged():"
operator|<<
name|state
argument_list|()
operator|->
name|pen
expr_stmt|;
endif|#
directive|endif
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|s
operator|->
name|strokeFlags
operator||=
name|DirtyPen
expr_stmt|;
name|s
operator|->
name|dirty
operator||=
name|DirtyPen
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|updatePen
name|void
name|QRasterPaintEngine
operator|::
name|updatePen
parameter_list|(
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QRasterPaintEngine::updatePen():"
operator|<<
name|s
operator|->
name|pen
expr_stmt|;
endif|#
directive|endif
name|Qt
operator|::
name|PenStyle
name|pen_style
init|=
name|qpen_style
argument_list|(
name|pen
argument_list|)
decl_stmt|;
name|s
operator|->
name|lastPen
operator|=
name|pen
expr_stmt|;
name|s
operator|->
name|strokeFlags
operator|=
literal|0
expr_stmt|;
name|s
operator|->
name|penData
operator|.
name|clip
operator|=
name|d
operator|->
name|clip
argument_list|()
expr_stmt|;
name|s
operator|->
name|penData
operator|.
name|setup
argument_list|(
name|pen_style
operator|==
name|Qt
operator|::
name|NoPen
condition|?
name|QBrush
argument_list|()
else|:
name|pen
operator|.
name|brush
argument_list|()
argument_list|,
name|s
operator|->
name|intOpacity
argument_list|,
name|s
operator|->
name|composition_mode
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|->
name|strokeFlags
operator|&
name|QRasterPaintEngine
operator|::
name|DirtyTransform
operator|||
name|pen
operator|.
name|brush
argument_list|()
operator|.
name|transform
argument_list|()
operator|.
name|type
argument_list|()
operator|>=
name|QTransform
operator|::
name|TxNone
condition|)
block|{
name|d
operator|->
name|updateMatrixData
argument_list|(
operator|&
name|s
operator|->
name|penData
argument_list|,
name|pen
operator|.
name|brush
argument_list|()
argument_list|,
name|s
operator|->
name|matrix
argument_list|)
expr_stmt|;
block|}
comment|// Slightly ugly handling of an uncommon case... We need to change
comment|// the pen because it is reused in draw_midpoint to decide dashed
comment|// or non-dashed.
if|if
condition|(
name|pen_style
operator|==
name|Qt
operator|::
name|CustomDashLine
operator|&&
name|pen
operator|.
name|dashPattern
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|pen_style
operator|=
name|Qt
operator|::
name|SolidLine
expr_stmt|;
name|s
operator|->
name|lastPen
operator|.
name|setStyle
argument_list|(
name|Qt
operator|::
name|SolidLine
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|basicStroker
operator|.
name|setJoinStyle
argument_list|(
name|qpen_joinStyle
argument_list|(
name|pen
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|basicStroker
operator|.
name|setCapStyle
argument_list|(
name|qpen_capStyle
argument_list|(
name|pen
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|basicStroker
operator|.
name|setMiterLimit
argument_list|(
name|pen
operator|.
name|miterLimit
argument_list|()
argument_list|)
expr_stmt|;
name|qreal
name|penWidth
init|=
name|qpen_widthf
argument_list|(
name|pen
argument_list|)
decl_stmt|;
if|if
condition|(
name|penWidth
operator|==
literal|0
condition|)
name|d
operator|->
name|basicStroker
operator|.
name|setStrokeWidth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|basicStroker
operator|.
name|setStrokeWidth
argument_list|(
name|penWidth
argument_list|)
expr_stmt|;
if|if
condition|(
name|pen_style
operator|==
name|Qt
operator|::
name|SolidLine
condition|)
block|{
name|s
operator|->
name|stroker
operator|=
operator|&
name|d
operator|->
name|basicStroker
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pen_style
operator|!=
name|Qt
operator|::
name|NoPen
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|dashStroker
condition|)
name|d
operator|->
name|dashStroker
operator|.
name|reset
argument_list|(
operator|new
name|QDashStroker
argument_list|(
operator|&
name|d
operator|->
name|basicStroker
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|qt_pen_is_cosmetic
argument_list|(
name|pen
argument_list|,
name|s
operator|->
name|renderHints
argument_list|)
condition|)
block|{
name|d
operator|->
name|dashStroker
operator|->
name|setClipRect
argument_list|(
name|d
operator|->
name|deviceRect
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// ### I've seen this inverted devrect multiple places now...
name|QRectF
name|clipRect
init|=
name|s
operator|->
name|matrix
operator|.
name|inverted
argument_list|()
operator|.
name|mapRect
argument_list|(
name|QRectF
argument_list|(
name|d
operator|->
name|deviceRect
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|->
name|dashStroker
operator|->
name|setClipRect
argument_list|(
name|clipRect
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|dashStroker
operator|->
name|setDashPattern
argument_list|(
name|pen
operator|.
name|dashPattern
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|dashStroker
operator|->
name|setDashOffset
argument_list|(
name|pen
operator|.
name|dashOffset
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|->
name|stroker
operator|=
name|d
operator|->
name|dashStroker
operator|.
name|data
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|s
operator|->
name|stroker
operator|=
literal|0
expr_stmt|;
block|}
name|ensureRasterState
argument_list|()
expr_stmt|;
comment|// needed because of tx_noshear...
name|bool
name|cosmetic
init|=
name|qt_pen_is_cosmetic
argument_list|(
name|pen
argument_list|,
name|s
operator|->
name|renderHints
argument_list|)
decl_stmt|;
name|s
operator|->
name|flags
operator|.
name|fast_pen
operator|=
name|pen_style
operator|>
name|Qt
operator|::
name|NoPen
operator|&&
name|s
operator|->
name|penData
operator|.
name|blend
operator|&&
operator|(
operator|(
name|cosmetic
operator|&&
name|penWidth
operator|<=
literal|1
operator|)
operator|||
operator|(
operator|!
name|cosmetic
operator|&&
name|s
operator|->
name|flags
operator|.
name|tx_noshear
operator|&&
name|penWidth
operator|*
name|s
operator|->
name|txscale
operator|<=
literal|1
operator|)
operator|)
expr_stmt|;
name|s
operator|->
name|flags
operator|.
name|non_complex_pen
operator|=
name|qpen_capStyle
argument_list|(
name|s
operator|->
name|lastPen
argument_list|)
operator|<=
name|Qt
operator|::
name|SquareCap
operator|&&
name|s
operator|->
name|flags
operator|.
name|tx_noshear
expr_stmt|;
name|s
operator|->
name|strokeFlags
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|brushOriginChanged
name|void
name|QRasterPaintEngine
operator|::
name|brushOriginChanged
parameter_list|()
block|{
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QRasterPaintEngine::brushOriginChanged()"
operator|<<
name|s
operator|->
name|brushOrigin
expr_stmt|;
endif|#
directive|endif
name|s
operator|->
name|fillFlags
operator||=
name|DirtyBrushOrigin
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|brushChanged
name|void
name|QRasterPaintEngine
operator|::
name|brushChanged
parameter_list|()
block|{
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QRasterPaintEngine::brushChanged():"
operator|<<
name|s
operator|->
name|brush
expr_stmt|;
endif|#
directive|endif
name|s
operator|->
name|fillFlags
operator||=
name|DirtyBrush
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|updateBrush
name|void
name|QRasterPaintEngine
operator|::
name|updateBrush
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QRasterPaintEngine::updateBrush()"
operator|<<
name|brush
expr_stmt|;
endif|#
directive|endif
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
comment|// must set clip prior to setup, as setup uses it...
name|s
operator|->
name|brushData
operator|.
name|clip
operator|=
name|d
operator|->
name|clip
argument_list|()
expr_stmt|;
name|s
operator|->
name|brushData
operator|.
name|setup
argument_list|(
name|brush
argument_list|,
name|s
operator|->
name|intOpacity
argument_list|,
name|s
operator|->
name|composition_mode
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|->
name|fillFlags
operator|&
name|DirtyTransform
operator|||
name|brush
operator|.
name|transform
argument_list|()
operator|.
name|type
argument_list|()
operator|>=
name|QTransform
operator|::
name|TxNone
condition|)
name|d_func
argument_list|()
operator|->
name|updateMatrixData
argument_list|(
operator|&
name|s
operator|->
name|brushData
argument_list|,
name|brush
argument_list|,
name|d
operator|->
name|brushMatrix
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|->
name|lastBrush
operator|=
name|brush
expr_stmt|;
name|s
operator|->
name|fillFlags
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateOutlineMapper
name|void
name|QRasterPaintEngine
operator|::
name|updateOutlineMapper
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|outlineMapper
operator|->
name|setMatrix
argument_list|(
name|state
argument_list|()
operator|->
name|matrix
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateRasterState
name|void
name|QRasterPaintEngine
operator|::
name|updateRasterState
parameter_list|()
block|{
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|->
name|dirty
operator|&
name|DirtyTransform
condition|)
name|updateMatrix
argument_list|(
name|s
operator|->
name|matrix
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|->
name|dirty
operator|&
operator|(
name|DirtyPen
operator||
name|DirtyCompositionMode
operator||
name|DirtyOpacity
operator|)
condition|)
block|{
specifier|const
name|QPainter
operator|::
name|CompositionMode
name|mode
init|=
name|s
operator|->
name|composition_mode
decl_stmt|;
name|s
operator|->
name|flags
operator|.
name|fast_text
operator|=
operator|(
name|s
operator|->
name|penData
operator|.
name|type
operator|==
name|QSpanData
operator|::
name|Solid
operator|)
operator|&&
name|s
operator|->
name|intOpacity
operator|==
literal|256
operator|&&
operator|(
name|mode
operator|==
name|QPainter
operator|::
name|CompositionMode_Source
operator|||
operator|(
name|mode
operator|==
name|QPainter
operator|::
name|CompositionMode_SourceOver
operator|&&
name|s
operator|->
name|penData
operator|.
name|solid
operator|.
name|color
operator|.
name|isOpaque
argument_list|()
operator|)
operator|)
expr_stmt|;
block|}
name|s
operator|->
name|dirty
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|opacityChanged
name|void
name|QRasterPaintEngine
operator|::
name|opacityChanged
parameter_list|()
block|{
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QRasterPaintEngine::opacityChanged()"
operator|<<
name|s
operator|->
name|opacity
expr_stmt|;
endif|#
directive|endif
name|s
operator|->
name|fillFlags
operator||=
name|DirtyOpacity
expr_stmt|;
name|s
operator|->
name|strokeFlags
operator||=
name|DirtyOpacity
expr_stmt|;
name|s
operator|->
name|pixmapFlags
operator||=
name|DirtyOpacity
expr_stmt|;
name|s
operator|->
name|dirty
operator||=
name|DirtyOpacity
expr_stmt|;
name|s
operator|->
name|intOpacity
operator|=
call|(
name|int
call|)
argument_list|(
name|s
operator|->
name|opacity
operator|*
literal|256
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|compositionModeChanged
name|void
name|QRasterPaintEngine
operator|::
name|compositionModeChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QRasterPaintEngine::compositionModeChanged()"
operator|<<
name|s
operator|->
name|composition_mode
expr_stmt|;
endif|#
directive|endif
name|s
operator|->
name|fillFlags
operator||=
name|DirtyCompositionMode
expr_stmt|;
name|s
operator|->
name|dirty
operator||=
name|DirtyCompositionMode
expr_stmt|;
name|s
operator|->
name|strokeFlags
operator||=
name|DirtyCompositionMode
expr_stmt|;
name|d
operator|->
name|rasterBuffer
operator|->
name|compositionMode
operator|=
name|s
operator|->
name|composition_mode
expr_stmt|;
name|d
operator|->
name|recalculateFastImages
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|renderHintsChanged
name|void
name|QRasterPaintEngine
operator|::
name|renderHintsChanged
parameter_list|()
block|{
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QRasterPaintEngine::renderHintsChanged()"
operator|<<
name|hex
operator|<<
name|s
operator|->
name|renderHints
expr_stmt|;
endif|#
directive|endif
name|bool
name|was_aa
init|=
name|s
operator|->
name|flags
operator|.
name|antialiased
decl_stmt|;
name|bool
name|was_bilinear
init|=
name|s
operator|->
name|flags
operator|.
name|bilinear
decl_stmt|;
name|s
operator|->
name|flags
operator|.
name|antialiased
operator|=
name|bool
argument_list|(
name|s
operator|->
name|renderHints
operator|&
operator|(
name|QPainter
operator|::
name|Antialiasing
operator||
name|QPainter
operator|::
name|HighQualityAntialiasing
operator|)
argument_list|)
expr_stmt|;
name|s
operator|->
name|flags
operator|.
name|bilinear
operator|=
name|bool
argument_list|(
name|s
operator|->
name|renderHints
operator|&
name|QPainter
operator|::
name|SmoothPixmapTransform
argument_list|)
expr_stmt|;
name|s
operator|->
name|flags
operator|.
name|legacy_rounding
operator|=
operator|!
name|bool
argument_list|(
name|s
operator|->
name|renderHints
operator|&
name|QPainter
operator|::
name|Antialiasing
argument_list|)
operator|&&
name|bool
argument_list|(
name|s
operator|->
name|renderHints
operator|&
name|QPainter
operator|::
name|Qt4CompatiblePainting
argument_list|)
expr_stmt|;
if|if
condition|(
name|was_aa
operator|!=
name|s
operator|->
name|flags
operator|.
name|antialiased
condition|)
name|s
operator|->
name|strokeFlags
operator||=
name|DirtyHints
expr_stmt|;
if|if
condition|(
name|was_bilinear
operator|!=
name|s
operator|->
name|flags
operator|.
name|bilinear
condition|)
block|{
name|s
operator|->
name|strokeFlags
operator||=
name|DirtyPen
expr_stmt|;
name|s
operator|->
name|fillFlags
operator||=
name|DirtyBrush
expr_stmt|;
block|}
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|recalculateFastImages
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|transformChanged
name|void
name|QRasterPaintEngine
operator|::
name|transformChanged
parameter_list|()
block|{
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QRasterPaintEngine::transformChanged()"
operator|<<
name|s
operator|->
name|matrix
expr_stmt|;
endif|#
directive|endif
name|s
operator|->
name|fillFlags
operator||=
name|DirtyTransform
expr_stmt|;
name|s
operator|->
name|strokeFlags
operator||=
name|DirtyTransform
expr_stmt|;
name|s
operator|->
name|dirty
operator||=
name|DirtyTransform
expr_stmt|;
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|recalculateFastImages
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|clipEnabledChanged
name|void
name|QRasterPaintEngine
operator|::
name|clipEnabledChanged
parameter_list|()
block|{
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QRasterPaintEngine::clipEnabledChanged()"
operator|<<
name|s
operator|->
name|clipEnabled
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|s
operator|->
name|clip
condition|)
block|{
name|s
operator|->
name|clip
operator|->
name|enabled
operator|=
name|s
operator|->
name|clipEnabled
expr_stmt|;
name|s
operator|->
name|fillFlags
operator||=
name|DirtyClipEnabled
expr_stmt|;
name|s
operator|->
name|strokeFlags
operator||=
name|DirtyClipEnabled
expr_stmt|;
name|s
operator|->
name|pixmapFlags
operator||=
name|DirtyClipEnabled
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawImage
name|void
name|QRasterPaintEnginePrivate
operator|::
name|drawImage
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pt
parameter_list|,
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
name|SrcOverBlendFunc
name|func
parameter_list|,
specifier|const
name|QRect
modifier|&
name|clip
parameter_list|,
name|int
name|alpha
parameter_list|,
specifier|const
name|QRect
modifier|&
name|sr
parameter_list|)
block|{
if|if
condition|(
name|alpha
operator|==
literal|0
operator|||
operator|!
name|clip
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|Q_ASSERT
argument_list|(
name|img
operator|.
name|depth
argument_list|()
operator|>=
literal|8
argument_list|)
expr_stmt|;
name|int
name|srcBPL
init|=
name|img
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|srcBits
init|=
name|img
operator|.
name|bits
argument_list|()
decl_stmt|;
name|int
name|srcSize
init|=
name|img
operator|.
name|depth
argument_list|()
operator|>>
literal|3
decl_stmt|;
comment|// This is the part that is incompatible with lower than 8-bit..
name|int
name|iw
init|=
name|img
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|ih
init|=
name|img
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iw
operator|=
name|sr
operator|.
name|width
argument_list|()
expr_stmt|;
name|ih
operator|=
name|sr
operator|.
name|height
argument_list|()
expr_stmt|;
comment|// Adjust the image according to the source offset...
name|srcBits
operator|+=
operator|(
operator|(
name|sr
operator|.
name|y
argument_list|()
operator|*
name|srcBPL
operator|)
operator|+
name|sr
operator|.
name|x
argument_list|()
operator|*
name|srcSize
operator|)
expr_stmt|;
block|}
comment|// adapt the x parameters
name|int
name|x
init|=
name|qRound
argument_list|(
name|pt
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|cx1
init|=
name|clip
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|cx2
init|=
name|clip
operator|.
name|x
argument_list|()
operator|+
name|clip
operator|.
name|width
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|<
name|cx1
condition|)
block|{
name|int
name|d
init|=
name|cx1
operator|-
name|x
decl_stmt|;
name|srcBits
operator|+=
name|srcSize
operator|*
name|d
expr_stmt|;
name|iw
operator|-=
name|d
expr_stmt|;
name|x
operator|=
name|cx1
expr_stmt|;
block|}
if|if
condition|(
name|x
operator|+
name|iw
operator|>
name|cx2
condition|)
block|{
name|int
name|d
init|=
name|x
operator|+
name|iw
operator|-
name|cx2
decl_stmt|;
name|iw
operator|-=
name|d
expr_stmt|;
block|}
if|if
condition|(
name|iw
operator|<=
literal|0
condition|)
return|return;
comment|// adapt the y paremeters...
name|int
name|cy1
init|=
name|clip
operator|.
name|y
argument_list|()
decl_stmt|;
name|int
name|cy2
init|=
name|clip
operator|.
name|y
argument_list|()
operator|+
name|clip
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|qRound
argument_list|(
name|pt
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|y
operator|<
name|cy1
condition|)
block|{
name|int
name|d
init|=
name|cy1
operator|-
name|y
decl_stmt|;
name|srcBits
operator|+=
name|srcBPL
operator|*
name|d
expr_stmt|;
name|ih
operator|-=
name|d
expr_stmt|;
name|y
operator|=
name|cy1
expr_stmt|;
block|}
if|if
condition|(
name|y
operator|+
name|ih
operator|>
name|cy2
condition|)
block|{
name|int
name|d
init|=
name|y
operator|+
name|ih
operator|-
name|cy2
decl_stmt|;
name|ih
operator|-=
name|d
expr_stmt|;
block|}
if|if
condition|(
name|ih
operator|<=
literal|0
condition|)
return|return;
comment|// call the blend function...
name|int
name|dstSize
init|=
name|rasterBuffer
operator|->
name|bytesPerPixel
argument_list|()
decl_stmt|;
name|int
name|dstBPL
init|=
name|rasterBuffer
operator|->
name|bytesPerLine
argument_list|()
decl_stmt|;
name|func
argument_list|(
name|rasterBuffer
operator|->
name|buffer
argument_list|()
operator|+
name|x
operator|*
name|dstSize
operator|+
name|y
operator|*
name|dstBPL
argument_list|,
name|dstBPL
argument_list|,
name|srcBits
argument_list|,
name|srcBPL
argument_list|,
name|iw
argument_list|,
name|ih
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|systemStateChanged
name|void
name|QRasterPaintEnginePrivate
operator|::
name|systemStateChanged
parameter_list|()
block|{
name|deviceRectUnclipped
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|qMin
argument_list|(
name|QT_RASTER_COORD_LIMIT
argument_list|,
name|device
operator|->
name|width
argument_list|()
argument_list|)
argument_list|,
name|qMin
argument_list|(
name|QT_RASTER_COORD_LIMIT
argument_list|,
name|device
operator|->
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|systemClip
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QRegion
name|clippedDeviceRgn
init|=
name|systemClip
operator|&
name|deviceRectUnclipped
decl_stmt|;
name|deviceRect
operator|=
name|clippedDeviceRgn
operator|.
name|boundingRect
argument_list|()
expr_stmt|;
name|baseClip
operator|->
name|setClipRegion
argument_list|(
name|clippedDeviceRgn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deviceRect
operator|=
name|deviceRectUnclipped
expr_stmt|;
name|baseClip
operator|->
name|setClipRect
argument_list|(
name|deviceRect
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"systemStateChanged"
operator|<<
name|this
operator|<<
literal|"deviceRect"
operator|<<
name|deviceRect
operator|<<
name|deviceRectUnclipped
operator|<<
name|systemClip
expr_stmt|;
endif|#
directive|endif
name|exDeviceRect
operator|=
name|deviceRect
expr_stmt|;
name|Q_Q
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|state
argument_list|()
condition|)
block|{
name|q
operator|->
name|state
argument_list|()
operator|->
name|strokeFlags
operator||=
name|QPaintEngine
operator|::
name|DirtyClipRegion
expr_stmt|;
name|q
operator|->
name|state
argument_list|()
operator|->
name|fillFlags
operator||=
name|QPaintEngine
operator|::
name|DirtyClipRegion
expr_stmt|;
name|q
operator|->
name|state
argument_list|()
operator|->
name|pixmapFlags
operator||=
name|QPaintEngine
operator|::
name|DirtyClipRegion
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateMatrixData
name|void
name|QRasterPaintEnginePrivate
operator|::
name|updateMatrixData
parameter_list|(
name|QSpanData
modifier|*
name|spanData
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|b
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|m
parameter_list|)
block|{
if|if
condition|(
name|b
operator|.
name|d
operator|->
name|style
operator|==
name|Qt
operator|::
name|NoBrush
operator|||
name|b
operator|.
name|d
operator|->
name|style
operator|==
name|Qt
operator|::
name|SolidPattern
condition|)
return|return;
name|Q_Q
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|bool
name|bilinear
init|=
name|q
operator|->
name|state
argument_list|()
operator|->
name|flags
operator|.
name|bilinear
decl_stmt|;
if|if
condition|(
name|b
operator|.
name|d
operator|->
name|transform
operator|.
name|type
argument_list|()
operator|>
name|QTransform
operator|::
name|TxNone
condition|)
block|{
comment|// FALCON: optimize
name|spanData
operator|->
name|setupMatrix
argument_list|(
name|b
operator|.
name|transform
argument_list|()
operator|*
name|m
argument_list|,
name|bilinear
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|m
operator|.
name|type
argument_list|()
operator|<=
name|QTransform
operator|::
name|TxTranslate
condition|)
block|{
comment|// specialize setupMatrix for translation matrices
comment|// to avoid needless matrix inversion
name|spanData
operator|->
name|m11
operator|=
literal|1
expr_stmt|;
name|spanData
operator|->
name|m12
operator|=
literal|0
expr_stmt|;
name|spanData
operator|->
name|m13
operator|=
literal|0
expr_stmt|;
name|spanData
operator|->
name|m21
operator|=
literal|0
expr_stmt|;
name|spanData
operator|->
name|m22
operator|=
literal|1
expr_stmt|;
name|spanData
operator|->
name|m23
operator|=
literal|0
expr_stmt|;
name|spanData
operator|->
name|m33
operator|=
literal|1
expr_stmt|;
name|spanData
operator|->
name|dx
operator|=
operator|-
name|m
operator|.
name|dx
argument_list|()
expr_stmt|;
name|spanData
operator|->
name|dy
operator|=
operator|-
name|m
operator|.
name|dy
argument_list|()
expr_stmt|;
name|spanData
operator|->
name|txop
operator|=
name|m
operator|.
name|type
argument_list|()
expr_stmt|;
name|spanData
operator|->
name|bilinear
operator|=
name|bilinear
expr_stmt|;
name|spanData
operator|->
name|fast_matrix
operator|=
name|qAbs
argument_list|(
name|m
operator|.
name|dx
argument_list|()
argument_list|)
operator|<
literal|1e4
operator|&&
name|qAbs
argument_list|(
name|m
operator|.
name|dy
argument_list|()
argument_list|)
operator|<
literal|1e4
expr_stmt|;
name|spanData
operator|->
name|adjustSpanMethods
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|spanData
operator|->
name|setupMatrix
argument_list|(
name|m
argument_list|,
name|bilinear
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// #define QT_CLIPPING_RATIOS
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_CLIPPING_RATIOS
end_ifdef
begin_decl_stmt
DECL|variable|rectClips
name|int
name|rectClips
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|regionClips
name|int
name|regionClips
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|totalClips
name|int
name|totalClips
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|checkClipRatios
specifier|static
name|void
name|checkClipRatios
parameter_list|(
name|QRasterPaintEnginePrivate
modifier|*
name|d
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|clip
argument_list|()
operator|->
name|hasRectClip
condition|)
name|rectClips
operator|++
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|clip
argument_list|()
operator|->
name|hasRegionClip
condition|)
name|regionClips
operator|++
expr_stmt|;
name|totalClips
operator|++
expr_stmt|;
if|if
condition|(
operator|(
name|totalClips
operator|%
literal|5000
operator|)
operator|==
literal|0
condition|)
block|{
name|printf
argument_list|(
literal|"Clipping ratio: rectangular=%f%%, region=%f%%, complex=%f%%\n"
argument_list|,
name|rectClips
operator|*
literal|100.0
operator|/
operator|(
name|qreal
operator|)
name|totalClips
argument_list|,
name|regionClips
operator|*
literal|100.0
operator|/
operator|(
name|qreal
operator|)
name|totalClips
argument_list|,
operator|(
name|totalClips
operator|-
name|rectClips
operator|-
name|regionClips
operator|)
operator|*
literal|100.0
operator|/
operator|(
name|qreal
operator|)
name|totalClips
argument_list|)
expr_stmt|;
name|totalClips
operator|=
literal|0
expr_stmt|;
name|rectClips
operator|=
literal|0
expr_stmt|;
name|regionClips
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qrasterpaintengine_state_setNoClip
specifier|static
name|void
name|qrasterpaintengine_state_setNoClip
parameter_list|(
name|QRasterPaintEngineState
modifier|*
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|->
name|flags
operator|.
name|has_clip_ownership
condition|)
operator|delete
name|s
operator|->
name|clip
expr_stmt|;
name|s
operator|->
name|clip
operator|=
literal|0
expr_stmt|;
name|s
operator|->
name|flags
operator|.
name|has_clip_ownership
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qrasterpaintengine_dirty_clip
specifier|static
name|void
name|qrasterpaintengine_dirty_clip
parameter_list|(
name|QRasterPaintEnginePrivate
modifier|*
name|d
parameter_list|,
name|QRasterPaintEngineState
modifier|*
name|s
parameter_list|)
block|{
name|s
operator|->
name|fillFlags
operator||=
name|QPaintEngine
operator|::
name|DirtyClipPath
expr_stmt|;
name|s
operator|->
name|strokeFlags
operator||=
name|QPaintEngine
operator|::
name|DirtyClipPath
expr_stmt|;
name|s
operator|->
name|pixmapFlags
operator||=
name|QPaintEngine
operator|::
name|DirtyClipPath
expr_stmt|;
name|d
operator|->
name|solid_color_filler
operator|.
name|clip
operator|=
name|d
operator|->
name|clip
argument_list|()
expr_stmt|;
name|d
operator|->
name|solid_color_filler
operator|.
name|adjustSpanMethods
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|dumpClip
argument_list|(
name|d
operator|->
name|rasterBuffer
operator|->
name|width
argument_list|()
argument_list|,
name|d
operator|->
name|rasterBuffer
operator|->
name|height
argument_list|()
argument_list|,
operator|&
operator|*
name|d
operator|->
name|clip
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|clip
name|void
name|QRasterPaintEngine
operator|::
name|clip
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QRasterPaintEngine::clip(): "
operator|<<
name|path
operator|<<
name|op
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|elements
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|" - "
operator|<<
name|path
operator|.
name|elements
argument_list|()
index|[
name|i
index|]
operator|<<
literal|'('
operator|<<
name|path
operator|.
name|points
argument_list|()
index|[
name|i
operator|*
literal|2
index|]
operator|<<
literal|", "
operator|<<
name|path
operator|.
name|points
argument_list|()
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|<<
literal|')'
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|" ---- "
operator|<<
literal|'('
operator|<<
name|path
operator|.
name|points
argument_list|()
index|[
name|i
operator|*
literal|2
index|]
operator|<<
literal|", "
operator|<<
name|path
operator|.
name|points
argument_list|()
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|<<
literal|')'
expr_stmt|;
block|}
block|}
endif|#
directive|endif
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
comment|// There are some cases that are not supported by clip(QRect)
if|if
condition|(
name|op
operator|!=
name|Qt
operator|::
name|IntersectClip
operator|||
operator|!
name|s
operator|->
name|clip
operator|||
name|s
operator|->
name|clip
operator|->
name|hasRectClip
operator|||
name|s
operator|->
name|clip
operator|->
name|hasRegionClip
condition|)
block|{
if|if
condition|(
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|<=
name|QTransform
operator|::
name|TxScale
operator|&&
name|path
operator|.
name|isRect
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" --- optimizing vector clip to rect clip..."
expr_stmt|;
endif|#
directive|endif
specifier|const
name|qreal
modifier|*
name|points
init|=
name|path
operator|.
name|points
argument_list|()
decl_stmt|;
name|QRectF
name|r
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|,
name|points
index|[
literal|4
index|]
operator|-
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|5
index|]
operator|-
name|points
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|setClipRectInDeviceCoords
argument_list|(
name|s
operator|->
name|matrix
operator|.
name|mapRect
argument_list|(
name|r
argument_list|)
operator|.
name|toRect
argument_list|()
argument_list|,
name|op
argument_list|)
condition|)
return|return;
block|}
block|}
if|if
condition|(
name|op
operator|==
name|Qt
operator|::
name|NoClip
condition|)
block|{
name|qrasterpaintengine_state_setNoClip
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QClipData
modifier|*
name|base
init|=
name|d
operator|->
name|baseClip
operator|.
name|data
argument_list|()
decl_stmt|;
comment|// Intersect with current clip when available...
if|if
condition|(
name|op
operator|==
name|Qt
operator|::
name|IntersectClip
operator|&&
name|s
operator|->
name|clip
condition|)
name|base
operator|=
name|s
operator|->
name|clip
expr_stmt|;
comment|// We always intersect, except when there is nothing to
comment|// intersect with, in which case we simplify the operation to
comment|// a replace...
name|Qt
operator|::
name|ClipOperation
name|isectOp
init|=
name|Qt
operator|::
name|IntersectClip
decl_stmt|;
if|if
condition|(
name|base
operator|==
literal|0
condition|)
name|isectOp
operator|=
name|Qt
operator|::
name|ReplaceClip
expr_stmt|;
name|QClipData
modifier|*
name|newClip
init|=
operator|new
name|QClipData
argument_list|(
name|d
operator|->
name|rasterBuffer
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|newClip
operator|->
name|initialize
argument_list|()
expr_stmt|;
name|ClipData
name|clipData
init|=
block|{
name|base
block|,
name|newClip
block|,
name|isectOp
block|}
decl_stmt|;
name|ensureOutlineMapper
argument_list|()
expr_stmt|;
name|d
operator|->
name|rasterize
argument_list|(
name|d
operator|->
name|outlineMapper
operator|->
name|convertPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|qt_span_clip
argument_list|,
operator|&
name|clipData
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|newClip
operator|->
name|fixup
argument_list|()
expr_stmt|;
if|if
condition|(
name|s
operator|->
name|flags
operator|.
name|has_clip_ownership
condition|)
operator|delete
name|s
operator|->
name|clip
expr_stmt|;
name|s
operator|->
name|clip
operator|=
name|newClip
expr_stmt|;
name|s
operator|->
name|flags
operator|.
name|has_clip_ownership
operator|=
literal|true
expr_stmt|;
block|}
name|qrasterpaintengine_dirty_clip
argument_list|(
name|d
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|clip
name|void
name|QRasterPaintEngine
operator|::
name|clip
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QRasterPaintEngine::clip(): "
operator|<<
name|rect
operator|<<
name|op
expr_stmt|;
endif|#
directive|endif
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|==
name|Qt
operator|::
name|NoClip
condition|)
block|{
name|qrasterpaintengine_state_setNoClip
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|>
name|QTransform
operator|::
name|TxScale
condition|)
block|{
name|QPaintEngineEx
operator|::
name|clip
argument_list|(
name|rect
argument_list|,
name|op
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
operator|!
name|setClipRectInDeviceCoords
argument_list|(
name|s
operator|->
name|matrix
operator|.
name|mapRect
argument_list|(
name|rect
argument_list|)
argument_list|,
name|op
argument_list|)
condition|)
block|{
name|QPaintEngineEx
operator|::
name|clip
argument_list|(
name|rect
argument_list|,
name|op
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
end_function
begin_function
DECL|function|setClipRectInDeviceCoords
name|bool
name|QRasterPaintEngine
operator|::
name|setClipRectInDeviceCoords
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRect
name|clipRect
init|=
name|r
operator|&
name|d
operator|->
name|deviceRect
decl_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|==
name|Qt
operator|::
name|ReplaceClip
operator|||
name|s
operator|->
name|clip
operator|==
literal|0
condition|)
block|{
comment|// No current clip, hence we intersect with sysclip and be
comment|// done with it...
name|QRegion
name|clipRegion
init|=
name|systemClip
argument_list|()
decl_stmt|;
name|QClipData
modifier|*
name|clip
init|=
operator|new
name|QClipData
argument_list|(
name|d
operator|->
name|rasterBuffer
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clipRegion
operator|.
name|isEmpty
argument_list|()
condition|)
name|clip
operator|->
name|setClipRect
argument_list|(
name|clipRect
argument_list|)
expr_stmt|;
else|else
name|clip
operator|->
name|setClipRegion
argument_list|(
name|clipRegion
operator|&
name|clipRect
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|->
name|flags
operator|.
name|has_clip_ownership
condition|)
operator|delete
name|s
operator|->
name|clip
expr_stmt|;
name|s
operator|->
name|clip
operator|=
name|clip
expr_stmt|;
name|s
operator|->
name|clip
operator|->
name|enabled
operator|=
literal|true
expr_stmt|;
name|s
operator|->
name|flags
operator|.
name|has_clip_ownership
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|Qt
operator|::
name|IntersectClip
condition|)
block|{
comment|// intersect clip with current clip
name|QClipData
modifier|*
name|base
init|=
name|s
operator|->
name|clip
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|base
argument_list|)
expr_stmt|;
if|if
condition|(
name|base
operator|->
name|hasRectClip
operator|||
name|base
operator|->
name|hasRegionClip
condition|)
block|{
if|if
condition|(
operator|!
name|s
operator|->
name|flags
operator|.
name|has_clip_ownership
condition|)
block|{
name|s
operator|->
name|clip
operator|=
operator|new
name|QClipData
argument_list|(
name|d
operator|->
name|rasterBuffer
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|->
name|flags
operator|.
name|has_clip_ownership
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|base
operator|->
name|hasRectClip
condition|)
name|s
operator|->
name|clip
operator|->
name|setClipRect
argument_list|(
name|base
operator|->
name|clipRect
operator|&
name|clipRect
argument_list|)
expr_stmt|;
else|else
name|s
operator|->
name|clip
operator|->
name|setClipRegion
argument_list|(
name|base
operator|->
name|clipRegion
operator|&
name|clipRect
argument_list|)
expr_stmt|;
name|s
operator|->
name|clip
operator|->
name|enabled
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
name|qrasterpaintengine_dirty_clip
argument_list|(
name|d
argument_list|,
name|s
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|clip
name|void
name|QRasterPaintEngine
operator|::
name|clip
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QRasterPaintEngine::clip(): "
operator|<<
name|region
operator|<<
name|op
expr_stmt|;
endif|#
directive|endif
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|region
operator|.
name|rectCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|clip
argument_list|(
name|region
operator|.
name|boundingRect
argument_list|()
argument_list|,
name|op
argument_list|)
expr_stmt|;
return|return;
block|}
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
specifier|const
name|QClipData
modifier|*
name|clip
init|=
name|d
operator|->
name|clip
argument_list|()
decl_stmt|;
specifier|const
name|QClipData
modifier|*
name|baseClip
init|=
name|d
operator|->
name|baseClip
operator|.
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|==
name|Qt
operator|::
name|NoClip
condition|)
block|{
name|qrasterpaintengine_state_setNoClip
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|>
name|QTransform
operator|::
name|TxScale
operator|||
operator|(
name|op
operator|==
name|Qt
operator|::
name|IntersectClip
operator|&&
operator|!
name|clip
operator|->
name|hasRectClip
operator|&&
operator|!
name|clip
operator|->
name|hasRegionClip
operator|)
operator|||
operator|(
name|op
operator|==
name|Qt
operator|::
name|ReplaceClip
operator|&&
operator|!
name|baseClip
operator|->
name|hasRectClip
operator|&&
operator|!
name|baseClip
operator|->
name|hasRegionClip
operator|)
condition|)
block|{
name|QPaintEngineEx
operator|::
name|clip
argument_list|(
name|region
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QClipData
modifier|*
name|curClip
decl_stmt|;
name|QClipData
modifier|*
name|newClip
decl_stmt|;
if|if
condition|(
name|op
operator|==
name|Qt
operator|::
name|IntersectClip
condition|)
name|curClip
operator|=
name|clip
expr_stmt|;
else|else
name|curClip
operator|=
name|baseClip
expr_stmt|;
if|if
condition|(
name|s
operator|->
name|flags
operator|.
name|has_clip_ownership
condition|)
block|{
name|newClip
operator|=
name|s
operator|->
name|clip
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|newClip
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newClip
operator|=
operator|new
name|QClipData
argument_list|(
name|d
operator|->
name|rasterBuffer
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|->
name|clip
operator|=
name|newClip
expr_stmt|;
name|s
operator|->
name|flags
operator|.
name|has_clip_ownership
operator|=
literal|true
expr_stmt|;
block|}
name|QRegion
name|r
init|=
name|s
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|curClip
operator|->
name|hasRectClip
condition|)
name|newClip
operator|->
name|setClipRegion
argument_list|(
name|r
operator|&
name|curClip
operator|->
name|clipRect
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|curClip
operator|->
name|hasRegionClip
condition|)
name|newClip
operator|->
name|setClipRegion
argument_list|(
name|r
operator|&
name|curClip
operator|->
name|clipRegion
argument_list|)
expr_stmt|;
name|qrasterpaintengine_dirty_clip
argument_list|(
name|d
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!  \fn const QClipData *QRasterPaintEngine::clipData() const   \internal */
end_comment
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|fillPath
name|void
name|QRasterPaintEngine
operator|::
name|fillPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
name|QSpanData
modifier|*
name|fillData
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" --- fillPath, bounds="
operator|<<
name|path
operator|.
name|boundingRect
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|fillData
operator|->
name|blend
condition|)
return|return;
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
specifier|const
name|QRectF
name|controlPointRect
init|=
name|path
operator|.
name|controlPointRect
argument_list|()
decl_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|deviceRect
init|=
name|s
operator|->
name|matrix
operator|.
name|mapRect
argument_list|(
name|controlPointRect
argument_list|)
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|ProcessSpans
name|blend
init|=
name|d
operator|->
name|getBrushFunc
argument_list|(
name|deviceRect
argument_list|,
name|fillData
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|do_clip
init|=
operator|(
name|deviceRect
operator|.
name|left
argument_list|()
operator|<
operator|-
name|QT_RASTER_COORD_LIMIT
operator|||
name|deviceRect
operator|.
name|right
argument_list|()
operator|>
name|QT_RASTER_COORD_LIMIT
operator|||
name|deviceRect
operator|.
name|top
argument_list|()
operator|<
operator|-
name|QT_RASTER_COORD_LIMIT
operator|||
name|deviceRect
operator|.
name|bottom
argument_list|()
operator|>
name|QT_RASTER_COORD_LIMIT
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|->
name|flags
operator|.
name|antialiased
operator|&&
operator|!
name|do_clip
condition|)
block|{
name|d
operator|->
name|initializeRasterizer
argument_list|(
name|fillData
argument_list|)
expr_stmt|;
name|d
operator|->
name|rasterizer
operator|->
name|rasterize
argument_list|(
name|path
operator|*
name|s
operator|->
name|matrix
argument_list|,
name|path
operator|.
name|fillRule
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|ensureOutlineMapper
argument_list|()
expr_stmt|;
name|d
operator|->
name|rasterize
argument_list|(
name|d
operator|->
name|outlineMapper
operator|->
name|convertPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|blend
argument_list|,
name|fillData
argument_list|,
name|d
operator|->
name|rasterBuffer
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillRect_normalized
specifier|static
name|void
name|fillRect_normalized
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|,
name|QSpanData
modifier|*
name|data
parameter_list|,
name|QRasterPaintEnginePrivate
modifier|*
name|pe
parameter_list|)
block|{
name|int
name|x1
decl_stmt|,
name|x2
decl_stmt|,
name|y1
decl_stmt|,
name|y2
decl_stmt|;
name|bool
name|rectClipped
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|clip
condition|)
block|{
name|x1
operator|=
name|qMax
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|data
operator|->
name|clip
operator|->
name|xmin
argument_list|)
expr_stmt|;
name|x2
operator|=
name|qMin
argument_list|(
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|data
operator|->
name|clip
operator|->
name|xmax
argument_list|)
expr_stmt|;
name|y1
operator|=
name|qMax
argument_list|(
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|data
operator|->
name|clip
operator|->
name|ymin
argument_list|)
expr_stmt|;
name|y2
operator|=
name|qMin
argument_list|(
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
argument_list|,
name|data
operator|->
name|clip
operator|->
name|ymax
argument_list|)
expr_stmt|;
name|rectClipped
operator|=
name|data
operator|->
name|clip
operator|->
name|hasRectClip
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pe
condition|)
block|{
name|x1
operator|=
name|qMax
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|pe
operator|->
name|deviceRect
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|x2
operator|=
name|qMin
argument_list|(
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|pe
operator|->
name|deviceRect
operator|.
name|x
argument_list|()
operator|+
name|pe
operator|->
name|deviceRect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|y1
operator|=
name|qMax
argument_list|(
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|pe
operator|->
name|deviceRect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|y2
operator|=
name|qMin
argument_list|(
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
argument_list|,
name|pe
operator|->
name|deviceRect
operator|.
name|y
argument_list|()
operator|+
name|pe
operator|->
name|deviceRect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|x1
operator|=
name|qMax
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|x2
operator|=
name|qMin
argument_list|(
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|data
operator|->
name|rasterBuffer
operator|->
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|y1
operator|=
name|qMax
argument_list|(
name|r
operator|.
name|y
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|y2
operator|=
name|qMin
argument_list|(
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
argument_list|,
name|data
operator|->
name|rasterBuffer
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|x2
operator|<=
name|x1
operator|||
name|y2
operator|<=
name|y1
condition|)
return|return;
specifier|const
name|int
name|width
init|=
name|x2
operator|-
name|x1
decl_stmt|;
specifier|const
name|int
name|height
init|=
name|y2
operator|-
name|y1
decl_stmt|;
name|bool
name|isUnclipped
init|=
name|rectClipped
operator|||
operator|(
name|pe
operator|&&
name|pe
operator|->
name|isUnclipped_normalized
argument_list|(
name|QRect
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|pe
operator|&&
name|isUnclipped
condition|)
block|{
specifier|const
name|QPainter
operator|::
name|CompositionMode
name|mode
init|=
name|pe
operator|->
name|rasterBuffer
operator|->
name|compositionMode
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|fillRect
operator|&&
operator|(
name|mode
operator|==
name|QPainter
operator|::
name|CompositionMode_Source
operator|||
operator|(
name|mode
operator|==
name|QPainter
operator|::
name|CompositionMode_SourceOver
operator|&&
name|data
operator|->
name|solid
operator|.
name|color
operator|.
name|isOpaque
argument_list|()
operator|)
operator|)
condition|)
block|{
name|data
operator|->
name|fillRect
argument_list|(
name|data
operator|->
name|rasterBuffer
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|data
operator|->
name|solid
operator|.
name|color
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|ProcessSpans
name|blend
init|=
name|isUnclipped
condition|?
name|data
operator|->
name|unclipped_blend
else|:
name|data
operator|->
name|blend
decl_stmt|;
specifier|const
name|int
name|nspans
init|=
literal|256
decl_stmt|;
name|QT_FT_Span
name|spans
index|[
name|nspans
index|]
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|data
operator|->
name|blend
argument_list|)
expr_stmt|;
name|int
name|y
init|=
name|y1
decl_stmt|;
while|while
condition|(
name|y
operator|<
name|y2
condition|)
block|{
name|int
name|n
init|=
name|qMin
argument_list|(
name|nspans
argument_list|,
name|y2
operator|-
name|y
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|n
condition|)
block|{
name|spans
index|[
name|i
index|]
operator|.
name|x
operator|=
name|x1
expr_stmt|;
name|spans
index|[
name|i
index|]
operator|.
name|len
operator|=
name|width
expr_stmt|;
name|spans
index|[
name|i
index|]
operator|.
name|y
operator|=
name|y
operator|+
name|i
expr_stmt|;
name|spans
index|[
name|i
index|]
operator|.
name|coverage
operator|=
literal|255
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|blend
argument_list|(
name|n
argument_list|,
name|spans
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|y
operator|+=
name|n
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|drawRects
name|void
name|QRasterPaintEngine
operator|::
name|drawRects
parameter_list|(
specifier|const
name|QRect
modifier|*
name|rects
parameter_list|,
name|int
name|rectCount
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|(
literal|" - QRasterPaintEngine::drawRect(), rectCount=%d"
argument_list|,
name|rectCount
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|ensureRasterState
argument_list|()
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
comment|// Fill
name|ensureBrush
argument_list|()
expr_stmt|;
if|if
condition|(
name|s
operator|->
name|brushData
operator|.
name|blend
condition|)
block|{
if|if
condition|(
operator|!
name|s
operator|->
name|flags
operator|.
name|antialiased
operator|&&
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|<=
name|QTransform
operator|::
name|TxTranslate
condition|)
block|{
specifier|const
name|QRect
modifier|*
name|r
init|=
name|rects
decl_stmt|;
specifier|const
name|QRect
modifier|*
name|lastRect
init|=
name|rects
operator|+
name|rectCount
decl_stmt|;
name|int
name|offset_x
init|=
name|int
argument_list|(
name|s
operator|->
name|matrix
operator|.
name|dx
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|offset_y
init|=
name|int
argument_list|(
name|s
operator|->
name|matrix
operator|.
name|dy
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|r
operator|<
name|lastRect
condition|)
block|{
name|QRect
name|rect
init|=
name|r
operator|->
name|normalized
argument_list|()
decl_stmt|;
name|QRect
name|rr
init|=
name|rect
operator|.
name|translated
argument_list|(
name|offset_x
argument_list|,
name|offset_y
argument_list|)
decl_stmt|;
name|fillRect_normalized
argument_list|(
name|rr
argument_list|,
operator|&
name|s
operator|->
name|brushData
argument_list|,
name|d
argument_list|)
expr_stmt|;
operator|++
name|r
expr_stmt|;
block|}
block|}
else|else
block|{
name|QRectVectorPath
name|path
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rectCount
condition|;
operator|++
name|i
control|)
block|{
name|path
operator|.
name|set
argument_list|(
name|rects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|path
argument_list|,
name|s
operator|->
name|brush
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ensurePen
argument_list|()
expr_stmt|;
if|if
condition|(
name|s
operator|->
name|penData
operator|.
name|blend
condition|)
block|{
name|QRectVectorPath
name|path
decl_stmt|;
if|if
condition|(
name|s
operator|->
name|flags
operator|.
name|fast_pen
condition|)
block|{
name|QCosmeticStroker
name|stroker
argument_list|(
name|s
argument_list|,
name|d
operator|->
name|deviceRect
argument_list|,
name|d
operator|->
name|deviceRectUnclipped
argument_list|)
decl_stmt|;
name|stroker
operator|.
name|setLegacyRoundingEnabled
argument_list|(
name|s
operator|->
name|flags
operator|.
name|legacy_rounding
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rectCount
condition|;
operator|++
name|i
control|)
block|{
name|path
operator|.
name|set
argument_list|(
name|rects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|stroker
operator|.
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rectCount
condition|;
operator|++
name|i
control|)
block|{
name|path
operator|.
name|set
argument_list|(
name|rects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|stroke
argument_list|(
name|path
argument_list|,
name|s
operator|->
name|pen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|drawRects
name|void
name|QRasterPaintEngine
operator|::
name|drawRects
parameter_list|(
specifier|const
name|QRectF
modifier|*
name|rects
parameter_list|,
name|int
name|rectCount
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|(
literal|" - QRasterPaintEngine::drawRect(QRectF*), rectCount=%d"
argument_list|,
name|rectCount
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_FAST_SPANS
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|ensureRasterState
argument_list|()
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|->
name|flags
operator|.
name|tx_noshear
condition|)
block|{
name|ensureBrush
argument_list|()
expr_stmt|;
if|if
condition|(
name|s
operator|->
name|brushData
operator|.
name|blend
condition|)
block|{
name|d
operator|->
name|initializeRasterizer
argument_list|(
operator|&
name|s
operator|->
name|brushData
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rectCount
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRectF
modifier|&
name|rect
init|=
name|rects
index|[
name|i
index|]
operator|.
name|normalized
argument_list|()
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
specifier|const
name|QPointF
name|a
init|=
name|s
operator|->
name|matrix
operator|.
name|map
argument_list|(
operator|(
name|rect
operator|.
name|topLeft
argument_list|()
operator|+
name|rect
operator|.
name|bottomLeft
argument_list|()
operator|)
operator|*
literal|0.5f
argument_list|)
decl_stmt|;
specifier|const
name|QPointF
name|b
init|=
name|s
operator|->
name|matrix
operator|.
name|map
argument_list|(
operator|(
name|rect
operator|.
name|topRight
argument_list|()
operator|+
name|rect
operator|.
name|bottomRight
argument_list|()
operator|)
operator|*
literal|0.5f
argument_list|)
decl_stmt|;
name|d
operator|->
name|rasterizer
operator|->
name|rasterizeLine
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|rect
operator|.
name|height
argument_list|()
operator|/
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ensurePen
argument_list|()
expr_stmt|;
if|if
condition|(
name|s
operator|->
name|penData
operator|.
name|blend
condition|)
block|{
name|QRectVectorPath
name|path
decl_stmt|;
if|if
condition|(
name|s
operator|->
name|flags
operator|.
name|fast_pen
condition|)
block|{
name|QCosmeticStroker
name|stroker
argument_list|(
name|s
argument_list|,
name|d
operator|->
name|deviceRect
argument_list|,
name|d
operator|->
name|deviceRectUnclipped
argument_list|)
decl_stmt|;
name|stroker
operator|.
name|setLegacyRoundingEnabled
argument_list|(
name|s
operator|->
name|flags
operator|.
name|legacy_rounding
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rectCount
condition|;
operator|++
name|i
control|)
block|{
name|path
operator|.
name|set
argument_list|(
name|rects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|stroker
operator|.
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rectCount
condition|;
operator|++
name|i
control|)
block|{
name|path
operator|.
name|set
argument_list|(
name|rects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QPaintEngineEx
operator|::
name|stroke
argument_list|(
name|path
argument_list|,
name|s
operator|->
name|lastPen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return;
block|}
endif|#
directive|endif
comment|// QT_FAST_SPANS
name|QPaintEngineEx
operator|::
name|drawRects
argument_list|(
name|rects
argument_list|,
name|rectCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|stroke
name|void
name|QRasterPaintEngine
operator|::
name|stroke
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
name|ensurePen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|s
operator|->
name|penData
operator|.
name|blend
condition|)
return|return;
if|if
condition|(
name|s
operator|->
name|flags
operator|.
name|fast_pen
condition|)
block|{
name|QCosmeticStroker
name|stroker
argument_list|(
name|s
argument_list|,
name|d
operator|->
name|deviceRect
argument_list|,
name|d
operator|->
name|deviceRectUnclipped
argument_list|)
decl_stmt|;
name|stroker
operator|.
name|setLegacyRoundingEnabled
argument_list|(
name|s
operator|->
name|flags
operator|.
name|legacy_rounding
argument_list|)
expr_stmt|;
name|stroker
operator|.
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|->
name|flags
operator|.
name|non_complex_pen
operator|&&
name|path
operator|.
name|shape
argument_list|()
operator|==
name|QVectorPath
operator|::
name|LinesHint
condition|)
block|{
name|qreal
name|width
init|=
name|qt_pen_is_cosmetic
argument_list|(
name|s
operator|->
name|lastPen
argument_list|,
name|s
operator|->
name|renderHints
argument_list|)
condition|?
operator|(
name|qpen_widthf
argument_list|(
name|s
operator|->
name|lastPen
argument_list|)
operator|==
literal|0
condition|?
literal|1
else|:
name|qpen_widthf
argument_list|(
name|s
operator|->
name|lastPen
argument_list|)
operator|)
else|:
name|qpen_widthf
argument_list|(
name|s
operator|->
name|lastPen
argument_list|)
operator|*
name|s
operator|->
name|txscale
decl_stmt|;
name|int
name|dashIndex
init|=
literal|0
decl_stmt|;
name|qreal
name|dashOffset
init|=
name|s
operator|->
name|lastPen
operator|.
name|dashOffset
argument_list|()
decl_stmt|;
name|bool
name|inDash
init|=
literal|true
decl_stmt|;
name|qreal
name|patternLength
init|=
literal|0
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|qreal
argument_list|>
name|pattern
init|=
name|s
operator|->
name|lastPen
operator|.
name|dashPattern
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pattern
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|patternLength
operator|+=
name|pattern
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|patternLength
operator|>
literal|0
condition|)
block|{
name|int
name|n
init|=
name|qFloor
argument_list|(
name|dashOffset
operator|/
name|patternLength
argument_list|)
decl_stmt|;
name|dashOffset
operator|-=
name|n
operator|*
name|patternLength
expr_stmt|;
while|while
condition|(
name|dashOffset
operator|>=
name|pattern
operator|.
name|at
argument_list|(
name|dashIndex
argument_list|)
condition|)
block|{
name|dashOffset
operator|-=
name|pattern
operator|.
name|at
argument_list|(
name|dashIndex
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|dashIndex
operator|>=
name|pattern
operator|.
name|size
argument_list|()
condition|)
name|dashIndex
operator|=
literal|0
expr_stmt|;
name|inDash
operator|=
operator|!
name|inDash
expr_stmt|;
block|}
block|}
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|initializeRasterizer
argument_list|(
operator|&
name|s
operator|->
name|penData
argument_list|)
expr_stmt|;
name|int
name|lineCount
init|=
name|path
operator|.
name|elementCount
argument_list|()
operator|/
literal|2
decl_stmt|;
specifier|const
name|QLineF
modifier|*
name|lines
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|QLineF
operator|*
argument_list|>
argument_list|(
name|path
operator|.
name|points
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lineCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|lines
index|[
name|i
index|]
operator|.
name|p1
argument_list|()
operator|==
name|lines
index|[
name|i
index|]
operator|.
name|p2
argument_list|()
condition|)
block|{
if|if
condition|(
name|s
operator|->
name|lastPen
operator|.
name|capStyle
argument_list|()
operator|!=
name|Qt
operator|::
name|FlatCap
condition|)
block|{
name|QPointF
name|p
init|=
name|lines
index|[
name|i
index|]
operator|.
name|p1
argument_list|()
decl_stmt|;
name|QLineF
name|line
init|=
name|s
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|QLineF
argument_list|(
name|QPointF
argument_list|(
name|p
operator|.
name|x
argument_list|()
operator|-
name|width
operator|*
literal|0.5
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|QPointF
argument_list|(
name|p
operator|.
name|x
argument_list|()
operator|+
name|width
operator|*
literal|0.5
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|->
name|rasterizer
operator|->
name|rasterizeLine
argument_list|(
name|line
operator|.
name|p1
argument_list|()
argument_list|,
name|line
operator|.
name|p2
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
specifier|const
name|QLineF
name|line
init|=
name|s
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|lines
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|qpen_style
argument_list|(
name|s
operator|->
name|lastPen
argument_list|)
operator|==
name|Qt
operator|::
name|SolidLine
condition|)
block|{
name|d
operator|->
name|rasterizer
operator|->
name|rasterizeLine
argument_list|(
name|line
operator|.
name|p1
argument_list|()
argument_list|,
name|line
operator|.
name|p2
argument_list|()
argument_list|,
name|width
operator|/
name|line
operator|.
name|length
argument_list|()
argument_list|,
name|s
operator|->
name|lastPen
operator|.
name|capStyle
argument_list|()
operator|==
name|Qt
operator|::
name|SquareCap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|rasterizeLine_dashed
argument_list|(
name|line
argument_list|,
name|width
argument_list|,
operator|&
name|dashIndex
argument_list|,
operator|&
name|dashOffset
argument_list|,
operator|&
name|inDash
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
name|QPaintEngineEx
operator|::
name|stroke
argument_list|(
name|path
argument_list|,
name|pen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toNormalizedFillRect
name|QRect
name|QRasterPaintEngine
operator|::
name|toNormalizedFillRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
block|{
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
name|qreal
name|delta
init|=
name|s
operator|->
name|flags
operator|.
name|legacy_rounding
condition|?
name|aliasedCoordinateDelta
else|:
name|qreal
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|x1
init|=
name|qRound
argument_list|(
name|rect
operator|.
name|x
argument_list|()
operator|+
name|delta
argument_list|)
decl_stmt|;
name|int
name|y1
init|=
name|qRound
argument_list|(
name|rect
operator|.
name|y
argument_list|()
operator|+
name|delta
argument_list|)
decl_stmt|;
name|int
name|x2
init|=
name|qRound
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|+
name|delta
argument_list|)
decl_stmt|;
name|int
name|y2
init|=
name|qRound
argument_list|(
name|rect
operator|.
name|bottom
argument_list|()
operator|+
name|delta
argument_list|)
decl_stmt|;
if|if
condition|(
name|x2
operator|<
name|x1
condition|)
name|qSwap
argument_list|(
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
if|if
condition|(
name|y2
operator|<
name|y1
condition|)
name|qSwap
argument_list|(
name|y1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
return|return
name|QRect
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
name|x1
argument_list|,
name|y2
operator|-
name|y1
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|fill
name|void
name|QRasterPaintEngine
operator|::
name|fill
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|QRectF
name|rf
init|=
name|path
operator|.
name|controlPointRect
argument_list|()
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"QRasterPaintEngine::fill(): "
operator|<<
literal|"size="
operator|<<
name|path
operator|.
name|elementCount
argument_list|()
operator|<<
literal|", hints="
operator|<<
name|hex
operator|<<
name|path
operator|.
name|hints
argument_list|()
operator|<<
name|rf
operator|<<
name|brush
expr_stmt|;
endif|#
directive|endif
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
name|ensureBrush
argument_list|(
name|brush
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|s
operator|->
name|brushData
operator|.
name|blend
condition|)
return|return;
if|if
condition|(
name|path
operator|.
name|shape
argument_list|()
operator|==
name|QVectorPath
operator|::
name|RectangleHint
condition|)
block|{
if|if
condition|(
operator|!
name|s
operator|->
name|flags
operator|.
name|antialiased
operator|&&
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|<=
name|QTransform
operator|::
name|TxScale
condition|)
block|{
specifier|const
name|qreal
modifier|*
name|p
init|=
name|path
operator|.
name|points
argument_list|()
decl_stmt|;
name|QPointF
name|tl
init|=
name|QPointF
argument_list|(
name|p
index|[
literal|0
index|]
argument_list|,
name|p
index|[
literal|1
index|]
argument_list|)
operator|*
name|s
operator|->
name|matrix
decl_stmt|;
name|QPointF
name|br
init|=
name|QPointF
argument_list|(
name|p
index|[
literal|4
index|]
argument_list|,
name|p
index|[
literal|5
index|]
argument_list|)
operator|*
name|s
operator|->
name|matrix
decl_stmt|;
name|fillRect_normalized
argument_list|(
name|toNormalizedFillRect
argument_list|(
name|QRectF
argument_list|(
name|tl
argument_list|,
name|br
argument_list|)
argument_list|)
argument_list|,
operator|&
name|s
operator|->
name|brushData
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return;
block|}
name|ensureRasterState
argument_list|()
expr_stmt|;
if|if
condition|(
name|s
operator|->
name|flags
operator|.
name|tx_noshear
condition|)
block|{
name|d
operator|->
name|initializeRasterizer
argument_list|(
operator|&
name|s
operator|->
name|brushData
argument_list|)
expr_stmt|;
comment|// ### Is normalizing really necessary here?
specifier|const
name|qreal
modifier|*
name|p
init|=
name|path
operator|.
name|points
argument_list|()
decl_stmt|;
name|QRectF
name|r
init|=
name|QRectF
argument_list|(
name|p
index|[
literal|0
index|]
argument_list|,
name|p
index|[
literal|1
index|]
argument_list|,
name|p
index|[
literal|2
index|]
operator|-
name|p
index|[
literal|0
index|]
argument_list|,
name|p
index|[
literal|7
index|]
operator|-
name|p
index|[
literal|1
index|]
argument_list|)
operator|.
name|normalized
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QPointF
name|a
init|=
name|s
operator|->
name|matrix
operator|.
name|map
argument_list|(
operator|(
name|r
operator|.
name|topLeft
argument_list|()
operator|+
name|r
operator|.
name|bottomLeft
argument_list|()
operator|)
operator|*
literal|0.5f
argument_list|)
decl_stmt|;
specifier|const
name|QPointF
name|b
init|=
name|s
operator|->
name|matrix
operator|.
name|map
argument_list|(
operator|(
name|r
operator|.
name|topRight
argument_list|()
operator|+
name|r
operator|.
name|bottomRight
argument_list|()
operator|)
operator|*
literal|0.5f
argument_list|)
decl_stmt|;
name|d
operator|->
name|rasterizer
operator|->
name|rasterizeLine
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|r
operator|.
name|height
argument_list|()
operator|/
name|r
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
comment|// ### Optimize for non transformed ellipses and rectangles...
name|QRectF
name|cpRect
init|=
name|path
operator|.
name|controlPointRect
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|deviceRect
init|=
name|s
operator|->
name|matrix
operator|.
name|mapRect
argument_list|(
name|cpRect
argument_list|)
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|ProcessSpans
name|blend
init|=
name|d
operator|->
name|getBrushFunc
argument_list|(
name|deviceRect
argument_list|,
operator|&
name|s
operator|->
name|brushData
argument_list|)
decl_stmt|;
comment|// ### Falcon
comment|//         const bool do_clip = (deviceRect.left()< -QT_RASTER_COORD_LIMIT
comment|//                               || deviceRect.right()> QT_RASTER_COORD_LIMIT
comment|//                               || deviceRect.top()< -QT_RASTER_COORD_LIMIT
comment|//                               || deviceRect.bottom()> QT_RASTER_COORD_LIMIT);
comment|// ### Falonc: implement....
comment|//         if (!s->flags.antialiased&& !do_clip) {
comment|//             d->initializeRasterizer(&s->brushData);
comment|//             d->rasterizer->rasterize(path * d->matrix, path.fillRule());
comment|//             return;
comment|//         }
name|ensureOutlineMapper
argument_list|()
expr_stmt|;
name|d
operator|->
name|rasterize
argument_list|(
name|d
operator|->
name|outlineMapper
operator|->
name|convertPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|blend
argument_list|,
operator|&
name|s
operator|->
name|brushData
argument_list|,
name|d
operator|->
name|rasterBuffer
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillRect
name|void
name|QRasterPaintEngine
operator|::
name|fillRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
name|QSpanData
modifier|*
name|data
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|->
name|flags
operator|.
name|antialiased
condition|)
block|{
name|uint
name|txop
init|=
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
decl_stmt|;
if|if
condition|(
name|txop
operator|==
name|QTransform
operator|::
name|TxNone
condition|)
block|{
name|fillRect_normalized
argument_list|(
name|toNormalizedFillRect
argument_list|(
name|r
argument_list|)
argument_list|,
name|data
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|txop
operator|==
name|QTransform
operator|::
name|TxTranslate
condition|)
block|{
specifier|const
name|QRect
name|rr
init|=
name|toNormalizedFillRect
argument_list|(
name|r
operator|.
name|translated
argument_list|(
name|s
operator|->
name|matrix
operator|.
name|dx
argument_list|()
argument_list|,
name|s
operator|->
name|matrix
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|fillRect_normalized
argument_list|(
name|rr
argument_list|,
name|data
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|txop
operator|==
name|QTransform
operator|::
name|TxScale
condition|)
block|{
specifier|const
name|QRect
name|rr
init|=
name|toNormalizedFillRect
argument_list|(
name|s
operator|->
name|matrix
operator|.
name|mapRect
argument_list|(
name|r
argument_list|)
argument_list|)
decl_stmt|;
name|fillRect_normalized
argument_list|(
name|rr
argument_list|,
name|data
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|ensureRasterState
argument_list|()
expr_stmt|;
if|if
condition|(
name|s
operator|->
name|flags
operator|.
name|tx_noshear
condition|)
block|{
name|d
operator|->
name|initializeRasterizer
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|QRectF
name|nr
init|=
name|r
operator|.
name|normalized
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|nr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QPointF
name|a
init|=
name|s
operator|->
name|matrix
operator|.
name|map
argument_list|(
operator|(
name|nr
operator|.
name|topLeft
argument_list|()
operator|+
name|nr
operator|.
name|bottomLeft
argument_list|()
operator|)
operator|*
literal|0.5f
argument_list|)
decl_stmt|;
specifier|const
name|QPointF
name|b
init|=
name|s
operator|->
name|matrix
operator|.
name|map
argument_list|(
operator|(
name|nr
operator|.
name|topRight
argument_list|()
operator|+
name|nr
operator|.
name|bottomRight
argument_list|()
operator|)
operator|*
literal|0.5f
argument_list|)
decl_stmt|;
name|d
operator|->
name|rasterizer
operator|->
name|rasterizeLine
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|nr
operator|.
name|height
argument_list|()
operator|/
name|nr
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|ensureOutlineMapper
argument_list|()
expr_stmt|;
name|fillPath
argument_list|(
name|path
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|fillRect
name|void
name|QRasterPaintEngine
operator|::
name|fillRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QRasterPaintEngine::fillRecct(): "
operator|<<
name|r
operator|<<
name|brush
expr_stmt|;
endif|#
directive|endif
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
name|ensureBrush
argument_list|(
name|brush
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|s
operator|->
name|brushData
operator|.
name|blend
condition|)
return|return;
name|fillRect
argument_list|(
name|r
argument_list|,
operator|&
name|s
operator|->
name|brushData
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|fillRect
name|void
name|QRasterPaintEngine
operator|::
name|fillRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QRasterPaintEngine::fillRect(): "
operator|<<
name|r
operator|<<
name|color
expr_stmt|;
endif|#
directive|endif
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
name|d
operator|->
name|solid_color_filler
operator|.
name|solid
operator|.
name|color
operator|=
name|qPremultiply
argument_list|(
name|combineAlpha256
argument_list|(
name|color
operator|.
name|rgba64
argument_list|()
argument_list|,
name|s
operator|->
name|intOpacity
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|solid_color_filler
operator|.
name|solid
operator|.
name|color
operator|.
name|isTransparent
argument_list|()
operator|&&
name|s
operator|->
name|composition_mode
operator|==
name|QPainter
operator|::
name|CompositionMode_SourceOver
condition|)
block|{
return|return;
block|}
name|d
operator|->
name|solid_color_filler
operator|.
name|clip
operator|=
name|d
operator|->
name|clip
argument_list|()
expr_stmt|;
name|d
operator|->
name|solid_color_filler
operator|.
name|adjustSpanMethods
argument_list|()
expr_stmt|;
name|fillRect
argument_list|(
name|r
argument_list|,
operator|&
name|d
operator|->
name|solid_color_filler
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isAbove
specifier|static
specifier|inline
name|bool
name|isAbove
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|a
parameter_list|,
specifier|const
name|QPointF
modifier|*
name|b
parameter_list|)
block|{
return|return
name|a
operator|->
name|y
argument_list|()
operator|<
name|b
operator|->
name|y
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|splitPolygon
specifier|static
name|bool
name|splitPolygon
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|QVector
argument_list|<
name|QPointF
argument_list|>
modifier|*
name|upper
parameter_list|,
name|QVector
argument_list|<
name|QPointF
argument_list|>
modifier|*
name|lower
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|upper
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|lower
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|pointCount
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
specifier|const
name|QPointF
modifier|*
argument_list|>
name|sorted
decl_stmt|;
name|sorted
operator|.
name|reserve
argument_list|(
name|pointCount
argument_list|)
expr_stmt|;
name|upper
operator|->
name|reserve
argument_list|(
name|pointCount
operator|*
literal|3
operator|/
literal|4
argument_list|)
expr_stmt|;
name|lower
operator|->
name|reserve
argument_list|(
name|pointCount
operator|*
literal|3
operator|/
literal|4
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pointCount
condition|;
operator|++
name|i
control|)
name|sorted
operator|<<
name|points
operator|+
name|i
expr_stmt|;
name|std
operator|::
name|sort
argument_list|(
name|sorted
operator|.
name|begin
argument_list|()
argument_list|,
name|sorted
operator|.
name|end
argument_list|()
argument_list|,
name|isAbove
argument_list|)
expr_stmt|;
name|qreal
name|splitY
init|=
name|sorted
operator|.
name|at
argument_list|(
name|sorted
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|)
operator|->
name|y
argument_list|()
decl_stmt|;
specifier|const
name|QPointF
modifier|*
name|end
init|=
name|points
operator|+
name|pointCount
decl_stmt|;
specifier|const
name|QPointF
modifier|*
name|last
init|=
name|end
operator|-
literal|1
decl_stmt|;
name|QVector
argument_list|<
name|QPointF
argument_list|>
modifier|*
name|bin
index|[
literal|2
index|]
init|=
block|{
name|upper
block|,
name|lower
block|}
decl_stmt|;
for|for
control|(
specifier|const
name|QPointF
modifier|*
name|p
init|=
name|points
init|;
name|p
operator|<
name|end
condition|;
operator|++
name|p
control|)
block|{
name|int
name|side
init|=
name|p
operator|->
name|y
argument_list|()
operator|<
name|splitY
decl_stmt|;
name|int
name|lastSide
init|=
name|last
operator|->
name|y
argument_list|()
operator|<
name|splitY
decl_stmt|;
if|if
condition|(
name|side
operator|!=
name|lastSide
condition|)
block|{
if|if
condition|(
name|qFuzzyCompare
argument_list|(
name|p
operator|->
name|y
argument_list|()
argument_list|,
name|splitY
argument_list|)
condition|)
block|{
name|bin
index|[
operator|!
name|side
index|]
operator|->
name|append
argument_list|(
operator|*
name|p
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qFuzzyCompare
argument_list|(
name|last
operator|->
name|y
argument_list|()
argument_list|,
name|splitY
argument_list|)
condition|)
block|{
name|bin
index|[
name|side
index|]
operator|->
name|append
argument_list|(
operator|*
name|last
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPointF
name|delta
init|=
operator|*
name|p
operator|-
operator|*
name|last
decl_stmt|;
name|QPointF
name|intersection
argument_list|(
name|p
operator|->
name|x
argument_list|()
operator|+
name|delta
operator|.
name|x
argument_list|()
operator|*
operator|(
name|splitY
operator|-
name|p
operator|->
name|y
argument_list|()
operator|)
operator|/
name|delta
operator|.
name|y
argument_list|()
argument_list|,
name|splitY
argument_list|)
decl_stmt|;
name|bin
index|[
literal|0
index|]
operator|->
name|append
argument_list|(
name|intersection
argument_list|)
expr_stmt|;
name|bin
index|[
literal|1
index|]
operator|->
name|append
argument_list|(
name|intersection
argument_list|)
expr_stmt|;
block|}
block|}
name|bin
index|[
name|side
index|]
operator|->
name|append
argument_list|(
operator|*
name|p
argument_list|)
expr_stmt|;
name|last
operator|=
name|p
expr_stmt|;
block|}
comment|// give up if we couldn't reduce the point count
return|return
name|upper
operator|->
name|size
argument_list|()
operator|<
name|pointCount
operator|&&
name|lower
operator|->
name|size
argument_list|()
operator|<
name|pointCount
return|;
block|}
end_function
begin_comment
comment|/*!   \internal  */
end_comment
begin_function
DECL|function|fillPolygon
name|void
name|QRasterPaintEngine
operator|::
name|fillPolygon
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|PolygonDrawMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
specifier|const
name|int
name|maxPoints
init|=
literal|0xffff
decl_stmt|;
comment|// max amount of points that raster engine can reliably handle
if|if
condition|(
name|pointCount
operator|>
name|maxPoints
condition|)
block|{
name|QVector
argument_list|<
name|QPointF
argument_list|>
name|upper
decl_stmt|,
name|lower
decl_stmt|;
if|if
condition|(
name|splitPolygon
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|,
operator|&
name|upper
argument_list|,
operator|&
name|lower
argument_list|)
condition|)
block|{
name|fillPolygon
argument_list|(
name|upper
operator|.
name|constData
argument_list|()
argument_list|,
name|upper
operator|.
name|size
argument_list|()
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fillPolygon
argument_list|(
name|lower
operator|.
name|constData
argument_list|()
argument_list|,
name|lower
operator|.
name|size
argument_list|()
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
else|else
name|qWarning
argument_list|(
literal|"Polygon too complex for filling."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Compose polygon fill..,
name|QVectorPath
name|vp
argument_list|(
operator|(
specifier|const
name|qreal
operator|*
operator|)
name|points
argument_list|,
name|pointCount
argument_list|,
literal|0
argument_list|,
name|QVectorPath
operator|::
name|polygonFlags
argument_list|(
name|mode
argument_list|)
argument_list|)
decl_stmt|;
name|ensureOutlineMapper
argument_list|()
expr_stmt|;
name|QT_FT_Outline
modifier|*
name|outline
init|=
name|d
operator|->
name|outlineMapper
operator|->
name|convertPath
argument_list|(
name|vp
argument_list|)
decl_stmt|;
comment|// scanconvert.
name|ProcessSpans
name|brushBlend
init|=
name|d
operator|->
name|getBrushFunc
argument_list|(
name|d
operator|->
name|outlineMapper
operator|->
name|controlPointRect
argument_list|,
operator|&
name|s
operator|->
name|brushData
argument_list|)
decl_stmt|;
name|d
operator|->
name|rasterize
argument_list|(
name|outline
argument_list|,
name|brushBlend
argument_list|,
operator|&
name|s
operator|->
name|brushData
argument_list|,
name|d
operator|->
name|rasterBuffer
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|drawPolygon
name|void
name|QRasterPaintEngine
operator|::
name|drawPolygon
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|PolygonDrawMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|(
literal|" - QRasterPaintEngine::drawPolygon(F), pointCount=%d"
argument_list|,
name|pointCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pointCount
condition|;
operator|++
name|i
control|)
name|qDebug
argument_list|()
operator|<<
literal|"   - "
operator|<<
name|points
index|[
name|i
index|]
expr_stmt|;
endif|#
directive|endif
name|Q_ASSERT
argument_list|(
name|pointCount
operator|>=
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|!=
name|PolylineMode
operator|&&
name|QVectorPath
operator|::
name|isRect
argument_list|(
operator|(
specifier|const
name|qreal
operator|*
operator|)
name|points
argument_list|,
name|pointCount
argument_list|)
condition|)
block|{
name|QRectF
name|r
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|drawRects
argument_list|(
operator|&
name|r
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
name|ensurePen
argument_list|()
expr_stmt|;
if|if
condition|(
name|mode
operator|!=
name|PolylineMode
condition|)
block|{
comment|// Do the fill...
name|ensureBrush
argument_list|()
expr_stmt|;
if|if
condition|(
name|s
operator|->
name|brushData
operator|.
name|blend
condition|)
name|fillPolygon
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
comment|// Do the outline...
if|if
condition|(
name|s
operator|->
name|penData
operator|.
name|blend
condition|)
block|{
name|QVectorPath
name|vp
argument_list|(
operator|(
specifier|const
name|qreal
operator|*
operator|)
name|points
argument_list|,
name|pointCount
argument_list|,
literal|0
argument_list|,
name|QVectorPath
operator|::
name|polygonFlags
argument_list|(
name|mode
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|->
name|flags
operator|.
name|fast_pen
condition|)
block|{
name|QCosmeticStroker
name|stroker
argument_list|(
name|s
argument_list|,
name|d
operator|->
name|deviceRect
argument_list|,
name|d
operator|->
name|deviceRectUnclipped
argument_list|)
decl_stmt|;
name|stroker
operator|.
name|setLegacyRoundingEnabled
argument_list|(
name|s
operator|->
name|flags
operator|.
name|legacy_rounding
argument_list|)
expr_stmt|;
name|stroker
operator|.
name|drawPath
argument_list|(
name|vp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPaintEngineEx
operator|::
name|stroke
argument_list|(
name|vp
argument_list|,
name|s
operator|->
name|lastPen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|drawPolygon
name|void
name|QRasterPaintEngine
operator|::
name|drawPolygon
parameter_list|(
specifier|const
name|QPoint
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|PolygonDrawMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|(
literal|" - QRasterPaintEngine::drawPolygon(I), pointCount=%d"
argument_list|,
name|pointCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pointCount
condition|;
operator|++
name|i
control|)
name|qDebug
argument_list|()
operator|<<
literal|"   - "
operator|<<
name|points
index|[
name|i
index|]
expr_stmt|;
endif|#
directive|endif
name|Q_ASSERT
argument_list|(
name|pointCount
operator|>=
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|!=
name|PolylineMode
operator|&&
name|QVectorPath
operator|::
name|isRect
argument_list|(
operator|(
specifier|const
name|int
operator|*
operator|)
name|points
argument_list|,
name|pointCount
argument_list|)
condition|)
block|{
name|QRect
name|r
argument_list|(
name|points
index|[
literal|0
index|]
operator|.
name|x
argument_list|()
argument_list|,
name|points
index|[
literal|0
index|]
operator|.
name|y
argument_list|()
argument_list|,
name|points
index|[
literal|2
index|]
operator|.
name|x
argument_list|()
operator|-
name|points
index|[
literal|0
index|]
operator|.
name|x
argument_list|()
argument_list|,
name|points
index|[
literal|2
index|]
operator|.
name|y
argument_list|()
operator|-
name|points
index|[
literal|0
index|]
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|drawRects
argument_list|(
operator|&
name|r
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
name|ensurePen
argument_list|()
expr_stmt|;
comment|// Do the fill
if|if
condition|(
name|mode
operator|!=
name|PolylineMode
condition|)
block|{
name|ensureBrush
argument_list|()
expr_stmt|;
if|if
condition|(
name|s
operator|->
name|brushData
operator|.
name|blend
condition|)
block|{
comment|// Compose polygon fill..,
name|ensureOutlineMapper
argument_list|()
expr_stmt|;
name|d
operator|->
name|outlineMapper
operator|->
name|beginOutline
argument_list|(
name|mode
operator|==
name|WindingMode
condition|?
name|Qt
operator|::
name|WindingFill
else|:
name|Qt
operator|::
name|OddEvenFill
argument_list|)
expr_stmt|;
name|d
operator|->
name|outlineMapper
operator|->
name|moveTo
argument_list|(
operator|*
name|points
argument_list|)
expr_stmt|;
specifier|const
name|QPoint
modifier|*
name|p
init|=
name|points
decl_stmt|;
specifier|const
name|QPoint
modifier|*
name|ep
init|=
name|points
operator|+
name|pointCount
operator|-
literal|1
decl_stmt|;
do|do
block|{
name|d
operator|->
name|outlineMapper
operator|->
name|lineTo
argument_list|(
operator|*
operator|(
operator|++
name|p
operator|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|p
operator|<
name|ep
condition|)
do|;
name|d
operator|->
name|outlineMapper
operator|->
name|endOutline
argument_list|()
expr_stmt|;
comment|// scanconvert.
name|ProcessSpans
name|brushBlend
init|=
name|d
operator|->
name|getBrushFunc
argument_list|(
name|d
operator|->
name|outlineMapper
operator|->
name|controlPointRect
argument_list|,
operator|&
name|s
operator|->
name|brushData
argument_list|)
decl_stmt|;
name|d
operator|->
name|rasterize
argument_list|(
name|d
operator|->
name|outlineMapper
operator|->
name|outline
argument_list|()
argument_list|,
name|brushBlend
argument_list|,
operator|&
name|s
operator|->
name|brushData
argument_list|,
name|d
operator|->
name|rasterBuffer
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Do the outline...
if|if
condition|(
name|s
operator|->
name|penData
operator|.
name|blend
condition|)
block|{
name|int
name|count
init|=
name|pointCount
operator|*
literal|2
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|qreal
argument_list|>
name|fpoints
argument_list|(
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|fpoints
index|[
name|i
index|]
operator|=
operator|(
operator|(
specifier|const
name|int
operator|*
operator|)
name|points
operator|)
index|[
name|i
index|]
expr_stmt|;
name|QVectorPath
name|vp
argument_list|(
operator|(
name|qreal
operator|*
operator|)
name|fpoints
operator|.
name|data
argument_list|()
argument_list|,
name|pointCount
argument_list|,
literal|0
argument_list|,
name|QVectorPath
operator|::
name|polygonFlags
argument_list|(
name|mode
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|->
name|flags
operator|.
name|fast_pen
condition|)
block|{
name|QCosmeticStroker
name|stroker
argument_list|(
name|s
argument_list|,
name|d
operator|->
name|deviceRect
argument_list|,
name|d
operator|->
name|deviceRectUnclipped
argument_list|)
decl_stmt|;
name|stroker
operator|.
name|setLegacyRoundingEnabled
argument_list|(
name|s
operator|->
name|flags
operator|.
name|legacy_rounding
argument_list|)
expr_stmt|;
name|stroker
operator|.
name|drawPath
argument_list|(
name|vp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPaintEngineEx
operator|::
name|stroke
argument_list|(
name|vp
argument_list|,
name|s
operator|->
name|lastPen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|drawPixmap
name|void
name|QRasterPaintEngine
operator|::
name|drawPixmap
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" - QRasterPaintEngine::drawPixmap(), pos="
operator|<<
name|pos
operator|<<
literal|" pixmap="
operator|<<
name|pixmap
operator|.
name|size
argument_list|()
operator|<<
literal|"depth="
operator|<<
name|pixmap
operator|.
name|depth
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QPlatformPixmap
modifier|*
name|pd
init|=
name|pixmap
operator|.
name|handle
argument_list|()
decl_stmt|;
if|if
condition|(
name|pd
operator|->
name|classId
argument_list|()
operator|==
name|QPlatformPixmap
operator|::
name|RasterClass
condition|)
block|{
specifier|const
name|QImage
modifier|&
name|image
init|=
cast|static_cast
argument_list|<
name|QRasterPlatformPixmap
operator|*
argument_list|>
argument_list|(
name|pd
argument_list|)
operator|->
name|image
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|<=
name|QTransform
operator|::
name|TxTranslate
condition|)
block|{
name|ensurePen
argument_list|()
expr_stmt|;
name|drawBitmap
argument_list|(
name|pos
operator|+
name|QPointF
argument_list|(
name|s
operator|->
name|matrix
operator|.
name|dx
argument_list|()
argument_list|,
name|s
operator|->
name|matrix
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|,
name|image
argument_list|,
operator|&
name|s
operator|->
name|penData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|drawImage
argument_list|(
name|pos
argument_list|,
name|d
operator|->
name|rasterBuffer
operator|->
name|colorizeBitmap
argument_list|(
name|image
argument_list|,
name|s
operator|->
name|pen
operator|.
name|color
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QRasterPaintEngine
operator|::
name|drawImage
argument_list|(
name|pos
argument_list|,
name|image
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|const
name|QImage
name|image
init|=
name|pixmap
operator|.
name|toImage
argument_list|()
decl_stmt|;
if|if
condition|(
name|pixmap
operator|.
name|depth
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|<=
name|QTransform
operator|::
name|TxTranslate
condition|)
block|{
name|ensurePen
argument_list|()
expr_stmt|;
name|drawBitmap
argument_list|(
name|pos
operator|+
name|QPointF
argument_list|(
name|s
operator|->
name|matrix
operator|.
name|dx
argument_list|()
argument_list|,
name|s
operator|->
name|matrix
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|,
name|image
argument_list|,
operator|&
name|s
operator|->
name|penData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|drawImage
argument_list|(
name|pos
argument_list|,
name|d
operator|->
name|rasterBuffer
operator|->
name|colorizeBitmap
argument_list|(
name|image
argument_list|,
name|s
operator|->
name|pen
operator|.
name|color
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QRasterPaintEngine
operator|::
name|drawImage
argument_list|(
name|pos
argument_list|,
name|image
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|drawPixmap
name|void
name|QRasterPaintEngine
operator|::
name|drawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" - QRasterPaintEngine::drawPixmap(), r="
operator|<<
name|r
operator|<<
literal|" sr="
operator|<<
name|sr
operator|<<
literal|" pixmap="
operator|<<
name|pixmap
operator|.
name|size
argument_list|()
operator|<<
literal|"depth="
operator|<<
name|pixmap
operator|.
name|depth
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QPlatformPixmap
modifier|*
name|pd
init|=
name|pixmap
operator|.
name|handle
argument_list|()
decl_stmt|;
if|if
condition|(
name|pd
operator|->
name|classId
argument_list|()
operator|==
name|QPlatformPixmap
operator|::
name|RasterClass
condition|)
block|{
specifier|const
name|QImage
modifier|&
name|image
init|=
cast|static_cast
argument_list|<
name|QRasterPlatformPixmap
operator|*
argument_list|>
argument_list|(
name|pd
argument_list|)
operator|->
name|image
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|<=
name|QTransform
operator|::
name|TxTranslate
operator|&&
name|r
operator|.
name|size
argument_list|()
operator|==
name|sr
operator|.
name|size
argument_list|()
operator|&&
name|r
operator|.
name|size
argument_list|()
operator|==
name|pixmap
operator|.
name|size
argument_list|()
condition|)
block|{
name|ensurePen
argument_list|()
expr_stmt|;
name|drawBitmap
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
operator|+
name|QPointF
argument_list|(
name|s
operator|->
name|matrix
operator|.
name|dx
argument_list|()
argument_list|,
name|s
operator|->
name|matrix
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|,
name|image
argument_list|,
operator|&
name|s
operator|->
name|penData
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|drawImage
argument_list|(
name|r
argument_list|,
name|d
operator|->
name|rasterBuffer
operator|->
name|colorizeBitmap
argument_list|(
name|image
argument_list|,
name|s
operator|->
name|pen
operator|.
name|color
argument_list|()
argument_list|)
argument_list|,
name|sr
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|drawImage
argument_list|(
name|r
argument_list|,
name|image
argument_list|,
name|sr
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QRect
name|clippedSource
init|=
name|sr
operator|.
name|toAlignedRect
argument_list|()
operator|.
name|intersected
argument_list|(
name|pixmap
operator|.
name|rect
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QImage
name|image
init|=
name|pd
operator|->
name|toImage
argument_list|(
name|clippedSource
argument_list|)
decl_stmt|;
name|QRectF
name|translatedSource
init|=
name|sr
operator|.
name|translated
argument_list|(
operator|-
name|clippedSource
operator|.
name|topLeft
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|<=
name|QTransform
operator|::
name|TxTranslate
operator|&&
name|r
operator|.
name|size
argument_list|()
operator|==
name|sr
operator|.
name|size
argument_list|()
operator|&&
name|r
operator|.
name|size
argument_list|()
operator|==
name|pixmap
operator|.
name|size
argument_list|()
condition|)
block|{
name|ensurePen
argument_list|()
expr_stmt|;
name|drawBitmap
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
operator|+
name|QPointF
argument_list|(
name|s
operator|->
name|matrix
operator|.
name|dx
argument_list|()
argument_list|,
name|s
operator|->
name|matrix
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|,
name|image
argument_list|,
operator|&
name|s
operator|->
name|penData
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|drawImage
argument_list|(
name|r
argument_list|,
name|d
operator|->
name|rasterBuffer
operator|->
name|colorizeBitmap
argument_list|(
name|image
argument_list|,
name|s
operator|->
name|pen
operator|.
name|color
argument_list|()
argument_list|)
argument_list|,
name|translatedSource
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|drawImage
argument_list|(
name|r
argument_list|,
name|image
argument_list|,
name|translatedSource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|fast_ceil_positive
specifier|static
specifier|inline
name|int
name|fast_ceil_positive
parameter_list|(
specifier|const
name|qreal
modifier|&
name|v
parameter_list|)
block|{
specifier|const
name|int
name|iv
init|=
name|int
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|-
name|iv
operator|==
literal|0
condition|)
return|return
name|iv
return|;
else|else
return|return
name|iv
operator|+
literal|1
return|;
block|}
end_function
begin_function
DECL|function|toAlignedRect_positive
specifier|static
specifier|inline
specifier|const
name|QRect
name|toAlignedRect_positive
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
block|{
specifier|const
name|int
name|xmin
init|=
name|int
argument_list|(
name|rect
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|xmax
init|=
name|int
argument_list|(
name|fast_ceil_positive
argument_list|(
name|rect
operator|.
name|right
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|int
name|ymin
init|=
name|int
argument_list|(
name|rect
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|ymax
init|=
name|int
argument_list|(
name|fast_ceil_positive
argument_list|(
name|rect
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|QRect
argument_list|(
name|xmin
argument_list|,
name|ymin
argument_list|,
name|xmax
operator|-
name|xmin
argument_list|,
name|ymax
operator|-
name|ymin
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|drawImage
name|void
name|QRasterPaintEngine
operator|::
name|drawImage
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QImage
modifier|&
name|img
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" - QRasterPaintEngine::drawImage(), p="
operator|<<
name|p
operator|<<
literal|" image="
operator|<<
name|img
operator|.
name|size
argument_list|()
operator|<<
literal|"depth="
operator|<<
name|img
operator|.
name|depth
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
name|qreal
name|scale
init|=
name|img
operator|.
name|devicePixelRatio
argument_list|()
decl_stmt|;
if|if
condition|(
name|scale
operator|>
literal|1.0
operator|||
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|>
name|QTransform
operator|::
name|TxTranslate
condition|)
block|{
name|drawImage
argument_list|(
name|QRectF
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|,
name|img
operator|.
name|width
argument_list|()
operator|/
name|scale
argument_list|,
name|img
operator|.
name|height
argument_list|()
operator|/
name|scale
argument_list|)
argument_list|,
name|img
argument_list|,
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|img
operator|.
name|width
argument_list|()
argument_list|,
name|img
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QClipData
modifier|*
name|clip
init|=
name|d
operator|->
name|clip
argument_list|()
decl_stmt|;
name|QPointF
name|pt
argument_list|(
name|p
operator|.
name|x
argument_list|()
operator|+
name|s
operator|->
name|matrix
operator|.
name|dx
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
operator|+
name|s
operator|->
name|matrix
operator|.
name|dy
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|canUseFastImageBlending
argument_list|(
name|d
operator|->
name|rasterBuffer
operator|->
name|compositionMode
argument_list|,
name|img
argument_list|)
condition|)
block|{
name|SrcOverBlendFunc
name|func
init|=
name|qBlendFunctions
index|[
name|d
operator|->
name|rasterBuffer
operator|->
name|format
index|]
index|[
name|img
operator|.
name|format
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|func
condition|)
block|{
if|if
condition|(
operator|!
name|clip
condition|)
block|{
name|d
operator|->
name|drawImage
argument_list|(
name|pt
argument_list|,
name|img
argument_list|,
name|func
argument_list|,
name|d
operator|->
name|deviceRect
argument_list|,
name|s
operator|->
name|intOpacity
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|clip
operator|->
name|hasRectClip
condition|)
block|{
name|d
operator|->
name|drawImage
argument_list|(
name|pt
argument_list|,
name|img
argument_list|,
name|func
argument_list|,
name|clip
operator|->
name|clipRect
argument_list|,
name|s
operator|->
name|intOpacity
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
name|d
operator|->
name|image_filler
operator|.
name|clip
operator|=
name|clip
expr_stmt|;
name|d
operator|->
name|image_filler
operator|.
name|initTexture
argument_list|(
operator|&
name|img
argument_list|,
name|s
operator|->
name|intOpacity
argument_list|,
name|QTextureData
operator|::
name|Plain
argument_list|,
name|img
operator|.
name|rect
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|image_filler
operator|.
name|blend
condition|)
return|return;
name|d
operator|->
name|image_filler
operator|.
name|dx
operator|=
operator|-
name|pt
operator|.
name|x
argument_list|()
expr_stmt|;
name|d
operator|->
name|image_filler
operator|.
name|dy
operator|=
operator|-
name|pt
operator|.
name|y
argument_list|()
expr_stmt|;
name|QRect
name|rr
init|=
name|img
operator|.
name|rect
argument_list|()
operator|.
name|translated
argument_list|(
name|qRound
argument_list|(
name|pt
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|pt
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|fillRect_normalized
argument_list|(
name|rr
argument_list|,
operator|&
name|d
operator|->
name|image_filler
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_mapRect_non_normalizing
name|QRectF
name|qt_mapRect_non_normalizing
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|t
parameter_list|)
block|{
return|return
name|QRectF
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
operator|*
name|t
argument_list|,
name|r
operator|.
name|bottomRight
argument_list|()
operator|*
name|t
argument_list|)
return|;
block|}
end_function
begin_namespace
namespace|namespace
block|{
DECL|enum|RotationType
enum|enum
name|RotationType
block|{
DECL|enumerator|Rotation90
name|Rotation90
block|,
DECL|enumerator|Rotation180
name|Rotation180
block|,
DECL|enumerator|Rotation270
name|Rotation270
block|,
DECL|enumerator|NoRotation
name|NoRotation
block|}
enum|;
DECL|function|qRotationType
specifier|inline
name|RotationType
name|qRotationType
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|)
block|{
name|QTransform
operator|::
name|TransformationType
name|type
init|=
name|transform
operator|.
name|type
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|>
name|QTransform
operator|::
name|TxRotate
condition|)
return|return
name|NoRotation
return|;
if|if
condition|(
name|type
operator|==
name|QTransform
operator|::
name|TxRotate
operator|&&
name|qFuzzyIsNull
argument_list|(
name|transform
operator|.
name|m11
argument_list|()
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|transform
operator|.
name|m12
argument_list|()
argument_list|,
name|qreal
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|transform
operator|.
name|m21
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|&&
name|qFuzzyIsNull
argument_list|(
name|transform
operator|.
name|m22
argument_list|()
argument_list|)
condition|)
return|return
name|Rotation90
return|;
if|if
condition|(
name|type
operator|==
name|QTransform
operator|::
name|TxScale
operator|&&
name|qFuzzyCompare
argument_list|(
name|transform
operator|.
name|m11
argument_list|()
argument_list|,
name|qreal
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
operator|&&
name|qFuzzyIsNull
argument_list|(
name|transform
operator|.
name|m12
argument_list|()
argument_list|)
operator|&&
name|qFuzzyIsNull
argument_list|(
name|transform
operator|.
name|m21
argument_list|()
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|transform
operator|.
name|m22
argument_list|()
argument_list|,
name|qreal
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
condition|)
return|return
name|Rotation180
return|;
if|if
condition|(
name|type
operator|==
name|QTransform
operator|::
name|TxRotate
operator|&&
name|qFuzzyIsNull
argument_list|(
name|transform
operator|.
name|m11
argument_list|()
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|transform
operator|.
name|m12
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|transform
operator|.
name|m21
argument_list|()
argument_list|,
name|qreal
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
operator|&&
name|qFuzzyIsNull
argument_list|(
name|transform
operator|.
name|m22
argument_list|()
argument_list|)
condition|)
return|return
name|Rotation270
return|;
return|return
name|NoRotation
return|;
block|}
DECL|function|isPixelAligned
specifier|inline
name|bool
name|isPixelAligned
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
block|{
return|return
name|QRectF
argument_list|(
name|rect
operator|.
name|toRect
argument_list|()
argument_list|)
operator|==
name|rect
return|;
block|}
block|}
end_namespace
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|drawImage
name|void
name|QRasterPaintEngine
operator|::
name|drawImage
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" - QRasterPaintEngine::drawImage(), r="
operator|<<
name|r
operator|<<
literal|" sr="
operator|<<
name|sr
operator|<<
literal|" image="
operator|<<
name|img
operator|.
name|size
argument_list|()
operator|<<
literal|"depth="
operator|<<
name|img
operator|.
name|depth
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|int
name|sr_l
init|=
name|qFloor
argument_list|(
name|sr
operator|.
name|left
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sr_r
init|=
name|qCeil
argument_list|(
name|sr
operator|.
name|right
argument_list|()
argument_list|)
operator|-
literal|1
decl_stmt|;
name|int
name|sr_t
init|=
name|qFloor
argument_list|(
name|sr
operator|.
name|top
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sr_b
init|=
name|qCeil
argument_list|(
name|sr
operator|.
name|bottom
argument_list|()
argument_list|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|<=
name|QTransform
operator|::
name|TxScale
operator|&&
operator|!
name|s
operator|->
name|flags
operator|.
name|antialiased
operator|&&
name|sr_l
operator|==
name|sr_r
operator|&&
name|sr_t
operator|==
name|sr_b
condition|)
block|{
comment|// as fillRect will apply the aliased coordinate delta we need to
comment|// subtract it here as we don't use it for image drawing
name|QTransform
name|old
init|=
name|s
operator|->
name|matrix
decl_stmt|;
if|if
condition|(
name|s
operator|->
name|flags
operator|.
name|legacy_rounding
condition|)
name|s
operator|->
name|matrix
operator|=
name|s
operator|->
name|matrix
operator|*
name|QTransform
operator|::
name|fromTranslate
argument_list|(
operator|-
name|aliasedCoordinateDelta
argument_list|,
operator|-
name|aliasedCoordinateDelta
argument_list|)
expr_stmt|;
comment|// Do whatever fillRect() does, but without premultiplying the color if it's already premultiplied.
name|QRgb
name|color
init|=
name|img
operator|.
name|pixel
argument_list|(
name|sr_l
argument_list|,
name|sr_t
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|img
operator|.
name|format
argument_list|()
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_ARGB6666_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_ARGB4444_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_RGBA8888_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_A2BGR30_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_A2RGB30_Premultiplied
case|:
comment|// Combine premultiplied color with the opacity set on the painter.
name|d
operator|->
name|solid_color_filler
operator|.
name|solid
operator|.
name|color
operator|=
name|multiplyAlpha256
argument_list|(
name|QRgba64
operator|::
name|fromArgb32
argument_list|(
name|color
argument_list|)
argument_list|,
name|s
operator|->
name|intOpacity
argument_list|)
expr_stmt|;
break|break;
default|default:
name|d
operator|->
name|solid_color_filler
operator|.
name|solid
operator|.
name|color
operator|=
name|qPremultiply
argument_list|(
name|combineAlpha256
argument_list|(
name|QRgba64
operator|::
name|fromArgb32
argument_list|(
name|color
argument_list|)
argument_list|,
name|s
operator|->
name|intOpacity
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|d
operator|->
name|solid_color_filler
operator|.
name|solid
operator|.
name|color
operator|.
name|isTransparent
argument_list|()
operator|&&
name|s
operator|->
name|composition_mode
operator|==
name|QPainter
operator|::
name|CompositionMode_SourceOver
condition|)
return|return;
name|d
operator|->
name|solid_color_filler
operator|.
name|clip
operator|=
name|d
operator|->
name|clip
argument_list|()
expr_stmt|;
name|d
operator|->
name|solid_color_filler
operator|.
name|adjustSpanMethods
argument_list|()
expr_stmt|;
name|fillRect
argument_list|(
name|r
argument_list|,
operator|&
name|d
operator|->
name|solid_color_filler
argument_list|)
expr_stmt|;
name|s
operator|->
name|matrix
operator|=
name|old
expr_stmt|;
return|return;
block|}
name|bool
name|stretch_sr
init|=
name|r
operator|.
name|width
argument_list|()
operator|!=
name|sr
operator|.
name|width
argument_list|()
operator|||
name|r
operator|.
name|height
argument_list|()
operator|!=
name|sr
operator|.
name|height
argument_list|()
decl_stmt|;
specifier|const
name|QClipData
modifier|*
name|clip
init|=
name|d
operator|->
name|clip
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|>
name|QTransform
operator|::
name|TxTranslate
operator|&&
operator|!
name|stretch_sr
operator|&&
operator|(
operator|!
name|clip
operator|||
name|clip
operator|->
name|hasRectClip
operator|)
operator|&&
name|s
operator|->
name|intOpacity
operator|==
literal|256
operator|&&
operator|(
name|d
operator|->
name|rasterBuffer
operator|->
name|compositionMode
operator|==
name|QPainter
operator|::
name|CompositionMode_SourceOver
operator|||
name|d
operator|->
name|rasterBuffer
operator|->
name|compositionMode
operator|==
name|QPainter
operator|::
name|CompositionMode_Source
operator|)
operator|&&
name|d
operator|->
name|rasterBuffer
operator|->
name|format
operator|==
name|img
operator|.
name|format
argument_list|()
operator|&&
operator|(
name|d
operator|->
name|rasterBuffer
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB16
operator|||
name|d
operator|->
name|rasterBuffer
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB32
operator|||
operator|(
name|d
operator|->
name|rasterBuffer
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
operator|&&
name|d
operator|->
name|rasterBuffer
operator|->
name|compositionMode
operator|==
name|QPainter
operator|::
name|CompositionMode_Source
operator|)
operator|)
condition|)
block|{
name|RotationType
name|rotationType
init|=
name|qRotationType
argument_list|(
name|s
operator|->
name|matrix
argument_list|)
decl_stmt|;
if|if
condition|(
name|rotationType
operator|!=
name|NoRotation
operator|&&
name|qMemRotateFunctions
index|[
name|d
operator|->
name|rasterBuffer
operator|->
name|format
index|]
index|[
name|rotationType
index|]
operator|&&
name|img
operator|.
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|sr
operator|.
name|toAlignedRect
argument_list|()
argument_list|)
condition|)
block|{
name|QRectF
name|transformedTargetRect
init|=
name|s
operator|->
name|matrix
operator|.
name|mapRect
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|!
operator|(
name|s
operator|->
name|renderHints
operator|&
name|QPainter
operator|::
name|SmoothPixmapTransform
operator|)
operator|&&
operator|!
operator|(
name|s
operator|->
name|renderHints
operator|&
name|QPainter
operator|::
name|Antialiasing
operator|)
operator|)
operator|||
operator|(
name|isPixelAligned
argument_list|(
name|transformedTargetRect
argument_list|)
operator|&&
name|isPixelAligned
argument_list|(
name|sr
argument_list|)
operator|)
condition|)
block|{
name|QRect
name|clippedTransformedTargetRect
init|=
name|transformedTargetRect
operator|.
name|toRect
argument_list|()
operator|.
name|intersected
argument_list|(
name|clip
condition|?
name|clip
operator|->
name|clipRect
else|:
name|d
operator|->
name|deviceRect
argument_list|)
decl_stmt|;
if|if
condition|(
name|clippedTransformedTargetRect
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|QRectF
name|clippedTargetRect
init|=
name|s
operator|->
name|matrix
operator|.
name|inverted
argument_list|()
operator|.
name|mapRect
argument_list|(
name|QRectF
argument_list|(
name|clippedTransformedTargetRect
argument_list|)
argument_list|)
decl_stmt|;
name|QRect
name|clippedSourceRect
init|=
name|QRectF
argument_list|(
name|sr
operator|.
name|x
argument_list|()
operator|+
name|clippedTargetRect
operator|.
name|x
argument_list|()
operator|-
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|sr
operator|.
name|y
argument_list|()
operator|+
name|clippedTargetRect
operator|.
name|y
argument_list|()
operator|-
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|clippedTargetRect
operator|.
name|width
argument_list|()
argument_list|,
name|clippedTargetRect
operator|.
name|height
argument_list|()
argument_list|)
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|uint
name|dbpl
init|=
name|d
operator|->
name|rasterBuffer
operator|->
name|bytesPerLine
argument_list|()
decl_stmt|;
name|uint
name|sbpl
init|=
name|img
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
name|uchar
modifier|*
name|dst
init|=
name|d
operator|->
name|rasterBuffer
operator|->
name|buffer
argument_list|()
decl_stmt|;
name|uint
name|bpp
init|=
name|img
operator|.
name|depth
argument_list|()
operator|>>
literal|3
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|srcBase
init|=
name|img
operator|.
name|bits
argument_list|()
operator|+
name|clippedSourceRect
operator|.
name|y
argument_list|()
operator|*
name|sbpl
operator|+
name|clippedSourceRect
operator|.
name|x
argument_list|()
operator|*
name|bpp
decl_stmt|;
name|uchar
modifier|*
name|dstBase
init|=
name|dst
operator|+
name|clippedTransformedTargetRect
operator|.
name|y
argument_list|()
operator|*
name|dbpl
operator|+
name|clippedTransformedTargetRect
operator|.
name|x
argument_list|()
operator|*
name|bpp
decl_stmt|;
name|uint
name|cw
init|=
name|clippedSourceRect
operator|.
name|width
argument_list|()
decl_stmt|;
name|uint
name|ch
init|=
name|clippedSourceRect
operator|.
name|height
argument_list|()
decl_stmt|;
name|qMemRotateFunctions
index|[
name|d
operator|->
name|rasterBuffer
operator|->
name|format
index|]
index|[
name|rotationType
index|]
operator|(
name|srcBase
operator|,
name|cw
operator|,
name|ch
operator|,
name|sbpl
operator|,
name|dstBase
operator|,
name|dbpl
operator|)
expr_stmt|;
return|return;
block|}
block|}
block|}
if|if
condition|(
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|>
name|QTransform
operator|::
name|TxTranslate
operator|||
name|stretch_sr
condition|)
block|{
name|QRectF
name|targetBounds
init|=
name|s
operator|->
name|matrix
operator|.
name|mapRect
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|bool
name|exceedsPrecision
init|=
name|targetBounds
operator|.
name|width
argument_list|()
operator|>
literal|0xffff
operator|||
name|targetBounds
operator|.
name|height
argument_list|()
operator|>
literal|0xffff
decl_stmt|;
if|if
condition|(
operator|!
name|exceedsPrecision
operator|&&
name|d
operator|->
name|canUseFastImageBlending
argument_list|(
name|d
operator|->
name|rasterBuffer
operator|->
name|compositionMode
argument_list|,
name|img
argument_list|)
condition|)
block|{
if|if
condition|(
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|>
name|QTransform
operator|::
name|TxScale
condition|)
block|{
name|SrcOverTransformFunc
name|func
init|=
name|qTransformFunctions
index|[
name|d
operator|->
name|rasterBuffer
operator|->
name|format
index|]
index|[
name|img
operator|.
name|format
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|func
operator|&&
operator|(
operator|!
name|clip
operator|||
name|clip
operator|->
name|hasRectClip
operator|)
condition|)
block|{
name|func
argument_list|(
name|d
operator|->
name|rasterBuffer
operator|->
name|buffer
argument_list|()
argument_list|,
name|d
operator|->
name|rasterBuffer
operator|->
name|bytesPerLine
argument_list|()
argument_list|,
name|img
operator|.
name|bits
argument_list|()
argument_list|,
name|img
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
name|r
argument_list|,
name|sr
argument_list|,
operator|!
name|clip
condition|?
name|d
operator|->
name|deviceRect
else|:
name|clip
operator|->
name|clipRect
argument_list|,
name|s
operator|->
name|matrix
argument_list|,
name|s
operator|->
name|intOpacity
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
comment|// Test for optimized high-dpi case: 2x source on 2x target. (Could be generalized to nX.)
name|bool
name|sourceRect2x
init|=
name|r
operator|.
name|width
argument_list|()
operator|*
literal|2
operator|==
name|sr
operator|.
name|width
argument_list|()
operator|&&
name|r
operator|.
name|height
argument_list|()
operator|*
literal|2
operator|==
name|sr
operator|.
name|height
argument_list|()
decl_stmt|;
name|bool
name|scale2x
init|=
operator|(
name|s
operator|->
name|matrix
operator|.
name|m11
argument_list|()
operator|==
name|qreal
argument_list|(
literal|2
argument_list|)
operator|)
operator|&&
operator|(
name|s
operator|->
name|matrix
operator|.
name|m22
argument_list|()
operator|==
name|qreal
argument_list|(
literal|2
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|==
name|QTransform
operator|::
name|TxScale
operator|&&
name|sourceRect2x
operator|&&
name|scale2x
condition|)
block|{
name|SrcOverBlendFunc
name|func
init|=
name|qBlendFunctions
index|[
name|d
operator|->
name|rasterBuffer
operator|->
name|format
index|]
index|[
name|img
operator|.
name|format
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|func
condition|)
block|{
name|QPointF
name|pt
argument_list|(
name|r
operator|.
name|x
argument_list|()
operator|*
literal|2
operator|+
name|s
operator|->
name|matrix
operator|.
name|dx
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|*
literal|2
operator|+
name|s
operator|->
name|matrix
operator|.
name|dy
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|clip
condition|)
block|{
name|d
operator|->
name|drawImage
argument_list|(
name|pt
argument_list|,
name|img
argument_list|,
name|func
argument_list|,
name|d
operator|->
name|deviceRect
argument_list|,
name|s
operator|->
name|intOpacity
argument_list|,
name|sr
operator|.
name|toRect
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|clip
operator|->
name|hasRectClip
condition|)
block|{
name|d
operator|->
name|drawImage
argument_list|(
name|pt
argument_list|,
name|img
argument_list|,
name|func
argument_list|,
name|clip
operator|->
name|clipRect
argument_list|,
name|s
operator|->
name|intOpacity
argument_list|,
name|sr
operator|.
name|toRect
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
name|SrcOverScaleFunc
name|func
init|=
name|qScaleFunctions
index|[
name|d
operator|->
name|rasterBuffer
operator|->
name|format
index|]
index|[
name|img
operator|.
name|format
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|func
operator|&&
operator|(
operator|!
name|clip
operator|||
name|clip
operator|->
name|hasRectClip
operator|)
condition|)
block|{
name|func
argument_list|(
name|d
operator|->
name|rasterBuffer
operator|->
name|buffer
argument_list|()
argument_list|,
name|d
operator|->
name|rasterBuffer
operator|->
name|bytesPerLine
argument_list|()
argument_list|,
name|img
operator|.
name|bits
argument_list|()
argument_list|,
name|img
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
name|img
operator|.
name|height
argument_list|()
argument_list|,
name|qt_mapRect_non_normalizing
argument_list|(
name|r
argument_list|,
name|s
operator|->
name|matrix
argument_list|)
argument_list|,
name|sr
argument_list|,
operator|!
name|clip
condition|?
name|d
operator|->
name|deviceRect
else|:
name|clip
operator|->
name|clipRect
argument_list|,
name|s
operator|->
name|intOpacity
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
name|QTransform
name|copy
init|=
name|s
operator|->
name|matrix
decl_stmt|;
name|copy
operator|.
name|translate
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|stretch_sr
condition|)
name|copy
operator|.
name|scale
argument_list|(
name|r
operator|.
name|width
argument_list|()
operator|/
name|sr
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
operator|/
name|sr
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|copy
operator|.
name|translate
argument_list|(
operator|-
name|sr
operator|.
name|x
argument_list|()
argument_list|,
operator|-
name|sr
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|image_filler_xform
operator|.
name|clip
operator|=
name|clip
expr_stmt|;
name|d
operator|->
name|image_filler_xform
operator|.
name|initTexture
argument_list|(
operator|&
name|img
argument_list|,
name|s
operator|->
name|intOpacity
argument_list|,
name|QTextureData
operator|::
name|Plain
argument_list|,
name|toAlignedRect_positive
argument_list|(
name|sr
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|image_filler_xform
operator|.
name|blend
condition|)
return|return;
name|d
operator|->
name|image_filler_xform
operator|.
name|setupMatrix
argument_list|(
name|copy
argument_list|,
name|s
operator|->
name|flags
operator|.
name|bilinear
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|s
operator|->
name|flags
operator|.
name|antialiased
operator|&&
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|==
name|QTransform
operator|::
name|TxScale
condition|)
block|{
name|QRectF
name|rr
init|=
name|s
operator|->
name|matrix
operator|.
name|mapRect
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|const
name|int
name|x1
init|=
name|qRound
argument_list|(
name|rr
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|y1
init|=
name|qRound
argument_list|(
name|rr
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|x2
init|=
name|qRound
argument_list|(
name|rr
operator|.
name|right
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|y2
init|=
name|qRound
argument_list|(
name|rr
operator|.
name|bottom
argument_list|()
argument_list|)
decl_stmt|;
name|fillRect_normalized
argument_list|(
name|QRect
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
name|x1
argument_list|,
name|y2
operator|-
name|y1
argument_list|)
argument_list|,
operator|&
name|d
operator|->
name|image_filler_xform
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return;
block|}
ifdef|#
directive|ifdef
name|QT_FAST_SPANS
name|ensureRasterState
argument_list|()
expr_stmt|;
if|if
condition|(
name|s
operator|->
name|flags
operator|.
name|tx_noshear
operator|||
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|==
name|QTransform
operator|::
name|TxScale
condition|)
block|{
name|d
operator|->
name|initializeRasterizer
argument_list|(
operator|&
name|d
operator|->
name|image_filler_xform
argument_list|)
expr_stmt|;
name|d
operator|->
name|rasterizer
operator|->
name|setAntialiased
argument_list|(
name|s
operator|->
name|flags
operator|.
name|antialiased
argument_list|)
expr_stmt|;
name|d
operator|->
name|rasterizer
operator|->
name|setLegacyRoundingEnabled
argument_list|(
name|s
operator|->
name|flags
operator|.
name|legacy_rounding
argument_list|)
expr_stmt|;
specifier|const
name|QPointF
name|offs
init|=
name|s
operator|->
name|flags
operator|.
name|legacy_rounding
condition|?
name|QPointF
argument_list|(
name|aliasedCoordinateDelta
argument_list|,
name|aliasedCoordinateDelta
argument_list|)
else|:
name|QPointF
argument_list|()
decl_stmt|;
specifier|const
name|QRectF
modifier|&
name|rect
init|=
name|r
operator|.
name|normalized
argument_list|()
decl_stmt|;
specifier|const
name|QPointF
name|a
init|=
name|s
operator|->
name|matrix
operator|.
name|map
argument_list|(
operator|(
name|rect
operator|.
name|topLeft
argument_list|()
operator|+
name|rect
operator|.
name|bottomLeft
argument_list|()
operator|)
operator|*
literal|0.5f
argument_list|)
operator|-
name|offs
decl_stmt|;
specifier|const
name|QPointF
name|b
init|=
name|s
operator|->
name|matrix
operator|.
name|map
argument_list|(
operator|(
name|rect
operator|.
name|topRight
argument_list|()
operator|+
name|rect
operator|.
name|bottomRight
argument_list|()
operator|)
operator|*
literal|0.5f
argument_list|)
operator|-
name|offs
decl_stmt|;
if|if
condition|(
name|s
operator|->
name|flags
operator|.
name|tx_noshear
condition|)
name|d
operator|->
name|rasterizer
operator|->
name|rasterizeLine
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|rect
operator|.
name|height
argument_list|()
operator|/
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|rasterizer
operator|->
name|rasterizeLine
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|qAbs
argument_list|(
operator|(
name|s
operator|->
name|matrix
operator|.
name|m22
argument_list|()
operator|*
name|rect
operator|.
name|height
argument_list|()
operator|)
operator|/
operator|(
name|s
operator|->
name|matrix
operator|.
name|m11
argument_list|()
operator|*
name|rect
operator|.
name|width
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
specifier|const
name|qreal
name|offs
init|=
name|s
operator|->
name|flags
operator|.
name|legacy_rounding
condition|?
name|aliasedCoordinateDelta
else|:
name|qreal
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|QTransform
name|m
init|=
name|s
operator|->
name|matrix
decl_stmt|;
name|s
operator|->
name|matrix
operator|=
name|QTransform
argument_list|(
name|m
operator|.
name|m11
argument_list|()
argument_list|,
name|m
operator|.
name|m12
argument_list|()
argument_list|,
name|m
operator|.
name|m13
argument_list|()
argument_list|,
name|m
operator|.
name|m21
argument_list|()
argument_list|,
name|m
operator|.
name|m22
argument_list|()
argument_list|,
name|m
operator|.
name|m23
argument_list|()
argument_list|,
name|m
operator|.
name|m31
argument_list|()
operator|-
name|offs
argument_list|,
name|m
operator|.
name|m32
argument_list|()
operator|-
name|offs
argument_list|,
name|m
operator|.
name|m33
argument_list|()
argument_list|)
expr_stmt|;
name|fillPath
argument_list|(
name|path
argument_list|,
operator|&
name|d
operator|->
name|image_filler_xform
argument_list|)
expr_stmt|;
name|s
operator|->
name|matrix
operator|=
name|m
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|d
operator|->
name|canUseFastImageBlending
argument_list|(
name|d
operator|->
name|rasterBuffer
operator|->
name|compositionMode
argument_list|,
name|img
argument_list|)
condition|)
block|{
name|SrcOverBlendFunc
name|func
init|=
name|qBlendFunctions
index|[
name|d
operator|->
name|rasterBuffer
operator|->
name|format
index|]
index|[
name|img
operator|.
name|format
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|func
condition|)
block|{
name|QPointF
name|pt
argument_list|(
name|r
operator|.
name|x
argument_list|()
operator|+
name|s
operator|->
name|matrix
operator|.
name|dx
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|s
operator|->
name|matrix
operator|.
name|dy
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|clip
condition|)
block|{
name|d
operator|->
name|drawImage
argument_list|(
name|pt
argument_list|,
name|img
argument_list|,
name|func
argument_list|,
name|d
operator|->
name|deviceRect
argument_list|,
name|s
operator|->
name|intOpacity
argument_list|,
name|sr
operator|.
name|toRect
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|clip
operator|->
name|hasRectClip
condition|)
block|{
name|d
operator|->
name|drawImage
argument_list|(
name|pt
argument_list|,
name|img
argument_list|,
name|func
argument_list|,
name|clip
operator|->
name|clipRect
argument_list|,
name|s
operator|->
name|intOpacity
argument_list|,
name|sr
operator|.
name|toRect
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
name|d
operator|->
name|image_filler
operator|.
name|clip
operator|=
name|clip
expr_stmt|;
name|d
operator|->
name|image_filler
operator|.
name|initTexture
argument_list|(
operator|&
name|img
argument_list|,
name|s
operator|->
name|intOpacity
argument_list|,
name|QTextureData
operator|::
name|Plain
argument_list|,
name|toAlignedRect_positive
argument_list|(
name|sr
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|image_filler
operator|.
name|blend
condition|)
return|return;
name|d
operator|->
name|image_filler
operator|.
name|dx
operator|=
operator|-
operator|(
name|r
operator|.
name|x
argument_list|()
operator|+
name|s
operator|->
name|matrix
operator|.
name|dx
argument_list|()
operator|)
operator|+
name|sr
operator|.
name|x
argument_list|()
expr_stmt|;
name|d
operator|->
name|image_filler
operator|.
name|dy
operator|=
operator|-
operator|(
name|r
operator|.
name|y
argument_list|()
operator|+
name|s
operator|->
name|matrix
operator|.
name|dy
argument_list|()
operator|)
operator|+
name|sr
operator|.
name|y
argument_list|()
expr_stmt|;
name|QRectF
name|rr
init|=
name|r
decl_stmt|;
name|rr
operator|.
name|translate
argument_list|(
name|s
operator|->
name|matrix
operator|.
name|dx
argument_list|()
argument_list|,
name|s
operator|->
name|matrix
operator|.
name|dy
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|int
name|x1
init|=
name|qRound
argument_list|(
name|rr
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|y1
init|=
name|qRound
argument_list|(
name|rr
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|x2
init|=
name|qRound
argument_list|(
name|rr
operator|.
name|right
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|y2
init|=
name|qRound
argument_list|(
name|rr
operator|.
name|bottom
argument_list|()
argument_list|)
decl_stmt|;
name|fillRect_normalized
argument_list|(
name|QRect
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
name|x1
argument_list|,
name|y2
operator|-
name|y1
argument_list|)
argument_list|,
operator|&
name|d
operator|->
name|image_filler
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|drawTiledPixmap
name|void
name|QRasterPaintEngine
operator|::
name|drawTiledPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|sr
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" - QRasterPaintEngine::drawTiledPixmap(), r="
operator|<<
name|r
operator|<<
literal|"pixmap="
operator|<<
name|pixmap
operator|.
name|size
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|QImage
name|image
decl_stmt|;
name|QPlatformPixmap
modifier|*
name|pd
init|=
name|pixmap
operator|.
name|handle
argument_list|()
decl_stmt|;
if|if
condition|(
name|pd
operator|->
name|classId
argument_list|()
operator|==
name|QPlatformPixmap
operator|::
name|RasterClass
condition|)
block|{
name|image
operator|=
cast|static_cast
argument_list|<
name|QRasterPlatformPixmap
operator|*
argument_list|>
argument_list|(
name|pd
argument_list|)
operator|->
name|image
expr_stmt|;
block|}
else|else
block|{
name|image
operator|=
name|pixmap
operator|.
name|toImage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|1
condition|)
name|image
operator|=
name|d
operator|->
name|rasterBuffer
operator|->
name|colorizeBitmap
argument_list|(
name|image
argument_list|,
name|s
operator|->
name|pen
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|>
name|QTransform
operator|::
name|TxTranslate
condition|)
block|{
name|QTransform
name|copy
init|=
name|s
operator|->
name|matrix
decl_stmt|;
name|copy
operator|.
name|translate
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|copy
operator|.
name|translate
argument_list|(
operator|-
name|sr
operator|.
name|x
argument_list|()
argument_list|,
operator|-
name|sr
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|image_filler_xform
operator|.
name|clip
operator|=
name|d
operator|->
name|clip
argument_list|()
expr_stmt|;
name|d
operator|->
name|image_filler_xform
operator|.
name|initTexture
argument_list|(
operator|&
name|image
argument_list|,
name|s
operator|->
name|intOpacity
argument_list|,
name|QTextureData
operator|::
name|Tiled
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|image_filler_xform
operator|.
name|blend
condition|)
return|return;
name|d
operator|->
name|image_filler_xform
operator|.
name|setupMatrix
argument_list|(
name|copy
argument_list|,
name|s
operator|->
name|flags
operator|.
name|bilinear
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_FAST_SPANS
name|ensureRasterState
argument_list|()
expr_stmt|;
if|if
condition|(
name|s
operator|->
name|flags
operator|.
name|tx_noshear
operator|||
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|==
name|QTransform
operator|::
name|TxScale
condition|)
block|{
name|d
operator|->
name|initializeRasterizer
argument_list|(
operator|&
name|d
operator|->
name|image_filler_xform
argument_list|)
expr_stmt|;
name|d
operator|->
name|rasterizer
operator|->
name|setAntialiased
argument_list|(
name|s
operator|->
name|flags
operator|.
name|antialiased
argument_list|)
expr_stmt|;
name|d
operator|->
name|rasterizer
operator|->
name|setLegacyRoundingEnabled
argument_list|(
name|s
operator|->
name|flags
operator|.
name|legacy_rounding
argument_list|)
expr_stmt|;
specifier|const
name|QRectF
modifier|&
name|rect
init|=
name|r
operator|.
name|normalized
argument_list|()
decl_stmt|;
specifier|const
name|QPointF
name|a
init|=
name|s
operator|->
name|matrix
operator|.
name|map
argument_list|(
operator|(
name|rect
operator|.
name|topLeft
argument_list|()
operator|+
name|rect
operator|.
name|bottomLeft
argument_list|()
operator|)
operator|*
literal|0.5f
argument_list|)
decl_stmt|;
specifier|const
name|QPointF
name|b
init|=
name|s
operator|->
name|matrix
operator|.
name|map
argument_list|(
operator|(
name|rect
operator|.
name|topRight
argument_list|()
operator|+
name|rect
operator|.
name|bottomRight
argument_list|()
operator|)
operator|*
literal|0.5f
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|->
name|flags
operator|.
name|tx_noshear
condition|)
name|d
operator|->
name|rasterizer
operator|->
name|rasterizeLine
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|rect
operator|.
name|height
argument_list|()
operator|/
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|rasterizer
operator|->
name|rasterizeLine
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|qAbs
argument_list|(
operator|(
name|s
operator|->
name|matrix
operator|.
name|m22
argument_list|()
operator|*
name|rect
operator|.
name|height
argument_list|()
operator|)
operator|/
operator|(
name|s
operator|->
name|matrix
operator|.
name|m11
argument_list|()
operator|*
name|rect
operator|.
name|width
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|fillPath
argument_list|(
name|path
argument_list|,
operator|&
name|d
operator|->
name|image_filler_xform
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|image_filler
operator|.
name|clip
operator|=
name|d
operator|->
name|clip
argument_list|()
expr_stmt|;
name|d
operator|->
name|image_filler
operator|.
name|initTexture
argument_list|(
operator|&
name|image
argument_list|,
name|s
operator|->
name|intOpacity
argument_list|,
name|QTextureData
operator|::
name|Tiled
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|image_filler
operator|.
name|blend
condition|)
return|return;
name|d
operator|->
name|image_filler
operator|.
name|dx
operator|=
operator|-
operator|(
name|r
operator|.
name|x
argument_list|()
operator|+
name|s
operator|->
name|matrix
operator|.
name|dx
argument_list|()
operator|)
operator|+
name|sr
operator|.
name|x
argument_list|()
expr_stmt|;
name|d
operator|->
name|image_filler
operator|.
name|dy
operator|=
operator|-
operator|(
name|r
operator|.
name|y
argument_list|()
operator|+
name|s
operator|->
name|matrix
operator|.
name|dy
argument_list|()
operator|)
operator|+
name|sr
operator|.
name|y
argument_list|()
expr_stmt|;
name|QRectF
name|rr
init|=
name|r
decl_stmt|;
name|rr
operator|.
name|translate
argument_list|(
name|s
operator|->
name|matrix
operator|.
name|dx
argument_list|()
argument_list|,
name|s
operator|->
name|matrix
operator|.
name|dy
argument_list|()
argument_list|)
expr_stmt|;
name|fillRect_normalized
argument_list|(
name|rr
operator|.
name|toRect
argument_list|()
operator|.
name|normalized
argument_list|()
argument_list|,
operator|&
name|d
operator|->
name|image_filler
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//QWS hack
end_comment
begin_function
DECL|function|monoVal
specifier|static
specifier|inline
name|bool
name|monoVal
parameter_list|(
specifier|const
name|uchar
modifier|*
name|s
parameter_list|,
name|int
name|x
parameter_list|)
block|{
return|return
operator|(
name|s
index|[
name|x
operator|>>
literal|3
index|]
operator|<<
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
operator|&
literal|0x80
return|;
block|}
end_function
begin_comment
comment|/*!     \internal  */
end_comment
begin_function
DECL|function|rasterBuffer
name|QRasterBuffer
modifier|*
name|QRasterPaintEngine
operator|::
name|rasterBuffer
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|rasterBuffer
operator|.
name|data
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|alphaPenBlt
name|void
name|QRasterPaintEngine
operator|::
name|alphaPenBlt
parameter_list|(
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|int
name|bpl
parameter_list|,
name|int
name|depth
parameter_list|,
name|int
name|rx
parameter_list|,
name|int
name|ry
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|->
name|penData
operator|.
name|blend
condition|)
return|return;
name|QRasterBuffer
modifier|*
name|rb
init|=
name|d
operator|->
name|rasterBuffer
operator|.
name|data
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|rect
argument_list|(
name|rx
argument_list|,
name|ry
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
specifier|const
name|QClipData
modifier|*
name|clip
init|=
name|d
operator|->
name|clip
argument_list|()
decl_stmt|;
name|bool
name|unclipped
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|clip
condition|)
block|{
comment|// inlined QRect::intersects
specifier|const
name|bool
name|intersects
init|=
name|qMax
argument_list|(
name|clip
operator|->
name|xmin
argument_list|,
name|rect
operator|.
name|left
argument_list|()
argument_list|)
operator|<=
name|qMin
argument_list|(
name|clip
operator|->
name|xmax
operator|-
literal|1
argument_list|,
name|rect
operator|.
name|right
argument_list|()
argument_list|)
operator|&&
name|qMax
argument_list|(
name|clip
operator|->
name|ymin
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|)
operator|<=
name|qMin
argument_list|(
name|clip
operator|->
name|ymax
operator|-
literal|1
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clip
operator|->
name|hasRectClip
condition|)
block|{
name|unclipped
operator|=
name|rx
operator|>
name|clip
operator|->
name|xmin
operator|&&
name|rx
operator|+
name|w
argument_list|<
name|clip
operator|->
name|xmax
operator|&&
name|ry
argument_list|>
name|clip
operator|->
name|ymin
operator|&&
name|ry
operator|+
name|h
operator|<
name|clip
operator|->
name|ymax
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|intersects
condition|)
return|return;
block|}
else|else
block|{
comment|// inlined QRect::intersects
specifier|const
name|bool
name|intersects
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|rect
operator|.
name|left
argument_list|()
argument_list|)
operator|<=
name|qMin
argument_list|(
name|rb
operator|->
name|width
argument_list|()
operator|-
literal|1
argument_list|,
name|rect
operator|.
name|right
argument_list|()
argument_list|)
operator|&&
name|qMax
argument_list|(
literal|0
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|)
operator|<=
name|qMin
argument_list|(
name|rb
operator|->
name|height
argument_list|()
operator|-
literal|1
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|intersects
condition|)
return|return;
comment|// inlined QRect::contains
specifier|const
name|bool
name|contains
init|=
name|rect
operator|.
name|left
argument_list|()
operator|>=
literal|0
operator|&&
name|rect
operator|.
name|right
argument_list|()
operator|<
name|rb
operator|->
name|width
argument_list|()
operator|&&
name|rect
operator|.
name|top
argument_list|()
operator|>=
literal|0
operator|&&
name|rect
operator|.
name|bottom
argument_list|()
operator|<
name|rb
operator|->
name|height
argument_list|()
decl_stmt|;
name|unclipped
operator|=
name|contains
operator|&&
name|d
operator|->
name|isUnclipped_normalized
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
name|ProcessSpans
name|blend
init|=
name|unclipped
condition|?
name|s
operator|->
name|penData
operator|.
name|unclipped_blend
else|:
name|s
operator|->
name|penData
operator|.
name|blend
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|scanline
init|=
cast|static_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|->
name|flags
operator|.
name|fast_text
condition|)
block|{
if|if
condition|(
name|unclipped
condition|)
block|{
if|if
condition|(
name|depth
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|s
operator|->
name|penData
operator|.
name|bitmapBlit
condition|)
block|{
name|s
operator|->
name|penData
operator|.
name|bitmapBlit
argument_list|(
name|rb
argument_list|,
name|rx
argument_list|,
name|ry
argument_list|,
name|s
operator|->
name|penData
operator|.
name|solid
operator|.
name|color
argument_list|,
name|scanline
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|bpl
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
elseif|else
if|if
condition|(
name|depth
operator|==
literal|8
condition|)
block|{
if|if
condition|(
name|s
operator|->
name|penData
operator|.
name|alphamapBlit
condition|)
block|{
name|s
operator|->
name|penData
operator|.
name|alphamapBlit
argument_list|(
name|rb
argument_list|,
name|rx
argument_list|,
name|ry
argument_list|,
name|s
operator|->
name|penData
operator|.
name|solid
operator|.
name|color
argument_list|,
name|scanline
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|bpl
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
elseif|else
if|if
condition|(
name|depth
operator|==
literal|32
condition|)
block|{
comment|// (A)RGB Alpha mask where the alpha component is not used.
if|if
condition|(
name|s
operator|->
name|penData
operator|.
name|alphaRGBBlit
condition|)
block|{
name|s
operator|->
name|penData
operator|.
name|alphaRGBBlit
argument_list|(
name|rb
argument_list|,
name|rx
argument_list|,
name|ry
argument_list|,
name|s
operator|->
name|penData
operator|.
name|solid
operator|.
name|color
argument_list|,
operator|(
specifier|const
name|uint
operator|*
operator|)
name|scanline
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|bpl
operator|/
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|deviceDepth
operator|==
literal|32
operator|&&
operator|(
operator|(
name|depth
operator|==
literal|8
operator|&&
name|s
operator|->
name|penData
operator|.
name|alphamapBlit
operator|)
operator|||
operator|(
name|depth
operator|==
literal|32
operator|&&
name|s
operator|->
name|penData
operator|.
name|alphaRGBBlit
operator|)
operator|)
condition|)
block|{
comment|// (A)RGB Alpha mask where the alpha component is not used.
if|if
condition|(
operator|!
name|clip
condition|)
block|{
name|int
name|nx
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|rx
argument_list|)
decl_stmt|;
name|int
name|ny
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|ry
argument_list|)
decl_stmt|;
comment|// Move scanline pointer to compensate for moved x and y
name|int
name|xdiff
init|=
name|nx
operator|-
name|rx
decl_stmt|;
name|int
name|ydiff
init|=
name|ny
operator|-
name|ry
decl_stmt|;
name|scanline
operator|+=
name|ydiff
operator|*
name|bpl
expr_stmt|;
name|scanline
operator|+=
name|xdiff
operator|*
operator|(
name|depth
operator|==
literal|32
condition|?
literal|4
else|:
literal|1
operator|)
expr_stmt|;
name|w
operator|-=
name|xdiff
expr_stmt|;
name|h
operator|-=
name|ydiff
expr_stmt|;
if|if
condition|(
name|nx
operator|+
name|w
operator|>
name|d
operator|->
name|rasterBuffer
operator|->
name|width
argument_list|()
condition|)
name|w
operator|=
name|d
operator|->
name|rasterBuffer
operator|->
name|width
argument_list|()
operator|-
name|nx
expr_stmt|;
if|if
condition|(
name|ny
operator|+
name|h
operator|>
name|d
operator|->
name|rasterBuffer
operator|->
name|height
argument_list|()
condition|)
name|h
operator|=
name|d
operator|->
name|rasterBuffer
operator|->
name|height
argument_list|()
operator|-
name|ny
expr_stmt|;
name|rx
operator|=
name|nx
expr_stmt|;
name|ry
operator|=
name|ny
expr_stmt|;
block|}
if|if
condition|(
name|depth
operator|==
literal|8
condition|)
name|s
operator|->
name|penData
operator|.
name|alphamapBlit
argument_list|(
name|rb
argument_list|,
name|rx
argument_list|,
name|ry
argument_list|,
name|s
operator|->
name|penData
operator|.
name|solid
operator|.
name|color
argument_list|,
name|scanline
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|bpl
argument_list|,
name|clip
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|depth
operator|==
literal|32
condition|)
name|s
operator|->
name|penData
operator|.
name|alphaRGBBlit
argument_list|(
name|rb
argument_list|,
name|rx
argument_list|,
name|ry
argument_list|,
name|s
operator|->
name|penData
operator|.
name|solid
operator|.
name|color
argument_list|,
operator|(
specifier|const
name|uint
operator|*
operator|)
name|scanline
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|bpl
operator|/
literal|4
argument_list|,
name|clip
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|int
name|x0
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|rx
operator|<
literal|0
condition|)
block|{
name|x0
operator|=
operator|-
name|rx
expr_stmt|;
name|w
operator|-=
name|x0
expr_stmt|;
block|}
name|int
name|y0
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|ry
operator|<
literal|0
condition|)
block|{
name|y0
operator|=
operator|-
name|ry
expr_stmt|;
name|scanline
operator|+=
name|bpl
operator|*
name|y0
expr_stmt|;
name|h
operator|-=
name|y0
expr_stmt|;
block|}
name|w
operator|=
name|qMin
argument_list|(
name|w
argument_list|,
name|rb
operator|->
name|width
argument_list|()
operator|-
name|qMax
argument_list|(
literal|0
argument_list|,
name|rx
argument_list|)
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMin
argument_list|(
name|h
argument_list|,
name|rb
operator|->
name|height
argument_list|()
operator|-
name|qMax
argument_list|(
literal|0
argument_list|,
name|ry
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|<=
literal|0
operator|||
name|h
operator|<=
literal|0
condition|)
return|return;
specifier|const
name|int
name|NSPANS
init|=
literal|256
decl_stmt|;
name|QSpan
name|spans
index|[
name|NSPANS
index|]
decl_stmt|;
name|int
name|current
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|x1
init|=
name|x0
operator|+
name|w
decl_stmt|;
specifier|const
name|int
name|y1
init|=
name|y0
operator|+
name|h
decl_stmt|;
if|if
condition|(
name|depth
operator|==
literal|1
condition|)
block|{
for|for
control|(
name|int
name|y
init|=
name|y0
init|;
name|y
operator|<
name|y1
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
name|x0
init|;
name|x
operator|<
name|x1
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|monoVal
argument_list|(
name|scanline
argument_list|,
name|x
argument_list|)
condition|)
block|{
operator|++
name|x
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|current
operator|==
name|NSPANS
condition|)
block|{
name|blend
argument_list|(
name|current
argument_list|,
name|spans
argument_list|,
operator|&
name|s
operator|->
name|penData
argument_list|)
expr_stmt|;
name|current
operator|=
literal|0
expr_stmt|;
block|}
name|spans
index|[
name|current
index|]
operator|.
name|x
operator|=
name|x
operator|+
name|rx
expr_stmt|;
name|spans
index|[
name|current
index|]
operator|.
name|y
operator|=
name|y
operator|+
name|ry
expr_stmt|;
name|spans
index|[
name|current
index|]
operator|.
name|coverage
operator|=
literal|255
expr_stmt|;
name|int
name|len
init|=
literal|1
decl_stmt|;
operator|++
name|x
expr_stmt|;
comment|// extend span until we find a different one.
while|while
condition|(
name|x
operator|<
name|x1
operator|&&
name|monoVal
argument_list|(
name|scanline
argument_list|,
name|x
argument_list|)
condition|)
block|{
operator|++
name|x
expr_stmt|;
operator|++
name|len
expr_stmt|;
block|}
name|spans
index|[
name|current
index|]
operator|.
name|len
operator|=
name|len
expr_stmt|;
operator|++
name|current
expr_stmt|;
block|}
name|scanline
operator|+=
name|bpl
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|depth
operator|==
literal|8
condition|)
block|{
for|for
control|(
name|int
name|y
init|=
name|y0
init|;
name|y
operator|<
name|y1
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
name|x0
init|;
name|x
operator|<
name|x1
condition|;
control|)
block|{
comment|// Skip those with 0 coverage
if|if
condition|(
name|scanline
index|[
name|x
index|]
operator|==
literal|0
condition|)
block|{
operator|++
name|x
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|current
operator|==
name|NSPANS
condition|)
block|{
name|blend
argument_list|(
name|current
argument_list|,
name|spans
argument_list|,
operator|&
name|s
operator|->
name|penData
argument_list|)
expr_stmt|;
name|current
operator|=
literal|0
expr_stmt|;
block|}
name|int
name|coverage
init|=
name|scanline
index|[
name|x
index|]
decl_stmt|;
name|spans
index|[
name|current
index|]
operator|.
name|x
operator|=
name|x
operator|+
name|rx
expr_stmt|;
name|spans
index|[
name|current
index|]
operator|.
name|y
operator|=
name|y
operator|+
name|ry
expr_stmt|;
name|spans
index|[
name|current
index|]
operator|.
name|coverage
operator|=
name|coverage
expr_stmt|;
name|int
name|len
init|=
literal|1
decl_stmt|;
operator|++
name|x
expr_stmt|;
comment|// extend span until we find a different one.
while|while
condition|(
name|x
operator|<
name|x1
operator|&&
name|scanline
index|[
name|x
index|]
operator|==
name|coverage
condition|)
block|{
operator|++
name|x
expr_stmt|;
operator|++
name|len
expr_stmt|;
block|}
name|spans
index|[
name|current
index|]
operator|.
name|len
operator|=
name|len
expr_stmt|;
operator|++
name|current
expr_stmt|;
block|}
name|scanline
operator|+=
name|bpl
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// 32-bit alpha...
specifier|const
name|uint
modifier|*
name|sl
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|scanline
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|y0
init|;
name|y
operator|<
name|y1
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
name|x0
init|;
name|x
operator|<
name|x1
condition|;
control|)
block|{
comment|// Skip those with 0 coverage
if|if
condition|(
operator|(
name|sl
index|[
name|x
index|]
operator|&
literal|0x00ffffff
operator|)
operator|==
literal|0
condition|)
block|{
operator|++
name|x
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|current
operator|==
name|NSPANS
condition|)
block|{
name|blend
argument_list|(
name|current
argument_list|,
name|spans
argument_list|,
operator|&
name|s
operator|->
name|penData
argument_list|)
expr_stmt|;
name|current
operator|=
literal|0
expr_stmt|;
block|}
name|uint
name|rgbCoverage
init|=
name|sl
index|[
name|x
index|]
decl_stmt|;
name|int
name|coverage
init|=
name|qGreen
argument_list|(
name|rgbCoverage
argument_list|)
decl_stmt|;
name|spans
index|[
name|current
index|]
operator|.
name|x
operator|=
name|x
operator|+
name|rx
expr_stmt|;
name|spans
index|[
name|current
index|]
operator|.
name|y
operator|=
name|y
operator|+
name|ry
expr_stmt|;
name|spans
index|[
name|current
index|]
operator|.
name|coverage
operator|=
name|coverage
expr_stmt|;
name|int
name|len
init|=
literal|1
decl_stmt|;
operator|++
name|x
expr_stmt|;
comment|// extend span until we find a different one.
while|while
condition|(
name|x
operator|<
name|x1
operator|&&
name|sl
index|[
name|x
index|]
operator|==
name|rgbCoverage
condition|)
block|{
operator|++
name|x
expr_stmt|;
operator|++
name|len
expr_stmt|;
block|}
name|spans
index|[
name|current
index|]
operator|.
name|len
operator|=
name|len
expr_stmt|;
operator|++
name|current
expr_stmt|;
block|}
name|sl
operator|+=
name|bpl
operator|/
sizeof|sizeof
argument_list|(
name|uint
argument_list|)
expr_stmt|;
block|}
block|}
comment|//     qDebug()<< "alphaPenBlt: num spans="<< current
comment|//<< "span:"<< spans->x<< spans->y<< spans->len<< spans->coverage;
comment|// Call span func for current set of spans.
if|if
condition|(
name|current
operator|!=
literal|0
condition|)
name|blend
argument_list|(
name|current
argument_list|,
name|spans
argument_list|,
operator|&
name|s
operator|->
name|penData
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|drawCachedGlyphs
name|bool
name|QRasterPaintEngine
operator|::
name|drawCachedGlyphs
parameter_list|(
name|int
name|numGlyphs
parameter_list|,
specifier|const
name|glyph_t
modifier|*
name|glyphs
parameter_list|,
specifier|const
name|QFixedPoint
modifier|*
name|positions
parameter_list|,
name|QFontEngine
modifier|*
name|fontEngine
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|fontEngine
operator|->
name|hasInternalCaching
argument_list|()
condition|)
block|{
name|QFontEngine
operator|::
name|GlyphFormat
name|neededFormat
init|=
name|painter
argument_list|()
operator|->
name|device
argument_list|()
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Widget
condition|?
name|QFontEngine
operator|::
name|Format_None
else|:
name|QFontEngine
operator|::
name|Format_A8
decl_stmt|;
if|if
condition|(
name|d_func
argument_list|()
operator|->
name|mono_surface
condition|)
comment|// alphaPenBlt can handle mono, too
name|neededFormat
operator|=
name|QFontEngine
operator|::
name|Format_Mono
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numGlyphs
condition|;
name|i
operator|++
control|)
block|{
name|QFixed
name|spp
init|=
name|fontEngine
operator|->
name|subPixelPositionForX
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|x
argument_list|)
decl_stmt|;
name|QPoint
name|offset
decl_stmt|;
specifier|const
name|QImage
modifier|*
name|alphaMap
init|=
name|fontEngine
operator|->
name|lockedAlphaMapForGlyph
argument_list|(
name|glyphs
index|[
name|i
index|]
argument_list|,
name|spp
argument_list|,
name|neededFormat
argument_list|,
name|s
operator|->
name|matrix
argument_list|,
operator|&
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|alphaMap
operator|==
literal|0
operator|||
name|alphaMap
operator|->
name|isNull
argument_list|()
condition|)
continue|continue;
name|alphaPenBlt
argument_list|(
name|alphaMap
operator|->
name|constBits
argument_list|()
argument_list|,
name|alphaMap
operator|->
name|bytesPerLine
argument_list|()
argument_list|,
name|alphaMap
operator|->
name|depth
argument_list|()
argument_list|,
name|qFloor
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|x
argument_list|)
operator|+
name|offset
operator|.
name|x
argument_list|()
argument_list|,
name|qRound
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|y
argument_list|)
operator|+
name|offset
operator|.
name|y
argument_list|()
argument_list|,
name|alphaMap
operator|->
name|width
argument_list|()
argument_list|,
name|alphaMap
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|fontEngine
operator|->
name|unlockAlphaMapForGlyph
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|QFontEngine
operator|::
name|GlyphFormat
name|glyphFormat
init|=
name|fontEngine
operator|->
name|glyphFormat
operator|!=
name|QFontEngine
operator|::
name|Format_None
condition|?
name|fontEngine
operator|->
name|glyphFormat
else|:
name|d
operator|->
name|glyphCacheFormat
decl_stmt|;
name|QImageTextureGlyphCache
modifier|*
name|cache
init|=
cast|static_cast
argument_list|<
name|QImageTextureGlyphCache
operator|*
argument_list|>
argument_list|(
name|fontEngine
operator|->
name|glyphCache
argument_list|(
literal|0
argument_list|,
name|glyphFormat
argument_list|,
name|s
operator|->
name|matrix
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cache
condition|)
block|{
name|cache
operator|=
operator|new
name|QImageTextureGlyphCache
argument_list|(
name|glyphFormat
argument_list|,
name|s
operator|->
name|matrix
argument_list|)
expr_stmt|;
name|fontEngine
operator|->
name|setGlyphCache
argument_list|(
literal|0
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
name|cache
operator|->
name|populate
argument_list|(
name|fontEngine
argument_list|,
name|numGlyphs
argument_list|,
name|glyphs
argument_list|,
name|positions
argument_list|)
expr_stmt|;
name|cache
operator|->
name|fillInPendingGlyphs
argument_list|()
expr_stmt|;
specifier|const
name|QImage
modifier|&
name|image
init|=
name|cache
operator|->
name|image
argument_list|()
decl_stmt|;
name|int
name|bpl
init|=
name|image
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
name|int
name|depth
init|=
name|image
operator|.
name|depth
argument_list|()
decl_stmt|;
name|int
name|rightShift
init|=
literal|0
decl_stmt|;
name|int
name|leftShift
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|depth
operator|==
literal|32
condition|)
name|leftShift
operator|=
literal|2
expr_stmt|;
comment|// multiply by 4
elseif|else
if|if
condition|(
name|depth
operator|==
literal|1
condition|)
name|rightShift
operator|=
literal|3
expr_stmt|;
comment|// divide by 8
name|int
name|margin
init|=
name|fontEngine
operator|->
name|glyphMargin
argument_list|(
name|glyphFormat
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|bits
init|=
name|image
operator|.
name|bits
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numGlyphs
condition|;
operator|++
name|i
control|)
block|{
name|QFixed
name|subPixelPosition
init|=
name|fontEngine
operator|->
name|subPixelPositionForX
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|x
argument_list|)
decl_stmt|;
name|QTextureGlyphCache
operator|::
name|GlyphAndSubPixelPosition
name|glyph
argument_list|(
name|glyphs
index|[
name|i
index|]
argument_list|,
name|subPixelPosition
argument_list|)
decl_stmt|;
specifier|const
name|QTextureGlyphCache
operator|::
name|Coord
modifier|&
name|c
init|=
name|cache
operator|->
name|coords
index|[
name|glyph
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
name|int
name|x
init|=
name|qFloor
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|x
argument_list|)
operator|+
name|c
operator|.
name|baseLineX
operator|-
name|margin
decl_stmt|;
name|int
name|y
init|=
name|qRound
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|y
argument_list|)
operator|-
name|c
operator|.
name|baseLineY
operator|-
name|margin
decl_stmt|;
comment|// printf("drawing [%d %d %d %d] baseline [%d %d], glyph: %d, to: %d %d, pos: %d %d\n",
comment|//        c.x, c.y,
comment|//        c.w, c.h,
comment|//        c.baseLineX, c.baseLineY,
comment|//        glyphs[i],
comment|//        x, y,
comment|//        positions[i].x.toInt(), positions[i].y.toInt());
specifier|const
name|uchar
modifier|*
name|glyphBits
init|=
name|bits
operator|+
operator|(
operator|(
name|c
operator|.
name|x
operator|<<
name|leftShift
operator|)
operator|>>
name|rightShift
operator|)
operator|+
name|c
operator|.
name|y
operator|*
name|bpl
decl_stmt|;
if|if
condition|(
name|glyphFormat
operator|==
name|QFontEngine
operator|::
name|Format_ARGB
condition|)
block|{
comment|// The current state transform has already been applied to the positions,
comment|// so we prevent drawImage() from re-applying the transform by clearing
comment|// the state for the duration of the call.
name|QTransform
name|originalTransform
init|=
name|s
operator|->
name|matrix
decl_stmt|;
name|s
operator|->
name|matrix
operator|=
name|QTransform
argument_list|()
expr_stmt|;
name|drawImage
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|QImage
argument_list|(
name|glyphBits
argument_list|,
name|c
operator|.
name|w
argument_list|,
name|c
operator|.
name|h
argument_list|,
name|bpl
argument_list|,
name|image
operator|.
name|format
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|->
name|matrix
operator|=
name|originalTransform
expr_stmt|;
block|}
else|else
block|{
name|alphaPenBlt
argument_list|(
name|glyphBits
argument_list|,
name|bpl
argument_list|,
name|depth
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|c
operator|.
name|w
argument_list|,
name|c
operator|.
name|h
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!  * Returns \c true if the rectangle is completely within the current clip  * state of the paint engine.  */
end_comment
begin_function
DECL|function|isUnclipped_normalized
name|bool
name|QRasterPaintEnginePrivate
operator|::
name|isUnclipped_normalized
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
specifier|const
block|{
specifier|const
name|QClipData
modifier|*
name|cl
init|=
name|clip
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cl
condition|)
block|{
comment|// inline contains() for performance (we know the rects are normalized)
specifier|const
name|QRect
modifier|&
name|r1
init|=
name|deviceRect
decl_stmt|;
return|return
operator|(
name|r
operator|.
name|left
argument_list|()
operator|>=
name|r1
operator|.
name|left
argument_list|()
operator|&&
name|r
operator|.
name|right
argument_list|()
operator|<=
name|r1
operator|.
name|right
argument_list|()
operator|&&
name|r
operator|.
name|top
argument_list|()
operator|>=
name|r1
operator|.
name|top
argument_list|()
operator|&&
name|r
operator|.
name|bottom
argument_list|()
operator|<=
name|r1
operator|.
name|bottom
argument_list|()
operator|)
return|;
block|}
if|if
condition|(
name|cl
operator|->
name|hasRectClip
condition|)
block|{
comment|// currently all painting functions clips to deviceRect internally
if|if
condition|(
name|cl
operator|->
name|clipRect
operator|==
name|deviceRect
condition|)
return|return
literal|true
return|;
comment|// inline contains() for performance (we know the rects are normalized)
specifier|const
name|QRect
modifier|&
name|r1
init|=
name|cl
operator|->
name|clipRect
decl_stmt|;
return|return
operator|(
name|r
operator|.
name|left
argument_list|()
operator|>=
name|r1
operator|.
name|left
argument_list|()
operator|&&
name|r
operator|.
name|right
argument_list|()
operator|<=
name|r1
operator|.
name|right
argument_list|()
operator|&&
name|r
operator|.
name|top
argument_list|()
operator|>=
name|r1
operator|.
name|top
argument_list|()
operator|&&
name|r
operator|.
name|bottom
argument_list|()
operator|<=
name|r1
operator|.
name|bottom
argument_list|()
operator|)
return|;
block|}
else|else
block|{
return|return
name|qt_region_strictContains
argument_list|(
name|cl
operator|->
name|clipRegion
argument_list|,
name|r
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|isUnclipped
name|bool
name|QRasterPaintEnginePrivate
operator|::
name|isUnclipped
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|int
name|penWidth
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
specifier|const
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|q
operator|->
name|state
argument_list|()
decl_stmt|;
specifier|const
name|QClipData
modifier|*
name|cl
init|=
name|clip
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cl
condition|)
block|{
name|QRect
name|r
init|=
name|rect
operator|.
name|normalized
argument_list|()
decl_stmt|;
comment|// inline contains() for performance (we know the rects are normalized)
specifier|const
name|QRect
modifier|&
name|r1
init|=
name|deviceRect
decl_stmt|;
return|return
operator|(
name|r
operator|.
name|left
argument_list|()
operator|>=
name|r1
operator|.
name|left
argument_list|()
operator|&&
name|r
operator|.
name|right
argument_list|()
operator|<=
name|r1
operator|.
name|right
argument_list|()
operator|&&
name|r
operator|.
name|top
argument_list|()
operator|>=
name|r1
operator|.
name|top
argument_list|()
operator|&&
name|r
operator|.
name|bottom
argument_list|()
operator|<=
name|r1
operator|.
name|bottom
argument_list|()
operator|)
return|;
block|}
comment|// currently all painting functions that call this function clip to deviceRect internally
if|if
condition|(
name|cl
operator|->
name|hasRectClip
operator|&&
name|cl
operator|->
name|clipRect
operator|==
name|deviceRect
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|s
operator|->
name|flags
operator|.
name|antialiased
condition|)
operator|++
name|penWidth
expr_stmt|;
name|QRect
name|r
init|=
name|rect
operator|.
name|normalized
argument_list|()
decl_stmt|;
if|if
condition|(
name|penWidth
operator|>
literal|0
condition|)
block|{
name|r
operator|.
name|setX
argument_list|(
name|r
operator|.
name|x
argument_list|()
operator|-
name|penWidth
argument_list|)
expr_stmt|;
name|r
operator|.
name|setY
argument_list|(
name|r
operator|.
name|y
argument_list|()
operator|-
name|penWidth
argument_list|)
expr_stmt|;
name|r
operator|.
name|setWidth
argument_list|(
name|r
operator|.
name|width
argument_list|()
operator|+
literal|2
operator|*
name|penWidth
argument_list|)
expr_stmt|;
name|r
operator|.
name|setHeight
argument_list|(
name|r
operator|.
name|height
argument_list|()
operator|+
literal|2
operator|*
name|penWidth
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cl
operator|->
name|hasRectClip
condition|)
block|{
comment|// inline contains() for performance (we know the rects are normalized)
specifier|const
name|QRect
modifier|&
name|r1
init|=
name|cl
operator|->
name|clipRect
decl_stmt|;
return|return
operator|(
name|r
operator|.
name|left
argument_list|()
operator|>=
name|r1
operator|.
name|left
argument_list|()
operator|&&
name|r
operator|.
name|right
argument_list|()
operator|<=
name|r1
operator|.
name|right
argument_list|()
operator|&&
name|r
operator|.
name|top
argument_list|()
operator|>=
name|r1
operator|.
name|top
argument_list|()
operator|&&
name|r
operator|.
name|bottom
argument_list|()
operator|<=
name|r1
operator|.
name|bottom
argument_list|()
operator|)
return|;
block|}
else|else
block|{
return|return
name|qt_region_strictContains
argument_list|(
name|cl
operator|->
name|clipRegion
argument_list|,
name|r
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|isUnclipped
specifier|inline
name|bool
name|QRasterPaintEnginePrivate
operator|::
name|isUnclipped
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
name|int
name|penWidth
parameter_list|)
specifier|const
block|{
return|return
name|isUnclipped
argument_list|(
name|rect
operator|.
name|normalized
argument_list|()
operator|.
name|toAlignedRect
argument_list|()
argument_list|,
name|penWidth
argument_list|)
return|;
block|}
end_function
begin_function
specifier|inline
name|ProcessSpans
DECL|function|getBrushFunc
name|QRasterPaintEnginePrivate
operator|::
name|getBrushFunc
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QSpanData
modifier|*
name|data
parameter_list|)
specifier|const
block|{
return|return
name|isUnclipped
argument_list|(
name|rect
argument_list|,
literal|0
argument_list|)
condition|?
name|data
operator|->
name|unclipped_blend
else|:
name|data
operator|->
name|blend
return|;
block|}
end_function
begin_function
specifier|inline
name|ProcessSpans
DECL|function|getBrushFunc
name|QRasterPaintEnginePrivate
operator|::
name|getBrushFunc
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
specifier|const
name|QSpanData
modifier|*
name|data
parameter_list|)
specifier|const
block|{
return|return
name|isUnclipped
argument_list|(
name|rect
argument_list|,
literal|0
argument_list|)
condition|?
name|data
operator|->
name|unclipped_blend
else|:
name|data
operator|->
name|blend
return|;
block|}
end_function
begin_function
specifier|inline
name|ProcessSpans
DECL|function|getPenFunc
name|QRasterPaintEnginePrivate
operator|::
name|getPenFunc
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
specifier|const
name|QSpanData
modifier|*
name|data
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
specifier|const
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|q
operator|->
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|->
name|flags
operator|.
name|fast_pen
operator|&&
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|>
name|QTransform
operator|::
name|TxTranslate
condition|)
return|return
name|data
operator|->
name|blend
return|;
specifier|const
name|int
name|penWidth
init|=
name|s
operator|->
name|flags
operator|.
name|fast_pen
condition|?
literal|1
else|:
name|qCeil
argument_list|(
name|s
operator|->
name|lastPen
operator|.
name|widthF
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|isUnclipped
argument_list|(
name|rect
argument_list|,
name|penWidth
argument_list|)
condition|?
name|data
operator|->
name|unclipped_blend
else|:
name|data
operator|->
name|blend
return|;
block|}
end_function
begin_function
DECL|function|visibleGlyphRange
specifier|static
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|visibleGlyphRange
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|clip
parameter_list|,
name|QFontEngine
modifier|*
name|fontEngine
parameter_list|,
name|glyph_t
modifier|*
name|glyphs
parameter_list|,
name|QFixedPoint
modifier|*
name|positions
parameter_list|,
name|int
name|numGlyphs
parameter_list|)
block|{
name|QFixed
name|clipLeft
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|clip
operator|.
name|left
argument_list|()
argument_list|)
decl_stmt|;
name|QFixed
name|clipRight
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|clip
operator|.
name|right
argument_list|()
argument_list|)
decl_stmt|;
name|QFixed
name|clipTop
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|clip
operator|.
name|top
argument_list|()
argument_list|)
decl_stmt|;
name|QFixed
name|clipBottom
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|clip
operator|.
name|bottom
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|first
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|first
operator|<
name|numGlyphs
condition|)
block|{
name|glyph_metrics_t
name|metrics
init|=
name|fontEngine
operator|->
name|boundingBox
argument_list|(
name|glyphs
index|[
name|first
index|]
argument_list|)
decl_stmt|;
name|QFixed
name|left
init|=
name|metrics
operator|.
name|x
operator|+
name|positions
index|[
name|first
index|]
operator|.
name|x
decl_stmt|;
name|QFixed
name|top
init|=
name|metrics
operator|.
name|y
operator|+
name|positions
index|[
name|first
index|]
operator|.
name|y
decl_stmt|;
name|QFixed
name|right
init|=
name|left
operator|+
name|metrics
operator|.
name|width
decl_stmt|;
name|QFixed
name|bottom
init|=
name|top
operator|+
name|metrics
operator|.
name|height
decl_stmt|;
if|if
condition|(
name|left
argument_list|<
name|clipRight
operator|&&
name|right
argument_list|>
name|clipLeft
operator|&&
name|top
argument_list|<
name|clipBottom
operator|&&
name|bottom
argument_list|>
name|clipTop
condition|)
break|break;
operator|++
name|first
expr_stmt|;
block|}
name|int
name|last
init|=
name|numGlyphs
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|last
operator|>
name|first
condition|)
block|{
name|glyph_metrics_t
name|metrics
init|=
name|fontEngine
operator|->
name|boundingBox
argument_list|(
name|glyphs
index|[
name|last
index|]
argument_list|)
decl_stmt|;
name|QFixed
name|left
init|=
name|metrics
operator|.
name|x
operator|+
name|positions
index|[
name|last
index|]
operator|.
name|x
decl_stmt|;
name|QFixed
name|top
init|=
name|metrics
operator|.
name|y
operator|+
name|positions
index|[
name|last
index|]
operator|.
name|y
decl_stmt|;
name|QFixed
name|right
init|=
name|left
operator|+
name|metrics
operator|.
name|width
decl_stmt|;
name|QFixed
name|bottom
init|=
name|top
operator|+
name|metrics
operator|.
name|height
decl_stmt|;
if|if
condition|(
name|left
argument_list|<
name|clipRight
operator|&&
name|right
argument_list|>
name|clipLeft
operator|&&
name|top
argument_list|<
name|clipBottom
operator|&&
name|bottom
argument_list|>
name|clipTop
condition|)
break|break;
operator|--
name|last
expr_stmt|;
block|}
return|return
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|(
name|first
argument_list|,
name|last
operator|+
literal|1
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!    \reimp */
end_comment
begin_function
DECL|function|drawStaticTextItem
name|void
name|QRasterPaintEngine
operator|::
name|drawStaticTextItem
parameter_list|(
name|QStaticTextItem
modifier|*
name|textItem
parameter_list|)
block|{
if|if
condition|(
name|textItem
operator|->
name|numGlyphs
operator|==
literal|0
condition|)
return|return;
name|ensurePen
argument_list|()
expr_stmt|;
name|ensureRasterState
argument_list|()
expr_stmt|;
name|QTransform
name|matrix
init|=
name|state
argument_list|()
operator|->
name|matrix
decl_stmt|;
name|QFontEngine
modifier|*
name|fontEngine
init|=
name|textItem
operator|->
name|fontEngine
argument_list|()
decl_stmt|;
if|if
condition|(
name|shouldDrawCachedGlyphs
argument_list|(
name|fontEngine
argument_list|,
name|matrix
argument_list|)
condition|)
block|{
name|drawCachedGlyphs
argument_list|(
name|textItem
operator|->
name|numGlyphs
argument_list|,
name|textItem
operator|->
name|glyphs
argument_list|,
name|textItem
operator|->
name|glyphPositions
argument_list|,
name|fontEngine
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matrix
operator|.
name|type
argument_list|()
operator|<
name|QTransform
operator|::
name|TxProject
condition|)
block|{
name|bool
name|invertible
decl_stmt|;
name|QTransform
name|invMat
init|=
name|matrix
operator|.
name|inverted
argument_list|(
operator|&
name|invertible
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|invertible
condition|)
return|return;
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|range
init|=
name|visibleGlyphRange
argument_list|(
name|invMat
operator|.
name|mapRect
argument_list|(
name|clipBoundingRect
argument_list|()
argument_list|)
argument_list|,
name|textItem
operator|->
name|fontEngine
argument_list|()
argument_list|,
name|textItem
operator|->
name|glyphs
argument_list|,
name|textItem
operator|->
name|glyphPositions
argument_list|,
name|textItem
operator|->
name|numGlyphs
argument_list|)
decl_stmt|;
name|QStaticTextItem
name|copy
init|=
operator|*
name|textItem
decl_stmt|;
name|copy
operator|.
name|glyphs
operator|+=
name|range
operator|.
name|first
expr_stmt|;
name|copy
operator|.
name|glyphPositions
operator|+=
name|range
operator|.
name|first
expr_stmt|;
name|copy
operator|.
name|numGlyphs
operator|=
name|range
operator|.
name|second
operator|-
name|range
operator|.
name|first
expr_stmt|;
name|QPaintEngineEx
operator|::
name|drawStaticTextItem
argument_list|(
operator|&
name|copy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPaintEngineEx
operator|::
name|drawStaticTextItem
argument_list|(
name|textItem
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|drawTextItem
name|void
name|QRasterPaintEngine
operator|::
name|drawTextItem
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QTextItem
modifier|&
name|textItem
parameter_list|)
block|{
specifier|const
name|QTextItemInt
modifier|&
name|ti
init|=
cast|static_cast
argument_list|<
specifier|const
name|QTextItemInt
operator|&
argument_list|>
argument_list|(
name|textItem
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|" - QRasterPaintEngine::drawTextItem(), (%.2f,%.2f), string=%s ct=%d\n"
argument_list|,
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|,
name|QString
operator|::
name|fromRawData
argument_list|(
name|ti
operator|.
name|chars
argument_list|,
name|ti
operator|.
name|num_chars
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|d
operator|->
name|glyphCacheFormat
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|ti
operator|.
name|glyphs
operator|.
name|numGlyphs
operator|==
literal|0
condition|)
return|return;
name|ensurePen
argument_list|()
expr_stmt|;
name|ensureRasterState
argument_list|()
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
name|QTransform
name|matrix
init|=
name|s
operator|->
name|matrix
decl_stmt|;
if|if
condition|(
name|shouldDrawCachedGlyphs
argument_list|(
name|ti
operator|.
name|fontEngine
argument_list|,
name|matrix
argument_list|)
condition|)
block|{
name|QVarLengthArray
argument_list|<
name|QFixedPoint
argument_list|>
name|positions
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|glyph_t
argument_list|>
name|glyphs
decl_stmt|;
name|matrix
operator|.
name|translate
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|ti
operator|.
name|fontEngine
operator|->
name|getGlyphPositions
argument_list|(
name|ti
operator|.
name|glyphs
argument_list|,
name|matrix
argument_list|,
name|ti
operator|.
name|flags
argument_list|,
name|glyphs
argument_list|,
name|positions
argument_list|)
expr_stmt|;
name|drawCachedGlyphs
argument_list|(
name|glyphs
operator|.
name|size
argument_list|()
argument_list|,
name|glyphs
operator|.
name|constData
argument_list|()
argument_list|,
name|positions
operator|.
name|constData
argument_list|()
argument_list|,
name|ti
operator|.
name|fontEngine
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matrix
operator|.
name|type
argument_list|()
operator|<
name|QTransform
operator|::
name|TxProject
operator|&&
name|ti
operator|.
name|fontEngine
operator|->
name|supportsTransformation
argument_list|(
name|matrix
argument_list|)
condition|)
block|{
name|bool
name|invertible
decl_stmt|;
name|QTransform
name|invMat
init|=
name|matrix
operator|.
name|inverted
argument_list|(
operator|&
name|invertible
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|invertible
condition|)
return|return;
name|QVarLengthArray
argument_list|<
name|QFixedPoint
argument_list|>
name|positions
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|glyph_t
argument_list|>
name|glyphs
decl_stmt|;
name|ti
operator|.
name|fontEngine
operator|->
name|getGlyphPositions
argument_list|(
name|ti
operator|.
name|glyphs
argument_list|,
name|QTransform
operator|::
name|fromTranslate
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|ti
operator|.
name|flags
argument_list|,
name|glyphs
argument_list|,
name|positions
argument_list|)
expr_stmt|;
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|range
init|=
name|visibleGlyphRange
argument_list|(
name|invMat
operator|.
name|mapRect
argument_list|(
name|clipBoundingRect
argument_list|()
argument_list|)
argument_list|,
name|ti
operator|.
name|fontEngine
argument_list|,
name|glyphs
operator|.
name|data
argument_list|()
argument_list|,
name|positions
operator|.
name|data
argument_list|()
argument_list|,
name|glyphs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|first
operator|>=
name|range
operator|.
name|second
condition|)
return|return;
name|QStaticTextItem
name|staticTextItem
decl_stmt|;
name|staticTextItem
operator|.
name|color
operator|=
name|s
operator|->
name|pen
operator|.
name|color
argument_list|()
expr_stmt|;
name|staticTextItem
operator|.
name|font
operator|=
name|s
operator|->
name|font
expr_stmt|;
name|staticTextItem
operator|.
name|setFontEngine
argument_list|(
name|ti
operator|.
name|fontEngine
argument_list|)
expr_stmt|;
name|staticTextItem
operator|.
name|numGlyphs
operator|=
name|range
operator|.
name|second
operator|-
name|range
operator|.
name|first
expr_stmt|;
name|staticTextItem
operator|.
name|glyphs
operator|=
name|glyphs
operator|.
name|data
argument_list|()
operator|+
name|range
operator|.
name|first
expr_stmt|;
name|staticTextItem
operator|.
name|glyphPositions
operator|=
name|positions
operator|.
name|data
argument_list|()
operator|+
name|range
operator|.
name|first
expr_stmt|;
name|QPaintEngineEx
operator|::
name|drawStaticTextItem
argument_list|(
operator|&
name|staticTextItem
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPaintEngineEx
operator|::
name|drawTextItem
argument_list|(
name|p
argument_list|,
name|ti
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|drawPoints
name|void
name|QRasterPaintEngine
operator|::
name|drawPoints
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
name|ensurePen
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|s
operator|->
name|penData
operator|.
name|blend
condition|)
return|return;
if|if
condition|(
operator|!
name|s
operator|->
name|flags
operator|.
name|fast_pen
condition|)
block|{
name|QPaintEngineEx
operator|::
name|drawPoints
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|)
expr_stmt|;
return|return;
block|}
name|QCosmeticStroker
name|stroker
argument_list|(
name|s
argument_list|,
name|d
operator|->
name|deviceRect
argument_list|,
name|d
operator|->
name|deviceRectUnclipped
argument_list|)
decl_stmt|;
name|stroker
operator|.
name|setLegacyRoundingEnabled
argument_list|(
name|s
operator|->
name|flags
operator|.
name|legacy_rounding
argument_list|)
expr_stmt|;
name|stroker
operator|.
name|drawPoints
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPoints
name|void
name|QRasterPaintEngine
operator|::
name|drawPoints
parameter_list|(
specifier|const
name|QPoint
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
name|ensurePen
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|s
operator|->
name|penData
operator|.
name|blend
condition|)
return|return;
if|if
condition|(
operator|!
name|s
operator|->
name|flags
operator|.
name|fast_pen
condition|)
block|{
name|QPaintEngineEx
operator|::
name|drawPoints
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|)
expr_stmt|;
return|return;
block|}
name|QCosmeticStroker
name|stroker
argument_list|(
name|s
argument_list|,
name|d
operator|->
name|deviceRect
argument_list|,
name|d
operator|->
name|deviceRectUnclipped
argument_list|)
decl_stmt|;
name|stroker
operator|.
name|setLegacyRoundingEnabled
argument_list|(
name|s
operator|->
name|flags
operator|.
name|legacy_rounding
argument_list|)
expr_stmt|;
name|stroker
operator|.
name|drawPoints
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|drawLines
name|void
name|QRasterPaintEngine
operator|::
name|drawLines
parameter_list|(
specifier|const
name|QLine
modifier|*
name|lines
parameter_list|,
name|int
name|lineCount
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" - QRasterPaintEngine::drawLines(QLine*)"
operator|<<
name|lineCount
expr_stmt|;
endif|#
directive|endif
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
name|ensurePen
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|s
operator|->
name|penData
operator|.
name|blend
condition|)
return|return;
if|if
condition|(
name|s
operator|->
name|flags
operator|.
name|fast_pen
condition|)
block|{
name|QCosmeticStroker
name|stroker
argument_list|(
name|s
argument_list|,
name|d
operator|->
name|deviceRect
argument_list|,
name|d
operator|->
name|deviceRectUnclipped
argument_list|)
decl_stmt|;
name|stroker
operator|.
name|setLegacyRoundingEnabled
argument_list|(
name|s
operator|->
name|flags
operator|.
name|legacy_rounding
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lineCount
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QLine
modifier|&
name|l
init|=
name|lines
index|[
name|i
index|]
decl_stmt|;
name|stroker
operator|.
name|drawLine
argument_list|(
name|l
operator|.
name|p1
argument_list|()
argument_list|,
name|l
operator|.
name|p2
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QPaintEngineEx
operator|::
name|drawLines
argument_list|(
name|lines
argument_list|,
name|lineCount
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterizeLine_dashed
name|void
name|QRasterPaintEnginePrivate
operator|::
name|rasterizeLine_dashed
parameter_list|(
name|QLineF
name|line
parameter_list|,
name|qreal
name|width
parameter_list|,
name|int
modifier|*
name|dashIndex
parameter_list|,
name|qreal
modifier|*
name|dashOffset
parameter_list|,
name|bool
modifier|*
name|inDash
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|q
operator|->
name|state
argument_list|()
decl_stmt|;
specifier|const
name|QPen
modifier|&
name|pen
init|=
name|s
operator|->
name|lastPen
decl_stmt|;
specifier|const
name|bool
name|squareCap
init|=
operator|(
name|pen
operator|.
name|capStyle
argument_list|()
operator|==
name|Qt
operator|::
name|SquareCap
operator|)
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|qreal
argument_list|>
name|pattern
init|=
name|pen
operator|.
name|dashPattern
argument_list|()
decl_stmt|;
name|qreal
name|patternLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pattern
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|patternLength
operator|+=
name|pattern
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|patternLength
operator|<=
literal|0
condition|)
return|return;
name|qreal
name|length
init|=
name|line
operator|.
name|length
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
specifier|const
name|bool
name|rasterize
init|=
operator|*
name|inDash
decl_stmt|;
name|qreal
name|dash
init|=
operator|(
name|pattern
operator|.
name|at
argument_list|(
operator|*
name|dashIndex
argument_list|)
operator|-
operator|*
name|dashOffset
operator|)
operator|*
name|width
decl_stmt|;
name|QLineF
name|l
init|=
name|line
decl_stmt|;
if|if
condition|(
name|dash
operator|>=
name|length
condition|)
block|{
name|dash
operator|=
name|length
expr_stmt|;
operator|*
name|dashOffset
operator|+=
name|dash
operator|/
name|width
expr_stmt|;
name|length
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|*
name|dashOffset
operator|=
literal|0
expr_stmt|;
operator|*
name|inDash
operator|=
operator|!
operator|(
operator|*
name|inDash
operator|)
expr_stmt|;
if|if
condition|(
operator|++
operator|*
name|dashIndex
operator|>=
name|pattern
operator|.
name|size
argument_list|()
condition|)
operator|*
name|dashIndex
operator|=
literal|0
expr_stmt|;
name|length
operator|-=
name|dash
expr_stmt|;
name|l
operator|.
name|setLength
argument_list|(
name|dash
argument_list|)
expr_stmt|;
name|line
operator|.
name|setP1
argument_list|(
name|l
operator|.
name|p2
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rasterize
operator|&&
name|dash
operator|>
literal|0
condition|)
name|rasterizer
operator|->
name|rasterizeLine
argument_list|(
name|l
operator|.
name|p1
argument_list|()
argument_list|,
name|l
operator|.
name|p2
argument_list|()
argument_list|,
name|width
operator|/
name|dash
argument_list|,
name|squareCap
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|drawLines
name|void
name|QRasterPaintEngine
operator|::
name|drawLines
parameter_list|(
specifier|const
name|QLineF
modifier|*
name|lines
parameter_list|,
name|int
name|lineCount
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|" - QRasterPaintEngine::drawLines(QLineF *)"
operator|<<
name|lineCount
expr_stmt|;
endif|#
directive|endif
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
name|ensurePen
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|s
operator|->
name|penData
operator|.
name|blend
condition|)
return|return;
if|if
condition|(
name|s
operator|->
name|flags
operator|.
name|fast_pen
condition|)
block|{
name|QCosmeticStroker
name|stroker
argument_list|(
name|s
argument_list|,
name|d
operator|->
name|deviceRect
argument_list|,
name|d
operator|->
name|deviceRectUnclipped
argument_list|)
decl_stmt|;
name|stroker
operator|.
name|setLegacyRoundingEnabled
argument_list|(
name|s
operator|->
name|flags
operator|.
name|legacy_rounding
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lineCount
condition|;
operator|++
name|i
control|)
block|{
name|QLineF
name|line
init|=
name|lines
index|[
name|i
index|]
decl_stmt|;
name|stroker
operator|.
name|drawLine
argument_list|(
name|line
operator|.
name|p1
argument_list|()
argument_list|,
name|line
operator|.
name|p2
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QPaintEngineEx
operator|::
name|drawLines
argument_list|(
name|lines
argument_list|,
name|lineCount
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|drawEllipse
name|void
name|QRasterPaintEngine
operator|::
name|drawEllipse
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
name|ensurePen
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|qpen_style
argument_list|(
name|s
operator|->
name|lastPen
argument_list|)
operator|==
name|Qt
operator|::
name|SolidLine
operator|&&
name|s
operator|->
name|flags
operator|.
name|fast_pen
operator|)
operator|||
operator|(
name|qpen_style
argument_list|(
name|s
operator|->
name|lastPen
argument_list|)
operator|==
name|Qt
operator|::
name|NoPen
operator|)
operator|)
operator|&&
operator|!
name|s
operator|->
name|flags
operator|.
name|antialiased
operator|&&
name|qMax
argument_list|(
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
operator|<
name|QT_RASTER_COORD_LIMIT
operator|&&
operator|!
name|rect
operator|.
name|isEmpty
argument_list|()
operator|&&
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|<=
name|QTransform
operator|::
name|TxScale
condition|)
comment|// no shear
block|{
name|ensureBrush
argument_list|()
expr_stmt|;
specifier|const
name|QRectF
name|r
init|=
name|s
operator|->
name|matrix
operator|.
name|mapRect
argument_list|(
name|rect
argument_list|)
decl_stmt|;
name|ProcessSpans
name|penBlend
init|=
name|d
operator|->
name|getPenFunc
argument_list|(
name|r
argument_list|,
operator|&
name|s
operator|->
name|penData
argument_list|)
decl_stmt|;
name|ProcessSpans
name|brushBlend
init|=
name|d
operator|->
name|getBrushFunc
argument_list|(
name|r
argument_list|,
operator|&
name|s
operator|->
name|brushData
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|brect
init|=
name|QRect
argument_list|(
name|int
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|r
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|int_dim
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|)
argument_list|,
name|int_dim
argument_list|(
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|brect
operator|==
name|r
condition|)
block|{
name|drawEllipse_midpoint_i
argument_list|(
name|brect
argument_list|,
name|d
operator|->
name|deviceRect
argument_list|,
name|penBlend
argument_list|,
name|brushBlend
argument_list|,
operator|&
name|s
operator|->
name|penData
argument_list|,
operator|&
name|s
operator|->
name|brushData
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|QPaintEngineEx
operator|::
name|drawEllipse
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setDC
name|void
name|QRasterPaintEngine
operator|::
name|setDC
parameter_list|(
name|HDC
name|hdc
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|hdc
operator|=
name|hdc
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|getDC
name|HDC
name|QRasterPaintEngine
operator|::
name|getDC
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|hdc
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|releaseDC
name|void
name|QRasterPaintEngine
operator|::
name|releaseDC
parameter_list|(
name|HDC
parameter_list|)
specifier|const
block|{ }
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|requiresPretransformedGlyphPositions
name|bool
name|QRasterPaintEngine
operator|::
name|requiresPretransformedGlyphPositions
parameter_list|(
name|QFontEngine
modifier|*
name|fontEngine
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|m
parameter_list|)
specifier|const
block|{
comment|// Cached glyphs always require pretransformed positions
if|if
condition|(
name|shouldDrawCachedGlyphs
argument_list|(
name|fontEngine
argument_list|,
name|m
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// Otherwise let the base-class decide based on the transform
return|return
name|QPaintEngineEx
operator|::
name|requiresPretransformedGlyphPositions
argument_list|(
name|fontEngine
argument_list|,
name|m
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!    Indicates whether glyph caching is supported by the font engine    \a fontEngine with the given transform \a m applied. */
end_comment
begin_function
DECL|function|shouldDrawCachedGlyphs
name|bool
name|QRasterPaintEngine
operator|::
name|shouldDrawCachedGlyphs
parameter_list|(
name|QFontEngine
modifier|*
name|fontEngine
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|m
parameter_list|)
specifier|const
block|{
comment|// The raster engine does not support projected cached glyph drawing
if|if
condition|(
name|m
operator|.
name|type
argument_list|()
operator|>=
name|QTransform
operator|::
name|TxProject
condition|)
return|return
literal|false
return|;
comment|// The font engine might not support filling the glyph cache
comment|// with the given transform applied, in which case we need to
comment|// fall back to the QPainterPath code-path. This does not apply
comment|// for engines with internal caching, as we don't use the engine
comment|// to fill up our cache in that case.
if|if
condition|(
operator|!
name|fontEngine
operator|->
name|hasInternalCaching
argument_list|()
operator|&&
operator|!
name|fontEngine
operator|->
name|supportsTransformation
argument_list|(
name|m
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|QPaintEngineEx
operator|::
name|shouldDrawCachedGlyphs
argument_list|(
name|fontEngine
argument_list|,
name|m
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|coordinateOffset
name|QPoint
name|QRasterPaintEngine
operator|::
name|coordinateOffset
parameter_list|()
specifier|const
block|{
return|return
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|drawBitmap
name|void
name|QRasterPaintEngine
operator|::
name|drawBitmap
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|QSpanData
modifier|*
name|fg
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|fg
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fg
operator|->
name|blend
condition|)
return|return;
name|Q_D
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|int
name|spanCount
init|=
literal|256
decl_stmt|;
name|QT_FT_Span
name|spans
index|[
name|spanCount
index|]
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
comment|// Boundaries
name|int
name|w
init|=
name|image
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|image
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|ymax
init|=
name|qMin
argument_list|(
name|qRound
argument_list|(
name|pos
operator|.
name|y
argument_list|()
operator|+
name|h
argument_list|)
argument_list|,
name|d
operator|->
name|rasterBuffer
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|ymin
init|=
name|qMax
argument_list|(
name|qRound
argument_list|(
name|pos
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|xmax
init|=
name|qMin
argument_list|(
name|qRound
argument_list|(
name|pos
operator|.
name|x
argument_list|()
operator|+
name|w
argument_list|)
argument_list|,
name|d
operator|->
name|rasterBuffer
operator|->
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|xmin
init|=
name|qMax
argument_list|(
name|qRound
argument_list|(
name|pos
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|x_offset
init|=
name|xmin
operator|-
name|qRound
argument_list|(
name|pos
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
name|QImage
operator|::
name|Format
name|format
init|=
name|image
operator|.
name|format
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|ymin
init|;
name|y
operator|<
name|ymax
condition|;
operator|++
name|y
control|)
block|{
specifier|const
name|uchar
modifier|*
name|src
init|=
name|image
operator|.
name|scanLine
argument_list|(
name|y
operator|-
name|qRound
argument_list|(
name|pos
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
operator|==
name|QImage
operator|::
name|Format_MonoLSB
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|xmax
operator|-
name|xmin
condition|;
operator|++
name|x
control|)
block|{
name|int
name|src_x
init|=
name|x
operator|+
name|x_offset
decl_stmt|;
name|uchar
name|pixel
init|=
name|src
index|[
name|src_x
operator|>>
literal|3
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|pixel
condition|)
block|{
name|x
operator|+=
literal|7
operator|-
operator|(
name|src_x
operator|%
literal|8
operator|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|pixel
operator|&
operator|(
literal|0x1
operator|<<
operator|(
name|src_x
operator|&
literal|7
operator|)
operator|)
condition|)
block|{
name|spans
index|[
name|n
index|]
operator|.
name|x
operator|=
name|xmin
operator|+
name|x
expr_stmt|;
name|spans
index|[
name|n
index|]
operator|.
name|y
operator|=
name|y
expr_stmt|;
name|spans
index|[
name|n
index|]
operator|.
name|coverage
operator|=
literal|255
expr_stmt|;
name|int
name|len
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|src_x
operator|+
literal|1
operator|<
name|w
operator|&&
name|src
index|[
operator|(
name|src_x
operator|+
literal|1
operator|)
operator|>>
literal|3
index|]
operator|&
operator|(
literal|0x1
operator|<<
operator|(
operator|(
name|src_x
operator|+
literal|1
operator|)
operator|&
literal|7
operator|)
operator|)
condition|)
block|{
operator|++
name|src_x
expr_stmt|;
operator|++
name|len
expr_stmt|;
block|}
name|spans
index|[
name|n
index|]
operator|.
name|len
operator|=
operator|(
operator|(
name|len
operator|+
name|spans
index|[
name|n
index|]
operator|.
name|x
operator|)
operator|>
name|xmax
operator|)
condition|?
operator|(
name|xmax
operator|-
name|spans
index|[
name|n
index|]
operator|.
name|x
operator|)
else|:
name|len
expr_stmt|;
name|x
operator|+=
name|len
expr_stmt|;
operator|++
name|n
expr_stmt|;
if|if
condition|(
name|n
operator|==
name|spanCount
condition|)
block|{
name|fg
operator|->
name|blend
argument_list|(
name|n
argument_list|,
name|spans
argument_list|,
name|fg
argument_list|)
expr_stmt|;
name|n
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|xmax
operator|-
name|xmin
condition|;
operator|++
name|x
control|)
block|{
name|int
name|src_x
init|=
name|x
operator|+
name|x_offset
decl_stmt|;
name|uchar
name|pixel
init|=
name|src
index|[
name|src_x
operator|>>
literal|3
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|pixel
condition|)
block|{
name|x
operator|+=
literal|7
operator|-
operator|(
name|src_x
operator|%
literal|8
operator|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|pixel
operator|&
operator|(
literal|0x80
operator|>>
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
condition|)
block|{
name|spans
index|[
name|n
index|]
operator|.
name|x
operator|=
name|xmin
operator|+
name|x
expr_stmt|;
name|spans
index|[
name|n
index|]
operator|.
name|y
operator|=
name|y
expr_stmt|;
name|spans
index|[
name|n
index|]
operator|.
name|coverage
operator|=
literal|255
expr_stmt|;
name|int
name|len
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|src_x
operator|+
literal|1
operator|<
name|w
operator|&&
name|src
index|[
operator|(
name|src_x
operator|+
literal|1
operator|)
operator|>>
literal|3
index|]
operator|&
operator|(
literal|0x80
operator|>>
operator|(
operator|(
name|src_x
operator|+
literal|1
operator|)
operator|&
literal|7
operator|)
operator|)
condition|)
block|{
operator|++
name|src_x
expr_stmt|;
operator|++
name|len
expr_stmt|;
block|}
name|spans
index|[
name|n
index|]
operator|.
name|len
operator|=
operator|(
operator|(
name|len
operator|+
name|spans
index|[
name|n
index|]
operator|.
name|x
operator|)
operator|>
name|xmax
operator|)
condition|?
operator|(
name|xmax
operator|-
name|spans
index|[
name|n
index|]
operator|.
name|x
operator|)
else|:
name|len
expr_stmt|;
name|x
operator|+=
name|len
expr_stmt|;
operator|++
name|n
expr_stmt|;
if|if
condition|(
name|n
operator|==
name|spanCount
condition|)
block|{
name|fg
operator|->
name|blend
argument_list|(
name|n
argument_list|,
name|spans
argument_list|,
name|fg
argument_list|)
expr_stmt|;
name|n
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|n
condition|)
block|{
name|fg
operator|->
name|blend
argument_list|(
name|n
argument_list|,
name|spans
argument_list|,
name|fg
argument_list|)
expr_stmt|;
name|n
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \enum QRasterPaintEngine::ClipType     \internal      \value RectClip Indicates that the currently set clip is a single rectangle.     \value ComplexClip Indicates that the currently set clip is a combination of several shapes. */
end_comment
begin_comment
comment|/*!     \internal     Returns the type of the clip currently set. */
end_comment
begin_function
DECL|function|clipType
name|QRasterPaintEngine
operator|::
name|ClipType
name|QRasterPaintEngine
operator|::
name|clipType
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
specifier|const
name|QClipData
modifier|*
name|clip
init|=
name|d
operator|->
name|clip
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|clip
operator|||
name|clip
operator|->
name|hasRectClip
condition|)
return|return
name|RectClip
return|;
else|else
return|return
name|ComplexClip
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Returns the bounding rect of the currently set clip. */
end_comment
begin_function
DECL|function|clipBoundingRect
name|QRect
name|QRasterPaintEngine
operator|::
name|clipBoundingRect
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
specifier|const
name|QClipData
modifier|*
name|clip
init|=
name|d
operator|->
name|clip
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|clip
condition|)
return|return
name|d
operator|->
name|deviceRect
return|;
if|if
condition|(
name|clip
operator|->
name|hasRectClip
condition|)
return|return
name|clip
operator|->
name|clipRect
return|;
return|return
name|QRect
argument_list|(
name|clip
operator|->
name|xmin
argument_list|,
name|clip
operator|->
name|ymin
argument_list|,
name|clip
operator|->
name|xmax
operator|-
name|clip
operator|->
name|xmin
argument_list|,
name|clip
operator|->
name|ymax
operator|-
name|clip
operator|->
name|ymin
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|initializeRasterizer
name|void
name|QRasterPaintEnginePrivate
operator|::
name|initializeRasterizer
parameter_list|(
name|QSpanData
modifier|*
name|data
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|q
operator|->
name|state
argument_list|()
decl_stmt|;
name|rasterizer
operator|->
name|setAntialiased
argument_list|(
name|s
operator|->
name|flags
operator|.
name|antialiased
argument_list|)
expr_stmt|;
name|rasterizer
operator|->
name|setLegacyRoundingEnabled
argument_list|(
name|s
operator|->
name|flags
operator|.
name|legacy_rounding
argument_list|)
expr_stmt|;
name|QRect
name|clipRect
argument_list|(
name|deviceRect
argument_list|)
decl_stmt|;
name|ProcessSpans
name|blend
decl_stmt|;
comment|// ### get from optimized rectbased QClipData
specifier|const
name|QClipData
modifier|*
name|c
init|=
name|clip
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
condition|)
block|{
specifier|const
name|QRect
name|r
argument_list|(
name|QPoint
argument_list|(
name|c
operator|->
name|xmin
argument_list|,
name|c
operator|->
name|ymin
argument_list|)
argument_list|,
name|QSize
argument_list|(
name|c
operator|->
name|xmax
operator|-
name|c
operator|->
name|xmin
argument_list|,
name|c
operator|->
name|ymax
operator|-
name|c
operator|->
name|ymin
argument_list|)
argument_list|)
decl_stmt|;
name|clipRect
operator|=
name|clipRect
operator|.
name|intersected
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|blend
operator|=
name|data
operator|->
name|blend
expr_stmt|;
block|}
else|else
block|{
name|blend
operator|=
name|data
operator|->
name|unclipped_blend
expr_stmt|;
block|}
name|rasterizer
operator|->
name|setClipRect
argument_list|(
name|clipRect
argument_list|)
expr_stmt|;
name|rasterizer
operator|->
name|initialize
argument_list|(
name|blend
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rasterize
name|void
name|QRasterPaintEnginePrivate
operator|::
name|rasterize
parameter_list|(
name|QT_FT_Outline
modifier|*
name|outline
parameter_list|,
name|ProcessSpans
name|callback
parameter_list|,
name|QSpanData
modifier|*
name|spanData
parameter_list|,
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|callback
operator|||
operator|!
name|outline
condition|)
return|return;
name|Q_Q
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|q
operator|->
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|->
name|flags
operator|.
name|antialiased
condition|)
block|{
name|initializeRasterizer
argument_list|(
name|spanData
argument_list|)
expr_stmt|;
specifier|const
name|Qt
operator|::
name|FillRule
name|fillRule
init|=
name|outline
operator|->
name|flags
operator|==
name|QT_FT_OUTLINE_NONE
condition|?
name|Qt
operator|::
name|WindingFill
else|:
name|Qt
operator|::
name|OddEvenFill
decl_stmt|;
name|rasterizer
operator|->
name|rasterize
argument_list|(
name|outline
argument_list|,
name|fillRule
argument_list|)
expr_stmt|;
return|return;
block|}
name|rasterize
argument_list|(
name|outline
argument_list|,
name|callback
argument_list|,
operator|(
name|void
operator|*
operator|)
name|spanData
argument_list|,
name|rasterBuffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_extern
extern|extern
literal|"C"
block|{
name|int
name|q_gray_rendered_spans
parameter_list|(
name|QT_FT_Raster
name|raster
parameter_list|)
function_decl|;
block|}
end_extern
begin_function
DECL|function|alignAddress
specifier|static
specifier|inline
name|uchar
modifier|*
name|alignAddress
parameter_list|(
name|uchar
modifier|*
name|address
parameter_list|,
name|quintptr
name|alignmentMask
parameter_list|)
block|{
return|return
operator|(
name|uchar
operator|*
operator|)
operator|(
operator|(
operator|(
name|quintptr
operator|)
name|address
operator|+
name|alignmentMask
operator|)
operator|&
operator|~
name|alignmentMask
operator|)
return|;
block|}
end_function
begin_function
DECL|function|rasterize
name|void
name|QRasterPaintEnginePrivate
operator|::
name|rasterize
parameter_list|(
name|QT_FT_Outline
modifier|*
name|outline
parameter_list|,
name|ProcessSpans
name|callback
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|,
name|QRasterBuffer
modifier|*
parameter_list|)
block|{
if|if
condition|(
operator|!
name|callback
operator|||
operator|!
name|outline
condition|)
return|return;
name|Q_Q
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|q
operator|->
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|->
name|flags
operator|.
name|antialiased
condition|)
block|{
name|rasterizer
operator|->
name|setAntialiased
argument_list|(
name|s
operator|->
name|flags
operator|.
name|antialiased
argument_list|)
expr_stmt|;
name|rasterizer
operator|->
name|setLegacyRoundingEnabled
argument_list|(
name|s
operator|->
name|flags
operator|.
name|legacy_rounding
argument_list|)
expr_stmt|;
name|rasterizer
operator|->
name|setClipRect
argument_list|(
name|deviceRect
argument_list|)
expr_stmt|;
name|rasterizer
operator|->
name|initialize
argument_list|(
name|callback
argument_list|,
name|userData
argument_list|)
expr_stmt|;
specifier|const
name|Qt
operator|::
name|FillRule
name|fillRule
init|=
name|outline
operator|->
name|flags
operator|==
name|QT_FT_OUTLINE_NONE
condition|?
name|Qt
operator|::
name|WindingFill
else|:
name|Qt
operator|::
name|OddEvenFill
decl_stmt|;
name|rasterizer
operator|->
name|rasterize
argument_list|(
name|outline
argument_list|,
name|fillRule
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Initial size for raster pool is MINIMUM_POOL_SIZE so as to
comment|// minimize memory reallocations. However if initial size for
comment|// raster pool is changed for lower value, reallocations will
comment|// occur normally.
name|int
name|rasterPoolSize
init|=
name|MINIMUM_POOL_SIZE
decl_stmt|;
name|uchar
name|rasterPoolOnStack
index|[
name|MINIMUM_POOL_SIZE
operator|+
literal|0xf
index|]
decl_stmt|;
name|uchar
modifier|*
name|rasterPoolBase
init|=
name|alignAddress
argument_list|(
name|rasterPoolOnStack
argument_list|,
literal|0xf
argument_list|)
decl_stmt|;
name|uchar
modifier|*
name|rasterPoolOnHeap
init|=
literal|0
decl_stmt|;
name|qt_ft_grays_raster
operator|.
name|raster_reset
argument_list|(
operator|*
name|grayRaster
operator|.
name|data
argument_list|()
argument_list|,
name|rasterPoolBase
argument_list|,
name|rasterPoolSize
argument_list|)
expr_stmt|;
name|void
modifier|*
name|data
init|=
name|userData
decl_stmt|;
name|QT_FT_BBox
name|clip_box
init|=
block|{
name|deviceRect
operator|.
name|x
argument_list|()
block|,
name|deviceRect
operator|.
name|y
argument_list|()
block|,
name|deviceRect
operator|.
name|x
argument_list|()
operator|+
name|deviceRect
operator|.
name|width
argument_list|()
block|,
name|deviceRect
operator|.
name|y
argument_list|()
operator|+
name|deviceRect
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|QT_FT_Raster_Params
name|rasterParams
decl_stmt|;
name|rasterParams
operator|.
name|target
operator|=
literal|0
expr_stmt|;
name|rasterParams
operator|.
name|source
operator|=
name|outline
expr_stmt|;
name|rasterParams
operator|.
name|flags
operator|=
name|QT_FT_RASTER_FLAG_CLIP
expr_stmt|;
name|rasterParams
operator|.
name|gray_spans
operator|=
literal|0
expr_stmt|;
name|rasterParams
operator|.
name|black_spans
operator|=
literal|0
expr_stmt|;
name|rasterParams
operator|.
name|bit_test
operator|=
literal|0
expr_stmt|;
name|rasterParams
operator|.
name|bit_set
operator|=
literal|0
expr_stmt|;
name|rasterParams
operator|.
name|user
operator|=
name|data
expr_stmt|;
name|rasterParams
operator|.
name|clip_box
operator|=
name|clip_box
expr_stmt|;
name|bool
name|done
init|=
literal|false
decl_stmt|;
name|int
name|error
decl_stmt|;
name|int
name|rendered_spans
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|rasterParams
operator|.
name|flags
operator||=
operator|(
name|QT_FT_RASTER_FLAG_AA
operator||
name|QT_FT_RASTER_FLAG_DIRECT
operator|)
expr_stmt|;
name|rasterParams
operator|.
name|gray_spans
operator|=
name|callback
expr_stmt|;
name|rasterParams
operator|.
name|skip_spans
operator|=
name|rendered_spans
expr_stmt|;
name|error
operator|=
name|qt_ft_grays_raster
operator|.
name|raster_render
argument_list|(
operator|*
name|grayRaster
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|rasterParams
argument_list|)
expr_stmt|;
comment|// Out of memory, reallocate some more and try again...
if|if
condition|(
name|error
operator|==
operator|-
literal|6
condition|)
block|{
comment|// ErrRaster_OutOfMemory from qgrayraster.c
name|rasterPoolSize
operator|*=
literal|2
expr_stmt|;
if|if
condition|(
name|rasterPoolSize
operator|>
literal|1024
operator|*
literal|1024
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPainter: Rasterization of primitive failed"
argument_list|)
expr_stmt|;
break|break;
block|}
name|rendered_spans
operator|+=
name|q_gray_rendered_spans
argument_list|(
operator|*
name|grayRaster
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|rasterPoolOnHeap
argument_list|)
expr_stmt|;
name|rasterPoolOnHeap
operator|=
operator|(
name|uchar
operator|*
operator|)
name|malloc
argument_list|(
name|rasterPoolSize
operator|+
literal|0xf
argument_list|)
expr_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|rasterPoolOnHeap
argument_list|)
expr_stmt|;
comment|// note: we just freed the old rasterPoolBase. I hope it's not fatal.
name|rasterPoolBase
operator|=
name|alignAddress
argument_list|(
name|rasterPoolOnHeap
argument_list|,
literal|0xf
argument_list|)
expr_stmt|;
name|qt_ft_grays_raster
operator|.
name|raster_done
argument_list|(
operator|*
name|grayRaster
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|qt_ft_grays_raster
operator|.
name|raster_new
argument_list|(
name|grayRaster
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|qt_ft_grays_raster
operator|.
name|raster_reset
argument_list|(
operator|*
name|grayRaster
operator|.
name|data
argument_list|()
argument_list|,
name|rasterPoolBase
argument_list|,
name|rasterPoolSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|free
argument_list|(
name|rasterPoolOnHeap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|recalculateFastImages
name|void
name|QRasterPaintEnginePrivate
operator|::
name|recalculateFastImages
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|q
operator|->
name|state
argument_list|()
decl_stmt|;
name|s
operator|->
name|flags
operator|.
name|fast_images
operator|=
operator|!
operator|(
name|s
operator|->
name|renderHints
operator|&
name|QPainter
operator|::
name|SmoothPixmapTransform
operator|)
operator|&&
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|<=
name|QTransform
operator|::
name|TxShear
expr_stmt|;
block|}
end_function
begin_function
DECL|function|canUseFastImageBlending
name|bool
name|QRasterPaintEnginePrivate
operator|::
name|canUseFastImageBlending
parameter_list|(
name|QPainter
operator|::
name|CompositionMode
name|mode
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QRasterPaintEngine
argument_list|)
expr_stmt|;
specifier|const
name|QRasterPaintEngineState
modifier|*
name|s
init|=
name|q
operator|->
name|state
argument_list|()
decl_stmt|;
return|return
name|s
operator|->
name|flags
operator|.
name|fast_images
operator|&&
operator|(
name|mode
operator|==
name|QPainter
operator|::
name|CompositionMode_SourceOver
operator|||
operator|(
name|mode
operator|==
name|QPainter
operator|::
name|CompositionMode_Source
operator|&&
operator|!
name|image
operator|.
name|hasAlphaChannel
argument_list|()
operator|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|colorizeBitmap
name|QImage
name|QRasterBuffer
operator|::
name|colorizeBitmap
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|QImage
name|sourceImage
init|=
name|image
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_MonoLSB
argument_list|)
decl_stmt|;
name|QImage
name|dest
init|=
name|QImage
argument_list|(
name|sourceImage
operator|.
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|QRgb
name|fg
init|=
name|qPremultiply
argument_list|(
name|color
operator|.
name|rgba
argument_list|()
argument_list|)
decl_stmt|;
name|QRgb
name|bg
init|=
literal|0
decl_stmt|;
name|int
name|height
init|=
name|sourceImage
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|width
init|=
name|sourceImage
operator|.
name|width
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
operator|++
name|y
control|)
block|{
specifier|const
name|uchar
modifier|*
name|source
init|=
name|sourceImage
operator|.
name|constScanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|QRgb
modifier|*
name|target
init|=
cast|reinterpret_cast
argument_list|<
name|QRgb
operator|*
argument_list|>
argument_list|(
name|dest
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|source
operator|||
operator|!
name|target
condition|)
name|QT_THROW
argument_list|(
name|std
operator|::
name|bad_alloc
argument_list|()
argument_list|)
expr_stmt|;
comment|// we must have run out of memory
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
operator|++
name|x
control|)
name|target
index|[
name|x
index|]
operator|=
operator|(
name|source
index|[
name|x
operator|>>
literal|3
index|]
operator|>>
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
operator|&
literal|1
condition|?
name|fg
else|:
name|bg
expr_stmt|;
block|}
return|return
name|dest
return|;
block|}
end_function
begin_destructor
DECL|function|~QRasterBuffer
name|QRasterBuffer
operator|::
name|~
name|QRasterBuffer
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|init
name|void
name|QRasterBuffer
operator|::
name|init
parameter_list|()
block|{
name|compositionMode
operator|=
name|QPainter
operator|::
name|CompositionMode_SourceOver
expr_stmt|;
name|monoDestinationWithClut
operator|=
literal|false
expr_stmt|;
name|destColor0
operator|=
literal|0
expr_stmt|;
name|destColor1
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|prepare
name|QImage
operator|::
name|Format
name|QRasterBuffer
operator|::
name|prepare
parameter_list|(
name|QImage
modifier|*
name|image
parameter_list|)
block|{
name|m_buffer
operator|=
operator|(
name|uchar
operator|*
operator|)
name|image
operator|->
name|bits
argument_list|()
expr_stmt|;
name|m_width
operator|=
name|qMin
argument_list|(
name|QT_RASTER_COORD_LIMIT
argument_list|,
name|image
operator|->
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|m_height
operator|=
name|qMin
argument_list|(
name|QT_RASTER_COORD_LIMIT
argument_list|,
name|image
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|bytes_per_pixel
operator|=
name|image
operator|->
name|depth
argument_list|()
operator|/
literal|8
expr_stmt|;
name|bytes_per_line
operator|=
name|image
operator|->
name|bytesPerLine
argument_list|()
expr_stmt|;
name|format
operator|=
name|image
operator|->
name|format
argument_list|()
expr_stmt|;
name|drawHelper
operator|=
name|qDrawHelper
operator|+
name|format
expr_stmt|;
if|if
condition|(
name|image
operator|->
name|depth
argument_list|()
operator|==
literal|1
operator|&&
name|image
operator|->
name|colorTable
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|monoDestinationWithClut
operator|=
literal|true
expr_stmt|;
specifier|const
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|colorTable
init|=
name|image
operator|->
name|colorTable
argument_list|()
decl_stmt|;
name|destColor0
operator|=
name|qPremultiply
argument_list|(
name|colorTable
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|destColor1
operator|=
name|qPremultiply
argument_list|(
name|colorTable
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|format
return|;
block|}
end_function
begin_function
DECL|function|resetBuffer
name|void
name|QRasterBuffer
operator|::
name|resetBuffer
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|memset
argument_list|(
name|m_buffer
argument_list|,
name|val
argument_list|,
name|m_height
operator|*
name|bytes_per_line
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QClipData
name|QClipData
operator|::
name|QClipData
parameter_list|(
name|int
name|height
parameter_list|)
block|{
name|clipSpanHeight
operator|=
name|height
expr_stmt|;
name|m_clipLines
operator|=
literal|0
expr_stmt|;
name|allocated
operator|=
literal|0
expr_stmt|;
name|m_spans
operator|=
literal|0
expr_stmt|;
name|xmin
operator|=
name|xmax
operator|=
name|ymin
operator|=
name|ymax
operator|=
literal|0
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|enabled
operator|=
literal|true
expr_stmt|;
name|hasRectClip
operator|=
name|hasRegionClip
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QClipData
name|QClipData
operator|::
name|~
name|QClipData
parameter_list|()
block|{
if|if
condition|(
name|m_clipLines
condition|)
name|free
argument_list|(
name|m_clipLines
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_spans
condition|)
name|free
argument_list|(
name|m_spans
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|initialize
name|void
name|QClipData
operator|::
name|initialize
parameter_list|()
block|{
if|if
condition|(
name|m_spans
condition|)
return|return;
if|if
condition|(
operator|!
name|m_clipLines
condition|)
name|m_clipLines
operator|=
operator|(
name|ClipLine
operator|*
operator|)
name|calloc
argument_list|(
sizeof|sizeof
argument_list|(
name|ClipLine
argument_list|)
argument_list|,
name|clipSpanHeight
argument_list|)
expr_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|m_clipLines
argument_list|)
expr_stmt|;
name|QT_TRY
block|{
name|m_spans
operator|=
operator|(
name|QSpan
operator|*
operator|)
name|malloc
argument_list|(
name|clipSpanHeight
operator|*
sizeof|sizeof
argument_list|(
name|QSpan
argument_list|)
argument_list|)
expr_stmt|;
name|allocated
operator|=
name|clipSpanHeight
expr_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|m_spans
argument_list|)
expr_stmt|;
name|QT_TRY
block|{
if|if
condition|(
name|hasRectClip
condition|)
block|{
name|int
name|y
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|y
operator|<
name|ymin
condition|)
block|{
name|m_clipLines
index|[
name|y
index|]
operator|.
name|spans
operator|=
literal|0
expr_stmt|;
name|m_clipLines
index|[
name|y
index|]
operator|.
name|count
operator|=
literal|0
expr_stmt|;
operator|++
name|y
expr_stmt|;
block|}
specifier|const
name|int
name|len
init|=
name|clipRect
operator|.
name|width
argument_list|()
decl_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|y
operator|<
name|ymax
condition|)
block|{
name|QSpan
modifier|*
name|span
init|=
name|m_spans
operator|+
name|count
decl_stmt|;
name|span
operator|->
name|x
operator|=
name|xmin
expr_stmt|;
name|span
operator|->
name|len
operator|=
name|len
expr_stmt|;
name|span
operator|->
name|y
operator|=
name|y
expr_stmt|;
name|span
operator|->
name|coverage
operator|=
literal|255
expr_stmt|;
operator|++
name|count
expr_stmt|;
name|m_clipLines
index|[
name|y
index|]
operator|.
name|spans
operator|=
name|span
expr_stmt|;
name|m_clipLines
index|[
name|y
index|]
operator|.
name|count
operator|=
literal|1
expr_stmt|;
operator|++
name|y
expr_stmt|;
block|}
while|while
condition|(
name|y
operator|<
name|clipSpanHeight
condition|)
block|{
name|m_clipLines
index|[
name|y
index|]
operator|.
name|spans
operator|=
literal|0
expr_stmt|;
name|m_clipLines
index|[
name|y
index|]
operator|.
name|count
operator|=
literal|0
expr_stmt|;
operator|++
name|y
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|hasRegionClip
condition|)
block|{
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|clipRegion
operator|.
name|rects
argument_list|()
decl_stmt|;
specifier|const
name|int
name|numRects
init|=
name|rects
operator|.
name|size
argument_list|()
decl_stmt|;
block|{
comment|// resize
specifier|const
name|int
name|maxSpans
init|=
operator|(
name|ymax
operator|-
name|ymin
operator|)
operator|*
name|numRects
decl_stmt|;
if|if
condition|(
name|maxSpans
operator|>
name|allocated
condition|)
block|{
name|m_spans
operator|=
name|q_check_ptr
argument_list|(
operator|(
name|QSpan
operator|*
operator|)
name|realloc
argument_list|(
name|m_spans
argument_list|,
name|maxSpans
operator|*
sizeof|sizeof
argument_list|(
name|QSpan
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allocated
operator|=
name|maxSpans
expr_stmt|;
block|}
block|}
name|int
name|y
init|=
literal|0
decl_stmt|;
name|int
name|firstInBand
init|=
literal|0
decl_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|firstInBand
operator|<
name|numRects
condition|)
block|{
specifier|const
name|int
name|currMinY
init|=
name|rects
operator|.
name|at
argument_list|(
name|firstInBand
argument_list|)
operator|.
name|y
argument_list|()
decl_stmt|;
specifier|const
name|int
name|currMaxY
init|=
name|currMinY
operator|+
name|rects
operator|.
name|at
argument_list|(
name|firstInBand
argument_list|)
operator|.
name|height
argument_list|()
decl_stmt|;
while|while
condition|(
name|y
operator|<
name|currMinY
condition|)
block|{
name|m_clipLines
index|[
name|y
index|]
operator|.
name|spans
operator|=
literal|0
expr_stmt|;
name|m_clipLines
index|[
name|y
index|]
operator|.
name|count
operator|=
literal|0
expr_stmt|;
operator|++
name|y
expr_stmt|;
block|}
name|int
name|lastInBand
init|=
name|firstInBand
decl_stmt|;
while|while
condition|(
name|lastInBand
operator|+
literal|1
operator|<
name|numRects
operator|&&
name|rects
operator|.
name|at
argument_list|(
name|lastInBand
operator|+
literal|1
argument_list|)
operator|.
name|top
argument_list|()
operator|==
name|y
condition|)
operator|++
name|lastInBand
expr_stmt|;
while|while
condition|(
name|y
operator|<
name|currMaxY
condition|)
block|{
name|m_clipLines
index|[
name|y
index|]
operator|.
name|spans
operator|=
name|m_spans
operator|+
name|count
expr_stmt|;
name|m_clipLines
index|[
name|y
index|]
operator|.
name|count
operator|=
name|lastInBand
operator|-
name|firstInBand
operator|+
literal|1
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
name|firstInBand
init|;
name|r
operator|<=
name|lastInBand
condition|;
operator|++
name|r
control|)
block|{
specifier|const
name|QRect
modifier|&
name|currRect
init|=
name|rects
operator|.
name|at
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|QSpan
modifier|*
name|span
init|=
name|m_spans
operator|+
name|count
decl_stmt|;
name|span
operator|->
name|x
operator|=
name|currRect
operator|.
name|x
argument_list|()
expr_stmt|;
name|span
operator|->
name|len
operator|=
name|currRect
operator|.
name|width
argument_list|()
expr_stmt|;
name|span
operator|->
name|y
operator|=
name|y
expr_stmt|;
name|span
operator|->
name|coverage
operator|=
literal|255
expr_stmt|;
operator|++
name|count
expr_stmt|;
block|}
operator|++
name|y
expr_stmt|;
block|}
name|firstInBand
operator|=
name|lastInBand
operator|+
literal|1
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|count
operator|<=
name|allocated
argument_list|)
expr_stmt|;
while|while
condition|(
name|y
operator|<
name|clipSpanHeight
condition|)
block|{
name|m_clipLines
index|[
name|y
index|]
operator|.
name|spans
operator|=
literal|0
expr_stmt|;
name|m_clipLines
index|[
name|y
index|]
operator|.
name|count
operator|=
literal|0
expr_stmt|;
operator|++
name|y
expr_stmt|;
block|}
block|}
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|free
argument_list|(
name|m_spans
argument_list|)
expr_stmt|;
comment|// have to free m_spans again or someone might think that we were successfully initialized.
name|m_spans
operator|=
literal|0
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
block|}
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|free
argument_list|(
name|m_clipLines
argument_list|)
expr_stmt|;
comment|// same for clipLines
name|m_clipLines
operator|=
literal|0
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fixup
name|void
name|QClipData
operator|::
name|fixup
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|m_spans
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
name|ymin
operator|=
name|ymax
operator|=
name|xmin
operator|=
name|xmax
operator|=
literal|0
expr_stmt|;
return|return;
block|}
name|int
name|y
init|=
operator|-
literal|1
decl_stmt|;
name|ymin
operator|=
name|m_spans
index|[
literal|0
index|]
operator|.
name|y
expr_stmt|;
name|ymax
operator|=
name|m_spans
index|[
name|count
operator|-
literal|1
index|]
operator|.
name|y
operator|+
literal|1
expr_stmt|;
name|xmin
operator|=
name|INT_MAX
expr_stmt|;
name|xmax
operator|=
literal|0
expr_stmt|;
specifier|const
name|int
name|firstLeft
init|=
name|m_spans
index|[
literal|0
index|]
operator|.
name|x
decl_stmt|;
specifier|const
name|int
name|firstRight
init|=
name|m_spans
index|[
literal|0
index|]
operator|.
name|x
operator|+
name|m_spans
index|[
literal|0
index|]
operator|.
name|len
decl_stmt|;
name|bool
name|isRect
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QT_FT_Span_
modifier|&
name|span
init|=
name|m_spans
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|span
operator|.
name|y
operator|!=
name|y
condition|)
block|{
if|if
condition|(
name|span
operator|.
name|y
operator|!=
name|y
operator|+
literal|1
operator|&&
name|y
operator|!=
operator|-
literal|1
condition|)
name|isRect
operator|=
literal|false
expr_stmt|;
name|y
operator|=
name|span
operator|.
name|y
expr_stmt|;
name|m_clipLines
index|[
name|y
index|]
operator|.
name|spans
operator|=
operator|&
name|span
expr_stmt|;
name|m_clipLines
index|[
name|y
index|]
operator|.
name|count
operator|=
literal|1
expr_stmt|;
block|}
else|else
operator|++
name|m_clipLines
index|[
name|y
index|]
operator|.
name|count
expr_stmt|;
specifier|const
name|int
name|spanLeft
init|=
name|span
operator|.
name|x
decl_stmt|;
specifier|const
name|int
name|spanRight
init|=
name|spanLeft
operator|+
name|span
operator|.
name|len
decl_stmt|;
if|if
condition|(
name|spanLeft
operator|<
name|xmin
condition|)
name|xmin
operator|=
name|spanLeft
expr_stmt|;
if|if
condition|(
name|spanRight
operator|>
name|xmax
condition|)
name|xmax
operator|=
name|spanRight
expr_stmt|;
if|if
condition|(
name|spanLeft
operator|!=
name|firstLeft
operator|||
name|spanRight
operator|!=
name|firstRight
condition|)
name|isRect
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isRect
condition|)
block|{
name|hasRectClip
operator|=
literal|true
expr_stmt|;
name|clipRect
operator|.
name|setRect
argument_list|(
name|xmin
argument_list|,
name|ymin
argument_list|,
name|xmax
operator|-
name|xmin
argument_list|,
name|ymax
operator|-
name|ymin
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*     Convert \a rect to clip spans.  */
end_comment
begin_function
DECL|function|setClipRect
name|void
name|QClipData
operator|::
name|setClipRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
if|if
condition|(
name|hasRectClip
operator|&&
name|rect
operator|==
name|clipRect
condition|)
return|return;
comment|//    qDebug()<< "setClipRect"<< clipSpanHeight<< count<< allocated<< rect;
name|hasRectClip
operator|=
literal|true
expr_stmt|;
name|hasRegionClip
operator|=
literal|false
expr_stmt|;
name|clipRect
operator|=
name|rect
expr_stmt|;
name|xmin
operator|=
name|rect
operator|.
name|x
argument_list|()
expr_stmt|;
name|xmax
operator|=
name|rect
operator|.
name|x
argument_list|()
operator|+
name|rect
operator|.
name|width
argument_list|()
expr_stmt|;
name|ymin
operator|=
name|qMin
argument_list|(
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|clipSpanHeight
argument_list|)
expr_stmt|;
name|ymax
operator|=
name|qMin
argument_list|(
name|rect
operator|.
name|y
argument_list|()
operator|+
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|clipSpanHeight
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_spans
condition|)
block|{
name|free
argument_list|(
name|m_spans
argument_list|)
expr_stmt|;
name|m_spans
operator|=
literal|0
expr_stmt|;
block|}
comment|//    qDebug()<< xmin<< xmax<< ymin<< ymax;
block|}
end_function
begin_comment
comment|/*     Convert \a region to clip spans.  */
end_comment
begin_function
DECL|function|setClipRegion
name|void
name|QClipData
operator|::
name|setClipRegion
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
if|if
condition|(
name|region
operator|.
name|rectCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|setClipRect
argument_list|(
name|region
operator|.
name|rects
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|hasRegionClip
operator|=
literal|true
expr_stmt|;
name|hasRectClip
operator|=
literal|false
expr_stmt|;
name|clipRegion
operator|=
name|region
expr_stmt|;
block|{
comment|// set bounding rect
specifier|const
name|QRect
name|rect
init|=
name|region
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
name|xmin
operator|=
name|rect
operator|.
name|x
argument_list|()
expr_stmt|;
name|xmax
operator|=
name|rect
operator|.
name|x
argument_list|()
operator|+
name|rect
operator|.
name|width
argument_list|()
expr_stmt|;
name|ymin
operator|=
name|rect
operator|.
name|y
argument_list|()
expr_stmt|;
name|ymax
operator|=
name|rect
operator|.
name|y
argument_list|()
operator|+
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|m_spans
condition|)
block|{
name|free
argument_list|(
name|m_spans
argument_list|)
expr_stmt|;
name|m_spans
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal     spans must be sorted on y */
end_comment
begin_function
DECL|function|qt_intersect_spans
specifier|static
specifier|const
name|QSpan
modifier|*
name|qt_intersect_spans
parameter_list|(
specifier|const
name|QClipData
modifier|*
name|clip
parameter_list|,
name|int
modifier|*
name|currentClip
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|end
parameter_list|,
name|QSpan
modifier|*
modifier|*
name|outSpans
parameter_list|,
name|int
name|available
parameter_list|)
block|{
cast|const_cast
argument_list|<
name|QClipData
operator|*
argument_list|>
argument_list|(
name|clip
argument_list|)
operator|->
name|initialize
argument_list|()
expr_stmt|;
name|QSpan
modifier|*
name|out
init|=
operator|*
name|outSpans
decl_stmt|;
specifier|const
name|QSpan
modifier|*
name|clipSpans
init|=
name|clip
operator|->
name|m_spans
operator|+
operator|*
name|currentClip
decl_stmt|;
specifier|const
name|QSpan
modifier|*
name|clipEnd
init|=
name|clip
operator|->
name|m_spans
operator|+
name|clip
operator|->
name|count
decl_stmt|;
while|while
condition|(
name|available
operator|&&
name|spans
operator|<
name|end
condition|)
block|{
if|if
condition|(
name|clipSpans
operator|>=
name|clipEnd
condition|)
block|{
name|spans
operator|=
name|end
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|clipSpans
operator|->
name|y
operator|>
name|spans
operator|->
name|y
condition|)
block|{
operator|++
name|spans
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|spans
operator|->
name|y
operator|!=
name|clipSpans
operator|->
name|y
condition|)
block|{
if|if
condition|(
name|spans
operator|->
name|y
operator|<
name|clip
operator|->
name|count
operator|&&
name|clip
operator|->
name|m_clipLines
index|[
name|spans
operator|->
name|y
index|]
operator|.
name|spans
condition|)
name|clipSpans
operator|=
name|clip
operator|->
name|m_clipLines
index|[
name|spans
operator|->
name|y
index|]
operator|.
name|spans
expr_stmt|;
else|else
operator|++
name|clipSpans
expr_stmt|;
continue|continue;
block|}
name|Q_ASSERT
argument_list|(
name|spans
operator|->
name|y
operator|==
name|clipSpans
operator|->
name|y
argument_list|)
expr_stmt|;
name|int
name|sx1
init|=
name|spans
operator|->
name|x
decl_stmt|;
name|int
name|sx2
init|=
name|sx1
operator|+
name|spans
operator|->
name|len
decl_stmt|;
name|int
name|cx1
init|=
name|clipSpans
operator|->
name|x
decl_stmt|;
name|int
name|cx2
init|=
name|cx1
operator|+
name|clipSpans
operator|->
name|len
decl_stmt|;
if|if
condition|(
name|cx1
operator|<
name|sx1
operator|&&
name|cx2
operator|<
name|sx1
condition|)
block|{
operator|++
name|clipSpans
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|sx1
operator|<
name|cx1
operator|&&
name|sx2
operator|<
name|cx1
condition|)
block|{
operator|++
name|spans
expr_stmt|;
continue|continue;
block|}
name|int
name|x
init|=
name|qMax
argument_list|(
name|sx1
argument_list|,
name|cx1
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|qMin
argument_list|(
name|sx2
argument_list|,
name|cx2
argument_list|)
operator|-
name|x
decl_stmt|;
if|if
condition|(
name|len
condition|)
block|{
name|out
operator|->
name|x
operator|=
name|qMax
argument_list|(
name|sx1
argument_list|,
name|cx1
argument_list|)
expr_stmt|;
name|out
operator|->
name|len
operator|=
name|qMin
argument_list|(
name|sx2
argument_list|,
name|cx2
argument_list|)
operator|-
name|out
operator|->
name|x
expr_stmt|;
name|out
operator|->
name|y
operator|=
name|spans
operator|->
name|y
expr_stmt|;
name|out
operator|->
name|coverage
operator|=
name|qt_div_255
argument_list|(
name|spans
operator|->
name|coverage
operator|*
name|clipSpans
operator|->
name|coverage
argument_list|)
expr_stmt|;
operator|++
name|out
expr_stmt|;
operator|--
name|available
expr_stmt|;
block|}
if|if
condition|(
name|sx2
operator|<
name|cx2
condition|)
block|{
operator|++
name|spans
expr_stmt|;
block|}
else|else
block|{
operator|++
name|clipSpans
expr_stmt|;
block|}
block|}
operator|*
name|outSpans
operator|=
name|out
expr_stmt|;
operator|*
name|currentClip
operator|=
name|clipSpans
operator|-
name|clip
operator|->
name|m_spans
expr_stmt|;
return|return
name|spans
return|;
block|}
end_function
begin_function
DECL|function|qt_span_fill_clipped
specifier|static
name|void
name|qt_span_fill_clipped
parameter_list|(
name|int
name|spanCount
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
block|{
comment|//     qDebug()<< "qt_span_fill_clipped"<< spanCount;
name|QSpanData
modifier|*
name|fillData
init|=
cast|reinterpret_cast
argument_list|<
name|QSpanData
operator|*
argument_list|>
argument_list|(
name|userData
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|fillData
operator|->
name|blend
operator|&&
name|fillData
operator|->
name|unclipped_blend
argument_list|)
expr_stmt|;
specifier|const
name|int
name|NSPANS
init|=
literal|256
decl_stmt|;
name|QSpan
name|cspans
index|[
name|NSPANS
index|]
decl_stmt|;
name|int
name|currentClip
init|=
literal|0
decl_stmt|;
specifier|const
name|QSpan
modifier|*
name|end
init|=
name|spans
operator|+
name|spanCount
decl_stmt|;
while|while
condition|(
name|spans
operator|<
name|end
condition|)
block|{
name|QSpan
modifier|*
name|clipped
init|=
name|cspans
decl_stmt|;
name|spans
operator|=
name|qt_intersect_spans
argument_list|(
name|fillData
operator|->
name|clip
argument_list|,
operator|&
name|currentClip
argument_list|,
name|spans
argument_list|,
name|end
argument_list|,
operator|&
name|clipped
argument_list|,
name|NSPANS
argument_list|)
expr_stmt|;
comment|//         qDebug()<< "processed "<< spanCount - (end - spans)<< "clipped"<< clipped-cspans
comment|//<< "span:"<< cspans->x<< cspans->y<< cspans->len<< spans->coverage;
if|if
condition|(
name|clipped
operator|-
name|cspans
condition|)
name|fillData
operator|->
name|unclipped_blend
argument_list|(
name|clipped
operator|-
name|cspans
argument_list|,
name|cspans
argument_list|,
name|fillData
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*     \internal     Clip spans to \a{clip}-rectangle.     Returns number of unclipped spans */
end_comment
begin_function
DECL|function|qt_intersect_spans
specifier|static
name|int
name|qt_intersect_spans
parameter_list|(
name|QT_FT_Span
modifier|*
name|spans
parameter_list|,
name|int
name|numSpans
parameter_list|,
specifier|const
name|QRect
modifier|&
name|clip
parameter_list|)
block|{
specifier|const
name|short
name|minx
init|=
name|clip
operator|.
name|left
argument_list|()
decl_stmt|;
specifier|const
name|short
name|miny
init|=
name|clip
operator|.
name|top
argument_list|()
decl_stmt|;
specifier|const
name|short
name|maxx
init|=
name|clip
operator|.
name|right
argument_list|()
decl_stmt|;
specifier|const
name|short
name|maxy
init|=
name|clip
operator|.
name|bottom
argument_list|()
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSpans
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|spans
index|[
name|i
index|]
operator|.
name|y
operator|>
name|maxy
condition|)
break|break;
if|if
condition|(
name|spans
index|[
name|i
index|]
operator|.
name|y
operator|<
name|miny
operator|||
name|spans
index|[
name|i
index|]
operator|.
name|x
operator|>
name|maxx
operator|||
name|spans
index|[
name|i
index|]
operator|.
name|x
operator|+
name|spans
index|[
name|i
index|]
operator|.
name|len
operator|<=
name|minx
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|spans
index|[
name|i
index|]
operator|.
name|x
operator|<
name|minx
condition|)
block|{
name|spans
index|[
name|n
index|]
operator|.
name|len
operator|=
name|qMin
argument_list|(
name|spans
index|[
name|i
index|]
operator|.
name|len
operator|-
operator|(
name|minx
operator|-
name|spans
index|[
name|i
index|]
operator|.
name|x
operator|)
argument_list|,
name|maxx
operator|-
name|minx
operator|+
literal|1
argument_list|)
expr_stmt|;
name|spans
index|[
name|n
index|]
operator|.
name|x
operator|=
name|minx
expr_stmt|;
block|}
else|else
block|{
name|spans
index|[
name|n
index|]
operator|.
name|x
operator|=
name|spans
index|[
name|i
index|]
operator|.
name|x
expr_stmt|;
name|spans
index|[
name|n
index|]
operator|.
name|len
operator|=
name|qMin
argument_list|(
name|spans
index|[
name|i
index|]
operator|.
name|len
argument_list|,
name|ushort
argument_list|(
name|maxx
operator|-
name|spans
index|[
name|n
index|]
operator|.
name|x
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|spans
index|[
name|n
index|]
operator|.
name|len
operator|==
literal|0
condition|)
continue|continue;
name|spans
index|[
name|n
index|]
operator|.
name|y
operator|=
name|spans
index|[
name|i
index|]
operator|.
name|y
expr_stmt|;
name|spans
index|[
name|n
index|]
operator|.
name|coverage
operator|=
name|spans
index|[
name|i
index|]
operator|.
name|coverage
expr_stmt|;
operator|++
name|n
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
end_function
begin_function
DECL|function|qt_span_fill_clipRect
specifier|static
name|void
name|qt_span_fill_clipRect
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
block|{
name|QSpanData
modifier|*
name|fillData
init|=
cast|reinterpret_cast
argument_list|<
name|QSpanData
operator|*
argument_list|>
argument_list|(
name|userData
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|fillData
operator|->
name|blend
operator|&&
name|fillData
operator|->
name|unclipped_blend
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|fillData
operator|->
name|clip
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|fillData
operator|->
name|clip
operator|->
name|clipRect
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// hw: check if this const_cast<> is safe!!!
name|count
operator|=
name|qt_intersect_spans
argument_list|(
cast|const_cast
argument_list|<
name|QSpan
operator|*
argument_list|>
argument_list|(
name|spans
argument_list|)
argument_list|,
name|count
argument_list|,
name|fillData
operator|->
name|clip
operator|->
name|clipRect
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
name|fillData
operator|->
name|unclipped_blend
argument_list|(
name|count
argument_list|,
name|spans
argument_list|,
name|fillData
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_span_clip
specifier|static
name|void
name|qt_span_clip
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
block|{
name|ClipData
modifier|*
name|clipData
init|=
cast|reinterpret_cast
argument_list|<
name|ClipData
operator|*
argument_list|>
argument_list|(
name|userData
argument_list|)
decl_stmt|;
comment|//     qDebug()<< " qt_span_clip: "<< count<< clipData->operation;
comment|//     for (int i = 0; i< qMin(count, 10); ++i) {
comment|//         qDebug()<< "    "<< spans[i].x<< spans[i].y<< spans[i].len<< spans[i].coverage;
comment|//     }
switch|switch
condition|(
name|clipData
operator|->
name|operation
condition|)
block|{
case|case
name|Qt
operator|::
name|IntersectClip
case|:
block|{
name|QClipData
modifier|*
name|newClip
init|=
name|clipData
operator|->
name|newClip
decl_stmt|;
name|newClip
operator|->
name|initialize
argument_list|()
expr_stmt|;
name|int
name|currentClip
init|=
literal|0
decl_stmt|;
specifier|const
name|QSpan
modifier|*
name|end
init|=
name|spans
operator|+
name|count
decl_stmt|;
while|while
condition|(
name|spans
operator|<
name|end
condition|)
block|{
name|QSpan
modifier|*
name|newspans
init|=
name|newClip
operator|->
name|m_spans
operator|+
name|newClip
operator|->
name|count
decl_stmt|;
name|spans
operator|=
name|qt_intersect_spans
argument_list|(
name|clipData
operator|->
name|oldClip
argument_list|,
operator|&
name|currentClip
argument_list|,
name|spans
argument_list|,
name|end
argument_list|,
operator|&
name|newspans
argument_list|,
name|newClip
operator|->
name|allocated
operator|-
name|newClip
operator|->
name|count
argument_list|)
expr_stmt|;
name|newClip
operator|->
name|count
operator|=
name|newspans
operator|-
name|newClip
operator|->
name|m_spans
expr_stmt|;
if|if
condition|(
name|spans
operator|<
name|end
condition|)
block|{
name|newClip
operator|->
name|m_spans
operator|=
name|q_check_ptr
argument_list|(
operator|(
name|QSpan
operator|*
operator|)
name|realloc
argument_list|(
name|newClip
operator|->
name|m_spans
argument_list|,
name|newClip
operator|->
name|allocated
operator|*
literal|2
operator|*
sizeof|sizeof
argument_list|(
name|QSpan
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|newClip
operator|->
name|allocated
operator|*=
literal|2
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|Qt
operator|::
name|ReplaceClip
case|:
name|clipData
operator|->
name|newClip
operator|->
name|appendSpans
argument_list|(
name|spans
argument_list|,
name|count
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|NoClip
case|:
break|break;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
end_ifndef
begin_function
DECL|function|bufferImage
name|QImage
name|QRasterBuffer
operator|::
name|bufferImage
parameter_list|()
specifier|const
block|{
name|QImage
name|image
argument_list|(
name|m_width
argument_list|,
name|m_height
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|m_height
condition|;
operator|++
name|y
control|)
block|{
name|uint
modifier|*
name|span
init|=
operator|(
name|uint
operator|*
operator|)
cast|const_cast
argument_list|<
name|QRasterBuffer
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|m_width
condition|;
operator|++
name|x
control|)
block|{
name|uint
name|argb
init|=
name|span
index|[
name|x
index|]
decl_stmt|;
name|image
operator|.
name|setPixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|argb
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|image
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|flushToARGBImage
name|void
name|QRasterBuffer
operator|::
name|flushToARGBImage
parameter_list|(
name|QImage
modifier|*
name|target
parameter_list|)
specifier|const
block|{
name|int
name|w
init|=
name|qMin
argument_list|(
name|m_width
argument_list|,
name|target
operator|->
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|qMin
argument_list|(
name|m_height
argument_list|,
name|target
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
name|uint
modifier|*
name|sourceLine
init|=
operator|(
name|uint
operator|*
operator|)
cast|const_cast
argument_list|<
name|QRasterBuffer
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|QRgb
modifier|*
name|dest
init|=
operator|(
name|QRgb
operator|*
operator|)
name|target
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
name|QRgb
name|pixel
init|=
name|sourceLine
index|[
name|x
index|]
decl_stmt|;
name|int
name|alpha
init|=
name|qAlpha
argument_list|(
name|pixel
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|alpha
condition|)
block|{
name|dest
index|[
name|x
index|]
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|dest
index|[
name|x
index|]
operator|=
operator|(
name|alpha
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
literal|255
operator|*
name|qRed
argument_list|(
name|pixel
argument_list|)
operator|/
name|alpha
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
literal|255
operator|*
name|qGreen
argument_list|(
name|pixel
argument_list|)
operator|/
name|alpha
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
literal|255
operator|*
name|qBlue
argument_list|(
name|pixel
argument_list|)
operator|/
name|alpha
operator|)
operator|<<
literal|0
operator|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_class
DECL|class|QGradientCache
class|class
name|QGradientCache
block|{
DECL|struct|CacheInfo
struct|struct
name|CacheInfo
block|{
DECL|function|CacheInfo
specifier|inline
name|CacheInfo
parameter_list|(
name|QGradientStops
name|s
parameter_list|,
name|int
name|op
parameter_list|,
name|QGradient
operator|::
name|InterpolationMode
name|mode
parameter_list|)
member_init_list|:
name|stops
argument_list|(
name|qMove
argument_list|(
name|s
argument_list|)
argument_list|)
member_init_list|,
name|opacity
argument_list|(
name|op
argument_list|)
member_init_list|,
name|interpolationMode
argument_list|(
name|mode
argument_list|)
block|{}
DECL|member|buffer64
name|QRgba64
name|buffer64
index|[
name|GRADIENT_STOPTABLE_SIZE
index|]
decl_stmt|;
DECL|member|buffer32
name|QRgb
name|buffer32
index|[
name|GRADIENT_STOPTABLE_SIZE
index|]
decl_stmt|;
DECL|member|stops
name|QGradientStops
name|stops
decl_stmt|;
DECL|member|opacity
name|int
name|opacity
decl_stmt|;
DECL|member|interpolationMode
name|QGradient
operator|::
name|InterpolationMode
name|interpolationMode
decl_stmt|;
block|}
struct|;
DECL|typedef|QGradientColorTableHash
typedef|typedef
name|QMultiHash
argument_list|<
name|quint64
argument_list|,
name|CacheInfo
argument_list|>
name|QGradientColorTableHash
typedef|;
public|public:
DECL|typedef|ColorBufferPair
typedef|typedef
name|QPair
argument_list|<
specifier|const
name|QRgb
modifier|*
argument_list|,
specifier|const
name|QRgba64
modifier|*
argument_list|>
name|ColorBufferPair
typedef|;
DECL|function|getBuffer
specifier|inline
name|ColorBufferPair
name|getBuffer
parameter_list|(
specifier|const
name|QGradient
modifier|&
name|gradient
parameter_list|,
name|int
name|opacity
parameter_list|)
block|{
name|quint64
name|hash_val
init|=
literal|0
decl_stmt|;
specifier|const
name|QGradientStops
name|stops
init|=
name|gradient
operator|.
name|stops
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stops
operator|.
name|size
argument_list|()
operator|&&
name|i
operator|<=
literal|2
condition|;
name|i
operator|++
control|)
name|hash_val
operator|+=
name|stops
index|[
name|i
index|]
operator|.
name|second
operator|.
name|rgba64
argument_list|()
expr_stmt|;
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QGradientColorTableHash
operator|::
name|const_iterator
name|it
init|=
name|cache
operator|.
name|constFind
argument_list|(
name|hash_val
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|cache
operator|.
name|constEnd
argument_list|()
condition|)
return|return
name|addCacheElement
argument_list|(
name|hash_val
argument_list|,
name|gradient
argument_list|,
name|opacity
argument_list|)
return|;
else|else
block|{
do|do
block|{
specifier|const
name|CacheInfo
modifier|&
name|cache_info
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache_info
operator|.
name|stops
operator|==
name|stops
operator|&&
name|cache_info
operator|.
name|opacity
operator|==
name|opacity
operator|&&
name|cache_info
operator|.
name|interpolationMode
operator|==
name|gradient
operator|.
name|interpolationMode
argument_list|()
condition|)
return|return
name|qMakePair
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|QRgb
operator|*
argument_list|>
argument_list|(
name|cache_info
operator|.
name|buffer32
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|QRgba64
operator|*
argument_list|>
argument_list|(
name|cache_info
operator|.
name|buffer64
argument_list|)
argument_list|)
return|;
operator|++
name|it
expr_stmt|;
block|}
do|while
condition|(
name|it
operator|!=
name|cache
operator|.
name|constEnd
argument_list|()
operator|&&
name|it
operator|.
name|key
argument_list|()
operator|==
name|hash_val
condition|)
do|;
comment|// an exact match for these stops and opacity was not found, create new cache
return|return
name|addCacheElement
argument_list|(
name|hash_val
argument_list|,
name|gradient
argument_list|,
name|opacity
argument_list|)
return|;
block|}
block|}
DECL|function|paletteSize
specifier|inline
name|int
name|paletteSize
parameter_list|()
specifier|const
block|{
return|return
name|GRADIENT_STOPTABLE_SIZE
return|;
block|}
protected|protected:
DECL|function|maxCacheSize
specifier|inline
name|int
name|maxCacheSize
parameter_list|()
specifier|const
block|{
return|return
literal|60
return|;
block|}
specifier|inline
name|void
name|generateGradientColorTable
parameter_list|(
specifier|const
name|QGradient
modifier|&
name|g
parameter_list|,
name|QRgba64
modifier|*
name|colorTable
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|opacity
parameter_list|)
specifier|const
function_decl|;
DECL|function|addCacheElement
name|ColorBufferPair
name|addCacheElement
parameter_list|(
name|quint64
name|hash_val
parameter_list|,
specifier|const
name|QGradient
modifier|&
name|gradient
parameter_list|,
name|int
name|opacity
parameter_list|)
block|{
if|if
condition|(
name|cache
operator|.
name|size
argument_list|()
operator|==
name|maxCacheSize
argument_list|()
condition|)
block|{
comment|// may remove more than 1, but OK
name|cache
operator|.
name|erase
argument_list|(
name|cache
operator|.
name|begin
argument_list|()
operator|+
operator|(
name|qrand
argument_list|()
operator|%
name|maxCacheSize
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
name|CacheInfo
name|cache_entry
argument_list|(
name|gradient
operator|.
name|stops
argument_list|()
argument_list|,
name|opacity
argument_list|,
name|gradient
operator|.
name|interpolationMode
argument_list|()
argument_list|)
decl_stmt|;
name|generateGradientColorTable
argument_list|(
name|gradient
argument_list|,
name|cache_entry
operator|.
name|buffer64
argument_list|,
name|paletteSize
argument_list|()
argument_list|,
name|opacity
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|GRADIENT_STOPTABLE_SIZE
condition|;
operator|++
name|i
control|)
name|cache_entry
operator|.
name|buffer32
index|[
name|i
index|]
operator|=
name|cache_entry
operator|.
name|buffer64
index|[
name|i
index|]
operator|.
name|toArgb32
argument_list|()
expr_stmt|;
name|CacheInfo
modifier|&
name|cache_value
init|=
name|cache
operator|.
name|insert
argument_list|(
name|hash_val
argument_list|,
name|cache_entry
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
return|return
name|qMakePair
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|QRgb
operator|*
argument_list|>
argument_list|(
name|cache_value
operator|.
name|buffer32
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|QRgba64
operator|*
argument_list|>
argument_list|(
name|cache_value
operator|.
name|buffer64
argument_list|)
argument_list|)
return|;
block|}
DECL|member|cache
name|QGradientColorTableHash
name|cache
decl_stmt|;
DECL|member|mutex
name|QMutex
name|mutex
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|generateGradientColorTable
name|void
name|QGradientCache
operator|::
name|generateGradientColorTable
parameter_list|(
specifier|const
name|QGradient
modifier|&
name|gradient
parameter_list|,
name|QRgba64
modifier|*
name|colorTable
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|opacity
parameter_list|)
specifier|const
block|{
specifier|const
name|QGradientStops
name|stops
init|=
name|gradient
operator|.
name|stops
argument_list|()
decl_stmt|;
name|int
name|stopCount
init|=
name|stops
operator|.
name|count
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|stopCount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|bool
name|colorInterpolation
init|=
operator|(
name|gradient
operator|.
name|interpolationMode
argument_list|()
operator|==
name|QGradient
operator|::
name|ColorInterpolation
operator|)
decl_stmt|;
if|if
condition|(
name|stopCount
operator|==
literal|2
condition|)
block|{
name|QRgba64
name|first_color
init|=
name|combineAlpha256
argument_list|(
name|stops
index|[
literal|0
index|]
operator|.
name|second
operator|.
name|rgba64
argument_list|()
argument_list|,
name|opacity
argument_list|)
decl_stmt|;
name|QRgba64
name|second_color
init|=
name|combineAlpha256
argument_list|(
name|stops
index|[
literal|1
index|]
operator|.
name|second
operator|.
name|rgba64
argument_list|()
argument_list|,
name|opacity
argument_list|)
decl_stmt|;
name|qreal
name|first_stop
init|=
name|stops
index|[
literal|0
index|]
operator|.
name|first
decl_stmt|;
name|qreal
name|second_stop
init|=
name|stops
index|[
literal|1
index|]
operator|.
name|first
decl_stmt|;
if|if
condition|(
name|second_stop
operator|<
name|first_stop
condition|)
block|{
name|quint64
name|tmp
init|=
name|first_color
decl_stmt|;
name|first_color
operator|=
name|second_color
expr_stmt|;
name|second_color
operator|=
name|tmp
expr_stmt|;
name|qSwap
argument_list|(
name|first_stop
argument_list|,
name|second_stop
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|colorInterpolation
condition|)
block|{
name|first_color
operator|=
name|qPremultiply
argument_list|(
name|first_color
argument_list|)
expr_stmt|;
name|second_color
operator|=
name|qPremultiply
argument_list|(
name|second_color
argument_list|)
expr_stmt|;
block|}
name|int
name|first_index
init|=
name|qRound
argument_list|(
name|first_stop
operator|*
operator|(
name|GRADIENT_STOPTABLE_SIZE
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
name|int
name|second_index
init|=
name|qRound
argument_list|(
name|second_stop
operator|*
operator|(
name|GRADIENT_STOPTABLE_SIZE
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
name|uint
name|red_first
init|=
name|uint
argument_list|(
name|first_color
operator|.
name|red
argument_list|()
argument_list|)
operator|<<
literal|16
decl_stmt|;
name|uint
name|green_first
init|=
name|uint
argument_list|(
name|first_color
operator|.
name|green
argument_list|()
argument_list|)
operator|<<
literal|16
decl_stmt|;
name|uint
name|blue_first
init|=
name|uint
argument_list|(
name|first_color
operator|.
name|blue
argument_list|()
argument_list|)
operator|<<
literal|16
decl_stmt|;
name|uint
name|alpha_first
init|=
name|uint
argument_list|(
name|first_color
operator|.
name|alpha
argument_list|()
argument_list|)
operator|<<
literal|16
decl_stmt|;
name|uint
name|red_second
init|=
name|uint
argument_list|(
name|second_color
operator|.
name|red
argument_list|()
argument_list|)
operator|<<
literal|16
decl_stmt|;
name|uint
name|green_second
init|=
name|uint
argument_list|(
name|second_color
operator|.
name|green
argument_list|()
argument_list|)
operator|<<
literal|16
decl_stmt|;
name|uint
name|blue_second
init|=
name|uint
argument_list|(
name|second_color
operator|.
name|blue
argument_list|()
argument_list|)
operator|<<
literal|16
decl_stmt|;
name|uint
name|alpha_second
init|=
name|uint
argument_list|(
name|second_color
operator|.
name|alpha
argument_list|()
argument_list|)
operator|<<
literal|16
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<=
name|qMin
argument_list|(
name|GRADIENT_STOPTABLE_SIZE
argument_list|,
name|first_index
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|colorInterpolation
condition|)
name|colorTable
index|[
name|i
index|]
operator|=
name|first_color
expr_stmt|;
else|else
name|colorTable
index|[
name|i
index|]
operator|=
name|qPremultiply
argument_list|(
name|first_color
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<
name|second_index
condition|)
block|{
name|qreal
name|reciprocal
init|=
name|qreal
argument_list|(
literal|1
argument_list|)
operator|/
operator|(
name|second_index
operator|-
name|first_index
operator|)
decl_stmt|;
name|int
name|red_delta
init|=
name|qRound
argument_list|(
operator|(
name|qreal
argument_list|(
name|red_second
argument_list|)
operator|-
name|red_first
operator|)
operator|*
name|reciprocal
argument_list|)
decl_stmt|;
name|int
name|green_delta
init|=
name|qRound
argument_list|(
operator|(
name|qreal
argument_list|(
name|green_second
argument_list|)
operator|-
name|green_first
operator|)
operator|*
name|reciprocal
argument_list|)
decl_stmt|;
name|int
name|blue_delta
init|=
name|qRound
argument_list|(
operator|(
name|qreal
argument_list|(
name|blue_second
argument_list|)
operator|-
name|blue_first
operator|)
operator|*
name|reciprocal
argument_list|)
decl_stmt|;
name|int
name|alpha_delta
init|=
name|qRound
argument_list|(
operator|(
name|qreal
argument_list|(
name|alpha_second
argument_list|)
operator|-
name|alpha_first
operator|)
operator|*
name|reciprocal
argument_list|)
decl_stmt|;
comment|// rounding
name|red_first
operator|+=
literal|1
operator|<<
literal|15
expr_stmt|;
name|green_first
operator|+=
literal|1
operator|<<
literal|15
expr_stmt|;
name|blue_first
operator|+=
literal|1
operator|<<
literal|15
expr_stmt|;
name|alpha_first
operator|+=
literal|1
operator|<<
literal|15
expr_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|qMin
argument_list|(
name|GRADIENT_STOPTABLE_SIZE
argument_list|,
name|second_index
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|red_first
operator|+=
name|red_delta
expr_stmt|;
name|green_first
operator|+=
name|green_delta
expr_stmt|;
name|blue_first
operator|+=
name|blue_delta
expr_stmt|;
name|alpha_first
operator|+=
name|alpha_delta
expr_stmt|;
specifier|const
name|QRgba64
name|color
init|=
name|qRgba64
argument_list|(
name|red_first
operator|>>
literal|16
argument_list|,
name|green_first
operator|>>
literal|16
argument_list|,
name|blue_first
operator|>>
literal|16
argument_list|,
name|alpha_first
operator|>>
literal|16
argument_list|)
decl_stmt|;
if|if
condition|(
name|colorInterpolation
condition|)
name|colorTable
index|[
name|i
index|]
operator|=
name|color
expr_stmt|;
else|else
name|colorTable
index|[
name|i
index|]
operator|=
name|qPremultiply
argument_list|(
name|color
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
init|;
name|i
operator|<
name|GRADIENT_STOPTABLE_SIZE
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|colorInterpolation
condition|)
name|colorTable
index|[
name|i
index|]
operator|=
name|second_color
expr_stmt|;
else|else
name|colorTable
index|[
name|i
index|]
operator|=
name|qPremultiply
argument_list|(
name|second_color
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|QRgba64
name|current_color
init|=
name|combineAlpha256
argument_list|(
name|stops
index|[
literal|0
index|]
operator|.
name|second
operator|.
name|rgba64
argument_list|()
argument_list|,
name|opacity
argument_list|)
decl_stmt|;
if|if
condition|(
name|stopCount
operator|==
literal|1
condition|)
block|{
name|current_color
operator|=
name|qPremultiply
argument_list|(
name|current_color
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
name|colorTable
index|[
name|i
index|]
operator|=
name|current_color
expr_stmt|;
return|return;
block|}
comment|// The position where the gradient begins and ends
name|qreal
name|begin_pos
init|=
name|stops
index|[
literal|0
index|]
operator|.
name|first
decl_stmt|;
name|qreal
name|end_pos
init|=
name|stops
index|[
name|stopCount
operator|-
literal|1
index|]
operator|.
name|first
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
comment|// The position in the color table.
name|QRgba64
name|next_color
decl_stmt|;
name|qreal
name|incr
init|=
literal|1
operator|/
name|qreal
argument_list|(
name|size
argument_list|)
decl_stmt|;
comment|// the double increment.
name|qreal
name|dpos
init|=
literal|1.5
operator|*
name|incr
decl_stmt|;
comment|// current position in gradient stop list (0 to 1)
comment|// Up to first point
name|colorTable
index|[
name|pos
operator|++
index|]
operator|=
name|qPremultiply
argument_list|(
name|current_color
argument_list|)
expr_stmt|;
while|while
condition|(
name|dpos
operator|<=
name|begin_pos
condition|)
block|{
name|colorTable
index|[
name|pos
index|]
operator|=
name|colorTable
index|[
name|pos
operator|-
literal|1
index|]
expr_stmt|;
operator|++
name|pos
expr_stmt|;
name|dpos
operator|+=
name|incr
expr_stmt|;
block|}
name|int
name|current_stop
init|=
literal|0
decl_stmt|;
comment|// We always interpolate between current and current + 1.
name|qreal
name|t
decl_stmt|;
comment|// position between current left and right stops
name|qreal
name|t_delta
decl_stmt|;
comment|// the t increment per entry in the color table
if|if
condition|(
name|dpos
operator|<
name|end_pos
condition|)
block|{
comment|// Gradient area
while|while
condition|(
name|dpos
operator|>
name|stops
index|[
name|current_stop
operator|+
literal|1
index|]
operator|.
name|first
condition|)
operator|++
name|current_stop
expr_stmt|;
if|if
condition|(
name|current_stop
operator|!=
literal|0
condition|)
name|current_color
operator|=
name|combineAlpha256
argument_list|(
name|stops
index|[
name|current_stop
index|]
operator|.
name|second
operator|.
name|rgba64
argument_list|()
argument_list|,
name|opacity
argument_list|)
expr_stmt|;
name|next_color
operator|=
name|combineAlpha256
argument_list|(
name|stops
index|[
name|current_stop
operator|+
literal|1
index|]
operator|.
name|second
operator|.
name|rgba64
argument_list|()
argument_list|,
name|opacity
argument_list|)
expr_stmt|;
if|if
condition|(
name|colorInterpolation
condition|)
block|{
name|current_color
operator|=
name|qPremultiply
argument_list|(
name|current_color
argument_list|)
expr_stmt|;
name|next_color
operator|=
name|qPremultiply
argument_list|(
name|next_color
argument_list|)
expr_stmt|;
block|}
name|qreal
name|diff
init|=
name|stops
index|[
name|current_stop
operator|+
literal|1
index|]
operator|.
name|first
operator|-
name|stops
index|[
name|current_stop
index|]
operator|.
name|first
decl_stmt|;
name|qreal
name|c
init|=
operator|(
name|diff
operator|==
literal|0
operator|)
condition|?
name|qreal
argument_list|(
literal|0
argument_list|)
else|:
literal|256
operator|/
name|diff
decl_stmt|;
name|t
operator|=
operator|(
name|dpos
operator|-
name|stops
index|[
name|current_stop
index|]
operator|.
name|first
operator|)
operator|*
name|c
expr_stmt|;
name|t_delta
operator|=
name|incr
operator|*
name|c
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|current_stop
operator|<
name|stopCount
argument_list|)
expr_stmt|;
name|int
name|dist
init|=
name|qRound
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|int
name|idist
init|=
literal|256
operator|-
name|dist
decl_stmt|;
if|if
condition|(
name|colorInterpolation
condition|)
name|colorTable
index|[
name|pos
index|]
operator|=
name|interpolate256
argument_list|(
name|current_color
argument_list|,
name|idist
argument_list|,
name|next_color
argument_list|,
name|dist
argument_list|)
expr_stmt|;
else|else
name|colorTable
index|[
name|pos
index|]
operator|=
name|qPremultiply
argument_list|(
name|interpolate256
argument_list|(
name|current_color
argument_list|,
name|idist
argument_list|,
name|next_color
argument_list|,
name|dist
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|pos
expr_stmt|;
name|dpos
operator|+=
name|incr
expr_stmt|;
if|if
condition|(
name|dpos
operator|>=
name|end_pos
condition|)
break|break;
name|t
operator|+=
name|t_delta
expr_stmt|;
name|int
name|skip
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|dpos
operator|>
name|stops
index|[
name|current_stop
operator|+
name|skip
operator|+
literal|1
index|]
operator|.
name|first
condition|)
operator|++
name|skip
expr_stmt|;
if|if
condition|(
name|skip
operator|!=
literal|0
condition|)
block|{
name|current_stop
operator|+=
name|skip
expr_stmt|;
if|if
condition|(
name|skip
operator|==
literal|1
condition|)
name|current_color
operator|=
name|next_color
expr_stmt|;
else|else
name|current_color
operator|=
name|combineAlpha256
argument_list|(
name|stops
index|[
name|current_stop
index|]
operator|.
name|second
operator|.
name|rgba64
argument_list|()
argument_list|,
name|opacity
argument_list|)
expr_stmt|;
name|next_color
operator|=
name|combineAlpha256
argument_list|(
name|stops
index|[
name|current_stop
operator|+
literal|1
index|]
operator|.
name|second
operator|.
name|rgba64
argument_list|()
argument_list|,
name|opacity
argument_list|)
expr_stmt|;
if|if
condition|(
name|colorInterpolation
condition|)
block|{
if|if
condition|(
name|skip
operator|!=
literal|1
condition|)
name|current_color
operator|=
name|qPremultiply
argument_list|(
name|current_color
argument_list|)
expr_stmt|;
name|next_color
operator|=
name|qPremultiply
argument_list|(
name|next_color
argument_list|)
expr_stmt|;
block|}
name|qreal
name|diff
init|=
name|stops
index|[
name|current_stop
operator|+
literal|1
index|]
operator|.
name|first
operator|-
name|stops
index|[
name|current_stop
index|]
operator|.
name|first
decl_stmt|;
name|qreal
name|c
init|=
operator|(
name|diff
operator|==
literal|0
operator|)
condition|?
name|qreal
argument_list|(
literal|0
argument_list|)
else|:
literal|256
operator|/
name|diff
decl_stmt|;
name|t
operator|=
operator|(
name|dpos
operator|-
name|stops
index|[
name|current_stop
index|]
operator|.
name|first
operator|)
operator|*
name|c
expr_stmt|;
name|t_delta
operator|=
name|incr
operator|*
name|c
expr_stmt|;
block|}
block|}
block|}
comment|// After last point
name|current_color
operator|=
name|qPremultiply
argument_list|(
name|combineAlpha256
argument_list|(
name|stops
index|[
name|stopCount
operator|-
literal|1
index|]
operator|.
name|second
operator|.
name|rgba64
argument_list|()
argument_list|,
name|opacity
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|pos
operator|<
name|size
operator|-
literal|1
condition|)
block|{
name|colorTable
index|[
name|pos
index|]
operator|=
name|current_color
expr_stmt|;
operator|++
name|pos
expr_stmt|;
block|}
comment|// Make sure the last color stop is represented at the end of the table
name|colorTable
index|[
name|size
operator|-
literal|1
index|]
operator|=
name|current_color
expr_stmt|;
block|}
end_function
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QGradientCache
argument_list|,
argument|qt_gradient_cache
argument_list|)
end_macro
begin_function
DECL|function|init
name|void
name|QSpanData
operator|::
name|init
parameter_list|(
name|QRasterBuffer
modifier|*
name|rb
parameter_list|,
specifier|const
name|QRasterPaintEngine
modifier|*
name|pe
parameter_list|)
block|{
name|rasterBuffer
operator|=
name|rb
expr_stmt|;
name|type
operator|=
name|None
expr_stmt|;
name|txop
operator|=
literal|0
expr_stmt|;
name|bilinear
operator|=
literal|false
expr_stmt|;
name|m11
operator|=
name|m22
operator|=
name|m33
operator|=
literal|1.
expr_stmt|;
name|m12
operator|=
name|m13
operator|=
name|m21
operator|=
name|m23
operator|=
name|dx
operator|=
name|dy
operator|=
literal|0.0
expr_stmt|;
name|clip
operator|=
name|pe
condition|?
name|pe
operator|->
name|d_func
argument_list|()
operator|->
name|clip
argument_list|()
else|:
literal|0
expr_stmt|;
block|}
end_function
begin_function_decl
name|Q_GUI_EXPORT
specifier|extern
name|QImage
name|qt_imageForBrush
parameter_list|(
name|int
name|brushStyle
parameter_list|,
name|bool
name|invert
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|setup
name|void
name|QSpanData
operator|::
name|setup
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|,
name|int
name|alpha
parameter_list|,
name|QPainter
operator|::
name|CompositionMode
name|compositionMode
parameter_list|)
block|{
name|Qt
operator|::
name|BrushStyle
name|brushStyle
init|=
name|qbrush_style
argument_list|(
name|brush
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|brushStyle
condition|)
block|{
case|case
name|Qt
operator|::
name|SolidPattern
case|:
block|{
name|type
operator|=
name|Solid
expr_stmt|;
name|QColor
name|c
init|=
name|qbrush_color
argument_list|(
name|brush
argument_list|)
decl_stmt|;
name|solid
operator|.
name|color
operator|=
name|qPremultiply
argument_list|(
name|combineAlpha256
argument_list|(
name|c
operator|.
name|rgba64
argument_list|()
argument_list|,
name|alpha
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|solid
operator|.
name|color
operator|.
name|isTransparent
argument_list|()
operator|&&
name|compositionMode
operator|==
name|QPainter
operator|::
name|CompositionMode_SourceOver
condition|)
name|type
operator|=
name|None
expr_stmt|;
break|break;
block|}
case|case
name|Qt
operator|::
name|LinearGradientPattern
case|:
block|{
name|type
operator|=
name|LinearGradient
expr_stmt|;
specifier|const
name|QLinearGradient
modifier|*
name|g
init|=
cast|static_cast
argument_list|<
specifier|const
name|QLinearGradient
operator|*
argument_list|>
argument_list|(
name|brush
operator|.
name|gradient
argument_list|()
argument_list|)
decl_stmt|;
name|gradient
operator|.
name|alphaColor
operator|=
operator|!
name|brush
operator|.
name|isOpaque
argument_list|()
operator|||
name|alpha
operator|!=
literal|256
expr_stmt|;
name|QGradientCache
operator|::
name|ColorBufferPair
name|colorBuffers
init|=
name|qt_gradient_cache
argument_list|()
operator|->
name|getBuffer
argument_list|(
operator|*
name|g
argument_list|,
name|alpha
argument_list|)
decl_stmt|;
name|gradient
operator|.
name|colorTable64
operator|=
name|colorBuffers
operator|.
name|second
expr_stmt|;
name|gradient
operator|.
name|colorTable32
operator|=
name|colorBuffers
operator|.
name|first
expr_stmt|;
name|gradient
operator|.
name|spread
operator|=
name|g
operator|->
name|spread
argument_list|()
expr_stmt|;
name|QLinearGradientData
modifier|&
name|linearData
init|=
name|gradient
operator|.
name|linear
decl_stmt|;
name|linearData
operator|.
name|origin
operator|.
name|x
operator|=
name|g
operator|->
name|start
argument_list|()
operator|.
name|x
argument_list|()
expr_stmt|;
name|linearData
operator|.
name|origin
operator|.
name|y
operator|=
name|g
operator|->
name|start
argument_list|()
operator|.
name|y
argument_list|()
expr_stmt|;
name|linearData
operator|.
name|end
operator|.
name|x
operator|=
name|g
operator|->
name|finalStop
argument_list|()
operator|.
name|x
argument_list|()
expr_stmt|;
name|linearData
operator|.
name|end
operator|.
name|y
operator|=
name|g
operator|->
name|finalStop
argument_list|()
operator|.
name|y
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|Qt
operator|::
name|RadialGradientPattern
case|:
block|{
name|type
operator|=
name|RadialGradient
expr_stmt|;
specifier|const
name|QRadialGradient
modifier|*
name|g
init|=
cast|static_cast
argument_list|<
specifier|const
name|QRadialGradient
operator|*
argument_list|>
argument_list|(
name|brush
operator|.
name|gradient
argument_list|()
argument_list|)
decl_stmt|;
name|gradient
operator|.
name|alphaColor
operator|=
operator|!
name|brush
operator|.
name|isOpaque
argument_list|()
operator|||
name|alpha
operator|!=
literal|256
expr_stmt|;
name|QGradientCache
operator|::
name|ColorBufferPair
name|colorBuffers
init|=
name|qt_gradient_cache
argument_list|()
operator|->
name|getBuffer
argument_list|(
operator|*
name|g
argument_list|,
name|alpha
argument_list|)
decl_stmt|;
name|gradient
operator|.
name|colorTable64
operator|=
name|colorBuffers
operator|.
name|second
expr_stmt|;
name|gradient
operator|.
name|colorTable32
operator|=
name|colorBuffers
operator|.
name|first
expr_stmt|;
name|gradient
operator|.
name|spread
operator|=
name|g
operator|->
name|spread
argument_list|()
expr_stmt|;
name|QRadialGradientData
modifier|&
name|radialData
init|=
name|gradient
operator|.
name|radial
decl_stmt|;
name|QPointF
name|center
init|=
name|g
operator|->
name|center
argument_list|()
decl_stmt|;
name|radialData
operator|.
name|center
operator|.
name|x
operator|=
name|center
operator|.
name|x
argument_list|()
expr_stmt|;
name|radialData
operator|.
name|center
operator|.
name|y
operator|=
name|center
operator|.
name|y
argument_list|()
expr_stmt|;
name|radialData
operator|.
name|center
operator|.
name|radius
operator|=
name|g
operator|->
name|centerRadius
argument_list|()
expr_stmt|;
name|QPointF
name|focal
init|=
name|g
operator|->
name|focalPoint
argument_list|()
decl_stmt|;
name|radialData
operator|.
name|focal
operator|.
name|x
operator|=
name|focal
operator|.
name|x
argument_list|()
expr_stmt|;
name|radialData
operator|.
name|focal
operator|.
name|y
operator|=
name|focal
operator|.
name|y
argument_list|()
expr_stmt|;
name|radialData
operator|.
name|focal
operator|.
name|radius
operator|=
name|g
operator|->
name|focalRadius
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|Qt
operator|::
name|ConicalGradientPattern
case|:
block|{
name|type
operator|=
name|ConicalGradient
expr_stmt|;
specifier|const
name|QConicalGradient
modifier|*
name|g
init|=
cast|static_cast
argument_list|<
specifier|const
name|QConicalGradient
operator|*
argument_list|>
argument_list|(
name|brush
operator|.
name|gradient
argument_list|()
argument_list|)
decl_stmt|;
name|gradient
operator|.
name|alphaColor
operator|=
operator|!
name|brush
operator|.
name|isOpaque
argument_list|()
operator|||
name|alpha
operator|!=
literal|256
expr_stmt|;
name|QGradientCache
operator|::
name|ColorBufferPair
name|colorBuffers
init|=
name|qt_gradient_cache
argument_list|()
operator|->
name|getBuffer
argument_list|(
operator|*
name|g
argument_list|,
name|alpha
argument_list|)
decl_stmt|;
name|gradient
operator|.
name|colorTable64
operator|=
name|colorBuffers
operator|.
name|second
expr_stmt|;
name|gradient
operator|.
name|colorTable32
operator|=
name|colorBuffers
operator|.
name|first
expr_stmt|;
name|gradient
operator|.
name|spread
operator|=
name|QGradient
operator|::
name|RepeatSpread
expr_stmt|;
name|QConicalGradientData
modifier|&
name|conicalData
init|=
name|gradient
operator|.
name|conical
decl_stmt|;
name|QPointF
name|center
init|=
name|g
operator|->
name|center
argument_list|()
decl_stmt|;
name|conicalData
operator|.
name|center
operator|.
name|x
operator|=
name|center
operator|.
name|x
argument_list|()
expr_stmt|;
name|conicalData
operator|.
name|center
operator|.
name|y
operator|=
name|center
operator|.
name|y
argument_list|()
expr_stmt|;
name|conicalData
operator|.
name|angle
operator|=
name|qDegreesToRadians
argument_list|(
name|g
operator|->
name|angle
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Qt
operator|::
name|Dense1Pattern
case|:
case|case
name|Qt
operator|::
name|Dense2Pattern
case|:
case|case
name|Qt
operator|::
name|Dense3Pattern
case|:
case|case
name|Qt
operator|::
name|Dense4Pattern
case|:
case|case
name|Qt
operator|::
name|Dense5Pattern
case|:
case|case
name|Qt
operator|::
name|Dense6Pattern
case|:
case|case
name|Qt
operator|::
name|Dense7Pattern
case|:
case|case
name|Qt
operator|::
name|HorPattern
case|:
case|case
name|Qt
operator|::
name|VerPattern
case|:
case|case
name|Qt
operator|::
name|CrossPattern
case|:
case|case
name|Qt
operator|::
name|BDiagPattern
case|:
case|case
name|Qt
operator|::
name|FDiagPattern
case|:
case|case
name|Qt
operator|::
name|DiagCrossPattern
case|:
name|type
operator|=
name|Texture
expr_stmt|;
if|if
condition|(
operator|!
name|tempImage
condition|)
name|tempImage
operator|=
operator|new
name|QImage
argument_list|()
expr_stmt|;
operator|*
name|tempImage
operator|=
name|rasterBuffer
operator|->
name|colorizeBitmap
argument_list|(
name|qt_imageForBrush
argument_list|(
name|brushStyle
argument_list|,
literal|true
argument_list|)
argument_list|,
name|brush
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|initTexture
argument_list|(
name|tempImage
argument_list|,
name|alpha
argument_list|,
name|QTextureData
operator|::
name|Tiled
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TexturePattern
case|:
name|type
operator|=
name|Texture
expr_stmt|;
if|if
condition|(
operator|!
name|tempImage
condition|)
name|tempImage
operator|=
operator|new
name|QImage
argument_list|()
expr_stmt|;
if|if
condition|(
name|qHasPixmapTexture
argument_list|(
name|brush
argument_list|)
operator|&&
name|brush
operator|.
name|texture
argument_list|()
operator|.
name|isQBitmap
argument_list|()
condition|)
operator|*
name|tempImage
operator|=
name|rasterBuffer
operator|->
name|colorizeBitmap
argument_list|(
name|brush
operator|.
name|textureImage
argument_list|()
argument_list|,
name|brush
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
else|else
operator|*
name|tempImage
operator|=
name|brush
operator|.
name|textureImage
argument_list|()
expr_stmt|;
name|initTexture
argument_list|(
name|tempImage
argument_list|,
name|alpha
argument_list|,
name|QTextureData
operator|::
name|Tiled
argument_list|,
name|tempImage
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|NoBrush
case|:
default|default:
name|type
operator|=
name|None
expr_stmt|;
break|break;
block|}
name|adjustSpanMethods
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|adjustSpanMethods
name|void
name|QSpanData
operator|::
name|adjustSpanMethods
parameter_list|()
block|{
name|bitmapBlit
operator|=
literal|0
expr_stmt|;
name|alphamapBlit
operator|=
literal|0
expr_stmt|;
name|alphaRGBBlit
operator|=
literal|0
expr_stmt|;
name|fillRect
operator|=
literal|0
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|None
case|:
name|unclipped_blend
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|Solid
case|:
name|unclipped_blend
operator|=
name|rasterBuffer
operator|->
name|drawHelper
operator|->
name|blendColor
expr_stmt|;
name|bitmapBlit
operator|=
name|rasterBuffer
operator|->
name|drawHelper
operator|->
name|bitmapBlit
expr_stmt|;
name|alphamapBlit
operator|=
name|rasterBuffer
operator|->
name|drawHelper
operator|->
name|alphamapBlit
expr_stmt|;
name|alphaRGBBlit
operator|=
name|rasterBuffer
operator|->
name|drawHelper
operator|->
name|alphaRGBBlit
expr_stmt|;
name|fillRect
operator|=
name|rasterBuffer
operator|->
name|drawHelper
operator|->
name|fillRect
expr_stmt|;
break|break;
case|case
name|LinearGradient
case|:
case|case
name|RadialGradient
case|:
case|case
name|ConicalGradient
case|:
name|unclipped_blend
operator|=
name|rasterBuffer
operator|->
name|drawHelper
operator|->
name|blendGradient
expr_stmt|;
break|break;
case|case
name|Texture
case|:
name|unclipped_blend
operator|=
name|qBlendTexture
expr_stmt|;
if|if
condition|(
operator|!
name|texture
operator|.
name|imageData
condition|)
name|unclipped_blend
operator|=
literal|0
expr_stmt|;
break|break;
block|}
comment|// setup clipping
if|if
condition|(
operator|!
name|unclipped_blend
condition|)
block|{
name|blend
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|clip
condition|)
block|{
name|blend
operator|=
name|unclipped_blend
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|clip
operator|->
name|hasRectClip
condition|)
block|{
name|blend
operator|=
name|clip
operator|->
name|clipRect
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
name|qt_span_fill_clipRect
expr_stmt|;
block|}
else|else
block|{
name|blend
operator|=
name|qt_span_fill_clipped
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setupMatrix
name|void
name|QSpanData
operator|::
name|setupMatrix
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|int
name|bilin
parameter_list|)
block|{
name|QTransform
name|delta
decl_stmt|;
comment|// make sure we round off correctly in qdrawhelper.cpp
name|delta
operator|.
name|translate
argument_list|(
literal|1.0
operator|/
literal|65536
argument_list|,
literal|1.0
operator|/
literal|65536
argument_list|)
expr_stmt|;
name|QTransform
name|inv
init|=
operator|(
name|delta
operator|*
name|matrix
operator|)
operator|.
name|inverted
argument_list|()
decl_stmt|;
name|m11
operator|=
name|inv
operator|.
name|m11
argument_list|()
expr_stmt|;
name|m12
operator|=
name|inv
operator|.
name|m12
argument_list|()
expr_stmt|;
name|m13
operator|=
name|inv
operator|.
name|m13
argument_list|()
expr_stmt|;
name|m21
operator|=
name|inv
operator|.
name|m21
argument_list|()
expr_stmt|;
name|m22
operator|=
name|inv
operator|.
name|m22
argument_list|()
expr_stmt|;
name|m23
operator|=
name|inv
operator|.
name|m23
argument_list|()
expr_stmt|;
name|m33
operator|=
name|inv
operator|.
name|m33
argument_list|()
expr_stmt|;
name|dx
operator|=
name|inv
operator|.
name|dx
argument_list|()
expr_stmt|;
name|dy
operator|=
name|inv
operator|.
name|dy
argument_list|()
expr_stmt|;
name|txop
operator|=
name|inv
operator|.
name|type
argument_list|()
expr_stmt|;
name|bilinear
operator|=
name|bilin
expr_stmt|;
specifier|const
name|bool
name|affine
init|=
name|inv
operator|.
name|isAffine
argument_list|()
decl_stmt|;
name|fast_matrix
operator|=
name|affine
operator|&&
name|m11
operator|*
name|m11
operator|+
name|m21
operator|*
name|m21
operator|<
literal|1e4
operator|&&
name|m12
operator|*
name|m12
operator|+
name|m22
operator|*
name|m22
operator|<
literal|1e4
operator|&&
name|qAbs
argument_list|(
name|dx
argument_list|)
operator|<
literal|1e4
operator|&&
name|qAbs
argument_list|(
name|dy
argument_list|)
operator|<
literal|1e4
expr_stmt|;
name|adjustSpanMethods
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initTexture
name|void
name|QSpanData
operator|::
name|initTexture
parameter_list|(
specifier|const
name|QImage
modifier|*
name|image
parameter_list|,
name|int
name|alpha
parameter_list|,
name|QTextureData
operator|::
name|Type
name|_type
parameter_list|,
specifier|const
name|QRect
modifier|&
name|sourceRect
parameter_list|)
block|{
specifier|const
name|QImageData
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QImage
operator|*
argument_list|>
argument_list|(
name|image
argument_list|)
operator|->
name|data_ptr
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|||
name|d
operator|->
name|height
operator|==
literal|0
condition|)
block|{
name|texture
operator|.
name|imageData
operator|=
literal|0
expr_stmt|;
name|texture
operator|.
name|width
operator|=
literal|0
expr_stmt|;
name|texture
operator|.
name|height
operator|=
literal|0
expr_stmt|;
name|texture
operator|.
name|x1
operator|=
literal|0
expr_stmt|;
name|texture
operator|.
name|y1
operator|=
literal|0
expr_stmt|;
name|texture
operator|.
name|x2
operator|=
literal|0
expr_stmt|;
name|texture
operator|.
name|y2
operator|=
literal|0
expr_stmt|;
name|texture
operator|.
name|bytesPerLine
operator|=
literal|0
expr_stmt|;
name|texture
operator|.
name|format
operator|=
name|QImage
operator|::
name|Format_Invalid
expr_stmt|;
name|texture
operator|.
name|colorTable
operator|=
literal|0
expr_stmt|;
name|texture
operator|.
name|hasAlpha
operator|=
name|alpha
operator|!=
literal|256
expr_stmt|;
block|}
else|else
block|{
name|texture
operator|.
name|imageData
operator|=
name|d
operator|->
name|data
expr_stmt|;
name|texture
operator|.
name|width
operator|=
name|d
operator|->
name|width
expr_stmt|;
name|texture
operator|.
name|height
operator|=
name|d
operator|->
name|height
expr_stmt|;
if|if
condition|(
name|sourceRect
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|texture
operator|.
name|x1
operator|=
literal|0
expr_stmt|;
name|texture
operator|.
name|y1
operator|=
literal|0
expr_stmt|;
name|texture
operator|.
name|x2
operator|=
name|texture
operator|.
name|width
expr_stmt|;
name|texture
operator|.
name|y2
operator|=
name|texture
operator|.
name|height
expr_stmt|;
block|}
else|else
block|{
name|texture
operator|.
name|x1
operator|=
name|sourceRect
operator|.
name|x
argument_list|()
expr_stmt|;
name|texture
operator|.
name|y1
operator|=
name|sourceRect
operator|.
name|y
argument_list|()
expr_stmt|;
name|texture
operator|.
name|x2
operator|=
name|qMin
argument_list|(
name|texture
operator|.
name|x1
operator|+
name|sourceRect
operator|.
name|width
argument_list|()
argument_list|,
name|d
operator|->
name|width
argument_list|)
expr_stmt|;
name|texture
operator|.
name|y2
operator|=
name|qMin
argument_list|(
name|texture
operator|.
name|y1
operator|+
name|sourceRect
operator|.
name|height
argument_list|()
argument_list|,
name|d
operator|->
name|height
argument_list|)
expr_stmt|;
block|}
name|texture
operator|.
name|bytesPerLine
operator|=
name|d
operator|->
name|bytes_per_line
expr_stmt|;
name|texture
operator|.
name|format
operator|=
name|d
operator|->
name|format
expr_stmt|;
name|texture
operator|.
name|colorTable
operator|=
operator|(
name|d
operator|->
name|format
operator|<=
name|QImage
operator|::
name|Format_Indexed8
operator|&&
operator|!
name|d
operator|->
name|colortable
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
operator|&
name|d
operator|->
name|colortable
else|:
literal|0
expr_stmt|;
name|texture
operator|.
name|hasAlpha
operator|=
name|image
operator|->
name|hasAlphaChannel
argument_list|()
operator|||
name|alpha
operator|!=
literal|256
expr_stmt|;
block|}
name|texture
operator|.
name|const_alpha
operator|=
name|alpha
expr_stmt|;
name|texture
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|adjustSpanMethods
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal     \a x and \a y is relative to the midpoint of \a rect. */
end_comment
begin_function
DECL|function|drawEllipsePoints
specifier|static
specifier|inline
name|void
name|drawEllipsePoints
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QRect
modifier|&
name|clip
parameter_list|,
name|ProcessSpans
name|pen_func
parameter_list|,
name|ProcessSpans
name|brush_func
parameter_list|,
name|QSpanData
modifier|*
name|pen_data
parameter_list|,
name|QSpanData
modifier|*
name|brush_data
parameter_list|)
block|{
if|if
condition|(
name|length
operator|==
literal|0
condition|)
return|return;
name|QT_FT_Span
name|outline
index|[
literal|4
index|]
decl_stmt|;
specifier|const
name|int
name|midx
init|=
name|rect
operator|.
name|x
argument_list|()
operator|+
operator|(
name|rect
operator|.
name|width
argument_list|()
operator|+
literal|1
operator|)
operator|/
literal|2
decl_stmt|;
specifier|const
name|int
name|midy
init|=
name|rect
operator|.
name|y
argument_list|()
operator|+
operator|(
name|rect
operator|.
name|height
argument_list|()
operator|+
literal|1
operator|)
operator|/
literal|2
decl_stmt|;
name|x
operator|=
name|x
operator|+
name|midx
expr_stmt|;
name|y
operator|=
name|midy
operator|-
name|y
expr_stmt|;
comment|// topleft
name|outline
index|[
literal|0
index|]
operator|.
name|x
operator|=
name|midx
operator|+
operator|(
name|midx
operator|-
name|x
operator|)
operator|-
operator|(
name|length
operator|-
literal|1
operator|)
operator|-
operator|(
name|rect
operator|.
name|width
argument_list|()
operator|&
literal|0x1
operator|)
expr_stmt|;
name|outline
index|[
literal|0
index|]
operator|.
name|len
operator|=
name|qMin
argument_list|(
name|length
argument_list|,
name|x
operator|-
name|outline
index|[
literal|0
index|]
operator|.
name|x
argument_list|)
expr_stmt|;
name|outline
index|[
literal|0
index|]
operator|.
name|y
operator|=
name|y
expr_stmt|;
name|outline
index|[
literal|0
index|]
operator|.
name|coverage
operator|=
literal|255
expr_stmt|;
comment|// topright
name|outline
index|[
literal|1
index|]
operator|.
name|x
operator|=
name|x
expr_stmt|;
name|outline
index|[
literal|1
index|]
operator|.
name|len
operator|=
name|length
expr_stmt|;
name|outline
index|[
literal|1
index|]
operator|.
name|y
operator|=
name|y
expr_stmt|;
name|outline
index|[
literal|1
index|]
operator|.
name|coverage
operator|=
literal|255
expr_stmt|;
comment|// bottomleft
name|outline
index|[
literal|2
index|]
operator|.
name|x
operator|=
name|outline
index|[
literal|0
index|]
operator|.
name|x
expr_stmt|;
name|outline
index|[
literal|2
index|]
operator|.
name|len
operator|=
name|outline
index|[
literal|0
index|]
operator|.
name|len
expr_stmt|;
name|outline
index|[
literal|2
index|]
operator|.
name|y
operator|=
name|midy
operator|+
operator|(
name|midy
operator|-
name|y
operator|)
operator|-
operator|(
name|rect
operator|.
name|height
argument_list|()
operator|&
literal|0x1
operator|)
expr_stmt|;
name|outline
index|[
literal|2
index|]
operator|.
name|coverage
operator|=
literal|255
expr_stmt|;
comment|// bottomright
name|outline
index|[
literal|3
index|]
operator|.
name|x
operator|=
name|x
expr_stmt|;
name|outline
index|[
literal|3
index|]
operator|.
name|len
operator|=
name|length
expr_stmt|;
name|outline
index|[
literal|3
index|]
operator|.
name|y
operator|=
name|outline
index|[
literal|2
index|]
operator|.
name|y
expr_stmt|;
name|outline
index|[
literal|3
index|]
operator|.
name|coverage
operator|=
literal|255
expr_stmt|;
if|if
condition|(
name|brush_func
operator|&&
name|outline
index|[
literal|0
index|]
operator|.
name|x
operator|+
name|outline
index|[
literal|0
index|]
operator|.
name|len
operator|<
name|outline
index|[
literal|1
index|]
operator|.
name|x
condition|)
block|{
name|QT_FT_Span
name|fill
index|[
literal|2
index|]
decl_stmt|;
comment|// top fill
name|fill
index|[
literal|0
index|]
operator|.
name|x
operator|=
name|outline
index|[
literal|0
index|]
operator|.
name|x
operator|+
name|outline
index|[
literal|0
index|]
operator|.
name|len
operator|-
literal|1
expr_stmt|;
name|fill
index|[
literal|0
index|]
operator|.
name|len
operator|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|outline
index|[
literal|1
index|]
operator|.
name|x
operator|-
name|fill
index|[
literal|0
index|]
operator|.
name|x
argument_list|)
expr_stmt|;
name|fill
index|[
literal|0
index|]
operator|.
name|y
operator|=
name|outline
index|[
literal|1
index|]
operator|.
name|y
expr_stmt|;
name|fill
index|[
literal|0
index|]
operator|.
name|coverage
operator|=
literal|255
expr_stmt|;
comment|// bottom fill
name|fill
index|[
literal|1
index|]
operator|.
name|x
operator|=
name|outline
index|[
literal|2
index|]
operator|.
name|x
operator|+
name|outline
index|[
literal|2
index|]
operator|.
name|len
operator|-
literal|1
expr_stmt|;
name|fill
index|[
literal|1
index|]
operator|.
name|len
operator|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|outline
index|[
literal|3
index|]
operator|.
name|x
operator|-
name|fill
index|[
literal|1
index|]
operator|.
name|x
argument_list|)
expr_stmt|;
name|fill
index|[
literal|1
index|]
operator|.
name|y
operator|=
name|outline
index|[
literal|3
index|]
operator|.
name|y
expr_stmt|;
name|fill
index|[
literal|1
index|]
operator|.
name|coverage
operator|=
literal|255
expr_stmt|;
name|int
name|n
init|=
operator|(
name|fill
index|[
literal|0
index|]
operator|.
name|y
operator|>=
name|fill
index|[
literal|1
index|]
operator|.
name|y
condition|?
literal|1
else|:
literal|2
operator|)
decl_stmt|;
name|n
operator|=
name|qt_intersect_spans
argument_list|(
name|fill
argument_list|,
name|n
argument_list|,
name|clip
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
name|brush_func
argument_list|(
name|n
argument_list|,
name|fill
argument_list|,
name|brush_data
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pen_func
condition|)
block|{
name|int
name|n
init|=
operator|(
name|outline
index|[
literal|1
index|]
operator|.
name|y
operator|>=
name|outline
index|[
literal|2
index|]
operator|.
name|y
condition|?
literal|2
else|:
literal|4
operator|)
decl_stmt|;
name|n
operator|=
name|qt_intersect_spans
argument_list|(
name|outline
argument_list|,
name|n
argument_list|,
name|clip
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
name|pen_func
argument_list|(
name|n
argument_list|,
name|outline
argument_list|,
name|pen_data
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal     Draws an ellipse using the integer point midpoint algorithm. */
end_comment
begin_function
DECL|function|drawEllipse_midpoint_i
specifier|static
name|void
name|drawEllipse_midpoint_i
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QRect
modifier|&
name|clip
parameter_list|,
name|ProcessSpans
name|pen_func
parameter_list|,
name|ProcessSpans
name|brush_func
parameter_list|,
name|QSpanData
modifier|*
name|pen_data
parameter_list|,
name|QSpanData
modifier|*
name|brush_data
parameter_list|)
block|{
specifier|const
name|qreal
name|a
init|=
name|qreal
argument_list|(
name|rect
operator|.
name|width
argument_list|()
argument_list|)
operator|/
literal|2
decl_stmt|;
specifier|const
name|qreal
name|b
init|=
name|qreal
argument_list|(
name|rect
operator|.
name|height
argument_list|()
argument_list|)
operator|/
literal|2
decl_stmt|;
name|qreal
name|d
init|=
name|b
operator|*
name|b
operator|-
operator|(
name|a
operator|*
name|a
operator|*
name|b
operator|)
operator|+
literal|0.25
operator|*
name|a
operator|*
name|a
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
name|int
name|y
init|=
operator|(
name|rect
operator|.
name|height
argument_list|()
operator|+
literal|1
operator|)
operator|/
literal|2
decl_stmt|;
name|int
name|startx
init|=
name|x
decl_stmt|;
comment|// region 1
while|while
condition|(
name|a
operator|*
name|a
operator|*
operator|(
literal|2
operator|*
name|y
operator|-
literal|1
operator|)
operator|>
literal|2
operator|*
name|b
operator|*
name|b
operator|*
operator|(
name|x
operator|+
literal|1
operator|)
condition|)
block|{
if|if
condition|(
name|d
operator|<
literal|0
condition|)
block|{
comment|// select E
name|d
operator|+=
name|b
operator|*
name|b
operator|*
operator|(
literal|2
operator|*
name|x
operator|+
literal|3
operator|)
expr_stmt|;
operator|++
name|x
expr_stmt|;
block|}
else|else
block|{
comment|// select SE
name|d
operator|+=
name|b
operator|*
name|b
operator|*
operator|(
literal|2
operator|*
name|x
operator|+
literal|3
operator|)
operator|+
name|a
operator|*
name|a
operator|*
operator|(
operator|-
literal|2
operator|*
name|y
operator|+
literal|2
operator|)
expr_stmt|;
name|drawEllipsePoints
argument_list|(
name|startx
argument_list|,
name|y
argument_list|,
name|x
operator|-
name|startx
operator|+
literal|1
argument_list|,
name|rect
argument_list|,
name|clip
argument_list|,
name|pen_func
argument_list|,
name|brush_func
argument_list|,
name|pen_data
argument_list|,
name|brush_data
argument_list|)
expr_stmt|;
name|startx
operator|=
operator|++
name|x
expr_stmt|;
operator|--
name|y
expr_stmt|;
block|}
block|}
name|drawEllipsePoints
argument_list|(
name|startx
argument_list|,
name|y
argument_list|,
name|x
operator|-
name|startx
operator|+
literal|1
argument_list|,
name|rect
argument_list|,
name|clip
argument_list|,
name|pen_func
argument_list|,
name|brush_func
argument_list|,
name|pen_data
argument_list|,
name|brush_data
argument_list|)
expr_stmt|;
comment|// region 2
name|d
operator|=
name|b
operator|*
name|b
operator|*
operator|(
name|x
operator|+
literal|0.5
operator|)
operator|*
operator|(
name|x
operator|+
literal|0.5
operator|)
operator|+
name|a
operator|*
name|a
operator|*
operator|(
operator|(
name|y
operator|-
literal|1
operator|)
operator|*
operator|(
name|y
operator|-
literal|1
operator|)
operator|-
name|b
operator|*
name|b
operator|)
expr_stmt|;
specifier|const
name|int
name|miny
init|=
name|rect
operator|.
name|height
argument_list|()
operator|&
literal|0x1
decl_stmt|;
while|while
condition|(
name|y
operator|>
name|miny
condition|)
block|{
if|if
condition|(
name|d
operator|<
literal|0
condition|)
block|{
comment|// select SE
name|d
operator|+=
name|b
operator|*
name|b
operator|*
operator|(
literal|2
operator|*
name|x
operator|+
literal|2
operator|)
operator|+
name|a
operator|*
name|a
operator|*
operator|(
operator|-
literal|2
operator|*
name|y
operator|+
literal|3
operator|)
expr_stmt|;
operator|++
name|x
expr_stmt|;
block|}
else|else
block|{
comment|// select S
name|d
operator|+=
name|a
operator|*
name|a
operator|*
operator|(
operator|-
literal|2
operator|*
name|y
operator|+
literal|3
operator|)
expr_stmt|;
block|}
operator|--
name|y
expr_stmt|;
name|drawEllipsePoints
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
literal|1
argument_list|,
name|rect
argument_list|,
name|clip
argument_list|,
name|pen_func
argument_list|,
name|brush_func
argument_list|,
name|pen_data
argument_list|,
name|brush_data
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \fn void QRasterPaintEngine::drawPoints(const QPoint *points, int pointCount)     \overload     \reimp */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
end_ifdef
begin_function
DECL|function|dumpClip
name|void
name|dumpClip
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
specifier|const
name|QClipData
modifier|*
name|clip
parameter_list|)
block|{
name|QImage
name|clipImg
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|clipImg
operator|.
name|fill
argument_list|(
literal|0xffff0000
argument_list|)
expr_stmt|;
name|int
name|x0
init|=
name|width
decl_stmt|;
name|int
name|x1
init|=
literal|0
decl_stmt|;
name|int
name|y0
init|=
name|height
decl_stmt|;
name|int
name|y1
init|=
literal|0
decl_stmt|;
operator|(
operator|(
name|QClipData
operator|*
operator|)
name|clip
operator|)
operator|->
name|spans
argument_list|()
expr_stmt|;
comment|// Force allocation of the spans structure...
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clip
operator|->
name|count
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QSpan
modifier|*
name|span
init|=
operator|(
operator|(
name|QClipData
operator|*
operator|)
name|clip
operator|)
operator|->
name|spans
argument_list|()
operator|+
name|i
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|span
operator|->
name|len
condition|;
operator|++
name|j
control|)
name|clipImg
operator|.
name|setPixel
argument_list|(
name|span
operator|->
name|x
operator|+
name|j
argument_list|,
name|span
operator|->
name|y
argument_list|,
literal|0xffffff00
argument_list|)
expr_stmt|;
name|x0
operator|=
name|qMin
argument_list|(
name|x0
argument_list|,
name|int
argument_list|(
name|span
operator|->
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|x1
operator|=
name|qMax
argument_list|(
name|x1
argument_list|,
name|int
argument_list|(
name|span
operator|->
name|x
operator|+
name|span
operator|->
name|len
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|y0
operator|=
name|qMin
argument_list|(
name|y0
argument_list|,
name|int
argument_list|(
name|span
operator|->
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|y1
operator|=
name|qMax
argument_list|(
name|y1
argument_list|,
name|int
argument_list|(
name|span
operator|->
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|y0
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|x0
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|y1
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|x1
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"clip %d: %d %d - %d %d\n"
argument_list|,
name|counter
argument_list|,
name|x0
argument_list|,
name|y0
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|clipImg
operator|.
name|save
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"clip-%0.png"
argument_list|)
operator|.
name|arg
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
