begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 John Layt<jlayt@kde.org> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qpagesize.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpoint.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qrect.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qsize.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// Define the Windows DMPAPER sizes for use in the look-up table
comment|// See http://msdn.microsoft.com/en-us/library/windows/desktop/dd319099.aspx
DECL|enum|WindowsDmPaper
name|enum
name|WindowsDmPaper
argument_list|{
DECL|enumerator|DMPAPER_NONE
name|DMPAPER_NONE
operator|=
literal|0
argument_list|,
comment|// Not a DMPAPER, use for sizes without a DMPAPER value
DECL|enumerator|DMPAPER_LETTER
name|DMPAPER_LETTER
operator|=
literal|1
argument_list|,
DECL|enumerator|DMPAPER_LETTERSMALL
name|DMPAPER_LETTERSMALL
operator|=
literal|2
argument_list|,
DECL|enumerator|DMPAPER_TABLOID
name|DMPAPER_TABLOID
operator|=
literal|3
argument_list|,
DECL|enumerator|DMPAPER_LEDGER
name|DMPAPER_LEDGER
operator|=
literal|4
argument_list|,
DECL|enumerator|DMPAPER_LEGAL
name|DMPAPER_LEGAL
operator|=
literal|5
argument_list|,
DECL|enumerator|DMPAPER_STATEMENT
name|DMPAPER_STATEMENT
operator|=
literal|6
argument_list|,
DECL|enumerator|DMPAPER_EXECUTIVE
name|DMPAPER_EXECUTIVE
operator|=
literal|7
argument_list|,
DECL|enumerator|DMPAPER_A3
name|DMPAPER_A3
operator|=
literal|8
argument_list|,
DECL|enumerator|DMPAPER_A4
name|DMPAPER_A4
operator|=
literal|9
argument_list|,
DECL|enumerator|DMPAPER_A4SMALL
name|DMPAPER_A4SMALL
operator|=
literal|10
argument_list|,
DECL|enumerator|DMPAPER_A5
name|DMPAPER_A5
operator|=
literal|11
argument_list|,
DECL|enumerator|DMPAPER_B4
name|DMPAPER_B4
operator|=
literal|12
argument_list|,
DECL|enumerator|DMPAPER_B5
name|DMPAPER_B5
operator|=
literal|13
argument_list|,
DECL|enumerator|DMPAPER_FOLIO
name|DMPAPER_FOLIO
operator|=
literal|14
argument_list|,
DECL|enumerator|DMPAPER_QUARTO
name|DMPAPER_QUARTO
operator|=
literal|15
argument_list|,
DECL|enumerator|DMPAPER_10X14
name|DMPAPER_10X14
operator|=
literal|16
argument_list|,
DECL|enumerator|DMPAPER_11X17
name|DMPAPER_11X17
operator|=
literal|17
argument_list|,
DECL|enumerator|DMPAPER_NOTE
name|DMPAPER_NOTE
operator|=
literal|18
argument_list|,
DECL|enumerator|DMPAPER_ENV_9
name|DMPAPER_ENV_9
operator|=
literal|19
argument_list|,
DECL|enumerator|DMPAPER_ENV_10
name|DMPAPER_ENV_10
operator|=
literal|20
argument_list|,
DECL|enumerator|DMPAPER_ENV_11
name|DMPAPER_ENV_11
operator|=
literal|21
argument_list|,
DECL|enumerator|DMPAPER_ENV_12
name|DMPAPER_ENV_12
operator|=
literal|22
argument_list|,
DECL|enumerator|DMPAPER_ENV_14
name|DMPAPER_ENV_14
operator|=
literal|23
argument_list|,
DECL|enumerator|DMPAPER_CSHEET
name|DMPAPER_CSHEET
operator|=
literal|24
argument_list|,
DECL|enumerator|DMPAPER_DSHEET
name|DMPAPER_DSHEET
operator|=
literal|25
argument_list|,
DECL|enumerator|DMPAPER_ESHEET
name|DMPAPER_ESHEET
operator|=
literal|26
argument_list|,
DECL|enumerator|DMPAPER_ENV_DL
name|DMPAPER_ENV_DL
operator|=
literal|27
argument_list|,
DECL|enumerator|DMPAPER_ENV_C5
name|DMPAPER_ENV_C5
operator|=
literal|28
argument_list|,
DECL|enumerator|DMPAPER_ENV_C3
name|DMPAPER_ENV_C3
operator|=
literal|29
argument_list|,
DECL|enumerator|DMPAPER_ENV_C4
name|DMPAPER_ENV_C4
operator|=
literal|30
argument_list|,
DECL|enumerator|DMPAPER_ENV_C6
name|DMPAPER_ENV_C6
operator|=
literal|31
argument_list|,
DECL|enumerator|DMPAPER_ENV_C65
name|DMPAPER_ENV_C65
operator|=
literal|32
argument_list|,
DECL|enumerator|DMPAPER_ENV_B4
name|DMPAPER_ENV_B4
operator|=
literal|33
argument_list|,
DECL|enumerator|DMPAPER_ENV_B5
name|DMPAPER_ENV_B5
operator|=
literal|34
argument_list|,
DECL|enumerator|DMPAPER_ENV_B6
name|DMPAPER_ENV_B6
operator|=
literal|35
argument_list|,
DECL|enumerator|DMPAPER_ENV_ITALY
name|DMPAPER_ENV_ITALY
operator|=
literal|36
argument_list|,
DECL|enumerator|DMPAPER_ENV_MONARCH
name|DMPAPER_ENV_MONARCH
operator|=
literal|37
argument_list|,
DECL|enumerator|DMPAPER_ENV_PERSONAL
name|DMPAPER_ENV_PERSONAL
operator|=
literal|38
argument_list|,
DECL|enumerator|DMPAPER_FANFOLD_US
name|DMPAPER_FANFOLD_US
operator|=
literal|39
argument_list|,
DECL|enumerator|DMPAPER_FANFOLD_STD_GERMAN
name|DMPAPER_FANFOLD_STD_GERMAN
operator|=
literal|40
argument_list|,
DECL|enumerator|DMPAPER_FANFOLD_LGL_GERMAN
name|DMPAPER_FANFOLD_LGL_GERMAN
operator|=
literal|41
argument_list|,
DECL|enumerator|DMPAPER_ISO_B4
name|DMPAPER_ISO_B4
operator|=
literal|42
argument_list|,
DECL|enumerator|DMPAPER_JAPANESE_POSTCARD
name|DMPAPER_JAPANESE_POSTCARD
operator|=
literal|43
argument_list|,
DECL|enumerator|DMPAPER_9X11
name|DMPAPER_9X11
operator|=
literal|44
argument_list|,
DECL|enumerator|DMPAPER_10X11
name|DMPAPER_10X11
operator|=
literal|45
argument_list|,
DECL|enumerator|DMPAPER_15X11
name|DMPAPER_15X11
operator|=
literal|46
argument_list|,
DECL|enumerator|DMPAPER_ENV_INVITE
name|DMPAPER_ENV_INVITE
operator|=
literal|47
argument_list|,
DECL|enumerator|DMPAPER_RESERVED_48
name|DMPAPER_RESERVED_48
operator|=
literal|48
argument_list|,
DECL|enumerator|DMPAPER_RESERVED_49
name|DMPAPER_RESERVED_49
operator|=
literal|49
argument_list|,
DECL|enumerator|DMPAPER_LETTER_EXTRA
name|DMPAPER_LETTER_EXTRA
operator|=
literal|50
argument_list|,
DECL|enumerator|DMPAPER_LEGAL_EXTRA
name|DMPAPER_LEGAL_EXTRA
operator|=
literal|51
argument_list|,
DECL|enumerator|DMPAPER_TABLOID_EXTRA
name|DMPAPER_TABLOID_EXTRA
operator|=
literal|52
argument_list|,
DECL|enumerator|DMPAPER_A4_EXTRA
name|DMPAPER_A4_EXTRA
operator|=
literal|53
argument_list|,
DECL|enumerator|DMPAPER_LETTER_TRANSVERSE
name|DMPAPER_LETTER_TRANSVERSE
operator|=
literal|54
argument_list|,
DECL|enumerator|DMPAPER_A4_TRANSVERSE
name|DMPAPER_A4_TRANSVERSE
operator|=
literal|55
argument_list|,
DECL|enumerator|DMPAPER_LETTER_EXTRA_TRANSVERSE
name|DMPAPER_LETTER_EXTRA_TRANSVERSE
operator|=
literal|56
argument_list|,
DECL|enumerator|DMPAPER_A_PLUS
name|DMPAPER_A_PLUS
operator|=
literal|57
argument_list|,
DECL|enumerator|DMPAPER_B_PLUS
name|DMPAPER_B_PLUS
operator|=
literal|58
argument_list|,
DECL|enumerator|DMPAPER_LETTER_PLUS
name|DMPAPER_LETTER_PLUS
operator|=
literal|59
argument_list|,
DECL|enumerator|DMPAPER_A4_PLUS
name|DMPAPER_A4_PLUS
operator|=
literal|60
argument_list|,
DECL|enumerator|DMPAPER_A5_TRANSVERSE
name|DMPAPER_A5_TRANSVERSE
operator|=
literal|61
argument_list|,
DECL|enumerator|DMPAPER_B5_TRANSVERSE
name|DMPAPER_B5_TRANSVERSE
operator|=
literal|62
argument_list|,
DECL|enumerator|DMPAPER_A3_EXTRA
name|DMPAPER_A3_EXTRA
operator|=
literal|63
argument_list|,
DECL|enumerator|DMPAPER_A5_EXTRA
name|DMPAPER_A5_EXTRA
operator|=
literal|64
argument_list|,
DECL|enumerator|DMPAPER_B5_EXTRA
name|DMPAPER_B5_EXTRA
operator|=
literal|65
argument_list|,
DECL|enumerator|DMPAPER_A2
name|DMPAPER_A2
operator|=
literal|66
argument_list|,
DECL|enumerator|DMPAPER_A3_TRANSVERSE
name|DMPAPER_A3_TRANSVERSE
operator|=
literal|67
argument_list|,
DECL|enumerator|DMPAPER_A3_EXTRA_TRANSVERSE
name|DMPAPER_A3_EXTRA_TRANSVERSE
operator|=
literal|68
argument_list|,
DECL|enumerator|DMPAPER_DBL_JAPANESE_POSTCARD
name|DMPAPER_DBL_JAPANESE_POSTCARD
operator|=
literal|69
argument_list|,
DECL|enumerator|DMPAPER_A6
name|DMPAPER_A6
operator|=
literal|70
argument_list|,
DECL|enumerator|DMPAPER_JENV_KAKU2
name|DMPAPER_JENV_KAKU2
operator|=
literal|71
argument_list|,
DECL|enumerator|DMPAPER_JENV_KAKU3
name|DMPAPER_JENV_KAKU3
operator|=
literal|72
argument_list|,
DECL|enumerator|DMPAPER_JENV_CHOU3
name|DMPAPER_JENV_CHOU3
operator|=
literal|73
argument_list|,
DECL|enumerator|DMPAPER_JENV_CHOU4
name|DMPAPER_JENV_CHOU4
operator|=
literal|74
argument_list|,
DECL|enumerator|DMPAPER_LETTER_ROTATED
name|DMPAPER_LETTER_ROTATED
operator|=
literal|75
argument_list|,
DECL|enumerator|DMPAPER_A3_ROTATED
name|DMPAPER_A3_ROTATED
operator|=
literal|76
argument_list|,
DECL|enumerator|DMPAPER_A4_ROTATED
name|DMPAPER_A4_ROTATED
operator|=
literal|77
argument_list|,
DECL|enumerator|DMPAPER_A5_ROTATED
name|DMPAPER_A5_ROTATED
operator|=
literal|78
argument_list|,
DECL|enumerator|DMPAPER_B4_JIS_ROTATED
name|DMPAPER_B4_JIS_ROTATED
operator|=
literal|79
argument_list|,
DECL|enumerator|DMPAPER_B5_JIS_ROTATED
name|DMPAPER_B5_JIS_ROTATED
operator|=
literal|80
argument_list|,
DECL|enumerator|DMPAPER_JAPANESE_POSTCARD_ROTATED
name|DMPAPER_JAPANESE_POSTCARD_ROTATED
operator|=
literal|81
argument_list|,
DECL|enumerator|DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED
name|DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED
operator|=
literal|82
argument_list|,
DECL|enumerator|DMPAPER_A6_ROTATED
name|DMPAPER_A6_ROTATED
operator|=
literal|83
argument_list|,
DECL|enumerator|DMPAPER_JENV_KAKU2_ROTATED
name|DMPAPER_JENV_KAKU2_ROTATED
operator|=
literal|84
argument_list|,
DECL|enumerator|DMPAPER_JENV_KAKU3_ROTATED
name|DMPAPER_JENV_KAKU3_ROTATED
operator|=
literal|85
argument_list|,
DECL|enumerator|DMPAPER_JENV_CHOU3_ROTATED
name|DMPAPER_JENV_CHOU3_ROTATED
operator|=
literal|86
argument_list|,
DECL|enumerator|DMPAPER_JENV_CHOU4_ROTATED
name|DMPAPER_JENV_CHOU4_ROTATED
operator|=
literal|87
argument_list|,
DECL|enumerator|DMPAPER_B6_JIS
name|DMPAPER_B6_JIS
operator|=
literal|88
argument_list|,
DECL|enumerator|DMPAPER_B6_JIS_ROTATED
name|DMPAPER_B6_JIS_ROTATED
operator|=
literal|89
argument_list|,
DECL|enumerator|DMPAPER_12X11
name|DMPAPER_12X11
operator|=
literal|90
argument_list|,
DECL|enumerator|DMPAPER_JENV_YOU4
name|DMPAPER_JENV_YOU4
operator|=
literal|91
argument_list|,
DECL|enumerator|DMPAPER_JENV_YOU4_ROTATED
name|DMPAPER_JENV_YOU4_ROTATED
operator|=
literal|92
argument_list|,
DECL|enumerator|DMPAPER_P16K
name|DMPAPER_P16K
operator|=
literal|93
argument_list|,
DECL|enumerator|DMPAPER_P32K
name|DMPAPER_P32K
operator|=
literal|94
argument_list|,
DECL|enumerator|DMPAPER_P32KBIG
name|DMPAPER_P32KBIG
operator|=
literal|95
argument_list|,
DECL|enumerator|DMPAPER_PENV_1
name|DMPAPER_PENV_1
operator|=
literal|96
argument_list|,
DECL|enumerator|DMPAPER_PENV_2
name|DMPAPER_PENV_2
operator|=
literal|97
argument_list|,
DECL|enumerator|DMPAPER_PENV_3
name|DMPAPER_PENV_3
operator|=
literal|98
argument_list|,
DECL|enumerator|DMPAPER_PENV_4
name|DMPAPER_PENV_4
operator|=
literal|99
argument_list|,
DECL|enumerator|DMPAPER_PENV_5
name|DMPAPER_PENV_5
operator|=
literal|100
argument_list|,
DECL|enumerator|DMPAPER_PENV_6
name|DMPAPER_PENV_6
operator|=
literal|101
argument_list|,
DECL|enumerator|DMPAPER_PENV_7
name|DMPAPER_PENV_7
operator|=
literal|102
argument_list|,
DECL|enumerator|DMPAPER_PENV_8
name|DMPAPER_PENV_8
operator|=
literal|103
argument_list|,
DECL|enumerator|DMPAPER_PENV_9
name|DMPAPER_PENV_9
operator|=
literal|104
argument_list|,
DECL|enumerator|DMPAPER_PENV_10
name|DMPAPER_PENV_10
operator|=
literal|105
argument_list|,
DECL|enumerator|DMPAPER_P16K_ROTATED
name|DMPAPER_P16K_ROTATED
operator|=
literal|106
argument_list|,
DECL|enumerator|DMPAPER_P32K_ROTATED
name|DMPAPER_P32K_ROTATED
operator|=
literal|107
argument_list|,
DECL|enumerator|DMPAPER_P32KBIG_ROTATED
name|DMPAPER_P32KBIG_ROTATED
operator|=
literal|108
argument_list|,
DECL|enumerator|DMPAPER_PENV_1_ROTATED
name|DMPAPER_PENV_1_ROTATED
operator|=
literal|109
argument_list|,
DECL|enumerator|DMPAPER_PENV_2_ROTATED
name|DMPAPER_PENV_2_ROTATED
operator|=
literal|110
argument_list|,
DECL|enumerator|DMPAPER_PENV_3_ROTATED
name|DMPAPER_PENV_3_ROTATED
operator|=
literal|111
argument_list|,
DECL|enumerator|DMPAPER_PENV_4_ROTATED
name|DMPAPER_PENV_4_ROTATED
operator|=
literal|112
argument_list|,
DECL|enumerator|DMPAPER_PENV_5_ROTATED
name|DMPAPER_PENV_5_ROTATED
operator|=
literal|113
argument_list|,
DECL|enumerator|DMPAPER_PENV_6_ROTATED
name|DMPAPER_PENV_6_ROTATED
operator|=
literal|114
argument_list|,
DECL|enumerator|DMPAPER_PENV_7_ROTATED
name|DMPAPER_PENV_7_ROTATED
operator|=
literal|115
argument_list|,
DECL|enumerator|DMPAPER_PENV_8_ROTATED
name|DMPAPER_PENV_8_ROTATED
operator|=
literal|116
argument_list|,
DECL|enumerator|DMPAPER_PENV_9_ROTATED
name|DMPAPER_PENV_9_ROTATED
operator|=
literal|117
argument_list|,
DECL|enumerator|DMPAPER_PENV_10_ROTATED
name|DMPAPER_PENV_10_ROTATED
operator|=
literal|118
argument_list|,
DECL|enumerator|DMPAPER_LAST
name|DMPAPER_LAST
operator|=
name|DMPAPER_PENV_10_ROTATED
argument_list|,
DECL|enumerator|DMPAPER_USER
name|DMPAPER_USER
operator|=
literal|256
argument_list|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Conversion table for historic page size values that we don't support.
end_comment
begin_comment
comment|// These are deprecated in PPD and strongly discouraged from being used,
end_comment
begin_comment
comment|// so convert them to usable page sizes to support older print devices.
end_comment
begin_comment
comment|// The paper source orientation will be handled in the QPrintMedia class,
end_comment
begin_comment
comment|// we're only concerned about the standard size in QPageSize.
end_comment
begin_comment
comment|// _ROTATED = 90 degrees or QPageLayout::Landscape
end_comment
begin_comment
comment|// _TRANSVERSE = 180 degrees or QPageLayout::ReversePortrait
end_comment
begin_decl_stmt
DECL|variable|qt_windowsConversion
specifier|static
specifier|const
name|int
name|qt_windowsConversion
index|[]
index|[
literal|2
index|]
init|=
block|{
block|{
name|DMPAPER_11X17
block|,
name|DMPAPER_TABLOID
block|}
block|,
comment|// = DMPAPER_LEDGER rotated
block|{
name|DMPAPER_A3_EXTRA_TRANSVERSE
block|,
name|DMPAPER_A3_EXTRA
block|}
block|,
block|{
name|DMPAPER_A3_ROTATED
block|,
name|DMPAPER_A3
block|}
block|,
block|{
name|DMPAPER_A3_TRANSVERSE
block|,
name|DMPAPER_A3
block|}
block|,
block|{
name|DMPAPER_A4_ROTATED
block|,
name|DMPAPER_A4
block|}
block|,
block|{
name|DMPAPER_A4_TRANSVERSE
block|,
name|DMPAPER_A4
block|}
block|,
block|{
name|DMPAPER_A5_ROTATED
block|,
name|DMPAPER_A5
block|}
block|,
block|{
name|DMPAPER_A5_TRANSVERSE
block|,
name|DMPAPER_A5
block|}
block|,
block|{
name|DMPAPER_A6_ROTATED
block|,
name|DMPAPER_A6
block|}
block|,
block|{
name|DMPAPER_B4_JIS_ROTATED
block|,
name|DMPAPER_B4
block|}
block|,
block|{
name|DMPAPER_B5_JIS_ROTATED
block|,
name|DMPAPER_B5
block|}
block|,
block|{
name|DMPAPER_B5_TRANSVERSE
block|,
name|DMPAPER_B5
block|}
block|,
block|{
name|DMPAPER_B6_JIS_ROTATED
block|,
name|DMPAPER_B6_JIS
block|}
block|,
block|{
name|DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED
block|,
name|DMPAPER_DBL_JAPANESE_POSTCARD
block|}
block|,
block|{
name|DMPAPER_JAPANESE_POSTCARD_ROTATED
block|,
name|DMPAPER_JAPANESE_POSTCARD
block|}
block|,
block|{
name|DMPAPER_JENV_CHOU3_ROTATED
block|,
name|DMPAPER_JENV_CHOU3
block|}
block|,
block|{
name|DMPAPER_JENV_CHOU4_ROTATED
block|,
name|DMPAPER_JENV_CHOU4
block|}
block|,
block|{
name|DMPAPER_JENV_KAKU2_ROTATED
block|,
name|DMPAPER_JENV_KAKU2
block|}
block|,
block|{
name|DMPAPER_JENV_KAKU3_ROTATED
block|,
name|DMPAPER_JENV_KAKU3
block|}
block|,
block|{
name|DMPAPER_JENV_YOU4_ROTATED
block|,
name|DMPAPER_JENV_YOU4
block|}
block|,
block|{
name|DMPAPER_LETTER_EXTRA_TRANSVERSE
block|,
name|DMPAPER_LETTER_EXTRA
block|}
block|,
block|{
name|DMPAPER_LETTER_ROTATED
block|,
name|DMPAPER_LETTER
block|}
block|,
block|{
name|DMPAPER_LETTER_TRANSVERSE
block|,
name|DMPAPER_LETTER
block|}
block|,
block|{
name|DMPAPER_P16K_ROTATED
block|,
name|DMPAPER_P16K
block|}
block|,
block|{
name|DMPAPER_P32K_ROTATED
block|,
name|DMPAPER_P32K
block|}
block|,
block|{
name|DMPAPER_P32KBIG_ROTATED
block|,
name|DMPAPER_P32KBIG
block|}
block|,
block|{
name|DMPAPER_PENV_1_ROTATED
block|,
name|DMPAPER_PENV_1
block|}
block|,
block|{
name|DMPAPER_PENV_2_ROTATED
block|,
name|DMPAPER_PENV_2
block|}
block|,
block|{
name|DMPAPER_PENV_3_ROTATED
block|,
name|DMPAPER_PENV_3
block|}
block|,
block|{
name|DMPAPER_PENV_4_ROTATED
block|,
name|DMPAPER_PENV_4
block|}
block|,
block|{
name|DMPAPER_PENV_5_ROTATED
block|,
name|DMPAPER_PENV_5
block|}
block|,
block|{
name|DMPAPER_PENV_6_ROTATED
block|,
name|DMPAPER_PENV_6
block|}
block|,
block|{
name|DMPAPER_PENV_7_ROTATED
block|,
name|DMPAPER_PENV_7
block|}
block|,
block|{
name|DMPAPER_PENV_8_ROTATED
block|,
name|DMPAPER_PENV_8
block|}
block|,
block|{
name|DMPAPER_PENV_9_ROTATED
block|,
name|DMPAPER_PENV_9
block|}
block|,
block|{
name|DMPAPER_PENV_10_ROTATED
block|,
name|DMPAPER_PENV_10
block|}
comment|// Is = DMPAPER_LAST, use as loop terminator
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|windowsConversionCount
specifier|static
specifier|const
name|int
name|windowsConversionCount
init|=
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|qt_windowsConversion
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|qt_windowsConversion
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Standard sizes data
end_comment
begin_struct
DECL|struct|StandardPageSize
struct|struct
name|StandardPageSize
block|{
DECL|member|id
name|QPageSize
operator|::
name|PageSizeId
name|id
decl_stmt|;
DECL|member|windowsId
name|int
name|windowsId
decl_stmt|;
comment|// Windows DMPAPER value
DECL|member|definitionUnits
name|QPageSize
operator|::
name|Unit
name|definitionUnits
decl_stmt|;
comment|// Standard definition size, e.g. ISO uses mm, ANSI uses inches
DECL|member|widthPoints
name|int
name|widthPoints
decl_stmt|;
DECL|member|heightPoints
name|int
name|heightPoints
decl_stmt|;
DECL|member|widthMillimeters
name|qreal
name|widthMillimeters
decl_stmt|;
DECL|member|heightMillimeters
name|qreal
name|heightMillimeters
decl_stmt|;
DECL|member|widthInches
name|qreal
name|widthInches
decl_stmt|;
DECL|member|heightInches
name|qreal
name|heightInches
decl_stmt|;
DECL|member|mediaOption
specifier|const
name|char
modifier|*
name|mediaOption
decl_stmt|;
comment|// PPD standard mediaOption ID
block|}
struct|;
end_struct
begin_comment
comment|// Standard page sizes taken from the Postscript PPD Standard v4.3
end_comment
begin_comment
comment|// See http://partners.adobe.com/public/developer/en/ps/5003.PPD_Spec_v4.3.pdf
end_comment
begin_comment
comment|// Excludes all Transverse and Rotated sizes
end_comment
begin_comment
comment|// NB! This table needs to be in sync with QPageSize::PageSizeId
end_comment
begin_decl_stmt
DECL|variable|qt_pageSizes
specifier|static
specifier|const
name|StandardPageSize
name|qt_pageSizes
index|[]
init|=
block|{
comment|// Existing Qt sizes including ISO, US, ANSI and other standards
block|{
name|QPageSize
operator|::
name|A4
block|,
name|DMPAPER_A4
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|595
block|,
literal|842
block|,
literal|210
block|,
literal|297
block|,
literal|8.27
block|,
literal|11.69
block|,
literal|"A4"
block|}
block|,
block|{
name|QPageSize
operator|::
name|B5
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|499
block|,
literal|709
block|,
literal|176
block|,
literal|250
block|,
literal|6.9
block|,
literal|9.8
block|,
literal|"ISOB5"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Letter
block|,
name|DMPAPER_LETTER
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|612
block|,
literal|792
block|,
literal|215.9
block|,
literal|279.4
block|,
literal|8.5
block|,
literal|11
block|,
literal|"Letter"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Legal
block|,
name|DMPAPER_LEGAL
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|612
block|,
literal|1008
block|,
literal|215.9
block|,
literal|355.6
block|,
literal|8.5
block|,
literal|14
block|,
literal|"Legal"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Executive
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|540
block|,
literal|720
block|,
literal|190.5
block|,
literal|254
block|,
literal|7.5
block|,
literal|10
block|,
literal|"Executive.7.5x10in"
block|}
block|,
comment|// Qt size differs from Postscript / Windows
block|{
name|QPageSize
operator|::
name|A0
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|2384
block|,
literal|3370
block|,
literal|841
block|,
literal|1189
block|,
literal|33.11
block|,
literal|46.81
block|,
literal|"A0"
block|}
block|,
block|{
name|QPageSize
operator|::
name|A1
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|1684
block|,
literal|2384
block|,
literal|594
block|,
literal|841
block|,
literal|23.39
block|,
literal|33.11
block|,
literal|"A1"
block|}
block|,
block|{
name|QPageSize
operator|::
name|A2
block|,
name|DMPAPER_A2
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|1191
block|,
literal|1684
block|,
literal|420
block|,
literal|594
block|,
literal|16.54
block|,
literal|23.39
block|,
literal|"A2"
block|}
block|,
block|{
name|QPageSize
operator|::
name|A3
block|,
name|DMPAPER_A3
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|842
block|,
literal|1191
block|,
literal|297
block|,
literal|420
block|,
literal|11.69
block|,
literal|16.54
block|,
literal|"A3"
block|}
block|,
block|{
name|QPageSize
operator|::
name|A5
block|,
name|DMPAPER_A5
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|420
block|,
literal|595
block|,
literal|148
block|,
literal|210
block|,
literal|5.83
block|,
literal|8.27
block|,
literal|"A5"
block|}
block|,
block|{
name|QPageSize
operator|::
name|A6
block|,
name|DMPAPER_A6
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|297
block|,
literal|420
block|,
literal|105
block|,
literal|148
block|,
literal|4.13
block|,
literal|5.83
block|,
literal|"A6"
block|}
block|,
block|{
name|QPageSize
operator|::
name|A7
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|210
block|,
literal|297
block|,
literal|74
block|,
literal|105
block|,
literal|2.91
block|,
literal|4.13
block|,
literal|"A7"
block|}
block|,
block|{
name|QPageSize
operator|::
name|A8
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|148
block|,
literal|210
block|,
literal|52
block|,
literal|74
block|,
literal|2.05
block|,
literal|2.91
block|,
literal|"A8"
block|}
block|,
block|{
name|QPageSize
operator|::
name|A9
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|105
block|,
literal|148
block|,
literal|37
block|,
literal|52
block|,
literal|1.46
block|,
literal|2.05
block|,
literal|"A9"
block|}
block|,
block|{
name|QPageSize
operator|::
name|B0
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|2835
block|,
literal|4008
block|,
literal|1000
block|,
literal|1414
block|,
literal|39.37
block|,
literal|55.67
block|,
literal|"ISOB0"
block|}
block|,
block|{
name|QPageSize
operator|::
name|B1
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|2004
block|,
literal|2835
block|,
literal|707
block|,
literal|1000
block|,
literal|27.83
block|,
literal|39.37
block|,
literal|"ISOB1"
block|}
block|,
block|{
name|QPageSize
operator|::
name|B10
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|88
block|,
literal|125
block|,
literal|31
block|,
literal|44
block|,
literal|1.22
block|,
literal|1.73
block|,
literal|"ISOB10"
block|}
block|,
block|{
name|QPageSize
operator|::
name|B2
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|1417
block|,
literal|2004
block|,
literal|500
block|,
literal|707
block|,
literal|19.68
block|,
literal|27.83
block|,
literal|"ISOB2"
block|}
block|,
block|{
name|QPageSize
operator|::
name|B3
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|1001
block|,
literal|1417
block|,
literal|353
block|,
literal|500
block|,
literal|13.9
block|,
literal|19.68
block|,
literal|"ISOB3"
block|}
block|,
block|{
name|QPageSize
operator|::
name|B4
block|,
name|DMPAPER_ISO_B4
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|709
block|,
literal|1001
block|,
literal|250
block|,
literal|353
block|,
literal|9.84
block|,
literal|13.9
block|,
literal|"ISOB4"
block|}
block|,
block|{
name|QPageSize
operator|::
name|B6
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|354
block|,
literal|499
block|,
literal|125
block|,
literal|176
block|,
literal|4.92
block|,
literal|6.93
block|,
literal|"ISOB6"
block|}
block|,
block|{
name|QPageSize
operator|::
name|B7
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|249
block|,
literal|354
block|,
literal|88
block|,
literal|125
block|,
literal|3.46
block|,
literal|4.92
block|,
literal|"ISOB7"
block|}
block|,
block|{
name|QPageSize
operator|::
name|B8
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|176
block|,
literal|249
block|,
literal|62
block|,
literal|88
block|,
literal|2.44
block|,
literal|3.46
block|,
literal|"ISOB8"
block|}
block|,
block|{
name|QPageSize
operator|::
name|B9
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|125
block|,
literal|176
block|,
literal|44
block|,
literal|62
block|,
literal|1.73
block|,
literal|2.44
block|,
literal|"ISOB9"
block|}
block|,
block|{
name|QPageSize
operator|::
name|C5E
block|,
name|DMPAPER_ENV_C5
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|459
block|,
literal|649
block|,
literal|162
block|,
literal|229
block|,
literal|6.38
block|,
literal|9.02
block|,
literal|"EnvC5"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Comm10E
block|,
name|DMPAPER_ENV_10
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|297
block|,
literal|684
block|,
literal|104.8
block|,
literal|241.3
block|,
literal|4.12
block|,
literal|9.5
block|,
literal|"Env10"
block|}
block|,
block|{
name|QPageSize
operator|::
name|DLE
block|,
name|DMPAPER_ENV_DL
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|312
block|,
literal|624
block|,
literal|110
block|,
literal|220
block|,
literal|4.33
block|,
literal|8.66
block|,
literal|"EnvDL"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Folio
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|595
block|,
literal|935
block|,
literal|210
block|,
literal|330
block|,
literal|8.27
block|,
literal|13
block|,
literal|"Folio"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Ledger
block|,
name|DMPAPER_LEDGER
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|1224
block|,
literal|792
block|,
literal|431.8
block|,
literal|279.4
block|,
literal|17
block|,
literal|11
block|,
literal|"Ledger"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Tabloid
block|,
name|DMPAPER_TABLOID
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|792
block|,
literal|1224
block|,
literal|279.4
block|,
literal|431.8
block|,
literal|11
block|,
literal|17
block|,
literal|"Tabloid"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Custom
block|,
name|DMPAPER_USER
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1.
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|"Custom"
block|}
block|,
comment|// Special case to keep in sync with QPageSize::PageSizeId
comment|// ISO Standard Sizes
block|{
name|QPageSize
operator|::
name|A10
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|73
block|,
literal|105
block|,
literal|26
block|,
literal|37
block|,
literal|1.02
block|,
literal|1.46
block|,
literal|"A10"
block|}
block|,
block|{
name|QPageSize
operator|::
name|A3Extra
block|,
name|DMPAPER_A3_EXTRA
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|913
block|,
literal|1262
block|,
literal|322
block|,
literal|445
block|,
literal|12.67
block|,
literal|17.52
block|,
literal|"A3Extra"
block|}
block|,
block|{
name|QPageSize
operator|::
name|A4Extra
block|,
name|DMPAPER_A4_EXTRA
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|667
block|,
literal|914
block|,
literal|235.5
block|,
literal|322.3
block|,
literal|9.27
block|,
literal|12.69
block|,
literal|"A4Extra"
block|}
block|,
block|{
name|QPageSize
operator|::
name|A4Plus
block|,
name|DMPAPER_A4_PLUS
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|595
block|,
literal|936
block|,
literal|210
block|,
literal|330
block|,
literal|8.27
block|,
literal|13
block|,
literal|"A4Plus"
block|}
block|,
block|{
name|QPageSize
operator|::
name|A4Small
block|,
name|DMPAPER_A4SMALL
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|595
block|,
literal|842
block|,
literal|210
block|,
literal|297
block|,
literal|8.27
block|,
literal|11.69
block|,
literal|"A4Small"
block|}
block|,
block|{
name|QPageSize
operator|::
name|A5Extra
block|,
name|DMPAPER_A5_EXTRA
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|492
block|,
literal|668
block|,
literal|174
block|,
literal|235
block|,
literal|6.85
block|,
literal|9.25
block|,
literal|"A5Extra"
block|}
block|,
block|{
name|QPageSize
operator|::
name|B5Extra
block|,
name|DMPAPER_B5_EXTRA
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|570
block|,
literal|782
block|,
literal|201
block|,
literal|276
block|,
literal|7.9
block|,
literal|10.8
block|,
literal|"ISOB5Extra"
block|}
block|,
comment|// JIS Standard Sizes
block|{
name|QPageSize
operator|::
name|JisB0
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|2920
block|,
literal|4127
block|,
literal|1030
block|,
literal|1456
block|,
literal|40.55
block|,
literal|57.32
block|,
literal|"B0"
block|}
block|,
block|{
name|QPageSize
operator|::
name|JisB1
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|2064
block|,
literal|2920
block|,
literal|728
block|,
literal|1030
block|,
literal|28.66
block|,
literal|40.55
block|,
literal|"B1"
block|}
block|,
block|{
name|QPageSize
operator|::
name|JisB2
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|1460
block|,
literal|2064
block|,
literal|515
block|,
literal|728
block|,
literal|20.28
block|,
literal|28.66
block|,
literal|"B2"
block|}
block|,
block|{
name|QPageSize
operator|::
name|JisB3
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|1032
block|,
literal|1460
block|,
literal|364
block|,
literal|515
block|,
literal|14.33
block|,
literal|20.28
block|,
literal|"B3"
block|}
block|,
block|{
name|QPageSize
operator|::
name|JisB4
block|,
name|DMPAPER_B4
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|729
block|,
literal|1032
block|,
literal|257
block|,
literal|364
block|,
literal|10.12
block|,
literal|14.33
block|,
literal|"B4"
block|}
block|,
block|{
name|QPageSize
operator|::
name|JisB5
block|,
name|DMPAPER_B5
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|516
block|,
literal|729
block|,
literal|182
block|,
literal|257
block|,
literal|7.17
block|,
literal|10.12
block|,
literal|"B5"
block|}
block|,
block|{
name|QPageSize
operator|::
name|JisB6
block|,
name|DMPAPER_B6_JIS
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|363
block|,
literal|516
block|,
literal|128
block|,
literal|182
block|,
literal|5.04
block|,
literal|7.17
block|,
literal|"B6"
block|}
block|,
block|{
name|QPageSize
operator|::
name|JisB7
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|258
block|,
literal|363
block|,
literal|91
block|,
literal|128
block|,
literal|3.58
block|,
literal|5.04
block|,
literal|"B7"
block|}
block|,
block|{
name|QPageSize
operator|::
name|JisB8
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|181
block|,
literal|258
block|,
literal|64
block|,
literal|91
block|,
literal|2.52
block|,
literal|3.58
block|,
literal|"B8"
block|}
block|,
block|{
name|QPageSize
operator|::
name|JisB9
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|127
block|,
literal|181
block|,
literal|45
block|,
literal|64
block|,
literal|1.77
block|,
literal|2.52
block|,
literal|"B9"
block|}
block|,
block|{
name|QPageSize
operator|::
name|JisB10
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|91
block|,
literal|127
block|,
literal|32
block|,
literal|45
block|,
literal|1.26
block|,
literal|1.77
block|,
literal|"B10"
block|}
block|,
comment|// ANSI / US Standard sizes
block|{
name|QPageSize
operator|::
name|AnsiC
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|1224
block|,
literal|1584
block|,
literal|431.8
block|,
literal|558.8
block|,
literal|17
block|,
literal|22
block|,
literal|"AnsiC"
block|}
block|,
block|{
name|QPageSize
operator|::
name|AnsiD
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|1584
block|,
literal|2448
block|,
literal|558.8
block|,
literal|863.6
block|,
literal|22
block|,
literal|34
block|,
literal|"AnsiD"
block|}
block|,
block|{
name|QPageSize
operator|::
name|AnsiE
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|2448
block|,
literal|3168
block|,
literal|863.6
block|,
literal|1118
block|,
literal|34
block|,
literal|44
block|,
literal|"AnsiE"
block|}
block|,
block|{
name|QPageSize
operator|::
name|LegalExtra
block|,
name|DMPAPER_LEGAL_EXTRA
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|684
block|,
literal|1080
block|,
literal|241.3
block|,
literal|381
block|,
literal|9.5
block|,
literal|15
block|,
literal|"LegalExtra"
block|}
block|,
block|{
name|QPageSize
operator|::
name|LetterExtra
block|,
name|DMPAPER_LETTER_EXTRA
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|684
block|,
literal|864
block|,
literal|241.3
block|,
literal|304.8
block|,
literal|9.5
block|,
literal|12
block|,
literal|"LetterExtra"
block|}
block|,
block|{
name|QPageSize
operator|::
name|LetterPlus
block|,
name|DMPAPER_LETTER_PLUS
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|612
block|,
literal|914
block|,
literal|215.9
block|,
literal|322.3
block|,
literal|8.5
block|,
literal|12.69
block|,
literal|"LetterPlus"
block|}
block|,
block|{
name|QPageSize
operator|::
name|LetterSmall
block|,
name|DMPAPER_LETTERSMALL
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|612
block|,
literal|792
block|,
literal|215.9
block|,
literal|279.4
block|,
literal|8.5
block|,
literal|11
block|,
literal|"LetterSmall"
block|}
block|,
block|{
name|QPageSize
operator|::
name|TabloidExtra
block|,
name|DMPAPER_TABLOID_EXTRA
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|864
block|,
literal|1296
block|,
literal|304.8
block|,
literal|457.2
block|,
literal|12
block|,
literal|18
block|,
literal|"TabloidExtra"
block|}
block|,
comment|// Architectural sizes
block|{
name|QPageSize
operator|::
name|ArchA
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|648
block|,
literal|864
block|,
literal|228.6
block|,
literal|304.8
block|,
literal|9
block|,
literal|12
block|,
literal|"ARCHA"
block|}
block|,
block|{
name|QPageSize
operator|::
name|ArchB
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|864
block|,
literal|1296
block|,
literal|304.8
block|,
literal|457.2
block|,
literal|12
block|,
literal|18
block|,
literal|"ARCHB"
block|}
block|,
block|{
name|QPageSize
operator|::
name|ArchC
block|,
name|DMPAPER_CSHEET
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|1296
block|,
literal|1728
block|,
literal|457.2
block|,
literal|609.6
block|,
literal|18
block|,
literal|24
block|,
literal|"ARCHC"
block|}
block|,
block|{
name|QPageSize
operator|::
name|ArchD
block|,
name|DMPAPER_DSHEET
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|1728
block|,
literal|2592
block|,
literal|609.6
block|,
literal|914.4
block|,
literal|24
block|,
literal|36
block|,
literal|"ARCHD"
block|}
block|,
block|{
name|QPageSize
operator|::
name|ArchE
block|,
name|DMPAPER_ESHEET
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|2592
block|,
literal|3456
block|,
literal|914.4
block|,
literal|1219
block|,
literal|36
block|,
literal|48
block|,
literal|"ARCHE"
block|}
block|,
comment|// Inch-based Sizes
block|{
name|QPageSize
operator|::
name|Imperial7x9
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|504
block|,
literal|648
block|,
literal|177.8
block|,
literal|228.6
block|,
literal|7
block|,
literal|9
block|,
literal|"7x9"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Imperial8x10
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|576
block|,
literal|720
block|,
literal|203.2
block|,
literal|254
block|,
literal|8
block|,
literal|10
block|,
literal|"8x10"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Imperial9x11
block|,
name|DMPAPER_9X11
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|648
block|,
literal|792
block|,
literal|228.6
block|,
literal|279.4
block|,
literal|9
block|,
literal|11
block|,
literal|"9x11"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Imperial9x12
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|648
block|,
literal|864
block|,
literal|228.6
block|,
literal|304.8
block|,
literal|9
block|,
literal|12
block|,
literal|"9x12"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Imperial10x11
block|,
name|DMPAPER_10X11
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|720
block|,
literal|792
block|,
literal|254
block|,
literal|279.4
block|,
literal|10
block|,
literal|11
block|,
literal|"10x11"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Imperial10x13
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|720
block|,
literal|936
block|,
literal|254
block|,
literal|330.2
block|,
literal|10
block|,
literal|13
block|,
literal|"10x13"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Imperial10x14
block|,
name|DMPAPER_10X14
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|720
block|,
literal|1008
block|,
literal|254
block|,
literal|355.6
block|,
literal|10
block|,
literal|14
block|,
literal|"10x14"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Imperial12x11
block|,
name|DMPAPER_12X11
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|864
block|,
literal|792
block|,
literal|304.8
block|,
literal|279.4
block|,
literal|12
block|,
literal|11
block|,
literal|"12x11"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Imperial15x11
block|,
name|DMPAPER_15X11
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|1080
block|,
literal|792
block|,
literal|381
block|,
literal|279.4
block|,
literal|15
block|,
literal|11
block|,
literal|"15x11"
block|}
block|,
comment|// Other Page Sizes
block|{
name|QPageSize
operator|::
name|ExecutiveStandard
block|,
name|DMPAPER_EXECUTIVE
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|522
block|,
literal|756
block|,
literal|184.2
block|,
literal|266.7
block|,
literal|7.25
block|,
literal|10.5
block|,
literal|"Executive"
block|}
block|,
comment|// Qt size differs from Postscript / Windows
block|{
name|QPageSize
operator|::
name|Note
block|,
name|DMPAPER_NOTE
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|612
block|,
literal|792
block|,
literal|215.9
block|,
literal|279.4
block|,
literal|8.5
block|,
literal|11
block|,
literal|"Note"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Quarto
block|,
name|DMPAPER_QUARTO
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|610
block|,
literal|780
block|,
literal|215.9
block|,
literal|275.1
block|,
literal|8.5
block|,
literal|10.83
block|,
literal|"Quarto"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Statement
block|,
name|DMPAPER_STATEMENT
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|396
block|,
literal|612
block|,
literal|139.7
block|,
literal|215.9
block|,
literal|5.5
block|,
literal|8.5
block|,
literal|"Statement"
block|}
block|,
block|{
name|QPageSize
operator|::
name|SuperA
block|,
name|DMPAPER_A_PLUS
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|643
block|,
literal|1009
block|,
literal|227
block|,
literal|356
block|,
literal|8.94
block|,
literal|14
block|,
literal|"SuperA"
block|}
block|,
block|{
name|QPageSize
operator|::
name|SuperB
block|,
name|DMPAPER_B_PLUS
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|864
block|,
literal|1380
block|,
literal|305
block|,
literal|487
block|,
literal|12
block|,
literal|19.17
block|,
literal|"SuperB"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Postcard
block|,
name|DMPAPER_JAPANESE_POSTCARD
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|284
block|,
literal|419
block|,
literal|100
block|,
literal|148
block|,
literal|3.94
block|,
literal|5.83
block|,
literal|"Postcard"
block|}
block|,
block|{
name|QPageSize
operator|::
name|DoublePostcard
block|,
name|DMPAPER_DBL_JAPANESE_POSTCARD
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|567
block|,
literal|419
block|,
literal|200
block|,
literal|148
block|,
literal|7.87
block|,
literal|5.83
block|,
literal|"DoublePostcard"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Prc16K
block|,
name|DMPAPER_P16K
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|414
block|,
literal|610
block|,
literal|146
block|,
literal|215
block|,
literal|5.75
block|,
literal|8.5
block|,
literal|"PRC16K"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Prc32K
block|,
name|DMPAPER_P32K
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|275
block|,
literal|428
block|,
literal|97
block|,
literal|151
block|,
literal|3.82
block|,
literal|5.95
block|,
literal|"PRC32K"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Prc32KBig
block|,
name|DMPAPER_P32KBIG
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|275
block|,
literal|428
block|,
literal|97
block|,
literal|151
block|,
literal|3.82
block|,
literal|5.95
block|,
literal|"PRC32KBig"
block|}
block|,
comment|// Fan Fold Sizes
block|{
name|QPageSize
operator|::
name|FanFoldUS
block|,
name|DMPAPER_FANFOLD_US
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|1071
block|,
literal|792
block|,
literal|377.8
block|,
literal|279.4
block|,
literal|14.875
block|,
literal|11
block|,
literal|"FanFoldUS"
block|}
block|,
block|{
name|QPageSize
operator|::
name|FanFoldGerman
block|,
name|DMPAPER_FANFOLD_STD_GERMAN
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|612
block|,
literal|864
block|,
literal|215.9
block|,
literal|304.8
block|,
literal|8.5
block|,
literal|12
block|,
literal|"FanFoldGerman"
block|}
block|,
block|{
name|QPageSize
operator|::
name|FanFoldGermanLegal
block|,
name|DMPAPER_FANFOLD_LGL_GERMAN
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|612
block|,
literal|936
block|,
literal|215.9
block|,
literal|330
block|,
literal|8.5
block|,
literal|13
block|,
literal|"FanFoldGermanLegal"
block|}
block|,
comment|// ISO Envelopes
block|{
name|QPageSize
operator|::
name|EnvelopeB4
block|,
name|DMPAPER_ENV_B4
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|708
block|,
literal|1001
block|,
literal|250
block|,
literal|353
block|,
literal|9.84
block|,
literal|13.9
block|,
literal|"EnvISOB4"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopeB5
block|,
name|DMPAPER_ENV_B5
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|499
block|,
literal|709
block|,
literal|176
block|,
literal|250
block|,
literal|6.9
block|,
literal|9.8
block|,
literal|"EnvISOB5"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopeB6
block|,
name|DMPAPER_ENV_B6
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|499
block|,
literal|354
block|,
literal|176
block|,
literal|125
block|,
literal|6.9
block|,
literal|4.9
block|,
literal|"EnvISOB6"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopeC0
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|2599
block|,
literal|3676
block|,
literal|917
block|,
literal|1297
block|,
literal|36.1
block|,
literal|51.06
block|,
literal|"EnvC0"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopeC1
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|1837
block|,
literal|2599
block|,
literal|648
block|,
literal|917
block|,
literal|25.51
block|,
literal|36.1
block|,
literal|"EnvC1"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopeC2
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|1298
block|,
literal|1837
block|,
literal|458
block|,
literal|648
block|,
literal|18.03
block|,
literal|25.51
block|,
literal|"EnvC2"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopeC3
block|,
name|DMPAPER_ENV_C3
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|918
block|,
literal|1296
block|,
literal|324
block|,
literal|458
block|,
literal|12.75
block|,
literal|18.03
block|,
literal|"EnvC3"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopeC4
block|,
name|DMPAPER_ENV_C4
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|649
block|,
literal|918
block|,
literal|229
block|,
literal|324
block|,
literal|9.02
block|,
literal|12.75
block|,
literal|"EnvC4"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopeC6
block|,
name|DMPAPER_ENV_C6
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|323
block|,
literal|459
block|,
literal|114
block|,
literal|162
block|,
literal|4.49
block|,
literal|6.38
block|,
literal|"EnvC6"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopeC65
block|,
name|DMPAPER_ENV_C65
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|324
block|,
literal|648
block|,
literal|114
block|,
literal|229
block|,
literal|4.5
block|,
literal|9
block|,
literal|"EnvC65"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopeC7
block|,
name|DMPAPER_NONE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|230
block|,
literal|323
block|,
literal|81
block|,
literal|114
block|,
literal|3.19
block|,
literal|4.49
block|,
literal|"EnvC7"
block|}
block|,
comment|// US Envelopes
block|{
name|QPageSize
operator|::
name|Envelope9
block|,
name|DMPAPER_ENV_9
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|279
block|,
literal|639
block|,
literal|98.4
block|,
literal|225.4
block|,
literal|3.875
block|,
literal|8.875
block|,
literal|"Env9"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Envelope11
block|,
name|DMPAPER_ENV_11
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|324
block|,
literal|747
block|,
literal|114.3
block|,
literal|263.5
block|,
literal|4.5
block|,
literal|10.375
block|,
literal|"Env11"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Envelope12
block|,
name|DMPAPER_ENV_12
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|342
block|,
literal|792
block|,
literal|120.7
block|,
literal|279.4
block|,
literal|4.75
block|,
literal|11
block|,
literal|"Env12"
block|}
block|,
block|{
name|QPageSize
operator|::
name|Envelope14
block|,
name|DMPAPER_ENV_14
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|360
block|,
literal|828
block|,
literal|127
block|,
literal|292.1
block|,
literal|5
block|,
literal|11.5
block|,
literal|"Env14"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopeMonarch
block|,
name|DMPAPER_ENV_MONARCH
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|279
block|,
literal|540
block|,
literal|98.43
block|,
literal|190.5
block|,
literal|3.875
block|,
literal|7.5
block|,
literal|"EnvMonarch"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopePersonal
block|,
name|DMPAPER_ENV_PERSONAL
block|,
name|QPageSize
operator|::
name|Inch
block|,
literal|261
block|,
literal|468
block|,
literal|92.08
block|,
literal|165.1
block|,
literal|3.625
block|,
literal|6.5
block|,
literal|"EnvPersonal"
block|}
block|,
comment|// Other Envelopes
block|{
name|QPageSize
operator|::
name|EnvelopeChou3
block|,
name|DMPAPER_JENV_CHOU3
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|340
block|,
literal|666
block|,
literal|120
block|,
literal|235
block|,
literal|4.72
block|,
literal|9.25
block|,
literal|"EnvChou3"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopeChou4
block|,
name|DMPAPER_JENV_CHOU4
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|255
block|,
literal|581
block|,
literal|90
block|,
literal|205
block|,
literal|3.54
block|,
literal|8
block|,
literal|"EnvChou4"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopeInvite
block|,
name|DMPAPER_ENV_INVITE
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|624
block|,
literal|624
block|,
literal|220
block|,
literal|220
block|,
literal|8.66
block|,
literal|8.66
block|,
literal|"EnvInvite"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopeItalian
block|,
name|DMPAPER_ENV_ITALY
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|312
block|,
literal|652
block|,
literal|110
block|,
literal|230
block|,
literal|4.33
block|,
literal|9
block|,
literal|"EnvItalian"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopeKaku2
block|,
name|DMPAPER_JENV_KAKU2
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|680
block|,
literal|941
block|,
literal|240
block|,
literal|332
block|,
literal|9.45
block|,
literal|13
block|,
literal|"EnvKaku2"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopeKaku3
block|,
name|DMPAPER_JENV_KAKU3
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|612
block|,
literal|785
block|,
literal|216
block|,
literal|277
block|,
literal|8.5
block|,
literal|10.9
block|,
literal|"EnvKaku3"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopePrc1
block|,
name|DMPAPER_PENV_1
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|289
block|,
literal|468
block|,
literal|102
block|,
literal|165
block|,
literal|4
block|,
literal|6.5
block|,
literal|"EnvPRC1"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopePrc2
block|,
name|DMPAPER_PENV_2
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|289
block|,
literal|499
block|,
literal|102
block|,
literal|176
block|,
literal|4
block|,
literal|6.9
block|,
literal|"EnvPRC2"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopePrc3
block|,
name|DMPAPER_PENV_3
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|354
block|,
literal|499
block|,
literal|125
block|,
literal|176
block|,
literal|4.9
block|,
literal|6.9
block|,
literal|"EnvPRC3"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopePrc4
block|,
name|DMPAPER_PENV_4
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|312
block|,
literal|590
block|,
literal|110
block|,
literal|208
block|,
literal|4.33
block|,
literal|8.2
block|,
literal|"EnvPRC4"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopePrc5
block|,
name|DMPAPER_PENV_5
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|312
block|,
literal|624
block|,
literal|110
block|,
literal|220
block|,
literal|4.33
block|,
literal|8.66
block|,
literal|"EnvPRC5"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopePrc6
block|,
name|DMPAPER_PENV_6
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|340
block|,
literal|652
block|,
literal|120
block|,
literal|230
block|,
literal|4.7
block|,
literal|9
block|,
literal|"EnvPRC6"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopePrc7
block|,
name|DMPAPER_PENV_7
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|454
block|,
literal|652
block|,
literal|160
block|,
literal|230
block|,
literal|6.3
block|,
literal|9
block|,
literal|"EnvPRC7"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopePrc8
block|,
name|DMPAPER_PENV_8
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|340
block|,
literal|876
block|,
literal|120
block|,
literal|309
block|,
literal|4.7
block|,
literal|12.2
block|,
literal|"EnvPRC8"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopePrc9
block|,
name|DMPAPER_PENV_9
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|649
block|,
literal|918
block|,
literal|229
block|,
literal|324
block|,
literal|9
block|,
literal|12.75
block|,
literal|"EnvPRC9"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopePrc10
block|,
name|DMPAPER_PENV_10
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|918
block|,
literal|1298
block|,
literal|324
block|,
literal|458
block|,
literal|12.75
block|,
literal|18
block|,
literal|"EnvPRC10"
block|}
block|,
block|{
name|QPageSize
operator|::
name|EnvelopeYou4
block|,
name|DMPAPER_JENV_YOU4
block|,
name|QPageSize
operator|::
name|Millimeter
block|,
literal|298
block|,
literal|666
block|,
literal|105
block|,
literal|235
block|,
literal|4.13
block|,
literal|9.25
block|,
literal|"EnvYou4"
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pageSizesCount
specifier|static
specifier|const
name|int
name|pageSizesCount
init|=
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|qt_pageSizes
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|qt_pageSizes
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
name|pageSizesCount
operator|==
name|QPageSize
operator|::
name|LastPageSize
operator|+
literal|1
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// Return key name for PageSize
end_comment
begin_function
DECL|function|qt_keyForPageSizeId
specifier|static
name|QString
name|qt_keyForPageSizeId
parameter_list|(
name|QPageSize
operator|::
name|PageSizeId
name|id
parameter_list|)
block|{
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
name|qt_pageSizes
index|[
name|id
index|]
operator|.
name|mediaOption
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Return id name for PPD Key
end_comment
begin_function
DECL|function|qt_idForPpdKey
specifier|static
name|QPageSize
operator|::
name|PageSizeId
name|qt_idForPpdKey
parameter_list|(
specifier|const
name|QString
modifier|&
name|ppdKey
parameter_list|,
name|QSize
modifier|*
name|match
init|=
literal|0
parameter_list|)
block|{
if|if
condition|(
name|ppdKey
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QPageSize
operator|::
name|Custom
return|;
name|QString
name|key
init|=
name|ppdKey
decl_stmt|;
comment|// Remove any Rotated or Tranverse modifiers
if|if
condition|(
name|key
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"Rotated"
argument_list|)
argument_list|)
condition|)
name|key
operator|.
name|chop
argument_list|(
literal|7
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|key
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|".Transverse"
argument_list|)
argument_list|)
condition|)
name|key
operator|.
name|chop
argument_list|(
literal|11
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|int
argument_list|(
name|QPageSize
operator|::
name|LastPageSize
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|QLatin1String
argument_list|(
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|mediaOption
argument_list|)
operator|==
name|key
condition|)
block|{
if|if
condition|(
name|match
condition|)
operator|*
name|match
operator|=
name|QSize
argument_list|(
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|widthPoints
argument_list|,
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|heightPoints
argument_list|)
expr_stmt|;
return|return
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|id
return|;
block|}
block|}
return|return
name|QPageSize
operator|::
name|Custom
return|;
block|}
end_function
begin_comment
comment|// Return id name for Windows ID
end_comment
begin_function
DECL|function|qt_idForWindowsID
specifier|static
name|QPageSize
operator|::
name|PageSizeId
name|qt_idForWindowsID
parameter_list|(
name|int
name|windowsId
parameter_list|,
name|QSize
modifier|*
name|match
init|=
literal|0
parameter_list|)
block|{
comment|// If outside known values then is Custom
if|if
condition|(
name|windowsId
operator|<=
name|DMPAPER_NONE
operator|||
name|windowsId
operator|>
name|DMPAPER_LAST
condition|)
return|return
name|QPageSize
operator|::
name|Custom
return|;
comment|// Check if one of the unsupported values, convert to valid value if is
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowsConversionCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|qt_windowsConversion
index|[
name|i
index|]
index|[
literal|0
index|]
operator|==
name|windowsId
condition|)
block|{
name|windowsId
operator|=
name|qt_windowsConversion
index|[
name|i
index|]
index|[
literal|1
index|]
expr_stmt|;
break|break;
block|}
block|}
comment|// Look for the value in our supported size table
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|int
argument_list|(
name|QPageSize
operator|::
name|LastPageSize
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|windowsId
operator|==
name|windowsId
condition|)
block|{
if|if
condition|(
name|match
condition|)
operator|*
name|match
operator|=
name|QSize
argument_list|(
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|widthPoints
argument_list|,
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|heightPoints
argument_list|)
expr_stmt|;
return|return
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|id
return|;
block|}
block|}
comment|// Otherwise is Custom
return|return
name|QPageSize
operator|::
name|Custom
return|;
block|}
end_function
begin_comment
comment|// Return key name for custom size
end_comment
begin_function
DECL|function|qt_keyForCustomSize
specifier|static
name|QString
name|qt_keyForCustomSize
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|,
name|QPageSize
operator|::
name|Unit
name|units
parameter_list|)
block|{
comment|// PPD custom format
name|QString
name|key
init|=
name|QStringLiteral
argument_list|(
literal|"Custom.%1x%2%3"
argument_list|)
decl_stmt|;
name|QString
name|abbrev
decl_stmt|;
switch|switch
condition|(
name|units
condition|)
block|{
case|case
name|QPageSize
operator|::
name|Millimeter
case|:
name|abbrev
operator|=
name|QStringLiteral
argument_list|(
literal|"mm"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPageSize
operator|::
name|Point
case|:
break|break;
case|case
name|QPageSize
operator|::
name|Inch
case|:
name|abbrev
operator|=
name|QStringLiteral
argument_list|(
literal|"in"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPageSize
operator|::
name|Pica
case|:
name|abbrev
operator|=
name|QStringLiteral
argument_list|(
literal|"pc"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPageSize
operator|::
name|Didot
case|:
name|abbrev
operator|=
name|QStringLiteral
argument_list|(
literal|"DD"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPageSize
operator|::
name|Cicero
case|:
name|abbrev
operator|=
name|QStringLiteral
argument_list|(
literal|"CC"
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// Assumes size is already max 2 decimal places
return|return
name|key
operator|.
name|arg
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|size
operator|.
name|height
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|abbrev
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Return localized name for custom size
end_comment
begin_function
DECL|function|qt_nameForCustomSize
specifier|static
name|QString
name|qt_nameForCustomSize
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|,
name|QPageSize
operator|::
name|Unit
name|units
parameter_list|)
block|{
name|QString
name|name
decl_stmt|;
switch|switch
condition|(
name|units
condition|)
block|{
case|case
name|QPageSize
operator|::
name|Millimeter
case|:
comment|//: Custom size name in millimeters
name|name
operator|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Custom (%1mm x %2mm)"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPageSize
operator|::
name|Point
case|:
comment|//: Custom size name in points
name|name
operator|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Custom (%1pt x %2pt)"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPageSize
operator|::
name|Inch
case|:
comment|//: Custom size name in inches
name|name
operator|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Custom (%1in x %2in)"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPageSize
operator|::
name|Pica
case|:
comment|//: Custom size name in picas
name|name
operator|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Custom (%1pc x %2pc)"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPageSize
operator|::
name|Didot
case|:
comment|//: Custom size name in didots
name|name
operator|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Custom (%1DD x %2DD)"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPageSize
operator|::
name|Cicero
case|:
comment|//: Custom size name in ciceros
name|name
operator|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Custom (%1CC x %2CC)"
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// Assumes size is already max 2 decimal places
return|return
name|name
operator|.
name|arg
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|size
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Multiplier for converting units to points.
end_comment
begin_function
DECL|function|qt_pointMultiplier
specifier|static
name|qreal
name|qt_pointMultiplier
parameter_list|(
name|QPageSize
operator|::
name|Unit
name|unit
parameter_list|)
block|{
switch|switch
condition|(
name|unit
condition|)
block|{
case|case
name|QPageSize
operator|::
name|Millimeter
case|:
return|return
literal|2.83464566929
return|;
case|case
name|QPageSize
operator|::
name|Point
case|:
return|return
literal|1.0
return|;
case|case
name|QPageSize
operator|::
name|Inch
case|:
return|return
literal|72.0
return|;
case|case
name|QPageSize
operator|::
name|Pica
case|:
return|return
literal|12
return|;
case|case
name|QPageSize
operator|::
name|Didot
case|:
return|return
literal|1.065826771
return|;
case|case
name|QPageSize
operator|::
name|Cicero
case|:
return|return
literal|12.789921252
return|;
block|}
return|return
literal|1.0
return|;
block|}
end_function
begin_comment
comment|// Multiplier for converting pixels to points.
end_comment
begin_function
DECL|function|qt_pixelMultiplier
name|Q_GUI_EXPORT
name|qreal
name|qt_pixelMultiplier
parameter_list|(
name|int
name|resolution
parameter_list|)
block|{
return|return
name|resolution
operator|<=
literal|0
condition|?
literal|1.0
else|:
literal|72.0
operator|/
name|resolution
return|;
block|}
end_function
begin_function
DECL|function|qt_definitionSize
specifier|static
name|QSizeF
name|qt_definitionSize
parameter_list|(
name|QPageSize
operator|::
name|PageSizeId
name|pageSizeId
parameter_list|)
block|{
name|QPageSize
operator|::
name|Unit
name|units
init|=
name|qt_pageSizes
index|[
name|pageSizeId
index|]
operator|.
name|definitionUnits
decl_stmt|;
if|if
condition|(
name|units
operator|==
name|QPageSize
operator|::
name|Millimeter
condition|)
return|return
name|QSizeF
argument_list|(
name|qt_pageSizes
index|[
name|pageSizeId
index|]
operator|.
name|widthMillimeters
argument_list|,
name|qt_pageSizes
index|[
name|pageSizeId
index|]
operator|.
name|heightMillimeters
argument_list|)
return|;
name|Q_ASSERT
argument_list|(
name|units
operator|==
name|QPageSize
operator|::
name|Inch
argument_list|)
expr_stmt|;
comment|// We currently only support definitions in mm or inches
return|return
name|QSizeF
argument_list|(
name|qt_pageSizes
index|[
name|pageSizeId
index|]
operator|.
name|widthInches
argument_list|,
name|qt_pageSizes
index|[
name|pageSizeId
index|]
operator|.
name|heightInches
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_convertUnits
specifier|static
name|QSizeF
name|qt_convertUnits
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|,
name|QPageSize
operator|::
name|Unit
name|fromUnits
parameter_list|,
name|QPageSize
operator|::
name|Unit
name|toUnits
parameter_list|)
block|{
if|if
condition|(
operator|!
name|size
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QSizeF
argument_list|()
return|;
comment|// If the units are the same or the size is 0, then don't need to convert
if|if
condition|(
name|fromUnits
operator|==
name|toUnits
operator|||
operator|(
name|qFuzzyIsNull
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|)
operator|&&
name|qFuzzyIsNull
argument_list|(
name|size
operator|.
name|height
argument_list|()
argument_list|)
operator|)
condition|)
return|return
name|size
return|;
name|QSizeF
name|newSize
init|=
name|size
decl_stmt|;
comment|// First convert to points
if|if
condition|(
name|fromUnits
operator|!=
name|QPageSize
operator|::
name|Point
condition|)
block|{
specifier|const
name|qreal
name|multiplier
init|=
name|qt_pointMultiplier
argument_list|(
name|fromUnits
argument_list|)
decl_stmt|;
name|newSize
operator|=
name|newSize
operator|*
name|multiplier
expr_stmt|;
block|}
comment|// Then convert from points to required units
specifier|const
name|qreal
name|multiplier
init|=
name|qt_pointMultiplier
argument_list|(
name|toUnits
argument_list|)
decl_stmt|;
comment|// Try force to 2 decimal places for consistency
specifier|const
name|int
name|width
init|=
name|qRound
argument_list|(
name|newSize
operator|.
name|width
argument_list|()
operator|*
literal|100
operator|/
name|multiplier
argument_list|)
decl_stmt|;
specifier|const
name|int
name|height
init|=
name|qRound
argument_list|(
name|newSize
operator|.
name|height
argument_list|()
operator|*
literal|100
operator|/
name|multiplier
argument_list|)
decl_stmt|;
return|return
name|QSizeF
argument_list|(
name|width
operator|/
literal|100.0
argument_list|,
name|height
operator|/
literal|100.0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_convertUnitsToPoints
specifier|static
name|QSize
name|qt_convertUnitsToPoints
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|,
name|QPageSize
operator|::
name|Unit
name|units
parameter_list|)
block|{
if|if
condition|(
operator|!
name|size
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QSize
argument_list|()
return|;
return|return
name|QSizeF
argument_list|(
name|size
operator|*
name|qt_pointMultiplier
argument_list|(
name|units
argument_list|)
argument_list|)
operator|.
name|toSize
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|qt_convertPointsToPixels
specifier|static
name|QSize
name|qt_convertPointsToPixels
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|int
name|resolution
parameter_list|)
block|{
if|if
condition|(
operator|!
name|size
operator|.
name|isValid
argument_list|()
operator|||
name|resolution
operator|<=
literal|0
condition|)
return|return
name|QSize
argument_list|()
return|;
specifier|const
name|qreal
name|multiplier
init|=
name|qt_pixelMultiplier
argument_list|(
name|resolution
argument_list|)
decl_stmt|;
return|return
name|QSize
argument_list|(
name|qRound
argument_list|(
name|size
operator|.
name|width
argument_list|()
operator|/
name|multiplier
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|size
operator|.
name|height
argument_list|()
operator|/
name|multiplier
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_convertPointsToUnits
specifier|static
name|QSizeF
name|qt_convertPointsToUnits
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QPageSize
operator|::
name|Unit
name|units
parameter_list|)
block|{
if|if
condition|(
operator|!
name|size
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QSizeF
argument_list|()
return|;
specifier|const
name|qreal
name|multiplier
init|=
name|qt_pointMultiplier
argument_list|(
name|units
argument_list|)
decl_stmt|;
comment|// Try force to 2 decimal places for consistency
specifier|const
name|int
name|width
init|=
name|qRound
argument_list|(
name|size
operator|.
name|width
argument_list|()
operator|*
literal|100
operator|/
name|multiplier
argument_list|)
decl_stmt|;
specifier|const
name|int
name|height
init|=
name|qRound
argument_list|(
name|size
operator|.
name|height
argument_list|()
operator|*
literal|100
operator|/
name|multiplier
argument_list|)
decl_stmt|;
return|return
name|QSizeF
argument_list|(
name|width
operator|/
literal|100.0
argument_list|,
name|height
operator|/
literal|100.0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_unitSize
specifier|static
name|QSizeF
name|qt_unitSize
parameter_list|(
name|QPageSize
operator|::
name|PageSizeId
name|pageSizeId
parameter_list|,
name|QPageSize
operator|::
name|Unit
name|units
parameter_list|)
block|{
switch|switch
condition|(
name|units
condition|)
block|{
case|case
name|QPageSize
operator|::
name|Millimeter
case|:
return|return
name|QSizeF
argument_list|(
name|qt_pageSizes
index|[
name|pageSizeId
index|]
operator|.
name|widthMillimeters
argument_list|,
name|qt_pageSizes
index|[
name|pageSizeId
index|]
operator|.
name|heightMillimeters
argument_list|)
return|;
case|case
name|QPageSize
operator|::
name|Point
case|:
return|return
name|QSizeF
argument_list|(
name|qt_pageSizes
index|[
name|pageSizeId
index|]
operator|.
name|widthPoints
argument_list|,
name|qt_pageSizes
index|[
name|pageSizeId
index|]
operator|.
name|heightPoints
argument_list|)
return|;
case|case
name|QPageSize
operator|::
name|Inch
case|:
return|return
name|QSizeF
argument_list|(
name|qt_pageSizes
index|[
name|pageSizeId
index|]
operator|.
name|widthInches
argument_list|,
name|qt_pageSizes
index|[
name|pageSizeId
index|]
operator|.
name|heightInches
argument_list|)
return|;
case|case
name|QPageSize
operator|::
name|Pica
case|:
case|case
name|QPageSize
operator|::
name|Didot
case|:
case|case
name|QPageSize
operator|::
name|Cicero
case|:
return|return
name|qt_convertPointsToUnits
argument_list|(
name|QSize
argument_list|(
name|qt_pageSizes
index|[
name|pageSizeId
index|]
operator|.
name|widthPoints
argument_list|,
name|qt_pageSizes
index|[
name|pageSizeId
index|]
operator|.
name|heightPoints
argument_list|)
argument_list|,
name|units
argument_list|)
return|;
block|}
return|return
name|QSizeF
argument_list|()
return|;
block|}
end_function
begin_comment
comment|// Find matching standard page size for point size
end_comment
begin_function
DECL|function|qt_idForPointSize
specifier|static
name|QPageSize
operator|::
name|PageSizeId
name|qt_idForPointSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QPageSize
operator|::
name|SizeMatchPolicy
name|matchPolicy
parameter_list|,
name|QSize
modifier|*
name|match
parameter_list|)
block|{
if|if
condition|(
operator|!
name|size
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QPageSize
operator|::
name|Custom
return|;
comment|// Try exact match in portrait layout
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|int
argument_list|(
name|QPageSize
operator|::
name|LastPageSize
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|size
operator|.
name|width
argument_list|()
operator|==
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|widthPoints
operator|&&
name|size
operator|.
name|height
argument_list|()
operator|==
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|heightPoints
condition|)
block|{
if|if
condition|(
name|match
condition|)
operator|*
name|match
operator|=
name|QSize
argument_list|(
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|widthPoints
argument_list|,
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|heightPoints
argument_list|)
expr_stmt|;
return|return
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|id
return|;
block|}
block|}
comment|// If no exact match only try fuzzy if asked
if|if
condition|(
name|matchPolicy
operator|!=
name|QPageSize
operator|::
name|ExactMatch
condition|)
block|{
comment|// Set up the fuzzy tolerance
comment|// TODO Use ISO standard tolerance based on page size?
specifier|const
name|int
name|tolerance
init|=
literal|3
decl_stmt|;
comment|// = approx 1mm
specifier|const
name|int
name|minWidth
init|=
name|size
operator|.
name|width
argument_list|()
operator|-
name|tolerance
decl_stmt|;
specifier|const
name|int
name|maxWidth
init|=
name|size
operator|.
name|width
argument_list|()
operator|+
name|tolerance
decl_stmt|;
specifier|const
name|int
name|minHeight
init|=
name|size
operator|.
name|height
argument_list|()
operator|-
name|tolerance
decl_stmt|;
specifier|const
name|int
name|maxHeight
init|=
name|size
operator|.
name|height
argument_list|()
operator|+
name|tolerance
decl_stmt|;
comment|// First try fuzzy match in portrait layout
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|QPageSize
operator|::
name|LastPageSize
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|width
init|=
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|widthPoints
decl_stmt|;
specifier|const
name|int
name|height
init|=
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|heightPoints
decl_stmt|;
if|if
condition|(
name|width
operator|>=
name|minWidth
operator|&&
name|width
operator|<=
name|maxWidth
operator|&&
name|height
operator|>=
name|minHeight
operator|&&
name|height
operator|<=
name|maxHeight
condition|)
block|{
if|if
condition|(
name|match
condition|)
operator|*
name|match
operator|=
name|QSize
argument_list|(
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|widthPoints
argument_list|,
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|heightPoints
argument_list|)
expr_stmt|;
return|return
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|id
return|;
block|}
block|}
comment|// If FuzzyOrientationMatch then try rotated sizes
if|if
condition|(
name|matchPolicy
operator|==
name|QPageSize
operator|::
name|FuzzyOrientationMatch
condition|)
block|{
comment|// First try exact match in landscape layout
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|QPageSize
operator|::
name|LastPageSize
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|size
operator|.
name|width
argument_list|()
operator|==
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|heightPoints
operator|&&
name|size
operator|.
name|height
argument_list|()
operator|==
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|widthPoints
condition|)
block|{
if|if
condition|(
name|match
condition|)
operator|*
name|match
operator|=
name|QSize
argument_list|(
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|widthPoints
argument_list|,
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|heightPoints
argument_list|)
expr_stmt|;
return|return
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|id
return|;
block|}
block|}
comment|// Then try fuzzy match in landscape layout
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|QPageSize
operator|::
name|LastPageSize
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|width
init|=
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|heightPoints
decl_stmt|;
specifier|const
name|int
name|height
init|=
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|widthPoints
decl_stmt|;
if|if
condition|(
name|width
operator|>=
name|minWidth
operator|&&
name|width
operator|<=
name|maxWidth
operator|&&
name|height
operator|>=
name|minHeight
operator|&&
name|height
operator|<=
name|maxHeight
condition|)
block|{
if|if
condition|(
name|match
condition|)
operator|*
name|match
operator|=
name|QSize
argument_list|(
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|widthPoints
argument_list|,
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|heightPoints
argument_list|)
expr_stmt|;
return|return
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|id
return|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|match
condition|)
operator|*
name|match
operator|=
name|size
expr_stmt|;
comment|// Otherwise no match so Custom
return|return
name|QPageSize
operator|::
name|Custom
return|;
block|}
end_function
begin_comment
comment|// Find matching standard page size for point size
end_comment
begin_function
DECL|function|qt_idForSize
specifier|static
name|QPageSize
operator|::
name|PageSizeId
name|qt_idForSize
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|,
name|QPageSize
operator|::
name|Unit
name|units
parameter_list|,
name|QPageSize
operator|::
name|SizeMatchPolicy
name|matchPolicy
parameter_list|,
name|QSize
modifier|*
name|match
parameter_list|)
block|{
if|if
condition|(
operator|!
name|size
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QPageSize
operator|::
name|Custom
return|;
comment|// Try exact match if units are the same
if|if
condition|(
name|units
operator|==
name|QPageSize
operator|::
name|Millimeter
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|QPageSize
operator|::
name|LastPageSize
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|size
operator|.
name|width
argument_list|()
operator|==
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|widthMillimeters
operator|&&
name|size
operator|.
name|height
argument_list|()
operator|==
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|heightMillimeters
condition|)
block|{
if|if
condition|(
name|match
condition|)
operator|*
name|match
operator|=
name|QSize
argument_list|(
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|widthPoints
argument_list|,
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|heightPoints
argument_list|)
expr_stmt|;
return|return
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|id
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|units
operator|==
name|QPageSize
operator|::
name|Inch
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|QPageSize
operator|::
name|LastPageSize
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|size
operator|.
name|width
argument_list|()
operator|==
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|widthInches
operator|&&
name|size
operator|.
name|height
argument_list|()
operator|==
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|heightInches
condition|)
block|{
if|if
condition|(
name|match
condition|)
operator|*
name|match
operator|=
name|QSize
argument_list|(
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|widthPoints
argument_list|,
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|heightPoints
argument_list|)
expr_stmt|;
return|return
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|id
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|units
operator|==
name|QPageSize
operator|::
name|Point
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|QPageSize
operator|::
name|LastPageSize
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|size
operator|.
name|width
argument_list|()
operator|==
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|widthPoints
operator|&&
name|size
operator|.
name|height
argument_list|()
operator|==
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|heightPoints
condition|)
block|{
if|if
condition|(
name|match
condition|)
operator|*
name|match
operator|=
name|QSize
argument_list|(
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|widthPoints
argument_list|,
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|heightPoints
argument_list|)
expr_stmt|;
return|return
name|qt_pageSizes
index|[
name|i
index|]
operator|.
name|id
return|;
block|}
block|}
block|}
comment|// If no exact match then convert to points and try match those
name|QSize
name|points
init|=
name|qt_convertUnitsToPoints
argument_list|(
name|size
argument_list|,
name|units
argument_list|)
decl_stmt|;
return|return
name|qt_idForPointSize
argument_list|(
name|points
argument_list|,
name|matchPolicy
argument_list|,
name|match
argument_list|)
return|;
block|}
end_function
begin_class
DECL|class|QPageSizePrivate
class|class
name|QPageSizePrivate
super|:
specifier|public
name|QSharedData
block|{
public|public:
name|QPageSizePrivate
parameter_list|()
constructor_decl|;
specifier|explicit
name|QPageSizePrivate
parameter_list|(
name|QPageSize
operator|::
name|PageSizeId
name|pageSizeId
parameter_list|)
constructor_decl|;
name|QPageSizePrivate
parameter_list|(
specifier|const
name|QSize
modifier|&
name|pointSize
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|QPageSize
operator|::
name|SizeMatchPolicy
name|matchPolicy
parameter_list|)
constructor_decl|;
name|QPageSizePrivate
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|,
name|QPageSize
operator|::
name|Unit
name|units
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|QPageSize
operator|::
name|SizeMatchPolicy
name|matchPolicy
parameter_list|)
constructor_decl|;
name|QPageSizePrivate
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
constructor_decl|;
name|QPageSizePrivate
parameter_list|(
name|int
name|windowsId
parameter_list|,
specifier|const
name|QSize
modifier|&
name|pointSize
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
constructor_decl|;
name|~
name|QPageSizePrivate
parameter_list|()
destructor_decl|;
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|QPageSizePrivate
modifier|&
name|other
parameter_list|)
specifier|const
function_decl|;
name|bool
name|isEquivalentTo
parameter_list|(
specifier|const
name|QPageSizePrivate
modifier|&
name|other
parameter_list|)
specifier|const
function_decl|;
name|bool
name|isValid
parameter_list|()
specifier|const
function_decl|;
name|QSizeF
name|size
parameter_list|(
name|QPageSize
operator|::
name|Unit
name|units
parameter_list|)
specifier|const
function_decl|;
name|QSize
name|sizePixels
parameter_list|(
name|int
name|resolution
parameter_list|)
specifier|const
function_decl|;
private|private:
friend|friend
class_decl|class
name|QPageSize
class_decl|;
name|void
name|init
parameter_list|(
name|QPageSize
operator|::
name|PageSizeId
name|id
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
function_decl|;
name|void
name|init
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
function_decl|;
name|void
name|init
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|,
name|QPageSize
operator|::
name|Unit
name|units
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
function_decl|;
DECL|member|m_key
name|QString
name|m_key
decl_stmt|;
DECL|member|m_id
name|QPageSize
operator|::
name|PageSizeId
name|m_id
decl_stmt|;
DECL|member|m_pointSize
name|QSize
name|m_pointSize
decl_stmt|;
DECL|member|m_name
name|QString
name|m_name
decl_stmt|;
DECL|member|m_windowsId
name|int
name|m_windowsId
decl_stmt|;
DECL|member|m_size
name|QSizeF
name|m_size
decl_stmt|;
DECL|member|m_units
name|QPageSize
operator|::
name|Unit
name|m_units
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QPageSizePrivate
name|QPageSizePrivate
operator|::
name|QPageSizePrivate
parameter_list|()
member_init_list|:
name|m_id
argument_list|(
name|QPageSize
operator|::
name|Custom
argument_list|)
member_init_list|,
name|m_windowsId
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_units
argument_list|(
name|QPageSize
operator|::
name|Point
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|QPageSizePrivate
name|QPageSizePrivate
operator|::
name|QPageSizePrivate
parameter_list|(
name|QPageSize
operator|::
name|PageSizeId
name|pageSizeId
parameter_list|)
member_init_list|:
name|m_id
argument_list|(
name|QPageSize
operator|::
name|Custom
argument_list|)
member_init_list|,
name|m_windowsId
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_units
argument_list|(
name|QPageSize
operator|::
name|Point
argument_list|)
block|{
if|if
condition|(
name|pageSizeId
operator|>=
name|QPageSize
operator|::
name|PageSizeId
argument_list|(
literal|0
argument_list|)
operator|&&
name|pageSizeId
operator|<=
name|QPageSize
operator|::
name|LastPageSize
condition|)
name|init
argument_list|(
name|pageSizeId
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QPageSizePrivate
name|QPageSizePrivate
operator|::
name|QPageSizePrivate
parameter_list|(
specifier|const
name|QSize
modifier|&
name|pointSize
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|QPageSize
operator|::
name|SizeMatchPolicy
name|matchPolicy
parameter_list|)
member_init_list|:
name|m_id
argument_list|(
name|QPageSize
operator|::
name|Custom
argument_list|)
member_init_list|,
name|m_windowsId
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_units
argument_list|(
name|QPageSize
operator|::
name|Point
argument_list|)
block|{
if|if
condition|(
name|pointSize
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QPageSize
operator|::
name|PageSizeId
name|id
init|=
name|qt_idForPointSize
argument_list|(
name|pointSize
argument_list|,
name|matchPolicy
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|id
operator|==
name|QPageSize
operator|::
name|Custom
condition|?
name|init
argument_list|(
name|pointSize
argument_list|,
name|name
argument_list|)
else|:
name|init
argument_list|(
name|id
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_constructor
DECL|function|QPageSizePrivate
name|QPageSizePrivate
operator|::
name|QPageSizePrivate
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|,
name|QPageSize
operator|::
name|Unit
name|units
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|QPageSize
operator|::
name|SizeMatchPolicy
name|matchPolicy
parameter_list|)
member_init_list|:
name|m_id
argument_list|(
name|QPageSize
operator|::
name|Custom
argument_list|)
member_init_list|,
name|m_windowsId
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_units
argument_list|(
name|QPageSize
operator|::
name|Point
argument_list|)
block|{
if|if
condition|(
name|size
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QPageSize
operator|::
name|PageSizeId
name|id
init|=
name|qt_idForSize
argument_list|(
name|size
argument_list|,
name|units
argument_list|,
name|matchPolicy
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|id
operator|==
name|QPageSize
operator|::
name|Custom
condition|?
name|init
argument_list|(
name|size
argument_list|,
name|units
argument_list|,
name|name
argument_list|)
else|:
name|init
argument_list|(
name|id
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_constructor
DECL|function|QPageSizePrivate
name|QPageSizePrivate
operator|::
name|QPageSizePrivate
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
specifier|const
name|QSize
modifier|&
name|pointSize
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
member_init_list|:
name|m_id
argument_list|(
name|QPageSize
operator|::
name|Custom
argument_list|)
member_init_list|,
name|m_windowsId
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_units
argument_list|(
name|QPageSize
operator|::
name|Point
argument_list|)
block|{
if|if
condition|(
operator|!
name|key
operator|.
name|isEmpty
argument_list|()
operator|&&
name|pointSize
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QPageSize
operator|::
name|PageSizeId
name|id
init|=
name|qt_idForPpdKey
argument_list|(
name|key
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// If not a known PPD key, check if size is a standard PPD size
if|if
condition|(
name|id
operator|==
name|QPageSize
operator|::
name|Custom
condition|)
name|id
operator|=
name|qt_idForPointSize
argument_list|(
name|pointSize
argument_list|,
name|QPageSize
operator|::
name|FuzzyMatch
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|id
operator|==
name|QPageSize
operator|::
name|Custom
condition|?
name|init
argument_list|(
name|pointSize
argument_list|,
name|name
argument_list|)
else|:
name|init
argument_list|(
name|id
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|m_key
operator|=
name|key
expr_stmt|;
block|}
block|}
end_constructor
begin_constructor
DECL|function|QPageSizePrivate
name|QPageSizePrivate
operator|::
name|QPageSizePrivate
parameter_list|(
name|int
name|windowsId
parameter_list|,
specifier|const
name|QSize
modifier|&
name|pointSize
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
member_init_list|:
name|m_id
argument_list|(
name|QPageSize
operator|::
name|Custom
argument_list|)
member_init_list|,
name|m_windowsId
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_units
argument_list|(
name|QPageSize
operator|::
name|Point
argument_list|)
block|{
if|if
condition|(
name|windowsId
operator|>
literal|0
operator|&&
name|pointSize
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QPageSize
operator|::
name|PageSizeId
name|id
init|=
name|qt_idForWindowsID
argument_list|(
name|windowsId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// If not a known Windows ID, check if size is a standard PPD size
if|if
condition|(
name|id
operator|==
name|QPageSize
operator|::
name|Custom
condition|)
name|id
operator|=
name|qt_idForPointSize
argument_list|(
name|pointSize
argument_list|,
name|QPageSize
operator|::
name|FuzzyMatch
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|id
operator|==
name|QPageSize
operator|::
name|Custom
condition|?
name|init
argument_list|(
name|pointSize
argument_list|,
name|name
argument_list|)
else|:
name|init
argument_list|(
name|id
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|m_windowsId
operator|=
name|windowsId
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QPageSizePrivate
name|QPageSizePrivate
operator|::
name|~
name|QPageSizePrivate
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|// Init a standard PageSizeId
end_comment
begin_function
DECL|function|init
name|void
name|QPageSizePrivate
operator|::
name|init
parameter_list|(
name|QPageSize
operator|::
name|PageSizeId
name|id
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|m_id
operator|=
name|id
expr_stmt|;
name|m_size
operator|=
name|qt_definitionSize
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|m_units
operator|=
name|qt_pageSizes
index|[
name|id
index|]
operator|.
name|definitionUnits
expr_stmt|;
name|m_key
operator|=
name|qt_keyForPageSizeId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|m_name
operator|=
name|name
operator|.
name|isEmpty
argument_list|()
condition|?
name|QPageSize
operator|::
name|name
argument_list|(
name|id
argument_list|)
else|:
name|name
expr_stmt|;
name|m_windowsId
operator|=
name|qt_pageSizes
index|[
name|id
index|]
operator|.
name|windowsId
expr_stmt|;
name|m_pointSize
operator|=
name|QSize
argument_list|(
name|qt_pageSizes
index|[
name|id
index|]
operator|.
name|widthPoints
argument_list|,
name|qt_pageSizes
index|[
name|id
index|]
operator|.
name|heightPoints
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Init a point size
end_comment
begin_function
DECL|function|init
name|void
name|QPageSizePrivate
operator|::
name|init
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|m_id
operator|=
name|QPageSize
operator|::
name|Custom
expr_stmt|;
name|m_size
operator|=
name|size
expr_stmt|;
name|m_units
operator|=
name|QPageSize
operator|::
name|Point
expr_stmt|;
name|m_key
operator|=
name|qt_keyForCustomSize
argument_list|(
name|m_size
argument_list|,
name|m_units
argument_list|)
expr_stmt|;
name|m_name
operator|=
name|name
operator|.
name|isEmpty
argument_list|()
condition|?
name|qt_nameForCustomSize
argument_list|(
name|m_size
argument_list|,
name|m_units
argument_list|)
else|:
name|name
expr_stmt|;
name|m_windowsId
operator|=
literal|0
expr_stmt|;
name|m_pointSize
operator|=
name|size
expr_stmt|;
block|}
end_function
begin_comment
comment|// Init a unit size
end_comment
begin_function
DECL|function|init
name|void
name|QPageSizePrivate
operator|::
name|init
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|,
name|QPageSize
operator|::
name|Unit
name|units
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|m_id
operator|=
name|QPageSize
operator|::
name|Custom
expr_stmt|;
name|m_size
operator|=
name|size
expr_stmt|;
name|m_units
operator|=
name|units
expr_stmt|;
name|m_key
operator|=
name|qt_keyForCustomSize
argument_list|(
name|m_size
argument_list|,
name|m_units
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
name|m_name
operator|=
name|qt_nameForCustomSize
argument_list|(
name|m_size
argument_list|,
name|m_units
argument_list|)
expr_stmt|;
else|else
name|m_name
operator|=
name|name
expr_stmt|;
name|m_windowsId
operator|=
literal|0
expr_stmt|;
name|m_pointSize
operator|=
name|qt_convertUnitsToPoints
argument_list|(
name|m_size
argument_list|,
name|m_units
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|operator ==
name|bool
name|QPageSizePrivate
operator|::
name|operator
name|==
parameter_list|(
specifier|const
name|QPageSizePrivate
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|m_size
operator|==
name|other
operator|.
name|m_size
operator|&&
name|m_units
operator|==
name|other
operator|.
name|m_units
operator|&&
name|m_key
operator|==
name|other
operator|.
name|m_key
operator|&&
name|m_name
operator|==
name|other
operator|.
name|m_name
return|;
block|}
end_function
begin_function
DECL|function|isEquivalentTo
name|bool
name|QPageSizePrivate
operator|::
name|isEquivalentTo
parameter_list|(
specifier|const
name|QPageSizePrivate
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|m_pointSize
operator|==
name|other
operator|.
name|m_pointSize
return|;
block|}
end_function
begin_function
DECL|function|isValid
name|bool
name|QPageSizePrivate
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
name|m_pointSize
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|m_key
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|m_name
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|size
name|QSizeF
name|QPageSizePrivate
operator|::
name|size
parameter_list|(
name|QPageSize
operator|::
name|Unit
name|units
parameter_list|)
specifier|const
block|{
comment|// If want units we've stored in, we already have them
if|if
condition|(
name|units
operator|==
name|m_units
condition|)
return|return
name|m_size
return|;
comment|// If want points we already have them
if|if
condition|(
name|units
operator|==
name|QPageSize
operator|::
name|Point
condition|)
return|return
name|QSizeF
argument_list|(
name|m_pointSize
operator|.
name|width
argument_list|()
argument_list|,
name|m_pointSize
operator|.
name|height
argument_list|()
argument_list|)
return|;
comment|// If a custom size do a conversion
if|if
condition|(
name|m_id
operator|==
name|QPageSize
operator|::
name|Custom
condition|)
return|return
name|qt_convertUnits
argument_list|(
name|m_size
argument_list|,
name|m_units
argument_list|,
name|units
argument_list|)
return|;
comment|// Otherwise use the standard sizes
return|return
name|qt_unitSize
argument_list|(
name|m_id
argument_list|,
name|units
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|sizePixels
name|QSize
name|QPageSizePrivate
operator|::
name|sizePixels
parameter_list|(
name|int
name|resolution
parameter_list|)
specifier|const
block|{
return|return
name|qt_convertPointsToPixels
argument_list|(
name|m_pointSize
argument_list|,
name|resolution
argument_list|)
return|;
empty_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QPageSize     \inmodule QtGui     \since 5.3     \brief The QPageSize class describes the size and name of a defined page size      This class implements support for the set of standard page sizes as defined     in the Adobe Postscript PPD Standard v4.3. It defines the standard set of     page sizes in points, millimeters and inches and ensures these sizes are     consistently used. Other size units can be used but will be calculated     results and so may not always be consistent. The defined point sizes are     always a integer, all other sizes can be fractions of a unit.      The defined size is always in width x height order with no implied page     orientation. Note that it is possible for page sizes to be defined where the     width is greater than the height, such as QPageSize::Ledger, so you cannot     rely on comparing the width and height values to determine page orientation.      For example, A4 is defined by the standard as 210mm x 297mm, 8.27in x 11.69in,     or 595pt x 842pt.      You can also define custom page sizes with custom names in any units you want     and this unit size will be preserved and used as the base for all other unit     size calculations.      When creating a QPageSize using a custom QSize you can choose if you want     QPageSize to try match the size to a standard page size. By default     QPaperSize uses a FuzzyMatch mode where it will match a given page size to     a standard page size if it falls within 3 postscript points of a defined     standard size. You can override this to request only an exact match but this     is not recommended as conversions between units can easily lose 3 points and     result in incorrect page sizes.      A QPageSize instance may also be obtained by querying the supported page sizes     for a print device. In this case the localized name returned is that defined     by the printer itself. Note that the print device may not support the current     default locale language.      The class also provides convenience methods for converting page size IDs to and from     various unit sizes.      \sa QPagedPaintDevice, QPdfWriter */
end_comment
begin_comment
comment|/*!     \enum QPageSize::PageSizeId      This enum type lists the available page sizes as defined in the Postscript     PPD standard. These values are duplicated in QPagedPaintDevice and QPrinter.      The defined sizes are:      \value A0 841 x 1189 mm     \value A1 594 x 841 mm     \value A2 420 x 594 mm     \value A3 297 x 420 mm     \value A4 210 x 297 mm, 8.26 x 11.69 inches     \value A5 148 x 210 mm     \value A6 105 x 148 mm     \value A7 74 x 105 mm     \value A8 52 x 74 mm     \value A9 37 x 52 mm     \value B0 1000 x 1414 mm     \value B1 707 x 1000 mm     \value B2 500 x 707 mm     \value B3 353 x 500 mm     \value B4 250 x 353 mm     \value B5 176 x 250 mm, 6.93 x 9.84 inches     \value B6 125 x 176 mm     \value B7 88 x 125 mm     \value B8 62 x 88 mm     \value B9 44 x 62 mm     \value B10 31 x 44 mm     \value C5E 163 x 229 mm     \value Comm10E 105 x 241 mm, U.S. Common 10 Envelope     \value DLE 110 x 220 mm     \value Executive 7.5 x 10 inches, 190.5 x 254 mm     \value Folio 210 x 330 mm     \value Ledger 431.8 x 279.4 mm     \value Legal 8.5 x 14 inches, 215.9 x 355.6 mm     \value Letter 8.5 x 11 inches, 215.9 x 279.4 mm     \value Tabloid 279.4 x 431.8 mm     \value Custom Unknown, or a user defined size.     \value A10     \value A3Extra     \value A4Extra     \value A4Plus     \value A4Small     \value A5Extra     \value B5Extra     \value JisB0     \value JisB1     \value JisB2     \value JisB3     \value JisB4     \value JisB5     \value JisB6,     \value JisB7     \value JisB8     \value JisB9     \value JisB10     \value AnsiA = Letter     \value AnsiB = Ledger     \value AnsiC     \value AnsiD     \value AnsiE     \value LegalExtra     \value LetterExtra     \value LetterPlus     \value LetterSmall     \value TabloidExtra     \value ArchA     \value ArchB     \value ArchC     \value ArchD     \value ArchE     \value Imperial7x9     \value Imperial8x10     \value Imperial9x11     \value Imperial9x12     \value Imperial10x11     \value Imperial10x13     \value Imperial10x14     \value Imperial12x11     \value Imperial15x11     \value ExecutiveStandard     \value Note     \value Quarto     \value Statement     \value SuperA     \value SuperB     \value Postcard     \value DoublePostcard     \value Prc16K     \value Prc32K     \value Prc32KBig     \value FanFoldUS     \value FanFoldGerman     \value FanFoldGermanLegal     \value EnvelopeB4     \value EnvelopeB5     \value EnvelopeB6     \value EnvelopeC0     \value EnvelopeC1     \value EnvelopeC2     \value EnvelopeC3     \value EnvelopeC4     \value EnvelopeC5 = C5E     \value EnvelopeC6     \value EnvelopeC65     \value EnvelopeC7     \value EnvelopeDL = DLE     \value Envelope9     \value Envelope10 = Comm10E     \value Envelope11     \value Envelope12     \value Envelope14     \value EnvelopeMonarch     \value EnvelopePersonal     \value EnvelopeChou3     \value EnvelopeChou4     \value EnvelopeInvite     \value EnvelopeItalian     \value EnvelopeKaku2     \value EnvelopeKaku3     \value EnvelopePrc1     \value EnvelopePrc2     \value EnvelopePrc3     \value EnvelopePrc4     \value EnvelopePrc5     \value EnvelopePrc6     \value EnvelopePrc7     \value EnvelopePrc8     \value EnvelopePrc9     \value EnvelopePrc10     \value EnvelopeYou4     \value LastPageSize = EnvelopeYou4     \omitvalue NPageSize     \omitvalue NPaperSize      Due to historic reasons QPageSize::Executive is not the same as the standard     Postscript and Windows Executive size, use QPageSize::ExecutiveStandard instead.      The Postscript standard size QPageSize::Folio is different to the Windows     DMPAPER_FOLIO size, use the Postscript standard size QPageSize::FanFoldGermanLegal     if needed. */
end_comment
begin_comment
comment|/*!     \enum QPageSize::Unit      This enum type is used to specify the measurement unit for page sizes.      \value Millimeter     \value Point  1/72th of an inch     \value Inch     \value Pica  1/72th of a foot, 1/6th of an inch, 12 Points     \value Didot  1/72th of a French inch, 0.375 mm     \value Cicero  1/6th of a French inch, 12 Didot, 4.5mm */
end_comment
begin_comment
comment|/*!     \enum QPageSize::SizeMatchPolicy      \value FuzzyMatch  Match to a standard page size if within the margin of tolerance.     \value FuzzyOrientationMatch  Match to a standard page size if within the margin of tolerance regardless of orientation.     \value ExactMatch  Only match to a standard page size if the sizes match exactly. */
end_comment
begin_comment
comment|/*!     Creates a null QPageSize. */
end_comment
begin_constructor
DECL|function|QPageSize
name|QPageSize
operator|::
name|QPageSize
parameter_list|()
member_init_list|:
name|d
argument_list|(
operator|new
name|QPageSizePrivate
argument_list|()
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Creates a QPageSize of the standard \a pageSize.      If \a pageSize is QPageSize::Custom then the resulting QPageSize will not     be valid. Use the custom size constructor instead. */
end_comment
begin_constructor
DECL|function|QPageSize
name|QPageSize
operator|::
name|QPageSize
parameter_list|(
name|PageSizeId
name|pageSize
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QPageSizePrivate
argument_list|(
name|pageSize
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Creates a QPageSize of the given \a pointSize in Points using the matching \a matchPolicy.      If the given \a pointSize matches a standard QPageSize::PageSizeId, then that page     size will be used.  Note that if the \a matchPolicy is FuzzyMatch this may result     in the \a pointSize being adjusted to the standard size.  To prevent this happening     use a \a matchPolicy of ExactMatch instead.      If the given \a pointSize is not a standard QPageSize::PageSizeId then a QPageSize::Custom     size will be created.      If \a name is null then the standard localized name will be used. If a custom page     size then a custom name in the format "Custom (width x height)" will be created.      The \a matchPolicy defaults to FuzzyMatch. */
end_comment
begin_constructor
DECL|function|QPageSize
name|QPageSize
operator|::
name|QPageSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|pointSize
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|SizeMatchPolicy
name|matchPolicy
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QPageSizePrivate
argument_list|(
name|pointSize
argument_list|,
name|name
argument_list|,
name|matchPolicy
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Creates a custom page of the given \a size in \a units.      If the given \a size matches a standard QPageSize::PageSizeId, then that page     size will be used. Note that if the \a matchPolicy is FuzzyMatch this may result     in the \a size being adjusted to the standard size. To prevent this happening     use a \a matchPolicy of ExactMatch instead.      If the given \a size is not a standard QPageSize::PageSizeId then a QPageSize::Custom     size will be created. The original unit size will be preserved and used as the     base for all other unit size calculations.      If \a name is null then a custom name will be created in the form     "Custom (width x height)" where the size is expressed in units provided. */
end_comment
begin_constructor
DECL|function|QPageSize
name|QPageSize
operator|::
name|QPageSize
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|,
name|Unit
name|units
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|SizeMatchPolicy
name|matchPolicy
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QPageSizePrivate
argument_list|(
name|size
argument_list|,
name|units
argument_list|,
name|name
argument_list|,
name|matchPolicy
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \internal      Create page with given key, size and name, for use by printer plugin. */
end_comment
begin_constructor
DECL|function|QPageSize
name|QPageSize
operator|::
name|QPageSize
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
specifier|const
name|QSize
modifier|&
name|pointSize
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QPageSizePrivate
argument_list|(
name|key
argument_list|,
name|pointSize
argument_list|,
name|name
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \internal      Create page with given windows ID, size and name, for use by printer plugin. */
end_comment
begin_constructor
DECL|function|QPageSize
name|QPageSize
operator|::
name|QPageSize
parameter_list|(
name|int
name|windowsId
parameter_list|,
specifier|const
name|QSize
modifier|&
name|pointSize
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QPageSizePrivate
argument_list|(
name|windowsId
argument_list|,
name|pointSize
argument_list|,
name|name
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \internal      Create page with given private backend */
end_comment
begin_constructor
DECL|function|QPageSize
name|QPageSize
operator|::
name|QPageSize
parameter_list|(
name|QPageSizePrivate
modifier|&
name|dd
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|&
name|dd
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Copy constructor, copies \a other to this. */
end_comment
begin_constructor
DECL|function|QPageSize
name|QPageSize
operator|::
name|QPageSize
parameter_list|(
specifier|const
name|QPageSize
modifier|&
name|other
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|other
operator|.
name|d
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the page. */
end_comment
begin_destructor
DECL|function|~QPageSize
name|QPageSize
operator|::
name|~
name|QPageSize
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Assignment operator, assigns \a other to this. */
end_comment
begin_function
DECL|function|operator =
name|QPageSize
modifier|&
name|QPageSize
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QPageSize
modifier|&
name|other
parameter_list|)
block|{
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QPageSize::swap(QPageSize&other)      Swaps this QPageSize with \a other. This function is very fast and     never fails. */
end_comment
begin_comment
comment|/*!     \fn QPageSize&QPageSize::operator=(QPageSize&&other)      Move-assigns \a other to this QPageSize instance, transferring the     ownership of the managed pointer to this instance. */
end_comment
begin_comment
comment|/*!     \relates QPageSize      Returns \c true if page size \a lhs is equal to page size \a rhs,     i.e. if the page sizes have the same attributes. Current     attributes are size and name. */
end_comment
begin_function
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|QPageSize
modifier|&
name|lhs
parameter_list|,
specifier|const
name|QPageSize
modifier|&
name|rhs
parameter_list|)
block|{
return|return
name|lhs
operator|.
name|d
operator|==
name|rhs
operator|.
name|d
operator|||
operator|*
name|lhs
operator|.
name|d
operator|==
operator|*
name|rhs
operator|.
name|d
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool operator!=(const QPageSize&lhs, const QPageSize&rhs)     \relates QPageSize      Returns \c true if page size \a lhs is unequal to page size \a     rhs, i.e. if the page size has different attributes. Current     attributes are size and name. */
end_comment
begin_comment
comment|/*!     Returns \c true if this page is equivalent to the \a other page, i.e. if the     page has the same size regardless of other attributes like name. */
end_comment
begin_function
DECL|function|isEquivalentTo
name|bool
name|QPageSize
operator|::
name|isEquivalentTo
parameter_list|(
specifier|const
name|QPageSize
modifier|&
name|other
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|d
operator|==
name|other
operator|.
name|d
condition|)
return|return
literal|true
return|;
return|return
name|d
operator|&&
name|other
operator|.
name|d
operator|&&
name|d
operator|->
name|isEquivalentTo
argument_list|(
operator|*
name|other
operator|.
name|d
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if this page size is valid.      The page size may be invalid if created with an invalid PageSizeId, or a     negative or invalid QSize or QSizeF, or the null constructor. */
end_comment
begin_function
DECL|function|isValid
name|bool
name|QPageSize
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|&&
name|d
operator|->
name|isValid
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the unique key of the page size.      By default this is the PPD standard mediaOption keyword for the page size,     or the PPD custom format key.  If the QPageSize instance was obtained from     a print device then this will be the key provided by the print device and     may differ from the standard key.      If the QPageSize is invalid then the key will be an empty string.      This key should never be shown to end users, it is an internal key only.     For a human-readable name use name().      \sa name() */
end_comment
begin_function
DECL|function|key
name|QString
name|QPageSize
operator|::
name|key
parameter_list|()
specifier|const
block|{
return|return
name|isValid
argument_list|()
condition|?
name|d
operator|->
name|m_key
else|:
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a localized human-readable name for the page size.      If the QPageSize instance was obtained from a print device then the name     used is that provided by the print device.  Note that a print device may     not support the current default locale language.      If the QPageSize is invalid then the name will be an empty string. */
end_comment
begin_function
DECL|function|name
name|QString
name|QPageSize
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
name|isValid
argument_list|()
condition|?
name|d
operator|->
name|m_name
else|:
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the standard QPageSize::PageSizeId of the page, or QPageSize::Custom.      If the QPageSize is invalid then the ID will be QPageSize::Custom. */
end_comment
begin_function
DECL|function|id
name|QPageSize
operator|::
name|PageSizeId
name|QPageSize
operator|::
name|id
parameter_list|()
specifier|const
block|{
return|return
name|isValid
argument_list|()
condition|?
name|d
operator|->
name|m_id
else|:
name|Custom
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the Windows DMPAPER enum value for the page size.      Not all valid PPD page sizes have a Windows equivalent, in which case 0     will be returned.      If the QPageSize is invalid then the Windows ID will be 0.      \sa id() */
end_comment
begin_function
DECL|function|windowsId
name|int
name|QPageSize
operator|::
name|windowsId
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|d
operator|->
name|m_windowsId
operator|>
literal|0
condition|?
name|d
operator|->
name|m_windowsId
else|:
name|windowsId
argument_list|(
name|d
operator|->
name|m_id
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the definition size of the page size.      For a standard page size this will be the size as defined in the relevant     standard, i.e. ISO A4 will be defined in millimeters while ANSI Letter will     be defined in inches.      For a custom page size this will be the original size used to create the     page size object.      If the QPageSize is invalid then the QSizeF will be invalid.      \sa definitionUnits() */
end_comment
begin_function
DECL|function|definitionSize
name|QSizeF
name|QPageSize
operator|::
name|definitionSize
parameter_list|()
specifier|const
block|{
return|return
name|isValid
argument_list|()
condition|?
name|d
operator|->
name|m_size
else|:
name|QSizeF
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the definition units of the page size.      For a standard page size this will be the units as defined in the relevant     standard, i.e. ISO A4 will be defined in millimeters while ANSI Letter will     be defined in inches.      For a custom page size this will be the original units used to create the     page size object.      If the QPageSize is invalid then the QPageSize::Unit will be invalid.      \sa definitionSize() */
end_comment
begin_function
DECL|function|definitionUnits
name|QPageSize
operator|::
name|Unit
name|QPageSize
operator|::
name|definitionUnits
parameter_list|()
specifier|const
block|{
return|return
name|isValid
argument_list|()
condition|?
name|d
operator|->
name|m_units
else|:
name|Unit
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the size of the page in the required \a units.      If the QPageSize is invalid then the QSizeF will be invalid. */
end_comment
begin_function
DECL|function|size
name|QSizeF
name|QPageSize
operator|::
name|size
parameter_list|(
name|Unit
name|units
parameter_list|)
specifier|const
block|{
return|return
name|isValid
argument_list|()
condition|?
name|d
operator|->
name|size
argument_list|(
name|units
argument_list|)
else|:
name|QSize
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the size of the page in Postscript Points (1/72 of an inch).      If the QPageSize is invalid then the QSize will be invalid. */
end_comment
begin_function
DECL|function|sizePoints
name|QSize
name|QPageSize
operator|::
name|sizePoints
parameter_list|()
specifier|const
block|{
return|return
name|isValid
argument_list|()
condition|?
name|d
operator|->
name|m_pointSize
else|:
name|QSize
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the size of the page in Device Pixels at the given \a resolution.      If the QPageSize is invalid then the QSize will be invalid. */
end_comment
begin_function
DECL|function|sizePixels
name|QSize
name|QPageSize
operator|::
name|sizePixels
parameter_list|(
name|int
name|resolution
parameter_list|)
specifier|const
block|{
return|return
name|isValid
argument_list|()
condition|?
name|d
operator|->
name|sizePixels
argument_list|(
name|resolution
argument_list|)
else|:
name|QSize
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the page rectangle in the required \a units.      If the QPageSize is invalid then the QRect will be invalid. */
end_comment
begin_function
DECL|function|rect
name|QRectF
name|QPageSize
operator|::
name|rect
parameter_list|(
name|Unit
name|units
parameter_list|)
specifier|const
block|{
return|return
name|isValid
argument_list|()
condition|?
name|QRectF
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|d
operator|->
name|size
argument_list|(
name|units
argument_list|)
argument_list|)
else|:
name|QRectF
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the page rectangle in Postscript Points (1/72 of an inch).      If the QPageSize is invalid then the QRect will be invalid. */
end_comment
begin_function
DECL|function|rectPoints
name|QRect
name|QPageSize
operator|::
name|rectPoints
parameter_list|()
specifier|const
block|{
return|return
name|isValid
argument_list|()
condition|?
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|d
operator|->
name|m_pointSize
argument_list|)
else|:
name|QRect
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the page rectangle in Device Pixels at the given \a resolution.      If the QPageSize is invalid then the QRect will be invalid. */
end_comment
begin_function
DECL|function|rectPixels
name|QRect
name|QPageSize
operator|::
name|rectPixels
parameter_list|(
name|int
name|resolution
parameter_list|)
specifier|const
block|{
return|return
name|isValid
argument_list|()
condition|?
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|d
operator|->
name|sizePixels
argument_list|(
name|resolution
argument_list|)
argument_list|)
else|:
name|QRect
argument_list|()
return|;
block|}
end_function
begin_comment
comment|// Statics
end_comment
begin_comment
comment|/*!     Returns the PPD mediaOption keyword of the standard \a pageSizeId.      If the QPageSize is invalid then the key will be empty. */
end_comment
begin_function
DECL|function|key
name|QString
name|QPageSize
operator|::
name|key
parameter_list|(
name|PageSizeId
name|pageSizeId
parameter_list|)
block|{
if|if
condition|(
name|pageSizeId
argument_list|<
name|PageSizeId
operator|(
literal|0
operator|)
operator|||
name|pageSizeId
argument_list|>
name|LastPageSize
condition|)
return|return
name|QString
argument_list|()
return|;
return|return
name|QString
operator|::
name|fromUtf8
argument_list|(
name|qt_pageSizes
index|[
name|pageSizeId
index|]
operator|.
name|mediaOption
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|msgImperialPageSizeInch
specifier|static
name|QString
name|msgImperialPageSizeInch
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
comment|//: Page size in 'Inch'.
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"%1 x %2 in"
argument_list|)
operator|.
name|arg
argument_list|(
name|width
argument_list|)
operator|.
name|arg
argument_list|(
name|height
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the localized name of the standard \a pageSizeId.      If the QPageSize is invalid then the name will be empty. */
end_comment
begin_function
DECL|function|name
name|QString
name|QPageSize
operator|::
name|name
parameter_list|(
name|PageSizeId
name|pageSizeId
parameter_list|)
block|{
if|if
condition|(
name|pageSizeId
argument_list|<
name|PageSizeId
operator|(
literal|0
operator|)
operator|||
name|pageSizeId
argument_list|>
name|LastPageSize
condition|)
return|return
name|QString
argument_list|()
return|;
switch|switch
condition|(
name|pageSizeId
condition|)
block|{
case|case
name|A0
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"A0"
argument_list|)
return|;
case|case
name|A1
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"A1"
argument_list|)
return|;
case|case
name|A2
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"A2"
argument_list|)
return|;
case|case
name|A3
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"A3"
argument_list|)
return|;
case|case
name|A4
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"A4"
argument_list|)
return|;
case|case
name|A5
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"A5"
argument_list|)
return|;
case|case
name|A6
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"A6"
argument_list|)
return|;
case|case
name|A7
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"A7"
argument_list|)
return|;
case|case
name|A8
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"A8"
argument_list|)
return|;
case|case
name|A9
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"A9"
argument_list|)
return|;
case|case
name|A10
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"A10"
argument_list|)
return|;
case|case
name|B0
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"B0"
argument_list|)
return|;
case|case
name|B1
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"B1"
argument_list|)
return|;
case|case
name|B2
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"B2"
argument_list|)
return|;
case|case
name|B3
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"B3"
argument_list|)
return|;
case|case
name|B4
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"B4"
argument_list|)
return|;
case|case
name|B5
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"B5"
argument_list|)
return|;
case|case
name|B6
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"B6"
argument_list|)
return|;
case|case
name|B7
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"B7"
argument_list|)
return|;
case|case
name|B8
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"B8"
argument_list|)
return|;
case|case
name|B9
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"B9"
argument_list|)
return|;
case|case
name|B10
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"B10"
argument_list|)
return|;
case|case
name|Executive
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Executive (7.5 x 10 in)"
argument_list|)
return|;
case|case
name|ExecutiveStandard
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Executive (7.25 x 10.5 in)"
argument_list|)
return|;
case|case
name|Folio
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Folio (8.27 x 13 in)"
argument_list|)
return|;
case|case
name|Legal
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Legal"
argument_list|)
return|;
case|case
name|Letter
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Letter / ANSI A"
argument_list|)
return|;
case|case
name|Tabloid
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Tabloid / ANSI B"
argument_list|)
return|;
case|case
name|Ledger
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Ledger / ANSI B"
argument_list|)
return|;
case|case
name|Custom
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Custom"
argument_list|)
return|;
case|case
name|A3Extra
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"A3 Extra"
argument_list|)
return|;
case|case
name|A4Extra
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"A4 Extra"
argument_list|)
return|;
case|case
name|A4Plus
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"A4 Plus"
argument_list|)
return|;
case|case
name|A4Small
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"A4 Small"
argument_list|)
return|;
case|case
name|A5Extra
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"A5 Extra"
argument_list|)
return|;
case|case
name|B5Extra
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"B5 Extra"
argument_list|)
return|;
case|case
name|JisB0
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"JIS B0"
argument_list|)
return|;
case|case
name|JisB1
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"JIS B1"
argument_list|)
return|;
case|case
name|JisB2
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"JIS B2"
argument_list|)
return|;
case|case
name|JisB3
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"JIS B3"
argument_list|)
return|;
case|case
name|JisB4
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"JIS B4"
argument_list|)
return|;
case|case
name|JisB5
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"JIS B5"
argument_list|)
return|;
case|case
name|JisB6
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"JIS B6"
argument_list|)
return|;
case|case
name|JisB7
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"JIS B7"
argument_list|)
return|;
case|case
name|JisB8
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"JIS B8"
argument_list|)
return|;
case|case
name|JisB9
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"JIS B9"
argument_list|)
return|;
case|case
name|JisB10
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"JIS B10"
argument_list|)
return|;
case|case
name|AnsiC
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"ANSI C"
argument_list|)
return|;
case|case
name|AnsiD
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"ANSI D"
argument_list|)
return|;
case|case
name|AnsiE
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"ANSI E"
argument_list|)
return|;
case|case
name|LegalExtra
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Legal Extra"
argument_list|)
return|;
case|case
name|LetterExtra
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Letter Extra"
argument_list|)
return|;
case|case
name|LetterPlus
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Letter Plus"
argument_list|)
return|;
case|case
name|LetterSmall
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Letter Small"
argument_list|)
return|;
case|case
name|TabloidExtra
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Tabloid Extra"
argument_list|)
return|;
case|case
name|ArchA
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Architect A"
argument_list|)
return|;
case|case
name|ArchB
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Architect B"
argument_list|)
return|;
case|case
name|ArchC
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Architect C"
argument_list|)
return|;
case|case
name|ArchD
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Architect D"
argument_list|)
return|;
case|case
name|ArchE
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Architect E"
argument_list|)
return|;
case|case
name|Imperial7x9
case|:
return|return
name|msgImperialPageSizeInch
argument_list|(
literal|7
argument_list|,
literal|9
argument_list|)
return|;
case|case
name|Imperial8x10
case|:
return|return
name|msgImperialPageSizeInch
argument_list|(
literal|8
argument_list|,
literal|10
argument_list|)
return|;
case|case
name|Imperial9x11
case|:
return|return
name|msgImperialPageSizeInch
argument_list|(
literal|9
argument_list|,
literal|11
argument_list|)
return|;
case|case
name|Imperial9x12
case|:
return|return
name|msgImperialPageSizeInch
argument_list|(
literal|9
argument_list|,
literal|12
argument_list|)
return|;
case|case
name|Imperial10x11
case|:
return|return
name|msgImperialPageSizeInch
argument_list|(
literal|10
argument_list|,
literal|11
argument_list|)
return|;
case|case
name|Imperial10x13
case|:
return|return
name|msgImperialPageSizeInch
argument_list|(
literal|10
argument_list|,
literal|13
argument_list|)
return|;
case|case
name|Imperial10x14
case|:
return|return
name|msgImperialPageSizeInch
argument_list|(
literal|10
argument_list|,
literal|14
argument_list|)
return|;
case|case
name|Imperial12x11
case|:
return|return
name|msgImperialPageSizeInch
argument_list|(
literal|12
argument_list|,
literal|11
argument_list|)
return|;
case|case
name|Imperial15x11
case|:
return|return
name|msgImperialPageSizeInch
argument_list|(
literal|15
argument_list|,
literal|11
argument_list|)
return|;
case|case
name|Note
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Note"
argument_list|)
return|;
case|case
name|Quarto
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Quarto"
argument_list|)
return|;
case|case
name|Statement
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Statement"
argument_list|)
return|;
case|case
name|SuperA
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Super A"
argument_list|)
return|;
case|case
name|SuperB
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Super B"
argument_list|)
return|;
case|case
name|Postcard
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Postcard"
argument_list|)
return|;
case|case
name|DoublePostcard
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Double Postcard"
argument_list|)
return|;
case|case
name|Prc16K
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"PRC 16K"
argument_list|)
return|;
case|case
name|Prc32K
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"PRC 32K"
argument_list|)
return|;
case|case
name|Prc32KBig
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"PRC 32K Big"
argument_list|)
return|;
case|case
name|FanFoldUS
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Fan-fold US (14.875 x 11 in)"
argument_list|)
return|;
case|case
name|FanFoldGerman
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Fan-fold German (8.5 x 12 in)"
argument_list|)
return|;
case|case
name|FanFoldGermanLegal
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Fan-fold German Legal (8.5 x 13 in)"
argument_list|)
return|;
case|case
name|EnvelopeB4
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope B4"
argument_list|)
return|;
case|case
name|EnvelopeB5
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope B5"
argument_list|)
return|;
case|case
name|EnvelopeB6
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope B6"
argument_list|)
return|;
case|case
name|EnvelopeC0
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope C0"
argument_list|)
return|;
case|case
name|EnvelopeC1
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope C1"
argument_list|)
return|;
case|case
name|EnvelopeC2
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope C2"
argument_list|)
return|;
case|case
name|EnvelopeC3
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope C3"
argument_list|)
return|;
case|case
name|EnvelopeC4
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope C4"
argument_list|)
return|;
case|case
name|EnvelopeC5
case|:
comment|// C5E
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope C5"
argument_list|)
return|;
case|case
name|EnvelopeC6
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope C6"
argument_list|)
return|;
case|case
name|EnvelopeC65
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope C65"
argument_list|)
return|;
case|case
name|EnvelopeC7
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope C7"
argument_list|)
return|;
case|case
name|EnvelopeDL
case|:
comment|// DLE:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope DL"
argument_list|)
return|;
case|case
name|Envelope9
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope US 9"
argument_list|)
return|;
case|case
name|Envelope10
case|:
comment|// Comm10E
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope US 10"
argument_list|)
return|;
case|case
name|Envelope11
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope US 11"
argument_list|)
return|;
case|case
name|Envelope12
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope US 12"
argument_list|)
return|;
case|case
name|Envelope14
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope US 14"
argument_list|)
return|;
case|case
name|EnvelopeMonarch
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope Monarch"
argument_list|)
return|;
case|case
name|EnvelopePersonal
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope Personal"
argument_list|)
return|;
case|case
name|EnvelopeChou3
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope Chou 3"
argument_list|)
return|;
case|case
name|EnvelopeChou4
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope Chou 4"
argument_list|)
return|;
case|case
name|EnvelopeInvite
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope Invite"
argument_list|)
return|;
case|case
name|EnvelopeItalian
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope Italian"
argument_list|)
return|;
case|case
name|EnvelopeKaku2
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope Kaku 2"
argument_list|)
return|;
case|case
name|EnvelopeKaku3
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope Kaku 3"
argument_list|)
return|;
case|case
name|EnvelopePrc1
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope PRC 1"
argument_list|)
return|;
case|case
name|EnvelopePrc2
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope PRC 2"
argument_list|)
return|;
case|case
name|EnvelopePrc3
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope PRC 3"
argument_list|)
return|;
case|case
name|EnvelopePrc4
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope PRC 4"
argument_list|)
return|;
case|case
name|EnvelopePrc5
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope PRC 5"
argument_list|)
return|;
case|case
name|EnvelopePrc6
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope PRC 6"
argument_list|)
return|;
case|case
name|EnvelopePrc7
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope PRC 7"
argument_list|)
return|;
case|case
name|EnvelopePrc8
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope PRC 8"
argument_list|)
return|;
case|case
name|EnvelopePrc9
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope PRC 9"
argument_list|)
return|;
case|case
name|EnvelopePrc10
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope PRC 10"
argument_list|)
return|;
case|case
name|EnvelopeYou4
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPageSize"
argument_list|,
literal|"Envelope You 4"
argument_list|)
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the standard QPageSize::PageSizeId of the given \a pointSize in     points using the given \a matchPolicy.      If using FuzzyMatch then the point size of the PageSizeId returned may not     exactly match the \a pointSize you passed in. You should call     QPageSize::sizePoints() using the returned PageSizeId to find out the actual     point size of the PageSizeId before using it in any calculations. */
end_comment
begin_function
DECL|function|id
name|QPageSize
operator|::
name|PageSizeId
name|QPageSize
operator|::
name|id
parameter_list|(
specifier|const
name|QSize
modifier|&
name|pointSize
parameter_list|,
name|SizeMatchPolicy
name|matchPolicy
parameter_list|)
block|{
return|return
name|qt_idForPointSize
argument_list|(
name|pointSize
argument_list|,
name|matchPolicy
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the standard QPageSize::PageSizeId of the given \a size in \a units     using the given \a matchPolicy.      If using FuzzyMatch then the unit size of the PageSizeId returned may not     exactly match the \a size you passed in. You should call     QPageSize::size() using the returned PageSizeId to find out the actual     unit size of the PageSizeId before using it in any calculations. */
end_comment
begin_function
DECL|function|id
name|QPageSize
operator|::
name|PageSizeId
name|QPageSize
operator|::
name|id
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|,
name|Unit
name|units
parameter_list|,
name|SizeMatchPolicy
name|matchPolicy
parameter_list|)
block|{
return|return
name|qt_idForSize
argument_list|(
name|size
argument_list|,
name|units
argument_list|,
name|matchPolicy
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the PageSizeId for the given Windows DMPAPER enum value \a windowsId.      If there is no matching PageSizeId then QPageSize::Custom is returned. */
end_comment
begin_function
DECL|function|id
name|QPageSize
operator|::
name|PageSizeId
name|QPageSize
operator|::
name|id
parameter_list|(
name|int
name|windowsId
parameter_list|)
block|{
return|return
name|qt_idForWindowsID
argument_list|(
name|windowsId
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the Windows DMPAPER enum value of the standard \a pageSizeId.      Not all valid PPD page sizes have a Windows equivalent, in which case 0     will be returned. */
end_comment
begin_function
DECL|function|windowsId
name|int
name|QPageSize
operator|::
name|windowsId
parameter_list|(
name|PageSizeId
name|pageSizeId
parameter_list|)
block|{
return|return
name|qt_pageSizes
index|[
name|pageSizeId
index|]
operator|.
name|windowsId
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the definition size of the standard \a pageSizeId.      To obtain the definition units, call QPageSize::definitionUnits(). */
end_comment
begin_function
DECL|function|definitionSize
name|QSizeF
name|QPageSize
operator|::
name|definitionSize
parameter_list|(
name|PageSizeId
name|pageSizeId
parameter_list|)
block|{
if|if
condition|(
name|pageSizeId
operator|==
name|Custom
condition|)
return|return
name|QSizeF
argument_list|()
return|;
return|return
name|qt_definitionSize
argument_list|(
name|pageSizeId
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the definition units of the standard \a pageSizeId.      To obtain the definition size, call QPageSize::definitionSize(). */
end_comment
begin_function
DECL|function|definitionUnits
name|QPageSize
operator|::
name|Unit
name|QPageSize
operator|::
name|definitionUnits
parameter_list|(
name|PageSizeId
name|pageSizeId
parameter_list|)
block|{
if|if
condition|(
name|pageSizeId
operator|==
name|Custom
condition|)
return|return
name|Unit
argument_list|(
operator|-
literal|1
argument_list|)
return|;
return|return
name|qt_pageSizes
index|[
name|pageSizeId
index|]
operator|.
name|definitionUnits
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the size of the standard \a pageSizeId in the requested \a units. */
end_comment
begin_function
DECL|function|size
name|QSizeF
name|QPageSize
operator|::
name|size
parameter_list|(
name|PageSizeId
name|pageSizeId
parameter_list|,
name|Unit
name|units
parameter_list|)
block|{
if|if
condition|(
name|pageSizeId
operator|==
name|Custom
condition|)
return|return
name|QSizeF
argument_list|()
return|;
return|return
name|qt_unitSize
argument_list|(
name|pageSizeId
argument_list|,
name|units
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the size of the standard \a pageSizeId in Points. */
end_comment
begin_function
DECL|function|sizePoints
name|QSize
name|QPageSize
operator|::
name|sizePoints
parameter_list|(
name|PageSizeId
name|pageSizeId
parameter_list|)
block|{
if|if
condition|(
name|pageSizeId
operator|==
name|Custom
condition|)
return|return
name|QSize
argument_list|()
return|;
return|return
name|QSize
argument_list|(
name|qt_pageSizes
index|[
name|pageSizeId
index|]
operator|.
name|widthPoints
argument_list|,
name|qt_pageSizes
index|[
name|pageSizeId
index|]
operator|.
name|heightPoints
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the size of the standard \a pageSizeId in Device Pixels     for the given \a resolution. */
end_comment
begin_function
DECL|function|sizePixels
name|QSize
name|QPageSize
operator|::
name|sizePixels
parameter_list|(
name|PageSizeId
name|pageSizeId
parameter_list|,
name|int
name|resolution
parameter_list|)
block|{
if|if
condition|(
name|pageSizeId
operator|==
name|Custom
condition|)
return|return
name|QSize
argument_list|()
return|;
return|return
name|qt_convertPointsToPixels
argument_list|(
name|sizePoints
argument_list|(
name|pageSizeId
argument_list|)
argument_list|,
name|resolution
argument_list|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|dbg
parameter_list|,
specifier|const
name|QPageSize
modifier|&
name|pageSize
parameter_list|)
block|{
name|QDebugStateSaver
name|saver
argument_list|(
name|dbg
argument_list|)
decl_stmt|;
name|dbg
operator|.
name|nospace
argument_list|()
expr_stmt|;
name|dbg
operator|.
name|noquote
argument_list|()
expr_stmt|;
name|dbg
operator|<<
literal|"QPageSize("
expr_stmt|;
if|if
condition|(
name|pageSize
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|dbg
operator|<<
literal|'"'
operator|<<
name|pageSize
operator|.
name|name
argument_list|()
operator|<<
literal|"\", key=\""
operator|<<
name|pageSize
operator|.
name|key
argument_list|()
operator|<<
literal|"\", "
operator|<<
name|pageSize
operator|.
name|sizePoints
argument_list|()
operator|.
name|width
argument_list|()
operator|<<
literal|'x'
operator|<<
name|pageSize
operator|.
name|sizePoints
argument_list|()
operator|.
name|height
argument_list|()
operator|<<
literal|"pt, id="
operator|<<
name|pageSize
operator|.
name|id
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QPageSize()"
expr_stmt|;
block|}
name|dbg
operator|<<
literal|')'
expr_stmt|;
return|return
name|dbg
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
