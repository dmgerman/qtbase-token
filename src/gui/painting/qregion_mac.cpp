begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<private/qt_mac_p.h>
end_include
begin_include
include|#
directive|include
file|"qcoreapplication.h"
end_include
begin_include
include|#
directive|include
file|<qlibrary.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|member|shared_empty
name|QRegion
operator|::
name|QRegionData
name|QRegion
operator|::
name|shared_empty
init|=
block|{
name|Q_BASIC_ATOMIC_INITIALIZER
argument_list|(
literal|1
argument_list|)
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC32
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_MAC_USE_COCOA
argument_list|)
end_if
begin_define
DECL|macro|RGN_CACHE_SIZE
define|#
directive|define
name|RGN_CACHE_SIZE
value|200
end_define
begin_ifdef
ifdef|#
directive|ifdef
name|RGN_CACHE_SIZE
end_ifdef
begin_decl_stmt
DECL|variable|rgncache_init
specifier|static
name|bool
name|rgncache_init
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|rgncache_used
specifier|static
name|int
name|rgncache_used
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|rgncache
specifier|static
name|RgnHandle
name|rgncache
index|[
name|RGN_CACHE_SIZE
index|]
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_mac_cleanup_rgncache
specifier|static
name|void
name|qt_mac_cleanup_rgncache
parameter_list|()
block|{
name|rgncache_init
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RGN_CACHE_SIZE
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|rgncache
index|[
name|i
index|]
condition|)
block|{
operator|--
name|rgncache_used
expr_stmt|;
name|DisposeRgn
argument_list|(
name|rgncache
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|rgncache
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qt_mac_get_rgn
name|Q_GUI_EXPORT
name|RgnHandle
name|qt_mac_get_rgn
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|RGN_CACHE_SIZE
if|if
condition|(
operator|!
name|rgncache_init
condition|)
block|{
name|rgncache_used
operator|=
literal|0
expr_stmt|;
name|rgncache_init
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RGN_CACHE_SIZE
condition|;
operator|++
name|i
control|)
name|rgncache
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|qAddPostRoutine
argument_list|(
name|qt_mac_cleanup_rgncache
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rgncache_used
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RGN_CACHE_SIZE
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|rgncache
index|[
name|i
index|]
condition|)
block|{
name|RgnHandle
name|ret
init|=
name|rgncache
index|[
name|i
index|]
decl_stmt|;
name|SetEmptyRgn
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|rgncache
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
operator|--
name|rgncache_used
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
block|}
endif|#
directive|endif
return|return
name|NewRgn
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|qt_mac_dispose_rgn
name|Q_GUI_EXPORT
name|void
name|qt_mac_dispose_rgn
parameter_list|(
name|RgnHandle
name|r
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|RGN_CACHE_SIZE
if|if
condition|(
name|rgncache_init
operator|&&
name|rgncache_used
operator|<
name|RGN_CACHE_SIZE
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RGN_CACHE_SIZE
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|rgncache
index|[
name|i
index|]
condition|)
block|{
operator|++
name|rgncache_used
expr_stmt|;
name|rgncache
index|[
name|i
index|]
operator|=
name|r
expr_stmt|;
return|return;
block|}
block|}
block|}
endif|#
directive|endif
name|DisposeRgn
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_mac_get_rgn_rect
specifier|static
name|OSStatus
name|qt_mac_get_rgn_rect
parameter_list|(
name|UInt16
name|msg
parameter_list|,
name|RgnHandle
parameter_list|,
specifier|const
name|Rect
modifier|*
name|rect
parameter_list|,
name|void
modifier|*
name|reg
parameter_list|)
block|{
if|if
condition|(
name|msg
operator|==
name|kQDRegionToRectsMsgParse
condition|)
block|{
name|QRect
name|rct
argument_list|(
name|rect
operator|->
name|left
argument_list|,
name|rect
operator|->
name|top
argument_list|,
operator|(
name|rect
operator|->
name|right
operator|-
name|rect
operator|->
name|left
operator|)
argument_list|,
operator|(
name|rect
operator|->
name|bottom
operator|-
name|rect
operator|->
name|top
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rct
operator|.
name|isEmpty
argument_list|()
condition|)
operator|*
operator|(
operator|(
name|QRegion
operator|*
operator|)
name|reg
operator|)
operator|+=
name|rct
expr_stmt|;
block|}
return|return
name|noErr
return|;
block|}
end_function
begin_function
DECL|function|qt_mac_convert_mac_region
name|Q_GUI_EXPORT
name|QRegion
name|qt_mac_convert_mac_region
parameter_list|(
name|RgnHandle
name|rgn
parameter_list|)
block|{
return|return
name|QRegion
operator|::
name|fromQDRgn
argument_list|(
name|rgn
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fromQDRgn
name|QRegion
name|QRegion
operator|::
name|fromQDRgn
parameter_list|(
name|RgnHandle
name|rgn
parameter_list|)
block|{
name|QRegion
name|ret
decl_stmt|;
name|ret
operator|.
name|detach
argument_list|()
expr_stmt|;
name|OSStatus
name|oss
init|=
name|QDRegionToRects
argument_list|(
name|rgn
argument_list|,
name|kQDParseRegionFromTopLeft
argument_list|,
name|qt_mac_get_rgn_rect
argument_list|,
operator|(
name|void
operator|*
operator|)
operator|&
name|ret
argument_list|)
decl_stmt|;
if|if
condition|(
name|oss
operator|!=
name|noErr
condition|)
return|return
name|QRegion
argument_list|()
return|;
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Create's a RegionHandle, it's the caller's responsibility to release. */
end_comment
begin_function
DECL|function|toQDRgn
name|RgnHandle
name|QRegion
operator|::
name|toQDRgn
parameter_list|()
specifier|const
block|{
name|RgnHandle
name|rgnHandle
init|=
name|qt_mac_get_rgn
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|qt_rgn
operator|&&
name|d
operator|->
name|qt_rgn
operator|->
name|numRects
condition|)
block|{
name|RgnHandle
name|tmp_rgn
init|=
name|qt_mac_get_rgn
argument_list|()
decl_stmt|;
name|int
name|n
init|=
name|d
operator|->
name|qt_rgn
operator|->
name|numRects
decl_stmt|;
specifier|const
name|QRect
modifier|*
name|qt_r
init|=
operator|(
name|n
operator|==
literal|1
operator|)
condition|?
operator|&
name|d
operator|->
name|qt_rgn
operator|->
name|extents
else|:
name|d
operator|->
name|qt_rgn
operator|->
name|rects
operator|.
name|constData
argument_list|()
decl_stmt|;
while|while
condition|(
name|n
operator|--
condition|)
block|{
name|SetRectRgn
argument_list|(
name|tmp_rgn
argument_list|,
name|qMax
argument_list|(
name|SHRT_MIN
argument_list|,
name|qt_r
operator|->
name|x
argument_list|()
argument_list|)
argument_list|,
name|qMax
argument_list|(
name|SHRT_MIN
argument_list|,
name|qt_r
operator|->
name|y
argument_list|()
argument_list|)
argument_list|,
name|qMin
argument_list|(
name|SHRT_MAX
argument_list|,
name|qt_r
operator|->
name|right
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|,
name|qMin
argument_list|(
name|SHRT_MAX
argument_list|,
name|qt_r
operator|->
name|bottom
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|UnionRgn
argument_list|(
name|rgnHandle
argument_list|,
name|tmp_rgn
argument_list|,
name|rgnHandle
argument_list|)
expr_stmt|;
operator|++
name|qt_r
expr_stmt|;
block|}
name|qt_mac_dispose_rgn
argument_list|(
name|tmp_rgn
argument_list|)
expr_stmt|;
block|}
return|return
name|rgnHandle
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Create's a RegionHandle, it's the caller's responsibility to release.      Returns 0 if the QRegion overflows. */
end_comment
begin_function
DECL|function|toQDRgnForUpdate_sys
name|RgnHandle
name|QRegion
operator|::
name|toQDRgnForUpdate_sys
parameter_list|()
specifier|const
block|{
name|RgnHandle
name|rgnHandle
init|=
name|qt_mac_get_rgn
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|qt_rgn
operator|&&
name|d
operator|->
name|qt_rgn
operator|->
name|numRects
condition|)
block|{
name|RgnHandle
name|tmp_rgn
init|=
name|qt_mac_get_rgn
argument_list|()
decl_stmt|;
name|int
name|n
init|=
name|d
operator|->
name|qt_rgn
operator|->
name|numRects
decl_stmt|;
specifier|const
name|QRect
modifier|*
name|qt_r
init|=
operator|(
name|n
operator|==
literal|1
operator|)
condition|?
operator|&
name|d
operator|->
name|qt_rgn
operator|->
name|extents
else|:
name|d
operator|->
name|qt_rgn
operator|->
name|rects
operator|.
name|constData
argument_list|()
decl_stmt|;
while|while
condition|(
name|n
operator|--
condition|)
block|{
comment|// detect overflow. Tested for use with HIViewSetNeedsDisplayInRegion
comment|// in QWidgetPrivate::update_sys().
enum|enum
block|{
name|HIViewSetNeedsDisplayInRegionOverflow
init|=
literal|10000
block|}
enum|;
comment|// empirically determined conservative value
if|if
condition|(
name|qt_r
operator|->
name|right
argument_list|()
operator|>
name|HIViewSetNeedsDisplayInRegionOverflow
operator|||
name|qt_r
operator|->
name|bottom
argument_list|()
operator|>
name|HIViewSetNeedsDisplayInRegionOverflow
condition|)
block|{
name|qt_mac_dispose_rgn
argument_list|(
name|tmp_rgn
argument_list|)
expr_stmt|;
name|qt_mac_dispose_rgn
argument_list|(
name|rgnHandle
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|SetRectRgn
argument_list|(
name|tmp_rgn
argument_list|,
name|qMax
argument_list|(
name|SHRT_MIN
argument_list|,
name|qt_r
operator|->
name|x
argument_list|()
argument_list|)
argument_list|,
name|qMax
argument_list|(
name|SHRT_MIN
argument_list|,
name|qt_r
operator|->
name|y
argument_list|()
argument_list|)
argument_list|,
name|qMin
argument_list|(
name|SHRT_MAX
argument_list|,
name|qt_r
operator|->
name|right
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|,
name|qMin
argument_list|(
name|SHRT_MAX
argument_list|,
name|qt_r
operator|->
name|bottom
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|UnionRgn
argument_list|(
name|rgnHandle
argument_list|,
name|tmp_rgn
argument_list|,
name|rgnHandle
argument_list|)
expr_stmt|;
operator|++
name|qt_r
expr_stmt|;
block|}
name|qt_mac_dispose_rgn
argument_list|(
name|tmp_rgn
argument_list|)
expr_stmt|;
block|}
return|return
name|rgnHandle
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|(
name|MAC_OS_X_VERSION_MAX_ALLOWED
operator|>=
name|MAC_OS_X_VERSION_10_5
operator|)
end_if
begin_function
DECL|function|shape2QRegionHelper
name|OSStatus
name|QRegion
operator|::
name|shape2QRegionHelper
parameter_list|(
name|int
name|inMessage
parameter_list|,
name|HIShapeRef
parameter_list|,
specifier|const
name|CGRect
modifier|*
name|inRect
parameter_list|,
name|void
modifier|*
name|inRefcon
parameter_list|)
block|{
name|QRegion
modifier|*
name|region
init|=
cast|static_cast
argument_list|<
name|QRegion
operator|*
argument_list|>
argument_list|(
name|inRefcon
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|region
condition|)
return|return
name|paramErr
return|;
switch|switch
condition|(
name|inMessage
condition|)
block|{
case|case
name|kHIShapeEnumerateRect
case|:
operator|*
name|region
operator|+=
name|QRect
argument_list|(
name|inRect
operator|->
name|origin
operator|.
name|x
argument_list|,
name|inRect
operator|->
name|origin
operator|.
name|y
argument_list|,
name|inRect
operator|->
name|size
operator|.
name|width
argument_list|,
name|inRect
operator|->
name|size
operator|.
name|height
argument_list|)
expr_stmt|;
break|break;
case|case
name|kHIShapeEnumerateInit
case|:
comment|// Assume the region is already setup correctly
case|case
name|kHIShapeEnumerateTerminate
case|:
default|default:
break|break;
block|}
return|return
name|noErr
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \internal      Create's a mutable shape, it's the caller's responsibility to release.      WARNING: this function clamps the coordinates to SHRT_MIN/MAX on 10.4 and below. */
end_comment
begin_function
DECL|function|toHIMutableShape
name|HIMutableShapeRef
name|QRegion
operator|::
name|toHIMutableShape
parameter_list|()
specifier|const
block|{
name|HIMutableShapeRef
name|shape
init|=
name|HIShapeCreateMutable
argument_list|()
decl_stmt|;
if|#
directive|if
operator|(
name|MAC_OS_X_VERSION_MAX_ALLOWED
operator|>=
name|MAC_OS_X_VERSION_10_5
operator|)
if|if
condition|(
name|QSysInfo
operator|::
name|MacintoshVersion
operator|>=
name|QSysInfo
operator|::
name|MV_10_5
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|qt_rgn
operator|&&
name|d
operator|->
name|qt_rgn
operator|->
name|numRects
condition|)
block|{
name|int
name|n
init|=
name|d
operator|->
name|qt_rgn
operator|->
name|numRects
decl_stmt|;
specifier|const
name|QRect
modifier|*
name|qt_r
init|=
operator|(
name|n
operator|==
literal|1
operator|)
condition|?
operator|&
name|d
operator|->
name|qt_rgn
operator|->
name|extents
else|:
name|d
operator|->
name|qt_rgn
operator|->
name|rects
operator|.
name|constData
argument_list|()
decl_stmt|;
while|while
condition|(
name|n
operator|--
condition|)
block|{
name|CGRect
name|cgRect
init|=
name|CGRectMake
argument_list|(
name|qt_r
operator|->
name|x
argument_list|()
argument_list|,
name|qt_r
operator|->
name|y
argument_list|()
argument_list|,
name|qt_r
operator|->
name|width
argument_list|()
argument_list|,
name|qt_r
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|HIShapeUnionWithRect
argument_list|(
name|shape
argument_list|,
operator|&
name|cgRect
argument_list|)
expr_stmt|;
operator|++
name|qt_r
expr_stmt|;
block|}
block|}
block|}
else|else
endif|#
directive|endif
block|{
ifndef|#
directive|ifndef
name|QT_MAC_USE_COCOA
name|QCFType
argument_list|<
name|HIShapeRef
argument_list|>
name|qdShape
init|=
name|HIShapeCreateWithQDRgn
argument_list|(
name|QMacSmartQuickDrawRegion
argument_list|(
name|toQDRgn
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|HIShapeUnion
argument_list|(
name|qdShape
argument_list|,
name|shape
argument_list|,
name|shape
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|shape
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_MAC64
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_MAC_USE_COCOA
argument_list|)
end_if
begin_typedef
DECL|typedef|PtrHIShapeGetAsQDRgn
typedef|typedef
name|OSStatus
function_decl|(
modifier|*
name|PtrHIShapeGetAsQDRgn
function_decl|)
parameter_list|(
name|HIShapeRef
parameter_list|,
name|RgnHandle
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptrHIShapeGetAsQDRgn
specifier|static
name|PtrHIShapeGetAsQDRgn
name|ptrHIShapeGetAsQDRgn
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|fromHIShapeRef
name|QRegion
name|QRegion
operator|::
name|fromHIShapeRef
parameter_list|(
name|HIShapeRef
name|shape
parameter_list|)
block|{
name|QRegion
name|returnRegion
decl_stmt|;
name|returnRegion
operator|.
name|detach
argument_list|()
expr_stmt|;
comment|// Begin gratuitous #if-defery
if|#
directive|if
operator|(
name|MAC_OS_X_VERSION_MAX_ALLOWED
operator|>=
name|MAC_OS_X_VERSION_10_5
operator|)
ifndef|#
directive|ifndef
name|Q_WS_MAC64
if|if
condition|(
name|QSysInfo
operator|::
name|MacintoshVersion
operator|>=
name|QSysInfo
operator|::
name|MV_10_5
condition|)
block|{
endif|#
directive|endif
name|HIShapeEnumerate
argument_list|(
name|shape
argument_list|,
name|kHIShapeParseFromTopLeft
argument_list|,
name|shape2QRegionHelper
argument_list|,
operator|&
name|returnRegion
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_MAC64
block|}
else|else
endif|#
directive|endif
endif|#
directive|endif
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_MAC64
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_MAC_USE_COCOA
argument_list|)
if|if
condition|(
name|ptrHIShapeGetAsQDRgn
operator|==
literal|0
condition|)
block|{
name|QLibrary
name|library
argument_list|(
name|QLatin1String
argument_list|(
literal|"/System/Library/Frameworks/Carbon.framework/Carbon"
argument_list|)
argument_list|)
decl_stmt|;
name|library
operator|.
name|setLoadHints
argument_list|(
name|QLibrary
operator|::
name|ExportExternalSymbolsHint
argument_list|)
expr_stmt|;
name|ptrHIShapeGetAsQDRgn
operator|=
cast|reinterpret_cast
argument_list|<
name|PtrHIShapeGetAsQDRgn
argument_list|>
argument_list|(
name|library
operator|.
name|resolve
argument_list|(
literal|"HIShapeGetAsQDRgn"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RgnHandle
name|rgn
init|=
name|qt_mac_get_rgn
argument_list|()
decl_stmt|;
name|ptrHIShapeGetAsQDRgn
argument_list|(
name|shape
argument_list|,
name|rgn
argument_list|)
expr_stmt|;
name|returnRegion
operator|=
name|QRegion
operator|::
name|fromQDRgn
argument_list|(
name|rgn
argument_list|)
expr_stmt|;
name|qt_mac_dispose_rgn
argument_list|(
name|rgn
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|returnRegion
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
