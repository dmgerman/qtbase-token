begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_include
include|#
directive|include
file|<private/qdrawhelper_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qrgba64_p.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|macro|PRELOAD_INIT
define|#
directive|define
name|PRELOAD_INIT
parameter_list|(
name|x
parameter_list|)
DECL|macro|PRELOAD_INIT2
define|#
directive|define
name|PRELOAD_INIT2
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
DECL|macro|PRELOAD_COND
define|#
directive|define
name|PRELOAD_COND
parameter_list|(
name|x
parameter_list|)
DECL|macro|PRELOAD_COND2
define|#
directive|define
name|PRELOAD_COND2
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
comment|/* The constant alpha factor describes an alpha factor that gets applied    to the result of the composition operation combining it with the destination.     The intent is that if const_alpha == 0. we get back dest, and if const_alpha == 1.    we get the unmodified operation     result = src op dest    dest = result * const_alpha + dest * (1. - const_alpha)     This means that in the comments below, the first line is the const_alpha==255 case, the    second line the general one.     In the lines below:    s == src, sa == alpha(src), sia = 1 - alpha(src)    d == dest, da == alpha(dest), dia = 1 - alpha(dest)    ca = const_alpha, cia = 1 - const_alpha     The methods exist in two variants. One where we have a constant source, the other    where the source is an array of pixels. */
comment|/*   result = 0   d = d * cia */
DECL|macro|comp_func_Clear_impl
define|#
directive|define
name|comp_func_Clear_impl
parameter_list|(
name|dest
parameter_list|,
name|length
parameter_list|,
name|const_alpha
parameter_list|)
define|\
value|{\     if (const_alpha == 255) {\         QT_MEMFILL_UINT(dest, length, 0);\     } else {\         int ialpha = 255 - const_alpha;\         PRELOAD_INIT(dest)\         for (int i = 0; i< length; ++i) {\             PRELOAD_COND(dest)\             dest[i] = BYTE_MUL(dest[i], ialpha);\         }\     }\ }
DECL|function|comp_func_solid_Clear
name|void
name|QT_FASTCALL
name|comp_func_solid_Clear
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|comp_func_Clear_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|comp_func_solid_Clear_rgb64
name|void
name|QT_FASTCALL
name|comp_func_solid_Clear_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|QRgba64
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|qt_memfill64
argument_list|(
operator|(
name|quint64
operator|*
operator|)
name|dest
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
else|else
block|{
name|int
name|ialpha
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|dest
index|[
name|i
index|]
operator|=
name|multiplyAlpha255
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Clear
name|void
name|QT_FASTCALL
name|comp_func_Clear
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|comp_func_Clear_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|comp_func_Clear_rgb64
name|void
name|QT_FASTCALL
name|comp_func_Clear_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|dest
parameter_list|,
specifier|const
name|QRgba64
modifier|*
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|qt_memfill64
argument_list|(
operator|(
name|quint64
operator|*
operator|)
name|dest
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
else|else
block|{
name|int
name|ialpha
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|dest
index|[
name|i
index|]
operator|=
name|multiplyAlpha255
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*   result = s   dest = s * ca + d * cia */
end_comment
begin_function
DECL|function|comp_func_solid_Source
name|void
name|QT_FASTCALL
name|comp_func_solid_Source
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
name|QT_MEMFILL_UINT
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|ialpha
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
name|color
operator|=
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|color
operator|+
name|BYTE_MUL
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_Source_rgb64
name|void
name|QT_FASTCALL
name|comp_func_solid_Source_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|QRgba64
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|qt_memfill64
argument_list|(
operator|(
name|quint64
operator|*
operator|)
name|dest
argument_list|,
name|color
argument_list|,
name|length
argument_list|)
expr_stmt|;
else|else
block|{
name|int
name|ialpha
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
name|color
operator|=
name|multiplyAlpha255
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|dest
index|[
name|i
index|]
operator|=
name|color
operator|+
name|multiplyAlpha255
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Source
name|void
name|QT_FASTCALL
name|comp_func_Source
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
operator|::
name|memcpy
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
operator|*
sizeof|sizeof
argument_list|(
name|uint
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|ialpha
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|,
name|dest
index|[
name|i
index|]
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Source_rgb64
name|void
name|QT_FASTCALL
name|comp_func_Source_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|QRgba64
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
operator|::
name|memcpy
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
operator|*
sizeof|sizeof
argument_list|(
name|quint64
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
name|int
name|ialpha
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|dest
index|[
name|i
index|]
operator|=
name|interpolate255
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|,
name|dest
index|[
name|i
index|]
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_Destination
name|void
name|QT_FASTCALL
name|comp_func_solid_Destination
parameter_list|(
name|uint
modifier|*
parameter_list|,
name|int
parameter_list|,
name|uint
parameter_list|,
name|uint
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|comp_func_solid_Destination_rgb64
name|void
name|QT_FASTCALL
name|comp_func_solid_Destination_rgb64
parameter_list|(
name|QRgba64
modifier|*
parameter_list|,
name|int
parameter_list|,
name|QRgba64
parameter_list|,
name|uint
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|comp_func_Destination
name|void
name|QT_FASTCALL
name|comp_func_Destination
parameter_list|(
name|uint
modifier|*
parameter_list|,
specifier|const
name|uint
modifier|*
parameter_list|,
name|int
parameter_list|,
name|uint
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|comp_func_Destination_rgb64
name|void
name|QT_FASTCALL
name|comp_func_Destination_rgb64
parameter_list|(
name|QRgba64
modifier|*
parameter_list|,
specifier|const
name|QRgba64
modifier|*
parameter_list|,
name|int
parameter_list|,
name|uint
parameter_list|)
block|{ }
end_function
begin_comment
comment|/*   result = s + d * sia   dest = (s + d * sia) * ca + d * cia        = s * ca + d * (sia * ca + cia)        = s * ca + d * (1 - sa*ca) */
end_comment
begin_function
DECL|function|comp_func_solid_SourceOver
name|void
name|QT_FASTCALL
name|comp_func_solid_SourceOver
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
operator|(
name|const_alpha
operator|&
name|qAlpha
argument_list|(
name|color
argument_list|)
operator|)
operator|==
literal|255
condition|)
block|{
name|QT_MEMFILL_UINT
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
name|color
operator|=
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|color
operator|+
name|BYTE_MUL
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|color
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_SourceOver_rgb64
name|void
name|QT_FASTCALL
name|comp_func_solid_SourceOver_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|QRgba64
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
operator|&&
name|color
operator|.
name|isOpaque
argument_list|()
condition|)
block|{
name|qt_memfill64
argument_list|(
operator|(
name|quint64
operator|*
operator|)
name|dest
argument_list|,
name|color
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
name|color
operator|=
name|multiplyAlpha255
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|dest
index|[
name|i
index|]
operator|=
name|color
operator|+
name|multiplyAlpha65535
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
literal|65535
operator|-
name|color
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_SourceOver
name|void
name|QT_FASTCALL
name|comp_func_SourceOver
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|s
operator|>=
literal|0xff000000
condition|)
name|dest
index|[
name|i
index|]
operator|=
name|s
expr_stmt|;
elseif|else
if|if
condition|(
name|s
operator|!=
literal|0
condition|)
name|dest
index|[
name|i
index|]
operator|=
name|s
operator|+
name|BYTE_MUL
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|s
init|=
name|BYTE_MUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|s
operator|+
name|BYTE_MUL
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_SourceOver_rgb64
name|void
name|QT_FASTCALL
name|comp_func_SourceOver_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|QRgba64
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|QRgba64
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|isOpaque
argument_list|()
condition|)
name|dest
index|[
name|i
index|]
operator|=
name|s
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|s
operator|.
name|isTransparent
argument_list|()
condition|)
name|dest
index|[
name|i
index|]
operator|=
name|s
operator|+
name|multiplyAlpha65535
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
literal|65535
operator|-
name|s
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|QRgba64
name|s
init|=
name|multiplyAlpha255
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|s
operator|+
name|multiplyAlpha65535
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
literal|65535
operator|-
name|s
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*   result = d + s * dia   dest = (d + s * dia) * ca + d * cia        = d + s * dia * ca */
end_comment
begin_function
DECL|function|comp_func_solid_DestinationOver
name|void
name|QT_FASTCALL
name|comp_func_solid_DestinationOver
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
name|color
operator|=
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|d
operator|+
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_DestinationOver_rgb64
name|void
name|QT_FASTCALL
name|comp_func_solid_DestinationOver_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|QRgba64
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
name|color
operator|=
name|multiplyAlpha255
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|QRgba64
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|d
operator|+
name|multiplyAlpha65535
argument_list|(
name|color
argument_list|,
literal|65535
operator|-
name|d
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_DestinationOver
name|void
name|QT_FASTCALL
name|comp_func_DestinationOver
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|d
operator|+
name|BYTE_MUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|BYTE_MUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|d
operator|+
name|BYTE_MUL
argument_list|(
name|s
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_DestinationOver_rgb64
name|void
name|QT_FASTCALL
name|comp_func_DestinationOver_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|QRgba64
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|QRgba64
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|d
operator|+
name|multiplyAlpha65535
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
literal|65535
operator|-
name|d
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|QRgba64
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|QRgba64
name|s
init|=
name|multiplyAlpha255
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|d
operator|+
name|multiplyAlpha65535
argument_list|(
name|s
argument_list|,
literal|65535
operator|-
name|d
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*   result = s * da   dest = s * da * ca + d * cia */
end_comment
begin_function
DECL|function|comp_func_solid_SourceIn
name|void
name|QT_FASTCALL
name|comp_func_solid_SourceIn
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|qAlpha
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|color
operator|=
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
name|uint
name|cia
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|color
argument_list|,
name|qAlpha
argument_list|(
name|d
argument_list|)
argument_list|,
name|d
argument_list|,
name|cia
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_SourceIn_rgb64
name|void
name|QT_FASTCALL
name|comp_func_solid_SourceIn_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|QRgba64
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|dest
index|[
name|i
index|]
operator|=
name|multiplyAlpha65535
argument_list|(
name|color
argument_list|,
name|dest
index|[
name|i
index|]
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|uint
name|ca
init|=
name|const_alpha
operator|*
literal|257
decl_stmt|;
name|uint
name|cia
init|=
literal|65535
operator|-
name|ca
decl_stmt|;
name|color
operator|=
name|multiplyAlpha65535
argument_list|(
name|color
argument_list|,
name|ca
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|QRgba64
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|interpolate65535
argument_list|(
name|color
argument_list|,
name|d
operator|.
name|alpha
argument_list|()
argument_list|,
name|d
argument_list|,
name|cia
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_SourceIn
name|void
name|QT_FASTCALL
name|comp_func_SourceIn
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|BYTE_MUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|qAlpha
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|uint
name|cia
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|BYTE_MUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|s
argument_list|,
name|qAlpha
argument_list|(
name|d
argument_list|)
argument_list|,
name|d
argument_list|,
name|cia
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_SourceIn_rgb64
name|void
name|QT_FASTCALL
name|comp_func_SourceIn_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|QRgba64
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|dest
index|[
name|i
index|]
operator|=
name|multiplyAlpha65535
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|dest
index|[
name|i
index|]
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|uint
name|ca
init|=
name|const_alpha
operator|*
literal|257
decl_stmt|;
name|uint
name|cia
init|=
literal|65535
operator|-
name|ca
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|QRgba64
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|QRgba64
name|s
init|=
name|multiplyAlpha65535
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|ca
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|interpolate65535
argument_list|(
name|s
argument_list|,
name|d
operator|.
name|alpha
argument_list|()
argument_list|,
name|d
argument_list|,
name|cia
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*   result = d * sa   dest = d * sa * ca + d * cia        = d * (sa * ca + cia) */
end_comment
begin_function
DECL|function|comp_func_solid_DestinationIn
name|void
name|QT_FASTCALL
name|comp_func_solid_DestinationIn
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|uint
name|a
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
block|{
name|a
operator|=
name|BYTE_MUL
argument_list|(
name|a
argument_list|,
name|const_alpha
argument_list|)
operator|+
literal|255
operator|-
name|const_alpha
expr_stmt|;
block|}
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|BYTE_MUL
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_DestinationIn_rgb64
name|void
name|QT_FASTCALL
name|comp_func_solid_DestinationIn_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|QRgba64
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|uint
name|a
init|=
name|color
operator|.
name|alpha
argument_list|()
decl_stmt|;
name|uint
name|ca64k
init|=
name|const_alpha
operator|*
literal|257
decl_stmt|;
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
name|a
operator|=
name|qt_div_65535
argument_list|(
name|a
operator|*
name|ca64k
argument_list|)
operator|+
literal|65535
operator|-
name|ca64k
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|dest
index|[
name|i
index|]
operator|=
name|multiplyAlpha65535
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_DestinationIn
name|void
name|QT_FASTCALL
name|comp_func_DestinationIn
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|BYTE_MUL
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|qAlpha
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|cia
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|a
init|=
name|BYTE_MUL
argument_list|(
name|qAlpha
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
argument_list|,
name|const_alpha
argument_list|)
operator|+
name|cia
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|BYTE_MUL
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_DestinationIn_rgb64
name|void
name|QT_FASTCALL
name|comp_func_DestinationIn_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|QRgba64
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|dest
index|[
name|i
index|]
operator|=
name|multiplyAlpha65535
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|src
index|[
name|i
index|]
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|uint
name|ca
init|=
name|const_alpha
operator|*
literal|257
decl_stmt|;
name|uint
name|cia
init|=
literal|65535
operator|-
name|ca
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|uint
name|a
init|=
name|qt_div_65535
argument_list|(
name|src
index|[
name|i
index|]
operator|.
name|alpha
argument_list|()
operator|*
name|ca
argument_list|)
operator|+
name|cia
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|multiplyAlpha65535
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*   result = s * dia   dest = s * dia * ca + d * cia */
end_comment
begin_function
DECL|function|comp_func_solid_SourceOut
name|void
name|QT_FASTCALL
name|comp_func_solid_SourceOut
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|dest
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|color
operator|=
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
name|int
name|cia
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|color
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|d
argument_list|)
argument_list|,
name|d
argument_list|,
name|cia
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_SourceOut_rgb64
name|void
name|QT_FASTCALL
name|comp_func_solid_SourceOut_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|QRgba64
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|dest
index|[
name|i
index|]
operator|=
name|multiplyAlpha65535
argument_list|(
name|color
argument_list|,
literal|65535
operator|-
name|dest
index|[
name|i
index|]
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|uint
name|ca
init|=
name|const_alpha
operator|*
literal|257
decl_stmt|;
name|uint
name|cia
init|=
literal|65535
operator|-
name|ca
decl_stmt|;
name|color
operator|=
name|multiplyAlpha65535
argument_list|(
name|color
argument_list|,
name|ca
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|QRgba64
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|interpolate65535
argument_list|(
name|color
argument_list|,
literal|65535
operator|-
name|d
operator|.
name|alpha
argument_list|()
argument_list|,
name|d
argument_list|,
name|cia
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_SourceOut
name|void
name|QT_FASTCALL
name|comp_func_SourceOut
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|BYTE_MUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|dest
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|cia
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|s
init|=
name|BYTE_MUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|)
decl_stmt|;
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|s
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|d
argument_list|)
argument_list|,
name|d
argument_list|,
name|cia
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_SourceOut_rgb64
name|void
name|QT_FASTCALL
name|comp_func_SourceOut_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|QRgba64
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|dest
index|[
name|i
index|]
operator|=
name|multiplyAlpha65535
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
literal|65535
operator|-
name|dest
index|[
name|i
index|]
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|uint
name|ca
init|=
name|const_alpha
operator|*
literal|257
decl_stmt|;
name|uint
name|cia
init|=
literal|65535
operator|-
name|ca
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|QRgba64
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|QRgba64
name|s
init|=
name|multiplyAlpha65535
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|ca
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|interpolate65535
argument_list|(
name|s
argument_list|,
literal|65535
operator|-
name|d
operator|.
name|alpha
argument_list|()
argument_list|,
name|d
argument_list|,
name|cia
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*   result = d * sia   dest = d * sia * ca + d * cia        = d * (sia * ca + cia) */
end_comment
begin_function
DECL|function|comp_func_solid_DestinationOut
name|void
name|QT_FASTCALL
name|comp_func_solid_DestinationOut
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|uint
name|a
init|=
name|qAlpha
argument_list|(
operator|~
name|color
argument_list|)
decl_stmt|;
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
name|a
operator|=
name|BYTE_MUL
argument_list|(
name|a
argument_list|,
name|const_alpha
argument_list|)
operator|+
literal|255
operator|-
name|const_alpha
expr_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|BYTE_MUL
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_DestinationOut_rgb64
name|void
name|QT_FASTCALL
name|comp_func_solid_DestinationOut_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|QRgba64
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|uint
name|a
init|=
literal|65535
operator|-
name|color
operator|.
name|alpha
argument_list|()
decl_stmt|;
name|uint
name|ca64k
init|=
name|const_alpha
operator|*
literal|257
decl_stmt|;
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
name|a
operator|=
name|qt_div_65535
argument_list|(
name|a
operator|*
name|ca64k
argument_list|)
operator|+
literal|65535
operator|-
name|ca64k
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|dest
index|[
name|i
index|]
operator|=
name|multiplyAlpha65535
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_DestinationOut
name|void
name|QT_FASTCALL
name|comp_func_DestinationOut
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|BYTE_MUL
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|src
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|cia
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|sia
init|=
name|BYTE_MUL
argument_list|(
name|qAlpha
argument_list|(
operator|~
name|src
index|[
name|i
index|]
argument_list|)
argument_list|,
name|const_alpha
argument_list|)
operator|+
name|cia
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|BYTE_MUL
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|sia
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_DestinationOut_rgb64
name|void
name|QT_FASTCALL
name|comp_func_DestinationOut_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|QRgba64
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|dest
index|[
name|i
index|]
operator|=
name|multiplyAlpha65535
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
literal|65535
operator|-
name|src
index|[
name|i
index|]
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|uint
name|ca
init|=
name|const_alpha
operator|*
literal|257
decl_stmt|;
name|uint
name|cia
init|=
literal|65535
operator|-
name|ca
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|uint
name|a
init|=
name|qt_div_65535
argument_list|(
operator|(
literal|65535
operator|-
name|src
index|[
name|i
index|]
operator|.
name|alpha
argument_list|()
operator|)
operator|*
name|ca
argument_list|)
operator|+
name|cia
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|multiplyAlpha65535
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*   result = s*da + d*sia   dest = s*da*ca + d*sia*ca + d *cia        = s*ca * da + d * (sia*ca + cia)        = s*ca * da + d * (1 - sa*ca) */
end_comment
begin_function
DECL|function|comp_func_solid_SourceAtop
name|void
name|QT_FASTCALL
name|comp_func_solid_SourceAtop
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
block|{
name|color
operator|=
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
block|}
name|uint
name|sia
init|=
name|qAlpha
argument_list|(
operator|~
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|color
argument_list|,
name|qAlpha
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
argument_list|,
name|dest
index|[
name|i
index|]
argument_list|,
name|sia
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_SourceAtop_rgb64
name|void
name|QT_FASTCALL
name|comp_func_solid_SourceAtop_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|QRgba64
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
name|color
operator|=
name|multiplyAlpha255
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
name|uint
name|sia
init|=
literal|65535
operator|-
name|color
operator|.
name|alpha
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|dest
index|[
name|i
index|]
operator|=
name|interpolate65535
argument_list|(
name|color
argument_list|,
name|dest
index|[
name|i
index|]
operator|.
name|alpha
argument_list|()
argument_list|,
name|dest
index|[
name|i
index|]
argument_list|,
name|sia
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_SourceAtop
name|void
name|QT_FASTCALL
name|comp_func_SourceAtop
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|s
argument_list|,
name|qAlpha
argument_list|(
name|d
argument_list|)
argument_list|,
name|d
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|s
init|=
name|BYTE_MUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|)
decl_stmt|;
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|s
argument_list|,
name|qAlpha
argument_list|(
name|d
argument_list|)
argument_list|,
name|d
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_SourceAtop_rgb64
name|void
name|QT_FASTCALL
name|comp_func_SourceAtop_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|QRgba64
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|QRgba64
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|QRgba64
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|interpolate65535
argument_list|(
name|s
argument_list|,
name|d
operator|.
name|alpha
argument_list|()
argument_list|,
name|d
argument_list|,
literal|65535
operator|-
name|s
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|QRgba64
name|s
init|=
name|multiplyAlpha255
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|)
decl_stmt|;
name|QRgba64
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|interpolate65535
argument_list|(
name|s
argument_list|,
name|d
operator|.
name|alpha
argument_list|()
argument_list|,
name|d
argument_list|,
literal|65535
operator|-
name|s
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*   result = d*sa + s*dia   dest = d*sa*ca + s*dia*ca + d *cia        = s*ca * dia + d * (sa*ca + cia) */
end_comment
begin_function
DECL|function|comp_func_solid_DestinationAtop
name|void
name|QT_FASTCALL
name|comp_func_solid_DestinationAtop
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|uint
name|a
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
block|{
name|color
operator|=
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
name|a
operator|=
name|qAlpha
argument_list|(
name|color
argument_list|)
operator|+
literal|255
operator|-
name|const_alpha
expr_stmt|;
block|}
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|d
argument_list|,
name|a
argument_list|,
name|color
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_DestinationAtop_rgb64
name|void
name|QT_FASTCALL
name|comp_func_solid_DestinationAtop_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|QRgba64
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|uint
name|a
init|=
name|color
operator|.
name|alpha
argument_list|()
decl_stmt|;
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
block|{
name|color
operator|=
name|multiplyAlpha255
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
name|a
operator|=
name|color
operator|.
name|alpha
argument_list|()
operator|+
literal|65535
operator|-
operator|(
name|const_alpha
operator|*
literal|257
operator|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|QRgba64
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|interpolate65535
argument_list|(
name|d
argument_list|,
name|a
argument_list|,
name|color
argument_list|,
literal|65535
operator|-
name|d
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_DestinationAtop
name|void
name|QT_FASTCALL
name|comp_func_DestinationAtop
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|d
argument_list|,
name|qAlpha
argument_list|(
name|s
argument_list|)
argument_list|,
name|s
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|cia
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|s
init|=
name|BYTE_MUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|)
decl_stmt|;
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|a
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
operator|+
name|cia
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|d
argument_list|,
name|a
argument_list|,
name|s
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_DestinationAtop_rgb64
name|void
name|QT_FASTCALL
name|comp_func_DestinationAtop_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|QRgba64
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|QRgba64
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|QRgba64
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|interpolate65535
argument_list|(
name|d
argument_list|,
name|s
operator|.
name|alpha
argument_list|()
argument_list|,
name|s
argument_list|,
literal|65535
operator|-
name|d
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|ca
init|=
name|const_alpha
operator|*
literal|257
decl_stmt|;
name|int
name|cia
init|=
literal|65535
operator|-
name|ca
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|QRgba64
name|s
init|=
name|multiplyAlpha65535
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|ca
argument_list|)
decl_stmt|;
name|QRgba64
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|a
init|=
name|s
operator|.
name|alpha
argument_list|()
operator|+
name|cia
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|interpolate65535
argument_list|(
name|d
argument_list|,
name|a
argument_list|,
name|s
argument_list|,
literal|65535
operator|-
name|d
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*   result = d*sia + s*dia   dest = d*sia*ca + s*dia*ca + d *cia        = s*ca * dia + d * (sia*ca + cia)        = s*ca * dia + d * (1 - sa*ca) */
end_comment
begin_function
DECL|function|comp_func_solid_XOR
name|void
name|QT_FASTCALL
name|comp_func_solid_XOR
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
name|color
operator|=
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
name|uint
name|sia
init|=
name|qAlpha
argument_list|(
operator|~
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|color
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|d
argument_list|)
argument_list|,
name|d
argument_list|,
name|sia
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_XOR_rgb64
name|void
name|QT_FASTCALL
name|comp_func_solid_XOR_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|QRgba64
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
name|color
operator|=
name|multiplyAlpha255
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
name|uint
name|sia
init|=
literal|65535
operator|-
name|color
operator|.
name|alpha
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|QRgba64
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|interpolate65535
argument_list|(
name|color
argument_list|,
literal|65535
operator|-
name|d
operator|.
name|alpha
argument_list|()
argument_list|,
name|d
argument_list|,
name|sia
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_XOR
name|void
name|QT_FASTCALL
name|comp_func_XOR
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|s
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|d
argument_list|)
argument_list|,
name|d
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|BYTE_MUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|s
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|d
argument_list|)
argument_list|,
name|d
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_XOR_rgb64
name|void
name|QT_FASTCALL
name|comp_func_XOR_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|QRgba64
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|QRgba64
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|QRgba64
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|interpolate65535
argument_list|(
name|s
argument_list|,
literal|65535
operator|-
name|d
operator|.
name|alpha
argument_list|()
argument_list|,
name|d
argument_list|,
literal|65535
operator|-
name|s
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|QRgba64
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|QRgba64
name|s
init|=
name|multiplyAlpha255
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|interpolate65535
argument_list|(
name|s
argument_list|,
literal|65535
operator|-
name|d
operator|.
name|alpha
argument_list|()
argument_list|,
name|d
argument_list|,
literal|65535
operator|-
name|s
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_struct
DECL|struct|QFullCoverage
struct|struct
name|QFullCoverage
block|{
DECL|function|store
specifier|inline
name|void
name|store
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
name|src
parameter_list|)
specifier|const
block|{
operator|*
name|dest
operator|=
name|src
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|QPartialCoverage
struct|struct
name|QPartialCoverage
block|{
DECL|function|QPartialCoverage
specifier|inline
name|QPartialCoverage
parameter_list|(
name|uint
name|const_alpha
parameter_list|)
member_init_list|:
name|ca
argument_list|(
name|const_alpha
argument_list|)
member_init_list|,
name|ica
argument_list|(
literal|255
operator|-
name|const_alpha
argument_list|)
block|{     }
DECL|function|store
specifier|inline
name|void
name|store
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
name|src
parameter_list|)
specifier|const
block|{
operator|*
name|dest
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|src
argument_list|,
name|ca
argument_list|,
operator|*
name|dest
argument_list|,
name|ica
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|ca
specifier|const
name|uint
name|ca
decl_stmt|;
DECL|member|ica
specifier|const
name|uint
name|ica
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|mix_alpha
specifier|static
specifier|inline
name|int
name|mix_alpha
parameter_list|(
name|int
name|da
parameter_list|,
name|int
name|sa
parameter_list|)
block|{
return|return
literal|255
operator|-
operator|(
operator|(
literal|255
operator|-
name|sa
operator|)
operator|*
operator|(
literal|255
operator|-
name|da
operator|)
operator|>>
literal|8
operator|)
return|;
block|}
end_function
begin_comment
comment|/*     Dca' = Sca.Da + Dca.Sa + Sca.(1 - Da) + Dca.(1 - Sa)          = Sca + Dca */
end_comment
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_Plus_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_solid_Plus_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|uint
name|s
init|=
name|color
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|d
operator|=
name|comp_func_Plus_one_pixel
argument_list|(
name|d
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_Plus_impl_rgb64
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_solid_Plus_impl_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|QRgba64
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|QRgba64
name|s
init|=
name|color
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|QRgba64
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|d
operator|=
name|comp_func_Plus_one_pixel
argument_list|(
name|d
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_Plus
name|void
name|QT_FASTCALL
name|comp_func_solid_Plus
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_Plus_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_Plus_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|comp_func_solid_Plus_rgb64
name|void
name|QT_FASTCALL
name|comp_func_solid_Plus_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|QRgba64
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|dest
index|[
name|i
index|]
operator|=
name|addWithSaturation
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|QRgba64
name|d
init|=
name|addWithSaturation
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|color
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|interpolate255
argument_list|(
name|d
argument_list|,
name|const_alpha
argument_list|,
name|dest
index|[
name|i
index|]
argument_list|,
literal|255
operator|-
name|const_alpha
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_Plus_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_Plus_impl
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|d
operator|=
name|comp_func_Plus_one_pixel
argument_list|(
name|d
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Plus
name|void
name|QT_FASTCALL
name|comp_func_Plus
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_Plus_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_Plus_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|comp_func_Plus_rgb64
name|void
name|QT_FASTCALL
name|comp_func_Plus_rgb64
parameter_list|(
name|QRgba64
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|QRgba64
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|dest
index|[
name|i
index|]
operator|=
name|addWithSaturation
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|src
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|QRgba64
name|d
init|=
name|addWithSaturation
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|src
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|interpolate255
argument_list|(
name|d
argument_list|,
name|const_alpha
argument_list|,
name|dest
index|[
name|i
index|]
argument_list|,
literal|255
operator|-
name|const_alpha
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*     Dca' = Sca.Dca + Sca.(1 - Da) + Dca.(1 - Sa) */
end_comment
begin_function
DECL|function|multiply_op
specifier|static
specifier|inline
name|int
name|multiply_op
parameter_list|(
name|int
name|dst
parameter_list|,
name|int
name|src
parameter_list|,
name|int
name|da
parameter_list|,
name|int
name|sa
parameter_list|)
block|{
return|return
name|qt_div_255
argument_list|(
name|src
operator|*
name|dst
operator|+
name|src
operator|*
operator|(
literal|255
operator|-
name|da
operator|)
operator|+
name|dst
operator|*
operator|(
literal|255
operator|-
name|sa
operator|)
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_Multiply_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_solid_Multiply_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sr
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sg
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sb
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|multiply_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|sr
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|sg
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_Multiply
name|void
name|QT_FASTCALL
name|comp_func_solid_Multiply
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_Multiply_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_Multiply_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_Multiply_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_Multiply_impl
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|multiply_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Multiply
name|void
name|QT_FASTCALL
name|comp_func_Multiply
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_Multiply_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_Multiply_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Dca' = (Sca.Da + Dca.Sa - Sca.Dca) + Sca.(1 - Da) + Dca.(1 - Sa)          = Sca + Dca - Sca.Dca */
end_comment
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_Screen_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_solid_Screen_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sr
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sg
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sb
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|255 - qt_div_255((255-a) * (255-b))
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|sr
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|sg
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_Screen
name|void
name|QT_FASTCALL
name|comp_func_solid_Screen
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_Screen_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_Screen_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_Screen_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_Screen_impl
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|255 - (((255-a) * (255-b))>> 8)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Screen
name|void
name|QT_FASTCALL
name|comp_func_Screen
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_Screen_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_Screen_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     if 2.Dca< Da         Dca' = 2.Sca.Dca + Sca.(1 - Da) + Dca.(1 - Sa)     otherwise         Dca' = Sa.Da - 2.(Da - Dca).(Sa - Sca) + Sca.(1 - Da) + Dca.(1 - Sa) */
end_comment
begin_function
DECL|function|overlay_op
specifier|static
specifier|inline
name|int
name|overlay_op
parameter_list|(
name|int
name|dst
parameter_list|,
name|int
name|src
parameter_list|,
name|int
name|da
parameter_list|,
name|int
name|sa
parameter_list|)
block|{
specifier|const
name|int
name|temp
init|=
name|src
operator|*
operator|(
literal|255
operator|-
name|da
operator|)
operator|+
name|dst
operator|*
operator|(
literal|255
operator|-
name|sa
operator|)
decl_stmt|;
if|if
condition|(
literal|2
operator|*
name|dst
operator|<
name|da
condition|)
return|return
name|qt_div_255
argument_list|(
literal|2
operator|*
name|src
operator|*
name|dst
operator|+
name|temp
argument_list|)
return|;
else|else
return|return
name|qt_div_255
argument_list|(
name|sa
operator|*
name|da
operator|-
literal|2
operator|*
operator|(
name|da
operator|-
name|dst
operator|)
operator|*
operator|(
name|sa
operator|-
name|src
operator|)
operator|+
name|temp
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_Overlay_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_solid_Overlay_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sr
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sg
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sb
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|overlay_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|sr
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|sg
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_Overlay
name|void
name|QT_FASTCALL
name|comp_func_solid_Overlay
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_Overlay_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_Overlay_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_Overlay_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_Overlay_impl
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|overlay_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Overlay
name|void
name|QT_FASTCALL
name|comp_func_Overlay
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_Overlay_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_Overlay_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Dca' = min(Sca.Da, Dca.Sa) + Sca.(1 - Da) + Dca.(1 - Sa)     Da'  = Sa + Da - Sa.Da */
end_comment
begin_function
DECL|function|darken_op
specifier|static
specifier|inline
name|int
name|darken_op
parameter_list|(
name|int
name|dst
parameter_list|,
name|int
name|src
parameter_list|,
name|int
name|da
parameter_list|,
name|int
name|sa
parameter_list|)
block|{
return|return
name|qt_div_255
argument_list|(
name|qMin
argument_list|(
name|src
operator|*
name|da
argument_list|,
name|dst
operator|*
name|sa
argument_list|)
operator|+
name|src
operator|*
operator|(
literal|255
operator|-
name|da
operator|)
operator|+
name|dst
operator|*
operator|(
literal|255
operator|-
name|sa
operator|)
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_Darken_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_solid_Darken_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sr
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sg
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sb
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|darken_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|sr
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|sg
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_Darken
name|void
name|QT_FASTCALL
name|comp_func_solid_Darken
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_Darken_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_Darken_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_Darken_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_Darken_impl
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|darken_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Darken
name|void
name|QT_FASTCALL
name|comp_func_Darken
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_Darken_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_Darken_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*    Dca' = max(Sca.Da, Dca.Sa) + Sca.(1 - Da) + Dca.(1 - Sa)    Da'  = Sa + Da - Sa.Da */
end_comment
begin_function
DECL|function|lighten_op
specifier|static
specifier|inline
name|int
name|lighten_op
parameter_list|(
name|int
name|dst
parameter_list|,
name|int
name|src
parameter_list|,
name|int
name|da
parameter_list|,
name|int
name|sa
parameter_list|)
block|{
return|return
name|qt_div_255
argument_list|(
name|qMax
argument_list|(
name|src
operator|*
name|da
argument_list|,
name|dst
operator|*
name|sa
argument_list|)
operator|+
name|src
operator|*
operator|(
literal|255
operator|-
name|da
operator|)
operator|+
name|dst
operator|*
operator|(
literal|255
operator|-
name|sa
operator|)
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_Lighten_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_solid_Lighten_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sr
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sg
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sb
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|lighten_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|sr
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|sg
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_Lighten
name|void
name|QT_FASTCALL
name|comp_func_solid_Lighten
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_Lighten_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_Lighten_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_Lighten_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_Lighten_impl
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|lighten_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Lighten
name|void
name|QT_FASTCALL
name|comp_func_Lighten
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_Lighten_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_Lighten_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*    if Sca.Da + Dca.Sa>= Sa.Da        Dca' = Sa.Da + Sca.(1 - Da) + Dca.(1 - Sa)    otherwise        Dca' = Dca.Sa/(1-Sca/Sa) + Sca.(1 - Da) + Dca.(1 - Sa) */
end_comment
begin_function
DECL|function|color_dodge_op
specifier|static
specifier|inline
name|int
name|color_dodge_op
parameter_list|(
name|int
name|dst
parameter_list|,
name|int
name|src
parameter_list|,
name|int
name|da
parameter_list|,
name|int
name|sa
parameter_list|)
block|{
specifier|const
name|int
name|sa_da
init|=
name|sa
operator|*
name|da
decl_stmt|;
specifier|const
name|int
name|dst_sa
init|=
name|dst
operator|*
name|sa
decl_stmt|;
specifier|const
name|int
name|src_da
init|=
name|src
operator|*
name|da
decl_stmt|;
specifier|const
name|int
name|temp
init|=
name|src
operator|*
operator|(
literal|255
operator|-
name|da
operator|)
operator|+
name|dst
operator|*
operator|(
literal|255
operator|-
name|sa
operator|)
decl_stmt|;
if|if
condition|(
name|src_da
operator|+
name|dst_sa
operator|>=
name|sa_da
condition|)
return|return
name|qt_div_255
argument_list|(
name|sa_da
operator|+
name|temp
argument_list|)
return|;
else|else
return|return
name|qt_div_255
argument_list|(
literal|255
operator|*
name|dst_sa
operator|/
operator|(
literal|255
operator|-
literal|255
operator|*
name|src
operator|/
name|sa
operator|)
operator|+
name|temp
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_ColorDodge_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_solid_ColorDodge_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sr
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sg
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sb
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|color_dodge_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|sr
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|sg
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_ColorDodge
name|void
name|QT_FASTCALL
name|comp_func_solid_ColorDodge
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_ColorDodge_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_ColorDodge_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_ColorDodge_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_ColorDodge_impl
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|color_dodge_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_ColorDodge
name|void
name|QT_FASTCALL
name|comp_func_ColorDodge
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_ColorDodge_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_ColorDodge_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*    if Sca.Da + Dca.Sa<= Sa.Da        Dca' = Sca.(1 - Da) + Dca.(1 - Sa)    otherwise        Dca' = Sa.(Sca.Da + Dca.Sa - Sa.Da)/Sca + Sca.(1 - Da) + Dca.(1 - Sa) */
end_comment
begin_function
DECL|function|color_burn_op
specifier|static
specifier|inline
name|int
name|color_burn_op
parameter_list|(
name|int
name|dst
parameter_list|,
name|int
name|src
parameter_list|,
name|int
name|da
parameter_list|,
name|int
name|sa
parameter_list|)
block|{
specifier|const
name|int
name|src_da
init|=
name|src
operator|*
name|da
decl_stmt|;
specifier|const
name|int
name|dst_sa
init|=
name|dst
operator|*
name|sa
decl_stmt|;
specifier|const
name|int
name|sa_da
init|=
name|sa
operator|*
name|da
decl_stmt|;
specifier|const
name|int
name|temp
init|=
name|src
operator|*
operator|(
literal|255
operator|-
name|da
operator|)
operator|+
name|dst
operator|*
operator|(
literal|255
operator|-
name|sa
operator|)
decl_stmt|;
if|if
condition|(
name|src
operator|==
literal|0
operator|||
name|src_da
operator|+
name|dst_sa
operator|<=
name|sa_da
condition|)
return|return
name|qt_div_255
argument_list|(
name|temp
argument_list|)
return|;
return|return
name|qt_div_255
argument_list|(
name|sa
operator|*
operator|(
name|src_da
operator|+
name|dst_sa
operator|-
name|sa_da
operator|)
operator|/
name|src
operator|+
name|temp
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_ColorBurn_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_solid_ColorBurn_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sr
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sg
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sb
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|color_burn_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|sr
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|sg
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_ColorBurn
name|void
name|QT_FASTCALL
name|comp_func_solid_ColorBurn
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_ColorBurn_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_ColorBurn_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_ColorBurn_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_ColorBurn_impl
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|color_burn_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_ColorBurn
name|void
name|QT_FASTCALL
name|comp_func_ColorBurn
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_ColorBurn_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_ColorBurn_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     if 2.Sca< Sa         Dca' = 2.Sca.Dca + Sca.(1 - Da) + Dca.(1 - Sa)     otherwise         Dca' = Sa.Da - 2.(Da - Dca).(Sa - Sca) + Sca.(1 - Da) + Dca.(1 - Sa) */
end_comment
begin_function
DECL|function|hardlight_op
specifier|static
specifier|inline
name|uint
name|hardlight_op
parameter_list|(
name|int
name|dst
parameter_list|,
name|int
name|src
parameter_list|,
name|int
name|da
parameter_list|,
name|int
name|sa
parameter_list|)
block|{
specifier|const
name|uint
name|temp
init|=
name|src
operator|*
operator|(
literal|255
operator|-
name|da
operator|)
operator|+
name|dst
operator|*
operator|(
literal|255
operator|-
name|sa
operator|)
decl_stmt|;
if|if
condition|(
literal|2
operator|*
name|src
operator|<
name|sa
condition|)
return|return
name|qt_div_255
argument_list|(
literal|2
operator|*
name|src
operator|*
name|dst
operator|+
name|temp
argument_list|)
return|;
else|else
return|return
name|qt_div_255
argument_list|(
name|sa
operator|*
name|da
operator|-
literal|2
operator|*
operator|(
name|da
operator|-
name|dst
operator|)
operator|*
operator|(
name|sa
operator|-
name|src
operator|)
operator|+
name|temp
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_HardLight_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_solid_HardLight_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sr
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sg
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sb
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|hardlight_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|sr
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|sg
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_HardLight
name|void
name|QT_FASTCALL
name|comp_func_solid_HardLight
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_HardLight_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_HardLight_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_HardLight_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_HardLight_impl
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|hardlight_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_HardLight
name|void
name|QT_FASTCALL
name|comp_func_HardLight
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_HardLight_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_HardLight_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     if 2.Sca<= Sa         Dca' = Dca.(Sa + (2.Sca - Sa).(1 - Dca/Da)) + Sca.(1 - Da) + Dca.(1 - Sa)     otherwise if 2.Sca> Sa and 4.Dca<= Da         Dca' = Dca.Sa + Da.(2.Sca - Sa).(4.Dca/Da.(4.Dca/Da + 1).(Dca/Da - 1) + 7.Dca/Da) + Sca.(1 - Da) + Dca.(1 - Sa)     otherwise if 2.Sca> Sa and 4.Dca> Da         Dca' = Dca.Sa + Da.(2.Sca - Sa).((Dca/Da)^0.5 - Dca/Da) + Sca.(1 - Da) + Dca.(1 - Sa) */
end_comment
begin_function
DECL|function|soft_light_op
specifier|static
specifier|inline
name|int
name|soft_light_op
parameter_list|(
name|int
name|dst
parameter_list|,
name|int
name|src
parameter_list|,
name|int
name|da
parameter_list|,
name|int
name|sa
parameter_list|)
block|{
specifier|const
name|int
name|src2
init|=
name|src
operator|<<
literal|1
decl_stmt|;
specifier|const
name|int
name|dst_np
init|=
name|da
operator|!=
literal|0
condition|?
operator|(
literal|255
operator|*
name|dst
operator|)
operator|/
name|da
else|:
literal|0
decl_stmt|;
specifier|const
name|int
name|temp
init|=
operator|(
name|src
operator|*
operator|(
literal|255
operator|-
name|da
operator|)
operator|+
name|dst
operator|*
operator|(
literal|255
operator|-
name|sa
operator|)
operator|)
operator|*
literal|255
decl_stmt|;
if|if
condition|(
name|src2
operator|<
name|sa
condition|)
return|return
operator|(
name|dst
operator|*
operator|(
name|sa
operator|*
literal|255
operator|+
operator|(
name|src2
operator|-
name|sa
operator|)
operator|*
operator|(
literal|255
operator|-
name|dst_np
operator|)
operator|)
operator|+
name|temp
operator|)
operator|/
literal|65025
return|;
elseif|else
if|if
condition|(
literal|4
operator|*
name|dst
operator|<=
name|da
condition|)
return|return
operator|(
name|dst
operator|*
name|sa
operator|*
literal|255
operator|+
name|da
operator|*
operator|(
name|src2
operator|-
name|sa
operator|)
operator|*
operator|(
operator|(
operator|(
operator|(
literal|16
operator|*
name|dst_np
operator|-
literal|12
operator|*
literal|255
operator|)
operator|*
name|dst_np
operator|+
literal|3
operator|*
literal|65025
operator|)
operator|*
name|dst_np
operator|)
operator|/
literal|65025
operator|)
operator|+
name|temp
operator|)
operator|/
literal|65025
return|;
else|else
block|{
return|return
operator|(
name|dst
operator|*
name|sa
operator|*
literal|255
operator|+
name|da
operator|*
operator|(
name|src2
operator|-
name|sa
operator|)
operator|*
operator|(
name|int
argument_list|(
name|qSqrt
argument_list|(
name|qreal
argument_list|(
name|dst_np
operator|*
literal|255
argument_list|)
argument_list|)
argument_list|)
operator|-
name|dst_np
operator|)
operator|+
name|temp
operator|)
operator|/
literal|65025
return|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_SoftLight_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_solid_SoftLight_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sr
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sg
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sb
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|soft_light_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|sr
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|sg
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_SoftLight
name|void
name|QT_FASTCALL
name|comp_func_solid_SoftLight
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_SoftLight_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_SoftLight_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_SoftLight_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_SoftLight_impl
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|soft_light_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_SoftLight
name|void
name|QT_FASTCALL
name|comp_func_SoftLight
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_SoftLight_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_SoftLight_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*    Dca' = abs(Dca.Sa - Sca.Da) + Sca.(1 - Da) + Dca.(1 - Sa)         = Sca + Dca - 2.min(Sca.Da, Dca.Sa) */
end_comment
begin_function
DECL|function|difference_op
specifier|static
specifier|inline
name|int
name|difference_op
parameter_list|(
name|int
name|dst
parameter_list|,
name|int
name|src
parameter_list|,
name|int
name|da
parameter_list|,
name|int
name|sa
parameter_list|)
block|{
return|return
name|src
operator|+
name|dst
operator|-
name|qt_div_255
argument_list|(
literal|2
operator|*
name|qMin
argument_list|(
name|src
operator|*
name|da
argument_list|,
name|dst
operator|*
name|sa
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_Difference_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_solid_Difference_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sr
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sg
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sb
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|difference_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|sr
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|sg
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_Difference
name|void
name|QT_FASTCALL
name|comp_func_solid_Difference
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_Difference_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_Difference_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_Difference_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_Difference_impl
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|difference_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Difference
name|void
name|QT_FASTCALL
name|comp_func_Difference
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_Difference_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_Difference_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Dca' = (Sca.Da + Dca.Sa - 2.Sca.Dca) + Sca.(1 - Da) + Dca.(1 - Sa) */
end_comment
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_Exclusion_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|QT_FASTCALL
name|comp_func_solid_Exclusion_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sr
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sg
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sb
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|(a + b - qt_div_255(2*(a*b)))
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|sr
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|sg
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_Exclusion
name|void
name|QT_FASTCALL
name|comp_func_solid_Exclusion
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_Exclusion_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_Exclusion_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_Exclusion_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_Exclusion_impl
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|(a + b - ((a*b)>> 7))
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Exclusion
name|void
name|QT_FASTCALL
name|comp_func_Exclusion
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_Exclusion_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_Exclusion_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rasterop_solid_SourceOrDestination
name|void
name|QT_FASTCALL
name|rasterop_solid_SourceOrDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
operator|*
name|dest
operator|++
operator||=
name|color
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rasterop_SourceOrDestination
name|void
name|QT_FASTCALL
name|rasterop_SourceOrDestination
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
operator|*
name|dest
operator|++
operator||=
operator|*
name|src
operator|++
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rasterop_solid_SourceAndDestination
name|void
name|QT_FASTCALL
name|rasterop_solid_SourceAndDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
name|color
operator||=
literal|0xff000000
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
operator|*
name|dest
operator|++
operator|&=
name|color
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rasterop_SourceAndDestination
name|void
name|QT_FASTCALL
name|rasterop_SourceAndDestination
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
operator|(
operator|*
name|src
operator|&
operator|*
name|dest
operator|)
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|dest
expr_stmt|;
operator|++
name|src
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_solid_SourceXorDestination
name|void
name|QT_FASTCALL
name|rasterop_solid_SourceXorDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
name|color
operator|&=
literal|0x00ffffff
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
operator|*
name|dest
operator|++
operator|^=
name|color
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rasterop_SourceXorDestination
name|void
name|QT_FASTCALL
name|rasterop_SourceXorDestination
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
operator|(
operator|*
name|src
operator|^
operator|*
name|dest
operator|)
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|dest
expr_stmt|;
operator|++
name|src
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_solid_NotSourceAndNotDestination
name|void
name|QT_FASTCALL
name|rasterop_solid_NotSourceAndNotDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
name|color
operator|=
operator|~
name|color
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
operator|(
name|color
operator|&
operator|~
operator|(
operator|*
name|dest
operator|)
operator|)
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|dest
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_NotSourceAndNotDestination
name|void
name|QT_FASTCALL
name|rasterop_NotSourceAndNotDestination
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
operator|(
operator|~
operator|(
operator|*
name|src
operator|)
operator|&
operator|~
operator|(
operator|*
name|dest
operator|)
operator|)
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|dest
expr_stmt|;
operator|++
name|src
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_solid_NotSourceOrNotDestination
name|void
name|QT_FASTCALL
name|rasterop_solid_NotSourceOrNotDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
name|color
operator|=
operator|~
name|color
operator||
literal|0xff000000
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
name|color
operator||
operator|~
operator|(
operator|*
name|dest
operator|)
expr_stmt|;
operator|++
name|dest
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_NotSourceOrNotDestination
name|void
name|QT_FASTCALL
name|rasterop_NotSourceOrNotDestination
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
operator|~
operator|(
operator|*
name|src
operator|)
operator||
operator|~
operator|(
operator|*
name|dest
operator|)
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|dest
expr_stmt|;
operator|++
name|src
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_solid_NotSourceXorDestination
name|void
name|QT_FASTCALL
name|rasterop_solid_NotSourceXorDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
name|color
operator|=
operator|~
name|color
operator|&
literal|0x00ffffff
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
name|color
operator|^
operator|(
operator|*
name|dest
operator|)
expr_stmt|;
operator|++
name|dest
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_NotSourceXorDestination
name|void
name|QT_FASTCALL
name|rasterop_NotSourceXorDestination
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
operator|(
operator|(
operator|~
operator|(
operator|*
name|src
operator|)
operator|)
operator|^
operator|(
operator|*
name|dest
operator|)
operator|)
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|dest
expr_stmt|;
operator|++
name|src
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_solid_NotSource
name|void
name|QT_FASTCALL
name|rasterop_solid_NotSource
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
name|qt_memfill
argument_list|(
name|dest
argument_list|,
operator|~
name|color
operator||
literal|0xff000000
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rasterop_NotSource
name|void
name|QT_FASTCALL
name|rasterop_NotSource
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
operator|*
name|dest
operator|++
operator|=
operator|~
operator|(
operator|*
name|src
operator|++
operator|)
operator||
literal|0xff000000
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rasterop_solid_NotSourceAndDestination
name|void
name|QT_FASTCALL
name|rasterop_solid_NotSourceAndDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
name|color
operator|=
operator|~
name|color
operator||
literal|0xff000000
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
name|color
operator|&
operator|*
name|dest
expr_stmt|;
operator|++
name|dest
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_NotSourceAndDestination
name|void
name|QT_FASTCALL
name|rasterop_NotSourceAndDestination
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
operator|(
operator|~
operator|(
operator|*
name|src
operator|)
operator|&
operator|*
name|dest
operator|)
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|dest
expr_stmt|;
operator|++
name|src
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_solid_SourceAndNotDestination
name|void
name|QT_FASTCALL
name|rasterop_solid_SourceAndNotDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
operator|(
name|color
operator|&
operator|~
operator|(
operator|*
name|dest
operator|)
operator|)
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|dest
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_SourceAndNotDestination
name|void
name|QT_FASTCALL
name|rasterop_SourceAndNotDestination
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
operator|(
operator|*
name|src
operator|&
operator|~
operator|(
operator|*
name|dest
operator|)
operator|)
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|dest
expr_stmt|;
operator|++
name|src
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_NotSourceOrDestination
name|void
name|QT_FASTCALL
name|rasterop_NotSourceOrDestination
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
operator|(
operator|~
operator|(
operator|*
name|src
operator|)
operator||
operator|*
name|dest
operator|)
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|dest
expr_stmt|;
operator|++
name|src
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_solid_NotSourceOrDestination
name|void
name|QT_FASTCALL
name|rasterop_solid_NotSourceOrDestination
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
name|color
operator|=
operator|~
name|color
operator||
literal|0xff000000
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
operator|*
name|dest
operator|++
operator||=
name|color
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rasterop_SourceOrNotDestination
name|void
name|QT_FASTCALL
name|rasterop_SourceOrNotDestination
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
operator|(
operator|*
name|src
operator||
operator|~
operator|(
operator|*
name|dest
operator|)
operator|)
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|dest
expr_stmt|;
operator|++
name|src
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_solid_SourceOrNotDestination
name|void
name|QT_FASTCALL
name|rasterop_solid_SourceOrNotDestination
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
operator|(
name|color
operator||
operator|~
operator|(
operator|*
name|dest
operator|)
operator|)
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|dest
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_ClearDestination
name|void
name|QT_FASTCALL
name|rasterop_ClearDestination
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|comp_func_solid_SourceOver
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
literal|0xff000000
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rasterop_solid_ClearDestination
name|void
name|QT_FASTCALL
name|rasterop_solid_ClearDestination
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|comp_func_solid_SourceOver
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
literal|0xff000000
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rasterop_SetDestination
name|void
name|QT_FASTCALL
name|rasterop_SetDestination
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|comp_func_solid_SourceOver
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
literal|0xffffffff
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rasterop_solid_SetDestination
name|void
name|QT_FASTCALL
name|rasterop_solid_SetDestination
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|comp_func_solid_SourceOver
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
literal|0xffffffff
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rasterop_NotDestination
name|void
name|QT_FASTCALL
name|rasterop_NotDestination
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|rasterop_solid_SourceXorDestination
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
literal|0x00ffffff
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rasterop_solid_NotDestination
name|void
name|QT_FASTCALL
name|rasterop_solid_NotDestination
parameter_list|(
name|uint
modifier|*
name|Q_DECL_RESTRICT
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|rasterop_solid_SourceXorDestination
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
literal|0x00ffffff
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|qt_functionForModeSolid_C
name|CompositionFunctionSolid
name|qt_functionForModeSolid_C
index|[]
init|=
block|{
name|comp_func_solid_SourceOver
block|,
name|comp_func_solid_DestinationOver
block|,
name|comp_func_solid_Clear
block|,
name|comp_func_solid_Source
block|,
name|comp_func_solid_Destination
block|,
name|comp_func_solid_SourceIn
block|,
name|comp_func_solid_DestinationIn
block|,
name|comp_func_solid_SourceOut
block|,
name|comp_func_solid_DestinationOut
block|,
name|comp_func_solid_SourceAtop
block|,
name|comp_func_solid_DestinationAtop
block|,
name|comp_func_solid_XOR
block|,
name|comp_func_solid_Plus
block|,
name|comp_func_solid_Multiply
block|,
name|comp_func_solid_Screen
block|,
name|comp_func_solid_Overlay
block|,
name|comp_func_solid_Darken
block|,
name|comp_func_solid_Lighten
block|,
name|comp_func_solid_ColorDodge
block|,
name|comp_func_solid_ColorBurn
block|,
name|comp_func_solid_HardLight
block|,
name|comp_func_solid_SoftLight
block|,
name|comp_func_solid_Difference
block|,
name|comp_func_solid_Exclusion
block|,
name|rasterop_solid_SourceOrDestination
block|,
name|rasterop_solid_SourceAndDestination
block|,
name|rasterop_solid_SourceXorDestination
block|,
name|rasterop_solid_NotSourceAndNotDestination
block|,
name|rasterop_solid_NotSourceOrNotDestination
block|,
name|rasterop_solid_NotSourceXorDestination
block|,
name|rasterop_solid_NotSource
block|,
name|rasterop_solid_NotSourceAndDestination
block|,
name|rasterop_solid_SourceAndNotDestination
block|,
name|rasterop_solid_NotSourceOrDestination
block|,
name|rasterop_solid_SourceOrNotDestination
block|,
name|rasterop_solid_ClearDestination
block|,
name|rasterop_solid_SetDestination
block|,
name|rasterop_solid_NotDestination
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_functionForModeSolid64_C
name|CompositionFunctionSolid64
name|qt_functionForModeSolid64_C
index|[]
init|=
block|{
name|comp_func_solid_SourceOver_rgb64
block|,
name|comp_func_solid_DestinationOver_rgb64
block|,
name|comp_func_solid_Clear_rgb64
block|,
name|comp_func_solid_Source_rgb64
block|,
name|comp_func_solid_Destination_rgb64
block|,
name|comp_func_solid_SourceIn_rgb64
block|,
name|comp_func_solid_DestinationIn_rgb64
block|,
name|comp_func_solid_SourceOut_rgb64
block|,
name|comp_func_solid_DestinationOut_rgb64
block|,
name|comp_func_solid_SourceAtop_rgb64
block|,
name|comp_func_solid_DestinationAtop_rgb64
block|,
name|comp_func_solid_XOR_rgb64
block|,
name|comp_func_solid_Plus_rgb64
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_functionForMode_C
name|CompositionFunction
name|qt_functionForMode_C
index|[]
init|=
block|{
name|comp_func_SourceOver
block|,
name|comp_func_DestinationOver
block|,
name|comp_func_Clear
block|,
name|comp_func_Source
block|,
name|comp_func_Destination
block|,
name|comp_func_SourceIn
block|,
name|comp_func_DestinationIn
block|,
name|comp_func_SourceOut
block|,
name|comp_func_DestinationOut
block|,
name|comp_func_SourceAtop
block|,
name|comp_func_DestinationAtop
block|,
name|comp_func_XOR
block|,
name|comp_func_Plus
block|,
name|comp_func_Multiply
block|,
name|comp_func_Screen
block|,
name|comp_func_Overlay
block|,
name|comp_func_Darken
block|,
name|comp_func_Lighten
block|,
name|comp_func_ColorDodge
block|,
name|comp_func_ColorBurn
block|,
name|comp_func_HardLight
block|,
name|comp_func_SoftLight
block|,
name|comp_func_Difference
block|,
name|comp_func_Exclusion
block|,
name|rasterop_SourceOrDestination
block|,
name|rasterop_SourceAndDestination
block|,
name|rasterop_SourceXorDestination
block|,
name|rasterop_NotSourceAndNotDestination
block|,
name|rasterop_NotSourceOrNotDestination
block|,
name|rasterop_NotSourceXorDestination
block|,
name|rasterop_NotSource
block|,
name|rasterop_NotSourceAndDestination
block|,
name|rasterop_SourceAndNotDestination
block|,
name|rasterop_NotSourceOrDestination
block|,
name|rasterop_SourceOrNotDestination
block|,
name|rasterop_ClearDestination
block|,
name|rasterop_SetDestination
block|,
name|rasterop_NotDestination
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_functionForMode64_C
name|CompositionFunction64
name|qt_functionForMode64_C
index|[]
init|=
block|{
name|comp_func_SourceOver_rgb64
block|,
name|comp_func_DestinationOver_rgb64
block|,
name|comp_func_Clear_rgb64
block|,
name|comp_func_Source_rgb64
block|,
name|comp_func_Destination_rgb64
block|,
name|comp_func_SourceIn_rgb64
block|,
name|comp_func_DestinationIn_rgb64
block|,
name|comp_func_SourceOut_rgb64
block|,
name|comp_func_DestinationOut_rgb64
block|,
name|comp_func_SourceAtop_rgb64
block|,
name|comp_func_DestinationAtop_rgb64
block|,
name|comp_func_XOR_rgb64
block|,
name|comp_func_Plus_rgb64
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
