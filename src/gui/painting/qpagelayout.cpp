begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 John Layt<jlayt@kde.org> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qpagelayout.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qpoint.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qrect.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qsize.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|// Multiplier for converting units to points.
DECL|function|qt_pointMultiplier
name|Q_GUI_EXPORT
name|qreal
name|qt_pointMultiplier
parameter_list|(
name|QPageLayout
operator|::
name|Unit
name|unit
parameter_list|)
block|{
switch|switch
condition|(
name|unit
condition|)
block|{
case|case
name|QPageLayout
operator|::
name|Millimeter
case|:
return|return
literal|2.83464566929
return|;
case|case
name|QPageLayout
operator|::
name|Point
case|:
return|return
literal|1.0
return|;
case|case
name|QPageLayout
operator|::
name|Inch
case|:
return|return
literal|72.0
return|;
case|case
name|QPageLayout
operator|::
name|Pica
case|:
return|return
literal|12
return|;
case|case
name|QPageLayout
operator|::
name|Didot
case|:
return|return
literal|1.065826771
return|;
case|case
name|QPageLayout
operator|::
name|Cicero
case|:
return|return
literal|12.789921252
return|;
block|}
return|return
literal|1.0
return|;
block|}
end_function
begin_comment
comment|// Multiplier for converting pixels to points.
end_comment
begin_function_decl
specifier|extern
name|qreal
name|qt_pixelMultiplier
parameter_list|(
name|int
name|resolution
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|qt_convertPoint
name|QPointF
name|qt_convertPoint
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|xy
parameter_list|,
name|QPageLayout
operator|::
name|Unit
name|fromUnits
parameter_list|,
name|QPageLayout
operator|::
name|Unit
name|toUnits
parameter_list|)
block|{
comment|// If the size have the same units, or are all 0, then don't need to convert
if|if
condition|(
name|fromUnits
operator|==
name|toUnits
operator|||
name|xy
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|xy
return|;
comment|// If converting to points then convert and round to 0 decimal places
if|if
condition|(
name|toUnits
operator|==
name|QPageLayout
operator|::
name|Point
condition|)
block|{
specifier|const
name|qreal
name|multiplier
init|=
name|qt_pointMultiplier
argument_list|(
name|fromUnits
argument_list|)
decl_stmt|;
return|return
name|QPointF
argument_list|(
name|qRound
argument_list|(
name|xy
operator|.
name|x
argument_list|()
operator|*
name|multiplier
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|xy
operator|.
name|y
argument_list|()
operator|*
name|multiplier
argument_list|)
argument_list|)
return|;
block|}
comment|// If converting to other units, need to convert to unrounded points first
name|QPointF
name|pointXy
init|=
operator|(
name|fromUnits
operator|==
name|QPageLayout
operator|::
name|Point
operator|)
condition|?
name|xy
else|:
name|xy
operator|*
name|qt_pointMultiplier
argument_list|(
name|fromUnits
argument_list|)
decl_stmt|;
comment|// Then convert from points to required units rounded to 2 decimal places
specifier|const
name|qreal
name|multiplier
init|=
name|qt_pointMultiplier
argument_list|(
name|toUnits
argument_list|)
decl_stmt|;
return|return
name|QPointF
argument_list|(
name|qRound
argument_list|(
name|pointXy
operator|.
name|x
argument_list|()
operator|*
literal|100
operator|/
name|multiplier
argument_list|)
operator|/
literal|100.0
argument_list|,
name|qRound
argument_list|(
name|pointXy
operator|.
name|y
argument_list|()
operator|*
literal|100
operator|/
name|multiplier
argument_list|)
operator|/
literal|100.0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_convertMargins
name|Q_GUI_EXPORT
name|QMarginsF
name|qt_convertMargins
parameter_list|(
specifier|const
name|QMarginsF
modifier|&
name|margins
parameter_list|,
name|QPageLayout
operator|::
name|Unit
name|fromUnits
parameter_list|,
name|QPageLayout
operator|::
name|Unit
name|toUnits
parameter_list|)
block|{
comment|// If the margins have the same units, or are all 0, then don't need to convert
if|if
condition|(
name|fromUnits
operator|==
name|toUnits
operator|||
name|margins
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|margins
return|;
comment|// If converting to points then convert and round to 0 decimal places
if|if
condition|(
name|toUnits
operator|==
name|QPageLayout
operator|::
name|Point
condition|)
block|{
specifier|const
name|qreal
name|multiplier
init|=
name|qt_pointMultiplier
argument_list|(
name|fromUnits
argument_list|)
decl_stmt|;
return|return
name|QMarginsF
argument_list|(
name|qRound
argument_list|(
name|margins
operator|.
name|left
argument_list|()
operator|*
name|multiplier
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|margins
operator|.
name|top
argument_list|()
operator|*
name|multiplier
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|margins
operator|.
name|right
argument_list|()
operator|*
name|multiplier
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|margins
operator|.
name|bottom
argument_list|()
operator|*
name|multiplier
argument_list|)
argument_list|)
return|;
block|}
comment|// If converting to other units, need to convert to unrounded points first
name|QMarginsF
name|pointMargins
init|=
name|fromUnits
operator|==
name|QPageLayout
operator|::
name|Point
condition|?
name|margins
else|:
name|margins
operator|*
name|qt_pointMultiplier
argument_list|(
name|fromUnits
argument_list|)
decl_stmt|;
comment|// Then convert from points to required units rounded to 2 decimal places
specifier|const
name|qreal
name|multiplier
init|=
name|qt_pointMultiplier
argument_list|(
name|toUnits
argument_list|)
decl_stmt|;
return|return
name|QMarginsF
argument_list|(
name|qRound
argument_list|(
name|pointMargins
operator|.
name|left
argument_list|()
operator|*
literal|100
operator|/
name|multiplier
argument_list|)
operator|/
literal|100.0
argument_list|,
name|qRound
argument_list|(
name|pointMargins
operator|.
name|top
argument_list|()
operator|*
literal|100
operator|/
name|multiplier
argument_list|)
operator|/
literal|100.0
argument_list|,
name|qRound
argument_list|(
name|pointMargins
operator|.
name|right
argument_list|()
operator|*
literal|100
operator|/
name|multiplier
argument_list|)
operator|/
literal|100.0
argument_list|,
name|qRound
argument_list|(
name|pointMargins
operator|.
name|bottom
argument_list|()
operator|*
literal|100
operator|/
name|multiplier
argument_list|)
operator|/
literal|100.0
argument_list|)
return|;
block|}
end_function
begin_class
DECL|class|QPageLayoutPrivate
class|class
name|QPageLayoutPrivate
super|:
specifier|public
name|QSharedData
block|{
public|public:
name|QPageLayoutPrivate
parameter_list|()
constructor_decl|;
name|QPageLayoutPrivate
parameter_list|(
specifier|const
name|QPageSize
modifier|&
name|pageSize
parameter_list|,
name|QPageLayout
operator|::
name|Orientation
name|orientation
parameter_list|,
specifier|const
name|QMarginsF
modifier|&
name|margins
parameter_list|,
name|QPageLayout
operator|::
name|Unit
name|units
parameter_list|,
specifier|const
name|QMarginsF
modifier|&
name|minMargins
parameter_list|)
constructor_decl|;
name|~
name|QPageLayoutPrivate
parameter_list|()
destructor_decl|;
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|QPageLayoutPrivate
modifier|&
name|other
parameter_list|)
specifier|const
function_decl|;
name|bool
name|isEquivalentTo
parameter_list|(
specifier|const
name|QPageLayoutPrivate
modifier|&
name|other
parameter_list|)
specifier|const
function_decl|;
name|bool
name|isValid
parameter_list|()
specifier|const
function_decl|;
name|void
name|clampMargins
parameter_list|(
specifier|const
name|QMarginsF
modifier|&
name|margins
parameter_list|)
function_decl|;
name|QMarginsF
name|margins
parameter_list|(
name|QPageLayout
operator|::
name|Unit
name|units
parameter_list|)
specifier|const
function_decl|;
name|QMargins
name|marginsPoints
parameter_list|()
specifier|const
function_decl|;
name|QMargins
name|marginsPixels
parameter_list|(
name|int
name|resolution
parameter_list|)
specifier|const
function_decl|;
name|void
name|setDefaultMargins
parameter_list|(
specifier|const
name|QMarginsF
modifier|&
name|minMargins
parameter_list|)
function_decl|;
name|QSizeF
name|paintSize
parameter_list|()
specifier|const
function_decl|;
name|QRectF
name|fullRect
parameter_list|()
specifier|const
function_decl|;
name|QRectF
name|fullRect
parameter_list|(
name|QPageLayout
operator|::
name|Unit
name|units
parameter_list|)
specifier|const
function_decl|;
name|QRect
name|fullRectPoints
parameter_list|()
specifier|const
function_decl|;
name|QRect
name|fullRectPixels
parameter_list|(
name|int
name|resolution
parameter_list|)
specifier|const
function_decl|;
name|QRectF
name|paintRect
parameter_list|()
specifier|const
function_decl|;
private|private:
friend|friend
class_decl|class
name|QPageLayout
class_decl|;
name|QSizeF
name|fullSizeUnits
parameter_list|(
name|QPageLayout
operator|::
name|Unit
name|units
parameter_list|)
specifier|const
function_decl|;
DECL|member|m_pageSize
name|QPageSize
name|m_pageSize
decl_stmt|;
DECL|member|m_orientation
name|QPageLayout
operator|::
name|Orientation
name|m_orientation
decl_stmt|;
DECL|member|m_mode
name|QPageLayout
operator|::
name|Mode
name|m_mode
decl_stmt|;
DECL|member|m_units
name|QPageLayout
operator|::
name|Unit
name|m_units
decl_stmt|;
DECL|member|m_fullSize
name|QSizeF
name|m_fullSize
decl_stmt|;
DECL|member|m_margins
name|QMarginsF
name|m_margins
decl_stmt|;
DECL|member|m_minMargins
name|QMarginsF
name|m_minMargins
decl_stmt|;
DECL|member|m_maxMargins
name|QMarginsF
name|m_maxMargins
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QPageLayoutPrivate
name|QPageLayoutPrivate
operator|::
name|QPageLayoutPrivate
parameter_list|()
member_init_list|:
name|m_orientation
argument_list|(
name|QPageLayout
operator|::
name|Landscape
argument_list|)
member_init_list|,
name|m_mode
argument_list|(
name|QPageLayout
operator|::
name|StandardMode
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|QPageLayoutPrivate
name|QPageLayoutPrivate
operator|::
name|QPageLayoutPrivate
parameter_list|(
specifier|const
name|QPageSize
modifier|&
name|pageSize
parameter_list|,
name|QPageLayout
operator|::
name|Orientation
name|orientation
parameter_list|,
specifier|const
name|QMarginsF
modifier|&
name|margins
parameter_list|,
name|QPageLayout
operator|::
name|Unit
name|units
parameter_list|,
specifier|const
name|QMarginsF
modifier|&
name|minMargins
parameter_list|)
member_init_list|:
name|m_pageSize
argument_list|(
name|pageSize
argument_list|)
member_init_list|,
name|m_orientation
argument_list|(
name|orientation
argument_list|)
member_init_list|,
name|m_mode
argument_list|(
name|QPageLayout
operator|::
name|StandardMode
argument_list|)
member_init_list|,
name|m_units
argument_list|(
name|units
argument_list|)
member_init_list|,
name|m_margins
argument_list|(
name|margins
argument_list|)
block|{
name|m_fullSize
operator|=
name|fullSizeUnits
argument_list|(
name|m_units
argument_list|)
expr_stmt|;
name|setDefaultMargins
argument_list|(
name|minMargins
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QPageLayoutPrivate
name|QPageLayoutPrivate
operator|::
name|~
name|QPageLayoutPrivate
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|operator ==
name|bool
name|QPageLayoutPrivate
operator|::
name|operator
name|==
parameter_list|(
specifier|const
name|QPageLayoutPrivate
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|m_pageSize
operator|==
name|other
operator|.
name|m_pageSize
operator|&&
name|m_orientation
operator|==
name|other
operator|.
name|m_orientation
operator|&&
name|m_units
operator|==
name|other
operator|.
name|m_units
operator|&&
name|m_margins
operator|==
name|other
operator|.
name|m_margins
operator|&&
name|m_minMargins
operator|==
name|other
operator|.
name|m_minMargins
operator|&&
name|m_maxMargins
operator|==
name|other
operator|.
name|m_maxMargins
return|;
block|}
end_function
begin_function
DECL|function|isEquivalentTo
name|bool
name|QPageLayoutPrivate
operator|::
name|isEquivalentTo
parameter_list|(
specifier|const
name|QPageLayoutPrivate
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|m_pageSize
operator|.
name|isEquivalentTo
argument_list|(
name|other
operator|.
name|m_pageSize
argument_list|)
operator|&&
name|m_orientation
operator|==
name|other
operator|.
name|m_orientation
operator|&&
name|qt_convertMargins
argument_list|(
name|m_margins
argument_list|,
name|m_units
argument_list|,
name|QPageLayout
operator|::
name|Point
argument_list|)
operator|==
name|qt_convertMargins
argument_list|(
name|other
operator|.
name|m_margins
argument_list|,
name|other
operator|.
name|m_units
argument_list|,
name|QPageLayout
operator|::
name|Point
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isValid
name|bool
name|QPageLayoutPrivate
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
name|m_pageSize
operator|.
name|isValid
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|clampMargins
name|void
name|QPageLayoutPrivate
operator|::
name|clampMargins
parameter_list|(
specifier|const
name|QMarginsF
modifier|&
name|margins
parameter_list|)
block|{
name|m_margins
operator|=
name|QMarginsF
argument_list|(
name|qBound
argument_list|(
name|m_minMargins
operator|.
name|left
argument_list|()
argument_list|,
name|margins
operator|.
name|left
argument_list|()
argument_list|,
name|m_maxMargins
operator|.
name|left
argument_list|()
argument_list|)
argument_list|,
name|qBound
argument_list|(
name|m_minMargins
operator|.
name|top
argument_list|()
argument_list|,
name|margins
operator|.
name|top
argument_list|()
argument_list|,
name|m_maxMargins
operator|.
name|top
argument_list|()
argument_list|)
argument_list|,
name|qBound
argument_list|(
name|m_minMargins
operator|.
name|right
argument_list|()
argument_list|,
name|margins
operator|.
name|right
argument_list|()
argument_list|,
name|m_maxMargins
operator|.
name|right
argument_list|()
argument_list|)
argument_list|,
name|qBound
argument_list|(
name|m_minMargins
operator|.
name|bottom
argument_list|()
argument_list|,
name|margins
operator|.
name|bottom
argument_list|()
argument_list|,
name|m_maxMargins
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|margins
name|QMarginsF
name|QPageLayoutPrivate
operator|::
name|margins
parameter_list|(
name|QPageLayout
operator|::
name|Unit
name|units
parameter_list|)
specifier|const
block|{
return|return
name|qt_convertMargins
argument_list|(
name|m_margins
argument_list|,
name|m_units
argument_list|,
name|units
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|marginsPoints
name|QMargins
name|QPageLayoutPrivate
operator|::
name|marginsPoints
parameter_list|()
specifier|const
block|{
return|return
name|qt_convertMargins
argument_list|(
name|m_margins
argument_list|,
name|m_units
argument_list|,
name|QPageLayout
operator|::
name|Point
argument_list|)
operator|.
name|toMargins
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|marginsPixels
name|QMargins
name|QPageLayoutPrivate
operator|::
name|marginsPixels
parameter_list|(
name|int
name|resolution
parameter_list|)
specifier|const
block|{
return|return
name|marginsPoints
argument_list|()
operator|/
name|qt_pixelMultiplier
argument_list|(
name|resolution
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setDefaultMargins
name|void
name|QPageLayoutPrivate
operator|::
name|setDefaultMargins
parameter_list|(
specifier|const
name|QMarginsF
modifier|&
name|minMargins
parameter_list|)
block|{
name|m_minMargins
operator|=
name|minMargins
expr_stmt|;
name|m_maxMargins
operator|=
name|QMarginsF
argument_list|(
name|m_fullSize
operator|.
name|width
argument_list|()
operator|-
name|m_minMargins
operator|.
name|right
argument_list|()
argument_list|,
name|m_fullSize
operator|.
name|height
argument_list|()
operator|-
name|m_minMargins
operator|.
name|bottom
argument_list|()
argument_list|,
name|m_fullSize
operator|.
name|width
argument_list|()
operator|-
name|m_minMargins
operator|.
name|left
argument_list|()
argument_list|,
name|m_fullSize
operator|.
name|height
argument_list|()
operator|-
name|m_minMargins
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_mode
operator|==
name|QPageLayout
operator|::
name|StandardMode
condition|)
name|clampMargins
argument_list|(
name|m_margins
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fullSizeUnits
name|QSizeF
name|QPageLayoutPrivate
operator|::
name|fullSizeUnits
parameter_list|(
name|QPageLayout
operator|::
name|Unit
name|units
parameter_list|)
specifier|const
block|{
name|QSizeF
name|fullPageSize
init|=
name|m_pageSize
operator|.
name|size
argument_list|(
name|QPageSize
operator|::
name|Unit
argument_list|(
name|units
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|m_orientation
operator|==
name|QPageLayout
operator|::
name|Landscape
condition|?
name|fullPageSize
operator|.
name|transposed
argument_list|()
else|:
name|fullPageSize
return|;
block|}
end_function
begin_function
DECL|function|fullRect
name|QRectF
name|QPageLayoutPrivate
operator|::
name|fullRect
parameter_list|()
specifier|const
block|{
return|return
name|QRectF
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|m_fullSize
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fullRect
name|QRectF
name|QPageLayoutPrivate
operator|::
name|fullRect
parameter_list|(
name|QPageLayout
operator|::
name|Unit
name|units
parameter_list|)
specifier|const
block|{
return|return
name|units
operator|==
name|m_units
condition|?
name|fullRect
argument_list|()
else|:
name|QRectF
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|fullSizeUnits
argument_list|(
name|units
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fullRectPoints
name|QRect
name|QPageLayoutPrivate
operator|::
name|fullRectPoints
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_orientation
operator|==
name|QPageLayout
operator|::
name|Landscape
condition|)
return|return
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|m_pageSize
operator|.
name|sizePoints
argument_list|()
operator|.
name|transposed
argument_list|()
argument_list|)
return|;
else|else
return|return
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|m_pageSize
operator|.
name|sizePoints
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fullRectPixels
name|QRect
name|QPageLayoutPrivate
operator|::
name|fullRectPixels
parameter_list|(
name|int
name|resolution
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|m_orientation
operator|==
name|QPageLayout
operator|::
name|Landscape
condition|)
return|return
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|m_pageSize
operator|.
name|sizePixels
argument_list|(
name|resolution
argument_list|)
operator|.
name|transposed
argument_list|()
argument_list|)
return|;
else|else
return|return
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|m_pageSize
operator|.
name|sizePixels
argument_list|(
name|resolution
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|paintRect
name|QRectF
name|QPageLayoutPrivate
operator|::
name|paintRect
parameter_list|()
specifier|const
block|{
return|return
name|m_mode
operator|==
name|QPageLayout
operator|::
name|FullPageMode
condition|?
name|fullRect
argument_list|()
else|:
name|fullRect
argument_list|()
operator|-
name|m_margins
return|;
block|}
end_function
begin_comment
comment|/*!     \class QPageLayout     \inmodule QtGui     \since 5.3     \brief Describes the size, orientation and margins of a page.      The QPageLayout class defines the layout of a page in a paged document, with the     page size, orientation and margins able to be set and the full page and paintable     page rectangles defined by those attributes able to be queried in a variety of units.      The page size is defined by the QPageSize class which can be queried for page size     attributes.  Note that the QPageSize itself is always defined in a Portrait     orientation.      The minimum margins can be defined for the layout but normally default to 0.     When used in conjunction with Qt's printing support the minimum margins     will reflect the minimum printable area defined by the printer.      In the default StandardMode the current margins and minimum margins are     always taken into account.  The paintable rectangle is the full page     rectangle less the current margins, and the current margins can only be set     to values between the minimum margins and the maximum margins allowed by     the full page size.      In FullPageMode the current margins and minimum margins are not taken     into account. The paintable rectangle is the full page rectangle, and the     current margins can be set to any values regardless of the minimum margins     and page size.      \sa QPageSize */
end_comment
begin_comment
comment|/*!     \enum QPageLayout::Unit      This enum type is used to specify the measurement unit for page layout and margins.      \value Millimeter     \value Point  1/72th of an inch     \value Inch     \value Pica  1/72th of a foot, 1/6th of an inch, 12 Points     \value Didot  1/72th of a French inch, 0.375 mm     \value Cicero  1/6th of a French inch, 12 Didot, 4.5mm */
end_comment
begin_comment
comment|/*!     \enum QPageLayout::Orientation      This enum type defines the page orientation      \value Portrait The page size is used in its default orientation     \value Landscape The page size is rotated through 90 degrees      Note that some standard page sizes are defined with a width larger than     their height, hence the orientation is defined relative to the standard     page size and not using the relative page dimensions. */
end_comment
begin_comment
comment|/*!     \enum QPageLayout::Mode      Defines the page layout mode      \value StandardMode Paint Rect includes margins, margins must fall between the minimum and maximum.     \value FullPageMode Paint Rect excludes margins, margins can be any value and must be managed manually. */
end_comment
begin_comment
comment|/*!     Creates an invalid QPageLayout. */
end_comment
begin_constructor
DECL|function|QPageLayout
name|QPageLayout
operator|::
name|QPageLayout
parameter_list|()
member_init_list|:
name|d
argument_list|(
operator|new
name|QPageLayoutPrivate
argument_list|()
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Creates a QPageLayout with the given \a pageSize, \a orientation and     \a margins in the given \a units.      Optionally define the minimum allowed margins \a minMargins, e.g. the minimum     margins able to be printed by a physical print device.      The constructed QPageLayout will be in StandardMode.      The \a margins given will be clamped to the minimum margins and the maximum     margins allowed by the page size. */
end_comment
begin_constructor
DECL|function|QPageLayout
name|QPageLayout
operator|::
name|QPageLayout
parameter_list|(
specifier|const
name|QPageSize
modifier|&
name|pageSize
parameter_list|,
name|Orientation
name|orientation
parameter_list|,
specifier|const
name|QMarginsF
modifier|&
name|margins
parameter_list|,
name|Unit
name|units
parameter_list|,
specifier|const
name|QMarginsF
modifier|&
name|minMargins
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QPageLayoutPrivate
argument_list|(
name|pageSize
argument_list|,
name|orientation
argument_list|,
name|margins
argument_list|,
name|units
argument_list|,
name|minMargins
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Copy constructor, copies \a other to this. */
end_comment
begin_constructor
DECL|function|QPageLayout
name|QPageLayout
operator|::
name|QPageLayout
parameter_list|(
specifier|const
name|QPageLayout
modifier|&
name|other
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|other
operator|.
name|d
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the page layout. */
end_comment
begin_destructor
DECL|function|~QPageLayout
name|QPageLayout
operator|::
name|~
name|QPageLayout
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Assignment operator, assigns \a other to this. */
end_comment
begin_function
DECL|function|operator =
name|QPageLayout
modifier|&
name|QPageLayout
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QPageLayout
modifier|&
name|other
parameter_list|)
block|{
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QPageLayout::swap(QPageLayout&other)      Swaps this page layout with \a other. This function is very fast and     never fails. */
end_comment
begin_comment
comment|/*!     \fn QPageLayout&QPageLayout::operator=(QPageLayout&&other)      Move-assigns \a other to this QPageLayout instance, transferring the     ownership of the managed pointer to this instance. */
end_comment
begin_comment
comment|/*!     \relates QPageLayout      Returns \c true if page layout \a lhs is equal to page layout \a rhs,     i.e. if all the attributes are exactly equal.      Note that this is a strict equality, especially for page size where the     QPageSize ID, name and size must exactly match, and the margins where the     units must match.      \sa QPageLayout::isEquivalentTo() */
end_comment
begin_function
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|QPageLayout
modifier|&
name|lhs
parameter_list|,
specifier|const
name|QPageLayout
modifier|&
name|rhs
parameter_list|)
block|{
return|return
name|lhs
operator|.
name|d
operator|==
name|rhs
operator|.
name|d
operator|||
operator|*
name|lhs
operator|.
name|d
operator|==
operator|*
name|rhs
operator|.
name|d
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool operator!=(const QPageLayout&lhs, const QPageLayout&rhs)     \relates QPageLayout      Returns \c true if page layout \a lhs is not equal to page layout \a rhs,     i.e. if any of the attributes differ.      Note that this is a strict equality, especially for page size where the     QPageSize ID, name and size must exactly match, and the margins where the     units must match.      \sa QPageLayout::isEquivalentTo() */
end_comment
begin_comment
comment|/*!     Returns \c true if this page layout is equivalent to the \a other page layout,     i.e. if the page has the same size, margins and orientation. */
end_comment
begin_function
DECL|function|isEquivalentTo
name|bool
name|QPageLayout
operator|::
name|isEquivalentTo
parameter_list|(
specifier|const
name|QPageLayout
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|d
operator|&&
name|other
operator|.
name|d
operator|&&
name|d
operator|->
name|isEquivalentTo
argument_list|(
operator|*
name|other
operator|.
name|d
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if this page layout is valid. */
end_comment
begin_function
DECL|function|isValid
name|bool
name|QPageLayout
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|isValid
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets a page layout mode to \a mode. */
end_comment
begin_function
DECL|function|setMode
name|void
name|QPageLayout
operator|::
name|setMode
parameter_list|(
name|Mode
name|mode
parameter_list|)
block|{
name|d
operator|.
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_mode
operator|=
name|mode
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the page layout mode. */
end_comment
begin_function
DECL|function|mode
name|QPageLayout
operator|::
name|Mode
name|QPageLayout
operator|::
name|mode
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|m_mode
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the page size of the page layout to \a pageSize.      Optionally define the minimum allowed margins \a minMargins, e.g. the minimum     margins able to be printed by a physical print device, otherwise the     minimum margins will default to 0.      If StandardMode is set then the existing margins will be clamped     to the new minimum margins and the maximum margins allowed by the page size.     If FullPageMode is set then the existing margins will be unchanged. */
end_comment
begin_function
DECL|function|setPageSize
name|void
name|QPageLayout
operator|::
name|setPageSize
parameter_list|(
specifier|const
name|QPageSize
modifier|&
name|pageSize
parameter_list|,
specifier|const
name|QMarginsF
modifier|&
name|minMargins
parameter_list|)
block|{
if|if
condition|(
operator|!
name|pageSize
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|d
operator|.
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_pageSize
operator|=
name|pageSize
expr_stmt|;
name|d
operator|->
name|m_fullSize
operator|=
name|d
operator|->
name|fullSizeUnits
argument_list|(
name|d
operator|->
name|m_units
argument_list|)
expr_stmt|;
name|d
operator|->
name|setDefaultMargins
argument_list|(
name|minMargins
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the page size of the page layout.      Note that the QPageSize is always defined in a Portrait orientation.  To     obtain a size that takes the set orientation into account you must use     fullRect(). */
end_comment
begin_function
DECL|function|pageSize
name|QPageSize
name|QPageLayout
operator|::
name|pageSize
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|m_pageSize
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the page orientation of the page layout to \a orientation.      Changing the orientation does not affect the current margins or     the minimum margins. */
end_comment
begin_function
DECL|function|setOrientation
name|void
name|QPageLayout
operator|::
name|setOrientation
parameter_list|(
name|Orientation
name|orientation
parameter_list|)
block|{
if|if
condition|(
name|orientation
operator|!=
name|d
operator|->
name|m_orientation
condition|)
block|{
name|d
operator|.
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_orientation
operator|=
name|orientation
expr_stmt|;
name|d
operator|->
name|m_fullSize
operator|=
name|d
operator|->
name|fullSizeUnits
argument_list|(
name|d
operator|->
name|m_units
argument_list|)
expr_stmt|;
comment|// Adust the max margins to reflect change in max page size
specifier|const
name|qreal
name|change
init|=
name|d
operator|->
name|m_fullSize
operator|.
name|width
argument_list|()
operator|-
name|d
operator|->
name|m_fullSize
operator|.
name|height
argument_list|()
decl_stmt|;
name|d
operator|->
name|m_maxMargins
operator|.
name|setLeft
argument_list|(
name|d
operator|->
name|m_maxMargins
operator|.
name|left
argument_list|()
operator|+
name|change
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_maxMargins
operator|.
name|setRight
argument_list|(
name|d
operator|->
name|m_maxMargins
operator|.
name|right
argument_list|()
operator|+
name|change
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_maxMargins
operator|.
name|setTop
argument_list|(
name|d
operator|->
name|m_maxMargins
operator|.
name|top
argument_list|()
operator|-
name|change
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_maxMargins
operator|.
name|setBottom
argument_list|(
name|d
operator|->
name|m_maxMargins
operator|.
name|bottom
argument_list|()
operator|-
name|change
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the page orientation of the page layout. */
end_comment
begin_function
DECL|function|orientation
name|QPageLayout
operator|::
name|Orientation
name|QPageLayout
operator|::
name|orientation
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|m_orientation
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the \a units used to define the page layout. */
end_comment
begin_function
DECL|function|setUnits
name|void
name|QPageLayout
operator|::
name|setUnits
parameter_list|(
name|Unit
name|units
parameter_list|)
block|{
if|if
condition|(
name|units
operator|!=
name|d
operator|->
name|m_units
condition|)
block|{
name|d
operator|.
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_margins
operator|=
name|qt_convertMargins
argument_list|(
name|d
operator|->
name|m_margins
argument_list|,
name|d
operator|->
name|m_units
argument_list|,
name|units
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_minMargins
operator|=
name|qt_convertMargins
argument_list|(
name|d
operator|->
name|m_minMargins
argument_list|,
name|d
operator|->
name|m_units
argument_list|,
name|units
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_maxMargins
operator|=
name|qt_convertMargins
argument_list|(
name|d
operator|->
name|m_maxMargins
argument_list|,
name|d
operator|->
name|m_units
argument_list|,
name|units
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_units
operator|=
name|units
expr_stmt|;
name|d
operator|->
name|m_fullSize
operator|=
name|d
operator|->
name|fullSizeUnits
argument_list|(
name|d
operator|->
name|m_units
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the units the page layout is currently defined in. */
end_comment
begin_function
DECL|function|units
name|QPageLayout
operator|::
name|Unit
name|QPageLayout
operator|::
name|units
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|m_units
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the page margins of the page layout to \a margins     Returns true if the margins were successfully set.      The units used are those currently defined for the layout.  To use different     units then call setUnits() first.      If in the default StandardMode then all the new margins must fall between the     minimum margins set and the maximum margins allowed by the page size,     otherwise the margins will not be set.      If in FullPageMode then any margin values will be accepted.      \sa margins(), units() */
end_comment
begin_function
DECL|function|setMargins
name|bool
name|QPageLayout
operator|::
name|setMargins
parameter_list|(
specifier|const
name|QMarginsF
modifier|&
name|margins
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|m_mode
operator|==
name|FullPageMode
condition|)
block|{
name|d
operator|.
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_margins
operator|=
name|margins
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|margins
operator|.
name|left
argument_list|()
operator|>=
name|d
operator|->
name|m_minMargins
operator|.
name|left
argument_list|()
operator|&&
name|margins
operator|.
name|right
argument_list|()
operator|>=
name|d
operator|->
name|m_minMargins
operator|.
name|right
argument_list|()
operator|&&
name|margins
operator|.
name|top
argument_list|()
operator|>=
name|d
operator|->
name|m_minMargins
operator|.
name|top
argument_list|()
operator|&&
name|margins
operator|.
name|bottom
argument_list|()
operator|>=
name|d
operator|->
name|m_minMargins
operator|.
name|bottom
argument_list|()
operator|&&
name|margins
operator|.
name|left
argument_list|()
operator|<=
name|d
operator|->
name|m_maxMargins
operator|.
name|left
argument_list|()
operator|&&
name|margins
operator|.
name|right
argument_list|()
operator|<=
name|d
operator|->
name|m_maxMargins
operator|.
name|right
argument_list|()
operator|&&
name|margins
operator|.
name|top
argument_list|()
operator|<=
name|d
operator|->
name|m_maxMargins
operator|.
name|top
argument_list|()
operator|&&
name|margins
operator|.
name|bottom
argument_list|()
operator|<=
name|d
operator|->
name|m_maxMargins
operator|.
name|bottom
argument_list|()
condition|)
block|{
name|d
operator|.
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_margins
operator|=
name|margins
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the left page margin of the page layout to \a leftMargin.     Returns true if the margin was successfully set.      The units used are those currently defined for the layout.  To use different     units call setUnits() first.      If in the default StandardMode then the new margin must fall between the     minimum margin set and the maximum margin allowed by the page size,     otherwise the margin will not be set.      If in FullPageMode then any margin values will be accepted.      \sa setMargins(), margins() */
end_comment
begin_function
DECL|function|setLeftMargin
name|bool
name|QPageLayout
operator|::
name|setLeftMargin
parameter_list|(
name|qreal
name|leftMargin
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|m_mode
operator|==
name|FullPageMode
operator|||
operator|(
name|leftMargin
operator|>=
name|d
operator|->
name|m_minMargins
operator|.
name|left
argument_list|()
operator|&&
name|leftMargin
operator|<=
name|d
operator|->
name|m_maxMargins
operator|.
name|left
argument_list|()
operator|)
condition|)
block|{
name|d
operator|.
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_margins
operator|.
name|setLeft
argument_list|(
name|leftMargin
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the right page margin of the page layout to \a rightMargin.     Returns true if the margin was successfully set.      The units used are those currently defined for the layout.  To use different     units call setUnits() first.      If in the default StandardMode then the new margin must fall between the     minimum margin set and the maximum margin allowed by the page size,     otherwise the margin will not be set.      If in FullPageMode then any margin values will be accepted.      \sa setMargins(), margins() */
end_comment
begin_function
DECL|function|setRightMargin
name|bool
name|QPageLayout
operator|::
name|setRightMargin
parameter_list|(
name|qreal
name|rightMargin
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|m_mode
operator|==
name|FullPageMode
operator|||
operator|(
name|rightMargin
operator|>=
name|d
operator|->
name|m_minMargins
operator|.
name|right
argument_list|()
operator|&&
name|rightMargin
operator|<=
name|d
operator|->
name|m_maxMargins
operator|.
name|right
argument_list|()
operator|)
condition|)
block|{
name|d
operator|.
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_margins
operator|.
name|setRight
argument_list|(
name|rightMargin
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the top page margin of the page layout to \a topMargin.     Returns true if the margin was successfully set.      The units used are those currently defined for the layout.  To use different     units call setUnits() first.      If in the default StandardMode then the new margin must fall between the     minimum margin set and the maximum margin allowed by the page size,     otherwise the margin will not be set.      If in FullPageMode then any margin values will be accepted.      \sa setMargins(), margins() */
end_comment
begin_function
DECL|function|setTopMargin
name|bool
name|QPageLayout
operator|::
name|setTopMargin
parameter_list|(
name|qreal
name|topMargin
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|m_mode
operator|==
name|FullPageMode
operator|||
operator|(
name|topMargin
operator|>=
name|d
operator|->
name|m_minMargins
operator|.
name|top
argument_list|()
operator|&&
name|topMargin
operator|<=
name|d
operator|->
name|m_maxMargins
operator|.
name|top
argument_list|()
operator|)
condition|)
block|{
name|d
operator|.
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_margins
operator|.
name|setTop
argument_list|(
name|topMargin
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the bottom page margin of the page layout to \a bottomMargin.     Returns true if the margin was successfully set.      The units used are those currently defined for the layout.  To use different     units call setUnits() first.      If in the default StandardMode then the new margin must fall between the     minimum margin set and the maximum margin allowed by the page size,     otherwise the margin will not be set.      If in FullPageMode then any margin values will be accepted.      \sa setMargins(), margins() */
end_comment
begin_function
DECL|function|setBottomMargin
name|bool
name|QPageLayout
operator|::
name|setBottomMargin
parameter_list|(
name|qreal
name|bottomMargin
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|m_mode
operator|==
name|FullPageMode
operator|||
operator|(
name|bottomMargin
operator|>=
name|d
operator|->
name|m_minMargins
operator|.
name|bottom
argument_list|()
operator|&&
name|bottomMargin
operator|<=
name|d
operator|->
name|m_maxMargins
operator|.
name|bottom
argument_list|()
operator|)
condition|)
block|{
name|d
operator|.
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_margins
operator|.
name|setBottom
argument_list|(
name|bottomMargin
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the margins of the page layout using the currently set units.      \sa setMargins(), units() */
end_comment
begin_function
DECL|function|margins
name|QMarginsF
name|QPageLayout
operator|::
name|margins
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|m_margins
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the margins of the page layout using the requested \a units.      \sa setMargins(), margins() */
end_comment
begin_function
DECL|function|margins
name|QMarginsF
name|QPageLayout
operator|::
name|margins
parameter_list|(
name|Unit
name|units
parameter_list|)
specifier|const
block|{
return|return
name|d
operator|->
name|margins
argument_list|(
name|units
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the margins of the page layout in Postscript Points (1/72 of an inch).      \sa setMargins(), margins() */
end_comment
begin_function
DECL|function|marginsPoints
name|QMargins
name|QPageLayout
operator|::
name|marginsPoints
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|marginsPoints
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the margins of the page layout in device pixels for the given \a resolution.      \sa setMargins() */
end_comment
begin_function
DECL|function|marginsPixels
name|QMargins
name|QPageLayout
operator|::
name|marginsPixels
parameter_list|(
name|int
name|resolution
parameter_list|)
specifier|const
block|{
return|return
name|d
operator|->
name|marginsPixels
argument_list|(
name|resolution
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the minimum page margins of the page layout to \a minMargins.      It is not recommended to override the default values set for a page size     as this may be the minimum printable area for a physical print device.      If the StandardMode mode is set then the existing margins will be clamped     to the new \a minMargins and the maximum allowed by the page size.  If the     FullPageMode is set then the existing margins will be unchanged.      \sa minimumMargins(), setMargins() */
end_comment
begin_function
DECL|function|setMinimumMargins
name|void
name|QPageLayout
operator|::
name|setMinimumMargins
parameter_list|(
specifier|const
name|QMarginsF
modifier|&
name|minMargins
parameter_list|)
block|{
name|d
operator|.
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|setDefaultMargins
argument_list|(
name|minMargins
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the minimum margins of the page layout.      \sa setMinimumMargins(), maximumMargins() */
end_comment
begin_function
DECL|function|minimumMargins
name|QMarginsF
name|QPageLayout
operator|::
name|minimumMargins
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|m_minMargins
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the maximum margins that would be applied if the page layout was     in StandardMode.      The maximum margins allowed are calculated as the full size of the page     minus the minimum margins set. For example, if the page width is 100 points     and the minimum right margin is 10 points, then the maximum left margin     will be 90 points.      \sa setMinimumMargins(), minimumMargins() */
end_comment
begin_function
DECL|function|maximumMargins
name|QMarginsF
name|QPageLayout
operator|::
name|maximumMargins
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|m_maxMargins
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the full page rectangle in the current layout units.      The page rectangle takes into account the page size and page orientation,     but not the page margins.      \sa paintRect(), units() */
end_comment
begin_function
DECL|function|fullRect
name|QRectF
name|QPageLayout
operator|::
name|fullRect
parameter_list|()
specifier|const
block|{
return|return
name|isValid
argument_list|()
condition|?
name|d
operator|->
name|fullRect
argument_list|()
else|:
name|QRect
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the full page rectangle in the required \a units.      The page rectangle takes into account the page size and page orientation,     but not the page margins.      \sa paintRect() */
end_comment
begin_function
DECL|function|fullRect
name|QRectF
name|QPageLayout
operator|::
name|fullRect
parameter_list|(
name|Unit
name|units
parameter_list|)
specifier|const
block|{
return|return
name|isValid
argument_list|()
condition|?
name|d
operator|->
name|fullRect
argument_list|(
name|units
argument_list|)
else|:
name|QRect
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the full page rectangle in Postscript Points (1/72 of an inch).      The page rectangle takes into account the page size and page orientation,     but not the page margins.      \sa paintRect() */
end_comment
begin_function
DECL|function|fullRectPoints
name|QRect
name|QPageLayout
operator|::
name|fullRectPoints
parameter_list|()
specifier|const
block|{
return|return
name|isValid
argument_list|()
condition|?
name|d
operator|->
name|fullRectPoints
argument_list|()
else|:
name|QRect
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the full page rectangle in device pixels for the given \a resolution.      The page rectangle takes into account the page size and page orientation,     but not the page margins.      \sa paintRect() */
end_comment
begin_function
DECL|function|fullRectPixels
name|QRect
name|QPageLayout
operator|::
name|fullRectPixels
parameter_list|(
name|int
name|resolution
parameter_list|)
specifier|const
block|{
return|return
name|isValid
argument_list|()
condition|?
name|d
operator|->
name|fullRectPixels
argument_list|(
name|resolution
argument_list|)
else|:
name|QRect
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the page rectangle in the current layout units.      The paintable rectangle takes into account the page size, orientation     and margins.      If the FullPageMode mode is set then the fullRect() is returned and     the margins must be manually managed. */
end_comment
begin_function
DECL|function|paintRect
name|QRectF
name|QPageLayout
operator|::
name|paintRect
parameter_list|()
specifier|const
block|{
return|return
name|isValid
argument_list|()
condition|?
name|d
operator|->
name|paintRect
argument_list|()
else|:
name|QRectF
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the page rectangle in the required \a units.      The paintable rectangle takes into account the page size, orientation     and margins.      If the FullPageMode mode is set then the fullRect() is returned and     the margins must be manually managed. */
end_comment
begin_function
DECL|function|paintRect
name|QRectF
name|QPageLayout
operator|::
name|paintRect
parameter_list|(
name|Unit
name|units
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return
name|QRectF
argument_list|()
return|;
if|if
condition|(
name|units
operator|==
name|d
operator|->
name|m_units
condition|)
return|return
name|d
operator|->
name|paintRect
argument_list|()
return|;
return|return
name|d
operator|->
name|m_mode
operator|==
name|FullPageMode
condition|?
name|d
operator|->
name|fullRect
argument_list|(
name|units
argument_list|)
else|:
name|d
operator|->
name|fullRect
argument_list|(
name|units
argument_list|)
operator|-
name|d
operator|->
name|margins
argument_list|(
name|units
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the paintable rectangle in rounded Postscript Points (1/72 of an inch).      The paintable rectangle takes into account the page size, orientation     and margins.      If the FullPageMode mode is set then the fullRect() is returned and     the margins must be manually managed. */
end_comment
begin_function
DECL|function|paintRectPoints
name|QRect
name|QPageLayout
operator|::
name|paintRectPoints
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
return|return
name|d
operator|->
name|m_mode
operator|==
name|FullPageMode
condition|?
name|d
operator|->
name|fullRectPoints
argument_list|()
else|:
name|d
operator|->
name|fullRectPoints
argument_list|()
operator|-
name|d
operator|->
name|marginsPoints
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the paintable rectangle in rounded device pixels for the given \a resolution.      The paintable rectangle takes into account the page size, orientation     and margins.      If the FullPageMode mode is set then the fullRect() is returned and     the margins must be manually managed. */
end_comment
begin_function
DECL|function|paintRectPixels
name|QRect
name|QPageLayout
operator|::
name|paintRectPixels
parameter_list|(
name|int
name|resolution
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
return|return
name|d
operator|->
name|m_mode
operator|==
name|FullPageMode
condition|?
name|d
operator|->
name|fullRectPixels
argument_list|(
name|resolution
argument_list|)
else|:
name|d
operator|->
name|fullRectPixels
argument_list|(
name|resolution
argument_list|)
operator|-
name|d
operator|->
name|marginsPixels
argument_list|(
name|resolution
argument_list|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|dbg
parameter_list|,
specifier|const
name|QPageLayout
modifier|&
name|layout
parameter_list|)
block|{
if|if
condition|(
name|layout
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QString
name|output
init|=
name|QStringLiteral
argument_list|(
literal|"QPageLayout(%1, %2, l:%3 r:%4 t:%5 b:%6 %7)"
argument_list|)
decl_stmt|;
name|QString
name|units
decl_stmt|;
switch|switch
condition|(
name|layout
operator|.
name|units
argument_list|()
condition|)
block|{
case|case
name|QPageLayout
operator|::
name|Millimeter
case|:
name|units
operator|=
name|QStringLiteral
argument_list|(
literal|"mm"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPageLayout
operator|::
name|Point
case|:
name|units
operator|=
name|QStringLiteral
argument_list|(
literal|"pt"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPageLayout
operator|::
name|Inch
case|:
name|units
operator|=
name|QStringLiteral
argument_list|(
literal|"in"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPageLayout
operator|::
name|Pica
case|:
name|units
operator|=
name|QStringLiteral
argument_list|(
literal|"pc"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPageLayout
operator|::
name|Didot
case|:
name|units
operator|=
name|QStringLiteral
argument_list|(
literal|"DD"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPageLayout
operator|::
name|Cicero
case|:
name|units
operator|=
name|QStringLiteral
argument_list|(
literal|"CC"
argument_list|)
expr_stmt|;
break|break;
block|}
name|output
operator|=
name|output
operator|.
name|arg
argument_list|(
name|layout
operator|.
name|pageSize
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|layout
operator|.
name|orientation
argument_list|()
operator|==
name|QPageLayout
operator|::
name|Portrait
condition|?
name|QStringLiteral
argument_list|(
literal|"Portrait"
argument_list|)
else|:
name|QStringLiteral
argument_list|(
literal|"Landscape"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|layout
operator|.
name|margins
argument_list|()
operator|.
name|left
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|layout
operator|.
name|margins
argument_list|()
operator|.
name|right
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|layout
operator|.
name|margins
argument_list|()
operator|.
name|top
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|layout
operator|.
name|margins
argument_list|()
operator|.
name|bottom
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|units
argument_list|)
expr_stmt|;
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
name|output
expr_stmt|;
block|}
else|else
block|{
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"QPageLayout()"
argument_list|)
expr_stmt|;
block|}
return|return
name|dbg
operator|.
name|space
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
