begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QRGB_H
end_ifndef
begin_define
DECL|macro|QRGB_H
define|#
directive|define
name|QRGB_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qprocessordetection.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_typedef
DECL|typedef|QRgb
typedef|typedef
name|unsigned
name|int
name|QRgb
typedef|;
end_typedef
begin_comment
DECL|typedef|QRgb
comment|// RGB triplet
end_comment
begin_comment
comment|// non-namespaced Qt global variable
end_comment
begin_decl_stmt
DECL|variable|RGB_MASK
specifier|const
name|Q_DECL_UNUSED
name|QRgb
name|RGB_MASK
init|=
literal|0x00ffffff
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|RGB_MASK
comment|// masks RGB values
end_comment
begin_function
DECL|function|qRed
specifier|inline
name|Q_DECL_CONSTEXPR
name|int
name|qRed
parameter_list|(
name|QRgb
name|rgb
parameter_list|)
comment|// get red part of RGB
block|{
return|return
operator|(
operator|(
name|rgb
operator|>>
literal|16
operator|)
operator|&
literal|0xff
operator|)
return|;
block|}
end_function
begin_function
DECL|function|qGreen
specifier|inline
name|Q_DECL_CONSTEXPR
name|int
name|qGreen
parameter_list|(
name|QRgb
name|rgb
parameter_list|)
comment|// get green part of RGB
block|{
return|return
operator|(
operator|(
name|rgb
operator|>>
literal|8
operator|)
operator|&
literal|0xff
operator|)
return|;
block|}
end_function
begin_function
DECL|function|qBlue
specifier|inline
name|Q_DECL_CONSTEXPR
name|int
name|qBlue
parameter_list|(
name|QRgb
name|rgb
parameter_list|)
comment|// get blue part of RGB
block|{
return|return
operator|(
name|rgb
operator|&
literal|0xff
operator|)
return|;
block|}
end_function
begin_function
DECL|function|qAlpha
specifier|inline
name|Q_DECL_CONSTEXPR
name|int
name|qAlpha
parameter_list|(
name|QRgb
name|rgb
parameter_list|)
comment|// get alpha part of RGBA
block|{
return|return
name|rgb
operator|>>
literal|24
return|;
block|}
end_function
begin_function
DECL|function|qRgb
specifier|inline
name|Q_DECL_CONSTEXPR
name|QRgb
name|qRgb
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|g
parameter_list|,
name|int
name|b
parameter_list|)
comment|// set RGB value
block|{
return|return
operator|(
literal|0xffu
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|r
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|g
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|b
operator|&
literal|0xff
operator|)
return|;
block|}
end_function
begin_function
DECL|function|qRgba
specifier|inline
name|Q_DECL_CONSTEXPR
name|QRgb
name|qRgba
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|g
parameter_list|,
name|int
name|b
parameter_list|,
name|int
name|a
parameter_list|)
comment|// set RGBA value
block|{
return|return
operator|(
operator|(
name|a
operator|&
literal|0xff
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|r
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|g
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|b
operator|&
literal|0xff
operator|)
return|;
block|}
end_function
begin_function
DECL|function|qGray
specifier|inline
name|Q_DECL_CONSTEXPR
name|int
name|qGray
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|g
parameter_list|,
name|int
name|b
parameter_list|)
comment|// convert R,G,B to gray 0..255
block|{
return|return
operator|(
name|r
operator|*
literal|11
operator|+
name|g
operator|*
literal|16
operator|+
name|b
operator|*
literal|5
operator|)
operator|/
literal|32
return|;
block|}
end_function
begin_function
DECL|function|qGray
specifier|inline
name|Q_DECL_CONSTEXPR
name|int
name|qGray
parameter_list|(
name|QRgb
name|rgb
parameter_list|)
comment|// convert RGB to gray 0..255
block|{
return|return
name|qGray
argument_list|(
name|qRed
argument_list|(
name|rgb
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|rgb
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|rgb
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qIsGray
specifier|inline
name|Q_DECL_CONSTEXPR
name|bool
name|qIsGray
parameter_list|(
name|QRgb
name|rgb
parameter_list|)
block|{
return|return
name|qRed
argument_list|(
name|rgb
argument_list|)
operator|==
name|qGreen
argument_list|(
name|rgb
argument_list|)
operator|&&
name|qRed
argument_list|(
name|rgb
argument_list|)
operator|==
name|qBlue
argument_list|(
name|rgb
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qPremultiply
specifier|inline
name|Q_DECL_RELAXED_CONSTEXPR
name|QRgb
name|qPremultiply
parameter_list|(
name|QRgb
name|x
parameter_list|)
block|{
specifier|const
name|uint
name|a
init|=
name|qAlpha
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|uint
name|t
init|=
operator|(
name|x
operator|&
literal|0xff00ff
operator|)
operator|*
name|a
decl_stmt|;
name|t
operator|=
operator|(
name|t
operator|+
operator|(
operator|(
name|t
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|+
literal|0x800080
operator|)
operator|>>
literal|8
expr_stmt|;
name|t
operator|&=
literal|0xff00ff
expr_stmt|;
name|x
operator|=
operator|(
operator|(
name|x
operator|>>
literal|8
operator|)
operator|&
literal|0xff
operator|)
operator|*
name|a
expr_stmt|;
name|x
operator|=
operator|(
name|x
operator|+
operator|(
operator|(
name|x
operator|>>
literal|8
operator|)
operator|&
literal|0xff
operator|)
operator|+
literal|0x80
operator|)
expr_stmt|;
name|x
operator|&=
literal|0xff00
expr_stmt|;
return|return
name|x
operator||
name|t
operator||
operator|(
name|a
operator|<<
literal|24
operator|)
return|;
block|}
end_function
begin_decl_stmt
name|Q_GUI_EXPORT
specifier|extern
specifier|const
name|uint
name|qt_inv_premul_factor
index|[]
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qUnpremultiply
specifier|inline
name|QRgb
name|qUnpremultiply
parameter_list|(
name|QRgb
name|p
parameter_list|)
block|{
specifier|const
name|uint
name|alpha
init|=
name|qAlpha
argument_list|(
name|p
argument_list|)
decl_stmt|;
comment|// Alpha 255 and 0 are the two most common values, which makes them beneficial to short-cut.
if|if
condition|(
name|alpha
operator|==
literal|255
condition|)
return|return
name|p
return|;
if|if
condition|(
name|alpha
operator|==
literal|0
condition|)
return|return
literal|0
return|;
comment|// (p*(0x00ff00ff/alpha))>> 16 == (p*255)/alpha for all p and alpha<= 256.
specifier|const
name|uint
name|invAlpha
init|=
name|qt_inv_premul_factor
index|[
name|alpha
index|]
decl_stmt|;
comment|// We add 0x8000 to get even rounding. The rounding also ensures that qPremultiply(qUnpremultiply(p)) == p for all p.
return|return
name|qRgba
argument_list|(
operator|(
name|qRed
argument_list|(
name|p
argument_list|)
operator|*
name|invAlpha
operator|+
literal|0x8000
operator|)
operator|>>
literal|16
argument_list|,
operator|(
name|qGreen
argument_list|(
name|p
argument_list|)
operator|*
name|invAlpha
operator|+
literal|0x8000
operator|)
operator|>>
literal|16
argument_list|,
operator|(
name|qBlue
argument_list|(
name|p
argument_list|)
operator|*
name|invAlpha
operator|+
literal|0x8000
operator|)
operator|>>
literal|16
argument_list|,
name|alpha
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QRGB_H
end_comment
end_unit
