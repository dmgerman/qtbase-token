begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qoutlinemapper_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qpainterpath_p.h>
end_include
begin_include
include|#
directive|include
file|"qmath.h"
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|macro|qreal_to_fixed_26_6
define|#
directive|define
name|qreal_to_fixed_26_6
parameter_list|(
name|f
parameter_list|)
value|(int(f * 64))
DECL|function|boundingRect
specifier|static
specifier|const
name|QRectF
name|boundingRect
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|)
block|{
specifier|const
name|QPointF
modifier|*
name|e
init|=
name|points
decl_stmt|;
specifier|const
name|QPointF
modifier|*
name|last
init|=
name|points
operator|+
name|pointCount
decl_stmt|;
name|qreal
name|minx
decl_stmt|,
name|maxx
decl_stmt|,
name|miny
decl_stmt|,
name|maxy
decl_stmt|;
name|minx
operator|=
name|maxx
operator|=
name|e
operator|->
name|x
argument_list|()
expr_stmt|;
name|miny
operator|=
name|maxy
operator|=
name|e
operator|->
name|y
argument_list|()
expr_stmt|;
while|while
condition|(
operator|++
name|e
operator|<
name|last
condition|)
block|{
if|if
condition|(
name|e
operator|->
name|x
argument_list|()
operator|<
name|minx
condition|)
name|minx
operator|=
name|e
operator|->
name|x
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|e
operator|->
name|x
argument_list|()
operator|>
name|maxx
condition|)
name|maxx
operator|=
name|e
operator|->
name|x
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|y
argument_list|()
operator|<
name|miny
condition|)
name|miny
operator|=
name|e
operator|->
name|y
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|e
operator|->
name|y
argument_list|()
operator|>
name|maxy
condition|)
name|maxy
operator|=
name|e
operator|->
name|y
argument_list|()
expr_stmt|;
block|}
return|return
name|QRectF
argument_list|(
name|QPointF
argument_list|(
name|minx
argument_list|,
name|miny
argument_list|)
argument_list|,
name|QPointF
argument_list|(
name|maxx
argument_list|,
name|maxy
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|convertPath
name|QT_FT_Outline
modifier|*
name|QOutlineMapper
operator|::
name|convertPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|elmCount
init|=
name|path
operator|.
name|elementCount
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_CONVERT
name|printf
argument_list|(
literal|"QOutlineMapper::convertPath(), size=%d\n"
argument_list|,
name|elmCount
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|beginOutline
argument_list|(
name|path
operator|.
name|fillRule
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|elmCount
condition|;
operator|++
name|index
control|)
block|{
specifier|const
name|QPainterPath
operator|::
name|Element
modifier|&
name|elm
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|elm
operator|.
name|type
condition|)
block|{
case|case
name|QPainterPath
operator|::
name|MoveToElement
case|:
if|if
condition|(
name|index
operator|==
name|elmCount
operator|-
literal|1
condition|)
continue|continue;
name|moveTo
argument_list|(
name|elm
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|LineToElement
case|:
name|lineTo
argument_list|(
name|elm
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToElement
case|:
name|curveTo
argument_list|(
name|elm
argument_list|,
name|path
operator|.
name|elementAt
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|,
name|path
operator|.
name|elementAt
argument_list|(
name|index
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|+=
literal|2
expr_stmt|;
break|break;
default|default:
break|break;
comment|// This will never hit..
block|}
block|}
name|endOutline
argument_list|()
expr_stmt|;
return|return
name|outline
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|convertPath
name|QT_FT_Outline
modifier|*
name|QOutlineMapper
operator|::
name|convertPath
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|)
block|{
name|int
name|count
init|=
name|path
operator|.
name|elementCount
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_CONVERT
name|printf
argument_list|(
literal|"QOutlineMapper::convertPath(VP), size=%d\n"
argument_list|,
name|count
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|beginOutline
argument_list|(
name|path
operator|.
name|hasWindingFill
argument_list|()
condition|?
name|Qt
operator|::
name|WindingFill
else|:
name|Qt
operator|::
name|OddEvenFill
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|elements
argument_list|()
condition|)
block|{
comment|// TODO: if we do closing of subpaths in convertElements instead we
comment|// could avoid this loop
specifier|const
name|QPainterPath
operator|::
name|ElementType
modifier|*
name|elements
init|=
name|path
operator|.
name|elements
argument_list|()
decl_stmt|;
specifier|const
name|QPointF
modifier|*
name|points
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|QPointF
operator|*
argument_list|>
argument_list|(
name|path
operator|.
name|points
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
operator|++
name|index
control|)
block|{
switch|switch
condition|(
name|elements
index|[
name|index
index|]
condition|)
block|{
case|case
name|QPainterPath
operator|::
name|MoveToElement
case|:
if|if
condition|(
name|index
operator|==
name|count
operator|-
literal|1
condition|)
continue|continue;
name|moveTo
argument_list|(
name|points
index|[
name|index
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|LineToElement
case|:
name|lineTo
argument_list|(
name|points
index|[
name|index
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToElement
case|:
name|curveTo
argument_list|(
name|points
index|[
name|index
index|]
argument_list|,
name|points
index|[
name|index
operator|+
literal|1
index|]
argument_list|,
name|points
index|[
name|index
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
name|index
operator|+=
literal|2
expr_stmt|;
break|break;
default|default:
break|break;
comment|// This will never hit..
block|}
block|}
block|}
else|else
block|{
comment|// ### We can kill this copying and just use the buffer straight...
name|m_elements
operator|.
name|resize
argument_list|(
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
condition|)
name|memcpy
argument_list|(
name|m_elements
operator|.
name|data
argument_list|()
argument_list|,
name|path
operator|.
name|points
argument_list|()
argument_list|,
name|count
operator|*
sizeof|sizeof
argument_list|(
name|QPointF
argument_list|)
argument_list|)
expr_stmt|;
name|m_element_types
operator|.
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|endOutline
argument_list|()
expr_stmt|;
return|return
name|outline
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|endOutline
name|void
name|QOutlineMapper
operator|::
name|endOutline
parameter_list|()
block|{
name|closeSubpath
argument_list|()
expr_stmt|;
name|int
name|element_count
init|=
name|m_elements
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|element_count
operator|==
literal|0
condition|)
block|{
name|memset
argument_list|(
operator|&
name|m_outline
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|m_outline
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|QPointF
modifier|*
name|elements
decl_stmt|;
comment|// Transform the outline
if|if
condition|(
name|m_txop
operator|==
name|QTransform
operator|::
name|TxNone
condition|)
block|{
name|elements
operator|=
name|m_elements
operator|.
name|data
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|m_txop
operator|==
name|QTransform
operator|::
name|TxTranslate
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_elements
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPointF
modifier|&
name|e
init|=
name|m_elements
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|m_elements_dev
operator|<<
name|QPointF
argument_list|(
name|e
operator|.
name|x
argument_list|()
operator|+
name|m_dx
argument_list|,
name|e
operator|.
name|y
argument_list|()
operator|+
name|m_dy
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|m_txop
operator|==
name|QTransform
operator|::
name|TxScale
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_elements
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPointF
modifier|&
name|e
init|=
name|m_elements
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|m_elements_dev
operator|<<
name|QPointF
argument_list|(
name|m_m11
operator|*
name|e
operator|.
name|x
argument_list|()
operator|+
name|m_dx
argument_list|,
name|m_m22
operator|*
name|e
operator|.
name|y
argument_list|()
operator|+
name|m_dy
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|m_txop
operator|<
name|QTransform
operator|::
name|TxProject
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_elements
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPointF
modifier|&
name|e
init|=
name|m_elements
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|m_elements_dev
operator|<<
name|QPointF
argument_list|(
name|m_m11
operator|*
name|e
operator|.
name|x
argument_list|()
operator|+
name|m_m21
operator|*
name|e
operator|.
name|y
argument_list|()
operator|+
name|m_dx
argument_list|,
name|m_m22
operator|*
name|e
operator|.
name|y
argument_list|()
operator|+
name|m_m12
operator|*
name|e
operator|.
name|x
argument_list|()
operator|+
name|m_dy
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|const
name|QVectorPath
name|vp
argument_list|(
operator|(
name|qreal
operator|*
operator|)
name|m_elements
operator|.
name|data
argument_list|()
argument_list|,
name|m_elements
operator|.
name|size
argument_list|()
argument_list|,
name|m_element_types
operator|.
name|size
argument_list|()
condition|?
name|m_element_types
operator|.
name|data
argument_list|()
else|:
literal|0
argument_list|)
decl_stmt|;
name|QPainterPath
name|path
init|=
name|vp
operator|.
name|convertToPainterPath
argument_list|()
decl_stmt|;
name|path
operator|=
name|QTransform
argument_list|(
name|m_m11
argument_list|,
name|m_m12
argument_list|,
name|m_m13
argument_list|,
name|m_m21
argument_list|,
name|m_m22
argument_list|,
name|m_m23
argument_list|,
name|m_dx
argument_list|,
name|m_dy
argument_list|,
name|m_m33
argument_list|)
operator|.
name|map
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|m_outline
operator|.
name|flags
operator|&
name|QT_FT_OUTLINE_EVEN_ODD_FILL
operator|)
condition|)
name|path
operator|.
name|setFillRule
argument_list|(
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
name|uint
name|old_txop
init|=
name|m_txop
decl_stmt|;
name|m_txop
operator|=
name|QTransform
operator|::
name|TxNone
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
name|m_valid
operator|=
literal|false
expr_stmt|;
else|else
name|convertPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|m_txop
operator|=
name|old_txop
expr_stmt|;
return|return;
block|}
name|elements
operator|=
name|m_elements_dev
operator|.
name|data
argument_list|()
expr_stmt|;
block|}
name|controlPointRect
operator|=
name|boundingRect
argument_list|(
name|elements
argument_list|,
name|element_count
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_CONVERT
name|printf
argument_list|(
literal|" - control point rect (%.2f, %.2f) %.2f x %.2f, clip=(%d,%d, %dx%d)\n"
argument_list|,
name|controlPointRect
operator|.
name|x
argument_list|()
argument_list|,
name|controlPointRect
operator|.
name|y
argument_list|()
argument_list|,
name|controlPointRect
operator|.
name|width
argument_list|()
argument_list|,
name|controlPointRect
operator|.
name|height
argument_list|()
argument_list|,
name|m_clip_rect
operator|.
name|x
argument_list|()
argument_list|,
name|m_clip_rect
operator|.
name|y
argument_list|()
argument_list|,
name|m_clip_rect
operator|.
name|width
argument_list|()
argument_list|,
name|m_clip_rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Check for out of dev bounds...
specifier|const
name|bool
name|do_clip
init|=
operator|!
name|m_in_clip_elements
operator|&&
operator|(
operator|(
name|controlPointRect
operator|.
name|left
argument_list|()
operator|<
operator|-
name|QT_RASTER_COORD_LIMIT
operator|||
name|controlPointRect
operator|.
name|right
argument_list|()
operator|>
name|QT_RASTER_COORD_LIMIT
operator|||
name|controlPointRect
operator|.
name|top
argument_list|()
operator|<
operator|-
name|QT_RASTER_COORD_LIMIT
operator|||
name|controlPointRect
operator|.
name|bottom
argument_list|()
operator|>
name|QT_RASTER_COORD_LIMIT
operator|||
name|controlPointRect
operator|.
name|width
argument_list|()
operator|>
name|QT_RASTER_COORD_LIMIT
operator|||
name|controlPointRect
operator|.
name|height
argument_list|()
operator|>
name|QT_RASTER_COORD_LIMIT
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|do_clip
condition|)
block|{
name|clipElements
argument_list|(
name|elements
argument_list|,
name|elementTypes
argument_list|()
argument_list|,
name|element_count
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|convertElements
argument_list|(
name|elements
argument_list|,
name|elementTypes
argument_list|()
argument_list|,
name|element_count
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|convertElements
name|void
name|QOutlineMapper
operator|::
name|convertElements
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|elements
parameter_list|,
specifier|const
name|QPainterPath
operator|::
name|ElementType
modifier|*
name|types
parameter_list|,
name|int
name|element_count
parameter_list|)
block|{
if|if
condition|(
name|types
condition|)
block|{
comment|// Translate into FT coords
specifier|const
name|QPointF
modifier|*
name|e
init|=
name|elements
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|element_count
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
operator|*
name|types
condition|)
block|{
case|case
name|QPainterPath
operator|::
name|MoveToElement
case|:
block|{
name|QT_FT_Vector
name|pt_fixed
init|=
block|{
name|qreal_to_fixed_26_6
argument_list|(
name|e
operator|->
name|x
argument_list|()
argument_list|)
block|,
name|qreal_to_fixed_26_6
argument_list|(
argument|e->y()
argument_list|)
block|}
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
name|m_contours
operator|<<
name|m_points
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
name|m_points
operator|<<
name|pt_fixed
expr_stmt|;
name|m_tags
operator|<<
name|QT_FT_CURVE_TAG_ON
expr_stmt|;
block|}
break|break;
case|case
name|QPainterPath
operator|::
name|LineToElement
case|:
block|{
name|QT_FT_Vector
name|pt_fixed
init|=
block|{
name|qreal_to_fixed_26_6
argument_list|(
name|e
operator|->
name|x
argument_list|()
argument_list|)
block|,
name|qreal_to_fixed_26_6
argument_list|(
argument|e->y()
argument_list|)
block|}
decl_stmt|;
name|m_points
operator|<<
name|pt_fixed
expr_stmt|;
name|m_tags
operator|<<
name|QT_FT_CURVE_TAG_ON
expr_stmt|;
block|}
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToElement
case|:
block|{
name|QT_FT_Vector
name|cp1_fixed
init|=
block|{
name|qreal_to_fixed_26_6
argument_list|(
name|e
operator|->
name|x
argument_list|()
argument_list|)
block|,
name|qreal_to_fixed_26_6
argument_list|(
argument|e->y()
argument_list|)
block|}
decl_stmt|;
operator|++
name|e
expr_stmt|;
name|QT_FT_Vector
name|cp2_fixed
init|=
block|{
name|qreal_to_fixed_26_6
argument_list|(
operator|(
name|e
operator|)
operator|->
name|x
argument_list|()
argument_list|)
block|,
name|qreal_to_fixed_26_6
argument_list|(
argument|(e)->y()
argument_list|)
block|}
decl_stmt|;
operator|++
name|e
expr_stmt|;
name|QT_FT_Vector
name|ep_fixed
init|=
block|{
name|qreal_to_fixed_26_6
argument_list|(
operator|(
name|e
operator|)
operator|->
name|x
argument_list|()
argument_list|)
block|,
name|qreal_to_fixed_26_6
argument_list|(
argument|(e)->y()
argument_list|)
block|}
decl_stmt|;
name|m_points
operator|<<
name|cp1_fixed
operator|<<
name|cp2_fixed
operator|<<
name|ep_fixed
expr_stmt|;
name|m_tags
operator|<<
name|QT_FT_CURVE_TAG_CUBIC
operator|<<
name|QT_FT_CURVE_TAG_CUBIC
operator|<<
name|QT_FT_CURVE_TAG_ON
expr_stmt|;
name|types
operator|+=
literal|2
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
operator|++
name|types
expr_stmt|;
operator|++
name|e
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Plain polygon...
specifier|const
name|QPointF
modifier|*
name|last
init|=
name|elements
operator|+
name|element_count
decl_stmt|;
specifier|const
name|QPointF
modifier|*
name|e
init|=
name|elements
decl_stmt|;
while|while
condition|(
name|e
operator|<
name|last
condition|)
block|{
name|QT_FT_Vector
name|pt_fixed
init|=
block|{
name|qreal_to_fixed_26_6
argument_list|(
name|e
operator|->
name|x
argument_list|()
argument_list|)
block|,
name|qreal_to_fixed_26_6
argument_list|(
argument|e->y()
argument_list|)
block|}
decl_stmt|;
name|m_points
operator|<<
name|pt_fixed
expr_stmt|;
name|m_tags
operator|<<
name|QT_FT_CURVE_TAG_ON
expr_stmt|;
operator|++
name|e
expr_stmt|;
block|}
block|}
comment|// close the very last subpath
name|m_contours
operator|<<
name|m_points
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
name|m_outline
operator|.
name|n_contours
operator|=
name|m_contours
operator|.
name|size
argument_list|()
expr_stmt|;
name|m_outline
operator|.
name|n_points
operator|=
name|m_points
operator|.
name|size
argument_list|()
expr_stmt|;
name|m_outline
operator|.
name|points
operator|=
name|m_points
operator|.
name|data
argument_list|()
expr_stmt|;
name|m_outline
operator|.
name|tags
operator|=
name|m_tags
operator|.
name|data
argument_list|()
expr_stmt|;
name|m_outline
operator|.
name|contours
operator|=
name|m_contours
operator|.
name|data
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_CONVERT
name|printf
argument_list|(
literal|"QOutlineMapper::endOutline\n"
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|" - contours: %d\n"
argument_list|,
name|m_outline
operator|.
name|n_contours
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_outline
operator|.
name|n_contours
condition|;
operator|++
name|i
control|)
block|{
name|printf
argument_list|(
literal|"   - %d\n"
argument_list|,
name|m_outline
operator|.
name|contours
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|printf
argument_list|(
literal|" - points: %d\n"
argument_list|,
name|m_outline
operator|.
name|n_points
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_outline
operator|.
name|n_points
condition|;
operator|++
name|i
control|)
block|{
name|printf
argument_list|(
literal|"   - %d -- %.2f, %.2f, (%d, %d)\n"
argument_list|,
name|i
argument_list|,
call|(
name|double
call|)
argument_list|(
name|m_outline
operator|.
name|points
index|[
name|i
index|]
operator|.
name|x
operator|/
literal|64.0
argument_list|)
argument_list|,
call|(
name|double
call|)
argument_list|(
name|m_outline
operator|.
name|points
index|[
name|i
index|]
operator|.
name|y
operator|/
literal|64.0
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|m_outline
operator|.
name|points
index|[
name|i
index|]
operator|.
name|x
argument_list|,
operator|(
name|int
operator|)
name|m_outline
operator|.
name|points
index|[
name|i
index|]
operator|.
name|y
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|clipElements
name|void
name|QOutlineMapper
operator|::
name|clipElements
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|elements
parameter_list|,
specifier|const
name|QPainterPath
operator|::
name|ElementType
modifier|*
name|types
parameter_list|,
name|int
name|element_count
parameter_list|)
block|{
comment|// We could save a bit of time by actually implementing them fully
comment|// instead of going through convenience functionallity, but since
comment|// this part of code hardly every used, it shouldn't matter.
name|m_in_clip_elements
operator|=
literal|true
expr_stmt|;
name|QPainterPath
name|path
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|m_outline
operator|.
name|flags
operator|&
name|QT_FT_OUTLINE_EVEN_ODD_FILL
operator|)
condition|)
name|path
operator|.
name|setFillRule
argument_list|(
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
if|if
condition|(
name|types
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|element_count
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|types
index|[
name|i
index|]
condition|)
block|{
case|case
name|QPainterPath
operator|::
name|MoveToElement
case|:
name|path
operator|.
name|moveTo
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|LineToElement
case|:
name|path
operator|.
name|lineTo
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToElement
case|:
name|path
operator|.
name|cubicTo
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|,
name|elements
index|[
name|i
operator|+
literal|1
index|]
argument_list|,
name|elements
index|[
name|i
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
else|else
block|{
name|path
operator|.
name|moveTo
argument_list|(
name|elements
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|element_count
condition|;
operator|++
name|i
control|)
name|path
operator|.
name|lineTo
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|QPainterPath
name|clipPath
decl_stmt|;
name|clipPath
operator|.
name|addRect
argument_list|(
name|m_clip_rect
argument_list|)
expr_stmt|;
name|QPainterPath
name|clippedPath
init|=
name|path
operator|.
name|intersected
argument_list|(
name|clipPath
argument_list|)
decl_stmt|;
name|uint
name|old_txop
init|=
name|m_txop
decl_stmt|;
name|m_txop
operator|=
name|QTransform
operator|::
name|TxNone
expr_stmt|;
if|if
condition|(
name|clippedPath
operator|.
name|isEmpty
argument_list|()
condition|)
name|m_valid
operator|=
literal|false
expr_stmt|;
else|else
name|convertPath
argument_list|(
name|clippedPath
argument_list|)
expr_stmt|;
name|m_txop
operator|=
name|old_txop
expr_stmt|;
name|m_in_clip_elements
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
