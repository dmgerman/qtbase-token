begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<private/qemulationpaintengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpainter_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qtextengine_p.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QEmulationPaintEngine
name|QEmulationPaintEngine
operator|::
name|QEmulationPaintEngine
parameter_list|(
name|QPaintEngineEx
modifier|*
name|engine
parameter_list|)
member_init_list|:
name|real_engine
argument_list|(
name|engine
argument_list|)
block|{
name|QPaintEngine
operator|::
name|state
operator|=
name|real_engine
operator|->
name|state
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|type
name|QPaintEngine
operator|::
name|Type
name|QEmulationPaintEngine
operator|::
name|type
parameter_list|()
specifier|const
block|{
return|return
name|real_engine
operator|->
name|type
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|begin
name|bool
name|QEmulationPaintEngine
operator|::
name|begin
parameter_list|(
name|QPaintDevice
modifier|*
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|end
name|bool
name|QEmulationPaintEngine
operator|::
name|end
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|createState
name|QPainterState
modifier|*
name|QEmulationPaintEngine
operator|::
name|createState
parameter_list|(
name|QPainterState
modifier|*
name|orig
parameter_list|)
specifier|const
block|{
return|return
name|real_engine
operator|->
name|createState
argument_list|(
name|orig
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fill
name|void
name|QEmulationPaintEngine
operator|::
name|fill
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
name|QPainterState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|->
name|bgMode
operator|==
name|Qt
operator|::
name|OpaqueMode
condition|)
block|{
name|Qt
operator|::
name|BrushStyle
name|style
init|=
name|brush
operator|.
name|style
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|style
operator|>=
name|Qt
operator|::
name|Dense1Pattern
operator|&&
name|style
operator|<=
name|Qt
operator|::
name|DiagCrossPattern
operator|)
operator|||
operator|(
name|style
operator|==
name|Qt
operator|::
name|TexturePattern
operator|)
condition|)
name|real_engine
operator|->
name|fill
argument_list|(
name|path
argument_list|,
name|s
operator|->
name|bgBrush
argument_list|)
expr_stmt|;
block|}
name|Qt
operator|::
name|BrushStyle
name|style
init|=
name|qbrush_style
argument_list|(
name|brush
argument_list|)
decl_stmt|;
if|if
condition|(
name|style
operator|>=
name|Qt
operator|::
name|LinearGradientPattern
operator|&&
name|style
operator|<=
name|Qt
operator|::
name|ConicalGradientPattern
condition|)
block|{
specifier|const
name|QGradient
modifier|*
name|g
init|=
name|brush
operator|.
name|gradient
argument_list|()
decl_stmt|;
if|if
condition|(
name|g
operator|->
name|coordinateMode
argument_list|()
operator|>
name|QGradient
operator|::
name|LogicalMode
condition|)
block|{
if|if
condition|(
name|g
operator|->
name|coordinateMode
argument_list|()
operator|==
name|QGradient
operator|::
name|StretchToDeviceMode
condition|)
block|{
name|QBrush
name|copy
init|=
name|brush
decl_stmt|;
name|QTransform
name|mat
init|=
name|copy
operator|.
name|transform
argument_list|()
decl_stmt|;
name|mat
operator|.
name|scale
argument_list|(
name|real_engine
operator|->
name|painter
argument_list|()
operator|->
name|device
argument_list|()
operator|->
name|width
argument_list|()
argument_list|,
name|real_engine
operator|->
name|painter
argument_list|()
operator|->
name|device
argument_list|()
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setTransform
argument_list|(
name|mat
argument_list|)
expr_stmt|;
name|real_engine
operator|->
name|fill
argument_list|(
name|path
argument_list|,
name|copy
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|g
operator|->
name|coordinateMode
argument_list|()
operator|==
name|QGradient
operator|::
name|ObjectBoundingMode
condition|)
block|{
name|QBrush
name|copy
init|=
name|brush
decl_stmt|;
name|QTransform
name|mat
init|=
name|copy
operator|.
name|transform
argument_list|()
decl_stmt|;
name|QRectF
name|r
init|=
name|path
operator|.
name|controlPointRect
argument_list|()
decl_stmt|;
name|mat
operator|.
name|translate
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|mat
operator|.
name|scale
argument_list|(
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setTransform
argument_list|(
name|mat
argument_list|)
expr_stmt|;
name|real_engine
operator|->
name|fill
argument_list|(
name|path
argument_list|,
name|copy
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
name|real_engine
operator|->
name|fill
argument_list|(
name|path
argument_list|,
name|brush
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stroke
name|void
name|QEmulationPaintEngine
operator|::
name|stroke
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
name|QPainterState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|->
name|bgMode
operator|==
name|Qt
operator|::
name|OpaqueMode
operator|&&
name|pen
operator|.
name|style
argument_list|()
operator|>
name|Qt
operator|::
name|SolidLine
condition|)
block|{
name|QPen
name|bgPen
init|=
name|pen
decl_stmt|;
name|bgPen
operator|.
name|setBrush
argument_list|(
name|s
operator|->
name|bgBrush
argument_list|)
expr_stmt|;
name|bgPen
operator|.
name|setStyle
argument_list|(
name|Qt
operator|::
name|SolidLine
argument_list|)
expr_stmt|;
name|real_engine
operator|->
name|stroke
argument_list|(
name|path
argument_list|,
name|bgPen
argument_list|)
expr_stmt|;
block|}
name|QBrush
name|brush
init|=
name|pen
operator|.
name|brush
argument_list|()
decl_stmt|;
name|QPen
name|copy
init|=
name|pen
decl_stmt|;
name|Qt
operator|::
name|BrushStyle
name|style
init|=
name|qbrush_style
argument_list|(
name|brush
argument_list|)
decl_stmt|;
if|if
condition|(
name|style
operator|>=
name|Qt
operator|::
name|LinearGradientPattern
operator|&&
name|style
operator|<=
name|Qt
operator|::
name|ConicalGradientPattern
condition|)
block|{
specifier|const
name|QGradient
modifier|*
name|g
init|=
name|brush
operator|.
name|gradient
argument_list|()
decl_stmt|;
if|if
condition|(
name|g
operator|->
name|coordinateMode
argument_list|()
operator|>
name|QGradient
operator|::
name|LogicalMode
condition|)
block|{
if|if
condition|(
name|g
operator|->
name|coordinateMode
argument_list|()
operator|==
name|QGradient
operator|::
name|StretchToDeviceMode
condition|)
block|{
name|QTransform
name|mat
init|=
name|brush
operator|.
name|transform
argument_list|()
decl_stmt|;
name|mat
operator|.
name|scale
argument_list|(
name|real_engine
operator|->
name|painter
argument_list|()
operator|->
name|device
argument_list|()
operator|->
name|width
argument_list|()
argument_list|,
name|real_engine
operator|->
name|painter
argument_list|()
operator|->
name|device
argument_list|()
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|brush
operator|.
name|setTransform
argument_list|(
name|mat
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setBrush
argument_list|(
name|brush
argument_list|)
expr_stmt|;
name|real_engine
operator|->
name|stroke
argument_list|(
name|path
argument_list|,
name|copy
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|g
operator|->
name|coordinateMode
argument_list|()
operator|==
name|QGradient
operator|::
name|ObjectBoundingMode
condition|)
block|{
name|QTransform
name|mat
init|=
name|brush
operator|.
name|transform
argument_list|()
decl_stmt|;
name|QRectF
name|r
init|=
name|path
operator|.
name|controlPointRect
argument_list|()
decl_stmt|;
name|mat
operator|.
name|translate
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|mat
operator|.
name|scale
argument_list|(
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|brush
operator|.
name|setTransform
argument_list|(
name|mat
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setBrush
argument_list|(
name|brush
argument_list|)
expr_stmt|;
name|real_engine
operator|->
name|stroke
argument_list|(
name|path
argument_list|,
name|copy
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
name|real_engine
operator|->
name|stroke
argument_list|(
name|path
argument_list|,
name|pen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clip
name|void
name|QEmulationPaintEngine
operator|::
name|clip
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
name|real_engine
operator|->
name|clip
argument_list|(
name|path
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPixmap
name|void
name|QEmulationPaintEngine
operator|::
name|drawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|)
block|{
if|if
condition|(
name|state
argument_list|()
operator|->
name|bgMode
operator|==
name|Qt
operator|::
name|OpaqueMode
operator|&&
name|pm
operator|.
name|isQBitmap
argument_list|()
condition|)
name|fillBGRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|real_engine
operator|->
name|drawPixmap
argument_list|(
name|r
argument_list|,
name|pm
argument_list|,
name|sr
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawTextItem
name|void
name|QEmulationPaintEngine
operator|::
name|drawTextItem
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QTextItem
modifier|&
name|textItem
parameter_list|)
block|{
if|if
condition|(
name|state
argument_list|()
operator|->
name|bgMode
operator|==
name|Qt
operator|::
name|OpaqueMode
condition|)
block|{
specifier|const
name|QTextItemInt
modifier|&
name|ti
init|=
cast|static_cast
argument_list|<
specifier|const
name|QTextItemInt
operator|&
argument_list|>
argument_list|(
name|textItem
argument_list|)
decl_stmt|;
name|QRectF
name|rect
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
operator|-
name|ti
operator|.
name|ascent
operator|.
name|toReal
argument_list|()
argument_list|,
name|ti
operator|.
name|width
operator|.
name|toReal
argument_list|()
argument_list|,
operator|(
name|ti
operator|.
name|ascent
operator|+
name|ti
operator|.
name|descent
operator|+
literal|1
operator|)
operator|.
name|toReal
argument_list|()
argument_list|)
decl_stmt|;
name|fillBGRect
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
name|QPainterState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|BrushStyle
name|style
init|=
name|qbrush_style
argument_list|(
name|s
operator|->
name|pen
operator|.
name|brush
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|style
operator|>=
name|Qt
operator|::
name|LinearGradientPattern
operator|&&
name|style
operator|<=
name|Qt
operator|::
name|ConicalGradientPattern
condition|)
block|{
name|QPen
name|savedPen
init|=
name|s
operator|->
name|pen
decl_stmt|;
name|QGradient
name|g
init|=
operator|*
name|s
operator|->
name|pen
operator|.
name|brush
argument_list|()
operator|.
name|gradient
argument_list|()
decl_stmt|;
if|if
condition|(
name|g
operator|.
name|coordinateMode
argument_list|()
operator|>
name|QGradient
operator|::
name|LogicalMode
condition|)
block|{
name|QTransform
name|mat
init|=
name|s
operator|->
name|pen
operator|.
name|brush
argument_list|()
operator|.
name|transform
argument_list|()
decl_stmt|;
if|if
condition|(
name|g
operator|.
name|coordinateMode
argument_list|()
operator|==
name|QGradient
operator|::
name|StretchToDeviceMode
condition|)
block|{
name|mat
operator|.
name|scale
argument_list|(
name|real_engine
operator|->
name|painter
argument_list|()
operator|->
name|device
argument_list|()
operator|->
name|width
argument_list|()
argument_list|,
name|real_engine
operator|->
name|painter
argument_list|()
operator|->
name|device
argument_list|()
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|g
operator|.
name|coordinateMode
argument_list|()
operator|==
name|QGradient
operator|::
name|ObjectBoundingMode
condition|)
block|{
specifier|const
name|QTextItemInt
modifier|&
name|ti
init|=
cast|static_cast
argument_list|<
specifier|const
name|QTextItemInt
operator|&
argument_list|>
argument_list|(
name|textItem
argument_list|)
decl_stmt|;
name|QRectF
name|r
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
operator|-
name|ti
operator|.
name|ascent
operator|.
name|toReal
argument_list|()
argument_list|,
name|ti
operator|.
name|width
operator|.
name|toReal
argument_list|()
argument_list|,
operator|(
name|ti
operator|.
name|ascent
operator|+
name|ti
operator|.
name|descent
operator|+
literal|1
operator|)
operator|.
name|toReal
argument_list|()
argument_list|)
decl_stmt|;
name|mat
operator|.
name|translate
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|mat
operator|.
name|scale
argument_list|(
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|g
operator|.
name|setCoordinateMode
argument_list|(
name|QGradient
operator|::
name|LogicalMode
argument_list|)
expr_stmt|;
name|QBrush
name|brush
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|brush
operator|.
name|setTransform
argument_list|(
name|mat
argument_list|)
expr_stmt|;
name|s
operator|->
name|pen
operator|.
name|setBrush
argument_list|(
name|brush
argument_list|)
expr_stmt|;
name|penChanged
argument_list|()
expr_stmt|;
name|real_engine
operator|->
name|drawTextItem
argument_list|(
name|p
argument_list|,
name|textItem
argument_list|)
expr_stmt|;
name|s
operator|->
name|pen
operator|=
name|savedPen
expr_stmt|;
name|penChanged
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
name|real_engine
operator|->
name|drawTextItem
argument_list|(
name|p
argument_list|,
name|textItem
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawStaticTextItem
name|void
name|QEmulationPaintEngine
operator|::
name|drawStaticTextItem
parameter_list|(
name|QStaticTextItem
modifier|*
name|item
parameter_list|)
block|{
name|real_engine
operator|->
name|drawStaticTextItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawTiledPixmap
name|void
name|QEmulationPaintEngine
operator|::
name|drawTiledPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|s
parameter_list|)
block|{
if|if
condition|(
name|state
argument_list|()
operator|->
name|bgMode
operator|==
name|Qt
operator|::
name|OpaqueMode
operator|&&
name|pixmap
operator|.
name|isQBitmap
argument_list|()
condition|)
name|fillBGRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|real_engine
operator|->
name|drawTiledPixmap
argument_list|(
name|r
argument_list|,
name|pixmap
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawImage
name|void
name|QEmulationPaintEngine
operator|::
name|drawImage
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QImage
modifier|&
name|pm
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|real_engine
operator|->
name|drawImage
argument_list|(
name|r
argument_list|,
name|pm
argument_list|,
name|sr
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clipEnabledChanged
name|void
name|QEmulationPaintEngine
operator|::
name|clipEnabledChanged
parameter_list|()
block|{
name|real_engine
operator|->
name|clipEnabledChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|penChanged
name|void
name|QEmulationPaintEngine
operator|::
name|penChanged
parameter_list|()
block|{
name|real_engine
operator|->
name|penChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|brushChanged
name|void
name|QEmulationPaintEngine
operator|::
name|brushChanged
parameter_list|()
block|{
name|real_engine
operator|->
name|brushChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|brushOriginChanged
name|void
name|QEmulationPaintEngine
operator|::
name|brushOriginChanged
parameter_list|()
block|{
name|real_engine
operator|->
name|brushOriginChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|opacityChanged
name|void
name|QEmulationPaintEngine
operator|::
name|opacityChanged
parameter_list|()
block|{
name|real_engine
operator|->
name|opacityChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compositionModeChanged
name|void
name|QEmulationPaintEngine
operator|::
name|compositionModeChanged
parameter_list|()
block|{
name|real_engine
operator|->
name|compositionModeChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|renderHintsChanged
name|void
name|QEmulationPaintEngine
operator|::
name|renderHintsChanged
parameter_list|()
block|{
name|real_engine
operator|->
name|renderHintsChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|transformChanged
name|void
name|QEmulationPaintEngine
operator|::
name|transformChanged
parameter_list|()
block|{
name|real_engine
operator|->
name|transformChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setState
name|void
name|QEmulationPaintEngine
operator|::
name|setState
parameter_list|(
name|QPainterState
modifier|*
name|s
parameter_list|)
block|{
name|QPaintEngine
operator|::
name|state
operator|=
name|s
expr_stmt|;
name|real_engine
operator|->
name|setState
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|beginNativePainting
name|void
name|QEmulationPaintEngine
operator|::
name|beginNativePainting
parameter_list|()
block|{
name|real_engine
operator|->
name|beginNativePainting
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endNativePainting
name|void
name|QEmulationPaintEngine
operator|::
name|endNativePainting
parameter_list|()
block|{
name|real_engine
operator|->
name|endNativePainting
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillBGRect
name|void
name|QEmulationPaintEngine
operator|::
name|fillBGRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|)
block|{
name|qreal
name|pts
index|[]
init|=
block|{
name|r
operator|.
name|x
argument_list|()
block|,
name|r
operator|.
name|y
argument_list|()
block|,
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
block|,
name|r
operator|.
name|y
argument_list|()
block|,
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
block|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
block|,
name|r
operator|.
name|x
argument_list|()
block|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|QVectorPath
name|vp
argument_list|(
name|pts
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
name|QVectorPath
operator|::
name|RectangleHint
argument_list|)
decl_stmt|;
name|real_engine
operator|->
name|fill
argument_list|(
name|vp
argument_list|,
name|state
argument_list|()
operator|->
name|bgBrush
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
