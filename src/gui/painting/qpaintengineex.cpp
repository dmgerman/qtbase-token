begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qpaintengineex_p.h"
end_include
begin_include
include|#
directive|include
file|"qpainter_p.h"
end_include
begin_include
include|#
directive|include
file|"qstroker_p.h"
end_include
begin_include
include|#
directive|include
file|"qbezier_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qpainterpath_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qfontengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qstatictext_p.h>
end_include
begin_include
include|#
directive|include
file|<qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_MAX_CACHED_GLYPH_SIZE
argument_list|)
DECL|macro|QT_MAX_CACHED_GLYPH_SIZE
define|#
directive|define
name|QT_MAX_CACHED_GLYPH_SIZE
value|64
endif|#
directive|endif
comment|/*******************************************************************************  *  * class QVectorPath  *  */
DECL|function|~QVectorPath
name|QVectorPath
operator|::
name|~
name|QVectorPath
operator|(
operator|)
block|{
if|if
condition|(
name|m_hints
operator|&
name|ShouldUseCacheHint
condition|)
block|{
name|CacheEntry
modifier|*
name|e
init|=
name|m_cache
decl_stmt|;
while|while
condition|(
name|e
condition|)
block|{
if|if
condition|(
name|e
operator|->
name|data
condition|)
name|e
operator|->
name|cleanup
argument_list|(
name|e
operator|->
name|engine
argument_list|,
name|e
operator|->
name|data
argument_list|)
expr_stmt|;
name|CacheEntry
modifier|*
name|n
init|=
name|e
operator|->
name|next
decl_stmt|;
operator|delete
name|e
expr_stmt|;
name|e
operator|=
name|n
expr_stmt|;
block|}
end_expr_stmt
begin_function
unit|} }
DECL|function|controlPointRect
name|QRectF
name|QVectorPath
operator|::
name|controlPointRect
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_hints
operator|&
name|ControlPointRect
condition|)
return|return
name|QRectF
argument_list|(
name|QPointF
argument_list|(
name|m_cp_rect
operator|.
name|x1
argument_list|,
name|m_cp_rect
operator|.
name|y1
argument_list|)
argument_list|,
name|QPointF
argument_list|(
name|m_cp_rect
operator|.
name|x2
argument_list|,
name|m_cp_rect
operator|.
name|y2
argument_list|)
argument_list|)
return|;
if|if
condition|(
name|m_count
operator|==
literal|0
condition|)
block|{
name|m_cp_rect
operator|.
name|x1
operator|=
name|m_cp_rect
operator|.
name|x2
operator|=
name|m_cp_rect
operator|.
name|y1
operator|=
name|m_cp_rect
operator|.
name|y2
operator|=
literal|0
expr_stmt|;
name|m_hints
operator||=
name|ControlPointRect
expr_stmt|;
return|return
name|QRectF
argument_list|(
name|QPointF
argument_list|(
name|m_cp_rect
operator|.
name|x1
argument_list|,
name|m_cp_rect
operator|.
name|y1
argument_list|)
argument_list|,
name|QPointF
argument_list|(
name|m_cp_rect
operator|.
name|x2
argument_list|,
name|m_cp_rect
operator|.
name|y2
argument_list|)
argument_list|)
return|;
block|}
name|Q_ASSERT
argument_list|(
name|m_points
operator|&&
name|m_count
operator|>
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|qreal
modifier|*
name|pts
init|=
name|m_points
decl_stmt|;
name|m_cp_rect
operator|.
name|x1
operator|=
name|m_cp_rect
operator|.
name|x2
operator|=
operator|*
name|pts
expr_stmt|;
operator|++
name|pts
expr_stmt|;
name|m_cp_rect
operator|.
name|y1
operator|=
name|m_cp_rect
operator|.
name|y2
operator|=
operator|*
name|pts
expr_stmt|;
operator|++
name|pts
expr_stmt|;
specifier|const
name|qreal
modifier|*
name|epts
init|=
name|m_points
operator|+
operator|(
name|m_count
operator|<<
literal|1
operator|)
decl_stmt|;
while|while
condition|(
name|pts
operator|<
name|epts
condition|)
block|{
name|qreal
name|x
init|=
operator|*
name|pts
decl_stmt|;
if|if
condition|(
name|x
operator|<
name|m_cp_rect
operator|.
name|x1
condition|)
name|m_cp_rect
operator|.
name|x1
operator|=
name|x
expr_stmt|;
elseif|else
if|if
condition|(
name|x
operator|>
name|m_cp_rect
operator|.
name|x2
condition|)
name|m_cp_rect
operator|.
name|x2
operator|=
name|x
expr_stmt|;
operator|++
name|pts
expr_stmt|;
name|qreal
name|y
init|=
operator|*
name|pts
decl_stmt|;
if|if
condition|(
name|y
operator|<
name|m_cp_rect
operator|.
name|y1
condition|)
name|m_cp_rect
operator|.
name|y1
operator|=
name|y
expr_stmt|;
elseif|else
if|if
condition|(
name|y
operator|>
name|m_cp_rect
operator|.
name|y2
condition|)
name|m_cp_rect
operator|.
name|y2
operator|=
name|y
expr_stmt|;
operator|++
name|pts
expr_stmt|;
block|}
name|m_hints
operator||=
name|ControlPointRect
expr_stmt|;
return|return
name|QRectF
argument_list|(
name|QPointF
argument_list|(
name|m_cp_rect
operator|.
name|x1
argument_list|,
name|m_cp_rect
operator|.
name|y1
argument_list|)
argument_list|,
name|QPointF
argument_list|(
name|m_cp_rect
operator|.
name|x2
argument_list|,
name|m_cp_rect
operator|.
name|y2
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|addCacheData
name|QVectorPath
operator|::
name|CacheEntry
modifier|*
name|QVectorPath
operator|::
name|addCacheData
parameter_list|(
name|QPaintEngineEx
modifier|*
name|engine
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|qvectorpath_cache_cleanup
name|cleanup
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|lookupCacheData
argument_list|(
name|engine
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|m_hints
operator|&
name|IsCachedHint
operator|)
operator|==
literal|0
condition|)
block|{
name|m_cache
operator|=
literal|0
expr_stmt|;
name|m_hints
operator||=
name|IsCachedHint
expr_stmt|;
block|}
name|CacheEntry
modifier|*
name|e
init|=
operator|new
name|CacheEntry
decl_stmt|;
name|e
operator|->
name|engine
operator|=
name|engine
expr_stmt|;
name|e
operator|->
name|data
operator|=
name|data
expr_stmt|;
name|e
operator|->
name|cleanup
operator|=
name|cleanup
expr_stmt|;
name|e
operator|->
name|next
operator|=
name|m_cache
expr_stmt|;
name|m_cache
operator|=
name|e
expr_stmt|;
return|return
name|m_cache
return|;
block|}
end_function
begin_function
DECL|function|qtVectorPathForPath
specifier|const
name|QVectorPath
modifier|&
name|qtVectorPathForPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|path
operator|.
name|d_func
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|path
operator|.
name|d_func
argument_list|()
operator|->
name|vectorPath
argument_list|()
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_function
DECL|function|operator <<
name|QDebug
name|Q_GUI_EXPORT
modifier|&
name|operator
name|<<
parameter_list|(
name|QDebug
modifier|&
name|s
parameter_list|,
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|)
block|{
name|QRectF
name|rf
init|=
name|path
operator|.
name|controlPointRect
argument_list|()
decl_stmt|;
name|s
operator|<<
literal|"QVectorPath(size:"
operator|<<
name|path
operator|.
name|elementCount
argument_list|()
operator|<<
literal|" hints:"
operator|<<
name|hex
operator|<<
name|path
operator|.
name|hints
argument_list|()
operator|<<
name|rf
operator|<<
literal|')'
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*******************************************************************************  *  * class QPaintEngineExPrivate:  *  */
end_comment
begin_struct
DECL|struct|StrokeHandler
struct|struct
name|StrokeHandler
block|{
DECL|function|StrokeHandler
name|StrokeHandler
parameter_list|(
name|int
name|reserve
parameter_list|)
member_init_list|:
name|pts
argument_list|(
name|reserve
argument_list|)
member_init_list|,
name|types
argument_list|(
name|reserve
argument_list|)
block|{}
DECL|member|pts
name|QDataBuffer
argument_list|<
name|qreal
argument_list|>
name|pts
decl_stmt|;
DECL|member|types
name|QDataBuffer
argument_list|<
name|QPainterPath
operator|::
name|ElementType
argument_list|>
name|types
decl_stmt|;
block|}
struct|;
end_struct
begin_constructor
DECL|function|QPaintEngineExPrivate
name|QPaintEngineExPrivate
operator|::
name|QPaintEngineExPrivate
parameter_list|()
member_init_list|:
name|dasher
argument_list|(
operator|&
name|stroker
argument_list|)
member_init_list|,
name|strokeHandler
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|activeStroker
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|strokerPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QPaintEngineExPrivate
name|QPaintEngineExPrivate
operator|::
name|~
name|QPaintEngineExPrivate
parameter_list|()
block|{
operator|delete
name|strokeHandler
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|replayClipOperations
name|void
name|QPaintEngineExPrivate
operator|::
name|replayClipOperations
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QPaintEngineEx
argument_list|)
expr_stmt|;
name|QPainter
modifier|*
name|p
init|=
name|q
operator|->
name|painter
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|||
operator|!
name|p
operator|->
name|d_ptr
condition|)
return|return;
name|QList
argument_list|<
name|QPainterClipInfo
argument_list|>
name|clipInfo
init|=
name|p
operator|->
name|d_ptr
operator|->
name|state
operator|->
name|clipInfo
decl_stmt|;
name|QTransform
name|transform
init|=
name|q
operator|->
name|state
argument_list|()
operator|->
name|matrix
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clipInfo
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPainterClipInfo
modifier|&
name|info
init|=
name|clipInfo
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|matrix
operator|!=
name|q
operator|->
name|state
argument_list|()
operator|->
name|matrix
condition|)
block|{
name|q
operator|->
name|state
argument_list|()
operator|->
name|matrix
operator|=
name|info
operator|.
name|matrix
expr_stmt|;
name|q
operator|->
name|transformChanged
argument_list|()
expr_stmt|;
block|}
switch|switch
condition|(
name|info
operator|.
name|clipType
condition|)
block|{
case|case
name|QPainterClipInfo
operator|::
name|RegionClip
case|:
name|q
operator|->
name|clip
argument_list|(
name|info
operator|.
name|region
argument_list|,
name|info
operator|.
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterClipInfo
operator|::
name|PathClip
case|:
name|q
operator|->
name|clip
argument_list|(
name|info
operator|.
name|path
argument_list|,
name|info
operator|.
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterClipInfo
operator|::
name|RectClip
case|:
name|q
operator|->
name|clip
argument_list|(
name|info
operator|.
name|rect
argument_list|,
name|info
operator|.
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterClipInfo
operator|::
name|RectFClip
case|:
block|{
name|qreal
name|right
init|=
name|info
operator|.
name|rectf
operator|.
name|x
argument_list|()
operator|+
name|info
operator|.
name|rectf
operator|.
name|width
argument_list|()
decl_stmt|;
name|qreal
name|bottom
init|=
name|info
operator|.
name|rectf
operator|.
name|y
argument_list|()
operator|+
name|info
operator|.
name|rectf
operator|.
name|height
argument_list|()
decl_stmt|;
name|qreal
name|pts
index|[]
init|=
block|{
name|info
operator|.
name|rectf
operator|.
name|x
argument_list|()
block|,
name|info
operator|.
name|rectf
operator|.
name|y
argument_list|()
block|,
name|right
block|,
name|info
operator|.
name|rectf
operator|.
name|y
argument_list|()
block|,
name|right
block|,
name|bottom
block|,
name|info
operator|.
name|rectf
operator|.
name|x
argument_list|()
block|,
name|bottom
block|}
decl_stmt|;
name|QVectorPath
name|vp
argument_list|(
name|pts
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
name|QVectorPath
operator|::
name|RectangleHint
argument_list|)
decl_stmt|;
name|q
operator|->
name|clip
argument_list|(
name|vp
argument_list|,
name|info
operator|.
name|operation
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|transform
operator|!=
name|q
operator|->
name|state
argument_list|()
operator|->
name|matrix
condition|)
block|{
name|q
operator|->
name|state
argument_list|()
operator|->
name|matrix
operator|=
name|transform
expr_stmt|;
name|q
operator|->
name|transformChanged
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|hasClipOperations
name|bool
name|QPaintEngineExPrivate
operator|::
name|hasClipOperations
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QPaintEngineEx
argument_list|)
expr_stmt|;
name|QPainter
modifier|*
name|p
init|=
name|q
operator|->
name|painter
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|||
operator|!
name|p
operator|->
name|d_ptr
condition|)
return|return
literal|false
return|;
name|QList
argument_list|<
name|QPainterClipInfo
argument_list|>
name|clipInfo
init|=
name|p
operator|->
name|d_ptr
operator|->
name|state
operator|->
name|clipInfo
decl_stmt|;
return|return
operator|!
name|clipInfo
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*******************************************************************************  *  * class QPaintEngineEx:  *  */
end_comment
begin_decl_stmt
DECL|variable|qpaintengineex_ellipse_types
specifier|static
name|QPainterPath
operator|::
name|ElementType
name|qpaintengineex_ellipse_types
index|[]
init|=
block|{
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|CurveToElement
block|,
name|QPainterPath
operator|::
name|CurveToDataElement
block|,
name|QPainterPath
operator|::
name|CurveToDataElement
block|,
name|QPainterPath
operator|::
name|CurveToElement
block|,
name|QPainterPath
operator|::
name|CurveToDataElement
block|,
name|QPainterPath
operator|::
name|CurveToDataElement
block|,
name|QPainterPath
operator|::
name|CurveToElement
block|,
name|QPainterPath
operator|::
name|CurveToDataElement
block|,
name|QPainterPath
operator|::
name|CurveToDataElement
block|,
name|QPainterPath
operator|::
name|CurveToElement
block|,
name|QPainterPath
operator|::
name|CurveToDataElement
block|,
name|QPainterPath
operator|::
name|CurveToDataElement
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qpaintengineex_line_types_16
specifier|static
name|QPainterPath
operator|::
name|ElementType
name|qpaintengineex_line_types_16
index|[]
init|=
block|{
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qpaintengineex_rect4_types_32
specifier|static
name|QPainterPath
operator|::
name|ElementType
name|qpaintengineex_rect4_types_32
index|[]
init|=
block|{
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 1
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 2
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 3
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 4
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 5
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 6
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 7
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 8
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 9
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 10
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 11
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 12
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 13
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 14
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 15
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 16
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 17
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 18
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 19
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 20
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 21
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 22
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 23
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 24
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 25
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 26
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 27
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 28
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 29
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 30
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 31
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
comment|// 32
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qpaintengineex_roundedrect_types
specifier|static
name|QPainterPath
operator|::
name|ElementType
name|qpaintengineex_roundedrect_types
index|[]
init|=
block|{
name|QPainterPath
operator|::
name|MoveToElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|CurveToElement
block|,
name|QPainterPath
operator|::
name|CurveToDataElement
block|,
name|QPainterPath
operator|::
name|CurveToDataElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|CurveToElement
block|,
name|QPainterPath
operator|::
name|CurveToDataElement
block|,
name|QPainterPath
operator|::
name|CurveToDataElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|CurveToElement
block|,
name|QPainterPath
operator|::
name|CurveToDataElement
block|,
name|QPainterPath
operator|::
name|CurveToDataElement
block|,
name|QPainterPath
operator|::
name|LineToElement
block|,
name|QPainterPath
operator|::
name|CurveToElement
block|,
name|QPainterPath
operator|::
name|CurveToDataElement
block|,
name|QPainterPath
operator|::
name|CurveToDataElement
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qpaintengineex_moveTo
specifier|static
name|void
name|qpaintengineex_moveTo
parameter_list|(
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
operator|(
operator|(
name|StrokeHandler
operator|*
operator|)
name|data
operator|)
operator|->
name|pts
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
operator|(
operator|(
name|StrokeHandler
operator|*
operator|)
name|data
operator|)
operator|->
name|pts
operator|.
name|add
argument_list|(
name|y
argument_list|)
expr_stmt|;
operator|(
operator|(
name|StrokeHandler
operator|*
operator|)
name|data
operator|)
operator|->
name|types
operator|.
name|add
argument_list|(
name|QPainterPath
operator|::
name|MoveToElement
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qpaintengineex_lineTo
specifier|static
name|void
name|qpaintengineex_lineTo
parameter_list|(
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
operator|(
operator|(
name|StrokeHandler
operator|*
operator|)
name|data
operator|)
operator|->
name|pts
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
operator|(
operator|(
name|StrokeHandler
operator|*
operator|)
name|data
operator|)
operator|->
name|pts
operator|.
name|add
argument_list|(
name|y
argument_list|)
expr_stmt|;
operator|(
operator|(
name|StrokeHandler
operator|*
operator|)
name|data
operator|)
operator|->
name|types
operator|.
name|add
argument_list|(
name|QPainterPath
operator|::
name|LineToElement
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qpaintengineex_cubicTo
specifier|static
name|void
name|qpaintengineex_cubicTo
parameter_list|(
name|qreal
name|c1x
parameter_list|,
name|qreal
name|c1y
parameter_list|,
name|qreal
name|c2x
parameter_list|,
name|qreal
name|c2y
parameter_list|,
name|qreal
name|ex
parameter_list|,
name|qreal
name|ey
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
operator|(
operator|(
name|StrokeHandler
operator|*
operator|)
name|data
operator|)
operator|->
name|pts
operator|.
name|add
argument_list|(
name|c1x
argument_list|)
expr_stmt|;
operator|(
operator|(
name|StrokeHandler
operator|*
operator|)
name|data
operator|)
operator|->
name|pts
operator|.
name|add
argument_list|(
name|c1y
argument_list|)
expr_stmt|;
operator|(
operator|(
name|StrokeHandler
operator|*
operator|)
name|data
operator|)
operator|->
name|types
operator|.
name|add
argument_list|(
name|QPainterPath
operator|::
name|CurveToElement
argument_list|)
expr_stmt|;
operator|(
operator|(
name|StrokeHandler
operator|*
operator|)
name|data
operator|)
operator|->
name|pts
operator|.
name|add
argument_list|(
name|c2x
argument_list|)
expr_stmt|;
operator|(
operator|(
name|StrokeHandler
operator|*
operator|)
name|data
operator|)
operator|->
name|pts
operator|.
name|add
argument_list|(
name|c2y
argument_list|)
expr_stmt|;
operator|(
operator|(
name|StrokeHandler
operator|*
operator|)
name|data
operator|)
operator|->
name|types
operator|.
name|add
argument_list|(
name|QPainterPath
operator|::
name|CurveToDataElement
argument_list|)
expr_stmt|;
operator|(
operator|(
name|StrokeHandler
operator|*
operator|)
name|data
operator|)
operator|->
name|pts
operator|.
name|add
argument_list|(
name|ex
argument_list|)
expr_stmt|;
operator|(
operator|(
name|StrokeHandler
operator|*
operator|)
name|data
operator|)
operator|->
name|pts
operator|.
name|add
argument_list|(
name|ey
argument_list|)
expr_stmt|;
operator|(
operator|(
name|StrokeHandler
operator|*
operator|)
name|data
operator|)
operator|->
name|types
operator|.
name|add
argument_list|(
name|QPainterPath
operator|::
name|CurveToDataElement
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QPaintEngineEx
name|QPaintEngineEx
operator|::
name|QPaintEngineEx
parameter_list|()
member_init_list|:
name|QPaintEngine
argument_list|(
operator|*
operator|new
name|QPaintEngineExPrivate
argument_list|,
name|AllFeatures
argument_list|)
block|{
name|extended
operator|=
literal|true
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QPaintEngineEx
name|QPaintEngineEx
operator|::
name|QPaintEngineEx
parameter_list|(
name|QPaintEngineExPrivate
modifier|&
name|data
parameter_list|)
member_init_list|:
name|QPaintEngine
argument_list|(
name|data
argument_list|,
name|AllFeatures
argument_list|)
block|{
name|extended
operator|=
literal|true
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|createState
name|QPainterState
modifier|*
name|QPaintEngineEx
operator|::
name|createState
parameter_list|(
name|QPainterState
modifier|*
name|orig
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|orig
condition|)
return|return
operator|new
name|QPainterState
return|;
return|return
operator|new
name|QPainterState
argument_list|(
name|orig
argument_list|)
return|;
block|}
end_function
begin_function_decl
name|Q_GUI_EXPORT
specifier|extern
name|bool
name|qt_scaleForTransform
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|,
name|qreal
modifier|*
name|scale
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// qtransform.cpp
end_comment
begin_function
DECL|function|stroke
name|void
name|QPaintEngineEx
operator|::
name|stroke
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|qDebug
argument_list|()
operator|<<
literal|"QPaintEngineEx::stroke()"
operator|<<
name|pen
expr_stmt|;
endif|#
directive|endif
name|Q_D
argument_list|(
name|QPaintEngineEx
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|d
operator|->
name|strokeHandler
condition|)
block|{
name|d
operator|->
name|strokeHandler
operator|=
operator|new
name|StrokeHandler
argument_list|(
name|path
operator|.
name|elementCount
argument_list|()
operator|+
literal|4
argument_list|)
expr_stmt|;
name|d
operator|->
name|stroker
operator|.
name|setMoveToHook
argument_list|(
name|qpaintengineex_moveTo
argument_list|)
expr_stmt|;
name|d
operator|->
name|stroker
operator|.
name|setLineToHook
argument_list|(
name|qpaintengineex_lineTo
argument_list|)
expr_stmt|;
name|d
operator|->
name|stroker
operator|.
name|setCubicToHook
argument_list|(
name|qpaintengineex_cubicTo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|qpen_fast_equals
argument_list|(
name|pen
argument_list|,
name|d
operator|->
name|strokerPen
argument_list|)
condition|)
block|{
name|d
operator|->
name|strokerPen
operator|=
name|pen
expr_stmt|;
name|d
operator|->
name|stroker
operator|.
name|setJoinStyle
argument_list|(
name|pen
operator|.
name|joinStyle
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|stroker
operator|.
name|setCapStyle
argument_list|(
name|pen
operator|.
name|capStyle
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|stroker
operator|.
name|setMiterLimit
argument_list|(
name|pen
operator|.
name|miterLimit
argument_list|()
argument_list|)
expr_stmt|;
name|qreal
name|penWidth
init|=
name|pen
operator|.
name|widthF
argument_list|()
decl_stmt|;
if|if
condition|(
name|penWidth
operator|==
literal|0
condition|)
name|d
operator|->
name|stroker
operator|.
name|setStrokeWidth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|stroker
operator|.
name|setStrokeWidth
argument_list|(
name|penWidth
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|PenStyle
name|style
init|=
name|pen
operator|.
name|style
argument_list|()
decl_stmt|;
if|if
condition|(
name|style
operator|==
name|Qt
operator|::
name|SolidLine
condition|)
block|{
name|d
operator|->
name|activeStroker
operator|=
operator|&
name|d
operator|->
name|stroker
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|style
operator|==
name|Qt
operator|::
name|NoPen
condition|)
block|{
name|d
operator|->
name|activeStroker
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|dasher
operator|.
name|setDashPattern
argument_list|(
name|pen
operator|.
name|dashPattern
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|dasher
operator|.
name|setDashOffset
argument_list|(
name|pen
operator|.
name|dashOffset
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|activeStroker
operator|=
operator|&
name|d
operator|->
name|dasher
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|activeStroker
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|pen
operator|.
name|style
argument_list|()
operator|>
name|Qt
operator|::
name|SolidLine
condition|)
block|{
if|if
condition|(
name|qt_pen_is_cosmetic
argument_list|(
name|pen
argument_list|,
name|state
argument_list|()
operator|->
name|renderHints
argument_list|)
condition|)
block|{
name|d
operator|->
name|activeStroker
operator|->
name|setClipRect
argument_list|(
name|d
operator|->
name|exDeviceRect
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QRectF
name|clipRect
init|=
name|state
argument_list|()
operator|->
name|matrix
operator|.
name|inverted
argument_list|()
operator|.
name|mapRect
argument_list|(
name|QRectF
argument_list|(
name|d
operator|->
name|exDeviceRect
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|->
name|activeStroker
operator|->
name|setClipRect
argument_list|(
name|clipRect
argument_list|)
expr_stmt|;
block|}
block|}
specifier|const
name|QPainterPath
operator|::
name|ElementType
modifier|*
name|types
init|=
name|path
operator|.
name|elements
argument_list|()
decl_stmt|;
specifier|const
name|qreal
modifier|*
name|points
init|=
name|path
operator|.
name|points
argument_list|()
decl_stmt|;
name|int
name|pointCount
init|=
name|path
operator|.
name|elementCount
argument_list|()
decl_stmt|;
specifier|const
name|qreal
modifier|*
name|lastPoint
init|=
name|points
operator|+
operator|(
name|pointCount
operator|<<
literal|1
operator|)
decl_stmt|;
name|d
operator|->
name|strokeHandler
operator|->
name|types
operator|.
name|reset
argument_list|()
expr_stmt|;
name|d
operator|->
name|strokeHandler
operator|->
name|pts
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Some engines might decide to optimize for the non-shape hint later on...
name|uint
name|flags
init|=
name|QVectorPath
operator|::
name|WindingFill
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|elementCount
argument_list|()
operator|>
literal|2
condition|)
name|flags
operator||=
name|QVectorPath
operator|::
name|NonConvexShapeMask
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|stroker
operator|.
name|capStyle
argument_list|()
operator|==
name|Qt
operator|::
name|RoundCap
operator|||
name|d
operator|->
name|stroker
operator|.
name|joinStyle
argument_list|()
operator|==
name|Qt
operator|::
name|RoundJoin
condition|)
name|flags
operator||=
name|QVectorPath
operator|::
name|CurvedShapeMask
expr_stmt|;
comment|// ### Perspective Xforms are currently not supported...
if|if
condition|(
operator|!
name|qt_pen_is_cosmetic
argument_list|(
name|pen
argument_list|,
name|state
argument_list|()
operator|->
name|renderHints
argument_list|)
condition|)
block|{
comment|// We include cosmetic pens in this case to avoid having to
comment|// change the current transform. Normal transformed,
comment|// non-cosmetic pens will be transformed as part of fill
comment|// later, so they are also covered here..
name|d
operator|->
name|activeStroker
operator|->
name|setCurveThresholdFromTransform
argument_list|(
name|state
argument_list|()
operator|->
name|matrix
argument_list|)
expr_stmt|;
name|d
operator|->
name|activeStroker
operator|->
name|begin
argument_list|(
name|d
operator|->
name|strokeHandler
argument_list|)
expr_stmt|;
if|if
condition|(
name|types
condition|)
block|{
while|while
condition|(
name|points
operator|<
name|lastPoint
condition|)
block|{
switch|switch
condition|(
operator|*
name|types
condition|)
block|{
case|case
name|QPainterPath
operator|::
name|MoveToElement
case|:
name|d
operator|->
name|activeStroker
operator|->
name|moveTo
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|points
operator|+=
literal|2
expr_stmt|;
operator|++
name|types
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|LineToElement
case|:
name|d
operator|->
name|activeStroker
operator|->
name|lineTo
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|points
operator|+=
literal|2
expr_stmt|;
operator|++
name|types
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToElement
case|:
name|d
operator|->
name|activeStroker
operator|->
name|cubicTo
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|,
name|points
index|[
literal|2
index|]
argument_list|,
name|points
index|[
literal|3
index|]
argument_list|,
name|points
index|[
literal|4
index|]
argument_list|,
name|points
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|points
operator|+=
literal|6
expr_stmt|;
name|types
operator|+=
literal|3
expr_stmt|;
name|flags
operator||=
name|QVectorPath
operator|::
name|CurvedShapeMask
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|path
operator|.
name|hasImplicitClose
argument_list|()
condition|)
name|d
operator|->
name|activeStroker
operator|->
name|lineTo
argument_list|(
name|path
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|path
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|activeStroker
operator|->
name|moveTo
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|points
operator|+=
literal|2
expr_stmt|;
while|while
condition|(
name|points
operator|<
name|lastPoint
condition|)
block|{
name|d
operator|->
name|activeStroker
operator|->
name|lineTo
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|points
operator|+=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|hasImplicitClose
argument_list|()
condition|)
name|d
operator|->
name|activeStroker
operator|->
name|lineTo
argument_list|(
name|path
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|path
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|activeStroker
operator|->
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|strokeHandler
operator|->
name|types
operator|.
name|size
argument_list|()
condition|)
comment|// an empty path...
return|return;
name|QVectorPath
name|strokePath
argument_list|(
name|d
operator|->
name|strokeHandler
operator|->
name|pts
operator|.
name|data
argument_list|()
argument_list|,
name|d
operator|->
name|strokeHandler
operator|->
name|types
operator|.
name|size
argument_list|()
argument_list|,
name|d
operator|->
name|strokeHandler
operator|->
name|types
operator|.
name|data
argument_list|()
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|fill
argument_list|(
name|strokePath
argument_list|,
name|pen
operator|.
name|brush
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// For cosmetic pens we need a bit of trickery... We to process xform the input points
if|if
condition|(
name|state
argument_list|()
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|>=
name|QTransform
operator|::
name|TxProject
condition|)
block|{
name|QPainterPath
name|painterPath
init|=
name|state
argument_list|()
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|path
operator|.
name|convertToPainterPath
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|->
name|activeStroker
operator|->
name|strokePath
argument_list|(
name|painterPath
argument_list|,
name|d
operator|->
name|strokeHandler
argument_list|,
name|QTransform
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|activeStroker
operator|->
name|setCurveThresholdFromTransform
argument_list|(
name|QTransform
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|activeStroker
operator|->
name|begin
argument_list|(
name|d
operator|->
name|strokeHandler
argument_list|)
expr_stmt|;
if|if
condition|(
name|types
condition|)
block|{
while|while
condition|(
name|points
operator|<
name|lastPoint
condition|)
block|{
switch|switch
condition|(
operator|*
name|types
condition|)
block|{
case|case
name|QPainterPath
operator|::
name|MoveToElement
case|:
block|{
name|QPointF
name|pt
init|=
operator|(
operator|*
operator|(
name|QPointF
operator|*
operator|)
name|points
operator|)
operator|*
name|state
argument_list|()
operator|->
name|matrix
decl_stmt|;
name|d
operator|->
name|activeStroker
operator|->
name|moveTo
argument_list|(
name|pt
operator|.
name|x
argument_list|()
argument_list|,
name|pt
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|points
operator|+=
literal|2
expr_stmt|;
operator|++
name|types
expr_stmt|;
break|break;
block|}
case|case
name|QPainterPath
operator|::
name|LineToElement
case|:
block|{
name|QPointF
name|pt
init|=
operator|(
operator|*
operator|(
name|QPointF
operator|*
operator|)
name|points
operator|)
operator|*
name|state
argument_list|()
operator|->
name|matrix
decl_stmt|;
name|d
operator|->
name|activeStroker
operator|->
name|lineTo
argument_list|(
name|pt
operator|.
name|x
argument_list|()
argument_list|,
name|pt
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|points
operator|+=
literal|2
expr_stmt|;
operator|++
name|types
expr_stmt|;
break|break;
block|}
case|case
name|QPainterPath
operator|::
name|CurveToElement
case|:
block|{
name|QPointF
name|c1
init|=
operator|(
operator|(
name|QPointF
operator|*
operator|)
name|points
operator|)
index|[
literal|0
index|]
operator|*
name|state
argument_list|()
operator|->
name|matrix
decl_stmt|;
name|QPointF
name|c2
init|=
operator|(
operator|(
name|QPointF
operator|*
operator|)
name|points
operator|)
index|[
literal|1
index|]
operator|*
name|state
argument_list|()
operator|->
name|matrix
decl_stmt|;
name|QPointF
name|e
init|=
operator|(
operator|(
name|QPointF
operator|*
operator|)
name|points
operator|)
index|[
literal|2
index|]
operator|*
name|state
argument_list|()
operator|->
name|matrix
decl_stmt|;
name|d
operator|->
name|activeStroker
operator|->
name|cubicTo
argument_list|(
name|c1
operator|.
name|x
argument_list|()
argument_list|,
name|c1
operator|.
name|y
argument_list|()
argument_list|,
name|c2
operator|.
name|x
argument_list|()
argument_list|,
name|c2
operator|.
name|y
argument_list|()
argument_list|,
name|e
operator|.
name|x
argument_list|()
argument_list|,
name|e
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|points
operator|+=
literal|6
expr_stmt|;
name|types
operator|+=
literal|3
expr_stmt|;
name|flags
operator||=
name|QVectorPath
operator|::
name|CurvedShapeMask
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|path
operator|.
name|hasImplicitClose
argument_list|()
condition|)
block|{
name|QPointF
name|pt
init|=
operator|*
operator|(
operator|(
name|QPointF
operator|*
operator|)
name|path
operator|.
name|points
argument_list|()
operator|)
operator|*
name|state
argument_list|()
operator|->
name|matrix
decl_stmt|;
name|d
operator|->
name|activeStroker
operator|->
name|lineTo
argument_list|(
name|pt
operator|.
name|x
argument_list|()
argument_list|,
name|pt
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QPointF
name|p
init|=
operator|(
operator|(
name|QPointF
operator|*
operator|)
name|points
operator|)
index|[
literal|0
index|]
operator|*
name|state
argument_list|()
operator|->
name|matrix
decl_stmt|;
name|d
operator|->
name|activeStroker
operator|->
name|moveTo
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|points
operator|+=
literal|2
expr_stmt|;
while|while
condition|(
name|points
operator|<
name|lastPoint
condition|)
block|{
name|QPointF
name|p
init|=
operator|(
operator|(
name|QPointF
operator|*
operator|)
name|points
operator|)
index|[
literal|0
index|]
operator|*
name|state
argument_list|()
operator|->
name|matrix
decl_stmt|;
name|d
operator|->
name|activeStroker
operator|->
name|lineTo
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|points
operator|+=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|hasImplicitClose
argument_list|()
condition|)
name|d
operator|->
name|activeStroker
operator|->
name|lineTo
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|activeStroker
operator|->
name|end
argument_list|()
expr_stmt|;
block|}
name|QVectorPath
name|strokePath
argument_list|(
name|d
operator|->
name|strokeHandler
operator|->
name|pts
operator|.
name|data
argument_list|()
argument_list|,
name|d
operator|->
name|strokeHandler
operator|->
name|types
operator|.
name|size
argument_list|()
argument_list|,
name|d
operator|->
name|strokeHandler
operator|->
name|types
operator|.
name|data
argument_list|()
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|QTransform
name|xform
init|=
name|state
argument_list|()
operator|->
name|matrix
decl_stmt|;
name|state
argument_list|()
operator|->
name|matrix
operator|=
name|QTransform
argument_list|()
expr_stmt|;
name|transformChanged
argument_list|()
expr_stmt|;
name|QBrush
name|brush
init|=
name|pen
operator|.
name|brush
argument_list|()
decl_stmt|;
if|if
condition|(
name|qbrush_style
argument_list|(
name|brush
argument_list|)
operator|!=
name|Qt
operator|::
name|SolidPattern
condition|)
name|brush
operator|.
name|setTransform
argument_list|(
name|brush
operator|.
name|transform
argument_list|()
operator|*
name|xform
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|strokePath
argument_list|,
name|brush
argument_list|)
expr_stmt|;
name|state
argument_list|()
operator|->
name|matrix
operator|=
name|xform
expr_stmt|;
name|transformChanged
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|draw
name|void
name|QPaintEngineEx
operator|::
name|draw
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|)
block|{
specifier|const
name|QBrush
modifier|&
name|brush
init|=
name|state
argument_list|()
operator|->
name|brush
decl_stmt|;
if|if
condition|(
name|qbrush_style
argument_list|(
name|brush
argument_list|)
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
name|fill
argument_list|(
name|path
argument_list|,
name|brush
argument_list|)
expr_stmt|;
specifier|const
name|QPen
modifier|&
name|pen
init|=
name|state
argument_list|()
operator|->
name|pen
decl_stmt|;
if|if
condition|(
name|qpen_style
argument_list|(
name|pen
argument_list|)
operator|!=
name|Qt
operator|::
name|NoPen
operator|&&
name|qbrush_style
argument_list|(
name|qpen_brush
argument_list|(
name|pen
argument_list|)
argument_list|)
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
name|stroke
argument_list|(
name|path
argument_list|,
name|pen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clip
name|void
name|QPaintEngineEx
operator|::
name|clip
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
name|qreal
name|right
init|=
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
decl_stmt|;
name|qreal
name|bottom
init|=
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
decl_stmt|;
name|qreal
name|pts
index|[]
init|=
block|{
name|qreal
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|)
block|,
name|qreal
argument_list|(
name|r
operator|.
name|y
argument_list|()
argument_list|)
block|,
name|right
block|,
name|qreal
argument_list|(
name|r
operator|.
name|y
argument_list|()
argument_list|)
block|,
name|right
block|,
name|bottom
block|,
name|qreal
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|)
block|,
name|bottom
block|,
name|qreal
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|)
block|,
name|qreal
argument_list|(
argument|r.y()
argument_list|)
block|}
decl_stmt|;
name|QVectorPath
name|vp
argument_list|(
name|pts
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
name|QVectorPath
operator|::
name|RectangleHint
argument_list|)
decl_stmt|;
name|clip
argument_list|(
name|vp
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clip
name|void
name|QPaintEngineEx
operator|::
name|clip
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
if|if
condition|(
name|region
operator|.
name|rectCount
argument_list|()
operator|==
literal|1
condition|)
name|clip
argument_list|(
name|region
operator|.
name|boundingRect
argument_list|()
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|region
operator|.
name|rects
argument_list|()
decl_stmt|;
if|if
condition|(
name|rects
operator|.
name|size
argument_list|()
operator|<=
literal|32
condition|)
block|{
name|qreal
name|pts
index|[
literal|2
operator|*
literal|32
operator|*
literal|4
index|]
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QVector
argument_list|<
name|QRect
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|rects
operator|.
name|constBegin
argument_list|()
init|;
name|i
operator|!=
name|rects
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|x1
init|=
name|i
operator|->
name|x
argument_list|()
decl_stmt|;
name|qreal
name|y1
init|=
name|i
operator|->
name|y
argument_list|()
decl_stmt|;
name|qreal
name|x2
init|=
name|i
operator|->
name|x
argument_list|()
operator|+
name|i
operator|->
name|width
argument_list|()
decl_stmt|;
name|qreal
name|y2
init|=
name|i
operator|->
name|y
argument_list|()
operator|+
name|i
operator|->
name|height
argument_list|()
decl_stmt|;
name|pts
index|[
name|pos
operator|++
index|]
operator|=
name|x1
expr_stmt|;
name|pts
index|[
name|pos
operator|++
index|]
operator|=
name|y1
expr_stmt|;
name|pts
index|[
name|pos
operator|++
index|]
operator|=
name|x2
expr_stmt|;
name|pts
index|[
name|pos
operator|++
index|]
operator|=
name|y1
expr_stmt|;
name|pts
index|[
name|pos
operator|++
index|]
operator|=
name|x2
expr_stmt|;
name|pts
index|[
name|pos
operator|++
index|]
operator|=
name|y2
expr_stmt|;
name|pts
index|[
name|pos
operator|++
index|]
operator|=
name|x1
expr_stmt|;
name|pts
index|[
name|pos
operator|++
index|]
operator|=
name|y2
expr_stmt|;
block|}
name|QVectorPath
name|vp
argument_list|(
name|pts
argument_list|,
name|rects
operator|.
name|size
argument_list|()
operator|*
literal|4
argument_list|,
name|qpaintengineex_rect4_types_32
argument_list|)
decl_stmt|;
name|clip
argument_list|(
name|vp
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVarLengthArray
argument_list|<
name|qreal
argument_list|>
name|pts
argument_list|(
name|rects
operator|.
name|size
argument_list|()
operator|*
literal|2
operator|*
literal|4
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|QPainterPath
operator|::
name|ElementType
argument_list|>
name|types
argument_list|(
name|rects
operator|.
name|size
argument_list|()
operator|*
literal|4
argument_list|)
decl_stmt|;
name|int
name|ppos
init|=
literal|0
decl_stmt|;
name|int
name|tpos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QVector
argument_list|<
name|QRect
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|rects
operator|.
name|constBegin
argument_list|()
init|;
name|i
operator|!=
name|rects
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|x1
init|=
name|i
operator|->
name|x
argument_list|()
decl_stmt|;
name|qreal
name|y1
init|=
name|i
operator|->
name|y
argument_list|()
decl_stmt|;
name|qreal
name|x2
init|=
name|i
operator|->
name|x
argument_list|()
operator|+
name|i
operator|->
name|width
argument_list|()
decl_stmt|;
name|qreal
name|y2
init|=
name|i
operator|->
name|y
argument_list|()
operator|+
name|i
operator|->
name|height
argument_list|()
decl_stmt|;
name|pts
index|[
name|ppos
operator|++
index|]
operator|=
name|x1
expr_stmt|;
name|pts
index|[
name|ppos
operator|++
index|]
operator|=
name|y1
expr_stmt|;
name|pts
index|[
name|ppos
operator|++
index|]
operator|=
name|x2
expr_stmt|;
name|pts
index|[
name|ppos
operator|++
index|]
operator|=
name|y1
expr_stmt|;
name|pts
index|[
name|ppos
operator|++
index|]
operator|=
name|x2
expr_stmt|;
name|pts
index|[
name|ppos
operator|++
index|]
operator|=
name|y2
expr_stmt|;
name|pts
index|[
name|ppos
operator|++
index|]
operator|=
name|x1
expr_stmt|;
name|pts
index|[
name|ppos
operator|++
index|]
operator|=
name|y2
expr_stmt|;
name|types
index|[
name|tpos
operator|++
index|]
operator|=
name|QPainterPath
operator|::
name|MoveToElement
expr_stmt|;
name|types
index|[
name|tpos
operator|++
index|]
operator|=
name|QPainterPath
operator|::
name|LineToElement
expr_stmt|;
name|types
index|[
name|tpos
operator|++
index|]
operator|=
name|QPainterPath
operator|::
name|LineToElement
expr_stmt|;
name|types
index|[
name|tpos
operator|++
index|]
operator|=
name|QPainterPath
operator|::
name|LineToElement
expr_stmt|;
block|}
name|QVectorPath
name|vp
argument_list|(
name|pts
operator|.
name|data
argument_list|()
argument_list|,
name|rects
operator|.
name|size
argument_list|()
operator|*
literal|4
argument_list|,
name|types
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|clip
argument_list|(
name|vp
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|clip
name|void
name|QPaintEngineEx
operator|::
name|clip
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QVectorPath
name|vp
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|clip
argument_list|(
name|vp
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clip
argument_list|(
name|qtVectorPathForPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fillRect
name|void
name|QPaintEngineEx
operator|::
name|fillRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
name|qreal
name|pts
index|[]
init|=
block|{
name|r
operator|.
name|x
argument_list|()
block|,
name|r
operator|.
name|y
argument_list|()
block|,
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
block|,
name|r
operator|.
name|y
argument_list|()
block|,
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
block|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
block|,
name|r
operator|.
name|x
argument_list|()
block|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|QVectorPath
name|vp
argument_list|(
name|pts
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
name|QVectorPath
operator|::
name|RectangleHint
argument_list|)
decl_stmt|;
name|fill
argument_list|(
name|vp
argument_list|,
name|brush
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillRect
name|void
name|QPaintEngineEx
operator|::
name|fillRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|fillRect
argument_list|(
name|r
argument_list|,
name|QBrush
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawRects
name|void
name|QPaintEngineEx
operator|::
name|drawRects
parameter_list|(
specifier|const
name|QRect
modifier|*
name|rects
parameter_list|,
name|int
name|rectCount
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rectCount
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRect
modifier|&
name|r
init|=
name|rects
index|[
name|i
index|]
decl_stmt|;
comment|// ### Is there a one off here?
name|qreal
name|right
init|=
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
decl_stmt|;
name|qreal
name|bottom
init|=
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
decl_stmt|;
name|qreal
name|pts
index|[]
init|=
block|{
name|qreal
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|)
block|,
name|qreal
argument_list|(
name|r
operator|.
name|y
argument_list|()
argument_list|)
block|,
name|right
block|,
name|qreal
argument_list|(
name|r
operator|.
name|y
argument_list|()
argument_list|)
block|,
name|right
block|,
name|bottom
block|,
name|qreal
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|)
block|,
name|bottom
block|,
name|qreal
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|)
block|,
name|qreal
argument_list|(
argument|r.y()
argument_list|)
block|}
decl_stmt|;
name|QVectorPath
name|vp
argument_list|(
name|pts
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
name|QVectorPath
operator|::
name|RectangleHint
argument_list|)
decl_stmt|;
name|draw
argument_list|(
name|vp
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawRects
name|void
name|QPaintEngineEx
operator|::
name|drawRects
parameter_list|(
specifier|const
name|QRectF
modifier|*
name|rects
parameter_list|,
name|int
name|rectCount
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rectCount
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRectF
modifier|&
name|r
init|=
name|rects
index|[
name|i
index|]
decl_stmt|;
name|qreal
name|right
init|=
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
decl_stmt|;
name|qreal
name|bottom
init|=
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
decl_stmt|;
name|qreal
name|pts
index|[]
init|=
block|{
name|r
operator|.
name|x
argument_list|()
block|,
name|r
operator|.
name|y
argument_list|()
block|,
name|right
block|,
name|r
operator|.
name|y
argument_list|()
block|,
name|right
block|,
name|bottom
block|,
name|r
operator|.
name|x
argument_list|()
block|,
name|bottom
block|,
name|r
operator|.
name|x
argument_list|()
block|,
name|r
operator|.
name|y
argument_list|()
block|}
decl_stmt|;
name|QVectorPath
name|vp
argument_list|(
name|pts
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
name|QVectorPath
operator|::
name|RectangleHint
argument_list|)
decl_stmt|;
name|draw
argument_list|(
name|vp
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawRoundedRect
name|void
name|QPaintEngineEx
operator|::
name|drawRoundedRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
name|qreal
name|xRadius
parameter_list|,
name|qreal
name|yRadius
parameter_list|,
name|Qt
operator|::
name|SizeMode
name|mode
parameter_list|)
block|{
name|qreal
name|x1
init|=
name|rect
operator|.
name|left
argument_list|()
decl_stmt|;
name|qreal
name|x2
init|=
name|rect
operator|.
name|right
argument_list|()
decl_stmt|;
name|qreal
name|y1
init|=
name|rect
operator|.
name|top
argument_list|()
decl_stmt|;
name|qreal
name|y2
init|=
name|rect
operator|.
name|bottom
argument_list|()
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|Qt
operator|::
name|RelativeSize
condition|)
block|{
name|xRadius
operator|=
name|xRadius
operator|*
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|200.
expr_stmt|;
name|yRadius
operator|=
name|yRadius
operator|*
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|200.
expr_stmt|;
block|}
name|xRadius
operator|=
name|qMin
argument_list|(
name|xRadius
argument_list|,
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|yRadius
operator|=
name|qMin
argument_list|(
name|yRadius
argument_list|,
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|qreal
name|pts
index|[]
init|=
block|{
name|x1
operator|+
name|xRadius
block|,
name|y1
block|,
comment|// MoveTo
name|x2
operator|-
name|xRadius
block|,
name|y1
block|,
comment|// LineTo
name|x2
operator|-
operator|(
literal|1
operator|-
name|KAPPA
operator|)
operator|*
name|xRadius
block|,
name|y1
block|,
comment|// CurveTo
name|x2
block|,
name|y1
operator|+
operator|(
literal|1
operator|-
name|KAPPA
operator|)
operator|*
name|yRadius
block|,
name|x2
block|,
name|y1
operator|+
name|yRadius
block|,
name|x2
block|,
name|y2
operator|-
name|yRadius
block|,
comment|// LineTo
name|x2
block|,
name|y2
operator|-
operator|(
literal|1
operator|-
name|KAPPA
operator|)
operator|*
name|yRadius
block|,
comment|// CurveTo
name|x2
operator|-
operator|(
literal|1
operator|-
name|KAPPA
operator|)
operator|*
name|xRadius
block|,
name|y2
block|,
name|x2
operator|-
name|xRadius
block|,
name|y2
block|,
name|x1
operator|+
name|xRadius
block|,
name|y2
block|,
comment|// LineTo
name|x1
operator|+
operator|(
literal|1
operator|-
name|KAPPA
operator|)
operator|*
name|xRadius
block|,
name|y2
block|,
comment|// CurveTo
name|x1
block|,
name|y2
operator|-
operator|(
literal|1
operator|-
name|KAPPA
operator|)
operator|*
name|yRadius
block|,
name|x1
block|,
name|y2
operator|-
name|yRadius
block|,
name|x1
block|,
name|y1
operator|+
name|yRadius
block|,
comment|// LineTo
name|x1
block|,
name|y1
operator|+
operator|(
literal|1
operator|-
name|KAPPA
operator|)
operator|*
name|yRadius
block|,
comment|// CurveTo
name|x1
operator|+
operator|(
literal|1
operator|-
name|KAPPA
operator|)
operator|*
name|xRadius
block|,
name|y1
block|,
name|x1
operator|+
name|xRadius
block|,
name|y1
block|}
decl_stmt|;
name|QVectorPath
name|path
argument_list|(
name|pts
argument_list|,
literal|17
argument_list|,
name|qpaintengineex_roundedrect_types
argument_list|,
name|QVectorPath
operator|::
name|RoundedRectHint
argument_list|)
decl_stmt|;
name|draw
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawLines
name|void
name|QPaintEngineEx
operator|::
name|drawLines
parameter_list|(
specifier|const
name|QLine
modifier|*
name|lines
parameter_list|,
name|int
name|lineCount
parameter_list|)
block|{
name|int
name|elementCount
init|=
name|lineCount
operator|<<
literal|1
decl_stmt|;
while|while
condition|(
name|elementCount
operator|>
literal|0
condition|)
block|{
name|int
name|count
init|=
name|qMin
argument_list|(
name|elementCount
argument_list|,
literal|32
argument_list|)
decl_stmt|;
name|qreal
name|pts
index|[
literal|64
index|]
decl_stmt|;
name|int
name|count2
init|=
name|count
operator|<<
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count2
condition|;
operator|++
name|i
control|)
name|pts
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|int
operator|*
operator|)
name|lines
operator|)
index|[
name|i
index|]
expr_stmt|;
name|QVectorPath
name|path
argument_list|(
name|pts
argument_list|,
name|count
argument_list|,
name|qpaintengineex_line_types_16
argument_list|,
name|QVectorPath
operator|::
name|LinesHint
argument_list|)
decl_stmt|;
name|stroke
argument_list|(
name|path
argument_list|,
name|state
argument_list|()
operator|->
name|pen
argument_list|)
expr_stmt|;
name|elementCount
operator|-=
literal|32
expr_stmt|;
name|lines
operator|+=
literal|16
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawLines
name|void
name|QPaintEngineEx
operator|::
name|drawLines
parameter_list|(
specifier|const
name|QLineF
modifier|*
name|lines
parameter_list|,
name|int
name|lineCount
parameter_list|)
block|{
name|int
name|elementCount
init|=
name|lineCount
operator|<<
literal|1
decl_stmt|;
while|while
condition|(
name|elementCount
operator|>
literal|0
condition|)
block|{
name|int
name|count
init|=
name|qMin
argument_list|(
name|elementCount
argument_list|,
literal|32
argument_list|)
decl_stmt|;
name|QVectorPath
name|path
argument_list|(
operator|(
name|qreal
operator|*
operator|)
name|lines
argument_list|,
name|count
argument_list|,
name|qpaintengineex_line_types_16
argument_list|,
name|QVectorPath
operator|::
name|LinesHint
argument_list|)
decl_stmt|;
name|stroke
argument_list|(
name|path
argument_list|,
name|state
argument_list|()
operator|->
name|pen
argument_list|)
expr_stmt|;
name|elementCount
operator|-=
literal|32
expr_stmt|;
name|lines
operator|+=
literal|16
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawEllipse
name|void
name|QPaintEngineEx
operator|::
name|drawEllipse
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|)
block|{
name|qreal
name|pts
index|[
literal|26
index|]
decl_stmt|;
comment|// QPointF[13] without constructors...
union|union
block|{
name|qreal
modifier|*
name|ptr
decl_stmt|;
name|QPointF
modifier|*
name|points
decl_stmt|;
block|}
name|x
union|;
name|x
operator|.
name|ptr
operator|=
name|pts
expr_stmt|;
name|int
name|point_count
init|=
literal|0
decl_stmt|;
name|x
operator|.
name|points
index|[
literal|0
index|]
operator|=
name|qt_curves_for_arc
argument_list|(
name|r
argument_list|,
literal|0
argument_list|,
operator|-
literal|360
argument_list|,
name|x
operator|.
name|points
operator|+
literal|1
argument_list|,
operator|&
name|point_count
argument_list|)
expr_stmt|;
if|if
condition|(
name|point_count
operator|==
literal|0
condition|)
return|return;
name|QVectorPath
name|vp
argument_list|(
operator|(
name|qreal
operator|*
operator|)
name|pts
argument_list|,
name|point_count
operator|+
literal|1
argument_list|,
name|qpaintengineex_ellipse_types
argument_list|,
name|QVectorPath
operator|::
name|EllipseHint
argument_list|)
decl_stmt|;
name|draw
argument_list|(
name|vp
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawEllipse
name|void
name|QPaintEngineEx
operator|::
name|drawEllipse
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
block|{
name|drawEllipse
argument_list|(
name|QRectF
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPath
name|void
name|QPaintEngineEx
operator|::
name|drawPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
name|draw
argument_list|(
name|qtVectorPathForPath
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPoints
name|void
name|QPaintEngineEx
operator|::
name|drawPoints
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|)
block|{
name|QPen
name|pen
init|=
name|state
argument_list|()
operator|->
name|pen
decl_stmt|;
if|if
condition|(
name|pen
operator|.
name|capStyle
argument_list|()
operator|==
name|Qt
operator|::
name|FlatCap
condition|)
name|pen
operator|.
name|setCapStyle
argument_list|(
name|Qt
operator|::
name|SquareCap
argument_list|)
expr_stmt|;
if|if
condition|(
name|pen
operator|.
name|brush
argument_list|()
operator|.
name|isOpaque
argument_list|()
condition|)
block|{
while|while
condition|(
name|pointCount
operator|>
literal|0
condition|)
block|{
name|int
name|count
init|=
name|qMin
argument_list|(
name|pointCount
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|qreal
name|pts
index|[
literal|64
index|]
decl_stmt|;
name|int
name|oset
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|pts
index|[
operator|++
name|oset
index|]
operator|=
name|points
index|[
name|i
index|]
operator|.
name|x
argument_list|()
expr_stmt|;
name|pts
index|[
operator|++
name|oset
index|]
operator|=
name|points
index|[
name|i
index|]
operator|.
name|y
argument_list|()
expr_stmt|;
name|pts
index|[
operator|++
name|oset
index|]
operator|=
name|points
index|[
name|i
index|]
operator|.
name|x
argument_list|()
operator|+
literal|1
operator|/
literal|63.
expr_stmt|;
name|pts
index|[
operator|++
name|oset
index|]
operator|=
name|points
index|[
name|i
index|]
operator|.
name|y
argument_list|()
expr_stmt|;
block|}
name|QVectorPath
name|path
argument_list|(
name|pts
argument_list|,
name|count
operator|*
literal|2
argument_list|,
name|qpaintengineex_line_types_16
argument_list|,
name|QVectorPath
operator|::
name|LinesHint
argument_list|)
decl_stmt|;
name|stroke
argument_list|(
name|path
argument_list|,
name|pen
argument_list|)
expr_stmt|;
name|pointCount
operator|-=
literal|16
expr_stmt|;
name|points
operator|+=
literal|16
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pointCount
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|pts
index|[]
init|=
block|{
name|points
index|[
name|i
index|]
operator|.
name|x
argument_list|()
block|,
name|points
index|[
name|i
index|]
operator|.
name|y
argument_list|()
block|,
name|points
index|[
name|i
index|]
operator|.
name|x
argument_list|()
operator|+
name|qreal
argument_list|(
literal|1
operator|/
literal|63.
argument_list|)
block|,
name|points
index|[
name|i
index|]
operator|.
name|y
argument_list|()
block|}
decl_stmt|;
name|QVectorPath
name|path
argument_list|(
name|pts
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|stroke
argument_list|(
name|path
argument_list|,
name|pen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|drawPoints
name|void
name|QPaintEngineEx
operator|::
name|drawPoints
parameter_list|(
specifier|const
name|QPoint
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|)
block|{
name|QPen
name|pen
init|=
name|state
argument_list|()
operator|->
name|pen
decl_stmt|;
if|if
condition|(
name|pen
operator|.
name|capStyle
argument_list|()
operator|==
name|Qt
operator|::
name|FlatCap
condition|)
name|pen
operator|.
name|setCapStyle
argument_list|(
name|Qt
operator|::
name|SquareCap
argument_list|)
expr_stmt|;
if|if
condition|(
name|pen
operator|.
name|brush
argument_list|()
operator|.
name|isOpaque
argument_list|()
condition|)
block|{
while|while
condition|(
name|pointCount
operator|>
literal|0
condition|)
block|{
name|int
name|count
init|=
name|qMin
argument_list|(
name|pointCount
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|qreal
name|pts
index|[
literal|64
index|]
decl_stmt|;
name|int
name|oset
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|pts
index|[
operator|++
name|oset
index|]
operator|=
name|points
index|[
name|i
index|]
operator|.
name|x
argument_list|()
expr_stmt|;
name|pts
index|[
operator|++
name|oset
index|]
operator|=
name|points
index|[
name|i
index|]
operator|.
name|y
argument_list|()
expr_stmt|;
name|pts
index|[
operator|++
name|oset
index|]
operator|=
name|points
index|[
name|i
index|]
operator|.
name|x
argument_list|()
operator|+
literal|1
operator|/
literal|63.
expr_stmt|;
name|pts
index|[
operator|++
name|oset
index|]
operator|=
name|points
index|[
name|i
index|]
operator|.
name|y
argument_list|()
expr_stmt|;
block|}
name|QVectorPath
name|path
argument_list|(
name|pts
argument_list|,
name|count
operator|*
literal|2
argument_list|,
name|qpaintengineex_line_types_16
argument_list|,
name|QVectorPath
operator|::
name|LinesHint
argument_list|)
decl_stmt|;
name|stroke
argument_list|(
name|path
argument_list|,
name|pen
argument_list|)
expr_stmt|;
name|pointCount
operator|-=
literal|16
expr_stmt|;
name|points
operator|+=
literal|16
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pointCount
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|pts
index|[]
init|=
block|{
name|qreal
argument_list|(
name|points
index|[
name|i
index|]
operator|.
name|x
argument_list|()
argument_list|)
block|,
name|qreal
argument_list|(
name|points
index|[
name|i
index|]
operator|.
name|y
argument_list|()
argument_list|)
block|,
name|qreal
argument_list|(
name|points
index|[
name|i
index|]
operator|.
name|x
argument_list|()
operator|+
literal|1
operator|/
literal|63.
argument_list|)
block|,
name|qreal
argument_list|(
argument|points[i].y()
argument_list|)
block|}
decl_stmt|;
name|QVectorPath
name|path
argument_list|(
name|pts
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|stroke
argument_list|(
name|path
argument_list|,
name|pen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|drawPolygon
name|void
name|QPaintEngineEx
operator|::
name|drawPolygon
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|PolygonDrawMode
name|mode
parameter_list|)
block|{
name|QVectorPath
name|path
argument_list|(
operator|(
name|qreal
operator|*
operator|)
name|points
argument_list|,
name|pointCount
argument_list|,
literal|0
argument_list|,
name|QVectorPath
operator|::
name|polygonFlags
argument_list|(
name|mode
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|PolylineMode
condition|)
name|stroke
argument_list|(
name|path
argument_list|,
name|state
argument_list|()
operator|->
name|pen
argument_list|)
expr_stmt|;
else|else
name|draw
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPolygon
name|void
name|QPaintEngineEx
operator|::
name|drawPolygon
parameter_list|(
specifier|const
name|QPoint
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|PolygonDrawMode
name|mode
parameter_list|)
block|{
name|int
name|count
init|=
name|pointCount
operator|<<
literal|1
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|qreal
argument_list|>
name|pts
argument_list|(
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|pts
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|int
operator|*
operator|)
name|points
operator|)
index|[
name|i
index|]
expr_stmt|;
name|QVectorPath
name|path
argument_list|(
name|pts
operator|.
name|data
argument_list|()
argument_list|,
name|pointCount
argument_list|,
literal|0
argument_list|,
name|QVectorPath
operator|::
name|polygonFlags
argument_list|(
name|mode
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|PolylineMode
condition|)
name|stroke
argument_list|(
name|path
argument_list|,
name|state
argument_list|()
operator|->
name|pen
argument_list|)
expr_stmt|;
else|else
name|draw
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPixmap
name|void
name|QPaintEngineEx
operator|::
name|drawPixmap
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|)
block|{
name|drawPixmap
argument_list|(
name|QRectF
argument_list|(
name|pos
argument_list|,
name|pm
operator|.
name|size
argument_list|()
operator|/
name|pm
operator|.
name|devicePixelRatio
argument_list|()
argument_list|)
argument_list|,
name|pm
argument_list|,
name|pm
operator|.
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawImage
name|void
name|QPaintEngineEx
operator|::
name|drawImage
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image
parameter_list|)
block|{
name|drawImage
argument_list|(
name|QRectF
argument_list|(
name|pos
argument_list|,
name|image
operator|.
name|size
argument_list|()
operator|/
name|image
operator|.
name|devicePixelRatio
argument_list|()
argument_list|)
argument_list|,
name|image
argument_list|,
name|image
operator|.
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawTiledPixmap
name|void
name|QPaintEngineEx
operator|::
name|drawTiledPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|s
parameter_list|)
block|{
name|QBrush
name|brush
argument_list|(
name|state
argument_list|()
operator|->
name|pen
operator|.
name|color
argument_list|()
argument_list|,
name|pixmap
argument_list|)
decl_stmt|;
name|QTransform
name|xform
init|=
name|QTransform
operator|::
name|fromTranslate
argument_list|(
name|r
operator|.
name|x
argument_list|()
operator|-
name|s
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|-
name|s
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|brush
operator|.
name|setTransform
argument_list|(
name|xform
argument_list|)
expr_stmt|;
name|qreal
name|pts
index|[]
init|=
block|{
name|r
operator|.
name|x
argument_list|()
block|,
name|r
operator|.
name|y
argument_list|()
block|,
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
block|,
name|r
operator|.
name|y
argument_list|()
block|,
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
block|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
block|,
name|r
operator|.
name|x
argument_list|()
block|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|QVectorPath
name|path
argument_list|(
name|pts
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
name|QVectorPath
operator|::
name|RectangleHint
argument_list|)
decl_stmt|;
name|fill
argument_list|(
name|path
argument_list|,
name|brush
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPixmapFragments
name|void
name|QPaintEngineEx
operator|::
name|drawPixmapFragments
parameter_list|(
specifier|const
name|QPainter
operator|::
name|PixmapFragment
modifier|*
name|fragments
parameter_list|,
name|int
name|fragmentCount
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
name|QPainter
operator|::
name|PixmapFragmentHints
comment|/*hints*/
parameter_list|)
block|{
if|if
condition|(
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|qreal
name|oldOpacity
init|=
name|state
argument_list|()
operator|->
name|opacity
decl_stmt|;
name|QTransform
name|oldTransform
init|=
name|state
argument_list|()
operator|->
name|matrix
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fragmentCount
condition|;
operator|++
name|i
control|)
block|{
name|QTransform
name|transform
init|=
name|oldTransform
decl_stmt|;
name|transform
operator|.
name|translate
argument_list|(
name|fragments
index|[
name|i
index|]
operator|.
name|x
argument_list|,
name|fragments
index|[
name|i
index|]
operator|.
name|y
argument_list|)
expr_stmt|;
name|transform
operator|.
name|rotate
argument_list|(
name|fragments
index|[
name|i
index|]
operator|.
name|rotation
argument_list|)
expr_stmt|;
name|state
argument_list|()
operator|->
name|opacity
operator|=
name|oldOpacity
operator|*
name|fragments
index|[
name|i
index|]
operator|.
name|opacity
expr_stmt|;
name|state
argument_list|()
operator|->
name|matrix
operator|=
name|transform
expr_stmt|;
name|opacityChanged
argument_list|()
expr_stmt|;
name|transformChanged
argument_list|()
expr_stmt|;
name|qreal
name|w
init|=
name|fragments
index|[
name|i
index|]
operator|.
name|scaleX
operator|*
name|fragments
index|[
name|i
index|]
operator|.
name|width
decl_stmt|;
name|qreal
name|h
init|=
name|fragments
index|[
name|i
index|]
operator|.
name|scaleY
operator|*
name|fragments
index|[
name|i
index|]
operator|.
name|height
decl_stmt|;
name|QRectF
name|sourceRect
argument_list|(
name|fragments
index|[
name|i
index|]
operator|.
name|sourceLeft
argument_list|,
name|fragments
index|[
name|i
index|]
operator|.
name|sourceTop
argument_list|,
name|fragments
index|[
name|i
index|]
operator|.
name|width
argument_list|,
name|fragments
index|[
name|i
index|]
operator|.
name|height
argument_list|)
decl_stmt|;
name|drawPixmap
argument_list|(
name|QRectF
argument_list|(
operator|-
literal|0.5
operator|*
name|w
argument_list|,
operator|-
literal|0.5
operator|*
name|h
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
argument_list|,
name|pixmap
argument_list|,
name|sourceRect
argument_list|)
expr_stmt|;
block|}
name|state
argument_list|()
operator|->
name|opacity
operator|=
name|oldOpacity
expr_stmt|;
name|state
argument_list|()
operator|->
name|matrix
operator|=
name|oldTransform
expr_stmt|;
name|opacityChanged
argument_list|()
expr_stmt|;
name|transformChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setState
name|void
name|QPaintEngineEx
operator|::
name|setState
parameter_list|(
name|QPainterState
modifier|*
name|s
parameter_list|)
block|{
name|QPaintEngine
operator|::
name|state
operator|=
name|s
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateState
name|void
name|QPaintEngineEx
operator|::
name|updateState
parameter_list|(
specifier|const
name|QPaintEngineState
modifier|&
parameter_list|)
block|{
comment|// do nothing...
block|}
end_function
begin_function
DECL|function|qt_painterPathFromVectorPath
name|Q_GUI_EXPORT
name|QPainterPath
name|qt_painterPathFromVectorPath
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|)
block|{
specifier|const
name|qreal
modifier|*
name|points
init|=
name|path
operator|.
name|points
argument_list|()
decl_stmt|;
specifier|const
name|QPainterPath
operator|::
name|ElementType
modifier|*
name|types
init|=
name|path
operator|.
name|elements
argument_list|()
decl_stmt|;
name|QPainterPath
name|p
decl_stmt|;
if|if
condition|(
name|types
condition|)
block|{
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|types
index|[
name|i
index|]
condition|)
block|{
case|case
name|QPainterPath
operator|::
name|MoveToElement
case|:
name|p
operator|.
name|moveTo
argument_list|(
name|QPointF
argument_list|(
name|points
index|[
name|id
index|]
argument_list|,
name|points
index|[
name|id
operator|+
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|id
operator|+=
literal|2
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|LineToElement
case|:
name|p
operator|.
name|lineTo
argument_list|(
name|QPointF
argument_list|(
name|points
index|[
name|id
index|]
argument_list|,
name|points
index|[
name|id
operator|+
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|id
operator|+=
literal|2
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToElement
case|:
block|{
name|QPointF
name|p1
argument_list|(
name|points
index|[
name|id
index|]
argument_list|,
name|points
index|[
name|id
operator|+
literal|1
index|]
argument_list|)
decl_stmt|;
name|QPointF
name|p2
argument_list|(
name|points
index|[
name|id
operator|+
literal|2
index|]
argument_list|,
name|points
index|[
name|id
operator|+
literal|3
index|]
argument_list|)
decl_stmt|;
name|QPointF
name|p3
argument_list|(
name|points
index|[
name|id
operator|+
literal|4
index|]
argument_list|,
name|points
index|[
name|id
operator|+
literal|5
index|]
argument_list|)
decl_stmt|;
name|p
operator|.
name|cubicTo
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|)
expr_stmt|;
name|id
operator|+=
literal|6
expr_stmt|;
break|break;
block|}
case|case
name|QPainterPath
operator|::
name|CurveToDataElement
case|:
empty_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
name|p
operator|.
name|moveTo
argument_list|(
name|QPointF
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|id
init|=
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|path
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|p
operator|.
name|lineTo
argument_list|(
name|QPointF
argument_list|(
name|points
index|[
name|id
index|]
argument_list|,
name|points
index|[
name|id
operator|+
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|id
operator|+=
literal|2
expr_stmt|;
block|}
block|}
if|if
condition|(
name|path
operator|.
name|hints
argument_list|()
operator|&
name|QVectorPath
operator|::
name|WindingFill
condition|)
name|p
operator|.
name|setFillRule
argument_list|(
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
end_function
begin_function
DECL|function|drawStaticTextItem
name|void
name|QPaintEngineEx
operator|::
name|drawStaticTextItem
parameter_list|(
name|QStaticTextItem
modifier|*
name|staticTextItem
parameter_list|)
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|setFillRule
argument_list|(
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
if|if
condition|(
name|staticTextItem
operator|->
name|numGlyphs
operator|==
literal|0
condition|)
return|return;
name|QFontEngine
modifier|*
name|fontEngine
init|=
name|staticTextItem
operator|->
name|fontEngine
argument_list|()
decl_stmt|;
name|fontEngine
operator|->
name|addGlyphsToPath
argument_list|(
name|staticTextItem
operator|->
name|glyphs
argument_list|,
name|staticTextItem
operator|->
name|glyphPositions
argument_list|,
name|staticTextItem
operator|->
name|numGlyphs
argument_list|,
operator|&
name|path
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QPainterState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
name|QPainter
operator|::
name|RenderHints
name|oldHints
init|=
name|s
operator|->
name|renderHints
decl_stmt|;
name|bool
name|changedHints
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|bool
argument_list|(
name|oldHints
operator|&
name|QPainter
operator|::
name|TextAntialiasing
argument_list|)
operator|&&
operator|!
name|bool
argument_list|(
name|fontEngine
operator|->
name|fontDef
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|NoAntialias
argument_list|)
operator|&&
operator|!
name|bool
argument_list|(
name|oldHints
operator|&
name|QPainter
operator|::
name|Antialiasing
argument_list|)
condition|)
block|{
name|s
operator|->
name|renderHints
operator||=
name|QPainter
operator|::
name|Antialiasing
expr_stmt|;
name|renderHintsChanged
argument_list|()
expr_stmt|;
name|changedHints
operator|=
literal|true
expr_stmt|;
block|}
name|fill
argument_list|(
name|qtVectorPathForPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|s
operator|->
name|pen
operator|.
name|brush
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|changedHints
condition|)
block|{
name|s
operator|->
name|renderHints
operator|=
name|oldHints
expr_stmt|;
name|renderHintsChanged
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|requiresPretransformedGlyphPositions
name|bool
name|QPaintEngineEx
operator|::
name|requiresPretransformedGlyphPositions
parameter_list|(
name|QFontEngine
modifier|*
parameter_list|,
specifier|const
name|QTransform
modifier|&
parameter_list|)
specifier|const
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|shouldDrawCachedGlyphs
name|bool
name|QPaintEngineEx
operator|::
name|shouldDrawCachedGlyphs
parameter_list|(
name|QFontEngine
modifier|*
name|fontEngine
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|m
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|fontEngine
operator|->
name|glyphFormat
operator|==
name|QFontEngine
operator|::
name|Format_ARGB
condition|)
return|return
literal|true
return|;
name|qreal
name|pixelSize
init|=
name|fontEngine
operator|->
name|fontDef
operator|.
name|pixelSize
decl_stmt|;
return|return
operator|(
name|pixelSize
operator|*
name|pixelSize
operator|*
name|qAbs
argument_list|(
name|m
operator|.
name|determinant
argument_list|()
argument_list|)
operator|)
operator|<
name|QT_MAX_CACHED_GLYPH_SIZE
operator|*
name|QT_MAX_CACHED_GLYPH_SIZE
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
