begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qbezier_p.h"
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qline.h>
end_include
begin_include
include|#
directive|include
file|<qpolygon.h>
end_include
begin_include
include|#
directive|include
file|<qvector.h>
end_include
begin_include
include|#
directive|include
file|<qlist.h>
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_include
include|#
directive|include
file|<private/qnumeric_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qmath_p.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|//#define QDEBUG_BEZIER
comment|/*!   \internal */
DECL|function|fromPoints
name|QBezier
name|QBezier
operator|::
name|fromPoints
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p1
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|p2
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|p3
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|p4
parameter_list|)
block|{
name|QBezier
name|b
decl_stmt|;
name|b
operator|.
name|x1
operator|=
name|p1
operator|.
name|x
argument_list|()
expr_stmt|;
name|b
operator|.
name|y1
operator|=
name|p1
operator|.
name|y
argument_list|()
expr_stmt|;
name|b
operator|.
name|x2
operator|=
name|p2
operator|.
name|x
argument_list|()
expr_stmt|;
name|b
operator|.
name|y2
operator|=
name|p2
operator|.
name|y
argument_list|()
expr_stmt|;
name|b
operator|.
name|x3
operator|=
name|p3
operator|.
name|x
argument_list|()
expr_stmt|;
name|b
operator|.
name|y3
operator|=
name|p3
operator|.
name|y
argument_list|()
expr_stmt|;
name|b
operator|.
name|x4
operator|=
name|p4
operator|.
name|x
argument_list|()
expr_stmt|;
name|b
operator|.
name|y4
operator|=
name|p4
operator|.
name|y
argument_list|()
expr_stmt|;
return|return
name|b
return|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|toPolygon
name|QPolygonF
name|QBezier
operator|::
name|toPolygon
parameter_list|(
name|qreal
name|bezier_flattening_threshold
parameter_list|)
specifier|const
block|{
comment|// flattening is done by splitting the bezier until we can replace the segment by a straight
comment|// line. We split further until the control points are close enough to the line connecting the
comment|// boundary points.
comment|//
comment|// the Distance of a point p from a line given by the points (a,b) is given by:
comment|//
comment|// d = abs( (bx - ax)(ay - py) - (by - ay)(ax - px) ) / line_length
comment|//
comment|// We can stop splitting if both control points are close enough to the line.
comment|// To make the algorithm faster we use the manhattan length of the line.
name|QPolygonF
name|polygon
decl_stmt|;
name|polygon
operator|.
name|append
argument_list|(
name|QPointF
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
argument_list|)
expr_stmt|;
name|addToPolygon
argument_list|(
operator|&
name|polygon
argument_list|,
name|bezier_flattening_threshold
argument_list|)
expr_stmt|;
return|return
name|polygon
return|;
block|}
end_function
begin_function
DECL|function|mapBy
name|QBezier
name|QBezier
operator|::
name|mapBy
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|)
specifier|const
block|{
return|return
name|QBezier
operator|::
name|fromPoints
argument_list|(
name|transform
operator|.
name|map
argument_list|(
name|pt1
argument_list|()
argument_list|)
argument_list|,
name|transform
operator|.
name|map
argument_list|(
name|pt2
argument_list|()
argument_list|)
argument_list|,
name|transform
operator|.
name|map
argument_list|(
name|pt3
argument_list|()
argument_list|)
argument_list|,
name|transform
operator|.
name|map
argument_list|(
name|pt4
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getSubRange
name|QBezier
name|QBezier
operator|::
name|getSubRange
parameter_list|(
name|qreal
name|t0
parameter_list|,
name|qreal
name|t1
parameter_list|)
specifier|const
block|{
name|QBezier
name|result
decl_stmt|;
name|QBezier
name|temp
decl_stmt|;
comment|// cut at t1
if|if
condition|(
name|qFuzzyIsNull
argument_list|(
name|t1
operator|-
name|qreal
argument_list|(
literal|1.
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|=
operator|*
name|this
expr_stmt|;
block|}
else|else
block|{
name|temp
operator|=
operator|*
name|this
expr_stmt|;
name|temp
operator|.
name|parameterSplitLeft
argument_list|(
name|t1
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
block|}
comment|// cut at t0
if|if
condition|(
operator|!
name|qFuzzyIsNull
argument_list|(
name|t0
argument_list|)
condition|)
name|result
operator|.
name|parameterSplitLeft
argument_list|(
name|t0
operator|/
name|t1
argument_list|,
operator|&
name|temp
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|quadraticRoots
specifier|static
specifier|inline
name|int
name|quadraticRoots
parameter_list|(
name|qreal
name|a
parameter_list|,
name|qreal
name|b
parameter_list|,
name|qreal
name|c
parameter_list|,
name|qreal
modifier|*
name|x1
parameter_list|,
name|qreal
modifier|*
name|x2
parameter_list|)
block|{
if|if
condition|(
name|qFuzzyIsNull
argument_list|(
name|a
argument_list|)
condition|)
block|{
if|if
condition|(
name|qFuzzyIsNull
argument_list|(
name|b
argument_list|)
condition|)
return|return
literal|0
return|;
operator|*
name|x1
operator|=
operator|*
name|x2
operator|=
operator|(
operator|-
name|c
operator|/
name|b
operator|)
expr_stmt|;
return|return
literal|1
return|;
block|}
else|else
block|{
specifier|const
name|qreal
name|det
init|=
name|b
operator|*
name|b
operator|-
literal|4
operator|*
name|a
operator|*
name|c
decl_stmt|;
if|if
condition|(
name|qFuzzyIsNull
argument_list|(
name|det
argument_list|)
condition|)
block|{
operator|*
name|x1
operator|=
operator|*
name|x2
operator|=
operator|-
name|b
operator|/
operator|(
literal|2
operator|*
name|a
operator|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
name|det
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|qFuzzyIsNull
argument_list|(
name|b
argument_list|)
condition|)
block|{
operator|*
name|x2
operator|=
name|qSqrt
argument_list|(
operator|-
name|c
operator|/
name|a
argument_list|)
expr_stmt|;
operator|*
name|x1
operator|=
operator|-
operator|(
operator|*
name|x2
operator|)
expr_stmt|;
return|return
literal|2
return|;
block|}
specifier|const
name|qreal
name|stableA
init|=
name|b
operator|/
operator|(
literal|2
operator|*
name|a
operator|)
decl_stmt|;
specifier|const
name|qreal
name|stableB
init|=
name|c
operator|/
operator|(
name|a
operator|*
name|stableA
operator|*
name|stableA
operator|)
decl_stmt|;
specifier|const
name|qreal
name|stableC
init|=
operator|-
literal|1
operator|-
name|qSqrt
argument_list|(
literal|1
operator|-
name|stableB
argument_list|)
decl_stmt|;
operator|*
name|x2
operator|=
name|stableA
operator|*
name|stableC
expr_stmt|;
operator|*
name|x1
operator|=
operator|(
name|stableA
operator|*
name|stableB
operator|)
operator|/
name|stableC
expr_stmt|;
return|return
literal|2
return|;
block|}
else|else
return|return
literal|0
return|;
block|}
block|}
end_function
begin_function
DECL|function|findInflections
specifier|static
specifier|inline
name|bool
name|findInflections
parameter_list|(
name|qreal
name|a
parameter_list|,
name|qreal
name|b
parameter_list|,
name|qreal
name|c
parameter_list|,
name|qreal
modifier|*
name|t1
parameter_list|,
name|qreal
modifier|*
name|t2
parameter_list|,
name|qreal
modifier|*
name|tCups
parameter_list|)
block|{
name|qreal
name|r1
init|=
literal|0
decl_stmt|,
name|r2
init|=
literal|0
decl_stmt|;
name|short
name|rootsCount
init|=
name|quadraticRoots
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
operator|&
name|r1
argument_list|,
operator|&
name|r2
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootsCount
operator|>=
literal|1
condition|)
block|{
if|if
condition|(
name|r1
operator|<
name|r2
condition|)
block|{
operator|*
name|t1
operator|=
name|r1
expr_stmt|;
operator|*
name|t2
operator|=
name|r2
expr_stmt|;
block|}
else|else
block|{
operator|*
name|t1
operator|=
name|r2
expr_stmt|;
operator|*
name|t2
operator|=
name|r1
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|qFuzzyIsNull
argument_list|(
name|a
argument_list|)
condition|)
operator|*
name|tCups
operator|=
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|*
operator|(
operator|-
name|b
operator|/
name|a
operator|)
expr_stmt|;
else|else
operator|*
name|tCups
operator|=
literal|2
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|addToPolygon
name|void
name|QBezier
operator|::
name|addToPolygon
parameter_list|(
name|QPolygonF
modifier|*
name|polygon
parameter_list|,
name|qreal
name|bezier_flattening_threshold
parameter_list|)
specifier|const
block|{
name|QBezier
name|beziers
index|[
literal|10
index|]
decl_stmt|;
name|int
name|levels
index|[
literal|10
index|]
decl_stmt|;
name|beziers
index|[
literal|0
index|]
operator|=
operator|*
name|this
expr_stmt|;
name|levels
index|[
literal|0
index|]
operator|=
literal|9
expr_stmt|;
name|QBezier
modifier|*
name|b
init|=
name|beziers
decl_stmt|;
name|int
modifier|*
name|lvl
init|=
name|levels
decl_stmt|;
while|while
condition|(
name|b
operator|>=
name|beziers
condition|)
block|{
comment|// check if we can pop the top bezier curve from the stack
name|qreal
name|y4y1
init|=
name|b
operator|->
name|y4
operator|-
name|b
operator|->
name|y1
decl_stmt|;
name|qreal
name|x4x1
init|=
name|b
operator|->
name|x4
operator|-
name|b
operator|->
name|x1
decl_stmt|;
name|qreal
name|l
init|=
name|qAbs
argument_list|(
name|x4x1
argument_list|)
operator|+
name|qAbs
argument_list|(
name|y4y1
argument_list|)
decl_stmt|;
name|qreal
name|d
decl_stmt|;
if|if
condition|(
name|l
operator|>
literal|1.
condition|)
block|{
name|d
operator|=
name|qAbs
argument_list|(
operator|(
name|x4x1
operator|)
operator|*
operator|(
name|b
operator|->
name|y1
operator|-
name|b
operator|->
name|y2
operator|)
operator|-
operator|(
name|y4y1
operator|)
operator|*
operator|(
name|b
operator|->
name|x1
operator|-
name|b
operator|->
name|x2
operator|)
argument_list|)
operator|+
name|qAbs
argument_list|(
operator|(
name|x4x1
operator|)
operator|*
operator|(
name|b
operator|->
name|y1
operator|-
name|b
operator|->
name|y3
operator|)
operator|-
operator|(
name|y4y1
operator|)
operator|*
operator|(
name|b
operator|->
name|x1
operator|-
name|b
operator|->
name|x3
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|=
name|qAbs
argument_list|(
name|b
operator|->
name|x1
operator|-
name|b
operator|->
name|x2
argument_list|)
operator|+
name|qAbs
argument_list|(
name|b
operator|->
name|y1
operator|-
name|b
operator|->
name|y2
argument_list|)
operator|+
name|qAbs
argument_list|(
name|b
operator|->
name|x1
operator|-
name|b
operator|->
name|x3
argument_list|)
operator|+
name|qAbs
argument_list|(
name|b
operator|->
name|y1
operator|-
name|b
operator|->
name|y3
argument_list|)
expr_stmt|;
name|l
operator|=
literal|1.
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|<
name|bezier_flattening_threshold
operator|*
name|l
operator|||
operator|*
name|lvl
operator|==
literal|0
condition|)
block|{
comment|// good enough, we pop it off and add the endpoint
name|polygon
operator|->
name|append
argument_list|(
name|QPointF
argument_list|(
name|b
operator|->
name|x4
argument_list|,
name|b
operator|->
name|y4
argument_list|)
argument_list|)
expr_stmt|;
operator|--
name|b
expr_stmt|;
operator|--
name|lvl
expr_stmt|;
block|}
else|else
block|{
comment|// split, second half of the polygon goes lower into the stack
name|b
operator|->
name|split
argument_list|(
name|b
operator|+
literal|1
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|lvl
index|[
literal|1
index|]
operator|=
operator|--
name|lvl
index|[
literal|0
index|]
expr_stmt|;
operator|++
name|b
expr_stmt|;
operator|++
name|lvl
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|addToPolygon
name|void
name|QBezier
operator|::
name|addToPolygon
parameter_list|(
name|QDataBuffer
argument_list|<
name|QPointF
argument_list|>
modifier|&
name|polygon
parameter_list|,
name|qreal
name|bezier_flattening_threshold
parameter_list|)
specifier|const
block|{
name|QBezier
name|beziers
index|[
literal|10
index|]
decl_stmt|;
name|int
name|levels
index|[
literal|10
index|]
decl_stmt|;
name|beziers
index|[
literal|0
index|]
operator|=
operator|*
name|this
expr_stmt|;
name|levels
index|[
literal|0
index|]
operator|=
literal|9
expr_stmt|;
name|QBezier
modifier|*
name|b
init|=
name|beziers
decl_stmt|;
name|int
modifier|*
name|lvl
init|=
name|levels
decl_stmt|;
while|while
condition|(
name|b
operator|>=
name|beziers
condition|)
block|{
comment|// check if we can pop the top bezier curve from the stack
name|qreal
name|y4y1
init|=
name|b
operator|->
name|y4
operator|-
name|b
operator|->
name|y1
decl_stmt|;
name|qreal
name|x4x1
init|=
name|b
operator|->
name|x4
operator|-
name|b
operator|->
name|x1
decl_stmt|;
name|qreal
name|l
init|=
name|qAbs
argument_list|(
name|x4x1
argument_list|)
operator|+
name|qAbs
argument_list|(
name|y4y1
argument_list|)
decl_stmt|;
name|qreal
name|d
decl_stmt|;
if|if
condition|(
name|l
operator|>
literal|1.
condition|)
block|{
name|d
operator|=
name|qAbs
argument_list|(
operator|(
name|x4x1
operator|)
operator|*
operator|(
name|b
operator|->
name|y1
operator|-
name|b
operator|->
name|y2
operator|)
operator|-
operator|(
name|y4y1
operator|)
operator|*
operator|(
name|b
operator|->
name|x1
operator|-
name|b
operator|->
name|x2
operator|)
argument_list|)
operator|+
name|qAbs
argument_list|(
operator|(
name|x4x1
operator|)
operator|*
operator|(
name|b
operator|->
name|y1
operator|-
name|b
operator|->
name|y3
operator|)
operator|-
operator|(
name|y4y1
operator|)
operator|*
operator|(
name|b
operator|->
name|x1
operator|-
name|b
operator|->
name|x3
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|=
name|qAbs
argument_list|(
name|b
operator|->
name|x1
operator|-
name|b
operator|->
name|x2
argument_list|)
operator|+
name|qAbs
argument_list|(
name|b
operator|->
name|y1
operator|-
name|b
operator|->
name|y2
argument_list|)
operator|+
name|qAbs
argument_list|(
name|b
operator|->
name|x1
operator|-
name|b
operator|->
name|x3
argument_list|)
operator|+
name|qAbs
argument_list|(
name|b
operator|->
name|y1
operator|-
name|b
operator|->
name|y3
argument_list|)
expr_stmt|;
name|l
operator|=
literal|1.
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|<
name|bezier_flattening_threshold
operator|*
name|l
operator|||
operator|*
name|lvl
operator|==
literal|0
condition|)
block|{
comment|// good enough, we pop it off and add the endpoint
name|polygon
operator|.
name|add
argument_list|(
name|QPointF
argument_list|(
name|b
operator|->
name|x4
argument_list|,
name|b
operator|->
name|y4
argument_list|)
argument_list|)
expr_stmt|;
operator|--
name|b
expr_stmt|;
operator|--
name|lvl
expr_stmt|;
block|}
else|else
block|{
comment|// split, second half of the polygon goes lower into the stack
name|b
operator|->
name|split
argument_list|(
name|b
operator|+
literal|1
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|lvl
index|[
literal|1
index|]
operator|=
operator|--
name|lvl
index|[
literal|0
index|]
expr_stmt|;
operator|++
name|b
expr_stmt|;
operator|++
name|lvl
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|bounds
name|QRectF
name|QBezier
operator|::
name|bounds
parameter_list|()
specifier|const
block|{
name|qreal
name|xmin
init|=
name|x1
decl_stmt|;
name|qreal
name|xmax
init|=
name|x1
decl_stmt|;
if|if
condition|(
name|x2
operator|<
name|xmin
condition|)
name|xmin
operator|=
name|x2
expr_stmt|;
elseif|else
if|if
condition|(
name|x2
operator|>
name|xmax
condition|)
name|xmax
operator|=
name|x2
expr_stmt|;
if|if
condition|(
name|x3
operator|<
name|xmin
condition|)
name|xmin
operator|=
name|x3
expr_stmt|;
elseif|else
if|if
condition|(
name|x3
operator|>
name|xmax
condition|)
name|xmax
operator|=
name|x3
expr_stmt|;
if|if
condition|(
name|x4
operator|<
name|xmin
condition|)
name|xmin
operator|=
name|x4
expr_stmt|;
elseif|else
if|if
condition|(
name|x4
operator|>
name|xmax
condition|)
name|xmax
operator|=
name|x4
expr_stmt|;
name|qreal
name|ymin
init|=
name|y1
decl_stmt|;
name|qreal
name|ymax
init|=
name|y1
decl_stmt|;
if|if
condition|(
name|y2
operator|<
name|ymin
condition|)
name|ymin
operator|=
name|y2
expr_stmt|;
elseif|else
if|if
condition|(
name|y2
operator|>
name|ymax
condition|)
name|ymax
operator|=
name|y2
expr_stmt|;
if|if
condition|(
name|y3
operator|<
name|ymin
condition|)
name|ymin
operator|=
name|y3
expr_stmt|;
elseif|else
if|if
condition|(
name|y3
operator|>
name|ymax
condition|)
name|ymax
operator|=
name|y3
expr_stmt|;
if|if
condition|(
name|y4
operator|<
name|ymin
condition|)
name|ymin
operator|=
name|y4
expr_stmt|;
elseif|else
if|if
condition|(
name|y4
operator|>
name|ymax
condition|)
name|ymax
operator|=
name|y4
expr_stmt|;
return|return
name|QRectF
argument_list|(
name|xmin
argument_list|,
name|ymin
argument_list|,
name|xmax
operator|-
name|xmin
argument_list|,
name|ymax
operator|-
name|ymin
argument_list|)
return|;
block|}
end_function
begin_enum
DECL|enum|ShiftResult
enum|enum
name|ShiftResult
block|{
DECL|enumerator|Ok
name|Ok
block|,
DECL|enumerator|Discard
name|Discard
block|,
DECL|enumerator|Split
name|Split
block|,
DECL|enumerator|Circle
name|Circle
block|}
enum|;
end_enum
begin_function
DECL|function|good_offset
specifier|static
name|ShiftResult
name|good_offset
parameter_list|(
specifier|const
name|QBezier
modifier|*
name|b1
parameter_list|,
specifier|const
name|QBezier
modifier|*
name|b2
parameter_list|,
name|qreal
name|offset
parameter_list|,
name|qreal
name|threshold
parameter_list|)
block|{
specifier|const
name|qreal
name|o2
init|=
name|offset
operator|*
name|offset
decl_stmt|;
specifier|const
name|qreal
name|max_dist_line
init|=
name|threshold
operator|*
name|offset
operator|*
name|offset
decl_stmt|;
specifier|const
name|qreal
name|max_dist_normal
init|=
name|threshold
operator|*
name|offset
decl_stmt|;
specifier|const
name|qreal
name|spacing
init|=
name|qreal
argument_list|(
literal|0.25
argument_list|)
decl_stmt|;
for|for
control|(
name|qreal
name|i
init|=
name|spacing
init|;
name|i
operator|<
name|qreal
argument_list|(
literal|0.99
argument_list|)
condition|;
name|i
operator|+=
name|spacing
control|)
block|{
name|QPointF
name|p1
init|=
name|b1
operator|->
name|pointAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QPointF
name|p2
init|=
name|b2
operator|->
name|pointAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|qreal
name|d
init|=
operator|(
name|p1
operator|.
name|x
argument_list|()
operator|-
name|p2
operator|.
name|x
argument_list|()
operator|)
operator|*
operator|(
name|p1
operator|.
name|x
argument_list|()
operator|-
name|p2
operator|.
name|x
argument_list|()
operator|)
operator|+
operator|(
name|p1
operator|.
name|y
argument_list|()
operator|-
name|p2
operator|.
name|y
argument_list|()
operator|)
operator|*
operator|(
name|p1
operator|.
name|y
argument_list|()
operator|-
name|p2
operator|.
name|y
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|qAbs
argument_list|(
name|d
operator|-
name|o2
argument_list|)
operator|>
name|max_dist_line
condition|)
return|return
name|Split
return|;
name|QPointF
name|normalPoint
init|=
name|b1
operator|->
name|normalVector
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|qreal
name|l
init|=
name|qAbs
argument_list|(
name|normalPoint
operator|.
name|x
argument_list|()
argument_list|)
operator|+
name|qAbs
argument_list|(
name|normalPoint
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
name|qreal
argument_list|(
literal|0.0
argument_list|)
condition|)
block|{
name|d
operator|=
name|qAbs
argument_list|(
name|normalPoint
operator|.
name|x
argument_list|()
operator|*
operator|(
name|p1
operator|.
name|y
argument_list|()
operator|-
name|p2
operator|.
name|y
argument_list|()
operator|)
operator|-
name|normalPoint
operator|.
name|y
argument_list|()
operator|*
operator|(
name|p1
operator|.
name|x
argument_list|()
operator|-
name|p2
operator|.
name|x
argument_list|()
operator|)
argument_list|)
operator|/
name|l
expr_stmt|;
if|if
condition|(
name|d
operator|>
name|max_dist_normal
condition|)
return|return
name|Split
return|;
block|}
block|}
return|return
name|Ok
return|;
block|}
end_function
begin_function
DECL|function|shift
specifier|static
name|ShiftResult
name|shift
parameter_list|(
specifier|const
name|QBezier
modifier|*
name|orig
parameter_list|,
name|QBezier
modifier|*
name|shifted
parameter_list|,
name|qreal
name|offset
parameter_list|,
name|qreal
name|threshold
parameter_list|)
block|{
name|int
name|map
index|[
literal|4
index|]
decl_stmt|;
name|bool
name|p1_p2_equal
init|=
operator|(
name|orig
operator|->
name|x1
operator|==
name|orig
operator|->
name|x2
operator|&&
name|orig
operator|->
name|y1
operator|==
name|orig
operator|->
name|y2
operator|)
decl_stmt|;
name|bool
name|p2_p3_equal
init|=
operator|(
name|orig
operator|->
name|x2
operator|==
name|orig
operator|->
name|x3
operator|&&
name|orig
operator|->
name|y2
operator|==
name|orig
operator|->
name|y3
operator|)
decl_stmt|;
name|bool
name|p3_p4_equal
init|=
operator|(
name|orig
operator|->
name|x3
operator|==
name|orig
operator|->
name|x4
operator|&&
name|orig
operator|->
name|y3
operator|==
name|orig
operator|->
name|y4
operator|)
decl_stmt|;
name|QPointF
name|points
index|[
literal|4
index|]
decl_stmt|;
name|int
name|np
init|=
literal|0
decl_stmt|;
name|points
index|[
name|np
index|]
operator|=
name|QPointF
argument_list|(
name|orig
operator|->
name|x1
argument_list|,
name|orig
operator|->
name|y1
argument_list|)
expr_stmt|;
name|map
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
operator|++
name|np
expr_stmt|;
if|if
condition|(
operator|!
name|p1_p2_equal
condition|)
block|{
name|points
index|[
name|np
index|]
operator|=
name|QPointF
argument_list|(
name|orig
operator|->
name|x2
argument_list|,
name|orig
operator|->
name|y2
argument_list|)
expr_stmt|;
operator|++
name|np
expr_stmt|;
block|}
name|map
index|[
literal|1
index|]
operator|=
name|np
operator|-
literal|1
expr_stmt|;
if|if
condition|(
operator|!
name|p2_p3_equal
condition|)
block|{
name|points
index|[
name|np
index|]
operator|=
name|QPointF
argument_list|(
name|orig
operator|->
name|x3
argument_list|,
name|orig
operator|->
name|y3
argument_list|)
expr_stmt|;
operator|++
name|np
expr_stmt|;
block|}
name|map
index|[
literal|2
index|]
operator|=
name|np
operator|-
literal|1
expr_stmt|;
if|if
condition|(
operator|!
name|p3_p4_equal
condition|)
block|{
name|points
index|[
name|np
index|]
operator|=
name|QPointF
argument_list|(
name|orig
operator|->
name|x4
argument_list|,
name|orig
operator|->
name|y4
argument_list|)
expr_stmt|;
operator|++
name|np
expr_stmt|;
block|}
name|map
index|[
literal|3
index|]
operator|=
name|np
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|np
operator|==
literal|1
condition|)
return|return
name|Discard
return|;
name|QRectF
name|b
init|=
name|orig
operator|->
name|bounds
argument_list|()
decl_stmt|;
if|if
condition|(
name|np
operator|==
literal|4
operator|&&
name|b
operator|.
name|width
argument_list|()
operator|<
literal|.1
operator|*
name|offset
operator|&&
name|b
operator|.
name|height
argument_list|()
operator|<
literal|.1
operator|*
name|offset
condition|)
block|{
name|qreal
name|l
init|=
operator|(
name|orig
operator|->
name|x1
operator|-
name|orig
operator|->
name|x2
operator|)
operator|*
operator|(
name|orig
operator|->
name|x1
operator|-
name|orig
operator|->
name|x2
operator|)
operator|+
operator|(
name|orig
operator|->
name|y1
operator|-
name|orig
operator|->
name|y2
operator|)
operator|*
operator|(
name|orig
operator|->
name|y1
operator|-
name|orig
operator|->
name|y2
operator|)
operator|*
operator|(
name|orig
operator|->
name|x3
operator|-
name|orig
operator|->
name|x4
operator|)
operator|*
operator|(
name|orig
operator|->
name|x3
operator|-
name|orig
operator|->
name|x4
operator|)
operator|+
operator|(
name|orig
operator|->
name|y3
operator|-
name|orig
operator|->
name|y4
operator|)
operator|*
operator|(
name|orig
operator|->
name|y3
operator|-
name|orig
operator|->
name|y4
operator|)
decl_stmt|;
name|qreal
name|dot
init|=
operator|(
name|orig
operator|->
name|x1
operator|-
name|orig
operator|->
name|x2
operator|)
operator|*
operator|(
name|orig
operator|->
name|x3
operator|-
name|orig
operator|->
name|x4
operator|)
operator|+
operator|(
name|orig
operator|->
name|y1
operator|-
name|orig
operator|->
name|y2
operator|)
operator|*
operator|(
name|orig
operator|->
name|y3
operator|-
name|orig
operator|->
name|y4
operator|)
decl_stmt|;
if|if
condition|(
name|dot
operator|<
literal|0
operator|&&
name|dot
operator|*
name|dot
operator|<
literal|0.8
operator|*
name|l
condition|)
comment|// the points are close and reverse dirction. Approximate the whole
comment|// thing by a semi circle
return|return
name|Circle
return|;
block|}
name|QPointF
name|points_shifted
index|[
literal|4
index|]
decl_stmt|;
name|QLineF
name|prev
init|=
name|QLineF
argument_list|(
name|QPointF
argument_list|()
argument_list|,
name|points
index|[
literal|1
index|]
operator|-
name|points
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|QPointF
name|prev_normal
init|=
name|prev
operator|.
name|normalVector
argument_list|()
operator|.
name|unitVector
argument_list|()
operator|.
name|p2
argument_list|()
decl_stmt|;
name|points_shifted
index|[
literal|0
index|]
operator|=
name|points
index|[
literal|0
index|]
operator|+
name|offset
operator|*
name|prev_normal
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|np
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|QLineF
name|next
init|=
name|QLineF
argument_list|(
name|QPointF
argument_list|()
argument_list|,
name|points
index|[
name|i
operator|+
literal|1
index|]
operator|-
name|points
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|QPointF
name|next_normal
init|=
name|next
operator|.
name|normalVector
argument_list|()
operator|.
name|unitVector
argument_list|()
operator|.
name|p2
argument_list|()
decl_stmt|;
name|QPointF
name|normal_sum
init|=
name|prev_normal
operator|+
name|next_normal
decl_stmt|;
name|qreal
name|r
init|=
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|+
name|prev_normal
operator|.
name|x
argument_list|()
operator|*
name|next_normal
operator|.
name|x
argument_list|()
operator|+
name|prev_normal
operator|.
name|y
argument_list|()
operator|*
name|next_normal
operator|.
name|y
argument_list|()
decl_stmt|;
if|if
condition|(
name|qFuzzyIsNull
argument_list|(
name|r
argument_list|)
condition|)
block|{
name|points_shifted
index|[
name|i
index|]
operator|=
name|points
index|[
name|i
index|]
operator|+
name|offset
operator|*
name|prev_normal
expr_stmt|;
block|}
else|else
block|{
name|qreal
name|k
init|=
name|offset
operator|/
name|r
decl_stmt|;
name|points_shifted
index|[
name|i
index|]
operator|=
name|points
index|[
name|i
index|]
operator|+
name|k
operator|*
name|normal_sum
expr_stmt|;
block|}
name|prev_normal
operator|=
name|next_normal
expr_stmt|;
block|}
name|points_shifted
index|[
name|np
operator|-
literal|1
index|]
operator|=
name|points
index|[
name|np
operator|-
literal|1
index|]
operator|+
name|offset
operator|*
name|prev_normal
expr_stmt|;
operator|*
name|shifted
operator|=
name|QBezier
operator|::
name|fromPoints
argument_list|(
name|points_shifted
index|[
name|map
index|[
literal|0
index|]
index|]
argument_list|,
name|points_shifted
index|[
name|map
index|[
literal|1
index|]
index|]
argument_list|,
name|points_shifted
index|[
name|map
index|[
literal|2
index|]
index|]
argument_list|,
name|points_shifted
index|[
name|map
index|[
literal|3
index|]
index|]
argument_list|)
expr_stmt|;
return|return
name|good_offset
argument_list|(
name|orig
argument_list|,
name|shifted
argument_list|,
name|offset
argument_list|,
name|threshold
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// This value is used to determine the length of control point vectors
end_comment
begin_comment
comment|// when approximating arc segments as curves. The factor is multiplied
end_comment
begin_comment
comment|// with the radius of the circle.
end_comment
begin_define
DECL|macro|KAPPA
define|#
directive|define
name|KAPPA
value|qreal(0.5522847498)
end_define
begin_function
DECL|function|addCircle
specifier|static
name|bool
name|addCircle
parameter_list|(
specifier|const
name|QBezier
modifier|*
name|b
parameter_list|,
name|qreal
name|offset
parameter_list|,
name|QBezier
modifier|*
name|o
parameter_list|)
block|{
name|QPointF
name|normals
index|[
literal|3
index|]
decl_stmt|;
name|normals
index|[
literal|0
index|]
operator|=
name|QPointF
argument_list|(
name|b
operator|->
name|y2
operator|-
name|b
operator|->
name|y1
argument_list|,
name|b
operator|->
name|x1
operator|-
name|b
operator|->
name|x2
argument_list|)
expr_stmt|;
name|qreal
name|dist
init|=
name|qSqrt
argument_list|(
name|normals
index|[
literal|0
index|]
operator|.
name|x
argument_list|()
operator|*
name|normals
index|[
literal|0
index|]
operator|.
name|x
argument_list|()
operator|+
name|normals
index|[
literal|0
index|]
operator|.
name|y
argument_list|()
operator|*
name|normals
index|[
literal|0
index|]
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|qFuzzyIsNull
argument_list|(
name|dist
argument_list|)
condition|)
return|return
literal|false
return|;
name|normals
index|[
literal|0
index|]
operator|/=
name|dist
expr_stmt|;
name|normals
index|[
literal|2
index|]
operator|=
name|QPointF
argument_list|(
name|b
operator|->
name|y4
operator|-
name|b
operator|->
name|y3
argument_list|,
name|b
operator|->
name|x3
operator|-
name|b
operator|->
name|x4
argument_list|)
expr_stmt|;
name|dist
operator|=
name|qSqrt
argument_list|(
name|normals
index|[
literal|2
index|]
operator|.
name|x
argument_list|()
operator|*
name|normals
index|[
literal|2
index|]
operator|.
name|x
argument_list|()
operator|+
name|normals
index|[
literal|2
index|]
operator|.
name|y
argument_list|()
operator|*
name|normals
index|[
literal|2
index|]
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|qFuzzyIsNull
argument_list|(
name|dist
argument_list|)
condition|)
return|return
literal|false
return|;
name|normals
index|[
literal|2
index|]
operator|/=
name|dist
expr_stmt|;
name|normals
index|[
literal|1
index|]
operator|=
name|QPointF
argument_list|(
name|b
operator|->
name|x1
operator|-
name|b
operator|->
name|x2
operator|-
name|b
operator|->
name|x3
operator|+
name|b
operator|->
name|x4
argument_list|,
name|b
operator|->
name|y1
operator|-
name|b
operator|->
name|y2
operator|-
name|b
operator|->
name|y3
operator|+
name|b
operator|->
name|y4
argument_list|)
expr_stmt|;
name|normals
index|[
literal|1
index|]
operator|/=
operator|-
literal|1
operator|*
name|qSqrt
argument_list|(
name|normals
index|[
literal|1
index|]
operator|.
name|x
argument_list|()
operator|*
name|normals
index|[
literal|1
index|]
operator|.
name|x
argument_list|()
operator|+
name|normals
index|[
literal|1
index|]
operator|.
name|y
argument_list|()
operator|*
name|normals
index|[
literal|1
index|]
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|qreal
name|angles
index|[
literal|2
index|]
decl_stmt|;
name|qreal
name|sign
init|=
literal|1.
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|cos_a
init|=
name|normals
index|[
name|i
index|]
operator|.
name|x
argument_list|()
operator|*
name|normals
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|x
argument_list|()
operator|+
name|normals
index|[
name|i
index|]
operator|.
name|y
argument_list|()
operator|*
name|normals
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|y
argument_list|()
decl_stmt|;
if|if
condition|(
name|cos_a
operator|>
literal|1.
condition|)
name|cos_a
operator|=
literal|1.
expr_stmt|;
if|if
condition|(
name|cos_a
operator|<
operator|-
literal|1.
condition|)
name|cos_a
operator|=
operator|-
literal|1
expr_stmt|;
name|angles
index|[
name|i
index|]
operator|=
name|qAcos
argument_list|(
name|cos_a
argument_list|)
operator|/
name|Q_PI
expr_stmt|;
block|}
if|if
condition|(
name|angles
index|[
literal|0
index|]
operator|+
name|angles
index|[
literal|1
index|]
operator|>
literal|1.
condition|)
block|{
comment|// more than 180 degrees
name|normals
index|[
literal|1
index|]
operator|=
operator|-
name|normals
index|[
literal|1
index|]
expr_stmt|;
name|angles
index|[
literal|0
index|]
operator|=
literal|1.
operator|-
name|angles
index|[
literal|0
index|]
expr_stmt|;
name|angles
index|[
literal|1
index|]
operator|=
literal|1.
operator|-
name|angles
index|[
literal|1
index|]
expr_stmt|;
name|sign
operator|=
operator|-
literal|1.
expr_stmt|;
block|}
name|QPointF
name|circle
index|[
literal|3
index|]
decl_stmt|;
name|circle
index|[
literal|0
index|]
operator|=
name|QPointF
argument_list|(
name|b
operator|->
name|x1
argument_list|,
name|b
operator|->
name|y1
argument_list|)
operator|+
name|normals
index|[
literal|0
index|]
operator|*
name|offset
expr_stmt|;
name|circle
index|[
literal|1
index|]
operator|=
name|QPointF
argument_list|(
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|*
operator|(
name|b
operator|->
name|x1
operator|+
name|b
operator|->
name|x4
operator|)
argument_list|,
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|*
operator|(
name|b
operator|->
name|y1
operator|+
name|b
operator|->
name|y4
operator|)
argument_list|)
operator|+
name|normals
index|[
literal|1
index|]
operator|*
name|offset
expr_stmt|;
name|circle
index|[
literal|2
index|]
operator|=
name|QPointF
argument_list|(
name|b
operator|->
name|x4
argument_list|,
name|b
operator|->
name|y4
argument_list|)
operator|+
name|normals
index|[
literal|2
index|]
operator|*
name|offset
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|kappa
init|=
name|qreal
argument_list|(
literal|2.0
argument_list|)
operator|*
name|KAPPA
operator|*
name|sign
operator|*
name|offset
operator|*
name|angles
index|[
name|i
index|]
decl_stmt|;
name|o
operator|->
name|x1
operator|=
name|circle
index|[
name|i
index|]
operator|.
name|x
argument_list|()
expr_stmt|;
name|o
operator|->
name|y1
operator|=
name|circle
index|[
name|i
index|]
operator|.
name|y
argument_list|()
expr_stmt|;
name|o
operator|->
name|x2
operator|=
name|circle
index|[
name|i
index|]
operator|.
name|x
argument_list|()
operator|-
name|normals
index|[
name|i
index|]
operator|.
name|y
argument_list|()
operator|*
name|kappa
expr_stmt|;
name|o
operator|->
name|y2
operator|=
name|circle
index|[
name|i
index|]
operator|.
name|y
argument_list|()
operator|+
name|normals
index|[
name|i
index|]
operator|.
name|x
argument_list|()
operator|*
name|kappa
expr_stmt|;
name|o
operator|->
name|x3
operator|=
name|circle
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|x
argument_list|()
operator|+
name|normals
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|y
argument_list|()
operator|*
name|kappa
expr_stmt|;
name|o
operator|->
name|y3
operator|=
name|circle
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|y
argument_list|()
operator|-
name|normals
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|x
argument_list|()
operator|*
name|kappa
expr_stmt|;
name|o
operator|->
name|x4
operator|=
name|circle
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|x
argument_list|()
expr_stmt|;
name|o
operator|->
name|y4
operator|=
name|circle
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|y
argument_list|()
expr_stmt|;
operator|++
name|o
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|shifted
name|int
name|QBezier
operator|::
name|shifted
parameter_list|(
name|QBezier
modifier|*
name|curveSegments
parameter_list|,
name|int
name|maxSegments
parameter_list|,
name|qreal
name|offset
parameter_list|,
name|float
name|threshold
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|curveSegments
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|maxSegments
operator|>
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|x1
operator|==
name|x2
operator|&&
name|x1
operator|==
name|x3
operator|&&
name|x1
operator|==
name|x4
operator|&&
name|y1
operator|==
name|y2
operator|&&
name|y1
operator|==
name|y3
operator|&&
name|y1
operator|==
name|y4
condition|)
return|return
literal|0
return|;
operator|--
name|maxSegments
expr_stmt|;
name|QBezier
name|beziers
index|[
literal|10
index|]
decl_stmt|;
name|redo
label|:
name|beziers
index|[
literal|0
index|]
operator|=
operator|*
name|this
expr_stmt|;
name|QBezier
modifier|*
name|b
init|=
name|beziers
decl_stmt|;
name|QBezier
modifier|*
name|o
init|=
name|curveSegments
decl_stmt|;
while|while
condition|(
name|b
operator|>=
name|beziers
condition|)
block|{
name|int
name|stack_segments
init|=
name|b
operator|-
name|beziers
operator|+
literal|1
decl_stmt|;
if|if
condition|(
operator|(
name|stack_segments
operator|==
literal|10
operator|)
operator|||
operator|(
name|o
operator|-
name|curveSegments
operator|==
name|maxSegments
operator|-
name|stack_segments
operator|)
condition|)
block|{
name|threshold
operator|*=
name|qreal
argument_list|(
literal|1.5
argument_list|)
expr_stmt|;
if|if
condition|(
name|threshold
operator|>
name|qreal
argument_list|(
literal|2.0
argument_list|)
condition|)
goto|goto
name|give_up
goto|;
goto|goto
name|redo
goto|;
block|}
name|ShiftResult
name|res
init|=
name|shift
argument_list|(
name|b
argument_list|,
name|o
argument_list|,
name|offset
argument_list|,
name|threshold
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
name|Discard
condition|)
block|{
operator|--
name|b
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|res
operator|==
name|Ok
condition|)
block|{
operator|++
name|o
expr_stmt|;
operator|--
name|b
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|res
operator|==
name|Circle
operator|&&
name|maxSegments
operator|-
operator|(
name|o
operator|-
name|curveSegments
operator|)
operator|>=
literal|2
condition|)
block|{
comment|// add semi circle
if|if
condition|(
name|addCircle
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|o
argument_list|)
condition|)
name|o
operator|+=
literal|2
expr_stmt|;
operator|--
name|b
expr_stmt|;
block|}
else|else
block|{
name|b
operator|->
name|split
argument_list|(
name|b
operator|+
literal|1
argument_list|,
name|b
argument_list|)
expr_stmt|;
operator|++
name|b
expr_stmt|;
block|}
block|}
name|give_up
label|:
while|while
condition|(
name|b
operator|>=
name|beziers
condition|)
block|{
name|ShiftResult
name|res
init|=
name|shift
argument_list|(
name|b
argument_list|,
name|o
argument_list|,
name|offset
argument_list|,
name|threshold
argument_list|)
decl_stmt|;
comment|// if res isn't Ok or Split then *o is undefined
if|if
condition|(
name|res
operator|==
name|Ok
operator|||
name|res
operator|==
name|Split
condition|)
operator|++
name|o
expr_stmt|;
operator|--
name|b
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|o
operator|-
name|curveSegments
operator|<=
name|maxSegments
argument_list|)
expr_stmt|;
return|return
name|o
operator|-
name|curveSegments
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QDEBUG_BEZIER
end_ifdef
begin_function
DECL|function|operator <<
specifier|static
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|dbg
parameter_list|,
specifier|const
name|QBezier
modifier|&
name|bz
parameter_list|)
block|{
name|dbg
operator|<<
literal|'['
operator|<<
name|bz
operator|.
name|x1
operator|<<
literal|", "
operator|<<
name|bz
operator|.
name|y1
operator|<<
literal|"], "
operator|<<
literal|'['
operator|<<
name|bz
operator|.
name|x2
operator|<<
literal|", "
operator|<<
name|bz
operator|.
name|y2
operator|<<
literal|"], "
operator|<<
literal|'['
operator|<<
name|bz
operator|.
name|x3
operator|<<
literal|", "
operator|<<
name|bz
operator|.
name|y3
operator|<<
literal|"], "
operator|<<
literal|'['
operator|<<
name|bz
operator|.
name|x4
operator|<<
literal|", "
operator|<<
name|bz
operator|.
name|y4
operator|<<
literal|']'
expr_stmt|;
return|return
name|dbg
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|splitBezierAt
specifier|static
specifier|inline
name|void
name|splitBezierAt
parameter_list|(
specifier|const
name|QBezier
modifier|&
name|bez
parameter_list|,
name|qreal
name|t
parameter_list|,
name|QBezier
modifier|*
name|left
parameter_list|,
name|QBezier
modifier|*
name|right
parameter_list|)
block|{
name|left
operator|->
name|x1
operator|=
name|bez
operator|.
name|x1
expr_stmt|;
name|left
operator|->
name|y1
operator|=
name|bez
operator|.
name|y1
expr_stmt|;
name|left
operator|->
name|x2
operator|=
name|bez
operator|.
name|x1
operator|+
name|t
operator|*
operator|(
name|bez
operator|.
name|x2
operator|-
name|bez
operator|.
name|x1
operator|)
expr_stmt|;
name|left
operator|->
name|y2
operator|=
name|bez
operator|.
name|y1
operator|+
name|t
operator|*
operator|(
name|bez
operator|.
name|y2
operator|-
name|bez
operator|.
name|y1
operator|)
expr_stmt|;
name|left
operator|->
name|x3
operator|=
name|bez
operator|.
name|x2
operator|+
name|t
operator|*
operator|(
name|bez
operator|.
name|x3
operator|-
name|bez
operator|.
name|x2
operator|)
expr_stmt|;
comment|// temporary holding spot
name|left
operator|->
name|y3
operator|=
name|bez
operator|.
name|y2
operator|+
name|t
operator|*
operator|(
name|bez
operator|.
name|y3
operator|-
name|bez
operator|.
name|y2
operator|)
expr_stmt|;
comment|// temporary holding spot
name|right
operator|->
name|x3
operator|=
name|bez
operator|.
name|x3
operator|+
name|t
operator|*
operator|(
name|bez
operator|.
name|x4
operator|-
name|bez
operator|.
name|x3
operator|)
expr_stmt|;
name|right
operator|->
name|y3
operator|=
name|bez
operator|.
name|y3
operator|+
name|t
operator|*
operator|(
name|bez
operator|.
name|y4
operator|-
name|bez
operator|.
name|y3
operator|)
expr_stmt|;
name|right
operator|->
name|x2
operator|=
name|left
operator|->
name|x3
operator|+
name|t
operator|*
operator|(
name|right
operator|->
name|x3
operator|-
name|left
operator|->
name|x3
operator|)
expr_stmt|;
name|right
operator|->
name|y2
operator|=
name|left
operator|->
name|y3
operator|+
name|t
operator|*
operator|(
name|right
operator|->
name|y3
operator|-
name|left
operator|->
name|y3
operator|)
expr_stmt|;
name|left
operator|->
name|x3
operator|=
name|left
operator|->
name|x2
operator|+
name|t
operator|*
operator|(
name|left
operator|->
name|x3
operator|-
name|left
operator|->
name|x2
operator|)
expr_stmt|;
name|left
operator|->
name|y3
operator|=
name|left
operator|->
name|y2
operator|+
name|t
operator|*
operator|(
name|left
operator|->
name|y3
operator|-
name|left
operator|->
name|y2
operator|)
expr_stmt|;
name|left
operator|->
name|x4
operator|=
name|right
operator|->
name|x1
operator|=
name|left
operator|->
name|x3
operator|+
name|t
operator|*
operator|(
name|right
operator|->
name|x2
operator|-
name|left
operator|->
name|x3
operator|)
expr_stmt|;
name|left
operator|->
name|y4
operator|=
name|right
operator|->
name|y1
operator|=
name|left
operator|->
name|y3
operator|+
name|t
operator|*
operator|(
name|right
operator|->
name|y2
operator|-
name|left
operator|->
name|y3
operator|)
expr_stmt|;
name|right
operator|->
name|x4
operator|=
name|bez
operator|.
name|x4
expr_stmt|;
name|right
operator|->
name|y4
operator|=
name|bez
operator|.
name|y4
expr_stmt|;
block|}
end_function
begin_function
DECL|function|length
name|qreal
name|QBezier
operator|::
name|length
parameter_list|(
name|qreal
name|error
parameter_list|)
specifier|const
block|{
name|qreal
name|length
init|=
name|qreal
argument_list|(
literal|0.0
argument_list|)
decl_stmt|;
name|addIfClose
argument_list|(
operator|&
name|length
argument_list|,
name|error
argument_list|)
expr_stmt|;
return|return
name|length
return|;
block|}
end_function
begin_function
DECL|function|addIfClose
name|void
name|QBezier
operator|::
name|addIfClose
parameter_list|(
name|qreal
modifier|*
name|length
parameter_list|,
name|qreal
name|error
parameter_list|)
specifier|const
block|{
name|QBezier
name|left
decl_stmt|,
name|right
decl_stmt|;
comment|/* bez poly splits */
name|qreal
name|len
init|=
name|qreal
argument_list|(
literal|0.0
argument_list|)
decl_stmt|;
comment|/* arc length */
name|qreal
name|chord
decl_stmt|;
comment|/* chord length */
name|len
operator|=
name|len
operator|+
name|QLineF
argument_list|(
name|QPointF
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
argument_list|,
name|QPointF
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
argument_list|)
operator|.
name|length
argument_list|()
expr_stmt|;
name|len
operator|=
name|len
operator|+
name|QLineF
argument_list|(
name|QPointF
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
argument_list|,
name|QPointF
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|)
argument_list|)
operator|.
name|length
argument_list|()
expr_stmt|;
name|len
operator|=
name|len
operator|+
name|QLineF
argument_list|(
name|QPointF
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|)
argument_list|,
name|QPointF
argument_list|(
name|x4
argument_list|,
name|y4
argument_list|)
argument_list|)
operator|.
name|length
argument_list|()
expr_stmt|;
name|chord
operator|=
name|QLineF
argument_list|(
name|QPointF
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
argument_list|,
name|QPointF
argument_list|(
name|x4
argument_list|,
name|y4
argument_list|)
argument_list|)
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|len
operator|-
name|chord
operator|)
operator|>
name|error
condition|)
block|{
name|split
argument_list|(
operator|&
name|left
argument_list|,
operator|&
name|right
argument_list|)
expr_stmt|;
comment|/* split in two */
name|left
operator|.
name|addIfClose
argument_list|(
name|length
argument_list|,
name|error
argument_list|)
expr_stmt|;
comment|/* try left side */
name|right
operator|.
name|addIfClose
argument_list|(
name|length
argument_list|,
name|error
argument_list|)
expr_stmt|;
comment|/* try right side */
return|return;
block|}
operator|*
name|length
operator|=
operator|*
name|length
operator|+
name|len
expr_stmt|;
return|return;
block|}
end_function
begin_function
DECL|function|tForY
name|qreal
name|QBezier
operator|::
name|tForY
parameter_list|(
name|qreal
name|t0
parameter_list|,
name|qreal
name|t1
parameter_list|,
name|qreal
name|y
parameter_list|)
specifier|const
block|{
name|qreal
name|py0
init|=
name|pointAt
argument_list|(
name|t0
argument_list|)
operator|.
name|y
argument_list|()
decl_stmt|;
name|qreal
name|py1
init|=
name|pointAt
argument_list|(
name|t1
argument_list|)
operator|.
name|y
argument_list|()
decl_stmt|;
if|if
condition|(
name|py0
operator|>
name|py1
condition|)
block|{
name|qSwap
argument_list|(
name|py0
argument_list|,
name|py1
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|t0
argument_list|,
name|t1
argument_list|)
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|py0
operator|<=
name|py1
argument_list|)
expr_stmt|;
if|if
condition|(
name|py0
operator|>=
name|y
condition|)
return|return
name|t0
return|;
elseif|else
if|if
condition|(
name|py1
operator|<=
name|y
condition|)
return|return
name|t1
return|;
name|Q_ASSERT
argument_list|(
name|py0
operator|<
name|y
operator|&&
name|y
operator|<
name|py1
argument_list|)
expr_stmt|;
name|qreal
name|lt
init|=
name|t0
decl_stmt|;
name|qreal
name|dt
decl_stmt|;
do|do
block|{
name|qreal
name|t
init|=
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|*
operator|(
name|t0
operator|+
name|t1
operator|)
decl_stmt|;
name|qreal
name|a
decl_stmt|,
name|b
decl_stmt|,
name|c
decl_stmt|,
name|d
decl_stmt|;
name|QBezier
operator|::
name|coefficients
argument_list|(
name|t
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|qreal
name|yt
init|=
name|a
operator|*
name|y1
operator|+
name|b
operator|*
name|y2
operator|+
name|c
operator|*
name|y3
operator|+
name|d
operator|*
name|y4
decl_stmt|;
if|if
condition|(
name|yt
operator|<
name|y
condition|)
block|{
name|t0
operator|=
name|t
expr_stmt|;
name|py0
operator|=
name|yt
expr_stmt|;
block|}
else|else
block|{
name|t1
operator|=
name|t
expr_stmt|;
name|py1
operator|=
name|yt
expr_stmt|;
block|}
name|dt
operator|=
name|lt
operator|-
name|t
expr_stmt|;
name|lt
operator|=
name|t
expr_stmt|;
block|}
do|while
condition|(
name|qAbs
argument_list|(
name|dt
argument_list|)
operator|>
name|qreal
argument_list|(
literal|1e-7
argument_list|)
condition|)
do|;
return|return
name|t0
return|;
block|}
end_function
begin_function
DECL|function|stationaryYPoints
name|int
name|QBezier
operator|::
name|stationaryYPoints
parameter_list|(
name|qreal
modifier|&
name|t0
parameter_list|,
name|qreal
modifier|&
name|t1
parameter_list|)
specifier|const
block|{
comment|// y(t) = (1 - t)^3 * y1 + 3 * (1 - t)^2 * t * y2 + 3 * (1 - t) * t^2 * y3 + t^3 * y4
comment|// y'(t) = 3 * (-(1-2t+t^2) * y1 + (1 - 4 * t + 3 * t^2) * y2 + (2 * t - 3 * t^2) * y3 + t^2 * y4)
comment|// y'(t) = 3 * ((-y1 + 3 * y2 - 3 * y3 + y4)t^2 + (2 * y1 - 4 * y2 + 2 * y3)t + (-y1 + y2))
specifier|const
name|qreal
name|a
init|=
operator|-
name|y1
operator|+
literal|3
operator|*
name|y2
operator|-
literal|3
operator|*
name|y3
operator|+
name|y4
decl_stmt|;
specifier|const
name|qreal
name|b
init|=
literal|2
operator|*
name|y1
operator|-
literal|4
operator|*
name|y2
operator|+
literal|2
operator|*
name|y3
decl_stmt|;
specifier|const
name|qreal
name|c
init|=
operator|-
name|y1
operator|+
name|y2
decl_stmt|;
if|if
condition|(
name|qFuzzyIsNull
argument_list|(
name|a
argument_list|)
condition|)
block|{
if|if
condition|(
name|qFuzzyIsNull
argument_list|(
name|b
argument_list|)
condition|)
return|return
literal|0
return|;
name|t0
operator|=
operator|-
name|c
operator|/
name|b
expr_stmt|;
return|return
name|t0
operator|>
literal|0
operator|&&
name|t0
operator|<
literal|1
return|;
block|}
name|qreal
name|reciprocal
init|=
name|b
operator|*
name|b
operator|-
literal|4
operator|*
name|a
operator|*
name|c
decl_stmt|;
if|if
condition|(
name|qFuzzyIsNull
argument_list|(
name|reciprocal
argument_list|)
condition|)
block|{
name|t0
operator|=
operator|-
name|b
operator|/
operator|(
literal|2
operator|*
name|a
operator|)
expr_stmt|;
return|return
name|t0
operator|>
literal|0
operator|&&
name|t0
operator|<
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|reciprocal
operator|>
literal|0
condition|)
block|{
name|qreal
name|temp
init|=
name|qSqrt
argument_list|(
name|reciprocal
argument_list|)
decl_stmt|;
name|t0
operator|=
operator|(
operator|-
name|b
operator|-
name|temp
operator|)
operator|/
operator|(
literal|2
operator|*
name|a
operator|)
expr_stmt|;
name|t1
operator|=
operator|(
operator|-
name|b
operator|+
name|temp
operator|)
operator|/
operator|(
literal|2
operator|*
name|a
operator|)
expr_stmt|;
if|if
condition|(
name|t1
operator|<
name|t0
condition|)
name|qSwap
argument_list|(
name|t0
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|qreal
name|t
index|[
literal|2
index|]
init|=
block|{
literal|0
block|,
literal|1
block|}
decl_stmt|;
if|if
condition|(
name|t0
operator|>
literal|0
operator|&&
name|t0
operator|<
literal|1
condition|)
name|t
index|[
name|count
operator|++
index|]
operator|=
name|t0
expr_stmt|;
if|if
condition|(
name|t1
operator|>
literal|0
operator|&&
name|t1
operator|<
literal|1
condition|)
name|t
index|[
name|count
operator|++
index|]
operator|=
name|t1
expr_stmt|;
name|t0
operator|=
name|t
index|[
literal|0
index|]
expr_stmt|;
name|t1
operator|=
name|t
index|[
literal|1
index|]
expr_stmt|;
return|return
name|count
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|tAtLength
name|qreal
name|QBezier
operator|::
name|tAtLength
parameter_list|(
name|qreal
name|l
parameter_list|)
specifier|const
block|{
name|qreal
name|len
init|=
name|length
argument_list|()
decl_stmt|;
name|qreal
name|t
init|=
name|qreal
argument_list|(
literal|1.0
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|error
init|=
name|qreal
argument_list|(
literal|0.01
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|>
name|len
operator|||
name|qFuzzyCompare
argument_list|(
name|l
argument_list|,
name|len
argument_list|)
condition|)
return|return
name|t
return|;
name|t
operator|*=
name|qreal
argument_list|(
literal|0.5
argument_list|)
expr_stmt|;
comment|//int iters = 0;
comment|//qDebug()<<"LEN is "<<l<<len;
name|qreal
name|lastBigger
init|=
name|qreal
argument_list|(
literal|1.0
argument_list|)
decl_stmt|;
while|while
condition|(
literal|1
condition|)
block|{
comment|//qDebug()<<"\tt is "<<t;
name|QBezier
name|right
init|=
operator|*
name|this
decl_stmt|;
name|QBezier
name|left
decl_stmt|;
name|right
operator|.
name|parameterSplitLeft
argument_list|(
name|t
argument_list|,
operator|&
name|left
argument_list|)
expr_stmt|;
name|qreal
name|lLen
init|=
name|left
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|qAbs
argument_list|(
name|lLen
operator|-
name|l
argument_list|)
operator|<
name|error
condition|)
break|break;
if|if
condition|(
name|lLen
operator|<
name|l
condition|)
block|{
name|t
operator|+=
operator|(
name|lastBigger
operator|-
name|t
operator|)
operator|*
name|qreal
argument_list|(
literal|0.5
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lastBigger
operator|=
name|t
expr_stmt|;
name|t
operator|-=
name|t
operator|*
name|qreal
argument_list|(
literal|0.5
argument_list|)
expr_stmt|;
block|}
comment|//++iters;
block|}
comment|//qDebug()<<"number of iters is "<<iters;
return|return
name|t
return|;
block|}
end_function
begin_function
DECL|function|bezierOnInterval
name|QBezier
name|QBezier
operator|::
name|bezierOnInterval
parameter_list|(
name|qreal
name|t0
parameter_list|,
name|qreal
name|t1
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|t0
operator|==
literal|0
operator|&&
name|t1
operator|==
literal|1
condition|)
return|return
operator|*
name|this
return|;
name|QBezier
name|bezier
init|=
operator|*
name|this
decl_stmt|;
name|QBezier
name|result
decl_stmt|;
name|bezier
operator|.
name|parameterSplitLeft
argument_list|(
name|t0
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|qreal
name|trueT
init|=
operator|(
name|t1
operator|-
name|t0
operator|)
operator|/
operator|(
literal|1
operator|-
name|t0
operator|)
decl_stmt|;
name|bezier
operator|.
name|parameterSplitLeft
argument_list|(
name|trueT
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
