begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsurface_mac_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qt_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qt_cocoa_helpers_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qwidget.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_struct
DECL|struct|QMacWindowSurfacePrivate
struct|struct
name|QMacWindowSurfacePrivate
block|{
DECL|member|widget
name|QWidget
modifier|*
name|widget
decl_stmt|;
DECL|member|device
name|QPixmap
name|device
decl_stmt|;
block|}
struct|;
end_struct
begin_constructor
DECL|function|QMacWindowSurface
name|QMacWindowSurface
operator|::
name|QMacWindowSurface
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QWindowSurface
argument_list|(
name|widget
argument_list|)
member_init_list|,
name|d_ptr
argument_list|(
operator|new
name|QMacWindowSurfacePrivate
argument_list|)
block|{
name|d_ptr
operator|->
name|widget
operator|=
name|widget
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QMacWindowSurface
name|QMacWindowSurface
operator|::
name|~
name|QMacWindowSurface
parameter_list|()
block|{
operator|delete
name|d_ptr
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|paintDevice
name|QPaintDevice
modifier|*
name|QMacWindowSurface
operator|::
name|paintDevice
parameter_list|()
block|{
return|return
operator|&
name|d_ptr
operator|->
name|device
return|;
block|}
end_function
begin_function
DECL|function|flush
name|void
name|QMacWindowSurface
operator|::
name|flush
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|offset
argument_list|)
expr_stmt|;
comment|// Get a context for the widget.
ifndef|#
directive|ifndef
name|QT_MAC_USE_COCOA
name|CGContextRef
name|context
decl_stmt|;
name|CGrafPtr
name|port
init|=
name|GetWindowPort
argument_list|(
name|qt_mac_window_for
argument_list|(
name|widget
argument_list|)
argument_list|)
decl_stmt|;
name|QDBeginCGContext
argument_list|(
name|port
argument_list|,
operator|&
name|context
argument_list|)
expr_stmt|;
else|#
directive|else
specifier|extern
name|CGContextRef
name|qt_mac_graphicsContextFor
argument_list|(
name|QWidget
operator|*
argument_list|)
decl_stmt|;
name|CGContextRef
name|context
init|=
name|qt_mac_graphicsContextFor
argument_list|(
name|widget
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|CGContextRetain
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|CGContextSaveGState
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// Flip context.
name|CGContextTranslateCTM
argument_list|(
name|context
argument_list|,
literal|0
argument_list|,
name|widget
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|CGContextScaleCTM
argument_list|(
name|context
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Clip to region.
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
modifier|&
name|rects
init|=
name|rgn
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRect
modifier|&
name|rect
init|=
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|CGContextAddRect
argument_list|(
name|context
argument_list|,
name|CGRectMake
argument_list|(
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CGContextClip
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// Draw the image onto the window.
specifier|const
name|CGRect
name|dest
init|=
name|CGRectMake
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|widget
operator|->
name|width
argument_list|()
argument_list|,
name|widget
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|CGImageRef
name|image
init|=
name|d_ptr
operator|->
name|device
operator|.
name|toMacCGImageRef
argument_list|()
decl_stmt|;
name|qt_mac_drawCGImage
argument_list|(
name|context
argument_list|,
operator|&
name|dest
argument_list|,
name|image
argument_list|)
expr_stmt|;
name|CFRelease
argument_list|(
name|image
argument_list|)
expr_stmt|;
comment|// Restore context.
name|CGContextRestoreGState
argument_list|(
name|context
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_MAC_USE_COCOA
name|QDEndCGContext
argument_list|(
name|port
argument_list|,
operator|&
name|context
argument_list|)
expr_stmt|;
else|#
directive|else
name|CGContextFlush
argument_list|(
name|context
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|CGContextRelease
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setGeometry
name|void
name|QMacWindowSurface
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|QWindowSurface
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
specifier|const
name|QSize
name|size
init|=
name|rect
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|device
operator|.
name|size
argument_list|()
operator|!=
name|size
condition|)
name|d_ptr
operator|->
name|device
operator|=
name|QPixmap
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scroll
name|bool
name|QMacWindowSurface
operator|::
name|scroll
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|area
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
if|if
condition|(
name|d_ptr
operator|->
name|device
operator|.
name|size
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|false
return|;
name|QCFType
argument_list|<
name|CGImageRef
argument_list|>
name|image
init|=
name|d_ptr
operator|->
name|device
operator|.
name|toMacCGImageRef
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|rect
argument_list|(
name|area
operator|.
name|boundingRect
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|CGRect
name|dest
init|=
name|CGRectMake
argument_list|(
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|QCFType
argument_list|<
name|CGImageRef
argument_list|>
name|subimage
init|=
name|CGImageCreateWithImageInRect
argument_list|(
name|image
argument_list|,
name|dest
argument_list|)
decl_stmt|;
name|QCFType
argument_list|<
name|CGContextRef
argument_list|>
name|context
init|=
name|qt_mac_cg_context
argument_list|(
operator|&
name|d_ptr
operator|->
name|device
argument_list|)
decl_stmt|;
name|CGContextTranslateCTM
argument_list|(
name|context
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
name|qt_mac_drawCGImage
argument_list|(
name|context
argument_list|,
operator|&
name|dest
argument_list|,
name|subimage
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
