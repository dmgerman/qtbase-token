begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QDRAWHELPER_MMX_P_H
end_ifndef
begin_define
DECL|macro|QDRAWHELPER_MMX_P_H
define|#
directive|define
name|QDRAWHELPER_MMX_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<private/qdrawhelper_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qdrawhelper_x86_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_raster_p.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_HAVE_MMX
end_ifdef
begin_include
include|#
directive|include
file|<mmintrin.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|C_FF
define|#
directive|define
name|C_FF
value|const m64 mmx_0x00ff = _mm_set1_pi16(0xff)
end_define
begin_define
DECL|macro|C_80
define|#
directive|define
name|C_80
value|const m64 mmx_0x0080 = _mm_set1_pi16(0x80)
end_define
begin_define
DECL|macro|C_00
define|#
directive|define
name|C_00
value|const m64 mmx_0x0000 = _mm_setzero_si64()
end_define
begin_ifdef
ifdef|#
directive|ifdef
name|Q_CC_MSVC
end_ifdef
begin_pragma
pragma|#
directive|pragma
name|warning
name|(
name|disable
name|:
name|4799
name|)
end_pragma
begin_comment
comment|// No EMMS at end of function
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|m64
typedef|typedef
name|__m64
name|m64
typedef|;
end_typedef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_struct
DECL|struct|QMMXCommonIntrinsics
struct|struct
name|QMMXCommonIntrinsics
block|{
DECL|function|alpha
specifier|static
specifier|inline
name|m64
name|alpha
parameter_list|(
name|m64
name|x
parameter_list|)
block|{
name|x
operator|=
name|_mm_unpackhi_pi16
argument_list|(
name|x
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|x
operator|=
name|_mm_unpackhi_pi16
argument_list|(
name|x
argument_list|,
name|x
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
DECL|function|_negate
specifier|static
specifier|inline
name|m64
name|_negate
parameter_list|(
specifier|const
name|m64
modifier|&
name|x
parameter_list|,
specifier|const
name|m64
modifier|&
name|mmx_0x00ff
parameter_list|)
block|{
return|return
name|_mm_xor_si64
argument_list|(
name|x
argument_list|,
name|mmx_0x00ff
argument_list|)
return|;
block|}
DECL|function|add
specifier|static
specifier|inline
name|m64
name|add
parameter_list|(
specifier|const
name|m64
modifier|&
name|a
parameter_list|,
specifier|const
name|m64
modifier|&
name|b
parameter_list|)
block|{
return|return
name|_mm_adds_pu16
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|function|_byte_mul
specifier|static
specifier|inline
name|m64
name|_byte_mul
parameter_list|(
specifier|const
name|m64
modifier|&
name|a
parameter_list|,
specifier|const
name|m64
modifier|&
name|b
parameter_list|,
specifier|const
name|m64
modifier|&
name|mmx_0x0080
parameter_list|)
block|{
name|m64
name|res
init|=
name|_mm_mullo_pi16
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|res
operator|=
name|_mm_adds_pu16
argument_list|(
name|res
argument_list|,
name|mmx_0x0080
argument_list|)
expr_stmt|;
name|res
operator|=
name|_mm_adds_pu16
argument_list|(
name|res
argument_list|,
name|_mm_srli_pi16
argument_list|(
name|res
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|_mm_srli_pi16
argument_list|(
name|res
argument_list|,
literal|8
argument_list|)
return|;
block|}
DECL|function|interpolate_pixel_256
specifier|static
specifier|inline
name|m64
name|interpolate_pixel_256
parameter_list|(
specifier|const
name|m64
modifier|&
name|x
parameter_list|,
specifier|const
name|m64
modifier|&
name|a
parameter_list|,
specifier|const
name|m64
modifier|&
name|y
parameter_list|,
specifier|const
name|m64
modifier|&
name|b
parameter_list|)
block|{
name|m64
name|res
init|=
name|_mm_adds_pu16
argument_list|(
name|_mm_mullo_pi16
argument_list|(
name|x
argument_list|,
name|a
argument_list|)
argument_list|,
name|_mm_mullo_pi16
argument_list|(
name|y
argument_list|,
name|b
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|_mm_srli_pi16
argument_list|(
name|res
argument_list|,
literal|8
argument_list|)
return|;
block|}
DECL|function|_interpolate_pixel_255
specifier|static
specifier|inline
name|m64
name|_interpolate_pixel_255
parameter_list|(
specifier|const
name|m64
modifier|&
name|x
parameter_list|,
specifier|const
name|m64
modifier|&
name|a
parameter_list|,
specifier|const
name|m64
modifier|&
name|y
parameter_list|,
specifier|const
name|m64
modifier|&
name|b
parameter_list|,
specifier|const
name|m64
modifier|&
name|mmx_0x0080
parameter_list|)
block|{
name|m64
name|res
init|=
name|_mm_adds_pu16
argument_list|(
name|_mm_mullo_pi16
argument_list|(
name|x
argument_list|,
name|a
argument_list|)
argument_list|,
name|_mm_mullo_pi16
argument_list|(
name|y
argument_list|,
name|b
argument_list|)
argument_list|)
decl_stmt|;
name|res
operator|=
name|_mm_adds_pu16
argument_list|(
name|res
argument_list|,
name|mmx_0x0080
argument_list|)
expr_stmt|;
name|res
operator|=
name|_mm_adds_pu16
argument_list|(
name|res
argument_list|,
name|_mm_srli_pi16
argument_list|(
name|res
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|_mm_srli_pi16
argument_list|(
name|res
argument_list|,
literal|8
argument_list|)
return|;
block|}
DECL|function|_premul
specifier|static
specifier|inline
name|m64
name|_premul
parameter_list|(
name|m64
name|x
parameter_list|,
specifier|const
name|m64
modifier|&
name|mmx_0x0080
parameter_list|)
block|{
name|m64
name|a
init|=
name|alpha
argument_list|(
name|x
argument_list|)
decl_stmt|;
return|return
name|_byte_mul
argument_list|(
name|x
argument_list|,
name|a
argument_list|,
name|mmx_0x0080
argument_list|)
return|;
block|}
DECL|function|_load
specifier|static
specifier|inline
name|m64
name|_load
parameter_list|(
name|uint
name|x
parameter_list|,
specifier|const
name|m64
modifier|&
name|mmx_0x0000
parameter_list|)
block|{
return|return
name|_mm_unpacklo_pi8
argument_list|(
name|_mm_cvtsi32_si64
argument_list|(
name|x
argument_list|)
argument_list|,
name|mmx_0x0000
argument_list|)
return|;
block|}
DECL|function|_load_alpha
specifier|static
specifier|inline
name|m64
name|_load_alpha
parameter_list|(
name|uint
name|x
parameter_list|,
specifier|const
name|m64
modifier|&
parameter_list|)
block|{
name|x
operator||=
operator|(
name|x
operator|<<
literal|16
operator|)
expr_stmt|;
return|return
name|_mm_set1_pi32
argument_list|(
name|x
argument_list|)
return|;
block|}
DECL|function|_store
specifier|static
specifier|inline
name|uint
name|_store
parameter_list|(
specifier|const
name|m64
modifier|&
name|x
parameter_list|,
specifier|const
name|m64
modifier|&
name|mmx_0x0000
parameter_list|)
block|{
return|return
name|_mm_cvtsi64_si32
argument_list|(
name|_mm_packs_pu16
argument_list|(
name|x
argument_list|,
name|mmx_0x0000
argument_list|)
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_define
DECL|macro|negate
define|#
directive|define
name|negate
parameter_list|(
name|x
parameter_list|)
value|_negate(x, mmx_0x00ff)
end_define
begin_define
DECL|macro|byte_mul
define|#
directive|define
name|byte_mul
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|_byte_mul(a, b, mmx_0x0080)
end_define
begin_define
DECL|macro|interpolate_pixel_255
define|#
directive|define
name|interpolate_pixel_255
parameter_list|(
name|x
parameter_list|,
name|a
parameter_list|,
name|y
parameter_list|,
name|b
parameter_list|)
value|_interpolate_pixel_255(x, a, y, b, mmx_0x0080)
end_define
begin_define
DECL|macro|premul
define|#
directive|define
name|premul
parameter_list|(
name|x
parameter_list|)
value|_premul(x, mmx_0x0080)
end_define
begin_define
DECL|macro|load
define|#
directive|define
name|load
parameter_list|(
name|x
parameter_list|)
value|_load(x, mmx_0x0000)
end_define
begin_define
DECL|macro|load_alpha
define|#
directive|define
name|load_alpha
parameter_list|(
name|x
parameter_list|)
value|_load_alpha(x, mmx_0x0000)
end_define
begin_define
DECL|macro|store
define|#
directive|define
name|store
parameter_list|(
name|x
parameter_list|)
value|_store(x, mmx_0x0000)
end_define
begin_comment
comment|/*   result = 0   d = d * cia */
end_comment
begin_define
DECL|macro|comp_func_Clear_impl
define|#
directive|define
name|comp_func_Clear_impl
parameter_list|(
name|dest
parameter_list|,
name|length
parameter_list|,
name|const_alpha
parameter_list|)
define|\
value|{\     if (const_alpha == 255) {\         qt_memfill(static_cast<quint32*>(dest), quint32(0), length);\     } else {\         C_FF; C_80; C_00;\         m64 ia = MM::negate(MM::load_alpha(const_alpha));\         for (int i = 0; i< length; ++i) {\             dest[i] = MM::store(MM::byte_mul(MM::load(dest[i]), ia));\         }\         MM::end();\     }\ }
end_define
begin_expr_stmt
name|template
operator|<
name|class
name|MM
operator|>
DECL|function|comp_func_solid_Clear
specifier|static
name|void
name|QT_FASTCALL
name|comp_func_solid_Clear
argument_list|(
argument|uint *dest
argument_list|,
argument|int length
argument_list|,
argument|uint
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|comp_func_Clear_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|const_alpha
argument_list|)
block|; }
name|template
operator|<
name|class
name|MM
operator|>
DECL|function|comp_func_Clear
specifier|static
name|void
name|QT_FASTCALL
name|comp_func_Clear
argument_list|(
argument|uint *dest
argument_list|,
argument|const uint *
argument_list|,
argument|int length
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|comp_func_Clear_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|const_alpha
argument_list|)
block|; }
comment|/*   result = s   dest = s * ca + d * cia */
name|template
operator|<
name|class
name|MM
operator|>
DECL|function|comp_func_solid_Source
specifier|static
name|void
name|QT_FASTCALL
name|comp_func_solid_Source
argument_list|(
argument|uint *dest
argument_list|,
argument|int length
argument_list|,
argument|uint src
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
name|qt_memfill
argument_list|(
name|static_cast
operator|<
name|quint32
operator|*
operator|>
operator|(
name|dest
operator|)
argument_list|,
name|quint32
argument_list|(
name|src
argument_list|)
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|C_FF
expr_stmt|;
name|C_80
expr_stmt|;
name|C_00
expr_stmt|;
specifier|const
name|m64
name|a
init|=
name|MM
operator|::
name|load_alpha
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
specifier|const
name|m64
name|ia
init|=
name|MM
operator|::
name|negate
argument_list|(
name|a
argument_list|)
decl_stmt|;
specifier|const
name|m64
name|s
init|=
name|MM
operator|::
name|byte_mul
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|src
argument_list|)
argument_list|,
name|a
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|add
argument_list|(
name|s
argument_list|,
name|MM
operator|::
name|byte_mul
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
argument_list|,
name|ia
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
block|}
end_else
begin_expr_stmt
unit|}  template
operator|<
name|class
name|MM
operator|>
DECL|function|comp_func_Source
specifier|static
name|void
name|QT_FASTCALL
name|comp_func_Source
argument_list|(
argument|uint *dest
argument_list|,
argument|const uint *src
argument_list|,
argument|int length
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
operator|::
name|memcpy
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
operator|*
sizeof|sizeof
argument_list|(
name|uint
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|C_FF
expr_stmt|;
name|C_80
expr_stmt|;
name|C_00
expr_stmt|;
specifier|const
name|m64
name|a
init|=
name|MM
operator|::
name|load_alpha
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
specifier|const
name|m64
name|ia
init|=
name|MM
operator|::
name|negate
argument_list|(
name|a
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|interpolate_pixel_255
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
argument_list|,
name|a
argument_list|,
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
argument_list|,
name|ia
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_else
begin_expr_stmt
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
unit|}
comment|/*   result = s + d * sia   dest = (s + d * sia) * ca + d * cia        = s * ca + d * (sia * ca + cia)        = s * ca + d * (1 - sa*ca) */
end_comment
begin_expr_stmt
unit|template
operator|<
name|class
name|MM
operator|>
DECL|function|comp_func_solid_SourceOver
specifier|static
name|void
name|QT_FASTCALL
name|comp_func_solid_SourceOver
argument_list|(
argument|uint *dest
argument_list|,
argument|int length
argument_list|,
argument|uint src
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
if|if
condition|(
operator|(
name|const_alpha
operator|&
name|qAlpha
argument_list|(
name|src
argument_list|)
operator|)
operator|==
literal|255
condition|)
block|{
name|qt_memfill
argument_list|(
name|static_cast
operator|<
name|quint32
operator|*
operator|>
operator|(
name|dest
operator|)
argument_list|,
name|quint32
argument_list|(
name|src
argument_list|)
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|C_FF
expr_stmt|;
name|C_80
expr_stmt|;
name|C_00
expr_stmt|;
name|m64
name|s
init|=
name|MM
operator|::
name|load
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
block|{
name|m64
name|ca
init|=
name|MM
operator|::
name|load_alpha
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
name|s
operator|=
name|MM
operator|::
name|byte_mul
argument_list|(
name|s
argument_list|,
name|ca
argument_list|)
expr_stmt|;
block|}
name|m64
name|a
init|=
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|add
argument_list|(
name|s
argument_list|,
name|MM
operator|::
name|byte_mul
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
argument_list|,
name|a
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
block|}
end_else
begin_expr_stmt
unit|}  template
operator|<
name|class
name|MM
operator|>
DECL|function|comp_func_SourceOver
specifier|static
name|void
name|QT_FASTCALL
name|comp_func_SourceOver
argument_list|(
argument|uint *dest
argument_list|,
argument|const uint *src
argument_list|,
argument|int length
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|C_FF
block|;
name|C_80
block|;
name|C_00
block|;
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|uint
name|alphaMaskedSource
init|=
literal|0xff000000
operator|&
name|src
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|alphaMaskedSource
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
name|alphaMaskedSource
operator|==
literal|0xff000000
condition|)
block|{
name|dest
index|[
name|i
index|]
operator|=
name|src
index|[
name|i
index|]
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|m64
name|s
init|=
name|MM
operator|::
name|load
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|m64
name|ia
init|=
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|add
argument_list|(
name|s
argument_list|,
name|MM
operator|::
name|byte_mul
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
argument_list|,
name|ia
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_else
begin_else
unit|}     }
else|else
block|{
name|m64
name|ca
init|=
name|MM
operator|::
name|load_alpha
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
literal|0xff000000
operator|&
name|src
index|[
name|i
index|]
operator|)
operator|==
literal|0
condition|)
continue|continue;
name|m64
name|s
init|=
name|MM
operator|::
name|byte_mul
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
argument_list|,
name|ca
argument_list|)
decl_stmt|;
name|m64
name|ia
init|=
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|add
argument_list|(
name|s
argument_list|,
name|MM
operator|::
name|byte_mul
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
argument_list|,
name|ia
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_else
begin_expr_stmt
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
unit|}
comment|/*   result = d + s * dia   dest = (d + s * dia) * ca + d * cia        = d + s * dia * ca */
end_comment
begin_expr_stmt
unit|template
operator|<
name|class
name|MM
operator|>
DECL|function|comp_func_solid_DestinationOver
specifier|static
name|void
name|QT_FASTCALL
name|comp_func_solid_DestinationOver
argument_list|(
argument|uint *dest
argument_list|,
argument|int length
argument_list|,
argument|uint src
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|C_FF
block|;
name|C_80
block|;
name|C_00
block|;
name|m64
name|s
operator|=
name|MM
operator|::
name|load
argument_list|(
name|src
argument_list|)
block|;
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
name|s
operator|=
name|MM
operator|::
name|byte_mul
argument_list|(
name|s
argument_list|,
name|MM
operator|::
name|load_alpha
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_for
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|d
init|=
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|m64
name|dia
init|=
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|d
argument_list|)
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|add
argument_list|(
name|d
argument_list|,
name|MM
operator|::
name|byte_mul
argument_list|(
name|s
argument_list|,
name|dia
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_for
begin_expr_stmt
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|class
name|MM
operator|>
DECL|function|comp_func_DestinationOver
specifier|static
name|void
name|QT_FASTCALL
name|comp_func_DestinationOver
argument_list|(
argument|uint *dest
argument_list|,
argument|const uint *src
argument_list|,
argument|int length
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|C_FF
block|;
name|C_80
block|;
name|C_00
block|;
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|d
init|=
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|m64
name|ia
init|=
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|d
argument_list|)
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|add
argument_list|(
name|d
argument_list|,
name|MM
operator|::
name|byte_mul
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
argument_list|,
name|ia
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_block
unit|} else
block|{
name|m64
name|ca
init|=
name|MM
operator|::
name|load_alpha
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|d
init|=
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|m64
name|dia
init|=
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|d
argument_list|)
argument_list|)
decl_stmt|;
name|dia
operator|=
name|MM
operator|::
name|byte_mul
argument_list|(
name|dia
argument_list|,
name|ca
argument_list|)
expr_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|add
argument_list|(
name|d
argument_list|,
name|MM
operator|::
name|byte_mul
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
argument_list|,
name|dia
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_block
begin_expr_stmt
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
unit|}
comment|/*   result = s * da   dest = s * da * ca + d * cia */
end_comment
begin_expr_stmt
unit|template
operator|<
name|class
name|MM
operator|>
DECL|function|comp_func_solid_SourceIn
specifier|static
name|void
name|QT_FASTCALL
name|comp_func_solid_SourceIn
argument_list|(
argument|uint *dest
argument_list|,
argument|int length
argument_list|,
argument|uint src
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|C_80
block|;
name|C_00
block|;
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
name|m64
name|s
init|=
name|MM
operator|::
name|load
argument_list|(
name|src
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|da
init|=
name|MM
operator|::
name|alpha
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|byte_mul
argument_list|(
name|s
argument_list|,
name|da
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_block
unit|} else
block|{
name|C_FF
expr_stmt|;
name|m64
name|s
init|=
name|MM
operator|::
name|load
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|m64
name|ca
init|=
name|MM
operator|::
name|load_alpha
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
name|s
operator|=
name|MM
operator|::
name|byte_mul
argument_list|(
name|s
argument_list|,
name|ca
argument_list|)
expr_stmt|;
name|m64
name|cia
init|=
name|MM
operator|::
name|negate
argument_list|(
name|ca
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|d
init|=
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|interpolate_pixel_255
argument_list|(
name|s
argument_list|,
name|MM
operator|::
name|alpha
argument_list|(
name|d
argument_list|)
argument_list|,
name|d
argument_list|,
name|cia
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_block
begin_expr_stmt
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|class
name|MM
operator|>
DECL|function|comp_func_SourceIn
specifier|static
name|void
name|QT_FASTCALL
name|comp_func_SourceIn
argument_list|(
argument|uint *dest
argument_list|,
argument|const uint *src
argument_list|,
argument|int length
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|C_FF
block|;
name|C_80
block|;
name|C_00
block|;
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|a
init|=
name|MM
operator|::
name|alpha
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|byte_mul
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_block
unit|} else
block|{
name|m64
name|ca
init|=
name|MM
operator|::
name|load_alpha
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
name|m64
name|cia
init|=
name|MM
operator|::
name|negate
argument_list|(
name|ca
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|d
init|=
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|m64
name|da
init|=
name|MM
operator|::
name|byte_mul
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|d
argument_list|)
argument_list|,
name|ca
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|interpolate_pixel_255
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
argument_list|,
name|da
argument_list|,
name|d
argument_list|,
name|cia
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_block
begin_expr_stmt
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
unit|}
comment|/*   result = d * sa   dest = d * sa * ca + d * cia        = d * (sa * ca + cia) */
end_comment
begin_expr_stmt
unit|template
operator|<
name|class
name|MM
operator|>
DECL|function|comp_func_solid_DestinationIn
specifier|static
name|void
name|QT_FASTCALL
name|comp_func_solid_DestinationIn
argument_list|(
argument|uint *dest
argument_list|,
argument|int length
argument_list|,
argument|uint src
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|C_80
block|;
name|C_00
block|;
name|m64
name|a
operator|=
name|MM
operator|::
name|alpha
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|src
argument_list|)
argument_list|)
block|;
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
block|{
name|C_FF
expr_stmt|;
name|m64
name|ca
init|=
name|MM
operator|::
name|load_alpha
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
name|m64
name|cia
init|=
name|MM
operator|::
name|negate
argument_list|(
name|ca
argument_list|)
decl_stmt|;
name|a
operator|=
name|MM
operator|::
name|byte_mul
argument_list|(
name|a
argument_list|,
name|ca
argument_list|)
expr_stmt|;
name|a
operator|=
name|MM
operator|::
name|add
argument_list|(
name|a
argument_list|,
name|cia
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_for
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|byte_mul
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
end_for
begin_expr_stmt
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|class
name|MM
operator|>
DECL|function|comp_func_DestinationIn
specifier|static
name|void
name|QT_FASTCALL
name|comp_func_DestinationIn
argument_list|(
argument|uint *dest
argument_list|,
argument|const uint *src
argument_list|,
argument|int length
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|C_FF
block|;
name|C_80
block|;
name|C_00
block|;
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|a
init|=
name|MM
operator|::
name|alpha
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|byte_mul
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_block
unit|} else
block|{
name|m64
name|ca
init|=
name|MM
operator|::
name|load_alpha
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
name|m64
name|cia
init|=
name|MM
operator|::
name|negate
argument_list|(
name|ca
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|d
init|=
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|m64
name|a
init|=
name|MM
operator|::
name|alpha
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|=
name|MM
operator|::
name|byte_mul
argument_list|(
name|a
argument_list|,
name|ca
argument_list|)
expr_stmt|;
name|a
operator|=
name|MM
operator|::
name|add
argument_list|(
name|a
argument_list|,
name|cia
argument_list|)
expr_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|byte_mul
argument_list|(
name|d
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_block
begin_expr_stmt
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
unit|}
comment|/*   result = s * dia   dest = s * dia * ca + d * cia */
end_comment
begin_expr_stmt
unit|template
operator|<
name|class
name|MM
operator|>
DECL|function|comp_func_solid_SourceOut
specifier|static
name|void
name|QT_FASTCALL
name|comp_func_solid_SourceOut
argument_list|(
argument|uint *dest
argument_list|,
argument|int length
argument_list|,
argument|uint src
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|C_FF
block|;
name|C_80
block|;
name|C_00
block|;
name|m64
name|s
operator|=
name|MM
operator|::
name|load
argument_list|(
name|src
argument_list|)
block|;
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|dia
init|=
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|byte_mul
argument_list|(
name|s
argument_list|,
name|dia
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_block
unit|} else
block|{
name|m64
name|ca
init|=
name|MM
operator|::
name|load_alpha
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
name|m64
name|cia
init|=
name|MM
operator|::
name|negate
argument_list|(
name|ca
argument_list|)
decl_stmt|;
name|s
operator|=
name|MM
operator|::
name|byte_mul
argument_list|(
name|s
argument_list|,
name|ca
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|d
init|=
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|interpolate_pixel_255
argument_list|(
name|s
argument_list|,
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|d
argument_list|)
argument_list|)
argument_list|,
name|d
argument_list|,
name|cia
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_block
begin_expr_stmt
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|class
name|MM
operator|>
DECL|function|comp_func_SourceOut
specifier|static
name|void
name|QT_FASTCALL
name|comp_func_SourceOut
argument_list|(
argument|uint *dest
argument_list|,
argument|const uint *src
argument_list|,
argument|int length
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|C_FF
block|;
name|C_80
block|;
name|C_00
block|;
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|ia
init|=
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|byte_mul
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
argument_list|,
name|ia
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_block
unit|} else
block|{
name|m64
name|ca
init|=
name|MM
operator|::
name|load_alpha
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
name|m64
name|cia
init|=
name|MM
operator|::
name|negate
argument_list|(
name|ca
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|d
init|=
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|m64
name|dia
init|=
name|MM
operator|::
name|byte_mul
argument_list|(
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|d
argument_list|)
argument_list|)
argument_list|,
name|ca
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|interpolate_pixel_255
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
argument_list|,
name|dia
argument_list|,
name|d
argument_list|,
name|cia
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_block
begin_expr_stmt
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
unit|}
comment|/*   result = d * sia   dest = d * sia * ca + d * cia        = d * (sia * ca + cia) */
end_comment
begin_expr_stmt
unit|template
operator|<
name|class
name|MM
operator|>
DECL|function|comp_func_solid_DestinationOut
specifier|static
name|void
name|QT_FASTCALL
name|comp_func_solid_DestinationOut
argument_list|(
argument|uint *dest
argument_list|,
argument|int length
argument_list|,
argument|uint src
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|C_FF
block|;
name|C_80
block|;
name|C_00
block|;
name|m64
name|a
operator|=
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|src
argument_list|)
argument_list|)
argument_list|)
block|;
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
block|{
name|m64
name|ca
init|=
name|MM
operator|::
name|load_alpha
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
name|a
operator|=
name|MM
operator|::
name|byte_mul
argument_list|(
name|a
argument_list|,
name|ca
argument_list|)
expr_stmt|;
name|a
operator|=
name|MM
operator|::
name|add
argument_list|(
name|a
argument_list|,
name|MM
operator|::
name|negate
argument_list|(
name|ca
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_for
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|byte_mul
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
end_for
begin_expr_stmt
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|class
name|MM
operator|>
DECL|function|comp_func_DestinationOut
specifier|static
name|void
name|QT_FASTCALL
name|comp_func_DestinationOut
argument_list|(
argument|uint *dest
argument_list|,
argument|const uint *src
argument_list|,
argument|int length
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|C_FF
block|;
name|C_80
block|;
name|C_00
block|;
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|a
init|=
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|byte_mul
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_block
unit|} else
block|{
name|m64
name|ca
init|=
name|MM
operator|::
name|load_alpha
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
name|m64
name|cia
init|=
name|MM
operator|::
name|negate
argument_list|(
name|ca
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|d
init|=
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|m64
name|a
init|=
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|=
name|MM
operator|::
name|byte_mul
argument_list|(
name|a
argument_list|,
name|ca
argument_list|)
expr_stmt|;
name|a
operator|=
name|MM
operator|::
name|add
argument_list|(
name|a
argument_list|,
name|cia
argument_list|)
expr_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|byte_mul
argument_list|(
name|d
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_block
begin_expr_stmt
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
unit|}
comment|/*   result = s*da + d*sia   dest = s*da*ca + d*sia*ca + d *cia        = s*ca * da + d * (sia*ca + cia)        = s*ca * da + d * (1 - sa*ca) */
end_comment
begin_expr_stmt
unit|template
operator|<
name|class
name|MM
operator|>
DECL|function|comp_func_solid_SourceAtop
specifier|static
name|void
name|QT_FASTCALL
name|comp_func_solid_SourceAtop
argument_list|(
argument|uint *dest
argument_list|,
argument|int length
argument_list|,
argument|uint src
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|C_FF
block|;
name|C_80
block|;
name|C_00
block|;
name|m64
name|s
operator|=
name|MM
operator|::
name|load
argument_list|(
name|src
argument_list|)
block|;
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
block|{
name|m64
name|ca
init|=
name|MM
operator|::
name|load_alpha
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
name|s
operator|=
name|MM
operator|::
name|byte_mul
argument_list|(
name|s
argument_list|,
name|ca
argument_list|)
expr_stmt|;
block|}
name|m64
name|a
operator|=
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_for
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|d
init|=
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|interpolate_pixel_255
argument_list|(
name|s
argument_list|,
name|MM
operator|::
name|alpha
argument_list|(
name|d
argument_list|)
argument_list|,
name|d
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_for
begin_expr_stmt
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|class
name|MM
operator|>
DECL|function|comp_func_SourceAtop
specifier|static
name|void
name|QT_FASTCALL
name|comp_func_SourceAtop
argument_list|(
argument|uint *dest
argument_list|,
argument|const uint *src
argument_list|,
argument|int length
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|C_FF
block|;
name|C_80
block|;
name|C_00
block|;
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|s
init|=
name|MM
operator|::
name|load
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|m64
name|d
init|=
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|interpolate_pixel_255
argument_list|(
name|s
argument_list|,
name|MM
operator|::
name|alpha
argument_list|(
name|d
argument_list|)
argument_list|,
name|d
argument_list|,
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_block
unit|} else
block|{
name|m64
name|ca
init|=
name|MM
operator|::
name|load_alpha
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|s
init|=
name|MM
operator|::
name|load
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|s
operator|=
name|MM
operator|::
name|byte_mul
argument_list|(
name|s
argument_list|,
name|ca
argument_list|)
expr_stmt|;
name|m64
name|d
init|=
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|interpolate_pixel_255
argument_list|(
name|s
argument_list|,
name|MM
operator|::
name|alpha
argument_list|(
name|d
argument_list|)
argument_list|,
name|d
argument_list|,
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_block
begin_expr_stmt
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
unit|}
comment|/*   result = d*sa + s*dia   dest = d*sa*ca + s*dia*ca + d *cia        = s*ca * dia + d * (sa*ca + cia) */
end_comment
begin_expr_stmt
unit|template
operator|<
name|class
name|MM
operator|>
DECL|function|comp_func_solid_DestinationAtop
specifier|static
name|void
name|QT_FASTCALL
name|comp_func_solid_DestinationAtop
argument_list|(
argument|uint *dest
argument_list|,
argument|int length
argument_list|,
argument|uint src
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|C_FF
block|;
name|C_80
block|;
name|C_00
block|;
name|m64
name|s
operator|=
name|MM
operator|::
name|load
argument_list|(
name|src
argument_list|)
block|;
name|m64
name|a
operator|=
name|MM
operator|::
name|alpha
argument_list|(
name|s
argument_list|)
block|;
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
block|{
name|m64
name|ca
init|=
name|MM
operator|::
name|load_alpha
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
name|s
operator|=
name|MM
operator|::
name|byte_mul
argument_list|(
name|s
argument_list|,
name|ca
argument_list|)
expr_stmt|;
name|a
operator|=
name|MM
operator|::
name|alpha
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|a
operator|=
name|MM
operator|::
name|add
argument_list|(
name|a
argument_list|,
name|MM
operator|::
name|negate
argument_list|(
name|ca
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_for
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|d
init|=
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|interpolate_pixel_255
argument_list|(
name|s
argument_list|,
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|d
argument_list|)
argument_list|)
argument_list|,
name|d
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_for
begin_expr_stmt
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|class
name|MM
operator|>
DECL|function|comp_func_DestinationAtop
specifier|static
name|void
name|QT_FASTCALL
name|comp_func_DestinationAtop
argument_list|(
argument|uint *dest
argument_list|,
argument|const uint *src
argument_list|,
argument|int length
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|C_FF
block|;
name|C_80
block|;
name|C_00
block|;
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|s
init|=
name|MM
operator|::
name|load
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|m64
name|d
init|=
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|interpolate_pixel_255
argument_list|(
name|d
argument_list|,
name|MM
operator|::
name|alpha
argument_list|(
name|s
argument_list|)
argument_list|,
name|s
argument_list|,
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|d
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_block
unit|} else
block|{
name|m64
name|ca
init|=
name|MM
operator|::
name|load_alpha
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|s
init|=
name|MM
operator|::
name|load
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|s
operator|=
name|MM
operator|::
name|byte_mul
argument_list|(
name|s
argument_list|,
name|ca
argument_list|)
expr_stmt|;
name|m64
name|d
init|=
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|m64
name|a
init|=
name|MM
operator|::
name|alpha
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|a
operator|=
name|MM
operator|::
name|add
argument_list|(
name|a
argument_list|,
name|MM
operator|::
name|negate
argument_list|(
name|ca
argument_list|)
argument_list|)
expr_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|interpolate_pixel_255
argument_list|(
name|s
argument_list|,
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|d
argument_list|)
argument_list|)
argument_list|,
name|d
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_block
begin_expr_stmt
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
unit|}
comment|/*   result = d*sia + s*dia   dest = d*sia*ca + s*dia*ca + d *cia        = s*ca * dia + d * (sia*ca + cia)        = s*ca * dia + d * (1 - sa*ca) */
end_comment
begin_expr_stmt
unit|template
operator|<
name|class
name|MM
operator|>
DECL|function|comp_func_solid_XOR
specifier|static
name|void
name|QT_FASTCALL
name|comp_func_solid_XOR
argument_list|(
argument|uint *dest
argument_list|,
argument|int length
argument_list|,
argument|uint src
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|C_FF
block|;
name|C_80
block|;
name|C_00
block|;
name|m64
name|s
operator|=
name|MM
operator|::
name|load
argument_list|(
name|src
argument_list|)
block|;
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
block|{
name|m64
name|ca
init|=
name|MM
operator|::
name|load_alpha
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
name|s
operator|=
name|MM
operator|::
name|byte_mul
argument_list|(
name|s
argument_list|,
name|ca
argument_list|)
expr_stmt|;
block|}
name|m64
name|a
operator|=
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_for
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|d
init|=
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|interpolate_pixel_255
argument_list|(
name|s
argument_list|,
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|d
argument_list|)
argument_list|)
argument_list|,
name|d
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_for
begin_expr_stmt
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|class
name|MM
operator|>
DECL|function|comp_func_XOR
specifier|static
name|void
name|QT_FASTCALL
name|comp_func_XOR
argument_list|(
argument|uint *dest
argument_list|,
argument|const uint *src
argument_list|,
argument|int length
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|C_FF
block|;
name|C_80
block|;
name|C_00
block|;
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|s
init|=
name|MM
operator|::
name|load
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|m64
name|d
init|=
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|interpolate_pixel_255
argument_list|(
name|s
argument_list|,
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|d
argument_list|)
argument_list|)
argument_list|,
name|d
argument_list|,
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_block
unit|} else
block|{
name|m64
name|ca
init|=
name|MM
operator|::
name|load_alpha
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|m64
name|s
init|=
name|MM
operator|::
name|load
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|s
operator|=
name|MM
operator|::
name|byte_mul
argument_list|(
name|s
argument_list|,
name|ca
argument_list|)
expr_stmt|;
name|m64
name|d
init|=
name|MM
operator|::
name|load
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|interpolate_pixel_255
argument_list|(
name|s
argument_list|,
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|d
argument_list|)
argument_list|)
argument_list|,
name|d
argument_list|,
name|MM
operator|::
name|negate
argument_list|(
name|MM
operator|::
name|alpha
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_block
begin_expr_stmt
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|class
name|MM
operator|>
DECL|function|rasterop_solid_SourceOrDestination
specifier|static
name|void
name|QT_FASTCALL
name|rasterop_solid_SourceOrDestination
argument_list|(
argument|uint *dest
argument_list|,
argument|int length
argument_list|,
argument|uint color
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
block|;
if|if
condition|(
call|(
name|quintptr
call|)
argument_list|(
name|dest
argument_list|)
operator|&
literal|0x7
condition|)
block|{
operator|*
name|dest
operator|++
operator||=
name|color
expr_stmt|;
operator|--
name|length
expr_stmt|;
block|}
specifier|const
name|int
name|length64
operator|=
name|length
operator|/
literal|2
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|length64
condition|)
block|{
name|__m64
modifier|*
name|dst64
init|=
name|reinterpret_cast
operator|<
name|__m64
operator|*
operator|>
operator|(
name|dest
operator|)
decl_stmt|;
specifier|const
name|__m64
name|color64
init|=
name|_mm_set_pi32
argument_list|(
name|color
argument_list|,
name|color
argument_list|)
decl_stmt|;
name|int
name|n
init|=
operator|(
name|length64
operator|+
literal|3
operator|)
operator|/
literal|4
decl_stmt|;
switch|switch
condition|(
name|length64
operator|&
literal|0x3
condition|)
block|{
case|case
literal|0
case|:
do|do
block|{
operator|*
name|dst64
operator|=
name|_mm_or_si64
argument_list|(
operator|*
name|dst64
argument_list|,
name|color64
argument_list|)
expr_stmt|;
operator|++
name|dst64
expr_stmt|;
case|case
literal|3
case|:
operator|*
name|dst64
operator|=
name|_mm_or_si64
argument_list|(
operator|*
name|dst64
argument_list|,
name|color64
argument_list|)
expr_stmt|;
operator|++
name|dst64
expr_stmt|;
case|case
literal|2
case|:
operator|*
name|dst64
operator|=
name|_mm_or_si64
argument_list|(
operator|*
name|dst64
argument_list|,
name|color64
argument_list|)
expr_stmt|;
operator|++
name|dst64
expr_stmt|;
case|case
literal|1
case|:
operator|*
name|dst64
operator|=
name|_mm_or_si64
argument_list|(
operator|*
name|dst64
argument_list|,
name|color64
argument_list|)
expr_stmt|;
operator|++
name|dst64
expr_stmt|;
block|}
do|while
condition|(
operator|--
name|n
operator|>
literal|0
condition|)
do|;
block|}
block|}
end_if
begin_if
if|if
condition|(
name|length
operator|&
literal|0x1
condition|)
block|{
name|dest
index|[
name|length
operator|-
literal|1
index|]
operator||=
name|color
expr_stmt|;
block|}
end_if
begin_expr_stmt
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|class
name|MM
operator|>
DECL|function|rasterop_solid_SourceAndDestination
specifier|static
name|void
name|QT_FASTCALL
name|rasterop_solid_SourceAndDestination
argument_list|(
argument|uint *dest
argument_list|,
argument|int length
argument_list|,
argument|uint color
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
block|;
name|color
operator||=
literal|0xff000000
block|;
if|if
condition|(
call|(
name|quintptr
call|)
argument_list|(
name|dest
argument_list|)
operator|&
literal|0x7
condition|)
block|{
comment|// align
operator|*
name|dest
operator|++
operator|&=
name|color
expr_stmt|;
operator|--
name|length
expr_stmt|;
block|}
specifier|const
name|int
name|length64
operator|=
name|length
operator|/
literal|2
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|length64
condition|)
block|{
name|__m64
modifier|*
name|dst64
init|=
name|reinterpret_cast
operator|<
name|__m64
operator|*
operator|>
operator|(
name|dest
operator|)
decl_stmt|;
specifier|const
name|__m64
name|color64
init|=
name|_mm_set_pi32
argument_list|(
name|color
argument_list|,
name|color
argument_list|)
decl_stmt|;
name|int
name|n
init|=
operator|(
name|length64
operator|+
literal|3
operator|)
operator|/
literal|4
decl_stmt|;
switch|switch
condition|(
name|length64
operator|&
literal|0x3
condition|)
block|{
case|case
literal|0
case|:
do|do
block|{
operator|*
name|dst64
operator|=
name|_mm_and_si64
argument_list|(
operator|*
name|dst64
argument_list|,
name|color64
argument_list|)
expr_stmt|;
operator|++
name|dst64
expr_stmt|;
case|case
literal|3
case|:
operator|*
name|dst64
operator|=
name|_mm_and_si64
argument_list|(
operator|*
name|dst64
argument_list|,
name|color64
argument_list|)
expr_stmt|;
operator|++
name|dst64
expr_stmt|;
case|case
literal|2
case|:
operator|*
name|dst64
operator|=
name|_mm_and_si64
argument_list|(
operator|*
name|dst64
argument_list|,
name|color64
argument_list|)
expr_stmt|;
operator|++
name|dst64
expr_stmt|;
case|case
literal|1
case|:
operator|*
name|dst64
operator|=
name|_mm_and_si64
argument_list|(
operator|*
name|dst64
argument_list|,
name|color64
argument_list|)
expr_stmt|;
operator|++
name|dst64
expr_stmt|;
block|}
do|while
condition|(
operator|--
name|n
operator|>
literal|0
condition|)
do|;
block|}
block|}
end_if
begin_if
if|if
condition|(
name|length
operator|&
literal|0x1
condition|)
block|{
name|dest
index|[
name|length
operator|-
literal|1
index|]
operator|&=
name|color
expr_stmt|;
block|}
end_if
begin_expr_stmt
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|class
name|MM
operator|>
DECL|function|rasterop_solid_SourceXorDestination
specifier|static
name|void
name|QT_FASTCALL
name|rasterop_solid_SourceXorDestination
argument_list|(
argument|uint *dest
argument_list|,
argument|int length
argument_list|,
argument|uint color
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
block|;
name|color
operator|&=
literal|0x00ffffff
block|;
if|if
condition|(
call|(
name|quintptr
call|)
argument_list|(
name|dest
argument_list|)
operator|&
literal|0x7
condition|)
block|{
operator|*
name|dest
operator|++
operator|^=
name|color
expr_stmt|;
operator|--
name|length
expr_stmt|;
block|}
specifier|const
name|int
name|length64
operator|=
name|length
operator|/
literal|2
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|length64
condition|)
block|{
name|__m64
modifier|*
name|dst64
init|=
name|reinterpret_cast
operator|<
name|__m64
operator|*
operator|>
operator|(
name|dest
operator|)
decl_stmt|;
specifier|const
name|__m64
name|color64
init|=
name|_mm_set_pi32
argument_list|(
name|color
argument_list|,
name|color
argument_list|)
decl_stmt|;
name|int
name|n
init|=
operator|(
name|length64
operator|+
literal|3
operator|)
operator|/
literal|4
decl_stmt|;
switch|switch
condition|(
name|length64
operator|&
literal|0x3
condition|)
block|{
case|case
literal|0
case|:
do|do
block|{
operator|*
name|dst64
operator|=
name|_mm_xor_si64
argument_list|(
operator|*
name|dst64
argument_list|,
name|color64
argument_list|)
expr_stmt|;
operator|++
name|dst64
expr_stmt|;
case|case
literal|3
case|:
operator|*
name|dst64
operator|=
name|_mm_xor_si64
argument_list|(
operator|*
name|dst64
argument_list|,
name|color64
argument_list|)
expr_stmt|;
operator|++
name|dst64
expr_stmt|;
case|case
literal|2
case|:
operator|*
name|dst64
operator|=
name|_mm_xor_si64
argument_list|(
operator|*
name|dst64
argument_list|,
name|color64
argument_list|)
expr_stmt|;
operator|++
name|dst64
expr_stmt|;
case|case
literal|1
case|:
operator|*
name|dst64
operator|=
name|_mm_xor_si64
argument_list|(
operator|*
name|dst64
argument_list|,
name|color64
argument_list|)
expr_stmt|;
operator|++
name|dst64
expr_stmt|;
block|}
do|while
condition|(
operator|--
name|n
operator|>
literal|0
condition|)
do|;
block|}
block|}
end_if
begin_if
if|if
condition|(
name|length
operator|&
literal|0x1
condition|)
block|{
name|dest
index|[
name|length
operator|-
literal|1
index|]
operator|^=
name|color
expr_stmt|;
block|}
end_if
begin_expr_stmt
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|class
name|MM
operator|>
DECL|function|rasterop_solid_SourceAndNotDestination
specifier|static
name|void
name|QT_FASTCALL
name|rasterop_solid_SourceAndNotDestination
argument_list|(
argument|uint *dest
argument_list|,
argument|int length
argument_list|,
argument|uint color
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
block|;
if|if
condition|(
call|(
name|quintptr
call|)
argument_list|(
name|dest
argument_list|)
operator|&
literal|0x7
condition|)
block|{
operator|*
name|dest
operator|=
operator|(
name|color
operator|&
operator|~
operator|(
operator|*
name|dest
operator|)
operator|)
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|dest
expr_stmt|;
operator|--
name|length
expr_stmt|;
block|}
specifier|const
name|int
name|length64
operator|=
name|length
operator|/
literal|2
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|length64
condition|)
block|{
name|__m64
modifier|*
name|dst64
init|=
name|reinterpret_cast
operator|<
name|__m64
operator|*
operator|>
operator|(
name|dest
operator|)
decl_stmt|;
specifier|const
name|__m64
name|color64
init|=
name|_mm_set_pi32
argument_list|(
name|color
argument_list|,
name|color
argument_list|)
decl_stmt|;
specifier|const
name|m64
name|mmx_0xff000000
init|=
name|_mm_set1_pi32
argument_list|(
literal|0xff000000
argument_list|)
decl_stmt|;
name|__m64
name|tmp1
decl_stmt|,
name|tmp2
decl_stmt|,
name|tmp3
decl_stmt|,
name|tmp4
decl_stmt|;
name|int
name|n
init|=
operator|(
name|length64
operator|+
literal|3
operator|)
operator|/
literal|4
decl_stmt|;
switch|switch
condition|(
name|length64
operator|&
literal|0x3
condition|)
block|{
case|case
literal|0
case|:
do|do
block|{
name|tmp1
operator|=
name|_mm_andnot_si64
argument_list|(
operator|*
name|dst64
argument_list|,
name|color64
argument_list|)
expr_stmt|;
operator|*
name|dst64
operator|++
operator|=
name|_mm_or_si64
argument_list|(
name|tmp1
argument_list|,
name|mmx_0xff000000
argument_list|)
expr_stmt|;
case|case
literal|3
case|:
name|tmp2
operator|=
name|_mm_andnot_si64
argument_list|(
operator|*
name|dst64
argument_list|,
name|color64
argument_list|)
expr_stmt|;
operator|*
name|dst64
operator|++
operator|=
name|_mm_or_si64
argument_list|(
name|tmp2
argument_list|,
name|mmx_0xff000000
argument_list|)
expr_stmt|;
case|case
literal|2
case|:
name|tmp3
operator|=
name|_mm_andnot_si64
argument_list|(
operator|*
name|dst64
argument_list|,
name|color64
argument_list|)
expr_stmt|;
operator|*
name|dst64
operator|++
operator|=
name|_mm_or_si64
argument_list|(
name|tmp3
argument_list|,
name|mmx_0xff000000
argument_list|)
expr_stmt|;
case|case
literal|1
case|:
name|tmp4
operator|=
name|_mm_andnot_si64
argument_list|(
operator|*
name|dst64
argument_list|,
name|color64
argument_list|)
expr_stmt|;
operator|*
name|dst64
operator|++
operator|=
name|_mm_or_si64
argument_list|(
name|tmp4
argument_list|,
name|mmx_0xff000000
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|--
name|n
operator|>
literal|0
condition|)
do|;
block|}
block|}
end_if
begin_if
if|if
condition|(
name|length
operator|&
literal|0x1
condition|)
block|{
name|dest
index|[
name|length
operator|-
literal|1
index|]
operator|=
operator|(
name|color
operator|&
operator|~
operator|(
name|dest
index|[
name|length
operator|-
literal|1
index|]
operator|)
operator|)
operator||
literal|0xff000000
expr_stmt|;
block|}
end_if
begin_expr_stmt
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|class
name|MM
operator|>
DECL|function|rasterop_solid_NotSourceAndNotDestination
specifier|static
name|void
name|QT_FASTCALL
name|rasterop_solid_NotSourceAndNotDestination
argument_list|(
argument|uint *dest
argument_list|,
argument|int length
argument_list|,
argument|uint color
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|rasterop_solid_SourceAndNotDestination
operator|<
name|MM
operator|>
operator|(
name|dest
operator|,
name|length
operator|,
operator|~
name|color
operator|,
name|const_alpha
operator|)
block|; }
name|template
operator|<
name|class
name|MM
operator|>
DECL|function|rasterop_solid_NotSourceOrNotDestination
specifier|static
name|void
name|QT_FASTCALL
name|rasterop_solid_NotSourceOrNotDestination
argument_list|(
argument|uint *dest
argument_list|,
argument|int length
argument_list|,
argument|uint color
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
block|;
name|color
operator|=
operator|~
name|color
operator||
literal|0xff000000
block|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
name|color
operator||
operator|~
operator|(
operator|*
name|dest
operator|)
expr_stmt|;
operator|++
name|dest
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|class
name|MM
operator|>
DECL|function|rasterop_solid_NotSourceXorDestination
specifier|static
name|void
name|QT_FASTCALL
name|rasterop_solid_NotSourceXorDestination
argument_list|(
argument|uint *dest
argument_list|,
argument|int length
argument_list|,
argument|uint color
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|rasterop_solid_SourceXorDestination
operator|<
name|MM
operator|>
operator|(
name|dest
operator|,
name|length
operator|,
operator|~
name|color
operator|,
name|const_alpha
operator|)
block|; }
name|template
operator|<
name|class
name|MM
operator|>
DECL|function|rasterop_solid_NotSource
specifier|static
name|void
name|QT_FASTCALL
name|rasterop_solid_NotSource
argument_list|(
argument|uint *dest
argument_list|,
argument|int length
argument_list|,
argument|uint color
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
block|;
name|qt_memfill
argument_list|(
operator|(
name|quint32
operator|*
operator|)
name|dest
argument_list|,
operator|~
name|color
operator||
literal|0xff000000
argument_list|,
name|length
argument_list|)
block|; }
name|template
operator|<
name|class
name|MM
operator|>
DECL|function|rasterop_solid_NotSourceAndDestination
specifier|static
name|void
name|QT_FASTCALL
name|rasterop_solid_NotSourceAndDestination
argument_list|(
argument|uint *dest
argument_list|,
argument|int length
argument_list|,
argument|uint color
argument_list|,
argument|uint const_alpha
argument_list|)
block|{
name|rasterop_solid_SourceAndDestination
operator|<
name|MM
operator|>
operator|(
name|dest
operator|,
name|length
operator|,
operator|~
name|color
operator|,
name|const_alpha
operator|)
block|; }
name|template
operator|<
name|class
name|MM
operator|>
DECL|function|qt_blend_color_argb_x86
specifier|static
specifier|inline
name|void
name|qt_blend_color_argb_x86
argument_list|(
argument|int count
argument_list|,
argument|const QSpan *spans
argument_list|,
argument|void *userData
argument_list|,
argument|CompositionFunctionSolid *solidFunc
argument_list|)
block|{
name|QSpanData
operator|*
name|data
operator|=
name|reinterpret_cast
operator|<
name|QSpanData
operator|*
operator|>
operator|(
name|userData
operator|)
block|;
if|if
condition|(
name|data
operator|->
name|rasterBuffer
operator|->
name|compositionMode
operator|==
name|QPainter
operator|::
name|CompositionMode_Source
operator|||
operator|(
name|data
operator|->
name|rasterBuffer
operator|->
name|compositionMode
operator|==
name|QPainter
operator|::
name|CompositionMode_SourceOver
operator|&&
name|qAlpha
argument_list|(
name|data
operator|->
name|solid
operator|.
name|color
argument_list|)
operator|==
literal|255
operator|)
condition|)
block|{
comment|// inline for performance
name|C_FF
expr_stmt|;
name|C_80
expr_stmt|;
name|C_00
expr_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|uint
modifier|*
name|target
init|=
operator|(
operator|(
name|uint
operator|*
operator|)
name|data
operator|->
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|spans
operator|->
name|y
argument_list|)
operator|)
operator|+
name|spans
operator|->
name|x
decl_stmt|;
if|if
condition|(
name|spans
operator|->
name|coverage
operator|==
literal|255
condition|)
block|{
name|qt_memfill
argument_list|(
name|static_cast
operator|<
name|quint32
operator|*
operator|>
operator|(
name|target
operator|)
argument_list|,
name|quint32
argument_list|(
name|data
operator|->
name|solid
operator|.
name|color
argument_list|)
argument_list|,
name|spans
operator|->
name|len
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
comment|// dest = s * ca + d * (1 - sa*ca) --> dest = s * ca + d * (1-ca)
name|m64
name|ca
init|=
name|MM
operator|::
name|load_alpha
argument_list|(
name|spans
operator|->
name|coverage
argument_list|)
decl_stmt|;
name|m64
name|s
init|=
name|MM
operator|::
name|byte_mul
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|data
operator|->
name|solid
operator|.
name|color
argument_list|)
argument_list|,
name|ca
argument_list|)
decl_stmt|;
name|m64
name|ica
init|=
name|MM
operator|::
name|negate
argument_list|(
name|ca
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|spans
operator|->
name|len
condition|;
operator|++
name|i
control|)
name|target
index|[
name|i
index|]
operator|=
name|MM
operator|::
name|store
argument_list|(
name|MM
operator|::
name|add
argument_list|(
name|s
argument_list|,
name|MM
operator|::
name|byte_mul
argument_list|(
name|MM
operator|::
name|load
argument_list|(
name|target
index|[
name|i
index|]
argument_list|)
argument_list|,
name|ica
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_else
begin_expr_stmt
operator|++
name|spans
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}         MM
operator|::
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_return
return|return;
end_return
begin_expr_stmt
unit|}     CompositionFunctionSolid
name|func
operator|=
name|solidFunc
index|[
name|data
operator|->
name|rasterBuffer
operator|->
name|compositionMode
index|]
expr_stmt|;
end_expr_stmt
begin_while
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|uint
modifier|*
name|target
init|=
operator|(
operator|(
name|uint
operator|*
operator|)
name|data
operator|->
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|spans
operator|->
name|y
argument_list|)
operator|)
operator|+
name|spans
operator|->
name|x
decl_stmt|;
name|func
argument_list|(
name|target
argument_list|,
name|spans
operator|->
name|len
argument_list|,
name|data
operator|->
name|solid
operator|.
name|color
argument_list|,
name|spans
operator|->
name|coverage
argument_list|)
expr_stmt|;
operator|++
name|spans
expr_stmt|;
block|}
end_while
begin_ifdef
unit|}
ifdef|#
directive|ifdef
name|QT_HAVE_MMX
end_ifdef
begin_label
unit|struct
DECL|struct|QMMXCommonIntrinsics
name|QMMXIntrinsics
label|:
end_label
begin_decl_stmt
DECL|struct|QMMXCommonIntrinsics
name|public
name|QMMXCommonIntrinsics
block|{
DECL|function|end
specifier|static
specifier|inline
name|void
name|end
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|_X86_
argument_list|)
name|_mm_empty
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_HAVE_MMX
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QDRAWHELPER_MMX_P_H
end_comment
end_unit
