begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<private/qdrawhelper_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpainter_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qdrawhelper_x86_p.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_HAVE_ARM_SIMD
end_ifdef
begin_include
include|#
directive|include
file|<private/qdrawhelper_arm_simd_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<private/qdrawhelper_neon_p.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_HAVE_MIPS_DSP
end_ifdef
begin_include
include|#
directive|include
file|<private/qdrawhelper_mips_dsp_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<private/qmath_p.h>
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|macro|MASK
define|#
directive|define
name|MASK
parameter_list|(
name|src
parameter_list|,
name|a
parameter_list|)
value|src = BYTE_MUL(src, a)
comment|/*   constants and structures */
name|enum
type|{
DECL|enumerator|fixed_scale
name|fixed_scale
init|=
literal|1
operator|<<
literal|16
decl_stmt|,
DECL|enumerator|half_point
name|half_point
init|=
literal|1
operator|<<
literal|15
end_decl_stmt
begin_comment
unit|};
comment|// must be multiple of 4 for easier SIMD implementations
end_comment
begin_decl_stmt
DECL|variable|buffer_size
specifier|static
specifier|const
name|int
name|buffer_size
init|=
literal|2048
decl_stmt|;
end_decl_stmt
begin_comment
comment|// To convert in place, let 'dest' and 'src' be the same.
end_comment
begin_function
DECL|function|convertIndexedToARGB32PM
specifier|static
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|convertIndexedToARGB32PM
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QPixelLayout
modifier|*
parameter_list|,
specifier|const
name|QRgb
modifier|*
name|clut
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|buffer
index|[
name|i
index|]
operator|=
name|PREMUL
argument_list|(
name|clut
index|[
name|src
index|[
name|i
index|]
index|]
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
end_function
begin_function
DECL|function|convertPassThrough
specifier|static
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|convertPassThrough
parameter_list|(
name|uint
modifier|*
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QPixelLayout
modifier|*
parameter_list|,
specifier|const
name|QRgb
modifier|*
parameter_list|)
block|{
return|return
name|src
return|;
block|}
end_function
begin_function
DECL|function|convertRGB16ToARGB32PM
specifier|static
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|convertRGB16ToARGB32PM
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QPixelLayout
modifier|*
parameter_list|,
specifier|const
name|QRgb
modifier|*
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|buffer
index|[
name|i
index|]
operator|=
name|qConvertRgb16To32
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
end_function
begin_function
DECL|function|convertARGB32ToARGB32PM
specifier|static
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|convertARGB32ToARGB32PM
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QPixelLayout
modifier|*
parameter_list|,
specifier|const
name|QRgb
modifier|*
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|buffer
index|[
name|i
index|]
operator|=
name|PREMUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
end_function
begin_function
DECL|function|convertToRGB32
specifier|static
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|convertToRGB32
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QPixelLayout
modifier|*
name|layout
parameter_list|,
specifier|const
name|QRgb
modifier|*
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|layout
operator|->
name|redWidth
operator|>=
literal|4
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|layout
operator|->
name|greenWidth
operator|>=
literal|4
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|layout
operator|->
name|blueWidth
operator|>=
literal|4
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|layout
operator|->
name|alphaWidth
operator|==
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|uint
name|redMask
init|=
operator|(
operator|(
literal|1
operator|<<
name|layout
operator|->
name|redWidth
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
specifier|const
name|uint
name|greenMask
init|=
operator|(
operator|(
literal|1
operator|<<
name|layout
operator|->
name|greenWidth
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
specifier|const
name|uint
name|blueMask
init|=
operator|(
operator|(
literal|1
operator|<<
name|layout
operator|->
name|blueWidth
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
specifier|const
name|uchar
name|redLeftShift
init|=
literal|8
operator|-
name|layout
operator|->
name|redWidth
decl_stmt|;
specifier|const
name|uchar
name|greenLeftShift
init|=
literal|8
operator|-
name|layout
operator|->
name|greenWidth
decl_stmt|;
specifier|const
name|uchar
name|blueLeftShift
init|=
literal|8
operator|-
name|layout
operator|->
name|blueWidth
decl_stmt|;
specifier|const
name|uchar
name|redRightShift
init|=
literal|2
operator|*
name|layout
operator|->
name|redWidth
operator|-
literal|8
decl_stmt|;
specifier|const
name|uchar
name|greenRightShift
init|=
literal|2
operator|*
name|layout
operator|->
name|greenWidth
operator|-
literal|8
decl_stmt|;
specifier|const
name|uchar
name|blueRightShift
init|=
literal|2
operator|*
name|layout
operator|->
name|blueWidth
operator|-
literal|8
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|uint
name|red
init|=
operator|(
name|src
index|[
name|i
index|]
operator|>>
name|layout
operator|->
name|redShift
operator|)
operator|&
name|redMask
decl_stmt|;
name|uint
name|green
init|=
operator|(
name|src
index|[
name|i
index|]
operator|>>
name|layout
operator|->
name|greenShift
operator|)
operator|&
name|greenMask
decl_stmt|;
name|uint
name|blue
init|=
operator|(
name|src
index|[
name|i
index|]
operator|>>
name|layout
operator|->
name|blueShift
operator|)
operator|&
name|blueMask
decl_stmt|;
name|red
operator|=
operator|(
operator|(
name|red
operator|<<
name|redLeftShift
operator|)
operator||
operator|(
name|red
operator|>>
name|redRightShift
operator|)
operator|)
operator|<<
literal|16
expr_stmt|;
name|green
operator|=
operator|(
operator|(
name|green
operator|<<
name|greenLeftShift
operator|)
operator||
operator|(
name|green
operator|>>
name|greenRightShift
operator|)
operator|)
operator|<<
literal|8
expr_stmt|;
name|blue
operator|=
operator|(
name|blue
operator|<<
name|blueLeftShift
operator|)
operator||
operator|(
name|blue
operator|>>
name|blueRightShift
operator|)
expr_stmt|;
name|buffer
index|[
name|i
index|]
operator|=
literal|0xff000000
operator||
name|red
operator||
name|green
operator||
name|blue
expr_stmt|;
block|}
return|return
name|buffer
return|;
block|}
end_function
begin_function
DECL|function|convertToARGB32PM
specifier|static
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|convertToARGB32PM
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QPixelLayout
modifier|*
name|layout
parameter_list|,
specifier|const
name|QRgb
modifier|*
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|layout
operator|->
name|redWidth
operator|>=
literal|4
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|layout
operator|->
name|greenWidth
operator|>=
literal|4
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|layout
operator|->
name|blueWidth
operator|>=
literal|4
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|layout
operator|->
name|alphaWidth
operator|>=
literal|4
argument_list|)
expr_stmt|;
specifier|const
name|uint
name|redMask
init|=
operator|(
operator|(
literal|1
operator|<<
name|layout
operator|->
name|redWidth
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
specifier|const
name|uint
name|greenMask
init|=
operator|(
operator|(
literal|1
operator|<<
name|layout
operator|->
name|greenWidth
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
specifier|const
name|uint
name|blueMask
init|=
operator|(
operator|(
literal|1
operator|<<
name|layout
operator|->
name|blueWidth
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
specifier|const
name|uchar
name|redLeftShift
init|=
literal|8
operator|-
name|layout
operator|->
name|redWidth
decl_stmt|;
specifier|const
name|uchar
name|greenLeftShift
init|=
literal|8
operator|-
name|layout
operator|->
name|greenWidth
decl_stmt|;
specifier|const
name|uchar
name|blueLeftShift
init|=
literal|8
operator|-
name|layout
operator|->
name|blueWidth
decl_stmt|;
specifier|const
name|uchar
name|redRightShift
init|=
literal|2
operator|*
name|layout
operator|->
name|redWidth
operator|-
literal|8
decl_stmt|;
specifier|const
name|uchar
name|greenRightShift
init|=
literal|2
operator|*
name|layout
operator|->
name|greenWidth
operator|-
literal|8
decl_stmt|;
specifier|const
name|uchar
name|blueRightShift
init|=
literal|2
operator|*
name|layout
operator|->
name|blueWidth
operator|-
literal|8
decl_stmt|;
specifier|const
name|uint
name|alphaMask
init|=
operator|(
operator|(
literal|1
operator|<<
name|layout
operator|->
name|alphaWidth
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
specifier|const
name|uchar
name|alphaLeftShift
init|=
literal|8
operator|-
name|layout
operator|->
name|alphaWidth
decl_stmt|;
specifier|const
name|uchar
name|alphaRightShift
init|=
literal|2
operator|*
name|layout
operator|->
name|alphaWidth
operator|-
literal|8
decl_stmt|;
if|if
condition|(
name|layout
operator|->
name|premultiplied
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|uint
name|alpha
init|=
operator|(
name|src
index|[
name|i
index|]
operator|>>
name|layout
operator|->
name|alphaShift
operator|)
operator|&
name|alphaMask
decl_stmt|;
name|uint
name|red
init|=
operator|(
name|src
index|[
name|i
index|]
operator|>>
name|layout
operator|->
name|redShift
operator|)
operator|&
name|redMask
decl_stmt|;
name|uint
name|green
init|=
operator|(
name|src
index|[
name|i
index|]
operator|>>
name|layout
operator|->
name|greenShift
operator|)
operator|&
name|greenMask
decl_stmt|;
name|uint
name|blue
init|=
operator|(
name|src
index|[
name|i
index|]
operator|>>
name|layout
operator|->
name|blueShift
operator|)
operator|&
name|blueMask
decl_stmt|;
name|alpha
operator|=
operator|(
name|alpha
operator|<<
name|alphaLeftShift
operator|)
operator||
operator|(
name|alpha
operator|>>
name|alphaRightShift
operator|)
expr_stmt|;
name|red
operator|=
name|qMin
argument_list|(
name|alpha
argument_list|,
operator|(
name|red
operator|<<
name|redLeftShift
operator|)
operator||
operator|(
name|red
operator|>>
name|redRightShift
operator|)
argument_list|)
expr_stmt|;
name|green
operator|=
name|qMin
argument_list|(
name|alpha
argument_list|,
operator|(
name|green
operator|<<
name|greenLeftShift
operator|)
operator||
operator|(
name|green
operator|>>
name|greenRightShift
operator|)
argument_list|)
expr_stmt|;
name|blue
operator|=
name|qMin
argument_list|(
name|alpha
argument_list|,
operator|(
name|blue
operator|<<
name|blueLeftShift
operator|)
operator||
operator|(
name|blue
operator|>>
name|blueRightShift
operator|)
argument_list|)
expr_stmt|;
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|alpha
operator|<<
literal|24
operator|)
operator||
operator|(
name|red
operator|<<
literal|16
operator|)
operator||
operator|(
name|green
operator|<<
literal|8
operator|)
operator||
name|blue
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|uint
name|alpha
init|=
operator|(
name|src
index|[
name|i
index|]
operator|>>
name|layout
operator|->
name|alphaShift
operator|)
operator|&
name|alphaMask
decl_stmt|;
name|uint
name|red
init|=
operator|(
name|src
index|[
name|i
index|]
operator|>>
name|layout
operator|->
name|redShift
operator|)
operator|&
name|redMask
decl_stmt|;
name|uint
name|green
init|=
operator|(
name|src
index|[
name|i
index|]
operator|>>
name|layout
operator|->
name|greenShift
operator|)
operator|&
name|greenMask
decl_stmt|;
name|uint
name|blue
init|=
operator|(
name|src
index|[
name|i
index|]
operator|>>
name|layout
operator|->
name|blueShift
operator|)
operator|&
name|blueMask
decl_stmt|;
name|alpha
operator|=
operator|(
name|alpha
operator|<<
name|alphaLeftShift
operator|)
operator||
operator|(
name|alpha
operator|>>
name|alphaRightShift
operator|)
expr_stmt|;
name|red
operator|=
operator|(
name|red
operator|<<
name|redLeftShift
operator|)
operator||
operator|(
name|red
operator|>>
name|redRightShift
operator|)
expr_stmt|;
name|green
operator|=
operator|(
name|green
operator|<<
name|greenLeftShift
operator|)
operator||
operator|(
name|green
operator|>>
name|greenRightShift
operator|)
expr_stmt|;
name|blue
operator|=
operator|(
name|blue
operator|<<
name|blueLeftShift
operator|)
operator||
operator|(
name|blue
operator|>>
name|blueRightShift
operator|)
expr_stmt|;
name|buffer
index|[
name|i
index|]
operator|=
name|PREMUL
argument_list|(
operator|(
name|alpha
operator|<<
literal|24
operator|)
operator||
operator|(
name|red
operator|<<
literal|16
operator|)
operator||
operator|(
name|green
operator|<<
literal|8
operator|)
operator||
name|blue
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buffer
return|;
block|}
end_function
begin_function
DECL|function|convertRGB16FromARGB32PM
specifier|static
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|convertRGB16FromARGB32PM
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QPixelLayout
modifier|*
parameter_list|,
specifier|const
name|QRgb
modifier|*
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|buffer
index|[
name|i
index|]
operator|=
name|qConvertRgb32To16
argument_list|(
name|INV_PREMUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
end_function
begin_function
DECL|function|convertARGB32FromARGB32PM
specifier|static
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|convertARGB32FromARGB32PM
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QPixelLayout
modifier|*
parameter_list|,
specifier|const
name|QRgb
modifier|*
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|buffer
index|[
name|i
index|]
operator|=
name|INV_PREMUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
end_function
begin_function
DECL|function|convertFromARGB32PM
specifier|static
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|convertFromARGB32PM
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QPixelLayout
modifier|*
name|layout
parameter_list|,
specifier|const
name|QRgb
modifier|*
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|layout
operator|->
name|redWidth
operator|<=
literal|8
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|layout
operator|->
name|greenWidth
operator|<=
literal|8
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|layout
operator|->
name|blueWidth
operator|<=
literal|8
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|layout
operator|->
name|alphaWidth
operator|<=
literal|8
argument_list|)
expr_stmt|;
specifier|const
name|uint
name|redMask
init|=
operator|(
literal|1
operator|<<
name|layout
operator|->
name|redWidth
operator|)
operator|-
literal|1
decl_stmt|;
specifier|const
name|uint
name|greenMask
init|=
operator|(
literal|1
operator|<<
name|layout
operator|->
name|greenWidth
operator|)
operator|-
literal|1
decl_stmt|;
specifier|const
name|uint
name|blueMask
init|=
operator|(
literal|1
operator|<<
name|layout
operator|->
name|blueWidth
operator|)
operator|-
literal|1
decl_stmt|;
specifier|const
name|uint
name|alphaMask
init|=
operator|(
literal|1
operator|<<
name|layout
operator|->
name|alphaWidth
operator|)
operator|-
literal|1
decl_stmt|;
specifier|const
name|uchar
name|redRightShift
init|=
literal|24
operator|-
name|layout
operator|->
name|redWidth
decl_stmt|;
specifier|const
name|uchar
name|greenRightShift
init|=
literal|16
operator|-
name|layout
operator|->
name|greenWidth
decl_stmt|;
specifier|const
name|uchar
name|blueRightShift
init|=
literal|8
operator|-
name|layout
operator|->
name|blueWidth
decl_stmt|;
specifier|const
name|uchar
name|alphaRightShift
init|=
literal|32
operator|-
name|layout
operator|->
name|alphaWidth
decl_stmt|;
if|if
condition|(
operator|!
name|layout
operator|->
name|premultiplied
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|buffer
index|[
name|i
index|]
operator|=
name|qAlpha
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
operator|==
literal|255
condition|?
name|src
index|[
name|i
index|]
else|:
name|INV_PREMUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|src
operator|=
name|buffer
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|uint
name|red
init|=
operator|(
operator|(
name|src
index|[
name|i
index|]
operator|>>
name|redRightShift
operator|)
operator|&
name|redMask
operator|)
operator|<<
name|layout
operator|->
name|redShift
decl_stmt|;
name|uint
name|green
init|=
operator|(
operator|(
name|src
index|[
name|i
index|]
operator|>>
name|greenRightShift
operator|)
operator|&
name|greenMask
operator|)
operator|<<
name|layout
operator|->
name|greenShift
decl_stmt|;
name|uint
name|blue
init|=
operator|(
operator|(
name|src
index|[
name|i
index|]
operator|>>
name|blueRightShift
operator|)
operator|&
name|blueMask
operator|)
operator|<<
name|layout
operator|->
name|blueShift
decl_stmt|;
name|uint
name|alpha
init|=
operator|(
operator|(
name|src
index|[
name|i
index|]
operator|>>
name|alphaRightShift
operator|)
operator|&
name|alphaMask
operator|)
operator|<<
name|layout
operator|->
name|alphaShift
decl_stmt|;
name|buffer
index|[
name|i
index|]
operator|=
name|red
operator||
name|green
operator||
name|blue
operator||
name|alpha
expr_stmt|;
block|}
return|return
name|buffer
return|;
block|}
end_function
begin_comment
comment|// Note:
end_comment
begin_comment
comment|// convertToArgb32() assumes that no color channel is less than 4 bits.
end_comment
begin_comment
comment|// convertFromArgb32() assumes that no color channel is more than 8 bits.
end_comment
begin_comment
comment|// QImage::rgbSwapped() assumes that the red and blue color channels have the same number of bits.
end_comment
begin_decl_stmt
DECL|variable|qPixelLayouts
name|QPixelLayout
name|qPixelLayouts
index|[
name|QImage
operator|::
name|NImageFormats
index|]
init|=
block|{
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|false
block|,
name|QPixelLayout
operator|::
name|BPPNone
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_Invalid
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|false
block|,
name|QPixelLayout
operator|::
name|BPP1MSB
block|,
name|convertIndexedToARGB32PM
block|,
literal|0
block|}
block|,
comment|// Format_Mono
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|false
block|,
name|QPixelLayout
operator|::
name|BPP1LSB
block|,
name|convertIndexedToARGB32PM
block|,
literal|0
block|}
block|,
comment|// Format_MonoLSB
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|false
block|,
name|QPixelLayout
operator|::
name|BPP8
block|,
name|convertIndexedToARGB32PM
block|,
literal|0
block|}
block|,
comment|// Format_Indexed8
block|{
literal|8
block|,
literal|16
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|false
block|,
name|QPixelLayout
operator|::
name|BPP32
block|,
name|convertPassThrough
block|,
name|convertPassThrough
block|}
block|,
comment|// Format_RGB32
block|{
literal|8
block|,
literal|16
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|0
block|,
literal|8
block|,
literal|24
block|,
literal|false
block|,
name|QPixelLayout
operator|::
name|BPP32
block|,
name|convertARGB32ToARGB32PM
block|,
name|convertARGB32FromARGB32PM
block|}
block|,
comment|// Format_ARGB32
block|{
literal|8
block|,
literal|16
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|0
block|,
literal|8
block|,
literal|24
block|,
literal|true
block|,
name|QPixelLayout
operator|::
name|BPP32
block|,
name|convertPassThrough
block|,
name|convertPassThrough
block|}
block|,
comment|// Format_ARGB32_Premultiplied
block|{
literal|5
block|,
literal|11
block|,
literal|6
block|,
literal|5
block|,
literal|5
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|false
block|,
name|QPixelLayout
operator|::
name|BPP16
block|,
name|convertRGB16ToARGB32PM
block|,
name|convertRGB16FromARGB32PM
block|}
block|,
comment|// Format_RGB16
block|{
literal|5
block|,
literal|19
block|,
literal|6
block|,
literal|13
block|,
literal|5
block|,
literal|8
block|,
literal|8
block|,
literal|0
block|,
literal|true
block|,
name|QPixelLayout
operator|::
name|BPP24
block|,
name|convertToARGB32PM
block|,
name|convertFromARGB32PM
block|}
block|,
comment|// Format_ARGB8565_Premultiplied
block|{
literal|6
block|,
literal|12
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|false
block|,
name|QPixelLayout
operator|::
name|BPP24
block|,
name|convertToRGB32
block|,
name|convertFromARGB32PM
block|}
block|,
comment|// Format_RGB666
block|{
literal|6
block|,
literal|12
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|0
block|,
literal|6
block|,
literal|18
block|,
literal|true
block|,
name|QPixelLayout
operator|::
name|BPP24
block|,
name|convertToARGB32PM
block|,
name|convertFromARGB32PM
block|}
block|,
comment|// Format_ARGB6666_Premultiplied
block|{
literal|5
block|,
literal|10
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|false
block|,
name|QPixelLayout
operator|::
name|BPP16
block|,
name|convertToRGB32
block|,
name|convertFromARGB32PM
block|}
block|,
comment|// Format_RGB555
block|{
literal|5
block|,
literal|18
block|,
literal|5
block|,
literal|13
block|,
literal|5
block|,
literal|8
block|,
literal|8
block|,
literal|0
block|,
literal|true
block|,
name|QPixelLayout
operator|::
name|BPP24
block|,
name|convertToARGB32PM
block|,
name|convertFromARGB32PM
block|}
block|,
comment|// Format_ARGB8555_Premultiplied
block|{
literal|8
block|,
literal|0
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|16
block|,
literal|0
block|,
literal|0
block|,
literal|false
block|,
name|QPixelLayout
operator|::
name|BPP24
block|,
name|convertToRGB32
block|,
name|convertFromARGB32PM
block|}
block|,
comment|// Format_RGB888
block|{
literal|4
block|,
literal|8
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|false
block|,
name|QPixelLayout
operator|::
name|BPP16
block|,
name|convertToRGB32
block|,
name|convertFromARGB32PM
block|}
block|,
comment|// Format_RGB444
block|{
literal|4
block|,
literal|8
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|0
block|,
literal|4
block|,
literal|12
block|,
literal|true
block|,
name|QPixelLayout
operator|::
name|BPP16
block|,
name|convertToARGB32PM
block|,
name|convertFromARGB32PM
block|}
comment|// Format_ARGB4444_Premultiplied
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qFetchPixels
name|FetchPixelsFunc
name|qFetchPixels
index|[
name|QPixelLayout
operator|::
name|BPPCount
index|]
init|=
block|{
literal|0
block|,
comment|// BPPNone
name|fetchPixels
argument_list|<
name|QPixelLayout
operator|::
name|BPP1MSB
argument_list|>
block|,
comment|// BPP1MSB
name|fetchPixels
argument_list|<
name|QPixelLayout
operator|::
name|BPP1LSB
argument_list|>
block|,
comment|// BPP1LSB
name|fetchPixels
argument_list|<
name|QPixelLayout
operator|::
name|BPP8
argument_list|>
block|,
comment|// BPP8
name|fetchPixels
argument_list|<
name|QPixelLayout
operator|::
name|BPP16
argument_list|>
block|,
comment|// BPP16
name|fetchPixels
argument_list|<
name|QPixelLayout
operator|::
name|BPP24
argument_list|>
block|,
comment|// BPP24
name|fetchPixels
argument_list|<
name|QPixelLayout
operator|::
name|BPP32
argument_list|>
comment|// BPP32
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qStorePixels
name|StorePixelsFunc
name|qStorePixels
index|[
name|QPixelLayout
operator|::
name|BPPCount
index|]
init|=
block|{
literal|0
block|,
comment|// BPPNone
name|storePixels
argument_list|<
name|QPixelLayout
operator|::
name|BPP1MSB
argument_list|>
block|,
comment|// BPP1MSB
name|storePixels
argument_list|<
name|QPixelLayout
operator|::
name|BPP1LSB
argument_list|>
block|,
comment|// BPP1LSB
name|storePixels
argument_list|<
name|QPixelLayout
operator|::
name|BPP8
argument_list|>
block|,
comment|// BPP8
name|storePixels
argument_list|<
name|QPixelLayout
operator|::
name|BPP16
argument_list|>
block|,
comment|// BPP16
name|storePixels
argument_list|<
name|QPixelLayout
operator|::
name|BPP24
argument_list|>
block|,
comment|// BPP24
name|storePixels
argument_list|<
name|QPixelLayout
operator|::
name|BPP32
argument_list|>
comment|// BPP32
block|}
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|FetchPixelFunc
typedef|typedef
name|uint
function_decl|(
name|QT_FASTCALL
modifier|*
name|FetchPixelFunc
function_decl|)
parameter_list|(
specifier|const
name|uchar
modifier|*
name|src
parameter_list|,
name|int
name|index
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|qFetchPixel
name|FetchPixelFunc
name|qFetchPixel
index|[
name|QPixelLayout
operator|::
name|BPPCount
index|]
init|=
block|{
literal|0
block|,
comment|// BPPNone
name|fetchPixel
argument_list|<
name|QPixelLayout
operator|::
name|BPP1MSB
argument_list|>
block|,
comment|// BPP1MSB
name|fetchPixel
argument_list|<
name|QPixelLayout
operator|::
name|BPP1LSB
argument_list|>
block|,
comment|// BPP1LSB
name|fetchPixel
argument_list|<
name|QPixelLayout
operator|::
name|BPP8
argument_list|>
block|,
comment|// BPP8
name|fetchPixel
argument_list|<
name|QPixelLayout
operator|::
name|BPP16
argument_list|>
block|,
comment|// BPP16
name|fetchPixel
argument_list|<
name|QPixelLayout
operator|::
name|BPP24
argument_list|>
block|,
comment|// BPP24
name|fetchPixel
argument_list|<
name|QPixelLayout
operator|::
name|BPP32
argument_list|>
comment|// BPP32
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*   Destination fetch. This is simple as we don't have to do bounds checks or   transformations */
end_comment
begin_function
DECL|function|destFetchMono
specifier|static
name|uint
modifier|*
name|QT_FASTCALL
name|destFetchMono
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|uchar
modifier|*
name|data
init|=
operator|(
name|uchar
operator|*
operator|)
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|uint
modifier|*
name|start
init|=
name|buffer
decl_stmt|;
specifier|const
name|uint
modifier|*
name|end
init|=
name|buffer
operator|+
name|length
decl_stmt|;
while|while
condition|(
name|buffer
operator|<
name|end
condition|)
block|{
operator|*
name|buffer
operator|=
name|data
index|[
name|x
operator|>>
literal|3
index|]
operator|&
operator|(
literal|0x80
operator|>>
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
condition|?
name|rasterBuffer
operator|->
name|destColor1
else|:
name|rasterBuffer
operator|->
name|destColor0
expr_stmt|;
operator|++
name|buffer
expr_stmt|;
operator|++
name|x
expr_stmt|;
block|}
return|return
name|start
return|;
block|}
end_function
begin_function
DECL|function|destFetchMonoLsb
specifier|static
name|uint
modifier|*
name|QT_FASTCALL
name|destFetchMonoLsb
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|uchar
modifier|*
name|data
init|=
operator|(
name|uchar
operator|*
operator|)
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|uint
modifier|*
name|start
init|=
name|buffer
decl_stmt|;
specifier|const
name|uint
modifier|*
name|end
init|=
name|buffer
operator|+
name|length
decl_stmt|;
while|while
condition|(
name|buffer
operator|<
name|end
condition|)
block|{
operator|*
name|buffer
operator|=
name|data
index|[
name|x
operator|>>
literal|3
index|]
operator|&
operator|(
literal|0x1
operator|<<
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
condition|?
name|rasterBuffer
operator|->
name|destColor1
else|:
name|rasterBuffer
operator|->
name|destColor0
expr_stmt|;
operator|++
name|buffer
expr_stmt|;
operator|++
name|x
expr_stmt|;
block|}
return|return
name|start
return|;
block|}
end_function
begin_function
DECL|function|destFetchARGB32P
specifier|static
name|uint
modifier|*
name|QT_FASTCALL
name|destFetchARGB32P
parameter_list|(
name|uint
modifier|*
parameter_list|,
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
parameter_list|)
block|{
return|return
operator|(
name|uint
operator|*
operator|)
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
operator|+
name|x
return|;
block|}
end_function
begin_function
DECL|function|destFetchRGB16
specifier|static
name|uint
modifier|*
name|QT_FASTCALL
name|destFetchRGB16
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|length
parameter_list|)
block|{
specifier|const
name|ushort
modifier|*
name|data
init|=
operator|(
specifier|const
name|ushort
operator|*
operator|)
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
operator|+
name|x
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
name|buffer
index|[
name|i
index|]
operator|=
name|qConvertRgb16To32
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
end_function
begin_function
DECL|function|destFetch
specifier|static
name|uint
modifier|*
name|QT_FASTCALL
name|destFetch
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|length
parameter_list|)
block|{
specifier|const
name|QPixelLayout
modifier|*
name|layout
init|=
operator|&
name|qPixelLayouts
index|[
name|rasterBuffer
operator|->
name|format
index|]
decl_stmt|;
specifier|const
name|uint
modifier|*
name|ptr
init|=
name|qFetchPixels
index|[
name|layout
operator|->
name|bpp
index|]
operator|(
name|buffer
expr|,
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
expr|,
name|x
expr|,
name|length
operator|)
decl_stmt|;
return|return
cast|const_cast
argument_list|<
name|uint
operator|*
argument_list|>
argument_list|(
name|layout
operator|->
name|convertToARGB32PM
argument_list|(
name|buffer
argument_list|,
name|ptr
argument_list|,
name|length
argument_list|,
name|layout
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|destFetchProc
specifier|static
name|DestFetchProc
name|destFetchProc
index|[
name|QImage
operator|::
name|NImageFormats
index|]
init|=
block|{
literal|0
block|,
comment|// Format_Invalid
name|destFetchMono
block|,
comment|// Format_Mono,
name|destFetchMonoLsb
block|,
comment|// Format_MonoLSB
literal|0
block|,
comment|// Format_Indexed8
name|destFetchARGB32P
block|,
comment|// Format_RGB32
name|destFetch
block|,
comment|// Format_ARGB32,
name|destFetchARGB32P
block|,
comment|// Format_ARGB32_Premultiplied
name|destFetchRGB16
block|,
comment|// Format_RGB16
name|destFetch
block|,
comment|// Format_ARGB8565_Premultiplied
name|destFetch
block|,
comment|// Format_RGB666
name|destFetch
block|,
comment|// Format_ARGB6666_Premultiplied
name|destFetch
block|,
comment|// Format_RGB555
name|destFetch
block|,
comment|// Format_ARGB8555_Premultiplied
name|destFetch
block|,
comment|// Format_RGB888
name|destFetch
block|,
comment|// Format_RGB444
name|destFetch
comment|// Format_ARGB4444_Premultiplied
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*    Returns the color in the mono destination color table    that is the "nearest" to /color/. */
end_comment
begin_function
DECL|function|findNearestColor
specifier|static
specifier|inline
name|QRgb
name|findNearestColor
parameter_list|(
name|QRgb
name|color
parameter_list|,
name|QRasterBuffer
modifier|*
name|rbuf
parameter_list|)
block|{
name|QRgb
name|color_0
init|=
name|PREMUL
argument_list|(
name|rbuf
operator|->
name|destColor0
argument_list|)
decl_stmt|;
name|QRgb
name|color_1
init|=
name|PREMUL
argument_list|(
name|rbuf
operator|->
name|destColor1
argument_list|)
decl_stmt|;
name|color
operator|=
name|PREMUL
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|int
name|r
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|rx
decl_stmt|,
name|gx
decl_stmt|,
name|bx
decl_stmt|;
name|int
name|dist_0
decl_stmt|,
name|dist_1
decl_stmt|;
name|rx
operator|=
name|r
operator|-
name|qRed
argument_list|(
name|color_0
argument_list|)
expr_stmt|;
name|gx
operator|=
name|g
operator|-
name|qGreen
argument_list|(
name|color_0
argument_list|)
expr_stmt|;
name|bx
operator|=
name|b
operator|-
name|qBlue
argument_list|(
name|color_0
argument_list|)
expr_stmt|;
name|dist_0
operator|=
name|rx
operator|*
name|rx
operator|+
name|gx
operator|*
name|gx
operator|+
name|bx
operator|*
name|bx
expr_stmt|;
name|rx
operator|=
name|r
operator|-
name|qRed
argument_list|(
name|color_1
argument_list|)
expr_stmt|;
name|gx
operator|=
name|g
operator|-
name|qGreen
argument_list|(
name|color_1
argument_list|)
expr_stmt|;
name|bx
operator|=
name|b
operator|-
name|qBlue
argument_list|(
name|color_1
argument_list|)
expr_stmt|;
name|dist_1
operator|=
name|rx
operator|*
name|rx
operator|+
name|gx
operator|*
name|gx
operator|+
name|bx
operator|*
name|bx
expr_stmt|;
if|if
condition|(
name|dist_0
operator|<
name|dist_1
condition|)
return|return
name|color_0
return|;
return|return
name|color_1
return|;
block|}
end_function
begin_comment
comment|/*   Destination store. */
end_comment
begin_function
DECL|function|destStoreMono
specifier|static
name|void
name|QT_FASTCALL
name|destStoreMono
parameter_list|(
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
specifier|const
name|uint
modifier|*
name|buffer
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|uchar
modifier|*
name|data
init|=
operator|(
name|uchar
operator|*
operator|)
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|rasterBuffer
operator|->
name|monoDestinationWithClut
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|buffer
index|[
name|i
index|]
operator|==
name|rasterBuffer
operator|->
name|destColor0
condition|)
block|{
name|data
index|[
name|x
operator|>>
literal|3
index|]
operator|&=
operator|~
operator|(
literal|0x80
operator|>>
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|buffer
index|[
name|i
index|]
operator|==
name|rasterBuffer
operator|->
name|destColor1
condition|)
block|{
name|data
index|[
name|x
operator|>>
literal|3
index|]
operator||=
literal|0x80
operator|>>
operator|(
name|x
operator|&
literal|7
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|findNearestColor
argument_list|(
name|buffer
index|[
name|i
index|]
argument_list|,
name|rasterBuffer
argument_list|)
operator|==
name|rasterBuffer
operator|->
name|destColor0
condition|)
block|{
name|data
index|[
name|x
operator|>>
literal|3
index|]
operator|&=
operator|~
operator|(
literal|0x80
operator|>>
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
expr_stmt|;
block|}
else|else
block|{
name|data
index|[
name|x
operator|>>
literal|3
index|]
operator||=
literal|0x80
operator|>>
operator|(
name|x
operator|&
literal|7
operator|)
expr_stmt|;
block|}
operator|++
name|x
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|qGray
argument_list|(
name|buffer
index|[
name|i
index|]
argument_list|)
operator|<
name|int
argument_list|(
name|qt_bayer_matrix
index|[
name|y
operator|&
literal|15
index|]
index|[
name|x
operator|&
literal|15
index|]
argument_list|)
condition|)
name|data
index|[
name|x
operator|>>
literal|3
index|]
operator||=
literal|0x80
operator|>>
operator|(
name|x
operator|&
literal|7
operator|)
expr_stmt|;
else|else
name|data
index|[
name|x
operator|>>
literal|3
index|]
operator|&=
operator|~
operator|(
literal|0x80
operator|>>
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
expr_stmt|;
operator|++
name|x
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|destStoreMonoLsb
specifier|static
name|void
name|QT_FASTCALL
name|destStoreMonoLsb
parameter_list|(
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
specifier|const
name|uint
modifier|*
name|buffer
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|uchar
modifier|*
name|data
init|=
operator|(
name|uchar
operator|*
operator|)
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|rasterBuffer
operator|->
name|monoDestinationWithClut
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|buffer
index|[
name|i
index|]
operator|==
name|rasterBuffer
operator|->
name|destColor0
condition|)
block|{
name|data
index|[
name|x
operator|>>
literal|3
index|]
operator|&=
operator|~
operator|(
literal|1
operator|<<
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|buffer
index|[
name|i
index|]
operator|==
name|rasterBuffer
operator|->
name|destColor1
condition|)
block|{
name|data
index|[
name|x
operator|>>
literal|3
index|]
operator||=
literal|1
operator|<<
operator|(
name|x
operator|&
literal|7
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|findNearestColor
argument_list|(
name|buffer
index|[
name|i
index|]
argument_list|,
name|rasterBuffer
argument_list|)
operator|==
name|rasterBuffer
operator|->
name|destColor0
condition|)
block|{
name|data
index|[
name|x
operator|>>
literal|3
index|]
operator|&=
operator|~
operator|(
literal|1
operator|<<
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
expr_stmt|;
block|}
else|else
block|{
name|data
index|[
name|x
operator|>>
literal|3
index|]
operator||=
literal|1
operator|<<
operator|(
name|x
operator|&
literal|7
operator|)
expr_stmt|;
block|}
operator|++
name|x
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|qGray
argument_list|(
name|buffer
index|[
name|i
index|]
argument_list|)
operator|<
name|int
argument_list|(
name|qt_bayer_matrix
index|[
name|y
operator|&
literal|15
index|]
index|[
name|x
operator|&
literal|15
index|]
argument_list|)
condition|)
name|data
index|[
name|x
operator|>>
literal|3
index|]
operator||=
literal|1
operator|<<
operator|(
name|x
operator|&
literal|7
operator|)
expr_stmt|;
else|else
name|data
index|[
name|x
operator|>>
literal|3
index|]
operator|&=
operator|~
operator|(
literal|1
operator|<<
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
expr_stmt|;
operator|++
name|x
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|destStoreRGB16
specifier|static
name|void
name|QT_FASTCALL
name|destStoreRGB16
parameter_list|(
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
specifier|const
name|uint
modifier|*
name|buffer
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|quint16
modifier|*
name|data
init|=
operator|(
name|quint16
operator|*
operator|)
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
operator|+
name|x
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
name|data
index|[
name|i
index|]
operator|=
name|qConvertRgb32To16
argument_list|(
name|buffer
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|destStore
specifier|static
name|void
name|QT_FASTCALL
name|destStore
parameter_list|(
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
specifier|const
name|uint
modifier|*
name|buffer
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|uint
name|buf
index|[
name|buffer_size
index|]
decl_stmt|;
specifier|const
name|QPixelLayout
modifier|*
name|layout
init|=
operator|&
name|qPixelLayouts
index|[
name|rasterBuffer
operator|->
name|format
index|]
decl_stmt|;
name|StorePixelsFunc
name|store
init|=
name|qStorePixels
index|[
name|layout
operator|->
name|bpp
index|]
decl_stmt|;
name|uchar
modifier|*
name|dest
init|=
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
while|while
condition|(
name|length
condition|)
block|{
name|int
name|l
init|=
name|qMin
argument_list|(
name|length
argument_list|,
name|buffer_size
argument_list|)
decl_stmt|;
specifier|const
name|uint
modifier|*
name|ptr
init|=
name|layout
operator|->
name|convertFromARGB32PM
argument_list|(
name|buf
argument_list|,
name|buffer
argument_list|,
name|l
argument_list|,
name|layout
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|store
argument_list|(
name|dest
argument_list|,
name|ptr
argument_list|,
name|x
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|length
operator|-=
name|l
expr_stmt|;
name|buffer
operator|+=
name|l
expr_stmt|;
name|x
operator|+=
name|l
expr_stmt|;
block|}
block|}
end_function
begin_decl_stmt
DECL|variable|destStoreProc
specifier|static
name|DestStoreProc
name|destStoreProc
index|[
name|QImage
operator|::
name|NImageFormats
index|]
init|=
block|{
literal|0
block|,
comment|// Format_Invalid
name|destStoreMono
block|,
comment|// Format_Mono,
name|destStoreMonoLsb
block|,
comment|// Format_MonoLSB
literal|0
block|,
comment|// Format_Indexed8
literal|0
block|,
comment|// Format_RGB32
name|destStore
block|,
comment|// Format_ARGB32,
literal|0
block|,
comment|// Format_ARGB32_Premultiplied
name|destStoreRGB16
block|,
comment|// Format_RGB16
name|destStore
block|,
comment|// Format_ARGB8565_Premultiplied
name|destStore
block|,
comment|// Format_RGB666
name|destStore
block|,
comment|// Format_ARGB6666_Premultiplied
name|destStore
block|,
comment|// Format_RGB555
name|destStore
block|,
comment|// Format_ARGB8555_Premultiplied
name|destStore
block|,
comment|// Format_RGB888
name|destStore
block|,
comment|// Format_RGB444
name|destStore
comment|// Format_ARGB4444_Premultiplied
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*   Source fetches    This is a bit more complicated, as we need several fetch routines for every surface type    We need 5 fetch methods per surface type:   untransformed   transformed (tiled and not tiled)   transformed bilinear (tiled and not tiled)    We don't need bounds checks for untransformed, but we need them for the other ones.    The generic implementation does pixel by pixel fetches */
end_comment
begin_enum
DECL|enum|TextureBlendType
enum|enum
name|TextureBlendType
block|{
DECL|enumerator|BlendUntransformed
name|BlendUntransformed
block|,
DECL|enumerator|BlendTiled
name|BlendTiled
block|,
DECL|enumerator|BlendTransformed
name|BlendTransformed
block|,
DECL|enumerator|BlendTransformedTiled
name|BlendTransformedTiled
block|,
DECL|enumerator|BlendTransformedBilinear
name|BlendTransformedBilinear
block|,
DECL|enumerator|BlendTransformedBilinearTiled
name|BlendTransformedBilinearTiled
block|,
DECL|enumerator|NBlendTypes
name|NBlendTypes
block|}
enum|;
end_enum
begin_function
DECL|function|fetchUntransformed
specifier|static
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|fetchUntransformed
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|Operator
modifier|*
parameter_list|,
specifier|const
name|QSpanData
modifier|*
name|data
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|length
parameter_list|)
block|{
specifier|const
name|QPixelLayout
modifier|*
name|layout
init|=
operator|&
name|qPixelLayouts
index|[
name|data
operator|->
name|texture
operator|.
name|format
index|]
decl_stmt|;
specifier|const
name|uint
modifier|*
name|ptr
init|=
name|qFetchPixels
index|[
name|layout
operator|->
name|bpp
index|]
operator|(
name|buffer
expr|,
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
expr|,
name|x
expr|,
name|length
operator|)
decl_stmt|;
specifier|const
name|QRgb
modifier|*
name|clut
init|=
name|data
operator|->
name|texture
operator|.
name|colorTable
condition|?
name|data
operator|->
name|texture
operator|.
name|colorTable
operator|->
name|constData
argument_list|()
else|:
literal|0
decl_stmt|;
return|return
name|layout
operator|->
name|convertToARGB32PM
argument_list|(
name|buffer
argument_list|,
name|ptr
argument_list|,
name|length
argument_list|,
name|layout
argument_list|,
name|clut
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fetchUntransformedARGB32PM
specifier|static
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|fetchUntransformedARGB32PM
parameter_list|(
name|uint
modifier|*
parameter_list|,
specifier|const
name|Operator
modifier|*
parameter_list|,
specifier|const
name|QSpanData
modifier|*
name|data
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|,
name|int
parameter_list|)
block|{
specifier|const
name|uchar
modifier|*
name|scanLine
init|=
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
specifier|const
name|uint
operator|*
operator|)
name|scanLine
operator|)
operator|+
name|x
return|;
block|}
end_function
begin_function
DECL|function|fetchUntransformedRGB16
specifier|static
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|fetchUntransformedRGB16
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|Operator
modifier|*
parameter_list|,
specifier|const
name|QSpanData
modifier|*
name|data
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|length
parameter_list|)
block|{
specifier|const
name|quint16
modifier|*
name|scanLine
init|=
operator|(
specifier|const
name|quint16
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
operator|+
name|x
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
name|buffer
index|[
name|i
index|]
operator|=
name|qConvertRgb16To32
argument_list|(
name|scanLine
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
end_function
begin_comment
comment|// blendType is either BlendTransformed or BlendTransformedTiled
end_comment
begin_function
template|template
parameter_list|<
name|TextureBlendType
name|blendType
parameter_list|>
name|Q_STATIC_TEMPLATE_FUNCTION
DECL|function|fetchTransformedARGB32PM
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|fetchTransformedARGB32PM
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|Operator
modifier|*
parameter_list|,
specifier|const
name|QSpanData
modifier|*
name|data
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|int
name|image_width
init|=
name|data
operator|->
name|texture
operator|.
name|width
decl_stmt|;
name|int
name|image_height
init|=
name|data
operator|->
name|texture
operator|.
name|height
decl_stmt|;
specifier|const
name|qreal
name|cx
init|=
name|x
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|cy
init|=
name|y
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
specifier|const
name|uint
modifier|*
name|end
init|=
name|buffer
operator|+
name|length
decl_stmt|;
name|uint
modifier|*
name|b
init|=
name|buffer
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|fast_matrix
condition|)
block|{
comment|// The increment pr x in the scanline
name|int
name|fdx
init|=
call|(
name|int
call|)
argument_list|(
name|data
operator|->
name|m11
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
name|int
name|fdy
init|=
call|(
name|int
call|)
argument_list|(
name|data
operator|->
name|m12
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
name|int
name|fx
init|=
name|int
argument_list|(
operator|(
name|data
operator|->
name|m21
operator|*
name|cy
operator|+
name|data
operator|->
name|m11
operator|*
name|cx
operator|+
name|data
operator|->
name|dx
operator|)
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
name|int
name|fy
init|=
name|int
argument_list|(
operator|(
name|data
operator|->
name|m22
operator|*
name|cy
operator|+
name|data
operator|->
name|m12
operator|*
name|cx
operator|+
name|data
operator|->
name|dy
operator|)
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
while|while
condition|(
name|b
operator|<
name|end
condition|)
block|{
name|int
name|px
init|=
name|fx
operator|>>
literal|16
decl_stmt|;
name|int
name|py
init|=
name|fy
operator|>>
literal|16
decl_stmt|;
if|if
condition|(
name|blendType
operator|==
name|BlendTransformedTiled
condition|)
block|{
name|px
operator|%=
name|image_width
expr_stmt|;
name|py
operator|%=
name|image_height
expr_stmt|;
if|if
condition|(
name|px
operator|<
literal|0
condition|)
name|px
operator|+=
name|image_width
expr_stmt|;
if|if
condition|(
name|py
operator|<
literal|0
condition|)
name|py
operator|+=
name|image_height
expr_stmt|;
block|}
else|else
block|{
name|px
operator|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|px
argument_list|,
name|image_width
operator|-
literal|1
argument_list|)
expr_stmt|;
name|py
operator|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|py
argument_list|,
name|image_height
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
operator|*
name|b
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint
operator|*
argument_list|>
argument_list|(
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|py
argument_list|)
argument_list|)
index|[
name|px
index|]
expr_stmt|;
name|fx
operator|+=
name|fdx
expr_stmt|;
name|fy
operator|+=
name|fdy
expr_stmt|;
operator|++
name|b
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|const
name|qreal
name|fdx
init|=
name|data
operator|->
name|m11
decl_stmt|;
specifier|const
name|qreal
name|fdy
init|=
name|data
operator|->
name|m12
decl_stmt|;
specifier|const
name|qreal
name|fdw
init|=
name|data
operator|->
name|m13
decl_stmt|;
name|qreal
name|fx
init|=
name|data
operator|->
name|m21
operator|*
name|cy
operator|+
name|data
operator|->
name|m11
operator|*
name|cx
operator|+
name|data
operator|->
name|dx
decl_stmt|;
name|qreal
name|fy
init|=
name|data
operator|->
name|m22
operator|*
name|cy
operator|+
name|data
operator|->
name|m12
operator|*
name|cx
operator|+
name|data
operator|->
name|dy
decl_stmt|;
name|qreal
name|fw
init|=
name|data
operator|->
name|m23
operator|*
name|cy
operator|+
name|data
operator|->
name|m13
operator|*
name|cx
operator|+
name|data
operator|->
name|m33
decl_stmt|;
while|while
condition|(
name|b
operator|<
name|end
condition|)
block|{
specifier|const
name|qreal
name|iw
init|=
name|fw
operator|==
literal|0
condition|?
literal|1
else|:
literal|1
operator|/
name|fw
decl_stmt|;
specifier|const
name|qreal
name|tx
init|=
name|fx
operator|*
name|iw
decl_stmt|;
specifier|const
name|qreal
name|ty
init|=
name|fy
operator|*
name|iw
decl_stmt|;
name|int
name|px
init|=
name|int
argument_list|(
name|tx
argument_list|)
operator|-
operator|(
name|tx
operator|<
literal|0
operator|)
decl_stmt|;
name|int
name|py
init|=
name|int
argument_list|(
name|ty
argument_list|)
operator|-
operator|(
name|ty
operator|<
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|blendType
operator|==
name|BlendTransformedTiled
condition|)
block|{
name|px
operator|%=
name|image_width
expr_stmt|;
name|py
operator|%=
name|image_height
expr_stmt|;
if|if
condition|(
name|px
operator|<
literal|0
condition|)
name|px
operator|+=
name|image_width
expr_stmt|;
if|if
condition|(
name|py
operator|<
literal|0
condition|)
name|py
operator|+=
name|image_height
expr_stmt|;
block|}
else|else
block|{
name|px
operator|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|px
argument_list|,
name|image_width
operator|-
literal|1
argument_list|)
expr_stmt|;
name|py
operator|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|py
argument_list|,
name|image_height
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
operator|*
name|b
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint
operator|*
argument_list|>
argument_list|(
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|py
argument_list|)
argument_list|)
index|[
name|px
index|]
expr_stmt|;
name|fx
operator|+=
name|fdx
expr_stmt|;
name|fy
operator|+=
name|fdy
expr_stmt|;
name|fw
operator|+=
name|fdw
expr_stmt|;
comment|//force increment to avoid /0
if|if
condition|(
operator|!
name|fw
condition|)
block|{
name|fw
operator|+=
name|fdw
expr_stmt|;
block|}
operator|++
name|b
expr_stmt|;
block|}
block|}
return|return
name|buffer
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|TextureBlendType
name|blendType
parameter_list|>
comment|/* either BlendTransformed or BlendTransformedTiled */
name|Q_STATIC_TEMPLATE_FUNCTION
DECL|function|fetchTransformed
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|fetchTransformed
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|Operator
modifier|*
parameter_list|,
specifier|const
name|QSpanData
modifier|*
name|data
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|int
name|image_width
init|=
name|data
operator|->
name|texture
operator|.
name|width
decl_stmt|;
name|int
name|image_height
init|=
name|data
operator|->
name|texture
operator|.
name|height
decl_stmt|;
specifier|const
name|qreal
name|cx
init|=
name|x
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|cy
init|=
name|y
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
specifier|const
name|QPixelLayout
modifier|*
name|layout
init|=
operator|&
name|qPixelLayouts
index|[
name|data
operator|->
name|texture
operator|.
name|format
index|]
decl_stmt|;
name|FetchPixelFunc
name|fetch
init|=
name|qFetchPixel
index|[
name|layout
operator|->
name|bpp
index|]
decl_stmt|;
specifier|const
name|uint
modifier|*
name|end
init|=
name|buffer
operator|+
name|length
decl_stmt|;
name|uint
modifier|*
name|b
init|=
name|buffer
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|fast_matrix
condition|)
block|{
comment|// The increment pr x in the scanline
name|int
name|fdx
init|=
call|(
name|int
call|)
argument_list|(
name|data
operator|->
name|m11
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
name|int
name|fdy
init|=
call|(
name|int
call|)
argument_list|(
name|data
operator|->
name|m12
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
name|int
name|fx
init|=
name|int
argument_list|(
operator|(
name|data
operator|->
name|m21
operator|*
name|cy
operator|+
name|data
operator|->
name|m11
operator|*
name|cx
operator|+
name|data
operator|->
name|dx
operator|)
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
name|int
name|fy
init|=
name|int
argument_list|(
operator|(
name|data
operator|->
name|m22
operator|*
name|cy
operator|+
name|data
operator|->
name|m12
operator|*
name|cx
operator|+
name|data
operator|->
name|dy
operator|)
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
while|while
condition|(
name|b
operator|<
name|end
condition|)
block|{
name|int
name|px
init|=
name|fx
operator|>>
literal|16
decl_stmt|;
name|int
name|py
init|=
name|fy
operator|>>
literal|16
decl_stmt|;
if|if
condition|(
name|blendType
operator|==
name|BlendTransformedTiled
condition|)
block|{
name|px
operator|%=
name|image_width
expr_stmt|;
name|py
operator|%=
name|image_height
expr_stmt|;
if|if
condition|(
name|px
operator|<
literal|0
condition|)
name|px
operator|+=
name|image_width
expr_stmt|;
if|if
condition|(
name|py
operator|<
literal|0
condition|)
name|py
operator|+=
name|image_height
expr_stmt|;
block|}
else|else
block|{
name|px
operator|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|px
argument_list|,
name|image_width
operator|-
literal|1
argument_list|)
expr_stmt|;
name|py
operator|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|py
argument_list|,
name|image_height
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
operator|*
name|b
operator|=
name|fetch
argument_list|(
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|py
argument_list|)
argument_list|,
name|px
argument_list|)
expr_stmt|;
name|fx
operator|+=
name|fdx
expr_stmt|;
name|fy
operator|+=
name|fdy
expr_stmt|;
operator|++
name|b
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|const
name|qreal
name|fdx
init|=
name|data
operator|->
name|m11
decl_stmt|;
specifier|const
name|qreal
name|fdy
init|=
name|data
operator|->
name|m12
decl_stmt|;
specifier|const
name|qreal
name|fdw
init|=
name|data
operator|->
name|m13
decl_stmt|;
name|qreal
name|fx
init|=
name|data
operator|->
name|m21
operator|*
name|cy
operator|+
name|data
operator|->
name|m11
operator|*
name|cx
operator|+
name|data
operator|->
name|dx
decl_stmt|;
name|qreal
name|fy
init|=
name|data
operator|->
name|m22
operator|*
name|cy
operator|+
name|data
operator|->
name|m12
operator|*
name|cx
operator|+
name|data
operator|->
name|dy
decl_stmt|;
name|qreal
name|fw
init|=
name|data
operator|->
name|m23
operator|*
name|cy
operator|+
name|data
operator|->
name|m13
operator|*
name|cx
operator|+
name|data
operator|->
name|m33
decl_stmt|;
while|while
condition|(
name|b
operator|<
name|end
condition|)
block|{
specifier|const
name|qreal
name|iw
init|=
name|fw
operator|==
literal|0
condition|?
literal|1
else|:
literal|1
operator|/
name|fw
decl_stmt|;
specifier|const
name|qreal
name|tx
init|=
name|fx
operator|*
name|iw
decl_stmt|;
specifier|const
name|qreal
name|ty
init|=
name|fy
operator|*
name|iw
decl_stmt|;
name|int
name|px
init|=
name|int
argument_list|(
name|tx
argument_list|)
operator|-
operator|(
name|tx
operator|<
literal|0
operator|)
decl_stmt|;
name|int
name|py
init|=
name|int
argument_list|(
name|ty
argument_list|)
operator|-
operator|(
name|ty
operator|<
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|blendType
operator|==
name|BlendTransformedTiled
condition|)
block|{
name|px
operator|%=
name|image_width
expr_stmt|;
name|py
operator|%=
name|image_height
expr_stmt|;
if|if
condition|(
name|px
operator|<
literal|0
condition|)
name|px
operator|+=
name|image_width
expr_stmt|;
if|if
condition|(
name|py
operator|<
literal|0
condition|)
name|py
operator|+=
name|image_height
expr_stmt|;
block|}
else|else
block|{
name|px
operator|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|px
argument_list|,
name|image_width
operator|-
literal|1
argument_list|)
expr_stmt|;
name|py
operator|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|py
argument_list|,
name|image_height
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
operator|*
name|b
operator|=
name|fetch
argument_list|(
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|py
argument_list|)
argument_list|,
name|px
argument_list|)
expr_stmt|;
name|fx
operator|+=
name|fdx
expr_stmt|;
name|fy
operator|+=
name|fdy
expr_stmt|;
name|fw
operator|+=
name|fdw
expr_stmt|;
comment|//force increment to avoid /0
if|if
condition|(
operator|!
name|fw
condition|)
block|{
name|fw
operator|+=
name|fdw
expr_stmt|;
block|}
operator|++
name|b
expr_stmt|;
block|}
block|}
specifier|const
name|QRgb
modifier|*
name|clut
init|=
name|data
operator|->
name|texture
operator|.
name|colorTable
condition|?
name|data
operator|->
name|texture
operator|.
name|colorTable
operator|->
name|constData
argument_list|()
else|:
literal|0
decl_stmt|;
return|return
name|layout
operator|->
name|convertToARGB32PM
argument_list|(
name|buffer
argument_list|,
name|buffer
argument_list|,
name|length
argument_list|,
name|layout
argument_list|,
name|clut
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/** \internal   interpolate 4 argb pixels with the distx and disty factor.   distx and disty bust be between 0 and 16  */
end_comment
begin_function
DECL|function|interpolate_4_pixels_16
specifier|static
specifier|inline
name|uint
name|interpolate_4_pixels_16
parameter_list|(
name|uint
name|tl
parameter_list|,
name|uint
name|tr
parameter_list|,
name|uint
name|bl
parameter_list|,
name|uint
name|br
parameter_list|,
name|int
name|distx
parameter_list|,
name|int
name|disty
parameter_list|)
block|{
name|uint
name|distxy
init|=
name|distx
operator|*
name|disty
decl_stmt|;
comment|//idistx * disty = (16-distx) * disty = 16*disty - distxy
comment|//idistx * idisty = (16-distx) * (16-disty) = 16*16 - 16*distx -16*dity + distxy
name|uint
name|tlrb
init|=
operator|(
name|tl
operator|&
literal|0x00ff00ff
operator|)
operator|*
operator|(
literal|16
operator|*
literal|16
operator|-
literal|16
operator|*
name|distx
operator|-
literal|16
operator|*
name|disty
operator|+
name|distxy
operator|)
decl_stmt|;
name|uint
name|tlag
init|=
operator|(
operator|(
name|tl
operator|&
literal|0xff00ff00
operator|)
operator|>>
literal|8
operator|)
operator|*
operator|(
literal|16
operator|*
literal|16
operator|-
literal|16
operator|*
name|distx
operator|-
literal|16
operator|*
name|disty
operator|+
name|distxy
operator|)
decl_stmt|;
name|uint
name|trrb
init|=
operator|(
operator|(
name|tr
operator|&
literal|0x00ff00ff
operator|)
operator|*
operator|(
name|distx
operator|*
literal|16
operator|-
name|distxy
operator|)
operator|)
decl_stmt|;
name|uint
name|trag
init|=
operator|(
operator|(
operator|(
name|tr
operator|&
literal|0xff00ff00
operator|)
operator|>>
literal|8
operator|)
operator|*
operator|(
name|distx
operator|*
literal|16
operator|-
name|distxy
operator|)
operator|)
decl_stmt|;
name|uint
name|blrb
init|=
operator|(
operator|(
name|bl
operator|&
literal|0x00ff00ff
operator|)
operator|*
operator|(
name|disty
operator|*
literal|16
operator|-
name|distxy
operator|)
operator|)
decl_stmt|;
name|uint
name|blag
init|=
operator|(
operator|(
operator|(
name|bl
operator|&
literal|0xff00ff00
operator|)
operator|>>
literal|8
operator|)
operator|*
operator|(
name|disty
operator|*
literal|16
operator|-
name|distxy
operator|)
operator|)
decl_stmt|;
name|uint
name|brrb
init|=
operator|(
operator|(
name|br
operator|&
literal|0x00ff00ff
operator|)
operator|*
operator|(
name|distxy
operator|)
operator|)
decl_stmt|;
name|uint
name|brag
init|=
operator|(
operator|(
operator|(
name|br
operator|&
literal|0xff00ff00
operator|)
operator|>>
literal|8
operator|)
operator|*
operator|(
name|distxy
operator|)
operator|)
decl_stmt|;
return|return
operator|(
operator|(
operator|(
name|tlrb
operator|+
name|trrb
operator|+
name|blrb
operator|+
name|brrb
operator|)
operator|>>
literal|8
operator|)
operator|&
literal|0x00ff00ff
operator|)
operator||
operator|(
operator|(
name|tlag
operator|+
name|trag
operator|+
name|blag
operator|+
name|brag
operator|)
operator|&
literal|0xff00ff00
operator|)
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_ALWAYS_HAVE_SSE2
argument_list|)
end_if
begin_define
DECL|macro|interpolate_4_pixels_16_sse2
define|#
directive|define
name|interpolate_4_pixels_16_sse2
parameter_list|(
name|tl
parameter_list|,
name|tr
parameter_list|,
name|bl
parameter_list|,
name|br
parameter_list|,
name|distx
parameter_list|,
name|disty
parameter_list|,
name|colorMask
parameter_list|,
name|v_256
parameter_list|,
name|b
parameter_list|)
define|\
value|{ \     const __m128i dxdy = _mm_mullo_epi16 (distx, disty); \     const __m128i distx_ = _mm_slli_epi16(distx, 4); \     const __m128i disty_ = _mm_slli_epi16(disty, 4); \     const __m128i idxidy =  _mm_add_epi16(dxdy, _mm_sub_epi16(v_256, _mm_add_epi16(distx_, disty_))); \     const __m128i dxidy =  _mm_sub_epi16(distx_, dxdy); \     const __m128i idxdy =  _mm_sub_epi16(disty_, dxdy); \  \     __m128i tlAG = _mm_srli_epi16(tl, 8); \     __m128i tlRB = _mm_and_si128(tl, colorMask); \     __m128i trAG = _mm_srli_epi16(tr, 8); \     __m128i trRB = _mm_and_si128(tr, colorMask); \     __m128i blAG = _mm_srli_epi16(bl, 8); \     __m128i blRB = _mm_and_si128(bl, colorMask); \     __m128i brAG = _mm_srli_epi16(br, 8); \     __m128i brRB = _mm_and_si128(br, colorMask); \  \     tlAG = _mm_mullo_epi16(tlAG, idxidy); \     tlRB = _mm_mullo_epi16(tlRB, idxidy); \     trAG = _mm_mullo_epi16(trAG, dxidy); \     trRB = _mm_mullo_epi16(trRB, dxidy); \     blAG = _mm_mullo_epi16(blAG, idxdy); \     blRB = _mm_mullo_epi16(blRB, idxdy); \     brAG = _mm_mullo_epi16(brAG, dxdy); \     brRB = _mm_mullo_epi16(brRB, dxdy); \  \
comment|/* Add the values, and shift to only keep 8 significant bits per colors */
value|\     __m128i rAG =_mm_add_epi16(_mm_add_epi16(tlAG, trAG), _mm_add_epi16(blAG, brAG)); \     __m128i rRB =_mm_add_epi16(_mm_add_epi16(tlRB, trRB), _mm_add_epi16(blRB, brRB)); \     rAG = _mm_andnot_si128(colorMask, rAG); \     rRB = _mm_srli_epi16(rRB, 8); \     _mm_storeu_si128((__m128i*)(b), _mm_or_si128(rAG, rRB)); \ }
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_ALWAYS_HAVE_NEON
argument_list|)
end_if
begin_define
DECL|macro|interpolate_4_pixels_16_neon
define|#
directive|define
name|interpolate_4_pixels_16_neon
parameter_list|(
name|tl
parameter_list|,
name|tr
parameter_list|,
name|bl
parameter_list|,
name|br
parameter_list|,
name|distx
parameter_list|,
name|disty
parameter_list|,
name|disty_
parameter_list|,
name|colorMask
parameter_list|,
name|invColorMask
parameter_list|,
name|v_256
parameter_list|,
name|b
parameter_list|)
define|\
value|{ \     const int16x8_t dxdy = vmulq_s16(distx, disty); \     const int16x8_t distx_ = vshlq_n_s16(distx, 4); \     const int16x8_t idxidy =  vaddq_s16(dxdy, vsubq_s16(v_256, vaddq_s16(distx_, disty_))); \     const int16x8_t dxidy =  vsubq_s16(distx_, dxdy); \     const int16x8_t idxdy =  vsubq_s16(disty_, dxdy); \  \     int16x8_t tlAG = vreinterpretq_s16_u16(vshrq_n_u16(vreinterpretq_u16_s16(tl), 8)); \     int16x8_t tlRB = vandq_s16(tl, colorMask); \     int16x8_t trAG = vreinterpretq_s16_u16(vshrq_n_u16(vreinterpretq_u16_s16(tr), 8)); \     int16x8_t trRB = vandq_s16(tr, colorMask); \     int16x8_t blAG = vreinterpretq_s16_u16(vshrq_n_u16(vreinterpretq_u16_s16(bl), 8)); \     int16x8_t blRB = vandq_s16(bl, colorMask); \     int16x8_t brAG = vreinterpretq_s16_u16(vshrq_n_u16(vreinterpretq_u16_s16(br), 8)); \     int16x8_t brRB = vandq_s16(br, colorMask); \  \     int16x8_t rAG = vmulq_s16(tlAG, idxidy); \     int16x8_t rRB = vmulq_s16(tlRB, idxidy); \     rAG = vmlaq_s16(rAG, trAG, dxidy); \     rRB = vmlaq_s16(rRB, trRB, dxidy); \     rAG = vmlaq_s16(rAG, blAG, idxdy); \     rRB = vmlaq_s16(rRB, blRB, idxdy); \     rAG = vmlaq_s16(rAG, brAG, dxdy); \     rRB = vmlaq_s16(rRB, brRB, dxdy); \  \     rAG = vandq_s16(invColorMask, rAG); \     rRB = vreinterpretq_s16_u16(vshrq_n_u16(vreinterpretq_u16_s16(rRB), 8)); \     vst1q_s16((int16_t*)(b), vorrq_s16(rAG, rRB)); \ }
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
template|template
parameter_list|<
name|TextureBlendType
name|blendType
parameter_list|>
name|void
name|fetchTransformedBilinear_pixelBounds
parameter_list|(
name|int
name|max
parameter_list|,
name|int
name|l1
parameter_list|,
name|int
name|l2
parameter_list|,
name|int
modifier|&
name|v1
parameter_list|,
name|int
modifier|&
name|v2
parameter_list|)
function_decl|;
end_function_decl
begin_function
template|template
parameter_list|<>
name|Q_STATIC_TEMPLATE_SPECIALIZATION
DECL|function|fetchTransformedBilinear_pixelBounds
specifier|inline
name|void
name|fetchTransformedBilinear_pixelBounds
argument_list|<
name|BlendTransformedBilinearTiled
argument_list|>
parameter_list|(
name|int
name|max
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
modifier|&
name|v1
parameter_list|,
name|int
modifier|&
name|v2
parameter_list|)
block|{
name|v1
operator|%=
name|max
expr_stmt|;
if|if
condition|(
name|v1
operator|<
literal|0
condition|)
name|v1
operator|+=
name|max
expr_stmt|;
name|v2
operator|=
name|v1
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|v2
operator|==
name|max
condition|)
name|v2
operator|=
literal|0
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|v1
operator|>=
literal|0
operator|&&
name|v1
operator|<
name|max
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|v2
operator|>=
literal|0
operator|&&
name|v2
operator|<
name|max
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
name|Q_STATIC_TEMPLATE_SPECIALIZATION
DECL|function|fetchTransformedBilinear_pixelBounds
specifier|inline
name|void
name|fetchTransformedBilinear_pixelBounds
argument_list|<
name|BlendTransformedBilinear
argument_list|>
parameter_list|(
name|int
parameter_list|,
name|int
name|l1
parameter_list|,
name|int
name|l2
parameter_list|,
name|int
modifier|&
name|v1
parameter_list|,
name|int
modifier|&
name|v2
parameter_list|)
block|{
if|if
condition|(
name|v1
operator|<
name|l1
condition|)
name|v2
operator|=
name|v1
operator|=
name|l1
expr_stmt|;
elseif|else
if|if
condition|(
name|v1
operator|>=
name|l2
condition|)
name|v2
operator|=
name|v1
operator|=
name|l2
expr_stmt|;
else|else
name|v2
operator|=
name|v1
operator|+
literal|1
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|v1
operator|>=
name|l1
operator|&&
name|v1
operator|<=
name|l2
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|v2
operator|>=
name|l1
operator|&&
name|v2
operator|<=
name|l2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|TextureBlendType
name|blendType
parameter_list|>
comment|/* blendType = BlendTransformedBilinear or BlendTransformedBilinearTiled */
name|Q_STATIC_TEMPLATE_FUNCTION
DECL|function|fetchTransformedBilinearARGB32PM
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|fetchTransformedBilinearARGB32PM
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|Operator
modifier|*
parameter_list|,
specifier|const
name|QSpanData
modifier|*
name|data
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|int
name|image_width
init|=
name|data
operator|->
name|texture
operator|.
name|width
decl_stmt|;
name|int
name|image_height
init|=
name|data
operator|->
name|texture
operator|.
name|height
decl_stmt|;
name|int
name|image_x1
init|=
name|data
operator|->
name|texture
operator|.
name|x1
decl_stmt|;
name|int
name|image_y1
init|=
name|data
operator|->
name|texture
operator|.
name|y1
decl_stmt|;
name|int
name|image_x2
init|=
name|data
operator|->
name|texture
operator|.
name|x2
operator|-
literal|1
decl_stmt|;
name|int
name|image_y2
init|=
name|data
operator|->
name|texture
operator|.
name|y2
operator|-
literal|1
decl_stmt|;
specifier|const
name|qreal
name|cx
init|=
name|x
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|cy
init|=
name|y
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
name|uint
modifier|*
name|end
init|=
name|buffer
operator|+
name|length
decl_stmt|;
name|uint
modifier|*
name|b
init|=
name|buffer
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|fast_matrix
condition|)
block|{
comment|// The increment pr x in the scanline
name|int
name|fdx
init|=
call|(
name|int
call|)
argument_list|(
name|data
operator|->
name|m11
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
name|int
name|fdy
init|=
call|(
name|int
call|)
argument_list|(
name|data
operator|->
name|m12
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
name|int
name|fx
init|=
name|int
argument_list|(
operator|(
name|data
operator|->
name|m21
operator|*
name|cy
operator|+
name|data
operator|->
name|m11
operator|*
name|cx
operator|+
name|data
operator|->
name|dx
operator|)
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
name|int
name|fy
init|=
name|int
argument_list|(
operator|(
name|data
operator|->
name|m22
operator|*
name|cy
operator|+
name|data
operator|->
name|m12
operator|*
name|cx
operator|+
name|data
operator|->
name|dy
operator|)
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
name|fx
operator|-=
name|half_point
expr_stmt|;
name|fy
operator|-=
name|half_point
expr_stmt|;
if|if
condition|(
name|fdy
operator|==
literal|0
condition|)
block|{
comment|//simple scale, no rotation
name|int
name|y1
init|=
operator|(
name|fy
operator|>>
literal|16
operator|)
decl_stmt|;
name|int
name|y2
decl_stmt|;
name|fetchTransformedBilinear_pixelBounds
argument_list|<
name|blendType
argument_list|>
argument_list|(
name|image_height
argument_list|,
name|image_y1
argument_list|,
name|image_y2
argument_list|,
name|y1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
specifier|const
name|uint
modifier|*
name|s1
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y1
argument_list|)
decl_stmt|;
specifier|const
name|uint
modifier|*
name|s2
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y2
argument_list|)
decl_stmt|;
if|if
condition|(
name|fdx
operator|<=
name|fixed_scale
operator|&&
name|fdx
operator|>
literal|0
condition|)
block|{
comment|// scale up on X
name|int
name|disty
init|=
operator|(
name|fy
operator|&
literal|0x0000ffff
operator|)
operator|>>
literal|8
decl_stmt|;
name|int
name|idisty
init|=
literal|256
operator|-
name|disty
decl_stmt|;
name|int
name|x
init|=
name|fx
operator|>>
literal|16
decl_stmt|;
comment|// The idea is first to do the interpolation between the row s1 and the row s2
comment|// into an intermediate buffer, then we interpolate between two pixel of this buffer.
comment|// intermediate_buffer[0] is a buffer of red-blue component of the pixel, in the form 0x00RR00BB
comment|// intermediate_buffer[1] is the alpha-green component of the pixel, in the form 0x00AA00GG
name|quint32
name|intermediate_buffer
index|[
literal|2
index|]
index|[
name|buffer_size
operator|+
literal|2
index|]
decl_stmt|;
comment|// count is the size used in the intermediate_buffer.
name|int
name|count
init|=
name|qCeil
argument_list|(
name|length
operator|*
name|data
operator|->
name|m11
argument_list|)
operator|+
literal|2
decl_stmt|;
comment|//+1 for the last pixel to interpolate with, and +1 for rounding errors.
name|Q_ASSERT
argument_list|(
name|count
operator|<=
name|buffer_size
operator|+
literal|2
argument_list|)
expr_stmt|;
comment|//length is supposed to be<= buffer_size and data->m11< 1 in this case
name|int
name|f
init|=
literal|0
decl_stmt|;
name|int
name|lim
init|=
name|count
decl_stmt|;
if|if
condition|(
name|blendType
operator|==
name|BlendTransformedBilinearTiled
condition|)
block|{
name|x
operator|%=
name|image_width
expr_stmt|;
if|if
condition|(
name|x
operator|<
literal|0
condition|)
name|x
operator|+=
name|image_width
expr_stmt|;
block|}
else|else
block|{
name|lim
operator|=
name|qMin
argument_list|(
name|count
argument_list|,
name|image_x2
operator|-
name|x
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|<
name|image_x1
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|x
operator|<=
name|image_x2
argument_list|)
expr_stmt|;
name|uint
name|t
init|=
name|s1
index|[
name|image_x1
index|]
decl_stmt|;
name|uint
name|b
init|=
name|s2
index|[
name|image_x1
index|]
decl_stmt|;
name|quint32
name|rb
init|=
operator|(
operator|(
operator|(
name|t
operator|&
literal|0xff00ff
operator|)
operator|*
name|idisty
operator|+
operator|(
name|b
operator|&
literal|0xff00ff
operator|)
operator|*
name|disty
operator|)
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
decl_stmt|;
name|quint32
name|ag
init|=
operator|(
operator|(
operator|(
operator|(
name|t
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|*
name|idisty
operator|+
operator|(
operator|(
name|b
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|*
name|disty
operator|)
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
decl_stmt|;
do|do
block|{
name|intermediate_buffer
index|[
literal|0
index|]
index|[
name|f
index|]
operator|=
name|rb
expr_stmt|;
name|intermediate_buffer
index|[
literal|1
index|]
index|[
name|f
index|]
operator|=
name|ag
expr_stmt|;
name|f
operator|++
expr_stmt|;
name|x
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|x
operator|<
name|image_x1
operator|&&
name|f
operator|<
name|lim
condition|)
do|;
block|}
block|}
if|if
condition|(
name|blendType
operator|!=
name|BlendTransformedBilinearTiled
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_ALWAYS_HAVE_SSE2
argument_list|)
specifier|const
name|__m128i
name|disty_
init|=
name|_mm_set1_epi16
argument_list|(
name|disty
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|idisty_
init|=
name|_mm_set1_epi16
argument_list|(
name|idisty
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|colorMask
init|=
name|_mm_set1_epi32
argument_list|(
literal|0x00ff00ff
argument_list|)
decl_stmt|;
name|lim
operator|-=
literal|3
expr_stmt|;
for|for
control|(
init|;
name|f
operator|<
name|lim
condition|;
name|x
operator|+=
literal|4
operator|,
name|f
operator|+=
literal|4
control|)
block|{
comment|// Load 4 pixels from s1, and split the alpha-green and red-blue component
name|__m128i
name|top
init|=
name|_mm_loadu_si128
argument_list|(
operator|(
name|__m128i
operator|*
operator|)
operator|(
operator|(
specifier|const
name|uint
operator|*
operator|)
operator|(
name|s1
operator|)
operator|+
name|x
operator|)
argument_list|)
decl_stmt|;
name|__m128i
name|topAG
init|=
name|_mm_srli_epi16
argument_list|(
name|top
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|__m128i
name|topRB
init|=
name|_mm_and_si128
argument_list|(
name|top
argument_list|,
name|colorMask
argument_list|)
decl_stmt|;
comment|// Multiplies each colour component by idisty
name|topAG
operator|=
name|_mm_mullo_epi16
argument_list|(
name|topAG
argument_list|,
name|idisty_
argument_list|)
expr_stmt|;
name|topRB
operator|=
name|_mm_mullo_epi16
argument_list|(
name|topRB
argument_list|,
name|idisty_
argument_list|)
expr_stmt|;
comment|// Same for the s2 vector
name|__m128i
name|bottom
init|=
name|_mm_loadu_si128
argument_list|(
operator|(
name|__m128i
operator|*
operator|)
operator|(
operator|(
specifier|const
name|uint
operator|*
operator|)
operator|(
name|s2
operator|)
operator|+
name|x
operator|)
argument_list|)
decl_stmt|;
name|__m128i
name|bottomAG
init|=
name|_mm_srli_epi16
argument_list|(
name|bottom
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|__m128i
name|bottomRB
init|=
name|_mm_and_si128
argument_list|(
name|bottom
argument_list|,
name|colorMask
argument_list|)
decl_stmt|;
name|bottomAG
operator|=
name|_mm_mullo_epi16
argument_list|(
name|bottomAG
argument_list|,
name|disty_
argument_list|)
expr_stmt|;
name|bottomRB
operator|=
name|_mm_mullo_epi16
argument_list|(
name|bottomRB
argument_list|,
name|disty_
argument_list|)
expr_stmt|;
comment|// Add the values, and shift to only keep 8 significant bits per colors
name|__m128i
name|rAG
init|=
name|_mm_add_epi16
argument_list|(
name|topAG
argument_list|,
name|bottomAG
argument_list|)
decl_stmt|;
name|rAG
operator|=
name|_mm_srli_epi16
argument_list|(
name|rAG
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|_mm_storeu_si128
argument_list|(
operator|(
name|__m128i
operator|*
operator|)
operator|(
operator|&
name|intermediate_buffer
index|[
literal|1
index|]
index|[
name|f
index|]
operator|)
argument_list|,
name|rAG
argument_list|)
expr_stmt|;
name|__m128i
name|rRB
init|=
name|_mm_add_epi16
argument_list|(
name|topRB
argument_list|,
name|bottomRB
argument_list|)
decl_stmt|;
name|rRB
operator|=
name|_mm_srli_epi16
argument_list|(
name|rRB
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|_mm_storeu_si128
argument_list|(
operator|(
name|__m128i
operator|*
operator|)
operator|(
operator|&
name|intermediate_buffer
index|[
literal|0
index|]
index|[
name|f
index|]
operator|)
argument_list|,
name|rRB
argument_list|)
expr_stmt|;
block|}
elif|#
directive|elif
name|defined
argument_list|(
name|QT_ALWAYS_HAVE_NEON
argument_list|)
specifier|const
name|int16x8_t
name|disty_
init|=
name|vdupq_n_s16
argument_list|(
name|disty
argument_list|)
decl_stmt|;
specifier|const
name|int16x8_t
name|idisty_
init|=
name|vdupq_n_s16
argument_list|(
name|idisty
argument_list|)
decl_stmt|;
specifier|const
name|int16x8_t
name|colorMask
init|=
name|vdupq_n_s16
argument_list|(
literal|0x00ff
argument_list|)
decl_stmt|;
name|lim
operator|-=
literal|3
expr_stmt|;
for|for
control|(
init|;
name|f
operator|<
name|lim
condition|;
name|x
operator|+=
literal|4
operator|,
name|f
operator|+=
literal|4
control|)
block|{
comment|// Load 4 pixels from s1, and split the alpha-green and red-blue component
name|int16x8_t
name|top
init|=
name|vld1q_s16
argument_list|(
operator|(
name|int16_t
operator|*
operator|)
operator|(
operator|(
specifier|const
name|uint
operator|*
operator|)
operator|(
name|s1
operator|)
operator|+
name|x
operator|)
argument_list|)
decl_stmt|;
name|int16x8_t
name|topAG
init|=
name|vreinterpretq_s16_u16
argument_list|(
name|vshrq_n_u16
argument_list|(
name|vreinterpretq_u16_s16
argument_list|(
name|top
argument_list|)
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|int16x8_t
name|topRB
init|=
name|vandq_s16
argument_list|(
name|top
argument_list|,
name|colorMask
argument_list|)
decl_stmt|;
comment|// Multiplies each colour component by idisty
name|topAG
operator|=
name|vmulq_s16
argument_list|(
name|topAG
argument_list|,
name|idisty_
argument_list|)
expr_stmt|;
name|topRB
operator|=
name|vmulq_s16
argument_list|(
name|topRB
argument_list|,
name|idisty_
argument_list|)
expr_stmt|;
comment|// Same for the s2 vector
name|int16x8_t
name|bottom
init|=
name|vld1q_s16
argument_list|(
operator|(
name|int16_t
operator|*
operator|)
operator|(
operator|(
specifier|const
name|uint
operator|*
operator|)
operator|(
name|s2
operator|)
operator|+
name|x
operator|)
argument_list|)
decl_stmt|;
name|int16x8_t
name|bottomAG
init|=
name|vreinterpretq_s16_u16
argument_list|(
name|vshrq_n_u16
argument_list|(
name|vreinterpretq_u16_s16
argument_list|(
name|bottom
argument_list|)
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|int16x8_t
name|bottomRB
init|=
name|vandq_s16
argument_list|(
name|bottom
argument_list|,
name|colorMask
argument_list|)
decl_stmt|;
name|bottomAG
operator|=
name|vmulq_s16
argument_list|(
name|bottomAG
argument_list|,
name|disty_
argument_list|)
expr_stmt|;
name|bottomRB
operator|=
name|vmulq_s16
argument_list|(
name|bottomRB
argument_list|,
name|disty_
argument_list|)
expr_stmt|;
comment|// Add the values, and shift to only keep 8 significant bits per colors
name|int16x8_t
name|rAG
init|=
name|vaddq_s16
argument_list|(
name|topAG
argument_list|,
name|bottomAG
argument_list|)
decl_stmt|;
name|rAG
operator|=
name|vreinterpretq_s16_u16
argument_list|(
name|vshrq_n_u16
argument_list|(
name|vreinterpretq_u16_s16
argument_list|(
name|rAG
argument_list|)
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|vst1q_s16
argument_list|(
operator|(
name|int16_t
operator|*
operator|)
operator|(
operator|&
name|intermediate_buffer
index|[
literal|1
index|]
index|[
name|f
index|]
operator|)
argument_list|,
name|rAG
argument_list|)
expr_stmt|;
name|int16x8_t
name|rRB
init|=
name|vaddq_s16
argument_list|(
name|topRB
argument_list|,
name|bottomRB
argument_list|)
decl_stmt|;
name|rRB
operator|=
name|vreinterpretq_s16_u16
argument_list|(
name|vshrq_n_u16
argument_list|(
name|vreinterpretq_u16_s16
argument_list|(
name|rRB
argument_list|)
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|vst1q_s16
argument_list|(
operator|(
name|int16_t
operator|*
operator|)
operator|(
operator|&
name|intermediate_buffer
index|[
literal|0
index|]
index|[
name|f
index|]
operator|)
argument_list|,
name|rRB
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
for|for
control|(
init|;
name|f
operator|<
name|count
condition|;
name|f
operator|++
control|)
block|{
comment|// Same as above but without sse2
if|if
condition|(
name|blendType
operator|==
name|BlendTransformedBilinearTiled
condition|)
block|{
if|if
condition|(
name|x
operator|>=
name|image_width
condition|)
name|x
operator|-=
name|image_width
expr_stmt|;
block|}
else|else
block|{
name|x
operator|=
name|qMin
argument_list|(
name|x
argument_list|,
name|image_x2
argument_list|)
expr_stmt|;
block|}
name|uint
name|t
init|=
name|s1
index|[
name|x
index|]
decl_stmt|;
name|uint
name|b
init|=
name|s2
index|[
name|x
index|]
decl_stmt|;
name|intermediate_buffer
index|[
literal|0
index|]
index|[
name|f
index|]
operator|=
operator|(
operator|(
operator|(
name|t
operator|&
literal|0xff00ff
operator|)
operator|*
name|idisty
operator|+
operator|(
name|b
operator|&
literal|0xff00ff
operator|)
operator|*
name|disty
operator|)
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
expr_stmt|;
name|intermediate_buffer
index|[
literal|1
index|]
index|[
name|f
index|]
operator|=
operator|(
operator|(
operator|(
operator|(
name|t
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|*
name|idisty
operator|+
operator|(
operator|(
name|b
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|*
name|disty
operator|)
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
expr_stmt|;
name|x
operator|++
expr_stmt|;
block|}
comment|// Now interpolate the values from the intermediate_buffer to get the final result.
name|fx
operator|&=
name|fixed_scale
operator|-
literal|1
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|(
name|fx
operator|>>
literal|16
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
while|while
condition|(
name|b
operator|<
name|end
condition|)
block|{
specifier|register
name|int
name|x1
init|=
operator|(
name|fx
operator|>>
literal|16
operator|)
decl_stmt|;
specifier|register
name|int
name|x2
init|=
name|x1
operator|+
literal|1
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|x1
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|x2
operator|<
name|count
argument_list|)
expr_stmt|;
specifier|register
name|int
name|distx
init|=
operator|(
name|fx
operator|&
literal|0x0000ffff
operator|)
operator|>>
literal|8
decl_stmt|;
specifier|register
name|int
name|idistx
init|=
literal|256
operator|-
name|distx
decl_stmt|;
name|int
name|rb
init|=
operator|(
operator|(
name|intermediate_buffer
index|[
literal|0
index|]
index|[
name|x1
index|]
operator|*
name|idistx
operator|+
name|intermediate_buffer
index|[
literal|0
index|]
index|[
name|x2
index|]
operator|*
name|distx
operator|)
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
decl_stmt|;
name|int
name|ag
init|=
operator|(
name|intermediate_buffer
index|[
literal|1
index|]
index|[
name|x1
index|]
operator|*
name|idistx
operator|+
name|intermediate_buffer
index|[
literal|1
index|]
index|[
name|x2
index|]
operator|*
name|distx
operator|)
operator|&
literal|0xff00ff00
decl_stmt|;
operator|*
name|b
operator|=
name|rb
operator||
name|ag
expr_stmt|;
name|b
operator|++
expr_stmt|;
name|fx
operator|+=
name|fdx
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|fdx
argument_list|<
literal|0
operator|&&
name|fdx
argument_list|>
operator|-
operator|(
name|fixed_scale
operator|/
literal|8
operator|)
operator|)
operator|||
name|fabs
argument_list|(
name|data
operator|->
name|m22
argument_list|)
operator|<
operator|(
literal|1.
operator|/
literal|8.
operator|)
condition|)
block|{
comment|// scale up more than 8x
name|int
name|y1
init|=
operator|(
name|fy
operator|>>
literal|16
operator|)
decl_stmt|;
name|int
name|y2
decl_stmt|;
name|fetchTransformedBilinear_pixelBounds
argument_list|<
name|blendType
argument_list|>
argument_list|(
name|image_height
argument_list|,
name|image_y1
argument_list|,
name|image_y2
argument_list|,
name|y1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
specifier|const
name|uint
modifier|*
name|s1
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y1
argument_list|)
decl_stmt|;
specifier|const
name|uint
modifier|*
name|s2
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y2
argument_list|)
decl_stmt|;
name|int
name|disty
init|=
operator|(
name|fy
operator|&
literal|0x0000ffff
operator|)
operator|>>
literal|8
decl_stmt|;
name|int
name|idisty
init|=
literal|256
operator|-
name|disty
decl_stmt|;
while|while
condition|(
name|b
operator|<
name|end
condition|)
block|{
name|int
name|x1
init|=
operator|(
name|fx
operator|>>
literal|16
operator|)
decl_stmt|;
name|int
name|x2
decl_stmt|;
name|fetchTransformedBilinear_pixelBounds
argument_list|<
name|blendType
argument_list|>
argument_list|(
name|image_width
argument_list|,
name|image_x1
argument_list|,
name|image_x2
argument_list|,
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|uint
name|tl
init|=
name|s1
index|[
name|x1
index|]
decl_stmt|;
name|uint
name|tr
init|=
name|s1
index|[
name|x2
index|]
decl_stmt|;
name|uint
name|bl
init|=
name|s2
index|[
name|x1
index|]
decl_stmt|;
name|uint
name|br
init|=
name|s2
index|[
name|x2
index|]
decl_stmt|;
name|int
name|distx
init|=
operator|(
name|fx
operator|&
literal|0x0000ffff
operator|)
operator|>>
literal|8
decl_stmt|;
name|int
name|idistx
init|=
literal|256
operator|-
name|distx
decl_stmt|;
name|uint
name|xtop
init|=
name|INTERPOLATE_PIXEL_256
argument_list|(
name|tl
argument_list|,
name|idistx
argument_list|,
name|tr
argument_list|,
name|distx
argument_list|)
decl_stmt|;
name|uint
name|xbot
init|=
name|INTERPOLATE_PIXEL_256
argument_list|(
name|bl
argument_list|,
name|idistx
argument_list|,
name|br
argument_list|,
name|distx
argument_list|)
decl_stmt|;
operator|*
name|b
operator|=
name|INTERPOLATE_PIXEL_256
argument_list|(
name|xtop
argument_list|,
name|idisty
argument_list|,
name|xbot
argument_list|,
name|disty
argument_list|)
expr_stmt|;
name|fx
operator|+=
name|fdx
expr_stmt|;
operator|++
name|b
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//scale down
name|int
name|y1
init|=
operator|(
name|fy
operator|>>
literal|16
operator|)
decl_stmt|;
name|int
name|y2
decl_stmt|;
name|fetchTransformedBilinear_pixelBounds
argument_list|<
name|blendType
argument_list|>
argument_list|(
name|image_height
argument_list|,
name|image_y1
argument_list|,
name|image_y2
argument_list|,
name|y1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
specifier|const
name|uint
modifier|*
name|s1
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y1
argument_list|)
decl_stmt|;
specifier|const
name|uint
modifier|*
name|s2
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y2
argument_list|)
decl_stmt|;
name|int
name|disty
init|=
operator|(
name|fy
operator|&
literal|0x0000ffff
operator|)
operator|>>
literal|12
decl_stmt|;
if|if
condition|(
name|blendType
operator|!=
name|BlendTransformedBilinearTiled
condition|)
block|{
DECL|macro|BILINEAR_DOWNSCALE_BOUNDS_PROLOG
define|#
directive|define
name|BILINEAR_DOWNSCALE_BOUNDS_PROLOG
define|\
value|while (b< end) { \                         int x1 = (fx>> 16); \                         int x2; \                         fetchTransformedBilinear_pixelBounds<blendType>(image_width, image_x1, image_x2, x1, x2); \                         if (x1 != x2) \                             break; \                         uint tl = s1[x1]; \                         uint tr = s1[x2]; \                         uint bl = s2[x1]; \                         uint br = s2[x2]; \                         int distx = (fx& 0x0000ffff)>> 12; \                         *b = interpolate_4_pixels_16(tl, tr, bl, br, distx, disty); \                         fx += fdx; \                         ++b; \                     } \                     uint *boundedEnd; \                     if (fdx> 0) \                         boundedEnd = qMin(end, buffer + uint((image_x2 - (fx>> 16)) / data->m11)); \                     else \                         boundedEnd = qMin(end, buffer + uint((image_x1 - (fx>> 16)) / data->m11)); \                     boundedEnd -= 3;
if|#
directive|if
name|defined
argument_list|(
name|QT_ALWAYS_HAVE_SSE2
argument_list|)
name|BILINEAR_DOWNSCALE_BOUNDS_PROLOG
specifier|const
name|__m128i
name|colorMask
init|=
name|_mm_set1_epi32
argument_list|(
literal|0x00ff00ff
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|v_256
init|=
name|_mm_set1_epi16
argument_list|(
literal|256
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|v_disty
init|=
name|_mm_set1_epi16
argument_list|(
name|disty
argument_list|)
decl_stmt|;
name|__m128i
name|v_fdx
init|=
name|_mm_set1_epi32
argument_list|(
name|fdx
operator|*
literal|4
argument_list|)
decl_stmt|;
name|ptrdiff_t
name|secondLine
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint
operator|*
argument_list|>
argument_list|(
name|s2
argument_list|)
operator|-
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint
operator|*
argument_list|>
argument_list|(
name|s1
argument_list|)
decl_stmt|;
union|union
name|Vect_buffer
block|{
name|__m128i
name|vect
decl_stmt|;
name|quint32
name|i
index|[
literal|4
index|]
decl_stmt|;
block|}
union|;
name|Vect_buffer
name|v_fx
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|v_fx
operator|.
name|i
index|[
name|i
index|]
operator|=
name|fx
expr_stmt|;
name|fx
operator|+=
name|fdx
expr_stmt|;
block|}
while|while
condition|(
name|b
operator|<
name|boundedEnd
condition|)
block|{
name|Vect_buffer
name|tl
decl_stmt|,
name|tr
decl_stmt|,
name|bl
decl_stmt|,
name|br
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|int
name|x1
init|=
name|v_fx
operator|.
name|i
index|[
name|i
index|]
operator|>>
literal|16
decl_stmt|;
specifier|const
name|uint
modifier|*
name|addr_tl
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint
operator|*
argument_list|>
argument_list|(
name|s1
argument_list|)
operator|+
name|x1
decl_stmt|;
specifier|const
name|uint
modifier|*
name|addr_tr
init|=
name|addr_tl
operator|+
literal|1
decl_stmt|;
name|tl
operator|.
name|i
index|[
name|i
index|]
operator|=
operator|*
name|addr_tl
expr_stmt|;
name|tr
operator|.
name|i
index|[
name|i
index|]
operator|=
operator|*
name|addr_tr
expr_stmt|;
name|bl
operator|.
name|i
index|[
name|i
index|]
operator|=
operator|*
operator|(
name|addr_tl
operator|+
name|secondLine
operator|)
expr_stmt|;
name|br
operator|.
name|i
index|[
name|i
index|]
operator|=
operator|*
operator|(
name|addr_tr
operator|+
name|secondLine
operator|)
expr_stmt|;
block|}
name|__m128i
name|v_distx
init|=
name|_mm_srli_epi16
argument_list|(
name|v_fx
operator|.
name|vect
argument_list|,
literal|12
argument_list|)
decl_stmt|;
name|v_distx
operator|=
name|_mm_shufflehi_epi16
argument_list|(
name|v_distx
argument_list|,
name|_MM_SHUFFLE
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|v_distx
operator|=
name|_mm_shufflelo_epi16
argument_list|(
name|v_distx
argument_list|,
name|_MM_SHUFFLE
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|interpolate_4_pixels_16_sse2
argument_list|(
name|tl
operator|.
name|vect
argument_list|,
name|tr
operator|.
name|vect
argument_list|,
name|bl
operator|.
name|vect
argument_list|,
name|br
operator|.
name|vect
argument_list|,
name|v_distx
argument_list|,
name|v_disty
argument_list|,
name|colorMask
argument_list|,
name|v_256
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|b
operator|+=
literal|4
expr_stmt|;
name|v_fx
operator|.
name|vect
operator|=
name|_mm_add_epi32
argument_list|(
name|v_fx
operator|.
name|vect
argument_list|,
name|v_fdx
argument_list|)
expr_stmt|;
block|}
name|fx
operator|=
name|v_fx
operator|.
name|i
index|[
literal|0
index|]
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|QT_ALWAYS_HAVE_NEON
argument_list|)
name|BILINEAR_DOWNSCALE_BOUNDS_PROLOG
specifier|const
name|int16x8_t
name|colorMask
init|=
name|vdupq_n_s16
argument_list|(
literal|0x00ff
argument_list|)
decl_stmt|;
specifier|const
name|int16x8_t
name|invColorMask
init|=
name|vmvnq_s16
argument_list|(
name|colorMask
argument_list|)
decl_stmt|;
specifier|const
name|int16x8_t
name|v_256
init|=
name|vdupq_n_s16
argument_list|(
literal|256
argument_list|)
decl_stmt|;
specifier|const
name|int16x8_t
name|v_disty
init|=
name|vdupq_n_s16
argument_list|(
name|disty
argument_list|)
decl_stmt|;
specifier|const
name|int16x8_t
name|v_disty_
init|=
name|vshlq_n_s16
argument_list|(
name|v_disty
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|int32x4_t
name|v_fdx
init|=
name|vdupq_n_s32
argument_list|(
name|fdx
operator|*
literal|4
argument_list|)
decl_stmt|;
name|ptrdiff_t
name|secondLine
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint
operator|*
argument_list|>
argument_list|(
name|s2
argument_list|)
operator|-
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint
operator|*
argument_list|>
argument_list|(
name|s1
argument_list|)
decl_stmt|;
union|union
name|Vect_buffer
block|{
name|int32x4_t
name|vect
decl_stmt|;
name|quint32
name|i
index|[
literal|4
index|]
decl_stmt|;
block|}
union|;
name|Vect_buffer
name|v_fx
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|v_fx
operator|.
name|i
index|[
name|i
index|]
operator|=
name|fx
expr_stmt|;
name|fx
operator|+=
name|fdx
expr_stmt|;
block|}
specifier|const
name|int32x4_t
name|v_ffff_mask
init|=
name|vdupq_n_s32
argument_list|(
literal|0x0000ffff
argument_list|)
decl_stmt|;
while|while
condition|(
name|b
operator|<
name|boundedEnd
condition|)
block|{
name|Vect_buffer
name|tl
decl_stmt|,
name|tr
decl_stmt|,
name|bl
decl_stmt|,
name|br
decl_stmt|;
name|Vect_buffer
name|v_fx_shifted
decl_stmt|;
name|v_fx_shifted
operator|.
name|vect
operator|=
name|vshrq_n_s32
argument_list|(
name|v_fx
operator|.
name|vect
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|int32x4_t
name|v_distx
init|=
name|vshrq_n_s32
argument_list|(
name|vandq_s32
argument_list|(
name|v_fx
operator|.
name|vect
argument_list|,
name|v_ffff_mask
argument_list|)
argument_list|,
literal|12
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|int
name|x1
init|=
name|v_fx_shifted
operator|.
name|i
index|[
name|i
index|]
decl_stmt|;
specifier|const
name|uint
modifier|*
name|addr_tl
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint
operator|*
argument_list|>
argument_list|(
name|s1
argument_list|)
operator|+
name|x1
decl_stmt|;
specifier|const
name|uint
modifier|*
name|addr_tr
init|=
name|addr_tl
operator|+
literal|1
decl_stmt|;
name|tl
operator|.
name|i
index|[
name|i
index|]
operator|=
operator|*
name|addr_tl
expr_stmt|;
name|tr
operator|.
name|i
index|[
name|i
index|]
operator|=
operator|*
name|addr_tr
expr_stmt|;
name|bl
operator|.
name|i
index|[
name|i
index|]
operator|=
operator|*
operator|(
name|addr_tl
operator|+
name|secondLine
operator|)
expr_stmt|;
name|br
operator|.
name|i
index|[
name|i
index|]
operator|=
operator|*
operator|(
name|addr_tr
operator|+
name|secondLine
operator|)
expr_stmt|;
block|}
name|v_distx
operator|=
name|vorrq_s32
argument_list|(
name|v_distx
argument_list|,
name|vshlq_n_s32
argument_list|(
name|v_distx
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|interpolate_4_pixels_16_neon
argument_list|(
name|vreinterpretq_s16_s32
argument_list|(
name|tl
operator|.
name|vect
argument_list|)
argument_list|,
name|vreinterpretq_s16_s32
argument_list|(
name|tr
operator|.
name|vect
argument_list|)
argument_list|,
name|vreinterpretq_s16_s32
argument_list|(
name|bl
operator|.
name|vect
argument_list|)
argument_list|,
name|vreinterpretq_s16_s32
argument_list|(
name|br
operator|.
name|vect
argument_list|)
argument_list|,
name|vreinterpretq_s16_s32
argument_list|(
name|v_distx
argument_list|)
argument_list|,
name|v_disty
argument_list|,
name|v_disty_
argument_list|,
name|colorMask
argument_list|,
name|invColorMask
argument_list|,
name|v_256
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|b
operator|+=
literal|4
expr_stmt|;
name|v_fx
operator|.
name|vect
operator|=
name|vaddq_s32
argument_list|(
name|v_fx
operator|.
name|vect
argument_list|,
name|v_fdx
argument_list|)
expr_stmt|;
block|}
name|fx
operator|=
name|v_fx
operator|.
name|i
index|[
literal|0
index|]
expr_stmt|;
endif|#
directive|endif
block|}
while|while
condition|(
name|b
operator|<
name|end
condition|)
block|{
name|int
name|x1
init|=
operator|(
name|fx
operator|>>
literal|16
operator|)
decl_stmt|;
name|int
name|x2
decl_stmt|;
name|fetchTransformedBilinear_pixelBounds
argument_list|<
name|blendType
argument_list|>
argument_list|(
name|image_width
argument_list|,
name|image_x1
argument_list|,
name|image_x2
argument_list|,
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|uint
name|tl
init|=
name|s1
index|[
name|x1
index|]
decl_stmt|;
name|uint
name|tr
init|=
name|s1
index|[
name|x2
index|]
decl_stmt|;
name|uint
name|bl
init|=
name|s2
index|[
name|x1
index|]
decl_stmt|;
name|uint
name|br
init|=
name|s2
index|[
name|x2
index|]
decl_stmt|;
name|int
name|distx
init|=
operator|(
name|fx
operator|&
literal|0x0000ffff
operator|)
operator|>>
literal|12
decl_stmt|;
operator|*
name|b
operator|=
name|interpolate_4_pixels_16
argument_list|(
name|tl
argument_list|,
name|tr
argument_list|,
name|bl
argument_list|,
name|br
argument_list|,
name|distx
argument_list|,
name|disty
argument_list|)
expr_stmt|;
name|fx
operator|+=
name|fdx
expr_stmt|;
operator|++
name|b
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//rotation
if|if
condition|(
name|fabs
argument_list|(
name|data
operator|->
name|m11
argument_list|)
operator|>
literal|8
operator|||
name|fabs
argument_list|(
name|data
operator|->
name|m22
argument_list|)
operator|>
literal|8
condition|)
block|{
comment|//if we are zooming more than 8 times, we use 8bit precision for the position.
while|while
condition|(
name|b
operator|<
name|end
condition|)
block|{
name|int
name|x1
init|=
operator|(
name|fx
operator|>>
literal|16
operator|)
decl_stmt|;
name|int
name|x2
decl_stmt|;
name|int
name|y1
init|=
operator|(
name|fy
operator|>>
literal|16
operator|)
decl_stmt|;
name|int
name|y2
decl_stmt|;
name|fetchTransformedBilinear_pixelBounds
argument_list|<
name|blendType
argument_list|>
argument_list|(
name|image_width
argument_list|,
name|image_x1
argument_list|,
name|image_x2
argument_list|,
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|fetchTransformedBilinear_pixelBounds
argument_list|<
name|blendType
argument_list|>
argument_list|(
name|image_height
argument_list|,
name|image_y1
argument_list|,
name|image_y2
argument_list|,
name|y1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
specifier|const
name|uint
modifier|*
name|s1
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y1
argument_list|)
decl_stmt|;
specifier|const
name|uint
modifier|*
name|s2
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y2
argument_list|)
decl_stmt|;
name|uint
name|tl
init|=
name|s1
index|[
name|x1
index|]
decl_stmt|;
name|uint
name|tr
init|=
name|s1
index|[
name|x2
index|]
decl_stmt|;
name|uint
name|bl
init|=
name|s2
index|[
name|x1
index|]
decl_stmt|;
name|uint
name|br
init|=
name|s2
index|[
name|x2
index|]
decl_stmt|;
name|int
name|distx
init|=
operator|(
name|fx
operator|&
literal|0x0000ffff
operator|)
operator|>>
literal|8
decl_stmt|;
name|int
name|disty
init|=
operator|(
name|fy
operator|&
literal|0x0000ffff
operator|)
operator|>>
literal|8
decl_stmt|;
name|int
name|idistx
init|=
literal|256
operator|-
name|distx
decl_stmt|;
name|int
name|idisty
init|=
literal|256
operator|-
name|disty
decl_stmt|;
name|uint
name|xtop
init|=
name|INTERPOLATE_PIXEL_256
argument_list|(
name|tl
argument_list|,
name|idistx
argument_list|,
name|tr
argument_list|,
name|distx
argument_list|)
decl_stmt|;
name|uint
name|xbot
init|=
name|INTERPOLATE_PIXEL_256
argument_list|(
name|bl
argument_list|,
name|idistx
argument_list|,
name|br
argument_list|,
name|distx
argument_list|)
decl_stmt|;
operator|*
name|b
operator|=
name|INTERPOLATE_PIXEL_256
argument_list|(
name|xtop
argument_list|,
name|idisty
argument_list|,
name|xbot
argument_list|,
name|disty
argument_list|)
expr_stmt|;
name|fx
operator|+=
name|fdx
expr_stmt|;
name|fy
operator|+=
name|fdy
expr_stmt|;
operator|++
name|b
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//we are zooming less than 8x, use 4bit precision
while|while
condition|(
name|b
operator|<
name|end
condition|)
block|{
name|int
name|x1
init|=
operator|(
name|fx
operator|>>
literal|16
operator|)
decl_stmt|;
name|int
name|x2
decl_stmt|;
name|int
name|y1
init|=
operator|(
name|fy
operator|>>
literal|16
operator|)
decl_stmt|;
name|int
name|y2
decl_stmt|;
name|fetchTransformedBilinear_pixelBounds
argument_list|<
name|blendType
argument_list|>
argument_list|(
name|image_width
argument_list|,
name|image_x1
argument_list|,
name|image_x2
argument_list|,
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|fetchTransformedBilinear_pixelBounds
argument_list|<
name|blendType
argument_list|>
argument_list|(
name|image_height
argument_list|,
name|image_y1
argument_list|,
name|image_y2
argument_list|,
name|y1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
specifier|const
name|uint
modifier|*
name|s1
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y1
argument_list|)
decl_stmt|;
specifier|const
name|uint
modifier|*
name|s2
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y2
argument_list|)
decl_stmt|;
name|uint
name|tl
init|=
name|s1
index|[
name|x1
index|]
decl_stmt|;
name|uint
name|tr
init|=
name|s1
index|[
name|x2
index|]
decl_stmt|;
name|uint
name|bl
init|=
name|s2
index|[
name|x1
index|]
decl_stmt|;
name|uint
name|br
init|=
name|s2
index|[
name|x2
index|]
decl_stmt|;
name|int
name|distx
init|=
operator|(
name|fx
operator|&
literal|0x0000ffff
operator|)
operator|>>
literal|12
decl_stmt|;
name|int
name|disty
init|=
operator|(
name|fy
operator|&
literal|0x0000ffff
operator|)
operator|>>
literal|12
decl_stmt|;
operator|*
name|b
operator|=
name|interpolate_4_pixels_16
argument_list|(
name|tl
argument_list|,
name|tr
argument_list|,
name|bl
argument_list|,
name|br
argument_list|,
name|distx
argument_list|,
name|disty
argument_list|)
expr_stmt|;
name|fx
operator|+=
name|fdx
expr_stmt|;
name|fy
operator|+=
name|fdy
expr_stmt|;
operator|++
name|b
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
specifier|const
name|qreal
name|fdx
init|=
name|data
operator|->
name|m11
decl_stmt|;
specifier|const
name|qreal
name|fdy
init|=
name|data
operator|->
name|m12
decl_stmt|;
specifier|const
name|qreal
name|fdw
init|=
name|data
operator|->
name|m13
decl_stmt|;
name|qreal
name|fx
init|=
name|data
operator|->
name|m21
operator|*
name|cy
operator|+
name|data
operator|->
name|m11
operator|*
name|cx
operator|+
name|data
operator|->
name|dx
decl_stmt|;
name|qreal
name|fy
init|=
name|data
operator|->
name|m22
operator|*
name|cy
operator|+
name|data
operator|->
name|m12
operator|*
name|cx
operator|+
name|data
operator|->
name|dy
decl_stmt|;
name|qreal
name|fw
init|=
name|data
operator|->
name|m23
operator|*
name|cy
operator|+
name|data
operator|->
name|m13
operator|*
name|cx
operator|+
name|data
operator|->
name|m33
decl_stmt|;
while|while
condition|(
name|b
operator|<
name|end
condition|)
block|{
specifier|const
name|qreal
name|iw
init|=
name|fw
operator|==
literal|0
condition|?
literal|1
else|:
literal|1
operator|/
name|fw
decl_stmt|;
specifier|const
name|qreal
name|px
init|=
name|fx
operator|*
name|iw
operator|-
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|py
init|=
name|fy
operator|*
name|iw
operator|-
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
name|int
name|x1
init|=
name|int
argument_list|(
name|px
argument_list|)
operator|-
operator|(
name|px
operator|<
literal|0
operator|)
decl_stmt|;
name|int
name|x2
decl_stmt|;
name|int
name|y1
init|=
name|int
argument_list|(
name|py
argument_list|)
operator|-
operator|(
name|py
operator|<
literal|0
operator|)
decl_stmt|;
name|int
name|y2
decl_stmt|;
name|int
name|distx
init|=
name|int
argument_list|(
operator|(
name|px
operator|-
name|x1
operator|)
operator|*
literal|256
argument_list|)
decl_stmt|;
name|int
name|disty
init|=
name|int
argument_list|(
operator|(
name|py
operator|-
name|y1
operator|)
operator|*
literal|256
argument_list|)
decl_stmt|;
name|int
name|idistx
init|=
literal|256
operator|-
name|distx
decl_stmt|;
name|int
name|idisty
init|=
literal|256
operator|-
name|disty
decl_stmt|;
name|fetchTransformedBilinear_pixelBounds
argument_list|<
name|blendType
argument_list|>
argument_list|(
name|image_width
argument_list|,
name|image_x1
argument_list|,
name|image_x2
argument_list|,
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|fetchTransformedBilinear_pixelBounds
argument_list|<
name|blendType
argument_list|>
argument_list|(
name|image_height
argument_list|,
name|image_y1
argument_list|,
name|image_y2
argument_list|,
name|y1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
specifier|const
name|uint
modifier|*
name|s1
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y1
argument_list|)
decl_stmt|;
specifier|const
name|uint
modifier|*
name|s2
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y2
argument_list|)
decl_stmt|;
name|uint
name|tl
init|=
name|s1
index|[
name|x1
index|]
decl_stmt|;
name|uint
name|tr
init|=
name|s1
index|[
name|x2
index|]
decl_stmt|;
name|uint
name|bl
init|=
name|s2
index|[
name|x1
index|]
decl_stmt|;
name|uint
name|br
init|=
name|s2
index|[
name|x2
index|]
decl_stmt|;
name|uint
name|xtop
init|=
name|INTERPOLATE_PIXEL_256
argument_list|(
name|tl
argument_list|,
name|idistx
argument_list|,
name|tr
argument_list|,
name|distx
argument_list|)
decl_stmt|;
name|uint
name|xbot
init|=
name|INTERPOLATE_PIXEL_256
argument_list|(
name|bl
argument_list|,
name|idistx
argument_list|,
name|br
argument_list|,
name|distx
argument_list|)
decl_stmt|;
operator|*
name|b
operator|=
name|INTERPOLATE_PIXEL_256
argument_list|(
name|xtop
argument_list|,
name|idisty
argument_list|,
name|xbot
argument_list|,
name|disty
argument_list|)
expr_stmt|;
name|fx
operator|+=
name|fdx
expr_stmt|;
name|fy
operator|+=
name|fdy
expr_stmt|;
name|fw
operator|+=
name|fdw
expr_stmt|;
comment|//force increment to avoid /0
if|if
condition|(
operator|!
name|fw
condition|)
block|{
name|fw
operator|+=
name|fdw
expr_stmt|;
block|}
operator|++
name|b
expr_stmt|;
block|}
block|}
return|return
name|buffer
return|;
block|}
end_function
begin_comment
comment|// blendType = BlendTransformedBilinear or BlendTransformedBilinearTiled
end_comment
begin_function
template|template
parameter_list|<
name|TextureBlendType
name|blendType
parameter_list|>
name|Q_STATIC_TEMPLATE_FUNCTION
DECL|function|fetchTransformedBilinear
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|fetchTransformedBilinear
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|Operator
modifier|*
parameter_list|,
specifier|const
name|QSpanData
modifier|*
name|data
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|length
parameter_list|)
block|{
specifier|const
name|QPixelLayout
modifier|*
name|layout
init|=
operator|&
name|qPixelLayouts
index|[
name|data
operator|->
name|texture
operator|.
name|format
index|]
decl_stmt|;
specifier|const
name|QRgb
modifier|*
name|clut
init|=
name|data
operator|->
name|texture
operator|.
name|colorTable
condition|?
name|data
operator|->
name|texture
operator|.
name|colorTable
operator|->
name|constData
argument_list|()
else|:
literal|0
decl_stmt|;
name|int
name|image_width
init|=
name|data
operator|->
name|texture
operator|.
name|width
decl_stmt|;
name|int
name|image_height
init|=
name|data
operator|->
name|texture
operator|.
name|height
decl_stmt|;
name|int
name|image_x1
init|=
name|data
operator|->
name|texture
operator|.
name|x1
decl_stmt|;
name|int
name|image_y1
init|=
name|data
operator|->
name|texture
operator|.
name|y1
decl_stmt|;
name|int
name|image_x2
init|=
name|data
operator|->
name|texture
operator|.
name|x2
operator|-
literal|1
decl_stmt|;
name|int
name|image_y2
init|=
name|data
operator|->
name|texture
operator|.
name|y2
operator|-
literal|1
decl_stmt|;
specifier|const
name|qreal
name|cx
init|=
name|x
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|cy
init|=
name|y
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|fast_matrix
condition|)
block|{
comment|// The increment pr x in the scanline
name|int
name|fdx
init|=
call|(
name|int
call|)
argument_list|(
name|data
operator|->
name|m11
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
name|int
name|fdy
init|=
call|(
name|int
call|)
argument_list|(
name|data
operator|->
name|m12
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
name|int
name|fx
init|=
name|int
argument_list|(
operator|(
name|data
operator|->
name|m21
operator|*
name|cy
operator|+
name|data
operator|->
name|m11
operator|*
name|cx
operator|+
name|data
operator|->
name|dx
operator|)
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
name|int
name|fy
init|=
name|int
argument_list|(
operator|(
name|data
operator|->
name|m22
operator|*
name|cy
operator|+
name|data
operator|->
name|m12
operator|*
name|cx
operator|+
name|data
operator|->
name|dy
operator|)
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
name|fx
operator|-=
name|half_point
expr_stmt|;
name|fy
operator|-=
name|half_point
expr_stmt|;
if|if
condition|(
name|fdy
operator|==
literal|0
condition|)
block|{
comment|//simple scale, no rotation
name|int
name|y1
init|=
operator|(
name|fy
operator|>>
literal|16
operator|)
decl_stmt|;
name|int
name|y2
decl_stmt|;
name|fetchTransformedBilinear_pixelBounds
argument_list|<
name|blendType
argument_list|>
argument_list|(
name|image_height
argument_list|,
name|image_y1
argument_list|,
name|image_y2
argument_list|,
name|y1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|s1
init|=
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y1
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|s2
init|=
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y2
argument_list|)
decl_stmt|;
if|if
condition|(
name|fdx
operator|<=
name|fixed_scale
operator|&&
name|fdx
operator|>
literal|0
condition|)
block|{
comment|// scale up on X
name|int
name|disty
init|=
operator|(
name|fy
operator|&
literal|0x0000ffff
operator|)
operator|>>
literal|8
decl_stmt|;
name|int
name|idisty
init|=
literal|256
operator|-
name|disty
decl_stmt|;
name|int
name|x
init|=
name|fx
operator|>>
literal|16
decl_stmt|;
comment|// The idea is first to do the interpolation between the row s1 and the row s2
comment|// into an intermediate buffer, then we interpolate between two pixel of this buffer.
name|FetchPixelsFunc
name|fetch
init|=
name|qFetchPixels
index|[
name|layout
operator|->
name|bpp
index|]
decl_stmt|;
name|uint
name|buf1
index|[
name|buffer_size
operator|+
literal|2
index|]
decl_stmt|;
name|uint
name|buf2
index|[
name|buffer_size
operator|+
literal|2
index|]
decl_stmt|;
specifier|const
name|uint
modifier|*
name|ptr1
decl_stmt|;
specifier|const
name|uint
modifier|*
name|ptr2
decl_stmt|;
name|int
name|count
init|=
name|qCeil
argument_list|(
name|length
operator|*
name|data
operator|->
name|m11
argument_list|)
operator|+
literal|2
decl_stmt|;
comment|//+1 for the last pixel to interpolate with, and +1 for rounding errors.
name|Q_ASSERT
argument_list|(
name|count
operator|<=
name|buffer_size
operator|+
literal|2
argument_list|)
expr_stmt|;
comment|//length is supposed to be<= buffer_size and data->m11< 1 in this case
if|if
condition|(
name|blendType
operator|==
name|BlendTransformedBilinearTiled
condition|)
block|{
name|x
operator|%=
name|image_width
expr_stmt|;
if|if
condition|(
name|x
operator|<
literal|0
condition|)
name|x
operator|+=
name|image_width
expr_stmt|;
name|int
name|len1
init|=
name|qMin
argument_list|(
name|count
argument_list|,
name|image_width
operator|-
name|x
argument_list|)
decl_stmt|;
name|int
name|len2
init|=
name|qMin
argument_list|(
name|x
argument_list|,
name|count
operator|-
name|len1
argument_list|)
decl_stmt|;
name|ptr1
operator|=
name|fetch
argument_list|(
name|buf1
argument_list|,
name|s1
argument_list|,
name|x
argument_list|,
name|len1
argument_list|)
expr_stmt|;
name|ptr1
operator|=
name|layout
operator|->
name|convertToARGB32PM
argument_list|(
name|buf1
argument_list|,
name|ptr1
argument_list|,
name|len1
argument_list|,
name|layout
argument_list|,
name|clut
argument_list|)
expr_stmt|;
name|ptr2
operator|=
name|fetch
argument_list|(
name|buf2
argument_list|,
name|s2
argument_list|,
name|x
argument_list|,
name|len1
argument_list|)
expr_stmt|;
name|ptr2
operator|=
name|layout
operator|->
name|convertToARGB32PM
argument_list|(
name|buf2
argument_list|,
name|ptr2
argument_list|,
name|len1
argument_list|,
name|layout
argument_list|,
name|clut
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len1
condition|;
operator|++
name|i
control|)
block|{
name|uint
name|t
init|=
name|ptr1
index|[
name|i
index|]
decl_stmt|;
name|uint
name|b
init|=
name|ptr2
index|[
name|i
index|]
decl_stmt|;
name|buf1
index|[
name|i
index|]
operator|=
operator|(
operator|(
operator|(
name|t
operator|&
literal|0xff00ff
operator|)
operator|*
name|idisty
operator|+
operator|(
name|b
operator|&
literal|0xff00ff
operator|)
operator|*
name|disty
operator|)
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
expr_stmt|;
name|buf2
index|[
name|i
index|]
operator|=
operator|(
operator|(
operator|(
operator|(
name|t
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|*
name|idisty
operator|+
operator|(
operator|(
name|b
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|*
name|disty
operator|)
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
expr_stmt|;
block|}
if|if
condition|(
name|len2
condition|)
block|{
name|ptr1
operator|=
name|fetch
argument_list|(
name|buf1
operator|+
name|len1
argument_list|,
name|s1
argument_list|,
literal|0
argument_list|,
name|len2
argument_list|)
expr_stmt|;
name|ptr1
operator|=
name|layout
operator|->
name|convertToARGB32PM
argument_list|(
name|buf1
operator|+
name|len1
argument_list|,
name|ptr1
argument_list|,
name|len2
argument_list|,
name|layout
argument_list|,
name|clut
argument_list|)
expr_stmt|;
name|ptr2
operator|=
name|fetch
argument_list|(
name|buf2
operator|+
name|len1
argument_list|,
name|s2
argument_list|,
literal|0
argument_list|,
name|len2
argument_list|)
expr_stmt|;
name|ptr2
operator|=
name|layout
operator|->
name|convertToARGB32PM
argument_list|(
name|buf2
operator|+
name|len1
argument_list|,
name|ptr2
argument_list|,
name|len2
argument_list|,
name|layout
argument_list|,
name|clut
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len2
condition|;
operator|++
name|i
control|)
block|{
name|uint
name|t
init|=
name|ptr1
index|[
name|i
index|]
decl_stmt|;
name|uint
name|b
init|=
name|ptr2
index|[
name|i
index|]
decl_stmt|;
name|buf1
index|[
name|i
operator|+
name|len1
index|]
operator|=
operator|(
operator|(
operator|(
name|t
operator|&
literal|0xff00ff
operator|)
operator|*
name|idisty
operator|+
operator|(
name|b
operator|&
literal|0xff00ff
operator|)
operator|*
name|disty
operator|)
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
expr_stmt|;
name|buf2
index|[
name|i
operator|+
name|len1
index|]
operator|=
operator|(
operator|(
operator|(
operator|(
name|t
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|*
name|idisty
operator|+
operator|(
operator|(
name|b
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|*
name|disty
operator|)
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|image_width
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|buf1
index|[
name|i
index|]
operator|=
name|buf1
index|[
name|i
operator|-
name|image_width
index|]
expr_stmt|;
name|buf2
index|[
name|i
index|]
operator|=
name|buf2
index|[
name|i
operator|-
name|image_width
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|start
init|=
name|qMax
argument_list|(
name|x
argument_list|,
name|image_x1
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|qMin
argument_list|(
name|x
operator|+
name|count
argument_list|,
name|image_x2
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|qMax
argument_list|(
literal|1
argument_list|,
name|end
operator|-
name|start
argument_list|)
decl_stmt|;
name|int
name|leading
init|=
name|start
operator|-
name|x
decl_stmt|;
name|ptr1
operator|=
name|fetch
argument_list|(
name|buf1
operator|+
name|leading
argument_list|,
name|s1
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|ptr1
operator|=
name|layout
operator|->
name|convertToARGB32PM
argument_list|(
name|buf1
operator|+
name|leading
argument_list|,
name|ptr1
argument_list|,
name|len
argument_list|,
name|layout
argument_list|,
name|clut
argument_list|)
expr_stmt|;
name|ptr2
operator|=
name|fetch
argument_list|(
name|buf2
operator|+
name|leading
argument_list|,
name|s2
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|ptr2
operator|=
name|layout
operator|->
name|convertToARGB32PM
argument_list|(
name|buf2
operator|+
name|leading
argument_list|,
name|ptr2
argument_list|,
name|len
argument_list|,
name|layout
argument_list|,
name|clut
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|uint
name|t
init|=
name|ptr1
index|[
name|i
index|]
decl_stmt|;
name|uint
name|b
init|=
name|ptr2
index|[
name|i
index|]
decl_stmt|;
name|buf1
index|[
name|i
operator|+
name|leading
index|]
operator|=
operator|(
operator|(
operator|(
name|t
operator|&
literal|0xff00ff
operator|)
operator|*
name|idisty
operator|+
operator|(
name|b
operator|&
literal|0xff00ff
operator|)
operator|*
name|disty
operator|)
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
expr_stmt|;
name|buf2
index|[
name|i
operator|+
name|leading
index|]
operator|=
operator|(
operator|(
operator|(
operator|(
name|t
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|*
name|idisty
operator|+
operator|(
operator|(
name|b
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
operator|)
operator|*
name|disty
operator|)
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leading
condition|;
operator|++
name|i
control|)
block|{
name|buf1
index|[
name|i
index|]
operator|=
name|buf1
index|[
name|leading
index|]
expr_stmt|;
name|buf2
index|[
name|i
index|]
operator|=
name|buf2
index|[
name|leading
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|leading
operator|+
name|len
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|buf1
index|[
name|i
index|]
operator|=
name|buf1
index|[
name|i
operator|-
literal|1
index|]
expr_stmt|;
name|buf2
index|[
name|i
index|]
operator|=
name|buf2
index|[
name|i
operator|-
literal|1
index|]
expr_stmt|;
block|}
block|}
comment|// Now interpolate the values from the intermediate_buffer to get the final result.
name|fx
operator|&=
name|fixed_scale
operator|-
literal|1
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|(
name|fx
operator|>>
literal|16
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|register
name|int
name|x1
init|=
operator|(
name|fx
operator|>>
literal|16
operator|)
decl_stmt|;
specifier|register
name|int
name|x2
init|=
name|x1
operator|+
literal|1
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|x1
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|x2
operator|<
name|count
argument_list|)
expr_stmt|;
specifier|register
name|int
name|distx
init|=
operator|(
name|fx
operator|&
literal|0x0000ffff
operator|)
operator|>>
literal|8
decl_stmt|;
specifier|register
name|int
name|idistx
init|=
literal|256
operator|-
name|distx
decl_stmt|;
name|int
name|rb
init|=
operator|(
operator|(
name|buf1
index|[
name|x1
index|]
operator|*
name|idistx
operator|+
name|buf1
index|[
name|x2
index|]
operator|*
name|distx
operator|)
operator|>>
literal|8
operator|)
operator|&
literal|0xff00ff
decl_stmt|;
name|int
name|ag
init|=
operator|(
name|buf2
index|[
name|x1
index|]
operator|*
name|idistx
operator|+
name|buf2
index|[
name|x2
index|]
operator|*
name|distx
operator|)
operator|&
literal|0xff00ff00
decl_stmt|;
name|buffer
index|[
name|i
index|]
operator|=
name|rb
operator||
name|ag
expr_stmt|;
name|fx
operator|+=
name|fdx
expr_stmt|;
block|}
block|}
else|else
block|{
name|FetchPixelFunc
name|fetch
init|=
name|qFetchPixel
index|[
name|layout
operator|->
name|bpp
index|]
decl_stmt|;
name|uint
name|buf1
index|[
name|buffer_size
index|]
decl_stmt|;
name|uint
name|buf2
index|[
name|buffer_size
index|]
decl_stmt|;
name|uint
modifier|*
name|b
init|=
name|buffer
decl_stmt|;
while|while
condition|(
name|length
condition|)
block|{
name|int
name|len
init|=
name|qMin
argument_list|(
name|length
argument_list|,
name|buffer_size
operator|/
literal|2
argument_list|)
decl_stmt|;
name|int
name|fracX
init|=
name|fx
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|int
name|x1
init|=
operator|(
name|fx
operator|>>
literal|16
operator|)
decl_stmt|;
name|int
name|x2
decl_stmt|;
name|fetchTransformedBilinear_pixelBounds
argument_list|<
name|blendType
argument_list|>
argument_list|(
name|image_width
argument_list|,
name|image_x1
argument_list|,
name|image_x2
argument_list|,
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|buf1
index|[
name|i
operator|*
literal|2
operator|+
literal|0
index|]
operator|=
name|fetch
argument_list|(
name|s1
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|buf1
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
name|fetch
argument_list|(
name|s1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|buf2
index|[
name|i
operator|*
literal|2
operator|+
literal|0
index|]
operator|=
name|fetch
argument_list|(
name|s2
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|buf2
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
name|fetch
argument_list|(
name|s2
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|fx
operator|+=
name|fdx
expr_stmt|;
block|}
name|layout
operator|->
name|convertToARGB32PM
argument_list|(
name|buf1
argument_list|,
name|buf1
argument_list|,
name|len
operator|*
literal|2
argument_list|,
name|layout
argument_list|,
name|clut
argument_list|)
expr_stmt|;
name|layout
operator|->
name|convertToARGB32PM
argument_list|(
name|buf2
argument_list|,
name|buf2
argument_list|,
name|len
operator|*
literal|2
argument_list|,
name|layout
argument_list|,
name|clut
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|fdx
argument_list|<
literal|0
operator|&&
name|fdx
argument_list|>
operator|-
operator|(
name|fixed_scale
operator|/
literal|8
operator|)
operator|)
operator|||
name|fabs
argument_list|(
name|data
operator|->
name|m22
argument_list|)
operator|<
operator|(
literal|1.
operator|/
literal|8.
operator|)
condition|)
block|{
comment|// scale up more than 8x
name|int
name|disty
init|=
operator|(
name|fy
operator|&
literal|0x0000ffff
operator|)
operator|>>
literal|8
decl_stmt|;
name|int
name|idisty
init|=
literal|256
operator|-
name|disty
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|uint
name|tl
init|=
name|buf1
index|[
name|i
operator|*
literal|2
operator|+
literal|0
index|]
decl_stmt|;
name|uint
name|tr
init|=
name|buf1
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
decl_stmt|;
name|uint
name|bl
init|=
name|buf2
index|[
name|i
operator|*
literal|2
operator|+
literal|0
index|]
decl_stmt|;
name|uint
name|br
init|=
name|buf2
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|distx
init|=
operator|(
name|fracX
operator|&
literal|0x0000ffff
operator|)
operator|>>
literal|8
decl_stmt|;
name|int
name|idistx
init|=
literal|256
operator|-
name|distx
decl_stmt|;
name|uint
name|xtop
init|=
name|INTERPOLATE_PIXEL_256
argument_list|(
name|tl
argument_list|,
name|idistx
argument_list|,
name|tr
argument_list|,
name|distx
argument_list|)
decl_stmt|;
name|uint
name|xbot
init|=
name|INTERPOLATE_PIXEL_256
argument_list|(
name|bl
argument_list|,
name|idistx
argument_list|,
name|br
argument_list|,
name|distx
argument_list|)
decl_stmt|;
name|b
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_256
argument_list|(
name|xtop
argument_list|,
name|idisty
argument_list|,
name|xbot
argument_list|,
name|disty
argument_list|)
expr_stmt|;
name|fracX
operator|+=
name|fdx
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//scale down
name|int
name|disty
init|=
operator|(
name|fy
operator|&
literal|0x0000ffff
operator|)
operator|>>
literal|12
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|uint
name|tl
init|=
name|buf1
index|[
name|i
operator|*
literal|2
operator|+
literal|0
index|]
decl_stmt|;
name|uint
name|tr
init|=
name|buf1
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
decl_stmt|;
name|uint
name|bl
init|=
name|buf2
index|[
name|i
operator|*
literal|2
operator|+
literal|0
index|]
decl_stmt|;
name|uint
name|br
init|=
name|buf2
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|distx
init|=
operator|(
name|fracX
operator|&
literal|0x0000ffff
operator|)
operator|>>
literal|12
decl_stmt|;
name|b
index|[
name|i
index|]
operator|=
name|interpolate_4_pixels_16
argument_list|(
name|tl
argument_list|,
name|tr
argument_list|,
name|bl
argument_list|,
name|br
argument_list|,
name|distx
argument_list|,
name|disty
argument_list|)
expr_stmt|;
name|fracX
operator|+=
name|fdx
expr_stmt|;
block|}
block|}
name|length
operator|-=
name|len
expr_stmt|;
name|b
operator|+=
name|len
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//rotation
name|FetchPixelFunc
name|fetch
init|=
name|qFetchPixel
index|[
name|layout
operator|->
name|bpp
index|]
decl_stmt|;
name|uint
name|buf1
index|[
name|buffer_size
index|]
decl_stmt|;
name|uint
name|buf2
index|[
name|buffer_size
index|]
decl_stmt|;
name|uint
modifier|*
name|b
init|=
name|buffer
decl_stmt|;
while|while
condition|(
name|length
condition|)
block|{
name|int
name|len
init|=
name|qMin
argument_list|(
name|length
argument_list|,
name|buffer_size
operator|/
literal|2
argument_list|)
decl_stmt|;
name|int
name|fracX
init|=
name|fx
decl_stmt|;
name|int
name|fracY
init|=
name|fy
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|int
name|x1
init|=
operator|(
name|fx
operator|>>
literal|16
operator|)
decl_stmt|;
name|int
name|x2
decl_stmt|;
name|int
name|y1
init|=
operator|(
name|fy
operator|>>
literal|16
operator|)
decl_stmt|;
name|int
name|y2
decl_stmt|;
name|fetchTransformedBilinear_pixelBounds
argument_list|<
name|blendType
argument_list|>
argument_list|(
name|image_width
argument_list|,
name|image_x1
argument_list|,
name|image_x2
argument_list|,
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|fetchTransformedBilinear_pixelBounds
argument_list|<
name|blendType
argument_list|>
argument_list|(
name|image_height
argument_list|,
name|image_y1
argument_list|,
name|image_y2
argument_list|,
name|y1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|s1
init|=
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y1
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|s2
init|=
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y2
argument_list|)
decl_stmt|;
name|buf1
index|[
name|i
operator|*
literal|2
operator|+
literal|0
index|]
operator|=
name|fetch
argument_list|(
name|s1
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|buf1
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
name|fetch
argument_list|(
name|s1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|buf2
index|[
name|i
operator|*
literal|2
operator|+
literal|0
index|]
operator|=
name|fetch
argument_list|(
name|s2
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|buf2
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
name|fetch
argument_list|(
name|s2
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|fx
operator|+=
name|fdx
expr_stmt|;
name|fy
operator|+=
name|fdy
expr_stmt|;
block|}
name|layout
operator|->
name|convertToARGB32PM
argument_list|(
name|buf1
argument_list|,
name|buf1
argument_list|,
name|len
operator|*
literal|2
argument_list|,
name|layout
argument_list|,
name|clut
argument_list|)
expr_stmt|;
name|layout
operator|->
name|convertToARGB32PM
argument_list|(
name|buf2
argument_list|,
name|buf2
argument_list|,
name|len
operator|*
literal|2
argument_list|,
name|layout
argument_list|,
name|clut
argument_list|)
expr_stmt|;
if|if
condition|(
name|fabs
argument_list|(
name|data
operator|->
name|m11
argument_list|)
operator|>
literal|8
operator|||
name|fabs
argument_list|(
name|data
operator|->
name|m22
argument_list|)
operator|>
literal|8
condition|)
block|{
comment|//if we are zooming more than 8 times, we use 8bit precision for the position.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|uint
name|tl
init|=
name|buf1
index|[
name|i
operator|*
literal|2
operator|+
literal|0
index|]
decl_stmt|;
name|uint
name|tr
init|=
name|buf1
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
decl_stmt|;
name|uint
name|bl
init|=
name|buf2
index|[
name|i
operator|*
literal|2
operator|+
literal|0
index|]
decl_stmt|;
name|uint
name|br
init|=
name|buf2
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|distx
init|=
operator|(
name|fracX
operator|&
literal|0x0000ffff
operator|)
operator|>>
literal|8
decl_stmt|;
name|int
name|disty
init|=
operator|(
name|fracY
operator|&
literal|0x0000ffff
operator|)
operator|>>
literal|8
decl_stmt|;
name|int
name|idistx
init|=
literal|256
operator|-
name|distx
decl_stmt|;
name|int
name|idisty
init|=
literal|256
operator|-
name|disty
decl_stmt|;
name|uint
name|xtop
init|=
name|INTERPOLATE_PIXEL_256
argument_list|(
name|tl
argument_list|,
name|idistx
argument_list|,
name|tr
argument_list|,
name|distx
argument_list|)
decl_stmt|;
name|uint
name|xbot
init|=
name|INTERPOLATE_PIXEL_256
argument_list|(
name|bl
argument_list|,
name|idistx
argument_list|,
name|br
argument_list|,
name|distx
argument_list|)
decl_stmt|;
name|b
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_256
argument_list|(
name|xtop
argument_list|,
name|idisty
argument_list|,
name|xbot
argument_list|,
name|disty
argument_list|)
expr_stmt|;
name|fracX
operator|+=
name|fdx
expr_stmt|;
name|fracY
operator|+=
name|fdy
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//we are zooming less than 8x, use 4bit precision
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|uint
name|tl
init|=
name|buf1
index|[
name|i
operator|*
literal|2
operator|+
literal|0
index|]
decl_stmt|;
name|uint
name|tr
init|=
name|buf1
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
decl_stmt|;
name|uint
name|bl
init|=
name|buf2
index|[
name|i
operator|*
literal|2
operator|+
literal|0
index|]
decl_stmt|;
name|uint
name|br
init|=
name|buf2
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|distx
init|=
operator|(
name|fracX
operator|&
literal|0x0000ffff
operator|)
operator|>>
literal|12
decl_stmt|;
name|int
name|disty
init|=
operator|(
name|fracY
operator|&
literal|0x0000ffff
operator|)
operator|>>
literal|12
decl_stmt|;
name|b
index|[
name|i
index|]
operator|=
name|interpolate_4_pixels_16
argument_list|(
name|tl
argument_list|,
name|tr
argument_list|,
name|bl
argument_list|,
name|br
argument_list|,
name|distx
argument_list|,
name|disty
argument_list|)
expr_stmt|;
name|fracX
operator|+=
name|fdx
expr_stmt|;
name|fracY
operator|+=
name|fdy
expr_stmt|;
block|}
block|}
name|length
operator|-=
name|len
expr_stmt|;
name|b
operator|+=
name|len
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
specifier|const
name|qreal
name|fdx
init|=
name|data
operator|->
name|m11
decl_stmt|;
specifier|const
name|qreal
name|fdy
init|=
name|data
operator|->
name|m12
decl_stmt|;
specifier|const
name|qreal
name|fdw
init|=
name|data
operator|->
name|m13
decl_stmt|;
name|qreal
name|fx
init|=
name|data
operator|->
name|m21
operator|*
name|cy
operator|+
name|data
operator|->
name|m11
operator|*
name|cx
operator|+
name|data
operator|->
name|dx
decl_stmt|;
name|qreal
name|fy
init|=
name|data
operator|->
name|m22
operator|*
name|cy
operator|+
name|data
operator|->
name|m12
operator|*
name|cx
operator|+
name|data
operator|->
name|dy
decl_stmt|;
name|qreal
name|fw
init|=
name|data
operator|->
name|m23
operator|*
name|cy
operator|+
name|data
operator|->
name|m13
operator|*
name|cx
operator|+
name|data
operator|->
name|m33
decl_stmt|;
name|FetchPixelFunc
name|fetch
init|=
name|qFetchPixel
index|[
name|layout
operator|->
name|bpp
index|]
decl_stmt|;
name|uint
name|buf1
index|[
name|buffer_size
index|]
decl_stmt|;
name|uint
name|buf2
index|[
name|buffer_size
index|]
decl_stmt|;
name|uint
modifier|*
name|b
init|=
name|buffer
decl_stmt|;
name|int
name|distxs
index|[
name|buffer_size
operator|/
literal|2
index|]
decl_stmt|;
name|int
name|distys
index|[
name|buffer_size
operator|/
literal|2
index|]
decl_stmt|;
while|while
condition|(
name|length
condition|)
block|{
name|int
name|len
init|=
name|qMin
argument_list|(
name|length
argument_list|,
name|buffer_size
operator|/
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|qreal
name|iw
init|=
name|fw
operator|==
literal|0
condition|?
literal|1
else|:
literal|1
operator|/
name|fw
decl_stmt|;
specifier|const
name|qreal
name|px
init|=
name|fx
operator|*
name|iw
operator|-
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|py
init|=
name|fy
operator|*
name|iw
operator|-
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
name|int
name|x1
init|=
name|int
argument_list|(
name|px
argument_list|)
operator|-
operator|(
name|px
operator|<
literal|0
operator|)
decl_stmt|;
name|int
name|x2
decl_stmt|;
name|int
name|y1
init|=
name|int
argument_list|(
name|py
argument_list|)
operator|-
operator|(
name|py
operator|<
literal|0
operator|)
decl_stmt|;
name|int
name|y2
decl_stmt|;
name|distxs
index|[
name|i
index|]
operator|=
name|int
argument_list|(
operator|(
name|px
operator|-
name|x1
operator|)
operator|*
literal|256
argument_list|)
expr_stmt|;
name|distys
index|[
name|i
index|]
operator|=
name|int
argument_list|(
operator|(
name|py
operator|-
name|y1
operator|)
operator|*
literal|256
argument_list|)
expr_stmt|;
name|fetchTransformedBilinear_pixelBounds
argument_list|<
name|blendType
argument_list|>
argument_list|(
name|image_width
argument_list|,
name|image_x1
argument_list|,
name|image_x2
argument_list|,
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|fetchTransformedBilinear_pixelBounds
argument_list|<
name|blendType
argument_list|>
argument_list|(
name|image_height
argument_list|,
name|image_y1
argument_list|,
name|image_y2
argument_list|,
name|y1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|s1
init|=
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y1
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|s2
init|=
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y2
argument_list|)
decl_stmt|;
name|buf1
index|[
name|i
operator|*
literal|2
operator|+
literal|0
index|]
operator|=
name|fetch
argument_list|(
name|s1
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|buf1
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
name|fetch
argument_list|(
name|s1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|buf2
index|[
name|i
operator|*
literal|2
operator|+
literal|0
index|]
operator|=
name|fetch
argument_list|(
name|s2
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|buf2
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
name|fetch
argument_list|(
name|s2
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|fx
operator|+=
name|fdx
expr_stmt|;
name|fy
operator|+=
name|fdy
expr_stmt|;
name|fw
operator|+=
name|fdw
expr_stmt|;
comment|//force increment to avoid /0
if|if
condition|(
operator|!
name|fw
condition|)
name|fw
operator|+=
name|fdw
expr_stmt|;
block|}
name|layout
operator|->
name|convertToARGB32PM
argument_list|(
name|buf1
argument_list|,
name|buf1
argument_list|,
name|len
operator|*
literal|2
argument_list|,
name|layout
argument_list|,
name|clut
argument_list|)
expr_stmt|;
name|layout
operator|->
name|convertToARGB32PM
argument_list|(
name|buf2
argument_list|,
name|buf2
argument_list|,
name|len
operator|*
literal|2
argument_list|,
name|layout
argument_list|,
name|clut
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|int
name|distx
init|=
name|distxs
index|[
name|i
index|]
decl_stmt|;
name|int
name|disty
init|=
name|distys
index|[
name|i
index|]
decl_stmt|;
name|int
name|idistx
init|=
literal|256
operator|-
name|distx
decl_stmt|;
name|int
name|idisty
init|=
literal|256
operator|-
name|disty
decl_stmt|;
name|uint
name|tl
init|=
name|buf1
index|[
name|i
operator|*
literal|2
operator|+
literal|0
index|]
decl_stmt|;
name|uint
name|tr
init|=
name|buf1
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
decl_stmt|;
name|uint
name|bl
init|=
name|buf2
index|[
name|i
operator|*
literal|2
operator|+
literal|0
index|]
decl_stmt|;
name|uint
name|br
init|=
name|buf2
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
decl_stmt|;
name|uint
name|xtop
init|=
name|INTERPOLATE_PIXEL_256
argument_list|(
name|tl
argument_list|,
name|idistx
argument_list|,
name|tr
argument_list|,
name|distx
argument_list|)
decl_stmt|;
name|uint
name|xbot
init|=
name|INTERPOLATE_PIXEL_256
argument_list|(
name|bl
argument_list|,
name|idistx
argument_list|,
name|br
argument_list|,
name|distx
argument_list|)
decl_stmt|;
name|b
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_256
argument_list|(
name|xtop
argument_list|,
name|idisty
argument_list|,
name|xbot
argument_list|,
name|disty
argument_list|)
expr_stmt|;
block|}
name|length
operator|-=
name|len
expr_stmt|;
name|b
operator|+=
name|len
expr_stmt|;
block|}
block|}
return|return
name|buffer
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|sourceFetch
specifier|static
specifier|const
name|SourceFetchProc
name|sourceFetch
index|[
name|NBlendTypes
index|]
index|[
name|QImage
operator|::
name|NImageFormats
index|]
init|=
block|{
comment|// Untransformed
block|{
literal|0
block|,
comment|// Invalid
name|fetchUntransformed
block|,
comment|// Mono
name|fetchUntransformed
block|,
comment|// MonoLsb
name|fetchUntransformed
block|,
comment|// Indexed8
name|fetchUntransformedARGB32PM
block|,
comment|// RGB32
name|fetchUntransformed
block|,
comment|// ARGB32
name|fetchUntransformedARGB32PM
block|,
comment|// ARGB32_Premultiplied
name|fetchUntransformedRGB16
block|,
comment|// RGB16
name|fetchUntransformed
block|,
comment|// ARGB8565_Premultiplied
name|fetchUntransformed
block|,
comment|// RGB666
name|fetchUntransformed
block|,
comment|// ARGB6666_Premultiplied
name|fetchUntransformed
block|,
comment|// RGB555
name|fetchUntransformed
block|,
comment|// ARGB8555_Premultiplied
name|fetchUntransformed
block|,
comment|// RGB888
name|fetchUntransformed
block|,
comment|// RGB444
name|fetchUntransformed
comment|// ARGB4444_Premultiplied
block|}
block|,
comment|// Tiled
block|{
literal|0
block|,
comment|// Invalid
name|fetchUntransformed
block|,
comment|// Mono
name|fetchUntransformed
block|,
comment|// MonoLsb
name|fetchUntransformed
block|,
comment|// Indexed8
name|fetchUntransformedARGB32PM
block|,
comment|// RGB32
name|fetchUntransformed
block|,
comment|// ARGB32
name|fetchUntransformedARGB32PM
block|,
comment|// ARGB32_Premultiplied
name|fetchUntransformedRGB16
block|,
comment|// RGB16
name|fetchUntransformed
block|,
comment|// ARGB8565_Premultiplied
name|fetchUntransformed
block|,
comment|// RGB666
name|fetchUntransformed
block|,
comment|// ARGB6666_Premultiplied
name|fetchUntransformed
block|,
comment|// RGB555
name|fetchUntransformed
block|,
comment|// ARGB8555_Premultiplied
name|fetchUntransformed
block|,
comment|// RGB888
name|fetchUntransformed
block|,
comment|// RGB444
name|fetchUntransformed
comment|// ARGB4444_Premultiplied
block|}
block|,
comment|// Transformed
block|{
literal|0
block|,
comment|// Invalid
name|fetchTransformed
argument_list|<
name|BlendTransformed
argument_list|>
block|,
comment|// Mono
name|fetchTransformed
argument_list|<
name|BlendTransformed
argument_list|>
block|,
comment|// MonoLsb
name|fetchTransformed
argument_list|<
name|BlendTransformed
argument_list|>
block|,
comment|// Indexed8
name|fetchTransformedARGB32PM
argument_list|<
name|BlendTransformed
argument_list|>
block|,
comment|// RGB32
name|fetchTransformed
argument_list|<
name|BlendTransformed
argument_list|>
block|,
comment|// ARGB32
name|fetchTransformedARGB32PM
argument_list|<
name|BlendTransformed
argument_list|>
block|,
comment|// ARGB32_Premultiplied
name|fetchTransformed
argument_list|<
name|BlendTransformed
argument_list|>
block|,
comment|// RGB16
name|fetchTransformed
argument_list|<
name|BlendTransformed
argument_list|>
block|,
comment|// ARGB8565_Premultiplied
name|fetchTransformed
argument_list|<
name|BlendTransformed
argument_list|>
block|,
comment|// RGB666
name|fetchTransformed
argument_list|<
name|BlendTransformed
argument_list|>
block|,
comment|// ARGB6666_Premultiplied
name|fetchTransformed
argument_list|<
name|BlendTransformed
argument_list|>
block|,
comment|// RGB555
name|fetchTransformed
argument_list|<
name|BlendTransformed
argument_list|>
block|,
comment|// ARGB8555_Premultiplied
name|fetchTransformed
argument_list|<
name|BlendTransformed
argument_list|>
block|,
comment|// RGB888
name|fetchTransformed
argument_list|<
name|BlendTransformed
argument_list|>
block|,
comment|// RGB444
name|fetchTransformed
argument_list|<
name|BlendTransformed
argument_list|>
block|,
comment|// ARGB4444_Premultiplied
block|}
block|,
block|{
literal|0
block|,
comment|// TransformedTiled
name|fetchTransformed
argument_list|<
name|BlendTransformedTiled
argument_list|>
block|,
comment|// Mono
name|fetchTransformed
argument_list|<
name|BlendTransformedTiled
argument_list|>
block|,
comment|// MonoLsb
name|fetchTransformed
argument_list|<
name|BlendTransformedTiled
argument_list|>
block|,
comment|// Indexed8
name|fetchTransformedARGB32PM
argument_list|<
name|BlendTransformedTiled
argument_list|>
block|,
comment|// RGB32
name|fetchTransformed
argument_list|<
name|BlendTransformedTiled
argument_list|>
block|,
comment|// ARGB32
name|fetchTransformedARGB32PM
argument_list|<
name|BlendTransformedTiled
argument_list|>
block|,
comment|// ARGB32_Premultiplied
name|fetchTransformed
argument_list|<
name|BlendTransformedTiled
argument_list|>
block|,
comment|// RGB16
name|fetchTransformed
argument_list|<
name|BlendTransformedTiled
argument_list|>
block|,
comment|// ARGB8565_Premultiplied
name|fetchTransformed
argument_list|<
name|BlendTransformedTiled
argument_list|>
block|,
comment|// RGB666
name|fetchTransformed
argument_list|<
name|BlendTransformedTiled
argument_list|>
block|,
comment|// ARGB6666_Premultiplied
name|fetchTransformed
argument_list|<
name|BlendTransformedTiled
argument_list|>
block|,
comment|// RGB555
name|fetchTransformed
argument_list|<
name|BlendTransformedTiled
argument_list|>
block|,
comment|// ARGB8555_Premultiplied
name|fetchTransformed
argument_list|<
name|BlendTransformedTiled
argument_list|>
block|,
comment|// RGB888
name|fetchTransformed
argument_list|<
name|BlendTransformedTiled
argument_list|>
block|,
comment|// RGB444
name|fetchTransformed
argument_list|<
name|BlendTransformedTiled
argument_list|>
block|,
comment|// ARGB4444_Premultiplied
block|}
block|,
block|{
literal|0
block|,
comment|// Bilinear
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinear
argument_list|>
block|,
comment|// Mono
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinear
argument_list|>
block|,
comment|// MonoLsb
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinear
argument_list|>
block|,
comment|// Indexed8
name|fetchTransformedBilinearARGB32PM
argument_list|<
name|BlendTransformedBilinear
argument_list|>
block|,
comment|// RGB32
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinear
argument_list|>
block|,
comment|// ARGB32
name|fetchTransformedBilinearARGB32PM
argument_list|<
name|BlendTransformedBilinear
argument_list|>
block|,
comment|// ARGB32_Premultiplied
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinear
argument_list|>
block|,
comment|// RGB16
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinear
argument_list|>
block|,
comment|// ARGB8565_Premultiplied
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinear
argument_list|>
block|,
comment|// RGB666
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinear
argument_list|>
block|,
comment|// ARGB6666_Premultiplied
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinear
argument_list|>
block|,
comment|// RGB555
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinear
argument_list|>
block|,
comment|// ARGB8555_Premultiplied
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinear
argument_list|>
block|,
comment|// RGB888
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinear
argument_list|>
block|,
comment|// RGB444
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinear
argument_list|>
comment|// ARGB4444_Premultiplied
block|}
block|,
block|{
literal|0
block|,
comment|// BilinearTiled
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinearTiled
argument_list|>
block|,
comment|// Mono
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinearTiled
argument_list|>
block|,
comment|// MonoLsb
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinearTiled
argument_list|>
block|,
comment|// Indexed8
name|fetchTransformedBilinearARGB32PM
argument_list|<
name|BlendTransformedBilinearTiled
argument_list|>
block|,
comment|// RGB32
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinearTiled
argument_list|>
block|,
comment|// ARGB32
name|fetchTransformedBilinearARGB32PM
argument_list|<
name|BlendTransformedBilinearTiled
argument_list|>
block|,
comment|// ARGB32_Premultiplied
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinearTiled
argument_list|>
block|,
comment|// RGB16
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinearTiled
argument_list|>
block|,
comment|// ARGB8565_Premultiplied
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinearTiled
argument_list|>
block|,
comment|// RGB666
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinearTiled
argument_list|>
block|,
comment|// ARGB6666_Premultiplied
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinearTiled
argument_list|>
block|,
comment|// RGB555
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinearTiled
argument_list|>
block|,
comment|// ARGB8555_Premultiplied
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinearTiled
argument_list|>
block|,
comment|// RGB888
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinearTiled
argument_list|>
block|,
comment|// RGB444
name|fetchTransformedBilinear
argument_list|<
name|BlendTransformedBilinearTiled
argument_list|>
comment|// ARGB4444_Premultiplied
block|}
block|, }
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|FIXPT_BITS
define|#
directive|define
name|FIXPT_BITS
value|8
end_define
begin_define
DECL|macro|FIXPT_SIZE
define|#
directive|define
name|FIXPT_SIZE
value|(1<<FIXPT_BITS)
end_define
begin_function
DECL|function|qt_gradient_pixel_fixed
specifier|static
name|uint
name|qt_gradient_pixel_fixed
parameter_list|(
specifier|const
name|QGradientData
modifier|*
name|data
parameter_list|,
name|int
name|fixed_pos
parameter_list|)
block|{
name|int
name|ipos
init|=
operator|(
name|fixed_pos
operator|+
operator|(
name|FIXPT_SIZE
operator|/
literal|2
operator|)
operator|)
operator|>>
name|FIXPT_BITS
decl_stmt|;
return|return
name|data
operator|->
name|colorTable
index|[
name|qt_gradient_clamp
argument_list|(
name|data
argument_list|,
name|ipos
argument_list|)
index|]
return|;
block|}
end_function
begin_function
DECL|function|getLinearGradientValues
specifier|static
name|void
name|QT_FASTCALL
name|getLinearGradientValues
parameter_list|(
name|LinearGradientValues
modifier|*
name|v
parameter_list|,
specifier|const
name|QSpanData
modifier|*
name|data
parameter_list|)
block|{
name|v
operator|->
name|dx
operator|=
name|data
operator|->
name|gradient
operator|.
name|linear
operator|.
name|end
operator|.
name|x
operator|-
name|data
operator|->
name|gradient
operator|.
name|linear
operator|.
name|origin
operator|.
name|x
expr_stmt|;
name|v
operator|->
name|dy
operator|=
name|data
operator|->
name|gradient
operator|.
name|linear
operator|.
name|end
operator|.
name|y
operator|-
name|data
operator|->
name|gradient
operator|.
name|linear
operator|.
name|origin
operator|.
name|y
expr_stmt|;
name|v
operator|->
name|l
operator|=
name|v
operator|->
name|dx
operator|*
name|v
operator|->
name|dx
operator|+
name|v
operator|->
name|dy
operator|*
name|v
operator|->
name|dy
expr_stmt|;
name|v
operator|->
name|off
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|v
operator|->
name|l
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|dx
operator|/=
name|v
operator|->
name|l
expr_stmt|;
name|v
operator|->
name|dy
operator|/=
name|v
operator|->
name|l
expr_stmt|;
name|v
operator|->
name|off
operator|=
operator|-
name|v
operator|->
name|dx
operator|*
name|data
operator|->
name|gradient
operator|.
name|linear
operator|.
name|origin
operator|.
name|x
operator|-
name|v
operator|->
name|dy
operator|*
name|data
operator|->
name|gradient
operator|.
name|linear
operator|.
name|origin
operator|.
name|y
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_fetch_linear_gradient
specifier|static
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|qt_fetch_linear_gradient
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|Operator
modifier|*
name|op
parameter_list|,
specifier|const
name|QSpanData
modifier|*
name|data
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|length
parameter_list|)
block|{
specifier|const
name|uint
modifier|*
name|b
init|=
name|buffer
decl_stmt|;
name|qreal
name|t
decl_stmt|,
name|inc
decl_stmt|;
name|bool
name|affine
init|=
literal|true
decl_stmt|;
name|qreal
name|rx
init|=
literal|0
decl_stmt|,
name|ry
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|op
operator|->
name|linear
operator|.
name|l
operator|==
literal|0
condition|)
block|{
name|t
operator|=
name|inc
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|rx
operator|=
name|data
operator|->
name|m21
operator|*
operator|(
name|y
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|)
operator|+
name|data
operator|->
name|m11
operator|*
operator|(
name|x
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|)
operator|+
name|data
operator|->
name|dx
expr_stmt|;
name|ry
operator|=
name|data
operator|->
name|m22
operator|*
operator|(
name|y
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|)
operator|+
name|data
operator|->
name|m12
operator|*
operator|(
name|x
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|)
operator|+
name|data
operator|->
name|dy
expr_stmt|;
name|t
operator|=
name|op
operator|->
name|linear
operator|.
name|dx
operator|*
name|rx
operator|+
name|op
operator|->
name|linear
operator|.
name|dy
operator|*
name|ry
operator|+
name|op
operator|->
name|linear
operator|.
name|off
expr_stmt|;
name|inc
operator|=
name|op
operator|->
name|linear
operator|.
name|dx
operator|*
name|data
operator|->
name|m11
operator|+
name|op
operator|->
name|linear
operator|.
name|dy
operator|*
name|data
operator|->
name|m12
expr_stmt|;
name|affine
operator|=
operator|!
name|data
operator|->
name|m13
operator|&&
operator|!
name|data
operator|->
name|m23
expr_stmt|;
if|if
condition|(
name|affine
condition|)
block|{
name|t
operator|*=
operator|(
name|GRADIENT_STOPTABLE_SIZE
operator|-
literal|1
operator|)
expr_stmt|;
name|inc
operator|*=
operator|(
name|GRADIENT_STOPTABLE_SIZE
operator|-
literal|1
operator|)
expr_stmt|;
block|}
block|}
specifier|const
name|uint
modifier|*
name|end
init|=
name|buffer
operator|+
name|length
decl_stmt|;
if|if
condition|(
name|affine
condition|)
block|{
if|if
condition|(
name|inc
operator|>
name|qreal
argument_list|(
operator|-
literal|1e-5
argument_list|)
operator|&&
name|inc
operator|<
name|qreal
argument_list|(
literal|1e-5
argument_list|)
condition|)
block|{
name|QT_MEMFILL_UINT
argument_list|(
name|buffer
argument_list|,
name|length
argument_list|,
name|qt_gradient_pixel_fixed
argument_list|(
operator|&
name|data
operator|->
name|gradient
argument_list|,
name|int
argument_list|(
name|t
operator|*
name|FIXPT_SIZE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|t
operator|+
name|inc
operator|*
name|length
operator|<
name|qreal
argument_list|(
name|INT_MAX
operator|>>
operator|(
name|FIXPT_BITS
operator|+
literal|1
operator|)
argument_list|)
operator|&&
name|t
operator|+
name|inc
operator|*
name|length
operator|>
name|qreal
argument_list|(
name|INT_MIN
operator|>>
operator|(
name|FIXPT_BITS
operator|+
literal|1
operator|)
argument_list|)
condition|)
block|{
comment|// we can use fixed point math
name|int
name|t_fixed
init|=
name|int
argument_list|(
name|t
operator|*
name|FIXPT_SIZE
argument_list|)
decl_stmt|;
name|int
name|inc_fixed
init|=
name|int
argument_list|(
name|inc
operator|*
name|FIXPT_SIZE
argument_list|)
decl_stmt|;
while|while
condition|(
name|buffer
operator|<
name|end
condition|)
block|{
operator|*
name|buffer
operator|=
name|qt_gradient_pixel_fixed
argument_list|(
operator|&
name|data
operator|->
name|gradient
argument_list|,
name|t_fixed
argument_list|)
expr_stmt|;
name|t_fixed
operator|+=
name|inc_fixed
expr_stmt|;
operator|++
name|buffer
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// we have to fall back to float math
while|while
condition|(
name|buffer
operator|<
name|end
condition|)
block|{
operator|*
name|buffer
operator|=
name|qt_gradient_pixel
argument_list|(
operator|&
name|data
operator|->
name|gradient
argument_list|,
name|t
operator|/
name|GRADIENT_STOPTABLE_SIZE
argument_list|)
expr_stmt|;
name|t
operator|+=
name|inc
expr_stmt|;
operator|++
name|buffer
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// fall back to float math here as well
name|qreal
name|rw
init|=
name|data
operator|->
name|m23
operator|*
operator|(
name|y
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|)
operator|+
name|data
operator|->
name|m13
operator|*
operator|(
name|x
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|)
operator|+
name|data
operator|->
name|m33
decl_stmt|;
while|while
condition|(
name|buffer
operator|<
name|end
condition|)
block|{
name|qreal
name|x
init|=
name|rx
operator|/
name|rw
decl_stmt|;
name|qreal
name|y
init|=
name|ry
operator|/
name|rw
decl_stmt|;
name|t
operator|=
operator|(
name|op
operator|->
name|linear
operator|.
name|dx
operator|*
name|x
operator|+
name|op
operator|->
name|linear
operator|.
name|dy
operator|*
name|y
operator|)
operator|+
name|op
operator|->
name|linear
operator|.
name|off
expr_stmt|;
operator|*
name|buffer
operator|=
name|qt_gradient_pixel
argument_list|(
operator|&
name|data
operator|->
name|gradient
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|rx
operator|+=
name|data
operator|->
name|m11
expr_stmt|;
name|ry
operator|+=
name|data
operator|->
name|m12
expr_stmt|;
name|rw
operator|+=
name|data
operator|->
name|m13
expr_stmt|;
if|if
condition|(
operator|!
name|rw
condition|)
block|{
name|rw
operator|+=
name|data
operator|->
name|m13
expr_stmt|;
block|}
operator|++
name|buffer
expr_stmt|;
block|}
block|}
return|return
name|b
return|;
block|}
end_function
begin_function
DECL|function|getRadialGradientValues
specifier|static
name|void
name|QT_FASTCALL
name|getRadialGradientValues
parameter_list|(
name|RadialGradientValues
modifier|*
name|v
parameter_list|,
specifier|const
name|QSpanData
modifier|*
name|data
parameter_list|)
block|{
name|v
operator|->
name|dx
operator|=
name|data
operator|->
name|gradient
operator|.
name|radial
operator|.
name|center
operator|.
name|x
operator|-
name|data
operator|->
name|gradient
operator|.
name|radial
operator|.
name|focal
operator|.
name|x
expr_stmt|;
name|v
operator|->
name|dy
operator|=
name|data
operator|->
name|gradient
operator|.
name|radial
operator|.
name|center
operator|.
name|y
operator|-
name|data
operator|->
name|gradient
operator|.
name|radial
operator|.
name|focal
operator|.
name|y
expr_stmt|;
name|v
operator|->
name|dr
operator|=
name|data
operator|->
name|gradient
operator|.
name|radial
operator|.
name|center
operator|.
name|radius
operator|-
name|data
operator|->
name|gradient
operator|.
name|radial
operator|.
name|focal
operator|.
name|radius
expr_stmt|;
name|v
operator|->
name|sqrfr
operator|=
name|data
operator|->
name|gradient
operator|.
name|radial
operator|.
name|focal
operator|.
name|radius
operator|*
name|data
operator|->
name|gradient
operator|.
name|radial
operator|.
name|focal
operator|.
name|radius
expr_stmt|;
name|v
operator|->
name|a
operator|=
name|v
operator|->
name|dr
operator|*
name|v
operator|->
name|dr
operator|-
name|v
operator|->
name|dx
operator|*
name|v
operator|->
name|dx
operator|-
name|v
operator|->
name|dy
operator|*
name|v
operator|->
name|dy
expr_stmt|;
name|v
operator|->
name|inv2a
operator|=
literal|1
operator|/
operator|(
literal|2
operator|*
name|v
operator|->
name|a
operator|)
expr_stmt|;
name|v
operator|->
name|extended
operator|=
operator|!
name|qFuzzyIsNull
argument_list|(
name|data
operator|->
name|gradient
operator|.
name|radial
operator|.
name|focal
operator|.
name|radius
argument_list|)
operator|||
name|v
operator|->
name|a
operator|<=
literal|0
expr_stmt|;
block|}
end_function
begin_class
DECL|class|RadialFetchPlain
class|class
name|RadialFetchPlain
block|{
public|public:
DECL|function|fetch
specifier|static
specifier|inline
name|void
name|fetch
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
name|uint
modifier|*
name|end
parameter_list|,
specifier|const
name|Operator
modifier|*
name|op
parameter_list|,
specifier|const
name|QSpanData
modifier|*
name|data
parameter_list|,
name|qreal
name|det
parameter_list|,
name|qreal
name|delta_det
parameter_list|,
name|qreal
name|delta_delta_det
parameter_list|,
name|qreal
name|b
parameter_list|,
name|qreal
name|delta_b
parameter_list|)
block|{
if|if
condition|(
name|op
operator|->
name|radial
operator|.
name|extended
condition|)
block|{
while|while
condition|(
name|buffer
operator|<
name|end
condition|)
block|{
name|quint32
name|result
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|det
operator|>=
literal|0
condition|)
block|{
name|qreal
name|w
init|=
name|qSqrt
argument_list|(
name|det
argument_list|)
operator|-
name|b
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|gradient
operator|.
name|radial
operator|.
name|focal
operator|.
name|radius
operator|+
name|op
operator|->
name|radial
operator|.
name|dr
operator|*
name|w
operator|>=
literal|0
condition|)
name|result
operator|=
name|qt_gradient_pixel
argument_list|(
operator|&
name|data
operator|->
name|gradient
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
operator|*
name|buffer
operator|=
name|result
expr_stmt|;
name|det
operator|+=
name|delta_det
expr_stmt|;
name|delta_det
operator|+=
name|delta_delta_det
expr_stmt|;
name|b
operator|+=
name|delta_b
expr_stmt|;
operator|++
name|buffer
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|buffer
operator|<
name|end
condition|)
block|{
operator|*
name|buffer
operator|++
operator|=
name|qt_gradient_pixel
argument_list|(
operator|&
name|data
operator|->
name|gradient
argument_list|,
name|qSqrt
argument_list|(
name|det
argument_list|)
operator|-
name|b
argument_list|)
expr_stmt|;
name|det
operator|+=
name|delta_det
expr_stmt|;
name|delta_det
operator|+=
name|delta_delta_det
expr_stmt|;
name|b
operator|+=
name|delta_b
expr_stmt|;
block|}
block|}
block|}
block|}
class|;
end_class
begin_function
DECL|function|qt_fetch_radial_gradient_plain
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|qt_fetch_radial_gradient_plain
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|Operator
modifier|*
name|op
parameter_list|,
specifier|const
name|QSpanData
modifier|*
name|data
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|qt_fetch_radial_gradient_template
argument_list|<
name|RadialFetchPlain
argument_list|>
argument_list|(
name|buffer
argument_list|,
name|op
argument_list|,
name|data
argument_list|,
name|y
argument_list|,
name|x
argument_list|,
name|length
argument_list|)
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|qt_fetch_radial_gradient
specifier|static
name|SourceFetchProc
name|qt_fetch_radial_gradient
init|=
name|qt_fetch_radial_gradient_plain
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_fetch_conical_gradient
specifier|static
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|qt_fetch_conical_gradient
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|Operator
modifier|*
parameter_list|,
specifier|const
name|QSpanData
modifier|*
name|data
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|length
parameter_list|)
block|{
specifier|const
name|uint
modifier|*
name|b
init|=
name|buffer
decl_stmt|;
name|qreal
name|rx
init|=
name|data
operator|->
name|m21
operator|*
operator|(
name|y
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|)
operator|+
name|data
operator|->
name|dx
operator|+
name|data
operator|->
name|m11
operator|*
operator|(
name|x
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|)
decl_stmt|;
name|qreal
name|ry
init|=
name|data
operator|->
name|m22
operator|*
operator|(
name|y
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|)
operator|+
name|data
operator|->
name|dy
operator|+
name|data
operator|->
name|m12
operator|*
operator|(
name|x
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|)
decl_stmt|;
name|bool
name|affine
init|=
operator|!
name|data
operator|->
name|m13
operator|&&
operator|!
name|data
operator|->
name|m23
decl_stmt|;
specifier|const
name|uint
modifier|*
name|end
init|=
name|buffer
operator|+
name|length
decl_stmt|;
if|if
condition|(
name|affine
condition|)
block|{
name|rx
operator|-=
name|data
operator|->
name|gradient
operator|.
name|conical
operator|.
name|center
operator|.
name|x
expr_stmt|;
name|ry
operator|-=
name|data
operator|->
name|gradient
operator|.
name|conical
operator|.
name|center
operator|.
name|y
expr_stmt|;
while|while
condition|(
name|buffer
operator|<
name|end
condition|)
block|{
name|qreal
name|angle
init|=
name|qAtan2
argument_list|(
name|ry
argument_list|,
name|rx
argument_list|)
operator|+
name|data
operator|->
name|gradient
operator|.
name|conical
operator|.
name|angle
decl_stmt|;
operator|*
name|buffer
operator|=
name|qt_gradient_pixel
argument_list|(
operator|&
name|data
operator|->
name|gradient
argument_list|,
literal|1
operator|-
name|angle
operator|/
operator|(
literal|2
operator|*
name|Q_PI
operator|)
argument_list|)
expr_stmt|;
name|rx
operator|+=
name|data
operator|->
name|m11
expr_stmt|;
name|ry
operator|+=
name|data
operator|->
name|m12
expr_stmt|;
operator|++
name|buffer
expr_stmt|;
block|}
block|}
else|else
block|{
name|qreal
name|rw
init|=
name|data
operator|->
name|m23
operator|*
operator|(
name|y
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|)
operator|+
name|data
operator|->
name|m33
operator|+
name|data
operator|->
name|m13
operator|*
operator|(
name|x
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|rw
condition|)
name|rw
operator|=
literal|1
expr_stmt|;
while|while
condition|(
name|buffer
operator|<
name|end
condition|)
block|{
name|qreal
name|angle
init|=
name|qAtan2
argument_list|(
name|ry
operator|/
name|rw
operator|-
name|data
operator|->
name|gradient
operator|.
name|conical
operator|.
name|center
operator|.
name|x
argument_list|,
name|rx
operator|/
name|rw
operator|-
name|data
operator|->
name|gradient
operator|.
name|conical
operator|.
name|center
operator|.
name|y
argument_list|)
operator|+
name|data
operator|->
name|gradient
operator|.
name|conical
operator|.
name|angle
decl_stmt|;
operator|*
name|buffer
operator|=
name|qt_gradient_pixel
argument_list|(
operator|&
name|data
operator|->
name|gradient
argument_list|,
literal|1.
operator|-
name|angle
operator|/
operator|(
literal|2
operator|*
name|Q_PI
operator|)
argument_list|)
expr_stmt|;
name|rx
operator|+=
name|data
operator|->
name|m11
expr_stmt|;
name|ry
operator|+=
name|data
operator|->
name|m12
expr_stmt|;
name|rw
operator|+=
name|data
operator|->
name|m13
expr_stmt|;
if|if
condition|(
operator|!
name|rw
condition|)
block|{
name|rw
operator|+=
name|data
operator|->
name|m13
expr_stmt|;
block|}
operator|++
name|buffer
expr_stmt|;
block|}
block|}
return|return
name|b
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_RVCT
argument_list|)
end_if
begin_comment
comment|// Force ARM code generation for comp_func_* -methods
end_comment
begin_pragma
pragma|#
directive|pragma
name|push
end_pragma
begin_pragma
pragma|#
directive|pragma
name|arm
end_pragma
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_HAVE_ARMV6
argument_list|)
end_if
begin_function
DECL|function|preload
specifier|static
name|__forceinline
name|void
name|preload
parameter_list|(
specifier|const
name|uint
modifier|*
name|start
parameter_list|)
block|{
asm|asm( "pld [start]" );
block|}
end_function
begin_decl_stmt
DECL|variable|L2CacheLineLength
specifier|static
specifier|const
name|uint
name|L2CacheLineLength
init|=
literal|32
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|L2CacheLineLengthInInts
specifier|static
specifier|const
name|uint
name|L2CacheLineLengthInInts
init|=
name|L2CacheLineLength
operator|/
sizeof|sizeof
argument_list|(
name|uint
argument_list|)
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|PRELOAD_INIT
define|#
directive|define
name|PRELOAD_INIT
parameter_list|(
name|x
parameter_list|)
value|preload(x);
end_define
begin_define
DECL|macro|PRELOAD_INIT2
define|#
directive|define
name|PRELOAD_INIT2
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|PRELOAD_INIT(x) PRELOAD_INIT(y)
end_define
begin_define
DECL|macro|PRELOAD_COND
define|#
directive|define
name|PRELOAD_COND
parameter_list|(
name|x
parameter_list|)
value|if (((uint)&x[i])%L2CacheLineLength == 0) preload(&x[i] + L2CacheLineLengthInInts);
end_define
begin_comment
comment|// Two consecutive preloads stall, so space them out a bit by using different modulus.
end_comment
begin_define
DECL|macro|PRELOAD_COND2
define|#
directive|define
name|PRELOAD_COND2
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|if (((uint)&x[i])%L2CacheLineLength == 0) preload(&x[i] + L2CacheLineLengthInInts); \          if (((uint)&y[i])%L2CacheLineLength == 16) preload(&y[i] + L2CacheLineLengthInInts);
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_HAVE_ARMV6
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_CC_RVCT
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_CC_RVCT
argument_list|)
operator|||
operator|!
name|defined
argument_list|(
name|QT_HAVE_ARMV6
argument_list|)
end_if
begin_define
DECL|macro|PRELOAD_INIT
define|#
directive|define
name|PRELOAD_INIT
parameter_list|(
name|x
parameter_list|)
end_define
begin_define
DECL|macro|PRELOAD_INIT2
define|#
directive|define
name|PRELOAD_INIT2
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
end_define
begin_define
DECL|macro|PRELOAD_COND
define|#
directive|define
name|PRELOAD_COND
parameter_list|(
name|x
parameter_list|)
end_define
begin_define
DECL|macro|PRELOAD_COND2
define|#
directive|define
name|PRELOAD_COND2
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* The constant alpha factor describes an alpha factor that gets applied    to the result of the composition operation combining it with the destination.     The intent is that if const_alpha == 0. we get back dest, and if const_alpha == 1.    we get the unmodified operation     result = src op dest    dest = result * const_alpha + dest * (1. - const_alpha)     This means that in the comments below, the first line is the const_alpha==255 case, the    second line the general one.     In the lines below:    s == src, sa == alpha(src), sia = 1 - alpha(src)    d == dest, da == alpha(dest), dia = 1 - alpha(dest)    ca = const_alpha, cia = 1 - const_alpha     The methods exist in two variants. One where we have a constant source, the other    where the source is an array of pixels. */
end_comment
begin_comment
comment|/*   result = 0   d = d * cia */
end_comment
begin_define
DECL|macro|comp_func_Clear_impl
define|#
directive|define
name|comp_func_Clear_impl
parameter_list|(
name|dest
parameter_list|,
name|length
parameter_list|,
name|const_alpha
parameter_list|)
define|\
value|{\     if (const_alpha == 255) {\         QT_MEMFILL_UINT(dest, length, 0);\     } else {\         int ialpha = 255 - const_alpha;\         PRELOAD_INIT(dest)\         for (int i = 0; i< length; ++i) {\             PRELOAD_COND(dest)\             dest[i] = BYTE_MUL(dest[i], ialpha);\         }\     }\ }
end_define
begin_function
DECL|function|comp_func_solid_Clear
name|void
name|QT_FASTCALL
name|comp_func_solid_Clear
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|comp_func_Clear_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|comp_func_Clear
name|void
name|QT_FASTCALL
name|comp_func_Clear
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|comp_func_Clear_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*   result = s   dest = s * ca + d * cia */
end_comment
begin_function
DECL|function|comp_func_solid_Source
name|void
name|QT_FASTCALL
name|comp_func_solid_Source
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
name|QT_MEMFILL_UINT
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|ialpha
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
name|color
operator|=
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|color
operator|+
name|BYTE_MUL
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Source
name|void
name|QT_FASTCALL
name|comp_func_Source
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
operator|::
name|memcpy
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
operator|*
sizeof|sizeof
argument_list|(
name|uint
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|ialpha
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|,
name|dest
index|[
name|i
index|]
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_Destination
name|void
name|QT_FASTCALL
name|comp_func_solid_Destination
parameter_list|(
name|uint
modifier|*
parameter_list|,
name|int
parameter_list|,
name|uint
parameter_list|,
name|uint
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|comp_func_Destination
name|void
name|QT_FASTCALL
name|comp_func_Destination
parameter_list|(
name|uint
modifier|*
parameter_list|,
specifier|const
name|uint
modifier|*
parameter_list|,
name|int
parameter_list|,
name|uint
parameter_list|)
block|{ }
end_function
begin_comment
comment|/*   result = s + d * sia   dest = (s + d * sia) * ca + d * cia        = s * ca + d * (sia * ca + cia)        = s * ca + d * (1 - sa*ca) */
end_comment
begin_function
DECL|function|comp_func_solid_SourceOver
name|void
name|QT_FASTCALL
name|comp_func_solid_SourceOver
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
operator|(
name|const_alpha
operator|&
name|qAlpha
argument_list|(
name|color
argument_list|)
operator|)
operator|==
literal|255
condition|)
block|{
name|QT_MEMFILL_UINT
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
name|color
operator|=
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|color
operator|+
name|BYTE_MUL
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|color
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_SourceOver
name|void
name|QT_FASTCALL
name|comp_func_SourceOver
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|s
operator|>=
literal|0xff000000
condition|)
name|dest
index|[
name|i
index|]
operator|=
name|s
expr_stmt|;
elseif|else
if|if
condition|(
name|s
operator|!=
literal|0
condition|)
name|dest
index|[
name|i
index|]
operator|=
name|s
operator|+
name|BYTE_MUL
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|s
init|=
name|BYTE_MUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|s
operator|+
name|BYTE_MUL
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*   result = d + s * dia   dest = (d + s * dia) * ca + d * cia        = d + s * dia * ca */
end_comment
begin_function
DECL|function|comp_func_solid_DestinationOver
name|void
name|QT_FASTCALL
name|comp_func_solid_DestinationOver
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
name|color
operator|=
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|d
operator|+
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_DestinationOver
name|void
name|QT_FASTCALL
name|comp_func_DestinationOver
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|d
operator|+
name|BYTE_MUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|BYTE_MUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|d
operator|+
name|BYTE_MUL
argument_list|(
name|s
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*   result = s * da   dest = s * da * ca + d * cia */
end_comment
begin_function
DECL|function|comp_func_solid_SourceIn
name|void
name|QT_FASTCALL
name|comp_func_solid_SourceIn
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|qAlpha
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|color
operator|=
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
name|uint
name|cia
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|color
argument_list|,
name|qAlpha
argument_list|(
name|d
argument_list|)
argument_list|,
name|d
argument_list|,
name|cia
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_SourceIn
name|void
name|QT_FASTCALL
name|comp_func_SourceIn
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|BYTE_MUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|qAlpha
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|uint
name|cia
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|BYTE_MUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|s
argument_list|,
name|qAlpha
argument_list|(
name|d
argument_list|)
argument_list|,
name|d
argument_list|,
name|cia
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*   result = d * sa   dest = d * sa * ca + d * cia        = d * (sa * ca + cia) */
end_comment
begin_function
DECL|function|comp_func_solid_DestinationIn
name|void
name|QT_FASTCALL
name|comp_func_solid_DestinationIn
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|uint
name|a
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
block|{
name|a
operator|=
name|BYTE_MUL
argument_list|(
name|a
argument_list|,
name|const_alpha
argument_list|)
operator|+
literal|255
operator|-
name|const_alpha
expr_stmt|;
block|}
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|BYTE_MUL
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_DestinationIn
name|void
name|QT_FASTCALL
name|comp_func_DestinationIn
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|BYTE_MUL
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|qAlpha
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|cia
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|a
init|=
name|BYTE_MUL
argument_list|(
name|qAlpha
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
argument_list|,
name|const_alpha
argument_list|)
operator|+
name|cia
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|BYTE_MUL
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*   result = s * dia   dest = s * dia * ca + d * cia */
end_comment
begin_function
DECL|function|comp_func_solid_SourceOut
name|void
name|QT_FASTCALL
name|comp_func_solid_SourceOut
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|dest
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|color
operator|=
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
name|int
name|cia
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|color
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|d
argument_list|)
argument_list|,
name|d
argument_list|,
name|cia
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|comp_func_SourceOut
name|void
name|QT_FASTCALL
name|comp_func_SourceOut
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|BYTE_MUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|dest
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|cia
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|s
init|=
name|BYTE_MUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|)
decl_stmt|;
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|s
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|d
argument_list|)
argument_list|,
name|d
argument_list|,
name|cia
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*   result = d * sia   dest = d * sia * ca + d * cia        = d * (sia * ca + cia) */
end_comment
begin_function
DECL|function|comp_func_solid_DestinationOut
name|void
name|QT_FASTCALL
name|comp_func_solid_DestinationOut
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|uint
name|a
init|=
name|qAlpha
argument_list|(
operator|~
name|color
argument_list|)
decl_stmt|;
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
name|a
operator|=
name|BYTE_MUL
argument_list|(
name|a
argument_list|,
name|const_alpha
argument_list|)
operator|+
literal|255
operator|-
name|const_alpha
expr_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|BYTE_MUL
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_DestinationOut
name|void
name|QT_FASTCALL
name|comp_func_DestinationOut
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|BYTE_MUL
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|src
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|cia
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|sia
init|=
name|BYTE_MUL
argument_list|(
name|qAlpha
argument_list|(
operator|~
name|src
index|[
name|i
index|]
argument_list|)
argument_list|,
name|const_alpha
argument_list|)
operator|+
name|cia
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|BYTE_MUL
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|sia
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*   result = s*da + d*sia   dest = s*da*ca + d*sia*ca + d *cia        = s*ca * da + d * (sia*ca + cia)        = s*ca * da + d * (1 - sa*ca) */
end_comment
begin_function
DECL|function|comp_func_solid_SourceAtop
name|void
name|QT_FASTCALL
name|comp_func_solid_SourceAtop
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
block|{
name|color
operator|=
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
block|}
name|uint
name|sia
init|=
name|qAlpha
argument_list|(
operator|~
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|color
argument_list|,
name|qAlpha
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
argument_list|,
name|dest
index|[
name|i
index|]
argument_list|,
name|sia
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_SourceAtop
name|void
name|QT_FASTCALL
name|comp_func_SourceAtop
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|s
argument_list|,
name|qAlpha
argument_list|(
name|d
argument_list|)
argument_list|,
name|d
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|s
init|=
name|BYTE_MUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|)
decl_stmt|;
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|s
argument_list|,
name|qAlpha
argument_list|(
name|d
argument_list|)
argument_list|,
name|d
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*   result = d*sa + s*dia   dest = d*sa*ca + s*dia*ca + d *cia        = s*ca * dia + d * (sa*ca + cia) */
end_comment
begin_function
DECL|function|comp_func_solid_DestinationAtop
name|void
name|QT_FASTCALL
name|comp_func_solid_DestinationAtop
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|uint
name|a
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
block|{
name|color
operator|=
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
name|a
operator|=
name|qAlpha
argument_list|(
name|color
argument_list|)
operator|+
literal|255
operator|-
name|const_alpha
expr_stmt|;
block|}
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|d
argument_list|,
name|a
argument_list|,
name|color
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_DestinationAtop
name|void
name|QT_FASTCALL
name|comp_func_DestinationAtop
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|d
argument_list|,
name|qAlpha
argument_list|(
name|s
argument_list|)
argument_list|,
name|s
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|cia
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|s
init|=
name|BYTE_MUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|)
decl_stmt|;
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|a
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
operator|+
name|cia
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|d
argument_list|,
name|a
argument_list|,
name|s
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*   result = d*sia + s*dia   dest = d*sia*ca + s*dia*ca + d *cia        = s*ca * dia + d * (sia*ca + cia)        = s*ca * dia + d * (1 - sa*ca) */
end_comment
begin_function
DECL|function|comp_func_solid_XOR
name|void
name|QT_FASTCALL
name|comp_func_solid_XOR
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
name|color
operator|=
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
name|uint
name|sia
init|=
name|qAlpha
argument_list|(
operator|~
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|color
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|d
argument_list|)
argument_list|,
name|d
argument_list|,
name|sia
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_XOR
name|void
name|QT_FASTCALL
name|comp_func_XOR
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|s
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|d
argument_list|)
argument_list|,
name|d
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|BYTE_MUL
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|)
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|s
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|d
argument_list|)
argument_list|,
name|d
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_struct
DECL|struct|QFullCoverage
struct|struct
name|QFullCoverage
block|{
DECL|function|store
specifier|inline
name|void
name|store
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
name|src
parameter_list|)
specifier|const
block|{
operator|*
name|dest
operator|=
name|src
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|QPartialCoverage
struct|struct
name|QPartialCoverage
block|{
DECL|function|QPartialCoverage
specifier|inline
name|QPartialCoverage
parameter_list|(
name|uint
name|const_alpha
parameter_list|)
member_init_list|:
name|ca
argument_list|(
name|const_alpha
argument_list|)
member_init_list|,
name|ica
argument_list|(
literal|255
operator|-
name|const_alpha
argument_list|)
block|{     }
DECL|function|store
specifier|inline
name|void
name|store
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
name|src
parameter_list|)
specifier|const
block|{
operator|*
name|dest
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|src
argument_list|,
name|ca
argument_list|,
operator|*
name|dest
argument_list|,
name|ica
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|ca
specifier|const
name|uint
name|ca
decl_stmt|;
DECL|member|ica
specifier|const
name|uint
name|ica
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|mix_alpha
specifier|static
specifier|inline
name|int
name|mix_alpha
parameter_list|(
name|int
name|da
parameter_list|,
name|int
name|sa
parameter_list|)
block|{
return|return
literal|255
operator|-
operator|(
operator|(
literal|255
operator|-
name|sa
operator|)
operator|*
operator|(
literal|255
operator|-
name|da
operator|)
operator|>>
literal|8
operator|)
return|;
block|}
end_function
begin_comment
comment|/*     Dca' = Sca.Da + Dca.Sa + Sca.(1 - Da) + Dca.(1 - Sa)          = Sca + Dca */
end_comment
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_Plus_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_solid_Plus_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|uint
name|s
init|=
name|color
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|d
operator|=
name|comp_func_Plus_one_pixel
argument_list|(
name|d
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_Plus
name|void
name|QT_FASTCALL
name|comp_func_solid_Plus
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_Plus_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_Plus_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_Plus_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_Plus_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|d
operator|=
name|comp_func_Plus_one_pixel
argument_list|(
name|d
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Plus
name|void
name|QT_FASTCALL
name|comp_func_Plus
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_Plus_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_Plus_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Dca' = Sca.Dca + Sca.(1 - Da) + Dca.(1 - Sa) */
end_comment
begin_function
DECL|function|multiply_op
specifier|static
specifier|inline
name|int
name|multiply_op
parameter_list|(
name|int
name|dst
parameter_list|,
name|int
name|src
parameter_list|,
name|int
name|da
parameter_list|,
name|int
name|sa
parameter_list|)
block|{
return|return
name|qt_div_255
argument_list|(
name|src
operator|*
name|dst
operator|+
name|src
operator|*
operator|(
literal|255
operator|-
name|da
operator|)
operator|+
name|dst
operator|*
operator|(
literal|255
operator|-
name|sa
operator|)
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_Multiply_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_solid_Multiply_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sr
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sg
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sb
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|multiply_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|sr
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|sg
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_Multiply
name|void
name|QT_FASTCALL
name|comp_func_solid_Multiply
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_Multiply_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_Multiply_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_Multiply_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_Multiply_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|multiply_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Multiply
name|void
name|QT_FASTCALL
name|comp_func_Multiply
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_Multiply_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_Multiply_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Dca' = (Sca.Da + Dca.Sa - Sca.Dca) + Sca.(1 - Da) + Dca.(1 - Sa)          = Sca + Dca - Sca.Dca */
end_comment
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_Screen_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_solid_Screen_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sr
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sg
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sb
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|255 - qt_div_255((255-a) * (255-b))
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|sr
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|sg
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_Screen
name|void
name|QT_FASTCALL
name|comp_func_solid_Screen
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_Screen_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_Screen_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_Screen_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_Screen_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|255 - (((255-a) * (255-b))>> 8)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Screen
name|void
name|QT_FASTCALL
name|comp_func_Screen
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_Screen_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_Screen_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     if 2.Dca< Da         Dca' = 2.Sca.Dca + Sca.(1 - Da) + Dca.(1 - Sa)     otherwise         Dca' = Sa.Da - 2.(Da - Dca).(Sa - Sca) + Sca.(1 - Da) + Dca.(1 - Sa) */
end_comment
begin_function
DECL|function|overlay_op
specifier|static
specifier|inline
name|int
name|overlay_op
parameter_list|(
name|int
name|dst
parameter_list|,
name|int
name|src
parameter_list|,
name|int
name|da
parameter_list|,
name|int
name|sa
parameter_list|)
block|{
specifier|const
name|int
name|temp
init|=
name|src
operator|*
operator|(
literal|255
operator|-
name|da
operator|)
operator|+
name|dst
operator|*
operator|(
literal|255
operator|-
name|sa
operator|)
decl_stmt|;
if|if
condition|(
literal|2
operator|*
name|dst
operator|<
name|da
condition|)
return|return
name|qt_div_255
argument_list|(
literal|2
operator|*
name|src
operator|*
name|dst
operator|+
name|temp
argument_list|)
return|;
else|else
return|return
name|qt_div_255
argument_list|(
name|sa
operator|*
name|da
operator|-
literal|2
operator|*
operator|(
name|da
operator|-
name|dst
operator|)
operator|*
operator|(
name|sa
operator|-
name|src
operator|)
operator|+
name|temp
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_Overlay_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_solid_Overlay_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sr
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sg
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sb
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|overlay_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|sr
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|sg
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_Overlay
name|void
name|QT_FASTCALL
name|comp_func_solid_Overlay
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_Overlay_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_Overlay_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_Overlay_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_Overlay_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|overlay_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Overlay
name|void
name|QT_FASTCALL
name|comp_func_Overlay
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_Overlay_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_Overlay_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Dca' = min(Sca.Da, Dca.Sa) + Sca.(1 - Da) + Dca.(1 - Sa)     Da'  = Sa + Da - Sa.Da */
end_comment
begin_function
DECL|function|darken_op
specifier|static
specifier|inline
name|int
name|darken_op
parameter_list|(
name|int
name|dst
parameter_list|,
name|int
name|src
parameter_list|,
name|int
name|da
parameter_list|,
name|int
name|sa
parameter_list|)
block|{
return|return
name|qt_div_255
argument_list|(
name|qMin
argument_list|(
name|src
operator|*
name|da
argument_list|,
name|dst
operator|*
name|sa
argument_list|)
operator|+
name|src
operator|*
operator|(
literal|255
operator|-
name|da
operator|)
operator|+
name|dst
operator|*
operator|(
literal|255
operator|-
name|sa
operator|)
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_Darken_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_solid_Darken_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sr
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sg
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sb
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|darken_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|sr
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|sg
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_Darken
name|void
name|QT_FASTCALL
name|comp_func_solid_Darken
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_Darken_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_Darken_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_Darken_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_Darken_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|darken_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Darken
name|void
name|QT_FASTCALL
name|comp_func_Darken
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_Darken_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_Darken_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*    Dca' = max(Sca.Da, Dca.Sa) + Sca.(1 - Da) + Dca.(1 - Sa)    Da'  = Sa + Da - Sa.Da */
end_comment
begin_function
DECL|function|lighten_op
specifier|static
specifier|inline
name|int
name|lighten_op
parameter_list|(
name|int
name|dst
parameter_list|,
name|int
name|src
parameter_list|,
name|int
name|da
parameter_list|,
name|int
name|sa
parameter_list|)
block|{
return|return
name|qt_div_255
argument_list|(
name|qMax
argument_list|(
name|src
operator|*
name|da
argument_list|,
name|dst
operator|*
name|sa
argument_list|)
operator|+
name|src
operator|*
operator|(
literal|255
operator|-
name|da
operator|)
operator|+
name|dst
operator|*
operator|(
literal|255
operator|-
name|sa
operator|)
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_Lighten_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_solid_Lighten_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sr
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sg
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sb
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|lighten_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|sr
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|sg
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_Lighten
name|void
name|QT_FASTCALL
name|comp_func_solid_Lighten
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_Lighten_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_Lighten_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_Lighten_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_Lighten_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|lighten_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Lighten
name|void
name|QT_FASTCALL
name|comp_func_Lighten
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_Lighten_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_Lighten_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*    if Sca.Da + Dca.Sa>= Sa.Da        Dca' = Sa.Da + Sca.(1 - Da) + Dca.(1 - Sa)    otherwise        Dca' = Dca.Sa/(1-Sca/Sa) + Sca.(1 - Da) + Dca.(1 - Sa) */
end_comment
begin_function
DECL|function|color_dodge_op
specifier|static
specifier|inline
name|int
name|color_dodge_op
parameter_list|(
name|int
name|dst
parameter_list|,
name|int
name|src
parameter_list|,
name|int
name|da
parameter_list|,
name|int
name|sa
parameter_list|)
block|{
specifier|const
name|int
name|sa_da
init|=
name|sa
operator|*
name|da
decl_stmt|;
specifier|const
name|int
name|dst_sa
init|=
name|dst
operator|*
name|sa
decl_stmt|;
specifier|const
name|int
name|src_da
init|=
name|src
operator|*
name|da
decl_stmt|;
specifier|const
name|int
name|temp
init|=
name|src
operator|*
operator|(
literal|255
operator|-
name|da
operator|)
operator|+
name|dst
operator|*
operator|(
literal|255
operator|-
name|sa
operator|)
decl_stmt|;
if|if
condition|(
name|src_da
operator|+
name|dst_sa
operator|>=
name|sa_da
condition|)
return|return
name|qt_div_255
argument_list|(
name|sa_da
operator|+
name|temp
argument_list|)
return|;
else|else
return|return
name|qt_div_255
argument_list|(
literal|255
operator|*
name|dst_sa
operator|/
operator|(
literal|255
operator|-
literal|255
operator|*
name|src
operator|/
name|sa
operator|)
operator|+
name|temp
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_ColorDodge_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_solid_ColorDodge_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sr
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sg
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sb
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|color_dodge_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|sr
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|sg
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_ColorDodge
name|void
name|QT_FASTCALL
name|comp_func_solid_ColorDodge
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_ColorDodge_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_ColorDodge_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_ColorDodge_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_ColorDodge_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|color_dodge_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_ColorDodge
name|void
name|QT_FASTCALL
name|comp_func_ColorDodge
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_ColorDodge_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_ColorDodge_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*    if Sca.Da + Dca.Sa<= Sa.Da        Dca' = Sca.(1 - Da) + Dca.(1 - Sa)    otherwise        Dca' = Sa.(Sca.Da + Dca.Sa - Sa.Da)/Sca + Sca.(1 - Da) + Dca.(1 - Sa) */
end_comment
begin_function
DECL|function|color_burn_op
specifier|static
specifier|inline
name|int
name|color_burn_op
parameter_list|(
name|int
name|dst
parameter_list|,
name|int
name|src
parameter_list|,
name|int
name|da
parameter_list|,
name|int
name|sa
parameter_list|)
block|{
specifier|const
name|int
name|src_da
init|=
name|src
operator|*
name|da
decl_stmt|;
specifier|const
name|int
name|dst_sa
init|=
name|dst
operator|*
name|sa
decl_stmt|;
specifier|const
name|int
name|sa_da
init|=
name|sa
operator|*
name|da
decl_stmt|;
specifier|const
name|int
name|temp
init|=
name|src
operator|*
operator|(
literal|255
operator|-
name|da
operator|)
operator|+
name|dst
operator|*
operator|(
literal|255
operator|-
name|sa
operator|)
decl_stmt|;
if|if
condition|(
name|src
operator|==
literal|0
operator|||
name|src_da
operator|+
name|dst_sa
operator|<=
name|sa_da
condition|)
return|return
name|qt_div_255
argument_list|(
name|temp
argument_list|)
return|;
return|return
name|qt_div_255
argument_list|(
name|sa
operator|*
operator|(
name|src_da
operator|+
name|dst_sa
operator|-
name|sa_da
operator|)
operator|/
name|src
operator|+
name|temp
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_ColorBurn_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_solid_ColorBurn_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sr
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sg
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sb
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|color_burn_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|sr
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|sg
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_ColorBurn
name|void
name|QT_FASTCALL
name|comp_func_solid_ColorBurn
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_ColorBurn_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_ColorBurn_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_ColorBurn_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_ColorBurn_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|color_burn_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_ColorBurn
name|void
name|QT_FASTCALL
name|comp_func_ColorBurn
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_ColorBurn_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_ColorBurn_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     if 2.Sca< Sa         Dca' = 2.Sca.Dca + Sca.(1 - Da) + Dca.(1 - Sa)     otherwise         Dca' = Sa.Da - 2.(Da - Dca).(Sa - Sca) + Sca.(1 - Da) + Dca.(1 - Sa) */
end_comment
begin_function
DECL|function|hardlight_op
specifier|static
specifier|inline
name|uint
name|hardlight_op
parameter_list|(
name|int
name|dst
parameter_list|,
name|int
name|src
parameter_list|,
name|int
name|da
parameter_list|,
name|int
name|sa
parameter_list|)
block|{
specifier|const
name|uint
name|temp
init|=
name|src
operator|*
operator|(
literal|255
operator|-
name|da
operator|)
operator|+
name|dst
operator|*
operator|(
literal|255
operator|-
name|sa
operator|)
decl_stmt|;
if|if
condition|(
literal|2
operator|*
name|src
operator|<
name|sa
condition|)
return|return
name|qt_div_255
argument_list|(
literal|2
operator|*
name|src
operator|*
name|dst
operator|+
name|temp
argument_list|)
return|;
else|else
return|return
name|qt_div_255
argument_list|(
name|sa
operator|*
name|da
operator|-
literal|2
operator|*
operator|(
name|da
operator|-
name|dst
operator|)
operator|*
operator|(
name|sa
operator|-
name|src
operator|)
operator|+
name|temp
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_HardLight_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_solid_HardLight_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sr
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sg
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sb
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|hardlight_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|sr
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|sg
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_HardLight
name|void
name|QT_FASTCALL
name|comp_func_solid_HardLight
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_HardLight_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_HardLight_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_HardLight_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_HardLight_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|hardlight_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_HardLight
name|void
name|QT_FASTCALL
name|comp_func_HardLight
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_HardLight_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_HardLight_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     if 2.Sca<= Sa         Dca' = Dca.(Sa + (2.Sca - Sa).(1 - Dca/Da)) + Sca.(1 - Da) + Dca.(1 - Sa)     otherwise if 2.Sca> Sa and 4.Dca<= Da         Dca' = Dca.Sa + Da.(2.Sca - Sa).(4.Dca/Da.(4.Dca/Da + 1).(Dca/Da - 1) + 7.Dca/Da) + Sca.(1 - Da) + Dca.(1 - Sa)     otherwise if 2.Sca> Sa and 4.Dca> Da         Dca' = Dca.Sa + Da.(2.Sca - Sa).((Dca/Da)^0.5 - Dca/Da) + Sca.(1 - Da) + Dca.(1 - Sa) */
end_comment
begin_function
DECL|function|soft_light_op
specifier|static
specifier|inline
name|int
name|soft_light_op
parameter_list|(
name|int
name|dst
parameter_list|,
name|int
name|src
parameter_list|,
name|int
name|da
parameter_list|,
name|int
name|sa
parameter_list|)
block|{
specifier|const
name|int
name|src2
init|=
name|src
operator|<<
literal|1
decl_stmt|;
specifier|const
name|int
name|dst_np
init|=
name|da
operator|!=
literal|0
condition|?
operator|(
literal|255
operator|*
name|dst
operator|)
operator|/
name|da
else|:
literal|0
decl_stmt|;
specifier|const
name|int
name|temp
init|=
operator|(
name|src
operator|*
operator|(
literal|255
operator|-
name|da
operator|)
operator|+
name|dst
operator|*
operator|(
literal|255
operator|-
name|sa
operator|)
operator|)
operator|*
literal|255
decl_stmt|;
if|if
condition|(
name|src2
operator|<
name|sa
condition|)
return|return
operator|(
name|dst
operator|*
operator|(
name|sa
operator|*
literal|255
operator|+
operator|(
name|src2
operator|-
name|sa
operator|)
operator|*
operator|(
literal|255
operator|-
name|dst_np
operator|)
operator|)
operator|+
name|temp
operator|)
operator|/
literal|65025
return|;
elseif|else
if|if
condition|(
literal|4
operator|*
name|dst
operator|<=
name|da
condition|)
return|return
operator|(
name|dst
operator|*
name|sa
operator|*
literal|255
operator|+
name|da
operator|*
operator|(
name|src2
operator|-
name|sa
operator|)
operator|*
operator|(
operator|(
operator|(
operator|(
literal|16
operator|*
name|dst_np
operator|-
literal|12
operator|*
literal|255
operator|)
operator|*
name|dst_np
operator|+
literal|3
operator|*
literal|65025
operator|)
operator|*
name|dst_np
operator|)
operator|/
literal|65025
operator|)
operator|+
name|temp
operator|)
operator|/
literal|65025
return|;
else|else
block|{
ifdef|#
directive|ifdef
name|Q_CC_RVCT
comment|// needed to avoid compiler crash in RVCT 2.2
return|return
operator|(
name|dst
operator|*
name|sa
operator|*
literal|255
operator|+
name|da
operator|*
operator|(
name|src2
operator|-
name|sa
operator|)
operator|*
operator|(
name|qIntSqrtInt
argument_list|(
name|dst_np
operator|*
literal|255
argument_list|)
operator|-
name|dst_np
operator|)
operator|+
name|temp
operator|)
operator|/
literal|65025
return|;
else|#
directive|else
return|return
operator|(
name|dst
operator|*
name|sa
operator|*
literal|255
operator|+
name|da
operator|*
operator|(
name|src2
operator|-
name|sa
operator|)
operator|*
operator|(
name|int
argument_list|(
name|qSqrt
argument_list|(
name|qreal
argument_list|(
name|dst_np
operator|*
literal|255
argument_list|)
argument_list|)
argument_list|)
operator|-
name|dst_np
operator|)
operator|+
name|temp
operator|)
operator|/
literal|65025
return|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_SoftLight_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_solid_SoftLight_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sr
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sg
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sb
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|soft_light_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|sr
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|sg
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_SoftLight
name|void
name|QT_FASTCALL
name|comp_func_solid_SoftLight
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_SoftLight_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_SoftLight_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_SoftLight_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_SoftLight_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|soft_light_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_SoftLight
name|void
name|QT_FASTCALL
name|comp_func_SoftLight
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_SoftLight_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_SoftLight_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*    Dca' = abs(Dca.Sa - Sca.Da) + Sca.(1 - Da) + Dca.(1 - Sa)         = Sca + Dca - 2.min(Sca.Da, Dca.Sa) */
end_comment
begin_function
DECL|function|difference_op
specifier|static
specifier|inline
name|int
name|difference_op
parameter_list|(
name|int
name|dst
parameter_list|,
name|int
name|src
parameter_list|,
name|int
name|da
parameter_list|,
name|int
name|sa
parameter_list|)
block|{
return|return
name|src
operator|+
name|dst
operator|-
name|qt_div_255
argument_list|(
literal|2
operator|*
name|qMin
argument_list|(
name|src
operator|*
name|da
argument_list|,
name|dst
operator|*
name|sa
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_Difference_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_solid_Difference_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sr
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sg
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sb
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|difference_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|sr
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|sg
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_Difference
name|void
name|QT_FASTCALL
name|comp_func_solid_Difference
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_Difference_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_Difference_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_Difference_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_Difference_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|difference_op(a, b, da, sa)
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Difference
name|void
name|QT_FASTCALL
name|comp_func_Difference
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_Difference_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_Difference_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Dca' = (Sca.Da + Dca.Sa - 2.Sca.Dca) + Sca.(1 - Da) + Dca.(1 - Sa) */
end_comment
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_solid_Exclusion_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|QT_FASTCALL
name|comp_func_solid_Exclusion_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sr
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sg
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sb
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|PRELOAD_INIT
argument_list|(
argument|dest
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND
argument_list|(
argument|dest
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|(a + b - qt_div_255(2*(a*b)))
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|sr
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|sg
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_Exclusion
name|void
name|QT_FASTCALL
name|comp_func_solid_Exclusion
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_solid_Exclusion_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_solid_Exclusion_impl
argument_list|(
name|dest
argument_list|,
name|length
argument_list|,
name|color
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|comp_func_Exclusion_impl
name|Q_STATIC_TEMPLATE_FUNCTION
specifier|inline
name|void
name|comp_func_Exclusion_impl
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|T
modifier|&
name|coverage
parameter_list|)
block|{
name|PRELOAD_INIT2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PRELOAD_COND2
argument_list|(
argument|dest
argument_list|,
argument|src
argument_list|)
name|uint
name|d
init|=
name|dest
index|[
name|i
index|]
decl_stmt|;
name|uint
name|s
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|int
name|da
init|=
name|qAlpha
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|s
argument_list|)
decl_stmt|;
DECL|macro|OP
define|#
directive|define
name|OP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|(a + b - ((a*b)>> 7))
name|int
name|r
init|=
name|OP
argument_list|(
name|qRed
argument_list|(
name|d
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|OP
argument_list|(
name|qBlue
argument_list|(
name|d
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|OP
argument_list|(
name|qGreen
argument_list|(
name|d
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|mix_alpha
argument_list|(
name|da
argument_list|,
name|sa
argument_list|)
decl_stmt|;
DECL|macro|OP
undef|#
directive|undef
name|OP
name|coverage
operator|.
name|store
argument_list|(
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
name|qRgba
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Exclusion
name|void
name|QT_FASTCALL
name|comp_func_Exclusion
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
name|comp_func_Exclusion_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QFullCoverage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comp_func_Exclusion_impl
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|QPartialCoverage
argument_list|(
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_RVCT
argument_list|)
end_if
begin_comment
comment|// Restore pragma state from previous #pragma arm
end_comment
begin_pragma
pragma|#
directive|pragma
name|pop
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|rasterop_solid_SourceOrDestination
name|void
name|QT_FASTCALL
name|rasterop_solid_SourceOrDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
operator|*
name|dest
operator|++
operator||=
name|color
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rasterop_SourceOrDestination
name|void
name|QT_FASTCALL
name|rasterop_SourceOrDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
operator|*
name|dest
operator|++
operator||=
operator|*
name|src
operator|++
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rasterop_solid_SourceAndDestination
name|void
name|QT_FASTCALL
name|rasterop_solid_SourceAndDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
name|color
operator||=
literal|0xff000000
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
operator|*
name|dest
operator|++
operator|&=
name|color
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rasterop_SourceAndDestination
name|void
name|QT_FASTCALL
name|rasterop_SourceAndDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
operator|(
operator|*
name|src
operator|&
operator|*
name|dest
operator|)
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|dest
expr_stmt|;
operator|++
name|src
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_solid_SourceXorDestination
name|void
name|QT_FASTCALL
name|rasterop_solid_SourceXorDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
name|color
operator|&=
literal|0x00ffffff
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
operator|*
name|dest
operator|++
operator|^=
name|color
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rasterop_SourceXorDestination
name|void
name|QT_FASTCALL
name|rasterop_SourceXorDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
operator|(
operator|*
name|src
operator|^
operator|*
name|dest
operator|)
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|dest
expr_stmt|;
operator|++
name|src
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_solid_NotSourceAndNotDestination
name|void
name|QT_FASTCALL
name|rasterop_solid_NotSourceAndNotDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
name|color
operator|=
operator|~
name|color
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
operator|(
name|color
operator|&
operator|~
operator|(
operator|*
name|dest
operator|)
operator|)
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|dest
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_NotSourceAndNotDestination
name|void
name|QT_FASTCALL
name|rasterop_NotSourceAndNotDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
operator|(
operator|~
operator|(
operator|*
name|src
operator|)
operator|&
operator|~
operator|(
operator|*
name|dest
operator|)
operator|)
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|dest
expr_stmt|;
operator|++
name|src
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_solid_NotSourceOrNotDestination
name|void
name|QT_FASTCALL
name|rasterop_solid_NotSourceOrNotDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
name|color
operator|=
operator|~
name|color
operator||
literal|0xff000000
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
name|color
operator||
operator|~
operator|(
operator|*
name|dest
operator|)
expr_stmt|;
operator|++
name|dest
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_NotSourceOrNotDestination
name|void
name|QT_FASTCALL
name|rasterop_NotSourceOrNotDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
operator|~
operator|(
operator|*
name|src
operator|)
operator||
operator|~
operator|(
operator|*
name|dest
operator|)
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|dest
expr_stmt|;
operator|++
name|src
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_solid_NotSourceXorDestination
name|void
name|QT_FASTCALL
name|rasterop_solid_NotSourceXorDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
name|color
operator|=
operator|~
name|color
operator|&
literal|0x00ffffff
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
name|color
operator|^
operator|(
operator|*
name|dest
operator|)
expr_stmt|;
operator|++
name|dest
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_NotSourceXorDestination
name|void
name|QT_FASTCALL
name|rasterop_NotSourceXorDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
operator|(
operator|(
operator|~
operator|(
operator|*
name|src
operator|)
operator|)
operator|^
operator|(
operator|*
name|dest
operator|)
operator|)
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|dest
expr_stmt|;
operator|++
name|src
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_solid_NotSource
name|void
name|QT_FASTCALL
name|rasterop_solid_NotSource
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
name|qt_memfill
argument_list|(
name|dest
argument_list|,
operator|~
name|color
operator||
literal|0xff000000
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rasterop_NotSource
name|void
name|QT_FASTCALL
name|rasterop_NotSource
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
operator|*
name|dest
operator|++
operator|=
operator|~
operator|(
operator|*
name|src
operator|++
operator|)
operator||
literal|0xff000000
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rasterop_solid_NotSourceAndDestination
name|void
name|QT_FASTCALL
name|rasterop_solid_NotSourceAndDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
name|color
operator|=
operator|~
name|color
operator||
literal|0xff000000
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
name|color
operator|&
operator|*
name|dest
expr_stmt|;
operator|++
name|dest
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_NotSourceAndDestination
name|void
name|QT_FASTCALL
name|rasterop_NotSourceAndDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
operator|(
operator|~
operator|(
operator|*
name|src
operator|)
operator|&
operator|*
name|dest
operator|)
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|dest
expr_stmt|;
operator|++
name|src
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_solid_SourceAndNotDestination
name|void
name|QT_FASTCALL
name|rasterop_solid_SourceAndNotDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
operator|(
name|color
operator|&
operator|~
operator|(
operator|*
name|dest
operator|)
operator|)
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|dest
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rasterop_SourceAndNotDestination
name|void
name|QT_FASTCALL
name|rasterop_SourceAndNotDestination
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|const_alpha
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
operator|(
operator|*
name|src
operator|&
operator|~
operator|(
operator|*
name|dest
operator|)
operator|)
operator||
literal|0xff000000
expr_stmt|;
operator|++
name|dest
expr_stmt|;
operator|++
name|src
expr_stmt|;
block|}
block|}
end_function
begin_decl_stmt
DECL|variable|functionForModeSolid_C
specifier|static
name|CompositionFunctionSolid
name|functionForModeSolid_C
index|[]
init|=
block|{
name|comp_func_solid_SourceOver
block|,
name|comp_func_solid_DestinationOver
block|,
name|comp_func_solid_Clear
block|,
name|comp_func_solid_Source
block|,
name|comp_func_solid_Destination
block|,
name|comp_func_solid_SourceIn
block|,
name|comp_func_solid_DestinationIn
block|,
name|comp_func_solid_SourceOut
block|,
name|comp_func_solid_DestinationOut
block|,
name|comp_func_solid_SourceAtop
block|,
name|comp_func_solid_DestinationAtop
block|,
name|comp_func_solid_XOR
block|,
name|comp_func_solid_Plus
block|,
name|comp_func_solid_Multiply
block|,
name|comp_func_solid_Screen
block|,
name|comp_func_solid_Overlay
block|,
name|comp_func_solid_Darken
block|,
name|comp_func_solid_Lighten
block|,
name|comp_func_solid_ColorDodge
block|,
name|comp_func_solid_ColorBurn
block|,
name|comp_func_solid_HardLight
block|,
name|comp_func_solid_SoftLight
block|,
name|comp_func_solid_Difference
block|,
name|comp_func_solid_Exclusion
block|,
name|rasterop_solid_SourceOrDestination
block|,
name|rasterop_solid_SourceAndDestination
block|,
name|rasterop_solid_SourceXorDestination
block|,
name|rasterop_solid_NotSourceAndNotDestination
block|,
name|rasterop_solid_NotSourceOrNotDestination
block|,
name|rasterop_solid_NotSourceXorDestination
block|,
name|rasterop_solid_NotSource
block|,
name|rasterop_solid_NotSourceAndDestination
block|,
name|rasterop_solid_SourceAndNotDestination
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|functionForModeSolid
specifier|static
specifier|const
name|CompositionFunctionSolid
modifier|*
name|functionForModeSolid
init|=
name|functionForModeSolid_C
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|functionForMode_C
specifier|static
name|CompositionFunction
name|functionForMode_C
index|[]
init|=
block|{
name|comp_func_SourceOver
block|,
name|comp_func_DestinationOver
block|,
name|comp_func_Clear
block|,
name|comp_func_Source
block|,
name|comp_func_Destination
block|,
name|comp_func_SourceIn
block|,
name|comp_func_DestinationIn
block|,
name|comp_func_SourceOut
block|,
name|comp_func_DestinationOut
block|,
name|comp_func_SourceAtop
block|,
name|comp_func_DestinationAtop
block|,
name|comp_func_XOR
block|,
name|comp_func_Plus
block|,
name|comp_func_Multiply
block|,
name|comp_func_Screen
block|,
name|comp_func_Overlay
block|,
name|comp_func_Darken
block|,
name|comp_func_Lighten
block|,
name|comp_func_ColorDodge
block|,
name|comp_func_ColorBurn
block|,
name|comp_func_HardLight
block|,
name|comp_func_SoftLight
block|,
name|comp_func_Difference
block|,
name|comp_func_Exclusion
block|,
name|rasterop_SourceOrDestination
block|,
name|rasterop_SourceAndDestination
block|,
name|rasterop_SourceXorDestination
block|,
name|rasterop_NotSourceAndNotDestination
block|,
name|rasterop_NotSourceOrNotDestination
block|,
name|rasterop_NotSourceXorDestination
block|,
name|rasterop_NotSource
block|,
name|rasterop_NotSourceAndDestination
block|,
name|rasterop_SourceAndNotDestination
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|functionForMode
specifier|static
specifier|const
name|CompositionFunction
modifier|*
name|functionForMode
init|=
name|functionForMode_C
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|getBlendType
specifier|static
name|TextureBlendType
name|getBlendType
parameter_list|(
specifier|const
name|QSpanData
modifier|*
name|data
parameter_list|)
block|{
name|TextureBlendType
name|ft
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|txop
operator|<=
name|QTransform
operator|::
name|TxTranslate
condition|)
if|if
condition|(
name|data
operator|->
name|texture
operator|.
name|type
operator|==
name|QTextureData
operator|::
name|Tiled
condition|)
name|ft
operator|=
name|BlendTiled
expr_stmt|;
else|else
name|ft
operator|=
name|BlendUntransformed
expr_stmt|;
elseif|else
if|if
condition|(
name|data
operator|->
name|bilinear
condition|)
if|if
condition|(
name|data
operator|->
name|texture
operator|.
name|type
operator|==
name|QTextureData
operator|::
name|Tiled
condition|)
name|ft
operator|=
name|BlendTransformedBilinearTiled
expr_stmt|;
else|else
name|ft
operator|=
name|BlendTransformedBilinear
expr_stmt|;
elseif|else
if|if
condition|(
name|data
operator|->
name|texture
operator|.
name|type
operator|==
name|QTextureData
operator|::
name|Tiled
condition|)
name|ft
operator|=
name|BlendTransformedTiled
expr_stmt|;
else|else
name|ft
operator|=
name|BlendTransformed
expr_stmt|;
return|return
name|ft
return|;
block|}
end_function
begin_function
DECL|function|getOperator
specifier|static
specifier|inline
name|Operator
name|getOperator
parameter_list|(
specifier|const
name|QSpanData
modifier|*
name|data
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|int
name|spanCount
parameter_list|)
block|{
name|Operator
name|op
decl_stmt|;
name|bool
name|solidSource
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|data
operator|->
name|type
condition|)
block|{
case|case
name|QSpanData
operator|::
name|Solid
case|:
name|solidSource
operator|=
operator|(
name|qAlpha
argument_list|(
name|data
operator|->
name|solid
operator|.
name|color
argument_list|)
operator|==
literal|255
operator|)
expr_stmt|;
break|break;
case|case
name|QSpanData
operator|::
name|LinearGradient
case|:
name|solidSource
operator|=
operator|!
name|data
operator|->
name|gradient
operator|.
name|alphaColor
expr_stmt|;
name|getLinearGradientValues
argument_list|(
operator|&
name|op
operator|.
name|linear
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|op
operator|.
name|src_fetch
operator|=
name|qt_fetch_linear_gradient
expr_stmt|;
break|break;
case|case
name|QSpanData
operator|::
name|RadialGradient
case|:
name|solidSource
operator|=
operator|!
name|data
operator|->
name|gradient
operator|.
name|alphaColor
expr_stmt|;
name|getRadialGradientValues
argument_list|(
operator|&
name|op
operator|.
name|radial
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|op
operator|.
name|src_fetch
operator|=
name|qt_fetch_radial_gradient
expr_stmt|;
break|break;
case|case
name|QSpanData
operator|::
name|ConicalGradient
case|:
name|solidSource
operator|=
operator|!
name|data
operator|->
name|gradient
operator|.
name|alphaColor
expr_stmt|;
name|op
operator|.
name|src_fetch
operator|=
name|qt_fetch_conical_gradient
expr_stmt|;
break|break;
case|case
name|QSpanData
operator|::
name|Texture
case|:
name|op
operator|.
name|src_fetch
operator|=
name|sourceFetch
index|[
name|getBlendType
argument_list|(
name|data
argument_list|)
index|]
index|[
name|data
operator|->
name|texture
operator|.
name|format
index|]
expr_stmt|;
name|solidSource
operator|=
operator|!
name|data
operator|->
name|texture
operator|.
name|hasAlpha
expr_stmt|;
default|default:
break|break;
block|}
name|op
operator|.
name|mode
operator|=
name|data
operator|->
name|rasterBuffer
operator|->
name|compositionMode
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|mode
operator|==
name|QPainter
operator|::
name|CompositionMode_SourceOver
operator|&&
name|solidSource
condition|)
name|op
operator|.
name|mode
operator|=
name|QPainter
operator|::
name|CompositionMode_Source
expr_stmt|;
name|op
operator|.
name|dest_fetch
operator|=
name|destFetchProc
index|[
name|data
operator|->
name|rasterBuffer
operator|->
name|format
index|]
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|mode
operator|==
name|QPainter
operator|::
name|CompositionMode_Source
condition|)
block|{
switch|switch
condition|(
name|data
operator|->
name|rasterBuffer
operator|->
name|format
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_RGB32
case|:
case|case
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
case|:
comment|// don't clear dest_fetch as it sets up the pointer correctly to save one copy
break|break;
default|default:
block|{
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|QSpanData
operator|::
name|Texture
operator|&&
name|data
operator|->
name|texture
operator|.
name|const_alpha
operator|!=
literal|256
condition|)
break|break;
specifier|const
name|QSpan
modifier|*
name|lastSpan
init|=
name|spans
operator|+
name|spanCount
decl_stmt|;
name|bool
name|alphaSpans
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|spans
operator|<
name|lastSpan
condition|)
block|{
if|if
condition|(
name|spans
operator|->
name|coverage
operator|!=
literal|255
condition|)
block|{
name|alphaSpans
operator|=
literal|true
expr_stmt|;
break|break;
block|}
operator|++
name|spans
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|alphaSpans
condition|)
name|op
operator|.
name|dest_fetch
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
name|op
operator|.
name|dest_store
operator|=
name|destStoreProc
index|[
name|data
operator|->
name|rasterBuffer
operator|->
name|format
index|]
expr_stmt|;
name|op
operator|.
name|funcSolid
operator|=
name|functionForModeSolid
index|[
name|op
operator|.
name|mode
index|]
expr_stmt|;
name|op
operator|.
name|func
operator|=
name|functionForMode
index|[
name|op
operator|.
name|mode
index|]
expr_stmt|;
return|return
name|op
return|;
block|}
end_function
begin_comment
comment|// -------------------- blend methods ---------------------
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_CC_SUN
argument_list|)
end_if
begin_function
specifier|static
endif|#
directive|endif
DECL|function|blend_color_generic
name|void
name|blend_color_generic
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
block|{
name|QSpanData
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|QSpanData
operator|*
argument_list|>
argument_list|(
name|userData
argument_list|)
decl_stmt|;
name|uint
name|buffer
index|[
name|buffer_size
index|]
decl_stmt|;
name|Operator
name|op
init|=
name|getOperator
argument_list|(
name|data
argument_list|,
name|spans
argument_list|,
name|count
argument_list|)
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|int
name|x
init|=
name|spans
operator|->
name|x
decl_stmt|;
name|int
name|length
init|=
name|spans
operator|->
name|len
decl_stmt|;
while|while
condition|(
name|length
condition|)
block|{
name|int
name|l
init|=
name|qMin
argument_list|(
name|buffer_size
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|uint
modifier|*
name|dest
init|=
name|op
operator|.
name|dest_fetch
condition|?
name|op
operator|.
name|dest_fetch
argument_list|(
name|buffer
argument_list|,
name|data
operator|->
name|rasterBuffer
argument_list|,
name|x
argument_list|,
name|spans
operator|->
name|y
argument_list|,
name|l
argument_list|)
else|:
name|buffer
decl_stmt|;
name|op
operator|.
name|funcSolid
argument_list|(
name|dest
argument_list|,
name|l
argument_list|,
name|data
operator|->
name|solid
operator|.
name|color
argument_list|,
name|spans
operator|->
name|coverage
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|dest_store
condition|)
name|op
operator|.
name|dest_store
argument_list|(
name|data
operator|->
name|rasterBuffer
argument_list|,
name|x
argument_list|,
name|spans
operator|->
name|y
argument_list|,
name|dest
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|length
operator|-=
name|l
expr_stmt|;
name|x
operator|+=
name|l
expr_stmt|;
block|}
operator|++
name|spans
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|blend_color_argb
specifier|static
name|void
name|blend_color_argb
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
block|{
name|QSpanData
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|QSpanData
operator|*
argument_list|>
argument_list|(
name|userData
argument_list|)
decl_stmt|;
name|Operator
name|op
init|=
name|getOperator
argument_list|(
name|data
argument_list|,
name|spans
argument_list|,
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|mode
operator|==
name|QPainter
operator|::
name|CompositionMode_Source
condition|)
block|{
comment|// inline for performance
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|uint
modifier|*
name|target
init|=
operator|(
operator|(
name|uint
operator|*
operator|)
name|data
operator|->
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|spans
operator|->
name|y
argument_list|)
operator|)
operator|+
name|spans
operator|->
name|x
decl_stmt|;
if|if
condition|(
name|spans
operator|->
name|coverage
operator|==
literal|255
condition|)
block|{
name|QT_MEMFILL_UINT
argument_list|(
name|target
argument_list|,
name|spans
operator|->
name|len
argument_list|,
name|data
operator|->
name|solid
operator|.
name|color
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uint
name|c
init|=
name|BYTE_MUL
argument_list|(
name|data
operator|->
name|solid
operator|.
name|color
argument_list|,
name|spans
operator|->
name|coverage
argument_list|)
decl_stmt|;
name|int
name|ialpha
init|=
literal|255
operator|-
name|spans
operator|->
name|coverage
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|spans
operator|->
name|len
condition|;
operator|++
name|i
control|)
name|target
index|[
name|i
index|]
operator|=
name|c
operator|+
name|BYTE_MUL
argument_list|(
name|target
index|[
name|i
index|]
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
block|}
operator|++
name|spans
expr_stmt|;
block|}
return|return;
block|}
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|uint
modifier|*
name|target
init|=
operator|(
operator|(
name|uint
operator|*
operator|)
name|data
operator|->
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|spans
operator|->
name|y
argument_list|)
operator|)
operator|+
name|spans
operator|->
name|x
decl_stmt|;
name|op
operator|.
name|funcSolid
argument_list|(
name|target
argument_list|,
name|spans
operator|->
name|len
argument_list|,
name|data
operator|->
name|solid
operator|.
name|color
argument_list|,
name|spans
operator|->
name|coverage
argument_list|)
expr_stmt|;
operator|++
name|spans
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|blend_color_rgb16
specifier|static
name|void
name|blend_color_rgb16
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
block|{
name|QSpanData
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|QSpanData
operator|*
argument_list|>
argument_list|(
name|userData
argument_list|)
decl_stmt|;
comment|/*         We duplicate a little logic from getOperator() and calculate the         composition mode directly.  This allows blend_color_rgb16 to be used         from qt_gradient_quint16 with minimal overhead.      */
name|QPainter
operator|::
name|CompositionMode
name|mode
init|=
name|data
operator|->
name|rasterBuffer
operator|->
name|compositionMode
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|QPainter
operator|::
name|CompositionMode_SourceOver
operator|&&
name|qAlpha
argument_list|(
name|data
operator|->
name|solid
operator|.
name|color
argument_list|)
operator|==
literal|255
condition|)
name|mode
operator|=
name|QPainter
operator|::
name|CompositionMode_Source
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|QPainter
operator|::
name|CompositionMode_Source
condition|)
block|{
comment|// inline for performance
name|ushort
name|c
init|=
name|qConvertRgb32To16
argument_list|(
name|data
operator|->
name|solid
operator|.
name|color
argument_list|)
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|ushort
modifier|*
name|target
init|=
operator|(
operator|(
name|ushort
operator|*
operator|)
name|data
operator|->
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|spans
operator|->
name|y
argument_list|)
operator|)
operator|+
name|spans
operator|->
name|x
decl_stmt|;
if|if
condition|(
name|spans
operator|->
name|coverage
operator|==
literal|255
condition|)
block|{
name|QT_MEMFILL_USHORT
argument_list|(
name|target
argument_list|,
name|spans
operator|->
name|len
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ushort
name|color
init|=
name|BYTE_MUL_RGB16
argument_list|(
name|c
argument_list|,
name|spans
operator|->
name|coverage
argument_list|)
decl_stmt|;
name|int
name|ialpha
init|=
literal|255
operator|-
name|spans
operator|->
name|coverage
decl_stmt|;
specifier|const
name|ushort
modifier|*
name|end
init|=
name|target
operator|+
name|spans
operator|->
name|len
decl_stmt|;
while|while
condition|(
name|target
operator|<
name|end
condition|)
block|{
operator|*
name|target
operator|=
name|color
operator|+
name|BYTE_MUL_RGB16
argument_list|(
operator|*
name|target
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
operator|++
name|target
expr_stmt|;
block|}
block|}
operator|++
name|spans
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|mode
operator|==
name|QPainter
operator|::
name|CompositionMode_SourceOver
condition|)
block|{
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|uint
name|color
init|=
name|BYTE_MUL
argument_list|(
name|data
operator|->
name|solid
operator|.
name|color
argument_list|,
name|spans
operator|->
name|coverage
argument_list|)
decl_stmt|;
name|int
name|ialpha
init|=
name|qAlpha
argument_list|(
operator|~
name|color
argument_list|)
decl_stmt|;
name|ushort
name|c
init|=
name|qConvertRgb32To16
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|ushort
modifier|*
name|target
init|=
operator|(
operator|(
name|ushort
operator|*
operator|)
name|data
operator|->
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|spans
operator|->
name|y
argument_list|)
operator|)
operator|+
name|spans
operator|->
name|x
decl_stmt|;
name|int
name|len
init|=
name|spans
operator|->
name|len
decl_stmt|;
name|bool
name|pre
init|=
operator|(
operator|(
operator|(
name|quintptr
operator|)
name|target
operator|)
operator|&
literal|0x3
operator|)
operator|!=
literal|0
decl_stmt|;
name|bool
name|post
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|pre
condition|)
block|{
comment|// skip to word boundary
operator|*
name|target
operator|=
name|c
operator|+
name|BYTE_MUL_RGB16
argument_list|(
operator|*
name|target
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
operator|++
name|target
expr_stmt|;
operator|--
name|len
expr_stmt|;
block|}
if|if
condition|(
name|len
operator|&
literal|0x1
condition|)
block|{
name|post
operator|=
literal|true
expr_stmt|;
operator|--
name|len
expr_stmt|;
block|}
name|uint
modifier|*
name|target32
init|=
operator|(
name|uint
operator|*
operator|)
name|target
decl_stmt|;
name|uint
name|c32
init|=
name|c
operator||
operator|(
name|c
operator|<<
literal|16
operator|)
decl_stmt|;
name|len
operator|>>=
literal|1
expr_stmt|;
name|uint
name|salpha
init|=
operator|(
name|ialpha
operator|+
literal|1
operator|)
operator|>>
literal|3
decl_stmt|;
comment|// calculate here rather than in loop
while|while
condition|(
name|len
operator|--
condition|)
block|{
comment|// blend full words
operator|*
name|target32
operator|=
name|c32
operator|+
name|BYTE_MUL_RGB16_32
argument_list|(
operator|*
name|target32
argument_list|,
name|salpha
argument_list|)
expr_stmt|;
operator|++
name|target32
expr_stmt|;
name|target
operator|+=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|post
condition|)
block|{
comment|// one last pixel beyond a full word
operator|*
name|target
operator|=
name|c
operator|+
name|BYTE_MUL_RGB16
argument_list|(
operator|*
name|target
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
block|}
operator|++
name|spans
expr_stmt|;
block|}
return|return;
block|}
name|blend_color_generic
argument_list|(
name|count
argument_list|,
name|spans
argument_list|,
name|userData
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|handleSpans
name|void
name|handleSpans
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
specifier|const
name|QSpanData
modifier|*
name|data
parameter_list|,
name|T
modifier|&
name|handler
parameter_list|)
block|{
name|uint
name|const_alpha
init|=
literal|256
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|QSpanData
operator|::
name|Texture
condition|)
name|const_alpha
operator|=
name|data
operator|->
name|texture
operator|.
name|const_alpha
expr_stmt|;
name|int
name|coverage
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|count
condition|)
block|{
name|int
name|x
init|=
name|spans
operator|->
name|x
decl_stmt|;
specifier|const
name|int
name|y
init|=
name|spans
operator|->
name|y
decl_stmt|;
name|int
name|right
init|=
name|x
operator|+
name|spans
operator|->
name|len
decl_stmt|;
comment|// compute length of adjacent spans
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|count
operator|&&
name|spans
index|[
name|i
index|]
operator|.
name|y
operator|==
name|y
operator|&&
name|spans
index|[
name|i
index|]
operator|.
name|x
operator|==
name|right
condition|;
operator|++
name|i
control|)
name|right
operator|+=
name|spans
index|[
name|i
index|]
operator|.
name|len
expr_stmt|;
name|int
name|length
init|=
name|right
operator|-
name|x
decl_stmt|;
while|while
condition|(
name|length
condition|)
block|{
name|int
name|l
init|=
name|qMin
argument_list|(
name|buffer_size
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|length
operator|-=
name|l
expr_stmt|;
name|int
name|process_length
init|=
name|l
decl_stmt|;
name|int
name|process_x
init|=
name|x
decl_stmt|;
specifier|const
name|uint
modifier|*
name|src
init|=
name|handler
operator|.
name|fetch
argument_list|(
name|process_x
argument_list|,
name|y
argument_list|,
name|process_length
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|l
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|x
operator|==
name|spans
operator|->
name|x
condition|)
comment|// new span?
name|coverage
operator|=
operator|(
name|spans
operator|->
name|coverage
operator|*
name|const_alpha
operator|)
operator|>>
literal|8
expr_stmt|;
name|int
name|right
init|=
name|spans
operator|->
name|x
operator|+
name|spans
operator|->
name|len
decl_stmt|;
name|int
name|len
init|=
name|qMin
argument_list|(
name|l
argument_list|,
name|right
operator|-
name|x
argument_list|)
decl_stmt|;
name|handler
operator|.
name|process
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|len
argument_list|,
name|coverage
argument_list|,
name|src
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|l
operator|-=
name|len
expr_stmt|;
name|x
operator|+=
name|len
expr_stmt|;
name|offset
operator|+=
name|len
expr_stmt|;
if|if
condition|(
name|x
operator|==
name|right
condition|)
block|{
comment|// done with current span?
operator|++
name|spans
expr_stmt|;
operator|--
name|count
expr_stmt|;
block|}
block|}
name|handler
operator|.
name|store
argument_list|(
name|process_x
argument_list|,
name|y
argument_list|,
name|process_length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_struct
DECL|struct|QBlendBase
struct|struct
name|QBlendBase
block|{
DECL|function|QBlendBase
name|QBlendBase
parameter_list|(
name|QSpanData
modifier|*
name|d
parameter_list|,
name|Operator
name|o
parameter_list|)
member_init_list|:
name|data
argument_list|(
name|d
argument_list|)
member_init_list|,
name|op
argument_list|(
name|o
argument_list|)
member_init_list|,
name|dest
argument_list|(
literal|0
argument_list|)
block|{     }
DECL|member|data
name|QSpanData
modifier|*
name|data
decl_stmt|;
DECL|member|op
name|Operator
name|op
decl_stmt|;
DECL|member|dest
name|uint
modifier|*
name|dest
decl_stmt|;
DECL|member|buffer
name|uint
name|buffer
index|[
name|buffer_size
index|]
decl_stmt|;
DECL|member|src_buffer
name|uint
name|src_buffer
index|[
name|buffer_size
index|]
decl_stmt|;
block|}
struct|;
end_struct
begin_class
DECL|class|BlendSrcGeneric
class|class
name|BlendSrcGeneric
super|:
specifier|public
name|QBlendBase
block|{
public|public:
DECL|function|BlendSrcGeneric
name|BlendSrcGeneric
parameter_list|(
name|QSpanData
modifier|*
name|d
parameter_list|,
name|Operator
name|o
parameter_list|)
member_init_list|:
name|QBlendBase
argument_list|(
name|d
argument_list|,
name|o
argument_list|)
block|{     }
DECL|function|fetch
specifier|const
name|uint
modifier|*
name|fetch
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|dest
operator|=
name|op
operator|.
name|dest_fetch
condition|?
name|op
operator|.
name|dest_fetch
argument_list|(
name|buffer
argument_list|,
name|data
operator|->
name|rasterBuffer
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|len
argument_list|)
else|:
name|buffer
expr_stmt|;
return|return
name|op
operator|.
name|src_fetch
argument_list|(
name|src_buffer
argument_list|,
operator|&
name|op
argument_list|,
name|data
argument_list|,
name|y
argument_list|,
name|x
argument_list|,
name|len
argument_list|)
return|;
block|}
DECL|function|process
name|void
name|process
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|coverage
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|op
operator|.
name|func
argument_list|(
name|dest
operator|+
name|offset
argument_list|,
name|src
operator|+
name|offset
argument_list|,
name|len
argument_list|,
name|coverage
argument_list|)
expr_stmt|;
block|}
DECL|function|store
name|void
name|store
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|op
operator|.
name|dest_store
condition|)
name|op
operator|.
name|dest_store
argument_list|(
name|data
operator|->
name|rasterBuffer
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|dest
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|blend_src_generic
specifier|static
name|void
name|blend_src_generic
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
block|{
name|QSpanData
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|QSpanData
operator|*
argument_list|>
argument_list|(
name|userData
argument_list|)
decl_stmt|;
name|BlendSrcGeneric
name|blend
argument_list|(
name|data
argument_list|,
name|getOperator
argument_list|(
name|data
argument_list|,
name|spans
argument_list|,
name|count
argument_list|)
argument_list|)
decl_stmt|;
name|handleSpans
argument_list|(
name|count
argument_list|,
name|spans
argument_list|,
name|data
argument_list|,
name|blend
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blend_untransformed_generic
specifier|static
name|void
name|blend_untransformed_generic
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
block|{
name|QSpanData
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|QSpanData
operator|*
argument_list|>
argument_list|(
name|userData
argument_list|)
decl_stmt|;
name|uint
name|buffer
index|[
name|buffer_size
index|]
decl_stmt|;
name|uint
name|src_buffer
index|[
name|buffer_size
index|]
decl_stmt|;
name|Operator
name|op
init|=
name|getOperator
argument_list|(
name|data
argument_list|,
name|spans
argument_list|,
name|count
argument_list|)
decl_stmt|;
specifier|const
name|int
name|image_width
init|=
name|data
operator|->
name|texture
operator|.
name|width
decl_stmt|;
specifier|const
name|int
name|image_height
init|=
name|data
operator|->
name|texture
operator|.
name|height
decl_stmt|;
name|int
name|xoff
init|=
operator|-
name|qRound
argument_list|(
operator|-
name|data
operator|->
name|dx
argument_list|)
decl_stmt|;
name|int
name|yoff
init|=
operator|-
name|qRound
argument_list|(
operator|-
name|data
operator|->
name|dy
argument_list|)
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|int
name|x
init|=
name|spans
operator|->
name|x
decl_stmt|;
name|int
name|length
init|=
name|spans
operator|->
name|len
decl_stmt|;
name|int
name|sx
init|=
name|xoff
operator|+
name|x
decl_stmt|;
name|int
name|sy
init|=
name|yoff
operator|+
name|spans
operator|->
name|y
decl_stmt|;
if|if
condition|(
name|sy
operator|>=
literal|0
operator|&&
name|sy
operator|<
name|image_height
operator|&&
name|sx
operator|<
name|image_width
condition|)
block|{
if|if
condition|(
name|sx
operator|<
literal|0
condition|)
block|{
name|x
operator|-=
name|sx
expr_stmt|;
name|length
operator|+=
name|sx
expr_stmt|;
name|sx
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|sx
operator|+
name|length
operator|>
name|image_width
condition|)
name|length
operator|=
name|image_width
operator|-
name|sx
expr_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
specifier|const
name|int
name|coverage
init|=
operator|(
name|spans
operator|->
name|coverage
operator|*
name|data
operator|->
name|texture
operator|.
name|const_alpha
operator|)
operator|>>
literal|8
decl_stmt|;
while|while
condition|(
name|length
condition|)
block|{
name|int
name|l
init|=
name|qMin
argument_list|(
name|buffer_size
argument_list|,
name|length
argument_list|)
decl_stmt|;
specifier|const
name|uint
modifier|*
name|src
init|=
name|op
operator|.
name|src_fetch
argument_list|(
name|src_buffer
argument_list|,
operator|&
name|op
argument_list|,
name|data
argument_list|,
name|sy
argument_list|,
name|sx
argument_list|,
name|l
argument_list|)
decl_stmt|;
name|uint
modifier|*
name|dest
init|=
name|op
operator|.
name|dest_fetch
condition|?
name|op
operator|.
name|dest_fetch
argument_list|(
name|buffer
argument_list|,
name|data
operator|->
name|rasterBuffer
argument_list|,
name|x
argument_list|,
name|spans
operator|->
name|y
argument_list|,
name|l
argument_list|)
else|:
name|buffer
decl_stmt|;
name|op
operator|.
name|func
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|l
argument_list|,
name|coverage
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|dest_store
condition|)
name|op
operator|.
name|dest_store
argument_list|(
name|data
operator|->
name|rasterBuffer
argument_list|,
name|x
argument_list|,
name|spans
operator|->
name|y
argument_list|,
name|dest
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|x
operator|+=
name|l
expr_stmt|;
name|sx
operator|+=
name|l
expr_stmt|;
name|length
operator|-=
name|l
expr_stmt|;
block|}
block|}
block|}
operator|++
name|spans
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|blend_untransformed_argb
specifier|static
name|void
name|blend_untransformed_argb
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
block|{
name|QSpanData
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|QSpanData
operator|*
argument_list|>
argument_list|(
name|userData
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|texture
operator|.
name|format
operator|!=
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
operator|&&
name|data
operator|->
name|texture
operator|.
name|format
operator|!=
name|QImage
operator|::
name|Format_RGB32
condition|)
block|{
name|blend_untransformed_generic
argument_list|(
name|count
argument_list|,
name|spans
argument_list|,
name|userData
argument_list|)
expr_stmt|;
return|return;
block|}
name|Operator
name|op
init|=
name|getOperator
argument_list|(
name|data
argument_list|,
name|spans
argument_list|,
name|count
argument_list|)
decl_stmt|;
specifier|const
name|int
name|image_width
init|=
name|data
operator|->
name|texture
operator|.
name|width
decl_stmt|;
specifier|const
name|int
name|image_height
init|=
name|data
operator|->
name|texture
operator|.
name|height
decl_stmt|;
name|int
name|xoff
init|=
operator|-
name|qRound
argument_list|(
operator|-
name|data
operator|->
name|dx
argument_list|)
decl_stmt|;
name|int
name|yoff
init|=
operator|-
name|qRound
argument_list|(
operator|-
name|data
operator|->
name|dy
argument_list|)
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|int
name|x
init|=
name|spans
operator|->
name|x
decl_stmt|;
name|int
name|length
init|=
name|spans
operator|->
name|len
decl_stmt|;
name|int
name|sx
init|=
name|xoff
operator|+
name|x
decl_stmt|;
name|int
name|sy
init|=
name|yoff
operator|+
name|spans
operator|->
name|y
decl_stmt|;
if|if
condition|(
name|sy
operator|>=
literal|0
operator|&&
name|sy
operator|<
name|image_height
operator|&&
name|sx
operator|<
name|image_width
condition|)
block|{
if|if
condition|(
name|sx
operator|<
literal|0
condition|)
block|{
name|x
operator|-=
name|sx
expr_stmt|;
name|length
operator|+=
name|sx
expr_stmt|;
name|sx
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|sx
operator|+
name|length
operator|>
name|image_width
condition|)
name|length
operator|=
name|image_width
operator|-
name|sx
expr_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
specifier|const
name|int
name|coverage
init|=
operator|(
name|spans
operator|->
name|coverage
operator|*
name|data
operator|->
name|texture
operator|.
name|const_alpha
operator|)
operator|>>
literal|8
decl_stmt|;
specifier|const
name|uint
modifier|*
name|src
init|=
operator|(
name|uint
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|sy
argument_list|)
operator|+
name|sx
decl_stmt|;
name|uint
modifier|*
name|dest
init|=
operator|(
operator|(
name|uint
operator|*
operator|)
name|data
operator|->
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|spans
operator|->
name|y
argument_list|)
operator|)
operator|+
name|x
decl_stmt|;
name|op
operator|.
name|func
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|coverage
argument_list|)
expr_stmt|;
block|}
block|}
operator|++
name|spans
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|interpolate_pixel_rgb16_255
specifier|static
specifier|inline
name|quint16
name|interpolate_pixel_rgb16_255
parameter_list|(
name|quint16
name|x
parameter_list|,
name|quint8
name|a
parameter_list|,
name|quint16
name|y
parameter_list|,
name|quint8
name|b
parameter_list|)
block|{
name|quint16
name|t
init|=
operator|(
operator|(
operator|(
operator|(
name|x
operator|&
literal|0x07e0
operator|)
operator|*
name|a
operator|)
operator|+
operator|(
operator|(
name|y
operator|&
literal|0x07e0
operator|)
operator|*
name|b
operator|)
operator|)
operator|>>
literal|5
operator|)
operator|&
literal|0x07e0
decl_stmt|;
name|t
operator||=
operator|(
operator|(
operator|(
operator|(
name|x
operator|&
literal|0xf81f
operator|)
operator|*
name|a
operator|)
operator|+
operator|(
operator|(
name|y
operator|&
literal|0xf81f
operator|)
operator|*
name|b
operator|)
operator|)
operator|>>
literal|5
operator|)
operator|&
literal|0xf81f
expr_stmt|;
return|return
name|t
return|;
block|}
end_function
begin_function
DECL|function|interpolate_pixel_rgb16x2_255
specifier|static
specifier|inline
name|quint32
name|interpolate_pixel_rgb16x2_255
parameter_list|(
name|quint32
name|x
parameter_list|,
name|quint8
name|a
parameter_list|,
name|quint32
name|y
parameter_list|,
name|quint8
name|b
parameter_list|)
block|{
name|uint
name|t
decl_stmt|;
name|t
operator|=
operator|(
operator|(
operator|(
operator|(
name|x
operator|&
literal|0xf81f07e0
operator|)
operator|>>
literal|5
operator|)
operator|*
name|a
operator|)
operator|+
operator|(
operator|(
operator|(
name|y
operator|&
literal|0xf81f07e0
operator|)
operator|>>
literal|5
operator|)
operator|*
name|b
operator|)
operator|)
operator|&
literal|0xf81f07e0
expr_stmt|;
name|t
operator||=
operator|(
operator|(
operator|(
operator|(
name|x
operator|&
literal|0x07e0f81f
operator|)
operator|*
name|a
operator|)
operator|+
operator|(
operator|(
name|y
operator|&
literal|0x07e0f81f
operator|)
operator|*
name|b
operator|)
operator|)
operator|>>
literal|5
operator|)
operator|&
literal|0x07e0f81f
expr_stmt|;
return|return
name|t
return|;
block|}
end_function
begin_function
DECL|function|blend_sourceOver_rgb16_rgb16
specifier|static
specifier|inline
name|void
name|blend_sourceOver_rgb16_rgb16
parameter_list|(
name|quint16
modifier|*
name|dest
parameter_list|,
specifier|const
name|quint16
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|quint8
name|alpha
parameter_list|,
specifier|const
name|quint8
name|ialpha
parameter_list|)
block|{
specifier|const
name|int
name|dstAlign
init|=
operator|(
operator|(
name|quintptr
operator|)
name|dest
operator|)
operator|&
literal|0x3
decl_stmt|;
if|if
condition|(
name|dstAlign
condition|)
block|{
operator|*
name|dest
operator|=
name|interpolate_pixel_rgb16_255
argument_list|(
operator|*
name|src
argument_list|,
name|alpha
argument_list|,
operator|*
name|dest
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
operator|++
name|dest
expr_stmt|;
operator|++
name|src
expr_stmt|;
operator|--
name|length
expr_stmt|;
block|}
specifier|const
name|int
name|srcAlign
init|=
operator|(
operator|(
name|quintptr
operator|)
name|src
operator|)
operator|&
literal|0x3
decl_stmt|;
name|int
name|length32
init|=
name|length
operator|>>
literal|1
decl_stmt|;
if|if
condition|(
name|length32
operator|&&
name|srcAlign
operator|==
literal|0
condition|)
block|{
while|while
condition|(
name|length32
operator|--
condition|)
block|{
specifier|const
name|quint32
modifier|*
name|src32
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|quint32
modifier|*
name|dest32
init|=
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|dest
argument_list|)
decl_stmt|;
operator|*
name|dest32
operator|=
name|interpolate_pixel_rgb16x2_255
argument_list|(
operator|*
name|src32
argument_list|,
name|alpha
argument_list|,
operator|*
name|dest32
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
name|dest
operator|+=
literal|2
expr_stmt|;
name|src
operator|+=
literal|2
expr_stmt|;
block|}
name|length
operator|&=
literal|0x1
expr_stmt|;
block|}
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|=
name|interpolate_pixel_rgb16_255
argument_list|(
operator|*
name|src
argument_list|,
name|alpha
argument_list|,
operator|*
name|dest
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
operator|++
name|dest
expr_stmt|;
operator|++
name|src
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|blend_untransformed_rgb565
specifier|static
name|void
name|blend_untransformed_rgb565
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
block|{
name|QSpanData
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|QSpanData
operator|*
argument_list|>
argument_list|(
name|userData
argument_list|)
decl_stmt|;
name|QPainter
operator|::
name|CompositionMode
name|mode
init|=
name|data
operator|->
name|rasterBuffer
operator|->
name|compositionMode
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|texture
operator|.
name|format
operator|!=
name|QImage
operator|::
name|Format_RGB16
operator|||
operator|(
name|mode
operator|!=
name|QPainter
operator|::
name|CompositionMode_SourceOver
operator|&&
name|mode
operator|!=
name|QPainter
operator|::
name|CompositionMode_Source
operator|)
condition|)
block|{
name|blend_untransformed_generic
argument_list|(
name|count
argument_list|,
name|spans
argument_list|,
name|userData
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|int
name|image_width
init|=
name|data
operator|->
name|texture
operator|.
name|width
decl_stmt|;
specifier|const
name|int
name|image_height
init|=
name|data
operator|->
name|texture
operator|.
name|height
decl_stmt|;
name|int
name|xoff
init|=
operator|-
name|qRound
argument_list|(
operator|-
name|data
operator|->
name|dx
argument_list|)
decl_stmt|;
name|int
name|yoff
init|=
operator|-
name|qRound
argument_list|(
operator|-
name|data
operator|->
name|dy
argument_list|)
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
block|{
specifier|const
name|quint8
name|coverage
init|=
operator|(
name|data
operator|->
name|texture
operator|.
name|const_alpha
operator|*
name|spans
operator|->
name|coverage
operator|)
operator|>>
literal|8
decl_stmt|;
if|if
condition|(
name|coverage
operator|==
literal|0
condition|)
block|{
operator|++
name|spans
expr_stmt|;
continue|continue;
block|}
name|int
name|x
init|=
name|spans
operator|->
name|x
decl_stmt|;
name|int
name|length
init|=
name|spans
operator|->
name|len
decl_stmt|;
name|int
name|sx
init|=
name|xoff
operator|+
name|x
decl_stmt|;
name|int
name|sy
init|=
name|yoff
operator|+
name|spans
operator|->
name|y
decl_stmt|;
if|if
condition|(
name|sy
operator|>=
literal|0
operator|&&
name|sy
operator|<
name|image_height
operator|&&
name|sx
operator|<
name|image_width
condition|)
block|{
if|if
condition|(
name|sx
operator|<
literal|0
condition|)
block|{
name|x
operator|-=
name|sx
expr_stmt|;
name|length
operator|+=
name|sx
expr_stmt|;
name|sx
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|sx
operator|+
name|length
operator|>
name|image_width
condition|)
name|length
operator|=
name|image_width
operator|-
name|sx
expr_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|quint16
modifier|*
name|dest
init|=
operator|(
name|quint16
operator|*
operator|)
name|data
operator|->
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|spans
operator|->
name|y
argument_list|)
operator|+
name|x
decl_stmt|;
specifier|const
name|quint16
modifier|*
name|src
init|=
operator|(
name|quint16
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|sy
argument_list|)
operator|+
name|sx
decl_stmt|;
if|if
condition|(
name|coverage
operator|==
literal|255
condition|)
block|{
name|memcpy
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
operator|*
sizeof|sizeof
argument_list|(
name|quint16
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|quint8
name|alpha
init|=
operator|(
name|coverage
operator|+
literal|1
operator|)
operator|>>
literal|3
decl_stmt|;
specifier|const
name|quint8
name|ialpha
init|=
literal|0x20
operator|-
name|alpha
decl_stmt|;
if|if
condition|(
name|alpha
operator|>
literal|0
condition|)
name|blend_sourceOver_rgb16_rgb16
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|alpha
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|++
name|spans
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|blend_tiled_generic
specifier|static
name|void
name|blend_tiled_generic
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
block|{
name|QSpanData
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|QSpanData
operator|*
argument_list|>
argument_list|(
name|userData
argument_list|)
decl_stmt|;
name|uint
name|buffer
index|[
name|buffer_size
index|]
decl_stmt|;
name|uint
name|src_buffer
index|[
name|buffer_size
index|]
decl_stmt|;
name|Operator
name|op
init|=
name|getOperator
argument_list|(
name|data
argument_list|,
name|spans
argument_list|,
name|count
argument_list|)
decl_stmt|;
specifier|const
name|int
name|image_width
init|=
name|data
operator|->
name|texture
operator|.
name|width
decl_stmt|;
specifier|const
name|int
name|image_height
init|=
name|data
operator|->
name|texture
operator|.
name|height
decl_stmt|;
name|int
name|xoff
init|=
operator|-
name|qRound
argument_list|(
operator|-
name|data
operator|->
name|dx
argument_list|)
operator|%
name|image_width
decl_stmt|;
name|int
name|yoff
init|=
operator|-
name|qRound
argument_list|(
operator|-
name|data
operator|->
name|dy
argument_list|)
operator|%
name|image_height
decl_stmt|;
if|if
condition|(
name|xoff
operator|<
literal|0
condition|)
name|xoff
operator|+=
name|image_width
expr_stmt|;
if|if
condition|(
name|yoff
operator|<
literal|0
condition|)
name|yoff
operator|+=
name|image_height
expr_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|int
name|x
init|=
name|spans
operator|->
name|x
decl_stmt|;
name|int
name|length
init|=
name|spans
operator|->
name|len
decl_stmt|;
name|int
name|sx
init|=
operator|(
name|xoff
operator|+
name|spans
operator|->
name|x
operator|)
operator|%
name|image_width
decl_stmt|;
name|int
name|sy
init|=
operator|(
name|spans
operator|->
name|y
operator|+
name|yoff
operator|)
operator|%
name|image_height
decl_stmt|;
if|if
condition|(
name|sx
operator|<
literal|0
condition|)
name|sx
operator|+=
name|image_width
expr_stmt|;
if|if
condition|(
name|sy
operator|<
literal|0
condition|)
name|sy
operator|+=
name|image_height
expr_stmt|;
specifier|const
name|int
name|coverage
init|=
operator|(
name|spans
operator|->
name|coverage
operator|*
name|data
operator|->
name|texture
operator|.
name|const_alpha
operator|)
operator|>>
literal|8
decl_stmt|;
while|while
condition|(
name|length
condition|)
block|{
name|int
name|l
init|=
name|qMin
argument_list|(
name|image_width
operator|-
name|sx
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer_size
operator|<
name|l
condition|)
name|l
operator|=
name|buffer_size
expr_stmt|;
specifier|const
name|uint
modifier|*
name|src
init|=
name|op
operator|.
name|src_fetch
argument_list|(
name|src_buffer
argument_list|,
operator|&
name|op
argument_list|,
name|data
argument_list|,
name|sy
argument_list|,
name|sx
argument_list|,
name|l
argument_list|)
decl_stmt|;
name|uint
modifier|*
name|dest
init|=
name|op
operator|.
name|dest_fetch
condition|?
name|op
operator|.
name|dest_fetch
argument_list|(
name|buffer
argument_list|,
name|data
operator|->
name|rasterBuffer
argument_list|,
name|x
argument_list|,
name|spans
operator|->
name|y
argument_list|,
name|l
argument_list|)
else|:
name|buffer
decl_stmt|;
name|op
operator|.
name|func
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|l
argument_list|,
name|coverage
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|dest_store
condition|)
name|op
operator|.
name|dest_store
argument_list|(
name|data
operator|->
name|rasterBuffer
argument_list|,
name|x
argument_list|,
name|spans
operator|->
name|y
argument_list|,
name|dest
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|x
operator|+=
name|l
expr_stmt|;
name|sx
operator|+=
name|l
expr_stmt|;
name|length
operator|-=
name|l
expr_stmt|;
if|if
condition|(
name|sx
operator|>=
name|image_width
condition|)
name|sx
operator|=
literal|0
expr_stmt|;
block|}
operator|++
name|spans
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|blend_tiled_argb
specifier|static
name|void
name|blend_tiled_argb
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
block|{
name|QSpanData
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|QSpanData
operator|*
argument_list|>
argument_list|(
name|userData
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|texture
operator|.
name|format
operator|!=
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
operator|&&
name|data
operator|->
name|texture
operator|.
name|format
operator|!=
name|QImage
operator|::
name|Format_RGB32
condition|)
block|{
name|blend_tiled_generic
argument_list|(
name|count
argument_list|,
name|spans
argument_list|,
name|userData
argument_list|)
expr_stmt|;
return|return;
block|}
name|Operator
name|op
init|=
name|getOperator
argument_list|(
name|data
argument_list|,
name|spans
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|int
name|image_width
init|=
name|data
operator|->
name|texture
operator|.
name|width
decl_stmt|;
name|int
name|image_height
init|=
name|data
operator|->
name|texture
operator|.
name|height
decl_stmt|;
name|int
name|xoff
init|=
operator|-
name|qRound
argument_list|(
operator|-
name|data
operator|->
name|dx
argument_list|)
operator|%
name|image_width
decl_stmt|;
name|int
name|yoff
init|=
operator|-
name|qRound
argument_list|(
operator|-
name|data
operator|->
name|dy
argument_list|)
operator|%
name|image_height
decl_stmt|;
if|if
condition|(
name|xoff
operator|<
literal|0
condition|)
name|xoff
operator|+=
name|image_width
expr_stmt|;
if|if
condition|(
name|yoff
operator|<
literal|0
condition|)
name|yoff
operator|+=
name|image_height
expr_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|int
name|x
init|=
name|spans
operator|->
name|x
decl_stmt|;
name|int
name|length
init|=
name|spans
operator|->
name|len
decl_stmt|;
name|int
name|sx
init|=
operator|(
name|xoff
operator|+
name|spans
operator|->
name|x
operator|)
operator|%
name|image_width
decl_stmt|;
name|int
name|sy
init|=
operator|(
name|spans
operator|->
name|y
operator|+
name|yoff
operator|)
operator|%
name|image_height
decl_stmt|;
if|if
condition|(
name|sx
operator|<
literal|0
condition|)
name|sx
operator|+=
name|image_width
expr_stmt|;
if|if
condition|(
name|sy
operator|<
literal|0
condition|)
name|sy
operator|+=
name|image_height
expr_stmt|;
specifier|const
name|int
name|coverage
init|=
operator|(
name|spans
operator|->
name|coverage
operator|*
name|data
operator|->
name|texture
operator|.
name|const_alpha
operator|)
operator|>>
literal|8
decl_stmt|;
while|while
condition|(
name|length
condition|)
block|{
name|int
name|l
init|=
name|qMin
argument_list|(
name|image_width
operator|-
name|sx
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer_size
operator|<
name|l
condition|)
name|l
operator|=
name|buffer_size
expr_stmt|;
specifier|const
name|uint
modifier|*
name|src
init|=
operator|(
name|uint
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|sy
argument_list|)
operator|+
name|sx
decl_stmt|;
name|uint
modifier|*
name|dest
init|=
operator|(
operator|(
name|uint
operator|*
operator|)
name|data
operator|->
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|spans
operator|->
name|y
argument_list|)
operator|)
operator|+
name|x
decl_stmt|;
name|op
operator|.
name|func
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|l
argument_list|,
name|coverage
argument_list|)
expr_stmt|;
name|x
operator|+=
name|l
expr_stmt|;
name|length
operator|-=
name|l
expr_stmt|;
name|sx
operator|=
literal|0
expr_stmt|;
block|}
operator|++
name|spans
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|blend_tiled_rgb565
specifier|static
name|void
name|blend_tiled_rgb565
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
block|{
name|QSpanData
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|QSpanData
operator|*
argument_list|>
argument_list|(
name|userData
argument_list|)
decl_stmt|;
name|QPainter
operator|::
name|CompositionMode
name|mode
init|=
name|data
operator|->
name|rasterBuffer
operator|->
name|compositionMode
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|texture
operator|.
name|format
operator|!=
name|QImage
operator|::
name|Format_RGB16
operator|||
operator|(
name|mode
operator|!=
name|QPainter
operator|::
name|CompositionMode_SourceOver
operator|&&
name|mode
operator|!=
name|QPainter
operator|::
name|CompositionMode_Source
operator|)
condition|)
block|{
name|blend_tiled_generic
argument_list|(
name|count
argument_list|,
name|spans
argument_list|,
name|userData
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|int
name|image_width
init|=
name|data
operator|->
name|texture
operator|.
name|width
decl_stmt|;
specifier|const
name|int
name|image_height
init|=
name|data
operator|->
name|texture
operator|.
name|height
decl_stmt|;
name|int
name|xoff
init|=
operator|-
name|qRound
argument_list|(
operator|-
name|data
operator|->
name|dx
argument_list|)
operator|%
name|image_width
decl_stmt|;
name|int
name|yoff
init|=
operator|-
name|qRound
argument_list|(
operator|-
name|data
operator|->
name|dy
argument_list|)
operator|%
name|image_height
decl_stmt|;
if|if
condition|(
name|xoff
operator|<
literal|0
condition|)
name|xoff
operator|+=
name|image_width
expr_stmt|;
if|if
condition|(
name|yoff
operator|<
literal|0
condition|)
name|yoff
operator|+=
name|image_height
expr_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
block|{
specifier|const
name|quint8
name|coverage
init|=
operator|(
name|data
operator|->
name|texture
operator|.
name|const_alpha
operator|*
name|spans
operator|->
name|coverage
operator|)
operator|>>
literal|8
decl_stmt|;
if|if
condition|(
name|coverage
operator|==
literal|0
condition|)
block|{
operator|++
name|spans
expr_stmt|;
continue|continue;
block|}
name|int
name|x
init|=
name|spans
operator|->
name|x
decl_stmt|;
name|int
name|length
init|=
name|spans
operator|->
name|len
decl_stmt|;
name|int
name|sx
init|=
operator|(
name|xoff
operator|+
name|spans
operator|->
name|x
operator|)
operator|%
name|image_width
decl_stmt|;
name|int
name|sy
init|=
operator|(
name|spans
operator|->
name|y
operator|+
name|yoff
operator|)
operator|%
name|image_height
decl_stmt|;
if|if
condition|(
name|sx
operator|<
literal|0
condition|)
name|sx
operator|+=
name|image_width
expr_stmt|;
if|if
condition|(
name|sy
operator|<
literal|0
condition|)
name|sy
operator|+=
name|image_height
expr_stmt|;
if|if
condition|(
name|coverage
operator|==
literal|255
condition|)
block|{
comment|// Copy the first texture block
name|length
operator|=
name|qMin
argument_list|(
name|image_width
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|int
name|tx
init|=
name|x
decl_stmt|;
while|while
condition|(
name|length
condition|)
block|{
name|int
name|l
init|=
name|qMin
argument_list|(
name|image_width
operator|-
name|sx
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer_size
operator|<
name|l
condition|)
name|l
operator|=
name|buffer_size
expr_stmt|;
name|quint16
modifier|*
name|dest
init|=
operator|(
operator|(
name|quint16
operator|*
operator|)
name|data
operator|->
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|spans
operator|->
name|y
argument_list|)
operator|)
operator|+
name|tx
decl_stmt|;
specifier|const
name|quint16
modifier|*
name|src
init|=
operator|(
name|quint16
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|sy
argument_list|)
operator|+
name|sx
decl_stmt|;
name|memcpy
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|l
operator|*
sizeof|sizeof
argument_list|(
name|quint16
argument_list|)
argument_list|)
expr_stmt|;
name|length
operator|-=
name|l
expr_stmt|;
name|tx
operator|+=
name|l
expr_stmt|;
name|sx
operator|=
literal|0
expr_stmt|;
block|}
comment|// Now use the rasterBuffer as the source of the texture,
comment|// We can now progressively copy larger blocks
comment|// - Less cpu time in code figuring out what to copy
comment|// We are dealing with one block of data
comment|// - More likely to fit in the cache
comment|// - can use memcpy
name|int
name|copy_image_width
init|=
name|qMin
argument_list|(
name|image_width
argument_list|,
name|int
argument_list|(
name|spans
operator|->
name|len
argument_list|)
argument_list|)
decl_stmt|;
name|length
operator|=
name|spans
operator|->
name|len
operator|-
name|copy_image_width
expr_stmt|;
name|quint16
modifier|*
name|src
init|=
operator|(
operator|(
name|quint16
operator|*
operator|)
name|data
operator|->
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|spans
operator|->
name|y
argument_list|)
operator|)
operator|+
name|x
decl_stmt|;
name|quint16
modifier|*
name|dest
init|=
name|src
operator|+
name|copy_image_width
decl_stmt|;
while|while
condition|(
name|copy_image_width
operator|<
name|length
condition|)
block|{
name|memcpy
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|copy_image_width
operator|*
sizeof|sizeof
argument_list|(
name|quint16
argument_list|)
argument_list|)
expr_stmt|;
name|dest
operator|+=
name|copy_image_width
expr_stmt|;
name|length
operator|-=
name|copy_image_width
expr_stmt|;
name|copy_image_width
operator|*=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|length
operator|>
literal|0
condition|)
name|memcpy
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
operator|*
sizeof|sizeof
argument_list|(
name|quint16
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|quint8
name|alpha
init|=
operator|(
name|coverage
operator|+
literal|1
operator|)
operator|>>
literal|3
decl_stmt|;
specifier|const
name|quint8
name|ialpha
init|=
literal|0x20
operator|-
name|alpha
decl_stmt|;
if|if
condition|(
name|alpha
operator|>
literal|0
condition|)
block|{
while|while
condition|(
name|length
condition|)
block|{
name|int
name|l
init|=
name|qMin
argument_list|(
name|image_width
operator|-
name|sx
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer_size
operator|<
name|l
condition|)
name|l
operator|=
name|buffer_size
expr_stmt|;
name|quint16
modifier|*
name|dest
init|=
operator|(
operator|(
name|quint16
operator|*
operator|)
name|data
operator|->
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|spans
operator|->
name|y
argument_list|)
operator|)
operator|+
name|x
decl_stmt|;
specifier|const
name|quint16
modifier|*
name|src
init|=
operator|(
name|quint16
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|sy
argument_list|)
operator|+
name|sx
decl_stmt|;
name|blend_sourceOver_rgb16_rgb16
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|l
argument_list|,
name|alpha
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
name|x
operator|+=
name|l
expr_stmt|;
name|length
operator|-=
name|l
expr_stmt|;
name|sx
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
operator|++
name|spans
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|blend_transformed_bilinear_rgb565
specifier|static
name|void
name|blend_transformed_bilinear_rgb565
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
block|{
name|QSpanData
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|QSpanData
operator|*
argument_list|>
argument_list|(
name|userData
argument_list|)
decl_stmt|;
name|QPainter
operator|::
name|CompositionMode
name|mode
init|=
name|data
operator|->
name|rasterBuffer
operator|->
name|compositionMode
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|texture
operator|.
name|format
operator|!=
name|QImage
operator|::
name|Format_RGB16
operator|||
operator|(
name|mode
operator|!=
name|QPainter
operator|::
name|CompositionMode_SourceOver
operator|&&
name|mode
operator|!=
name|QPainter
operator|::
name|CompositionMode_Source
operator|)
condition|)
block|{
name|blend_src_generic
argument_list|(
name|count
argument_list|,
name|spans
argument_list|,
name|userData
argument_list|)
expr_stmt|;
return|return;
block|}
name|quint16
name|buffer
index|[
name|buffer_size
index|]
decl_stmt|;
specifier|const
name|int
name|src_minx
init|=
name|data
operator|->
name|texture
operator|.
name|x1
decl_stmt|;
specifier|const
name|int
name|src_miny
init|=
name|data
operator|->
name|texture
operator|.
name|y1
decl_stmt|;
specifier|const
name|int
name|src_maxx
init|=
name|data
operator|->
name|texture
operator|.
name|x2
operator|-
literal|1
decl_stmt|;
specifier|const
name|int
name|src_maxy
init|=
name|data
operator|->
name|texture
operator|.
name|y2
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|fast_matrix
condition|)
block|{
comment|// The increment pr x in the scanline
specifier|const
name|int
name|fdx
init|=
call|(
name|int
call|)
argument_list|(
name|data
operator|->
name|m11
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
specifier|const
name|int
name|fdy
init|=
call|(
name|int
call|)
argument_list|(
name|data
operator|->
name|m12
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
block|{
specifier|const
name|quint8
name|coverage
init|=
operator|(
name|data
operator|->
name|texture
operator|.
name|const_alpha
operator|*
name|spans
operator|->
name|coverage
operator|)
operator|>>
literal|8
decl_stmt|;
specifier|const
name|quint8
name|alpha
init|=
operator|(
name|coverage
operator|+
literal|1
operator|)
operator|>>
literal|3
decl_stmt|;
specifier|const
name|quint8
name|ialpha
init|=
literal|0x20
operator|-
name|alpha
decl_stmt|;
if|if
condition|(
name|alpha
operator|==
literal|0
condition|)
block|{
operator|++
name|spans
expr_stmt|;
continue|continue;
block|}
name|quint16
modifier|*
name|dest
init|=
operator|(
name|quint16
operator|*
operator|)
name|data
operator|->
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|spans
operator|->
name|y
argument_list|)
operator|+
name|spans
operator|->
name|x
decl_stmt|;
specifier|const
name|qreal
name|cx
init|=
name|spans
operator|->
name|x
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|cy
init|=
name|spans
operator|->
name|y
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|int
argument_list|(
operator|(
name|data
operator|->
name|m21
operator|*
name|cy
operator|+
name|data
operator|->
name|m11
operator|*
name|cx
operator|+
name|data
operator|->
name|dx
operator|)
operator|*
name|fixed_scale
argument_list|)
operator|-
name|half_point
decl_stmt|;
name|int
name|y
init|=
name|int
argument_list|(
operator|(
name|data
operator|->
name|m22
operator|*
name|cy
operator|+
name|data
operator|->
name|m12
operator|*
name|cx
operator|+
name|data
operator|->
name|dy
operator|)
operator|*
name|fixed_scale
argument_list|)
operator|-
name|half_point
decl_stmt|;
name|int
name|length
init|=
name|spans
operator|->
name|len
decl_stmt|;
while|while
condition|(
name|length
condition|)
block|{
name|int
name|l
decl_stmt|;
name|quint16
modifier|*
name|b
decl_stmt|;
if|if
condition|(
name|ialpha
operator|==
literal|0
condition|)
block|{
name|l
operator|=
name|length
expr_stmt|;
name|b
operator|=
name|dest
expr_stmt|;
block|}
else|else
block|{
name|l
operator|=
name|qMin
argument_list|(
name|length
argument_list|,
name|buffer_size
argument_list|)
expr_stmt|;
name|b
operator|=
name|buffer
expr_stmt|;
block|}
specifier|const
name|quint16
modifier|*
name|end
init|=
name|b
operator|+
name|l
decl_stmt|;
while|while
condition|(
name|b
operator|<
name|end
condition|)
block|{
name|int
name|x1
init|=
operator|(
name|x
operator|>>
literal|16
operator|)
decl_stmt|;
name|int
name|x2
decl_stmt|;
name|int
name|y1
init|=
operator|(
name|y
operator|>>
literal|16
operator|)
decl_stmt|;
name|int
name|y2
decl_stmt|;
name|fetchTransformedBilinear_pixelBounds
argument_list|<
name|BlendTransformedBilinear
argument_list|>
argument_list|(
literal|0
argument_list|,
name|src_minx
argument_list|,
name|src_maxx
argument_list|,
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|fetchTransformedBilinear_pixelBounds
argument_list|<
name|BlendTransformedBilinear
argument_list|>
argument_list|(
literal|0
argument_list|,
name|src_miny
argument_list|,
name|src_maxy
argument_list|,
name|y1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
specifier|const
name|quint16
modifier|*
name|src1
init|=
operator|(
name|quint16
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y1
argument_list|)
decl_stmt|;
specifier|const
name|quint16
modifier|*
name|src2
init|=
operator|(
name|quint16
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y2
argument_list|)
decl_stmt|;
name|quint16
name|tl
init|=
name|src1
index|[
name|x1
index|]
decl_stmt|;
specifier|const
name|quint16
name|tr
init|=
name|src1
index|[
name|x2
index|]
decl_stmt|;
name|quint16
name|bl
init|=
name|src2
index|[
name|x1
index|]
decl_stmt|;
specifier|const
name|quint16
name|br
init|=
name|src2
index|[
name|x2
index|]
decl_stmt|;
specifier|const
name|uint
name|distxsl8
init|=
name|x
operator|&
literal|0xff00
decl_stmt|;
specifier|const
name|uint
name|distysl8
init|=
name|y
operator|&
literal|0xff00
decl_stmt|;
specifier|const
name|uint
name|distx
init|=
name|distxsl8
operator|>>
literal|8
decl_stmt|;
specifier|const
name|uint
name|disty
init|=
name|distysl8
operator|>>
literal|8
decl_stmt|;
specifier|const
name|uint
name|distxy
init|=
name|distx
operator|*
name|disty
decl_stmt|;
specifier|const
name|uint
name|tlw
init|=
literal|0x10000
operator|-
name|distxsl8
operator|-
name|distysl8
operator|+
name|distxy
decl_stmt|;
comment|// (256 - distx) * (256 - disty)
specifier|const
name|uint
name|trw
init|=
name|distxsl8
operator|-
name|distxy
decl_stmt|;
comment|// distx * (256 - disty)
specifier|const
name|uint
name|blw
init|=
name|distysl8
operator|-
name|distxy
decl_stmt|;
comment|// (256 - distx) * disty
specifier|const
name|uint
name|brw
init|=
name|distxy
decl_stmt|;
comment|// distx * disty
name|uint
name|red
init|=
operator|(
operator|(
name|tl
operator|&
literal|0xf800
operator|)
operator|*
name|tlw
operator|+
operator|(
name|tr
operator|&
literal|0xf800
operator|)
operator|*
name|trw
operator|+
operator|(
name|bl
operator|&
literal|0xf800
operator|)
operator|*
name|blw
operator|+
operator|(
name|br
operator|&
literal|0xf800
operator|)
operator|*
name|brw
operator|)
operator|&
literal|0xf8000000
decl_stmt|;
name|uint
name|green
init|=
operator|(
operator|(
name|tl
operator|&
literal|0x07e0
operator|)
operator|*
name|tlw
operator|+
operator|(
name|tr
operator|&
literal|0x07e0
operator|)
operator|*
name|trw
operator|+
operator|(
name|bl
operator|&
literal|0x07e0
operator|)
operator|*
name|blw
operator|+
operator|(
name|br
operator|&
literal|0x07e0
operator|)
operator|*
name|brw
operator|)
operator|&
literal|0x07e00000
decl_stmt|;
name|uint
name|blue
init|=
operator|(
operator|(
name|tl
operator|&
literal|0x001f
operator|)
operator|*
name|tlw
operator|+
operator|(
name|tr
operator|&
literal|0x001f
operator|)
operator|*
name|trw
operator|+
operator|(
name|bl
operator|&
literal|0x001f
operator|)
operator|*
name|blw
operator|+
operator|(
name|br
operator|&
literal|0x001f
operator|)
operator|*
name|brw
operator|)
decl_stmt|;
operator|*
name|b
operator|=
name|quint16
argument_list|(
operator|(
name|red
operator||
name|green
operator||
name|blue
operator|)
operator|>>
literal|16
argument_list|)
expr_stmt|;
operator|++
name|b
expr_stmt|;
name|x
operator|+=
name|fdx
expr_stmt|;
name|y
operator|+=
name|fdy
expr_stmt|;
block|}
if|if
condition|(
name|ialpha
operator|!=
literal|0
condition|)
name|blend_sourceOver_rgb16_rgb16
argument_list|(
name|dest
argument_list|,
name|buffer
argument_list|,
name|l
argument_list|,
name|alpha
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
name|dest
operator|+=
name|l
expr_stmt|;
name|length
operator|-=
name|l
expr_stmt|;
block|}
operator|++
name|spans
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|const
name|qreal
name|fdx
init|=
name|data
operator|->
name|m11
decl_stmt|;
specifier|const
name|qreal
name|fdy
init|=
name|data
operator|->
name|m12
decl_stmt|;
specifier|const
name|qreal
name|fdw
init|=
name|data
operator|->
name|m13
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
block|{
specifier|const
name|quint8
name|coverage
init|=
operator|(
name|data
operator|->
name|texture
operator|.
name|const_alpha
operator|*
name|spans
operator|->
name|coverage
operator|)
operator|>>
literal|8
decl_stmt|;
specifier|const
name|quint8
name|alpha
init|=
operator|(
name|coverage
operator|+
literal|1
operator|)
operator|>>
literal|3
decl_stmt|;
specifier|const
name|quint8
name|ialpha
init|=
literal|0x20
operator|-
name|alpha
decl_stmt|;
if|if
condition|(
name|alpha
operator|==
literal|0
condition|)
block|{
operator|++
name|spans
expr_stmt|;
continue|continue;
block|}
name|quint16
modifier|*
name|dest
init|=
operator|(
name|quint16
operator|*
operator|)
name|data
operator|->
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|spans
operator|->
name|y
argument_list|)
operator|+
name|spans
operator|->
name|x
decl_stmt|;
specifier|const
name|qreal
name|cx
init|=
name|spans
operator|->
name|x
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|cy
init|=
name|spans
operator|->
name|y
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
name|qreal
name|x
init|=
name|data
operator|->
name|m21
operator|*
name|cy
operator|+
name|data
operator|->
name|m11
operator|*
name|cx
operator|+
name|data
operator|->
name|dx
decl_stmt|;
name|qreal
name|y
init|=
name|data
operator|->
name|m22
operator|*
name|cy
operator|+
name|data
operator|->
name|m12
operator|*
name|cx
operator|+
name|data
operator|->
name|dy
decl_stmt|;
name|qreal
name|w
init|=
name|data
operator|->
name|m23
operator|*
name|cy
operator|+
name|data
operator|->
name|m13
operator|*
name|cx
operator|+
name|data
operator|->
name|m33
decl_stmt|;
name|int
name|length
init|=
name|spans
operator|->
name|len
decl_stmt|;
while|while
condition|(
name|length
condition|)
block|{
name|int
name|l
decl_stmt|;
name|quint16
modifier|*
name|b
decl_stmt|;
if|if
condition|(
name|ialpha
operator|==
literal|0
condition|)
block|{
name|l
operator|=
name|length
expr_stmt|;
name|b
operator|=
name|dest
expr_stmt|;
block|}
else|else
block|{
name|l
operator|=
name|qMin
argument_list|(
name|length
argument_list|,
name|buffer_size
argument_list|)
expr_stmt|;
name|b
operator|=
name|buffer
expr_stmt|;
block|}
specifier|const
name|quint16
modifier|*
name|end
init|=
name|b
operator|+
name|l
decl_stmt|;
while|while
condition|(
name|b
operator|<
name|end
condition|)
block|{
specifier|const
name|qreal
name|iw
init|=
name|w
operator|==
literal|0
condition|?
literal|1
else|:
literal|1
operator|/
name|w
decl_stmt|;
specifier|const
name|qreal
name|px
init|=
name|x
operator|*
name|iw
operator|-
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|py
init|=
name|y
operator|*
name|iw
operator|-
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
name|int
name|x1
init|=
name|int
argument_list|(
name|px
argument_list|)
operator|-
operator|(
name|px
operator|<
literal|0
operator|)
decl_stmt|;
name|int
name|x2
decl_stmt|;
name|int
name|y1
init|=
name|int
argument_list|(
name|py
argument_list|)
operator|-
operator|(
name|py
operator|<
literal|0
operator|)
decl_stmt|;
name|int
name|y2
decl_stmt|;
name|fetchTransformedBilinear_pixelBounds
argument_list|<
name|BlendTransformedBilinear
argument_list|>
argument_list|(
literal|0
argument_list|,
name|src_minx
argument_list|,
name|src_maxx
argument_list|,
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|fetchTransformedBilinear_pixelBounds
argument_list|<
name|BlendTransformedBilinear
argument_list|>
argument_list|(
literal|0
argument_list|,
name|src_miny
argument_list|,
name|src_maxy
argument_list|,
name|y1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
specifier|const
name|quint16
modifier|*
name|src1
init|=
operator|(
name|quint16
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y1
argument_list|)
decl_stmt|;
specifier|const
name|quint16
modifier|*
name|src2
init|=
operator|(
name|quint16
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|y2
argument_list|)
decl_stmt|;
name|quint16
name|tl
init|=
name|src1
index|[
name|x1
index|]
decl_stmt|;
specifier|const
name|quint16
name|tr
init|=
name|src1
index|[
name|x2
index|]
decl_stmt|;
name|quint16
name|bl
init|=
name|src2
index|[
name|x1
index|]
decl_stmt|;
specifier|const
name|quint16
name|br
init|=
name|src2
index|[
name|x2
index|]
decl_stmt|;
specifier|const
name|uint
name|distx
init|=
name|uint
argument_list|(
operator|(
name|px
operator|-
name|x1
operator|)
operator|*
literal|256
argument_list|)
decl_stmt|;
specifier|const
name|uint
name|disty
init|=
name|uint
argument_list|(
operator|(
name|py
operator|-
name|y1
operator|)
operator|*
literal|256
argument_list|)
decl_stmt|;
specifier|const
name|uint
name|distxsl8
init|=
name|distx
operator|<<
literal|8
decl_stmt|;
specifier|const
name|uint
name|distysl8
init|=
name|disty
operator|<<
literal|8
decl_stmt|;
specifier|const
name|uint
name|distxy
init|=
name|distx
operator|*
name|disty
decl_stmt|;
specifier|const
name|uint
name|tlw
init|=
literal|0x10000
operator|-
name|distxsl8
operator|-
name|distysl8
operator|+
name|distxy
decl_stmt|;
comment|// (256 - distx) * (256 - disty)
specifier|const
name|uint
name|trw
init|=
name|distxsl8
operator|-
name|distxy
decl_stmt|;
comment|// distx * (256 - disty)
specifier|const
name|uint
name|blw
init|=
name|distysl8
operator|-
name|distxy
decl_stmt|;
comment|// (256 - distx) * disty
specifier|const
name|uint
name|brw
init|=
name|distxy
decl_stmt|;
comment|// distx * disty
name|uint
name|red
init|=
operator|(
operator|(
name|tl
operator|&
literal|0xf800
operator|)
operator|*
name|tlw
operator|+
operator|(
name|tr
operator|&
literal|0xf800
operator|)
operator|*
name|trw
operator|+
operator|(
name|bl
operator|&
literal|0xf800
operator|)
operator|*
name|blw
operator|+
operator|(
name|br
operator|&
literal|0xf800
operator|)
operator|*
name|brw
operator|)
operator|&
literal|0xf8000000
decl_stmt|;
name|uint
name|green
init|=
operator|(
operator|(
name|tl
operator|&
literal|0x07e0
operator|)
operator|*
name|tlw
operator|+
operator|(
name|tr
operator|&
literal|0x07e0
operator|)
operator|*
name|trw
operator|+
operator|(
name|bl
operator|&
literal|0x07e0
operator|)
operator|*
name|blw
operator|+
operator|(
name|br
operator|&
literal|0x07e0
operator|)
operator|*
name|brw
operator|)
operator|&
literal|0x07e00000
decl_stmt|;
name|uint
name|blue
init|=
operator|(
operator|(
name|tl
operator|&
literal|0x001f
operator|)
operator|*
name|tlw
operator|+
operator|(
name|tr
operator|&
literal|0x001f
operator|)
operator|*
name|trw
operator|+
operator|(
name|bl
operator|&
literal|0x001f
operator|)
operator|*
name|blw
operator|+
operator|(
name|br
operator|&
literal|0x001f
operator|)
operator|*
name|brw
operator|)
decl_stmt|;
operator|*
name|b
operator|=
name|quint16
argument_list|(
operator|(
name|red
operator||
name|green
operator||
name|blue
operator|)
operator|>>
literal|16
argument_list|)
expr_stmt|;
operator|++
name|b
expr_stmt|;
name|x
operator|+=
name|fdx
expr_stmt|;
name|y
operator|+=
name|fdy
expr_stmt|;
name|w
operator|+=
name|fdw
expr_stmt|;
block|}
if|if
condition|(
name|ialpha
operator|!=
literal|0
condition|)
name|blend_sourceOver_rgb16_rgb16
argument_list|(
name|dest
argument_list|,
name|buffer
argument_list|,
name|l
argument_list|,
name|alpha
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
name|dest
operator|+=
name|l
expr_stmt|;
name|length
operator|-=
name|l
expr_stmt|;
block|}
operator|++
name|spans
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|blend_transformed_argb
specifier|static
name|void
name|blend_transformed_argb
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
block|{
name|QSpanData
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|QSpanData
operator|*
argument_list|>
argument_list|(
name|userData
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|texture
operator|.
name|format
operator|!=
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
operator|&&
name|data
operator|->
name|texture
operator|.
name|format
operator|!=
name|QImage
operator|::
name|Format_RGB32
condition|)
block|{
name|blend_src_generic
argument_list|(
name|count
argument_list|,
name|spans
argument_list|,
name|userData
argument_list|)
expr_stmt|;
return|return;
block|}
name|CompositionFunction
name|func
init|=
name|functionForMode
index|[
name|data
operator|->
name|rasterBuffer
operator|->
name|compositionMode
index|]
decl_stmt|;
name|uint
name|buffer
index|[
name|buffer_size
index|]
decl_stmt|;
name|int
name|image_width
init|=
name|data
operator|->
name|texture
operator|.
name|width
decl_stmt|;
name|int
name|image_height
init|=
name|data
operator|->
name|texture
operator|.
name|height
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|fast_matrix
condition|)
block|{
comment|// The increment pr x in the scanline
name|int
name|fdx
init|=
call|(
name|int
call|)
argument_list|(
name|data
operator|->
name|m11
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
name|int
name|fdy
init|=
call|(
name|int
call|)
argument_list|(
name|data
operator|->
name|m12
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|void
modifier|*
name|t
init|=
name|data
operator|->
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|spans
operator|->
name|y
argument_list|)
decl_stmt|;
name|uint
modifier|*
name|target
init|=
operator|(
operator|(
name|uint
operator|*
operator|)
name|t
operator|)
operator|+
name|spans
operator|->
name|x
decl_stmt|;
specifier|const
name|qreal
name|cx
init|=
name|spans
operator|->
name|x
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|cy
init|=
name|spans
operator|->
name|y
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|int
argument_list|(
operator|(
name|data
operator|->
name|m21
operator|*
name|cy
operator|+
name|data
operator|->
name|m11
operator|*
name|cx
operator|+
name|data
operator|->
name|dx
operator|)
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|int
argument_list|(
operator|(
name|data
operator|->
name|m22
operator|*
name|cy
operator|+
name|data
operator|->
name|m12
operator|*
name|cx
operator|+
name|data
operator|->
name|dy
operator|)
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|spans
operator|->
name|len
decl_stmt|;
specifier|const
name|int
name|coverage
init|=
operator|(
name|spans
operator|->
name|coverage
operator|*
name|data
operator|->
name|texture
operator|.
name|const_alpha
operator|)
operator|>>
literal|8
decl_stmt|;
while|while
condition|(
name|length
condition|)
block|{
name|int
name|l
init|=
name|qMin
argument_list|(
name|length
argument_list|,
name|buffer_size
argument_list|)
decl_stmt|;
specifier|const
name|uint
modifier|*
name|end
init|=
name|buffer
operator|+
name|l
decl_stmt|;
name|uint
modifier|*
name|b
init|=
name|buffer
decl_stmt|;
while|while
condition|(
name|b
operator|<
name|end
condition|)
block|{
name|int
name|px
init|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|x
operator|>>
literal|16
argument_list|,
name|image_width
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|py
init|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|y
operator|>>
literal|16
argument_list|,
name|image_height
operator|-
literal|1
argument_list|)
decl_stmt|;
operator|*
name|b
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint
operator|*
argument_list|>
argument_list|(
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|py
argument_list|)
argument_list|)
index|[
name|px
index|]
expr_stmt|;
name|x
operator|+=
name|fdx
expr_stmt|;
name|y
operator|+=
name|fdy
expr_stmt|;
operator|++
name|b
expr_stmt|;
block|}
name|func
argument_list|(
name|target
argument_list|,
name|buffer
argument_list|,
name|l
argument_list|,
name|coverage
argument_list|)
expr_stmt|;
name|target
operator|+=
name|l
expr_stmt|;
name|length
operator|-=
name|l
expr_stmt|;
block|}
operator|++
name|spans
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|const
name|qreal
name|fdx
init|=
name|data
operator|->
name|m11
decl_stmt|;
specifier|const
name|qreal
name|fdy
init|=
name|data
operator|->
name|m12
decl_stmt|;
specifier|const
name|qreal
name|fdw
init|=
name|data
operator|->
name|m13
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|void
modifier|*
name|t
init|=
name|data
operator|->
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|spans
operator|->
name|y
argument_list|)
decl_stmt|;
name|uint
modifier|*
name|target
init|=
operator|(
operator|(
name|uint
operator|*
operator|)
name|t
operator|)
operator|+
name|spans
operator|->
name|x
decl_stmt|;
specifier|const
name|qreal
name|cx
init|=
name|spans
operator|->
name|x
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|cy
init|=
name|spans
operator|->
name|y
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
name|qreal
name|x
init|=
name|data
operator|->
name|m21
operator|*
name|cy
operator|+
name|data
operator|->
name|m11
operator|*
name|cx
operator|+
name|data
operator|->
name|dx
decl_stmt|;
name|qreal
name|y
init|=
name|data
operator|->
name|m22
operator|*
name|cy
operator|+
name|data
operator|->
name|m12
operator|*
name|cx
operator|+
name|data
operator|->
name|dy
decl_stmt|;
name|qreal
name|w
init|=
name|data
operator|->
name|m23
operator|*
name|cy
operator|+
name|data
operator|->
name|m13
operator|*
name|cx
operator|+
name|data
operator|->
name|m33
decl_stmt|;
name|int
name|length
init|=
name|spans
operator|->
name|len
decl_stmt|;
specifier|const
name|int
name|coverage
init|=
operator|(
name|spans
operator|->
name|coverage
operator|*
name|data
operator|->
name|texture
operator|.
name|const_alpha
operator|)
operator|>>
literal|8
decl_stmt|;
while|while
condition|(
name|length
condition|)
block|{
name|int
name|l
init|=
name|qMin
argument_list|(
name|length
argument_list|,
name|buffer_size
argument_list|)
decl_stmt|;
specifier|const
name|uint
modifier|*
name|end
init|=
name|buffer
operator|+
name|l
decl_stmt|;
name|uint
modifier|*
name|b
init|=
name|buffer
decl_stmt|;
while|while
condition|(
name|b
operator|<
name|end
condition|)
block|{
specifier|const
name|qreal
name|iw
init|=
name|w
operator|==
literal|0
condition|?
literal|1
else|:
literal|1
operator|/
name|w
decl_stmt|;
specifier|const
name|qreal
name|tx
init|=
name|x
operator|*
name|iw
decl_stmt|;
specifier|const
name|qreal
name|ty
init|=
name|y
operator|*
name|iw
decl_stmt|;
specifier|const
name|int
name|px
init|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|int
argument_list|(
name|tx
argument_list|)
operator|-
operator|(
name|tx
operator|<
literal|0
operator|)
argument_list|,
name|image_width
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|int
name|py
init|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|int
argument_list|(
name|ty
argument_list|)
operator|-
operator|(
name|ty
operator|<
literal|0
operator|)
argument_list|,
name|image_height
operator|-
literal|1
argument_list|)
decl_stmt|;
operator|*
name|b
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint
operator|*
argument_list|>
argument_list|(
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|py
argument_list|)
argument_list|)
index|[
name|px
index|]
expr_stmt|;
name|x
operator|+=
name|fdx
expr_stmt|;
name|y
operator|+=
name|fdy
expr_stmt|;
name|w
operator|+=
name|fdw
expr_stmt|;
operator|++
name|b
expr_stmt|;
block|}
name|func
argument_list|(
name|target
argument_list|,
name|buffer
argument_list|,
name|l
argument_list|,
name|coverage
argument_list|)
expr_stmt|;
name|target
operator|+=
name|l
expr_stmt|;
name|length
operator|-=
name|l
expr_stmt|;
block|}
operator|++
name|spans
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|blend_transformed_rgb565
specifier|static
name|void
name|blend_transformed_rgb565
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
block|{
name|QSpanData
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|QSpanData
operator|*
argument_list|>
argument_list|(
name|userData
argument_list|)
decl_stmt|;
name|QPainter
operator|::
name|CompositionMode
name|mode
init|=
name|data
operator|->
name|rasterBuffer
operator|->
name|compositionMode
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|texture
operator|.
name|format
operator|!=
name|QImage
operator|::
name|Format_RGB16
operator|||
operator|(
name|mode
operator|!=
name|QPainter
operator|::
name|CompositionMode_SourceOver
operator|&&
name|mode
operator|!=
name|QPainter
operator|::
name|CompositionMode_Source
operator|)
condition|)
block|{
name|blend_src_generic
argument_list|(
name|count
argument_list|,
name|spans
argument_list|,
name|userData
argument_list|)
expr_stmt|;
return|return;
block|}
name|quint16
name|buffer
index|[
name|buffer_size
index|]
decl_stmt|;
specifier|const
name|int
name|image_width
init|=
name|data
operator|->
name|texture
operator|.
name|width
decl_stmt|;
specifier|const
name|int
name|image_height
init|=
name|data
operator|->
name|texture
operator|.
name|height
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|fast_matrix
condition|)
block|{
comment|// The increment pr x in the scanline
specifier|const
name|int
name|fdx
init|=
call|(
name|int
call|)
argument_list|(
name|data
operator|->
name|m11
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
specifier|const
name|int
name|fdy
init|=
call|(
name|int
call|)
argument_list|(
name|data
operator|->
name|m12
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
block|{
specifier|const
name|quint8
name|coverage
init|=
operator|(
name|data
operator|->
name|texture
operator|.
name|const_alpha
operator|*
name|spans
operator|->
name|coverage
operator|)
operator|>>
literal|8
decl_stmt|;
specifier|const
name|quint8
name|alpha
init|=
operator|(
name|coverage
operator|+
literal|1
operator|)
operator|>>
literal|3
decl_stmt|;
specifier|const
name|quint8
name|ialpha
init|=
literal|0x20
operator|-
name|alpha
decl_stmt|;
if|if
condition|(
name|alpha
operator|==
literal|0
condition|)
block|{
operator|++
name|spans
expr_stmt|;
continue|continue;
block|}
name|quint16
modifier|*
name|dest
init|=
operator|(
name|quint16
operator|*
operator|)
name|data
operator|->
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|spans
operator|->
name|y
argument_list|)
operator|+
name|spans
operator|->
name|x
decl_stmt|;
specifier|const
name|qreal
name|cx
init|=
name|spans
operator|->
name|x
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|cy
init|=
name|spans
operator|->
name|y
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|int
argument_list|(
operator|(
name|data
operator|->
name|m21
operator|*
name|cy
operator|+
name|data
operator|->
name|m11
operator|*
name|cx
operator|+
name|data
operator|->
name|dx
operator|)
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|int
argument_list|(
operator|(
name|data
operator|->
name|m22
operator|*
name|cy
operator|+
name|data
operator|->
name|m12
operator|*
name|cx
operator|+
name|data
operator|->
name|dy
operator|)
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|spans
operator|->
name|len
decl_stmt|;
while|while
condition|(
name|length
condition|)
block|{
name|int
name|l
decl_stmt|;
name|quint16
modifier|*
name|b
decl_stmt|;
if|if
condition|(
name|ialpha
operator|==
literal|0
condition|)
block|{
name|l
operator|=
name|length
expr_stmt|;
name|b
operator|=
name|dest
expr_stmt|;
block|}
else|else
block|{
name|l
operator|=
name|qMin
argument_list|(
name|length
argument_list|,
name|buffer_size
argument_list|)
expr_stmt|;
name|b
operator|=
name|buffer
expr_stmt|;
block|}
specifier|const
name|quint16
modifier|*
name|end
init|=
name|b
operator|+
name|l
decl_stmt|;
while|while
condition|(
name|b
operator|<
name|end
condition|)
block|{
specifier|const
name|int
name|px
init|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|x
operator|>>
literal|16
argument_list|,
name|image_width
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|int
name|py
init|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|y
operator|>>
literal|16
argument_list|,
name|image_height
operator|-
literal|1
argument_list|)
decl_stmt|;
operator|*
name|b
operator|=
operator|(
operator|(
name|quint16
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|py
argument_list|)
operator|)
index|[
name|px
index|]
expr_stmt|;
operator|++
name|b
expr_stmt|;
name|x
operator|+=
name|fdx
expr_stmt|;
name|y
operator|+=
name|fdy
expr_stmt|;
block|}
if|if
condition|(
name|ialpha
operator|!=
literal|0
condition|)
name|blend_sourceOver_rgb16_rgb16
argument_list|(
name|dest
argument_list|,
name|buffer
argument_list|,
name|l
argument_list|,
name|alpha
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
name|dest
operator|+=
name|l
expr_stmt|;
name|length
operator|-=
name|l
expr_stmt|;
block|}
operator|++
name|spans
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|const
name|qreal
name|fdx
init|=
name|data
operator|->
name|m11
decl_stmt|;
specifier|const
name|qreal
name|fdy
init|=
name|data
operator|->
name|m12
decl_stmt|;
specifier|const
name|qreal
name|fdw
init|=
name|data
operator|->
name|m13
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
block|{
specifier|const
name|quint8
name|coverage
init|=
operator|(
name|data
operator|->
name|texture
operator|.
name|const_alpha
operator|*
name|spans
operator|->
name|coverage
operator|)
operator|>>
literal|8
decl_stmt|;
specifier|const
name|quint8
name|alpha
init|=
operator|(
name|coverage
operator|+
literal|1
operator|)
operator|>>
literal|3
decl_stmt|;
specifier|const
name|quint8
name|ialpha
init|=
literal|0x20
operator|-
name|alpha
decl_stmt|;
if|if
condition|(
name|alpha
operator|==
literal|0
condition|)
block|{
operator|++
name|spans
expr_stmt|;
continue|continue;
block|}
name|quint16
modifier|*
name|dest
init|=
operator|(
name|quint16
operator|*
operator|)
name|data
operator|->
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|spans
operator|->
name|y
argument_list|)
operator|+
name|spans
operator|->
name|x
decl_stmt|;
specifier|const
name|qreal
name|cx
init|=
name|spans
operator|->
name|x
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|cy
init|=
name|spans
operator|->
name|y
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
name|qreal
name|x
init|=
name|data
operator|->
name|m21
operator|*
name|cy
operator|+
name|data
operator|->
name|m11
operator|*
name|cx
operator|+
name|data
operator|->
name|dx
decl_stmt|;
name|qreal
name|y
init|=
name|data
operator|->
name|m22
operator|*
name|cy
operator|+
name|data
operator|->
name|m12
operator|*
name|cx
operator|+
name|data
operator|->
name|dy
decl_stmt|;
name|qreal
name|w
init|=
name|data
operator|->
name|m23
operator|*
name|cy
operator|+
name|data
operator|->
name|m13
operator|*
name|cx
operator|+
name|data
operator|->
name|m33
decl_stmt|;
name|int
name|length
init|=
name|spans
operator|->
name|len
decl_stmt|;
while|while
condition|(
name|length
condition|)
block|{
name|int
name|l
decl_stmt|;
name|quint16
modifier|*
name|b
decl_stmt|;
if|if
condition|(
name|ialpha
operator|==
literal|0
condition|)
block|{
name|l
operator|=
name|length
expr_stmt|;
name|b
operator|=
name|dest
expr_stmt|;
block|}
else|else
block|{
name|l
operator|=
name|qMin
argument_list|(
name|length
argument_list|,
name|buffer_size
argument_list|)
expr_stmt|;
name|b
operator|=
name|buffer
expr_stmt|;
block|}
specifier|const
name|quint16
modifier|*
name|end
init|=
name|b
operator|+
name|l
decl_stmt|;
while|while
condition|(
name|b
operator|<
name|end
condition|)
block|{
specifier|const
name|qreal
name|iw
init|=
name|w
operator|==
literal|0
condition|?
literal|1
else|:
literal|1
operator|/
name|w
decl_stmt|;
specifier|const
name|qreal
name|tx
init|=
name|x
operator|*
name|iw
decl_stmt|;
specifier|const
name|qreal
name|ty
init|=
name|y
operator|*
name|iw
decl_stmt|;
specifier|const
name|int
name|px
init|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|int
argument_list|(
name|tx
argument_list|)
operator|-
operator|(
name|tx
operator|<
literal|0
operator|)
argument_list|,
name|image_width
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|int
name|py
init|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|int
argument_list|(
name|ty
argument_list|)
operator|-
operator|(
name|ty
operator|<
literal|0
operator|)
argument_list|,
name|image_height
operator|-
literal|1
argument_list|)
decl_stmt|;
operator|*
name|b
operator|=
operator|(
operator|(
name|quint16
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|py
argument_list|)
operator|)
index|[
name|px
index|]
expr_stmt|;
operator|++
name|b
expr_stmt|;
name|x
operator|+=
name|fdx
expr_stmt|;
name|y
operator|+=
name|fdy
expr_stmt|;
name|w
operator|+=
name|fdw
expr_stmt|;
block|}
if|if
condition|(
name|ialpha
operator|!=
literal|0
condition|)
name|blend_sourceOver_rgb16_rgb16
argument_list|(
name|dest
argument_list|,
name|buffer
argument_list|,
name|l
argument_list|,
name|alpha
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
name|dest
operator|+=
name|l
expr_stmt|;
name|length
operator|-=
name|l
expr_stmt|;
block|}
operator|++
name|spans
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|blend_transformed_tiled_argb
specifier|static
name|void
name|blend_transformed_tiled_argb
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
block|{
name|QSpanData
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|QSpanData
operator|*
argument_list|>
argument_list|(
name|userData
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|texture
operator|.
name|format
operator|!=
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
operator|&&
name|data
operator|->
name|texture
operator|.
name|format
operator|!=
name|QImage
operator|::
name|Format_RGB32
condition|)
block|{
name|blend_src_generic
argument_list|(
name|count
argument_list|,
name|spans
argument_list|,
name|userData
argument_list|)
expr_stmt|;
return|return;
block|}
name|CompositionFunction
name|func
init|=
name|functionForMode
index|[
name|data
operator|->
name|rasterBuffer
operator|->
name|compositionMode
index|]
decl_stmt|;
name|uint
name|buffer
index|[
name|buffer_size
index|]
decl_stmt|;
name|int
name|image_width
init|=
name|data
operator|->
name|texture
operator|.
name|width
decl_stmt|;
name|int
name|image_height
init|=
name|data
operator|->
name|texture
operator|.
name|height
decl_stmt|;
specifier|const
name|int
name|scanline_offset
init|=
name|data
operator|->
name|texture
operator|.
name|bytesPerLine
operator|/
literal|4
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|fast_matrix
condition|)
block|{
comment|// The increment pr x in the scanline
name|int
name|fdx
init|=
call|(
name|int
call|)
argument_list|(
name|data
operator|->
name|m11
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
name|int
name|fdy
init|=
call|(
name|int
call|)
argument_list|(
name|data
operator|->
name|m12
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|void
modifier|*
name|t
init|=
name|data
operator|->
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|spans
operator|->
name|y
argument_list|)
decl_stmt|;
name|uint
modifier|*
name|target
init|=
operator|(
operator|(
name|uint
operator|*
operator|)
name|t
operator|)
operator|+
name|spans
operator|->
name|x
decl_stmt|;
name|uint
modifier|*
name|image_bits
init|=
operator|(
name|uint
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|imageData
decl_stmt|;
specifier|const
name|qreal
name|cx
init|=
name|spans
operator|->
name|x
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|cy
init|=
name|spans
operator|->
name|y
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|int
argument_list|(
operator|(
name|data
operator|->
name|m21
operator|*
name|cy
operator|+
name|data
operator|->
name|m11
operator|*
name|cx
operator|+
name|data
operator|->
name|dx
operator|)
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|int
argument_list|(
operator|(
name|data
operator|->
name|m22
operator|*
name|cy
operator|+
name|data
operator|->
name|m12
operator|*
name|cx
operator|+
name|data
operator|->
name|dy
operator|)
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
specifier|const
name|int
name|coverage
init|=
operator|(
name|spans
operator|->
name|coverage
operator|*
name|data
operator|->
name|texture
operator|.
name|const_alpha
operator|)
operator|>>
literal|8
decl_stmt|;
name|int
name|length
init|=
name|spans
operator|->
name|len
decl_stmt|;
while|while
condition|(
name|length
condition|)
block|{
name|int
name|l
init|=
name|qMin
argument_list|(
name|length
argument_list|,
name|buffer_size
argument_list|)
decl_stmt|;
specifier|const
name|uint
modifier|*
name|end
init|=
name|buffer
operator|+
name|l
decl_stmt|;
name|uint
modifier|*
name|b
init|=
name|buffer
decl_stmt|;
while|while
condition|(
name|b
operator|<
name|end
condition|)
block|{
name|int
name|px
init|=
name|x
operator|>>
literal|16
decl_stmt|;
name|int
name|py
init|=
name|y
operator|>>
literal|16
decl_stmt|;
name|px
operator|%=
name|image_width
expr_stmt|;
name|py
operator|%=
name|image_height
expr_stmt|;
if|if
condition|(
name|px
operator|<
literal|0
condition|)
name|px
operator|+=
name|image_width
expr_stmt|;
if|if
condition|(
name|py
operator|<
literal|0
condition|)
name|py
operator|+=
name|image_height
expr_stmt|;
name|int
name|y_offset
init|=
name|py
operator|*
name|scanline_offset
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|px
operator|>=
literal|0
operator|&&
name|px
operator|<
name|image_width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|py
operator|>=
literal|0
operator|&&
name|py
operator|<
name|image_height
argument_list|)
expr_stmt|;
operator|*
name|b
operator|=
name|image_bits
index|[
name|y_offset
operator|+
name|px
index|]
expr_stmt|;
name|x
operator|+=
name|fdx
expr_stmt|;
name|y
operator|+=
name|fdy
expr_stmt|;
operator|++
name|b
expr_stmt|;
block|}
name|func
argument_list|(
name|target
argument_list|,
name|buffer
argument_list|,
name|l
argument_list|,
name|coverage
argument_list|)
expr_stmt|;
name|target
operator|+=
name|l
expr_stmt|;
name|length
operator|-=
name|l
expr_stmt|;
block|}
operator|++
name|spans
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|const
name|qreal
name|fdx
init|=
name|data
operator|->
name|m11
decl_stmt|;
specifier|const
name|qreal
name|fdy
init|=
name|data
operator|->
name|m12
decl_stmt|;
specifier|const
name|qreal
name|fdw
init|=
name|data
operator|->
name|m13
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|void
modifier|*
name|t
init|=
name|data
operator|->
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|spans
operator|->
name|y
argument_list|)
decl_stmt|;
name|uint
modifier|*
name|target
init|=
operator|(
operator|(
name|uint
operator|*
operator|)
name|t
operator|)
operator|+
name|spans
operator|->
name|x
decl_stmt|;
name|uint
modifier|*
name|image_bits
init|=
operator|(
name|uint
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|imageData
decl_stmt|;
specifier|const
name|qreal
name|cx
init|=
name|spans
operator|->
name|x
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|cy
init|=
name|spans
operator|->
name|y
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
name|qreal
name|x
init|=
name|data
operator|->
name|m21
operator|*
name|cy
operator|+
name|data
operator|->
name|m11
operator|*
name|cx
operator|+
name|data
operator|->
name|dx
decl_stmt|;
name|qreal
name|y
init|=
name|data
operator|->
name|m22
operator|*
name|cy
operator|+
name|data
operator|->
name|m12
operator|*
name|cx
operator|+
name|data
operator|->
name|dy
decl_stmt|;
name|qreal
name|w
init|=
name|data
operator|->
name|m23
operator|*
name|cy
operator|+
name|data
operator|->
name|m13
operator|*
name|cx
operator|+
name|data
operator|->
name|m33
decl_stmt|;
specifier|const
name|int
name|coverage
init|=
operator|(
name|spans
operator|->
name|coverage
operator|*
name|data
operator|->
name|texture
operator|.
name|const_alpha
operator|)
operator|>>
literal|8
decl_stmt|;
name|int
name|length
init|=
name|spans
operator|->
name|len
decl_stmt|;
while|while
condition|(
name|length
condition|)
block|{
name|int
name|l
init|=
name|qMin
argument_list|(
name|length
argument_list|,
name|buffer_size
argument_list|)
decl_stmt|;
specifier|const
name|uint
modifier|*
name|end
init|=
name|buffer
operator|+
name|l
decl_stmt|;
name|uint
modifier|*
name|b
init|=
name|buffer
decl_stmt|;
while|while
condition|(
name|b
operator|<
name|end
condition|)
block|{
specifier|const
name|qreal
name|iw
init|=
name|w
operator|==
literal|0
condition|?
literal|1
else|:
literal|1
operator|/
name|w
decl_stmt|;
specifier|const
name|qreal
name|tx
init|=
name|x
operator|*
name|iw
decl_stmt|;
specifier|const
name|qreal
name|ty
init|=
name|y
operator|*
name|iw
decl_stmt|;
name|int
name|px
init|=
name|int
argument_list|(
name|tx
argument_list|)
operator|-
operator|(
name|tx
operator|<
literal|0
operator|)
decl_stmt|;
name|int
name|py
init|=
name|int
argument_list|(
name|ty
argument_list|)
operator|-
operator|(
name|ty
operator|<
literal|0
operator|)
decl_stmt|;
name|px
operator|%=
name|image_width
expr_stmt|;
name|py
operator|%=
name|image_height
expr_stmt|;
if|if
condition|(
name|px
operator|<
literal|0
condition|)
name|px
operator|+=
name|image_width
expr_stmt|;
if|if
condition|(
name|py
operator|<
literal|0
condition|)
name|py
operator|+=
name|image_height
expr_stmt|;
name|int
name|y_offset
init|=
name|py
operator|*
name|scanline_offset
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|px
operator|>=
literal|0
operator|&&
name|px
operator|<
name|image_width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|py
operator|>=
literal|0
operator|&&
name|py
operator|<
name|image_height
argument_list|)
expr_stmt|;
operator|*
name|b
operator|=
name|image_bits
index|[
name|y_offset
operator|+
name|px
index|]
expr_stmt|;
name|x
operator|+=
name|fdx
expr_stmt|;
name|y
operator|+=
name|fdy
expr_stmt|;
name|w
operator|+=
name|fdw
expr_stmt|;
comment|//force increment to avoid /0
if|if
condition|(
operator|!
name|w
condition|)
block|{
name|w
operator|+=
name|fdw
expr_stmt|;
block|}
operator|++
name|b
expr_stmt|;
block|}
name|func
argument_list|(
name|target
argument_list|,
name|buffer
argument_list|,
name|l
argument_list|,
name|coverage
argument_list|)
expr_stmt|;
name|target
operator|+=
name|l
expr_stmt|;
name|length
operator|-=
name|l
expr_stmt|;
block|}
operator|++
name|spans
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|blend_transformed_tiled_rgb565
specifier|static
name|void
name|blend_transformed_tiled_rgb565
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
block|{
name|QSpanData
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|QSpanData
operator|*
argument_list|>
argument_list|(
name|userData
argument_list|)
decl_stmt|;
name|QPainter
operator|::
name|CompositionMode
name|mode
init|=
name|data
operator|->
name|rasterBuffer
operator|->
name|compositionMode
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|texture
operator|.
name|format
operator|!=
name|QImage
operator|::
name|Format_RGB16
operator|||
operator|(
name|mode
operator|!=
name|QPainter
operator|::
name|CompositionMode_SourceOver
operator|&&
name|mode
operator|!=
name|QPainter
operator|::
name|CompositionMode_Source
operator|)
condition|)
block|{
name|blend_src_generic
argument_list|(
name|count
argument_list|,
name|spans
argument_list|,
name|userData
argument_list|)
expr_stmt|;
return|return;
block|}
name|quint16
name|buffer
index|[
name|buffer_size
index|]
decl_stmt|;
specifier|const
name|int
name|image_width
init|=
name|data
operator|->
name|texture
operator|.
name|width
decl_stmt|;
specifier|const
name|int
name|image_height
init|=
name|data
operator|->
name|texture
operator|.
name|height
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|fast_matrix
condition|)
block|{
comment|// The increment pr x in the scanline
specifier|const
name|int
name|fdx
init|=
call|(
name|int
call|)
argument_list|(
name|data
operator|->
name|m11
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
specifier|const
name|int
name|fdy
init|=
call|(
name|int
call|)
argument_list|(
name|data
operator|->
name|m12
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
block|{
specifier|const
name|quint8
name|coverage
init|=
operator|(
name|data
operator|->
name|texture
operator|.
name|const_alpha
operator|*
name|spans
operator|->
name|coverage
operator|)
operator|>>
literal|8
decl_stmt|;
specifier|const
name|quint8
name|alpha
init|=
operator|(
name|coverage
operator|+
literal|1
operator|)
operator|>>
literal|3
decl_stmt|;
specifier|const
name|quint8
name|ialpha
init|=
literal|0x20
operator|-
name|alpha
decl_stmt|;
if|if
condition|(
name|alpha
operator|==
literal|0
condition|)
block|{
operator|++
name|spans
expr_stmt|;
continue|continue;
block|}
name|quint16
modifier|*
name|dest
init|=
operator|(
name|quint16
operator|*
operator|)
name|data
operator|->
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|spans
operator|->
name|y
argument_list|)
operator|+
name|spans
operator|->
name|x
decl_stmt|;
specifier|const
name|qreal
name|cx
init|=
name|spans
operator|->
name|x
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|cy
init|=
name|spans
operator|->
name|y
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|int
argument_list|(
operator|(
name|data
operator|->
name|m21
operator|*
name|cy
operator|+
name|data
operator|->
name|m11
operator|*
name|cx
operator|+
name|data
operator|->
name|dx
operator|)
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|int
argument_list|(
operator|(
name|data
operator|->
name|m22
operator|*
name|cy
operator|+
name|data
operator|->
name|m12
operator|*
name|cx
operator|+
name|data
operator|->
name|dy
operator|)
operator|*
name|fixed_scale
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|spans
operator|->
name|len
decl_stmt|;
while|while
condition|(
name|length
condition|)
block|{
name|int
name|l
decl_stmt|;
name|quint16
modifier|*
name|b
decl_stmt|;
if|if
condition|(
name|ialpha
operator|==
literal|0
condition|)
block|{
name|l
operator|=
name|length
expr_stmt|;
name|b
operator|=
name|dest
expr_stmt|;
block|}
else|else
block|{
name|l
operator|=
name|qMin
argument_list|(
name|length
argument_list|,
name|buffer_size
argument_list|)
expr_stmt|;
name|b
operator|=
name|buffer
expr_stmt|;
block|}
specifier|const
name|quint16
modifier|*
name|end
init|=
name|b
operator|+
name|l
decl_stmt|;
while|while
condition|(
name|b
operator|<
name|end
condition|)
block|{
name|int
name|px
init|=
operator|(
name|x
operator|>>
literal|16
operator|)
operator|%
name|image_width
decl_stmt|;
name|int
name|py
init|=
operator|(
name|y
operator|>>
literal|16
operator|)
operator|%
name|image_height
decl_stmt|;
if|if
condition|(
name|px
operator|<
literal|0
condition|)
name|px
operator|+=
name|image_width
expr_stmt|;
if|if
condition|(
name|py
operator|<
literal|0
condition|)
name|py
operator|+=
name|image_height
expr_stmt|;
operator|*
name|b
operator|=
operator|(
operator|(
name|quint16
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|py
argument_list|)
operator|)
index|[
name|px
index|]
expr_stmt|;
operator|++
name|b
expr_stmt|;
name|x
operator|+=
name|fdx
expr_stmt|;
name|y
operator|+=
name|fdy
expr_stmt|;
block|}
if|if
condition|(
name|ialpha
operator|!=
literal|0
condition|)
name|blend_sourceOver_rgb16_rgb16
argument_list|(
name|dest
argument_list|,
name|buffer
argument_list|,
name|l
argument_list|,
name|alpha
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
name|dest
operator|+=
name|l
expr_stmt|;
name|length
operator|-=
name|l
expr_stmt|;
block|}
operator|++
name|spans
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|const
name|qreal
name|fdx
init|=
name|data
operator|->
name|m11
decl_stmt|;
specifier|const
name|qreal
name|fdy
init|=
name|data
operator|->
name|m12
decl_stmt|;
specifier|const
name|qreal
name|fdw
init|=
name|data
operator|->
name|m13
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
block|{
specifier|const
name|quint8
name|coverage
init|=
operator|(
name|data
operator|->
name|texture
operator|.
name|const_alpha
operator|*
name|spans
operator|->
name|coverage
operator|)
operator|>>
literal|8
decl_stmt|;
specifier|const
name|quint8
name|alpha
init|=
operator|(
name|coverage
operator|+
literal|1
operator|)
operator|>>
literal|3
decl_stmt|;
specifier|const
name|quint8
name|ialpha
init|=
literal|0x20
operator|-
name|alpha
decl_stmt|;
if|if
condition|(
name|alpha
operator|==
literal|0
condition|)
block|{
operator|++
name|spans
expr_stmt|;
continue|continue;
block|}
name|quint16
modifier|*
name|dest
init|=
operator|(
name|quint16
operator|*
operator|)
name|data
operator|->
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|spans
operator|->
name|y
argument_list|)
operator|+
name|spans
operator|->
name|x
decl_stmt|;
specifier|const
name|qreal
name|cx
init|=
name|spans
operator|->
name|x
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|cy
init|=
name|spans
operator|->
name|y
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
decl_stmt|;
name|qreal
name|x
init|=
name|data
operator|->
name|m21
operator|*
name|cy
operator|+
name|data
operator|->
name|m11
operator|*
name|cx
operator|+
name|data
operator|->
name|dx
decl_stmt|;
name|qreal
name|y
init|=
name|data
operator|->
name|m22
operator|*
name|cy
operator|+
name|data
operator|->
name|m12
operator|*
name|cx
operator|+
name|data
operator|->
name|dy
decl_stmt|;
name|qreal
name|w
init|=
name|data
operator|->
name|m23
operator|*
name|cy
operator|+
name|data
operator|->
name|m13
operator|*
name|cx
operator|+
name|data
operator|->
name|m33
decl_stmt|;
name|int
name|length
init|=
name|spans
operator|->
name|len
decl_stmt|;
while|while
condition|(
name|length
condition|)
block|{
name|int
name|l
decl_stmt|;
name|quint16
modifier|*
name|b
decl_stmt|;
if|if
condition|(
name|ialpha
operator|==
literal|0
condition|)
block|{
name|l
operator|=
name|length
expr_stmt|;
name|b
operator|=
name|dest
expr_stmt|;
block|}
else|else
block|{
name|l
operator|=
name|qMin
argument_list|(
name|length
argument_list|,
name|buffer_size
argument_list|)
expr_stmt|;
name|b
operator|=
name|buffer
expr_stmt|;
block|}
specifier|const
name|quint16
modifier|*
name|end
init|=
name|b
operator|+
name|l
decl_stmt|;
while|while
condition|(
name|b
operator|<
name|end
condition|)
block|{
specifier|const
name|qreal
name|iw
init|=
name|w
operator|==
literal|0
condition|?
literal|1
else|:
literal|1
operator|/
name|w
decl_stmt|;
specifier|const
name|qreal
name|tx
init|=
name|x
operator|*
name|iw
decl_stmt|;
specifier|const
name|qreal
name|ty
init|=
name|y
operator|*
name|iw
decl_stmt|;
name|int
name|px
init|=
name|int
argument_list|(
name|tx
argument_list|)
operator|-
operator|(
name|tx
operator|<
literal|0
operator|)
decl_stmt|;
name|int
name|py
init|=
name|int
argument_list|(
name|ty
argument_list|)
operator|-
operator|(
name|ty
operator|<
literal|0
operator|)
decl_stmt|;
name|px
operator|%=
name|image_width
expr_stmt|;
name|py
operator|%=
name|image_height
expr_stmt|;
if|if
condition|(
name|px
operator|<
literal|0
condition|)
name|px
operator|+=
name|image_width
expr_stmt|;
if|if
condition|(
name|py
operator|<
literal|0
condition|)
name|py
operator|+=
name|image_height
expr_stmt|;
operator|*
name|b
operator|=
operator|(
operator|(
name|quint16
operator|*
operator|)
name|data
operator|->
name|texture
operator|.
name|scanLine
argument_list|(
name|py
argument_list|)
operator|)
index|[
name|px
index|]
expr_stmt|;
operator|++
name|b
expr_stmt|;
name|x
operator|+=
name|fdx
expr_stmt|;
name|y
operator|+=
name|fdy
expr_stmt|;
name|w
operator|+=
name|fdw
expr_stmt|;
comment|// force increment to avoid /0
if|if
condition|(
operator|!
name|w
condition|)
name|w
operator|+=
name|fdw
expr_stmt|;
block|}
if|if
condition|(
name|ialpha
operator|!=
literal|0
condition|)
name|blend_sourceOver_rgb16_rgb16
argument_list|(
name|dest
argument_list|,
name|buffer
argument_list|,
name|l
argument_list|,
name|alpha
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
name|dest
operator|+=
name|l
expr_stmt|;
name|length
operator|-=
name|l
expr_stmt|;
block|}
operator|++
name|spans
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/* Image formats here are target formats */
end_comment
begin_decl_stmt
DECL|variable|processTextureSpans
specifier|static
specifier|const
name|ProcessSpans
name|processTextureSpans
index|[
name|NBlendTypes
index|]
index|[
name|QImage
operator|::
name|NImageFormats
index|]
init|=
block|{
comment|// Untransformed
block|{
literal|0
block|,
comment|// Invalid
name|blend_untransformed_generic
block|,
comment|// Mono
name|blend_untransformed_generic
block|,
comment|// MonoLsb
name|blend_untransformed_generic
block|,
comment|// Indexed8
name|blend_untransformed_generic
block|,
comment|// RGB32
name|blend_untransformed_generic
block|,
comment|// ARGB32
name|blend_untransformed_argb
block|,
comment|// ARGB32_Premultiplied
name|blend_untransformed_rgb565
block|,
name|blend_untransformed_generic
block|,
name|blend_untransformed_generic
block|,
name|blend_untransformed_generic
block|,
name|blend_untransformed_generic
block|,
name|blend_untransformed_generic
block|,
name|blend_untransformed_generic
block|,
name|blend_untransformed_generic
block|,
name|blend_untransformed_generic
block|,     }
block|,
comment|// Tiled
block|{
literal|0
block|,
comment|// Invalid
name|blend_tiled_generic
block|,
comment|// Mono
name|blend_tiled_generic
block|,
comment|// MonoLsb
name|blend_tiled_generic
block|,
comment|// Indexed8
name|blend_tiled_generic
block|,
comment|// RGB32
name|blend_tiled_generic
block|,
comment|// ARGB32
name|blend_tiled_argb
block|,
comment|// ARGB32_Premultiplied
name|blend_tiled_rgb565
block|,
name|blend_tiled_generic
block|,
name|blend_tiled_generic
block|,
name|blend_tiled_generic
block|,
name|blend_tiled_generic
block|,
name|blend_tiled_generic
block|,
name|blend_tiled_generic
block|,
name|blend_tiled_generic
block|,
name|blend_tiled_generic
block|,     }
block|,
comment|// Transformed
block|{
literal|0
block|,
comment|// Invalid
name|blend_src_generic
block|,
comment|// Mono
name|blend_src_generic
block|,
comment|// MonoLsb
name|blend_src_generic
block|,
comment|// Indexed8
name|blend_src_generic
block|,
comment|// RGB32
name|blend_src_generic
block|,
comment|// ARGB32
name|blend_transformed_argb
block|,
comment|// ARGB32_Premultiplied
name|blend_transformed_rgb565
block|,
name|blend_src_generic
block|,
name|blend_src_generic
block|,
name|blend_src_generic
block|,
name|blend_src_generic
block|,
name|blend_src_generic
block|,
name|blend_src_generic
block|,
name|blend_src_generic
block|,
name|blend_src_generic
block|,     }
block|,
comment|// TransformedTiled
block|{
literal|0
block|,
name|blend_src_generic
block|,
comment|// Mono
name|blend_src_generic
block|,
comment|// MonoLsb
name|blend_src_generic
block|,
comment|// Indexed8
name|blend_src_generic
block|,
comment|// RGB32
name|blend_src_generic
block|,
comment|// ARGB32
name|blend_transformed_tiled_argb
block|,
comment|// ARGB32_Premultiplied
name|blend_transformed_tiled_rgb565
block|,
name|blend_src_generic
block|,
name|blend_src_generic
block|,
name|blend_src_generic
block|,
name|blend_src_generic
block|,
name|blend_src_generic
block|,
name|blend_src_generic
block|,
name|blend_src_generic
block|,
name|blend_src_generic
block|}
block|,
comment|// Bilinear
block|{
literal|0
block|,
name|blend_src_generic
block|,
comment|// Mono
name|blend_src_generic
block|,
comment|// MonoLsb
name|blend_src_generic
block|,
comment|// Indexed8
name|blend_src_generic
block|,
comment|// RGB32
name|blend_src_generic
block|,
comment|// ARGB32
name|blend_src_generic
block|,
comment|// ARGB32_Premultiplied
name|blend_transformed_bilinear_rgb565
block|,
name|blend_src_generic
block|,
name|blend_src_generic
block|,
name|blend_src_generic
block|,
name|blend_src_generic
block|,
name|blend_src_generic
block|,
name|blend_src_generic
block|,
name|blend_src_generic
block|,
name|blend_src_generic
block|,     }
block|,
comment|// BilinearTiled
block|{
literal|0
block|,
name|blend_src_generic
block|,
comment|// Mono
name|blend_src_generic
block|,
comment|// MonoLsb
name|blend_src_generic
block|,
comment|// Indexed8
name|blend_src_generic
block|,
comment|// RGB32
name|blend_src_generic
block|,
comment|// ARGB32
name|blend_src_generic
block|,
comment|// ARGB32_Premultiplied
name|blend_src_generic
block|,
comment|// RGB16
name|blend_src_generic
block|,
comment|// ARGB8565_Premultiplied
name|blend_src_generic
block|,
comment|// RGB666
name|blend_src_generic
block|,
comment|// ARGB6666_Premultiplied
name|blend_src_generic
block|,
comment|// RGB555
name|blend_src_generic
block|,
comment|// ARGB8555_Premultiplied
name|blend_src_generic
block|,
comment|// RGB888
name|blend_src_generic
block|,
comment|// RGB444
name|blend_src_generic
block|,
comment|// ARGB4444_Premultiplied
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qBlendTexture
name|void
name|qBlendTexture
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
block|{
name|QSpanData
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|QSpanData
operator|*
argument_list|>
argument_list|(
name|userData
argument_list|)
decl_stmt|;
name|ProcessSpans
name|proc
init|=
name|processTextureSpans
index|[
name|getBlendType
argument_list|(
name|data
argument_list|)
index|]
index|[
name|data
operator|->
name|rasterBuffer
operator|->
name|format
index|]
decl_stmt|;
name|proc
argument_list|(
name|count
argument_list|,
name|spans
argument_list|,
name|userData
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|DST
parameter_list|>
DECL|function|qt_bitmapblit_template
specifier|inline
name|void
name|qt_bitmapblit_template
parameter_list|(
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|DST
name|color
parameter_list|,
specifier|const
name|uchar
modifier|*
name|map
parameter_list|,
name|int
name|mapWidth
parameter_list|,
name|int
name|mapHeight
parameter_list|,
name|int
name|mapStride
parameter_list|)
block|{
name|DST
modifier|*
name|dest
init|=
cast|reinterpret_cast
argument_list|<
name|DST
operator|*
argument_list|>
argument_list|(
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
argument_list|)
operator|+
name|x
decl_stmt|;
specifier|const
name|int
name|destStride
init|=
name|rasterBuffer
operator|->
name|bytesPerLine
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|DST
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapWidth
operator|>
literal|8
condition|)
block|{
while|while
condition|(
name|mapHeight
operator|--
condition|)
block|{
name|int
name|x0
init|=
literal|0
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|mapWidth
condition|;
name|x
operator|+=
literal|8
control|)
block|{
name|uchar
name|s
init|=
name|map
index|[
name|x
operator|>>
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|s
operator|&
literal|0x80
condition|)
block|{
operator|++
name|n
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|n
condition|)
block|{
name|qt_memfill
argument_list|(
name|dest
operator|+
name|x0
argument_list|,
name|color
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|x0
operator|+=
name|n
operator|+
literal|1
expr_stmt|;
name|n
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|x0
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|s
condition|)
block|{
name|x0
operator|+=
literal|8
operator|-
literal|1
operator|-
name|i
expr_stmt|;
break|break;
block|}
block|}
name|s
operator|<<=
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|n
condition|)
name|qt_memfill
argument_list|(
name|dest
operator|+
name|x0
argument_list|,
name|color
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|dest
operator|+=
name|destStride
expr_stmt|;
name|map
operator|+=
name|mapStride
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|mapHeight
operator|--
condition|)
block|{
name|int
name|x0
init|=
literal|0
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|uchar
name|s
init|=
operator|*
name|map
init|;
name|s
condition|;
name|s
operator|<<=
literal|1
control|)
block|{
if|if
condition|(
name|s
operator|&
literal|0x80
condition|)
block|{
operator|++
name|n
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|n
condition|)
block|{
name|qt_memfill
argument_list|(
name|dest
operator|+
name|x0
argument_list|,
name|color
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|x0
operator|+=
name|n
operator|+
literal|1
expr_stmt|;
name|n
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|x0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|n
condition|)
name|qt_memfill
argument_list|(
name|dest
operator|+
name|x0
argument_list|,
name|color
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|dest
operator|+=
name|destStride
expr_stmt|;
name|map
operator|+=
name|mapStride
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|qt_gradient_quint32
specifier|static
name|void
name|qt_gradient_quint32
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
block|{
name|QSpanData
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|QSpanData
operator|*
argument_list|>
argument_list|(
name|userData
argument_list|)
decl_stmt|;
name|bool
name|isVerticalGradient
init|=
name|data
operator|->
name|txop
operator|<=
name|QTransform
operator|::
name|TxScale
operator|&&
name|data
operator|->
name|type
operator|==
name|QSpanData
operator|::
name|LinearGradient
operator|&&
name|data
operator|->
name|gradient
operator|.
name|linear
operator|.
name|end
operator|.
name|x
operator|==
name|data
operator|->
name|gradient
operator|.
name|linear
operator|.
name|origin
operator|.
name|x
decl_stmt|;
if|if
condition|(
name|isVerticalGradient
condition|)
block|{
name|LinearGradientValues
name|linear
decl_stmt|;
name|getLinearGradientValues
argument_list|(
operator|&
name|linear
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|CompositionFunctionSolid
name|funcSolid
init|=
name|functionForModeSolid
index|[
name|data
operator|->
name|rasterBuffer
operator|->
name|compositionMode
index|]
decl_stmt|;
comment|/*             The logic for vertical gradient calculations is a mathematically             reduced copy of that in fetchLinearGradient() - which is basically:                  qreal ry = data->m22 * (y + 0.5) + data->dy;                 qreal t = linear.dy*ry + linear.off;                 t *= (GRADIENT_STOPTABLE_SIZE - 1);                 quint32 color =                     qt_gradient_pixel_fixed(&data->gradient,                                             int(t * FIXPT_SIZE));              This has then been converted to fixed point to improve performance.          */
specifier|const
name|int
name|gss
init|=
name|GRADIENT_STOPTABLE_SIZE
operator|-
literal|1
decl_stmt|;
name|int
name|yinc
init|=
name|int
argument_list|(
operator|(
name|linear
operator|.
name|dy
operator|*
name|data
operator|->
name|m22
operator|*
name|gss
operator|)
operator|*
name|FIXPT_SIZE
argument_list|)
decl_stmt|;
name|int
name|off
init|=
name|int
argument_list|(
operator|(
operator|(
operator|(
name|linear
operator|.
name|dy
operator|*
operator|(
name|data
operator|->
name|m22
operator|*
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|+
name|data
operator|->
name|dy
operator|)
operator|+
name|linear
operator|.
name|off
operator|)
operator|*
name|gss
operator|)
operator|*
name|FIXPT_SIZE
operator|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|int
name|y
init|=
name|spans
operator|->
name|y
decl_stmt|;
name|int
name|x
init|=
name|spans
operator|->
name|x
decl_stmt|;
name|quint32
modifier|*
name|dst
init|=
operator|(
name|quint32
operator|*
operator|)
operator|(
name|data
operator|->
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
operator|)
operator|+
name|x
decl_stmt|;
name|quint32
name|color
init|=
name|qt_gradient_pixel_fixed
argument_list|(
operator|&
name|data
operator|->
name|gradient
argument_list|,
name|yinc
operator|*
name|y
operator|+
name|off
argument_list|)
decl_stmt|;
name|funcSolid
argument_list|(
name|dst
argument_list|,
name|spans
operator|->
name|len
argument_list|,
name|color
argument_list|,
name|spans
operator|->
name|coverage
argument_list|)
expr_stmt|;
operator|++
name|spans
expr_stmt|;
block|}
block|}
else|else
block|{
name|blend_src_generic
argument_list|(
name|count
argument_list|,
name|spans
argument_list|,
name|userData
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_gradient_quint16
specifier|static
name|void
name|qt_gradient_quint16
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
block|{
name|QSpanData
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|QSpanData
operator|*
argument_list|>
argument_list|(
name|userData
argument_list|)
decl_stmt|;
name|bool
name|isVerticalGradient
init|=
name|data
operator|->
name|txop
operator|<=
name|QTransform
operator|::
name|TxScale
operator|&&
name|data
operator|->
name|type
operator|==
name|QSpanData
operator|::
name|LinearGradient
operator|&&
name|data
operator|->
name|gradient
operator|.
name|linear
operator|.
name|end
operator|.
name|x
operator|==
name|data
operator|->
name|gradient
operator|.
name|linear
operator|.
name|origin
operator|.
name|x
decl_stmt|;
if|if
condition|(
name|isVerticalGradient
condition|)
block|{
name|LinearGradientValues
name|linear
decl_stmt|;
name|getLinearGradientValues
argument_list|(
operator|&
name|linear
argument_list|,
name|data
argument_list|)
expr_stmt|;
comment|/*             The logic for vertical gradient calculations is a mathematically             reduced copy of that in fetchLinearGradient() - which is basically:                  qreal ry = data->m22 * (y + 0.5) + data->dy;                 qreal t = linear.dy*ry + linear.off;                 t *= (GRADIENT_STOPTABLE_SIZE - 1);                 quint32 color =                     qt_gradient_pixel_fixed(&data->gradient,                                             int(t * FIXPT_SIZE));              This has then been converted to fixed point to improve performance.          */
specifier|const
name|int
name|gss
init|=
name|GRADIENT_STOPTABLE_SIZE
operator|-
literal|1
decl_stmt|;
name|int
name|yinc
init|=
name|int
argument_list|(
operator|(
name|linear
operator|.
name|dy
operator|*
name|data
operator|->
name|m22
operator|*
name|gss
operator|)
operator|*
name|FIXPT_SIZE
argument_list|)
decl_stmt|;
name|int
name|off
init|=
name|int
argument_list|(
operator|(
operator|(
operator|(
name|linear
operator|.
name|dy
operator|*
operator|(
name|data
operator|->
name|m22
operator|*
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|+
name|data
operator|->
name|dy
operator|)
operator|+
name|linear
operator|.
name|off
operator|)
operator|*
name|gss
operator|)
operator|*
name|FIXPT_SIZE
operator|)
argument_list|)
decl_stmt|;
name|uint
name|oldColor
init|=
name|data
operator|->
name|solid
operator|.
name|color
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|int
name|y
init|=
name|spans
operator|->
name|y
decl_stmt|;
name|quint32
name|color
init|=
name|qt_gradient_pixel_fixed
argument_list|(
operator|&
name|data
operator|->
name|gradient
argument_list|,
name|yinc
operator|*
name|y
operator|+
name|off
argument_list|)
decl_stmt|;
name|data
operator|->
name|solid
operator|.
name|color
operator|=
name|color
expr_stmt|;
name|blend_color_rgb16
argument_list|(
literal|1
argument_list|,
name|spans
argument_list|,
name|userData
argument_list|)
expr_stmt|;
operator|++
name|spans
expr_stmt|;
block|}
name|data
operator|->
name|solid
operator|.
name|color
operator|=
name|oldColor
expr_stmt|;
block|}
else|else
block|{
name|blend_src_generic
argument_list|(
name|count
argument_list|,
name|spans
argument_list|,
name|userData
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_bitmapblit_quint32
specifier|inline
specifier|static
name|void
name|qt_bitmapblit_quint32
parameter_list|(
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|quint32
name|color
parameter_list|,
specifier|const
name|uchar
modifier|*
name|map
parameter_list|,
name|int
name|mapWidth
parameter_list|,
name|int
name|mapHeight
parameter_list|,
name|int
name|mapStride
parameter_list|)
block|{
name|qt_bitmapblit_template
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|rasterBuffer
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|color
argument_list|,
name|map
argument_list|,
name|mapWidth
argument_list|,
name|mapHeight
argument_list|,
name|mapStride
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_bitmapblit_quint16
specifier|inline
specifier|static
name|void
name|qt_bitmapblit_quint16
parameter_list|(
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|quint32
name|color
parameter_list|,
specifier|const
name|uchar
modifier|*
name|map
parameter_list|,
name|int
name|mapWidth
parameter_list|,
name|int
name|mapHeight
parameter_list|,
name|int
name|mapStride
parameter_list|)
block|{
name|qt_bitmapblit_template
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|rasterBuffer
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|qConvertRgb32To16
argument_list|(
name|color
argument_list|)
argument_list|,
name|map
argument_list|,
name|mapWidth
argument_list|,
name|mapHeight
argument_list|,
name|mapStride
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|QDrawHelperGammaTables
struct|struct
name|QDrawHelperGammaTables
block|{
name|QDrawHelperGammaTables
parameter_list|()
constructor_decl|;
DECL|member|qt_pow_rgb_gamma
name|uchar
name|qt_pow_rgb_gamma
index|[
literal|256
index|]
decl_stmt|;
DECL|member|qt_pow_rgb_invgamma
name|uchar
name|qt_pow_rgb_invgamma
index|[
literal|256
index|]
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
DECL|member|qt_pow_gamma
name|uint
name|qt_pow_gamma
index|[
literal|256
index|]
decl_stmt|;
DECL|member|qt_pow_invgamma
name|uchar
name|qt_pow_invgamma
index|[
literal|2048
index|]
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct
begin_constructor
DECL|function|QDrawHelperGammaTables
name|QDrawHelperGammaTables
operator|::
name|QDrawHelperGammaTables
parameter_list|()
block|{
name|qreal
name|smoothing
init|=
name|qreal
argument_list|(
literal|1.7
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
block|{
name|qt_pow_rgb_gamma
index|[
name|i
index|]
operator|=
name|uchar
argument_list|(
name|qRound
argument_list|(
name|qPow
argument_list|(
name|i
operator|/
name|qreal
argument_list|(
literal|255.0
argument_list|)
argument_list|,
name|smoothing
argument_list|)
operator|*
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|qt_pow_rgb_invgamma
index|[
name|i
index|]
operator|=
name|uchar
argument_list|(
name|qRound
argument_list|(
name|qPow
argument_list|(
name|i
operator|/
name|qreal
argument_list|(
literal|255.
argument_list|)
argument_list|,
literal|1
operator|/
name|smoothing
argument_list|)
operator|*
literal|255
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
specifier|const
name|qreal
name|gray_gamma
init|=
literal|2.31
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|qt_pow_gamma
index|[
name|i
index|]
operator|=
name|uint
argument_list|(
name|qRound
argument_list|(
name|qPow
argument_list|(
name|i
operator|/
name|qreal
argument_list|(
literal|255.
argument_list|)
argument_list|,
name|gray_gamma
argument_list|)
operator|*
literal|2047
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2048
condition|;
operator|++
name|i
control|)
name|qt_pow_invgamma
index|[
name|i
index|]
operator|=
name|uchar
argument_list|(
name|qRound
argument_list|(
name|qPow
argument_list|(
name|i
operator|/
name|qreal
argument_list|(
literal|2047.0
argument_list|)
argument_list|,
literal|1
operator|/
name|gray_gamma
argument_list|)
operator|*
literal|255
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QDrawHelperGammaTables
argument_list|,
name|qt_gamma_tables
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_function
DECL|function|qt_pow_gamma
specifier|const
name|uint
modifier|*
name|qt_pow_gamma
parameter_list|()
block|{
name|QDrawHelperGammaTables
modifier|*
name|tables
init|=
name|qt_gamma_tables
argument_list|()
decl_stmt|;
return|return
name|tables
condition|?
name|tables
operator|->
name|qt_pow_gamma
else|:
literal|0
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qt_pow_rgb_gamma
specifier|const
name|uchar
modifier|*
name|qt_pow_rgb_gamma
parameter_list|()
block|{
name|QDrawHelperGammaTables
modifier|*
name|tables
init|=
name|qt_gamma_tables
argument_list|()
decl_stmt|;
return|return
name|tables
condition|?
name|tables
operator|->
name|qt_pow_rgb_gamma
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qt_alphamapblit_quint16
specifier|static
name|void
name|qt_alphamapblit_quint16
parameter_list|(
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|quint32
name|color
parameter_list|,
specifier|const
name|uchar
modifier|*
name|map
parameter_list|,
name|int
name|mapWidth
parameter_list|,
name|int
name|mapHeight
parameter_list|,
name|int
name|mapStride
parameter_list|,
specifier|const
name|QClipData
modifier|*
parameter_list|)
block|{
specifier|const
name|quint16
name|c
init|=
name|qConvertRgb32To16
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|quint16
modifier|*
name|dest
init|=
cast|reinterpret_cast
argument_list|<
name|quint16
operator|*
argument_list|>
argument_list|(
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
argument_list|)
operator|+
name|x
decl_stmt|;
specifier|const
name|int
name|destStride
init|=
name|rasterBuffer
operator|->
name|bytesPerLine
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|quint16
argument_list|)
decl_stmt|;
while|while
condition|(
name|mapHeight
operator|--
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapWidth
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|coverage
init|=
name|map
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|coverage
operator|==
literal|0
condition|)
block|{
comment|// nothing
block|}
elseif|else
if|if
condition|(
name|coverage
operator|==
literal|255
condition|)
block|{
name|dest
index|[
name|i
index|]
operator|=
name|c
expr_stmt|;
block|}
else|else
block|{
name|int
name|ialpha
init|=
literal|255
operator|-
name|coverage
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|BYTE_MUL_RGB16
argument_list|(
name|c
argument_list|,
name|coverage
argument_list|)
operator|+
name|BYTE_MUL_RGB16
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
block|}
block|}
name|dest
operator|+=
name|destStride
expr_stmt|;
name|map
operator|+=
name|mapStride
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rgbBlendPixel
specifier|static
specifier|inline
name|void
name|rgbBlendPixel
parameter_list|(
name|quint32
modifier|*
name|dst
parameter_list|,
name|int
name|coverage
parameter_list|,
name|int
name|sr
parameter_list|,
name|int
name|sg
parameter_list|,
name|int
name|sb
parameter_list|,
specifier|const
name|uchar
modifier|*
name|gamma
parameter_list|,
specifier|const
name|uchar
modifier|*
name|invgamma
parameter_list|)
block|{
comment|// Do a gray alphablend...
name|int
name|da
init|=
name|qAlpha
argument_list|(
operator|*
name|dst
argument_list|)
decl_stmt|;
name|int
name|dr
init|=
name|qRed
argument_list|(
operator|*
name|dst
argument_list|)
decl_stmt|;
name|int
name|dg
init|=
name|qGreen
argument_list|(
operator|*
name|dst
argument_list|)
decl_stmt|;
name|int
name|db
init|=
name|qBlue
argument_list|(
operator|*
name|dst
argument_list|)
decl_stmt|;
if|if
condition|(
name|da
operator|!=
literal|255
condition|)
block|{
name|int
name|a
init|=
name|qGray
argument_list|(
name|coverage
argument_list|)
decl_stmt|;
name|sr
operator|=
name|qt_div_255
argument_list|(
name|invgamma
index|[
name|sr
index|]
operator|*
name|a
argument_list|)
expr_stmt|;
name|sg
operator|=
name|qt_div_255
argument_list|(
name|invgamma
index|[
name|sg
index|]
operator|*
name|a
argument_list|)
expr_stmt|;
name|sb
operator|=
name|qt_div_255
argument_list|(
name|invgamma
index|[
name|sb
index|]
operator|*
name|a
argument_list|)
expr_stmt|;
name|int
name|ia
init|=
literal|255
operator|-
name|a
decl_stmt|;
name|dr
operator|=
name|qt_div_255
argument_list|(
name|dr
operator|*
name|ia
argument_list|)
expr_stmt|;
name|dg
operator|=
name|qt_div_255
argument_list|(
name|dg
operator|*
name|ia
argument_list|)
expr_stmt|;
name|db
operator|=
name|qt_div_255
argument_list|(
name|db
operator|*
name|ia
argument_list|)
expr_stmt|;
operator|*
name|dst
operator|=
operator|(
operator|(
name|a
operator|+
name|qt_div_255
argument_list|(
operator|(
literal|255
operator|-
name|a
operator|)
operator|*
name|da
argument_list|)
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|sr
operator|+
name|dr
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|sg
operator|+
name|dg
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
name|sb
operator|+
name|db
operator|)
operator|)
expr_stmt|;
return|return;
block|}
name|int
name|mr
init|=
name|qRed
argument_list|(
name|coverage
argument_list|)
decl_stmt|;
name|int
name|mg
init|=
name|qGreen
argument_list|(
name|coverage
argument_list|)
decl_stmt|;
name|int
name|mb
init|=
name|qBlue
argument_list|(
name|coverage
argument_list|)
decl_stmt|;
name|dr
operator|=
name|gamma
index|[
name|dr
index|]
expr_stmt|;
name|dg
operator|=
name|gamma
index|[
name|dg
index|]
expr_stmt|;
name|db
operator|=
name|gamma
index|[
name|db
index|]
expr_stmt|;
name|int
name|nr
init|=
name|qt_div_255
argument_list|(
operator|(
name|sr
operator|-
name|dr
operator|)
operator|*
name|mr
argument_list|)
operator|+
name|dr
decl_stmt|;
name|int
name|ng
init|=
name|qt_div_255
argument_list|(
operator|(
name|sg
operator|-
name|dg
operator|)
operator|*
name|mg
argument_list|)
operator|+
name|dg
decl_stmt|;
name|int
name|nb
init|=
name|qt_div_255
argument_list|(
operator|(
name|sb
operator|-
name|db
operator|)
operator|*
name|mb
argument_list|)
operator|+
name|db
decl_stmt|;
name|nr
operator|=
name|invgamma
index|[
name|nr
index|]
expr_stmt|;
name|ng
operator|=
name|invgamma
index|[
name|ng
index|]
expr_stmt|;
name|nb
operator|=
name|invgamma
index|[
name|nb
index|]
expr_stmt|;
operator|*
name|dst
operator|=
name|qRgb
argument_list|(
name|nr
argument_list|,
name|ng
argument_list|,
name|nb
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_function
DECL|function|grayBlendPixel
specifier|static
specifier|inline
name|void
name|grayBlendPixel
parameter_list|(
name|quint32
modifier|*
name|dst
parameter_list|,
name|int
name|coverage
parameter_list|,
name|int
name|sr
parameter_list|,
name|int
name|sg
parameter_list|,
name|int
name|sb
parameter_list|,
specifier|const
name|uint
modifier|*
name|gamma
parameter_list|,
specifier|const
name|uchar
modifier|*
name|invgamma
parameter_list|)
block|{
comment|// Do a gammacorrected gray alphablend...
name|int
name|dr
init|=
name|qRed
argument_list|(
operator|*
name|dst
argument_list|)
decl_stmt|;
name|int
name|dg
init|=
name|qGreen
argument_list|(
operator|*
name|dst
argument_list|)
decl_stmt|;
name|int
name|db
init|=
name|qBlue
argument_list|(
operator|*
name|dst
argument_list|)
decl_stmt|;
name|dr
operator|=
name|gamma
index|[
name|dr
index|]
expr_stmt|;
name|dg
operator|=
name|gamma
index|[
name|dg
index|]
expr_stmt|;
name|db
operator|=
name|gamma
index|[
name|db
index|]
expr_stmt|;
name|int
name|alpha
init|=
name|coverage
decl_stmt|;
name|int
name|ialpha
init|=
literal|255
operator|-
name|alpha
decl_stmt|;
name|int
name|nr
init|=
operator|(
name|sr
operator|*
name|alpha
operator|+
name|ialpha
operator|*
name|dr
operator|)
operator|/
literal|255
decl_stmt|;
name|int
name|ng
init|=
operator|(
name|sg
operator|*
name|alpha
operator|+
name|ialpha
operator|*
name|dg
operator|)
operator|/
literal|255
decl_stmt|;
name|int
name|nb
init|=
operator|(
name|sb
operator|*
name|alpha
operator|+
name|ialpha
operator|*
name|db
operator|)
operator|/
literal|255
decl_stmt|;
name|nr
operator|=
name|invgamma
index|[
name|nr
index|]
expr_stmt|;
name|ng
operator|=
name|invgamma
index|[
name|ng
index|]
expr_stmt|;
name|nb
operator|=
name|invgamma
index|[
name|nb
index|]
expr_stmt|;
operator|*
name|dst
operator|=
name|qRgb
argument_list|(
name|nr
argument_list|,
name|ng
argument_list|,
name|nb
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qt_alphamapblit_quint32
specifier|static
name|void
name|qt_alphamapblit_quint32
parameter_list|(
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|quint32
name|color
parameter_list|,
specifier|const
name|uchar
modifier|*
name|map
parameter_list|,
name|int
name|mapWidth
parameter_list|,
name|int
name|mapHeight
parameter_list|,
name|int
name|mapStride
parameter_list|,
specifier|const
name|QClipData
modifier|*
name|clip
parameter_list|)
block|{
specifier|const
name|quint32
name|c
init|=
name|color
decl_stmt|;
specifier|const
name|int
name|destStride
init|=
name|rasterBuffer
operator|->
name|bytesPerLine
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QDrawHelperGammaTables
modifier|*
name|tables
init|=
name|qt_gamma_tables
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tables
condition|)
return|return;
specifier|const
name|uint
modifier|*
name|gamma
init|=
name|tables
operator|->
name|qt_pow_gamma
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|invgamma
init|=
name|tables
operator|->
name|qt_pow_invgamma
decl_stmt|;
name|int
name|sr
init|=
name|gamma
index|[
name|qRed
argument_list|(
name|color
argument_list|)
index|]
decl_stmt|;
name|int
name|sg
init|=
name|gamma
index|[
name|qGreen
argument_list|(
name|color
argument_list|)
index|]
decl_stmt|;
name|int
name|sb
init|=
name|gamma
index|[
name|qBlue
argument_list|(
name|color
argument_list|)
index|]
decl_stmt|;
name|bool
name|opaque_src
init|=
operator|(
name|qAlpha
argument_list|(
name|color
argument_list|)
operator|==
literal|255
operator|)
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|clip
condition|)
block|{
name|quint32
modifier|*
name|dest
init|=
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
argument_list|)
operator|+
name|x
decl_stmt|;
while|while
condition|(
name|mapHeight
operator|--
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapWidth
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|coverage
init|=
name|map
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|coverage
operator|==
literal|0
condition|)
block|{
comment|// nothing
block|}
elseif|else
if|if
condition|(
name|coverage
operator|==
literal|255
condition|)
block|{
name|dest
index|[
name|i
index|]
operator|=
name|c
expr_stmt|;
block|}
else|else
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|if
condition|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_XP
operator|&&
name|opaque_src
operator|&&
name|qAlpha
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
operator|==
literal|255
condition|)
block|{
name|grayBlendPixel
argument_list|(
name|dest
operator|+
name|i
argument_list|,
name|coverage
argument_list|,
name|sr
argument_list|,
name|sg
argument_list|,
name|sb
argument_list|,
name|gamma
argument_list|,
name|invgamma
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|int
name|ialpha
init|=
literal|255
operator|-
name|coverage
decl_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|c
argument_list|,
name|coverage
argument_list|,
name|dest
index|[
name|i
index|]
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|dest
operator|+=
name|destStride
expr_stmt|;
name|map
operator|+=
name|mapStride
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|bottom
init|=
name|qMin
argument_list|(
name|y
operator|+
name|mapHeight
argument_list|,
name|rasterBuffer
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|top
init|=
name|qMax
argument_list|(
name|y
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|map
operator|+=
operator|(
name|top
operator|-
name|y
operator|)
operator|*
name|mapStride
expr_stmt|;
cast|const_cast
argument_list|<
name|QClipData
operator|*
argument_list|>
argument_list|(
name|clip
argument_list|)
operator|->
name|initialize
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|yp
init|=
name|top
init|;
name|yp
operator|<
name|bottom
condition|;
operator|++
name|yp
control|)
block|{
specifier|const
name|QClipData
operator|::
name|ClipLine
modifier|&
name|line
init|=
name|clip
operator|->
name|m_clipLines
index|[
name|yp
index|]
decl_stmt|;
name|quint32
modifier|*
name|dest
init|=
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|yp
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|line
operator|.
name|count
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QSpan
modifier|&
name|clip
init|=
name|line
operator|.
name|spans
index|[
name|i
index|]
decl_stmt|;
name|int
name|start
init|=
name|qMax
argument_list|<
name|int
argument_list|>
argument_list|(
name|x
argument_list|,
name|clip
operator|.
name|x
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|qMin
argument_list|<
name|int
argument_list|>
argument_list|(
name|x
operator|+
name|mapWidth
argument_list|,
name|clip
operator|.
name|x
operator|+
name|clip
operator|.
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|xp
init|=
name|start
init|;
name|xp
operator|<
name|end
condition|;
operator|++
name|xp
control|)
block|{
specifier|const
name|int
name|coverage
init|=
name|map
index|[
name|xp
operator|-
name|x
index|]
decl_stmt|;
if|if
condition|(
name|coverage
operator|==
literal|0
condition|)
block|{
comment|// nothing
block|}
elseif|else
if|if
condition|(
name|coverage
operator|==
literal|255
condition|)
block|{
name|dest
index|[
name|xp
index|]
operator|=
name|c
expr_stmt|;
block|}
else|else
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|if
condition|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_XP
operator|&&
name|opaque_src
operator|&&
name|qAlpha
argument_list|(
name|dest
index|[
name|xp
index|]
argument_list|)
operator|==
literal|255
condition|)
block|{
name|grayBlendPixel
argument_list|(
name|dest
operator|+
name|xp
argument_list|,
name|coverage
argument_list|,
name|sr
argument_list|,
name|sg
argument_list|,
name|sb
argument_list|,
name|gamma
argument_list|,
name|invgamma
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|int
name|ialpha
init|=
literal|255
operator|-
name|coverage
decl_stmt|;
name|dest
index|[
name|xp
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|c
argument_list|,
name|coverage
argument_list|,
name|dest
index|[
name|xp
index|]
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// for (i -> line.count)
block|}
comment|// for (yp -> bottom)
name|map
operator|+=
name|mapStride
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|qt_alphargbblit_quint32
specifier|static
name|void
name|qt_alphargbblit_quint32
parameter_list|(
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|quint32
name|color
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|mapWidth
parameter_list|,
name|int
name|mapHeight
parameter_list|,
name|int
name|srcStride
parameter_list|,
specifier|const
name|QClipData
modifier|*
name|clip
parameter_list|)
block|{
specifier|const
name|quint32
name|c
init|=
name|color
decl_stmt|;
name|int
name|sr
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sg
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sb
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|sa
init|=
name|qAlpha
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|QDrawHelperGammaTables
modifier|*
name|tables
init|=
name|qt_gamma_tables
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tables
condition|)
return|return;
specifier|const
name|uchar
modifier|*
name|gamma
init|=
name|tables
operator|->
name|qt_pow_rgb_gamma
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|invgamma
init|=
name|tables
operator|->
name|qt_pow_rgb_invgamma
decl_stmt|;
name|sr
operator|=
name|gamma
index|[
name|sr
index|]
expr_stmt|;
name|sg
operator|=
name|gamma
index|[
name|sg
index|]
expr_stmt|;
name|sb
operator|=
name|gamma
index|[
name|sb
index|]
expr_stmt|;
if|if
condition|(
name|sa
operator|==
literal|0
condition|)
return|return;
if|if
condition|(
operator|!
name|clip
condition|)
block|{
name|quint32
modifier|*
name|dst
init|=
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
argument_list|)
operator|+
name|x
decl_stmt|;
specifier|const
name|int
name|destStride
init|=
name|rasterBuffer
operator|->
name|bytesPerLine
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
decl_stmt|;
while|while
condition|(
name|mapHeight
operator|--
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapWidth
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|uint
name|coverage
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|coverage
operator|==
literal|0xffffffff
condition|)
block|{
name|dst
index|[
name|i
index|]
operator|=
name|c
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|coverage
operator|!=
literal|0xff000000
condition|)
block|{
name|rgbBlendPixel
argument_list|(
name|dst
operator|+
name|i
argument_list|,
name|coverage
argument_list|,
name|sr
argument_list|,
name|sg
argument_list|,
name|sb
argument_list|,
name|gamma
argument_list|,
name|invgamma
argument_list|)
expr_stmt|;
block|}
block|}
name|dst
operator|+=
name|destStride
expr_stmt|;
name|src
operator|+=
name|srcStride
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|bottom
init|=
name|qMin
argument_list|(
name|y
operator|+
name|mapHeight
argument_list|,
name|rasterBuffer
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|top
init|=
name|qMax
argument_list|(
name|y
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|src
operator|+=
operator|(
name|top
operator|-
name|y
operator|)
operator|*
name|srcStride
expr_stmt|;
cast|const_cast
argument_list|<
name|QClipData
operator|*
argument_list|>
argument_list|(
name|clip
argument_list|)
operator|->
name|initialize
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|yp
init|=
name|top
init|;
name|yp
operator|<
name|bottom
condition|;
operator|++
name|yp
control|)
block|{
specifier|const
name|QClipData
operator|::
name|ClipLine
modifier|&
name|line
init|=
name|clip
operator|->
name|m_clipLines
index|[
name|yp
index|]
decl_stmt|;
name|quint32
modifier|*
name|dst
init|=
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|yp
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|line
operator|.
name|count
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QSpan
modifier|&
name|clip
init|=
name|line
operator|.
name|spans
index|[
name|i
index|]
decl_stmt|;
name|int
name|start
init|=
name|qMax
argument_list|<
name|int
argument_list|>
argument_list|(
name|x
argument_list|,
name|clip
operator|.
name|x
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|qMin
argument_list|<
name|int
argument_list|>
argument_list|(
name|x
operator|+
name|mapWidth
argument_list|,
name|clip
operator|.
name|x
operator|+
name|clip
operator|.
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|xp
init|=
name|start
init|;
name|xp
operator|<
name|end
condition|;
operator|++
name|xp
control|)
block|{
specifier|const
name|uint
name|coverage
init|=
name|src
index|[
name|xp
operator|-
name|x
index|]
decl_stmt|;
if|if
condition|(
name|coverage
operator|==
literal|0xffffffff
condition|)
block|{
name|dst
index|[
name|xp
index|]
operator|=
name|c
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|coverage
operator|!=
literal|0xff000000
condition|)
block|{
name|rgbBlendPixel
argument_list|(
name|dst
operator|+
name|xp
argument_list|,
name|coverage
argument_list|,
name|sr
argument_list|,
name|sg
argument_list|,
name|sb
argument_list|,
name|gamma
argument_list|,
name|invgamma
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// for (i -> line.count)
name|src
operator|+=
name|srcStride
expr_stmt|;
block|}
comment|// for (yp -> bottom)
block|}
block|}
end_function
begin_function
DECL|function|qt_rectfill_quint32
specifier|static
name|void
name|qt_rectfill_quint32
parameter_list|(
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|quint32
name|color
parameter_list|)
block|{
name|qt_rectfill
argument_list|<
name|quint32
argument_list|>
argument_list|(
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|rasterBuffer
operator|->
name|buffer
argument_list|()
argument_list|)
argument_list|,
name|color
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|rasterBuffer
operator|->
name|bytesPerLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_rectfill_quint16
specifier|static
name|void
name|qt_rectfill_quint16
parameter_list|(
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|quint32
name|color
parameter_list|)
block|{
name|qt_rectfill
argument_list|<
name|quint16
argument_list|>
argument_list|(
cast|reinterpret_cast
argument_list|<
name|quint16
operator|*
argument_list|>
argument_list|(
name|rasterBuffer
operator|->
name|buffer
argument_list|()
argument_list|)
argument_list|,
name|qConvertRgb32To16
argument_list|(
name|color
argument_list|)
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|rasterBuffer
operator|->
name|bytesPerLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_rectfill_nonpremul_quint32
specifier|static
name|void
name|qt_rectfill_nonpremul_quint32
parameter_list|(
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|quint32
name|color
parameter_list|)
block|{
name|qt_rectfill
argument_list|<
name|quint32
argument_list|>
argument_list|(
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|rasterBuffer
operator|->
name|buffer
argument_list|()
argument_list|)
argument_list|,
name|INV_PREMUL
argument_list|(
name|color
argument_list|)
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|rasterBuffer
operator|->
name|bytesPerLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Map table for destination image format. Contains function pointers
end_comment
begin_comment
comment|// for blends of various types unto the destination
end_comment
begin_decl_stmt
DECL|variable|qDrawHelper
name|DrawHelper
name|qDrawHelper
index|[
name|QImage
operator|::
name|NImageFormats
index|]
init|=
block|{
comment|// Format_Invalid,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_Mono,
block|{
name|blend_color_generic
block|,
name|blend_src_generic
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_MonoLSB,
block|{
name|blend_color_generic
block|,
name|blend_src_generic
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_Indexed8,
block|{
name|blend_color_generic
block|,
name|blend_src_generic
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB32,
block|{
name|blend_color_argb
block|,
name|qt_gradient_quint32
block|,
name|qt_bitmapblit_quint32
block|,
name|qt_alphamapblit_quint32
block|,
name|qt_alphargbblit_quint32
block|,
name|qt_rectfill_quint32
block|}
block|,
comment|// Format_ARGB32,
block|{
name|blend_color_generic
block|,
name|qt_gradient_quint32
block|,
name|qt_bitmapblit_quint32
block|,
name|qt_alphamapblit_quint32
block|,
name|qt_alphargbblit_quint32
block|,
name|qt_rectfill_nonpremul_quint32
block|}
block|,
comment|// Format_ARGB32_Premultiplied
block|{
name|blend_color_argb
block|,
name|qt_gradient_quint32
block|,
name|qt_bitmapblit_quint32
block|,
name|qt_alphamapblit_quint32
block|,
name|qt_alphargbblit_quint32
block|,
name|qt_rectfill_quint32
block|}
block|,
comment|// Format_RGB16
block|{
name|blend_color_rgb16
block|,
name|qt_gradient_quint16
block|,
name|qt_bitmapblit_quint16
block|,
name|qt_alphamapblit_quint16
block|,
literal|0
block|,
name|qt_rectfill_quint16
block|}
block|,
comment|// Format_ARGB8565_Premultiplied
block|{
name|blend_color_generic
block|,
name|blend_src_generic
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB666
block|{
name|blend_color_generic
block|,
name|blend_src_generic
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_ARGB6666_Premultiplied
block|{
name|blend_color_generic
block|,
name|blend_src_generic
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB555
block|{
name|blend_color_generic
block|,
name|blend_src_generic
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_ARGB8555_Premultiplied
block|{
name|blend_color_generic
block|,
name|blend_src_generic
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB888
block|{
name|blend_color_generic
block|,
name|blend_src_generic
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_RGB444
block|{
name|blend_color_generic
block|,
name|blend_src_generic
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// Format_ARGB4444_Premultiplied
block|{
name|blend_color_generic
block|,
name|blend_src_generic
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_MIPS_
argument_list|)
end_if
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
DECL|function|qt_memfill_template
specifier|inline
name|void
name|qt_memfill_template
parameter_list|(
name|T
modifier|*
name|dest
parameter_list|,
name|T
name|color
parameter_list|,
name|int
name|count
parameter_list|)
block|{
while|while
condition|(
name|count
operator|--
condition|)
operator|*
name|dest
operator|++
operator|=
name|color
expr_stmt|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
DECL|function|qt_memfill_template
specifier|inline
name|void
name|qt_memfill_template
parameter_list|(
name|T
modifier|*
name|dest
parameter_list|,
name|T
name|color
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|int
name|n
init|=
operator|(
name|count
operator|+
literal|7
operator|)
operator|/
literal|8
decl_stmt|;
switch|switch
condition|(
name|count
operator|&
literal|0x07
condition|)
block|{
case|case
literal|0
case|:
do|do
block|{
operator|*
name|dest
operator|++
operator|=
name|color
expr_stmt|;
case|case
literal|7
case|:
operator|*
name|dest
operator|++
operator|=
name|color
expr_stmt|;
case|case
literal|6
case|:
operator|*
name|dest
operator|++
operator|=
name|color
expr_stmt|;
case|case
literal|5
case|:
operator|*
name|dest
operator|++
operator|=
name|color
expr_stmt|;
case|case
literal|4
case|:
operator|*
name|dest
operator|++
operator|=
name|color
expr_stmt|;
case|case
literal|3
case|:
operator|*
name|dest
operator|++
operator|=
name|color
expr_stmt|;
case|case
literal|2
case|:
operator|*
name|dest
operator|++
operator|=
name|color
expr_stmt|;
case|case
literal|1
case|:
operator|*
name|dest
operator|++
operator|=
name|color
expr_stmt|;
block|}
do|while
condition|(
operator|--
name|n
operator|>
literal|0
condition|)
do|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|qt_memfill_template
specifier|inline
name|void
name|qt_memfill_template
parameter_list|(
name|quint16
modifier|*
name|dest
parameter_list|,
name|quint16
name|value
parameter_list|,
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|count
operator|<
literal|3
condition|)
block|{
switch|switch
condition|(
name|count
condition|)
block|{
case|case
literal|2
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|1
case|:
operator|*
name|dest
operator|=
name|value
expr_stmt|;
block|}
return|return;
block|}
specifier|const
name|int
name|align
init|=
call|(
name|quintptr
call|)
argument_list|(
name|dest
argument_list|)
operator|&
literal|0x3
decl_stmt|;
switch|switch
condition|(
name|align
condition|)
block|{
case|case
literal|2
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
operator|--
name|count
expr_stmt|;
block|}
specifier|const
name|quint32
name|value32
init|=
operator|(
name|value
operator|<<
literal|16
operator|)
operator||
name|value
decl_stmt|;
name|qt_memfill
argument_list|(
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|dest
argument_list|)
argument_list|,
name|value32
argument_list|,
name|count
operator|/
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|&
literal|0x1
condition|)
name|dest
index|[
name|count
operator|-
literal|1
index|]
operator|=
name|value
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qt_memfill_quint16
specifier|static
name|void
name|qt_memfill_quint16
parameter_list|(
name|quint16
modifier|*
name|dest
parameter_list|,
name|quint16
name|color
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|qt_memfill_template
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|dest
argument_list|,
name|color
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_typedef
DECL|typedef|qt_memfill32_func
typedef|typedef
name|void
function_decl|(
modifier|*
name|qt_memfill32_func
function_decl|)
parameter_list|(
name|quint32
modifier|*
name|dest
parameter_list|,
name|quint32
name|value
parameter_list|,
name|int
name|count
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|qt_memfill16_func
typedef|typedef
name|void
function_decl|(
modifier|*
name|qt_memfill16_func
function_decl|)
parameter_list|(
name|quint16
modifier|*
name|dest
parameter_list|,
name|quint16
name|value
parameter_list|,
name|int
name|count
parameter_list|)
function_decl|;
end_typedef
begin_function_decl
specifier|static
name|void
name|qt_memfill32_setup
parameter_list|(
name|quint32
modifier|*
name|dest
parameter_list|,
name|quint32
name|value
parameter_list|,
name|int
name|count
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|qt_memfill16_setup
parameter_list|(
name|quint16
modifier|*
name|dest
parameter_list|,
name|quint16
name|value
parameter_list|,
name|int
name|count
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|qt_memfill32
name|qt_memfill32_func
name|qt_memfill32
init|=
name|qt_memfill32_setup
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_memfill16
name|qt_memfill16_func
name|qt_memfill16
init|=
name|qt_memfill16_setup
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qInitDrawhelperAsm
name|void
name|qInitDrawhelperAsm
parameter_list|()
block|{
name|qt_memfill32
operator|=
name|qt_memfill_template
argument_list|<
name|quint32
argument_list|>
expr_stmt|;
name|qt_memfill16
operator|=
name|qt_memfill_quint16
expr_stmt|;
comment|//qt_memfill_template<quint16>;
name|CompositionFunction
modifier|*
name|functionForModeAsm
init|=
literal|0
decl_stmt|;
name|CompositionFunctionSolid
modifier|*
name|functionForModeSolidAsm
init|=
literal|0
decl_stmt|;
specifier|const
name|uint
name|features
init|=
name|qDetectCPUFeatures
argument_list|()
decl_stmt|;
if|if
condition|(
literal|false
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_HAVE_SSE2
block|}
elseif|else
if|if
condition|(
name|features
operator|&
name|SSE2
condition|)
block|{
name|qt_memfill32
operator|=
name|qt_memfill32_sse2
expr_stmt|;
name|qt_memfill16
operator|=
name|qt_memfill16_sse2
expr_stmt|;
name|qDrawHelper
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
operator|.
name|bitmapBlit
operator|=
name|qt_bitmapblit32_sse2
expr_stmt|;
name|qDrawHelper
index|[
name|QImage
operator|::
name|Format_ARGB32
index|]
operator|.
name|bitmapBlit
operator|=
name|qt_bitmapblit32_sse2
expr_stmt|;
name|qDrawHelper
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|.
name|bitmapBlit
operator|=
name|qt_bitmapblit32_sse2
expr_stmt|;
name|qDrawHelper
index|[
name|QImage
operator|::
name|Format_RGB16
index|]
operator|.
name|bitmapBlit
operator|=
name|qt_bitmapblit16_sse2
expr_stmt|;
specifier|extern
name|void
name|qt_scale_image_argb32_on_argb32_sse2
argument_list|(
name|uchar
operator|*
name|destPixels
argument_list|,
name|int
name|dbpl
argument_list|,
specifier|const
name|uchar
operator|*
name|srcPixels
argument_list|,
name|int
name|sbpl
argument_list|,
specifier|const
name|QRectF
operator|&
name|targetRect
argument_list|,
specifier|const
name|QRectF
operator|&
name|sourceRect
argument_list|,
specifier|const
name|QRect
operator|&
name|clip
argument_list|,
name|int
name|const_alpha
argument_list|)
decl_stmt|;
name|qScaleFunctions
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|qt_scale_image_argb32_on_argb32_sse2
expr_stmt|;
name|qScaleFunctions
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|qt_scale_image_argb32_on_argb32_sse2
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_HAVE_SSE
block|}
elseif|else
if|if
condition|(
name|features
operator|&
name|SSE
condition|)
block|{
comment|//        qt_memfill32 = qt_memfill32_sse;
name|qDrawHelper
index|[
name|QImage
operator|::
name|Format_RGB16
index|]
operator|.
name|bitmapBlit
operator|=
name|qt_bitmapblit16_sse
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_HAVE_3DNOW
if|if
condition|(
name|features
operator|&
name|MMX3DNOW
condition|)
block|{
name|qt_memfill32
operator|=
name|qt_memfill32_sse3dnow
expr_stmt|;
name|qDrawHelper
index|[
name|QImage
operator|::
name|Format_RGB16
index|]
operator|.
name|bitmapBlit
operator|=
name|qt_bitmapblit16_sse3dnow
expr_stmt|;
block|}
endif|#
directive|endif
endif|#
directive|endif
comment|// SSE
block|}
ifdef|#
directive|ifdef
name|QT_HAVE_MMX
if|if
condition|(
name|features
operator|&
name|MMX
condition|)
block|{
name|functionForModeAsm
operator|=
name|qt_functionForMode_MMX
expr_stmt|;
name|functionForModeSolidAsm
operator|=
name|qt_functionForModeSolid_MMX
expr_stmt|;
name|qDrawHelper
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|.
name|blendColor
operator|=
name|qt_blend_color_argb_mmx
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_HAVE_3DNOW
if|if
condition|(
name|features
operator|&
name|MMX3DNOW
condition|)
block|{
name|functionForModeAsm
operator|=
name|qt_functionForMode_MMX3DNOW
expr_stmt|;
name|functionForModeSolidAsm
operator|=
name|qt_functionForModeSolid_MMX3DNOW
expr_stmt|;
name|qDrawHelper
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|.
name|blendColor
operator|=
name|qt_blend_color_argb_mmx3dnow
expr_stmt|;
block|}
endif|#
directive|endif
comment|// 3DNOW
specifier|extern
name|void
name|qt_blend_rgb32_on_rgb32_mmx
argument_list|(
name|uchar
operator|*
name|destPixels
argument_list|,
name|int
name|dbpl
argument_list|,
specifier|const
name|uchar
operator|*
name|srcPixels
argument_list|,
name|int
name|sbpl
argument_list|,
name|int
name|w
argument_list|,
name|int
name|h
argument_list|,
name|int
name|const_alpha
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|qt_blend_argb32_on_argb32_mmx
argument_list|(
name|uchar
operator|*
name|destPixels
argument_list|,
name|int
name|dbpl
argument_list|,
specifier|const
name|uchar
operator|*
name|srcPixels
argument_list|,
name|int
name|sbpl
argument_list|,
name|int
name|w
argument_list|,
name|int
name|h
argument_list|,
name|int
name|const_alpha
argument_list|)
decl_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
operator|=
name|qt_blend_rgb32_on_rgb32_mmx
expr_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
operator|=
name|qt_blend_rgb32_on_rgb32_mmx
expr_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|qt_blend_argb32_on_argb32_mmx
expr_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|qt_blend_argb32_on_argb32_mmx
expr_stmt|;
block|}
endif|#
directive|endif
comment|// MMX
ifdef|#
directive|ifdef
name|QT_HAVE_SSE
if|if
condition|(
name|features
operator|&
name|SSE
condition|)
block|{
specifier|extern
name|void
name|qt_blend_rgb32_on_rgb32_sse
argument_list|(
name|uchar
operator|*
name|destPixels
argument_list|,
name|int
name|dbpl
argument_list|,
specifier|const
name|uchar
operator|*
name|srcPixels
argument_list|,
name|int
name|sbpl
argument_list|,
name|int
name|w
argument_list|,
name|int
name|h
argument_list|,
name|int
name|const_alpha
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|qt_blend_argb32_on_argb32_sse
argument_list|(
name|uchar
operator|*
name|destPixels
argument_list|,
name|int
name|dbpl
argument_list|,
specifier|const
name|uchar
operator|*
name|srcPixels
argument_list|,
name|int
name|sbpl
argument_list|,
name|int
name|w
argument_list|,
name|int
name|h
argument_list|,
name|int
name|const_alpha
argument_list|)
decl_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
operator|=
name|qt_blend_rgb32_on_rgb32_sse
expr_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
operator|=
name|qt_blend_rgb32_on_rgb32_sse
expr_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|qt_blend_argb32_on_argb32_sse
expr_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|qt_blend_argb32_on_argb32_sse
expr_stmt|;
block|}
endif|#
directive|endif
comment|// SSE
ifdef|#
directive|ifdef
name|QT_HAVE_SSE2
if|if
condition|(
name|features
operator|&
name|SSE2
condition|)
block|{
specifier|extern
name|void
name|qt_blend_rgb32_on_rgb32_sse2
argument_list|(
name|uchar
operator|*
name|destPixels
argument_list|,
name|int
name|dbpl
argument_list|,
specifier|const
name|uchar
operator|*
name|srcPixels
argument_list|,
name|int
name|sbpl
argument_list|,
name|int
name|w
argument_list|,
name|int
name|h
argument_list|,
name|int
name|const_alpha
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|qt_blend_argb32_on_argb32_sse2
argument_list|(
name|uchar
operator|*
name|destPixels
argument_list|,
name|int
name|dbpl
argument_list|,
specifier|const
name|uchar
operator|*
name|srcPixels
argument_list|,
name|int
name|sbpl
argument_list|,
name|int
name|w
argument_list|,
name|int
name|h
argument_list|,
name|int
name|const_alpha
argument_list|)
decl_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
operator|=
name|qt_blend_rgb32_on_rgb32_sse2
expr_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
operator|=
name|qt_blend_rgb32_on_rgb32_sse2
expr_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|qt_blend_argb32_on_argb32_sse2
expr_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|qt_blend_argb32_on_argb32_sse2
expr_stmt|;
specifier|extern
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|qt_fetch_radial_gradient_sse2
argument_list|(
name|uint
operator|*
name|buffer
argument_list|,
specifier|const
name|Operator
operator|*
name|op
argument_list|,
specifier|const
name|QSpanData
operator|*
name|data
argument_list|,
name|int
name|y
argument_list|,
name|int
name|x
argument_list|,
name|int
name|length
argument_list|)
decl_stmt|;
name|qt_fetch_radial_gradient
operator|=
name|qt_fetch_radial_gradient_sse2
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QT_HAVE_SSSE3
if|if
condition|(
name|features
operator|&
name|SSSE3
condition|)
block|{
specifier|extern
name|void
name|qt_blend_argb32_on_argb32_ssse3
argument_list|(
name|uchar
operator|*
name|destPixels
argument_list|,
name|int
name|dbpl
argument_list|,
specifier|const
name|uchar
operator|*
name|srcPixels
argument_list|,
name|int
name|sbpl
argument_list|,
name|int
name|w
argument_list|,
name|int
name|h
argument_list|,
name|int
name|const_alpha
argument_list|)
decl_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|qt_blend_argb32_on_argb32_ssse3
expr_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|qt_blend_argb32_on_argb32_ssse3
expr_stmt|;
block|}
endif|#
directive|endif
comment|// SSSE3
endif|#
directive|endif
comment|// SSE2
ifdef|#
directive|ifdef
name|QT_HAVE_SSE
if|if
condition|(
name|features
operator|&
name|SSE
condition|)
block|{
name|functionForModeAsm
operator|=
name|qt_functionForMode_SSE
expr_stmt|;
name|functionForModeSolidAsm
operator|=
name|qt_functionForModeSolid_SSE
expr_stmt|;
name|qDrawHelper
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|.
name|blendColor
operator|=
name|qt_blend_color_argb_sse
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_HAVE_3DNOW
if|if
condition|(
name|features
operator|&
name|MMX3DNOW
condition|)
block|{
name|functionForModeAsm
operator|=
name|qt_functionForMode_SSE3DNOW
expr_stmt|;
name|functionForModeSolidAsm
operator|=
name|qt_functionForModeSolid_SSE3DNOW
expr_stmt|;
name|qDrawHelper
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|.
name|blendColor
operator|=
name|qt_blend_color_argb_sse3dnow
expr_stmt|;
block|}
endif|#
directive|endif
comment|// 3DNOW
ifdef|#
directive|ifdef
name|QT_HAVE_SSE2
if|if
condition|(
name|features
operator|&
name|SSE2
condition|)
block|{
specifier|extern
name|void
name|QT_FASTCALL
name|comp_func_SourceOver_sse2
argument_list|(
name|uint
operator|*
name|destPixels
argument_list|,
specifier|const
name|uint
operator|*
name|srcPixels
argument_list|,
name|int
name|length
argument_list|,
name|uint
name|const_alpha
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|QT_FASTCALL
name|comp_func_solid_SourceOver_sse2
argument_list|(
name|uint
operator|*
name|destPixels
argument_list|,
name|int
name|length
argument_list|,
name|uint
name|color
argument_list|,
name|uint
name|const_alpha
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|QT_FASTCALL
name|comp_func_Plus_sse2
argument_list|(
name|uint
operator|*
name|dst
argument_list|,
specifier|const
name|uint
operator|*
name|src
argument_list|,
name|int
name|length
argument_list|,
name|uint
name|const_alpha
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|QT_FASTCALL
name|comp_func_Source_sse2
argument_list|(
name|uint
operator|*
name|dst
argument_list|,
specifier|const
name|uint
operator|*
name|src
argument_list|,
name|int
name|length
argument_list|,
name|uint
name|const_alpha
argument_list|)
decl_stmt|;
name|functionForModeAsm
index|[
literal|0
index|]
operator|=
name|comp_func_SourceOver_sse2
expr_stmt|;
name|functionForModeAsm
index|[
name|QPainter
operator|::
name|CompositionMode_Source
index|]
operator|=
name|comp_func_Source_sse2
expr_stmt|;
name|functionForModeAsm
index|[
name|QPainter
operator|::
name|CompositionMode_Plus
index|]
operator|=
name|comp_func_Plus_sse2
expr_stmt|;
name|functionForModeSolidAsm
index|[
literal|0
index|]
operator|=
name|comp_func_solid_SourceOver_sse2
expr_stmt|;
block|}
endif|#
directive|endif
block|}
elif|#
directive|elif
name|defined
argument_list|(
name|QT_HAVE_SSE2
argument_list|)
comment|// this is the special case when SSE2 is usable but MMX/SSE is not usable (e.g.: Windows x64 + visual studio)
if|if
condition|(
name|features
operator|&
name|SSE2
condition|)
block|{
name|functionForModeAsm
operator|=
name|qt_functionForMode_onlySSE2
expr_stmt|;
name|functionForModeSolidAsm
operator|=
name|qt_functionForModeSolid_onlySSE2
expr_stmt|;
block|}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_HAVE_IWMMXT
if|if
condition|(
name|features
operator|&
name|IWMMXT
condition|)
block|{
name|functionForModeAsm
operator|=
name|qt_functionForMode_IWMMXT
expr_stmt|;
name|functionForModeSolidAsm
operator|=
name|qt_functionForModeSolid_IWMMXT
expr_stmt|;
name|qDrawHelper
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|.
name|blendColor
operator|=
name|qt_blend_color_argb_iwmmxt
expr_stmt|;
block|}
endif|#
directive|endif
comment|// IWMMXT
if|#
directive|if
name|defined
argument_list|(
name|QT_HAVE_ARM_SIMD
argument_list|)
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
operator|=
name|qt_blend_rgb32_on_rgb32_arm_simd
expr_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
operator|=
name|qt_blend_rgb32_on_rgb32_arm_simd
expr_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|qt_blend_argb32_on_argb32_arm_simd
expr_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|qt_blend_argb32_on_argb32_arm_simd
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|QT_HAVE_NEON
argument_list|)
if|if
condition|(
name|features
operator|&
name|NEON
condition|)
block|{
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
operator|=
name|qt_blend_rgb32_on_rgb32_neon
expr_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
operator|=
name|qt_blend_rgb32_on_rgb32_neon
expr_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|qt_blend_argb32_on_argb32_neon
expr_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|qt_blend_argb32_on_argb32_neon
expr_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_RGB16
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|qt_blend_argb32_on_rgb16_neon
expr_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
index|[
name|QImage
operator|::
name|Format_RGB16
index|]
operator|=
name|qt_blend_rgb16_on_argb32_neon
expr_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_RGB16
index|]
index|[
name|QImage
operator|::
name|Format_RGB16
index|]
operator|=
name|qt_blend_rgb16_on_rgb16_neon
expr_stmt|;
name|qScaleFunctions
index|[
name|QImage
operator|::
name|Format_RGB16
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|qt_scale_image_argb32_on_rgb16_neon
expr_stmt|;
name|qScaleFunctions
index|[
name|QImage
operator|::
name|Format_RGB16
index|]
index|[
name|QImage
operator|::
name|Format_RGB16
index|]
operator|=
name|qt_scale_image_rgb16_on_rgb16_neon
expr_stmt|;
name|qTransformFunctions
index|[
name|QImage
operator|::
name|Format_RGB16
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|qt_transform_image_argb32_on_rgb16_neon
expr_stmt|;
name|qTransformFunctions
index|[
name|QImage
operator|::
name|Format_RGB16
index|]
index|[
name|QImage
operator|::
name|Format_RGB16
index|]
operator|=
name|qt_transform_image_rgb16_on_rgb16_neon
expr_stmt|;
name|qDrawHelper
index|[
name|QImage
operator|::
name|Format_RGB16
index|]
operator|.
name|alphamapBlit
operator|=
name|qt_alphamapblit_quint16_neon
expr_stmt|;
name|functionForMode_C
index|[
name|QPainter
operator|::
name|CompositionMode_SourceOver
index|]
operator|=
name|qt_blend_argb32_on_argb32_scanline_neon
expr_stmt|;
name|functionForModeSolid_C
index|[
name|QPainter
operator|::
name|CompositionMode_SourceOver
index|]
operator|=
name|comp_func_solid_SourceOver_neon
expr_stmt|;
name|functionForMode_C
index|[
name|QPainter
operator|::
name|CompositionMode_Plus
index|]
operator|=
name|comp_func_Plus_neon
expr_stmt|;
name|destFetchProc
index|[
name|QImage
operator|::
name|Format_RGB16
index|]
operator|=
name|qt_destFetchRGB16_neon
expr_stmt|;
name|destStoreProc
index|[
name|QImage
operator|::
name|Format_RGB16
index|]
operator|=
name|qt_destStoreRGB16_neon
expr_stmt|;
name|qMemRotateFunctions
index|[
name|QImage
operator|::
name|Format_RGB16
index|]
index|[
literal|0
index|]
operator|=
name|qt_memrotate90_16_neon
expr_stmt|;
name|qMemRotateFunctions
index|[
name|QImage
operator|::
name|Format_RGB16
index|]
index|[
literal|2
index|]
operator|=
name|qt_memrotate270_16_neon
expr_stmt|;
name|qt_memfill32
operator|=
name|qt_memfill32_neon
expr_stmt|;
specifier|extern
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|qt_fetch_radial_gradient_neon
argument_list|(
name|uint
operator|*
name|buffer
argument_list|,
specifier|const
name|Operator
operator|*
name|op
argument_list|,
specifier|const
name|QSpanData
operator|*
name|data
argument_list|,
name|int
name|y
argument_list|,
name|int
name|x
argument_list|,
name|int
name|length
argument_list|)
decl_stmt|;
name|qt_fetch_radial_gradient
operator|=
name|qt_fetch_radial_gradient_neon
expr_stmt|;
block|}
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|QT_HAVE_MIPS_DSP
argument_list|)
name|functionForMode_C
index|[
name|QPainter
operator|::
name|CompositionMode_SourceOver
index|]
operator|=
name|comp_func_SourceOver_asm_mips_dsp
expr_stmt|;
name|functionForMode_C
index|[
name|QPainter
operator|::
name|CompositionMode_Source
index|]
operator|=
name|comp_func_Source_mips_dsp
expr_stmt|;
name|qt_memfill32
operator|=
name|qt_memfill32_asm_mips_dsp
expr_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
operator|=
name|qt_blend_rgb32_on_rgb32_mips_dsp
expr_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
operator|=
name|qt_blend_rgb32_on_rgb32_mips_dsp
expr_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_RGB32
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|qt_blend_argb32_on_argb32_mips_dsp
expr_stmt|;
name|qBlendFunctions
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
index|[
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
index|]
operator|=
name|qt_blend_argb32_on_argb32_mips_dsp
expr_stmt|;
name|destFetchProc
index|[
name|QImage
operator|::
name|Format_ARGB32
index|]
operator|=
name|qt_destFetchARGB32_mips_dsp
expr_stmt|;
name|destStoreProc
index|[
name|QImage
operator|::
name|Format_ARGB32
index|]
operator|=
name|qt_destStoreARGB32_mips_dsp
expr_stmt|;
endif|#
directive|endif
comment|// QT_HAVE_MIPS_DSP
if|if
condition|(
name|functionForModeSolidAsm
condition|)
block|{
specifier|const
name|int
name|destinationMode
init|=
name|QPainter
operator|::
name|CompositionMode_Destination
decl_stmt|;
name|functionForModeSolidAsm
index|[
name|destinationMode
index|]
operator|=
name|functionForModeSolid_C
index|[
name|destinationMode
index|]
expr_stmt|;
comment|// use the default qdrawhelper implementation for the
comment|// extended composition modes
for|for
control|(
name|int
name|mode
init|=
literal|12
init|;
name|mode
operator|<
literal|24
condition|;
operator|++
name|mode
control|)
name|functionForModeSolidAsm
index|[
name|mode
index|]
operator|=
name|functionForModeSolid_C
index|[
name|mode
index|]
expr_stmt|;
name|functionForModeSolid
operator|=
name|functionForModeSolidAsm
expr_stmt|;
block|}
if|if
condition|(
name|functionForModeAsm
condition|)
name|functionForMode
operator|=
name|functionForModeAsm
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_memfill32_setup
specifier|static
name|void
name|qt_memfill32_setup
parameter_list|(
name|quint32
modifier|*
name|dest
parameter_list|,
name|quint32
name|value
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|qInitDrawhelperAsm
argument_list|()
expr_stmt|;
name|qt_memfill32
argument_list|(
name|dest
argument_list|,
name|value
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_memfill16_setup
specifier|static
name|void
name|qt_memfill16_setup
parameter_list|(
name|quint16
modifier|*
name|dest
parameter_list|,
name|quint16
name|value
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|qInitDrawhelperAsm
argument_list|()
expr_stmt|;
name|qt_memfill16
argument_list|(
name|dest
argument_list|,
name|value
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
