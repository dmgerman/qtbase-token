begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|"qpdf_p.h"
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qtemporaryfile.h>
end_include
begin_include
include|#
directive|include
file|<private/qmath_p.h>
end_include
begin_include
include|#
directive|include
file|"private/qcups_p.h"
end_include
begin_include
include|#
directive|include
file|"qprinterinfo.h"
end_include
begin_include
include|#
directive|include
file|<qnumeric.h>
end_include
begin_include
include|#
directive|include
file|"private/qfont_p.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_UNIX
end_ifdef
begin_include
include|#
directive|include
file|"private/qcore_unix_p.h"
end_include
begin_comment
comment|// overrides QT_OPEN
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
specifier|extern
name|QSizeF
name|qt_paperSizeToQSizeF
parameter_list|(
name|QPrinter
operator|::
name|PaperSize
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* also adds a space at the end of the number */
end_comment
begin_function
DECL|function|qt_real_to_string
specifier|const
name|char
modifier|*
name|qt_real_to_string
parameter_list|(
name|qreal
name|val
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|ret
init|=
name|buf
decl_stmt|;
if|if
condition|(
name|qIsNaN
argument_list|(
name|val
argument_list|)
condition|)
block|{
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
literal|'0'
expr_stmt|;
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
literal|' '
expr_stmt|;
operator|*
name|buf
operator|=
literal|0
expr_stmt|;
return|return
name|ret
return|;
block|}
if|if
condition|(
name|val
operator|<
literal|0
condition|)
block|{
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
literal|'-'
expr_stmt|;
name|val
operator|=
operator|-
name|val
expr_stmt|;
block|}
name|unsigned
name|int
name|ival
init|=
operator|(
name|unsigned
name|int
operator|)
name|val
decl_stmt|;
name|qreal
name|frac
init|=
name|val
operator|-
operator|(
name|qreal
operator|)
name|ival
decl_stmt|;
name|int
name|ifrac
init|=
call|(
name|int
call|)
argument_list|(
name|frac
operator|*
literal|1000000000
argument_list|)
decl_stmt|;
if|if
condition|(
name|ifrac
operator|==
literal|1000000000
condition|)
block|{
operator|++
name|ival
expr_stmt|;
name|ifrac
operator|=
literal|0
expr_stmt|;
block|}
name|char
name|output
index|[
literal|256
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|ival
condition|)
block|{
name|output
index|[
name|i
index|]
operator|=
literal|'0'
operator|+
operator|(
name|ival
operator|%
literal|10
operator|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
name|ival
operator|/=
literal|10
expr_stmt|;
block|}
name|int
name|fact
init|=
literal|100000000
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
literal|'0'
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
name|i
condition|)
block|{
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
name|output
index|[
operator|--
name|i
index|]
expr_stmt|;
name|fact
operator|/=
literal|10
expr_stmt|;
name|ifrac
operator|/=
literal|10
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ifrac
condition|)
block|{
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
literal|'.'
expr_stmt|;
while|while
condition|(
name|fact
condition|)
block|{
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
literal|'0'
operator|+
operator|(
operator|(
name|ifrac
operator|/
name|fact
operator|)
operator|%
literal|10
operator|)
expr_stmt|;
name|fact
operator|/=
literal|10
expr_stmt|;
block|}
block|}
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
literal|' '
expr_stmt|;
operator|*
name|buf
operator|=
literal|0
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|qt_int_to_string
specifier|const
name|char
modifier|*
name|qt_int_to_string
parameter_list|(
name|int
name|val
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|ret
init|=
name|buf
decl_stmt|;
if|if
condition|(
name|val
operator|<
literal|0
condition|)
block|{
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
literal|'-'
expr_stmt|;
name|val
operator|=
operator|-
name|val
expr_stmt|;
block|}
name|char
name|output
index|[
literal|256
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|val
condition|)
block|{
name|output
index|[
name|i
index|]
operator|=
literal|'0'
operator|+
operator|(
name|val
operator|%
literal|10
operator|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
name|val
operator|/=
literal|10
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
literal|'0'
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
name|i
condition|)
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
name|output
index|[
operator|--
name|i
index|]
expr_stmt|;
block|}
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
literal|' '
expr_stmt|;
operator|*
name|buf
operator|=
literal|0
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_namespace
DECL|namespace|QPdf
namespace|namespace
name|QPdf
block|{
DECL|function|ByteStream
name|ByteStream
operator|::
name|ByteStream
parameter_list|(
name|QByteArray
modifier|*
name|byteArray
parameter_list|,
name|bool
name|fileBacking
parameter_list|)
member_init_list|:
name|dev
argument_list|(
operator|new
name|QBuffer
argument_list|(
name|byteArray
argument_list|)
argument_list|)
member_init_list|,
name|fileBackingEnabled
argument_list|(
name|fileBacking
argument_list|)
member_init_list|,
name|fileBackingActive
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|handleDirty
argument_list|(
literal|false
argument_list|)
block|{
name|dev
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
operator||
name|QIODevice
operator|::
name|Append
argument_list|)
expr_stmt|;
block|}
DECL|function|ByteStream
name|ByteStream
operator|::
name|ByteStream
parameter_list|(
name|bool
name|fileBacking
parameter_list|)
member_init_list|:
name|dev
argument_list|(
operator|new
name|QBuffer
argument_list|(
operator|&
name|ba
argument_list|)
argument_list|)
member_init_list|,
name|fileBackingEnabled
argument_list|(
name|fileBacking
argument_list|)
member_init_list|,
name|fileBackingActive
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|handleDirty
argument_list|(
literal|false
argument_list|)
block|{
name|dev
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
block|}
DECL|function|~ByteStream
name|ByteStream
operator|::
name|~
name|ByteStream
parameter_list|()
block|{
operator|delete
name|dev
expr_stmt|;
block|}
DECL|function|operator <<
name|ByteStream
modifier|&
name|ByteStream
operator|::
name|operator
name|<<
parameter_list|(
name|char
name|chr
parameter_list|)
block|{
if|if
condition|(
name|handleDirty
condition|)
name|prepareBuffer
argument_list|()
expr_stmt|;
name|dev
operator|->
name|write
argument_list|(
operator|&
name|chr
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|operator <<
name|ByteStream
modifier|&
name|ByteStream
operator|::
name|operator
name|<<
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|)
block|{
if|if
condition|(
name|handleDirty
condition|)
name|prepareBuffer
argument_list|()
expr_stmt|;
name|dev
operator|->
name|write
argument_list|(
name|str
argument_list|,
name|strlen
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|operator <<
name|ByteStream
modifier|&
name|ByteStream
operator|::
name|operator
name|<<
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|str
parameter_list|)
block|{
if|if
condition|(
name|handleDirty
condition|)
name|prepareBuffer
argument_list|()
expr_stmt|;
name|dev
operator|->
name|write
argument_list|(
name|str
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|operator <<
name|ByteStream
modifier|&
name|ByteStream
operator|::
name|operator
name|<<
parameter_list|(
specifier|const
name|ByteStream
modifier|&
name|src
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|src
operator|.
name|dev
operator|->
name|isSequential
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|handleDirty
condition|)
name|prepareBuffer
argument_list|()
expr_stmt|;
comment|// We do play nice here, even though it looks ugly.
comment|// We save the position and restore it afterwards.
name|ByteStream
modifier|&
name|s
init|=
cast|const_cast
argument_list|<
name|ByteStream
operator|&
argument_list|>
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|qint64
name|pos
init|=
name|s
operator|.
name|dev
operator|->
name|pos
argument_list|()
decl_stmt|;
name|s
operator|.
name|dev
operator|->
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|s
operator|.
name|dev
operator|->
name|atEnd
argument_list|()
condition|)
block|{
name|QByteArray
name|buf
init|=
name|s
operator|.
name|dev
operator|->
name|read
argument_list|(
name|chunkSize
argument_list|()
argument_list|)
decl_stmt|;
name|dev
operator|->
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|dev
operator|->
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|operator <<
name|ByteStream
modifier|&
name|ByteStream
operator|::
name|operator
name|<<
parameter_list|(
name|qreal
name|val
parameter_list|)
block|{
name|char
name|buf
index|[
literal|256
index|]
decl_stmt|;
name|qt_real_to_string
argument_list|(
name|val
argument_list|,
name|buf
argument_list|)
expr_stmt|;
operator|*
name|this
operator|<<
name|buf
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|operator <<
name|ByteStream
modifier|&
name|ByteStream
operator|::
name|operator
name|<<
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|char
name|buf
index|[
literal|256
index|]
decl_stmt|;
name|qt_int_to_string
argument_list|(
name|val
argument_list|,
name|buf
argument_list|)
expr_stmt|;
operator|*
name|this
operator|<<
name|buf
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|operator <<
name|ByteStream
modifier|&
name|ByteStream
operator|::
name|operator
name|<<
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|)
block|{
name|char
name|buf
index|[
literal|256
index|]
decl_stmt|;
name|qt_real_to_string
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|buf
argument_list|)
expr_stmt|;
operator|*
name|this
operator|<<
name|buf
expr_stmt|;
name|qt_real_to_string
argument_list|(
name|p
operator|.
name|y
argument_list|()
argument_list|,
name|buf
argument_list|)
expr_stmt|;
operator|*
name|this
operator|<<
name|buf
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|stream
name|QIODevice
modifier|*
name|ByteStream
operator|::
name|stream
parameter_list|()
block|{
name|dev
operator|->
name|reset
argument_list|()
expr_stmt|;
name|handleDirty
operator|=
literal|true
expr_stmt|;
return|return
name|dev
return|;
block|}
DECL|function|clear
name|void
name|ByteStream
operator|::
name|clear
parameter_list|()
block|{
name|dev
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
expr_stmt|;
block|}
DECL|function|constructor_helper
name|void
name|ByteStream
operator|::
name|constructor_helper
parameter_list|(
name|QByteArray
modifier|*
name|ba
parameter_list|)
block|{
operator|delete
name|dev
expr_stmt|;
name|dev
operator|=
operator|new
name|QBuffer
argument_list|(
name|ba
argument_list|)
expr_stmt|;
name|dev
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
block|}
DECL|function|prepareBuffer
name|void
name|ByteStream
operator|::
name|prepareBuffer
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|dev
operator|->
name|isSequential
argument_list|()
argument_list|)
expr_stmt|;
name|qint64
name|size
init|=
name|dev
operator|->
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileBackingEnabled
operator|&&
operator|!
name|fileBackingActive
operator|&&
name|size
operator|>
name|maxMemorySize
argument_list|()
condition|)
block|{
comment|// Switch to file backing.
name|QTemporaryFile
modifier|*
name|newFile
init|=
operator|new
name|QTemporaryFile
decl_stmt|;
name|newFile
operator|->
name|open
argument_list|()
expr_stmt|;
name|dev
operator|->
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|dev
operator|->
name|atEnd
argument_list|()
condition|)
block|{
name|QByteArray
name|buf
init|=
name|dev
operator|->
name|read
argument_list|(
name|chunkSize
argument_list|()
argument_list|)
decl_stmt|;
name|newFile
operator|->
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
operator|delete
name|dev
expr_stmt|;
name|dev
operator|=
name|newFile
expr_stmt|;
name|ba
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fileBackingActive
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|dev
operator|->
name|pos
argument_list|()
operator|!=
name|size
condition|)
block|{
name|dev
operator|->
name|seek
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|handleDirty
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
end_namespace
begin_define
DECL|macro|QT_PATH_ELEMENT
define|#
directive|define
name|QT_PATH_ELEMENT
parameter_list|(
name|elm
parameter_list|)
end_define
begin_function
DECL|function|generatePath
name|QByteArray
name|QPdf
operator|::
name|generatePath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|PathFlags
name|flags
parameter_list|)
block|{
name|QByteArray
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|elementCount
argument_list|()
condition|)
return|return
name|result
return|;
name|ByteStream
name|s
argument_list|(
operator|&
name|result
argument_list|)
decl_stmt|;
name|int
name|start
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPainterPath
operator|::
name|Element
modifier|&
name|elm
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|elm
operator|.
name|type
condition|)
block|{
case|case
name|QPainterPath
operator|::
name|MoveToElement
case|:
if|if
condition|(
name|start
operator|>=
literal|0
operator|&&
name|path
operator|.
name|elementAt
argument_list|(
name|start
argument_list|)
operator|.
name|x
operator|==
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|x
operator|&&
name|path
operator|.
name|elementAt
argument_list|(
name|start
argument_list|)
operator|.
name|y
operator|==
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|y
condition|)
name|s
operator|<<
literal|"h\n"
expr_stmt|;
name|s
operator|<<
name|matrix
operator|.
name|map
argument_list|(
name|QPointF
argument_list|(
name|elm
operator|.
name|x
argument_list|,
name|elm
operator|.
name|y
argument_list|)
argument_list|)
operator|<<
literal|"m\n"
expr_stmt|;
name|start
operator|=
name|i
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|LineToElement
case|:
name|s
operator|<<
name|matrix
operator|.
name|map
argument_list|(
name|QPointF
argument_list|(
name|elm
operator|.
name|x
argument_list|,
name|elm
operator|.
name|y
argument_list|)
argument_list|)
operator|<<
literal|"l\n"
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToElement
case|:
name|Q_ASSERT
argument_list|(
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|type
operator|==
name|QPainterPath
operator|::
name|CurveToDataElement
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
operator|.
name|type
operator|==
name|QPainterPath
operator|::
name|CurveToDataElement
argument_list|)
expr_stmt|;
name|s
operator|<<
name|matrix
operator|.
name|map
argument_list|(
name|QPointF
argument_list|(
name|elm
operator|.
name|x
argument_list|,
name|elm
operator|.
name|y
argument_list|)
argument_list|)
operator|<<
name|matrix
operator|.
name|map
argument_list|(
name|QPointF
argument_list|(
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|x
argument_list|,
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|y
argument_list|)
argument_list|)
operator|<<
name|matrix
operator|.
name|map
argument_list|(
name|QPointF
argument_list|(
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
operator|.
name|x
argument_list|,
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
operator|.
name|y
argument_list|)
argument_list|)
operator|<<
literal|"c\n"
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
break|break;
default|default:
name|qFatal
argument_list|(
literal|"QPdf::generatePath(), unhandled type: %d"
argument_list|,
name|elm
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|start
operator|>=
literal|0
operator|&&
name|path
operator|.
name|elementAt
argument_list|(
name|start
argument_list|)
operator|.
name|x
operator|==
name|path
operator|.
name|elementAt
argument_list|(
name|path
operator|.
name|elementCount
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|x
operator|&&
name|path
operator|.
name|elementAt
argument_list|(
name|start
argument_list|)
operator|.
name|y
operator|==
name|path
operator|.
name|elementAt
argument_list|(
name|path
operator|.
name|elementCount
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|y
condition|)
name|s
operator|<<
literal|"h\n"
expr_stmt|;
name|Qt
operator|::
name|FillRule
name|fillRule
init|=
name|path
operator|.
name|fillRule
argument_list|()
decl_stmt|;
specifier|const
name|char
modifier|*
name|op
init|=
literal|""
decl_stmt|;
switch|switch
condition|(
name|flags
condition|)
block|{
case|case
name|ClipPath
case|:
name|op
operator|=
operator|(
name|fillRule
operator|==
name|Qt
operator|::
name|WindingFill
operator|)
condition|?
literal|"W n\n"
else|:
literal|"W* n\n"
expr_stmt|;
break|break;
case|case
name|FillPath
case|:
name|op
operator|=
operator|(
name|fillRule
operator|==
name|Qt
operator|::
name|WindingFill
operator|)
condition|?
literal|"f\n"
else|:
literal|"f*\n"
expr_stmt|;
break|break;
case|case
name|StrokePath
case|:
name|op
operator|=
literal|"S\n"
expr_stmt|;
break|break;
case|case
name|FillAndStrokePath
case|:
name|op
operator|=
operator|(
name|fillRule
operator|==
name|Qt
operator|::
name|WindingFill
operator|)
condition|?
literal|"B\n"
else|:
literal|"B*\n"
expr_stmt|;
break|break;
block|}
name|s
operator|<<
name|op
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|generateMatrix
name|QByteArray
name|QPdf
operator|::
name|generateMatrix
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|)
block|{
name|QByteArray
name|result
decl_stmt|;
name|ByteStream
name|s
argument_list|(
operator|&
name|result
argument_list|)
decl_stmt|;
name|s
operator|<<
name|matrix
operator|.
name|m11
argument_list|()
operator|<<
name|matrix
operator|.
name|m12
argument_list|()
operator|<<
name|matrix
operator|.
name|m21
argument_list|()
operator|<<
name|matrix
operator|.
name|m22
argument_list|()
operator|<<
name|matrix
operator|.
name|dx
argument_list|()
operator|<<
name|matrix
operator|.
name|dy
argument_list|()
operator|<<
literal|"cm\n"
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|generateDashes
name|QByteArray
name|QPdf
operator|::
name|generateDashes
parameter_list|(
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
name|QByteArray
name|result
decl_stmt|;
name|ByteStream
name|s
argument_list|(
operator|&
name|result
argument_list|)
decl_stmt|;
name|s
operator|<<
literal|'['
expr_stmt|;
name|QVector
argument_list|<
name|qreal
argument_list|>
name|dasharray
init|=
name|pen
operator|.
name|dashPattern
argument_list|()
decl_stmt|;
name|qreal
name|w
init|=
name|pen
operator|.
name|widthF
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
operator|<
literal|0.001
condition|)
name|w
operator|=
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dasharray
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|dw
init|=
name|dasharray
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|*
name|w
decl_stmt|;
if|if
condition|(
name|dw
operator|<
literal|0.0001
condition|)
name|dw
operator|=
literal|0.0001
expr_stmt|;
name|s
operator|<<
name|dw
expr_stmt|;
block|}
name|s
operator|<<
literal|']'
expr_stmt|;
comment|//qDebug()<< "dasharray: pen has"<< dasharray;
comment|//qDebug()<< "  => "<< result;
return|return
name|result
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|pattern_for_brush
specifier|static
specifier|const
name|char
modifier|*
name|pattern_for_brush
index|[]
init|=
block|{
literal|0
block|,
comment|// NoBrush
literal|0
block|,
comment|// SolidPattern
literal|"0 J\n"
literal|"6 w\n"
literal|"[] 0 d\n"
literal|"4 0 m\n"
literal|"4 8 l\n"
literal|"0 4 m\n"
literal|"8 4 l\n"
literal|"S\n"
block|,
comment|// Dense1Pattern
literal|"0 J\n"
literal|"2 w\n"
literal|"[6 2] 1 d\n"
literal|"0 0 m\n"
literal|"0 8 l\n"
literal|"8 0 m\n"
literal|"8 8 l\n"
literal|"S\n"
literal|"[] 0 d\n"
literal|"2 0 m\n"
literal|"2 8 l\n"
literal|"6 0 m\n"
literal|"6 8 l\n"
literal|"S\n"
literal|"[6 2] -3 d\n"
literal|"4 0 m\n"
literal|"4 8 l\n"
literal|"S\n"
block|,
comment|// Dense2Pattern
literal|"0 J\n"
literal|"2 w\n"
literal|"[6 2] 1 d\n"
literal|"0 0 m\n"
literal|"0 8 l\n"
literal|"8 0 m\n"
literal|"8 8 l\n"
literal|"S\n"
literal|"[2 2] -1 d\n"
literal|"2 0 m\n"
literal|"2 8 l\n"
literal|"6 0 m\n"
literal|"6 8 l\n"
literal|"S\n"
literal|"[6 2] -3 d\n"
literal|"4 0 m\n"
literal|"4 8 l\n"
literal|"S\n"
block|,
comment|// Dense3Pattern
literal|"0 J\n"
literal|"2 w\n"
literal|"[2 2] 1 d\n"
literal|"0 0 m\n"
literal|"0 8 l\n"
literal|"8 0 m\n"
literal|"8 8 l\n"
literal|"S\n"
literal|"[2 2] -1 d\n"
literal|"2 0 m\n"
literal|"2 8 l\n"
literal|"6 0 m\n"
literal|"6 8 l\n"
literal|"S\n"
literal|"[2 2] 1 d\n"
literal|"4 0 m\n"
literal|"4 8 l\n"
literal|"S\n"
block|,
comment|// Dense4Pattern
literal|"0 J\n"
literal|"2 w\n"
literal|"[2 6] -1 d\n"
literal|"0 0 m\n"
literal|"0 8 l\n"
literal|"8 0 m\n"
literal|"8 8 l\n"
literal|"S\n"
literal|"[2 2] 1 d\n"
literal|"2 0 m\n"
literal|"2 8 l\n"
literal|"6 0 m\n"
literal|"6 8 l\n"
literal|"S\n"
literal|"[2 6] 3 d\n"
literal|"4 0 m\n"
literal|"4 8 l\n"
literal|"S\n"
block|,
comment|// Dense5Pattern
literal|"0 J\n"
literal|"2 w\n"
literal|"[2 6] -1 d\n"
literal|"0 0 m\n"
literal|"0 8 l\n"
literal|"8 0 m\n"
literal|"8 8 l\n"
literal|"S\n"
literal|"[2 6] 3 d\n"
literal|"4 0 m\n"
literal|"4 8 l\n"
literal|"S\n"
block|,
comment|// Dense6Pattern
literal|"0 J\n"
literal|"2 w\n"
literal|"[2 6] -1 d\n"
literal|"0 0 m\n"
literal|"0 8 l\n"
literal|"8 0 m\n"
literal|"8 8 l\n"
literal|"S\n"
block|,
comment|// Dense7Pattern
literal|"1 w\n"
literal|"0 4 m\n"
literal|"8 4 l\n"
literal|"S\n"
block|,
comment|// HorPattern
literal|"1 w\n"
literal|"4 0 m\n"
literal|"4 8 l\n"
literal|"S\n"
block|,
comment|// VerPattern
literal|"1 w\n"
literal|"4 0 m\n"
literal|"4 8 l\n"
literal|"0 4 m\n"
literal|"8 4 l\n"
literal|"S\n"
block|,
comment|// CrossPattern
literal|"1 w\n"
literal|"-1 5 m\n"
literal|"5 -1 l\n"
literal|"3 9 m\n"
literal|"9 3 l\n"
literal|"S\n"
block|,
comment|// BDiagPattern
literal|"1 w\n"
literal|"-1 3 m\n"
literal|"5 9 l\n"
literal|"3 -1 m\n"
literal|"9 5 l\n"
literal|"S\n"
block|,
comment|// FDiagPattern
literal|"1 w\n"
literal|"-1 3 m\n"
literal|"5 9 l\n"
literal|"3 -1 m\n"
literal|"9 5 l\n"
literal|"-1 5 m\n"
literal|"5 -1 l\n"
literal|"3 9 m\n"
literal|"9 3 l\n"
literal|"S\n"
block|,
comment|// DiagCrossPattern
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|patternForBrush
name|QByteArray
name|QPdf
operator|::
name|patternForBrush
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|b
parameter_list|)
block|{
name|int
name|style
init|=
name|b
operator|.
name|style
argument_list|()
decl_stmt|;
if|if
condition|(
name|style
operator|>
name|Qt
operator|::
name|DiagCrossPattern
condition|)
return|return
name|QByteArray
argument_list|()
return|;
return|return
name|pattern_for_brush
index|[
name|style
index|]
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|USE_NATIVE_GRADIENTS
end_ifdef
begin_function
DECL|function|writeTriangleLine
specifier|static
name|void
name|writeTriangleLine
parameter_list|(
name|uchar
modifier|*
modifier|&
name|data
parameter_list|,
name|int
name|xpos
parameter_list|,
name|int
name|ypos
parameter_list|,
name|int
name|xoff
parameter_list|,
name|int
name|yoff
parameter_list|,
name|uint
name|rgb
parameter_list|,
name|uchar
name|flag
parameter_list|,
name|bool
name|alpha
parameter_list|)
block|{
name|data
index|[
literal|0
index|]
operator|=
name|flag
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
call|(
name|uchar
call|)
argument_list|(
name|xpos
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|data
index|[
literal|2
index|]
operator|=
call|(
name|uchar
call|)
argument_list|(
name|xpos
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
call|(
name|uchar
call|)
argument_list|(
name|xpos
operator|>>
literal|0
argument_list|)
expr_stmt|;
name|data
index|[
literal|4
index|]
operator|=
call|(
name|uchar
call|)
argument_list|(
name|ypos
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|data
index|[
literal|5
index|]
operator|=
call|(
name|uchar
call|)
argument_list|(
name|ypos
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|data
index|[
literal|6
index|]
operator|=
call|(
name|uchar
call|)
argument_list|(
name|ypos
operator|>>
literal|0
argument_list|)
expr_stmt|;
name|data
operator|+=
literal|7
expr_stmt|;
if|if
condition|(
name|alpha
condition|)
block|{
operator|*
name|data
operator|++
operator|=
operator|(
name|uchar
operator|)
name|qAlpha
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|*
name|data
operator|++
operator|=
operator|(
name|uchar
operator|)
name|qRed
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
operator|*
name|data
operator|++
operator|=
operator|(
name|uchar
operator|)
name|qGreen
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
operator|*
name|data
operator|++
operator|=
operator|(
name|uchar
operator|)
name|qBlue
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
block|}
name|xpos
operator|+=
name|xoff
expr_stmt|;
name|ypos
operator|+=
name|yoff
expr_stmt|;
name|data
index|[
literal|0
index|]
operator|=
name|flag
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
call|(
name|uchar
call|)
argument_list|(
name|xpos
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|data
index|[
literal|2
index|]
operator|=
call|(
name|uchar
call|)
argument_list|(
name|xpos
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
call|(
name|uchar
call|)
argument_list|(
name|xpos
operator|>>
literal|0
argument_list|)
expr_stmt|;
name|data
index|[
literal|4
index|]
operator|=
call|(
name|uchar
call|)
argument_list|(
name|ypos
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|data
index|[
literal|5
index|]
operator|=
call|(
name|uchar
call|)
argument_list|(
name|ypos
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|data
index|[
literal|6
index|]
operator|=
call|(
name|uchar
call|)
argument_list|(
name|ypos
operator|>>
literal|0
argument_list|)
expr_stmt|;
name|data
operator|+=
literal|7
expr_stmt|;
if|if
condition|(
name|alpha
condition|)
block|{
operator|*
name|data
operator|++
operator|=
operator|(
name|uchar
operator|)
name|qAlpha
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|*
name|data
operator|++
operator|=
operator|(
name|uchar
operator|)
name|qRed
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
operator|*
name|data
operator|++
operator|=
operator|(
name|uchar
operator|)
name|qGreen
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
operator|*
name|data
operator|++
operator|=
operator|(
name|uchar
operator|)
name|qBlue
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|generateLinearGradientShader
name|QByteArray
name|QPdf
operator|::
name|generateLinearGradientShader
parameter_list|(
specifier|const
name|QLinearGradient
modifier|*
name|gradient
parameter_list|,
specifier|const
name|QPointF
modifier|*
name|page_rect
parameter_list|,
name|bool
name|alpha
parameter_list|)
block|{
comment|// generate list of triangles with colors
name|QPointF
name|start
init|=
name|gradient
operator|->
name|start
argument_list|()
decl_stmt|;
name|QPointF
name|stop
init|=
name|gradient
operator|->
name|finalStop
argument_list|()
decl_stmt|;
name|QGradientStops
name|stops
init|=
name|gradient
operator|->
name|stops
argument_list|()
decl_stmt|;
name|QPointF
name|offset
init|=
name|stop
operator|-
name|start
decl_stmt|;
name|QGradient
operator|::
name|Spread
name|spread
init|=
name|gradient
operator|->
name|spread
argument_list|()
decl_stmt|;
if|if
condition|(
name|gradient
operator|->
name|spread
argument_list|()
operator|==
name|QGradient
operator|::
name|ReflectSpread
condition|)
block|{
name|offset
operator|*=
literal|2
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|stops
operator|.
name|size
argument_list|()
operator|-
literal|2
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QGradientStop
name|stop
init|=
name|stops
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|stop
operator|.
name|first
operator|=
literal|2.
operator|-
name|stop
operator|.
name|first
expr_stmt|;
name|stops
operator|.
name|append
argument_list|(
name|stop
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stops
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|stops
index|[
name|i
index|]
operator|.
name|first
operator|/=
literal|2.
expr_stmt|;
block|}
name|QPointF
name|orthogonal
argument_list|(
name|offset
operator|.
name|y
argument_list|()
argument_list|,
operator|-
name|offset
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
name|qreal
name|length
init|=
name|offset
operator|.
name|x
argument_list|()
operator|*
name|offset
operator|.
name|x
argument_list|()
operator|+
name|offset
operator|.
name|y
argument_list|()
operator|*
name|offset
operator|.
name|y
argument_list|()
decl_stmt|;
comment|// find the max and min values in offset and orth direction that are needed to cover
comment|// the whole page
name|int
name|off_min
init|=
name|INT_MAX
decl_stmt|;
name|int
name|off_max
init|=
name|INT_MIN
decl_stmt|;
name|qreal
name|ort_min
init|=
name|INT_MAX
decl_stmt|;
name|qreal
name|ort_max
init|=
name|INT_MIN
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|off
init|=
operator|(
operator|(
name|page_rect
index|[
name|i
index|]
operator|.
name|x
argument_list|()
operator|-
name|start
operator|.
name|x
argument_list|()
operator|)
operator|*
name|offset
operator|.
name|x
argument_list|()
operator|+
operator|(
name|page_rect
index|[
name|i
index|]
operator|.
name|y
argument_list|()
operator|-
name|start
operator|.
name|y
argument_list|()
operator|)
operator|*
name|offset
operator|.
name|y
argument_list|()
operator|)
operator|/
name|length
decl_stmt|;
name|qreal
name|ort
init|=
operator|(
operator|(
name|page_rect
index|[
name|i
index|]
operator|.
name|x
argument_list|()
operator|-
name|start
operator|.
name|x
argument_list|()
operator|)
operator|*
name|orthogonal
operator|.
name|x
argument_list|()
operator|+
operator|(
name|page_rect
index|[
name|i
index|]
operator|.
name|y
argument_list|()
operator|-
name|start
operator|.
name|y
argument_list|()
operator|)
operator|*
name|orthogonal
operator|.
name|y
argument_list|()
operator|)
operator|/
name|length
decl_stmt|;
name|off_min
operator|=
name|qMin
argument_list|(
name|off_min
argument_list|,
name|qFloor
argument_list|(
name|off
argument_list|)
argument_list|)
expr_stmt|;
name|off_max
operator|=
name|qMax
argument_list|(
name|off_max
argument_list|,
name|qCeil
argument_list|(
name|off
argument_list|)
argument_list|)
expr_stmt|;
name|ort_min
operator|=
name|qMin
argument_list|(
name|ort_min
argument_list|,
name|ort
argument_list|)
expr_stmt|;
name|ort_max
operator|=
name|qMax
argument_list|(
name|ort_max
argument_list|,
name|ort
argument_list|)
expr_stmt|;
block|}
name|ort_min
operator|-=
literal|1
expr_stmt|;
name|ort_max
operator|+=
literal|1
expr_stmt|;
name|start
operator|+=
name|off_min
operator|*
name|offset
operator|+
name|ort_min
operator|*
name|orthogonal
expr_stmt|;
name|orthogonal
operator|*=
operator|(
name|ort_max
operator|-
name|ort_min
operator|)
expr_stmt|;
name|int
name|num
init|=
name|off_max
operator|-
name|off_min
decl_stmt|;
name|QPointF
name|gradient_rect
index|[
literal|4
index|]
init|=
block|{
name|start
block|,
name|start
operator|+
name|orthogonal
block|,
name|start
operator|+
name|num
operator|*
name|offset
block|,
name|start
operator|+
name|num
operator|*
name|offset
operator|+
name|orthogonal
block|}
decl_stmt|;
name|qreal
name|xmin
init|=
name|gradient_rect
index|[
literal|0
index|]
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|xmax
init|=
name|gradient_rect
index|[
literal|0
index|]
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|ymin
init|=
name|gradient_rect
index|[
literal|0
index|]
operator|.
name|y
argument_list|()
decl_stmt|;
name|qreal
name|ymax
init|=
name|gradient_rect
index|[
literal|0
index|]
operator|.
name|y
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|xmin
operator|=
name|qMin
argument_list|(
name|xmin
argument_list|,
name|gradient_rect
index|[
name|i
index|]
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|xmax
operator|=
name|qMax
argument_list|(
name|xmax
argument_list|,
name|gradient_rect
index|[
name|i
index|]
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|ymin
operator|=
name|qMin
argument_list|(
name|ymin
argument_list|,
name|gradient_rect
index|[
name|i
index|]
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|ymax
operator|=
name|qMax
argument_list|(
name|ymax
argument_list|,
name|gradient_rect
index|[
name|i
index|]
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|xmin
operator|-=
literal|1000
expr_stmt|;
name|xmax
operator|+=
literal|1000
expr_stmt|;
name|ymin
operator|-=
literal|1000
expr_stmt|;
name|ymax
operator|+=
literal|1000
expr_stmt|;
name|start
operator|-=
name|QPointF
argument_list|(
name|xmin
argument_list|,
name|ymin
argument_list|)
expr_stmt|;
name|qreal
name|factor_x
init|=
name|qreal
argument_list|(
literal|1
operator|<<
literal|24
argument_list|)
operator|/
operator|(
name|xmax
operator|-
name|xmin
operator|)
decl_stmt|;
name|qreal
name|factor_y
init|=
name|qreal
argument_list|(
literal|1
operator|<<
literal|24
argument_list|)
operator|/
operator|(
name|ymax
operator|-
name|ymin
operator|)
decl_stmt|;
name|int
name|xoff
init|=
call|(
name|int
call|)
argument_list|(
name|orthogonal
operator|.
name|x
argument_list|()
operator|*
name|factor_x
argument_list|)
decl_stmt|;
name|int
name|yoff
init|=
call|(
name|int
call|)
argument_list|(
name|orthogonal
operator|.
name|y
argument_list|()
operator|*
name|factor_y
argument_list|)
decl_stmt|;
name|QByteArray
name|triangles
decl_stmt|;
name|triangles
operator|.
name|resize
argument_list|(
name|spread
operator|==
name|QGradient
operator|::
name|PadSpread
condition|?
literal|20
operator|*
operator|(
name|stops
operator|.
name|size
argument_list|()
operator|+
literal|2
operator|)
else|:
literal|20
operator|*
name|num
operator|*
name|stops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|uchar
modifier|*
name|data
init|=
operator|(
name|uchar
operator|*
operator|)
name|triangles
operator|.
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
name|spread
operator|==
name|QGradient
operator|::
name|PadSpread
condition|)
block|{
if|if
condition|(
name|off_min
operator|>
literal|0
operator|||
name|off_max
operator|<
literal|1
condition|)
block|{
comment|// linear gradient outside of page
specifier|const
name|QGradientStop
modifier|&
name|current_stop
init|=
name|off_min
operator|>
literal|0
condition|?
name|stops
operator|.
name|at
argument_list|(
name|stops
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
else|:
name|stops
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|uint
name|rgb
init|=
name|current_stop
operator|.
name|second
operator|.
name|rgba
argument_list|()
decl_stmt|;
name|int
name|xpos
init|=
call|(
name|int
call|)
argument_list|(
name|start
operator|.
name|x
argument_list|()
operator|*
name|factor_x
argument_list|)
decl_stmt|;
name|int
name|ypos
init|=
call|(
name|int
call|)
argument_list|(
name|start
operator|.
name|y
argument_list|()
operator|*
name|factor_y
argument_list|)
decl_stmt|;
name|writeTriangleLine
argument_list|(
name|data
argument_list|,
name|xpos
argument_list|,
name|ypos
argument_list|,
name|xoff
argument_list|,
name|yoff
argument_list|,
name|rgb
argument_list|,
literal|0
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
name|start
operator|+=
name|num
operator|*
name|offset
expr_stmt|;
name|xpos
operator|=
call|(
name|int
call|)
argument_list|(
name|start
operator|.
name|x
argument_list|()
operator|*
name|factor_x
argument_list|)
expr_stmt|;
name|ypos
operator|=
call|(
name|int
call|)
argument_list|(
name|start
operator|.
name|y
argument_list|()
operator|*
name|factor_y
argument_list|)
expr_stmt|;
name|writeTriangleLine
argument_list|(
name|data
argument_list|,
name|xpos
argument_list|,
name|ypos
argument_list|,
name|xoff
argument_list|,
name|yoff
argument_list|,
name|rgb
argument_list|,
literal|1
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|flag
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|off_min
operator|<
literal|0
condition|)
block|{
name|uint
name|rgb
init|=
name|stops
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|second
operator|.
name|rgba
argument_list|()
decl_stmt|;
name|int
name|xpos
init|=
call|(
name|int
call|)
argument_list|(
name|start
operator|.
name|x
argument_list|()
operator|*
name|factor_x
argument_list|)
decl_stmt|;
name|int
name|ypos
init|=
call|(
name|int
call|)
argument_list|(
name|start
operator|.
name|y
argument_list|()
operator|*
name|factor_y
argument_list|)
decl_stmt|;
name|writeTriangleLine
argument_list|(
name|data
argument_list|,
name|xpos
argument_list|,
name|ypos
argument_list|,
name|xoff
argument_list|,
name|yoff
argument_list|,
name|rgb
argument_list|,
name|flag
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
name|start
operator|-=
name|off_min
operator|*
name|offset
expr_stmt|;
name|flag
operator|=
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
name|stops
operator|.
name|size
argument_list|()
condition|;
operator|++
name|s
control|)
block|{
specifier|const
name|QGradientStop
modifier|&
name|current_stop
init|=
name|stops
operator|.
name|at
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|uint
name|rgb
init|=
name|current_stop
operator|.
name|second
operator|.
name|rgba
argument_list|()
decl_stmt|;
name|int
name|xpos
init|=
call|(
name|int
call|)
argument_list|(
name|start
operator|.
name|x
argument_list|()
operator|*
name|factor_x
argument_list|)
decl_stmt|;
name|int
name|ypos
init|=
call|(
name|int
call|)
argument_list|(
name|start
operator|.
name|y
argument_list|()
operator|*
name|factor_y
argument_list|)
decl_stmt|;
name|writeTriangleLine
argument_list|(
name|data
argument_list|,
name|xpos
argument_list|,
name|ypos
argument_list|,
name|xoff
argument_list|,
name|yoff
argument_list|,
name|rgb
argument_list|,
name|flag
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|<
name|stops
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
name|start
operator|+=
name|offset
operator|*
operator|(
name|stops
operator|.
name|at
argument_list|(
name|s
operator|+
literal|1
argument_list|)
operator|.
name|first
operator|-
name|stops
operator|.
name|at
argument_list|(
name|s
argument_list|)
operator|.
name|first
operator|)
expr_stmt|;
name|flag
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|off_max
operator|>
literal|1
condition|)
block|{
name|start
operator|+=
operator|(
name|off_max
operator|-
literal|1
operator|)
operator|*
name|offset
expr_stmt|;
name|uint
name|rgb
init|=
name|stops
operator|.
name|at
argument_list|(
name|stops
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|second
operator|.
name|rgba
argument_list|()
decl_stmt|;
name|int
name|xpos
init|=
call|(
name|int
call|)
argument_list|(
name|start
operator|.
name|x
argument_list|()
operator|*
name|factor_x
argument_list|)
decl_stmt|;
name|int
name|ypos
init|=
call|(
name|int
call|)
argument_list|(
name|start
operator|.
name|y
argument_list|()
operator|*
name|factor_y
argument_list|)
decl_stmt|;
name|writeTriangleLine
argument_list|(
name|data
argument_list|,
name|xpos
argument_list|,
name|ypos
argument_list|,
name|xoff
argument_list|,
name|yoff
argument_list|,
name|rgb
argument_list|,
name|flag
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
operator|++
name|i
control|)
block|{
name|uchar
name|flag
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
name|stops
operator|.
name|size
argument_list|()
condition|;
operator|++
name|s
control|)
block|{
name|uint
name|rgb
init|=
name|stops
operator|.
name|at
argument_list|(
name|s
argument_list|)
operator|.
name|second
operator|.
name|rgba
argument_list|()
decl_stmt|;
name|int
name|xpos
init|=
call|(
name|int
call|)
argument_list|(
name|start
operator|.
name|x
argument_list|()
operator|*
name|factor_x
argument_list|)
decl_stmt|;
name|int
name|ypos
init|=
call|(
name|int
call|)
argument_list|(
name|start
operator|.
name|y
argument_list|()
operator|*
name|factor_y
argument_list|)
decl_stmt|;
name|writeTriangleLine
argument_list|(
name|data
argument_list|,
name|xpos
argument_list|,
name|ypos
argument_list|,
name|xoff
argument_list|,
name|yoff
argument_list|,
name|rgb
argument_list|,
name|flag
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|<
name|stops
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
name|start
operator|+=
name|offset
operator|*
operator|(
name|stops
operator|.
name|at
argument_list|(
name|s
operator|+
literal|1
argument_list|)
operator|.
name|first
operator|-
name|stops
operator|.
name|at
argument_list|(
name|s
argument_list|)
operator|.
name|first
operator|)
expr_stmt|;
name|flag
operator|=
literal|1
expr_stmt|;
block|}
block|}
block|}
name|triangles
operator|.
name|resize
argument_list|(
operator|(
name|char
operator|*
operator|)
name|data
operator|-
name|triangles
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|shader
decl_stmt|;
name|QPdf
operator|::
name|ByteStream
name|s
argument_list|(
operator|&
name|shader
argument_list|)
decl_stmt|;
name|s
operator|<<
literal|"<<\n"
literal|"/ShadingType 4\n"
literal|"/ColorSpace "
operator|<<
operator|(
name|alpha
condition|?
literal|"/DeviceGray\n"
else|:
literal|"/DeviceRGB\n"
operator|)
operator|<<
literal|"/AntiAlias true\n"
literal|"/BitsPerCoordinate 24\n"
literal|"/BitsPerComponent 8\n"
literal|"/BitsPerFlag 8\n"
literal|"/Decode ["
operator|<<
name|xmin
operator|<<
name|xmax
operator|<<
name|ymin
operator|<<
name|ymax
operator|<<
operator|(
name|alpha
condition|?
literal|"0 1]\n"
else|:
literal|"0 1 0 1 0 1]\n"
operator|)
operator|<<
literal|"/AntiAlias true\n"
literal|"/Length "
operator|<<
name|triangles
operator|.
name|length
argument_list|()
operator|<<
literal|"\n"
literal|">>\n"
literal|"stream\n"
operator|<<
name|triangles
operator|<<
literal|"endstream\n"
literal|"endobj\n"
expr_stmt|;
return|return
name|shader
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|moveToHook
specifier|static
name|void
name|moveToHook
parameter_list|(
name|qfixed
name|x
parameter_list|,
name|qfixed
name|y
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
name|QPdf
operator|::
name|Stroker
modifier|*
name|t
init|=
operator|(
name|QPdf
operator|::
name|Stroker
operator|*
operator|)
name|data
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|->
name|first
condition|)
operator|*
name|t
operator|->
name|stream
operator|<<
literal|"h\n"
expr_stmt|;
if|if
condition|(
operator|!
name|t
operator|->
name|cosmeticPen
condition|)
name|t
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
operator|&
name|x
argument_list|,
operator|&
name|y
argument_list|)
expr_stmt|;
operator|*
name|t
operator|->
name|stream
operator|<<
name|x
operator|<<
name|y
operator|<<
literal|"m\n"
expr_stmt|;
name|t
operator|->
name|first
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lineToHook
specifier|static
name|void
name|lineToHook
parameter_list|(
name|qfixed
name|x
parameter_list|,
name|qfixed
name|y
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
name|QPdf
operator|::
name|Stroker
modifier|*
name|t
init|=
operator|(
name|QPdf
operator|::
name|Stroker
operator|*
operator|)
name|data
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|->
name|cosmeticPen
condition|)
name|t
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
operator|&
name|x
argument_list|,
operator|&
name|y
argument_list|)
expr_stmt|;
operator|*
name|t
operator|->
name|stream
operator|<<
name|x
operator|<<
name|y
operator|<<
literal|"l\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cubicToHook
specifier|static
name|void
name|cubicToHook
parameter_list|(
name|qfixed
name|c1x
parameter_list|,
name|qfixed
name|c1y
parameter_list|,
name|qfixed
name|c2x
parameter_list|,
name|qfixed
name|c2y
parameter_list|,
name|qfixed
name|ex
parameter_list|,
name|qfixed
name|ey
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
name|QPdf
operator|::
name|Stroker
modifier|*
name|t
init|=
operator|(
name|QPdf
operator|::
name|Stroker
operator|*
operator|)
name|data
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|->
name|cosmeticPen
condition|)
block|{
name|t
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|c1x
argument_list|,
name|c1y
argument_list|,
operator|&
name|c1x
argument_list|,
operator|&
name|c1y
argument_list|)
expr_stmt|;
name|t
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|c2x
argument_list|,
name|c2y
argument_list|,
operator|&
name|c2x
argument_list|,
operator|&
name|c2y
argument_list|)
expr_stmt|;
name|t
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|ex
argument_list|,
name|ey
argument_list|,
operator|&
name|ex
argument_list|,
operator|&
name|ey
argument_list|)
expr_stmt|;
block|}
operator|*
name|t
operator|->
name|stream
operator|<<
name|c1x
operator|<<
name|c1y
operator|<<
name|c2x
operator|<<
name|c2y
operator|<<
name|ex
operator|<<
name|ey
operator|<<
literal|"c\n"
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|Stroker
name|QPdf
operator|::
name|Stroker
operator|::
name|Stroker
parameter_list|()
member_init_list|:
name|stream
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|first
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|dashStroker
argument_list|(
operator|&
name|basicStroker
argument_list|)
block|{
name|stroker
operator|=
operator|&
name|basicStroker
expr_stmt|;
name|basicStroker
operator|.
name|setMoveToHook
argument_list|(
name|moveToHook
argument_list|)
expr_stmt|;
name|basicStroker
operator|.
name|setLineToHook
argument_list|(
name|lineToHook
argument_list|)
expr_stmt|;
name|basicStroker
operator|.
name|setCubicToHook
argument_list|(
name|cubicToHook
argument_list|)
expr_stmt|;
name|cosmeticPen
operator|=
literal|true
expr_stmt|;
name|basicStroker
operator|.
name|setStrokeWidth
argument_list|(
literal|.1
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|setPen
name|void
name|QPdf
operator|::
name|Stroker
operator|::
name|setPen
parameter_list|(
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
if|if
condition|(
name|pen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoPen
condition|)
block|{
name|stroker
operator|=
literal|0
expr_stmt|;
return|return;
block|}
name|qreal
name|w
init|=
name|pen
operator|.
name|widthF
argument_list|()
decl_stmt|;
name|bool
name|zeroWidth
init|=
name|w
operator|<
literal|0.0001
decl_stmt|;
name|cosmeticPen
operator|=
name|pen
operator|.
name|isCosmetic
argument_list|()
expr_stmt|;
if|if
condition|(
name|zeroWidth
condition|)
name|w
operator|=
literal|.1
expr_stmt|;
name|basicStroker
operator|.
name|setStrokeWidth
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|basicStroker
operator|.
name|setCapStyle
argument_list|(
name|pen
operator|.
name|capStyle
argument_list|()
argument_list|)
expr_stmt|;
name|basicStroker
operator|.
name|setJoinStyle
argument_list|(
name|pen
operator|.
name|joinStyle
argument_list|()
argument_list|)
expr_stmt|;
name|basicStroker
operator|.
name|setMiterLimit
argument_list|(
name|pen
operator|.
name|miterLimit
argument_list|()
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|qreal
argument_list|>
name|dashpattern
init|=
name|pen
operator|.
name|dashPattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|zeroWidth
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dashpattern
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|dashpattern
index|[
name|i
index|]
operator|*=
literal|10.
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dashpattern
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dashStroker
operator|.
name|setDashPattern
argument_list|(
name|dashpattern
argument_list|)
expr_stmt|;
name|dashStroker
operator|.
name|setDashOffset
argument_list|(
name|pen
operator|.
name|dashOffset
argument_list|()
argument_list|)
expr_stmt|;
name|stroker
operator|=
operator|&
name|dashStroker
expr_stmt|;
block|}
else|else
block|{
name|stroker
operator|=
operator|&
name|basicStroker
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|strokePath
name|void
name|QPdf
operator|::
name|Stroker
operator|::
name|strokePath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|stroker
condition|)
return|return;
name|first
operator|=
literal|true
expr_stmt|;
name|stroker
operator|->
name|strokePath
argument_list|(
name|path
argument_list|,
name|this
argument_list|,
name|cosmeticPen
condition|?
name|matrix
else|:
name|QTransform
argument_list|()
argument_list|)
expr_stmt|;
operator|*
name|stream
operator|<<
literal|"h f\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ascii85Encode
name|QByteArray
name|QPdf
operator|::
name|ascii85Encode
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|input
parameter_list|)
block|{
name|int
name|isize
init|=
name|input
operator|.
name|size
argument_list|()
operator|/
literal|4
operator|*
literal|4
decl_stmt|;
name|QByteArray
name|output
decl_stmt|;
name|output
operator|.
name|resize
argument_list|(
name|input
operator|.
name|size
argument_list|()
operator|*
literal|5
operator|/
literal|4
operator|+
literal|7
argument_list|)
expr_stmt|;
name|char
modifier|*
name|out
init|=
name|output
operator|.
name|data
argument_list|()
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|in
init|=
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|input
operator|.
name|constData
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|isize
condition|;
name|i
operator|+=
literal|4
control|)
block|{
name|uint
name|val
init|=
operator|(
operator|(
operator|(
name|uint
operator|)
name|in
index|[
name|i
index|]
operator|)
operator|<<
literal|24
operator|)
operator|+
operator|(
operator|(
operator|(
name|uint
operator|)
name|in
index|[
name|i
operator|+
literal|1
index|]
operator|)
operator|<<
literal|16
operator|)
operator|+
operator|(
operator|(
operator|(
name|uint
operator|)
name|in
index|[
name|i
operator|+
literal|2
index|]
operator|)
operator|<<
literal|8
operator|)
operator|+
operator|(
name|uint
operator|)
name|in
index|[
name|i
operator|+
literal|3
index|]
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|0
condition|)
block|{
operator|*
name|out
operator|=
literal|'z'
expr_stmt|;
operator|++
name|out
expr_stmt|;
block|}
else|else
block|{
name|char
name|base
index|[
literal|5
index|]
decl_stmt|;
name|base
index|[
literal|4
index|]
operator|=
name|val
operator|%
literal|85
expr_stmt|;
name|val
operator|/=
literal|85
expr_stmt|;
name|base
index|[
literal|3
index|]
operator|=
name|val
operator|%
literal|85
expr_stmt|;
name|val
operator|/=
literal|85
expr_stmt|;
name|base
index|[
literal|2
index|]
operator|=
name|val
operator|%
literal|85
expr_stmt|;
name|val
operator|/=
literal|85
expr_stmt|;
name|base
index|[
literal|1
index|]
operator|=
name|val
operator|%
literal|85
expr_stmt|;
name|val
operator|/=
literal|85
expr_stmt|;
name|base
index|[
literal|0
index|]
operator|=
name|val
operator|%
literal|85
expr_stmt|;
operator|*
operator|(
name|out
operator|++
operator|)
operator|=
name|base
index|[
literal|0
index|]
operator|+
literal|'!'
expr_stmt|;
operator|*
operator|(
name|out
operator|++
operator|)
operator|=
name|base
index|[
literal|1
index|]
operator|+
literal|'!'
expr_stmt|;
operator|*
operator|(
name|out
operator|++
operator|)
operator|=
name|base
index|[
literal|2
index|]
operator|+
literal|'!'
expr_stmt|;
operator|*
operator|(
name|out
operator|++
operator|)
operator|=
name|base
index|[
literal|3
index|]
operator|+
literal|'!'
expr_stmt|;
operator|*
operator|(
name|out
operator|++
operator|)
operator|=
name|base
index|[
literal|4
index|]
operator|+
literal|'!'
expr_stmt|;
block|}
block|}
comment|//write the last few bytes
name|int
name|remaining
init|=
name|input
operator|.
name|size
argument_list|()
operator|-
name|isize
decl_stmt|;
if|if
condition|(
name|remaining
condition|)
block|{
name|uint
name|val
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|isize
init|;
name|i
operator|<
name|input
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|val
operator|=
operator|(
name|val
operator|<<
literal|8
operator|)
operator|+
name|in
index|[
name|i
index|]
expr_stmt|;
name|val
operator|<<=
literal|8
operator|*
operator|(
literal|4
operator|-
name|remaining
operator|)
expr_stmt|;
name|char
name|base
index|[
literal|5
index|]
decl_stmt|;
name|base
index|[
literal|4
index|]
operator|=
name|val
operator|%
literal|85
expr_stmt|;
name|val
operator|/=
literal|85
expr_stmt|;
name|base
index|[
literal|3
index|]
operator|=
name|val
operator|%
literal|85
expr_stmt|;
name|val
operator|/=
literal|85
expr_stmt|;
name|base
index|[
literal|2
index|]
operator|=
name|val
operator|%
literal|85
expr_stmt|;
name|val
operator|/=
literal|85
expr_stmt|;
name|base
index|[
literal|1
index|]
operator|=
name|val
operator|%
literal|85
expr_stmt|;
name|val
operator|/=
literal|85
expr_stmt|;
name|base
index|[
literal|0
index|]
operator|=
name|val
operator|%
literal|85
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|remaining
operator|+
literal|1
condition|;
operator|++
name|i
control|)
operator|*
operator|(
name|out
operator|++
operator|)
operator|=
name|base
index|[
name|i
index|]
operator|+
literal|'!'
expr_stmt|;
block|}
operator|*
operator|(
name|out
operator|++
operator|)
operator|=
literal|'~'
expr_stmt|;
operator|*
operator|(
name|out
operator|++
operator|)
operator|=
literal|'>'
expr_stmt|;
name|output
operator|.
name|resize
argument_list|(
name|out
operator|-
name|output
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
end_function
begin_function
DECL|function|toHex
specifier|const
name|char
modifier|*
name|QPdf
operator|::
name|toHex
parameter_list|(
name|ushort
name|u
parameter_list|,
name|char
modifier|*
name|buffer
parameter_list|)
block|{
name|int
name|i
init|=
literal|3
decl_stmt|;
while|while
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|ushort
name|hex
init|=
operator|(
name|u
operator|&
literal|0x000f
operator|)
decl_stmt|;
if|if
condition|(
name|hex
operator|<
literal|0x0a
condition|)
name|buffer
index|[
name|i
index|]
operator|=
literal|'0'
operator|+
name|hex
expr_stmt|;
else|else
name|buffer
index|[
name|i
index|]
operator|=
literal|'A'
operator|+
operator|(
name|hex
operator|-
literal|0x0a
operator|)
expr_stmt|;
name|u
operator|=
name|u
operator|>>
literal|4
expr_stmt|;
name|i
operator|--
expr_stmt|;
block|}
name|buffer
index|[
literal|4
index|]
operator|=
literal|'\0'
expr_stmt|;
return|return
name|buffer
return|;
block|}
end_function
begin_function
DECL|function|toHex
specifier|const
name|char
modifier|*
name|QPdf
operator|::
name|toHex
parameter_list|(
name|uchar
name|u
parameter_list|,
name|char
modifier|*
name|buffer
parameter_list|)
block|{
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|ushort
name|hex
init|=
operator|(
name|u
operator|&
literal|0x000f
operator|)
decl_stmt|;
if|if
condition|(
name|hex
operator|<
literal|0x0a
condition|)
name|buffer
index|[
name|i
index|]
operator|=
literal|'0'
operator|+
name|hex
expr_stmt|;
else|else
name|buffer
index|[
name|i
index|]
operator|=
literal|'A'
operator|+
operator|(
name|hex
operator|-
literal|0x0a
operator|)
expr_stmt|;
name|u
operator|=
name|u
operator|>>
literal|4
expr_stmt|;
name|i
operator|--
expr_stmt|;
block|}
name|buffer
index|[
literal|2
index|]
operator|=
literal|'\0'
expr_stmt|;
return|return
name|buffer
return|;
block|}
end_function
begin_define
DECL|macro|Q_MM
define|#
directive|define
name|Q_MM
parameter_list|(
name|n
parameter_list|)
value|int((n * 720 + 127) / 254)
end_define
begin_define
DECL|macro|Q_IN
define|#
directive|define
name|Q_IN
parameter_list|(
name|n
parameter_list|)
value|int(n * 72)
end_define
begin_decl_stmt
DECL|variable|psToStr
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|psToStr
index|[
name|QPrinter
operator|::
name|NPaperSize
operator|+
literal|1
index|]
init|=
block|{
literal|"A4"
block|,
literal|"B5"
block|,
literal|"Letter"
block|,
literal|"Legal"
block|,
literal|"Executive"
block|,
literal|"A0"
block|,
literal|"A1"
block|,
literal|"A2"
block|,
literal|"A3"
block|,
literal|"A5"
block|,
literal|"A6"
block|,
literal|"A7"
block|,
literal|"A8"
block|,
literal|"A9"
block|,
literal|"B0"
block|,
literal|"B1"
block|,
literal|"B10"
block|,
literal|"B2"
block|,
literal|"B3"
block|,
literal|"B4"
block|,
literal|"B6"
block|,
literal|"B7"
block|,
literal|"B8"
block|,
literal|"B9"
block|,
literal|"C5E"
block|,
literal|"Comm10E"
block|,
literal|"DLE"
block|,
literal|"Folio"
block|,
literal|"Ledger"
block|,
literal|"Tabloid"
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|paperSize
name|QPdf
operator|::
name|PaperSize
name|QPdf
operator|::
name|paperSize
parameter_list|(
name|QPrinter
operator|::
name|PaperSize
name|paperSize
parameter_list|)
block|{
name|QSizeF
name|s
init|=
name|qt_paperSizeToQSizeF
argument_list|(
name|paperSize
argument_list|)
decl_stmt|;
name|PaperSize
name|p
init|=
block|{
name|Q_MM
argument_list|(
name|s
operator|.
name|width
argument_list|()
argument_list|)
block|,
name|Q_MM
argument_list|(
argument|s.height()
argument_list|)
block|}
decl_stmt|;
return|return
name|p
return|;
block|}
end_function
begin_function
DECL|function|paperSizeToString
specifier|const
name|char
modifier|*
name|QPdf
operator|::
name|paperSizeToString
parameter_list|(
name|QPrinter
operator|::
name|PaperSize
name|paperSize
parameter_list|)
block|{
return|return
name|psToStr
index|[
name|paperSize
index|]
return|;
block|}
end_function
begin_comment
comment|// -------------------------- base engine, shared code between PS and PDF -----------------------
end_comment
begin_constructor
DECL|function|QPdfBaseEngine
name|QPdfBaseEngine
operator|::
name|QPdfBaseEngine
parameter_list|(
name|QPdfBaseEnginePrivate
modifier|&
name|dd
parameter_list|,
name|PaintEngineFeatures
name|f
parameter_list|)
member_init_list|:
name|QAlphaPaintEngine
argument_list|(
name|dd
argument_list|,
name|f
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPdfBaseEngine
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
if|if
condition|(
name|QCUPSSupport
operator|::
name|isAvailable
argument_list|()
condition|)
block|{
name|QCUPSSupport
name|cups
decl_stmt|;
specifier|const
name|cups_dest_t
modifier|*
name|printers
init|=
name|cups
operator|.
name|availablePrinters
argument_list|()
decl_stmt|;
name|int
name|prnCount
init|=
name|cups
operator|.
name|availablePrintersCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prnCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|printers
index|[
name|i
index|]
operator|.
name|is_default
condition|)
block|{
name|d
operator|->
name|printerName
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|printers
index|[
name|i
index|]
operator|.
name|name
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
endif|#
directive|endif
block|{
name|d
operator|->
name|printerName
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"PRINTER"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|printerName
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|->
name|printerName
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"LPDEST"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|printerName
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|->
name|printerName
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"NPRINTER"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|printerName
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|->
name|printerName
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"NGPRINTER"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_function
DECL|function|drawPoints
name|void
name|QPdfBaseEngine
operator|::
name|drawPoints
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|)
block|{
if|if
condition|(
operator|!
name|points
condition|)
return|return;
name|Q_D
argument_list|(
name|QPdfBaseEngine
argument_list|)
expr_stmt|;
name|QPainterPath
name|p
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|pointCount
condition|;
operator|++
name|i
control|)
block|{
name|p
operator|.
name|moveTo
argument_list|(
name|points
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|p
operator|.
name|lineTo
argument_list|(
name|points
index|[
name|i
index|]
operator|+
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bool
name|hadBrush
init|=
name|d
operator|->
name|hasBrush
decl_stmt|;
name|d
operator|->
name|hasBrush
operator|=
literal|false
expr_stmt|;
name|drawPath
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|d
operator|->
name|hasBrush
operator|=
name|hadBrush
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawLines
name|void
name|QPdfBaseEngine
operator|::
name|drawLines
parameter_list|(
specifier|const
name|QLineF
modifier|*
name|lines
parameter_list|,
name|int
name|lineCount
parameter_list|)
block|{
if|if
condition|(
operator|!
name|lines
condition|)
return|return;
name|Q_D
argument_list|(
name|QPdfBaseEngine
argument_list|)
expr_stmt|;
name|QPainterPath
name|p
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|lineCount
condition|;
operator|++
name|i
control|)
block|{
name|p
operator|.
name|moveTo
argument_list|(
name|lines
index|[
name|i
index|]
operator|.
name|p1
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|lineTo
argument_list|(
name|lines
index|[
name|i
index|]
operator|.
name|p2
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|bool
name|hadBrush
init|=
name|d
operator|->
name|hasBrush
decl_stmt|;
name|d
operator|->
name|hasBrush
operator|=
literal|false
expr_stmt|;
name|drawPath
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|d
operator|->
name|hasBrush
operator|=
name|hadBrush
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawRects
name|void
name|QPdfBaseEngine
operator|::
name|drawRects
parameter_list|(
specifier|const
name|QRectF
modifier|*
name|rects
parameter_list|,
name|int
name|rectCount
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rects
condition|)
return|return;
name|Q_D
argument_list|(
name|QPdfBaseEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|useAlphaEngine
condition|)
block|{
name|QAlphaPaintEngine
operator|::
name|drawRects
argument_list|(
name|rects
argument_list|,
name|rectCount
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|continueCall
argument_list|()
condition|)
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|clipEnabled
operator|&&
name|d
operator|->
name|allClipped
condition|)
return|return;
if|if
condition|(
operator|!
name|d
operator|->
name|hasPen
operator|&&
operator|!
name|d
operator|->
name|hasBrush
condition|)
return|return;
name|QBrush
name|penBrush
init|=
name|d
operator|->
name|pen
operator|.
name|brush
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|simplePen
operator|||
operator|!
name|d
operator|->
name|hasPen
condition|)
block|{
comment|// draw strokes natively in this case for better output
if|if
condition|(
operator|!
name|d
operator|->
name|simplePen
operator|&&
operator|!
name|d
operator|->
name|stroker
operator|.
name|matrix
operator|.
name|isIdentity
argument_list|()
condition|)
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"q\n"
operator|<<
name|QPdf
operator|::
name|generateMatrix
argument_list|(
name|d
operator|->
name|stroker
operator|.
name|matrix
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rectCount
condition|;
operator|++
name|i
control|)
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|rects
index|[
name|i
index|]
operator|.
name|x
argument_list|()
operator|<<
name|rects
index|[
name|i
index|]
operator|.
name|y
argument_list|()
operator|<<
name|rects
index|[
name|i
index|]
operator|.
name|width
argument_list|()
operator|<<
name|rects
index|[
name|i
index|]
operator|.
name|height
argument_list|()
operator|<<
literal|"re\n"
expr_stmt|;
operator|*
name|d
operator|->
name|currentPage
operator|<<
operator|(
name|d
operator|->
name|hasPen
condition|?
operator|(
name|d
operator|->
name|hasBrush
condition|?
literal|"B\n"
else|:
literal|"S\n"
operator|)
else|:
literal|"f\n"
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|simplePen
operator|&&
operator|!
name|d
operator|->
name|stroker
operator|.
name|matrix
operator|.
name|isIdentity
argument_list|()
condition|)
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"Q\n"
expr_stmt|;
block|}
else|else
block|{
name|QPainterPath
name|p
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|rectCount
condition|;
operator|++
name|i
control|)
name|p
operator|.
name|addRect
argument_list|(
name|rects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|drawPath
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawPolygon
name|void
name|QPdfBaseEngine
operator|::
name|drawPolygon
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|PolygonDrawMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfBaseEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|useAlphaEngine
condition|)
block|{
name|QAlphaPaintEngine
operator|::
name|drawPolygon
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|,
name|mode
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|continueCall
argument_list|()
condition|)
return|return;
block|}
if|if
condition|(
operator|!
name|points
operator|||
operator|!
name|pointCount
condition|)
return|return;
name|bool
name|hb
init|=
name|d
operator|->
name|hasBrush
decl_stmt|;
name|QPainterPath
name|p
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|OddEvenMode
case|:
name|p
operator|.
name|setFillRule
argument_list|(
name|Qt
operator|::
name|OddEvenFill
argument_list|)
expr_stmt|;
break|break;
case|case
name|ConvexMode
case|:
case|case
name|WindingMode
case|:
name|p
operator|.
name|setFillRule
argument_list|(
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
break|break;
case|case
name|PolylineMode
case|:
name|d
operator|->
name|hasBrush
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|p
operator|.
name|moveTo
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pointCount
condition|;
operator|++
name|i
control|)
name|p
operator|.
name|lineTo
argument_list|(
name|points
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|!=
name|PolylineMode
condition|)
name|p
operator|.
name|closeSubpath
argument_list|()
expr_stmt|;
name|drawPath
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|d
operator|->
name|hasBrush
operator|=
name|hb
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPath
name|void
name|QPdfBaseEngine
operator|::
name|drawPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|p
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfBaseEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|useAlphaEngine
condition|)
block|{
name|QAlphaPaintEngine
operator|::
name|drawPath
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|continueCall
argument_list|()
condition|)
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|clipEnabled
operator|&&
name|d
operator|->
name|allClipped
condition|)
return|return;
if|if
condition|(
operator|!
name|d
operator|->
name|hasPen
operator|&&
operator|!
name|d
operator|->
name|hasBrush
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|simplePen
condition|)
block|{
comment|// draw strokes natively in this case for better output
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|QPdf
operator|::
name|generatePath
argument_list|(
name|p
argument_list|,
name|QTransform
argument_list|()
argument_list|,
name|d
operator|->
name|hasBrush
condition|?
name|QPdf
operator|::
name|FillAndStrokePath
else|:
name|QPdf
operator|::
name|StrokePath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|d
operator|->
name|hasBrush
condition|)
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|QPdf
operator|::
name|generatePath
argument_list|(
name|p
argument_list|,
name|d
operator|->
name|stroker
operator|.
name|matrix
argument_list|,
name|QPdf
operator|::
name|FillPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hasPen
condition|)
block|{
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"q\n"
expr_stmt|;
name|QBrush
name|b
init|=
name|d
operator|->
name|brush
decl_stmt|;
name|d
operator|->
name|brush
operator|=
name|d
operator|->
name|pen
operator|.
name|brush
argument_list|()
expr_stmt|;
name|setBrush
argument_list|()
expr_stmt|;
name|d
operator|->
name|stroker
operator|.
name|strokePath
argument_list|(
name|p
argument_list|)
expr_stmt|;
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"Q\n"
expr_stmt|;
name|d
operator|->
name|brush
operator|=
name|b
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|drawTextItem
name|void
name|QPdfBaseEngine
operator|::
name|drawTextItem
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QTextItem
modifier|&
name|textItem
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfBaseEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|useAlphaEngine
condition|)
block|{
name|QAlphaPaintEngine
operator|::
name|drawTextItem
argument_list|(
name|p
argument_list|,
name|textItem
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|continueCall
argument_list|()
condition|)
return|return;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|hasPen
operator|||
operator|(
name|d
operator|->
name|clipEnabled
operator|&&
name|d
operator|->
name|allClipped
operator|)
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|stroker
operator|.
name|matrix
operator|.
name|type
argument_list|()
operator|>=
name|QTransform
operator|::
name|TxProject
condition|)
block|{
name|QPaintEngine
operator|::
name|drawTextItem
argument_list|(
name|p
argument_list|,
name|textItem
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"q\n"
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|simplePen
condition|)
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|QPdf
operator|::
name|generateMatrix
argument_list|(
name|d
operator|->
name|stroker
operator|.
name|matrix
argument_list|)
expr_stmt|;
name|bool
name|hp
init|=
name|d
operator|->
name|hasPen
decl_stmt|;
name|d
operator|->
name|hasPen
operator|=
literal|false
expr_stmt|;
name|QBrush
name|b
init|=
name|d
operator|->
name|brush
decl_stmt|;
name|d
operator|->
name|brush
operator|=
name|d
operator|->
name|pen
operator|.
name|brush
argument_list|()
expr_stmt|;
name|setBrush
argument_list|()
expr_stmt|;
specifier|const
name|QTextItemInt
modifier|&
name|ti
init|=
cast|static_cast
argument_list|<
specifier|const
name|QTextItemInt
operator|&
argument_list|>
argument_list|(
name|textItem
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|ti
operator|.
name|fontEngine
operator|->
name|type
argument_list|()
operator|!=
name|QFontEngine
operator|::
name|Multi
argument_list|)
expr_stmt|;
name|d
operator|->
name|drawTextItem
argument_list|(
name|p
argument_list|,
name|ti
argument_list|)
expr_stmt|;
name|d
operator|->
name|hasPen
operator|=
name|hp
expr_stmt|;
name|d
operator|->
name|brush
operator|=
name|b
expr_stmt|;
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"Q\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateState
name|void
name|QPdfBaseEngine
operator|::
name|updateState
parameter_list|(
specifier|const
name|QPaintEngineState
modifier|&
name|state
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfBaseEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|useAlphaEngine
condition|)
block|{
name|QAlphaPaintEngine
operator|::
name|updateState
argument_list|(
name|state
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|continueCall
argument_list|()
condition|)
return|return;
block|}
name|QPaintEngine
operator|::
name|DirtyFlags
name|flags
init|=
name|state
operator|.
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyTransform
condition|)
name|d
operator|->
name|stroker
operator|.
name|matrix
operator|=
name|state
operator|.
name|transform
argument_list|()
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyPen
condition|)
block|{
name|d
operator|->
name|pen
operator|=
name|state
operator|.
name|pen
argument_list|()
expr_stmt|;
name|d
operator|->
name|hasPen
operator|=
name|d
operator|->
name|pen
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoPen
expr_stmt|;
name|d
operator|->
name|stroker
operator|.
name|setPen
argument_list|(
name|d
operator|->
name|pen
argument_list|)
expr_stmt|;
name|QBrush
name|penBrush
init|=
name|d
operator|->
name|pen
operator|.
name|brush
argument_list|()
decl_stmt|;
name|bool
name|oldSimple
init|=
name|d
operator|->
name|simplePen
decl_stmt|;
name|d
operator|->
name|simplePen
operator|=
operator|(
name|d
operator|->
name|hasPen
operator|&&
operator|(
name|penBrush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidPattern
operator|)
operator|&&
name|penBrush
operator|.
name|isOpaque
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|oldSimple
operator|!=
name|d
operator|->
name|simplePen
condition|)
name|flags
operator||=
name|DirtyTransform
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|DirtyBrush
condition|)
block|{
name|d
operator|->
name|brush
operator|=
name|state
operator|.
name|brush
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|brush
operator|.
name|color
argument_list|()
operator|.
name|alpha
argument_list|()
operator|==
literal|0
operator|&&
name|d
operator|->
name|brush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidPattern
condition|)
name|d
operator|->
name|brush
operator|.
name|setStyle
argument_list|(
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
name|d
operator|->
name|hasBrush
operator|=
name|d
operator|->
name|brush
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|DirtyBrushOrigin
condition|)
block|{
name|d
operator|->
name|brushOrigin
operator|=
name|state
operator|.
name|brushOrigin
argument_list|()
expr_stmt|;
name|flags
operator||=
name|DirtyBrush
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|DirtyOpacity
condition|)
name|d
operator|->
name|opacity
operator|=
name|state
operator|.
name|opacity
argument_list|()
expr_stmt|;
name|bool
name|ce
init|=
name|d
operator|->
name|clipEnabled
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyClipPath
condition|)
block|{
name|d
operator|->
name|clipEnabled
operator|=
literal|true
expr_stmt|;
name|updateClipPath
argument_list|(
name|state
operator|.
name|clipPath
argument_list|()
argument_list|,
name|state
operator|.
name|clipOperation
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flags
operator|&
name|DirtyClipRegion
condition|)
block|{
name|d
operator|->
name|clipEnabled
operator|=
literal|true
expr_stmt|;
name|QPainterPath
name|path
decl_stmt|;
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|state
operator|.
name|clipRegion
argument_list|()
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|path
operator|.
name|addRect
argument_list|(
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|updateClipPath
argument_list|(
name|path
argument_list|,
name|state
operator|.
name|clipOperation
argument_list|()
argument_list|)
expr_stmt|;
name|flags
operator||=
name|DirtyClipPath
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flags
operator|&
name|DirtyClipEnabled
condition|)
block|{
name|d
operator|->
name|clipEnabled
operator|=
name|state
operator|.
name|isClipEnabled
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ce
operator|!=
name|d
operator|->
name|clipEnabled
condition|)
name|flags
operator||=
name|DirtyClipPath
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|d
operator|->
name|clipEnabled
condition|)
name|flags
operator|&=
operator|~
name|DirtyClipPath
expr_stmt|;
name|setupGraphicsState
argument_list|(
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setupGraphicsState
name|void
name|QPdfBaseEngine
operator|::
name|setupGraphicsState
parameter_list|(
name|QPaintEngine
operator|::
name|DirtyFlags
name|flags
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfBaseEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyClipPath
condition|)
name|flags
operator||=
name|DirtyTransform
operator||
name|DirtyPen
operator||
name|DirtyBrush
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyTransform
condition|)
block|{
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"Q\n"
expr_stmt|;
name|flags
operator||=
name|DirtyPen
operator||
name|DirtyBrush
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|DirtyClipPath
condition|)
block|{
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"Q q\n"
expr_stmt|;
name|d
operator|->
name|allClipped
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|clipEnabled
operator|&&
operator|!
name|d
operator|->
name|clips
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|clips
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|d
operator|->
name|clips
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|d
operator|->
name|allClipped
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|allClipped
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|clips
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|QPdf
operator|::
name|generatePath
argument_list|(
name|d
operator|->
name|clips
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|QTransform
argument_list|()
argument_list|,
name|QPdf
operator|::
name|ClipPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|flags
operator|&
name|DirtyTransform
condition|)
block|{
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"q\n"
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|simplePen
operator|&&
operator|!
name|d
operator|->
name|stroker
operator|.
name|matrix
operator|.
name|isIdentity
argument_list|()
condition|)
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|QPdf
operator|::
name|generateMatrix
argument_list|(
name|d
operator|->
name|stroker
operator|.
name|matrix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|DirtyBrush
condition|)
name|setBrush
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|simplePen
operator|&&
operator|(
name|flags
operator|&
name|DirtyPen
operator|)
condition|)
name|setPen
argument_list|()
expr_stmt|;
block|}
end_function
begin_function_decl
specifier|extern
name|QPainterPath
name|qt_regionToPath
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|updateClipPath
name|void
name|QPdfBaseEngine
operator|::
name|updateClipPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|p
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfBaseEngine
argument_list|)
expr_stmt|;
name|QPainterPath
name|path
init|=
name|d
operator|->
name|stroker
operator|.
name|matrix
operator|.
name|map
argument_list|(
name|p
argument_list|)
decl_stmt|;
comment|//qDebug()<< "updateClipPath: "<< d->stroker.matrix<< p.boundingRect()<< path.boundingRect()<< op;
if|if
condition|(
name|op
operator|==
name|Qt
operator|::
name|NoClip
condition|)
block|{
name|d
operator|->
name|clipEnabled
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|clips
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|Qt
operator|::
name|ReplaceClip
condition|)
block|{
name|d
operator|->
name|clips
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|clips
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|Qt
operator|::
name|IntersectClip
condition|)
block|{
name|d
operator|->
name|clips
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// UniteClip
comment|// ask the painter for the current clipping path. that's the easiest solution
name|path
operator|=
name|painter
argument_list|()
operator|->
name|clipPath
argument_list|()
expr_stmt|;
name|path
operator|=
name|d
operator|->
name|stroker
operator|.
name|matrix
operator|.
name|map
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|d
operator|->
name|clips
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|clips
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|useAlphaEngine
condition|)
block|{
comment|// if we have an alpha region, we have to subtract that from the
comment|// any existing clip region since that region will be filled in
comment|// later with images
name|QPainterPath
name|alphaClip
init|=
name|qt_regionToPath
argument_list|(
name|alphaClipping
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|alphaClip
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|clipEnabled
condition|)
block|{
name|QRect
name|r
init|=
name|d
operator|->
name|fullPage
condition|?
name|d
operator|->
name|paperRect
argument_list|()
else|:
name|d
operator|->
name|pageRect
argument_list|()
decl_stmt|;
name|QPainterPath
name|dev
decl_stmt|;
name|dev
operator|.
name|addRect
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
name|path
operator|=
name|dev
expr_stmt|;
else|else
name|path
operator|=
name|path
operator|.
name|intersected
argument_list|(
name|dev
argument_list|)
expr_stmt|;
name|d
operator|->
name|clipEnabled
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|painter
argument_list|()
operator|->
name|clipPath
argument_list|()
expr_stmt|;
name|path
operator|=
name|d
operator|->
name|stroker
operator|.
name|matrix
operator|.
name|map
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|path
operator|=
name|path
operator|.
name|subtracted
argument_list|(
name|alphaClip
argument_list|)
expr_stmt|;
name|d
operator|->
name|clips
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|clips
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setPen
name|void
name|QPdfBaseEngine
operator|::
name|setPen
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPdfBaseEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoPen
condition|)
return|return;
name|QBrush
name|b
init|=
name|d
operator|->
name|pen
operator|.
name|brush
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|b
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidPattern
operator|&&
name|b
operator|.
name|isOpaque
argument_list|()
argument_list|)
expr_stmt|;
name|QColor
name|rgba
init|=
name|b
operator|.
name|color
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|colorMode
operator|==
name|QPrinter
operator|::
name|GrayScale
condition|)
block|{
name|qreal
name|gray
init|=
name|qGray
argument_list|(
name|rgba
operator|.
name|rgba
argument_list|()
argument_list|)
operator|/
literal|255.
decl_stmt|;
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|gray
operator|<<
name|gray
operator|<<
name|gray
expr_stmt|;
block|}
else|else
block|{
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|rgba
operator|.
name|redF
argument_list|()
operator|<<
name|rgba
operator|.
name|greenF
argument_list|()
operator|<<
name|rgba
operator|.
name|blueF
argument_list|()
expr_stmt|;
block|}
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"SCN\n"
expr_stmt|;
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|d
operator|->
name|pen
operator|.
name|widthF
argument_list|()
operator|<<
literal|"w "
expr_stmt|;
name|int
name|pdfCapStyle
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|d
operator|->
name|pen
operator|.
name|capStyle
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|FlatCap
case|:
name|pdfCapStyle
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SquareCap
case|:
name|pdfCapStyle
operator|=
literal|2
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|RoundCap
case|:
name|pdfCapStyle
operator|=
literal|1
expr_stmt|;
break|break;
default|default:
break|break;
block|}
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|pdfCapStyle
operator|<<
literal|"J "
expr_stmt|;
name|int
name|pdfJoinStyle
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|d
operator|->
name|pen
operator|.
name|joinStyle
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|MiterJoin
case|:
name|pdfJoinStyle
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|BevelJoin
case|:
name|pdfJoinStyle
operator|=
literal|2
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|RoundJoin
case|:
name|pdfJoinStyle
operator|=
literal|1
expr_stmt|;
break|break;
default|default:
break|break;
block|}
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|pdfJoinStyle
operator|<<
literal|"j "
expr_stmt|;
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|QPdf
operator|::
name|generateDashes
argument_list|(
name|d
operator|->
name|pen
argument_list|)
operator|<<
literal|" 0 d\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|newPage
name|bool
name|QPdfBaseEngine
operator|::
name|newPage
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPdfBaseEngine
argument_list|)
expr_stmt|;
name|setupGraphicsState
argument_list|(
name|DirtyBrush
operator||
name|DirtyPen
operator||
name|DirtyClipPath
argument_list|)
expr_stmt|;
name|QFile
modifier|*
name|outfile
init|=
name|qobject_cast
argument_list|<
name|QFile
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|outDevice
argument_list|)
decl_stmt|;
if|if
condition|(
name|outfile
operator|&&
name|outfile
operator|->
name|error
argument_list|()
operator|!=
name|QFile
operator|::
name|NoError
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|metric
name|int
name|QPdfBaseEngine
operator|::
name|metric
parameter_list|(
name|QPaintDevice
operator|::
name|PaintDeviceMetric
name|metricType
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPdfBaseEngine
argument_list|)
expr_stmt|;
name|int
name|val
decl_stmt|;
name|QRect
name|r
init|=
name|d
operator|->
name|fullPage
condition|?
name|d
operator|->
name|paperRect
argument_list|()
else|:
name|d
operator|->
name|pageRect
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|metricType
condition|)
block|{
case|case
name|QPaintDevice
operator|::
name|PdmWidth
case|:
name|val
operator|=
name|r
operator|.
name|width
argument_list|()
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmHeight
case|:
name|val
operator|=
name|r
operator|.
name|height
argument_list|()
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmDpiX
case|:
case|case
name|QPaintDevice
operator|::
name|PdmDpiY
case|:
name|val
operator|=
name|d
operator|->
name|resolution
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmPhysicalDpiX
case|:
case|case
name|QPaintDevice
operator|::
name|PdmPhysicalDpiY
case|:
name|val
operator|=
literal|1200
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmWidthMM
case|:
name|val
operator|=
name|qRound
argument_list|(
name|r
operator|.
name|width
argument_list|()
operator|*
literal|25.4
operator|/
name|d
operator|->
name|resolution
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmHeightMM
case|:
name|val
operator|=
name|qRound
argument_list|(
name|r
operator|.
name|height
argument_list|()
operator|*
literal|25.4
operator|/
name|d
operator|->
name|resolution
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmNumColors
case|:
name|val
operator|=
name|INT_MAX
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmDepth
case|:
name|val
operator|=
literal|32
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"QPrinter::metric: Invalid metric command"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|val
return|;
block|}
end_function
begin_function
DECL|function|setProperty
name|void
name|QPdfBaseEngine
operator|::
name|setProperty
parameter_list|(
name|PrintEnginePropertyKey
name|key
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfBaseEngine
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|int
argument_list|(
name|key
argument_list|)
condition|)
block|{
case|case
name|PPK_CollateCopies
case|:
name|d
operator|->
name|collate
operator|=
name|value
operator|.
name|toBool
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_ColorMode
case|:
name|d
operator|->
name|colorMode
operator|=
name|QPrinter
operator|::
name|ColorMode
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PPK_Creator
case|:
name|d
operator|->
name|creator
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_DocumentName
case|:
name|d
operator|->
name|title
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_FullPage
case|:
name|d
operator|->
name|fullPage
operator|=
name|value
operator|.
name|toBool
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_CopyCount
case|:
comment|// fallthrough
case|case
name|PPK_NumberOfCopies
case|:
name|d
operator|->
name|copies
operator|=
name|value
operator|.
name|toInt
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_Orientation
case|:
name|d
operator|->
name|orientation
operator|=
name|QPrinter
operator|::
name|Orientation
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PPK_OutputFileName
case|:
name|d
operator|->
name|outputFileName
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_PageOrder
case|:
name|d
operator|->
name|pageOrder
operator|=
name|QPrinter
operator|::
name|PageOrder
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PPK_PaperSize
case|:
name|d
operator|->
name|paperSize
operator|=
name|QPrinter
operator|::
name|PaperSize
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PPK_PaperSource
case|:
name|d
operator|->
name|paperSource
operator|=
name|QPrinter
operator|::
name|PaperSource
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PPK_PrinterName
case|:
name|d
operator|->
name|printerName
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_PrinterProgram
case|:
name|d
operator|->
name|printProgram
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_Resolution
case|:
name|d
operator|->
name|resolution
operator|=
name|value
operator|.
name|toInt
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_SelectionOption
case|:
name|d
operator|->
name|selectionOption
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_FontEmbedding
case|:
name|d
operator|->
name|embedFonts
operator|=
name|value
operator|.
name|toBool
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_Duplex
case|:
name|d
operator|->
name|duplex
operator|=
cast|static_cast
argument_list|<
name|QPrinter
operator|::
name|DuplexMode
argument_list|>
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PPK_CupsPageRect
case|:
name|d
operator|->
name|cupsPageRect
operator|=
name|value
operator|.
name|toRect
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_CupsPaperRect
case|:
name|d
operator|->
name|cupsPaperRect
operator|=
name|value
operator|.
name|toRect
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_CupsOptions
case|:
name|d
operator|->
name|cupsOptions
operator|=
name|value
operator|.
name|toStringList
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_CupsStringPageSize
case|:
name|d
operator|->
name|cupsStringPageSize
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_CustomPaperSize
case|:
name|d
operator|->
name|paperSize
operator|=
name|QPrinter
operator|::
name|Custom
expr_stmt|;
name|d
operator|->
name|customPaperSize
operator|=
name|value
operator|.
name|toSizeF
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_PageMargins
case|:
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|margins
argument_list|(
name|value
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|margins
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|d
operator|->
name|leftMargin
operator|=
name|margins
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toReal
argument_list|()
expr_stmt|;
name|d
operator|->
name|topMargin
operator|=
name|margins
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toReal
argument_list|()
expr_stmt|;
name|d
operator|->
name|rightMargin
operator|=
name|margins
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toReal
argument_list|()
expr_stmt|;
name|d
operator|->
name|bottomMargin
operator|=
name|margins
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|toReal
argument_list|()
expr_stmt|;
name|d
operator|->
name|hasCustomPageMargins
operator|=
literal|true
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
block|}
end_function
begin_function
DECL|function|property
name|QVariant
name|QPdfBaseEngine
operator|::
name|property
parameter_list|(
name|PrintEnginePropertyKey
name|key
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPdfBaseEngine
argument_list|)
expr_stmt|;
name|QVariant
name|ret
decl_stmt|;
switch|switch
condition|(
name|int
argument_list|(
name|key
argument_list|)
condition|)
block|{
case|case
name|PPK_CollateCopies
case|:
name|ret
operator|=
name|d
operator|->
name|collate
expr_stmt|;
break|break;
case|case
name|PPK_ColorMode
case|:
name|ret
operator|=
name|d
operator|->
name|colorMode
expr_stmt|;
break|break;
case|case
name|PPK_Creator
case|:
name|ret
operator|=
name|d
operator|->
name|creator
expr_stmt|;
break|break;
case|case
name|PPK_DocumentName
case|:
name|ret
operator|=
name|d
operator|->
name|title
expr_stmt|;
break|break;
case|case
name|PPK_FullPage
case|:
name|ret
operator|=
name|d
operator|->
name|fullPage
expr_stmt|;
break|break;
case|case
name|PPK_CopyCount
case|:
name|ret
operator|=
name|d
operator|->
name|copies
expr_stmt|;
break|break;
case|case
name|PPK_SupportsMultipleCopies
case|:
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
if|if
condition|(
name|QCUPSSupport
operator|::
name|isAvailable
argument_list|()
condition|)
name|ret
operator|=
literal|true
expr_stmt|;
else|else
endif|#
directive|endif
name|ret
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|PPK_NumberOfCopies
case|:
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
if|if
condition|(
name|QCUPSSupport
operator|::
name|isAvailable
argument_list|()
condition|)
name|ret
operator|=
literal|1
expr_stmt|;
else|else
endif|#
directive|endif
name|ret
operator|=
name|d
operator|->
name|copies
expr_stmt|;
break|break;
case|case
name|PPK_Orientation
case|:
name|ret
operator|=
name|d
operator|->
name|orientation
expr_stmt|;
break|break;
case|case
name|PPK_OutputFileName
case|:
name|ret
operator|=
name|d
operator|->
name|outputFileName
expr_stmt|;
break|break;
case|case
name|PPK_PageOrder
case|:
name|ret
operator|=
name|d
operator|->
name|pageOrder
expr_stmt|;
break|break;
case|case
name|PPK_PaperSize
case|:
name|ret
operator|=
name|d
operator|->
name|paperSize
expr_stmt|;
break|break;
case|case
name|PPK_PaperSource
case|:
name|ret
operator|=
name|d
operator|->
name|paperSource
expr_stmt|;
break|break;
case|case
name|PPK_PrinterName
case|:
name|ret
operator|=
name|d
operator|->
name|printerName
expr_stmt|;
break|break;
case|case
name|PPK_PrinterProgram
case|:
name|ret
operator|=
name|d
operator|->
name|printProgram
expr_stmt|;
break|break;
case|case
name|PPK_Resolution
case|:
name|ret
operator|=
name|d
operator|->
name|resolution
expr_stmt|;
break|break;
case|case
name|PPK_SupportedResolutions
case|:
name|ret
operator|=
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
literal|72
expr_stmt|;
break|break;
case|case
name|PPK_PaperRect
case|:
name|ret
operator|=
name|d
operator|->
name|paperRect
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_PageRect
case|:
name|ret
operator|=
name|d
operator|->
name|pageRect
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_SelectionOption
case|:
name|ret
operator|=
name|d
operator|->
name|selectionOption
expr_stmt|;
break|break;
case|case
name|PPK_FontEmbedding
case|:
name|ret
operator|=
name|d
operator|->
name|embedFonts
expr_stmt|;
break|break;
case|case
name|PPK_Duplex
case|:
name|ret
operator|=
name|d
operator|->
name|duplex
expr_stmt|;
break|break;
case|case
name|PPK_CupsPageRect
case|:
name|ret
operator|=
name|d
operator|->
name|cupsPageRect
expr_stmt|;
break|break;
case|case
name|PPK_CupsPaperRect
case|:
name|ret
operator|=
name|d
operator|->
name|cupsPaperRect
expr_stmt|;
break|break;
case|case
name|PPK_CupsOptions
case|:
name|ret
operator|=
name|d
operator|->
name|cupsOptions
expr_stmt|;
break|break;
case|case
name|PPK_CupsStringPageSize
case|:
name|ret
operator|=
name|d
operator|->
name|cupsStringPageSize
expr_stmt|;
break|break;
case|case
name|PPK_CustomPaperSize
case|:
name|ret
operator|=
name|d
operator|->
name|customPaperSize
expr_stmt|;
break|break;
case|case
name|PPK_PageMargins
case|:
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|margins
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|hasCustomPageMargins
condition|)
block|{
name|margins
operator|<<
name|d
operator|->
name|leftMargin
operator|<<
name|d
operator|->
name|topMargin
operator|<<
name|d
operator|->
name|rightMargin
operator|<<
name|d
operator|->
name|bottomMargin
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|qreal
name|defaultMargin
init|=
literal|10
decl_stmt|;
comment|// ~3.5 mm
name|margins
operator|<<
name|defaultMargin
operator|<<
name|defaultMargin
operator|<<
name|defaultMargin
operator|<<
name|defaultMargin
expr_stmt|;
block|}
name|ret
operator|=
name|margins
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_constructor
DECL|function|QPdfBaseEnginePrivate
name|QPdfBaseEnginePrivate
operator|::
name|QPdfBaseEnginePrivate
parameter_list|(
name|QPrinter
operator|::
name|PrinterMode
name|m
parameter_list|)
member_init_list|:
name|clipEnabled
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|allClipped
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|hasPen
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|hasBrush
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|simplePen
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|useAlphaEngine
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|outDevice
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|fd
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|duplex
argument_list|(
name|QPrinter
operator|::
name|DuplexNone
argument_list|)
member_init_list|,
name|collate
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|fullPage
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|embedFonts
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|copies
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|pageOrder
argument_list|(
name|QPrinter
operator|::
name|FirstPageFirst
argument_list|)
member_init_list|,
name|orientation
argument_list|(
name|QPrinter
operator|::
name|Portrait
argument_list|)
member_init_list|,
name|paperSize
argument_list|(
name|QPrinter
operator|::
name|A4
argument_list|)
member_init_list|,
name|colorMode
argument_list|(
name|QPrinter
operator|::
name|Color
argument_list|)
member_init_list|,
name|paperSource
argument_list|(
name|QPrinter
operator|::
name|Auto
argument_list|)
member_init_list|,
name|hasCustomPageMargins
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|leftMargin
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|topMargin
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|rightMargin
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|bottomMargin
argument_list|(
literal|0
argument_list|)
block|{
name|resolution
operator|=
literal|72
expr_stmt|;
if|if
condition|(
name|m
operator|==
name|QPrinter
operator|::
name|HighResolution
condition|)
name|resolution
operator|=
literal|1200
expr_stmt|;
elseif|else
if|if
condition|(
name|m
operator|==
name|QPrinter
operator|::
name|ScreenResolution
condition|)
name|resolution
operator|=
name|qt_defaultDpi
argument_list|()
expr_stmt|;
name|postscript
operator|=
literal|false
expr_stmt|;
name|currentObject
operator|=
literal|1
expr_stmt|;
name|currentPage
operator|=
literal|0
expr_stmt|;
name|stroker
operator|.
name|stream
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|begin
name|bool
name|QPdfBaseEngine
operator|::
name|begin
parameter_list|(
name|QPaintDevice
modifier|*
name|pdev
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfBaseEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|pdev
operator|=
name|pdev
expr_stmt|;
name|d
operator|->
name|postscript
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|currentObject
operator|=
literal|1
expr_stmt|;
name|d
operator|->
name|currentPage
operator|=
operator|new
name|QPdfPage
expr_stmt|;
name|d
operator|->
name|stroker
operator|.
name|stream
operator|=
name|d
operator|->
name|currentPage
expr_stmt|;
name|d
operator|->
name|opacity
operator|=
literal|1.0
expr_stmt|;
return|return
name|d
operator|->
name|openPrintDevice
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|end
name|bool
name|QPdfBaseEngine
operator|::
name|end
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPdfBaseEngine
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|d
operator|->
name|fonts
argument_list|)
expr_stmt|;
name|d
operator|->
name|fonts
operator|.
name|clear
argument_list|()
expr_stmt|;
operator|delete
name|d
operator|->
name|currentPage
expr_stmt|;
name|d
operator|->
name|currentPage
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|closePrintDevice
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_LPR
end_ifndef
begin_function
DECL|function|closeAllOpenFds
specifier|static
name|void
name|closeAllOpenFds
parameter_list|()
block|{
comment|// hack time... getting the maximum number of open
comment|// files, if possible.  if not we assume it's the
comment|// larger of 256 and the fd we got
name|int
name|i
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|_SC_OPEN_MAX
argument_list|)
name|i
operator|=
operator|(
name|int
operator|)
name|sysconf
argument_list|(
name|_SC_OPEN_MAX
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|_POSIX_OPEN_MAX
argument_list|)
name|i
operator|=
operator|(
name|int
operator|)
name|_POSIX_OPEN_MAX
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|OPEN_MAX
argument_list|)
name|i
operator|=
operator|(
name|int
operator|)
name|OPEN_MAX
expr_stmt|;
else|#
directive|else
name|i
operator|=
literal|256
expr_stmt|;
endif|#
directive|endif
comment|// leave stdin/out/err untouched
while|while
condition|(
operator|--
name|i
operator|>
literal|2
condition|)
name|QT_CLOSE
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|openPrintDevice
name|bool
name|QPdfBaseEnginePrivate
operator|::
name|openPrintDevice
parameter_list|()
block|{
if|if
condition|(
name|outDevice
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|outputFileName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QFile
modifier|*
name|file
init|=
operator|new
name|QFile
argument_list|(
name|outputFileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|->
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Truncate
argument_list|)
condition|)
block|{
operator|delete
name|file
expr_stmt|;
return|return
literal|false
return|;
block|}
name|outDevice
operator|=
name|file
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
block|}
elseif|else
if|if
condition|(
name|QCUPSSupport
operator|::
name|isAvailable
argument_list|()
condition|)
block|{
name|QCUPSSupport
name|cups
decl_stmt|;
name|QPair
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|ret
init|=
name|cups
operator|.
name|tempFd
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|first
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPdfPrinter: Could not open temporary file to print"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|cupsTempFile
operator|=
name|ret
operator|.
name|second
expr_stmt|;
name|outDevice
operator|=
operator|new
name|QFile
argument_list|()
expr_stmt|;
cast|static_cast
argument_list|<
name|QFile
operator|*
argument_list|>
argument_list|(
name|outDevice
argument_list|)
operator|->
name|open
argument_list|(
name|ret
operator|.
name|first
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_LPR
block|}
else|else
block|{
name|QString
name|pr
decl_stmt|;
if|if
condition|(
operator|!
name|printerName
operator|.
name|isEmpty
argument_list|()
condition|)
name|pr
operator|=
name|printerName
expr_stmt|;
name|int
name|fds
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|qt_safe_pipe
argument_list|(
name|fds
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPdfPrinter: Could not open pipe to print"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|pid_t
name|pid
init|=
name|fork
argument_list|()
decl_stmt|;
if|if
condition|(
name|pid
operator|==
literal|0
condition|)
block|{
comment|// child process
comment|// if possible, exit quickly, so the actual lp/lpr
comment|// becomes a child of init, and ::waitpid() is
comment|// guaranteed not to wait.
if|if
condition|(
name|fork
argument_list|()
operator|>
literal|0
condition|)
block|{
name|closeAllOpenFds
argument_list|()
expr_stmt|;
comment|// try to replace this process with "true" - this prevents
comment|// global destructors from being called (that could possibly
comment|// do wrong things to the parent process)
operator|(
name|void
operator|)
name|execlp
argument_list|(
literal|"true"
argument_list|,
literal|"true"
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|execl
argument_list|(
literal|"/bin/true"
argument_list|,
literal|"true"
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|execl
argument_list|(
literal|"/usr/bin/true"
argument_list|,
literal|"true"
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
operator|::
name|_exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|qt_safe_dup2
argument_list|(
name|fds
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|closeAllOpenFds
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|printProgram
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|selectionOption
operator|.
name|isEmpty
argument_list|()
condition|)
name|pr
operator|.
name|prepend
argument_list|(
name|selectionOption
argument_list|)
expr_stmt|;
else|else
name|pr
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
literal|"-P"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|execlp
argument_list|(
name|printProgram
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|printProgram
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|pr
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if no print program has been specified, be smart
comment|// about the option string too.
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|lprhack
decl_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|lphack
decl_stmt|;
name|QByteArray
name|media
decl_stmt|;
if|if
condition|(
operator|!
name|pr
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|selectionOption
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|selectionOption
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStringList
name|list
init|=
name|selectionOption
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|lprhack
operator|.
name|append
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
name|lphack
operator|=
name|lprhack
expr_stmt|;
block|}
else|else
block|{
name|lprhack
operator|.
name|append
argument_list|(
literal|"-P"
argument_list|)
expr_stmt|;
name|lphack
operator|.
name|append
argument_list|(
literal|"-d"
argument_list|)
expr_stmt|;
block|}
name|lprhack
operator|.
name|append
argument_list|(
name|pr
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
name|lphack
operator|.
name|append
argument_list|(
name|pr
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|lphack
operator|.
name|append
argument_list|(
literal|"-s"
argument_list|)
expr_stmt|;
name|char
modifier|*
modifier|*
name|lpargs
init|=
operator|new
name|char
operator|*
index|[
name|lphack
operator|.
name|size
argument_list|()
operator|+
literal|6
index|]
decl_stmt|;
name|char
name|lp
index|[]
init|=
literal|"lp"
decl_stmt|;
name|lpargs
index|[
literal|0
index|]
operator|=
name|lp
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|lphack
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|lpargs
index|[
name|i
operator|+
literal|1
index|]
operator|=
operator|(
name|char
operator|*
operator|)
name|lphack
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|constData
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_OSF
if|if
condition|(
name|QPdf
operator|::
name|paperSizeToString
argument_list|(
name|paperSize
argument_list|)
condition|)
block|{
name|char
name|dash_o
index|[]
init|=
literal|"-o"
decl_stmt|;
name|lpargs
index|[
operator|++
name|i
index|]
operator|=
name|dash_o
expr_stmt|;
name|lpargs
index|[
operator|++
name|i
index|]
operator|=
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|QPdf
operator|::
name|paperSizeToString
argument_list|(
name|paperSize
argument_list|)
argument_list|)
expr_stmt|;
name|lpargs
index|[
operator|++
name|i
index|]
operator|=
name|dash_o
expr_stmt|;
name|media
operator|=
literal|"media="
expr_stmt|;
name|media
operator|+=
name|QPdf
operator|::
name|paperSizeToString
argument_list|(
name|paperSize
argument_list|)
expr_stmt|;
name|lpargs
index|[
operator|++
name|i
index|]
operator|=
name|media
operator|.
name|data
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
name|lpargs
index|[
operator|++
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|char
modifier|*
modifier|*
name|lprargs
init|=
operator|new
name|char
operator|*
index|[
name|lprhack
operator|.
name|size
argument_list|()
operator|+
literal|2
index|]
decl_stmt|;
name|char
name|lpr
index|[]
init|=
literal|"lpr"
decl_stmt|;
name|lprargs
index|[
literal|0
index|]
operator|=
name|lpr
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lprhack
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|lprargs
index|[
name|i
operator|+
literal|1
index|]
operator|=
operator|(
name|char
operator|*
operator|)
name|lprhack
index|[
name|i
index|]
operator|.
name|constData
argument_list|()
expr_stmt|;
name|lprargs
index|[
name|lprhack
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
operator|=
literal|0
expr_stmt|;
operator|(
name|void
operator|)
name|execvp
argument_list|(
literal|"lp"
argument_list|,
name|lpargs
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|execvp
argument_list|(
literal|"lpr"
argument_list|,
name|lprargs
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|execv
argument_list|(
literal|"/bin/lp"
argument_list|,
name|lpargs
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|execv
argument_list|(
literal|"/bin/lpr"
argument_list|,
name|lprargs
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|execv
argument_list|(
literal|"/usr/bin/lp"
argument_list|,
name|lpargs
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|execv
argument_list|(
literal|"/usr/bin/lpr"
argument_list|,
name|lprargs
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|lpargs
expr_stmt|;
operator|delete
index|[]
name|lprargs
expr_stmt|;
block|}
comment|// if we couldn't exec anything, close the fd,
comment|// wait for a second so the parent process (the
comment|// child of the GUI process) has exited.  then
comment|// exit.
name|QT_CLOSE
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
operator|::
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
operator|::
name|_exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// parent process
name|QT_CLOSE
argument_list|(
name|fds
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|fd
operator|=
name|fds
index|[
literal|1
index|]
expr_stmt|;
operator|(
name|void
operator|)
name|qt_safe_waitpid
argument_list|(
name|pid
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|fd
operator|<
literal|0
condition|)
return|return
literal|false
return|;
name|outDevice
operator|=
operator|new
name|QFile
argument_list|()
expr_stmt|;
cast|static_cast
argument_list|<
name|QFile
operator|*
argument_list|>
argument_list|(
name|outDevice
argument_list|)
operator|->
name|open
argument_list|(
name|fd
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|closePrintDevice
name|void
name|QPdfBaseEnginePrivate
operator|::
name|closePrintDevice
parameter_list|()
block|{
if|if
condition|(
operator|!
name|outDevice
condition|)
return|return;
name|outDevice
operator|->
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|fd
operator|>=
literal|0
condition|)
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|_MSC_VER
operator|>=
literal|1400
operator|::
name|_close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
else|#
directive|else
operator|::
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|fd
operator|=
operator|-
literal|1
expr_stmt|;
operator|delete
name|outDevice
expr_stmt|;
name|outDevice
operator|=
literal|0
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
if|if
condition|(
operator|!
name|cupsTempFile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|tempFile
init|=
name|cupsTempFile
decl_stmt|;
name|cupsTempFile
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCUPSSupport
name|cups
decl_stmt|;
comment|// Set up print options.
name|QByteArray
name|prnName
decl_stmt|;
name|QList
argument_list|<
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|>
name|options
decl_stmt|;
name|QVector
argument_list|<
name|cups_option_t
argument_list|>
name|cupsOptStruct
decl_stmt|;
if|if
condition|(
operator|!
name|printerName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|prnName
operator|=
name|printerName
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QPrinterInfo
name|def
init|=
name|QPrinterInfo
operator|::
name|defaultPrinter
argument_list|()
decl_stmt|;
if|if
condition|(
name|def
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not determine printer to print to"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
return|return;
block|}
name|prnName
operator|=
name|def
operator|.
name|printerName
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cupsStringPageSize
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"media"
argument_list|,
name|cupsStringPageSize
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|copies
operator|>
literal|1
condition|)
block|{
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"copies"
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|copies
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|collate
condition|)
block|{
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"Collate"
argument_list|,
literal|"True"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|duplex
operator|!=
name|QPrinter
operator|::
name|DuplexNone
condition|)
block|{
switch|switch
condition|(
name|duplex
condition|)
block|{
case|case
name|QPrinter
operator|::
name|DuplexNone
case|:
break|break;
case|case
name|QPrinter
operator|::
name|DuplexAuto
case|:
if|if
condition|(
name|orientation
operator|==
name|QPrinter
operator|::
name|Portrait
condition|)
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"sides"
argument_list|,
literal|"two-sided-long-edge"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"sides"
argument_list|,
literal|"two-sided-short-edge"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPrinter
operator|::
name|DuplexLongSide
case|:
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"sides"
argument_list|,
literal|"two-sided-long-edge"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPrinter
operator|::
name|DuplexShortSide
case|:
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"sides"
argument_list|,
literal|"two-sided-short-edge"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|QCUPSSupport
operator|::
name|cupsVersion
argument_list|()
operator|>=
literal|10300
operator|&&
name|orientation
operator|==
name|QPrinter
operator|::
name|Landscape
condition|)
block|{
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"landscape"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QStringList
operator|::
name|const_iterator
name|it
init|=
name|cupsOptions
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|cupsOptions
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|,
operator|(
operator|*
operator|(
name|it
operator|+
literal|1
operator|)
operator|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|it
operator|+=
literal|2
expr_stmt|;
block|}
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|options
operator|.
name|size
argument_list|()
condition|;
operator|++
name|c
control|)
block|{
name|cups_option_t
name|opt
decl_stmt|;
name|opt
operator|.
name|name
operator|=
name|options
index|[
name|c
index|]
operator|.
name|first
operator|.
name|data
argument_list|()
expr_stmt|;
name|opt
operator|.
name|value
operator|=
name|options
index|[
name|c
index|]
operator|.
name|second
operator|.
name|data
argument_list|()
expr_stmt|;
name|cupsOptStruct
operator|.
name|append
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
comment|// Print the file.
name|cups_option_t
modifier|*
name|optPtr
init|=
name|cupsOptStruct
operator|.
name|size
argument_list|()
condition|?
operator|&
name|cupsOptStruct
operator|.
name|first
argument_list|()
else|:
literal|0
decl_stmt|;
name|cups
operator|.
name|printFile
argument_list|(
name|prnName
operator|.
name|constData
argument_list|()
argument_list|,
name|tempFile
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|title
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|cupsOptStruct
operator|.
name|size
argument_list|()
argument_list|,
name|optPtr
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_destructor
DECL|function|~QPdfBaseEnginePrivate
name|QPdfBaseEnginePrivate
operator|::
name|~
name|QPdfBaseEnginePrivate
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|fonts
argument_list|)
expr_stmt|;
operator|delete
name|currentPage
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|drawTextItem
name|void
name|QPdfBaseEnginePrivate
operator|::
name|drawTextItem
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QTextItemInt
modifier|&
name|ti
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QPdfBaseEngine
argument_list|)
expr_stmt|;
name|QFontEngine
modifier|*
name|fe
init|=
name|ti
operator|.
name|fontEngine
decl_stmt|;
name|QFontEngine
operator|::
name|FaceId
name|face_id
init|=
name|fe
operator|->
name|faceId
argument_list|()
decl_stmt|;
name|bool
name|noEmbed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|face_id
operator|.
name|filename
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
operator|!
name|postscript
operator|&&
operator|(
operator|(
name|fe
operator|->
name|fsType
operator|&
literal|0x200
operator|)
comment|/* bitmap embedding only */
operator|||
operator|(
name|fe
operator|->
name|fsType
operator|==
literal|2
operator|)
comment|/* no embedding allowed */
operator|)
operator|)
condition|)
block|{
operator|*
name|currentPage
operator|<<
literal|"Q\n"
expr_stmt|;
name|q
operator|->
name|QPaintEngine
operator|::
name|drawTextItem
argument_list|(
name|p
argument_list|,
name|ti
argument_list|)
expr_stmt|;
operator|*
name|currentPage
operator|<<
literal|"q\n"
expr_stmt|;
if|if
condition|(
name|face_id
operator|.
name|filename
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|noEmbed
operator|=
literal|true
expr_stmt|;
block|}
name|QFontSubset
modifier|*
name|font
init|=
name|fonts
operator|.
name|value
argument_list|(
name|face_id
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|font
condition|)
block|{
name|font
operator|=
operator|new
name|QFontSubset
argument_list|(
name|fe
argument_list|,
name|requestObject
argument_list|()
argument_list|)
expr_stmt|;
name|font
operator|->
name|noEmbed
operator|=
name|noEmbed
expr_stmt|;
block|}
name|fonts
operator|.
name|insert
argument_list|(
name|face_id
argument_list|,
name|font
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|currentPage
operator|->
name|fonts
operator|.
name|contains
argument_list|(
name|font
operator|->
name|object_id
argument_list|)
condition|)
name|currentPage
operator|->
name|fonts
operator|.
name|append
argument_list|(
name|font
operator|->
name|object_id
argument_list|)
expr_stmt|;
name|qreal
name|size
init|=
name|ti
operator|.
name|fontEngine
operator|->
name|fontDef
operator|.
name|pixelSize
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_WIN
if|if
condition|(
name|ti
operator|.
name|fontEngine
operator|->
name|type
argument_list|()
operator|==
name|QFontEngine
operator|::
name|Win
condition|)
block|{
name|QFontEngineWin
modifier|*
name|fe
init|=
cast|static_cast
argument_list|<
name|QFontEngineWin
operator|*
argument_list|>
argument_list|(
name|ti
operator|.
name|fontEngine
argument_list|)
decl_stmt|;
name|size
operator|=
name|fe
operator|->
name|tm
operator|.
name|tmHeight
expr_stmt|;
block|}
endif|#
directive|endif
name|QVarLengthArray
argument_list|<
name|glyph_t
argument_list|>
name|glyphs
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|QFixedPoint
argument_list|>
name|positions
decl_stmt|;
name|QTransform
name|m
init|=
name|QTransform
operator|::
name|fromTranslate
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|ti
operator|.
name|fontEngine
operator|->
name|getGlyphPositions
argument_list|(
name|ti
operator|.
name|glyphs
argument_list|,
name|m
argument_list|,
name|ti
operator|.
name|flags
argument_list|,
name|glyphs
argument_list|,
name|positions
argument_list|)
expr_stmt|;
if|if
condition|(
name|glyphs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|int
name|synthesized
init|=
name|ti
operator|.
name|fontEngine
operator|->
name|synthesized
argument_list|()
decl_stmt|;
name|qreal
name|stretch
init|=
name|synthesized
operator|&
name|QFontEngine
operator|::
name|SynthesizedStretch
condition|?
name|ti
operator|.
name|fontEngine
operator|->
name|fontDef
operator|.
name|stretch
operator|/
literal|100.
else|:
literal|1.
decl_stmt|;
operator|*
name|currentPage
operator|<<
literal|"BT\n"
operator|<<
literal|"/F"
operator|<<
name|font
operator|->
name|object_id
operator|<<
name|size
operator|<<
literal|"Tf "
operator|<<
name|stretch
operator|<<
operator|(
name|synthesized
operator|&
name|QFontEngine
operator|::
name|SynthesizedItalic
condition|?
literal|"0 .3 -1 0 0 Tm\n"
else|:
literal|"0 0 -1 0 0 Tm\n"
operator|)
expr_stmt|;
if|#
directive|if
literal|0
comment|// #### implement actual text for complex languages
block|const unsigned short *logClusters = ti.logClusters;     int pos = 0;     do {         int end = pos + 1;         while (end< ti.num_chars&& logClusters[end] == logClusters[pos])             ++end;         *currentPage<< "/Span<< /ActualText<FEFF";         for (int i = pos; i< end; ++i) {             s<< toHex((ushort)ti.chars[i].unicode(), buf);         }         *currentPage<< ">>>\n"             "BDC\n"             "<";         int ge = end == ti.num_chars ? ti.num_glyphs : logClusters[end];         for (int gs = logClusters[pos]; gs< ge; ++gs)             *currentPage<< toHex((ushort)ti.glyphs[gs].glyph, buf);         *currentPage<< "> Tj\n"             "EMC\n";         pos = end;     } while (pos< ti.num_chars);
else|#
directive|else
name|qreal
name|last_x
init|=
literal|0.
decl_stmt|;
name|qreal
name|last_y
init|=
literal|0.
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|x
init|=
name|positions
index|[
name|i
index|]
operator|.
name|x
operator|.
name|toReal
argument_list|()
decl_stmt|;
name|qreal
name|y
init|=
name|positions
index|[
name|i
index|]
operator|.
name|y
operator|.
name|toReal
argument_list|()
decl_stmt|;
if|if
condition|(
name|synthesized
operator|&
name|QFontEngine
operator|::
name|SynthesizedItalic
condition|)
name|x
operator|+=
literal|.3
operator|*
name|y
expr_stmt|;
name|x
operator|/=
name|stretch
expr_stmt|;
name|char
name|buf
index|[
literal|5
index|]
decl_stmt|;
name|int
name|g
init|=
name|font
operator|->
name|addGlyph
argument_list|(
name|glyphs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
operator|*
name|currentPage
operator|<<
name|x
operator|-
name|last_x
operator|<<
name|last_y
operator|-
name|y
operator|<<
literal|"Td<"
operator|<<
name|QPdf
operator|::
name|toHex
argument_list|(
operator|(
name|ushort
operator|)
name|g
argument_list|,
name|buf
argument_list|)
operator|<<
literal|"> Tj\n"
expr_stmt|;
name|last_x
operator|=
name|x
expr_stmt|;
name|last_y
operator|=
name|y
expr_stmt|;
block|}
if|if
condition|(
name|synthesized
operator|&
name|QFontEngine
operator|::
name|SynthesizedBold
condition|)
block|{
operator|*
name|currentPage
operator|<<
name|stretch
operator|<<
operator|(
name|synthesized
operator|&
name|QFontEngine
operator|::
name|SynthesizedItalic
condition|?
literal|"0 .3 -1 0 0 Tm\n"
else|:
literal|"0 0 -1 0 0 Tm\n"
operator|)
expr_stmt|;
operator|*
name|currentPage
operator|<<
literal|"/Span<< /ActualText<>>> BDC\n"
expr_stmt|;
name|last_x
operator|=
literal|0.5
operator|*
name|fe
operator|->
name|lineThickness
argument_list|()
operator|.
name|toReal
argument_list|()
expr_stmt|;
name|last_y
operator|=
literal|0.
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|x
init|=
name|positions
index|[
name|i
index|]
operator|.
name|x
operator|.
name|toReal
argument_list|()
decl_stmt|;
name|qreal
name|y
init|=
name|positions
index|[
name|i
index|]
operator|.
name|y
operator|.
name|toReal
argument_list|()
decl_stmt|;
if|if
condition|(
name|synthesized
operator|&
name|QFontEngine
operator|::
name|SynthesizedItalic
condition|)
name|x
operator|+=
literal|.3
operator|*
name|y
expr_stmt|;
name|x
operator|/=
name|stretch
expr_stmt|;
name|char
name|buf
index|[
literal|5
index|]
decl_stmt|;
name|int
name|g
init|=
name|font
operator|->
name|addGlyph
argument_list|(
name|glyphs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
operator|*
name|currentPage
operator|<<
name|x
operator|-
name|last_x
operator|<<
name|last_y
operator|-
name|y
operator|<<
literal|"Td<"
operator|<<
name|QPdf
operator|::
name|toHex
argument_list|(
operator|(
name|ushort
operator|)
name|g
argument_list|,
name|buf
argument_list|)
operator|<<
literal|"> Tj\n"
expr_stmt|;
name|last_x
operator|=
name|x
expr_stmt|;
name|last_y
operator|=
name|y
expr_stmt|;
block|}
operator|*
name|currentPage
operator|<<
literal|"EMC\n"
expr_stmt|;
block|}
endif|#
directive|endif
operator|*
name|currentPage
operator|<<
literal|"ET\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paperRect
name|QRect
name|QPdfBaseEnginePrivate
operator|::
name|paperRect
parameter_list|()
specifier|const
block|{
name|int
name|w
decl_stmt|;
name|int
name|h
decl_stmt|;
if|if
condition|(
name|paperSize
operator|==
name|QPrinter
operator|::
name|Custom
condition|)
block|{
name|w
operator|=
name|qRound
argument_list|(
name|customPaperSize
operator|.
name|width
argument_list|()
operator|*
name|resolution
operator|/
literal|72.
argument_list|)
expr_stmt|;
name|h
operator|=
name|qRound
argument_list|(
name|customPaperSize
operator|.
name|height
argument_list|()
operator|*
name|resolution
operator|/
literal|72.
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
if|if
condition|(
name|QCUPSSupport
operator|::
name|isAvailable
argument_list|()
operator|&&
operator|!
name|cupsPaperRect
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QRect
name|r
init|=
name|cupsPaperRect
decl_stmt|;
name|w
operator|=
name|r
operator|.
name|width
argument_list|()
expr_stmt|;
name|h
operator|=
name|r
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|QPdf
operator|::
name|PaperSize
name|s
init|=
name|QPdf
operator|::
name|paperSize
argument_list|(
name|paperSize
argument_list|)
decl_stmt|;
name|w
operator|=
name|s
operator|.
name|width
expr_stmt|;
name|h
operator|=
name|s
operator|.
name|height
expr_stmt|;
block|}
name|w
operator|=
name|qRound
argument_list|(
name|w
operator|*
name|resolution
operator|/
literal|72.
argument_list|)
expr_stmt|;
name|h
operator|=
name|qRound
argument_list|(
name|h
operator|*
name|resolution
operator|/
literal|72.
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|orientation
operator|==
name|QPrinter
operator|::
name|Portrait
condition|)
return|return
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
return|;
else|else
return|return
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|h
argument_list|,
name|w
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|pageRect
name|QRect
name|QPdfBaseEnginePrivate
operator|::
name|pageRect
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|fullPage
condition|)
return|return
name|paperRect
argument_list|()
return|;
name|QRect
name|r
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
if|if
condition|(
operator|!
name|hasCustomPageMargins
operator|&&
name|QCUPSSupport
operator|::
name|isAvailable
argument_list|()
operator|&&
operator|!
name|cupsPageRect
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|r
operator|=
name|cupsPageRect
expr_stmt|;
if|if
condition|(
name|r
operator|==
name|cupsPaperRect
condition|)
block|{
comment|// if cups doesn't define any margins, give it at least approx 3.5 mm
name|r
operator|=
name|QRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
name|r
operator|.
name|width
argument_list|()
operator|-
literal|20
argument_list|,
name|r
operator|.
name|height
argument_list|()
operator|-
literal|20
argument_list|)
expr_stmt|;
block|}
block|}
else|else
endif|#
directive|endif
block|{
name|QPdf
operator|::
name|PaperSize
name|s
decl_stmt|;
if|if
condition|(
name|paperSize
operator|==
name|QPrinter
operator|::
name|Custom
condition|)
block|{
name|s
operator|.
name|width
operator|=
name|qRound
argument_list|(
name|customPaperSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|height
operator|=
name|qRound
argument_list|(
name|customPaperSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
name|QPdf
operator|::
name|paperSize
argument_list|(
name|paperSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasCustomPageMargins
condition|)
name|r
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|s
operator|.
name|width
argument_list|,
name|s
operator|.
name|height
argument_list|)
expr_stmt|;
else|else
name|r
operator|=
name|QRect
argument_list|(
literal|72
operator|/
literal|3
argument_list|,
literal|72
operator|/
literal|3
argument_list|,
name|s
operator|.
name|width
operator|-
literal|2
operator|*
literal|72
operator|/
literal|3
argument_list|,
name|s
operator|.
name|height
operator|-
literal|2
operator|*
literal|72
operator|/
literal|3
argument_list|)
expr_stmt|;
block|}
name|int
name|x
init|=
name|qRound
argument_list|(
name|r
operator|.
name|left
argument_list|()
operator|*
name|resolution
operator|/
literal|72.
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|qRound
argument_list|(
name|r
operator|.
name|top
argument_list|()
operator|*
name|resolution
operator|/
literal|72.
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|qRound
argument_list|(
name|r
operator|.
name|width
argument_list|()
operator|*
name|resolution
operator|/
literal|72.
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|qRound
argument_list|(
name|r
operator|.
name|height
argument_list|()
operator|*
name|resolution
operator|/
literal|72.
argument_list|)
decl_stmt|;
if|if
condition|(
name|orientation
operator|==
name|QPrinter
operator|::
name|Portrait
condition|)
name|r
operator|=
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
else|else
name|r
operator|=
name|QRect
argument_list|(
name|y
argument_list|,
name|x
argument_list|,
name|h
argument_list|,
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasCustomPageMargins
condition|)
block|{
name|r
operator|.
name|adjust
argument_list|(
name|qRound
argument_list|(
name|leftMargin
operator|*
operator|(
name|resolution
operator|/
literal|72.
operator|)
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|topMargin
operator|*
operator|(
name|resolution
operator|/
literal|72.
operator|)
argument_list|)
argument_list|,
operator|-
name|qRound
argument_list|(
name|rightMargin
operator|*
operator|(
name|resolution
operator|/
literal|72.
operator|)
argument_list|)
argument_list|,
operator|-
name|qRound
argument_list|(
name|bottomMargin
operator|*
operator|(
name|resolution
operator|/
literal|72.
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
