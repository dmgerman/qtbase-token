begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qpdf_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PDF
end_ifndef
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qtemporaryfile.h>
end_include
begin_include
include|#
directive|include
file|<private/qmath_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpainter_p.h>
end_include
begin_include
include|#
directive|include
file|<qnumeric.h>
end_include
begin_include
include|#
directive|include
file|"private/qfont_p.h"
end_include
begin_include
include|#
directive|include
file|<qimagewriter.h>
end_include
begin_include
include|#
directive|include
file|"qbuffer.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qdatetime.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_COMPRESS
end_ifndef
begin_include
include|#
directive|include
file|<zlib.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_COMPRESS
end_ifdef
begin_decl_stmt
DECL|variable|do_compress
specifier|static
specifier|const
name|bool
name|do_compress
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_else
else|#
directive|else
end_else
begin_decl_stmt
DECL|variable|do_compress
specifier|static
specifier|const
name|bool
name|do_compress
init|=
literal|true
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// might be helpful for smooth transforms of images
end_comment
begin_comment
comment|// Can't use it though, as gs generates completely wrong images if this is true.
end_comment
begin_decl_stmt
DECL|variable|interpolateImages
specifier|static
specifier|const
name|bool
name|interpolateImages
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|qt_pdf_decide_features
specifier|inline
name|QPaintEngine
operator|::
name|PaintEngineFeatures
name|qt_pdf_decide_features
parameter_list|()
block|{
name|QPaintEngine
operator|::
name|PaintEngineFeatures
name|f
init|=
name|QPaintEngine
operator|::
name|AllFeatures
decl_stmt|;
name|f
operator|&=
operator|~
operator|(
name|QPaintEngine
operator|::
name|PorterDuff
operator||
name|QPaintEngine
operator|::
name|PerspectiveTransform
operator||
name|QPaintEngine
operator|::
name|ObjectBoundingModeGradients
operator||
name|QPaintEngine
operator|::
name|ConicalGradientFill
operator|)
expr_stmt|;
return|return
name|f
return|;
block|}
end_function
begin_comment
comment|/* also adds a space at the end of the number */
end_comment
begin_function
DECL|function|qt_real_to_string
specifier|const
name|char
modifier|*
name|qt_real_to_string
parameter_list|(
name|qreal
name|val
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|ret
init|=
name|buf
decl_stmt|;
if|if
condition|(
name|qIsNaN
argument_list|(
name|val
argument_list|)
condition|)
block|{
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
literal|'0'
expr_stmt|;
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
literal|' '
expr_stmt|;
operator|*
name|buf
operator|=
literal|0
expr_stmt|;
return|return
name|ret
return|;
block|}
if|if
condition|(
name|val
operator|<
literal|0
condition|)
block|{
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
literal|'-'
expr_stmt|;
name|val
operator|=
operator|-
name|val
expr_stmt|;
block|}
name|unsigned
name|int
name|ival
init|=
operator|(
name|unsigned
name|int
operator|)
name|val
decl_stmt|;
name|qreal
name|frac
init|=
name|val
operator|-
operator|(
name|qreal
operator|)
name|ival
decl_stmt|;
name|int
name|ifrac
init|=
call|(
name|int
call|)
argument_list|(
name|frac
operator|*
literal|1000000000
argument_list|)
decl_stmt|;
if|if
condition|(
name|ifrac
operator|==
literal|1000000000
condition|)
block|{
operator|++
name|ival
expr_stmt|;
name|ifrac
operator|=
literal|0
expr_stmt|;
block|}
name|char
name|output
index|[
literal|256
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|ival
condition|)
block|{
name|output
index|[
name|i
index|]
operator|=
literal|'0'
operator|+
operator|(
name|ival
operator|%
literal|10
operator|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
name|ival
operator|/=
literal|10
expr_stmt|;
block|}
name|int
name|fact
init|=
literal|100000000
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
literal|'0'
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
name|i
condition|)
block|{
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
name|output
index|[
operator|--
name|i
index|]
expr_stmt|;
name|fact
operator|/=
literal|10
expr_stmt|;
name|ifrac
operator|/=
literal|10
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ifrac
condition|)
block|{
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
literal|'.'
expr_stmt|;
while|while
condition|(
name|fact
condition|)
block|{
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
literal|'0'
operator|+
operator|(
operator|(
name|ifrac
operator|/
name|fact
operator|)
operator|%
literal|10
operator|)
expr_stmt|;
name|fact
operator|/=
literal|10
expr_stmt|;
block|}
block|}
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
literal|' '
expr_stmt|;
operator|*
name|buf
operator|=
literal|0
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|qt_int_to_string
specifier|const
name|char
modifier|*
name|qt_int_to_string
parameter_list|(
name|int
name|val
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|ret
init|=
name|buf
decl_stmt|;
if|if
condition|(
name|val
operator|<
literal|0
condition|)
block|{
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
literal|'-'
expr_stmt|;
name|val
operator|=
operator|-
name|val
expr_stmt|;
block|}
name|char
name|output
index|[
literal|256
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|val
condition|)
block|{
name|output
index|[
name|i
index|]
operator|=
literal|'0'
operator|+
operator|(
name|val
operator|%
literal|10
operator|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
name|val
operator|/=
literal|10
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
literal|'0'
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
name|i
condition|)
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
name|output
index|[
operator|--
name|i
index|]
expr_stmt|;
block|}
operator|*
operator|(
name|buf
operator|++
operator|)
operator|=
literal|' '
expr_stmt|;
operator|*
name|buf
operator|=
literal|0
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_namespace
DECL|namespace|QPdf
namespace|namespace
name|QPdf
block|{
DECL|function|ByteStream
name|ByteStream
operator|::
name|ByteStream
parameter_list|(
name|QByteArray
modifier|*
name|byteArray
parameter_list|,
name|bool
name|fileBacking
parameter_list|)
member_init_list|:
name|dev
argument_list|(
operator|new
name|QBuffer
argument_list|(
name|byteArray
argument_list|)
argument_list|)
member_init_list|,
name|fileBackingEnabled
argument_list|(
name|fileBacking
argument_list|)
member_init_list|,
name|fileBackingActive
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|handleDirty
argument_list|(
literal|false
argument_list|)
block|{
name|dev
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
operator||
name|QIODevice
operator|::
name|Append
argument_list|)
expr_stmt|;
block|}
DECL|function|ByteStream
name|ByteStream
operator|::
name|ByteStream
parameter_list|(
name|bool
name|fileBacking
parameter_list|)
member_init_list|:
name|dev
argument_list|(
operator|new
name|QBuffer
argument_list|(
operator|&
name|ba
argument_list|)
argument_list|)
member_init_list|,
name|fileBackingEnabled
argument_list|(
name|fileBacking
argument_list|)
member_init_list|,
name|fileBackingActive
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|handleDirty
argument_list|(
literal|false
argument_list|)
block|{
name|dev
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
block|}
DECL|function|~ByteStream
name|ByteStream
operator|::
name|~
name|ByteStream
parameter_list|()
block|{
operator|delete
name|dev
expr_stmt|;
block|}
DECL|function|operator <<
name|ByteStream
modifier|&
name|ByteStream
operator|::
name|operator
name|<<
parameter_list|(
name|char
name|chr
parameter_list|)
block|{
if|if
condition|(
name|handleDirty
condition|)
name|prepareBuffer
argument_list|()
expr_stmt|;
name|dev
operator|->
name|write
argument_list|(
operator|&
name|chr
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|operator <<
name|ByteStream
modifier|&
name|ByteStream
operator|::
name|operator
name|<<
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|)
block|{
if|if
condition|(
name|handleDirty
condition|)
name|prepareBuffer
argument_list|()
expr_stmt|;
name|dev
operator|->
name|write
argument_list|(
name|str
argument_list|,
name|strlen
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|operator <<
name|ByteStream
modifier|&
name|ByteStream
operator|::
name|operator
name|<<
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|str
parameter_list|)
block|{
if|if
condition|(
name|handleDirty
condition|)
name|prepareBuffer
argument_list|()
expr_stmt|;
name|dev
operator|->
name|write
argument_list|(
name|str
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|operator <<
name|ByteStream
modifier|&
name|ByteStream
operator|::
name|operator
name|<<
parameter_list|(
specifier|const
name|ByteStream
modifier|&
name|src
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|src
operator|.
name|dev
operator|->
name|isSequential
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|handleDirty
condition|)
name|prepareBuffer
argument_list|()
expr_stmt|;
comment|// We do play nice here, even though it looks ugly.
comment|// We save the position and restore it afterwards.
name|ByteStream
modifier|&
name|s
init|=
cast|const_cast
argument_list|<
name|ByteStream
operator|&
argument_list|>
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|qint64
name|pos
init|=
name|s
operator|.
name|dev
operator|->
name|pos
argument_list|()
decl_stmt|;
name|s
operator|.
name|dev
operator|->
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|s
operator|.
name|dev
operator|->
name|atEnd
argument_list|()
condition|)
block|{
name|QByteArray
name|buf
init|=
name|s
operator|.
name|dev
operator|->
name|read
argument_list|(
name|chunkSize
argument_list|()
argument_list|)
decl_stmt|;
name|dev
operator|->
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|dev
operator|->
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|operator <<
name|ByteStream
modifier|&
name|ByteStream
operator|::
name|operator
name|<<
parameter_list|(
name|qreal
name|val
parameter_list|)
block|{
name|char
name|buf
index|[
literal|256
index|]
decl_stmt|;
name|qt_real_to_string
argument_list|(
name|val
argument_list|,
name|buf
argument_list|)
expr_stmt|;
operator|*
name|this
operator|<<
name|buf
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|operator <<
name|ByteStream
modifier|&
name|ByteStream
operator|::
name|operator
name|<<
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|char
name|buf
index|[
literal|256
index|]
decl_stmt|;
name|qt_int_to_string
argument_list|(
name|val
argument_list|,
name|buf
argument_list|)
expr_stmt|;
operator|*
name|this
operator|<<
name|buf
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|operator <<
name|ByteStream
modifier|&
name|ByteStream
operator|::
name|operator
name|<<
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|)
block|{
name|char
name|buf
index|[
literal|256
index|]
decl_stmt|;
name|qt_real_to_string
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|buf
argument_list|)
expr_stmt|;
operator|*
name|this
operator|<<
name|buf
expr_stmt|;
name|qt_real_to_string
argument_list|(
name|p
operator|.
name|y
argument_list|()
argument_list|,
name|buf
argument_list|)
expr_stmt|;
operator|*
name|this
operator|<<
name|buf
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|stream
name|QIODevice
modifier|*
name|ByteStream
operator|::
name|stream
parameter_list|()
block|{
name|dev
operator|->
name|reset
argument_list|()
expr_stmt|;
name|handleDirty
operator|=
literal|true
expr_stmt|;
return|return
name|dev
return|;
block|}
DECL|function|clear
name|void
name|ByteStream
operator|::
name|clear
parameter_list|()
block|{
name|dev
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
expr_stmt|;
block|}
DECL|function|constructor_helper
name|void
name|ByteStream
operator|::
name|constructor_helper
parameter_list|(
name|QByteArray
modifier|*
name|ba
parameter_list|)
block|{
operator|delete
name|dev
expr_stmt|;
name|dev
operator|=
operator|new
name|QBuffer
argument_list|(
name|ba
argument_list|)
expr_stmt|;
name|dev
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
block|}
DECL|function|prepareBuffer
name|void
name|ByteStream
operator|::
name|prepareBuffer
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|dev
operator|->
name|isSequential
argument_list|()
argument_list|)
expr_stmt|;
name|qint64
name|size
init|=
name|dev
operator|->
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileBackingEnabled
operator|&&
operator|!
name|fileBackingActive
operator|&&
name|size
operator|>
name|maxMemorySize
argument_list|()
condition|)
block|{
comment|// Switch to file backing.
name|QTemporaryFile
modifier|*
name|newFile
init|=
operator|new
name|QTemporaryFile
decl_stmt|;
name|newFile
operator|->
name|open
argument_list|()
expr_stmt|;
name|dev
operator|->
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|dev
operator|->
name|atEnd
argument_list|()
condition|)
block|{
name|QByteArray
name|buf
init|=
name|dev
operator|->
name|read
argument_list|(
name|chunkSize
argument_list|()
argument_list|)
decl_stmt|;
name|newFile
operator|->
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
operator|delete
name|dev
expr_stmt|;
name|dev
operator|=
name|newFile
expr_stmt|;
name|ba
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fileBackingActive
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|dev
operator|->
name|pos
argument_list|()
operator|!=
name|size
condition|)
block|{
name|dev
operator|->
name|seek
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|handleDirty
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
end_namespace
begin_define
DECL|macro|QT_PATH_ELEMENT
define|#
directive|define
name|QT_PATH_ELEMENT
parameter_list|(
name|elm
parameter_list|)
end_define
begin_function
DECL|function|generatePath
name|QByteArray
name|QPdf
operator|::
name|generatePath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|PathFlags
name|flags
parameter_list|)
block|{
name|QByteArray
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|elementCount
argument_list|()
condition|)
return|return
name|result
return|;
name|ByteStream
name|s
argument_list|(
operator|&
name|result
argument_list|)
decl_stmt|;
name|int
name|start
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPainterPath
operator|::
name|Element
modifier|&
name|elm
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|elm
operator|.
name|type
condition|)
block|{
case|case
name|QPainterPath
operator|::
name|MoveToElement
case|:
if|if
condition|(
name|start
operator|>=
literal|0
operator|&&
name|path
operator|.
name|elementAt
argument_list|(
name|start
argument_list|)
operator|.
name|x
operator|==
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|x
operator|&&
name|path
operator|.
name|elementAt
argument_list|(
name|start
argument_list|)
operator|.
name|y
operator|==
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|y
condition|)
name|s
operator|<<
literal|"h\n"
expr_stmt|;
name|s
operator|<<
name|matrix
operator|.
name|map
argument_list|(
name|QPointF
argument_list|(
name|elm
operator|.
name|x
argument_list|,
name|elm
operator|.
name|y
argument_list|)
argument_list|)
operator|<<
literal|"m\n"
expr_stmt|;
name|start
operator|=
name|i
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|LineToElement
case|:
name|s
operator|<<
name|matrix
operator|.
name|map
argument_list|(
name|QPointF
argument_list|(
name|elm
operator|.
name|x
argument_list|,
name|elm
operator|.
name|y
argument_list|)
argument_list|)
operator|<<
literal|"l\n"
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToElement
case|:
name|Q_ASSERT
argument_list|(
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|type
operator|==
name|QPainterPath
operator|::
name|CurveToDataElement
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
operator|.
name|type
operator|==
name|QPainterPath
operator|::
name|CurveToDataElement
argument_list|)
expr_stmt|;
name|s
operator|<<
name|matrix
operator|.
name|map
argument_list|(
name|QPointF
argument_list|(
name|elm
operator|.
name|x
argument_list|,
name|elm
operator|.
name|y
argument_list|)
argument_list|)
operator|<<
name|matrix
operator|.
name|map
argument_list|(
name|QPointF
argument_list|(
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|x
argument_list|,
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|y
argument_list|)
argument_list|)
operator|<<
name|matrix
operator|.
name|map
argument_list|(
name|QPointF
argument_list|(
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
operator|.
name|x
argument_list|,
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
operator|.
name|y
argument_list|)
argument_list|)
operator|<<
literal|"c\n"
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
break|break;
default|default:
name|qFatal
argument_list|(
literal|"QPdf::generatePath(), unhandled type: %d"
argument_list|,
name|elm
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|start
operator|>=
literal|0
operator|&&
name|path
operator|.
name|elementAt
argument_list|(
name|start
argument_list|)
operator|.
name|x
operator|==
name|path
operator|.
name|elementAt
argument_list|(
name|path
operator|.
name|elementCount
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|x
operator|&&
name|path
operator|.
name|elementAt
argument_list|(
name|start
argument_list|)
operator|.
name|y
operator|==
name|path
operator|.
name|elementAt
argument_list|(
name|path
operator|.
name|elementCount
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|y
condition|)
name|s
operator|<<
literal|"h\n"
expr_stmt|;
name|Qt
operator|::
name|FillRule
name|fillRule
init|=
name|path
operator|.
name|fillRule
argument_list|()
decl_stmt|;
specifier|const
name|char
modifier|*
name|op
init|=
literal|""
decl_stmt|;
switch|switch
condition|(
name|flags
condition|)
block|{
case|case
name|ClipPath
case|:
name|op
operator|=
operator|(
name|fillRule
operator|==
name|Qt
operator|::
name|WindingFill
operator|)
condition|?
literal|"W n\n"
else|:
literal|"W* n\n"
expr_stmt|;
break|break;
case|case
name|FillPath
case|:
name|op
operator|=
operator|(
name|fillRule
operator|==
name|Qt
operator|::
name|WindingFill
operator|)
condition|?
literal|"f\n"
else|:
literal|"f*\n"
expr_stmt|;
break|break;
case|case
name|StrokePath
case|:
name|op
operator|=
literal|"S\n"
expr_stmt|;
break|break;
case|case
name|FillAndStrokePath
case|:
name|op
operator|=
operator|(
name|fillRule
operator|==
name|Qt
operator|::
name|WindingFill
operator|)
condition|?
literal|"B\n"
else|:
literal|"B*\n"
expr_stmt|;
break|break;
block|}
name|s
operator|<<
name|op
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|generateMatrix
name|QByteArray
name|QPdf
operator|::
name|generateMatrix
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|)
block|{
name|QByteArray
name|result
decl_stmt|;
name|ByteStream
name|s
argument_list|(
operator|&
name|result
argument_list|)
decl_stmt|;
name|s
operator|<<
name|matrix
operator|.
name|m11
argument_list|()
operator|<<
name|matrix
operator|.
name|m12
argument_list|()
operator|<<
name|matrix
operator|.
name|m21
argument_list|()
operator|<<
name|matrix
operator|.
name|m22
argument_list|()
operator|<<
name|matrix
operator|.
name|dx
argument_list|()
operator|<<
name|matrix
operator|.
name|dy
argument_list|()
operator|<<
literal|"cm\n"
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|generateDashes
name|QByteArray
name|QPdf
operator|::
name|generateDashes
parameter_list|(
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
name|QByteArray
name|result
decl_stmt|;
name|ByteStream
name|s
argument_list|(
operator|&
name|result
argument_list|)
decl_stmt|;
name|s
operator|<<
literal|'['
expr_stmt|;
name|QVector
argument_list|<
name|qreal
argument_list|>
name|dasharray
init|=
name|pen
operator|.
name|dashPattern
argument_list|()
decl_stmt|;
name|qreal
name|w
init|=
name|pen
operator|.
name|widthF
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
operator|<
literal|0.001
condition|)
name|w
operator|=
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dasharray
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|dw
init|=
name|dasharray
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|*
name|w
decl_stmt|;
if|if
condition|(
name|dw
operator|<
literal|0.0001
condition|)
name|dw
operator|=
literal|0.0001
expr_stmt|;
name|s
operator|<<
name|dw
expr_stmt|;
block|}
name|s
operator|<<
literal|']'
expr_stmt|;
comment|//qDebug()<< "dasharray: pen has"<< dasharray;
comment|//qDebug()<< "  => "<< result;
return|return
name|result
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|pattern_for_brush
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|pattern_for_brush
index|[]
init|=
block|{
literal|0
block|,
comment|// NoBrush
literal|0
block|,
comment|// SolidPattern
literal|"0 J\n"
literal|"6 w\n"
literal|"[] 0 d\n"
literal|"4 0 m\n"
literal|"4 8 l\n"
literal|"0 4 m\n"
literal|"8 4 l\n"
literal|"S\n"
block|,
comment|// Dense1Pattern
literal|"0 J\n"
literal|"2 w\n"
literal|"[6 2] 1 d\n"
literal|"0 0 m\n"
literal|"0 8 l\n"
literal|"8 0 m\n"
literal|"8 8 l\n"
literal|"S\n"
literal|"[] 0 d\n"
literal|"2 0 m\n"
literal|"2 8 l\n"
literal|"6 0 m\n"
literal|"6 8 l\n"
literal|"S\n"
literal|"[6 2] -3 d\n"
literal|"4 0 m\n"
literal|"4 8 l\n"
literal|"S\n"
block|,
comment|// Dense2Pattern
literal|"0 J\n"
literal|"2 w\n"
literal|"[6 2] 1 d\n"
literal|"0 0 m\n"
literal|"0 8 l\n"
literal|"8 0 m\n"
literal|"8 8 l\n"
literal|"S\n"
literal|"[2 2] -1 d\n"
literal|"2 0 m\n"
literal|"2 8 l\n"
literal|"6 0 m\n"
literal|"6 8 l\n"
literal|"S\n"
literal|"[6 2] -3 d\n"
literal|"4 0 m\n"
literal|"4 8 l\n"
literal|"S\n"
block|,
comment|// Dense3Pattern
literal|"0 J\n"
literal|"2 w\n"
literal|"[2 2] 1 d\n"
literal|"0 0 m\n"
literal|"0 8 l\n"
literal|"8 0 m\n"
literal|"8 8 l\n"
literal|"S\n"
literal|"[2 2] -1 d\n"
literal|"2 0 m\n"
literal|"2 8 l\n"
literal|"6 0 m\n"
literal|"6 8 l\n"
literal|"S\n"
literal|"[2 2] 1 d\n"
literal|"4 0 m\n"
literal|"4 8 l\n"
literal|"S\n"
block|,
comment|// Dense4Pattern
literal|"0 J\n"
literal|"2 w\n"
literal|"[2 6] -1 d\n"
literal|"0 0 m\n"
literal|"0 8 l\n"
literal|"8 0 m\n"
literal|"8 8 l\n"
literal|"S\n"
literal|"[2 2] 1 d\n"
literal|"2 0 m\n"
literal|"2 8 l\n"
literal|"6 0 m\n"
literal|"6 8 l\n"
literal|"S\n"
literal|"[2 6] 3 d\n"
literal|"4 0 m\n"
literal|"4 8 l\n"
literal|"S\n"
block|,
comment|// Dense5Pattern
literal|"0 J\n"
literal|"2 w\n"
literal|"[2 6] -1 d\n"
literal|"0 0 m\n"
literal|"0 8 l\n"
literal|"8 0 m\n"
literal|"8 8 l\n"
literal|"S\n"
literal|"[2 6] 3 d\n"
literal|"4 0 m\n"
literal|"4 8 l\n"
literal|"S\n"
block|,
comment|// Dense6Pattern
literal|"0 J\n"
literal|"2 w\n"
literal|"[2 6] -1 d\n"
literal|"0 0 m\n"
literal|"0 8 l\n"
literal|"8 0 m\n"
literal|"8 8 l\n"
literal|"S\n"
block|,
comment|// Dense7Pattern
literal|"1 w\n"
literal|"0 4 m\n"
literal|"8 4 l\n"
literal|"S\n"
block|,
comment|// HorPattern
literal|"1 w\n"
literal|"4 0 m\n"
literal|"4 8 l\n"
literal|"S\n"
block|,
comment|// VerPattern
literal|"1 w\n"
literal|"4 0 m\n"
literal|"4 8 l\n"
literal|"0 4 m\n"
literal|"8 4 l\n"
literal|"S\n"
block|,
comment|// CrossPattern
literal|"1 w\n"
literal|"-1 5 m\n"
literal|"5 -1 l\n"
literal|"3 9 m\n"
literal|"9 3 l\n"
literal|"S\n"
block|,
comment|// BDiagPattern
literal|"1 w\n"
literal|"-1 3 m\n"
literal|"5 9 l\n"
literal|"3 -1 m\n"
literal|"9 5 l\n"
literal|"S\n"
block|,
comment|// FDiagPattern
literal|"1 w\n"
literal|"-1 3 m\n"
literal|"5 9 l\n"
literal|"3 -1 m\n"
literal|"9 5 l\n"
literal|"-1 5 m\n"
literal|"5 -1 l\n"
literal|"3 9 m\n"
literal|"9 3 l\n"
literal|"S\n"
block|,
comment|// DiagCrossPattern
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|patternForBrush
name|QByteArray
name|QPdf
operator|::
name|patternForBrush
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|b
parameter_list|)
block|{
name|int
name|style
init|=
name|b
operator|.
name|style
argument_list|()
decl_stmt|;
if|if
condition|(
name|style
operator|>
name|Qt
operator|::
name|DiagCrossPattern
condition|)
return|return
name|QByteArray
argument_list|()
return|;
return|return
name|pattern_for_brush
index|[
name|style
index|]
return|;
block|}
end_function
begin_function
DECL|function|moveToHook
specifier|static
name|void
name|moveToHook
parameter_list|(
name|qfixed
name|x
parameter_list|,
name|qfixed
name|y
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
name|QPdf
operator|::
name|Stroker
modifier|*
name|t
init|=
operator|(
name|QPdf
operator|::
name|Stroker
operator|*
operator|)
name|data
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|->
name|first
condition|)
operator|*
name|t
operator|->
name|stream
operator|<<
literal|"h\n"
expr_stmt|;
if|if
condition|(
operator|!
name|t
operator|->
name|cosmeticPen
condition|)
name|t
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
operator|&
name|x
argument_list|,
operator|&
name|y
argument_list|)
expr_stmt|;
operator|*
name|t
operator|->
name|stream
operator|<<
name|x
operator|<<
name|y
operator|<<
literal|"m\n"
expr_stmt|;
name|t
operator|->
name|first
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lineToHook
specifier|static
name|void
name|lineToHook
parameter_list|(
name|qfixed
name|x
parameter_list|,
name|qfixed
name|y
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
name|QPdf
operator|::
name|Stroker
modifier|*
name|t
init|=
operator|(
name|QPdf
operator|::
name|Stroker
operator|*
operator|)
name|data
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|->
name|cosmeticPen
condition|)
name|t
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
operator|&
name|x
argument_list|,
operator|&
name|y
argument_list|)
expr_stmt|;
operator|*
name|t
operator|->
name|stream
operator|<<
name|x
operator|<<
name|y
operator|<<
literal|"l\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cubicToHook
specifier|static
name|void
name|cubicToHook
parameter_list|(
name|qfixed
name|c1x
parameter_list|,
name|qfixed
name|c1y
parameter_list|,
name|qfixed
name|c2x
parameter_list|,
name|qfixed
name|c2y
parameter_list|,
name|qfixed
name|ex
parameter_list|,
name|qfixed
name|ey
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
name|QPdf
operator|::
name|Stroker
modifier|*
name|t
init|=
operator|(
name|QPdf
operator|::
name|Stroker
operator|*
operator|)
name|data
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|->
name|cosmeticPen
condition|)
block|{
name|t
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|c1x
argument_list|,
name|c1y
argument_list|,
operator|&
name|c1x
argument_list|,
operator|&
name|c1y
argument_list|)
expr_stmt|;
name|t
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|c2x
argument_list|,
name|c2y
argument_list|,
operator|&
name|c2x
argument_list|,
operator|&
name|c2y
argument_list|)
expr_stmt|;
name|t
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|ex
argument_list|,
name|ey
argument_list|,
operator|&
name|ex
argument_list|,
operator|&
name|ey
argument_list|)
expr_stmt|;
block|}
operator|*
name|t
operator|->
name|stream
operator|<<
name|c1x
operator|<<
name|c1y
operator|<<
name|c2x
operator|<<
name|c2y
operator|<<
name|ex
operator|<<
name|ey
operator|<<
literal|"c\n"
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|Stroker
name|QPdf
operator|::
name|Stroker
operator|::
name|Stroker
parameter_list|()
member_init_list|:
name|stream
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|first
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|dashStroker
argument_list|(
operator|&
name|basicStroker
argument_list|)
block|{
name|stroker
operator|=
operator|&
name|basicStroker
expr_stmt|;
name|basicStroker
operator|.
name|setMoveToHook
argument_list|(
name|moveToHook
argument_list|)
expr_stmt|;
name|basicStroker
operator|.
name|setLineToHook
argument_list|(
name|lineToHook
argument_list|)
expr_stmt|;
name|basicStroker
operator|.
name|setCubicToHook
argument_list|(
name|cubicToHook
argument_list|)
expr_stmt|;
name|cosmeticPen
operator|=
literal|true
expr_stmt|;
name|basicStroker
operator|.
name|setStrokeWidth
argument_list|(
literal|.1
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|setPen
name|void
name|QPdf
operator|::
name|Stroker
operator|::
name|setPen
parameter_list|(
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|,
name|QPainter
operator|::
name|RenderHints
name|hints
parameter_list|)
block|{
if|if
condition|(
name|pen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoPen
condition|)
block|{
name|stroker
operator|=
literal|0
expr_stmt|;
return|return;
block|}
name|qreal
name|w
init|=
name|pen
operator|.
name|widthF
argument_list|()
decl_stmt|;
name|bool
name|zeroWidth
init|=
name|w
operator|<
literal|0.0001
decl_stmt|;
name|cosmeticPen
operator|=
name|qt_pen_is_cosmetic
argument_list|(
name|pen
argument_list|,
name|hints
argument_list|)
expr_stmt|;
if|if
condition|(
name|zeroWidth
condition|)
name|w
operator|=
literal|.1
expr_stmt|;
name|basicStroker
operator|.
name|setStrokeWidth
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|basicStroker
operator|.
name|setCapStyle
argument_list|(
name|pen
operator|.
name|capStyle
argument_list|()
argument_list|)
expr_stmt|;
name|basicStroker
operator|.
name|setJoinStyle
argument_list|(
name|pen
operator|.
name|joinStyle
argument_list|()
argument_list|)
expr_stmt|;
name|basicStroker
operator|.
name|setMiterLimit
argument_list|(
name|pen
operator|.
name|miterLimit
argument_list|()
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|qreal
argument_list|>
name|dashpattern
init|=
name|pen
operator|.
name|dashPattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|zeroWidth
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dashpattern
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|dashpattern
index|[
name|i
index|]
operator|*=
literal|10.
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dashpattern
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dashStroker
operator|.
name|setDashPattern
argument_list|(
name|dashpattern
argument_list|)
expr_stmt|;
name|dashStroker
operator|.
name|setDashOffset
argument_list|(
name|pen
operator|.
name|dashOffset
argument_list|()
argument_list|)
expr_stmt|;
name|stroker
operator|=
operator|&
name|dashStroker
expr_stmt|;
block|}
else|else
block|{
name|stroker
operator|=
operator|&
name|basicStroker
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|strokePath
name|void
name|QPdf
operator|::
name|Stroker
operator|::
name|strokePath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|stroker
condition|)
return|return;
name|first
operator|=
literal|true
expr_stmt|;
name|stroker
operator|->
name|strokePath
argument_list|(
name|path
argument_list|,
name|this
argument_list|,
name|cosmeticPen
condition|?
name|matrix
else|:
name|QTransform
argument_list|()
argument_list|)
expr_stmt|;
operator|*
name|stream
operator|<<
literal|"h f\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ascii85Encode
name|QByteArray
name|QPdf
operator|::
name|ascii85Encode
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|input
parameter_list|)
block|{
name|int
name|isize
init|=
name|input
operator|.
name|size
argument_list|()
operator|/
literal|4
operator|*
literal|4
decl_stmt|;
name|QByteArray
name|output
decl_stmt|;
name|output
operator|.
name|resize
argument_list|(
name|input
operator|.
name|size
argument_list|()
operator|*
literal|5
operator|/
literal|4
operator|+
literal|7
argument_list|)
expr_stmt|;
name|char
modifier|*
name|out
init|=
name|output
operator|.
name|data
argument_list|()
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|in
init|=
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|input
operator|.
name|constData
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|isize
condition|;
name|i
operator|+=
literal|4
control|)
block|{
name|uint
name|val
init|=
operator|(
operator|(
operator|(
name|uint
operator|)
name|in
index|[
name|i
index|]
operator|)
operator|<<
literal|24
operator|)
operator|+
operator|(
operator|(
operator|(
name|uint
operator|)
name|in
index|[
name|i
operator|+
literal|1
index|]
operator|)
operator|<<
literal|16
operator|)
operator|+
operator|(
operator|(
operator|(
name|uint
operator|)
name|in
index|[
name|i
operator|+
literal|2
index|]
operator|)
operator|<<
literal|8
operator|)
operator|+
operator|(
name|uint
operator|)
name|in
index|[
name|i
operator|+
literal|3
index|]
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|0
condition|)
block|{
operator|*
name|out
operator|=
literal|'z'
expr_stmt|;
operator|++
name|out
expr_stmt|;
block|}
else|else
block|{
name|char
name|base
index|[
literal|5
index|]
decl_stmt|;
name|base
index|[
literal|4
index|]
operator|=
name|val
operator|%
literal|85
expr_stmt|;
name|val
operator|/=
literal|85
expr_stmt|;
name|base
index|[
literal|3
index|]
operator|=
name|val
operator|%
literal|85
expr_stmt|;
name|val
operator|/=
literal|85
expr_stmt|;
name|base
index|[
literal|2
index|]
operator|=
name|val
operator|%
literal|85
expr_stmt|;
name|val
operator|/=
literal|85
expr_stmt|;
name|base
index|[
literal|1
index|]
operator|=
name|val
operator|%
literal|85
expr_stmt|;
name|val
operator|/=
literal|85
expr_stmt|;
name|base
index|[
literal|0
index|]
operator|=
name|val
operator|%
literal|85
expr_stmt|;
operator|*
operator|(
name|out
operator|++
operator|)
operator|=
name|base
index|[
literal|0
index|]
operator|+
literal|'!'
expr_stmt|;
operator|*
operator|(
name|out
operator|++
operator|)
operator|=
name|base
index|[
literal|1
index|]
operator|+
literal|'!'
expr_stmt|;
operator|*
operator|(
name|out
operator|++
operator|)
operator|=
name|base
index|[
literal|2
index|]
operator|+
literal|'!'
expr_stmt|;
operator|*
operator|(
name|out
operator|++
operator|)
operator|=
name|base
index|[
literal|3
index|]
operator|+
literal|'!'
expr_stmt|;
operator|*
operator|(
name|out
operator|++
operator|)
operator|=
name|base
index|[
literal|4
index|]
operator|+
literal|'!'
expr_stmt|;
block|}
block|}
comment|//write the last few bytes
name|int
name|remaining
init|=
name|input
operator|.
name|size
argument_list|()
operator|-
name|isize
decl_stmt|;
if|if
condition|(
name|remaining
condition|)
block|{
name|uint
name|val
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|isize
init|;
name|i
operator|<
name|input
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|val
operator|=
operator|(
name|val
operator|<<
literal|8
operator|)
operator|+
name|in
index|[
name|i
index|]
expr_stmt|;
name|val
operator|<<=
literal|8
operator|*
operator|(
literal|4
operator|-
name|remaining
operator|)
expr_stmt|;
name|char
name|base
index|[
literal|5
index|]
decl_stmt|;
name|base
index|[
literal|4
index|]
operator|=
name|val
operator|%
literal|85
expr_stmt|;
name|val
operator|/=
literal|85
expr_stmt|;
name|base
index|[
literal|3
index|]
operator|=
name|val
operator|%
literal|85
expr_stmt|;
name|val
operator|/=
literal|85
expr_stmt|;
name|base
index|[
literal|2
index|]
operator|=
name|val
operator|%
literal|85
expr_stmt|;
name|val
operator|/=
literal|85
expr_stmt|;
name|base
index|[
literal|1
index|]
operator|=
name|val
operator|%
literal|85
expr_stmt|;
name|val
operator|/=
literal|85
expr_stmt|;
name|base
index|[
literal|0
index|]
operator|=
name|val
operator|%
literal|85
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|remaining
operator|+
literal|1
condition|;
operator|++
name|i
control|)
operator|*
operator|(
name|out
operator|++
operator|)
operator|=
name|base
index|[
name|i
index|]
operator|+
literal|'!'
expr_stmt|;
block|}
operator|*
operator|(
name|out
operator|++
operator|)
operator|=
literal|'~'
expr_stmt|;
operator|*
operator|(
name|out
operator|++
operator|)
operator|=
literal|'>'
expr_stmt|;
name|output
operator|.
name|resize
argument_list|(
name|out
operator|-
name|output
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
end_function
begin_function
DECL|function|toHex
specifier|const
name|char
modifier|*
name|QPdf
operator|::
name|toHex
parameter_list|(
name|ushort
name|u
parameter_list|,
name|char
modifier|*
name|buffer
parameter_list|)
block|{
name|int
name|i
init|=
literal|3
decl_stmt|;
while|while
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|ushort
name|hex
init|=
operator|(
name|u
operator|&
literal|0x000f
operator|)
decl_stmt|;
if|if
condition|(
name|hex
operator|<
literal|0x0a
condition|)
name|buffer
index|[
name|i
index|]
operator|=
literal|'0'
operator|+
name|hex
expr_stmt|;
else|else
name|buffer
index|[
name|i
index|]
operator|=
literal|'A'
operator|+
operator|(
name|hex
operator|-
literal|0x0a
operator|)
expr_stmt|;
name|u
operator|=
name|u
operator|>>
literal|4
expr_stmt|;
name|i
operator|--
expr_stmt|;
block|}
name|buffer
index|[
literal|4
index|]
operator|=
literal|'\0'
expr_stmt|;
return|return
name|buffer
return|;
block|}
end_function
begin_function
DECL|function|toHex
specifier|const
name|char
modifier|*
name|QPdf
operator|::
name|toHex
parameter_list|(
name|uchar
name|u
parameter_list|,
name|char
modifier|*
name|buffer
parameter_list|)
block|{
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|ushort
name|hex
init|=
operator|(
name|u
operator|&
literal|0x000f
operator|)
decl_stmt|;
if|if
condition|(
name|hex
operator|<
literal|0x0a
condition|)
name|buffer
index|[
name|i
index|]
operator|=
literal|'0'
operator|+
name|hex
expr_stmt|;
else|else
name|buffer
index|[
name|i
index|]
operator|=
literal|'A'
operator|+
operator|(
name|hex
operator|-
literal|0x0a
operator|)
expr_stmt|;
name|u
operator|=
name|u
operator|>>
literal|4
expr_stmt|;
name|i
operator|--
expr_stmt|;
block|}
name|buffer
index|[
literal|2
index|]
operator|=
literal|'\0'
expr_stmt|;
return|return
name|buffer
return|;
block|}
end_function
begin_constructor
DECL|function|QPdfPage
name|QPdfPage
operator|::
name|QPdfPage
parameter_list|()
member_init_list|:
name|QPdf
operator|::
name|ByteStream
argument_list|(
literal|true
argument_list|)
comment|// Enable file backing
block|{ }
end_constructor
begin_function
DECL|function|streamImage
name|void
name|QPdfPage
operator|::
name|streamImage
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|object
parameter_list|)
block|{
operator|*
name|this
operator|<<
name|w
operator|<<
literal|"0 0 "
operator|<<
operator|-
name|h
operator|<<
literal|"0 "
operator|<<
name|h
operator|<<
literal|"cm /Im"
operator|<<
name|object
operator|<<
literal|" Do\n"
expr_stmt|;
if|if
condition|(
operator|!
name|images
operator|.
name|contains
argument_list|(
name|object
argument_list|)
condition|)
name|images
operator|.
name|append
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QPdfEngine
name|QPdfEngine
operator|::
name|QPdfEngine
parameter_list|(
name|QPdfEnginePrivate
modifier|&
name|dd
parameter_list|)
member_init_list|:
name|QPaintEngine
argument_list|(
name|dd
argument_list|,
name|qt_pdf_decide_features
argument_list|()
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|QPdfEngine
name|QPdfEngine
operator|::
name|QPdfEngine
parameter_list|()
member_init_list|:
name|QPaintEngine
argument_list|(
operator|*
operator|new
name|QPdfEnginePrivate
argument_list|()
argument_list|,
name|qt_pdf_decide_features
argument_list|()
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|setOutputFilename
name|void
name|QPdfEngine
operator|::
name|setOutputFilename
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|outputFileName
operator|=
name|filename
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPoints
name|void
name|QPdfEngine
operator|::
name|drawPoints
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|)
block|{
if|if
condition|(
operator|!
name|points
condition|)
return|return;
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
name|QPainterPath
name|p
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|pointCount
condition|;
operator|++
name|i
control|)
block|{
name|p
operator|.
name|moveTo
argument_list|(
name|points
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|p
operator|.
name|lineTo
argument_list|(
name|points
index|[
name|i
index|]
operator|+
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bool
name|hadBrush
init|=
name|d
operator|->
name|hasBrush
decl_stmt|;
name|d
operator|->
name|hasBrush
operator|=
literal|false
expr_stmt|;
name|drawPath
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|d
operator|->
name|hasBrush
operator|=
name|hadBrush
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawLines
name|void
name|QPdfEngine
operator|::
name|drawLines
parameter_list|(
specifier|const
name|QLineF
modifier|*
name|lines
parameter_list|,
name|int
name|lineCount
parameter_list|)
block|{
if|if
condition|(
operator|!
name|lines
condition|)
return|return;
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
name|QPainterPath
name|p
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|lineCount
condition|;
operator|++
name|i
control|)
block|{
name|p
operator|.
name|moveTo
argument_list|(
name|lines
index|[
name|i
index|]
operator|.
name|p1
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|lineTo
argument_list|(
name|lines
index|[
name|i
index|]
operator|.
name|p2
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|bool
name|hadBrush
init|=
name|d
operator|->
name|hasBrush
decl_stmt|;
name|d
operator|->
name|hasBrush
operator|=
literal|false
expr_stmt|;
name|drawPath
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|d
operator|->
name|hasBrush
operator|=
name|hadBrush
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawRects
name|void
name|QPdfEngine
operator|::
name|drawRects
parameter_list|(
specifier|const
name|QRectF
modifier|*
name|rects
parameter_list|,
name|int
name|rectCount
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rects
condition|)
return|return;
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|clipEnabled
operator|&&
name|d
operator|->
name|allClipped
condition|)
return|return;
if|if
condition|(
operator|!
name|d
operator|->
name|hasPen
operator|&&
operator|!
name|d
operator|->
name|hasBrush
condition|)
return|return;
name|QBrush
name|penBrush
init|=
name|d
operator|->
name|pen
operator|.
name|brush
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|simplePen
operator|||
operator|!
name|d
operator|->
name|hasPen
condition|)
block|{
comment|// draw strokes natively in this case for better output
if|if
condition|(
operator|!
name|d
operator|->
name|simplePen
operator|&&
operator|!
name|d
operator|->
name|stroker
operator|.
name|matrix
operator|.
name|isIdentity
argument_list|()
condition|)
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"q\n"
operator|<<
name|QPdf
operator|::
name|generateMatrix
argument_list|(
name|d
operator|->
name|stroker
operator|.
name|matrix
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rectCount
condition|;
operator|++
name|i
control|)
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|rects
index|[
name|i
index|]
operator|.
name|x
argument_list|()
operator|<<
name|rects
index|[
name|i
index|]
operator|.
name|y
argument_list|()
operator|<<
name|rects
index|[
name|i
index|]
operator|.
name|width
argument_list|()
operator|<<
name|rects
index|[
name|i
index|]
operator|.
name|height
argument_list|()
operator|<<
literal|"re\n"
expr_stmt|;
operator|*
name|d
operator|->
name|currentPage
operator|<<
operator|(
name|d
operator|->
name|hasPen
condition|?
operator|(
name|d
operator|->
name|hasBrush
condition|?
literal|"B\n"
else|:
literal|"S\n"
operator|)
else|:
literal|"f\n"
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|simplePen
operator|&&
operator|!
name|d
operator|->
name|stroker
operator|.
name|matrix
operator|.
name|isIdentity
argument_list|()
condition|)
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"Q\n"
expr_stmt|;
block|}
else|else
block|{
name|QPainterPath
name|p
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|rectCount
condition|;
operator|++
name|i
control|)
name|p
operator|.
name|addRect
argument_list|(
name|rects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|drawPath
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawPolygon
name|void
name|QPdfEngine
operator|::
name|drawPolygon
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|PolygonDrawMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|points
operator|||
operator|!
name|pointCount
condition|)
return|return;
name|bool
name|hb
init|=
name|d
operator|->
name|hasBrush
decl_stmt|;
name|QPainterPath
name|p
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|OddEvenMode
case|:
name|p
operator|.
name|setFillRule
argument_list|(
name|Qt
operator|::
name|OddEvenFill
argument_list|)
expr_stmt|;
break|break;
case|case
name|ConvexMode
case|:
case|case
name|WindingMode
case|:
name|p
operator|.
name|setFillRule
argument_list|(
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
break|break;
case|case
name|PolylineMode
case|:
name|d
operator|->
name|hasBrush
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|p
operator|.
name|moveTo
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pointCount
condition|;
operator|++
name|i
control|)
name|p
operator|.
name|lineTo
argument_list|(
name|points
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|!=
name|PolylineMode
condition|)
name|p
operator|.
name|closeSubpath
argument_list|()
expr_stmt|;
name|drawPath
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|d
operator|->
name|hasBrush
operator|=
name|hb
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPath
name|void
name|QPdfEngine
operator|::
name|drawPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|p
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|clipEnabled
operator|&&
name|d
operator|->
name|allClipped
condition|)
return|return;
if|if
condition|(
operator|!
name|d
operator|->
name|hasPen
operator|&&
operator|!
name|d
operator|->
name|hasBrush
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|simplePen
condition|)
block|{
comment|// draw strokes natively in this case for better output
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|QPdf
operator|::
name|generatePath
argument_list|(
name|p
argument_list|,
name|QTransform
argument_list|()
argument_list|,
name|d
operator|->
name|hasBrush
condition|?
name|QPdf
operator|::
name|FillAndStrokePath
else|:
name|QPdf
operator|::
name|StrokePath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|d
operator|->
name|hasBrush
condition|)
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|QPdf
operator|::
name|generatePath
argument_list|(
name|p
argument_list|,
name|d
operator|->
name|stroker
operator|.
name|matrix
argument_list|,
name|QPdf
operator|::
name|FillPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hasPen
condition|)
block|{
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"q\n"
expr_stmt|;
name|QBrush
name|b
init|=
name|d
operator|->
name|brush
decl_stmt|;
name|d
operator|->
name|brush
operator|=
name|d
operator|->
name|pen
operator|.
name|brush
argument_list|()
expr_stmt|;
name|setBrush
argument_list|()
expr_stmt|;
name|d
operator|->
name|stroker
operator|.
name|strokePath
argument_list|(
name|p
argument_list|)
expr_stmt|;
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"Q\n"
expr_stmt|;
name|d
operator|->
name|brush
operator|=
name|b
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|drawPixmap
name|void
name|QPdfEngine
operator|::
name|drawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rectangle
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|)
block|{
if|if
condition|(
name|sr
operator|.
name|isEmpty
argument_list|()
operator|||
name|rectangle
operator|.
name|isEmpty
argument_list|()
operator|||
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
name|QBrush
name|b
init|=
name|d
operator|->
name|brush
decl_stmt|;
name|QRect
name|sourceRect
init|=
name|sr
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|QPixmap
name|pm
init|=
name|sourceRect
operator|!=
name|pixmap
operator|.
name|rect
argument_list|()
condition|?
name|pixmap
operator|.
name|copy
argument_list|(
name|sourceRect
argument_list|)
else|:
name|pixmap
decl_stmt|;
name|QImage
name|image
init|=
name|pm
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|bool
name|bitmap
init|=
literal|true
decl_stmt|;
specifier|const
name|int
name|object
init|=
name|d
operator|->
name|addImage
argument_list|(
name|image
argument_list|,
operator|&
name|bitmap
argument_list|,
name|pm
operator|.
name|cacheKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|<
literal|0
condition|)
return|return;
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"q\n/GSa gs\n"
expr_stmt|;
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|QPdf
operator|::
name|generateMatrix
argument_list|(
name|QTransform
argument_list|(
name|rectangle
operator|.
name|width
argument_list|()
operator|/
name|sr
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rectangle
operator|.
name|height
argument_list|()
operator|/
name|sr
operator|.
name|height
argument_list|()
argument_list|,
name|rectangle
operator|.
name|x
argument_list|()
argument_list|,
name|rectangle
operator|.
name|y
argument_list|()
argument_list|)
operator|*
operator|(
name|d
operator|->
name|simplePen
condition|?
name|QTransform
argument_list|()
else|:
name|d
operator|->
name|stroker
operator|.
name|matrix
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|bitmap
condition|)
block|{
comment|// set current pen as d->brush
name|d
operator|->
name|brush
operator|=
name|d
operator|->
name|pen
operator|.
name|brush
argument_list|()
expr_stmt|;
block|}
name|setBrush
argument_list|()
expr_stmt|;
name|d
operator|->
name|currentPage
operator|->
name|streamImage
argument_list|(
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|,
name|object
argument_list|)
expr_stmt|;
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"Q\n"
expr_stmt|;
name|d
operator|->
name|brush
operator|=
name|b
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawImage
name|void
name|QPdfEngine
operator|::
name|drawImage
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rectangle
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
if|if
condition|(
name|sr
operator|.
name|isEmpty
argument_list|()
operator|||
name|rectangle
operator|.
name|isEmpty
argument_list|()
operator|||
name|image
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
name|QRect
name|sourceRect
init|=
name|sr
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|QImage
name|im
init|=
name|sourceRect
operator|!=
name|image
operator|.
name|rect
argument_list|()
condition|?
name|image
operator|.
name|copy
argument_list|(
name|sourceRect
argument_list|)
else|:
name|image
decl_stmt|;
name|bool
name|bitmap
init|=
literal|true
decl_stmt|;
specifier|const
name|int
name|object
init|=
name|d
operator|->
name|addImage
argument_list|(
name|im
argument_list|,
operator|&
name|bitmap
argument_list|,
name|im
operator|.
name|cacheKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|<
literal|0
condition|)
return|return;
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"q\n/GSa gs\n"
expr_stmt|;
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|QPdf
operator|::
name|generateMatrix
argument_list|(
name|QTransform
argument_list|(
name|rectangle
operator|.
name|width
argument_list|()
operator|/
name|sr
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rectangle
operator|.
name|height
argument_list|()
operator|/
name|sr
operator|.
name|height
argument_list|()
argument_list|,
name|rectangle
operator|.
name|x
argument_list|()
argument_list|,
name|rectangle
operator|.
name|y
argument_list|()
argument_list|)
operator|*
operator|(
name|d
operator|->
name|simplePen
condition|?
name|QTransform
argument_list|()
else|:
name|d
operator|->
name|stroker
operator|.
name|matrix
operator|)
argument_list|)
expr_stmt|;
name|setBrush
argument_list|()
expr_stmt|;
name|d
operator|->
name|currentPage
operator|->
name|streamImage
argument_list|(
name|im
operator|.
name|width
argument_list|()
argument_list|,
name|im
operator|.
name|height
argument_list|()
argument_list|,
name|object
argument_list|)
expr_stmt|;
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"Q\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawTiledPixmap
name|void
name|QPdfEngine
operator|::
name|drawTiledPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rectangle
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|point
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
name|bool
name|bitmap
init|=
operator|(
name|pixmap
operator|.
name|depth
argument_list|()
operator|==
literal|1
operator|)
decl_stmt|;
name|QBrush
name|b
init|=
name|d
operator|->
name|brush
decl_stmt|;
name|QPointF
name|bo
init|=
name|d
operator|->
name|brushOrigin
decl_stmt|;
name|bool
name|hp
init|=
name|d
operator|->
name|hasPen
decl_stmt|;
name|d
operator|->
name|hasPen
operator|=
literal|false
expr_stmt|;
name|bool
name|hb
init|=
name|d
operator|->
name|hasBrush
decl_stmt|;
name|d
operator|->
name|hasBrush
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|brush
operator|=
name|QBrush
argument_list|(
name|pixmap
argument_list|)
expr_stmt|;
if|if
condition|(
name|bitmap
condition|)
comment|// #### fix bitmap case where we have a brush pen
name|d
operator|->
name|brush
operator|.
name|setColor
argument_list|(
name|d
operator|->
name|pen
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|brushOrigin
operator|=
operator|-
name|point
expr_stmt|;
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"q\n"
expr_stmt|;
name|setBrush
argument_list|()
expr_stmt|;
name|drawRects
argument_list|(
operator|&
name|rectangle
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"Q\n"
expr_stmt|;
name|d
operator|->
name|hasPen
operator|=
name|hp
expr_stmt|;
name|d
operator|->
name|hasBrush
operator|=
name|hb
expr_stmt|;
name|d
operator|->
name|brush
operator|=
name|b
expr_stmt|;
name|d
operator|->
name|brushOrigin
operator|=
name|bo
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawTextItem
name|void
name|QPdfEngine
operator|::
name|drawTextItem
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QTextItem
modifier|&
name|textItem
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|hasPen
operator|||
operator|(
name|d
operator|->
name|clipEnabled
operator|&&
name|d
operator|->
name|allClipped
operator|)
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|stroker
operator|.
name|matrix
operator|.
name|type
argument_list|()
operator|>=
name|QTransform
operator|::
name|TxProject
condition|)
block|{
name|QPaintEngine
operator|::
name|drawTextItem
argument_list|(
name|p
argument_list|,
name|textItem
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"q\n"
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|simplePen
condition|)
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|QPdf
operator|::
name|generateMatrix
argument_list|(
name|d
operator|->
name|stroker
operator|.
name|matrix
argument_list|)
expr_stmt|;
name|bool
name|hp
init|=
name|d
operator|->
name|hasPen
decl_stmt|;
name|d
operator|->
name|hasPen
operator|=
literal|false
expr_stmt|;
name|QBrush
name|b
init|=
name|d
operator|->
name|brush
decl_stmt|;
name|d
operator|->
name|brush
operator|=
name|d
operator|->
name|pen
operator|.
name|brush
argument_list|()
expr_stmt|;
name|setBrush
argument_list|()
expr_stmt|;
specifier|const
name|QTextItemInt
modifier|&
name|ti
init|=
cast|static_cast
argument_list|<
specifier|const
name|QTextItemInt
operator|&
argument_list|>
argument_list|(
name|textItem
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|ti
operator|.
name|fontEngine
operator|->
name|type
argument_list|()
operator|!=
name|QFontEngine
operator|::
name|Multi
argument_list|)
expr_stmt|;
name|d
operator|->
name|drawTextItem
argument_list|(
name|p
argument_list|,
name|ti
argument_list|)
expr_stmt|;
name|d
operator|->
name|hasPen
operator|=
name|hp
expr_stmt|;
name|d
operator|->
name|brush
operator|=
name|b
expr_stmt|;
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"Q\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawHyperlink
name|void
name|QPdfEngine
operator|::
name|drawHyperlink
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
specifier|const
name|uint
name|annot
init|=
name|d
operator|->
name|addXrefEntry
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QByteArray
name|urlascii
init|=
name|url
operator|.
name|toEncoded
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|urlascii
operator|.
name|size
argument_list|()
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|char
argument_list|>
name|url_esc
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|len
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|urlascii
index|[
name|j
index|]
operator|==
literal|'('
operator|||
name|urlascii
index|[
name|j
index|]
operator|==
literal|')'
operator|||
name|urlascii
index|[
name|j
index|]
operator|==
literal|'\\'
condition|)
name|url_esc
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|url_esc
operator|.
name|append
argument_list|(
name|urlascii
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|url_esc
operator|.
name|append
argument_list|(
literal|'\0'
argument_list|)
expr_stmt|;
name|char
name|buf
index|[
literal|256
index|]
decl_stmt|;
specifier|const
name|QRectF
name|rr
init|=
name|d
operator|->
name|pageMatrix
argument_list|()
operator|.
name|mapRect
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|d
operator|->
name|xprintf
argument_list|(
literal|"<<\n/Type /Annot\n/Subtype /Link\n/Rect ["
argument_list|)
expr_stmt|;
name|d
operator|->
name|xprintf
argument_list|(
literal|"%s "
argument_list|,
name|qt_real_to_string
argument_list|(
name|rr
operator|.
name|left
argument_list|()
argument_list|,
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|xprintf
argument_list|(
literal|"%s "
argument_list|,
name|qt_real_to_string
argument_list|(
name|rr
operator|.
name|top
argument_list|()
argument_list|,
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|xprintf
argument_list|(
literal|"%s "
argument_list|,
name|qt_real_to_string
argument_list|(
name|rr
operator|.
name|right
argument_list|()
argument_list|,
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|xprintf
argument_list|(
literal|"%s"
argument_list|,
name|qt_real_to_string
argument_list|(
name|rr
operator|.
name|bottom
argument_list|()
argument_list|,
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|xprintf
argument_list|(
literal|"]\n/Border [0 0 0]\n/A<<\n"
argument_list|)
expr_stmt|;
name|d
operator|->
name|xprintf
argument_list|(
literal|"/Type /Action\n/S /URI\n/URI (%s)\n"
argument_list|,
name|url_esc
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|xprintf
argument_list|(
literal|">>\n>>\n"
argument_list|)
expr_stmt|;
name|d
operator|->
name|xprintf
argument_list|(
literal|"endobj\n"
argument_list|)
expr_stmt|;
name|d
operator|->
name|currentPage
operator|->
name|annotations
operator|.
name|append
argument_list|(
name|annot
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateState
name|void
name|QPdfEngine
operator|::
name|updateState
parameter_list|(
specifier|const
name|QPaintEngineState
modifier|&
name|state
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
name|QPaintEngine
operator|::
name|DirtyFlags
name|flags
init|=
name|state
operator|.
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyTransform
condition|)
name|d
operator|->
name|stroker
operator|.
name|matrix
operator|=
name|state
operator|.
name|transform
argument_list|()
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyPen
condition|)
block|{
name|d
operator|->
name|pen
operator|=
name|state
operator|.
name|pen
argument_list|()
expr_stmt|;
name|d
operator|->
name|hasPen
operator|=
name|d
operator|->
name|pen
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoPen
expr_stmt|;
name|d
operator|->
name|stroker
operator|.
name|setPen
argument_list|(
name|d
operator|->
name|pen
argument_list|,
name|state
operator|.
name|renderHints
argument_list|()
argument_list|)
expr_stmt|;
name|QBrush
name|penBrush
init|=
name|d
operator|->
name|pen
operator|.
name|brush
argument_list|()
decl_stmt|;
name|bool
name|oldSimple
init|=
name|d
operator|->
name|simplePen
decl_stmt|;
name|d
operator|->
name|simplePen
operator|=
operator|(
name|d
operator|->
name|hasPen
operator|&&
operator|(
name|penBrush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidPattern
operator|)
operator|&&
name|penBrush
operator|.
name|isOpaque
argument_list|()
operator|&&
name|d
operator|->
name|opacity
operator|==
literal|1.0
operator|)
expr_stmt|;
if|if
condition|(
name|oldSimple
operator|!=
name|d
operator|->
name|simplePen
condition|)
name|flags
operator||=
name|DirtyTransform
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flags
operator|&
name|DirtyHints
condition|)
block|{
name|d
operator|->
name|stroker
operator|.
name|setPen
argument_list|(
name|d
operator|->
name|pen
argument_list|,
name|state
operator|.
name|renderHints
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|DirtyBrush
condition|)
block|{
name|d
operator|->
name|brush
operator|=
name|state
operator|.
name|brush
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|brush
operator|.
name|color
argument_list|()
operator|.
name|alpha
argument_list|()
operator|==
literal|0
operator|&&
name|d
operator|->
name|brush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidPattern
condition|)
name|d
operator|->
name|brush
operator|.
name|setStyle
argument_list|(
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
name|d
operator|->
name|hasBrush
operator|=
name|d
operator|->
name|brush
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|DirtyBrushOrigin
condition|)
block|{
name|d
operator|->
name|brushOrigin
operator|=
name|state
operator|.
name|brushOrigin
argument_list|()
expr_stmt|;
name|flags
operator||=
name|DirtyBrush
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|DirtyOpacity
condition|)
block|{
name|d
operator|->
name|opacity
operator|=
name|state
operator|.
name|opacity
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|simplePen
operator|&&
name|d
operator|->
name|opacity
operator|!=
literal|1.0
condition|)
block|{
name|d
operator|->
name|simplePen
operator|=
literal|false
expr_stmt|;
name|flags
operator||=
name|DirtyTransform
expr_stmt|;
block|}
block|}
name|bool
name|ce
init|=
name|d
operator|->
name|clipEnabled
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyClipPath
condition|)
block|{
name|d
operator|->
name|clipEnabled
operator|=
literal|true
expr_stmt|;
name|updateClipPath
argument_list|(
name|state
operator|.
name|clipPath
argument_list|()
argument_list|,
name|state
operator|.
name|clipOperation
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flags
operator|&
name|DirtyClipRegion
condition|)
block|{
name|d
operator|->
name|clipEnabled
operator|=
literal|true
expr_stmt|;
name|QPainterPath
name|path
decl_stmt|;
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|state
operator|.
name|clipRegion
argument_list|()
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|path
operator|.
name|addRect
argument_list|(
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|updateClipPath
argument_list|(
name|path
argument_list|,
name|state
operator|.
name|clipOperation
argument_list|()
argument_list|)
expr_stmt|;
name|flags
operator||=
name|DirtyClipPath
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flags
operator|&
name|DirtyClipEnabled
condition|)
block|{
name|d
operator|->
name|clipEnabled
operator|=
name|state
operator|.
name|isClipEnabled
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ce
operator|!=
name|d
operator|->
name|clipEnabled
condition|)
name|flags
operator||=
name|DirtyClipPath
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|d
operator|->
name|clipEnabled
condition|)
name|flags
operator|&=
operator|~
name|DirtyClipPath
expr_stmt|;
name|setupGraphicsState
argument_list|(
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setupGraphicsState
name|void
name|QPdfEngine
operator|::
name|setupGraphicsState
parameter_list|(
name|QPaintEngine
operator|::
name|DirtyFlags
name|flags
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyClipPath
condition|)
name|flags
operator||=
name|DirtyTransform
operator||
name|DirtyPen
operator||
name|DirtyBrush
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyTransform
condition|)
block|{
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"Q\n"
expr_stmt|;
name|flags
operator||=
name|DirtyPen
operator||
name|DirtyBrush
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|DirtyClipPath
condition|)
block|{
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"Q q\n"
expr_stmt|;
name|d
operator|->
name|allClipped
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|clipEnabled
operator|&&
operator|!
name|d
operator|->
name|clips
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|clips
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|d
operator|->
name|clips
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|d
operator|->
name|allClipped
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|allClipped
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|clips
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|QPdf
operator|::
name|generatePath
argument_list|(
name|d
operator|->
name|clips
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|QTransform
argument_list|()
argument_list|,
name|QPdf
operator|::
name|ClipPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|flags
operator|&
name|DirtyTransform
condition|)
block|{
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"q\n"
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|simplePen
operator|&&
operator|!
name|d
operator|->
name|stroker
operator|.
name|matrix
operator|.
name|isIdentity
argument_list|()
condition|)
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|QPdf
operator|::
name|generateMatrix
argument_list|(
name|d
operator|->
name|stroker
operator|.
name|matrix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|DirtyBrush
condition|)
name|setBrush
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|simplePen
operator|&&
operator|(
name|flags
operator|&
name|DirtyPen
operator|)
condition|)
name|setPen
argument_list|()
expr_stmt|;
block|}
end_function
begin_function_decl
specifier|extern
name|QPainterPath
name|qt_regionToPath
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|updateClipPath
name|void
name|QPdfEngine
operator|::
name|updateClipPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|p
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
name|QPainterPath
name|path
init|=
name|d
operator|->
name|stroker
operator|.
name|matrix
operator|.
name|map
argument_list|(
name|p
argument_list|)
decl_stmt|;
comment|//qDebug()<< "updateClipPath: "<< d->stroker.matrix<< p.boundingRect()<< path.boundingRect()<< op;
if|if
condition|(
name|op
operator|==
name|Qt
operator|::
name|NoClip
condition|)
block|{
name|d
operator|->
name|clipEnabled
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|clips
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|Qt
operator|::
name|ReplaceClip
condition|)
block|{
name|d
operator|->
name|clips
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|clips
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|Qt
operator|::
name|IntersectClip
condition|)
block|{
name|d
operator|->
name|clips
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// UniteClip
comment|// ask the painter for the current clipping path. that's the easiest solution
name|path
operator|=
name|painter
argument_list|()
operator|->
name|clipPath
argument_list|()
expr_stmt|;
name|path
operator|=
name|d
operator|->
name|stroker
operator|.
name|matrix
operator|.
name|map
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|d
operator|->
name|clips
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|clips
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setPen
name|void
name|QPdfEngine
operator|::
name|setPen
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoPen
condition|)
return|return;
name|QBrush
name|b
init|=
name|d
operator|->
name|pen
operator|.
name|brush
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|b
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidPattern
operator|&&
name|b
operator|.
name|isOpaque
argument_list|()
argument_list|)
expr_stmt|;
name|QColor
name|rgba
init|=
name|b
operator|.
name|color
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|grayscale
condition|)
block|{
name|qreal
name|gray
init|=
name|qGray
argument_list|(
name|rgba
operator|.
name|rgba
argument_list|()
argument_list|)
operator|/
literal|255.
decl_stmt|;
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|gray
operator|<<
name|gray
operator|<<
name|gray
expr_stmt|;
block|}
else|else
block|{
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|rgba
operator|.
name|redF
argument_list|()
operator|<<
name|rgba
operator|.
name|greenF
argument_list|()
operator|<<
name|rgba
operator|.
name|blueF
argument_list|()
expr_stmt|;
block|}
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"SCN\n"
expr_stmt|;
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|d
operator|->
name|pen
operator|.
name|widthF
argument_list|()
operator|<<
literal|"w "
expr_stmt|;
name|int
name|pdfCapStyle
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|d
operator|->
name|pen
operator|.
name|capStyle
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|FlatCap
case|:
name|pdfCapStyle
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SquareCap
case|:
name|pdfCapStyle
operator|=
literal|2
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|RoundCap
case|:
name|pdfCapStyle
operator|=
literal|1
expr_stmt|;
break|break;
default|default:
break|break;
block|}
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|pdfCapStyle
operator|<<
literal|"J "
expr_stmt|;
name|int
name|pdfJoinStyle
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|d
operator|->
name|pen
operator|.
name|joinStyle
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|MiterJoin
case|:
case|case
name|Qt
operator|::
name|SvgMiterJoin
case|:
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|d
operator|->
name|pen
operator|.
name|miterLimit
argument_list|()
operator|<<
literal|"M "
expr_stmt|;
name|pdfJoinStyle
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|BevelJoin
case|:
name|pdfJoinStyle
operator|=
literal|2
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|RoundJoin
case|:
name|pdfJoinStyle
operator|=
literal|1
expr_stmt|;
break|break;
default|default:
break|break;
block|}
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|pdfJoinStyle
operator|<<
literal|"j "
expr_stmt|;
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|QPdf
operator|::
name|generateDashes
argument_list|(
name|d
operator|->
name|pen
argument_list|)
operator|<<
literal|" 0 d\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setBrush
name|void
name|QPdfEngine
operator|::
name|setBrush
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|BrushStyle
name|style
init|=
name|d
operator|->
name|brush
operator|.
name|style
argument_list|()
decl_stmt|;
if|if
condition|(
name|style
operator|==
name|Qt
operator|::
name|NoBrush
condition|)
return|return;
name|bool
name|specifyColor
decl_stmt|;
name|int
name|gStateObject
init|=
literal|0
decl_stmt|;
name|int
name|patternObject
init|=
name|d
operator|->
name|addBrushPattern
argument_list|(
name|d
operator|->
name|stroker
operator|.
name|matrix
argument_list|,
operator|&
name|specifyColor
argument_list|,
operator|&
name|gStateObject
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|patternObject
operator|&&
operator|!
name|specifyColor
condition|)
return|return;
operator|*
name|d
operator|->
name|currentPage
operator|<<
operator|(
name|patternObject
condition|?
literal|"/PCSp cs "
else|:
literal|"/CSp cs "
operator|)
expr_stmt|;
if|if
condition|(
name|specifyColor
condition|)
block|{
name|QColor
name|rgba
init|=
name|d
operator|->
name|brush
operator|.
name|color
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|grayscale
condition|)
block|{
name|qreal
name|gray
init|=
name|qGray
argument_list|(
name|rgba
operator|.
name|rgba
argument_list|()
argument_list|)
operator|/
literal|255.
decl_stmt|;
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|gray
operator|<<
name|gray
operator|<<
name|gray
expr_stmt|;
block|}
else|else
block|{
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|rgba
operator|.
name|redF
argument_list|()
operator|<<
name|rgba
operator|.
name|greenF
argument_list|()
operator|<<
name|rgba
operator|.
name|blueF
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|patternObject
condition|)
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"/Pat"
operator|<<
name|patternObject
expr_stmt|;
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"scn\n"
expr_stmt|;
if|if
condition|(
name|gStateObject
condition|)
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"/GState"
operator|<<
name|gStateObject
operator|<<
literal|"gs\n"
expr_stmt|;
else|else
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"/GSa gs\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|newPage
name|bool
name|QPdfEngine
operator|::
name|newPage
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isActive
argument_list|()
condition|)
return|return
literal|false
return|;
name|d
operator|->
name|newPage
argument_list|()
expr_stmt|;
name|setupGraphicsState
argument_list|(
name|DirtyBrush
operator||
name|DirtyPen
operator||
name|DirtyClipPath
argument_list|)
expr_stmt|;
name|QFile
modifier|*
name|outfile
init|=
name|qobject_cast
argument_list|<
name|QFile
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|outDevice
argument_list|)
decl_stmt|;
if|if
condition|(
name|outfile
operator|&&
name|outfile
operator|->
name|error
argument_list|()
operator|!=
name|QFile
operator|::
name|NoError
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|type
name|QPaintEngine
operator|::
name|Type
name|QPdfEngine
operator|::
name|type
parameter_list|()
specifier|const
block|{
return|return
name|QPaintEngine
operator|::
name|Pdf
return|;
block|}
end_function
begin_function
DECL|function|setResolution
name|void
name|QPdfEngine
operator|::
name|setResolution
parameter_list|(
name|int
name|resolution
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|resolution
operator|=
name|resolution
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resolution
name|int
name|QPdfEngine
operator|::
name|resolution
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPdfEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|resolution
return|;
block|}
end_function
begin_function
DECL|function|setPageLayout
name|void
name|QPdfEngine
operator|::
name|setPageLayout
parameter_list|(
specifier|const
name|QPageLayout
modifier|&
name|pageLayout
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_pageLayout
operator|=
name|pageLayout
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setPageSize
name|void
name|QPdfEngine
operator|::
name|setPageSize
parameter_list|(
specifier|const
name|QPageSize
modifier|&
name|pageSize
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_pageLayout
operator|.
name|setPageSize
argument_list|(
name|pageSize
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setPageOrientation
name|void
name|QPdfEngine
operator|::
name|setPageOrientation
parameter_list|(
name|QPageLayout
operator|::
name|Orientation
name|orientation
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_pageLayout
operator|.
name|setOrientation
argument_list|(
name|orientation
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setPageMargins
name|void
name|QPdfEngine
operator|::
name|setPageMargins
parameter_list|(
specifier|const
name|QMarginsF
modifier|&
name|margins
parameter_list|,
name|QPageLayout
operator|::
name|Unit
name|units
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_pageLayout
operator|.
name|setUnits
argument_list|(
name|units
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_pageLayout
operator|.
name|setMargins
argument_list|(
name|margins
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pageLayout
name|QPageLayout
name|QPdfEngine
operator|::
name|pageLayout
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPdfEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_pageLayout
return|;
block|}
end_function
begin_comment
comment|// Metrics are in Device Pixels
end_comment
begin_function
DECL|function|metric
name|int
name|QPdfEngine
operator|::
name|metric
parameter_list|(
name|QPaintDevice
operator|::
name|PaintDeviceMetric
name|metricType
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPdfEngine
argument_list|)
expr_stmt|;
name|int
name|val
decl_stmt|;
switch|switch
condition|(
name|metricType
condition|)
block|{
case|case
name|QPaintDevice
operator|::
name|PdmWidth
case|:
name|val
operator|=
name|d
operator|->
name|m_pageLayout
operator|.
name|paintRectPixels
argument_list|(
name|d
operator|->
name|resolution
argument_list|)
operator|.
name|width
argument_list|()
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmHeight
case|:
name|val
operator|=
name|d
operator|->
name|m_pageLayout
operator|.
name|paintRectPixels
argument_list|(
name|d
operator|->
name|resolution
argument_list|)
operator|.
name|height
argument_list|()
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmDpiX
case|:
case|case
name|QPaintDevice
operator|::
name|PdmDpiY
case|:
name|val
operator|=
name|d
operator|->
name|resolution
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmPhysicalDpiX
case|:
case|case
name|QPaintDevice
operator|::
name|PdmPhysicalDpiY
case|:
name|val
operator|=
literal|1200
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmWidthMM
case|:
name|val
operator|=
name|qRound
argument_list|(
name|d
operator|->
name|m_pageLayout
operator|.
name|paintRect
argument_list|(
name|QPageLayout
operator|::
name|Millimeter
argument_list|)
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmHeightMM
case|:
name|val
operator|=
name|qRound
argument_list|(
name|d
operator|->
name|m_pageLayout
operator|.
name|paintRect
argument_list|(
name|QPageLayout
operator|::
name|Millimeter
argument_list|)
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmNumColors
case|:
name|val
operator|=
name|INT_MAX
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmDepth
case|:
name|val
operator|=
literal|32
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmDevicePixelRatio
case|:
name|val
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|QPaintDevice
operator|::
name|PdmDevicePixelRatioScaled
case|:
name|val
operator|=
literal|1
operator|*
name|QPaintDevice
operator|::
name|devicePixelRatioFScale
argument_list|()
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"QPdfWriter::metric: Invalid metric command"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|val
return|;
block|}
end_function
begin_constructor
DECL|function|QPdfEnginePrivate
name|QPdfEnginePrivate
operator|::
name|QPdfEnginePrivate
parameter_list|()
member_init_list|:
name|clipEnabled
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|allClipped
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|hasPen
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|hasBrush
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|simplePen
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|outDevice
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|ownsDevice
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|embedFonts
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|grayscale
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_pageLayout
argument_list|(
name|QPageSize
argument_list|(
name|QPageSize
operator|::
name|A4
argument_list|)
argument_list|,
name|QPageLayout
operator|::
name|Portrait
argument_list|,
name|QMarginsF
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
block|{
name|resolution
operator|=
literal|1200
expr_stmt|;
name|currentObject
operator|=
literal|1
expr_stmt|;
name|currentPage
operator|=
literal|0
expr_stmt|;
name|stroker
operator|.
name|stream
operator|=
literal|0
expr_stmt|;
name|streampos
operator|=
literal|0
expr_stmt|;
name|stream
operator|=
operator|new
name|QDataStream
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|begin
name|bool
name|QPdfEngine
operator|::
name|begin
parameter_list|(
name|QPaintDevice
modifier|*
name|pdev
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|pdev
operator|=
name|pdev
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|outDevice
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|outputFileName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QFile
modifier|*
name|file
init|=
operator|new
name|QFile
argument_list|(
name|d
operator|->
name|outputFileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|->
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Truncate
argument_list|)
condition|)
block|{
operator|delete
name|file
expr_stmt|;
return|return
literal|false
return|;
block|}
name|d
operator|->
name|outDevice
operator|=
name|file
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
name|d
operator|->
name|ownsDevice
operator|=
literal|true
expr_stmt|;
block|}
name|d
operator|->
name|currentObject
operator|=
literal|1
expr_stmt|;
name|d
operator|->
name|currentPage
operator|=
operator|new
name|QPdfPage
expr_stmt|;
name|d
operator|->
name|stroker
operator|.
name|stream
operator|=
name|d
operator|->
name|currentPage
expr_stmt|;
name|d
operator|->
name|opacity
operator|=
literal|1.0
expr_stmt|;
name|d
operator|->
name|stream
operator|->
name|setDevice
argument_list|(
name|d
operator|->
name|outDevice
argument_list|)
expr_stmt|;
name|d
operator|->
name|streampos
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|hasPen
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|hasBrush
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|clipEnabled
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|allClipped
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|xrefPositions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|pageRoot
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|catalog
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|info
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|graphicsState
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|patternColorSpace
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|simplePen
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|pages
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|imageCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|alphaCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|d
operator|->
name|writeHeader
argument_list|()
expr_stmt|;
name|newPage
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|end
name|bool
name|QPdfEngine
operator|::
name|end
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|writeTail
argument_list|()
expr_stmt|;
name|d
operator|->
name|stream
operator|->
name|unsetDevice
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|d
operator|->
name|fonts
argument_list|)
expr_stmt|;
name|d
operator|->
name|fonts
operator|.
name|clear
argument_list|()
expr_stmt|;
operator|delete
name|d
operator|->
name|currentPage
expr_stmt|;
name|d
operator|->
name|currentPage
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|outDevice
operator|&&
name|d
operator|->
name|ownsDevice
condition|)
block|{
name|d
operator|->
name|outDevice
operator|->
name|close
argument_list|()
expr_stmt|;
operator|delete
name|d
operator|->
name|outDevice
expr_stmt|;
name|d
operator|->
name|outDevice
operator|=
literal|0
expr_stmt|;
block|}
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_destructor
DECL|function|~QPdfEnginePrivate
name|QPdfEnginePrivate
operator|::
name|~
name|QPdfEnginePrivate
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|fonts
argument_list|)
expr_stmt|;
operator|delete
name|currentPage
expr_stmt|;
operator|delete
name|stream
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|writeHeader
name|void
name|QPdfEnginePrivate
operator|::
name|writeHeader
parameter_list|()
block|{
name|addXrefEntry
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"%%PDF-1.4\n"
argument_list|)
expr_stmt|;
name|writeInfo
argument_list|()
expr_stmt|;
name|catalog
operator|=
name|addXrefEntry
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|pageRoot
operator|=
name|requestObject
argument_list|()
expr_stmt|;
name|xprintf
argument_list|(
literal|"<<\n"
literal|"/Type /Catalog\n"
literal|"/Pages %d 0 R\n"
literal|">>\n"
literal|"endobj\n"
argument_list|,
name|pageRoot
argument_list|)
expr_stmt|;
comment|// graphics state
name|graphicsState
operator|=
name|addXrefEntry
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"<<\n"
literal|"/Type /ExtGState\n"
literal|"/SA true\n"
literal|"/SM 0.02\n"
literal|"/ca 1.0\n"
literal|"/CA 1.0\n"
literal|"/AIS false\n"
literal|"/SMask /None"
literal|">>\n"
literal|"endobj\n"
argument_list|)
expr_stmt|;
comment|// color space for pattern
name|patternColorSpace
operator|=
name|addXrefEntry
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"[/Pattern /DeviceRGB]\n"
literal|"endobj\n"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeInfo
name|void
name|QPdfEnginePrivate
operator|::
name|writeInfo
parameter_list|()
block|{
name|info
operator|=
name|addXrefEntry
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"<<\n/Title "
argument_list|)
expr_stmt|;
name|printString
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"\n/Creator "
argument_list|)
expr_stmt|;
name|printString
argument_list|(
name|creator
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"\n/Producer "
argument_list|)
expr_stmt|;
name|printString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Qt "
name|QT_VERSION_STR
argument_list|)
argument_list|)
expr_stmt|;
name|QDateTime
name|now
init|=
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|toUTC
argument_list|()
decl_stmt|;
name|QTime
name|t
init|=
name|now
operator|.
name|time
argument_list|()
decl_stmt|;
name|QDate
name|d
init|=
name|now
operator|.
name|date
argument_list|()
decl_stmt|;
name|xprintf
argument_list|(
literal|"\n/CreationDate (D:%d%02d%02d%02d%02d%02d)\n"
argument_list|,
name|d
operator|.
name|year
argument_list|()
argument_list|,
name|d
operator|.
name|month
argument_list|()
argument_list|,
name|d
operator|.
name|day
argument_list|()
argument_list|,
name|t
operator|.
name|hour
argument_list|()
argument_list|,
name|t
operator|.
name|minute
argument_list|()
argument_list|,
name|t
operator|.
name|second
argument_list|()
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|">>\n"
literal|"endobj\n"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writePageRoot
name|void
name|QPdfEnginePrivate
operator|::
name|writePageRoot
parameter_list|()
block|{
name|addXrefEntry
argument_list|(
name|pageRoot
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"<<\n"
literal|"/Type /Pages\n"
literal|"/Kids \n"
literal|"[\n"
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|pages
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
name|xprintf
argument_list|(
literal|"%d 0 R\n"
argument_list|,
name|pages
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"]\n"
argument_list|)
expr_stmt|;
comment|//xprintf("/Group<</S /Transparency /I true /K false>>\n");
name|xprintf
argument_list|(
literal|"/Count %d\n"
argument_list|,
name|pages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"/ProcSet [/PDF /Text /ImageB /ImageC]\n"
literal|">>\n"
literal|"endobj\n"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|embedFont
name|void
name|QPdfEnginePrivate
operator|::
name|embedFont
parameter_list|(
name|QFontSubset
modifier|*
name|font
parameter_list|)
block|{
comment|//qDebug()<< "embedFont"<< font->object_id;
name|int
name|fontObject
init|=
name|font
operator|->
name|object_id
decl_stmt|;
name|QByteArray
name|fontData
init|=
name|font
operator|->
name|toTruetype
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|FONT_DUMP
specifier|static
name|int
name|i
init|=
literal|0
decl_stmt|;
name|QString
name|fileName
argument_list|(
literal|"font%1.ttf"
argument_list|)
decl_stmt|;
name|fileName
operator|=
name|fileName
operator|.
name|arg
argument_list|(
name|i
operator|++
argument_list|)
expr_stmt|;
name|QFile
name|ff
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|ff
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|ff
operator|.
name|write
argument_list|(
name|fontData
argument_list|)
expr_stmt|;
name|ff
operator|.
name|close
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|int
name|fontDescriptor
init|=
name|requestObject
argument_list|()
decl_stmt|;
name|int
name|fontstream
init|=
name|requestObject
argument_list|()
decl_stmt|;
name|int
name|cidfont
init|=
name|requestObject
argument_list|()
decl_stmt|;
name|int
name|toUnicode
init|=
name|requestObject
argument_list|()
decl_stmt|;
name|QFontEngine
operator|::
name|Properties
name|properties
init|=
name|font
operator|->
name|fontEngine
operator|->
name|properties
argument_list|()
decl_stmt|;
block|{
name|qreal
name|scale
init|=
literal|1000
operator|/
name|properties
operator|.
name|emSquare
operator|.
name|toReal
argument_list|()
decl_stmt|;
name|addXrefEntry
argument_list|(
name|fontDescriptor
argument_list|)
expr_stmt|;
name|QByteArray
name|descriptor
decl_stmt|;
name|QPdf
operator|::
name|ByteStream
name|s
argument_list|(
operator|&
name|descriptor
argument_list|)
decl_stmt|;
name|s
operator|<<
literal|"<< /Type /FontDescriptor\n"
literal|"/FontName /Q"
expr_stmt|;
name|int
name|tag
init|=
name|fontDescriptor
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|s
operator|<<
call|(
name|char
call|)
argument_list|(
literal|'A'
operator|+
operator|(
name|tag
operator|%
literal|26
operator|)
argument_list|)
expr_stmt|;
name|tag
operator|/=
literal|26
expr_stmt|;
block|}
name|s
operator|<<
literal|'+'
operator|<<
name|properties
operator|.
name|postscriptName
operator|<<
literal|"\n"
literal|"/Flags "
operator|<<
literal|4
operator|<<
literal|"\n"
literal|"/FontBBox ["
operator|<<
name|properties
operator|.
name|boundingBox
operator|.
name|x
argument_list|()
operator|*
name|scale
operator|<<
operator|-
operator|(
name|properties
operator|.
name|boundingBox
operator|.
name|y
argument_list|()
operator|+
name|properties
operator|.
name|boundingBox
operator|.
name|height
argument_list|()
operator|)
operator|*
name|scale
operator|<<
operator|(
name|properties
operator|.
name|boundingBox
operator|.
name|x
argument_list|()
operator|+
name|properties
operator|.
name|boundingBox
operator|.
name|width
argument_list|()
operator|)
operator|*
name|scale
operator|<<
operator|-
name|properties
operator|.
name|boundingBox
operator|.
name|y
argument_list|()
operator|*
name|scale
operator|<<
literal|"]\n"
literal|"/ItalicAngle "
operator|<<
name|properties
operator|.
name|italicAngle
operator|.
name|toReal
argument_list|()
operator|<<
literal|"\n"
literal|"/Ascent "
operator|<<
name|properties
operator|.
name|ascent
operator|.
name|toReal
argument_list|()
operator|*
name|scale
operator|<<
literal|"\n"
literal|"/Descent "
operator|<<
operator|-
name|properties
operator|.
name|descent
operator|.
name|toReal
argument_list|()
operator|*
name|scale
operator|<<
literal|"\n"
literal|"/CapHeight "
operator|<<
name|properties
operator|.
name|capHeight
operator|.
name|toReal
argument_list|()
operator|*
name|scale
operator|<<
literal|"\n"
literal|"/StemV "
operator|<<
name|properties
operator|.
name|lineWidth
operator|.
name|toReal
argument_list|()
operator|*
name|scale
operator|<<
literal|"\n"
literal|"/FontFile2 "
operator|<<
name|fontstream
operator|<<
literal|"0 R\n"
literal|">> endobj\n"
expr_stmt|;
name|write
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
block|}
block|{
name|addXrefEntry
argument_list|(
name|fontstream
argument_list|)
expr_stmt|;
name|QByteArray
name|header
decl_stmt|;
name|QPdf
operator|::
name|ByteStream
name|s
argument_list|(
operator|&
name|header
argument_list|)
decl_stmt|;
name|int
name|length_object
init|=
name|requestObject
argument_list|()
decl_stmt|;
name|s
operator|<<
literal|"<<\n"
literal|"/Length1 "
operator|<<
name|fontData
operator|.
name|size
argument_list|()
operator|<<
literal|"\n"
literal|"/Length "
operator|<<
name|length_object
operator|<<
literal|"0 R\n"
expr_stmt|;
if|if
condition|(
name|do_compress
condition|)
name|s
operator|<<
literal|"/Filter /FlateDecode\n"
expr_stmt|;
name|s
operator|<<
literal|">>\n"
literal|"stream\n"
expr_stmt|;
name|write
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|writeCompressed
argument_list|(
name|fontData
argument_list|)
decl_stmt|;
name|write
argument_list|(
literal|"endstream\n"
literal|"endobj\n"
argument_list|)
expr_stmt|;
name|addXrefEntry
argument_list|(
name|length_object
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"%d\n"
literal|"endobj\n"
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|{
name|addXrefEntry
argument_list|(
name|cidfont
argument_list|)
expr_stmt|;
name|QByteArray
name|cid
decl_stmt|;
name|QPdf
operator|::
name|ByteStream
name|s
argument_list|(
operator|&
name|cid
argument_list|)
decl_stmt|;
name|s
operator|<<
literal|"<< /Type /Font\n"
literal|"/Subtype /CIDFontType2\n"
literal|"/BaseFont /"
operator|<<
name|properties
operator|.
name|postscriptName
operator|<<
literal|"\n"
literal|"/CIDSystemInfo<< /Registry (Adobe) /Ordering (Identity) /Supplement 0>>\n"
literal|"/FontDescriptor "
operator|<<
name|fontDescriptor
operator|<<
literal|"0 R\n"
literal|"/CIDToGIDMap /Identity\n"
operator|<<
name|font
operator|->
name|widthArray
argument_list|()
operator|<<
literal|">>\n"
literal|"endobj\n"
expr_stmt|;
name|write
argument_list|(
name|cid
argument_list|)
expr_stmt|;
block|}
block|{
name|addXrefEntry
argument_list|(
name|toUnicode
argument_list|)
expr_stmt|;
name|QByteArray
name|touc
init|=
name|font
operator|->
name|createToUnicodeMap
argument_list|()
decl_stmt|;
name|xprintf
argument_list|(
literal|"<< /Length %d>>\n"
literal|"stream\n"
argument_list|,
name|touc
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|touc
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"endstream\n"
literal|"endobj\n"
argument_list|)
expr_stmt|;
block|}
block|{
name|addXrefEntry
argument_list|(
name|fontObject
argument_list|)
expr_stmt|;
name|QByteArray
name|font
decl_stmt|;
name|QPdf
operator|::
name|ByteStream
name|s
argument_list|(
operator|&
name|font
argument_list|)
decl_stmt|;
name|s
operator|<<
literal|"<< /Type /Font\n"
literal|"/Subtype /Type0\n"
literal|"/BaseFont /"
operator|<<
name|properties
operator|.
name|postscriptName
operator|<<
literal|"\n"
literal|"/Encoding /Identity-H\n"
literal|"/DescendantFonts ["
operator|<<
name|cidfont
operator|<<
literal|"0 R]\n"
literal|"/ToUnicode "
operator|<<
name|toUnicode
operator|<<
literal|"0 R"
literal|">>\n"
literal|"endobj\n"
expr_stmt|;
name|write
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeFonts
name|void
name|QPdfEnginePrivate
operator|::
name|writeFonts
parameter_list|()
block|{
for|for
control|(
name|QHash
argument_list|<
name|QFontEngine
operator|::
name|FaceId
argument_list|,
name|QFontSubset
operator|*
argument_list|>
operator|::
name|iterator
name|it
init|=
name|fonts
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|fonts
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|embedFont
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
operator|delete
operator|*
name|it
expr_stmt|;
block|}
name|fonts
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writePage
name|void
name|QPdfEnginePrivate
operator|::
name|writePage
parameter_list|()
block|{
if|if
condition|(
name|pages
operator|.
name|empty
argument_list|()
condition|)
return|return;
operator|*
name|currentPage
operator|<<
literal|"Q Q\n"
expr_stmt|;
name|uint
name|pageStream
init|=
name|requestObject
argument_list|()
decl_stmt|;
name|uint
name|pageStreamLength
init|=
name|requestObject
argument_list|()
decl_stmt|;
name|uint
name|resources
init|=
name|requestObject
argument_list|()
decl_stmt|;
name|uint
name|annots
init|=
name|requestObject
argument_list|()
decl_stmt|;
name|addXrefEntry
argument_list|(
name|pages
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"<<\n"
literal|"/Type /Page\n"
literal|"/Parent %d 0 R\n"
literal|"/Contents %d 0 R\n"
literal|"/Resources %d 0 R\n"
literal|"/Annots %d 0 R\n"
literal|"/MediaBox [0 0 %d %d]\n"
literal|">>\n"
literal|"endobj\n"
argument_list|,
name|pageRoot
argument_list|,
name|pageStream
argument_list|,
name|resources
argument_list|,
name|annots
argument_list|,
comment|// make sure we use the pagesize from when we started the page, since the user may have changed it
name|currentPage
operator|->
name|pageSize
operator|.
name|width
argument_list|()
argument_list|,
name|currentPage
operator|->
name|pageSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|addXrefEntry
argument_list|(
name|resources
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"<<\n"
literal|"/ColorSpace<<\n"
literal|"/PCSp %d 0 R\n"
literal|"/CSp /DeviceRGB\n"
literal|"/CSpg /DeviceGray\n"
literal|">>\n"
literal|"/ExtGState<<\n"
literal|"/GSa %d 0 R\n"
argument_list|,
name|patternColorSpace
argument_list|,
name|graphicsState
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentPage
operator|->
name|graphicStates
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|xprintf
argument_list|(
literal|"/GState%d %d 0 R\n"
argument_list|,
name|currentPage
operator|->
name|graphicStates
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|currentPage
operator|->
name|graphicStates
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|">>\n"
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"/Pattern<<\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentPage
operator|->
name|patterns
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|xprintf
argument_list|(
literal|"/Pat%d %d 0 R\n"
argument_list|,
name|currentPage
operator|->
name|patterns
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|currentPage
operator|->
name|patterns
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|">>\n"
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"/Font<<\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentPage
operator|->
name|fonts
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|xprintf
argument_list|(
literal|"/F%d %d 0 R\n"
argument_list|,
name|currentPage
operator|->
name|fonts
index|[
name|i
index|]
argument_list|,
name|currentPage
operator|->
name|fonts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|">>\n"
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"/XObject<<\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentPage
operator|->
name|images
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|xprintf
argument_list|(
literal|"/Im%d %d 0 R\n"
argument_list|,
name|currentPage
operator|->
name|images
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|currentPage
operator|->
name|images
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|xprintf
argument_list|(
literal|">>\n"
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|">>\n"
literal|"endobj\n"
argument_list|)
expr_stmt|;
name|addXrefEntry
argument_list|(
name|annots
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"[ "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentPage
operator|->
name|annotations
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|xprintf
argument_list|(
literal|"%d 0 R "
argument_list|,
name|currentPage
operator|->
name|annotations
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|xprintf
argument_list|(
literal|"]\nendobj\n"
argument_list|)
expr_stmt|;
name|addXrefEntry
argument_list|(
name|pageStream
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"<<\n"
literal|"/Length %d 0 R\n"
argument_list|,
name|pageStreamLength
argument_list|)
expr_stmt|;
comment|// object number for stream length object
if|if
condition|(
name|do_compress
condition|)
name|xprintf
argument_list|(
literal|"/Filter /FlateDecode\n"
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|">>\n"
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"stream\n"
argument_list|)
expr_stmt|;
name|QIODevice
modifier|*
name|content
init|=
name|currentPage
operator|->
name|stream
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|writeCompressed
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|xprintf
argument_list|(
literal|"endstream\n"
literal|"endobj\n"
argument_list|)
expr_stmt|;
name|addXrefEntry
argument_list|(
name|pageStreamLength
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"%d\nendobj\n"
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeTail
name|void
name|QPdfEnginePrivate
operator|::
name|writeTail
parameter_list|()
block|{
name|writePage
argument_list|()
expr_stmt|;
name|writeFonts
argument_list|()
expr_stmt|;
name|writePageRoot
argument_list|()
expr_stmt|;
name|addXrefEntry
argument_list|(
name|xrefPositions
operator|.
name|size
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"xref\n"
literal|"0 %d\n"
literal|"%010d 65535 f \n"
argument_list|,
name|xrefPositions
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|xrefPositions
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|xrefPositions
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
operator|++
name|i
control|)
name|xprintf
argument_list|(
literal|"%010d 00000 n \n"
argument_list|,
name|xrefPositions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"trailer\n"
literal|"<<\n"
literal|"/Size %d\n"
literal|"/Info %d 0 R\n"
literal|"/Root %d 0 R\n"
literal|">>\n"
literal|"startxref\n%d\n"
literal|"%%%%EOF\n"
argument_list|,
name|xrefPositions
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|info
argument_list|,
name|catalog
argument_list|,
name|xrefPositions
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addXrefEntry
name|int
name|QPdfEnginePrivate
operator|::
name|addXrefEntry
parameter_list|(
name|int
name|object
parameter_list|,
name|bool
name|printostr
parameter_list|)
block|{
if|if
condition|(
name|object
operator|<
literal|0
condition|)
name|object
operator|=
name|requestObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|object
operator|>=
name|xrefPositions
operator|.
name|size
argument_list|()
condition|)
name|xrefPositions
operator|.
name|resize
argument_list|(
name|object
operator|+
literal|1
argument_list|)
expr_stmt|;
name|xrefPositions
index|[
name|object
index|]
operator|=
name|streampos
expr_stmt|;
if|if
condition|(
name|printostr
condition|)
name|xprintf
argument_list|(
literal|"%d 0 obj\n"
argument_list|,
name|object
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
end_function
begin_function
DECL|function|printString
name|void
name|QPdfEnginePrivate
operator|::
name|printString
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|)
block|{
comment|// The 'text string' type in PDF is encoded either as PDFDocEncoding, or
comment|// Unicode UTF-16 with a Unicode byte order mark as the first character
comment|// (0xfeff), with the high-order byte first.
name|QByteArray
name|array
argument_list|(
literal|"(\xfe\xff"
argument_list|)
decl_stmt|;
specifier|const
name|ushort
modifier|*
name|utf16
init|=
name|string
operator|.
name|utf16
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|string
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|char
name|part
index|[
literal|2
index|]
init|=
block|{
name|char
argument_list|(
operator|(
operator|*
operator|(
name|utf16
operator|+
name|i
operator|)
operator|)
operator|>>
literal|8
argument_list|)
block|,
name|char
argument_list|(
argument|(*(utf16 + i))&
literal|0xff
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|2
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|part
index|[
name|j
index|]
operator|==
literal|'('
operator|||
name|part
index|[
name|j
index|]
operator|==
literal|')'
operator|||
name|part
index|[
name|j
index|]
operator|==
literal|'\\'
condition|)
name|array
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|array
operator|.
name|append
argument_list|(
name|part
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|array
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// For strings up to 10000 bytes only !
end_comment
begin_function
DECL|function|xprintf
name|void
name|QPdfEnginePrivate
operator|::
name|xprintf
parameter_list|(
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
block|{
if|if
condition|(
operator|!
name|stream
condition|)
return|return;
specifier|const
name|int
name|msize
init|=
literal|10000
decl_stmt|;
name|char
name|buf
index|[
name|msize
index|]
decl_stmt|;
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|int
name|bufsize
init|=
name|qvsnprintf
argument_list|(
name|buf
argument_list|,
name|msize
argument_list|,
name|fmt
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|bufsize
operator|<
name|msize
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|stream
operator|->
name|writeRawData
argument_list|(
name|buf
argument_list|,
name|bufsize
argument_list|)
expr_stmt|;
name|streampos
operator|+=
name|bufsize
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeCompressed
name|int
name|QPdfEnginePrivate
operator|::
name|writeCompressed
parameter_list|(
name|QIODevice
modifier|*
name|dev
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_COMPRESS
if|if
condition|(
name|do_compress
condition|)
block|{
name|int
name|size
init|=
name|QPdfPage
operator|::
name|chunkSize
argument_list|()
decl_stmt|;
name|int
name|sum
init|=
literal|0
decl_stmt|;
operator|::
name|z_stream
name|zStruct
decl_stmt|;
name|zStruct
operator|.
name|zalloc
operator|=
name|Z_NULL
expr_stmt|;
name|zStruct
operator|.
name|zfree
operator|=
name|Z_NULL
expr_stmt|;
name|zStruct
operator|.
name|opaque
operator|=
name|Z_NULL
expr_stmt|;
if|if
condition|(
operator|::
name|deflateInit
argument_list|(
operator|&
name|zStruct
argument_list|,
name|Z_DEFAULT_COMPRESSION
argument_list|)
operator|!=
name|Z_OK
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPdfStream::writeCompressed: Error in deflateInit()"
argument_list|)
expr_stmt|;
return|return
name|sum
return|;
block|}
name|zStruct
operator|.
name|avail_in
operator|=
literal|0
expr_stmt|;
name|QByteArray
name|in
decl_stmt|,
name|out
decl_stmt|;
name|out
operator|.
name|resize
argument_list|(
name|size
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|dev
operator|->
name|atEnd
argument_list|()
operator|||
name|zStruct
operator|.
name|avail_in
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|zStruct
operator|.
name|avail_in
operator|==
literal|0
condition|)
block|{
name|in
operator|=
name|dev
operator|->
name|read
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|zStruct
operator|.
name|avail_in
operator|=
name|in
operator|.
name|size
argument_list|()
expr_stmt|;
name|zStruct
operator|.
name|next_in
operator|=
cast|reinterpret_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|in
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|size
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPdfStream::writeCompressed: Error in read()"
argument_list|)
expr_stmt|;
operator|::
name|deflateEnd
argument_list|(
operator|&
name|zStruct
argument_list|)
expr_stmt|;
return|return
name|sum
return|;
block|}
block|}
name|zStruct
operator|.
name|next_out
operator|=
cast|reinterpret_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|out
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|zStruct
operator|.
name|avail_out
operator|=
name|out
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
operator|::
name|deflate
argument_list|(
operator|&
name|zStruct
argument_list|,
literal|0
argument_list|)
operator|!=
name|Z_OK
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPdfStream::writeCompressed: Error in deflate()"
argument_list|)
expr_stmt|;
operator|::
name|deflateEnd
argument_list|(
operator|&
name|zStruct
argument_list|)
expr_stmt|;
return|return
name|sum
return|;
block|}
name|int
name|written
init|=
name|out
operator|.
name|size
argument_list|()
operator|-
name|zStruct
operator|.
name|avail_out
decl_stmt|;
name|stream
operator|->
name|writeRawData
argument_list|(
name|out
operator|.
name|constData
argument_list|()
argument_list|,
name|written
argument_list|)
expr_stmt|;
name|streampos
operator|+=
name|written
expr_stmt|;
name|sum
operator|+=
name|written
expr_stmt|;
block|}
name|int
name|ret
decl_stmt|;
do|do
block|{
name|zStruct
operator|.
name|next_out
operator|=
cast|reinterpret_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|out
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|zStruct
operator|.
name|avail_out
operator|=
name|out
operator|.
name|size
argument_list|()
expr_stmt|;
name|ret
operator|=
operator|::
name|deflate
argument_list|(
operator|&
name|zStruct
argument_list|,
name|Z_FINISH
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
name|Z_OK
operator|&&
name|ret
operator|!=
name|Z_STREAM_END
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPdfStream::writeCompressed: Error in deflate()"
argument_list|)
expr_stmt|;
operator|::
name|deflateEnd
argument_list|(
operator|&
name|zStruct
argument_list|)
expr_stmt|;
return|return
name|sum
return|;
block|}
name|int
name|written
init|=
name|out
operator|.
name|size
argument_list|()
operator|-
name|zStruct
operator|.
name|avail_out
decl_stmt|;
name|stream
operator|->
name|writeRawData
argument_list|(
name|out
operator|.
name|constData
argument_list|()
argument_list|,
name|written
argument_list|)
expr_stmt|;
name|streampos
operator|+=
name|written
expr_stmt|;
name|sum
operator|+=
name|written
expr_stmt|;
block|}
do|while
condition|(
name|ret
operator|==
name|Z_OK
condition|)
do|;
operator|::
name|deflateEnd
argument_list|(
operator|&
name|zStruct
argument_list|)
expr_stmt|;
return|return
name|sum
return|;
block|}
else|else
endif|#
directive|endif
block|{
name|QByteArray
name|arr
decl_stmt|;
name|int
name|sum
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|dev
operator|->
name|atEnd
argument_list|()
condition|)
block|{
name|arr
operator|=
name|dev
operator|->
name|read
argument_list|(
name|QPdfPage
operator|::
name|chunkSize
argument_list|()
argument_list|)
expr_stmt|;
name|stream
operator|->
name|writeRawData
argument_list|(
name|arr
operator|.
name|constData
argument_list|()
argument_list|,
name|arr
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|streampos
operator|+=
name|arr
operator|.
name|size
argument_list|()
expr_stmt|;
name|sum
operator|+=
name|arr
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
block|}
end_function
begin_function
DECL|function|writeCompressed
name|int
name|QPdfEnginePrivate
operator|::
name|writeCompressed
parameter_list|(
specifier|const
name|char
modifier|*
name|src
parameter_list|,
name|int
name|len
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_COMPRESS
if|if
condition|(
name|do_compress
condition|)
block|{
name|uLongf
name|destLen
init|=
name|len
operator|+
name|len
operator|/
literal|100
operator|+
literal|13
decl_stmt|;
comment|// zlib requirement
name|Bytef
modifier|*
name|dest
init|=
operator|new
name|Bytef
index|[
name|destLen
index|]
decl_stmt|;
if|if
condition|(
name|Z_OK
operator|==
operator|::
name|compress
argument_list|(
name|dest
argument_list|,
operator|&
name|destLen
argument_list|,
operator|(
specifier|const
name|Bytef
operator|*
operator|)
name|src
argument_list|,
operator|(
name|uLongf
operator|)
name|len
argument_list|)
condition|)
block|{
name|stream
operator|->
name|writeRawData
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|dest
argument_list|,
name|destLen
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QPdfStream::writeCompressed: Error in compress()"
argument_list|)
expr_stmt|;
name|destLen
operator|=
literal|0
expr_stmt|;
block|}
operator|delete
index|[]
name|dest
expr_stmt|;
name|len
operator|=
name|destLen
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|stream
operator|->
name|writeRawData
argument_list|(
name|src
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|streampos
operator|+=
name|len
expr_stmt|;
return|return
name|len
return|;
block|}
end_function
begin_function
DECL|function|writeImage
name|int
name|QPdfEnginePrivate
operator|::
name|writeImage
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|depth
parameter_list|,
name|int
name|maskObject
parameter_list|,
name|int
name|softMaskObject
parameter_list|,
name|bool
name|dct
parameter_list|)
block|{
name|int
name|image
init|=
name|addXrefEntry
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|xprintf
argument_list|(
literal|"<<\n"
literal|"/Type /XObject\n"
literal|"/Subtype /Image\n"
literal|"/Width %d\n"
literal|"/Height %d\n"
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
if|if
condition|(
name|depth
operator|==
literal|1
condition|)
block|{
name|xprintf
argument_list|(
literal|"/ImageMask true\n"
literal|"/Decode [1 0]\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xprintf
argument_list|(
literal|"/BitsPerComponent 8\n"
literal|"/ColorSpace %s\n"
argument_list|,
operator|(
name|depth
operator|==
literal|32
operator|)
condition|?
literal|"/DeviceRGB"
else|:
literal|"/DeviceGray"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maskObject
operator|>
literal|0
condition|)
name|xprintf
argument_list|(
literal|"/Mask %d 0 R\n"
argument_list|,
name|maskObject
argument_list|)
expr_stmt|;
if|if
condition|(
name|softMaskObject
operator|>
literal|0
condition|)
name|xprintf
argument_list|(
literal|"/SMask %d 0 R\n"
argument_list|,
name|softMaskObject
argument_list|)
expr_stmt|;
name|int
name|lenobj
init|=
name|requestObject
argument_list|()
decl_stmt|;
name|xprintf
argument_list|(
literal|"/Length %d 0 R\n"
argument_list|,
name|lenobj
argument_list|)
expr_stmt|;
if|if
condition|(
name|interpolateImages
condition|)
name|xprintf
argument_list|(
literal|"/Interpolate true\n"
argument_list|)
expr_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|dct
condition|)
block|{
comment|//qDebug()<< "DCT";
name|xprintf
argument_list|(
literal|"/Filter /DCTDecode\n>>\nstream\n"
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|len
operator|=
name|data
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|do_compress
condition|)
name|xprintf
argument_list|(
literal|"/Filter /FlateDecode\n>>\nstream\n"
argument_list|)
expr_stmt|;
else|else
name|xprintf
argument_list|(
literal|">>\nstream\n"
argument_list|)
expr_stmt|;
name|len
operator|=
name|writeCompressed
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|xprintf
argument_list|(
literal|"endstream\n"
literal|"endobj\n"
argument_list|)
expr_stmt|;
name|addXrefEntry
argument_list|(
name|lenobj
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"%d\n"
literal|"endobj\n"
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|image
return|;
block|}
end_function
begin_struct
DECL|struct|QGradientBound
struct|struct
name|QGradientBound
block|{
DECL|member|start
name|qreal
name|start
decl_stmt|;
DECL|member|stop
name|qreal
name|stop
decl_stmt|;
DECL|member|function
name|int
name|function
decl_stmt|;
DECL|member|reverse
name|bool
name|reverse
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|createShadingFunction
name|int
name|QPdfEnginePrivate
operator|::
name|createShadingFunction
parameter_list|(
specifier|const
name|QGradient
modifier|*
name|gradient
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|bool
name|reflect
parameter_list|,
name|bool
name|alpha
parameter_list|)
block|{
name|QGradientStops
name|stops
init|=
name|gradient
operator|->
name|stops
argument_list|()
decl_stmt|;
if|if
condition|(
name|stops
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|stops
operator|<<
name|QGradientStop
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|stops
operator|<<
name|QGradientStop
argument_list|(
literal|1
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stops
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|first
operator|>
literal|0
condition|)
name|stops
operator|.
name|prepend
argument_list|(
name|QGradientStop
argument_list|(
literal|0
argument_list|,
name|stops
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|second
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|stops
operator|.
name|at
argument_list|(
name|stops
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|first
operator|<
literal|1
condition|)
name|stops
operator|.
name|append
argument_list|(
name|QGradientStop
argument_list|(
literal|1
argument_list|,
name|stops
operator|.
name|at
argument_list|(
name|stops
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|second
argument_list|)
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|functions
decl_stmt|;
specifier|const
name|int
name|numStops
init|=
name|stops
operator|.
name|size
argument_list|()
decl_stmt|;
name|functions
operator|.
name|reserve
argument_list|(
name|numStops
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numStops
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|int
name|f
init|=
name|addXrefEntry
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QByteArray
name|data
decl_stmt|;
name|QPdf
operator|::
name|ByteStream
name|s
argument_list|(
operator|&
name|data
argument_list|)
decl_stmt|;
name|s
operator|<<
literal|"<<\n"
literal|"/FunctionType 2\n"
literal|"/Domain [0 1]\n"
literal|"/N 1\n"
expr_stmt|;
if|if
condition|(
name|alpha
condition|)
block|{
name|s
operator|<<
literal|"/C0 ["
operator|<<
name|stops
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
operator|.
name|alphaF
argument_list|()
operator|<<
literal|"]\n"
literal|"/C1 ["
operator|<<
name|stops
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|second
operator|.
name|alphaF
argument_list|()
operator|<<
literal|"]\n"
expr_stmt|;
block|}
else|else
block|{
name|s
operator|<<
literal|"/C0 ["
operator|<<
name|stops
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
operator|.
name|redF
argument_list|()
operator|<<
name|stops
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
operator|.
name|greenF
argument_list|()
operator|<<
name|stops
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
operator|.
name|blueF
argument_list|()
operator|<<
literal|"]\n"
literal|"/C1 ["
operator|<<
name|stops
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|second
operator|.
name|redF
argument_list|()
operator|<<
name|stops
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|second
operator|.
name|greenF
argument_list|()
operator|<<
name|stops
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|second
operator|.
name|blueF
argument_list|()
operator|<<
literal|"]\n"
expr_stmt|;
block|}
name|s
operator|<<
literal|">>\n"
literal|"endobj\n"
expr_stmt|;
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|functions
operator|<<
name|f
expr_stmt|;
block|}
name|QVector
argument_list|<
name|QGradientBound
argument_list|>
name|gradientBounds
decl_stmt|;
for|for
control|(
name|int
name|step
init|=
name|from
init|;
name|step
operator|<
name|to
condition|;
operator|++
name|step
control|)
block|{
if|if
condition|(
name|reflect
operator|&&
name|step
operator|%
literal|2
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|stops
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QGradientBound
name|b
decl_stmt|;
name|b
operator|.
name|start
operator|=
name|step
operator|+
literal|1
operator|-
name|qBound
argument_list|(
name|qreal
argument_list|(
literal|0.
argument_list|)
argument_list|,
name|stops
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|first
argument_list|,
name|qreal
argument_list|(
literal|1.
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|stop
operator|=
name|step
operator|+
literal|1
operator|-
name|qBound
argument_list|(
name|qreal
argument_list|(
literal|0.
argument_list|)
argument_list|,
name|stops
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|first
argument_list|,
name|qreal
argument_list|(
literal|1.
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|function
operator|=
name|functions
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
name|b
operator|.
name|reverse
operator|=
literal|true
expr_stmt|;
name|gradientBounds
operator|<<
name|b
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stops
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|QGradientBound
name|b
decl_stmt|;
name|b
operator|.
name|start
operator|=
name|step
operator|+
name|qBound
argument_list|(
name|qreal
argument_list|(
literal|0.
argument_list|)
argument_list|,
name|stops
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|first
argument_list|,
name|qreal
argument_list|(
literal|1.
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|stop
operator|=
name|step
operator|+
name|qBound
argument_list|(
name|qreal
argument_list|(
literal|0.
argument_list|)
argument_list|,
name|stops
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|first
argument_list|,
name|qreal
argument_list|(
literal|1.
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|function
operator|=
name|functions
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|b
operator|.
name|reverse
operator|=
literal|false
expr_stmt|;
name|gradientBounds
operator|<<
name|b
expr_stmt|;
block|}
block|}
block|}
comment|// normalize bounds to [0..1]
name|qreal
name|bstart
init|=
name|gradientBounds
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|start
decl_stmt|;
name|qreal
name|bend
init|=
name|gradientBounds
operator|.
name|at
argument_list|(
name|gradientBounds
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|stop
decl_stmt|;
name|qreal
name|norm
init|=
literal|1.
operator|/
operator|(
name|bend
operator|-
name|bstart
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gradientBounds
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|gradientBounds
index|[
name|i
index|]
operator|.
name|start
operator|=
operator|(
name|gradientBounds
index|[
name|i
index|]
operator|.
name|start
operator|-
name|bstart
operator|)
operator|*
name|norm
expr_stmt|;
name|gradientBounds
index|[
name|i
index|]
operator|.
name|stop
operator|=
operator|(
name|gradientBounds
index|[
name|i
index|]
operator|.
name|stop
operator|-
name|bstart
operator|)
operator|*
name|norm
expr_stmt|;
block|}
name|int
name|function
decl_stmt|;
if|if
condition|(
name|gradientBounds
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|function
operator|=
name|addXrefEntry
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QByteArray
name|data
decl_stmt|;
name|QPdf
operator|::
name|ByteStream
name|s
argument_list|(
operator|&
name|data
argument_list|)
decl_stmt|;
name|s
operator|<<
literal|"<<\n"
literal|"/FunctionType 3\n"
literal|"/Domain [0 1]\n"
literal|"/Bounds ["
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|gradientBounds
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|s
operator|<<
name|gradientBounds
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|start
expr_stmt|;
name|s
operator|<<
literal|"]\n"
literal|"/Encode ["
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gradientBounds
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|s
operator|<<
operator|(
name|gradientBounds
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|reverse
condition|?
literal|"1 0 "
else|:
literal|"0 1 "
operator|)
expr_stmt|;
name|s
operator|<<
literal|"]\n"
literal|"/Functions ["
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gradientBounds
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|s
operator|<<
name|gradientBounds
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|function
operator|<<
literal|"0 R "
expr_stmt|;
name|s
operator|<<
literal|"]\n"
literal|">>\n"
expr_stmt|;
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|function
operator|=
name|functions
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|function
return|;
block|}
end_function
begin_function
DECL|function|generateLinearGradientShader
name|int
name|QPdfEnginePrivate
operator|::
name|generateLinearGradientShader
parameter_list|(
specifier|const
name|QLinearGradient
modifier|*
name|gradient
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|bool
name|alpha
parameter_list|)
block|{
name|QPointF
name|start
init|=
name|gradient
operator|->
name|start
argument_list|()
decl_stmt|;
name|QPointF
name|stop
init|=
name|gradient
operator|->
name|finalStop
argument_list|()
decl_stmt|;
name|QPointF
name|offset
init|=
name|stop
operator|-
name|start
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|gradient
operator|->
name|coordinateMode
argument_list|()
operator|==
name|QGradient
operator|::
name|LogicalMode
argument_list|)
expr_stmt|;
name|int
name|from
init|=
literal|0
decl_stmt|;
name|int
name|to
init|=
literal|1
decl_stmt|;
name|bool
name|reflect
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|gradient
operator|->
name|spread
argument_list|()
condition|)
block|{
case|case
name|QGradient
operator|::
name|PadSpread
case|:
break|break;
case|case
name|QGradient
operator|::
name|ReflectSpread
case|:
name|reflect
operator|=
literal|true
expr_stmt|;
comment|// fall through
case|case
name|QGradient
operator|::
name|RepeatSpread
case|:
block|{
comment|// calculate required bounds
name|QRectF
name|pageRect
init|=
name|m_pageLayout
operator|.
name|fullRectPixels
argument_list|(
name|resolution
argument_list|)
decl_stmt|;
name|QTransform
name|inv
init|=
name|matrix
operator|.
name|inverted
argument_list|()
decl_stmt|;
name|QPointF
name|page_rect
index|[
literal|4
index|]
init|=
block|{
name|inv
operator|.
name|map
argument_list|(
name|pageRect
operator|.
name|topLeft
argument_list|()
argument_list|)
block|,
name|inv
operator|.
name|map
argument_list|(
name|pageRect
operator|.
name|topRight
argument_list|()
argument_list|)
block|,
name|inv
operator|.
name|map
argument_list|(
name|pageRect
operator|.
name|bottomLeft
argument_list|()
argument_list|)
block|,
name|inv
operator|.
name|map
argument_list|(
argument|pageRect.bottomRight()
argument_list|)
block|}
decl_stmt|;
name|qreal
name|length
init|=
name|offset
operator|.
name|x
argument_list|()
operator|*
name|offset
operator|.
name|x
argument_list|()
operator|+
name|offset
operator|.
name|y
argument_list|()
operator|*
name|offset
operator|.
name|y
argument_list|()
decl_stmt|;
comment|// find the max and min values in offset and orth direction that are needed to cover
comment|// the whole page
name|from
operator|=
name|INT_MAX
expr_stmt|;
name|to
operator|=
name|INT_MIN
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|off
init|=
operator|(
operator|(
name|page_rect
index|[
name|i
index|]
operator|.
name|x
argument_list|()
operator|-
name|start
operator|.
name|x
argument_list|()
operator|)
operator|*
name|offset
operator|.
name|x
argument_list|()
operator|+
operator|(
name|page_rect
index|[
name|i
index|]
operator|.
name|y
argument_list|()
operator|-
name|start
operator|.
name|y
argument_list|()
operator|)
operator|*
name|offset
operator|.
name|y
argument_list|()
operator|)
operator|/
name|length
decl_stmt|;
name|from
operator|=
name|qMin
argument_list|(
name|from
argument_list|,
name|qFloor
argument_list|(
name|off
argument_list|)
argument_list|)
expr_stmt|;
name|to
operator|=
name|qMax
argument_list|(
name|to
argument_list|,
name|qCeil
argument_list|(
name|off
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stop
operator|=
name|start
operator|+
name|to
operator|*
name|offset
expr_stmt|;
name|start
operator|=
name|start
operator|+
name|from
operator|*
name|offset
expr_stmt|;
block|\
break|break;
block|}
block|}
name|int
name|function
init|=
name|createShadingFunction
argument_list|(
name|gradient
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|reflect
argument_list|,
name|alpha
argument_list|)
decl_stmt|;
name|QByteArray
name|shader
decl_stmt|;
name|QPdf
operator|::
name|ByteStream
name|s
argument_list|(
operator|&
name|shader
argument_list|)
decl_stmt|;
name|s
operator|<<
literal|"<<\n"
literal|"/ShadingType 2\n"
literal|"/ColorSpace "
operator|<<
operator|(
name|alpha
condition|?
literal|"/DeviceGray\n"
else|:
literal|"/DeviceRGB\n"
operator|)
operator|<<
literal|"/AntiAlias true\n"
literal|"/Coords ["
operator|<<
name|start
operator|.
name|x
argument_list|()
operator|<<
name|start
operator|.
name|y
argument_list|()
operator|<<
name|stop
operator|.
name|x
argument_list|()
operator|<<
name|stop
operator|.
name|y
argument_list|()
operator|<<
literal|"]\n"
literal|"/Extend [true true]\n"
literal|"/Function "
operator|<<
name|function
operator|<<
literal|"0 R\n"
literal|">>\n"
literal|"endobj\n"
expr_stmt|;
name|int
name|shaderObject
init|=
name|addXrefEntry
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|shader
argument_list|)
expr_stmt|;
return|return
name|shaderObject
return|;
block|}
end_function
begin_function
DECL|function|generateRadialGradientShader
name|int
name|QPdfEnginePrivate
operator|::
name|generateRadialGradientShader
parameter_list|(
specifier|const
name|QRadialGradient
modifier|*
name|gradient
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|bool
name|alpha
parameter_list|)
block|{
name|QPointF
name|p1
init|=
name|gradient
operator|->
name|center
argument_list|()
decl_stmt|;
name|qreal
name|r1
init|=
name|gradient
operator|->
name|centerRadius
argument_list|()
decl_stmt|;
name|QPointF
name|p0
init|=
name|gradient
operator|->
name|focalPoint
argument_list|()
decl_stmt|;
name|qreal
name|r0
init|=
name|gradient
operator|->
name|focalRadius
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|gradient
operator|->
name|coordinateMode
argument_list|()
operator|==
name|QGradient
operator|::
name|LogicalMode
argument_list|)
expr_stmt|;
name|int
name|from
init|=
literal|0
decl_stmt|;
name|int
name|to
init|=
literal|1
decl_stmt|;
name|bool
name|reflect
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|gradient
operator|->
name|spread
argument_list|()
condition|)
block|{
case|case
name|QGradient
operator|::
name|PadSpread
case|:
break|break;
case|case
name|QGradient
operator|::
name|ReflectSpread
case|:
name|reflect
operator|=
literal|true
expr_stmt|;
comment|// fall through
case|case
name|QGradient
operator|::
name|RepeatSpread
case|:
block|{
name|Q_ASSERT
argument_list|(
name|qFuzzyIsNull
argument_list|(
name|r0
argument_list|)
argument_list|)
expr_stmt|;
comment|// QPainter emulates if this is not 0
name|QRectF
name|pageRect
init|=
name|m_pageLayout
operator|.
name|fullRectPixels
argument_list|(
name|resolution
argument_list|)
decl_stmt|;
name|QTransform
name|inv
init|=
name|matrix
operator|.
name|inverted
argument_list|()
decl_stmt|;
name|QPointF
name|page_rect
index|[
literal|4
index|]
init|=
block|{
name|inv
operator|.
name|map
argument_list|(
name|pageRect
operator|.
name|topLeft
argument_list|()
argument_list|)
block|,
name|inv
operator|.
name|map
argument_list|(
name|pageRect
operator|.
name|topRight
argument_list|()
argument_list|)
block|,
name|inv
operator|.
name|map
argument_list|(
name|pageRect
operator|.
name|bottomLeft
argument_list|()
argument_list|)
block|,
name|inv
operator|.
name|map
argument_list|(
argument|pageRect.bottomRight()
argument_list|)
block|}
decl_stmt|;
comment|// increase to until the whole page fits into it
name|bool
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|QPointF
name|center
init|=
name|QPointF
argument_list|(
name|p0
operator|.
name|x
argument_list|()
operator|+
name|to
operator|*
operator|(
name|p1
operator|.
name|x
argument_list|()
operator|-
name|p0
operator|.
name|x
argument_list|()
operator|)
argument_list|,
name|p0
operator|.
name|y
argument_list|()
operator|+
name|to
operator|*
operator|(
name|p1
operator|.
name|y
argument_list|()
operator|-
name|p0
operator|.
name|y
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|double
name|radius
init|=
name|r0
operator|+
name|to
operator|*
operator|(
name|r1
operator|-
name|r0
operator|)
decl_stmt|;
name|double
name|r2
init|=
name|radius
operator|*
name|radius
decl_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|QPointF
name|off
init|=
name|page_rect
index|[
name|i
index|]
operator|-
name|center
decl_stmt|;
if|if
condition|(
name|off
operator|.
name|x
argument_list|()
operator|*
name|off
operator|.
name|x
argument_list|()
operator|+
name|off
operator|.
name|y
argument_list|()
operator|*
name|off
operator|.
name|y
argument_list|()
operator|>
name|r2
condition|)
block|{
operator|++
name|to
expr_stmt|;
name|done
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
name|p1
operator|=
name|QPointF
argument_list|(
name|p0
operator|.
name|x
argument_list|()
operator|+
name|to
operator|*
operator|(
name|p1
operator|.
name|x
argument_list|()
operator|-
name|p0
operator|.
name|x
argument_list|()
operator|)
argument_list|,
name|p0
operator|.
name|y
argument_list|()
operator|+
name|to
operator|*
operator|(
name|p1
operator|.
name|y
argument_list|()
operator|-
name|p0
operator|.
name|y
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|r1
operator|=
name|r0
operator|+
name|to
operator|*
operator|(
name|r1
operator|-
name|r0
operator|)
expr_stmt|;
break|break;
block|}
block|}
name|int
name|function
init|=
name|createShadingFunction
argument_list|(
name|gradient
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|reflect
argument_list|,
name|alpha
argument_list|)
decl_stmt|;
name|QByteArray
name|shader
decl_stmt|;
name|QPdf
operator|::
name|ByteStream
name|s
argument_list|(
operator|&
name|shader
argument_list|)
decl_stmt|;
name|s
operator|<<
literal|"<<\n"
literal|"/ShadingType 3\n"
literal|"/ColorSpace "
operator|<<
operator|(
name|alpha
condition|?
literal|"/DeviceGray\n"
else|:
literal|"/DeviceRGB\n"
operator|)
operator|<<
literal|"/AntiAlias true\n"
literal|"/Domain [0 1]\n"
literal|"/Coords ["
operator|<<
name|p0
operator|.
name|x
argument_list|()
operator|<<
name|p0
operator|.
name|y
argument_list|()
operator|<<
name|r0
operator|<<
name|p1
operator|.
name|x
argument_list|()
operator|<<
name|p1
operator|.
name|y
argument_list|()
operator|<<
name|r1
operator|<<
literal|"]\n"
literal|"/Extend [true true]\n"
literal|"/Function "
operator|<<
name|function
operator|<<
literal|"0 R\n"
literal|">>\n"
literal|"endobj\n"
expr_stmt|;
name|int
name|shaderObject
init|=
name|addXrefEntry
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|shader
argument_list|)
expr_stmt|;
return|return
name|shaderObject
return|;
block|}
end_function
begin_function
DECL|function|generateGradientShader
name|int
name|QPdfEnginePrivate
operator|::
name|generateGradientShader
parameter_list|(
specifier|const
name|QGradient
modifier|*
name|gradient
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|bool
name|alpha
parameter_list|)
block|{
switch|switch
condition|(
name|gradient
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QGradient
operator|::
name|LinearGradient
case|:
return|return
name|generateLinearGradientShader
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|QLinearGradient
operator|*
argument_list|>
argument_list|(
name|gradient
argument_list|)
argument_list|,
name|matrix
argument_list|,
name|alpha
argument_list|)
return|;
case|case
name|QGradient
operator|::
name|RadialGradient
case|:
return|return
name|generateRadialGradientShader
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|QRadialGradient
operator|*
argument_list|>
argument_list|(
name|gradient
argument_list|)
argument_list|,
name|matrix
argument_list|,
name|alpha
argument_list|)
return|;
case|case
name|QGradient
operator|::
name|ConicalGradient
case|:
default|default:
name|qWarning
argument_list|()
operator|<<
literal|"Implement me!"
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|gradientBrush
name|int
name|QPdfEnginePrivate
operator|::
name|gradientBrush
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|b
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|int
modifier|*
name|gStateObject
parameter_list|)
block|{
specifier|const
name|QGradient
modifier|*
name|gradient
init|=
name|b
operator|.
name|gradient
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|gradient
operator|||
name|gradient
operator|->
name|coordinateMode
argument_list|()
operator|!=
name|QGradient
operator|::
name|LogicalMode
condition|)
return|return
literal|0
return|;
name|QRectF
name|pageRect
init|=
name|m_pageLayout
operator|.
name|fullRectPixels
argument_list|(
name|resolution
argument_list|)
decl_stmt|;
name|QTransform
name|m
init|=
name|b
operator|.
name|transform
argument_list|()
operator|*
name|matrix
decl_stmt|;
name|int
name|shaderObject
init|=
name|generateGradientShader
argument_list|(
name|gradient
argument_list|,
name|m
argument_list|)
decl_stmt|;
name|QByteArray
name|str
decl_stmt|;
name|QPdf
operator|::
name|ByteStream
name|s
argument_list|(
operator|&
name|str
argument_list|)
decl_stmt|;
name|s
operator|<<
literal|"<<\n"
literal|"/Type /Pattern\n"
literal|"/PatternType 2\n"
literal|"/Shading "
operator|<<
name|shaderObject
operator|<<
literal|"0 R\n"
literal|"/Matrix ["
operator|<<
name|m
operator|.
name|m11
argument_list|()
operator|<<
name|m
operator|.
name|m12
argument_list|()
operator|<<
name|m
operator|.
name|m21
argument_list|()
operator|<<
name|m
operator|.
name|m22
argument_list|()
operator|<<
name|m
operator|.
name|dx
argument_list|()
operator|<<
name|m
operator|.
name|dy
argument_list|()
operator|<<
literal|"]\n"
expr_stmt|;
name|s
operator|<<
literal|">>\n"
literal|"endobj\n"
expr_stmt|;
name|int
name|patternObj
init|=
name|addXrefEntry
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|currentPage
operator|->
name|patterns
operator|.
name|append
argument_list|(
name|patternObj
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|b
operator|.
name|isOpaque
argument_list|()
condition|)
block|{
name|bool
name|ca
init|=
literal|true
decl_stmt|;
name|QGradientStops
name|stops
init|=
name|gradient
operator|->
name|stops
argument_list|()
decl_stmt|;
name|int
name|a
init|=
name|stops
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|second
operator|.
name|alpha
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|stops
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|stops
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
operator|.
name|alpha
argument_list|()
operator|!=
name|a
condition|)
block|{
name|ca
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|ca
condition|)
block|{
operator|*
name|gStateObject
operator|=
name|addConstantAlphaObject
argument_list|(
name|stops
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|second
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|alphaShaderObject
init|=
name|generateGradientShader
argument_list|(
name|gradient
argument_list|,
name|m
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QByteArray
name|content
decl_stmt|;
name|QPdf
operator|::
name|ByteStream
name|c
argument_list|(
operator|&
name|content
argument_list|)
decl_stmt|;
name|c
operator|<<
literal|"/Shader"
operator|<<
name|alphaShaderObject
operator|<<
literal|"sh\n"
expr_stmt|;
name|QByteArray
name|form
decl_stmt|;
name|QPdf
operator|::
name|ByteStream
name|f
argument_list|(
operator|&
name|form
argument_list|)
decl_stmt|;
name|f
operator|<<
literal|"<<\n"
literal|"/Type /XObject\n"
literal|"/Subtype /Form\n"
literal|"/BBox [0 0 "
operator|<<
name|pageRect
operator|.
name|width
argument_list|()
operator|<<
name|pageRect
operator|.
name|height
argument_list|()
operator|<<
literal|"]\n"
literal|"/Group<</S /Transparency>>\n"
literal|"/Resources<<\n"
literal|"/Shading<< /Shader"
operator|<<
name|alphaShaderObject
operator|<<
name|alphaShaderObject
operator|<<
literal|"0 R>>\n"
literal|">>\n"
expr_stmt|;
name|f
operator|<<
literal|"/Length "
operator|<<
name|content
operator|.
name|length
argument_list|()
operator|<<
literal|"\n"
literal|">>\n"
literal|"stream\n"
operator|<<
name|content
operator|<<
literal|"endstream\n"
literal|"endobj\n"
expr_stmt|;
name|int
name|softMaskFormObject
init|=
name|addXrefEntry
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|form
argument_list|)
expr_stmt|;
operator|*
name|gStateObject
operator|=
name|addXrefEntry
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"<< /SMask<< /S /Alpha /G %d 0 R>>>>\n"
literal|"endobj\n"
argument_list|,
name|softMaskFormObject
argument_list|)
expr_stmt|;
name|currentPage
operator|->
name|graphicStates
operator|.
name|append
argument_list|(
operator|*
name|gStateObject
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|patternObj
return|;
block|}
end_function
begin_function
DECL|function|addConstantAlphaObject
name|int
name|QPdfEnginePrivate
operator|::
name|addConstantAlphaObject
parameter_list|(
name|int
name|brushAlpha
parameter_list|,
name|int
name|penAlpha
parameter_list|)
block|{
if|if
condition|(
name|brushAlpha
operator|==
literal|255
operator|&&
name|penAlpha
operator|==
literal|255
condition|)
return|return
literal|0
return|;
name|int
name|object
init|=
name|alphaCache
operator|.
name|value
argument_list|(
name|QPair
argument_list|<
name|uint
argument_list|,
name|uint
argument_list|>
argument_list|(
name|brushAlpha
argument_list|,
name|penAlpha
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|object
condition|)
block|{
name|object
operator|=
name|addXrefEntry
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QByteArray
name|alphaDef
decl_stmt|;
name|QPdf
operator|::
name|ByteStream
name|s
argument_list|(
operator|&
name|alphaDef
argument_list|)
decl_stmt|;
name|s
operator|<<
literal|"<<\n/ca "
operator|<<
operator|(
name|brushAlpha
operator|/
name|qreal
argument_list|(
literal|255.
argument_list|)
operator|)
operator|<<
literal|'\n'
expr_stmt|;
name|s
operator|<<
literal|"/CA "
operator|<<
operator|(
name|penAlpha
operator|/
name|qreal
argument_list|(
literal|255.
argument_list|)
operator|)
operator|<<
literal|"\n>>"
expr_stmt|;
name|xprintf
argument_list|(
literal|"%s\nendobj\n"
argument_list|,
name|alphaDef
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|alphaCache
operator|.
name|insert
argument_list|(
name|QPair
argument_list|<
name|uint
argument_list|,
name|uint
argument_list|>
argument_list|(
name|brushAlpha
argument_list|,
name|penAlpha
argument_list|)
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentPage
operator|->
name|graphicStates
operator|.
name|indexOf
argument_list|(
name|object
argument_list|)
operator|<
literal|0
condition|)
name|currentPage
operator|->
name|graphicStates
operator|.
name|append
argument_list|(
name|object
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
end_function
begin_function
DECL|function|addBrushPattern
name|int
name|QPdfEnginePrivate
operator|::
name|addBrushPattern
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|m
parameter_list|,
name|bool
modifier|*
name|specifyColor
parameter_list|,
name|int
modifier|*
name|gStateObject
parameter_list|)
block|{
name|int
name|paintType
init|=
literal|2
decl_stmt|;
comment|// Uncolored tiling
name|int
name|w
init|=
literal|8
decl_stmt|;
name|int
name|h
init|=
literal|8
decl_stmt|;
operator|*
name|specifyColor
operator|=
literal|true
expr_stmt|;
operator|*
name|gStateObject
operator|=
literal|0
expr_stmt|;
name|QTransform
name|matrix
init|=
name|m
decl_stmt|;
name|matrix
operator|.
name|translate
argument_list|(
name|brushOrigin
operator|.
name|x
argument_list|()
argument_list|,
name|brushOrigin
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|matrix
operator|=
name|matrix
operator|*
name|pageMatrix
argument_list|()
expr_stmt|;
comment|//qDebug()<< brushOrigin<< matrix;
name|Qt
operator|::
name|BrushStyle
name|style
init|=
name|brush
operator|.
name|style
argument_list|()
decl_stmt|;
if|if
condition|(
name|style
operator|==
name|Qt
operator|::
name|LinearGradientPattern
operator|||
name|style
operator|==
name|Qt
operator|::
name|RadialGradientPattern
condition|)
block|{
comment|//&& style<= Qt::ConicalGradientPattern) {
operator|*
name|specifyColor
operator|=
literal|false
expr_stmt|;
return|return
name|gradientBrush
argument_list|(
name|brush
argument_list|,
name|matrix
argument_list|,
name|gStateObject
argument_list|)
return|;
block|}
if|if
condition|(
operator|(
operator|!
name|brush
operator|.
name|isOpaque
argument_list|()
operator|&&
name|brush
operator|.
name|style
argument_list|()
operator|<
name|Qt
operator|::
name|LinearGradientPattern
operator|)
operator|||
name|opacity
operator|!=
literal|1.0
condition|)
operator|*
name|gStateObject
operator|=
name|addConstantAlphaObject
argument_list|(
name|qRound
argument_list|(
name|brush
operator|.
name|color
argument_list|()
operator|.
name|alpha
argument_list|()
operator|*
name|opacity
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|pen
operator|.
name|color
argument_list|()
operator|.
name|alpha
argument_list|()
operator|*
name|opacity
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|imageObject
init|=
operator|-
literal|1
decl_stmt|;
name|QByteArray
name|pattern
init|=
name|QPdf
operator|::
name|patternForBrush
argument_list|(
name|brush
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|brush
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|TexturePattern
condition|)
return|return
literal|0
return|;
name|QImage
name|image
init|=
name|brush
operator|.
name|textureImage
argument_list|()
decl_stmt|;
name|bool
name|bitmap
init|=
literal|true
decl_stmt|;
name|imageObject
operator|=
name|addImage
argument_list|(
name|image
argument_list|,
operator|&
name|bitmap
argument_list|,
name|image
operator|.
name|cacheKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|imageObject
operator|!=
operator|-
literal|1
condition|)
block|{
name|QImage
operator|::
name|Format
name|f
init|=
name|image
operator|.
name|format
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|!=
name|QImage
operator|::
name|Format_MonoLSB
operator|&&
name|f
operator|!=
name|QImage
operator|::
name|Format_Mono
condition|)
block|{
name|paintType
operator|=
literal|1
expr_stmt|;
comment|// Colored tiling
operator|*
name|specifyColor
operator|=
literal|false
expr_stmt|;
block|}
name|w
operator|=
name|image
operator|.
name|width
argument_list|()
expr_stmt|;
name|h
operator|=
name|image
operator|.
name|height
argument_list|()
expr_stmt|;
name|QTransform
name|m
argument_list|(
name|w
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|h
argument_list|,
literal|0
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|QPdf
operator|::
name|ByteStream
name|s
argument_list|(
operator|&
name|pattern
argument_list|)
decl_stmt|;
name|s
operator|<<
name|QPdf
operator|::
name|generateMatrix
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|s
operator|<<
literal|"/Im"
operator|<<
name|imageObject
operator|<<
literal|" Do\n"
expr_stmt|;
block|}
block|}
name|QByteArray
name|str
decl_stmt|;
name|QPdf
operator|::
name|ByteStream
name|s
argument_list|(
operator|&
name|str
argument_list|)
decl_stmt|;
name|s
operator|<<
literal|"<<\n"
literal|"/Type /Pattern\n"
literal|"/PatternType 1\n"
literal|"/PaintType "
operator|<<
name|paintType
operator|<<
literal|"\n"
literal|"/TilingType 1\n"
literal|"/BBox [0 0 "
operator|<<
name|w
operator|<<
name|h
operator|<<
literal|"]\n"
literal|"/XStep "
operator|<<
name|w
operator|<<
literal|"\n"
literal|"/YStep "
operator|<<
name|h
operator|<<
literal|"\n"
literal|"/Matrix ["
operator|<<
name|matrix
operator|.
name|m11
argument_list|()
operator|<<
name|matrix
operator|.
name|m12
argument_list|()
operator|<<
name|matrix
operator|.
name|m21
argument_list|()
operator|<<
name|matrix
operator|.
name|m22
argument_list|()
operator|<<
name|matrix
operator|.
name|dx
argument_list|()
operator|<<
name|matrix
operator|.
name|dy
argument_list|()
operator|<<
literal|"]\n"
literal|"/Resources \n<< "
expr_stmt|;
comment|// open resource tree
if|if
condition|(
name|imageObject
operator|>
literal|0
condition|)
block|{
name|s
operator|<<
literal|"/XObject<< /Im"
operator|<<
name|imageObject
operator|<<
literal|' '
operator|<<
name|imageObject
operator|<<
literal|"0 R>> "
expr_stmt|;
block|}
name|s
operator|<<
literal|">>\n"
literal|"/Length "
operator|<<
name|pattern
operator|.
name|length
argument_list|()
operator|<<
literal|"\n"
literal|">>\n"
literal|"stream\n"
operator|<<
name|pattern
operator|<<
literal|"endstream\n"
literal|"endobj\n"
expr_stmt|;
name|int
name|patternObj
init|=
name|addXrefEntry
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|currentPage
operator|->
name|patterns
operator|.
name|append
argument_list|(
name|patternObj
argument_list|)
expr_stmt|;
return|return
name|patternObj
return|;
block|}
end_function
begin_function
DECL|function|is_monochrome
specifier|static
specifier|inline
name|bool
name|is_monochrome
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|QRgb
argument_list|>
modifier|&
name|colorTable
parameter_list|)
block|{
return|return
name|colorTable
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|&&
name|colorTable
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QColor
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
operator|.
name|rgba
argument_list|()
operator|&&
name|colorTable
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|==
name|QColor
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
operator|.
name|rgba
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!  * Adds an image to the pdf and return the pdf-object id. Returns -1 if adding the image failed.  */
end_comment
begin_function
DECL|function|addImage
name|int
name|QPdfEnginePrivate
operator|::
name|addImage
parameter_list|(
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
name|bool
modifier|*
name|bitmap
parameter_list|,
name|qint64
name|serial_no
parameter_list|)
block|{
if|if
condition|(
name|img
operator|.
name|isNull
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|object
init|=
name|imageCache
operator|.
name|value
argument_list|(
name|serial_no
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
condition|)
return|return
name|object
return|;
name|QImage
name|image
init|=
name|img
decl_stmt|;
name|QImage
operator|::
name|Format
name|format
init|=
name|image
operator|.
name|format
argument_list|()
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|1
operator|&&
operator|*
name|bitmap
operator|&&
name|is_monochrome
argument_list|(
name|img
operator|.
name|colorTable
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|format
operator|==
name|QImage
operator|::
name|Format_MonoLSB
condition|)
name|image
operator|=
name|image
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_Mono
argument_list|)
expr_stmt|;
name|format
operator|=
name|QImage
operator|::
name|Format_Mono
expr_stmt|;
block|}
else|else
block|{
operator|*
name|bitmap
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|format
operator|!=
name|QImage
operator|::
name|Format_RGB32
operator|&&
name|format
operator|!=
name|QImage
operator|::
name|Format_ARGB32
condition|)
block|{
name|image
operator|=
name|image
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
name|format
operator|=
name|QImage
operator|::
name|Format_ARGB32
expr_stmt|;
block|}
block|}
name|int
name|w
init|=
name|image
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|image
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|d
init|=
name|image
operator|.
name|depth
argument_list|()
decl_stmt|;
if|if
condition|(
name|format
operator|==
name|QImage
operator|::
name|Format_Mono
condition|)
block|{
name|int
name|bytesPerLine
init|=
operator|(
name|w
operator|+
literal|7
operator|)
operator|>>
literal|3
decl_stmt|;
name|QByteArray
name|data
decl_stmt|;
name|data
operator|.
name|resize
argument_list|(
name|bytesPerLine
operator|*
name|h
argument_list|)
expr_stmt|;
name|char
modifier|*
name|rawdata
init|=
name|data
operator|.
name|data
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
name|memcpy
argument_list|(
name|rawdata
argument_list|,
name|image
operator|.
name|constScanLine
argument_list|(
name|y
argument_list|)
argument_list|,
name|bytesPerLine
argument_list|)
expr_stmt|;
name|rawdata
operator|+=
name|bytesPerLine
expr_stmt|;
block|}
name|object
operator|=
name|writeImage
argument_list|(
name|data
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|d
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QByteArray
name|softMaskData
decl_stmt|;
name|bool
name|dct
init|=
literal|false
decl_stmt|;
name|QByteArray
name|imageData
decl_stmt|;
name|bool
name|hasAlpha
init|=
literal|false
decl_stmt|;
name|bool
name|hasMask
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|QImageWriter
operator|::
name|supportedImageFormats
argument_list|()
operator|.
name|contains
argument_list|(
literal|"jpeg"
argument_list|)
operator|&&
operator|!
name|grayscale
condition|)
block|{
name|QBuffer
name|buffer
argument_list|(
operator|&
name|imageData
argument_list|)
decl_stmt|;
name|QImageWriter
name|writer
argument_list|(
operator|&
name|buffer
argument_list|,
literal|"jpeg"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setQuality
argument_list|(
literal|94
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|image
argument_list|)
expr_stmt|;
name|dct
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|format
operator|!=
name|QImage
operator|::
name|Format_RGB32
condition|)
block|{
name|softMaskData
operator|.
name|resize
argument_list|(
name|w
operator|*
name|h
argument_list|)
expr_stmt|;
name|uchar
modifier|*
name|sdata
init|=
operator|(
name|uchar
operator|*
operator|)
name|softMaskData
operator|.
name|data
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
specifier|const
name|QRgb
modifier|*
name|rgb
init|=
operator|(
specifier|const
name|QRgb
operator|*
operator|)
name|image
operator|.
name|constScanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
name|uchar
name|alpha
init|=
name|qAlpha
argument_list|(
operator|*
name|rgb
argument_list|)
decl_stmt|;
operator|*
name|sdata
operator|++
operator|=
name|alpha
expr_stmt|;
name|hasMask
operator||=
operator|(
name|alpha
operator|<
literal|255
operator|)
expr_stmt|;
name|hasAlpha
operator||=
operator|(
name|alpha
operator|!=
literal|0
operator|&&
name|alpha
operator|!=
literal|255
operator|)
expr_stmt|;
operator|++
name|rgb
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|imageData
operator|.
name|resize
argument_list|(
name|grayscale
condition|?
name|w
operator|*
name|h
else|:
literal|3
operator|*
name|w
operator|*
name|h
argument_list|)
expr_stmt|;
name|uchar
modifier|*
name|data
init|=
operator|(
name|uchar
operator|*
operator|)
name|imageData
operator|.
name|data
argument_list|()
decl_stmt|;
name|softMaskData
operator|.
name|resize
argument_list|(
name|w
operator|*
name|h
argument_list|)
expr_stmt|;
name|uchar
modifier|*
name|sdata
init|=
operator|(
name|uchar
operator|*
operator|)
name|softMaskData
operator|.
name|data
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
specifier|const
name|QRgb
modifier|*
name|rgb
init|=
operator|(
specifier|const
name|QRgb
operator|*
operator|)
name|image
operator|.
name|constScanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|grayscale
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
operator|*
operator|(
name|data
operator|++
operator|)
operator|=
name|qGray
argument_list|(
operator|*
name|rgb
argument_list|)
expr_stmt|;
name|uchar
name|alpha
init|=
name|qAlpha
argument_list|(
operator|*
name|rgb
argument_list|)
decl_stmt|;
operator|*
name|sdata
operator|++
operator|=
name|alpha
expr_stmt|;
name|hasMask
operator||=
operator|(
name|alpha
operator|<
literal|255
operator|)
expr_stmt|;
name|hasAlpha
operator||=
operator|(
name|alpha
operator|!=
literal|0
operator|&&
name|alpha
operator|!=
literal|255
operator|)
expr_stmt|;
operator|++
name|rgb
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
operator|*
operator|(
name|data
operator|++
operator|)
operator|=
name|qRed
argument_list|(
operator|*
name|rgb
argument_list|)
expr_stmt|;
operator|*
operator|(
name|data
operator|++
operator|)
operator|=
name|qGreen
argument_list|(
operator|*
name|rgb
argument_list|)
expr_stmt|;
operator|*
operator|(
name|data
operator|++
operator|)
operator|=
name|qBlue
argument_list|(
operator|*
name|rgb
argument_list|)
expr_stmt|;
name|uchar
name|alpha
init|=
name|qAlpha
argument_list|(
operator|*
name|rgb
argument_list|)
decl_stmt|;
operator|*
name|sdata
operator|++
operator|=
name|alpha
expr_stmt|;
name|hasMask
operator||=
operator|(
name|alpha
operator|<
literal|255
operator|)
expr_stmt|;
name|hasAlpha
operator||=
operator|(
name|alpha
operator|!=
literal|0
operator|&&
name|alpha
operator|!=
literal|255
operator|)
expr_stmt|;
operator|++
name|rgb
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|format
operator|==
name|QImage
operator|::
name|Format_RGB32
condition|)
name|hasAlpha
operator|=
name|hasMask
operator|=
literal|false
expr_stmt|;
block|}
name|int
name|maskObject
init|=
literal|0
decl_stmt|;
name|int
name|softMaskObject
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|hasAlpha
condition|)
block|{
name|softMaskObject
operator|=
name|writeImage
argument_list|(
name|softMaskData
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hasMask
condition|)
block|{
comment|// dither the soft mask to 1bit and add it. This also helps PDF viewers
comment|// without transparency support
name|int
name|bytesPerLine
init|=
operator|(
name|w
operator|+
literal|7
operator|)
operator|>>
literal|3
decl_stmt|;
name|QByteArray
name|mask
argument_list|(
name|bytesPerLine
operator|*
name|h
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|uchar
modifier|*
name|mdata
init|=
operator|(
name|uchar
operator|*
operator|)
name|mask
operator|.
name|data
argument_list|()
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|sdata
init|=
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|softMaskData
operator|.
name|constData
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
operator|*
name|sdata
condition|)
name|mdata
index|[
name|x
operator|>>
literal|3
index|]
operator||=
operator|(
literal|0x80
operator|>>
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
expr_stmt|;
operator|++
name|sdata
expr_stmt|;
block|}
name|mdata
operator|+=
name|bytesPerLine
expr_stmt|;
block|}
name|maskObject
operator|=
name|writeImage
argument_list|(
name|mask
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|object
operator|=
name|writeImage
argument_list|(
name|imageData
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|grayscale
condition|?
literal|8
else|:
literal|32
argument_list|,
name|maskObject
argument_list|,
name|softMaskObject
argument_list|,
name|dct
argument_list|)
expr_stmt|;
block|}
name|imageCache
operator|.
name|insert
argument_list|(
name|serial_no
argument_list|,
name|object
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
end_function
begin_function
DECL|function|drawTextItem
name|void
name|QPdfEnginePrivate
operator|::
name|drawTextItem
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QTextItemInt
modifier|&
name|ti
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|ti
operator|.
name|charFormat
operator|.
name|isAnchor
argument_list|()
condition|)
block|{
name|qreal
name|size
init|=
name|ti
operator|.
name|fontEngine
operator|->
name|fontDef
operator|.
name|pixelSize
decl_stmt|;
name|int
name|synthesized
init|=
name|ti
operator|.
name|fontEngine
operator|->
name|synthesized
argument_list|()
decl_stmt|;
name|qreal
name|stretch
init|=
name|synthesized
operator|&
name|QFontEngine
operator|::
name|SynthesizedStretch
condition|?
name|ti
operator|.
name|fontEngine
operator|->
name|fontDef
operator|.
name|stretch
operator|/
literal|100.
else|:
literal|1.
decl_stmt|;
name|QTransform
name|trans
decl_stmt|;
comment|// Build text rendering matrix (Trm). We need it to map the text area to user
comment|// space units on the PDF page.
name|trans
operator|=
name|QTransform
argument_list|(
name|size
operator|*
name|stretch
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Apply text matrix (Tm).
name|trans
operator|*=
name|QTransform
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
comment|// Apply page displacement (Identity for first page).
name|trans
operator|*=
name|stroker
operator|.
name|matrix
expr_stmt|;
comment|// Apply Current Transformation Matrix (CTM)
name|trans
operator|*=
name|pageMatrix
argument_list|()
expr_stmt|;
name|qreal
name|x1
decl_stmt|,
name|y1
decl_stmt|,
name|x2
decl_stmt|,
name|y2
decl_stmt|;
name|trans
operator|.
name|map
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|x1
argument_list|,
operator|&
name|y1
argument_list|)
expr_stmt|;
name|trans
operator|.
name|map
argument_list|(
name|ti
operator|.
name|width
operator|.
name|toReal
argument_list|()
operator|/
name|size
argument_list|,
operator|(
name|ti
operator|.
name|ascent
operator|.
name|toReal
argument_list|()
operator|-
name|ti
operator|.
name|descent
operator|.
name|toReal
argument_list|()
operator|)
operator|/
name|size
argument_list|,
operator|&
name|x2
argument_list|,
operator|&
name|y2
argument_list|)
expr_stmt|;
name|uint
name|annot
init|=
name|addXrefEntry
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QByteArray
name|x1s
decl_stmt|,
name|y1s
decl_stmt|,
name|x2s
decl_stmt|,
name|y2s
decl_stmt|;
name|x1s
operator|.
name|setNum
argument_list|(
cast|static_cast
argument_list|<
name|double
argument_list|>
argument_list|(
name|x1
argument_list|)
argument_list|,
literal|'f'
argument_list|)
expr_stmt|;
name|y1s
operator|.
name|setNum
argument_list|(
cast|static_cast
argument_list|<
name|double
argument_list|>
argument_list|(
name|y1
argument_list|)
argument_list|,
literal|'f'
argument_list|)
expr_stmt|;
name|x2s
operator|.
name|setNum
argument_list|(
cast|static_cast
argument_list|<
name|double
argument_list|>
argument_list|(
name|x2
argument_list|)
argument_list|,
literal|'f'
argument_list|)
expr_stmt|;
name|y2s
operator|.
name|setNum
argument_list|(
cast|static_cast
argument_list|<
name|double
argument_list|>
argument_list|(
name|y2
argument_list|)
argument_list|,
literal|'f'
argument_list|)
expr_stmt|;
name|QByteArray
name|rectData
init|=
name|x1s
operator|+
literal|' '
operator|+
name|y1s
operator|+
literal|' '
operator|+
name|x2s
operator|+
literal|' '
operator|+
name|y2s
decl_stmt|;
name|xprintf
argument_list|(
literal|"<<\n/Type /Annot\n/Subtype /Link\n/Rect ["
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
name|rectData
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_DEBUG_PDF_LINKS
name|xprintf
argument_list|(
literal|"]\n/Border [16 16 1]\n/A<<\n"
argument_list|)
expr_stmt|;
else|#
directive|else
name|xprintf
argument_list|(
literal|"]\n/Border [0 0 0]\n/A<<\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|xprintf
argument_list|(
literal|"/Type /Action\n/S /URI\n/URI (%s)\n"
argument_list|,
name|ti
operator|.
name|charFormat
operator|.
name|anchorHref
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|">>\n>>\n"
argument_list|)
expr_stmt|;
name|xprintf
argument_list|(
literal|"endobj\n"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|currentPage
operator|->
name|annotations
operator|.
name|contains
argument_list|(
name|annot
argument_list|)
condition|)
block|{
name|currentPage
operator|->
name|annotations
operator|.
name|append
argument_list|(
name|annot
argument_list|)
expr_stmt|;
block|}
block|}
name|QFontEngine
modifier|*
name|fe
init|=
name|ti
operator|.
name|fontEngine
decl_stmt|;
name|QFontEngine
operator|::
name|FaceId
name|face_id
init|=
name|fe
operator|->
name|faceId
argument_list|()
decl_stmt|;
name|bool
name|noEmbed
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|embedFonts
operator|||
name|face_id
operator|.
name|filename
operator|.
name|isEmpty
argument_list|()
operator|||
name|fe
operator|->
name|fsType
operator|&
literal|0x200
comment|/* bitmap embedding only */
operator|||
name|fe
operator|->
name|fsType
operator|==
literal|2
comment|/* no embedding allowed */
condition|)
block|{
operator|*
name|currentPage
operator|<<
literal|"Q\n"
expr_stmt|;
name|q
operator|->
name|QPaintEngine
operator|::
name|drawTextItem
argument_list|(
name|p
argument_list|,
name|ti
argument_list|)
expr_stmt|;
operator|*
name|currentPage
operator|<<
literal|"q\n"
expr_stmt|;
if|if
condition|(
name|face_id
operator|.
name|filename
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|noEmbed
operator|=
literal|true
expr_stmt|;
block|}
name|QFontSubset
modifier|*
name|font
init|=
name|fonts
operator|.
name|value
argument_list|(
name|face_id
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|font
condition|)
block|{
name|font
operator|=
operator|new
name|QFontSubset
argument_list|(
name|fe
argument_list|,
name|requestObject
argument_list|()
argument_list|)
expr_stmt|;
name|font
operator|->
name|noEmbed
operator|=
name|noEmbed
expr_stmt|;
block|}
name|fonts
operator|.
name|insert
argument_list|(
name|face_id
argument_list|,
name|font
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|currentPage
operator|->
name|fonts
operator|.
name|contains
argument_list|(
name|font
operator|->
name|object_id
argument_list|)
condition|)
name|currentPage
operator|->
name|fonts
operator|.
name|append
argument_list|(
name|font
operator|->
name|object_id
argument_list|)
expr_stmt|;
name|qreal
name|size
init|=
name|ti
operator|.
name|fontEngine
operator|->
name|fontDef
operator|.
name|pixelSize
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|glyph_t
argument_list|>
name|glyphs
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|QFixedPoint
argument_list|>
name|positions
decl_stmt|;
name|QTransform
name|m
init|=
name|QTransform
operator|::
name|fromTranslate
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|ti
operator|.
name|fontEngine
operator|->
name|getGlyphPositions
argument_list|(
name|ti
operator|.
name|glyphs
argument_list|,
name|m
argument_list|,
name|ti
operator|.
name|flags
argument_list|,
name|glyphs
argument_list|,
name|positions
argument_list|)
expr_stmt|;
if|if
condition|(
name|glyphs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|int
name|synthesized
init|=
name|ti
operator|.
name|fontEngine
operator|->
name|synthesized
argument_list|()
decl_stmt|;
name|qreal
name|stretch
init|=
name|synthesized
operator|&
name|QFontEngine
operator|::
name|SynthesizedStretch
condition|?
name|ti
operator|.
name|fontEngine
operator|->
name|fontDef
operator|.
name|stretch
operator|/
literal|100.
else|:
literal|1.
decl_stmt|;
operator|*
name|currentPage
operator|<<
literal|"BT\n"
operator|<<
literal|"/F"
operator|<<
name|font
operator|->
name|object_id
operator|<<
name|size
operator|<<
literal|"Tf "
operator|<<
name|stretch
operator|<<
operator|(
name|synthesized
operator|&
name|QFontEngine
operator|::
name|SynthesizedItalic
condition|?
literal|"0 .3 -1 0 0 Tm\n"
else|:
literal|"0 0 -1 0 0 Tm\n"
operator|)
expr_stmt|;
if|#
directive|if
literal|0
comment|// #### implement actual text for complex languages
block|const unsigned short *logClusters = ti.logClusters;     int pos = 0;     do {         int end = pos + 1;         while (end< ti.num_chars&& logClusters[end] == logClusters[pos])             ++end;         *currentPage<< "/Span<< /ActualText<FEFF";         for (int i = pos; i< end; ++i) {             s<< toHex((ushort)ti.chars[i].unicode(), buf);         }         *currentPage<< ">>>\n"             "BDC\n"             "<";         int ge = end == ti.num_chars ? ti.num_glyphs : logClusters[end];         for (int gs = logClusters[pos]; gs< ge; ++gs)             *currentPage<< toHex((ushort)ti.glyphs[gs].glyph, buf);         *currentPage<< "> Tj\n"             "EMC\n";         pos = end;     } while (pos< ti.num_chars);
else|#
directive|else
name|qreal
name|last_x
init|=
literal|0.
decl_stmt|;
name|qreal
name|last_y
init|=
literal|0.
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|x
init|=
name|positions
index|[
name|i
index|]
operator|.
name|x
operator|.
name|toReal
argument_list|()
decl_stmt|;
name|qreal
name|y
init|=
name|positions
index|[
name|i
index|]
operator|.
name|y
operator|.
name|toReal
argument_list|()
decl_stmt|;
if|if
condition|(
name|synthesized
operator|&
name|QFontEngine
operator|::
name|SynthesizedItalic
condition|)
name|x
operator|+=
literal|.3
operator|*
name|y
expr_stmt|;
name|x
operator|/=
name|stretch
expr_stmt|;
name|char
name|buf
index|[
literal|5
index|]
decl_stmt|;
name|int
name|g
init|=
name|font
operator|->
name|addGlyph
argument_list|(
name|glyphs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
operator|*
name|currentPage
operator|<<
name|x
operator|-
name|last_x
operator|<<
name|last_y
operator|-
name|y
operator|<<
literal|"Td<"
operator|<<
name|QPdf
operator|::
name|toHex
argument_list|(
operator|(
name|ushort
operator|)
name|g
argument_list|,
name|buf
argument_list|)
operator|<<
literal|"> Tj\n"
expr_stmt|;
name|last_x
operator|=
name|x
expr_stmt|;
name|last_y
operator|=
name|y
expr_stmt|;
block|}
if|if
condition|(
name|synthesized
operator|&
name|QFontEngine
operator|::
name|SynthesizedBold
condition|)
block|{
operator|*
name|currentPage
operator|<<
name|stretch
operator|<<
operator|(
name|synthesized
operator|&
name|QFontEngine
operator|::
name|SynthesizedItalic
condition|?
literal|"0 .3 -1 0 0 Tm\n"
else|:
literal|"0 0 -1 0 0 Tm\n"
operator|)
expr_stmt|;
operator|*
name|currentPage
operator|<<
literal|"/Span<< /ActualText<>>> BDC\n"
expr_stmt|;
name|last_x
operator|=
literal|0.5
operator|*
name|fe
operator|->
name|lineThickness
argument_list|()
operator|.
name|toReal
argument_list|()
expr_stmt|;
name|last_y
operator|=
literal|0.
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|x
init|=
name|positions
index|[
name|i
index|]
operator|.
name|x
operator|.
name|toReal
argument_list|()
decl_stmt|;
name|qreal
name|y
init|=
name|positions
index|[
name|i
index|]
operator|.
name|y
operator|.
name|toReal
argument_list|()
decl_stmt|;
if|if
condition|(
name|synthesized
operator|&
name|QFontEngine
operator|::
name|SynthesizedItalic
condition|)
name|x
operator|+=
literal|.3
operator|*
name|y
expr_stmt|;
name|x
operator|/=
name|stretch
expr_stmt|;
name|char
name|buf
index|[
literal|5
index|]
decl_stmt|;
name|int
name|g
init|=
name|font
operator|->
name|addGlyph
argument_list|(
name|glyphs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
operator|*
name|currentPage
operator|<<
name|x
operator|-
name|last_x
operator|<<
name|last_y
operator|-
name|y
operator|<<
literal|"Td<"
operator|<<
name|QPdf
operator|::
name|toHex
argument_list|(
operator|(
name|ushort
operator|)
name|g
argument_list|,
name|buf
argument_list|)
operator|<<
literal|"> Tj\n"
expr_stmt|;
name|last_x
operator|=
name|x
expr_stmt|;
name|last_y
operator|=
name|y
expr_stmt|;
block|}
operator|*
name|currentPage
operator|<<
literal|"EMC\n"
expr_stmt|;
block|}
endif|#
directive|endif
operator|*
name|currentPage
operator|<<
literal|"ET\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pageMatrix
name|QTransform
name|QPdfEnginePrivate
operator|::
name|pageMatrix
parameter_list|()
specifier|const
block|{
name|qreal
name|scale
init|=
literal|72.
operator|/
name|resolution
decl_stmt|;
name|QTransform
name|tmp
argument_list|(
name|scale
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
operator|-
name|scale
argument_list|,
literal|0.0
argument_list|,
name|m_pageLayout
operator|.
name|fullRectPoints
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_pageLayout
operator|.
name|mode
argument_list|()
operator|!=
name|QPageLayout
operator|::
name|FullPageMode
condition|)
block|{
name|QRect
name|r
init|=
name|m_pageLayout
operator|.
name|paintRectPixels
argument_list|(
name|resolution
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|translate
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tmp
return|;
block|}
end_function
begin_function
DECL|function|newPage
name|void
name|QPdfEnginePrivate
operator|::
name|newPage
parameter_list|()
block|{
if|if
condition|(
name|currentPage
operator|&&
name|currentPage
operator|->
name|pageSize
operator|.
name|isEmpty
argument_list|()
condition|)
name|currentPage
operator|->
name|pageSize
operator|=
name|m_pageLayout
operator|.
name|fullRectPoints
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|writePage
argument_list|()
expr_stmt|;
operator|delete
name|currentPage
expr_stmt|;
name|currentPage
operator|=
operator|new
name|QPdfPage
expr_stmt|;
name|currentPage
operator|->
name|pageSize
operator|=
name|m_pageLayout
operator|.
name|fullRectPoints
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|stroker
operator|.
name|stream
operator|=
name|currentPage
expr_stmt|;
name|pages
operator|.
name|append
argument_list|(
name|requestObject
argument_list|()
argument_list|)
expr_stmt|;
operator|*
name|currentPage
operator|<<
literal|"/GSa gs /CSp cs /CSp CS\n"
operator|<<
name|QPdf
operator|::
name|generateMatrix
argument_list|(
name|pageMatrix
argument_list|()
argument_list|)
operator|<<
literal|"q q\n"
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PDF
end_comment
end_unit
