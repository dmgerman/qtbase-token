begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdrawhelper_arm_simd_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qblendfunctions_p.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_HAVE_ARM_SIMD
end_ifdef
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
end_if
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__SWITCH_TO_ARM
argument_list|)
end_if
begin_ifdef
ifdef|#
directive|ifdef
name|__MARM_THUMB__
end_ifdef
begin_ifndef
ifndef|#
directive|ifndef
name|__ARMCC__
end_ifndef
begin_define
DECL|macro|__SWITCH_TO_ARM
define|#
directive|define
name|__SWITCH_TO_ARM
value|asm("push {r0} ");\                              asm("add r0, pc, #4 ");\                              asm("bx r0 ");\                              asm("nop ");\                              asm(".align 2 ");\                              asm(".code 32 ");\                              asm("ldr r0, [sp], #4 ")
end_define
begin_define
DECL|macro|__END_ARM
define|#
directive|define
name|__END_ARM
value|asm(".code 16 ")
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|__SWITCH_TO_ARM
define|#
directive|define
name|__SWITCH_TO_ARM
value|asm(".code 32 ");
end_define
begin_define
DECL|macro|__END_ARM
define|#
directive|define
name|__END_ARM
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// __ARMCC__
end_comment
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|__SWITCH_TO_ARM
define|#
directive|define
name|__SWITCH_TO_ARM
end_define
begin_define
DECL|macro|__END_ARM
define|#
directive|define
name|__END_ARM
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//__MARM_THUMB__
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_RVCT
argument_list|)
end_if
begin_asm
DECL|function|qt_blend_argb32_on_argb32_arm_simd
asm|__asm void qt_blend_argb32_on_argb32_arm_simd(uchar *destPixels, int dbpl,
end_asm
begin_decl_stmt
specifier|const
name|uchar
modifier|*
name|srcPixels
decl_stmt|,
name|int
name|sbpl
decl_stmt|,
name|int
name|w
decl_stmt|,
name|int
name|h
decl_stmt|,
name|int
name|const_alpha
decl_stmt|)
block|{
ifndef|#
directive|ifndef
name|__ARMCC__
name|__SWITCH_TO_ARM
expr_stmt|;
else|#
directive|else
name|CODE32
endif|#
directive|endif
comment|// __ARMCC__
name|stmfd
name|sp
operator|!
operator|,
block|{
name|r4
operator|-
name|r12
block|,
name|r14
block|}
comment|// read arguments off the stack
name|add
name|r8
operator|,
name|sp
operator|,
operator|#
literal|10
operator|*
literal|4
name|ldmia
name|r8
operator|,
block|{
name|r4
operator|-
name|r6
block|}
comment|// adjust dbpl and sbpl
name|mov
name|r14
operator|,
operator|#
literal|4
name|mul
name|r14
operator|,
name|r4
operator|,
name|r14
name|sub
name|r1
operator|,
name|r1
operator|,
name|r14
name|sub
name|r3
operator|,
name|r3
operator|,
name|r14
comment|// load 0xFF00FF00 to r12
name|mov
name|r12
operator|,
operator|#
literal|0xFF000000
name|add
name|r12
operator|,
name|r12
operator|,
operator|#
literal|0xFF00
comment|// load 0x800080 to r14
name|mov
name|r14
operator|,
operator|#
literal|0x800000
name|add
name|r14
operator|,
name|r14
operator|,
operator|#
literal|0x80
comment|/*       Registers:        r0 dst        r1 dbpl        r2 src        r3 sbpl        r4 w        r5 h        r6 const_alpha        r12 0xFF0000        r14 0x800080     */
name|cmp
name|r6
operator|,
operator|#
literal|256
comment|//test if we have fully opaque constant alpha value
name|bne
name|argb32constalpha
comment|// branch if not
name|argb32_next_row
name|mov
name|r7
operator|,
name|r4
name|argb32_next_pixel
name|ldr
name|r8
operator|,
index|[
name|r2
index|]
operator|,
operator|#
literal|4
comment|// load src pixel
comment|// Negate r8 and extract src alpha
name|mvn
name|r11
operator|,
name|r8
comment|// bitwise not
name|uxtb
name|r11
operator|,
name|r11
operator|,
name|ror
operator|#
literal|24
name|cmp
name|r11
operator|,
operator|#
literal|0
comment|// test for full src opacity (negated)
name|beq
name|argb32_no_blend
name|cmp
name|r11
operator|,
operator|#
literal|255
comment|// test for full src transparency (negated)
name|addeq
name|r0
operator|,
operator|#
literal|4
name|beq
name|argb32_nop
name|ldr
name|r9
operator|,
index|[
name|r0
index|]
comment|// load dst pixel
comment|// blend
name|uxtb16
name|r10
operator|,
name|r9
name|uxtb16
name|r6
operator|,
name|r9
operator|,
name|ror
operator|#
literal|8
name|mla
name|r10
operator|,
name|r11
operator|,
name|r10
operator|,
name|r14
name|mla
name|r9
operator|,
name|r6
operator|,
name|r11
operator|,
name|r14
name|uxtab16
name|r10
operator|,
name|r10
operator|,
name|r10
operator|,
name|ror
operator|#
literal|8
name|uxtab16
name|r9
operator|,
name|r9
operator|,
name|r9
operator|,
name|ror
operator|#
literal|8
operator|and
name|r9
operator|,
name|r9
operator|,
name|r12
name|uxtab16
name|r10
operator|,
name|r9
operator|,
name|r10
operator|,
name|ror
operator|#
literal|8
name|uqadd8
name|r8
operator|,
name|r10
operator|,
name|r8
name|argb32_no_blend
name|str
name|r8
operator|,
index|[
name|r0
index|]
operator|,
operator|#
literal|4
name|argb32_nop
name|subs
name|r7
operator|,
name|r7
operator|,
operator|#
literal|1
name|bgt
name|argb32_next_pixel
name|add
name|r0
operator|,
name|r0
operator|,
name|r1
comment|// dest = dest + dbpl
name|add
name|r2
operator|,
name|r2
operator|,
name|r3
comment|// src = src + sbpl
name|subs
name|r5
operator|,
name|r5
operator|,
operator|#
literal|1
name|bgt
name|argb32_next_row
name|b
name|argb32_blend_exit
name|argb32constalpha
name|cmp
name|r6
operator|,
operator|#
literal|0
name|beq
name|argb32_blend_exit
expr_stmt|;
name|const_alpha
operator|=
operator|(
name|const_alpha
operator|*
literal|255
operator|)
operator|>>
literal|8
expr_stmt|;
name|mov
name|r11
decl_stmt|, #255
name|mul
name|r6
decl_stmt|,
name|r6
decl_stmt|,
name|r11
name|mov
name|r11
decl_stmt|,
name|r6
decl_stmt|,
name|lsr
decl|#8
name|argb32constalpha_next_row
name|mov
name|r7
decl_stmt|,
name|r4
name|argb32constalpha_next_pixel
name|ldr
name|r9
decl_stmt|, [
name|r2
decl|]
decl_stmt|, #4
comment|// load src pixel
comment|// blend
name|uxtb16
name|r10
decl_stmt|,
name|r9
name|uxtb16
name|r6
decl_stmt|,
name|r9
decl_stmt|,
name|ror
decl|#8
name|mla
name|r10
decl_stmt|,
name|r11
decl_stmt|,
name|r10
decl_stmt|,
name|r14
name|mla
name|r9
decl_stmt|,
name|r6
decl_stmt|,
name|r11
decl_stmt|,
name|r14
name|uxtab16
name|r10
decl_stmt|,
name|r10
decl_stmt|,
name|r10
decl_stmt|,
name|ror
decl|#8
name|uxtab16
name|r9
decl_stmt|,
name|r9
decl_stmt|,
name|r9
decl_stmt|,
name|ror
decl|#8     and
name|r9
decl_stmt|,
name|r9
decl_stmt|,
name|r12
name|uxtab16
name|r8
decl_stmt|,
name|r9
decl_stmt|,
name|r10
decl_stmt|,
name|ror
decl|#8
name|ldr
name|r9
decl_stmt|, [
name|r0
decl|]
comment|// load dst pixel
comment|// blend
name|uxtb16
name|r10
decl_stmt|,
name|r9
name|uxtb16
name|r6
decl_stmt|,
name|r9
decl_stmt|,
name|ror
decl|#8
comment|// Negate r8 and extract src alpha
name|mvn
name|r9
decl_stmt|,
name|r8
comment|// bitwise not
name|uxtb
name|r9
decl_stmt|,
name|r9
decl_stmt|,
name|ror
decl|#24
name|mla
name|r10
decl_stmt|,
name|r9
decl_stmt|,
name|r10
decl_stmt|,
name|r14
name|mla
name|r9
decl_stmt|,
name|r6
decl_stmt|,
name|r9
decl_stmt|,
name|r14
name|uxtab16
name|r10
decl_stmt|,
name|r10
decl_stmt|,
name|r10
decl_stmt|,
name|ror
decl|#8
name|uxtab16
name|r9
decl_stmt|,
name|r9
decl_stmt|,
name|r9
decl_stmt|,
name|ror
decl|#8     and
name|r9
decl_stmt|,
name|r9
decl_stmt|,
name|r12
name|uxtab16
name|r10
decl_stmt|,
name|r9
decl_stmt|,
name|r10
decl_stmt|,
name|ror
decl|#8
name|uqadd8
name|r8
decl_stmt|,
name|r10
decl_stmt|,
name|r8
name|str
name|r8
decl_stmt|, [
name|r0
decl|]
decl_stmt|, #4
name|subs
name|r7
decl_stmt|,
name|r7
decl_stmt|, #1
name|bgt
name|argb32constalpha_next_pixel
name|add
name|r0
decl_stmt|,
name|r0
decl_stmt|,
name|r1
comment|// dest = dest + dbpl
name|add
name|r2
decl_stmt|,
name|r2
decl_stmt|,
name|r3
comment|// src = src + sbpl
name|subs
name|r5
decl_stmt|,
name|r5
decl_stmt|, #1
name|bgt
name|argb32constalpha_next_row
name|argb32_blend_exit
comment|// Restore registers
name|ldmfd
name|sp
decl|!
decl_stmt|,
argument_list|{
name|r4
operator|-
name|r12
argument_list|,
name|lr
argument_list|}
decl_stmt|bx      lr      __END_ARM
block|}
end_decl_stmt
begin_function
DECL|function|qt_blend_rgb32_on_rgb32_arm_simd
name|void
name|qt_blend_rgb32_on_rgb32_arm_simd
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|!=
literal|256
condition|)
block|{
name|qt_blend_argb32_on_argb32_arm_simd
argument_list|(
name|destPixels
argument_list|,
name|dbpl
argument_list|,
name|srcPixels
argument_list|,
name|sbpl
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|uint
modifier|*
name|src
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|srcPixels
decl_stmt|;
name|uint
modifier|*
name|dst
init|=
operator|(
name|uint
operator|*
operator|)
name|destPixels
decl_stmt|;
if|if
condition|(
name|w
operator|<=
literal|64
condition|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
name|qt_memconvert
argument_list|(
name|dst
argument_list|,
name|src
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|dst
operator|=
operator|(
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
name|uchar
operator|*
operator|)
name|dst
operator|)
operator|+
name|dbpl
operator|)
expr_stmt|;
name|src
operator|=
operator|(
specifier|const
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|src
operator|)
operator|+
name|sbpl
operator|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|len
init|=
name|w
operator|*
literal|4
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
name|memcpy
argument_list|(
name|dst
argument_list|,
name|src
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|dst
operator|=
operator|(
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
name|uchar
operator|*
operator|)
name|dst
operator|)
operator|+
name|dbpl
operator|)
expr_stmt|;
name|src
operator|=
operator|(
specifier|const
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|src
operator|)
operator|+
name|sbpl
operator|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_comment
comment|// defined(Q_OS_SYMBIAN)&& defined(Q_CC_RVCT)
end_comment
begin_comment
comment|// TODO: add GNU assembler instructions and support for other platforms.
end_comment
begin_comment
comment|//       Default to C code for now
end_comment
begin_function
DECL|function|qt_blend_argb32_on_argb32_arm_simd
name|void
name|qt_blend_argb32_on_argb32_arm_simd
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|const_alpha
parameter_list|)
block|{
specifier|const
name|uint
modifier|*
name|src
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|srcPixels
decl_stmt|;
name|uint
modifier|*
name|dst
init|=
operator|(
name|uint
operator|*
operator|)
name|destPixels
decl_stmt|;
if|if
condition|(
name|const_alpha
operator|==
literal|256
condition|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
name|uint
name|s
init|=
name|src
index|[
name|x
index|]
decl_stmt|;
if|if
condition|(
name|s
operator|>=
literal|0xff000000
condition|)
name|dst
index|[
name|x
index|]
operator|=
name|s
expr_stmt|;
elseif|else
if|if
condition|(
name|s
operator|!=
literal|0
condition|)
name|dst
index|[
name|x
index|]
operator|=
name|s
operator|+
name|BYTE_MUL
argument_list|(
name|dst
index|[
name|x
index|]
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dst
operator|=
operator|(
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
name|uchar
operator|*
operator|)
name|dst
operator|)
operator|+
name|dbpl
operator|)
expr_stmt|;
name|src
operator|=
operator|(
specifier|const
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|src
operator|)
operator|+
name|sbpl
operator|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|const_alpha
operator|!=
literal|0
condition|)
block|{
name|const_alpha
operator|=
operator|(
name|const_alpha
operator|*
literal|255
operator|)
operator|>>
literal|8
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
name|uint
name|s
init|=
name|BYTE_MUL
argument_list|(
name|src
index|[
name|x
index|]
argument_list|,
name|const_alpha
argument_list|)
decl_stmt|;
name|dst
index|[
name|x
index|]
operator|=
name|s
operator|+
name|BYTE_MUL
argument_list|(
name|dst
index|[
name|x
index|]
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dst
operator|=
operator|(
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
name|uchar
operator|*
operator|)
name|dst
operator|)
operator|+
name|dbpl
operator|)
expr_stmt|;
name|src
operator|=
operator|(
specifier|const
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|src
operator|)
operator|+
name|sbpl
operator|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|qt_blend_rgb32_on_rgb32_arm_simd
name|void
name|qt_blend_rgb32_on_rgb32_arm_simd
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|!=
literal|256
condition|)
block|{
name|qt_blend_argb32_on_argb32_arm_simd
argument_list|(
name|destPixels
argument_list|,
name|dbpl
argument_list|,
name|srcPixels
argument_list|,
name|sbpl
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|uint
modifier|*
name|src
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|srcPixels
decl_stmt|;
name|uint
modifier|*
name|dst
init|=
operator|(
name|uint
operator|*
operator|)
name|destPixels
decl_stmt|;
if|if
condition|(
name|w
operator|<=
literal|64
condition|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
name|qt_memconvert
argument_list|(
name|dst
argument_list|,
name|src
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|dst
operator|=
operator|(
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
name|uchar
operator|*
operator|)
name|dst
operator|)
operator|+
name|dbpl
operator|)
expr_stmt|;
name|src
operator|=
operator|(
specifier|const
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|src
operator|)
operator|+
name|sbpl
operator|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|len
init|=
name|w
operator|*
literal|4
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
name|memcpy
argument_list|(
name|dst
argument_list|,
name|src
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|dst
operator|=
operator|(
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
name|uchar
operator|*
operator|)
name|dst
operator|)
operator|+
name|dbpl
operator|)
expr_stmt|;
name|src
operator|=
operator|(
specifier|const
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|src
operator|)
operator|+
name|sbpl
operator|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_HAVE_ARMV_SIMD
end_comment
end_unit
