begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qcosmeticstroker_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qpainterpath_p.h"
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
if|#
directive|if
literal|0
type|inline QString capString(int caps) {     QString str;     if (caps& QCosmeticStroker::CapBegin) {         str += "CapBegin ";     }     if (caps& QCosmeticStroker::CapEnd) {         str += "CapEnd ";     }     return str; }
endif|#
directive|endif
DECL|macro|toF26Dot6
define|#
directive|define
name|toF26Dot6
parameter_list|(
name|x
parameter_list|)
value|((int)((x)*64.))
DECL|function|sourceOver
specifier|static
specifier|inline
name|uint
name|sourceOver
parameter_list|(
name|uint
name|d
parameter_list|,
name|uint
name|color
parameter_list|)
block|{
return|return
name|color
operator|+
name|BYTE_MUL
argument_list|(
name|d
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|color
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|F16Dot16FixedDiv
specifier|inline
specifier|static
name|int
name|F16Dot16FixedDiv
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
if|if
condition|(
name|qAbs
argument_list|(
name|x
argument_list|)
operator|>
literal|0x7fff
condition|)
return|return
operator|(
operator|(
operator|(
name|qlonglong
operator|)
name|x
operator|)
operator|<<
literal|16
operator|)
operator|/
name|y
return|;
return|return
operator|(
name|x
operator|<<
literal|16
operator|)
operator|/
name|y
return|;
block|}
end_function
begin_typedef
DECL|typedef|DrawPixel
typedef|typedef
name|void
function_decl|(
modifier|*
name|DrawPixel
function_decl|)
parameter_list|(
name|QCosmeticStroker
modifier|*
name|stroker
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|coverage
parameter_list|)
function_decl|;
end_typedef
begin_namespace
namespace|namespace
block|{
DECL|struct|Dasher
struct|struct
name|Dasher
block|{
DECL|member|stroker
name|QCosmeticStroker
modifier|*
name|stroker
decl_stmt|;
DECL|member|pattern
name|int
modifier|*
name|pattern
decl_stmt|;
DECL|member|offset
name|int
name|offset
decl_stmt|;
DECL|member|dashIndex
name|int
name|dashIndex
decl_stmt|;
DECL|member|dashOn
name|int
name|dashOn
decl_stmt|;
DECL|function|Dasher
name|Dasher
parameter_list|(
name|QCosmeticStroker
modifier|*
name|s
parameter_list|,
name|bool
name|reverse
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|stop
parameter_list|)
member_init_list|:
name|stroker
argument_list|(
name|s
argument_list|)
block|{
name|int
name|delta
init|=
name|stop
operator|-
name|start
decl_stmt|;
if|if
condition|(
name|reverse
condition|)
block|{
name|pattern
operator|=
name|stroker
operator|->
name|reversePattern
expr_stmt|;
name|offset
operator|=
name|stroker
operator|->
name|patternLength
operator|-
name|stroker
operator|->
name|patternOffset
operator|-
name|delta
operator|-
operator|(
operator|(
name|start
operator|&
literal|63
operator|)
operator|-
literal|32
operator|)
expr_stmt|;
name|dashOn
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|pattern
operator|=
name|stroker
operator|->
name|pattern
expr_stmt|;
name|offset
operator|=
name|stroker
operator|->
name|patternOffset
operator|-
operator|(
operator|(
name|start
operator|&
literal|63
operator|)
operator|-
literal|32
operator|)
expr_stmt|;
name|dashOn
operator|=
literal|1
expr_stmt|;
block|}
name|offset
operator|%=
name|stroker
operator|->
name|patternLength
expr_stmt|;
if|if
condition|(
name|offset
operator|<
literal|0
condition|)
name|offset
operator|+=
name|stroker
operator|->
name|patternLength
expr_stmt|;
name|dashIndex
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|offset
operator|>=
name|pattern
index|[
name|dashIndex
index|]
condition|)
operator|++
name|dashIndex
expr_stmt|;
comment|//        qDebug()<< "   dasher"<< offset/64.<< reverse<< dashIndex;
name|stroker
operator|->
name|patternOffset
operator|+=
name|delta
expr_stmt|;
name|stroker
operator|->
name|patternOffset
operator|%=
name|stroker
operator|->
name|patternLength
expr_stmt|;
block|}
DECL|function|on
name|bool
name|on
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|dashIndex
operator|+
name|dashOn
operator|)
operator|&
literal|1
return|;
block|}
DECL|function|adjust
name|void
name|adjust
parameter_list|()
block|{
name|offset
operator|+=
literal|64
expr_stmt|;
if|if
condition|(
name|offset
operator|>=
name|pattern
index|[
name|dashIndex
index|]
condition|)
block|{
operator|++
name|dashIndex
expr_stmt|;
name|dashIndex
operator|%=
name|stroker
operator|->
name|patternSize
expr_stmt|;
block|}
name|offset
operator|%=
name|stroker
operator|->
name|patternLength
expr_stmt|;
comment|//        qDebug()<< "dasher.adjust"<< offset/64.<< dashIndex;
block|}
block|}
struct|;
DECL|struct|NoDasher
struct|struct
name|NoDasher
block|{
DECL|function|NoDasher
name|NoDasher
parameter_list|(
name|QCosmeticStroker
modifier|*
parameter_list|,
name|bool
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
block|{}
DECL|function|on
name|bool
name|on
parameter_list|()
specifier|const
block|{
return|return
literal|true
return|;
block|}
DECL|function|adjust
name|void
name|adjust
parameter_list|(
name|int
init|=
literal|0
parameter_list|)
block|{}
block|}
struct|;
block|}
end_namespace
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_function_decl
template|template
parameter_list|<
name|DrawPixel
name|drawPixel
parameter_list|,
name|class
name|Dasher
parameter_list|>
specifier|static
name|void
name|drawLine
parameter_list|(
name|QCosmeticStroker
modifier|*
name|stroker
parameter_list|,
name|qreal
name|x1
parameter_list|,
name|qreal
name|y1
parameter_list|,
name|qreal
name|x2
parameter_list|,
name|qreal
name|y2
parameter_list|,
name|int
name|caps
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
template|template
parameter_list|<
name|DrawPixel
name|drawPixel
parameter_list|,
name|class
name|Dasher
parameter_list|>
specifier|static
name|void
name|drawLineAA
parameter_list|(
name|QCosmeticStroker
modifier|*
name|stroker
parameter_list|,
name|qreal
name|x1
parameter_list|,
name|qreal
name|y1
parameter_list|,
name|qreal
name|x2
parameter_list|,
name|qreal
name|y2
parameter_list|,
name|int
name|caps
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|drawPixel
specifier|inline
name|void
name|drawPixel
parameter_list|(
name|QCosmeticStroker
modifier|*
name|stroker
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|coverage
parameter_list|)
block|{
specifier|const
name|QRect
modifier|&
name|cl
init|=
name|stroker
operator|->
name|clip
decl_stmt|;
if|if
condition|(
name|x
argument_list|<
name|cl
operator|.
name|x
operator|(
operator|)
operator|||
name|x
argument_list|>
name|cl
operator|.
name|right
argument_list|()
operator|||
name|y
argument_list|<
name|cl
operator|.
name|y
operator|(
operator|)
operator|||
name|y
argument_list|>
name|cl
operator|.
name|bottom
argument_list|()
condition|)
return|return;
name|int
name|lastx
init|=
name|stroker
operator|->
name|spans
index|[
name|stroker
operator|->
name|current_span
operator|-
literal|1
index|]
operator|.
name|x
operator|+
name|stroker
operator|->
name|spans
index|[
name|stroker
operator|->
name|current_span
operator|-
literal|1
index|]
operator|.
name|len
decl_stmt|;
name|int
name|lasty
init|=
name|stroker
operator|->
name|spans
index|[
name|stroker
operator|->
name|current_span
operator|-
literal|1
index|]
operator|.
name|y
decl_stmt|;
if|if
condition|(
name|stroker
operator|->
name|current_span
operator|==
name|QCosmeticStroker
operator|::
name|NSPANS
operator|||
name|y
operator|<
name|lasty
operator|||
operator|(
name|y
operator|==
name|lasty
operator|&&
name|x
operator|<
name|lastx
operator|)
condition|)
block|{
name|stroker
operator|->
name|blend
argument_list|(
name|stroker
operator|->
name|current_span
argument_list|,
name|stroker
operator|->
name|spans
argument_list|,
operator|&
name|stroker
operator|->
name|state
operator|->
name|penData
argument_list|)
expr_stmt|;
name|stroker
operator|->
name|current_span
operator|=
literal|0
expr_stmt|;
block|}
name|stroker
operator|->
name|spans
index|[
name|stroker
operator|->
name|current_span
index|]
operator|.
name|x
operator|=
name|ushort
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|stroker
operator|->
name|spans
index|[
name|stroker
operator|->
name|current_span
index|]
operator|.
name|len
operator|=
literal|1
expr_stmt|;
name|stroker
operator|->
name|spans
index|[
name|stroker
operator|->
name|current_span
index|]
operator|.
name|y
operator|=
name|y
expr_stmt|;
name|stroker
operator|->
name|spans
index|[
name|stroker
operator|->
name|current_span
index|]
operator|.
name|coverage
operator|=
name|coverage
operator|*
name|stroker
operator|->
name|opacity
operator|>>
literal|8
expr_stmt|;
operator|++
name|stroker
operator|->
name|current_span
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPixelARGB32
specifier|inline
name|void
name|drawPixelARGB32
parameter_list|(
name|QCosmeticStroker
modifier|*
name|stroker
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|coverage
parameter_list|)
block|{
specifier|const
name|QRect
modifier|&
name|cl
init|=
name|stroker
operator|->
name|clip
decl_stmt|;
if|if
condition|(
name|x
argument_list|<
name|cl
operator|.
name|x
operator|(
operator|)
operator|||
name|x
argument_list|>
name|cl
operator|.
name|right
argument_list|()
operator|||
name|y
argument_list|<
name|cl
operator|.
name|y
operator|(
operator|)
operator|||
name|y
argument_list|>
name|cl
operator|.
name|bottom
argument_list|()
condition|)
return|return;
name|int
name|offset
init|=
name|x
operator|+
name|stroker
operator|->
name|ppl
operator|*
name|y
decl_stmt|;
name|uint
name|c
init|=
name|BYTE_MUL
argument_list|(
name|stroker
operator|->
name|color
argument_list|,
name|coverage
argument_list|)
decl_stmt|;
name|stroker
operator|->
name|pixels
index|[
name|offset
index|]
operator|=
name|sourceOver
argument_list|(
name|stroker
operator|->
name|pixels
index|[
name|offset
index|]
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPixelARGB32Opaque
specifier|inline
name|void
name|drawPixelARGB32Opaque
parameter_list|(
name|QCosmeticStroker
modifier|*
name|stroker
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
parameter_list|)
block|{
specifier|const
name|QRect
modifier|&
name|cl
init|=
name|stroker
operator|->
name|clip
decl_stmt|;
if|if
condition|(
name|x
argument_list|<
name|cl
operator|.
name|x
operator|(
operator|)
operator|||
name|x
argument_list|>
name|cl
operator|.
name|right
argument_list|()
operator|||
name|y
argument_list|<
name|cl
operator|.
name|y
operator|(
operator|)
operator|||
name|y
argument_list|>
name|cl
operator|.
name|bottom
argument_list|()
condition|)
return|return;
name|int
name|offset
init|=
name|x
operator|+
name|stroker
operator|->
name|ppl
operator|*
name|y
decl_stmt|;
name|stroker
operator|->
name|pixels
index|[
name|offset
index|]
operator|=
name|sourceOver
argument_list|(
name|stroker
operator|->
name|pixels
index|[
name|offset
index|]
argument_list|,
name|stroker
operator|->
name|color
argument_list|)
expr_stmt|;
block|}
end_function
begin_enum
DECL|enum|StrokeSelection
enum|enum
name|StrokeSelection
block|{
DECL|enumerator|Aliased
name|Aliased
init|=
literal|0
block|,
DECL|enumerator|AntiAliased
name|AntiAliased
init|=
literal|1
block|,
DECL|enumerator|Solid
name|Solid
init|=
literal|0
block|,
DECL|enumerator|Dashed
name|Dashed
init|=
literal|2
block|,
DECL|enumerator|RegularDraw
name|RegularDraw
init|=
literal|0
block|,
DECL|enumerator|FastDraw
name|FastDraw
init|=
literal|4
block|}
enum|;
end_enum
begin_function
DECL|function|strokeLine
specifier|static
name|StrokeLine
name|strokeLine
parameter_list|(
name|int
name|strokeSelection
parameter_list|)
block|{
name|StrokeLine
name|stroke
decl_stmt|;
switch|switch
condition|(
name|strokeSelection
condition|)
block|{
case|case
name|Aliased
operator||
name|Solid
operator||
name|RegularDraw
case|:
name|stroke
operator|=
operator|&
name|QT_PREPEND_NAMESPACE
argument_list|(
name|drawLine
argument_list|)
operator|<
name|drawPixel
operator|,
name|NoDasher
operator|>
expr_stmt|;
break|break;
case|case
name|Aliased
operator||
name|Solid
operator||
name|FastDraw
case|:
name|stroke
operator|=
operator|&
name|QT_PREPEND_NAMESPACE
argument_list|(
name|drawLine
argument_list|)
operator|<
name|drawPixelARGB32Opaque
operator|,
name|NoDasher
operator|>
expr_stmt|;
break|break;
case|case
name|Aliased
operator||
name|Dashed
operator||
name|RegularDraw
case|:
name|stroke
operator|=
operator|&
name|QT_PREPEND_NAMESPACE
argument_list|(
name|drawLine
argument_list|)
operator|<
name|drawPixel
operator|,
name|Dasher
operator|>
expr_stmt|;
break|break;
case|case
name|Aliased
operator||
name|Dashed
operator||
name|FastDraw
case|:
name|stroke
operator|=
operator|&
name|QT_PREPEND_NAMESPACE
argument_list|(
name|drawLine
argument_list|)
operator|<
name|drawPixelARGB32Opaque
operator|,
name|Dasher
operator|>
expr_stmt|;
break|break;
case|case
name|AntiAliased
operator||
name|Solid
operator||
name|RegularDraw
case|:
name|stroke
operator|=
operator|&
name|QT_PREPEND_NAMESPACE
argument_list|(
name|drawLineAA
argument_list|)
operator|<
name|drawPixel
operator|,
name|NoDasher
operator|>
expr_stmt|;
break|break;
case|case
name|AntiAliased
operator||
name|Solid
operator||
name|FastDraw
case|:
name|stroke
operator|=
operator|&
name|QT_PREPEND_NAMESPACE
argument_list|(
name|drawLineAA
argument_list|)
operator|<
name|drawPixelARGB32
operator|,
name|NoDasher
operator|>
expr_stmt|;
break|break;
case|case
name|AntiAliased
operator||
name|Dashed
operator||
name|RegularDraw
case|:
name|stroke
operator|=
operator|&
name|QT_PREPEND_NAMESPACE
argument_list|(
name|drawLineAA
argument_list|)
operator|<
name|drawPixel
operator|,
name|Dasher
operator|>
expr_stmt|;
break|break;
case|case
name|AntiAliased
operator||
name|Dashed
operator||
name|FastDraw
case|:
name|stroke
operator|=
operator|&
name|QT_PREPEND_NAMESPACE
argument_list|(
name|drawLineAA
argument_list|)
operator|<
name|drawPixelARGB32
operator|,
name|Dasher
operator|>
expr_stmt|;
break|break;
default|default:
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|stroke
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|stroke
return|;
block|}
end_function
begin_function
DECL|function|setup
name|void
name|QCosmeticStroker
operator|::
name|setup
parameter_list|()
block|{
name|blend
operator|=
name|state
operator|->
name|penData
operator|.
name|blend
expr_stmt|;
if|if
condition|(
name|state
operator|->
name|clip
operator|&&
name|state
operator|->
name|clip
operator|->
name|enabled
operator|&&
name|state
operator|->
name|clip
operator|->
name|hasRectClip
operator|&&
operator|!
name|state
operator|->
name|clip
operator|->
name|clipRect
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clip
operator|&=
name|state
operator|->
name|clip
operator|->
name|clipRect
expr_stmt|;
name|blend
operator|=
name|state
operator|->
name|penData
operator|.
name|unclipped_blend
expr_stmt|;
block|}
name|int
name|strokeSelection
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|blend
operator|==
name|state
operator|->
name|penData
operator|.
name|unclipped_blend
operator|&&
name|state
operator|->
name|penData
operator|.
name|type
operator|==
name|QSpanData
operator|::
name|Solid
operator|&&
operator|(
name|state
operator|->
name|penData
operator|.
name|rasterBuffer
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
operator|||
name|state
operator|->
name|penData
operator|.
name|rasterBuffer
operator|->
name|format
operator|==
name|QImage
operator|::
name|Format_RGB32
operator|)
operator|&&
name|state
operator|->
name|compositionMode
argument_list|()
operator|==
name|QPainter
operator|::
name|CompositionMode_SourceOver
condition|)
name|strokeSelection
operator||=
name|FastDraw
expr_stmt|;
if|if
condition|(
name|state
operator|->
name|renderHints
operator|&
name|QPainter
operator|::
name|Antialiasing
condition|)
name|strokeSelection
operator||=
name|AntiAliased
expr_stmt|;
specifier|const
name|QVector
argument_list|<
name|qreal
argument_list|>
modifier|&
name|penPattern
init|=
name|state
operator|->
name|lastPen
operator|.
name|dashPattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|penPattern
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|pattern
operator|&&
operator|!
name|reversePattern
argument_list|)
expr_stmt|;
name|pattern
operator|=
literal|0
expr_stmt|;
name|reversePattern
operator|=
literal|0
expr_stmt|;
name|patternLength
operator|=
literal|0
expr_stmt|;
name|patternSize
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|pattern
operator|=
operator|(
name|int
operator|*
operator|)
name|malloc
argument_list|(
name|penPattern
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|int
argument_list|)
argument_list|)
expr_stmt|;
name|reversePattern
operator|=
operator|(
name|int
operator|*
operator|)
name|malloc
argument_list|(
name|penPattern
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|int
argument_list|)
argument_list|)
expr_stmt|;
name|patternSize
operator|=
name|penPattern
operator|.
name|size
argument_list|()
expr_stmt|;
name|patternLength
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|patternSize
condition|;
operator|++
name|i
control|)
block|{
name|patternLength
operator|+=
operator|(
name|int
operator|)
name|qMax
argument_list|(
literal|1.
argument_list|,
name|penPattern
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|*
literal|64.
argument_list|)
expr_stmt|;
name|pattern
index|[
name|i
index|]
operator|=
name|patternLength
expr_stmt|;
block|}
name|patternLength
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|patternSize
condition|;
operator|++
name|i
control|)
block|{
name|patternLength
operator|+=
operator|(
name|int
operator|)
name|qMax
argument_list|(
literal|1.
argument_list|,
name|penPattern
operator|.
name|at
argument_list|(
name|patternSize
operator|-
literal|1
operator|-
name|i
argument_list|)
operator|*
literal|64.
argument_list|)
expr_stmt|;
name|reversePattern
index|[
name|i
index|]
operator|=
name|patternLength
expr_stmt|;
block|}
name|strokeSelection
operator||=
name|Dashed
expr_stmt|;
comment|//        qDebug()<< "setup: size="<< patternSize<< "length="<< patternLength/64.;
block|}
name|stroke
operator|=
name|strokeLine
argument_list|(
name|strokeSelection
argument_list|)
expr_stmt|;
name|qreal
name|width
init|=
name|state
operator|->
name|lastPen
operator|.
name|widthF
argument_list|()
decl_stmt|;
if|if
condition|(
name|width
operator|==
literal|0
condition|)
name|opacity
operator|=
literal|256
expr_stmt|;
elseif|else
if|if
condition|(
name|state
operator|->
name|lastPen
operator|.
name|isCosmetic
argument_list|()
condition|)
name|opacity
operator|=
operator|(
name|int
operator|)
literal|256
operator|*
name|width
expr_stmt|;
else|else
name|opacity
operator|=
operator|(
name|int
operator|)
literal|256
operator|*
name|width
operator|*
name|state
operator|->
name|txscale
expr_stmt|;
name|opacity
operator|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|opacity
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|drawCaps
operator|=
name|state
operator|->
name|lastPen
operator|.
name|capStyle
argument_list|()
operator|!=
name|Qt
operator|::
name|FlatCap
expr_stmt|;
if|if
condition|(
name|strokeSelection
operator|&
name|FastDraw
condition|)
block|{
name|color
operator|=
name|INTERPOLATE_PIXEL_256
argument_list|(
name|state
operator|->
name|penData
operator|.
name|solid
operator|.
name|color
argument_list|,
name|opacity
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QRasterBuffer
modifier|*
name|buffer
init|=
name|state
operator|->
name|penData
operator|.
name|rasterBuffer
decl_stmt|;
name|pixels
operator|=
operator|(
name|uint
operator|*
operator|)
name|buffer
operator|->
name|buffer
argument_list|()
expr_stmt|;
name|ppl
operator|=
name|buffer
operator|->
name|bytesPerLine
argument_list|()
operator|>>
literal|2
expr_stmt|;
block|}
comment|// setup FP clip bounds
name|xmin
operator|=
name|clip
operator|.
name|left
argument_list|()
operator|-
literal|1
expr_stmt|;
name|xmax
operator|=
name|clip
operator|.
name|right
argument_list|()
operator|+
literal|2
expr_stmt|;
name|ymin
operator|=
name|clip
operator|.
name|top
argument_list|()
operator|-
literal|1
expr_stmt|;
name|ymax
operator|=
name|clip
operator|.
name|bottom
argument_list|()
operator|+
literal|2
expr_stmt|;
name|lastPixel
operator|.
name|x
operator|=
operator|-
literal|1
expr_stmt|;
block|}
end_function
begin_comment
comment|// returns true if the whole line gets clipped away
end_comment
begin_function
DECL|function|clipLine
name|bool
name|QCosmeticStroker
operator|::
name|clipLine
parameter_list|(
name|qreal
modifier|&
name|x1
parameter_list|,
name|qreal
modifier|&
name|y1
parameter_list|,
name|qreal
modifier|&
name|x2
parameter_list|,
name|qreal
modifier|&
name|y2
parameter_list|)
block|{
comment|// basic/rough clipping is done in floating point coordinates to avoid
comment|// integer overflow problems.
if|if
condition|(
name|x1
operator|<
name|xmin
condition|)
block|{
if|if
condition|(
name|x2
operator|<=
name|xmin
condition|)
goto|goto
name|clipped
goto|;
name|y1
operator|+=
operator|(
name|y2
operator|-
name|y1
operator|)
operator|/
operator|(
name|x2
operator|-
name|x1
operator|)
operator|*
operator|(
name|xmin
operator|-
name|x1
operator|)
expr_stmt|;
name|x1
operator|=
name|xmin
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|x1
operator|>
name|xmax
condition|)
block|{
if|if
condition|(
name|x2
operator|>=
name|xmax
condition|)
goto|goto
name|clipped
goto|;
name|y1
operator|+=
operator|(
name|y2
operator|-
name|y1
operator|)
operator|/
operator|(
name|x2
operator|-
name|x1
operator|)
operator|*
operator|(
name|xmax
operator|-
name|x1
operator|)
expr_stmt|;
name|x1
operator|=
name|xmax
expr_stmt|;
block|}
if|if
condition|(
name|x2
operator|<
name|xmin
condition|)
block|{
name|lastPixel
operator|.
name|x
operator|=
operator|-
literal|1
expr_stmt|;
name|y2
operator|+=
operator|(
name|y2
operator|-
name|y1
operator|)
operator|/
operator|(
name|x2
operator|-
name|x1
operator|)
operator|*
operator|(
name|xmin
operator|-
name|x2
operator|)
expr_stmt|;
name|x2
operator|=
name|xmin
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|x2
operator|>
name|xmax
condition|)
block|{
name|lastPixel
operator|.
name|x
operator|=
operator|-
literal|1
expr_stmt|;
name|y2
operator|+=
operator|(
name|y2
operator|-
name|y1
operator|)
operator|/
operator|(
name|x2
operator|-
name|x1
operator|)
operator|*
operator|(
name|xmax
operator|-
name|x2
operator|)
expr_stmt|;
name|x2
operator|=
name|xmax
expr_stmt|;
block|}
if|if
condition|(
name|y1
operator|<
name|ymin
condition|)
block|{
if|if
condition|(
name|y2
operator|<=
name|ymin
condition|)
goto|goto
name|clipped
goto|;
name|x1
operator|+=
operator|(
name|x2
operator|-
name|x1
operator|)
operator|/
operator|(
name|y2
operator|-
name|y1
operator|)
operator|*
operator|(
name|ymin
operator|-
name|y1
operator|)
expr_stmt|;
name|y1
operator|=
name|ymin
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|y1
operator|>
name|ymax
condition|)
block|{
if|if
condition|(
name|y2
operator|>=
name|ymax
condition|)
goto|goto
name|clipped
goto|;
name|x1
operator|+=
operator|(
name|x2
operator|-
name|x1
operator|)
operator|/
operator|(
name|y2
operator|-
name|y1
operator|)
operator|*
operator|(
name|ymax
operator|-
name|y1
operator|)
expr_stmt|;
name|y1
operator|=
name|ymax
expr_stmt|;
block|}
if|if
condition|(
name|y2
operator|<
name|ymin
condition|)
block|{
name|lastPixel
operator|.
name|x
operator|=
operator|-
literal|1
expr_stmt|;
name|x2
operator|+=
operator|(
name|x2
operator|-
name|x1
operator|)
operator|/
operator|(
name|y2
operator|-
name|y1
operator|)
operator|*
operator|(
name|ymin
operator|-
name|y2
operator|)
expr_stmt|;
name|y2
operator|=
name|ymin
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|y2
operator|>
name|ymax
condition|)
block|{
name|lastPixel
operator|.
name|x
operator|=
operator|-
literal|1
expr_stmt|;
name|x2
operator|+=
operator|(
name|x2
operator|-
name|x1
operator|)
operator|/
operator|(
name|y2
operator|-
name|y1
operator|)
operator|*
operator|(
name|ymax
operator|-
name|y2
operator|)
expr_stmt|;
name|y2
operator|=
name|ymax
expr_stmt|;
block|}
return|return
literal|false
return|;
name|clipped
label|:
name|lastPixel
operator|.
name|x
operator|=
operator|-
literal|1
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|drawLine
name|void
name|QCosmeticStroker
operator|::
name|drawLine
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p1
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|p2
parameter_list|)
block|{
if|if
condition|(
name|p1
operator|==
name|p2
condition|)
block|{
name|drawPoints
argument_list|(
operator|&
name|p1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
name|QPointF
name|start
init|=
name|p1
operator|*
name|state
operator|->
name|matrix
decl_stmt|;
name|QPointF
name|end
init|=
name|p2
operator|*
name|state
operator|->
name|matrix
decl_stmt|;
name|patternOffset
operator|=
name|state
operator|->
name|lastPen
operator|.
name|dashOffset
argument_list|()
operator|*
literal|64
expr_stmt|;
name|lastPixel
operator|.
name|x
operator|=
operator|-
literal|1
expr_stmt|;
name|stroke
argument_list|(
name|this
argument_list|,
name|start
operator|.
name|x
argument_list|()
argument_list|,
name|start
operator|.
name|y
argument_list|()
argument_list|,
name|end
operator|.
name|x
argument_list|()
argument_list|,
name|end
operator|.
name|y
argument_list|()
argument_list|,
name|drawCaps
condition|?
name|CapBegin
operator||
name|CapEnd
else|:
literal|0
argument_list|)
expr_stmt|;
name|blend
argument_list|(
name|current_span
argument_list|,
name|spans
argument_list|,
operator|&
name|state
operator|->
name|penData
argument_list|)
expr_stmt|;
name|current_span
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPoints
name|void
name|QCosmeticStroker
operator|::
name|drawPoints
parameter_list|(
specifier|const
name|QPoint
modifier|*
name|points
parameter_list|,
name|int
name|num
parameter_list|)
block|{
specifier|const
name|QPoint
modifier|*
name|end
init|=
name|points
operator|+
name|num
decl_stmt|;
while|while
condition|(
name|points
operator|<
name|end
condition|)
block|{
name|QPointF
name|p
init|=
name|QPointF
argument_list|(
operator|*
name|points
argument_list|)
operator|*
name|state
operator|->
name|matrix
decl_stmt|;
name|drawPixel
argument_list|(
name|this
argument_list|,
name|qRound
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|p
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
literal|255
argument_list|)
expr_stmt|;
operator|++
name|points
expr_stmt|;
block|}
name|blend
argument_list|(
name|current_span
argument_list|,
name|spans
argument_list|,
operator|&
name|state
operator|->
name|penData
argument_list|)
expr_stmt|;
name|current_span
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPoints
name|void
name|QCosmeticStroker
operator|::
name|drawPoints
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|num
parameter_list|)
block|{
specifier|const
name|QPointF
modifier|*
name|end
init|=
name|points
operator|+
name|num
decl_stmt|;
while|while
condition|(
name|points
operator|<
name|end
condition|)
block|{
name|QPointF
name|p
init|=
operator|(
operator|*
name|points
operator|)
operator|*
name|state
operator|->
name|matrix
decl_stmt|;
name|drawPixel
argument_list|(
name|this
argument_list|,
name|qRound
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|p
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
literal|255
argument_list|)
expr_stmt|;
operator|++
name|points
expr_stmt|;
block|}
name|blend
argument_list|(
name|current_span
argument_list|,
name|spans
argument_list|,
operator|&
name|state
operator|->
name|penData
argument_list|)
expr_stmt|;
name|current_span
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|calculateLastPoint
name|void
name|QCosmeticStroker
operator|::
name|calculateLastPoint
parameter_list|(
name|qreal
name|rx1
parameter_list|,
name|qreal
name|ry1
parameter_list|,
name|qreal
name|rx2
parameter_list|,
name|qreal
name|ry2
parameter_list|)
block|{
comment|// this is basically the same code as used in the aliased stroke method,
comment|// but it only determines the direction and last point of a line
comment|//
comment|// This is being used to have proper dropout control for closed contours
comment|// by calculating the direction and last pixel of the last segment in the contour.
comment|// the info is then used to perform dropout control when drawing the first line segment
comment|// of the contour
name|lastPixel
operator|.
name|x
operator|=
operator|-
literal|1
expr_stmt|;
name|lastPixel
operator|.
name|y
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|clipLine
argument_list|(
name|rx1
argument_list|,
name|ry1
argument_list|,
name|rx2
argument_list|,
name|ry2
argument_list|)
condition|)
return|return;
specifier|const
name|int
name|half
init|=
name|legacyRounding
condition|?
literal|31
else|:
literal|0
decl_stmt|;
name|int
name|x1
init|=
name|toF26Dot6
argument_list|(
name|rx1
argument_list|)
operator|+
name|half
decl_stmt|;
name|int
name|y1
init|=
name|toF26Dot6
argument_list|(
name|ry1
argument_list|)
operator|+
name|half
decl_stmt|;
name|int
name|x2
init|=
name|toF26Dot6
argument_list|(
name|rx2
argument_list|)
operator|+
name|half
decl_stmt|;
name|int
name|y2
init|=
name|toF26Dot6
argument_list|(
name|ry2
argument_list|)
operator|+
name|half
decl_stmt|;
name|int
name|dx
init|=
name|qAbs
argument_list|(
name|x2
operator|-
name|x1
argument_list|)
decl_stmt|;
name|int
name|dy
init|=
name|qAbs
argument_list|(
name|y2
operator|-
name|y1
argument_list|)
decl_stmt|;
if|if
condition|(
name|dx
operator|<
name|dy
condition|)
block|{
comment|// vertical
name|bool
name|swapped
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|y1
operator|>
name|y2
condition|)
block|{
name|swapped
operator|=
literal|true
expr_stmt|;
name|qSwap
argument_list|(
name|y1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
block|}
name|int
name|xinc
init|=
name|F16Dot16FixedDiv
argument_list|(
name|x2
operator|-
name|x1
argument_list|,
name|y2
operator|-
name|y1
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|x1
operator|<<
literal|10
decl_stmt|;
name|int
name|y
init|=
operator|(
name|y1
operator|+
literal|32
operator|)
operator|>>
literal|6
decl_stmt|;
name|int
name|ys
init|=
operator|(
name|y2
operator|+
literal|32
operator|)
operator|>>
literal|6
decl_stmt|;
if|if
condition|(
name|y
operator|!=
name|ys
condition|)
block|{
name|x
operator|+=
operator|(
operator|(
operator|(
operator|(
operator|(
name|y
operator|<<
literal|6
operator|)
operator|+
literal|32
operator|-
name|y1
operator|)
operator|)
operator|)
operator|*
name|xinc
operator|)
operator|>>
literal|6
expr_stmt|;
if|if
condition|(
name|swapped
condition|)
block|{
name|lastPixel
operator|.
name|x
operator|=
name|x
operator|>>
literal|16
expr_stmt|;
name|lastPixel
operator|.
name|y
operator|=
name|y
expr_stmt|;
name|lastDir
operator|=
name|QCosmeticStroker
operator|::
name|BottomToTop
expr_stmt|;
block|}
else|else
block|{
name|lastPixel
operator|.
name|x
operator|=
operator|(
name|x
operator|+
operator|(
name|ys
operator|-
name|y
operator|-
literal|1
operator|)
operator|*
name|xinc
operator|)
operator|>>
literal|16
expr_stmt|;
name|lastPixel
operator|.
name|y
operator|=
name|ys
operator|-
literal|1
expr_stmt|;
name|lastDir
operator|=
name|QCosmeticStroker
operator|::
name|TopToBottom
expr_stmt|;
block|}
name|lastAxisAligned
operator|=
name|qAbs
argument_list|(
name|xinc
argument_list|)
operator|<
operator|(
literal|1
operator|<<
literal|14
operator|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// horizontal
if|if
condition|(
operator|!
name|dx
condition|)
return|return;
name|bool
name|swapped
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|x1
operator|>
name|x2
condition|)
block|{
name|swapped
operator|=
literal|true
expr_stmt|;
name|qSwap
argument_list|(
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|y1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
block|}
name|int
name|yinc
init|=
name|F16Dot16FixedDiv
argument_list|(
name|y2
operator|-
name|y1
argument_list|,
name|x2
operator|-
name|x1
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|y1
operator|<<
literal|10
decl_stmt|;
name|int
name|x
init|=
operator|(
name|x1
operator|+
literal|32
operator|)
operator|>>
literal|6
decl_stmt|;
name|int
name|xs
init|=
operator|(
name|x2
operator|+
literal|32
operator|)
operator|>>
literal|6
decl_stmt|;
if|if
condition|(
name|x
operator|!=
name|xs
condition|)
block|{
name|y
operator|+=
operator|(
operator|(
operator|(
operator|(
operator|(
name|x
operator|<<
literal|6
operator|)
operator|+
literal|32
operator|-
name|x1
operator|)
operator|)
operator|)
operator|*
name|yinc
operator|)
operator|>>
literal|6
expr_stmt|;
if|if
condition|(
name|swapped
condition|)
block|{
name|lastPixel
operator|.
name|x
operator|=
name|x
expr_stmt|;
name|lastPixel
operator|.
name|y
operator|=
name|y
operator|>>
literal|16
expr_stmt|;
name|lastDir
operator|=
name|QCosmeticStroker
operator|::
name|RightToLeft
expr_stmt|;
block|}
else|else
block|{
name|lastPixel
operator|.
name|x
operator|=
name|xs
operator|-
literal|1
expr_stmt|;
name|lastPixel
operator|.
name|y
operator|=
operator|(
name|y
operator|+
operator|(
name|xs
operator|-
name|x
operator|-
literal|1
operator|)
operator|*
name|yinc
operator|)
operator|>>
literal|16
expr_stmt|;
name|lastDir
operator|=
name|QCosmeticStroker
operator|::
name|LeftToRight
expr_stmt|;
block|}
name|lastAxisAligned
operator|=
name|qAbs
argument_list|(
name|yinc
argument_list|)
operator|<
operator|(
literal|1
operator|<<
literal|14
operator|)
expr_stmt|;
block|}
block|}
comment|//    qDebug()<< "   moveTo: setting last pixel to x/y dir"<< lastPixel.x<< lastPixel.y<< lastDir;
block|}
end_function
begin_function
DECL|function|subPath
specifier|static
specifier|inline
specifier|const
name|QPainterPath
operator|::
name|ElementType
modifier|*
name|subPath
parameter_list|(
specifier|const
name|QPainterPath
operator|::
name|ElementType
modifier|*
name|t
parameter_list|,
specifier|const
name|QPainterPath
operator|::
name|ElementType
modifier|*
name|end
parameter_list|,
specifier|const
name|qreal
modifier|*
name|points
parameter_list|,
name|bool
modifier|*
name|closed
parameter_list|)
block|{
specifier|const
name|QPainterPath
operator|::
name|ElementType
modifier|*
name|start
init|=
name|t
decl_stmt|;
operator|++
name|t
expr_stmt|;
comment|// find out if the subpath is closed
while|while
condition|(
name|t
operator|<
name|end
condition|)
block|{
if|if
condition|(
operator|*
name|t
operator|==
name|QPainterPath
operator|::
name|MoveToElement
condition|)
break|break;
operator|++
name|t
expr_stmt|;
block|}
name|int
name|offset
init|=
name|t
operator|-
name|start
operator|-
literal|1
decl_stmt|;
comment|//    qDebug()<< "subpath"<< offset<< points[0]<< points[1]<< points[2*offset]<< points[2*offset+1];
operator|*
name|closed
operator|=
operator|(
name|points
index|[
literal|0
index|]
operator|==
name|points
index|[
literal|2
operator|*
name|offset
index|]
operator|&&
name|points
index|[
literal|1
index|]
operator|==
name|points
index|[
literal|2
operator|*
name|offset
operator|+
literal|1
index|]
operator|)
expr_stmt|;
return|return
name|t
return|;
block|}
end_function
begin_function
DECL|function|drawPath
name|void
name|QCosmeticStroker
operator|::
name|drawPath
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|)
block|{
comment|//    qDebug()<< ">>>> drawpath"<< path.convertToPainterPath()
comment|//<< "antialiasing:"<< (bool)(state->renderHints& QPainter::Antialiasing)<< " implicit close:"<< path.hasImplicitClose();
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
specifier|const
name|qreal
modifier|*
name|points
init|=
name|path
operator|.
name|points
argument_list|()
decl_stmt|;
specifier|const
name|QPainterPath
operator|::
name|ElementType
modifier|*
name|type
init|=
name|path
operator|.
name|elements
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
condition|)
block|{
specifier|const
name|QPainterPath
operator|::
name|ElementType
modifier|*
name|end
init|=
name|type
operator|+
name|path
operator|.
name|elementCount
argument_list|()
decl_stmt|;
while|while
condition|(
name|type
operator|<
name|end
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|type
operator|==
name|path
operator|.
name|elements
argument_list|()
operator|||
operator|*
name|type
operator|==
name|QPainterPath
operator|::
name|MoveToElement
argument_list|)
expr_stmt|;
name|QPointF
name|p
init|=
name|QPointF
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
operator|*
name|state
operator|->
name|matrix
decl_stmt|;
name|patternOffset
operator|=
name|state
operator|->
name|lastPen
operator|.
name|dashOffset
argument_list|()
operator|*
literal|64
expr_stmt|;
name|lastPixel
operator|.
name|x
operator|=
operator|-
literal|1
expr_stmt|;
name|bool
name|closed
decl_stmt|;
specifier|const
name|QPainterPath
operator|::
name|ElementType
modifier|*
name|e
init|=
name|subPath
argument_list|(
name|type
argument_list|,
name|end
argument_list|,
name|points
argument_list|,
operator|&
name|closed
argument_list|)
decl_stmt|;
if|if
condition|(
name|closed
condition|)
block|{
specifier|const
name|qreal
modifier|*
name|p
init|=
name|points
operator|+
literal|2
operator|*
operator|(
name|e
operator|-
name|type
operator|)
decl_stmt|;
name|QPointF
name|p1
init|=
name|QPointF
argument_list|(
name|p
index|[
operator|-
literal|4
index|]
argument_list|,
name|p
index|[
operator|-
literal|3
index|]
argument_list|)
operator|*
name|state
operator|->
name|matrix
decl_stmt|;
name|QPointF
name|p2
init|=
name|QPointF
argument_list|(
name|p
index|[
operator|-
literal|2
index|]
argument_list|,
name|p
index|[
operator|-
literal|1
index|]
argument_list|)
operator|*
name|state
operator|->
name|matrix
decl_stmt|;
name|calculateLastPoint
argument_list|(
name|p1
operator|.
name|x
argument_list|()
argument_list|,
name|p1
operator|.
name|y
argument_list|()
argument_list|,
name|p2
operator|.
name|x
argument_list|()
argument_list|,
name|p2
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|caps
init|=
operator|(
operator|!
name|closed
operator|&
name|drawCaps
operator|)
condition|?
name|CapBegin
else|:
name|NoCaps
decl_stmt|;
comment|//            qDebug()<< "closed ="<< closed<< capString(caps);
name|points
operator|+=
literal|2
expr_stmt|;
operator|++
name|type
expr_stmt|;
while|while
condition|(
name|type
operator|<
name|e
condition|)
block|{
name|QPointF
name|p2
init|=
name|QPointF
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
operator|*
name|state
operator|->
name|matrix
decl_stmt|;
switch|switch
condition|(
operator|*
name|type
condition|)
block|{
case|case
name|QPainterPath
operator|::
name|MoveToElement
case|:
name|Q_ASSERT
argument_list|(
operator|!
literal|"Logic error"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|LineToElement
case|:
if|if
condition|(
operator|!
name|closed
operator|&&
name|drawCaps
operator|&&
name|type
operator|==
name|e
operator|-
literal|1
condition|)
name|caps
operator||=
name|CapEnd
expr_stmt|;
name|stroke
argument_list|(
name|this
argument_list|,
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|,
name|p2
operator|.
name|x
argument_list|()
argument_list|,
name|p2
operator|.
name|y
argument_list|()
argument_list|,
name|caps
argument_list|)
expr_stmt|;
name|p
operator|=
name|p2
expr_stmt|;
name|points
operator|+=
literal|2
expr_stmt|;
operator|++
name|type
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToElement
case|:
block|{
if|if
condition|(
operator|!
name|closed
operator|&&
name|drawCaps
operator|&&
name|type
operator|==
name|e
operator|-
literal|3
condition|)
name|caps
operator||=
name|CapEnd
expr_stmt|;
name|QPointF
name|p3
init|=
name|QPointF
argument_list|(
name|points
index|[
literal|2
index|]
argument_list|,
name|points
index|[
literal|3
index|]
argument_list|)
operator|*
name|state
operator|->
name|matrix
decl_stmt|;
name|QPointF
name|p4
init|=
name|QPointF
argument_list|(
name|points
index|[
literal|4
index|]
argument_list|,
name|points
index|[
literal|5
index|]
argument_list|)
operator|*
name|state
operator|->
name|matrix
decl_stmt|;
name|renderCubic
argument_list|(
name|p
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|,
name|caps
argument_list|)
expr_stmt|;
name|p
operator|=
name|p4
expr_stmt|;
name|type
operator|+=
literal|3
expr_stmt|;
name|points
operator|+=
literal|6
expr_stmt|;
break|break;
block|}
case|case
name|QPainterPath
operator|::
name|CurveToDataElement
case|:
name|Q_ASSERT
argument_list|(
operator|!
literal|"QPainterPath::toSubpathPolygons(), bad element type"
argument_list|)
expr_stmt|;
break|break;
block|}
name|caps
operator|=
name|NoCaps
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// !type, simple polygon
name|QPointF
name|p
init|=
name|QPointF
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
operator|*
name|state
operator|->
name|matrix
decl_stmt|;
name|QPointF
name|movedTo
init|=
name|p
decl_stmt|;
name|patternOffset
operator|=
name|state
operator|->
name|lastPen
operator|.
name|dashOffset
argument_list|()
operator|*
literal|64
expr_stmt|;
name|lastPixel
operator|.
name|x
operator|=
operator|-
literal|1
expr_stmt|;
specifier|const
name|qreal
modifier|*
name|end
init|=
name|points
operator|+
literal|2
operator|*
name|path
operator|.
name|elementCount
argument_list|()
decl_stmt|;
comment|// handle closed path case
name|bool
name|closed
init|=
name|path
operator|.
name|hasImplicitClose
argument_list|()
operator|||
operator|(
name|points
index|[
literal|0
index|]
operator|==
name|end
index|[
operator|-
literal|2
index|]
operator|&&
name|points
index|[
literal|1
index|]
operator|==
name|end
index|[
operator|-
literal|1
index|]
operator|)
decl_stmt|;
name|int
name|caps
init|=
operator|(
operator|!
name|closed
operator|&
name|drawCaps
operator|)
condition|?
name|CapBegin
else|:
name|NoCaps
decl_stmt|;
if|if
condition|(
name|closed
condition|)
block|{
name|QPointF
name|p2
init|=
name|QPointF
argument_list|(
name|end
index|[
operator|-
literal|2
index|]
argument_list|,
name|end
index|[
operator|-
literal|1
index|]
argument_list|)
operator|*
name|state
operator|->
name|matrix
decl_stmt|;
name|calculateLastPoint
argument_list|(
name|p2
operator|.
name|x
argument_list|()
argument_list|,
name|p2
operator|.
name|y
argument_list|()
argument_list|,
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|points
operator|+=
literal|2
expr_stmt|;
while|while
condition|(
name|points
operator|<
name|end
condition|)
block|{
name|QPointF
name|p2
init|=
name|QPointF
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
operator|*
name|state
operator|->
name|matrix
decl_stmt|;
if|if
condition|(
operator|!
name|closed
operator|&&
name|drawCaps
operator|&&
name|points
operator|==
name|end
operator|-
literal|2
condition|)
name|caps
operator||=
name|CapEnd
expr_stmt|;
name|stroke
argument_list|(
name|this
argument_list|,
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|,
name|p2
operator|.
name|x
argument_list|()
argument_list|,
name|p2
operator|.
name|y
argument_list|()
argument_list|,
name|caps
argument_list|)
expr_stmt|;
name|p
operator|=
name|p2
expr_stmt|;
name|points
operator|+=
literal|2
expr_stmt|;
name|caps
operator|=
name|NoCaps
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|hasImplicitClose
argument_list|()
condition|)
name|stroke
argument_list|(
name|this
argument_list|,
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|,
name|movedTo
operator|.
name|x
argument_list|()
argument_list|,
name|movedTo
operator|.
name|y
argument_list|()
argument_list|,
name|NoCaps
argument_list|)
expr_stmt|;
block|}
name|blend
argument_list|(
name|current_span
argument_list|,
name|spans
argument_list|,
operator|&
name|state
operator|->
name|penData
argument_list|)
expr_stmt|;
name|current_span
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|renderCubic
name|void
name|QCosmeticStroker
operator|::
name|renderCubic
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p1
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|p2
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|p3
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|p4
parameter_list|,
name|int
name|caps
parameter_list|)
block|{
comment|//    qDebug()<< ">>>> renderCubic"<< p1<< p2<< p3<< p4<< capString(caps);
specifier|const
name|int
name|maxSubDivisions
init|=
literal|6
decl_stmt|;
name|PointF
name|points
index|[
literal|3
operator|*
name|maxSubDivisions
operator|+
literal|4
index|]
decl_stmt|;
name|points
index|[
literal|3
index|]
operator|.
name|x
operator|=
name|p1
operator|.
name|x
argument_list|()
expr_stmt|;
name|points
index|[
literal|3
index|]
operator|.
name|y
operator|=
name|p1
operator|.
name|y
argument_list|()
expr_stmt|;
name|points
index|[
literal|2
index|]
operator|.
name|x
operator|=
name|p2
operator|.
name|x
argument_list|()
expr_stmt|;
name|points
index|[
literal|2
index|]
operator|.
name|y
operator|=
name|p2
operator|.
name|y
argument_list|()
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|.
name|x
operator|=
name|p3
operator|.
name|x
argument_list|()
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|.
name|y
operator|=
name|p3
operator|.
name|y
argument_list|()
expr_stmt|;
name|points
index|[
literal|0
index|]
operator|.
name|x
operator|=
name|p4
operator|.
name|x
argument_list|()
expr_stmt|;
name|points
index|[
literal|0
index|]
operator|.
name|y
operator|=
name|p4
operator|.
name|y
argument_list|()
expr_stmt|;
name|PointF
modifier|*
name|p
init|=
name|points
decl_stmt|;
name|int
name|level
init|=
name|maxSubDivisions
decl_stmt|;
name|renderCubicSubdivision
argument_list|(
name|p
argument_list|,
name|level
argument_list|,
name|caps
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|splitCubic
specifier|static
name|void
name|splitCubic
parameter_list|(
name|QCosmeticStroker
operator|::
name|PointF
modifier|*
name|points
parameter_list|)
block|{
specifier|const
name|qreal
name|half
init|=
literal|.5
decl_stmt|;
name|qreal
name|a
decl_stmt|,
name|b
decl_stmt|,
name|c
decl_stmt|,
name|d
decl_stmt|;
name|points
index|[
literal|6
index|]
operator|.
name|x
operator|=
name|points
index|[
literal|3
index|]
operator|.
name|x
expr_stmt|;
name|c
operator|=
name|points
index|[
literal|1
index|]
operator|.
name|x
expr_stmt|;
name|d
operator|=
name|points
index|[
literal|2
index|]
operator|.
name|x
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|.
name|x
operator|=
name|a
operator|=
operator|(
name|points
index|[
literal|0
index|]
operator|.
name|x
operator|+
name|c
operator|)
operator|*
name|half
expr_stmt|;
name|points
index|[
literal|5
index|]
operator|.
name|x
operator|=
name|b
operator|=
operator|(
name|points
index|[
literal|3
index|]
operator|.
name|x
operator|+
name|d
operator|)
operator|*
name|half
expr_stmt|;
name|c
operator|=
operator|(
name|c
operator|+
name|d
operator|)
operator|*
name|half
expr_stmt|;
name|points
index|[
literal|2
index|]
operator|.
name|x
operator|=
name|a
operator|=
operator|(
name|a
operator|+
name|c
operator|)
operator|*
name|half
expr_stmt|;
name|points
index|[
literal|4
index|]
operator|.
name|x
operator|=
name|b
operator|=
operator|(
name|b
operator|+
name|c
operator|)
operator|*
name|half
expr_stmt|;
name|points
index|[
literal|3
index|]
operator|.
name|x
operator|=
operator|(
name|a
operator|+
name|b
operator|)
operator|*
name|half
expr_stmt|;
name|points
index|[
literal|6
index|]
operator|.
name|y
operator|=
name|points
index|[
literal|3
index|]
operator|.
name|y
expr_stmt|;
name|c
operator|=
name|points
index|[
literal|1
index|]
operator|.
name|y
expr_stmt|;
name|d
operator|=
name|points
index|[
literal|2
index|]
operator|.
name|y
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|.
name|y
operator|=
name|a
operator|=
operator|(
name|points
index|[
literal|0
index|]
operator|.
name|y
operator|+
name|c
operator|)
operator|*
name|half
expr_stmt|;
name|points
index|[
literal|5
index|]
operator|.
name|y
operator|=
name|b
operator|=
operator|(
name|points
index|[
literal|3
index|]
operator|.
name|y
operator|+
name|d
operator|)
operator|*
name|half
expr_stmt|;
name|c
operator|=
operator|(
name|c
operator|+
name|d
operator|)
operator|*
name|half
expr_stmt|;
name|points
index|[
literal|2
index|]
operator|.
name|y
operator|=
name|a
operator|=
operator|(
name|a
operator|+
name|c
operator|)
operator|*
name|half
expr_stmt|;
name|points
index|[
literal|4
index|]
operator|.
name|y
operator|=
name|b
operator|=
operator|(
name|b
operator|+
name|c
operator|)
operator|*
name|half
expr_stmt|;
name|points
index|[
literal|3
index|]
operator|.
name|y
operator|=
operator|(
name|a
operator|+
name|b
operator|)
operator|*
name|half
expr_stmt|;
block|}
end_function
begin_function
DECL|function|renderCubicSubdivision
name|void
name|QCosmeticStroker
operator|::
name|renderCubicSubdivision
parameter_list|(
name|QCosmeticStroker
operator|::
name|PointF
modifier|*
name|points
parameter_list|,
name|int
name|level
parameter_list|,
name|int
name|caps
parameter_list|)
block|{
if|if
condition|(
name|level
condition|)
block|{
name|qreal
name|dx
init|=
name|points
index|[
literal|3
index|]
operator|.
name|x
operator|-
name|points
index|[
literal|0
index|]
operator|.
name|x
decl_stmt|;
name|qreal
name|dy
init|=
name|points
index|[
literal|3
index|]
operator|.
name|y
operator|-
name|points
index|[
literal|0
index|]
operator|.
name|y
decl_stmt|;
name|qreal
name|len
init|=
operator|(
operator|(
name|qreal
operator|)
literal|.25
operator|)
operator|*
operator|(
name|qAbs
argument_list|(
name|dx
argument_list|)
operator|+
name|qAbs
argument_list|(
name|dy
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|qAbs
argument_list|(
name|dx
operator|*
operator|(
name|points
index|[
literal|0
index|]
operator|.
name|y
operator|-
name|points
index|[
literal|2
index|]
operator|.
name|y
operator|)
operator|-
name|dy
operator|*
operator|(
name|points
index|[
literal|0
index|]
operator|.
name|x
operator|-
name|points
index|[
literal|2
index|]
operator|.
name|x
operator|)
argument_list|)
operator|>=
name|len
operator|||
name|qAbs
argument_list|(
name|dx
operator|*
operator|(
name|points
index|[
literal|0
index|]
operator|.
name|y
operator|-
name|points
index|[
literal|1
index|]
operator|.
name|y
operator|)
operator|-
name|dy
operator|*
operator|(
name|points
index|[
literal|0
index|]
operator|.
name|x
operator|-
name|points
index|[
literal|1
index|]
operator|.
name|x
operator|)
argument_list|)
operator|>=
name|len
condition|)
block|{
name|splitCubic
argument_list|(
name|points
argument_list|)
expr_stmt|;
operator|--
name|level
expr_stmt|;
name|renderCubicSubdivision
argument_list|(
name|points
operator|+
literal|3
argument_list|,
name|level
argument_list|,
name|caps
operator|&
name|CapBegin
argument_list|)
expr_stmt|;
name|renderCubicSubdivision
argument_list|(
name|points
argument_list|,
name|level
argument_list|,
name|caps
operator|&
name|CapEnd
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|stroke
argument_list|(
name|this
argument_list|,
name|points
index|[
literal|3
index|]
operator|.
name|x
argument_list|,
name|points
index|[
literal|3
index|]
operator|.
name|y
argument_list|,
name|points
index|[
literal|0
index|]
operator|.
name|x
argument_list|,
name|points
index|[
literal|0
index|]
operator|.
name|y
argument_list|,
name|caps
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|swapCaps
specifier|static
specifier|inline
name|int
name|swapCaps
parameter_list|(
name|int
name|caps
parameter_list|)
block|{
return|return
operator|(
operator|(
name|caps
operator|&
name|QCosmeticStroker
operator|::
name|CapBegin
operator|)
operator|<<
literal|1
operator|)
operator||
operator|(
operator|(
name|caps
operator|&
name|QCosmeticStroker
operator|::
name|CapEnd
operator|)
operator|>>
literal|1
operator|)
return|;
block|}
end_function
begin_comment
comment|// adjust line by half a pixel
end_comment
begin_function
DECL|function|capAdjust
specifier|static
specifier|inline
name|void
name|capAdjust
parameter_list|(
name|int
name|caps
parameter_list|,
name|int
modifier|&
name|x1
parameter_list|,
name|int
modifier|&
name|x2
parameter_list|,
name|int
modifier|&
name|y
parameter_list|,
name|int
name|yinc
parameter_list|)
block|{
if|if
condition|(
name|caps
operator|&
name|QCosmeticStroker
operator|::
name|CapBegin
condition|)
block|{
name|x1
operator|-=
literal|32
expr_stmt|;
name|y
operator|-=
name|yinc
operator|>>
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|caps
operator|&
name|QCosmeticStroker
operator|::
name|CapEnd
condition|)
block|{
name|x2
operator|+=
literal|32
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*   The hard part about this is dropout control and avoiding douple drawing of points when   the drawing shifts from horizontal to vertical or back.   */
end_comment
begin_function
template|template
parameter_list|<
name|DrawPixel
name|drawPixel
parameter_list|,
name|class
name|Dasher
parameter_list|>
DECL|function|drawLine
specifier|static
name|void
name|drawLine
parameter_list|(
name|QCosmeticStroker
modifier|*
name|stroker
parameter_list|,
name|qreal
name|rx1
parameter_list|,
name|qreal
name|ry1
parameter_list|,
name|qreal
name|rx2
parameter_list|,
name|qreal
name|ry2
parameter_list|,
name|int
name|caps
parameter_list|)
block|{
if|if
condition|(
name|stroker
operator|->
name|clipLine
argument_list|(
name|rx1
argument_list|,
name|ry1
argument_list|,
name|rx2
argument_list|,
name|ry2
argument_list|)
condition|)
return|return;
specifier|const
name|int
name|half
init|=
name|stroker
operator|->
name|legacyRounding
condition|?
literal|31
else|:
literal|0
decl_stmt|;
name|int
name|x1
init|=
name|toF26Dot6
argument_list|(
name|rx1
argument_list|)
operator|+
name|half
decl_stmt|;
name|int
name|y1
init|=
name|toF26Dot6
argument_list|(
name|ry1
argument_list|)
operator|+
name|half
decl_stmt|;
name|int
name|x2
init|=
name|toF26Dot6
argument_list|(
name|rx2
argument_list|)
operator|+
name|half
decl_stmt|;
name|int
name|y2
init|=
name|toF26Dot6
argument_list|(
name|ry2
argument_list|)
operator|+
name|half
decl_stmt|;
name|int
name|dx
init|=
name|qAbs
argument_list|(
name|x2
operator|-
name|x1
argument_list|)
decl_stmt|;
name|int
name|dy
init|=
name|qAbs
argument_list|(
name|y2
operator|-
name|y1
argument_list|)
decl_stmt|;
name|QCosmeticStroker
operator|::
name|Point
name|last
init|=
name|stroker
operator|->
name|lastPixel
decl_stmt|;
comment|//    qDebug()<< "stroke"<< x1/64.<< y1/64.<< x2/64.<< y2/64.;
if|if
condition|(
name|dx
operator|<
name|dy
condition|)
block|{
comment|// vertical
name|QCosmeticStroker
operator|::
name|Direction
name|dir
init|=
name|QCosmeticStroker
operator|::
name|TopToBottom
decl_stmt|;
name|bool
name|swapped
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|y1
operator|>
name|y2
condition|)
block|{
name|swapped
operator|=
literal|true
expr_stmt|;
name|qSwap
argument_list|(
name|y1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|caps
operator|=
name|swapCaps
argument_list|(
name|caps
argument_list|)
expr_stmt|;
name|dir
operator|=
name|QCosmeticStroker
operator|::
name|BottomToTop
expr_stmt|;
block|}
name|int
name|xinc
init|=
name|F16Dot16FixedDiv
argument_list|(
name|x2
operator|-
name|x1
argument_list|,
name|y2
operator|-
name|y1
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|x1
operator|<<
literal|10
decl_stmt|;
if|if
condition|(
operator|(
name|stroker
operator|->
name|lastDir
operator|^
name|QCosmeticStroker
operator|::
name|VerticalMask
operator|)
operator|==
name|dir
condition|)
name|caps
operator||=
name|swapped
condition|?
name|QCosmeticStroker
operator|::
name|CapEnd
else|:
name|QCosmeticStroker
operator|::
name|CapBegin
expr_stmt|;
name|capAdjust
argument_list|(
name|caps
argument_list|,
name|y1
argument_list|,
name|y2
argument_list|,
name|x
argument_list|,
name|xinc
argument_list|)
expr_stmt|;
name|int
name|y
init|=
operator|(
name|y1
operator|+
literal|32
operator|)
operator|>>
literal|6
decl_stmt|;
name|int
name|ys
init|=
operator|(
name|y2
operator|+
literal|32
operator|)
operator|>>
literal|6
decl_stmt|;
if|if
condition|(
name|y
operator|!=
name|ys
condition|)
block|{
name|x
operator|+=
operator|(
operator|(
operator|(
operator|(
operator|(
name|y
operator|<<
literal|6
operator|)
operator|+
literal|32
operator|-
name|y1
operator|)
operator|)
operator|)
operator|*
name|xinc
operator|)
operator|>>
literal|6
expr_stmt|;
comment|// calculate first and last pixel and perform dropout control
name|QCosmeticStroker
operator|::
name|Point
name|first
decl_stmt|;
name|first
operator|.
name|x
operator|=
name|x
operator|>>
literal|16
expr_stmt|;
name|first
operator|.
name|y
operator|=
name|y
expr_stmt|;
name|last
operator|.
name|x
operator|=
operator|(
name|x
operator|+
operator|(
name|ys
operator|-
name|y
operator|-
literal|1
operator|)
operator|*
name|xinc
operator|)
operator|>>
literal|16
expr_stmt|;
name|last
operator|.
name|y
operator|=
name|ys
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|swapped
condition|)
name|qSwap
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
name|bool
name|axisAligned
init|=
name|qAbs
argument_list|(
name|xinc
argument_list|)
operator|<
operator|(
literal|1
operator|<<
literal|14
operator|)
decl_stmt|;
if|if
condition|(
name|stroker
operator|->
name|lastPixel
operator|.
name|x
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|first
operator|.
name|x
operator|==
name|stroker
operator|->
name|lastPixel
operator|.
name|x
operator|&&
name|first
operator|.
name|y
operator|==
name|stroker
operator|->
name|lastPixel
operator|.
name|y
condition|)
block|{
comment|// remove duplicated pixel
if|if
condition|(
name|swapped
condition|)
block|{
operator|--
name|ys
expr_stmt|;
block|}
else|else
block|{
operator|++
name|y
expr_stmt|;
name|x
operator|+=
name|xinc
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|stroker
operator|->
name|lastDir
operator|!=
name|dir
operator|&&
operator|(
operator|(
operator|(
name|axisAligned
operator|&&
name|stroker
operator|->
name|lastAxisAligned
operator|)
operator|&&
name|stroker
operator|->
name|lastPixel
operator|.
name|x
operator|!=
name|first
operator|.
name|x
operator|&&
name|stroker
operator|->
name|lastPixel
operator|.
name|y
operator|!=
name|first
operator|.
name|y
operator|)
operator|||
operator|(
name|qAbs
argument_list|(
name|stroker
operator|->
name|lastPixel
operator|.
name|x
operator|-
name|first
operator|.
name|x
argument_list|)
operator|>
literal|1
operator|||
name|qAbs
argument_list|(
name|stroker
operator|->
name|lastPixel
operator|.
name|y
operator|-
name|first
operator|.
name|y
argument_list|)
operator|>
literal|1
operator|)
operator|)
condition|)
block|{
comment|// have a missing pixel, insert it
if|if
condition|(
name|swapped
condition|)
block|{
operator|++
name|ys
expr_stmt|;
block|}
else|else
block|{
operator|--
name|y
expr_stmt|;
name|x
operator|-=
name|xinc
expr_stmt|;
block|}
block|}
block|}
name|stroker
operator|->
name|lastDir
operator|=
name|dir
expr_stmt|;
name|stroker
operator|->
name|lastAxisAligned
operator|=
name|axisAligned
expr_stmt|;
name|Dasher
name|dasher
argument_list|(
name|stroker
argument_list|,
name|swapped
argument_list|,
name|y
operator|<<
literal|6
argument_list|,
name|ys
operator|<<
literal|6
argument_list|)
decl_stmt|;
do|do
block|{
if|if
condition|(
name|dasher
operator|.
name|on
argument_list|()
condition|)
name|drawPixel
argument_list|(
name|stroker
argument_list|,
name|x
operator|>>
literal|16
argument_list|,
name|y
argument_list|,
literal|255
argument_list|)
expr_stmt|;
name|dasher
operator|.
name|adjust
argument_list|()
expr_stmt|;
name|x
operator|+=
name|xinc
expr_stmt|;
block|}
do|while
condition|(
operator|++
name|y
operator|<
name|ys
condition|)
do|;
block|}
block|}
else|else
block|{
comment|// horizontal
if|if
condition|(
operator|!
name|dx
condition|)
return|return;
name|QCosmeticStroker
operator|::
name|Direction
name|dir
init|=
name|QCosmeticStroker
operator|::
name|LeftToRight
decl_stmt|;
name|bool
name|swapped
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|x1
operator|>
name|x2
condition|)
block|{
name|swapped
operator|=
literal|true
expr_stmt|;
name|qSwap
argument_list|(
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|y1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|caps
operator|=
name|swapCaps
argument_list|(
name|caps
argument_list|)
expr_stmt|;
name|dir
operator|=
name|QCosmeticStroker
operator|::
name|RightToLeft
expr_stmt|;
block|}
name|int
name|yinc
init|=
name|F16Dot16FixedDiv
argument_list|(
name|y2
operator|-
name|y1
argument_list|,
name|x2
operator|-
name|x1
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|y1
operator|<<
literal|10
decl_stmt|;
if|if
condition|(
operator|(
name|stroker
operator|->
name|lastDir
operator|^
name|QCosmeticStroker
operator|::
name|HorizontalMask
operator|)
operator|==
name|dir
condition|)
name|caps
operator||=
name|swapped
condition|?
name|QCosmeticStroker
operator|::
name|CapEnd
else|:
name|QCosmeticStroker
operator|::
name|CapBegin
expr_stmt|;
name|capAdjust
argument_list|(
name|caps
argument_list|,
name|x1
argument_list|,
name|x2
argument_list|,
name|y
argument_list|,
name|yinc
argument_list|)
expr_stmt|;
name|int
name|x
init|=
operator|(
name|x1
operator|+
literal|32
operator|)
operator|>>
literal|6
decl_stmt|;
name|int
name|xs
init|=
operator|(
name|x2
operator|+
literal|32
operator|)
operator|>>
literal|6
decl_stmt|;
if|if
condition|(
name|x
operator|!=
name|xs
condition|)
block|{
name|y
operator|+=
operator|(
operator|(
operator|(
operator|(
operator|(
name|x
operator|<<
literal|6
operator|)
operator|+
literal|32
operator|-
name|x1
operator|)
operator|)
operator|)
operator|*
name|yinc
operator|)
operator|>>
literal|6
expr_stmt|;
comment|// calculate first and last pixel to perform dropout control
name|QCosmeticStroker
operator|::
name|Point
name|first
decl_stmt|;
name|first
operator|.
name|x
operator|=
name|x
expr_stmt|;
name|first
operator|.
name|y
operator|=
name|y
operator|>>
literal|16
expr_stmt|;
name|last
operator|.
name|x
operator|=
name|xs
operator|-
literal|1
expr_stmt|;
name|last
operator|.
name|y
operator|=
operator|(
name|y
operator|+
operator|(
name|xs
operator|-
name|x
operator|-
literal|1
operator|)
operator|*
name|yinc
operator|)
operator|>>
literal|16
expr_stmt|;
if|if
condition|(
name|swapped
condition|)
name|qSwap
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
name|bool
name|axisAligned
init|=
name|qAbs
argument_list|(
name|yinc
argument_list|)
operator|<
operator|(
literal|1
operator|<<
literal|14
operator|)
decl_stmt|;
if|if
condition|(
name|stroker
operator|->
name|lastPixel
operator|.
name|x
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|first
operator|.
name|x
operator|==
name|stroker
operator|->
name|lastPixel
operator|.
name|x
operator|&&
name|first
operator|.
name|y
operator|==
name|stroker
operator|->
name|lastPixel
operator|.
name|y
condition|)
block|{
comment|// remove duplicated pixel
if|if
condition|(
name|swapped
condition|)
block|{
operator|--
name|xs
expr_stmt|;
block|}
else|else
block|{
operator|++
name|x
expr_stmt|;
name|y
operator|+=
name|yinc
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|stroker
operator|->
name|lastDir
operator|!=
name|dir
operator|&&
operator|(
operator|(
operator|(
name|axisAligned
operator|&&
name|stroker
operator|->
name|lastAxisAligned
operator|)
operator|&&
name|stroker
operator|->
name|lastPixel
operator|.
name|x
operator|!=
name|first
operator|.
name|x
operator|&&
name|stroker
operator|->
name|lastPixel
operator|.
name|y
operator|!=
name|first
operator|.
name|y
operator|)
operator|||
operator|(
name|qAbs
argument_list|(
name|stroker
operator|->
name|lastPixel
operator|.
name|x
operator|-
name|first
operator|.
name|x
argument_list|)
operator|>
literal|1
operator|||
name|qAbs
argument_list|(
name|stroker
operator|->
name|lastPixel
operator|.
name|y
operator|-
name|first
operator|.
name|y
argument_list|)
operator|>
literal|1
operator|)
operator|)
condition|)
block|{
comment|// have a missing pixel, insert it
if|if
condition|(
name|swapped
condition|)
block|{
operator|++
name|xs
expr_stmt|;
block|}
else|else
block|{
operator|--
name|x
expr_stmt|;
name|y
operator|-=
name|yinc
expr_stmt|;
block|}
block|}
block|}
name|stroker
operator|->
name|lastDir
operator|=
name|dir
expr_stmt|;
name|stroker
operator|->
name|lastAxisAligned
operator|=
name|axisAligned
expr_stmt|;
name|Dasher
name|dasher
argument_list|(
name|stroker
argument_list|,
name|swapped
argument_list|,
name|x
operator|<<
literal|6
argument_list|,
name|xs
operator|<<
literal|6
argument_list|)
decl_stmt|;
do|do
block|{
if|if
condition|(
name|dasher
operator|.
name|on
argument_list|()
condition|)
name|drawPixel
argument_list|(
name|stroker
argument_list|,
name|x
argument_list|,
name|y
operator|>>
literal|16
argument_list|,
literal|255
argument_list|)
expr_stmt|;
name|dasher
operator|.
name|adjust
argument_list|()
expr_stmt|;
name|y
operator|+=
name|yinc
expr_stmt|;
block|}
do|while
condition|(
operator|++
name|x
operator|<
name|xs
condition|)
do|;
block|}
block|}
name|stroker
operator|->
name|lastPixel
operator|=
name|last
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|DrawPixel
name|drawPixel
parameter_list|,
name|class
name|Dasher
parameter_list|>
DECL|function|drawLineAA
specifier|static
name|void
name|drawLineAA
parameter_list|(
name|QCosmeticStroker
modifier|*
name|stroker
parameter_list|,
name|qreal
name|rx1
parameter_list|,
name|qreal
name|ry1
parameter_list|,
name|qreal
name|rx2
parameter_list|,
name|qreal
name|ry2
parameter_list|,
name|int
name|caps
parameter_list|)
block|{
if|if
condition|(
name|stroker
operator|->
name|clipLine
argument_list|(
name|rx1
argument_list|,
name|ry1
argument_list|,
name|rx2
argument_list|,
name|ry2
argument_list|)
condition|)
return|return;
name|int
name|x1
init|=
name|toF26Dot6
argument_list|(
name|rx1
argument_list|)
decl_stmt|;
name|int
name|y1
init|=
name|toF26Dot6
argument_list|(
name|ry1
argument_list|)
decl_stmt|;
name|int
name|x2
init|=
name|toF26Dot6
argument_list|(
name|rx2
argument_list|)
decl_stmt|;
name|int
name|y2
init|=
name|toF26Dot6
argument_list|(
name|ry2
argument_list|)
decl_stmt|;
name|int
name|dx
init|=
name|x2
operator|-
name|x1
decl_stmt|;
name|int
name|dy
init|=
name|y2
operator|-
name|y1
decl_stmt|;
if|if
condition|(
name|qAbs
argument_list|(
name|dx
argument_list|)
operator|<
name|qAbs
argument_list|(
name|dy
argument_list|)
condition|)
block|{
comment|// vertical
name|int
name|xinc
init|=
name|F16Dot16FixedDiv
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
decl_stmt|;
name|bool
name|swapped
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|y1
operator|>
name|y2
condition|)
block|{
name|qSwap
argument_list|(
name|y1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|swapped
operator|=
literal|true
expr_stmt|;
name|caps
operator|=
name|swapCaps
argument_list|(
name|caps
argument_list|)
expr_stmt|;
block|}
name|int
name|x
init|=
operator|(
name|x1
operator|-
literal|32
operator|)
operator|<<
literal|10
decl_stmt|;
name|x
operator|-=
operator|(
operator|(
operator|(
name|y1
operator|&
literal|63
operator|)
operator|-
literal|32
operator|)
operator|*
name|xinc
operator|)
operator|>>
literal|6
expr_stmt|;
name|capAdjust
argument_list|(
name|caps
argument_list|,
name|y1
argument_list|,
name|y2
argument_list|,
name|x
argument_list|,
name|xinc
argument_list|)
expr_stmt|;
name|Dasher
name|dasher
argument_list|(
name|stroker
argument_list|,
name|swapped
argument_list|,
name|y1
argument_list|,
name|y2
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|y1
operator|>>
literal|6
decl_stmt|;
name|int
name|ys
init|=
name|y2
operator|>>
literal|6
decl_stmt|;
name|int
name|alphaStart
decl_stmt|,
name|alphaEnd
decl_stmt|;
if|if
condition|(
name|y
operator|==
name|ys
condition|)
block|{
name|alphaStart
operator|=
name|y2
operator|-
name|y1
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|alphaStart
operator|>=
literal|0
operator|&&
name|alphaStart
operator|<
literal|64
argument_list|)
expr_stmt|;
name|alphaEnd
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|alphaStart
operator|=
literal|64
operator|-
operator|(
name|y1
operator|&
literal|63
operator|)
expr_stmt|;
name|alphaEnd
operator|=
operator|(
name|y2
operator|&
literal|63
operator|)
expr_stmt|;
block|}
comment|//        qDebug()<< "vertical"<< x1/64.<< y1/64.<< x2/64.<< y2/64.;
comment|//        qDebug()<< "          x="<< x<< "dx="<< dx<< "xi="<< (x>>16)<< "xsi="<< ((x+(ys-y)*dx)>>16)<< "y="<< y<< "ys="<< ys;
comment|// draw first pixel
if|if
condition|(
name|dasher
operator|.
name|on
argument_list|()
condition|)
block|{
name|uint
name|alpha
init|=
call|(
name|quint8
call|)
argument_list|(
name|x
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|drawPixel
argument_list|(
name|stroker
argument_list|,
name|x
operator|>>
literal|16
argument_list|,
name|y
argument_list|,
operator|(
literal|255
operator|-
name|alpha
operator|)
operator|*
name|alphaStart
operator|>>
literal|6
argument_list|)
expr_stmt|;
name|drawPixel
argument_list|(
name|stroker
argument_list|,
operator|(
name|x
operator|>>
literal|16
operator|)
operator|+
literal|1
argument_list|,
name|y
argument_list|,
name|alpha
operator|*
name|alphaStart
operator|>>
literal|6
argument_list|)
expr_stmt|;
block|}
name|dasher
operator|.
name|adjust
argument_list|()
expr_stmt|;
name|x
operator|+=
name|xinc
expr_stmt|;
operator|++
name|y
expr_stmt|;
if|if
condition|(
name|y
operator|<
name|ys
condition|)
block|{
do|do
block|{
if|if
condition|(
name|dasher
operator|.
name|on
argument_list|()
condition|)
block|{
name|uint
name|alpha
init|=
call|(
name|quint8
call|)
argument_list|(
name|x
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|drawPixel
argument_list|(
name|stroker
argument_list|,
name|x
operator|>>
literal|16
argument_list|,
name|y
argument_list|,
operator|(
literal|255
operator|-
name|alpha
operator|)
argument_list|)
expr_stmt|;
name|drawPixel
argument_list|(
name|stroker
argument_list|,
operator|(
name|x
operator|>>
literal|16
operator|)
operator|+
literal|1
argument_list|,
name|y
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
block|}
name|dasher
operator|.
name|adjust
argument_list|()
expr_stmt|;
name|x
operator|+=
name|xinc
expr_stmt|;
block|}
do|while
condition|(
operator|++
name|y
operator|<
name|ys
condition|)
do|;
block|}
comment|// draw last pixel
if|if
condition|(
name|alphaEnd
operator|&&
name|dasher
operator|.
name|on
argument_list|()
condition|)
block|{
name|uint
name|alpha
init|=
call|(
name|quint8
call|)
argument_list|(
name|x
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|drawPixel
argument_list|(
name|stroker
argument_list|,
name|x
operator|>>
literal|16
argument_list|,
name|y
argument_list|,
operator|(
literal|255
operator|-
name|alpha
operator|)
operator|*
name|alphaEnd
operator|>>
literal|6
argument_list|)
expr_stmt|;
name|drawPixel
argument_list|(
name|stroker
argument_list|,
operator|(
name|x
operator|>>
literal|16
operator|)
operator|+
literal|1
argument_list|,
name|y
argument_list|,
name|alpha
operator|*
name|alphaEnd
operator|>>
literal|6
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// horizontal
if|if
condition|(
operator|!
name|dx
condition|)
return|return;
name|int
name|yinc
init|=
name|F16Dot16FixedDiv
argument_list|(
name|dy
argument_list|,
name|dx
argument_list|)
decl_stmt|;
name|bool
name|swapped
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|x1
operator|>
name|x2
condition|)
block|{
name|qSwap
argument_list|(
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|y1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|swapped
operator|=
literal|true
expr_stmt|;
name|caps
operator|=
name|swapCaps
argument_list|(
name|caps
argument_list|)
expr_stmt|;
block|}
name|int
name|y
init|=
operator|(
name|y1
operator|-
literal|32
operator|)
operator|<<
literal|10
decl_stmt|;
name|y
operator|-=
operator|(
operator|(
operator|(
name|x1
operator|&
literal|63
operator|)
operator|-
literal|32
operator|)
operator|*
name|yinc
operator|)
operator|>>
literal|6
expr_stmt|;
name|capAdjust
argument_list|(
name|caps
argument_list|,
name|x1
argument_list|,
name|x2
argument_list|,
name|y
argument_list|,
name|yinc
argument_list|)
expr_stmt|;
name|Dasher
name|dasher
argument_list|(
name|stroker
argument_list|,
name|swapped
argument_list|,
name|x1
argument_list|,
name|x2
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|x1
operator|>>
literal|6
decl_stmt|;
name|int
name|xs
init|=
name|x2
operator|>>
literal|6
decl_stmt|;
comment|//        qDebug()<< "horizontal"<< x1/64.<< y1/64.<< x2/64.<< y2/64.;
comment|//        qDebug()<< "          y="<< y<< "dy="<< dy<< "x="<< x<< "xs="<< xs<< "yi="<< (y>>16)<< "ysi="<< ((y+(xs-x)*dy)>>16);
name|int
name|alphaStart
decl_stmt|,
name|alphaEnd
decl_stmt|;
if|if
condition|(
name|x
operator|==
name|xs
condition|)
block|{
name|alphaStart
operator|=
name|x2
operator|-
name|x1
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|alphaStart
operator|>=
literal|0
operator|&&
name|alphaStart
operator|<
literal|64
argument_list|)
expr_stmt|;
name|alphaEnd
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|alphaStart
operator|=
literal|64
operator|-
operator|(
name|x1
operator|&
literal|63
operator|)
expr_stmt|;
name|alphaEnd
operator|=
operator|(
name|x2
operator|&
literal|63
operator|)
expr_stmt|;
block|}
comment|// draw first pixel
if|if
condition|(
name|dasher
operator|.
name|on
argument_list|()
condition|)
block|{
name|uint
name|alpha
init|=
call|(
name|quint8
call|)
argument_list|(
name|y
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|drawPixel
argument_list|(
name|stroker
argument_list|,
name|x
argument_list|,
name|y
operator|>>
literal|16
argument_list|,
operator|(
literal|255
operator|-
name|alpha
operator|)
operator|*
name|alphaStart
operator|>>
literal|6
argument_list|)
expr_stmt|;
name|drawPixel
argument_list|(
name|stroker
argument_list|,
name|x
argument_list|,
operator|(
name|y
operator|>>
literal|16
operator|)
operator|+
literal|1
argument_list|,
name|alpha
operator|*
name|alphaStart
operator|>>
literal|6
argument_list|)
expr_stmt|;
block|}
name|dasher
operator|.
name|adjust
argument_list|()
expr_stmt|;
name|y
operator|+=
name|yinc
expr_stmt|;
operator|++
name|x
expr_stmt|;
comment|// draw line
if|if
condition|(
name|x
operator|<
name|xs
condition|)
block|{
do|do
block|{
if|if
condition|(
name|dasher
operator|.
name|on
argument_list|()
condition|)
block|{
name|uint
name|alpha
init|=
call|(
name|quint8
call|)
argument_list|(
name|y
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|drawPixel
argument_list|(
name|stroker
argument_list|,
name|x
argument_list|,
name|y
operator|>>
literal|16
argument_list|,
operator|(
literal|255
operator|-
name|alpha
operator|)
argument_list|)
expr_stmt|;
name|drawPixel
argument_list|(
name|stroker
argument_list|,
name|x
argument_list|,
operator|(
name|y
operator|>>
literal|16
operator|)
operator|+
literal|1
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
block|}
name|dasher
operator|.
name|adjust
argument_list|()
expr_stmt|;
name|y
operator|+=
name|yinc
expr_stmt|;
block|}
do|while
condition|(
operator|++
name|x
operator|<
name|xs
condition|)
do|;
block|}
comment|// draw last pixel
if|if
condition|(
name|alphaEnd
operator|&&
name|dasher
operator|.
name|on
argument_list|()
condition|)
block|{
name|uint
name|alpha
init|=
call|(
name|quint8
call|)
argument_list|(
name|y
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|drawPixel
argument_list|(
name|stroker
argument_list|,
name|x
argument_list|,
name|y
operator|>>
literal|16
argument_list|,
operator|(
literal|255
operator|-
name|alpha
operator|)
operator|*
name|alphaEnd
operator|>>
literal|6
argument_list|)
expr_stmt|;
name|drawPixel
argument_list|(
name|stroker
argument_list|,
name|x
argument_list|,
operator|(
name|y
operator|>>
literal|16
operator|)
operator|+
literal|1
argument_list|,
name|alpha
operator|*
name|alphaEnd
operator|>>
literal|6
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
