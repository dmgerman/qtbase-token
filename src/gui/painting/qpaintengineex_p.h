begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QPAINTENGINEEX_P_H
end_ifndef
begin_define
DECL|macro|QPAINTENGINEEX_P_H
define|#
directive|define
name|QPAINTENGINEEX_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtGui/qpaintengine.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qstroker_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpainter_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qvectorpath_p.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QPainterState
name|class
name|QPainterState
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPaintEngineExPrivate
name|class
name|QPaintEngineExPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QStaticTextItem
name|class
name|QStaticTextItem
decl_stmt|;
end_decl_stmt
begin_struct_decl
struct_decl|struct
name|StrokeHandler
struct_decl|;
end_struct_decl
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|QDebug
name|Q_GUI_EXPORT
operator|&
name|operator
operator|<<
operator|(
name|QDebug
operator|&
operator|,
specifier|const
name|QVectorPath
operator|&
name|path
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|QPixmapFilter
name|class
name|QPixmapFilter
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QPaintEngineEx
range|:
name|public
name|QPaintEngine
block|{
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QPaintEngineEx
argument_list|)
name|public
operator|:
name|QPaintEngineEx
argument_list|()
block|;
name|virtual
name|QPainterState
operator|*
name|createState
argument_list|(
argument|QPainterState *orig
argument_list|)
specifier|const
block|;
name|virtual
name|void
name|draw
argument_list|(
specifier|const
name|QVectorPath
operator|&
name|path
argument_list|)
block|;
name|virtual
name|void
name|fill
argument_list|(
specifier|const
name|QVectorPath
operator|&
name|path
argument_list|,
specifier|const
name|QBrush
operator|&
name|brush
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|stroke
argument_list|(
specifier|const
name|QVectorPath
operator|&
name|path
argument_list|,
specifier|const
name|QPen
operator|&
name|pen
argument_list|)
block|;
name|virtual
name|void
name|clip
argument_list|(
argument|const QVectorPath&path
argument_list|,
argument|Qt::ClipOperation op
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|clip
argument_list|(
argument|const QRect&rect
argument_list|,
argument|Qt::ClipOperation op
argument_list|)
block|;
name|virtual
name|void
name|clip
argument_list|(
argument|const QRegion&region
argument_list|,
argument|Qt::ClipOperation op
argument_list|)
block|;
name|virtual
name|void
name|clip
argument_list|(
argument|const QPainterPath&path
argument_list|,
argument|Qt::ClipOperation op
argument_list|)
block|;
name|virtual
name|void
name|clipEnabledChanged
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|void
name|penChanged
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|void
name|brushChanged
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|void
name|brushOriginChanged
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|void
name|opacityChanged
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|void
name|compositionModeChanged
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|void
name|renderHintsChanged
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|void
name|transformChanged
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|void
name|fillRect
argument_list|(
specifier|const
name|QRectF
operator|&
name|rect
argument_list|,
specifier|const
name|QBrush
operator|&
name|brush
argument_list|)
block|;
name|virtual
name|void
name|fillRect
argument_list|(
specifier|const
name|QRectF
operator|&
name|rect
argument_list|,
specifier|const
name|QColor
operator|&
name|color
argument_list|)
block|;
name|virtual
name|void
name|drawRoundedRect
argument_list|(
argument|const QRectF&rect
argument_list|,
argument|qreal xrad
argument_list|,
argument|qreal yrad
argument_list|,
argument|Qt::SizeMode mode
argument_list|)
block|;
name|virtual
name|void
name|drawRects
argument_list|(
argument|const QRect *rects
argument_list|,
argument|int rectCount
argument_list|)
block|;
name|virtual
name|void
name|drawRects
argument_list|(
argument|const QRectF *rects
argument_list|,
argument|int rectCount
argument_list|)
block|;
name|virtual
name|void
name|drawLines
argument_list|(
argument|const QLine *lines
argument_list|,
argument|int lineCount
argument_list|)
block|;
name|virtual
name|void
name|drawLines
argument_list|(
argument|const QLineF *lines
argument_list|,
argument|int lineCount
argument_list|)
block|;
name|virtual
name|void
name|drawEllipse
argument_list|(
specifier|const
name|QRectF
operator|&
name|r
argument_list|)
block|;
name|virtual
name|void
name|drawEllipse
argument_list|(
specifier|const
name|QRect
operator|&
name|r
argument_list|)
block|;
name|virtual
name|void
name|drawPath
argument_list|(
specifier|const
name|QPainterPath
operator|&
name|path
argument_list|)
block|;
name|virtual
name|void
name|drawPoints
argument_list|(
argument|const QPointF *points
argument_list|,
argument|int pointCount
argument_list|)
block|;
name|virtual
name|void
name|drawPoints
argument_list|(
argument|const QPoint *points
argument_list|,
argument|int pointCount
argument_list|)
block|;
name|virtual
name|void
name|drawPolygon
argument_list|(
argument|const QPointF *points
argument_list|,
argument|int pointCount
argument_list|,
argument|PolygonDrawMode mode
argument_list|)
block|;
name|virtual
name|void
name|drawPolygon
argument_list|(
argument|const QPoint *points
argument_list|,
argument|int pointCount
argument_list|,
argument|PolygonDrawMode mode
argument_list|)
block|;
name|virtual
name|void
name|drawPixmap
argument_list|(
specifier|const
name|QRectF
operator|&
name|r
argument_list|,
specifier|const
name|QPixmap
operator|&
name|pm
argument_list|,
specifier|const
name|QRectF
operator|&
name|sr
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|drawPixmap
argument_list|(
specifier|const
name|QPointF
operator|&
name|pos
argument_list|,
specifier|const
name|QPixmap
operator|&
name|pm
argument_list|)
block|;
name|virtual
name|void
name|drawImage
argument_list|(
argument|const QRectF&r
argument_list|,
argument|const QImage&pm
argument_list|,
argument|const QRectF&sr
argument_list|,
argument|Qt::ImageConversionFlags flags = Qt::AutoColor
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|drawImage
argument_list|(
specifier|const
name|QPointF
operator|&
name|pos
argument_list|,
specifier|const
name|QImage
operator|&
name|image
argument_list|)
block|;
name|virtual
name|void
name|drawTiledPixmap
argument_list|(
specifier|const
name|QRectF
operator|&
name|r
argument_list|,
specifier|const
name|QPixmap
operator|&
name|pixmap
argument_list|,
specifier|const
name|QPointF
operator|&
name|s
argument_list|)
block|;
name|virtual
name|void
name|drawPixmapFragments
argument_list|(
argument|const QPainter::PixmapFragment *fragments
argument_list|,
argument|int fragmentCount
argument_list|,
argument|const QPixmap&pixmap
argument_list|,
argument|QFlags<QPainter::PixmapFragmentHint> hints
argument_list|)
block|;
name|virtual
name|void
name|updateState
argument_list|(
specifier|const
name|QPaintEngineState
operator|&
name|state
argument_list|)
block|;
name|virtual
name|void
name|drawStaticTextItem
argument_list|(
name|QStaticTextItem
operator|*
argument_list|)
block|;
name|virtual
name|void
name|setState
argument_list|(
name|QPainterState
operator|*
name|s
argument_list|)
block|;
specifier|inline
name|QPainterState
operator|*
name|state
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|QPainterState
operator|*
operator|>
operator|(
name|QPaintEngine
operator|::
name|state
operator|)
return|;
block|}
specifier|inline
specifier|const
name|QPainterState
operator|*
name|state
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|QPainterState
operator|*
operator|>
operator|(
name|QPaintEngine
operator|::
name|state
operator|)
return|;
block|}
name|virtual
name|void
name|sync
argument_list|()
block|{}
name|virtual
name|void
name|beginNativePainting
argument_list|()
block|{}
name|virtual
name|void
name|endNativePainting
argument_list|()
block|{}
comment|// Return a pixmap filter of "type" that can render the parameters
comment|// in "prototype".  The returned filter is owned by the engine and
comment|// will be destroyed when the engine is destroyed.  The "prototype"
comment|// allows the engine to pick different filters based on the parameters
comment|// that will be requested, and not just the "type".
name|virtual
name|QPixmapFilter
operator|*
name|pixmapFilter
argument_list|(
argument|int
comment|/*type*/
argument_list|,
argument|const QPixmapFilter *
comment|/*prototype*/
argument_list|)
block|{
return|return
literal|0
return|;
block|}
comment|// These flags are needed in the implementation of paint buffers.
expr|enum
name|Flags
block|{
name|DoNotEmulate
operator|=
literal|0x01
block|,
comment|// If set, QPainter will not wrap this engine in an emulation engine.
name|IsEmulationEngine
operator|=
literal|0x02
comment|// If set, this object is a QEmulationEngine.
block|}
block|;
name|virtual
name|uint
name|flags
argument_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|bool
name|requiresPretransformedGlyphPositions
argument_list|(
argument|QFontEngine *fontEngine
argument_list|,
argument|const QTransform&m
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|shouldDrawCachedGlyphs
argument_list|(
argument|QFontEngine *fontEngine
argument_list|,
argument|const QTransform&m
argument_list|)
specifier|const
block|;
name|protected
operator|:
name|QPaintEngineEx
argument_list|(
name|QPaintEngineExPrivate
operator|&
name|data
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QPaintEngineExPrivate
range|:
name|public
name|QPaintEnginePrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QPaintEngineEx
argument_list|)
name|public
operator|:
name|QPaintEngineExPrivate
argument_list|()
block|;
operator|~
name|QPaintEngineExPrivate
argument_list|()
block|;
name|void
name|replayClipOperations
argument_list|()
block|;
name|bool
name|hasClipOperations
argument_list|()
specifier|const
block|;
name|QStroker
name|stroker
block|;
name|QDashStroker
name|dasher
block|;
name|StrokeHandler
operator|*
name|strokeHandler
block|;
name|QStrokerOps
operator|*
name|activeStroker
block|;
name|QPen
name|strokerPen
block|;
name|QRect
name|exDeviceRect
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
