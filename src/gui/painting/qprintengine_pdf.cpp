begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui/qprintengine.h>
end_include
begin_include
include|#
directive|include
file|<qiodevice.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qbuffer.h>
end_include
begin_include
include|#
directive|include
file|"private/qcups_p.h"
end_include
begin_include
include|#
directive|include
file|"qprinterinfo.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
end_ifndef
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qwinfunctions_wince.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qprintengine_pdf_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qdrawhelper_p.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_UNIX
end_ifdef
begin_include
include|#
directive|include
file|"private/qcore_unix_p.h"
end_include
begin_comment
comment|// overrides QT_OPEN
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
comment|//#define FONT_DUMP
DECL|function|qt_pdf_decide_features
specifier|inline
name|QPaintEngine
operator|::
name|PaintEngineFeatures
name|qt_pdf_decide_features
parameter_list|()
block|{
name|QPaintEngine
operator|::
name|PaintEngineFeatures
name|f
init|=
name|QPaintEngine
operator|::
name|AllFeatures
decl_stmt|;
name|f
operator|&=
operator|~
operator|(
name|QPaintEngine
operator|::
name|PorterDuff
operator||
name|QPaintEngine
operator|::
name|PerspectiveTransform
operator||
name|QPaintEngine
operator|::
name|ObjectBoundingModeGradients
ifndef|#
directive|ifndef
name|USE_NATIVE_GRADIENTS
operator||
name|QPaintEngine
operator|::
name|LinearGradientFill
endif|#
directive|endif
operator||
name|QPaintEngine
operator|::
name|RadialGradientFill
operator||
name|QPaintEngine
operator|::
name|ConicalGradientFill
operator|)
expr_stmt|;
return|return
name|f
return|;
block|}
end_function
begin_constructor
DECL|function|QPdfEngine
name|QPdfEngine
operator|::
name|QPdfEngine
parameter_list|(
name|QPrinter
operator|::
name|PrinterMode
name|m
parameter_list|)
member_init_list|:
name|QPdfBaseEngine
argument_list|(
operator|*
operator|new
name|QPdfEnginePrivate
argument_list|(
name|m
argument_list|)
argument_list|,
name|qt_pdf_decide_features
argument_list|()
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
if|if
condition|(
name|QCUPSSupport
operator|::
name|isAvailable
argument_list|()
condition|)
block|{
name|QCUPSSupport
name|cups
decl_stmt|;
specifier|const
name|cups_dest_t
modifier|*
name|printers
init|=
name|cups
operator|.
name|availablePrinters
argument_list|()
decl_stmt|;
name|int
name|prnCount
init|=
name|cups
operator|.
name|availablePrintersCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prnCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|printers
index|[
name|i
index|]
operator|.
name|is_default
condition|)
block|{
name|d
operator|->
name|printerName
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|printers
index|[
name|i
index|]
operator|.
name|name
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
endif|#
directive|endif
block|{
name|d
operator|->
name|printerName
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"PRINTER"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|printerName
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|->
name|printerName
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"LPDEST"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|printerName
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|->
name|printerName
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"NPRINTER"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|printerName
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|->
name|printerName
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"NGPRINTER"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|state
operator|=
name|QPrinter
operator|::
name|Idle
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QPdfEngine
name|QPdfEngine
operator|::
name|~
name|QPdfEngine
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|begin
name|bool
name|QPdfEngine
operator|::
name|begin
parameter_list|(
name|QPaintDevice
modifier|*
name|pdev
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|openPrintDevice
argument_list|()
condition|)
block|{
name|state
operator|=
name|QPrinter
operator|::
name|Error
expr_stmt|;
return|return
literal|false
return|;
block|}
name|state
operator|=
name|QPrinter
operator|::
name|Active
expr_stmt|;
return|return
name|QPdfBaseEngine
operator|::
name|begin
argument_list|(
name|pdev
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|end
name|bool
name|QPdfEngine
operator|::
name|end
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPdfEngine
argument_list|)
expr_stmt|;
name|QPdfBaseEngine
operator|::
name|end
argument_list|()
expr_stmt|;
name|d
operator|->
name|closePrintDevice
argument_list|()
expr_stmt|;
name|state
operator|=
name|QPrinter
operator|::
name|Idle
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|newPage
name|bool
name|QPdfEngine
operator|::
name|newPage
parameter_list|()
block|{
return|return
name|QPdfBaseEngine
operator|::
name|newPage
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|metric
name|int
name|QPdfEngine
operator|::
name|metric
parameter_list|(
name|QPaintDevice
operator|::
name|PaintDeviceMetric
name|m
parameter_list|)
specifier|const
block|{
return|return
name|QPdfBaseEngine
operator|::
name|metric
argument_list|(
name|m
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setProperty
name|void
name|QPdfEngine
operator|::
name|setProperty
parameter_list|(
name|PrintEnginePropertyKey
name|key
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPdfBaseEngine
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|int
argument_list|(
name|key
argument_list|)
condition|)
block|{
case|case
name|PPK_CollateCopies
case|:
name|d
operator|->
name|collate
operator|=
name|value
operator|.
name|toBool
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_ColorMode
case|:
name|d
operator|->
name|colorMode
operator|=
name|QPrinter
operator|::
name|ColorMode
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PPK_Creator
case|:
name|d
operator|->
name|creator
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_DocumentName
case|:
name|d
operator|->
name|title
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_FullPage
case|:
name|d
operator|->
name|fullPage
operator|=
name|value
operator|.
name|toBool
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_CopyCount
case|:
comment|// fallthrough
case|case
name|PPK_NumberOfCopies
case|:
name|d
operator|->
name|copies
operator|=
name|value
operator|.
name|toInt
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_Orientation
case|:
name|d
operator|->
name|orientation
operator|=
name|QPrinter
operator|::
name|Orientation
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PPK_OutputFileName
case|:
name|d
operator|->
name|outputFileName
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_PageOrder
case|:
name|d
operator|->
name|pageOrder
operator|=
name|QPrinter
operator|::
name|PageOrder
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PPK_PaperSize
case|:
name|d
operator|->
name|paperSize
operator|=
name|QPrinter
operator|::
name|PaperSize
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PPK_PaperSource
case|:
name|d
operator|->
name|paperSource
operator|=
name|QPrinter
operator|::
name|PaperSource
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PPK_PrinterName
case|:
name|d
operator|->
name|printerName
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_PrinterProgram
case|:
name|d
operator|->
name|printProgram
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_Resolution
case|:
name|d
operator|->
name|resolution
operator|=
name|value
operator|.
name|toInt
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_SelectionOption
case|:
name|d
operator|->
name|selectionOption
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_FontEmbedding
case|:
name|d
operator|->
name|embedFonts
operator|=
name|value
operator|.
name|toBool
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_Duplex
case|:
name|d
operator|->
name|duplex
operator|=
cast|static_cast
argument_list|<
name|QPrinter
operator|::
name|DuplexMode
argument_list|>
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PPK_CupsPageRect
case|:
name|d
operator|->
name|cupsPageRect
operator|=
name|value
operator|.
name|toRect
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_CupsPaperRect
case|:
name|d
operator|->
name|cupsPaperRect
operator|=
name|value
operator|.
name|toRect
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_CupsOptions
case|:
name|d
operator|->
name|cupsOptions
operator|=
name|value
operator|.
name|toStringList
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_CupsStringPageSize
case|:
name|d
operator|->
name|cupsStringPageSize
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_CustomPaperSize
case|:
name|d
operator|->
name|paperSize
operator|=
name|QPrinter
operator|::
name|Custom
expr_stmt|;
name|d
operator|->
name|customPaperSize
operator|=
name|value
operator|.
name|toSizeF
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_PageMargins
case|:
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|margins
argument_list|(
name|value
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|margins
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|d
operator|->
name|leftMargin
operator|=
name|margins
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toReal
argument_list|()
expr_stmt|;
name|d
operator|->
name|topMargin
operator|=
name|margins
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toReal
argument_list|()
expr_stmt|;
name|d
operator|->
name|rightMargin
operator|=
name|margins
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toReal
argument_list|()
expr_stmt|;
name|d
operator|->
name|bottomMargin
operator|=
name|margins
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|toReal
argument_list|()
expr_stmt|;
name|d
operator|->
name|hasCustomPageMargins
operator|=
literal|true
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
block|}
end_function
begin_function
DECL|function|property
name|QVariant
name|QPdfEngine
operator|::
name|property
parameter_list|(
name|PrintEnginePropertyKey
name|key
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPdfBaseEngine
argument_list|)
expr_stmt|;
name|QVariant
name|ret
decl_stmt|;
switch|switch
condition|(
name|int
argument_list|(
name|key
argument_list|)
condition|)
block|{
case|case
name|PPK_CollateCopies
case|:
name|ret
operator|=
name|d
operator|->
name|collate
expr_stmt|;
break|break;
case|case
name|PPK_ColorMode
case|:
name|ret
operator|=
name|d
operator|->
name|colorMode
expr_stmt|;
break|break;
case|case
name|PPK_Creator
case|:
name|ret
operator|=
name|d
operator|->
name|creator
expr_stmt|;
break|break;
case|case
name|PPK_DocumentName
case|:
name|ret
operator|=
name|d
operator|->
name|title
expr_stmt|;
break|break;
case|case
name|PPK_FullPage
case|:
name|ret
operator|=
name|d
operator|->
name|fullPage
expr_stmt|;
break|break;
case|case
name|PPK_CopyCount
case|:
name|ret
operator|=
name|d
operator|->
name|copies
expr_stmt|;
break|break;
case|case
name|PPK_SupportsMultipleCopies
case|:
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
if|if
condition|(
name|QCUPSSupport
operator|::
name|isAvailable
argument_list|()
condition|)
name|ret
operator|=
literal|true
expr_stmt|;
else|else
endif|#
directive|endif
name|ret
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|PPK_NumberOfCopies
case|:
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
if|if
condition|(
name|QCUPSSupport
operator|::
name|isAvailable
argument_list|()
condition|)
name|ret
operator|=
literal|1
expr_stmt|;
else|else
endif|#
directive|endif
name|ret
operator|=
name|d
operator|->
name|copies
expr_stmt|;
break|break;
case|case
name|PPK_Orientation
case|:
name|ret
operator|=
name|d
operator|->
name|orientation
expr_stmt|;
break|break;
case|case
name|PPK_OutputFileName
case|:
name|ret
operator|=
name|d
operator|->
name|outputFileName
expr_stmt|;
break|break;
case|case
name|PPK_PageOrder
case|:
name|ret
operator|=
name|d
operator|->
name|pageOrder
expr_stmt|;
break|break;
case|case
name|PPK_PaperSize
case|:
name|ret
operator|=
name|d
operator|->
name|paperSize
expr_stmt|;
break|break;
case|case
name|PPK_PaperSource
case|:
name|ret
operator|=
name|d
operator|->
name|paperSource
expr_stmt|;
break|break;
case|case
name|PPK_PrinterName
case|:
name|ret
operator|=
name|d
operator|->
name|printerName
expr_stmt|;
break|break;
case|case
name|PPK_PrinterProgram
case|:
name|ret
operator|=
name|d
operator|->
name|printProgram
expr_stmt|;
break|break;
case|case
name|PPK_Resolution
case|:
name|ret
operator|=
name|d
operator|->
name|resolution
expr_stmt|;
break|break;
case|case
name|PPK_SupportedResolutions
case|:
name|ret
operator|=
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
literal|72
expr_stmt|;
break|break;
case|case
name|PPK_PaperRect
case|:
name|ret
operator|=
name|d
operator|->
name|paperRect
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_PageRect
case|:
name|ret
operator|=
name|d
operator|->
name|pageRect
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_SelectionOption
case|:
name|ret
operator|=
name|d
operator|->
name|selectionOption
expr_stmt|;
break|break;
case|case
name|PPK_FontEmbedding
case|:
name|ret
operator|=
name|d
operator|->
name|embedFonts
expr_stmt|;
break|break;
case|case
name|PPK_Duplex
case|:
name|ret
operator|=
name|d
operator|->
name|duplex
expr_stmt|;
break|break;
case|case
name|PPK_CupsPageRect
case|:
name|ret
operator|=
name|d
operator|->
name|cupsPageRect
expr_stmt|;
break|break;
case|case
name|PPK_CupsPaperRect
case|:
name|ret
operator|=
name|d
operator|->
name|cupsPaperRect
expr_stmt|;
break|break;
case|case
name|PPK_CupsOptions
case|:
name|ret
operator|=
name|d
operator|->
name|cupsOptions
expr_stmt|;
break|break;
case|case
name|PPK_CupsStringPageSize
case|:
name|ret
operator|=
name|d
operator|->
name|cupsStringPageSize
expr_stmt|;
break|break;
case|case
name|PPK_CustomPaperSize
case|:
name|ret
operator|=
name|d
operator|->
name|customPaperSize
expr_stmt|;
break|break;
case|case
name|PPK_PageMargins
case|:
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|margins
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|hasCustomPageMargins
condition|)
block|{
name|margins
operator|<<
name|d
operator|->
name|leftMargin
operator|<<
name|d
operator|->
name|topMargin
operator|<<
name|d
operator|->
name|rightMargin
operator|<<
name|d
operator|->
name|bottomMargin
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|qreal
name|defaultMargin
init|=
literal|10
decl_stmt|;
comment|// ~3.5 mm
name|margins
operator|<<
name|defaultMargin
operator|<<
name|defaultMargin
operator|<<
name|defaultMargin
operator|<<
name|defaultMargin
expr_stmt|;
block|}
name|ret
operator|=
name|margins
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_LPR
end_ifndef
begin_function
DECL|function|closeAllOpenFds
specifier|static
name|void
name|closeAllOpenFds
parameter_list|()
block|{
comment|// hack time... getting the maximum number of open
comment|// files, if possible.  if not we assume it's the
comment|// larger of 256 and the fd we got
name|int
name|i
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|_SC_OPEN_MAX
argument_list|)
name|i
operator|=
operator|(
name|int
operator|)
name|sysconf
argument_list|(
name|_SC_OPEN_MAX
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|_POSIX_OPEN_MAX
argument_list|)
name|i
operator|=
operator|(
name|int
operator|)
name|_POSIX_OPEN_MAX
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|OPEN_MAX
argument_list|)
name|i
operator|=
operator|(
name|int
operator|)
name|OPEN_MAX
expr_stmt|;
else|#
directive|else
name|i
operator|=
literal|256
expr_stmt|;
endif|#
directive|endif
comment|// leave stdin/out/err untouched
while|while
condition|(
operator|--
name|i
operator|>
literal|2
condition|)
name|QT_CLOSE
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|openPrintDevice
name|bool
name|QPdfEnginePrivate
operator|::
name|openPrintDevice
parameter_list|()
block|{
if|if
condition|(
name|outDevice
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|outputFileName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QFile
modifier|*
name|file
init|=
operator|new
name|QFile
argument_list|(
name|outputFileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|->
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Truncate
argument_list|)
condition|)
block|{
operator|delete
name|file
expr_stmt|;
return|return
literal|false
return|;
block|}
name|outDevice
operator|=
name|file
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
block|}
elseif|else
if|if
condition|(
name|QCUPSSupport
operator|::
name|isAvailable
argument_list|()
condition|)
block|{
name|QCUPSSupport
name|cups
decl_stmt|;
name|QPair
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|ret
init|=
name|cups
operator|.
name|tempFd
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|first
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPdfPrinter: Could not open temporary file to print"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|cupsTempFile
operator|=
name|ret
operator|.
name|second
expr_stmt|;
name|outDevice
operator|=
operator|new
name|QFile
argument_list|()
expr_stmt|;
cast|static_cast
argument_list|<
name|QFile
operator|*
argument_list|>
argument_list|(
name|outDevice
argument_list|)
operator|->
name|open
argument_list|(
name|ret
operator|.
name|first
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_LPR
block|}
else|else
block|{
name|QString
name|pr
decl_stmt|;
if|if
condition|(
operator|!
name|printerName
operator|.
name|isEmpty
argument_list|()
condition|)
name|pr
operator|=
name|printerName
expr_stmt|;
name|int
name|fds
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|qt_safe_pipe
argument_list|(
name|fds
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPdfPrinter: Could not open pipe to print"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|pid_t
name|pid
init|=
name|fork
argument_list|()
decl_stmt|;
if|if
condition|(
name|pid
operator|==
literal|0
condition|)
block|{
comment|// child process
comment|// if possible, exit quickly, so the actual lp/lpr
comment|// becomes a child of init, and ::waitpid() is
comment|// guaranteed not to wait.
if|if
condition|(
name|fork
argument_list|()
operator|>
literal|0
condition|)
block|{
name|closeAllOpenFds
argument_list|()
expr_stmt|;
comment|// try to replace this process with "true" - this prevents
comment|// global destructors from being called (that could possibly
comment|// do wrong things to the parent process)
operator|(
name|void
operator|)
name|execlp
argument_list|(
literal|"true"
argument_list|,
literal|"true"
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|execl
argument_list|(
literal|"/bin/true"
argument_list|,
literal|"true"
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|execl
argument_list|(
literal|"/usr/bin/true"
argument_list|,
literal|"true"
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
operator|::
name|_exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|qt_safe_dup2
argument_list|(
name|fds
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|closeAllOpenFds
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|printProgram
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|selectionOption
operator|.
name|isEmpty
argument_list|()
condition|)
name|pr
operator|.
name|prepend
argument_list|(
name|selectionOption
argument_list|)
expr_stmt|;
else|else
name|pr
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
literal|"-P"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|execlp
argument_list|(
name|printProgram
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|printProgram
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|pr
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if no print program has been specified, be smart
comment|// about the option string too.
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|lprhack
decl_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|lphack
decl_stmt|;
name|QByteArray
name|media
decl_stmt|;
if|if
condition|(
operator|!
name|pr
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|selectionOption
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|selectionOption
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStringList
name|list
init|=
name|selectionOption
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|lprhack
operator|.
name|append
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
name|lphack
operator|=
name|lprhack
expr_stmt|;
block|}
else|else
block|{
name|lprhack
operator|.
name|append
argument_list|(
literal|"-P"
argument_list|)
expr_stmt|;
name|lphack
operator|.
name|append
argument_list|(
literal|"-d"
argument_list|)
expr_stmt|;
block|}
name|lprhack
operator|.
name|append
argument_list|(
name|pr
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
name|lphack
operator|.
name|append
argument_list|(
name|pr
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|lphack
operator|.
name|append
argument_list|(
literal|"-s"
argument_list|)
expr_stmt|;
name|char
modifier|*
modifier|*
name|lpargs
init|=
operator|new
name|char
operator|*
index|[
name|lphack
operator|.
name|size
argument_list|()
operator|+
literal|6
index|]
decl_stmt|;
name|char
name|lp
index|[]
init|=
literal|"lp"
decl_stmt|;
name|lpargs
index|[
literal|0
index|]
operator|=
name|lp
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|lphack
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|lpargs
index|[
name|i
operator|+
literal|1
index|]
operator|=
operator|(
name|char
operator|*
operator|)
name|lphack
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|constData
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_OSF
if|if
condition|(
name|QPdf
operator|::
name|paperSizeToString
argument_list|(
name|paperSize
argument_list|)
condition|)
block|{
name|char
name|dash_o
index|[]
init|=
literal|"-o"
decl_stmt|;
name|lpargs
index|[
operator|++
name|i
index|]
operator|=
name|dash_o
expr_stmt|;
name|lpargs
index|[
operator|++
name|i
index|]
operator|=
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|QPdf
operator|::
name|paperSizeToString
argument_list|(
name|paperSize
argument_list|)
argument_list|)
expr_stmt|;
name|lpargs
index|[
operator|++
name|i
index|]
operator|=
name|dash_o
expr_stmt|;
name|media
operator|=
literal|"media="
expr_stmt|;
name|media
operator|+=
name|QPdf
operator|::
name|paperSizeToString
argument_list|(
name|paperSize
argument_list|)
expr_stmt|;
name|lpargs
index|[
operator|++
name|i
index|]
operator|=
name|media
operator|.
name|data
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
name|lpargs
index|[
operator|++
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|char
modifier|*
modifier|*
name|lprargs
init|=
operator|new
name|char
operator|*
index|[
name|lprhack
operator|.
name|size
argument_list|()
operator|+
literal|2
index|]
decl_stmt|;
name|char
name|lpr
index|[]
init|=
literal|"lpr"
decl_stmt|;
name|lprargs
index|[
literal|0
index|]
operator|=
name|lpr
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lprhack
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|lprargs
index|[
name|i
operator|+
literal|1
index|]
operator|=
operator|(
name|char
operator|*
operator|)
name|lprhack
index|[
name|i
index|]
operator|.
name|constData
argument_list|()
expr_stmt|;
name|lprargs
index|[
name|lprhack
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
operator|=
literal|0
expr_stmt|;
operator|(
name|void
operator|)
name|execvp
argument_list|(
literal|"lp"
argument_list|,
name|lpargs
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|execvp
argument_list|(
literal|"lpr"
argument_list|,
name|lprargs
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|execv
argument_list|(
literal|"/bin/lp"
argument_list|,
name|lpargs
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|execv
argument_list|(
literal|"/bin/lpr"
argument_list|,
name|lprargs
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|execv
argument_list|(
literal|"/usr/bin/lp"
argument_list|,
name|lpargs
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|execv
argument_list|(
literal|"/usr/bin/lpr"
argument_list|,
name|lprargs
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|lpargs
expr_stmt|;
operator|delete
index|[]
name|lprargs
expr_stmt|;
block|}
comment|// if we couldn't exec anything, close the fd,
comment|// wait for a second so the parent process (the
comment|// child of the GUI process) has exited.  then
comment|// exit.
name|QT_CLOSE
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
operator|::
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
operator|::
name|_exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// parent process
name|QT_CLOSE
argument_list|(
name|fds
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|fd
operator|=
name|fds
index|[
literal|1
index|]
expr_stmt|;
operator|(
name|void
operator|)
name|qt_safe_waitpid
argument_list|(
name|pid
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|fd
operator|<
literal|0
condition|)
return|return
literal|false
return|;
name|outDevice
operator|=
operator|new
name|QFile
argument_list|()
expr_stmt|;
cast|static_cast
argument_list|<
name|QFile
operator|*
argument_list|>
argument_list|(
name|outDevice
argument_list|)
operator|->
name|open
argument_list|(
name|fd
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|closePrintDevice
name|void
name|QPdfEnginePrivate
operator|::
name|closePrintDevice
parameter_list|()
block|{
if|if
condition|(
operator|!
name|outDevice
condition|)
return|return;
name|outDevice
operator|->
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|fd
operator|>=
literal|0
condition|)
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|_MSC_VER
operator|>=
literal|1400
operator|::
name|_close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
else|#
directive|else
operator|::
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|fd
operator|=
operator|-
literal|1
expr_stmt|;
operator|delete
name|outDevice
expr_stmt|;
name|outDevice
operator|=
literal|0
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
if|if
condition|(
operator|!
name|cupsTempFile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|tempFile
init|=
name|cupsTempFile
decl_stmt|;
name|cupsTempFile
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCUPSSupport
name|cups
decl_stmt|;
comment|// Set up print options.
name|QByteArray
name|prnName
decl_stmt|;
name|QList
argument_list|<
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|>
name|options
decl_stmt|;
name|QVector
argument_list|<
name|cups_option_t
argument_list|>
name|cupsOptStruct
decl_stmt|;
if|if
condition|(
operator|!
name|printerName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|prnName
operator|=
name|printerName
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QPrinterInfo
name|def
init|=
name|QPrinterInfo
operator|::
name|defaultPrinter
argument_list|()
decl_stmt|;
if|if
condition|(
name|def
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not determine printer to print to"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
return|return;
block|}
name|prnName
operator|=
name|def
operator|.
name|printerName
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cupsStringPageSize
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"media"
argument_list|,
name|cupsStringPageSize
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|copies
operator|>
literal|1
condition|)
block|{
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"copies"
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|copies
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|collate
condition|)
block|{
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"Collate"
argument_list|,
literal|"True"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|duplex
operator|!=
name|QPrinter
operator|::
name|DuplexNone
condition|)
block|{
switch|switch
condition|(
name|duplex
condition|)
block|{
case|case
name|QPrinter
operator|::
name|DuplexNone
case|:
break|break;
case|case
name|QPrinter
operator|::
name|DuplexAuto
case|:
if|if
condition|(
name|orientation
operator|==
name|QPrinter
operator|::
name|Portrait
condition|)
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"sides"
argument_list|,
literal|"two-sided-long-edge"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"sides"
argument_list|,
literal|"two-sided-short-edge"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPrinter
operator|::
name|DuplexLongSide
case|:
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"sides"
argument_list|,
literal|"two-sided-long-edge"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPrinter
operator|::
name|DuplexShortSide
case|:
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"sides"
argument_list|,
literal|"two-sided-short-edge"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|QCUPSSupport
operator|::
name|cupsVersion
argument_list|()
operator|>=
literal|10300
operator|&&
name|orientation
operator|==
name|QPrinter
operator|::
name|Landscape
condition|)
block|{
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"landscape"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QStringList
operator|::
name|const_iterator
name|it
init|=
name|cupsOptions
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|cupsOptions
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|,
operator|(
operator|*
operator|(
name|it
operator|+
literal|1
operator|)
operator|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|it
operator|+=
literal|2
expr_stmt|;
block|}
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|options
operator|.
name|size
argument_list|()
condition|;
operator|++
name|c
control|)
block|{
name|cups_option_t
name|opt
decl_stmt|;
name|opt
operator|.
name|name
operator|=
name|options
index|[
name|c
index|]
operator|.
name|first
operator|.
name|data
argument_list|()
expr_stmt|;
name|opt
operator|.
name|value
operator|=
name|options
index|[
name|c
index|]
operator|.
name|second
operator|.
name|data
argument_list|()
expr_stmt|;
name|cupsOptStruct
operator|.
name|append
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
comment|// Print the file.
name|cups_option_t
modifier|*
name|optPtr
init|=
name|cupsOptStruct
operator|.
name|size
argument_list|()
condition|?
operator|&
name|cupsOptStruct
operator|.
name|first
argument_list|()
else|:
literal|0
decl_stmt|;
name|cups
operator|.
name|printFile
argument_list|(
name|prnName
operator|.
name|constData
argument_list|()
argument_list|,
name|tempFile
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|title
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|cupsOptStruct
operator|.
name|size
argument_list|()
argument_list|,
name|optPtr
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_constructor
DECL|function|QPdfEnginePrivate
name|QPdfEnginePrivate
operator|::
name|QPdfEnginePrivate
parameter_list|(
name|QPrinter
operator|::
name|PrinterMode
name|m
parameter_list|)
member_init_list|:
name|QPdfBaseEnginePrivate
argument_list|(
name|m
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QPdfEnginePrivate
name|QPdfEnginePrivate
operator|::
name|~
name|QPdfEnginePrivate
parameter_list|()
block|{ }
end_destructor
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PRINTER
end_comment
end_unit
