begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<private/qt_x11_p.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|member|shared_empty
name|QRegion
operator|::
name|QRegionData
name|QRegion
operator|::
name|shared_empty
init|=
block|{
name|Q_BASIC_ATOMIC_INITIALIZER
argument_list|(
literal|1
argument_list|)
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|updateX11Region
name|void
name|QRegion
operator|::
name|updateX11Region
parameter_list|()
specifier|const
block|{
name|d
operator|->
name|rgn
operator|=
name|XCreateRegion
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|qt_rgn
condition|)
return|return;
name|int
name|n
init|=
name|d
operator|->
name|qt_rgn
operator|->
name|numRects
decl_stmt|;
specifier|const
name|QRect
modifier|*
name|rect
init|=
operator|(
name|n
operator|==
literal|1
condition|?
operator|&
name|d
operator|->
name|qt_rgn
operator|->
name|extents
else|:
name|d
operator|->
name|qt_rgn
operator|->
name|rects
operator|.
name|constData
argument_list|()
operator|)
decl_stmt|;
while|while
condition|(
name|n
operator|--
condition|)
block|{
name|XRectangle
name|r
decl_stmt|;
name|r
operator|.
name|x
operator|=
name|qMax
argument_list|(
name|SHRT_MIN
argument_list|,
name|rect
operator|->
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|y
operator|=
name|qMax
argument_list|(
name|SHRT_MIN
argument_list|,
name|rect
operator|->
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|width
operator|=
name|qMin
argument_list|(
operator|(
name|int
operator|)
name|USHRT_MAX
argument_list|,
name|rect
operator|->
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|height
operator|=
name|qMin
argument_list|(
operator|(
name|int
operator|)
name|USHRT_MAX
argument_list|,
name|rect
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|XUnionRectWithRegion
argument_list|(
operator|&
name|r
argument_list|,
name|d
operator|->
name|rgn
argument_list|,
name|d
operator|->
name|rgn
argument_list|)
expr_stmt|;
operator|++
name|rect
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|clipRectangles
name|void
modifier|*
name|QRegion
operator|::
name|clipRectangles
parameter_list|(
name|int
modifier|&
name|num
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|xrectangles
operator|&&
operator|!
operator|(
name|d
operator|==
operator|&
name|shared_empty
operator|||
name|d
operator|->
name|qt_rgn
operator|->
name|numRects
operator|==
literal|0
operator|)
condition|)
block|{
name|XRectangle
modifier|*
name|r
init|=
cast|static_cast
argument_list|<
name|XRectangle
operator|*
argument_list|>
argument_list|(
name|malloc
argument_list|(
name|d
operator|->
name|qt_rgn
operator|->
name|numRects
operator|*
sizeof|sizeof
argument_list|(
name|XRectangle
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|->
name|xrectangles
operator|=
name|r
expr_stmt|;
name|int
name|n
init|=
name|d
operator|->
name|qt_rgn
operator|->
name|numRects
decl_stmt|;
specifier|const
name|QRect
modifier|*
name|rect
init|=
operator|(
name|n
operator|==
literal|1
condition|?
operator|&
name|d
operator|->
name|qt_rgn
operator|->
name|extents
else|:
name|d
operator|->
name|qt_rgn
operator|->
name|rects
operator|.
name|constData
argument_list|()
operator|)
decl_stmt|;
while|while
condition|(
name|n
operator|--
condition|)
block|{
name|r
operator|->
name|x
operator|=
name|qMax
argument_list|(
name|SHRT_MIN
argument_list|,
name|rect
operator|->
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|->
name|y
operator|=
name|qMax
argument_list|(
name|SHRT_MIN
argument_list|,
name|rect
operator|->
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|->
name|width
operator|=
name|qMin
argument_list|(
operator|(
name|int
operator|)
name|USHRT_MAX
argument_list|,
name|rect
operator|->
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|->
name|height
operator|=
name|qMin
argument_list|(
operator|(
name|int
operator|)
name|USHRT_MAX
argument_list|,
name|rect
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|r
expr_stmt|;
operator|++
name|rect
expr_stmt|;
block|}
block|}
if|if
condition|(
name|d
operator|==
operator|&
name|shared_empty
operator|||
name|d
operator|->
name|qt_rgn
operator|->
name|numRects
operator|==
literal|0
condition|)
name|num
operator|=
literal|0
expr_stmt|;
else|else
name|num
operator|=
name|d
operator|->
name|qt_rgn
operator|->
name|numRects
expr_stmt|;
return|return
name|d
operator|->
name|xrectangles
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
