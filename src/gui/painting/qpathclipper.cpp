begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qpathclipper_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qbezier_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qdatabuffer_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qnumeric_p.h>
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_comment
comment|/**   The algorithm is as follows:    1. Find all intersections between the two paths (including self-intersections),      and build a winged edge structure of non-intersecting parts.   2. While there are more unhandled edges:     3. Pick a y-coordinate from an unhandled edge.     4. Intersect the horizontal line at y-coordinate with all edges.     5. Traverse intersections left to right deciding whether each subpath should be added or not.     6. If the subpath should be added, traverse the winged-edge structure and add the edges to        a separate winged edge structure.     7. Mark all edges in subpaths crossing the horizontal line as handled.  8. (Optional) Simplify the resulting winged edge structure by merging shared edges.  9. Convert the resulting winged edge structure to a painter path.  */
end_comment
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|fuzzyIsNull
specifier|static
specifier|inline
name|bool
name|fuzzyIsNull
parameter_list|(
name|qreal
name|d
parameter_list|)
block|{
if|if
condition|(
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|double
argument_list|)
condition|)
return|return
name|qAbs
argument_list|(
name|d
argument_list|)
operator|<=
literal|1e-12
return|;
else|else
return|return
name|qAbs
argument_list|(
name|d
argument_list|)
operator|<=
literal|1e-5f
return|;
block|}
end_function
begin_function
DECL|function|comparePoints
specifier|static
specifier|inline
name|bool
name|comparePoints
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|a
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|b
parameter_list|)
block|{
return|return
name|fuzzyIsNull
argument_list|(
name|a
operator|.
name|x
argument_list|()
operator|-
name|b
operator|.
name|x
argument_list|()
argument_list|)
operator|&&
name|fuzzyIsNull
argument_list|(
name|a
operator|.
name|y
argument_list|()
operator|-
name|b
operator|.
name|y
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//#define QDEBUG_CLIPPER
end_comment
begin_function
DECL|function|dot
specifier|static
name|qreal
name|dot
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|a
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|x
argument_list|()
operator|*
name|b
operator|.
name|x
argument_list|()
operator|+
name|a
operator|.
name|y
argument_list|()
operator|*
name|b
operator|.
name|y
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|normalize
specifier|static
name|void
name|normalize
parameter_list|(
name|double
modifier|&
name|x
parameter_list|,
name|double
modifier|&
name|y
parameter_list|)
block|{
name|double
name|reciprocal
init|=
literal|1
operator|/
name|qSqrt
argument_list|(
name|x
operator|*
name|x
operator|+
name|y
operator|*
name|y
argument_list|)
decl_stmt|;
name|x
operator|*=
name|reciprocal
expr_stmt|;
name|y
operator|*=
name|reciprocal
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|QIntersection
struct|struct
name|QIntersection
block|{
DECL|member|alphaA
name|qreal
name|alphaA
decl_stmt|;
DECL|member|alphaB
name|qreal
name|alphaB
decl_stmt|;
DECL|member|pos
name|QPointF
name|pos
decl_stmt|;
block|}
struct|;
end_struct
begin_class
DECL|class|QIntersectionFinder
class|class
name|QIntersectionFinder
block|{
public|public:
name|void
name|produceIntersections
parameter_list|(
name|QPathSegments
modifier|&
name|segments
parameter_list|)
function_decl|;
name|bool
name|hasIntersections
parameter_list|(
specifier|const
name|QPathSegments
modifier|&
name|a
parameter_list|,
specifier|const
name|QPathSegments
modifier|&
name|b
parameter_list|)
specifier|const
function_decl|;
private|private:
name|bool
name|linesIntersect
parameter_list|(
specifier|const
name|QLineF
modifier|&
name|a
parameter_list|,
specifier|const
name|QLineF
modifier|&
name|b
parameter_list|)
specifier|const
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|linesIntersect
name|bool
name|QIntersectionFinder
operator|::
name|linesIntersect
parameter_list|(
specifier|const
name|QLineF
modifier|&
name|a
parameter_list|,
specifier|const
name|QLineF
modifier|&
name|b
parameter_list|)
specifier|const
block|{
specifier|const
name|QPointF
name|p1
init|=
name|a
operator|.
name|p1
argument_list|()
decl_stmt|;
specifier|const
name|QPointF
name|p2
init|=
name|a
operator|.
name|p2
argument_list|()
decl_stmt|;
specifier|const
name|QPointF
name|q1
init|=
name|b
operator|.
name|p1
argument_list|()
decl_stmt|;
specifier|const
name|QPointF
name|q2
init|=
name|b
operator|.
name|p2
argument_list|()
decl_stmt|;
if|if
condition|(
name|comparePoints
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
operator|||
name|comparePoints
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
condition|)
return|return
literal|false
return|;
specifier|const
name|bool
name|p1_equals_q1
init|=
name|comparePoints
argument_list|(
name|p1
argument_list|,
name|q1
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|p2_equals_q2
init|=
name|comparePoints
argument_list|(
name|p2
argument_list|,
name|q2
argument_list|)
decl_stmt|;
if|if
condition|(
name|p1_equals_q1
operator|&&
name|p2_equals_q2
condition|)
return|return
literal|true
return|;
specifier|const
name|bool
name|p1_equals_q2
init|=
name|comparePoints
argument_list|(
name|p1
argument_list|,
name|q2
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|p2_equals_q1
init|=
name|comparePoints
argument_list|(
name|p2
argument_list|,
name|q1
argument_list|)
decl_stmt|;
if|if
condition|(
name|p1_equals_q2
operator|&&
name|p2_equals_q1
condition|)
return|return
literal|true
return|;
specifier|const
name|QPointF
name|pDelta
init|=
name|p2
operator|-
name|p1
decl_stmt|;
specifier|const
name|QPointF
name|qDelta
init|=
name|q2
operator|-
name|q1
decl_stmt|;
specifier|const
name|qreal
name|par
init|=
name|pDelta
operator|.
name|x
argument_list|()
operator|*
name|qDelta
operator|.
name|y
argument_list|()
operator|-
name|pDelta
operator|.
name|y
argument_list|()
operator|*
name|qDelta
operator|.
name|x
argument_list|()
decl_stmt|;
if|if
condition|(
name|qFuzzyIsNull
argument_list|(
name|par
argument_list|)
condition|)
block|{
specifier|const
name|QPointF
name|normal
argument_list|(
operator|-
name|pDelta
operator|.
name|y
argument_list|()
argument_list|,
name|pDelta
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
comment|// coinciding?
if|if
condition|(
name|qFuzzyIsNull
argument_list|(
name|dot
argument_list|(
name|normal
argument_list|,
name|q1
operator|-
name|p1
argument_list|)
argument_list|)
condition|)
block|{
specifier|const
name|qreal
name|dp
init|=
name|dot
argument_list|(
name|pDelta
argument_list|,
name|pDelta
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|tq1
init|=
name|dot
argument_list|(
name|pDelta
argument_list|,
name|q1
operator|-
name|p1
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|tq2
init|=
name|dot
argument_list|(
name|pDelta
argument_list|,
name|q2
operator|-
name|p1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|tq1
operator|>
literal|0
operator|&&
name|tq1
operator|<
name|dp
operator|)
operator|||
operator|(
name|tq2
operator|>
literal|0
operator|&&
name|tq2
operator|<
name|dp
operator|)
condition|)
return|return
literal|true
return|;
specifier|const
name|qreal
name|dq
init|=
name|dot
argument_list|(
name|qDelta
argument_list|,
name|qDelta
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|tp1
init|=
name|dot
argument_list|(
name|qDelta
argument_list|,
name|p1
operator|-
name|q1
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|tp2
init|=
name|dot
argument_list|(
name|qDelta
argument_list|,
name|p2
operator|-
name|q1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|tp1
operator|>
literal|0
operator|&&
name|tp1
operator|<
name|dq
operator|)
operator|||
operator|(
name|tp2
operator|>
literal|0
operator|&&
name|tp2
operator|<
name|dq
operator|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|const
name|qreal
name|invPar
init|=
literal|1
operator|/
name|par
decl_stmt|;
specifier|const
name|qreal
name|tp
init|=
operator|(
name|qDelta
operator|.
name|y
argument_list|()
operator|*
operator|(
name|q1
operator|.
name|x
argument_list|()
operator|-
name|p1
operator|.
name|x
argument_list|()
operator|)
operator|-
name|qDelta
operator|.
name|x
argument_list|()
operator|*
operator|(
name|q1
operator|.
name|y
argument_list|()
operator|-
name|p1
operator|.
name|y
argument_list|()
operator|)
operator|)
operator|*
name|invPar
decl_stmt|;
if|if
condition|(
name|tp
argument_list|<
literal|0
operator|||
name|tp
argument_list|>
literal|1
condition|)
return|return
literal|false
return|;
specifier|const
name|qreal
name|tq
init|=
operator|(
name|pDelta
operator|.
name|y
argument_list|()
operator|*
operator|(
name|q1
operator|.
name|x
argument_list|()
operator|-
name|p1
operator|.
name|x
argument_list|()
operator|)
operator|-
name|pDelta
operator|.
name|x
argument_list|()
operator|*
operator|(
name|q1
operator|.
name|y
argument_list|()
operator|-
name|p1
operator|.
name|y
argument_list|()
operator|)
operator|)
operator|*
name|invPar
decl_stmt|;
return|return
name|tq
operator|>=
literal|0
operator|&&
name|tq
operator|<=
literal|1
return|;
block|}
end_function
begin_function
DECL|function|hasIntersections
name|bool
name|QIntersectionFinder
operator|::
name|hasIntersections
parameter_list|(
specifier|const
name|QPathSegments
modifier|&
name|a
parameter_list|,
specifier|const
name|QPathSegments
modifier|&
name|b
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|a
operator|.
name|segments
argument_list|()
operator|==
literal|0
operator|||
name|b
operator|.
name|segments
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|false
return|;
specifier|const
name|QRectF
modifier|&
name|rb0
init|=
name|b
operator|.
name|elementBounds
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|qreal
name|minX
init|=
name|rb0
operator|.
name|left
argument_list|()
decl_stmt|;
name|qreal
name|minY
init|=
name|rb0
operator|.
name|top
argument_list|()
decl_stmt|;
name|qreal
name|maxX
init|=
name|rb0
operator|.
name|right
argument_list|()
decl_stmt|;
name|qreal
name|maxY
init|=
name|rb0
operator|.
name|bottom
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|b
operator|.
name|segments
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRectF
modifier|&
name|r
init|=
name|b
operator|.
name|elementBounds
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|minX
operator|=
name|qMin
argument_list|(
name|minX
argument_list|,
name|r
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
name|minY
operator|=
name|qMin
argument_list|(
name|minY
argument_list|,
name|r
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|maxX
operator|=
name|qMax
argument_list|(
name|maxX
argument_list|,
name|r
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|maxY
operator|=
name|qMax
argument_list|(
name|maxY
argument_list|,
name|r
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QRectF
name|rb
argument_list|(
name|minX
argument_list|,
name|minY
argument_list|,
name|maxX
operator|-
name|minX
argument_list|,
name|maxY
operator|-
name|minY
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|segments
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRectF
modifier|&
name|r1
init|=
name|a
operator|.
name|elementBounds
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|r1
operator|.
name|left
argument_list|()
operator|>
name|rb
operator|.
name|right
argument_list|()
operator|||
name|rb
operator|.
name|left
argument_list|()
operator|>
name|r1
operator|.
name|right
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|r1
operator|.
name|top
argument_list|()
operator|>
name|rb
operator|.
name|bottom
argument_list|()
operator|||
name|rb
operator|.
name|top
argument_list|()
operator|>
name|r1
operator|.
name|bottom
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|b
operator|.
name|segments
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
specifier|const
name|QRectF
modifier|&
name|r2
init|=
name|b
operator|.
name|elementBounds
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|r1
operator|.
name|left
argument_list|()
operator|>
name|r2
operator|.
name|right
argument_list|()
operator|||
name|r2
operator|.
name|left
argument_list|()
operator|>
name|r1
operator|.
name|right
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|r1
operator|.
name|top
argument_list|()
operator|>
name|r2
operator|.
name|bottom
argument_list|()
operator|||
name|r2
operator|.
name|top
argument_list|()
operator|>
name|r1
operator|.
name|bottom
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|linesIntersect
argument_list|(
name|a
operator|.
name|lineAt
argument_list|(
name|i
argument_list|)
argument_list|,
name|b
operator|.
name|lineAt
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_namespace
namespace|namespace
block|{
DECL|struct|TreeNode
struct|struct
name|TreeNode
block|{
DECL|member|splitLeft
name|qreal
name|splitLeft
decl_stmt|;
DECL|member|splitRight
name|qreal
name|splitRight
decl_stmt|;
DECL|member|leaf
name|bool
name|leaf
decl_stmt|;
DECL|member|lowestLeftIndex
name|int
name|lowestLeftIndex
decl_stmt|;
DECL|member|lowestRightIndex
name|int
name|lowestRightIndex
decl_stmt|;
union|union
block|{
struct|struct
block|{
DECL|member|first
name|int
name|first
decl_stmt|;
DECL|member|last
name|int
name|last
decl_stmt|;
DECL|member|interval
block|}
name|interval
struct|;
struct|struct
block|{
DECL|member|left
name|int
name|left
decl_stmt|;
DECL|member|right
name|int
name|right
decl_stmt|;
DECL|member|children
block|}
name|children
struct|;
DECL|member|index
block|}
name|index
union|;
block|}
struct|;
DECL|struct|RectF
struct|struct
name|RectF
block|{
DECL|member|x1
name|qreal
name|x1
decl_stmt|;
DECL|member|y1
name|qreal
name|y1
decl_stmt|;
DECL|member|x2
name|qreal
name|x2
decl_stmt|;
DECL|member|y2
name|qreal
name|y2
decl_stmt|;
block|}
struct|;
DECL|class|SegmentTree
class|class
name|SegmentTree
block|{
public|public:
name|SegmentTree
parameter_list|(
name|QPathSegments
modifier|&
name|segments
parameter_list|)
constructor_decl|;
name|QRectF
name|boundingRect
parameter_list|()
specifier|const
function_decl|;
name|void
name|produceIntersections
parameter_list|(
name|int
name|segment
parameter_list|)
function_decl|;
private|private:
name|TreeNode
name|buildTree
parameter_list|(
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|,
name|int
name|depth
parameter_list|,
specifier|const
name|RectF
modifier|&
name|bounds
parameter_list|)
function_decl|;
name|void
name|produceIntersectionsLeaf
parameter_list|(
specifier|const
name|TreeNode
modifier|&
name|node
parameter_list|,
name|int
name|segment
parameter_list|)
function_decl|;
name|void
name|produceIntersections
parameter_list|(
specifier|const
name|TreeNode
modifier|&
name|node
parameter_list|,
name|int
name|segment
parameter_list|,
specifier|const
name|RectF
modifier|&
name|segmentBounds
parameter_list|,
specifier|const
name|RectF
modifier|&
name|nodeBounds
parameter_list|,
name|int
name|axis
parameter_list|)
function_decl|;
name|void
name|intersectLines
parameter_list|(
specifier|const
name|QLineF
modifier|&
name|a
parameter_list|,
specifier|const
name|QLineF
modifier|&
name|b
parameter_list|,
name|QDataBuffer
argument_list|<
name|QIntersection
argument_list|>
modifier|&
name|intersections
parameter_list|)
function_decl|;
DECL|member|m_segments
name|QPathSegments
modifier|&
name|m_segments
decl_stmt|;
DECL|member|m_index
name|QVector
argument_list|<
name|int
argument_list|>
name|m_index
decl_stmt|;
DECL|member|m_bounds
name|RectF
name|m_bounds
decl_stmt|;
DECL|member|m_tree
name|QVector
argument_list|<
name|TreeNode
argument_list|>
name|m_tree
decl_stmt|;
DECL|member|m_intersections
name|QDataBuffer
argument_list|<
name|QIntersection
argument_list|>
name|m_intersections
decl_stmt|;
block|}
class|;
DECL|function|SegmentTree
name|SegmentTree
operator|::
name|SegmentTree
parameter_list|(
name|QPathSegments
modifier|&
name|segments
parameter_list|)
member_init_list|:
name|m_segments
argument_list|(
name|segments
argument_list|)
member_init_list|,
name|m_intersections
argument_list|(
literal|0
argument_list|)
block|{
name|m_bounds
operator|.
name|x1
operator|=
name|qt_inf
argument_list|()
expr_stmt|;
name|m_bounds
operator|.
name|y1
operator|=
name|qt_inf
argument_list|()
expr_stmt|;
name|m_bounds
operator|.
name|x2
operator|=
operator|-
name|qt_inf
argument_list|()
expr_stmt|;
name|m_bounds
operator|.
name|y2
operator|=
operator|-
name|qt_inf
argument_list|()
expr_stmt|;
name|m_index
operator|.
name|resize
argument_list|(
name|m_segments
operator|.
name|segments
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_index
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|m_index
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
specifier|const
name|QRectF
modifier|&
name|segmentBounds
init|=
name|m_segments
operator|.
name|elementBounds
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|segmentBounds
operator|.
name|left
argument_list|()
operator|<
name|m_bounds
operator|.
name|x1
condition|)
name|m_bounds
operator|.
name|x1
operator|=
name|segmentBounds
operator|.
name|left
argument_list|()
expr_stmt|;
if|if
condition|(
name|segmentBounds
operator|.
name|top
argument_list|()
operator|<
name|m_bounds
operator|.
name|y1
condition|)
name|m_bounds
operator|.
name|y1
operator|=
name|segmentBounds
operator|.
name|top
argument_list|()
expr_stmt|;
if|if
condition|(
name|segmentBounds
operator|.
name|right
argument_list|()
operator|>
name|m_bounds
operator|.
name|x2
condition|)
name|m_bounds
operator|.
name|x2
operator|=
name|segmentBounds
operator|.
name|right
argument_list|()
expr_stmt|;
if|if
condition|(
name|segmentBounds
operator|.
name|bottom
argument_list|()
operator|>
name|m_bounds
operator|.
name|y2
condition|)
name|m_bounds
operator|.
name|y2
operator|=
name|segmentBounds
operator|.
name|bottom
argument_list|()
expr_stmt|;
block|}
name|m_tree
operator|.
name|resize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TreeNode
name|root
init|=
name|buildTree
argument_list|(
literal|0
argument_list|,
name|m_index
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|,
name|m_bounds
argument_list|)
decl_stmt|;
name|m_tree
index|[
literal|0
index|]
operator|=
name|root
expr_stmt|;
block|}
DECL|function|boundingRect
name|QRectF
name|SegmentTree
operator|::
name|boundingRect
parameter_list|()
specifier|const
block|{
return|return
name|QRectF
argument_list|(
name|QPointF
argument_list|(
name|m_bounds
operator|.
name|x1
argument_list|,
name|m_bounds
operator|.
name|y1
argument_list|)
argument_list|,
name|QPointF
argument_list|(
name|m_bounds
operator|.
name|x2
argument_list|,
name|m_bounds
operator|.
name|y2
argument_list|)
argument_list|)
return|;
block|}
DECL|function|coordinate
specifier|static
specifier|inline
name|qreal
name|coordinate
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
name|int
name|axis
parameter_list|)
block|{
return|return
name|axis
operator|==
literal|0
condition|?
name|pos
operator|.
name|x
argument_list|()
else|:
name|pos
operator|.
name|y
argument_list|()
return|;
block|}
DECL|function|buildTree
name|TreeNode
name|SegmentTree
operator|::
name|buildTree
parameter_list|(
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|,
name|int
name|depth
parameter_list|,
specifier|const
name|RectF
modifier|&
name|bounds
parameter_list|)
block|{
if|if
condition|(
name|depth
operator|>=
literal|24
operator|||
operator|(
name|last
operator|-
name|first
operator|)
operator|<=
literal|10
condition|)
block|{
name|TreeNode
name|node
decl_stmt|;
name|node
operator|.
name|leaf
operator|=
literal|true
expr_stmt|;
name|node
operator|.
name|index
operator|.
name|interval
operator|.
name|first
operator|=
name|first
expr_stmt|;
name|node
operator|.
name|index
operator|.
name|interval
operator|.
name|last
operator|=
name|last
expr_stmt|;
return|return
name|node
return|;
block|}
name|int
name|splitAxis
init|=
operator|(
name|depth
operator|&
literal|1
operator|)
decl_stmt|;
name|TreeNode
name|node
decl_stmt|;
name|node
operator|.
name|leaf
operator|=
literal|false
expr_stmt|;
name|qreal
name|split
init|=
literal|0.5f
operator|*
operator|(
operator|(
operator|&
name|bounds
operator|.
name|x1
operator|)
index|[
name|splitAxis
index|]
operator|+
operator|(
operator|&
name|bounds
operator|.
name|x2
operator|)
index|[
name|splitAxis
index|]
operator|)
decl_stmt|;
name|node
operator|.
name|splitLeft
operator|=
operator|(
operator|&
name|bounds
operator|.
name|x1
operator|)
index|[
name|splitAxis
index|]
expr_stmt|;
name|node
operator|.
name|splitRight
operator|=
operator|(
operator|&
name|bounds
operator|.
name|x2
operator|)
index|[
name|splitAxis
index|]
expr_stmt|;
name|node
operator|.
name|lowestLeftIndex
operator|=
name|INT_MAX
expr_stmt|;
name|node
operator|.
name|lowestRightIndex
operator|=
name|INT_MAX
expr_stmt|;
specifier|const
name|int
name|treeSize
init|=
name|m_tree
operator|.
name|size
argument_list|()
decl_stmt|;
name|node
operator|.
name|index
operator|.
name|children
operator|.
name|left
operator|=
name|treeSize
expr_stmt|;
name|node
operator|.
name|index
operator|.
name|children
operator|.
name|right
operator|=
name|treeSize
operator|+
literal|1
expr_stmt|;
name|m_tree
operator|.
name|resize
argument_list|(
name|treeSize
operator|+
literal|2
argument_list|)
expr_stmt|;
name|int
name|l
init|=
name|first
decl_stmt|;
name|int
name|r
init|=
name|last
operator|-
literal|1
decl_stmt|;
comment|// partition into left and right sets
while|while
condition|(
name|l
operator|<=
name|r
condition|)
block|{
specifier|const
name|int
name|index
init|=
name|m_index
operator|.
name|at
argument_list|(
name|l
argument_list|)
decl_stmt|;
specifier|const
name|QRectF
modifier|&
name|segmentBounds
init|=
name|m_segments
operator|.
name|elementBounds
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|qreal
name|lowCoordinate
init|=
name|coordinate
argument_list|(
name|segmentBounds
operator|.
name|topLeft
argument_list|()
argument_list|,
name|splitAxis
argument_list|)
decl_stmt|;
if|if
condition|(
name|coordinate
argument_list|(
name|segmentBounds
operator|.
name|center
argument_list|()
argument_list|,
name|splitAxis
argument_list|)
operator|<
name|split
condition|)
block|{
name|qreal
name|highCoordinate
init|=
name|coordinate
argument_list|(
name|segmentBounds
operator|.
name|bottomRight
argument_list|()
argument_list|,
name|splitAxis
argument_list|)
decl_stmt|;
if|if
condition|(
name|highCoordinate
operator|>
name|node
operator|.
name|splitLeft
condition|)
name|node
operator|.
name|splitLeft
operator|=
name|highCoordinate
expr_stmt|;
if|if
condition|(
name|index
operator|<
name|node
operator|.
name|lowestLeftIndex
condition|)
name|node
operator|.
name|lowestLeftIndex
operator|=
name|index
expr_stmt|;
operator|++
name|l
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|lowCoordinate
operator|<
name|node
operator|.
name|splitRight
condition|)
name|node
operator|.
name|splitRight
operator|=
name|lowCoordinate
expr_stmt|;
if|if
condition|(
name|index
operator|<
name|node
operator|.
name|lowestRightIndex
condition|)
name|node
operator|.
name|lowestRightIndex
operator|=
name|index
expr_stmt|;
name|qSwap
argument_list|(
name|m_index
index|[
name|l
index|]
argument_list|,
name|m_index
index|[
name|r
index|]
argument_list|)
expr_stmt|;
operator|--
name|r
expr_stmt|;
block|}
block|}
name|RectF
name|lbounds
init|=
name|bounds
decl_stmt|;
operator|(
operator|&
name|lbounds
operator|.
name|x2
operator|)
index|[
name|splitAxis
index|]
operator|=
name|node
operator|.
name|splitLeft
expr_stmt|;
name|RectF
name|rbounds
init|=
name|bounds
decl_stmt|;
operator|(
operator|&
name|rbounds
operator|.
name|x1
operator|)
index|[
name|splitAxis
index|]
operator|=
name|node
operator|.
name|splitRight
expr_stmt|;
name|TreeNode
name|left
init|=
name|buildTree
argument_list|(
name|first
argument_list|,
name|l
argument_list|,
name|depth
operator|+
literal|1
argument_list|,
name|lbounds
argument_list|)
decl_stmt|;
name|m_tree
index|[
name|node
operator|.
name|index
operator|.
name|children
operator|.
name|left
index|]
operator|=
name|left
expr_stmt|;
name|TreeNode
name|right
init|=
name|buildTree
argument_list|(
name|l
argument_list|,
name|last
argument_list|,
name|depth
operator|+
literal|1
argument_list|,
name|rbounds
argument_list|)
decl_stmt|;
name|m_tree
index|[
name|node
operator|.
name|index
operator|.
name|children
operator|.
name|right
index|]
operator|=
name|right
expr_stmt|;
return|return
name|node
return|;
block|}
DECL|function|intersectLines
name|void
name|SegmentTree
operator|::
name|intersectLines
parameter_list|(
specifier|const
name|QLineF
modifier|&
name|a
parameter_list|,
specifier|const
name|QLineF
modifier|&
name|b
parameter_list|,
name|QDataBuffer
argument_list|<
name|QIntersection
argument_list|>
modifier|&
name|intersections
parameter_list|)
block|{
specifier|const
name|QPointF
name|p1
init|=
name|a
operator|.
name|p1
argument_list|()
decl_stmt|;
specifier|const
name|QPointF
name|p2
init|=
name|a
operator|.
name|p2
argument_list|()
decl_stmt|;
specifier|const
name|QPointF
name|q1
init|=
name|b
operator|.
name|p1
argument_list|()
decl_stmt|;
specifier|const
name|QPointF
name|q2
init|=
name|b
operator|.
name|p2
argument_list|()
decl_stmt|;
if|if
condition|(
name|comparePoints
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
operator|||
name|comparePoints
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
condition|)
return|return;
specifier|const
name|bool
name|p1_equals_q1
init|=
name|comparePoints
argument_list|(
name|p1
argument_list|,
name|q1
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|p2_equals_q2
init|=
name|comparePoints
argument_list|(
name|p2
argument_list|,
name|q2
argument_list|)
decl_stmt|;
if|if
condition|(
name|p1_equals_q1
operator|&&
name|p2_equals_q2
condition|)
return|return;
specifier|const
name|bool
name|p1_equals_q2
init|=
name|comparePoints
argument_list|(
name|p1
argument_list|,
name|q2
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|p2_equals_q1
init|=
name|comparePoints
argument_list|(
name|p2
argument_list|,
name|q1
argument_list|)
decl_stmt|;
if|if
condition|(
name|p1_equals_q2
operator|&&
name|p2_equals_q1
condition|)
return|return;
specifier|const
name|QPointF
name|pDelta
init|=
name|p2
operator|-
name|p1
decl_stmt|;
specifier|const
name|QPointF
name|qDelta
init|=
name|q2
operator|-
name|q1
decl_stmt|;
specifier|const
name|qreal
name|par
init|=
name|pDelta
operator|.
name|x
argument_list|()
operator|*
name|qDelta
operator|.
name|y
argument_list|()
operator|-
name|pDelta
operator|.
name|y
argument_list|()
operator|*
name|qDelta
operator|.
name|x
argument_list|()
decl_stmt|;
if|if
condition|(
name|qFuzzyIsNull
argument_list|(
name|par
argument_list|)
condition|)
block|{
specifier|const
name|QPointF
name|normal
argument_list|(
operator|-
name|pDelta
operator|.
name|y
argument_list|()
argument_list|,
name|pDelta
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
comment|// coinciding?
if|if
condition|(
name|qFuzzyIsNull
argument_list|(
name|dot
argument_list|(
name|normal
argument_list|,
name|q1
operator|-
name|p1
argument_list|)
argument_list|)
condition|)
block|{
specifier|const
name|qreal
name|invDp
init|=
literal|1
operator|/
name|dot
argument_list|(
name|pDelta
argument_list|,
name|pDelta
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|tq1
init|=
name|dot
argument_list|(
name|pDelta
argument_list|,
name|q1
operator|-
name|p1
argument_list|)
operator|*
name|invDp
decl_stmt|;
specifier|const
name|qreal
name|tq2
init|=
name|dot
argument_list|(
name|pDelta
argument_list|,
name|q2
operator|-
name|p1
argument_list|)
operator|*
name|invDp
decl_stmt|;
if|if
condition|(
name|tq1
operator|>
literal|0
operator|&&
name|tq1
operator|<
literal|1
condition|)
block|{
name|QIntersection
name|intersection
decl_stmt|;
name|intersection
operator|.
name|alphaA
operator|=
name|tq1
expr_stmt|;
name|intersection
operator|.
name|alphaB
operator|=
literal|0
expr_stmt|;
name|intersection
operator|.
name|pos
operator|=
name|q1
expr_stmt|;
name|intersections
operator|.
name|add
argument_list|(
name|intersection
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tq2
operator|>
literal|0
operator|&&
name|tq2
operator|<
literal|1
condition|)
block|{
name|QIntersection
name|intersection
decl_stmt|;
name|intersection
operator|.
name|alphaA
operator|=
name|tq2
expr_stmt|;
name|intersection
operator|.
name|alphaB
operator|=
literal|1
expr_stmt|;
name|intersection
operator|.
name|pos
operator|=
name|q2
expr_stmt|;
name|intersections
operator|.
name|add
argument_list|(
name|intersection
argument_list|)
expr_stmt|;
block|}
specifier|const
name|qreal
name|invDq
init|=
literal|1
operator|/
name|dot
argument_list|(
name|qDelta
argument_list|,
name|qDelta
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|tp1
init|=
name|dot
argument_list|(
name|qDelta
argument_list|,
name|p1
operator|-
name|q1
argument_list|)
operator|*
name|invDq
decl_stmt|;
specifier|const
name|qreal
name|tp2
init|=
name|dot
argument_list|(
name|qDelta
argument_list|,
name|p2
operator|-
name|q1
argument_list|)
operator|*
name|invDq
decl_stmt|;
if|if
condition|(
name|tp1
operator|>
literal|0
operator|&&
name|tp1
operator|<
literal|1
condition|)
block|{
name|QIntersection
name|intersection
decl_stmt|;
name|intersection
operator|.
name|alphaA
operator|=
literal|0
expr_stmt|;
name|intersection
operator|.
name|alphaB
operator|=
name|tp1
expr_stmt|;
name|intersection
operator|.
name|pos
operator|=
name|p1
expr_stmt|;
name|intersections
operator|.
name|add
argument_list|(
name|intersection
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tp2
operator|>
literal|0
operator|&&
name|tp2
operator|<
literal|1
condition|)
block|{
name|QIntersection
name|intersection
decl_stmt|;
name|intersection
operator|.
name|alphaA
operator|=
literal|1
expr_stmt|;
name|intersection
operator|.
name|alphaB
operator|=
name|tp2
expr_stmt|;
name|intersection
operator|.
name|pos
operator|=
name|p2
expr_stmt|;
name|intersections
operator|.
name|add
argument_list|(
name|intersection
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
comment|// if the lines are not parallel and share a common end point, then they
comment|// don't intersect
if|if
condition|(
name|p1_equals_q1
operator|||
name|p1_equals_q2
operator|||
name|p2_equals_q1
operator|||
name|p2_equals_q2
condition|)
return|return;
specifier|const
name|qreal
name|tp
init|=
operator|(
name|qDelta
operator|.
name|y
argument_list|()
operator|*
operator|(
name|q1
operator|.
name|x
argument_list|()
operator|-
name|p1
operator|.
name|x
argument_list|()
operator|)
operator|-
name|qDelta
operator|.
name|x
argument_list|()
operator|*
operator|(
name|q1
operator|.
name|y
argument_list|()
operator|-
name|p1
operator|.
name|y
argument_list|()
operator|)
operator|)
operator|/
name|par
decl_stmt|;
specifier|const
name|qreal
name|tq
init|=
operator|(
name|pDelta
operator|.
name|y
argument_list|()
operator|*
operator|(
name|q1
operator|.
name|x
argument_list|()
operator|-
name|p1
operator|.
name|x
argument_list|()
operator|)
operator|-
name|pDelta
operator|.
name|x
argument_list|()
operator|*
operator|(
name|q1
operator|.
name|y
argument_list|()
operator|-
name|p1
operator|.
name|y
argument_list|()
operator|)
operator|)
operator|/
name|par
decl_stmt|;
if|if
condition|(
name|tp
argument_list|<
literal|0
operator|||
name|tp
argument_list|>
literal|1
operator|||
name|tq
argument_list|<
literal|0
operator|||
name|tq
argument_list|>
literal|1
condition|)
return|return;
specifier|const
name|bool
name|p_zero
init|=
name|qFuzzyIsNull
argument_list|(
name|tp
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|p_one
init|=
name|qFuzzyIsNull
argument_list|(
name|tp
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|q_zero
init|=
name|qFuzzyIsNull
argument_list|(
name|tq
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|q_one
init|=
name|qFuzzyIsNull
argument_list|(
name|tq
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|q_zero
operator|||
name|q_one
operator|)
operator|&&
operator|(
name|p_zero
operator|||
name|p_one
operator|)
condition|)
return|return;
name|QPointF
name|pt
decl_stmt|;
if|if
condition|(
name|p_zero
condition|)
block|{
name|pt
operator|=
name|p1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p_one
condition|)
block|{
name|pt
operator|=
name|p2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|q_zero
condition|)
block|{
name|pt
operator|=
name|q1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|q_one
condition|)
block|{
name|pt
operator|=
name|q2
expr_stmt|;
block|}
else|else
block|{
name|pt
operator|=
name|q1
operator|+
operator|(
name|q2
operator|-
name|q1
operator|)
operator|*
name|tq
expr_stmt|;
block|}
name|QIntersection
name|intersection
decl_stmt|;
name|intersection
operator|.
name|alphaA
operator|=
name|tp
expr_stmt|;
name|intersection
operator|.
name|alphaB
operator|=
name|tq
expr_stmt|;
name|intersection
operator|.
name|pos
operator|=
name|pt
expr_stmt|;
name|intersections
operator|.
name|add
argument_list|(
name|intersection
argument_list|)
expr_stmt|;
block|}
DECL|function|produceIntersections
name|void
name|SegmentTree
operator|::
name|produceIntersections
parameter_list|(
name|int
name|segment
parameter_list|)
block|{
specifier|const
name|QRectF
modifier|&
name|segmentBounds
init|=
name|m_segments
operator|.
name|elementBounds
argument_list|(
name|segment
argument_list|)
decl_stmt|;
name|RectF
name|sbounds
decl_stmt|;
name|sbounds
operator|.
name|x1
operator|=
name|segmentBounds
operator|.
name|left
argument_list|()
expr_stmt|;
name|sbounds
operator|.
name|y1
operator|=
name|segmentBounds
operator|.
name|top
argument_list|()
expr_stmt|;
name|sbounds
operator|.
name|x2
operator|=
name|segmentBounds
operator|.
name|right
argument_list|()
expr_stmt|;
name|sbounds
operator|.
name|y2
operator|=
name|segmentBounds
operator|.
name|bottom
argument_list|()
expr_stmt|;
name|produceIntersections
argument_list|(
name|m_tree
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|segment
argument_list|,
name|sbounds
argument_list|,
name|m_bounds
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|function|produceIntersectionsLeaf
name|void
name|SegmentTree
operator|::
name|produceIntersectionsLeaf
parameter_list|(
specifier|const
name|TreeNode
modifier|&
name|node
parameter_list|,
name|int
name|segment
parameter_list|)
block|{
specifier|const
name|QRectF
modifier|&
name|r1
init|=
name|m_segments
operator|.
name|elementBounds
argument_list|(
name|segment
argument_list|)
decl_stmt|;
specifier|const
name|QLineF
name|lineA
init|=
name|m_segments
operator|.
name|lineAt
argument_list|(
name|segment
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|node
operator|.
name|index
operator|.
name|interval
operator|.
name|first
init|;
name|i
operator|<
name|node
operator|.
name|index
operator|.
name|interval
operator|.
name|last
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|other
init|=
name|m_index
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|other
operator|>=
name|segment
condition|)
continue|continue;
specifier|const
name|QRectF
modifier|&
name|r2
init|=
name|m_segments
operator|.
name|elementBounds
argument_list|(
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|r1
operator|.
name|left
argument_list|()
operator|>
name|r2
operator|.
name|right
argument_list|()
operator|||
name|r2
operator|.
name|left
argument_list|()
operator|>
name|r1
operator|.
name|right
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|r1
operator|.
name|top
argument_list|()
operator|>
name|r2
operator|.
name|bottom
argument_list|()
operator|||
name|r2
operator|.
name|top
argument_list|()
operator|>
name|r1
operator|.
name|bottom
argument_list|()
condition|)
continue|continue;
name|m_intersections
operator|.
name|reset
argument_list|()
expr_stmt|;
specifier|const
name|QLineF
name|lineB
init|=
name|m_segments
operator|.
name|lineAt
argument_list|(
name|other
argument_list|)
decl_stmt|;
name|intersectLines
argument_list|(
name|lineA
argument_list|,
name|lineB
argument_list|,
name|m_intersections
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|m_intersections
operator|.
name|size
argument_list|()
condition|;
operator|++
name|k
control|)
block|{
name|QPathSegments
operator|::
name|Intersection
name|i_isect
decl_stmt|,
name|j_isect
decl_stmt|;
name|i_isect
operator|.
name|vertex
operator|=
name|j_isect
operator|.
name|vertex
operator|=
name|m_segments
operator|.
name|addPoint
argument_list|(
name|m_intersections
operator|.
name|at
argument_list|(
name|k
argument_list|)
operator|.
name|pos
argument_list|)
expr_stmt|;
name|i_isect
operator|.
name|t
operator|=
name|m_intersections
operator|.
name|at
argument_list|(
name|k
argument_list|)
operator|.
name|alphaA
expr_stmt|;
name|j_isect
operator|.
name|t
operator|=
name|m_intersections
operator|.
name|at
argument_list|(
name|k
argument_list|)
operator|.
name|alphaB
expr_stmt|;
name|i_isect
operator|.
name|next
operator|=
literal|0
expr_stmt|;
name|j_isect
operator|.
name|next
operator|=
literal|0
expr_stmt|;
name|m_segments
operator|.
name|addIntersection
argument_list|(
name|segment
argument_list|,
name|i_isect
argument_list|)
expr_stmt|;
name|m_segments
operator|.
name|addIntersection
argument_list|(
name|other
argument_list|,
name|j_isect
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|produceIntersections
name|void
name|SegmentTree
operator|::
name|produceIntersections
parameter_list|(
specifier|const
name|TreeNode
modifier|&
name|node
parameter_list|,
name|int
name|segment
parameter_list|,
specifier|const
name|RectF
modifier|&
name|segmentBounds
parameter_list|,
specifier|const
name|RectF
modifier|&
name|nodeBounds
parameter_list|,
name|int
name|axis
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|leaf
condition|)
block|{
name|produceIntersectionsLeaf
argument_list|(
name|node
argument_list|,
name|segment
argument_list|)
expr_stmt|;
return|return;
block|}
name|RectF
name|lbounds
init|=
name|nodeBounds
decl_stmt|;
operator|(
operator|&
name|lbounds
operator|.
name|x2
operator|)
index|[
name|axis
index|]
operator|=
name|node
operator|.
name|splitLeft
expr_stmt|;
name|RectF
name|rbounds
init|=
name|nodeBounds
decl_stmt|;
operator|(
operator|&
name|rbounds
operator|.
name|x1
operator|)
index|[
name|axis
index|]
operator|=
name|node
operator|.
name|splitRight
expr_stmt|;
if|if
condition|(
name|segment
operator|>
name|node
operator|.
name|lowestLeftIndex
operator|&&
operator|(
operator|&
name|segmentBounds
operator|.
name|x1
operator|)
index|[
name|axis
index|]
operator|<=
name|node
operator|.
name|splitLeft
condition|)
name|produceIntersections
argument_list|(
name|m_tree
operator|.
name|at
argument_list|(
name|node
operator|.
name|index
operator|.
name|children
operator|.
name|left
argument_list|)
argument_list|,
name|segment
argument_list|,
name|segmentBounds
argument_list|,
name|lbounds
argument_list|,
operator|!
name|axis
argument_list|)
expr_stmt|;
if|if
condition|(
name|segment
operator|>
name|node
operator|.
name|lowestRightIndex
operator|&&
operator|(
operator|&
name|segmentBounds
operator|.
name|x2
operator|)
index|[
name|axis
index|]
operator|>=
name|node
operator|.
name|splitRight
condition|)
name|produceIntersections
argument_list|(
name|m_tree
operator|.
name|at
argument_list|(
name|node
operator|.
name|index
operator|.
name|children
operator|.
name|right
argument_list|)
argument_list|,
name|segment
argument_list|,
name|segmentBounds
argument_list|,
name|rbounds
argument_list|,
operator|!
name|axis
argument_list|)
expr_stmt|;
block|}
block|}
end_namespace
begin_function
DECL|function|produceIntersections
name|void
name|QIntersectionFinder
operator|::
name|produceIntersections
parameter_list|(
name|QPathSegments
modifier|&
name|segments
parameter_list|)
block|{
name|SegmentTree
name|tree
argument_list|(
name|segments
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|segments
operator|.
name|segments
argument_list|()
condition|;
operator|++
name|i
control|)
name|tree
operator|.
name|produceIntersections
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QKdPointTree
class|class
name|QKdPointTree
block|{
public|public:
DECL|enum|Traversal
enum|enum
name|Traversal
block|{
DECL|enumerator|TraverseBoth
name|TraverseBoth
block|,
DECL|enumerator|TraverseLeft
name|TraverseLeft
block|,
DECL|enumerator|TraverseRight
name|TraverseRight
block|,
DECL|enumerator|TraverseNone
name|TraverseNone
block|}
enum|;
DECL|struct|Node
struct|struct
name|Node
block|{
DECL|member|point
name|int
name|point
decl_stmt|;
DECL|member|id
name|int
name|id
decl_stmt|;
DECL|member|left
name|Node
modifier|*
name|left
decl_stmt|;
DECL|member|right
name|Node
modifier|*
name|right
decl_stmt|;
block|}
struct|;
DECL|function|QKdPointTree
name|QKdPointTree
parameter_list|(
specifier|const
name|QPathSegments
modifier|&
name|segments
parameter_list|)
member_init_list|:
name|m_segments
argument_list|(
operator|&
name|segments
argument_list|)
member_init_list|,
name|m_nodes
argument_list|(
name|m_segments
operator|->
name|points
argument_list|()
argument_list|)
member_init_list|,
name|m_id
argument_list|(
literal|0
argument_list|)
block|{
name|m_nodes
operator|.
name|resize
argument_list|(
name|m_segments
operator|->
name|points
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_nodes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|m_nodes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|point
operator|=
name|i
expr_stmt|;
name|m_nodes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|id
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|m_rootNode
operator|=
name|build
argument_list|(
literal|0
argument_list|,
name|m_nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|build
parameter_list|(
name|int
name|begin
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|depth
init|=
literal|0
parameter_list|)
function_decl|;
DECL|function|rootNode
name|Node
modifier|*
name|rootNode
parameter_list|()
block|{
return|return
operator|&
name|m_nodes
operator|.
name|at
argument_list|(
name|m_rootNode
argument_list|)
return|;
block|}
DECL|function|nextId
specifier|inline
name|int
name|nextId
parameter_list|()
block|{
return|return
name|m_id
operator|++
return|;
block|}
private|private:
DECL|member|m_segments
specifier|const
name|QPathSegments
modifier|*
name|m_segments
decl_stmt|;
DECL|member|m_nodes
name|QDataBuffer
argument_list|<
name|Node
argument_list|>
name|m_nodes
decl_stmt|;
DECL|member|m_rootNode
name|int
name|m_rootNode
decl_stmt|;
DECL|member|m_id
name|int
name|m_id
decl_stmt|;
block|}
class|;
end_class
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|qTraverseKdPointTree
name|void
name|qTraverseKdPointTree
parameter_list|(
name|QKdPointTree
operator|::
name|Node
modifier|&
name|node
parameter_list|,
name|T
modifier|&
name|t
parameter_list|,
name|int
name|depth
init|=
literal|0
parameter_list|)
block|{
name|QKdPointTree
operator|::
name|Traversal
name|status
init|=
name|t
argument_list|(
name|node
argument_list|,
name|depth
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|traverseRight
init|=
operator|(
name|status
operator|==
name|QKdPointTree
operator|::
name|TraverseBoth
operator|||
name|status
operator|==
name|QKdPointTree
operator|::
name|TraverseRight
operator|)
decl_stmt|;
specifier|const
name|bool
name|traverseLeft
init|=
operator|(
name|status
operator|==
name|QKdPointTree
operator|::
name|TraverseBoth
operator|||
name|status
operator|==
name|QKdPointTree
operator|::
name|TraverseLeft
operator|)
decl_stmt|;
if|if
condition|(
name|traverseLeft
operator|&&
name|node
operator|.
name|left
condition|)
name|QT_PREPEND_NAMESPACE
argument_list|(
name|qTraverseKdPointTree
argument_list|<
name|T
argument_list|>
argument_list|)
argument_list|(
operator|*
name|node
operator|.
name|left
argument_list|,
name|t
argument_list|,
name|depth
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|traverseRight
operator|&&
name|node
operator|.
name|right
condition|)
name|QT_PREPEND_NAMESPACE
argument_list|(
name|qTraverseKdPointTree
argument_list|<
name|T
argument_list|>
argument_list|)
argument_list|(
operator|*
name|node
operator|.
name|right
argument_list|,
name|t
argument_list|,
name|depth
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|component
specifier|static
specifier|inline
name|qreal
name|component
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|point
parameter_list|,
name|unsigned
name|int
name|i
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|i
operator|<
literal|2
argument_list|)
expr_stmt|;
specifier|const
name|qreal
name|components
index|[]
init|=
block|{
name|point
operator|.
name|x
argument_list|()
block|,
name|point
operator|.
name|y
argument_list|()
block|}
decl_stmt|;
return|return
name|components
index|[
name|i
index|]
return|;
block|}
end_function
begin_function
DECL|function|build
name|int
name|QKdPointTree
operator|::
name|build
parameter_list|(
name|int
name|begin
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|end
operator|>
name|begin
argument_list|)
expr_stmt|;
specifier|const
name|qreal
name|pivot
init|=
name|component
argument_list|(
name|m_segments
operator|->
name|pointAt
argument_list|(
name|m_nodes
operator|.
name|at
argument_list|(
name|begin
argument_list|)
operator|.
name|point
argument_list|)
argument_list|,
name|depth
operator|&
literal|1
argument_list|)
decl_stmt|;
name|int
name|first
init|=
name|begin
operator|+
literal|1
decl_stmt|;
name|int
name|last
init|=
name|end
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|first
operator|<=
name|last
condition|)
block|{
specifier|const
name|qreal
name|value
init|=
name|component
argument_list|(
name|m_segments
operator|->
name|pointAt
argument_list|(
name|m_nodes
operator|.
name|at
argument_list|(
name|first
argument_list|)
operator|.
name|point
argument_list|)
argument_list|,
name|depth
operator|&
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|<
name|pivot
condition|)
operator|++
name|first
expr_stmt|;
else|else
block|{
name|qSwap
argument_list|(
name|m_nodes
operator|.
name|at
argument_list|(
name|first
argument_list|)
argument_list|,
name|m_nodes
operator|.
name|at
argument_list|(
name|last
argument_list|)
argument_list|)
expr_stmt|;
operator|--
name|last
expr_stmt|;
block|}
block|}
name|qSwap
argument_list|(
name|m_nodes
operator|.
name|at
argument_list|(
name|last
argument_list|)
argument_list|,
name|m_nodes
operator|.
name|at
argument_list|(
name|begin
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|last
operator|>
name|begin
condition|)
name|m_nodes
operator|.
name|at
argument_list|(
name|last
argument_list|)
operator|.
name|left
operator|=
operator|&
name|m_nodes
operator|.
name|at
argument_list|(
name|build
argument_list|(
name|begin
argument_list|,
name|last
argument_list|,
name|depth
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|m_nodes
operator|.
name|at
argument_list|(
name|last
argument_list|)
operator|.
name|left
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|last
operator|+
literal|1
operator|<
name|end
condition|)
name|m_nodes
operator|.
name|at
argument_list|(
name|last
argument_list|)
operator|.
name|right
operator|=
operator|&
name|m_nodes
operator|.
name|at
argument_list|(
name|build
argument_list|(
name|last
operator|+
literal|1
argument_list|,
name|end
argument_list|,
name|depth
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|m_nodes
operator|.
name|at
argument_list|(
name|last
argument_list|)
operator|.
name|right
operator|=
literal|0
expr_stmt|;
return|return
name|last
return|;
block|}
end_function
begin_class
DECL|class|QKdPointFinder
class|class
name|QKdPointFinder
block|{
public|public:
DECL|function|QKdPointFinder
name|QKdPointFinder
parameter_list|(
name|int
name|point
parameter_list|,
specifier|const
name|QPathSegments
modifier|&
name|segments
parameter_list|,
name|QKdPointTree
modifier|&
name|tree
parameter_list|)
member_init_list|:
name|m_result
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_segments
argument_list|(
operator|&
name|segments
argument_list|)
member_init_list|,
name|m_tree
argument_list|(
operator|&
name|tree
argument_list|)
block|{
name|pointComponents
index|[
literal|0
index|]
operator|=
name|segments
operator|.
name|pointAt
argument_list|(
name|point
argument_list|)
operator|.
name|x
argument_list|()
expr_stmt|;
name|pointComponents
index|[
literal|1
index|]
operator|=
name|segments
operator|.
name|pointAt
argument_list|(
name|point
argument_list|)
operator|.
name|y
argument_list|()
expr_stmt|;
block|}
DECL|function|operator ()
specifier|inline
name|QKdPointTree
operator|::
name|Traversal
name|operator
name|()
parameter_list|(
name|QKdPointTree
operator|::
name|Node
modifier|&
name|node
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
if|if
condition|(
name|m_result
operator|!=
operator|-
literal|1
condition|)
return|return
name|QKdPointTree
operator|::
name|TraverseNone
return|;
specifier|const
name|QPointF
modifier|&
name|nodePoint
init|=
name|m_segments
operator|->
name|pointAt
argument_list|(
name|node
operator|.
name|point
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|pivotComponents
index|[]
init|=
block|{
name|nodePoint
operator|.
name|x
argument_list|()
block|,
name|nodePoint
operator|.
name|y
argument_list|()
block|}
decl_stmt|;
specifier|const
name|qreal
name|pivot
init|=
name|pivotComponents
index|[
name|depth
operator|&
literal|1
index|]
decl_stmt|;
specifier|const
name|qreal
name|value
init|=
name|pointComponents
index|[
name|depth
operator|&
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|fuzzyIsNull
argument_list|(
name|pivot
operator|-
name|value
argument_list|)
condition|)
block|{
specifier|const
name|qreal
name|pivot2
init|=
name|pivotComponents
index|[
operator|(
name|depth
operator|+
literal|1
operator|)
operator|&
literal|1
index|]
decl_stmt|;
specifier|const
name|qreal
name|value2
init|=
name|pointComponents
index|[
operator|(
name|depth
operator|+
literal|1
operator|)
operator|&
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|fuzzyIsNull
argument_list|(
name|pivot2
operator|-
name|value2
argument_list|)
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|id
operator|<
literal|0
condition|)
name|node
operator|.
name|id
operator|=
name|m_tree
operator|->
name|nextId
argument_list|()
expr_stmt|;
name|m_result
operator|=
name|node
operator|.
name|id
expr_stmt|;
return|return
name|QKdPointTree
operator|::
name|TraverseNone
return|;
block|}
else|else
return|return
name|QKdPointTree
operator|::
name|TraverseBoth
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|<
name|pivot
condition|)
block|{
return|return
name|QKdPointTree
operator|::
name|TraverseLeft
return|;
block|}
else|else
block|{
return|return
name|QKdPointTree
operator|::
name|TraverseRight
return|;
block|}
block|}
DECL|function|result
name|int
name|result
parameter_list|()
specifier|const
block|{
return|return
name|m_result
return|;
block|}
private|private:
DECL|member|pointComponents
name|qreal
name|pointComponents
index|[
literal|2
index|]
decl_stmt|;
DECL|member|m_result
name|int
name|m_result
decl_stmt|;
DECL|member|m_segments
specifier|const
name|QPathSegments
modifier|*
name|m_segments
decl_stmt|;
DECL|member|m_tree
name|QKdPointTree
modifier|*
name|m_tree
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// merge all points that are within qFuzzyCompare range of each other
end_comment
begin_function
DECL|function|mergePoints
name|void
name|QPathSegments
operator|::
name|mergePoints
parameter_list|()
block|{
name|QKdPointTree
name|tree
argument_list|(
operator|*
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|tree
operator|.
name|rootNode
argument_list|()
condition|)
block|{
name|QDataBuffer
argument_list|<
name|QPointF
argument_list|>
name|mergedPoints
argument_list|(
name|points
argument_list|()
argument_list|)
decl_stmt|;
name|QDataBuffer
argument_list|<
name|int
argument_list|>
name|pointIndices
argument_list|(
name|points
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|points
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QKdPointFinder
name|finder
argument_list|(
name|i
argument_list|,
operator|*
name|this
argument_list|,
name|tree
argument_list|)
decl_stmt|;
name|QT_PREPEND_NAMESPACE
argument_list|(
name|qTraverseKdPointTree
argument_list|<
name|QKdPointFinder
argument_list|>
argument_list|)
argument_list|(
operator|*
name|tree
operator|.
name|rootNode
argument_list|()
argument_list|,
name|finder
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|finder
operator|.
name|result
argument_list|()
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|finder
operator|.
name|result
argument_list|()
operator|>=
name|mergedPoints
operator|.
name|size
argument_list|()
condition|)
name|mergedPoints
operator|<<
name|m_points
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|pointIndices
operator|<<
name|finder
operator|.
name|result
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_segments
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|m_segments
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|va
operator|=
name|pointIndices
operator|.
name|at
argument_list|(
name|m_segments
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|va
argument_list|)
expr_stmt|;
name|m_segments
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|vb
operator|=
name|pointIndices
operator|.
name|at
argument_list|(
name|m_segments
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|vb
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_intersections
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|m_intersections
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|vertex
operator|=
name|pointIndices
operator|.
name|at
argument_list|(
name|m_intersections
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|vertex
argument_list|)
expr_stmt|;
name|m_points
operator|.
name|swap
argument_list|(
name|mergedPoints
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|intersectAndAdd
name|void
name|QWingedEdge
operator|::
name|intersectAndAdd
parameter_list|()
block|{
name|QIntersectionFinder
name|finder
decl_stmt|;
name|finder
operator|.
name|produceIntersections
argument_list|(
name|m_segments
argument_list|)
expr_stmt|;
name|m_segments
operator|.
name|mergePoints
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_segments
operator|.
name|points
argument_list|()
condition|;
operator|++
name|i
control|)
name|addVertex
argument_list|(
name|m_segments
operator|.
name|pointAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QDataBuffer
argument_list|<
name|QPathSegments
operator|::
name|Intersection
argument_list|>
name|intersections
argument_list|(
name|m_segments
operator|.
name|segments
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_segments
operator|.
name|segments
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|intersections
operator|.
name|reset
argument_list|()
expr_stmt|;
name|int
name|pathId
init|=
name|m_segments
operator|.
name|pathId
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QPathSegments
operator|::
name|Intersection
modifier|*
name|isect
init|=
name|m_segments
operator|.
name|intersectionAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
while|while
condition|(
name|isect
condition|)
block|{
name|intersections
operator|<<
operator|*
name|isect
expr_stmt|;
if|if
condition|(
name|isect
operator|->
name|next
condition|)
block|{
name|isect
operator|+=
name|isect
operator|->
name|next
expr_stmt|;
block|}
else|else
block|{
name|isect
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|std
operator|::
name|sort
argument_list|(
name|intersections
operator|.
name|data
argument_list|()
argument_list|,
name|intersections
operator|.
name|data
argument_list|()
operator|+
name|intersections
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|first
init|=
name|m_segments
operator|.
name|segmentAt
argument_list|(
name|i
argument_list|)
operator|.
name|va
decl_stmt|;
name|int
name|second
init|=
name|m_segments
operator|.
name|segmentAt
argument_list|(
name|i
argument_list|)
operator|.
name|vb
decl_stmt|;
name|int
name|last
init|=
name|first
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|intersections
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
specifier|const
name|QPathSegments
operator|::
name|Intersection
modifier|&
name|isect
init|=
name|intersections
operator|.
name|at
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|QPathEdge
modifier|*
name|ep
init|=
name|edge
argument_list|(
name|addEdge
argument_list|(
name|last
argument_list|,
name|isect
operator|.
name|vertex
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ep
condition|)
block|{
specifier|const
name|int
name|dir
init|=
name|m_segments
operator|.
name|pointAt
argument_list|(
name|last
argument_list|)
operator|.
name|y
argument_list|()
operator|<
name|m_segments
operator|.
name|pointAt
argument_list|(
name|isect
operator|.
name|vertex
argument_list|)
operator|.
name|y
argument_list|()
condition|?
literal|1
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|pathId
operator|==
literal|0
condition|)
name|ep
operator|->
name|windingA
operator|+=
name|dir
expr_stmt|;
else|else
name|ep
operator|->
name|windingB
operator|+=
name|dir
expr_stmt|;
block|}
name|last
operator|=
name|isect
operator|.
name|vertex
expr_stmt|;
block|}
name|QPathEdge
modifier|*
name|ep
init|=
name|edge
argument_list|(
name|addEdge
argument_list|(
name|last
argument_list|,
name|second
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ep
condition|)
block|{
specifier|const
name|int
name|dir
init|=
name|m_segments
operator|.
name|pointAt
argument_list|(
name|last
argument_list|)
operator|.
name|y
argument_list|()
operator|<
name|m_segments
operator|.
name|pointAt
argument_list|(
name|second
argument_list|)
operator|.
name|y
argument_list|()
condition|?
literal|1
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|pathId
operator|==
literal|0
condition|)
name|ep
operator|->
name|windingA
operator|+=
name|dir
expr_stmt|;
else|else
name|ep
operator|->
name|windingB
operator|+=
name|dir
expr_stmt|;
block|}
block|}
block|}
end_function
begin_constructor
DECL|function|QWingedEdge
name|QWingedEdge
operator|::
name|QWingedEdge
parameter_list|()
member_init_list|:
name|m_edges
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_vertices
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_segments
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|QWingedEdge
name|QWingedEdge
operator|::
name|QWingedEdge
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|subject
parameter_list|,
specifier|const
name|QPainterPath
modifier|&
name|clip
parameter_list|)
member_init_list|:
name|m_edges
argument_list|(
name|subject
operator|.
name|elementCount
argument_list|()
argument_list|)
member_init_list|,
name|m_vertices
argument_list|(
name|subject
operator|.
name|elementCount
argument_list|()
argument_list|)
member_init_list|,
name|m_segments
argument_list|(
name|subject
operator|.
name|elementCount
argument_list|()
argument_list|)
block|{
name|m_segments
operator|.
name|setPath
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|m_segments
operator|.
name|addPath
argument_list|(
name|clip
argument_list|)
expr_stmt|;
name|intersectAndAdd
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|next
name|QWingedEdge
operator|::
name|TraversalStatus
name|QWingedEdge
operator|::
name|next
parameter_list|(
specifier|const
name|QWingedEdge
operator|::
name|TraversalStatus
modifier|&
name|status
parameter_list|)
specifier|const
block|{
specifier|const
name|QPathEdge
modifier|*
name|sp
init|=
name|edge
argument_list|(
name|status
operator|.
name|edge
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|sp
argument_list|)
expr_stmt|;
name|TraversalStatus
name|result
decl_stmt|;
name|result
operator|.
name|edge
operator|=
name|sp
operator|->
name|next
argument_list|(
name|status
operator|.
name|traversal
argument_list|,
name|status
operator|.
name|direction
argument_list|)
expr_stmt|;
name|result
operator|.
name|traversal
operator|=
name|status
operator|.
name|traversal
expr_stmt|;
name|result
operator|.
name|direction
operator|=
name|status
operator|.
name|direction
expr_stmt|;
specifier|const
name|QPathEdge
modifier|*
name|rp
init|=
name|edge
argument_list|(
name|result
operator|.
name|edge
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|rp
argument_list|)
expr_stmt|;
if|if
condition|(
name|sp
operator|->
name|vertex
argument_list|(
name|status
operator|.
name|direction
argument_list|)
operator|==
name|rp
operator|->
name|vertex
argument_list|(
name|status
operator|.
name|direction
argument_list|)
condition|)
name|result
operator|.
name|flip
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|isLine
specifier|static
name|bool
name|isLine
parameter_list|(
specifier|const
name|QBezier
modifier|&
name|bezier
parameter_list|)
block|{
specifier|const
name|bool
name|equal_1_2
init|=
name|comparePoints
argument_list|(
name|bezier
operator|.
name|pt1
argument_list|()
argument_list|,
name|bezier
operator|.
name|pt2
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|equal_2_3
init|=
name|comparePoints
argument_list|(
name|bezier
operator|.
name|pt2
argument_list|()
argument_list|,
name|bezier
operator|.
name|pt3
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|equal_3_4
init|=
name|comparePoints
argument_list|(
name|bezier
operator|.
name|pt3
argument_list|()
argument_list|,
name|bezier
operator|.
name|pt4
argument_list|()
argument_list|)
decl_stmt|;
comment|// point?
if|if
condition|(
name|equal_1_2
operator|&&
name|equal_2_3
operator|&&
name|equal_3_4
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|comparePoints
argument_list|(
name|bezier
operator|.
name|pt1
argument_list|()
argument_list|,
name|bezier
operator|.
name|pt4
argument_list|()
argument_list|)
condition|)
return|return
name|equal_1_2
operator|||
name|equal_3_4
return|;
return|return
operator|(
name|equal_1_2
operator|&&
name|equal_3_4
operator|)
operator|||
operator|(
name|equal_1_2
operator|&&
name|equal_2_3
operator|)
operator|||
operator|(
name|equal_2_3
operator|&&
name|equal_3_4
operator|)
return|;
block|}
end_function
begin_function
DECL|function|setPath
name|void
name|QPathSegments
operator|::
name|setPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
name|m_points
operator|.
name|reset
argument_list|()
expr_stmt|;
name|m_intersections
operator|.
name|reset
argument_list|()
expr_stmt|;
name|m_segments
operator|.
name|reset
argument_list|()
expr_stmt|;
name|m_pathId
operator|=
literal|0
expr_stmt|;
name|addPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addPath
name|void
name|QPathSegments
operator|::
name|addPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
name|int
name|firstSegment
init|=
name|m_segments
operator|.
name|size
argument_list|()
decl_stmt|;
name|bool
name|hasMoveTo
init|=
literal|false
decl_stmt|;
name|int
name|lastMoveTo
init|=
literal|0
decl_stmt|;
name|int
name|last
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|current
init|=
name|m_points
operator|.
name|size
argument_list|()
decl_stmt|;
name|QPointF
name|currentPoint
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
operator|.
name|type
operator|==
name|QPainterPath
operator|::
name|CurveToElement
condition|)
name|currentPoint
operator|=
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
expr_stmt|;
else|else
name|currentPoint
operator|=
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|comparePoints
argument_list|(
name|m_points
operator|.
name|at
argument_list|(
name|lastMoveTo
argument_list|)
argument_list|,
name|currentPoint
argument_list|)
condition|)
name|current
operator|=
name|lastMoveTo
expr_stmt|;
else|else
name|m_points
operator|<<
name|currentPoint
expr_stmt|;
switch|switch
condition|(
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
operator|.
name|type
condition|)
block|{
case|case
name|QPainterPath
operator|::
name|MoveToElement
case|:
if|if
condition|(
name|hasMoveTo
operator|&&
name|last
operator|!=
name|lastMoveTo
operator|&&
operator|!
name|comparePoints
argument_list|(
name|m_points
operator|.
name|at
argument_list|(
name|last
argument_list|)
argument_list|,
name|m_points
operator|.
name|at
argument_list|(
name|lastMoveTo
argument_list|)
argument_list|)
condition|)
name|m_segments
operator|<<
name|Segment
argument_list|(
name|m_pathId
argument_list|,
name|last
argument_list|,
name|lastMoveTo
argument_list|)
expr_stmt|;
name|hasMoveTo
operator|=
literal|true
expr_stmt|;
name|last
operator|=
name|lastMoveTo
operator|=
name|current
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|LineToElement
case|:
name|m_segments
operator|<<
name|Segment
argument_list|(
name|m_pathId
argument_list|,
name|last
argument_list|,
name|current
argument_list|)
expr_stmt|;
name|last
operator|=
name|current
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToElement
case|:
block|{
name|QBezier
name|bezier
init|=
name|QBezier
operator|::
name|fromPoints
argument_list|(
name|m_points
operator|.
name|at
argument_list|(
name|last
argument_list|)
argument_list|,
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
argument_list|,
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isLine
argument_list|(
name|bezier
argument_list|)
condition|)
block|{
name|m_segments
operator|<<
name|Segment
argument_list|(
name|m_pathId
argument_list|,
name|last
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QRectF
name|bounds
init|=
name|bezier
operator|.
name|bounds
argument_list|()
decl_stmt|;
comment|// threshold based on similar algorithm as in qtriangulatingstroker.cpp
name|int
name|threshold
init|=
name|qMin
argument_list|<
name|float
argument_list|>
argument_list|(
literal|64
argument_list|,
name|qMax
argument_list|(
name|bounds
operator|.
name|width
argument_list|()
argument_list|,
name|bounds
operator|.
name|height
argument_list|()
argument_list|)
operator|*
operator|(
literal|2
operator|*
name|qreal
argument_list|(
literal|3.14
argument_list|)
operator|/
literal|6
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|threshold
operator|<
literal|3
condition|)
name|threshold
operator|=
literal|3
expr_stmt|;
name|qreal
name|one_over_threshold_minus_1
init|=
name|qreal
argument_list|(
literal|1
argument_list|)
operator|/
operator|(
name|threshold
operator|-
literal|1
operator|)
decl_stmt|;
for|for
control|(
name|int
name|t
init|=
literal|1
init|;
name|t
operator|<
name|threshold
operator|-
literal|1
condition|;
operator|++
name|t
control|)
block|{
name|currentPoint
operator|=
name|bezier
operator|.
name|pointAt
argument_list|(
name|t
operator|*
name|one_over_threshold_minus_1
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|m_points
operator|.
name|size
argument_list|()
decl_stmt|;
name|m_segments
operator|<<
name|Segment
argument_list|(
name|m_pathId
argument_list|,
name|last
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|last
operator|=
name|index
expr_stmt|;
name|m_points
operator|<<
name|currentPoint
expr_stmt|;
block|}
name|m_segments
operator|<<
name|Segment
argument_list|(
name|m_pathId
argument_list|,
name|last
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
block|}
name|last
operator|=
name|current
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
break|break;
default|default:
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|hasMoveTo
operator|&&
name|last
operator|!=
name|lastMoveTo
operator|&&
operator|!
name|comparePoints
argument_list|(
name|m_points
operator|.
name|at
argument_list|(
name|last
argument_list|)
argument_list|,
name|m_points
operator|.
name|at
argument_list|(
name|lastMoveTo
argument_list|)
argument_list|)
condition|)
name|m_segments
operator|<<
name|Segment
argument_list|(
name|m_pathId
argument_list|,
name|last
argument_list|,
name|lastMoveTo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|firstSegment
init|;
name|i
operator|<
name|m_segments
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QLineF
name|line
init|=
name|lineAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|qreal
name|x1
init|=
name|line
operator|.
name|p1
argument_list|()
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|y1
init|=
name|line
operator|.
name|p1
argument_list|()
operator|.
name|y
argument_list|()
decl_stmt|;
name|qreal
name|x2
init|=
name|line
operator|.
name|p2
argument_list|()
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|y2
init|=
name|line
operator|.
name|p2
argument_list|()
operator|.
name|y
argument_list|()
decl_stmt|;
if|if
condition|(
name|x2
operator|<
name|x1
condition|)
name|qSwap
argument_list|(
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
if|if
condition|(
name|y2
operator|<
name|y1
condition|)
name|qSwap
argument_list|(
name|y1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|m_segments
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|bounds
operator|=
name|QRectF
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
name|x1
argument_list|,
name|y2
operator|-
name|y1
argument_list|)
expr_stmt|;
block|}
operator|++
name|m_pathId
expr_stmt|;
block|}
end_function
begin_function
DECL|function|delta
name|qreal
name|QWingedEdge
operator|::
name|delta
parameter_list|(
name|int
name|vertex
parameter_list|,
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
specifier|const
block|{
specifier|const
name|QPathEdge
modifier|*
name|ap
init|=
name|edge
argument_list|(
name|a
argument_list|)
decl_stmt|;
specifier|const
name|QPathEdge
modifier|*
name|bp
init|=
name|edge
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|double
name|a_angle
init|=
name|ap
operator|->
name|angle
decl_stmt|;
name|double
name|b_angle
init|=
name|bp
operator|->
name|angle
decl_stmt|;
if|if
condition|(
name|vertex
operator|==
name|ap
operator|->
name|second
condition|)
name|a_angle
operator|=
name|ap
operator|->
name|invAngle
expr_stmt|;
if|if
condition|(
name|vertex
operator|==
name|bp
operator|->
name|second
condition|)
name|b_angle
operator|=
name|bp
operator|->
name|invAngle
expr_stmt|;
name|double
name|result
init|=
name|b_angle
operator|-
name|a_angle
decl_stmt|;
if|if
condition|(
name|result
operator|>=
literal|128.
condition|)
return|return
name|result
operator|-
literal|128.
return|;
elseif|else
if|if
condition|(
name|result
operator|<
literal|0
condition|)
return|return
name|result
operator|+
literal|128.
return|;
else|else
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|findInsertStatus
name|QWingedEdge
operator|::
name|TraversalStatus
name|QWingedEdge
operator|::
name|findInsertStatus
parameter_list|(
name|int
name|vi
parameter_list|,
name|int
name|ei
parameter_list|)
specifier|const
block|{
specifier|const
name|QPathVertex
modifier|*
name|vp
init|=
name|vertex
argument_list|(
name|vi
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|vp
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|ei
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|vp
operator|->
name|edge
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|int
name|position
init|=
name|vp
operator|->
name|edge
decl_stmt|;
name|qreal
name|d
init|=
literal|128.
decl_stmt|;
name|TraversalStatus
name|status
decl_stmt|;
name|status
operator|.
name|direction
operator|=
name|edge
argument_list|(
name|vp
operator|->
name|edge
argument_list|)
operator|->
name|directionTo
argument_list|(
name|vi
argument_list|)
expr_stmt|;
name|status
operator|.
name|traversal
operator|=
name|QPathEdge
operator|::
name|RightTraversal
expr_stmt|;
name|status
operator|.
name|edge
operator|=
name|vp
operator|->
name|edge
expr_stmt|;
ifdef|#
directive|ifdef
name|QDEBUG_CLIPPER
specifier|const
name|QPathEdge
modifier|*
name|ep
init|=
name|edge
argument_list|(
name|ei
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Finding insert status for edge"
operator|<<
name|ei
operator|<<
literal|"at vertex"
operator|<<
name|QPointF
argument_list|(
operator|*
name|vp
argument_list|)
operator|<<
literal|", angles: "
operator|<<
name|ep
operator|->
name|angle
operator|<<
name|ep
operator|->
name|invAngle
expr_stmt|;
endif|#
directive|endif
do|do
block|{
name|status
operator|=
name|next
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|.
name|flip
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|edge
argument_list|(
name|status
operator|.
name|edge
argument_list|)
operator|->
name|vertex
argument_list|(
name|status
operator|.
name|direction
argument_list|)
operator|==
name|vi
argument_list|)
expr_stmt|;
name|qreal
name|d2
init|=
name|delta
argument_list|(
name|vi
argument_list|,
name|ei
argument_list|,
name|status
operator|.
name|edge
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QDEBUG_CLIPPER
specifier|const
name|QPathEdge
modifier|*
name|op
init|=
name|edge
argument_list|(
name|status
operator|.
name|edge
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Delta to edge"
operator|<<
name|status
operator|.
name|edge
operator|<<
name|d2
operator|<<
literal|", angles: "
operator|<<
name|op
operator|->
name|angle
operator|<<
name|op
operator|->
name|invAngle
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|d2
operator|<
name|d
condition|)
block|{
name|position
operator|=
name|status
operator|.
name|edge
expr_stmt|;
name|d
operator|=
name|d2
expr_stmt|;
block|}
block|}
do|while
condition|(
name|status
operator|.
name|edge
operator|!=
name|vp
operator|->
name|edge
condition|)
do|;
name|status
operator|.
name|traversal
operator|=
name|QPathEdge
operator|::
name|LeftTraversal
expr_stmt|;
name|status
operator|.
name|direction
operator|=
name|QPathEdge
operator|::
name|Forward
expr_stmt|;
name|status
operator|.
name|edge
operator|=
name|position
expr_stmt|;
if|if
condition|(
name|edge
argument_list|(
name|status
operator|.
name|edge
argument_list|)
operator|->
name|vertex
argument_list|(
name|status
operator|.
name|direction
argument_list|)
operator|!=
name|vi
condition|)
name|status
operator|.
name|flip
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QDEBUG_CLIPPER
name|qDebug
argument_list|()
operator|<<
literal|"Inserting edge"
operator|<<
name|ei
operator|<<
literal|"to"
operator|<<
operator|(
name|status
operator|.
name|traversal
operator|==
name|QPathEdge
operator|::
name|LeftTraversal
condition|?
literal|"left"
else|:
literal|"right"
operator|)
operator|<<
literal|"of edge"
operator|<<
name|status
operator|.
name|edge
expr_stmt|;
endif|#
directive|endif
name|Q_ASSERT
argument_list|(
name|edge
argument_list|(
name|status
operator|.
name|edge
argument_list|)
operator|->
name|vertex
argument_list|(
name|status
operator|.
name|direction
argument_list|)
operator|==
name|vi
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
end_function
begin_function
DECL|function|removeEdge
name|void
name|QWingedEdge
operator|::
name|removeEdge
parameter_list|(
name|int
name|ei
parameter_list|)
block|{
name|QPathEdge
modifier|*
name|ep
init|=
name|edge
argument_list|(
name|ei
argument_list|)
decl_stmt|;
name|TraversalStatus
name|status
decl_stmt|;
name|status
operator|.
name|direction
operator|=
name|QPathEdge
operator|::
name|Forward
expr_stmt|;
name|status
operator|.
name|traversal
operator|=
name|QPathEdge
operator|::
name|RightTraversal
expr_stmt|;
name|status
operator|.
name|edge
operator|=
name|ei
expr_stmt|;
name|TraversalStatus
name|forwardRight
init|=
name|next
argument_list|(
name|status
argument_list|)
decl_stmt|;
name|forwardRight
operator|.
name|flipDirection
argument_list|()
expr_stmt|;
name|status
operator|.
name|traversal
operator|=
name|QPathEdge
operator|::
name|LeftTraversal
expr_stmt|;
name|TraversalStatus
name|forwardLeft
init|=
name|next
argument_list|(
name|status
argument_list|)
decl_stmt|;
name|forwardLeft
operator|.
name|flipDirection
argument_list|()
expr_stmt|;
name|status
operator|.
name|direction
operator|=
name|QPathEdge
operator|::
name|Backward
expr_stmt|;
name|TraversalStatus
name|backwardLeft
init|=
name|next
argument_list|(
name|status
argument_list|)
decl_stmt|;
name|backwardLeft
operator|.
name|flipDirection
argument_list|()
expr_stmt|;
name|status
operator|.
name|traversal
operator|=
name|QPathEdge
operator|::
name|RightTraversal
expr_stmt|;
name|TraversalStatus
name|backwardRight
init|=
name|next
argument_list|(
name|status
argument_list|)
decl_stmt|;
name|backwardRight
operator|.
name|flipDirection
argument_list|()
expr_stmt|;
name|edge
argument_list|(
name|forwardRight
operator|.
name|edge
argument_list|)
operator|->
name|setNext
argument_list|(
name|forwardRight
operator|.
name|traversal
argument_list|,
name|forwardRight
operator|.
name|direction
argument_list|,
name|forwardLeft
operator|.
name|edge
argument_list|)
expr_stmt|;
name|edge
argument_list|(
name|forwardLeft
operator|.
name|edge
argument_list|)
operator|->
name|setNext
argument_list|(
name|forwardLeft
operator|.
name|traversal
argument_list|,
name|forwardLeft
operator|.
name|direction
argument_list|,
name|forwardRight
operator|.
name|edge
argument_list|)
expr_stmt|;
name|edge
argument_list|(
name|backwardRight
operator|.
name|edge
argument_list|)
operator|->
name|setNext
argument_list|(
name|backwardRight
operator|.
name|traversal
argument_list|,
name|backwardRight
operator|.
name|direction
argument_list|,
name|backwardLeft
operator|.
name|edge
argument_list|)
expr_stmt|;
name|edge
argument_list|(
name|backwardLeft
operator|.
name|edge
argument_list|)
operator|->
name|setNext
argument_list|(
name|backwardLeft
operator|.
name|traversal
argument_list|,
name|backwardLeft
operator|.
name|direction
argument_list|,
name|backwardRight
operator|.
name|edge
argument_list|)
expr_stmt|;
name|ep
operator|->
name|setNext
argument_list|(
name|QPathEdge
operator|::
name|Forward
argument_list|,
name|ei
argument_list|)
expr_stmt|;
name|ep
operator|->
name|setNext
argument_list|(
name|QPathEdge
operator|::
name|Backward
argument_list|,
name|ei
argument_list|)
expr_stmt|;
name|QPathVertex
modifier|*
name|a
init|=
name|vertex
argument_list|(
name|ep
operator|->
name|first
argument_list|)
decl_stmt|;
name|QPathVertex
modifier|*
name|b
init|=
name|vertex
argument_list|(
name|ep
operator|->
name|second
argument_list|)
decl_stmt|;
name|a
operator|->
name|edge
operator|=
name|backwardRight
operator|.
name|edge
expr_stmt|;
name|b
operator|->
name|edge
operator|=
name|forwardRight
operator|.
name|edge
expr_stmt|;
block|}
end_function
begin_function
DECL|function|commonEdge
specifier|static
name|int
name|commonEdge
parameter_list|(
specifier|const
name|QWingedEdge
modifier|&
name|list
parameter_list|,
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
specifier|const
name|QPathVertex
modifier|*
name|ap
init|=
name|list
operator|.
name|vertex
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|ap
argument_list|)
expr_stmt|;
specifier|const
name|QPathVertex
modifier|*
name|bp
init|=
name|list
operator|.
name|vertex
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|bp
argument_list|)
expr_stmt|;
if|if
condition|(
name|ap
operator|->
name|edge
operator|<
literal|0
operator|||
name|bp
operator|->
name|edge
operator|<
literal|0
condition|)
return|return
operator|-
literal|1
return|;
name|QWingedEdge
operator|::
name|TraversalStatus
name|status
decl_stmt|;
name|status
operator|.
name|edge
operator|=
name|ap
operator|->
name|edge
expr_stmt|;
name|status
operator|.
name|direction
operator|=
name|list
operator|.
name|edge
argument_list|(
name|status
operator|.
name|edge
argument_list|)
operator|->
name|directionTo
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|status
operator|.
name|traversal
operator|=
name|QPathEdge
operator|::
name|RightTraversal
expr_stmt|;
do|do
block|{
specifier|const
name|QPathEdge
modifier|*
name|ep
init|=
name|list
operator|.
name|edge
argument_list|(
name|status
operator|.
name|edge
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|ep
operator|->
name|first
operator|==
name|a
operator|&&
name|ep
operator|->
name|second
operator|==
name|b
operator|)
operator|||
operator|(
name|ep
operator|->
name|first
operator|==
name|b
operator|&&
name|ep
operator|->
name|second
operator|==
name|a
operator|)
condition|)
return|return
name|status
operator|.
name|edge
return|;
name|status
operator|=
name|list
operator|.
name|next
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|.
name|flip
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|status
operator|.
name|edge
operator|!=
name|ap
operator|->
name|edge
condition|)
do|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|computeAngle
specifier|static
name|double
name|computeAngle
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|v
parameter_list|)
block|{
if|#
directive|if
literal|1
if|if
condition|(
name|v
operator|.
name|x
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|v
operator|.
name|y
argument_list|()
operator|<=
literal|0
condition|?
literal|0
else|:
literal|64.
return|;
block|}
elseif|else
if|if
condition|(
name|v
operator|.
name|y
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|v
operator|.
name|x
argument_list|()
operator|<=
literal|0
condition|?
literal|32.
else|:
literal|96.
return|;
block|}
name|double
name|vx
init|=
name|v
operator|.
name|x
argument_list|()
decl_stmt|;
name|double
name|vy
init|=
name|v
operator|.
name|y
argument_list|()
decl_stmt|;
name|normalize
argument_list|(
name|vx
argument_list|,
name|vy
argument_list|)
expr_stmt|;
if|if
condition|(
name|vy
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|vx
operator|<
literal|0
condition|)
block|{
comment|// 0 - 32
return|return
operator|-
literal|32.
operator|*
name|vx
return|;
block|}
else|else
block|{
comment|// 96 - 128
return|return
literal|128.
operator|-
literal|32.
operator|*
name|vx
return|;
block|}
block|}
else|else
block|{
comment|// 32 - 96
return|return
literal|64.
operator|+
literal|32.
operator|*
name|vx
return|;
block|}
else|#
directive|else
comment|// doesn't seem to be robust enough
return|return
name|qAtan2
argument_list|(
name|v
operator|.
name|x
argument_list|()
argument_list|,
name|v
operator|.
name|y
argument_list|()
argument_list|)
operator|+
name|Q_PI
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|addEdge
name|int
name|QWingedEdge
operator|::
name|addEdge
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|a
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|b
parameter_list|)
block|{
name|int
name|fi
init|=
name|insert
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|int
name|si
init|=
name|insert
argument_list|(
name|b
argument_list|)
decl_stmt|;
return|return
name|addEdge
argument_list|(
name|fi
argument_list|,
name|si
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|addEdge
name|int
name|QWingedEdge
operator|::
name|addEdge
parameter_list|(
name|int
name|fi
parameter_list|,
name|int
name|si
parameter_list|)
block|{
if|if
condition|(
name|fi
operator|==
name|si
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|common
init|=
name|commonEdge
argument_list|(
operator|*
name|this
argument_list|,
name|fi
argument_list|,
name|si
argument_list|)
decl_stmt|;
if|if
condition|(
name|common
operator|>=
literal|0
condition|)
return|return
name|common
return|;
name|m_edges
operator|<<
name|QPathEdge
argument_list|(
name|fi
argument_list|,
name|si
argument_list|)
expr_stmt|;
name|int
name|ei
init|=
name|m_edges
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|QPathVertex
modifier|*
name|fp
init|=
name|vertex
argument_list|(
name|fi
argument_list|)
decl_stmt|;
name|QPathVertex
modifier|*
name|sp
init|=
name|vertex
argument_list|(
name|si
argument_list|)
decl_stmt|;
name|QPathEdge
modifier|*
name|ep
init|=
name|edge
argument_list|(
name|ei
argument_list|)
decl_stmt|;
specifier|const
name|QPointF
name|tangent
init|=
name|QPointF
argument_list|(
operator|*
name|sp
argument_list|)
operator|-
name|QPointF
argument_list|(
operator|*
name|fp
argument_list|)
decl_stmt|;
name|ep
operator|->
name|angle
operator|=
name|computeAngle
argument_list|(
name|tangent
argument_list|)
expr_stmt|;
name|ep
operator|->
name|invAngle
operator|=
name|ep
operator|->
name|angle
operator|+
literal|64
expr_stmt|;
if|if
condition|(
name|ep
operator|->
name|invAngle
operator|>=
literal|128
condition|)
name|ep
operator|->
name|invAngle
operator|-=
literal|128
expr_stmt|;
name|QPathVertex
modifier|*
name|vertices
index|[
literal|2
index|]
init|=
block|{
name|fp
block|,
name|sp
block|}
decl_stmt|;
name|QPathEdge
operator|::
name|Direction
name|dirs
index|[
literal|2
index|]
init|=
block|{
name|QPathEdge
operator|::
name|Backward
block|,
name|QPathEdge
operator|::
name|Forward
block|}
decl_stmt|;
ifdef|#
directive|ifdef
name|QDEBUG_CLIPPER
name|printf
argument_list|(
literal|"** Adding edge %d / vertices: %.07f %.07f, %.07f %.07f\n"
argument_list|,
name|ei
argument_list|,
name|fp
operator|->
name|x
argument_list|,
name|fp
operator|->
name|y
argument_list|,
name|sp
operator|->
name|x
argument_list|,
name|sp
operator|->
name|y
argument_list|)
expr_stmt|;
endif|#
directive|endif
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|QPathVertex
modifier|*
name|vp
init|=
name|vertices
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|vp
operator|->
name|edge
operator|<
literal|0
condition|)
block|{
name|vp
operator|->
name|edge
operator|=
name|ei
expr_stmt|;
name|ep
operator|->
name|setNext
argument_list|(
name|dirs
index|[
name|i
index|]
argument_list|,
name|ei
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|vi
init|=
name|ep
operator|->
name|vertex
argument_list|(
name|dirs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|vertex
argument_list|(
name|vi
argument_list|)
operator|==
name|vertices
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|TraversalStatus
name|os
init|=
name|findInsertStatus
argument_list|(
name|vi
argument_list|,
name|ei
argument_list|)
decl_stmt|;
name|QPathEdge
modifier|*
name|op
init|=
name|edge
argument_list|(
name|os
operator|.
name|edge
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|vertex
argument_list|(
name|op
operator|->
name|vertex
argument_list|(
name|os
operator|.
name|direction
argument_list|)
argument_list|)
operator|==
name|vertices
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|TraversalStatus
name|ns
init|=
name|next
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|ns
operator|.
name|flipDirection
argument_list|()
expr_stmt|;
name|QPathEdge
modifier|*
name|np
init|=
name|edge
argument_list|(
name|ns
operator|.
name|edge
argument_list|)
decl_stmt|;
name|op
operator|->
name|setNext
argument_list|(
name|os
operator|.
name|traversal
argument_list|,
name|os
operator|.
name|direction
argument_list|,
name|ei
argument_list|)
expr_stmt|;
name|np
operator|->
name|setNext
argument_list|(
name|ns
operator|.
name|traversal
argument_list|,
name|ns
operator|.
name|direction
argument_list|,
name|ei
argument_list|)
expr_stmt|;
name|int
name|oe
init|=
name|os
operator|.
name|edge
decl_stmt|;
name|int
name|ne
init|=
name|ns
operator|.
name|edge
decl_stmt|;
name|os
operator|=
name|next
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|ns
operator|=
name|next
argument_list|(
name|ns
argument_list|)
expr_stmt|;
name|os
operator|.
name|flipDirection
argument_list|()
expr_stmt|;
name|ns
operator|.
name|flipDirection
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|os
operator|.
name|edge
operator|==
name|ei
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|ns
operator|.
name|edge
operator|==
name|ei
argument_list|)
expr_stmt|;
name|ep
operator|->
name|setNext
argument_list|(
name|os
operator|.
name|traversal
argument_list|,
name|os
operator|.
name|direction
argument_list|,
name|oe
argument_list|)
expr_stmt|;
name|ep
operator|->
name|setNext
argument_list|(
name|ns
operator|.
name|traversal
argument_list|,
name|ns
operator|.
name|direction
argument_list|,
name|ne
argument_list|)
expr_stmt|;
block|}
block|}
name|Q_ASSERT
argument_list|(
name|ep
operator|->
name|next
argument_list|(
name|QPathEdge
operator|::
name|RightTraversal
argument_list|,
name|QPathEdge
operator|::
name|Forward
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|ep
operator|->
name|next
argument_list|(
name|QPathEdge
operator|::
name|RightTraversal
argument_list|,
name|QPathEdge
operator|::
name|Backward
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|ep
operator|->
name|next
argument_list|(
name|QPathEdge
operator|::
name|LeftTraversal
argument_list|,
name|QPathEdge
operator|::
name|Forward
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|ep
operator|->
name|next
argument_list|(
name|QPathEdge
operator|::
name|LeftTraversal
argument_list|,
name|QPathEdge
operator|::
name|Backward
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
return|return
name|ei
return|;
block|}
end_function
begin_function
DECL|function|insert
name|int
name|QWingedEdge
operator|::
name|insert
parameter_list|(
specifier|const
name|QPathVertex
modifier|&
name|vertex
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_vertices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QPathVertex
modifier|&
name|last
init|=
name|m_vertices
operator|.
name|last
argument_list|()
decl_stmt|;
if|if
condition|(
name|vertex
operator|.
name|x
operator|==
name|last
operator|.
name|x
operator|&&
name|vertex
operator|.
name|y
operator|==
name|last
operator|.
name|y
condition|)
return|return
name|m_vertices
operator|.
name|size
argument_list|()
operator|-
literal|1
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_vertices
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPathVertex
modifier|&
name|v
init|=
name|m_vertices
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|qFuzzyCompare
argument_list|(
name|v
operator|.
name|x
argument_list|,
name|vertex
operator|.
name|x
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|v
operator|.
name|y
argument_list|,
name|vertex
operator|.
name|y
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
block|}
name|m_vertices
operator|<<
name|vertex
expr_stmt|;
return|return
name|m_vertices
operator|.
name|size
argument_list|()
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|addLineTo
specifier|static
name|void
name|addLineTo
parameter_list|(
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|point
parameter_list|)
block|{
specifier|const
name|int
name|elementCount
init|=
name|path
operator|.
name|elementCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|elementCount
operator|>=
literal|2
condition|)
block|{
specifier|const
name|QPainterPath
operator|::
name|Element
modifier|&
name|middle
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|elementCount
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|middle
operator|.
name|type
operator|==
name|QPainterPath
operator|::
name|LineToElement
condition|)
block|{
specifier|const
name|QPointF
name|first
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|elementCount
operator|-
literal|2
argument_list|)
decl_stmt|;
specifier|const
name|QPointF
name|d1
init|=
name|point
operator|-
name|first
decl_stmt|;
specifier|const
name|QPointF
name|d2
init|=
name|middle
operator|-
name|first
decl_stmt|;
specifier|const
name|QPointF
name|p
argument_list|(
operator|-
name|d1
operator|.
name|y
argument_list|()
argument_list|,
name|d1
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|qFuzzyIsNull
argument_list|(
name|dot
argument_list|(
name|p
argument_list|,
name|d2
argument_list|)
argument_list|)
condition|)
block|{
name|path
operator|.
name|setElementPositionAt
argument_list|(
name|elementCount
operator|-
literal|1
argument_list|,
name|point
operator|.
name|x
argument_list|()
argument_list|,
name|point
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
name|path
operator|.
name|lineTo
argument_list|(
name|point
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|add
specifier|static
name|void
name|add
parameter_list|(
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QWingedEdge
modifier|&
name|list
parameter_list|,
name|int
name|edge
parameter_list|,
name|QPathEdge
operator|::
name|Traversal
name|traversal
parameter_list|)
block|{
name|QWingedEdge
operator|::
name|TraversalStatus
name|status
decl_stmt|;
name|status
operator|.
name|edge
operator|=
name|edge
expr_stmt|;
name|status
operator|.
name|traversal
operator|=
name|traversal
expr_stmt|;
name|status
operator|.
name|direction
operator|=
name|QPathEdge
operator|::
name|Forward
expr_stmt|;
name|path
operator|.
name|moveTo
argument_list|(
operator|*
name|list
operator|.
name|vertex
argument_list|(
name|list
operator|.
name|edge
argument_list|(
name|edge
argument_list|)
operator|->
name|first
argument_list|)
argument_list|)
expr_stmt|;
do|do
block|{
specifier|const
name|QPathEdge
modifier|*
name|ep
init|=
name|list
operator|.
name|edge
argument_list|(
name|status
operator|.
name|edge
argument_list|)
decl_stmt|;
name|addLineTo
argument_list|(
name|path
argument_list|,
operator|*
name|list
operator|.
name|vertex
argument_list|(
name|ep
operator|->
name|vertex
argument_list|(
name|status
operator|.
name|direction
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|traversal
operator|==
name|QPathEdge
operator|::
name|LeftTraversal
condition|)
name|ep
operator|->
name|flag
operator|&=
operator|~
literal|16
expr_stmt|;
else|else
name|ep
operator|->
name|flag
operator|&=
operator|~
literal|32
expr_stmt|;
name|status
operator|=
name|list
operator|.
name|next
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|status
operator|.
name|edge
operator|!=
name|edge
condition|)
do|;
block|}
end_function
begin_function
DECL|function|simplify
name|void
name|QWingedEdge
operator|::
name|simplify
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|edgeCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPathEdge
modifier|*
name|ep
init|=
name|edge
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// if both sides are part of the inside then we can collapse the edge
name|int
name|flag
init|=
literal|0x3
operator|<<
literal|4
decl_stmt|;
if|if
condition|(
operator|(
name|ep
operator|->
name|flag
operator|&
name|flag
operator|)
operator|==
name|flag
condition|)
block|{
name|removeEdge
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|ep
operator|->
name|flag
operator|&=
operator|~
name|flag
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|toPath
name|QPainterPath
name|QWingedEdge
operator|::
name|toPath
parameter_list|()
specifier|const
block|{
name|QPainterPath
name|path
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|edgeCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPathEdge
modifier|*
name|ep
init|=
name|edge
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ep
operator|->
name|flag
operator|&
literal|16
condition|)
block|{
name|add
argument_list|(
name|path
argument_list|,
operator|*
name|this
argument_list|,
name|i
argument_list|,
name|QPathEdge
operator|::
name|LeftTraversal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ep
operator|->
name|flag
operator|&
literal|32
condition|)
name|add
argument_list|(
name|path
argument_list|,
operator|*
name|this
argument_list|,
name|i
argument_list|,
name|QPathEdge
operator|::
name|RightTraversal
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
end_function
begin_function
DECL|function|intersect
name|bool
name|QPathClipper
operator|::
name|intersect
parameter_list|()
block|{
if|if
condition|(
name|subjectPath
operator|==
name|clipPath
condition|)
return|return
literal|true
return|;
name|QRectF
name|r1
init|=
name|subjectPath
operator|.
name|controlPointRect
argument_list|()
decl_stmt|;
name|QRectF
name|r2
init|=
name|clipPath
operator|.
name|controlPointRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|qMax
argument_list|(
name|r1
operator|.
name|x
argument_list|()
argument_list|,
name|r2
operator|.
name|x
argument_list|()
argument_list|)
operator|>
name|qMin
argument_list|(
name|r1
operator|.
name|x
argument_list|()
operator|+
name|r1
operator|.
name|width
argument_list|()
argument_list|,
name|r2
operator|.
name|x
argument_list|()
operator|+
name|r2
operator|.
name|width
argument_list|()
argument_list|)
operator|||
name|qMax
argument_list|(
name|r1
operator|.
name|y
argument_list|()
argument_list|,
name|r2
operator|.
name|y
argument_list|()
argument_list|)
operator|>
name|qMin
argument_list|(
name|r1
operator|.
name|y
argument_list|()
operator|+
name|r1
operator|.
name|height
argument_list|()
argument_list|,
name|r2
operator|.
name|y
argument_list|()
operator|+
name|r2
operator|.
name|height
argument_list|()
argument_list|)
condition|)
block|{
comment|// no way we could intersect
return|return
literal|false
return|;
block|}
name|bool
name|subjectIsRect
init|=
name|pathToRect
argument_list|(
name|subjectPath
argument_list|)
decl_stmt|;
name|bool
name|clipIsRect
init|=
name|pathToRect
argument_list|(
name|clipPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|subjectIsRect
operator|&&
name|clipIsRect
condition|)
return|return
literal|true
return|;
elseif|else
if|if
condition|(
name|subjectIsRect
condition|)
return|return
name|clipPath
operator|.
name|intersects
argument_list|(
name|r1
argument_list|)
return|;
elseif|else
if|if
condition|(
name|clipIsRect
condition|)
return|return
name|subjectPath
operator|.
name|intersects
argument_list|(
name|r2
argument_list|)
return|;
name|QPathSegments
name|a
argument_list|(
name|subjectPath
operator|.
name|elementCount
argument_list|()
argument_list|)
decl_stmt|;
name|a
operator|.
name|setPath
argument_list|(
name|subjectPath
argument_list|)
expr_stmt|;
name|QPathSegments
name|b
argument_list|(
name|clipPath
operator|.
name|elementCount
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|.
name|setPath
argument_list|(
name|clipPath
argument_list|)
expr_stmt|;
name|QIntersectionFinder
name|finder
decl_stmt|;
if|if
condition|(
name|finder
operator|.
name|hasIntersections
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
condition|)
return|return
literal|true
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clipPath
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|clipPath
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
operator|.
name|type
operator|==
name|QPainterPath
operator|::
name|MoveToElement
condition|)
block|{
specifier|const
name|QPointF
name|point
init|=
name|clipPath
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|r1
operator|.
name|contains
argument_list|(
name|point
argument_list|)
operator|&&
name|subjectPath
operator|.
name|contains
argument_list|(
name|point
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subjectPath
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|subjectPath
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
operator|.
name|type
operator|==
name|QPainterPath
operator|::
name|MoveToElement
condition|)
block|{
specifier|const
name|QPointF
name|point
init|=
name|subjectPath
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|r2
operator|.
name|contains
argument_list|(
name|point
argument_list|)
operator|&&
name|clipPath
operator|.
name|contains
argument_list|(
name|point
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|contains
name|bool
name|QPathClipper
operator|::
name|contains
parameter_list|()
block|{
if|if
condition|(
name|subjectPath
operator|==
name|clipPath
condition|)
return|return
literal|false
return|;
name|QRectF
name|r1
init|=
name|subjectPath
operator|.
name|controlPointRect
argument_list|()
decl_stmt|;
name|QRectF
name|r2
init|=
name|clipPath
operator|.
name|controlPointRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|qMax
argument_list|(
name|r1
operator|.
name|x
argument_list|()
argument_list|,
name|r2
operator|.
name|x
argument_list|()
argument_list|)
operator|>
name|qMin
argument_list|(
name|r1
operator|.
name|x
argument_list|()
operator|+
name|r1
operator|.
name|width
argument_list|()
argument_list|,
name|r2
operator|.
name|x
argument_list|()
operator|+
name|r2
operator|.
name|width
argument_list|()
argument_list|)
operator|||
name|qMax
argument_list|(
name|r1
operator|.
name|y
argument_list|()
argument_list|,
name|r2
operator|.
name|y
argument_list|()
argument_list|)
operator|>
name|qMin
argument_list|(
name|r1
operator|.
name|y
argument_list|()
operator|+
name|r1
operator|.
name|height
argument_list|()
argument_list|,
name|r2
operator|.
name|y
argument_list|()
operator|+
name|r2
operator|.
name|height
argument_list|()
argument_list|)
condition|)
block|{
comment|// no intersection -> not contained
return|return
literal|false
return|;
block|}
name|bool
name|clipIsRect
init|=
name|pathToRect
argument_list|(
name|clipPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|clipIsRect
condition|)
return|return
name|subjectPath
operator|.
name|contains
argument_list|(
name|r2
argument_list|)
return|;
name|QPathSegments
name|a
argument_list|(
name|subjectPath
operator|.
name|elementCount
argument_list|()
argument_list|)
decl_stmt|;
name|a
operator|.
name|setPath
argument_list|(
name|subjectPath
argument_list|)
expr_stmt|;
name|QPathSegments
name|b
argument_list|(
name|clipPath
operator|.
name|elementCount
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|.
name|setPath
argument_list|(
name|clipPath
argument_list|)
expr_stmt|;
name|QIntersectionFinder
name|finder
decl_stmt|;
if|if
condition|(
name|finder
operator|.
name|hasIntersections
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clipPath
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|clipPath
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
operator|.
name|type
operator|==
name|QPainterPath
operator|::
name|MoveToElement
condition|)
block|{
specifier|const
name|QPointF
name|point
init|=
name|clipPath
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|r1
operator|.
name|contains
argument_list|(
name|point
argument_list|)
operator|||
operator|!
name|subjectPath
operator|.
name|contains
argument_list|(
name|point
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_constructor
DECL|function|QPathClipper
name|QPathClipper
operator|::
name|QPathClipper
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|subject
parameter_list|,
specifier|const
name|QPainterPath
modifier|&
name|clip
parameter_list|)
member_init_list|:
name|subjectPath
argument_list|(
name|subject
argument_list|)
member_init_list|,
name|clipPath
argument_list|(
name|clip
argument_list|)
block|{
name|aMask
operator|=
name|subjectPath
operator|.
name|fillRule
argument_list|()
operator|==
name|Qt
operator|::
name|WindingFill
condition|?
operator|~
literal|0x0
else|:
literal|0x1
expr_stmt|;
name|bMask
operator|=
name|clipPath
operator|.
name|fillRule
argument_list|()
operator|==
name|Qt
operator|::
name|WindingFill
condition|?
operator|~
literal|0x0
else|:
literal|0x1
expr_stmt|;
block|}
end_constructor
begin_function
template|template
parameter_list|<
name|typename
name|Iterator
parameter_list|,
name|typename
name|Equality
parameter_list|>
DECL|function|qRemoveDuplicates
name|Iterator
name|qRemoveDuplicates
parameter_list|(
name|Iterator
name|begin
parameter_list|,
name|Iterator
name|end
parameter_list|,
name|Equality
name|eq
parameter_list|)
block|{
if|if
condition|(
name|begin
operator|==
name|end
condition|)
return|return
name|end
return|;
name|Iterator
name|last
init|=
name|begin
decl_stmt|;
operator|++
name|begin
expr_stmt|;
name|Iterator
name|insert
init|=
name|begin
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|begin
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|!
name|eq
argument_list|(
operator|*
name|it
argument_list|,
operator|*
name|last
argument_list|)
condition|)
block|{
operator|*
name|insert
operator|++
operator|=
operator|*
name|it
expr_stmt|;
name|last
operator|=
name|it
expr_stmt|;
block|}
block|}
return|return
name|insert
return|;
block|}
end_function
begin_function
DECL|function|clear
specifier|static
name|void
name|clear
parameter_list|(
name|QWingedEdge
modifier|&
name|list
parameter_list|,
name|int
name|edge
parameter_list|,
name|QPathEdge
operator|::
name|Traversal
name|traversal
parameter_list|)
block|{
name|QWingedEdge
operator|::
name|TraversalStatus
name|status
decl_stmt|;
name|status
operator|.
name|edge
operator|=
name|edge
expr_stmt|;
name|status
operator|.
name|traversal
operator|=
name|traversal
expr_stmt|;
name|status
operator|.
name|direction
operator|=
name|QPathEdge
operator|::
name|Forward
expr_stmt|;
do|do
block|{
if|if
condition|(
name|status
operator|.
name|traversal
operator|==
name|QPathEdge
operator|::
name|LeftTraversal
condition|)
name|list
operator|.
name|edge
argument_list|(
name|status
operator|.
name|edge
argument_list|)
operator|->
name|flag
operator||=
literal|1
expr_stmt|;
else|else
name|list
operator|.
name|edge
argument_list|(
name|status
operator|.
name|edge
argument_list|)
operator|->
name|flag
operator||=
literal|2
expr_stmt|;
name|status
operator|=
name|list
operator|.
name|next
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|status
operator|.
name|edge
operator|!=
name|edge
condition|)
do|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|InputIterator
parameter_list|>
DECL|function|qFuzzyFind
name|InputIterator
name|qFuzzyFind
parameter_list|(
name|InputIterator
name|first
parameter_list|,
name|InputIterator
name|last
parameter_list|,
name|qreal
name|val
parameter_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
operator|&&
operator|!
name|QT_PREPEND_NAMESPACE
argument_list|(
name|qFuzzyCompare
argument_list|)
argument_list|(
name|qreal
argument_list|(
operator|*
name|first
argument_list|)
argument_list|,
name|qreal
argument_list|(
name|val
argument_list|)
argument_list|)
condition|)
operator|++
name|first
expr_stmt|;
return|return
name|first
return|;
block|}
end_function
begin_function
DECL|function|fuzzyCompare
specifier|static
name|bool
name|fuzzyCompare
parameter_list|(
name|qreal
name|a
parameter_list|,
name|qreal
name|b
parameter_list|)
block|{
return|return
name|qFuzzyCompare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|pathToRect
name|bool
name|QPathClipper
operator|::
name|pathToRect
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
name|QRectF
modifier|*
name|rect
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|elementCount
argument_list|()
operator|!=
literal|5
condition|)
return|return
literal|false
return|;
specifier|const
name|bool
name|mightBeRect
init|=
name|path
operator|.
name|elementAt
argument_list|(
literal|0
argument_list|)
operator|.
name|isMoveTo
argument_list|()
operator|&&
name|path
operator|.
name|elementAt
argument_list|(
literal|1
argument_list|)
operator|.
name|isLineTo
argument_list|()
operator|&&
name|path
operator|.
name|elementAt
argument_list|(
literal|2
argument_list|)
operator|.
name|isLineTo
argument_list|()
operator|&&
name|path
operator|.
name|elementAt
argument_list|(
literal|3
argument_list|)
operator|.
name|isLineTo
argument_list|()
operator|&&
name|path
operator|.
name|elementAt
argument_list|(
literal|4
argument_list|)
operator|.
name|isLineTo
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|mightBeRect
condition|)
return|return
literal|false
return|;
specifier|const
name|qreal
name|x1
init|=
name|path
operator|.
name|elementAt
argument_list|(
literal|0
argument_list|)
operator|.
name|x
decl_stmt|;
specifier|const
name|qreal
name|y1
init|=
name|path
operator|.
name|elementAt
argument_list|(
literal|0
argument_list|)
operator|.
name|y
decl_stmt|;
specifier|const
name|qreal
name|x2
init|=
name|path
operator|.
name|elementAt
argument_list|(
literal|1
argument_list|)
operator|.
name|x
decl_stmt|;
specifier|const
name|qreal
name|y2
init|=
name|path
operator|.
name|elementAt
argument_list|(
literal|2
argument_list|)
operator|.
name|y
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|elementAt
argument_list|(
literal|1
argument_list|)
operator|.
name|y
operator|!=
name|y1
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|path
operator|.
name|elementAt
argument_list|(
literal|2
argument_list|)
operator|.
name|x
operator|!=
name|x2
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|path
operator|.
name|elementAt
argument_list|(
literal|3
argument_list|)
operator|.
name|x
operator|!=
name|x1
operator|||
name|path
operator|.
name|elementAt
argument_list|(
literal|3
argument_list|)
operator|.
name|y
operator|!=
name|y2
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|path
operator|.
name|elementAt
argument_list|(
literal|4
argument_list|)
operator|.
name|x
operator|!=
name|x1
operator|||
name|path
operator|.
name|elementAt
argument_list|(
literal|4
argument_list|)
operator|.
name|y
operator|!=
name|y1
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|rect
condition|)
name|rect
operator|->
name|setCoords
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|clip
name|QPainterPath
name|QPathClipper
operator|::
name|clip
parameter_list|(
name|Operation
name|operation
parameter_list|)
block|{
name|op
operator|=
name|operation
expr_stmt|;
if|if
condition|(
name|op
operator|!=
name|Simplify
condition|)
block|{
if|if
condition|(
name|subjectPath
operator|==
name|clipPath
condition|)
return|return
name|op
operator|==
name|BoolSub
condition|?
name|QPainterPath
argument_list|()
else|:
name|subjectPath
return|;
name|bool
name|subjectIsRect
init|=
name|pathToRect
argument_list|(
name|subjectPath
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|bool
name|clipIsRect
init|=
name|pathToRect
argument_list|(
name|clipPath
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|QRectF
name|clipBounds
init|=
name|clipPath
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
specifier|const
name|QRectF
name|subjectBounds
init|=
name|subjectPath
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|clipBounds
operator|.
name|intersects
argument_list|(
name|subjectBounds
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|BoolSub
case|:
return|return
name|subjectPath
return|;
case|case
name|BoolAnd
case|:
return|return
name|QPainterPath
argument_list|()
return|;
case|case
name|BoolOr
case|:
block|{
name|QPainterPath
name|result
init|=
name|subjectPath
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|fillRule
argument_list|()
operator|==
name|clipPath
operator|.
name|fillRule
argument_list|()
condition|)
block|{
name|result
operator|.
name|addPath
argument_list|(
name|clipPath
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|.
name|fillRule
argument_list|()
operator|==
name|Qt
operator|::
name|WindingFill
condition|)
block|{
name|result
operator|=
name|result
operator|.
name|simplified
argument_list|()
expr_stmt|;
name|result
operator|.
name|addPath
argument_list|(
name|clipPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|addPath
argument_list|(
name|clipPath
operator|.
name|simplified
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|clipBounds
operator|.
name|contains
argument_list|(
name|subjectBounds
argument_list|)
condition|)
block|{
if|if
condition|(
name|clipIsRect
condition|)
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|BoolSub
case|:
return|return
name|QPainterPath
argument_list|()
return|;
case|case
name|BoolAnd
case|:
return|return
name|subjectPath
return|;
case|case
name|BoolOr
case|:
return|return
name|clipPath
return|;
default|default:
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|subjectBounds
operator|.
name|contains
argument_list|(
name|clipBounds
argument_list|)
condition|)
block|{
if|if
condition|(
name|subjectIsRect
condition|)
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|BoolSub
case|:
if|if
condition|(
name|clipPath
operator|.
name|fillRule
argument_list|()
operator|==
name|Qt
operator|::
name|OddEvenFill
condition|)
block|{
name|QPainterPath
name|result
init|=
name|clipPath
decl_stmt|;
name|result
operator|.
name|addRect
argument_list|(
name|subjectBounds
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
name|QPainterPath
name|result
init|=
name|clipPath
operator|.
name|simplified
argument_list|()
decl_stmt|;
name|result
operator|.
name|addRect
argument_list|(
name|subjectBounds
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
case|case
name|BoolAnd
case|:
return|return
name|clipPath
return|;
case|case
name|BoolOr
case|:
return|return
name|subjectPath
return|;
default|default:
break|break;
block|}
block|}
block|}
if|if
condition|(
name|op
operator|==
name|BoolAnd
condition|)
block|{
if|if
condition|(
name|subjectIsRect
condition|)
return|return
name|intersect
argument_list|(
name|clipPath
argument_list|,
name|subjectBounds
argument_list|)
return|;
elseif|else
if|if
condition|(
name|clipIsRect
condition|)
return|return
name|intersect
argument_list|(
name|subjectPath
argument_list|,
name|clipBounds
argument_list|)
return|;
block|}
block|}
name|QWingedEdge
name|list
argument_list|(
name|subjectPath
argument_list|,
name|clipPath
argument_list|)
decl_stmt|;
name|doClip
argument_list|(
name|list
argument_list|,
name|ClipMode
argument_list|)
expr_stmt|;
name|QPainterPath
name|path
init|=
name|list
operator|.
name|toPath
argument_list|()
decl_stmt|;
return|return
name|path
return|;
block|}
end_function
begin_function
DECL|function|doClip
name|bool
name|QPathClipper
operator|::
name|doClip
parameter_list|(
name|QWingedEdge
modifier|&
name|list
parameter_list|,
name|ClipperMode
name|mode
parameter_list|)
block|{
name|QVector
argument_list|<
name|qreal
argument_list|>
name|y_coords
decl_stmt|;
name|y_coords
operator|.
name|reserve
argument_list|(
name|list
operator|.
name|vertexCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|vertexCount
argument_list|()
condition|;
operator|++
name|i
control|)
name|y_coords
operator|<<
name|list
operator|.
name|vertex
argument_list|(
name|i
argument_list|)
operator|->
name|y
expr_stmt|;
name|std
operator|::
name|sort
argument_list|(
name|y_coords
operator|.
name|begin
argument_list|()
argument_list|,
name|y_coords
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|y_coords
operator|.
name|resize
argument_list|(
name|qRemoveDuplicates
argument_list|(
name|y_coords
operator|.
name|begin
argument_list|()
argument_list|,
name|y_coords
operator|.
name|end
argument_list|()
argument_list|,
name|fuzzyCompare
argument_list|)
operator|-
name|y_coords
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QDEBUG_CLIPPER
name|printf
argument_list|(
literal|"sorted y coords:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|y_coords
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|printf
argument_list|(
literal|"%.9f\n"
argument_list|,
name|y_coords
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|bool
name|found
decl_stmt|;
do|do
block|{
name|found
operator|=
literal|false
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|qreal
name|maxHeight
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|edgeCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QPathEdge
modifier|*
name|edge
init|=
name|list
operator|.
name|edge
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// have both sides of this edge already been handled?
if|if
condition|(
operator|(
name|edge
operator|->
name|flag
operator|&
literal|0x3
operator|)
operator|==
literal|0x3
condition|)
continue|continue;
name|QPathVertex
modifier|*
name|a
init|=
name|list
operator|.
name|vertex
argument_list|(
name|edge
operator|->
name|first
argument_list|)
decl_stmt|;
name|QPathVertex
modifier|*
name|b
init|=
name|list
operator|.
name|vertex
argument_list|(
name|edge
operator|->
name|second
argument_list|)
decl_stmt|;
if|if
condition|(
name|qFuzzyCompare
argument_list|(
name|a
operator|->
name|y
argument_list|,
name|b
operator|->
name|y
argument_list|)
condition|)
continue|continue;
name|found
operator|=
literal|true
expr_stmt|;
name|qreal
name|height
init|=
name|qAbs
argument_list|(
name|a
operator|->
name|y
operator|-
name|b
operator|->
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|height
operator|>
name|maxHeight
condition|)
block|{
name|index
operator|=
name|i
expr_stmt|;
name|maxHeight
operator|=
name|height
expr_stmt|;
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
name|QPathEdge
modifier|*
name|edge
init|=
name|list
operator|.
name|edge
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|QPathVertex
modifier|*
name|a
init|=
name|list
operator|.
name|vertex
argument_list|(
name|edge
operator|->
name|first
argument_list|)
decl_stmt|;
name|QPathVertex
modifier|*
name|b
init|=
name|list
operator|.
name|vertex
argument_list|(
name|edge
operator|->
name|second
argument_list|)
decl_stmt|;
comment|// FIXME: this can be optimized by using binary search
specifier|const
name|int
name|first
init|=
name|qFuzzyFind
argument_list|(
name|y_coords
operator|.
name|begin
argument_list|()
argument_list|,
name|y_coords
operator|.
name|end
argument_list|()
argument_list|,
name|qMin
argument_list|(
name|a
operator|->
name|y
argument_list|,
name|b
operator|->
name|y
argument_list|)
argument_list|)
operator|-
name|y_coords
operator|.
name|begin
argument_list|()
decl_stmt|;
specifier|const
name|int
name|last
init|=
name|qFuzzyFind
argument_list|(
name|y_coords
operator|.
name|begin
argument_list|()
operator|+
name|first
argument_list|,
name|y_coords
operator|.
name|end
argument_list|()
argument_list|,
name|qMax
argument_list|(
name|a
operator|->
name|y
argument_list|,
name|b
operator|->
name|y
argument_list|)
argument_list|)
operator|-
name|y_coords
operator|.
name|begin
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|first
operator|<
name|y_coords
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|last
operator|<
name|y_coords
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|qreal
name|bestY
init|=
literal|0.5
operator|*
operator|(
name|y_coords
index|[
name|first
index|]
operator|+
name|y_coords
index|[
name|first
operator|+
literal|1
index|]
operator|)
decl_stmt|;
name|qreal
name|biggestGap
init|=
name|y_coords
index|[
name|first
operator|+
literal|1
index|]
operator|-
name|y_coords
index|[
name|first
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|first
operator|+
literal|1
init|;
name|i
operator|<
name|last
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|gap
init|=
name|y_coords
index|[
name|i
operator|+
literal|1
index|]
operator|-
name|y_coords
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|gap
operator|>
name|biggestGap
condition|)
block|{
name|bestY
operator|=
literal|0.5
operator|*
operator|(
name|y_coords
index|[
name|i
index|]
operator|+
name|y_coords
index|[
name|i
operator|+
literal|1
index|]
operator|)
expr_stmt|;
name|biggestGap
operator|=
name|gap
expr_stmt|;
block|}
block|}
ifdef|#
directive|ifdef
name|QDEBUG_CLIPPER
name|printf
argument_list|(
literal|"y: %.9f, gap: %.9f\n"
argument_list|,
name|bestY
argument_list|,
name|biggestGap
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|handleCrossingEdges
argument_list|(
name|list
argument_list|,
name|bestY
argument_list|,
name|mode
argument_list|)
operator|&&
name|mode
operator|==
name|CheckMode
condition|)
return|return
literal|true
return|;
name|edge
operator|->
name|flag
operator||=
literal|0x3
expr_stmt|;
block|}
block|}
do|while
condition|(
name|found
condition|)
do|;
if|if
condition|(
name|mode
operator|==
name|ClipMode
condition|)
name|list
operator|.
name|simplify
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|traverse
specifier|static
name|void
name|traverse
parameter_list|(
name|QWingedEdge
modifier|&
name|list
parameter_list|,
name|int
name|edge
parameter_list|,
name|QPathEdge
operator|::
name|Traversal
name|traversal
parameter_list|)
block|{
name|QWingedEdge
operator|::
name|TraversalStatus
name|status
decl_stmt|;
name|status
operator|.
name|edge
operator|=
name|edge
expr_stmt|;
name|status
operator|.
name|traversal
operator|=
name|traversal
expr_stmt|;
name|status
operator|.
name|direction
operator|=
name|QPathEdge
operator|::
name|Forward
expr_stmt|;
do|do
block|{
name|int
name|flag
init|=
name|status
operator|.
name|traversal
operator|==
name|QPathEdge
operator|::
name|LeftTraversal
condition|?
literal|1
else|:
literal|2
decl_stmt|;
name|QPathEdge
modifier|*
name|ep
init|=
name|list
operator|.
name|edge
argument_list|(
name|status
operator|.
name|edge
argument_list|)
decl_stmt|;
name|ep
operator|->
name|flag
operator||=
operator|(
name|flag
operator||
operator|(
name|flag
operator|<<
literal|4
operator|)
operator|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QDEBUG_CLIPPER
name|qDebug
argument_list|()
operator|<<
literal|"traverse: adding edge "
operator|<<
name|status
operator|.
name|edge
operator|<<
literal|", mask:"
operator|<<
operator|(
name|flag
operator|<<
literal|4
operator|)
operator|<<
name|ep
operator|->
name|flag
expr_stmt|;
endif|#
directive|endif
name|status
operator|=
name|list
operator|.
name|next
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|status
operator|.
name|edge
operator|!=
name|edge
condition|)
do|;
block|}
end_function
begin_struct
DECL|struct|QCrossingEdge
struct|struct
name|QCrossingEdge
block|{
DECL|member|edge
name|int
name|edge
decl_stmt|;
DECL|member|x
name|qreal
name|x
decl_stmt|;
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|QCrossingEdge
modifier|&
name|edge
parameter_list|)
specifier|const
block|{
return|return
name|x
operator|<
name|edge
operator|.
name|x
return|;
block|}
block|}
struct|;
end_struct
begin_function
DECL|function|bool_op
specifier|static
name|bool
name|bool_op
parameter_list|(
name|bool
name|a
parameter_list|,
name|bool
name|b
parameter_list|,
name|QPathClipper
operator|::
name|Operation
name|op
parameter_list|)
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|QPathClipper
operator|::
name|BoolAnd
case|:
return|return
name|a
operator|&&
name|b
return|;
case|case
name|QPathClipper
operator|::
name|BoolOr
case|:
comment|// fall-through
case|case
name|QPathClipper
operator|::
name|Simplify
case|:
return|return
name|a
operator|||
name|b
return|;
case|case
name|QPathClipper
operator|::
name|BoolSub
case|:
return|return
name|a
operator|&&
operator|!
name|b
return|;
default|default:
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|isInside
name|bool
name|QWingedEdge
operator|::
name|isInside
parameter_list|(
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|)
specifier|const
block|{
name|int
name|winding
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|edgeCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPathEdge
modifier|*
name|ep
init|=
name|edge
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// left xor right
name|int
name|w
init|=
operator|(
operator|(
name|ep
operator|->
name|flag
operator|>>
literal|4
operator|)
operator|^
operator|(
name|ep
operator|->
name|flag
operator|>>
literal|5
operator|)
operator|)
operator|&
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
continue|continue;
name|QPointF
name|a
init|=
operator|*
name|vertex
argument_list|(
name|ep
operator|->
name|first
argument_list|)
decl_stmt|;
name|QPointF
name|b
init|=
operator|*
name|vertex
argument_list|(
name|ep
operator|->
name|second
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|a
operator|.
name|y
argument_list|()
operator|<
name|y
operator|&&
name|b
operator|.
name|y
argument_list|()
operator|>
name|y
operator|)
operator|||
operator|(
name|a
operator|.
name|y
argument_list|()
operator|>
name|y
operator|&&
name|b
operator|.
name|y
argument_list|()
operator|<
name|y
operator|)
condition|)
block|{
name|qreal
name|intersectionX
init|=
name|a
operator|.
name|x
argument_list|()
operator|+
operator|(
name|b
operator|.
name|x
argument_list|()
operator|-
name|a
operator|.
name|x
argument_list|()
operator|)
operator|*
operator|(
name|y
operator|-
name|a
operator|.
name|y
argument_list|()
operator|)
operator|/
operator|(
name|b
operator|.
name|y
argument_list|()
operator|-
name|a
operator|.
name|y
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|intersectionX
operator|>
name|x
condition|)
name|winding
operator|+=
name|w
expr_stmt|;
block|}
block|}
return|return
name|winding
operator|&
literal|1
return|;
block|}
end_function
begin_function
DECL|function|findCrossings
specifier|static
name|QVector
argument_list|<
name|QCrossingEdge
argument_list|>
name|findCrossings
parameter_list|(
specifier|const
name|QWingedEdge
modifier|&
name|list
parameter_list|,
name|qreal
name|y
parameter_list|)
block|{
name|QVector
argument_list|<
name|QCrossingEdge
argument_list|>
name|crossings
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|edgeCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPathEdge
modifier|*
name|edge
init|=
name|list
operator|.
name|edge
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QPointF
name|a
init|=
operator|*
name|list
operator|.
name|vertex
argument_list|(
name|edge
operator|->
name|first
argument_list|)
decl_stmt|;
name|QPointF
name|b
init|=
operator|*
name|list
operator|.
name|vertex
argument_list|(
name|edge
operator|->
name|second
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|a
operator|.
name|y
argument_list|()
operator|<
name|y
operator|&&
name|b
operator|.
name|y
argument_list|()
operator|>
name|y
operator|)
operator|||
operator|(
name|a
operator|.
name|y
argument_list|()
operator|>
name|y
operator|&&
name|b
operator|.
name|y
argument_list|()
operator|<
name|y
operator|)
condition|)
block|{
specifier|const
name|qreal
name|intersection
init|=
name|a
operator|.
name|x
argument_list|()
operator|+
operator|(
name|b
operator|.
name|x
argument_list|()
operator|-
name|a
operator|.
name|x
argument_list|()
operator|)
operator|*
operator|(
name|y
operator|-
name|a
operator|.
name|y
argument_list|()
operator|)
operator|/
operator|(
name|b
operator|.
name|y
argument_list|()
operator|-
name|a
operator|.
name|y
argument_list|()
operator|)
decl_stmt|;
specifier|const
name|QCrossingEdge
name|edge
init|=
block|{
name|i
block|,
name|intersection
block|}
decl_stmt|;
name|crossings
operator|<<
name|edge
expr_stmt|;
block|}
block|}
return|return
name|crossings
return|;
block|}
end_function
begin_function
DECL|function|handleCrossingEdges
name|bool
name|QPathClipper
operator|::
name|handleCrossingEdges
parameter_list|(
name|QWingedEdge
modifier|&
name|list
parameter_list|,
name|qreal
name|y
parameter_list|,
name|ClipperMode
name|mode
parameter_list|)
block|{
name|QVector
argument_list|<
name|QCrossingEdge
argument_list|>
name|crossings
init|=
name|findCrossings
argument_list|(
name|list
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|crossings
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|std
operator|::
name|sort
argument_list|(
name|crossings
operator|.
name|begin
argument_list|()
argument_list|,
name|crossings
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|windingA
init|=
literal|0
decl_stmt|;
name|int
name|windingB
init|=
literal|0
decl_stmt|;
name|int
name|windingD
init|=
literal|0
decl_stmt|;
ifdef|#
directive|ifdef
name|QDEBUG_CLIPPER
name|qDebug
argument_list|()
operator|<<
literal|"crossings:"
operator|<<
name|crossings
operator|.
name|size
argument_list|()
expr_stmt|;
endif|#
directive|endif
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|crossings
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|int
name|ei
init|=
name|crossings
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|edge
decl_stmt|;
specifier|const
name|QPathEdge
modifier|*
name|edge
init|=
name|list
operator|.
name|edge
argument_list|(
name|ei
argument_list|)
decl_stmt|;
name|windingA
operator|+=
name|edge
operator|->
name|windingA
expr_stmt|;
name|windingB
operator|+=
name|edge
operator|->
name|windingB
expr_stmt|;
specifier|const
name|bool
name|hasLeft
init|=
operator|(
name|edge
operator|->
name|flag
operator|>>
literal|4
operator|)
operator|&
literal|1
decl_stmt|;
specifier|const
name|bool
name|hasRight
init|=
operator|(
name|edge
operator|->
name|flag
operator|>>
literal|4
operator|)
operator|&
literal|2
decl_stmt|;
name|windingD
operator|+=
name|hasLeft
operator|^
name|hasRight
expr_stmt|;
specifier|const
name|bool
name|inA
init|=
operator|(
name|windingA
operator|&
name|aMask
operator|)
operator|!=
literal|0
decl_stmt|;
specifier|const
name|bool
name|inB
init|=
operator|(
name|windingB
operator|&
name|bMask
operator|)
operator|!=
literal|0
decl_stmt|;
specifier|const
name|bool
name|inD
init|=
operator|(
name|windingD
operator|&
literal|0x1
operator|)
operator|!=
literal|0
decl_stmt|;
specifier|const
name|bool
name|inside
init|=
name|bool_op
argument_list|(
name|inA
argument_list|,
name|inB
argument_list|,
name|op
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|add
init|=
name|inD
operator|^
name|inside
decl_stmt|;
ifdef|#
directive|ifdef
name|QDEBUG_CLIPPER
name|printf
argument_list|(
literal|"y %f, x %f, inA: %d, inB: %d, inD: %d, inside: %d, flag: %x, bezier: %p, edge: %d\n"
argument_list|,
name|y
argument_list|,
name|crossings
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|x
argument_list|,
name|inA
argument_list|,
name|inB
argument_list|,
name|inD
argument_list|,
name|inside
argument_list|,
name|edge
operator|->
name|flag
argument_list|,
name|edge
operator|->
name|bezier
argument_list|,
name|ei
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|add
condition|)
block|{
if|if
condition|(
name|mode
operator|==
name|CheckMode
condition|)
return|return
literal|true
return|;
name|qreal
name|y0
init|=
name|list
operator|.
name|vertex
argument_list|(
name|edge
operator|->
name|first
argument_list|)
operator|->
name|y
decl_stmt|;
name|qreal
name|y1
init|=
name|list
operator|.
name|vertex
argument_list|(
name|edge
operator|->
name|second
argument_list|)
operator|->
name|y
decl_stmt|;
if|if
condition|(
name|y0
operator|<
name|y1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|edge
operator|->
name|flag
operator|&
literal|1
operator|)
condition|)
name|traverse
argument_list|(
name|list
argument_list|,
name|ei
argument_list|,
name|QPathEdge
operator|::
name|LeftTraversal
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|edge
operator|->
name|flag
operator|&
literal|2
operator|)
condition|)
name|clear
argument_list|(
name|list
argument_list|,
name|ei
argument_list|,
name|QPathEdge
operator|::
name|RightTraversal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
operator|(
name|edge
operator|->
name|flag
operator|&
literal|1
operator|)
condition|)
name|clear
argument_list|(
name|list
argument_list|,
name|ei
argument_list|,
name|QPathEdge
operator|::
name|LeftTraversal
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|edge
operator|->
name|flag
operator|&
literal|2
operator|)
condition|)
name|traverse
argument_list|(
name|list
argument_list|,
name|ei
argument_list|,
name|QPathEdge
operator|::
name|RightTraversal
argument_list|)
expr_stmt|;
block|}
operator|++
name|windingD
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
operator|(
name|edge
operator|->
name|flag
operator|&
literal|1
operator|)
condition|)
name|clear
argument_list|(
name|list
argument_list|,
name|ei
argument_list|,
name|QPathEdge
operator|::
name|LeftTraversal
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|edge
operator|->
name|flag
operator|&
literal|2
operator|)
condition|)
name|clear
argument_list|(
name|list
argument_list|,
name|ei
argument_list|,
name|QPathEdge
operator|::
name|RightTraversal
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_namespace
namespace|namespace
block|{
DECL|function|toSubpaths
name|QList
argument_list|<
name|QPainterPath
argument_list|>
name|toSubpaths
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
name|QList
argument_list|<
name|QPainterPath
argument_list|>
name|subpaths
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|subpaths
return|;
name|QPainterPath
name|current
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPainterPath
operator|::
name|Element
modifier|&
name|e
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|type
condition|)
block|{
case|case
name|QPainterPath
operator|::
name|MoveToElement
case|:
if|if
condition|(
name|current
operator|.
name|elementCount
argument_list|()
operator|>
literal|1
condition|)
name|subpaths
operator|+=
name|current
expr_stmt|;
name|current
operator|=
name|QPainterPath
argument_list|()
expr_stmt|;
name|current
operator|.
name|moveTo
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|LineToElement
case|:
name|current
operator|.
name|lineTo
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToElement
case|:
block|{
name|current
operator|.
name|cubicTo
argument_list|(
name|e
argument_list|,
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
break|break;
block|}
case|case
name|QPainterPath
operator|::
name|CurveToDataElement
case|:
name|Q_ASSERT
argument_list|(
operator|!
literal|"toSubpaths(), bad element type"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|current
operator|.
name|elementCount
argument_list|()
operator|>
literal|1
condition|)
name|subpaths
operator|<<
name|current
expr_stmt|;
return|return
name|subpaths
return|;
block|}
DECL|enum|Edge
enum|enum
name|Edge
block|{
DECL|enumerator|Left
DECL|enumerator|Top
DECL|enumerator|Right
DECL|enumerator|Bottom
name|Left
block|,
name|Top
block|,
name|Right
block|,
name|Bottom
block|}
enum|;
DECL|function|isVertical
specifier|static
name|bool
name|isVertical
parameter_list|(
name|Edge
name|edge
parameter_list|)
block|{
return|return
name|edge
operator|==
name|Left
operator|||
name|edge
operator|==
name|Right
return|;
block|}
template|template
parameter_list|<
name|Edge
name|edge
parameter_list|>
DECL|function|compare
name|bool
name|compare
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
name|qreal
name|t
parameter_list|)
block|{
switch|switch
condition|(
name|edge
condition|)
block|{
case|case
name|Left
case|:
return|return
name|p
operator|.
name|x
argument_list|()
operator|<
name|t
return|;
case|case
name|Right
case|:
return|return
name|p
operator|.
name|x
argument_list|()
operator|>
name|t
return|;
case|case
name|Top
case|:
return|return
name|p
operator|.
name|y
argument_list|()
operator|<
name|t
return|;
default|default:
return|return
name|p
operator|.
name|y
argument_list|()
operator|>
name|t
return|;
block|}
block|}
template|template
parameter_list|<
name|Edge
name|edge
parameter_list|>
DECL|function|intersectLine
name|QPointF
name|intersectLine
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|a
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|b
parameter_list|,
name|qreal
name|t
parameter_list|)
block|{
name|QLineF
name|line
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|edge
condition|)
block|{
case|case
name|Left
case|:
comment|// fall-through
case|case
name|Right
case|:
return|return
name|line
operator|.
name|pointAt
argument_list|(
operator|(
name|t
operator|-
name|a
operator|.
name|x
argument_list|()
operator|)
operator|/
operator|(
name|b
operator|.
name|x
argument_list|()
operator|-
name|a
operator|.
name|x
argument_list|()
operator|)
argument_list|)
return|;
default|default:
return|return
name|line
operator|.
name|pointAt
argument_list|(
operator|(
name|t
operator|-
name|a
operator|.
name|y
argument_list|()
operator|)
operator|/
operator|(
name|b
operator|.
name|y
argument_list|()
operator|-
name|a
operator|.
name|y
argument_list|()
operator|)
argument_list|)
return|;
block|}
block|}
DECL|function|addLine
name|void
name|addLine
parameter_list|(
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QLineF
modifier|&
name|line
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|elementCount
argument_list|()
operator|>
literal|0
condition|)
name|path
operator|.
name|lineTo
argument_list|(
name|line
operator|.
name|p1
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|path
operator|.
name|moveTo
argument_list|(
name|line
operator|.
name|p1
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|line
operator|.
name|p2
argument_list|()
argument_list|)
expr_stmt|;
block|}
template|template
parameter_list|<
name|Edge
name|edge
parameter_list|>
DECL|function|clipLine
name|void
name|clipLine
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|a
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|b
parameter_list|,
name|qreal
name|t
parameter_list|,
name|QPainterPath
modifier|&
name|result
parameter_list|)
block|{
name|bool
name|outA
init|=
name|compare
argument_list|<
name|edge
argument_list|>
argument_list|(
name|a
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|bool
name|outB
init|=
name|compare
argument_list|<
name|edge
argument_list|>
argument_list|(
name|b
argument_list|,
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|outA
operator|&&
name|outB
condition|)
return|return;
if|if
condition|(
name|outA
condition|)
name|addLine
argument_list|(
name|result
argument_list|,
name|QLineF
argument_list|(
name|intersectLine
argument_list|<
name|edge
argument_list|>
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|t
argument_list|)
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|outB
condition|)
name|addLine
argument_list|(
name|result
argument_list|,
name|QLineF
argument_list|(
name|a
argument_list|,
name|intersectLine
argument_list|<
name|edge
argument_list|>
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|t
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|addLine
argument_list|(
name|result
argument_list|,
name|QLineF
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|addBezier
name|void
name|addBezier
parameter_list|(
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QBezier
modifier|&
name|bezier
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|elementCount
argument_list|()
operator|>
literal|0
condition|)
name|path
operator|.
name|lineTo
argument_list|(
name|bezier
operator|.
name|pt1
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|path
operator|.
name|moveTo
argument_list|(
name|bezier
operator|.
name|pt1
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|.
name|cubicTo
argument_list|(
name|bezier
operator|.
name|pt2
argument_list|()
argument_list|,
name|bezier
operator|.
name|pt3
argument_list|()
argument_list|,
name|bezier
operator|.
name|pt4
argument_list|()
argument_list|)
expr_stmt|;
block|}
template|template
parameter_list|<
name|Edge
name|edge
parameter_list|>
DECL|function|clipBezier
name|void
name|clipBezier
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|a
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|b
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|c
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|d
parameter_list|,
name|qreal
name|t
parameter_list|,
name|QPainterPath
modifier|&
name|result
parameter_list|)
block|{
name|QBezier
name|bezier
init|=
name|QBezier
operator|::
name|fromPoints
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|bool
name|outA
init|=
name|compare
argument_list|<
name|edge
argument_list|>
argument_list|(
name|a
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|bool
name|outB
init|=
name|compare
argument_list|<
name|edge
argument_list|>
argument_list|(
name|b
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|bool
name|outC
init|=
name|compare
argument_list|<
name|edge
argument_list|>
argument_list|(
name|c
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|bool
name|outD
init|=
name|compare
argument_list|<
name|edge
argument_list|>
argument_list|(
name|d
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|int
name|outCount
init|=
name|int
argument_list|(
name|outA
argument_list|)
operator|+
name|int
argument_list|(
name|outB
argument_list|)
operator|+
name|int
argument_list|(
name|outC
argument_list|)
operator|+
name|int
argument_list|(
name|outD
argument_list|)
decl_stmt|;
if|if
condition|(
name|outCount
operator|==
literal|4
condition|)
return|return;
if|if
condition|(
name|outCount
operator|==
literal|0
condition|)
block|{
name|addBezier
argument_list|(
name|result
argument_list|,
name|bezier
argument_list|)
expr_stmt|;
return|return;
block|}
name|QTransform
name|flip
init|=
name|isVertical
argument_list|(
name|edge
argument_list|)
condition|?
name|QTransform
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
else|:
name|QTransform
argument_list|()
decl_stmt|;
name|QBezier
name|unflipped
init|=
name|bezier
decl_stmt|;
name|QBezier
name|flipped
init|=
name|bezier
operator|.
name|mapBy
argument_list|(
name|flip
argument_list|)
decl_stmt|;
name|qreal
name|t0
init|=
literal|0
decl_stmt|,
name|t1
init|=
literal|1
decl_stmt|;
name|int
name|stationary
init|=
name|flipped
operator|.
name|stationaryYPoints
argument_list|(
name|t0
argument_list|,
name|t1
argument_list|)
decl_stmt|;
name|qreal
name|segments
index|[
literal|4
index|]
decl_stmt|;
name|QPointF
name|points
index|[
literal|4
index|]
decl_stmt|;
name|points
index|[
literal|0
index|]
operator|=
name|unflipped
operator|.
name|pt1
argument_list|()
expr_stmt|;
name|segments
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|int
name|segmentCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|stationary
operator|>
literal|0
condition|)
block|{
operator|++
name|segmentCount
expr_stmt|;
name|segments
index|[
name|segmentCount
index|]
operator|=
name|t0
expr_stmt|;
name|points
index|[
name|segmentCount
index|]
operator|=
name|unflipped
operator|.
name|pointAt
argument_list|(
name|t0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stationary
operator|>
literal|1
condition|)
block|{
operator|++
name|segmentCount
expr_stmt|;
name|segments
index|[
name|segmentCount
index|]
operator|=
name|t1
expr_stmt|;
name|points
index|[
name|segmentCount
index|]
operator|=
name|unflipped
operator|.
name|pointAt
argument_list|(
name|t1
argument_list|)
expr_stmt|;
block|}
operator|++
name|segmentCount
expr_stmt|;
name|segments
index|[
name|segmentCount
index|]
operator|=
literal|1
expr_stmt|;
name|points
index|[
name|segmentCount
index|]
operator|=
name|unflipped
operator|.
name|pt4
argument_list|()
expr_stmt|;
name|qreal
name|lastIntersection
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|segmentCount
condition|;
operator|++
name|i
control|)
block|{
name|outA
operator|=
name|compare
argument_list|<
name|edge
argument_list|>
argument_list|(
name|points
index|[
name|i
index|]
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|outB
operator|=
name|compare
argument_list|<
name|edge
argument_list|>
argument_list|(
name|points
index|[
name|i
operator|+
literal|1
index|]
argument_list|,
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|outA
operator|!=
name|outB
condition|)
block|{
name|qreal
name|intersection
init|=
name|flipped
operator|.
name|tForY
argument_list|(
name|segments
index|[
name|i
index|]
argument_list|,
name|segments
index|[
name|i
operator|+
literal|1
index|]
argument_list|,
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|outB
condition|)
name|addBezier
argument_list|(
name|result
argument_list|,
name|unflipped
operator|.
name|getSubRange
argument_list|(
name|lastIntersection
argument_list|,
name|intersection
argument_list|)
argument_list|)
expr_stmt|;
name|lastIntersection
operator|=
name|intersection
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|outB
condition|)
name|addBezier
argument_list|(
name|result
argument_list|,
name|unflipped
operator|.
name|getSubRange
argument_list|(
name|lastIntersection
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// clips a single subpath against a single edge
template|template
parameter_list|<
name|Edge
name|edge
parameter_list|>
DECL|function|clip
name|QPainterPath
name|clip
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
name|qreal
name|t
parameter_list|)
block|{
name|QPainterPath
name|result
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|path
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPainterPath
operator|::
name|Element
modifier|&
name|element
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|element
operator|.
name|isMoveTo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|isLineTo
argument_list|()
condition|)
block|{
name|clipLine
argument_list|<
name|edge
argument_list|>
argument_list|(
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|,
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
argument_list|,
name|t
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clipBezier
argument_list|<
name|edge
argument_list|>
argument_list|(
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|,
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
argument_list|,
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
argument_list|,
name|t
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
block|}
name|int
name|last
init|=
name|path
operator|.
name|elementCount
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|QPointF
argument_list|(
name|path
operator|.
name|elementAt
argument_list|(
name|last
argument_list|)
argument_list|)
operator|!=
name|QPointF
argument_list|(
name|path
operator|.
name|elementAt
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
name|clipLine
argument_list|<
name|edge
argument_list|>
argument_list|(
name|path
operator|.
name|elementAt
argument_list|(
name|last
argument_list|)
argument_list|,
name|path
operator|.
name|elementAt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|t
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|function|intersectPath
name|QPainterPath
name|intersectPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
block|{
name|QList
argument_list|<
name|QPainterPath
argument_list|>
name|subpaths
init|=
name|toSubpaths
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QPainterPath
name|result
decl_stmt|;
name|result
operator|.
name|setFillRule
argument_list|(
name|path
operator|.
name|fillRule
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subpaths
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QPainterPath
name|subPath
init|=
name|subpaths
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QRectF
name|bounds
init|=
name|subPath
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|bounds
operator|.
name|intersects
argument_list|(
name|rect
argument_list|)
condition|)
block|{
if|if
condition|(
name|bounds
operator|.
name|left
argument_list|()
operator|<
name|rect
operator|.
name|left
argument_list|()
condition|)
name|subPath
operator|=
name|clip
argument_list|<
name|Left
argument_list|>
argument_list|(
name|subPath
argument_list|,
name|rect
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bounds
operator|.
name|right
argument_list|()
operator|>
name|rect
operator|.
name|right
argument_list|()
condition|)
name|subPath
operator|=
name|clip
argument_list|<
name|Right
argument_list|>
argument_list|(
name|subPath
argument_list|,
name|rect
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|bounds
operator|=
name|subPath
operator|.
name|boundingRect
argument_list|()
expr_stmt|;
if|if
condition|(
name|bounds
operator|.
name|top
argument_list|()
operator|<
name|rect
operator|.
name|top
argument_list|()
condition|)
name|subPath
operator|=
name|clip
argument_list|<
name|Top
argument_list|>
argument_list|(
name|subPath
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bounds
operator|.
name|bottom
argument_list|()
operator|>
name|rect
operator|.
name|bottom
argument_list|()
condition|)
name|subPath
operator|=
name|clip
argument_list|<
name|Bottom
argument_list|>
argument_list|(
name|subPath
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|subPath
operator|.
name|elementCount
argument_list|()
operator|>
literal|1
condition|)
name|result
operator|.
name|addPath
argument_list|(
name|subPath
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_namespace
begin_function
DECL|function|intersect
name|QPainterPath
name|QPathClipper
operator|::
name|intersect
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
block|{
return|return
name|intersectPath
argument_list|(
name|path
argument_list|,
name|rect
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
