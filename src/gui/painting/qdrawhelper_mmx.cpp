begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<private/qdrawhelper_p.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_HAVE_MMX
argument_list|)
end_if
begin_include
include|#
directive|include
file|<private/qdrawhelper_mmx_p.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|qt_functionForModeSolid_MMX
name|CompositionFunctionSolid
name|qt_functionForModeSolid_MMX
index|[
name|numCompositionFunctions
index|]
init|=
block|{
name|comp_func_solid_SourceOver
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|comp_func_solid_DestinationOver
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|comp_func_solid_Clear
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|comp_func_solid_Source
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
literal|0
block|,
name|comp_func_solid_SourceIn
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|comp_func_solid_DestinationIn
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|comp_func_solid_SourceOut
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|comp_func_solid_DestinationOut
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|comp_func_solid_SourceAtop
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|comp_func_solid_DestinationAtop
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|comp_func_solid_XOR
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
comment|// svg 1.2 modes
name|rasterop_solid_SourceOrDestination
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|rasterop_solid_SourceAndDestination
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|rasterop_solid_SourceXorDestination
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|rasterop_solid_NotSourceAndNotDestination
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|rasterop_solid_NotSourceOrNotDestination
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|rasterop_solid_NotSourceXorDestination
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|rasterop_solid_NotSource
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|rasterop_solid_NotSourceAndDestination
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|rasterop_solid_SourceAndNotDestination
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_functionForMode_MMX
name|CompositionFunction
name|qt_functionForMode_MMX
index|[
name|numCompositionFunctions
index|]
init|=
block|{
name|comp_func_SourceOver
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|comp_func_DestinationOver
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|comp_func_Clear
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|comp_func_Source
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|comp_func_Destination
block|,
name|comp_func_SourceIn
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|comp_func_DestinationIn
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|comp_func_SourceOut
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|comp_func_DestinationOut
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|comp_func_SourceAtop
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|comp_func_DestinationAtop
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|comp_func_XOR
argument_list|<
name|QMMXIntrinsics
argument_list|>
block|,
name|comp_func_Plus
block|,
name|comp_func_Multiply
block|,
name|comp_func_Screen
block|,
name|comp_func_Overlay
block|,
name|comp_func_Darken
block|,
name|comp_func_Lighten
block|,
name|comp_func_ColorDodge
block|,
name|comp_func_ColorBurn
block|,
name|comp_func_HardLight
block|,
name|comp_func_SoftLight
block|,
name|comp_func_Difference
block|,
name|comp_func_Exclusion
block|,
name|rasterop_SourceOrDestination
block|,
name|rasterop_SourceAndDestination
block|,
name|rasterop_SourceXorDestination
block|,
name|rasterop_NotSourceAndNotDestination
block|,
name|rasterop_NotSourceOrNotDestination
block|,
name|rasterop_NotSourceXorDestination
block|,
name|rasterop_NotSource
block|,
name|rasterop_NotSourceAndDestination
block|,
name|rasterop_SourceAndNotDestination
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_blend_color_argb_mmx
name|void
name|qt_blend_color_argb_mmx
parameter_list|(
name|int
name|count
parameter_list|,
specifier|const
name|QSpan
modifier|*
name|spans
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
block|{
name|qt_blend_color_argb_x86
argument_list|<
name|QMMXIntrinsics
argument_list|>
argument_list|(
name|count
argument_list|,
name|spans
argument_list|,
name|userData
argument_list|,
operator|(
name|CompositionFunctionSolid
operator|*
operator|)
name|qt_functionForModeSolid_MMX
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_blend_argb32_on_argb32_mmx
name|void
name|qt_blend_argb32_on_argb32_mmx
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|const_alpha
parameter_list|)
block|{
specifier|const
name|uint
modifier|*
name|src
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|srcPixels
decl_stmt|;
name|uint
modifier|*
name|dst
init|=
operator|(
name|uint
operator|*
operator|)
name|destPixels
decl_stmt|;
name|uint
name|ca
init|=
name|const_alpha
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
name|comp_func_SourceOver
argument_list|<
name|QMMXIntrinsics
argument_list|>
argument_list|(
name|dst
argument_list|,
name|src
argument_list|,
name|w
argument_list|,
name|ca
argument_list|)
expr_stmt|;
name|dst
operator|=
operator|(
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
name|uchar
operator|*
operator|)
name|dst
operator|)
operator|+
name|dbpl
operator|)
expr_stmt|;
name|src
operator|=
operator|(
specifier|const
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|src
operator|)
operator|+
name|sbpl
operator|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_blend_rgb32_on_rgb32_mmx
name|void
name|qt_blend_rgb32_on_rgb32_mmx
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|const_alpha
parameter_list|)
block|{
specifier|const
name|uint
modifier|*
name|src
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|srcPixels
decl_stmt|;
name|uint
modifier|*
name|dst
init|=
operator|(
name|uint
operator|*
operator|)
name|destPixels
decl_stmt|;
name|uint
name|ca
init|=
name|const_alpha
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
name|comp_func_Source
argument_list|<
name|QMMXIntrinsics
argument_list|>
argument_list|(
name|dst
argument_list|,
name|src
argument_list|,
name|w
argument_list|,
name|ca
argument_list|)
expr_stmt|;
name|dst
operator|=
operator|(
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
name|uchar
operator|*
operator|)
name|dst
operator|)
operator|+
name|dbpl
operator|)
expr_stmt|;
name|src
operator|=
operator|(
specifier|const
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|src
operator|)
operator|+
name|sbpl
operator|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_HAVE_MMX
end_comment
end_unit
