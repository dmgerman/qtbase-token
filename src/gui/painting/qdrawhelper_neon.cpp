begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<private/qdrawhelper_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qblendfunctions_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qmath_p.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_COMPILER_SUPPORTS_NEON
end_ifdef
begin_include
include|#
directive|include
file|<private/qdrawhelper_neon_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<arm_neon.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|qt_memfill32
name|void
name|qt_memfill32
parameter_list|(
name|quint32
modifier|*
name|dest
parameter_list|,
name|quint32
name|value
parameter_list|,
name|int
name|count
parameter_list|)
block|{
specifier|const
name|int
name|epilogueSize
init|=
name|count
operator|%
literal|16
decl_stmt|;
if|if
condition|(
name|count
operator|>=
literal|16
condition|)
block|{
name|quint32
modifier|*
specifier|const
name|neonEnd
init|=
name|dest
operator|+
name|count
operator|-
name|epilogueSize
decl_stmt|;
specifier|register
name|uint32x4_t
name|valueVector1
name|asm
argument_list|(
literal|"q0"
argument_list|)
init|=
name|vdupq_n_u32
argument_list|(
name|value
argument_list|)
decl_stmt|;
specifier|register
name|uint32x4_t
name|valueVector2
name|asm
argument_list|(
literal|"q1"
argument_list|)
init|=
name|valueVector1
decl_stmt|;
while|while
condition|(
name|dest
operator|!=
name|neonEnd
condition|)
block|{
asm|asm
specifier|volatile
asm|(                 "vst2.32     { d0, d1, d2, d3 }, [%[DST]] !\n\t"                 "vst2.32     { d0, d1, d2, d3 }, [%[DST]] !\n\t"                 : [DST]"+r" (dest)                 : [VALUE1]"w"(valueVector1), [VALUE2]"w"(valueVector2)                 : "memory"             );
block|}
block|}
switch|switch
condition|(
name|epilogueSize
condition|)
block|{
case|case
literal|15
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|14
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|13
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|12
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|11
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|10
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|9
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|8
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|7
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|6
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|5
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|4
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|3
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|2
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|1
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qvdiv_255_u16
specifier|static
specifier|inline
name|uint16x8_t
name|qvdiv_255_u16
parameter_list|(
name|uint16x8_t
name|x
parameter_list|,
name|uint16x8_t
name|half
parameter_list|)
block|{
comment|// result = (x + (x>> 8) + 0x80)>> 8
specifier|const
name|uint16x8_t
name|temp
init|=
name|vshrq_n_u16
argument_list|(
name|x
argument_list|,
literal|8
argument_list|)
decl_stmt|;
comment|// x>> 8
specifier|const
name|uint16x8_t
name|sum_part
init|=
name|vaddq_u16
argument_list|(
name|x
argument_list|,
name|half
argument_list|)
decl_stmt|;
comment|// x + 0x80
specifier|const
name|uint16x8_t
name|sum
init|=
name|vaddq_u16
argument_list|(
name|temp
argument_list|,
name|sum_part
argument_list|)
decl_stmt|;
return|return
name|vshrq_n_u16
argument_list|(
name|sum
argument_list|,
literal|8
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qvbyte_mul_u16
specifier|static
specifier|inline
name|uint16x8_t
name|qvbyte_mul_u16
parameter_list|(
name|uint16x8_t
name|x
parameter_list|,
name|uint16x8_t
name|alpha
parameter_list|,
name|uint16x8_t
name|half
parameter_list|)
block|{
comment|// t = qRound(x * alpha / 255.0)
specifier|const
name|uint16x8_t
name|t
init|=
name|vmulq_u16
argument_list|(
name|x
argument_list|,
name|alpha
argument_list|)
decl_stmt|;
comment|// t
return|return
name|qvdiv_255_u16
argument_list|(
name|t
argument_list|,
name|half
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qvinterpolate_pixel_255
specifier|static
specifier|inline
name|uint16x8_t
name|qvinterpolate_pixel_255
parameter_list|(
name|uint16x8_t
name|x
parameter_list|,
name|uint16x8_t
name|a
parameter_list|,
name|uint16x8_t
name|y
parameter_list|,
name|uint16x8_t
name|b
parameter_list|,
name|uint16x8_t
name|half
parameter_list|)
block|{
comment|// t = x * a + y * b
specifier|const
name|uint16x8_t
name|ta
init|=
name|vmulq_u16
argument_list|(
name|x
argument_list|,
name|a
argument_list|)
decl_stmt|;
specifier|const
name|uint16x8_t
name|tb
init|=
name|vmulq_u16
argument_list|(
name|y
argument_list|,
name|b
argument_list|)
decl_stmt|;
return|return
name|qvdiv_255_u16
argument_list|(
name|vaddq_u16
argument_list|(
name|ta
argument_list|,
name|tb
argument_list|)
argument_list|,
name|half
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qvsource_over_u16
specifier|static
specifier|inline
name|uint16x8_t
name|qvsource_over_u16
parameter_list|(
name|uint16x8_t
name|src16
parameter_list|,
name|uint16x8_t
name|dst16
parameter_list|,
name|uint16x8_t
name|half
parameter_list|,
name|uint16x8_t
name|full
parameter_list|)
block|{
specifier|const
name|uint16x4_t
name|alpha16_high
init|=
name|vdup_lane_u16
argument_list|(
name|vget_high_u16
argument_list|(
name|src16
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|const
name|uint16x4_t
name|alpha16_low
init|=
name|vdup_lane_u16
argument_list|(
name|vget_low_u16
argument_list|(
name|src16
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|const
name|uint16x8_t
name|alpha16
init|=
name|vsubq_u16
argument_list|(
name|full
argument_list|,
name|vcombine_u16
argument_list|(
name|alpha16_low
argument_list|,
name|alpha16_high
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|vaddq_u16
argument_list|(
name|src16
argument_list|,
name|qvbyte_mul_u16
argument_list|(
name|dst16
argument_list|,
name|alpha16
argument_list|,
name|half
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_extern
extern|extern
literal|"C"
name|void
name|pixman_composite_over_8888_0565_asm_neon
parameter_list|(
name|int32_t
name|w
parameter_list|,
name|int32_t
name|h
parameter_list|,
name|uint16_t
modifier|*
name|dst
parameter_list|,
name|int32_t
name|dst_stride
parameter_list|,
name|uint32_t
modifier|*
name|src
parameter_list|,
name|int32_t
name|src_stride
parameter_list|)
function_decl|;
end_extern
begin_extern
extern|extern
literal|"C"
name|void
name|pixman_composite_over_8888_8888_asm_neon
parameter_list|(
name|int32_t
name|w
parameter_list|,
name|int32_t
name|h
parameter_list|,
name|uint32_t
modifier|*
name|dst
parameter_list|,
name|int32_t
name|dst_stride
parameter_list|,
name|uint32_t
modifier|*
name|src
parameter_list|,
name|int32_t
name|src_stride
parameter_list|)
function_decl|;
end_extern
begin_extern
extern|extern
literal|"C"
name|void
name|pixman_composite_src_0565_8888_asm_neon
parameter_list|(
name|int32_t
name|w
parameter_list|,
name|int32_t
name|h
parameter_list|,
name|uint32_t
modifier|*
name|dst
parameter_list|,
name|int32_t
name|dst_stride
parameter_list|,
name|uint16_t
modifier|*
name|src
parameter_list|,
name|int32_t
name|src_stride
parameter_list|)
function_decl|;
end_extern
begin_extern
extern|extern
literal|"C"
name|void
name|pixman_composite_over_n_8_0565_asm_neon
parameter_list|(
name|int32_t
name|w
parameter_list|,
name|int32_t
name|h
parameter_list|,
name|uint16_t
modifier|*
name|dst
parameter_list|,
name|int32_t
name|dst_stride
parameter_list|,
name|uint32_t
name|src
parameter_list|,
name|int32_t
name|unused
parameter_list|,
name|uint8_t
modifier|*
name|mask
parameter_list|,
name|int32_t
name|mask_stride
parameter_list|)
function_decl|;
end_extern
begin_extern
extern|extern
literal|"C"
name|void
name|pixman_composite_scanline_over_asm_neon
parameter_list|(
name|int32_t
name|w
parameter_list|,
specifier|const
name|uint32_t
modifier|*
name|dst
parameter_list|,
specifier|const
name|uint32_t
modifier|*
name|src
parameter_list|)
function_decl|;
end_extern
begin_extern
extern|extern
literal|"C"
name|void
name|pixman_composite_src_0565_0565_asm_neon
parameter_list|(
name|int32_t
name|w
parameter_list|,
name|int32_t
name|h
parameter_list|,
name|uint16_t
modifier|*
name|dst
parameter_list|,
name|int32_t
name|dst_stride
parameter_list|,
name|uint16_t
modifier|*
name|src
parameter_list|,
name|int32_t
name|src_stride
parameter_list|)
function_decl|;
end_extern
begin_comment
comment|// qblendfunctions.cpp
end_comment
begin_function_decl
name|void
name|qt_blend_argb32_on_rgb16_const_alpha
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|qt_blend_rgb16_on_argb32_neon
name|void
name|qt_blend_rgb16_on_argb32_neon
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|const_alpha
parameter_list|)
block|{
name|dbpl
operator|/=
literal|4
expr_stmt|;
name|sbpl
operator|/=
literal|2
expr_stmt|;
name|quint32
modifier|*
name|dst
init|=
operator|(
name|quint32
operator|*
operator|)
name|destPixels
decl_stmt|;
name|quint16
modifier|*
name|src
init|=
operator|(
name|quint16
operator|*
operator|)
name|srcPixels
decl_stmt|;
if|if
condition|(
name|const_alpha
operator|!=
literal|256
condition|)
block|{
name|quint8
name|a
init|=
operator|(
literal|255
operator|*
name|const_alpha
operator|)
operator|>>
literal|8
decl_stmt|;
name|quint8
name|ia
init|=
literal|255
operator|-
name|a
decl_stmt|;
while|while
condition|(
name|h
operator|--
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
name|dst
index|[
name|x
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|qConvertRgb16To32
argument_list|(
name|src
index|[
name|x
index|]
argument_list|)
argument_list|,
name|a
argument_list|,
name|dst
index|[
name|x
index|]
argument_list|,
name|ia
argument_list|)
expr_stmt|;
name|dst
operator|+=
name|dbpl
expr_stmt|;
name|src
operator|+=
name|sbpl
expr_stmt|;
block|}
return|return;
block|}
name|pixman_composite_src_0565_8888_asm_neon
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|dst
argument_list|,
name|dbpl
argument_list|,
name|src
argument_list|,
name|sbpl
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// qblendfunctions.cpp
end_comment
begin_function_decl
name|void
name|qt_blend_rgb16_on_rgb16
parameter_list|(
name|uchar
modifier|*
name|dst
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|src
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function
template|template
parameter_list|<
name|int
name|N
parameter_list|>
DECL|function|scanLineBlit16
specifier|static
specifier|inline
name|void
name|scanLineBlit16
parameter_list|(
name|quint16
modifier|*
name|dst
parameter_list|,
name|quint16
modifier|*
name|src
parameter_list|,
name|int
name|dstride
parameter_list|)
block|{
if|if
condition|(
name|N
operator|>=
literal|2
condition|)
block|{
operator|(
operator|(
name|quint32
operator|*
operator|)
name|dst
operator|)
index|[
literal|0
index|]
operator|=
operator|(
operator|(
name|quint32
operator|*
operator|)
name|src
operator|)
index|[
literal|0
index|]
expr_stmt|;
name|__builtin_prefetch
argument_list|(
name|dst
operator|+
name|dstride
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|N
operator|/
literal|2
condition|;
operator|++
name|i
control|)
operator|(
operator|(
name|quint32
operator|*
operator|)
name|dst
operator|)
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|quint32
operator|*
operator|)
name|src
operator|)
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|N
operator|&
literal|1
condition|)
name|dst
index|[
name|N
operator|-
literal|1
index|]
operator|=
name|src
index|[
name|N
operator|-
literal|1
index|]
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|int
name|Width
parameter_list|>
DECL|function|blockBlit16
specifier|static
specifier|inline
name|void
name|blockBlit16
parameter_list|(
name|quint16
modifier|*
name|dst
parameter_list|,
name|quint16
modifier|*
name|src
parameter_list|,
name|int
name|dstride
parameter_list|,
name|int
name|sstride
parameter_list|,
name|int
name|h
parameter_list|)
block|{
union|union
block|{
name|quintptr
name|address
decl_stmt|;
name|quint16
modifier|*
name|pointer
decl_stmt|;
block|}
name|u
union|;
name|u
operator|.
name|pointer
operator|=
name|dst
expr_stmt|;
if|if
condition|(
name|u
operator|.
name|address
operator|&
literal|2
condition|)
block|{
while|while
condition|(
name|h
operator|--
condition|)
block|{
comment|// align dst
name|dst
index|[
literal|0
index|]
operator|=
name|src
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|Width
operator|>
literal|1
condition|)
name|scanLineBlit16
argument_list|<
name|Width
operator|-
literal|1
argument_list|>
argument_list|(
name|dst
operator|+
literal|1
argument_list|,
name|src
operator|+
literal|1
argument_list|,
name|dstride
argument_list|)
expr_stmt|;
name|dst
operator|+=
name|dstride
expr_stmt|;
name|src
operator|+=
name|sstride
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|h
operator|--
condition|)
block|{
name|scanLineBlit16
argument_list|<
name|Width
argument_list|>
argument_list|(
name|dst
argument_list|,
name|src
argument_list|,
name|dstride
argument_list|)
expr_stmt|;
name|dst
operator|+=
name|dstride
expr_stmt|;
name|src
operator|+=
name|sstride
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|qt_blend_rgb16_on_rgb16_neon
name|void
name|qt_blend_rgb16_on_rgb16_neon
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|const_alpha
parameter_list|)
block|{
comment|// testing show that the default memcpy is faster for widths 150 and up
if|if
condition|(
name|const_alpha
operator|!=
literal|256
operator|||
name|w
operator|>=
literal|150
condition|)
block|{
name|qt_blend_rgb16_on_rgb16
argument_list|(
name|destPixels
argument_list|,
name|dbpl
argument_list|,
name|srcPixels
argument_list|,
name|sbpl
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|dstride
init|=
name|dbpl
operator|/
literal|2
decl_stmt|;
name|int
name|sstride
init|=
name|sbpl
operator|/
literal|2
decl_stmt|;
name|quint16
modifier|*
name|dst
init|=
operator|(
name|quint16
operator|*
operator|)
name|destPixels
decl_stmt|;
name|quint16
modifier|*
name|src
init|=
operator|(
name|quint16
operator|*
operator|)
name|srcPixels
decl_stmt|;
switch|switch
condition|(
name|w
condition|)
block|{
DECL|macro|BLOCKBLIT
define|#
directive|define
name|BLOCKBLIT
parameter_list|(
name|n
parameter_list|)
value|case n: blockBlit16<n>(dst, src, dstride, sstride, h); return;
name|BLOCKBLIT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|BLOCKBLIT
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|BLOCKBLIT
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|BLOCKBLIT
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|BLOCKBLIT
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|BLOCKBLIT
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|BLOCKBLIT
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|BLOCKBLIT
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|BLOCKBLIT
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|BLOCKBLIT
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|BLOCKBLIT
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|BLOCKBLIT
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|BLOCKBLIT
argument_list|(
literal|13
argument_list|)
expr_stmt|;
name|BLOCKBLIT
argument_list|(
literal|14
argument_list|)
expr_stmt|;
name|BLOCKBLIT
argument_list|(
literal|15
argument_list|)
expr_stmt|;
DECL|macro|BLOCKBLIT
undef|#
directive|undef
name|BLOCKBLIT
default|default:
break|break;
block|}
name|pixman_composite_src_0565_0565_asm_neon
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|dst
argument_list|,
name|dstride
argument_list|,
name|src
argument_list|,
name|sstride
argument_list|)
expr_stmt|;
block|}
end_function
begin_extern
extern|extern
literal|"C"
name|void
name|blend_8_pixels_argb32_on_rgb16_neon
parameter_list|(
name|quint16
modifier|*
name|dst
parameter_list|,
specifier|const
name|quint32
modifier|*
name|src
parameter_list|,
name|int
name|const_alpha
parameter_list|)
function_decl|;
end_extern
begin_function
DECL|function|qt_blend_argb32_on_rgb16_neon
name|void
name|qt_blend_argb32_on_rgb16_neon
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|const_alpha
parameter_list|)
block|{
name|quint16
modifier|*
name|dst
init|=
operator|(
name|quint16
operator|*
operator|)
name|destPixels
decl_stmt|;
name|quint32
modifier|*
name|src
init|=
operator|(
name|quint32
operator|*
operator|)
name|srcPixels
decl_stmt|;
if|if
condition|(
name|const_alpha
operator|!=
literal|256
condition|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|w
operator|-
literal|7
condition|;
name|i
operator|+=
literal|8
control|)
name|blend_8_pixels_argb32_on_rgb16_neon
argument_list|(
operator|&
name|dst
index|[
name|i
index|]
argument_list|,
operator|&
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|w
condition|)
block|{
name|int
name|tail
init|=
name|w
operator|-
name|i
decl_stmt|;
name|quint16
name|dstBuffer
index|[
literal|8
index|]
decl_stmt|;
name|quint32
name|srcBuffer
index|[
literal|8
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tail
condition|;
operator|++
name|j
control|)
block|{
name|dstBuffer
index|[
name|j
index|]
operator|=
name|dst
index|[
name|i
operator|+
name|j
index|]
expr_stmt|;
name|srcBuffer
index|[
name|j
index|]
operator|=
name|src
index|[
name|i
operator|+
name|j
index|]
expr_stmt|;
block|}
name|blend_8_pixels_argb32_on_rgb16_neon
argument_list|(
name|dstBuffer
argument_list|,
name|srcBuffer
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tail
condition|;
operator|++
name|j
control|)
name|dst
index|[
name|i
operator|+
name|j
index|]
operator|=
name|dstBuffer
index|[
name|j
index|]
expr_stmt|;
block|}
name|dst
operator|=
operator|(
name|quint16
operator|*
operator|)
operator|(
operator|(
operator|(
name|uchar
operator|*
operator|)
name|dst
operator|)
operator|+
name|dbpl
operator|)
expr_stmt|;
name|src
operator|=
operator|(
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
name|uchar
operator|*
operator|)
name|src
operator|)
operator|+
name|sbpl
operator|)
expr_stmt|;
block|}
return|return;
block|}
name|pixman_composite_over_8888_0565_asm_neon
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|dst
argument_list|,
name|dbpl
operator|/
literal|2
argument_list|,
name|src
argument_list|,
name|sbpl
operator|/
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_blend_argb32_on_argb32_scanline_neon
name|void
name|qt_blend_argb32_on_argb32_scanline_neon
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
name|pixman_composite_scanline_over_asm_neon
argument_list|(
name|length
argument_list|,
name|dest
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qt_blend_argb32_on_argb32_neon
argument_list|(
operator|(
name|uchar
operator|*
operator|)
name|dest
argument_list|,
literal|4
operator|*
name|length
argument_list|,
operator|(
name|uchar
operator|*
operator|)
name|src
argument_list|,
literal|4
operator|*
name|length
argument_list|,
name|length
argument_list|,
literal|1
argument_list|,
operator|(
name|const_alpha
operator|*
literal|256
operator|)
operator|/
literal|255
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_blend_argb32_on_argb32_neon
name|void
name|qt_blend_argb32_on_argb32_neon
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|const_alpha
parameter_list|)
block|{
specifier|const
name|uint
modifier|*
name|src
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|srcPixels
decl_stmt|;
name|uint
modifier|*
name|dst
init|=
operator|(
name|uint
operator|*
operator|)
name|destPixels
decl_stmt|;
name|uint16x8_t
name|half
init|=
name|vdupq_n_u16
argument_list|(
literal|0x80
argument_list|)
decl_stmt|;
name|uint16x8_t
name|full
init|=
name|vdupq_n_u16
argument_list|(
literal|0xff
argument_list|)
decl_stmt|;
if|if
condition|(
name|const_alpha
operator|==
literal|256
condition|)
block|{
name|pixman_composite_over_8888_8888_asm_neon
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
operator|(
name|uint32_t
operator|*
operator|)
name|destPixels
argument_list|,
name|dbpl
operator|/
literal|4
argument_list|,
operator|(
name|uint32_t
operator|*
operator|)
name|srcPixels
argument_list|,
name|sbpl
operator|/
literal|4
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|const_alpha
operator|!=
literal|0
condition|)
block|{
name|const_alpha
operator|=
operator|(
name|const_alpha
operator|*
literal|255
operator|)
operator|>>
literal|8
expr_stmt|;
name|uint16x8_t
name|const_alpha16
init|=
name|vdupq_n_u16
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
name|int
name|x
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|x
operator|<
name|w
operator|-
literal|3
condition|;
name|x
operator|+=
literal|4
control|)
block|{
if|if
condition|(
name|src
index|[
name|x
index|]
operator||
name|src
index|[
name|x
operator|+
literal|1
index|]
operator||
name|src
index|[
name|x
operator|+
literal|2
index|]
operator||
name|src
index|[
name|x
operator|+
literal|3
index|]
condition|)
block|{
name|uint32x4_t
name|src32
init|=
name|vld1q_u32
argument_list|(
operator|(
name|uint32_t
operator|*
operator|)
operator|&
name|src
index|[
name|x
index|]
argument_list|)
decl_stmt|;
name|uint32x4_t
name|dst32
init|=
name|vld1q_u32
argument_list|(
operator|(
name|uint32_t
operator|*
operator|)
operator|&
name|dst
index|[
name|x
index|]
argument_list|)
decl_stmt|;
specifier|const
name|uint8x16_t
name|src8
init|=
name|vreinterpretq_u8_u32
argument_list|(
name|src32
argument_list|)
decl_stmt|;
specifier|const
name|uint8x16_t
name|dst8
init|=
name|vreinterpretq_u8_u32
argument_list|(
name|dst32
argument_list|)
decl_stmt|;
specifier|const
name|uint8x8_t
name|src8_low
init|=
name|vget_low_u8
argument_list|(
name|src8
argument_list|)
decl_stmt|;
specifier|const
name|uint8x8_t
name|dst8_low
init|=
name|vget_low_u8
argument_list|(
name|dst8
argument_list|)
decl_stmt|;
specifier|const
name|uint8x8_t
name|src8_high
init|=
name|vget_high_u8
argument_list|(
name|src8
argument_list|)
decl_stmt|;
specifier|const
name|uint8x8_t
name|dst8_high
init|=
name|vget_high_u8
argument_list|(
name|dst8
argument_list|)
decl_stmt|;
specifier|const
name|uint16x8_t
name|src16_low
init|=
name|vmovl_u8
argument_list|(
name|src8_low
argument_list|)
decl_stmt|;
specifier|const
name|uint16x8_t
name|dst16_low
init|=
name|vmovl_u8
argument_list|(
name|dst8_low
argument_list|)
decl_stmt|;
specifier|const
name|uint16x8_t
name|src16_high
init|=
name|vmovl_u8
argument_list|(
name|src8_high
argument_list|)
decl_stmt|;
specifier|const
name|uint16x8_t
name|dst16_high
init|=
name|vmovl_u8
argument_list|(
name|dst8_high
argument_list|)
decl_stmt|;
specifier|const
name|uint16x8_t
name|srcalpha16_low
init|=
name|qvbyte_mul_u16
argument_list|(
name|src16_low
argument_list|,
name|const_alpha16
argument_list|,
name|half
argument_list|)
decl_stmt|;
specifier|const
name|uint16x8_t
name|srcalpha16_high
init|=
name|qvbyte_mul_u16
argument_list|(
name|src16_high
argument_list|,
name|const_alpha16
argument_list|,
name|half
argument_list|)
decl_stmt|;
specifier|const
name|uint16x8_t
name|result16_low
init|=
name|qvsource_over_u16
argument_list|(
name|srcalpha16_low
argument_list|,
name|dst16_low
argument_list|,
name|half
argument_list|,
name|full
argument_list|)
decl_stmt|;
specifier|const
name|uint16x8_t
name|result16_high
init|=
name|qvsource_over_u16
argument_list|(
name|srcalpha16_high
argument_list|,
name|dst16_high
argument_list|,
name|half
argument_list|,
name|full
argument_list|)
decl_stmt|;
specifier|const
name|uint32x2_t
name|result32_low
init|=
name|vreinterpret_u32_u8
argument_list|(
name|vmovn_u16
argument_list|(
name|result16_low
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|uint32x2_t
name|result32_high
init|=
name|vreinterpret_u32_u8
argument_list|(
name|vmovn_u16
argument_list|(
name|result16_high
argument_list|)
argument_list|)
decl_stmt|;
name|vst1q_u32
argument_list|(
operator|(
name|uint32_t
operator|*
operator|)
operator|&
name|dst
index|[
name|x
index|]
argument_list|,
name|vcombine_u32
argument_list|(
name|result32_low
argument_list|,
name|result32_high
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
name|uint
name|s
init|=
name|src
index|[
name|x
index|]
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|0
condition|)
block|{
name|s
operator|=
name|BYTE_MUL
argument_list|(
name|s
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
name|dst
index|[
name|x
index|]
operator|=
name|s
operator|+
name|BYTE_MUL
argument_list|(
name|dst
index|[
name|x
index|]
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|dst
operator|=
operator|(
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
name|uchar
operator|*
operator|)
name|dst
operator|)
operator|+
name|dbpl
operator|)
expr_stmt|;
name|src
operator|=
operator|(
specifier|const
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|src
operator|)
operator|+
name|sbpl
operator|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// qblendfunctions.cpp
end_comment
begin_function_decl
name|void
name|qt_blend_rgb32_on_rgb32
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|qt_blend_rgb32_on_rgb32_neon
name|void
name|qt_blend_rgb32_on_rgb32_neon
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|!=
literal|256
condition|)
block|{
if|if
condition|(
name|const_alpha
operator|!=
literal|0
condition|)
block|{
specifier|const
name|uint
modifier|*
name|src
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|srcPixels
decl_stmt|;
name|uint
modifier|*
name|dst
init|=
operator|(
name|uint
operator|*
operator|)
name|destPixels
decl_stmt|;
name|uint16x8_t
name|half
init|=
name|vdupq_n_u16
argument_list|(
literal|0x80
argument_list|)
decl_stmt|;
name|const_alpha
operator|=
operator|(
name|const_alpha
operator|*
literal|255
operator|)
operator|>>
literal|8
expr_stmt|;
name|int
name|one_minus_const_alpha
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
name|uint16x8_t
name|const_alpha16
init|=
name|vdupq_n_u16
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
name|uint16x8_t
name|one_minus_const_alpha16
init|=
name|vdupq_n_u16
argument_list|(
literal|255
operator|-
name|const_alpha
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
name|int
name|x
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|x
operator|<
name|w
operator|-
literal|3
condition|;
name|x
operator|+=
literal|4
control|)
block|{
name|uint32x4_t
name|src32
init|=
name|vld1q_u32
argument_list|(
operator|(
name|uint32_t
operator|*
operator|)
operator|&
name|src
index|[
name|x
index|]
argument_list|)
decl_stmt|;
name|uint32x4_t
name|dst32
init|=
name|vld1q_u32
argument_list|(
operator|(
name|uint32_t
operator|*
operator|)
operator|&
name|dst
index|[
name|x
index|]
argument_list|)
decl_stmt|;
specifier|const
name|uint8x16_t
name|src8
init|=
name|vreinterpretq_u8_u32
argument_list|(
name|src32
argument_list|)
decl_stmt|;
specifier|const
name|uint8x16_t
name|dst8
init|=
name|vreinterpretq_u8_u32
argument_list|(
name|dst32
argument_list|)
decl_stmt|;
specifier|const
name|uint8x8_t
name|src8_low
init|=
name|vget_low_u8
argument_list|(
name|src8
argument_list|)
decl_stmt|;
specifier|const
name|uint8x8_t
name|dst8_low
init|=
name|vget_low_u8
argument_list|(
name|dst8
argument_list|)
decl_stmt|;
specifier|const
name|uint8x8_t
name|src8_high
init|=
name|vget_high_u8
argument_list|(
name|src8
argument_list|)
decl_stmt|;
specifier|const
name|uint8x8_t
name|dst8_high
init|=
name|vget_high_u8
argument_list|(
name|dst8
argument_list|)
decl_stmt|;
specifier|const
name|uint16x8_t
name|src16_low
init|=
name|vmovl_u8
argument_list|(
name|src8_low
argument_list|)
decl_stmt|;
specifier|const
name|uint16x8_t
name|dst16_low
init|=
name|vmovl_u8
argument_list|(
name|dst8_low
argument_list|)
decl_stmt|;
specifier|const
name|uint16x8_t
name|src16_high
init|=
name|vmovl_u8
argument_list|(
name|src8_high
argument_list|)
decl_stmt|;
specifier|const
name|uint16x8_t
name|dst16_high
init|=
name|vmovl_u8
argument_list|(
name|dst8_high
argument_list|)
decl_stmt|;
specifier|const
name|uint16x8_t
name|result16_low
init|=
name|qvinterpolate_pixel_255
argument_list|(
name|src16_low
argument_list|,
name|const_alpha16
argument_list|,
name|dst16_low
argument_list|,
name|one_minus_const_alpha16
argument_list|,
name|half
argument_list|)
decl_stmt|;
specifier|const
name|uint16x8_t
name|result16_high
init|=
name|qvinterpolate_pixel_255
argument_list|(
name|src16_high
argument_list|,
name|const_alpha16
argument_list|,
name|dst16_high
argument_list|,
name|one_minus_const_alpha16
argument_list|,
name|half
argument_list|)
decl_stmt|;
specifier|const
name|uint32x2_t
name|result32_low
init|=
name|vreinterpret_u32_u8
argument_list|(
name|vmovn_u16
argument_list|(
name|result16_low
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|uint32x2_t
name|result32_high
init|=
name|vreinterpret_u32_u8
argument_list|(
name|vmovn_u16
argument_list|(
name|result16_high
argument_list|)
argument_list|)
decl_stmt|;
name|vst1q_u32
argument_list|(
operator|(
name|uint32_t
operator|*
operator|)
operator|&
name|dst
index|[
name|x
index|]
argument_list|,
name|vcombine_u32
argument_list|(
name|result32_low
argument_list|,
name|result32_high
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
name|uint
name|s
init|=
name|src
index|[
name|x
index|]
decl_stmt|;
name|s
operator|=
name|BYTE_MUL
argument_list|(
name|s
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
name|dst
index|[
name|x
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|src
index|[
name|x
index|]
argument_list|,
name|const_alpha
argument_list|,
name|dst
index|[
name|x
index|]
argument_list|,
name|one_minus_const_alpha
argument_list|)
expr_stmt|;
block|}
name|dst
operator|=
operator|(
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
name|uchar
operator|*
operator|)
name|dst
operator|)
operator|+
name|dbpl
operator|)
expr_stmt|;
name|src
operator|=
operator|(
specifier|const
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|src
operator|)
operator|+
name|sbpl
operator|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|qt_blend_rgb32_on_rgb32
argument_list|(
name|destPixels
argument_list|,
name|dbpl
argument_list|,
name|srcPixels
argument_list|,
name|sbpl
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_alphamapblit_quint16_neon
name|void
name|qt_alphamapblit_quint16_neon
parameter_list|(
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|quint32
name|color
parameter_list|,
specifier|const
name|uchar
modifier|*
name|bitmap
parameter_list|,
name|int
name|mapWidth
parameter_list|,
name|int
name|mapHeight
parameter_list|,
name|int
name|mapStride
parameter_list|,
specifier|const
name|QClipData
modifier|*
parameter_list|)
block|{
name|quint16
modifier|*
name|dest
init|=
cast|reinterpret_cast
argument_list|<
name|quint16
operator|*
argument_list|>
argument_list|(
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
argument_list|)
operator|+
name|x
decl_stmt|;
specifier|const
name|int
name|destStride
init|=
name|rasterBuffer
operator|->
name|bytesPerLine
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|quint16
argument_list|)
decl_stmt|;
name|uchar
modifier|*
name|mask
init|=
cast|const_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|bitmap
argument_list|)
decl_stmt|;
name|pixman_composite_over_n_8_0565_asm_neon
argument_list|(
name|mapWidth
argument_list|,
name|mapHeight
argument_list|,
name|dest
argument_list|,
name|destStride
argument_list|,
name|color
argument_list|,
literal|0
argument_list|,
name|mask
argument_list|,
name|mapStride
argument_list|)
expr_stmt|;
block|}
end_function
begin_extern
extern|extern
literal|"C"
name|void
name|blend_8_pixels_rgb16_on_rgb16_neon
parameter_list|(
name|quint16
modifier|*
name|dst
parameter_list|,
specifier|const
name|quint16
modifier|*
name|src
parameter_list|,
name|int
name|const_alpha
parameter_list|)
function_decl|;
end_extern
begin_struct
template|template
parameter_list|<
name|typename
name|SRC
parameter_list|,
name|typename
name|BlendFunc
parameter_list|>
struct|struct
DECL|struct|Blend_on_RGB16_SourceAndConstAlpha_Neon
name|Blend_on_RGB16_SourceAndConstAlpha_Neon
block|{
DECL|function|Blend_on_RGB16_SourceAndConstAlpha_Neon
name|Blend_on_RGB16_SourceAndConstAlpha_Neon
parameter_list|(
name|BlendFunc
name|blender
parameter_list|,
name|int
name|const_alpha
parameter_list|)
member_init_list|:
name|m_index
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_blender
argument_list|(
name|blender
argument_list|)
member_init_list|,
name|m_const_alpha
argument_list|(
name|const_alpha
argument_list|)
block|{     }
DECL|function|write
specifier|inline
name|void
name|write
parameter_list|(
name|quint16
modifier|*
name|dst
parameter_list|,
name|quint32
name|src
parameter_list|)
block|{
name|srcBuffer
index|[
name|m_index
operator|++
index|]
operator|=
name|src
expr_stmt|;
if|if
condition|(
name|m_index
operator|==
literal|8
condition|)
block|{
name|m_blender
argument_list|(
name|dst
operator|-
literal|7
argument_list|,
name|srcBuffer
argument_list|,
name|m_const_alpha
argument_list|)
expr_stmt|;
name|m_index
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|function|flush
specifier|inline
name|void
name|flush
parameter_list|(
name|quint16
modifier|*
name|dst
parameter_list|)
block|{
if|if
condition|(
name|m_index
operator|>
literal|0
condition|)
block|{
name|quint16
name|dstBuffer
index|[
literal|8
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_index
condition|;
operator|++
name|i
control|)
name|dstBuffer
index|[
name|i
index|]
operator|=
name|dst
index|[
name|i
operator|-
name|m_index
index|]
expr_stmt|;
name|m_blender
argument_list|(
name|dstBuffer
argument_list|,
name|srcBuffer
argument_list|,
name|m_const_alpha
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_index
condition|;
operator|++
name|i
control|)
name|dst
index|[
name|i
operator|-
name|m_index
index|]
operator|=
name|dstBuffer
index|[
name|i
index|]
expr_stmt|;
name|m_index
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|member|srcBuffer
name|SRC
name|srcBuffer
index|[
literal|8
index|]
decl_stmt|;
DECL|member|m_index
name|int
name|m_index
decl_stmt|;
DECL|member|m_blender
name|BlendFunc
name|m_blender
decl_stmt|;
DECL|member|m_const_alpha
name|int
name|m_const_alpha
decl_stmt|;
block|}
struct|;
end_struct
begin_function
template|template
parameter_list|<
name|typename
name|SRC
parameter_list|,
name|typename
name|BlendFunc
parameter_list|>
name|Blend_on_RGB16_SourceAndConstAlpha_Neon
argument_list|<
name|SRC
argument_list|,
name|BlendFunc
argument_list|>
DECL|function|Blend_on_RGB16_SourceAndConstAlpha_Neon_create
name|Blend_on_RGB16_SourceAndConstAlpha_Neon_create
parameter_list|(
name|BlendFunc
name|blender
parameter_list|,
name|int
name|const_alpha
parameter_list|)
block|{
return|return
name|Blend_on_RGB16_SourceAndConstAlpha_Neon
argument_list|<
name|SRC
argument_list|,
name|BlendFunc
argument_list|>
argument_list|(
name|blender
argument_list|,
name|const_alpha
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_scale_image_argb32_on_rgb16_neon
name|void
name|qt_scale_image_argb32_on_rgb16_neon
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|targetRect
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sourceRect
parameter_list|,
specifier|const
name|QRect
modifier|&
name|clip
parameter_list|,
name|int
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|0
condition|)
return|return;
name|qt_scale_image_16bit
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|destPixels
argument_list|,
name|dbpl
argument_list|,
name|srcPixels
argument_list|,
name|sbpl
argument_list|,
name|targetRect
argument_list|,
name|sourceRect
argument_list|,
name|clip
argument_list|,
name|Blend_on_RGB16_SourceAndConstAlpha_Neon_create
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|blend_8_pixels_argb32_on_rgb16_neon
argument_list|,
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function_decl
name|void
name|qt_scale_image_rgb16_on_rgb16
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|targetRect
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sourceRect
parameter_list|,
specifier|const
name|QRect
modifier|&
name|clip
parameter_list|,
name|int
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|qt_scale_image_rgb16_on_rgb16_neon
name|void
name|qt_scale_image_rgb16_on_rgb16_neon
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|targetRect
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sourceRect
parameter_list|,
specifier|const
name|QRect
modifier|&
name|clip
parameter_list|,
name|int
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|0
condition|)
return|return;
if|if
condition|(
name|const_alpha
operator|==
literal|256
condition|)
block|{
name|qt_scale_image_rgb16_on_rgb16
argument_list|(
name|destPixels
argument_list|,
name|dbpl
argument_list|,
name|srcPixels
argument_list|,
name|sbpl
argument_list|,
name|targetRect
argument_list|,
name|sourceRect
argument_list|,
name|clip
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
return|return;
block|}
name|qt_scale_image_16bit
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|destPixels
argument_list|,
name|dbpl
argument_list|,
name|srcPixels
argument_list|,
name|sbpl
argument_list|,
name|targetRect
argument_list|,
name|sourceRect
argument_list|,
name|clip
argument_list|,
name|Blend_on_RGB16_SourceAndConstAlpha_Neon_create
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|blend_8_pixels_rgb16_on_rgb16_neon
argument_list|,
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function_decl
specifier|extern
name|void
name|qt_transform_image_rgb16_on_rgb16
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|targetRect
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sourceRect
parameter_list|,
specifier|const
name|QRect
modifier|&
name|clip
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|targetRectTransform
parameter_list|,
name|int
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|qt_transform_image_rgb16_on_rgb16_neon
name|void
name|qt_transform_image_rgb16_on_rgb16_neon
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|targetRect
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sourceRect
parameter_list|,
specifier|const
name|QRect
modifier|&
name|clip
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|targetRectTransform
parameter_list|,
name|int
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|0
condition|)
return|return;
if|if
condition|(
name|const_alpha
operator|==
literal|256
condition|)
block|{
name|qt_transform_image_rgb16_on_rgb16
argument_list|(
name|destPixels
argument_list|,
name|dbpl
argument_list|,
name|srcPixels
argument_list|,
name|sbpl
argument_list|,
name|targetRect
argument_list|,
name|sourceRect
argument_list|,
name|clip
argument_list|,
name|targetRectTransform
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
return|return;
block|}
name|qt_transform_image
argument_list|(
cast|reinterpret_cast
argument_list|<
name|quint16
operator|*
argument_list|>
argument_list|(
name|destPixels
argument_list|)
argument_list|,
name|dbpl
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint16
operator|*
argument_list|>
argument_list|(
name|srcPixels
argument_list|)
argument_list|,
name|sbpl
argument_list|,
name|targetRect
argument_list|,
name|sourceRect
argument_list|,
name|clip
argument_list|,
name|targetRectTransform
argument_list|,
name|Blend_on_RGB16_SourceAndConstAlpha_Neon_create
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|blend_8_pixels_rgb16_on_rgb16_neon
argument_list|,
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_transform_image_argb32_on_rgb16_neon
name|void
name|qt_transform_image_argb32_on_rgb16_neon
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|targetRect
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sourceRect
parameter_list|,
specifier|const
name|QRect
modifier|&
name|clip
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|targetRectTransform
parameter_list|,
name|int
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|0
condition|)
return|return;
name|qt_transform_image
argument_list|(
cast|reinterpret_cast
argument_list|<
name|quint16
operator|*
argument_list|>
argument_list|(
name|destPixels
argument_list|)
argument_list|,
name|dbpl
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|srcPixels
argument_list|)
argument_list|,
name|sbpl
argument_list|,
name|targetRect
argument_list|,
name|sourceRect
argument_list|,
name|clip
argument_list|,
name|targetRectTransform
argument_list|,
name|Blend_on_RGB16_SourceAndConstAlpha_Neon_create
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|blend_8_pixels_argb32_on_rgb16_neon
argument_list|,
name|const_alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convert_8_pixels_rgb16_to_argb32
specifier|static
specifier|inline
name|void
name|convert_8_pixels_rgb16_to_argb32
parameter_list|(
name|quint32
modifier|*
name|dst
parameter_list|,
specifier|const
name|quint16
modifier|*
name|src
parameter_list|)
block|{
asm|asm
specifier|volatile
asm|(         "vld1.16     { d0, d1 }, [%[SRC]]\n\t"
comment|/* convert 8 r5g6b5 pixel data from {d0, d1} to planar 8-bit format            and put data into d4 - red, d3 - green, d2 - blue */
asm|"vshrn.u16   d4,  q0,  #8\n\t"         "vshrn.u16   d3,  q0,  #3\n\t"         "vsli.u16    q0,  q0,  #5\n\t"         "vsri.u8     d4,  d4,  #5\n\t"         "vsri.u8     d3,  d3,  #6\n\t"         "vshrn.u16   d2,  q0,  #2\n\t"
comment|/* fill d5 - alpha with 0xff */
asm|"mov         r2, #255\n\t"         "vdup.8      d5, r2\n\t"          "vst4.8      { d2, d3, d4, d5 }, [%[DST]]"         : : [DST]"r" (dst), [SRC]"r" (src)         : "memory", "r2", "d0", "d1", "d2", "d3", "d4", "d5"     );
block|}
end_function
begin_function
DECL|function|qt_destFetchRGB16_neon
name|uint
modifier|*
name|QT_FASTCALL
name|qt_destFetchRGB16_neon
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|length
parameter_list|)
block|{
specifier|const
name|ushort
modifier|*
name|data
init|=
operator|(
specifier|const
name|ushort
operator|*
operator|)
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
operator|+
name|x
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|length
operator|-
literal|7
condition|;
name|i
operator|+=
literal|8
control|)
name|convert_8_pixels_rgb16_to_argb32
argument_list|(
operator|&
name|buffer
index|[
name|i
index|]
argument_list|,
operator|&
name|data
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|length
condition|)
block|{
name|quint16
name|srcBuffer
index|[
literal|8
index|]
decl_stmt|;
name|quint32
name|dstBuffer
index|[
literal|8
index|]
decl_stmt|;
name|int
name|tail
init|=
name|length
operator|-
name|i
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tail
condition|;
operator|++
name|j
control|)
name|srcBuffer
index|[
name|j
index|]
operator|=
name|data
index|[
name|i
operator|+
name|j
index|]
expr_stmt|;
name|convert_8_pixels_rgb16_to_argb32
argument_list|(
name|dstBuffer
argument_list|,
name|srcBuffer
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tail
condition|;
operator|++
name|j
control|)
name|buffer
index|[
name|i
operator|+
name|j
index|]
operator|=
name|dstBuffer
index|[
name|j
index|]
expr_stmt|;
block|}
return|return
name|buffer
return|;
block|}
end_function
begin_function
DECL|function|convert_8_pixels_argb32_to_rgb16
specifier|static
specifier|inline
name|void
name|convert_8_pixels_argb32_to_rgb16
parameter_list|(
name|quint16
modifier|*
name|dst
parameter_list|,
specifier|const
name|quint32
modifier|*
name|src
parameter_list|)
block|{
asm|asm
specifier|volatile
asm|(         "vld4.8      { d0, d1, d2, d3 }, [%[SRC]]\n\t"
comment|/* convert to r5g6b5 and store it into {d28, d29} */
asm|"vshll.u8    q14, d2, #8\n\t"         "vshll.u8    q8,  d1, #8\n\t"         "vshll.u8    q9,  d0, #8\n\t"         "vsri.u16    q14, q8, #5\n\t"         "vsri.u16    q14, q9, #11\n\t"          "vst1.16     { d28, d29 }, [%[DST]]"         : : [DST]"r" (dst), [SRC]"r" (src)         : "memory", "d0", "d1", "d2", "d3", "d16", "d17", "d18", "d19", "d28", "d29"     );
block|}
end_function
begin_function
DECL|function|qt_destStoreRGB16_neon
name|void
name|QT_FASTCALL
name|qt_destStoreRGB16_neon
parameter_list|(
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
specifier|const
name|uint
modifier|*
name|buffer
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|quint16
modifier|*
name|data
init|=
operator|(
name|quint16
operator|*
operator|)
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
operator|+
name|x
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|length
operator|-
literal|7
condition|;
name|i
operator|+=
literal|8
control|)
name|convert_8_pixels_argb32_to_rgb16
argument_list|(
operator|&
name|data
index|[
name|i
index|]
argument_list|,
operator|&
name|buffer
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|length
condition|)
block|{
name|quint32
name|srcBuffer
index|[
literal|8
index|]
decl_stmt|;
name|quint16
name|dstBuffer
index|[
literal|8
index|]
decl_stmt|;
name|int
name|tail
init|=
name|length
operator|-
name|i
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tail
condition|;
operator|++
name|j
control|)
name|srcBuffer
index|[
name|j
index|]
operator|=
name|buffer
index|[
name|i
operator|+
name|j
index|]
expr_stmt|;
name|convert_8_pixels_argb32_to_rgb16
argument_list|(
name|dstBuffer
argument_list|,
name|srcBuffer
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tail
condition|;
operator|++
name|j
control|)
name|data
index|[
name|i
operator|+
name|j
index|]
operator|=
name|dstBuffer
index|[
name|j
index|]
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_SourceOver_neon
name|void
name|QT_FASTCALL
name|comp_func_solid_SourceOver_neon
parameter_list|(
name|uint
modifier|*
name|destPixels
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
operator|(
name|const_alpha
operator|&
name|qAlpha
argument_list|(
name|color
argument_list|)
operator|)
operator|==
literal|255
condition|)
block|{
name|QT_MEMFILL_UINT
argument_list|(
name|destPixels
argument_list|,
name|length
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
name|color
operator|=
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
specifier|const
name|quint32
name|minusAlphaOfColor
init|=
name|qAlpha
argument_list|(
operator|~
name|color
argument_list|)
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
name|uint32_t
modifier|*
name|dst
init|=
operator|(
name|uint32_t
operator|*
operator|)
name|destPixels
decl_stmt|;
specifier|const
name|uint32x4_t
name|colorVector
init|=
name|vdupq_n_u32
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|uint16x8_t
name|half
init|=
name|vdupq_n_u16
argument_list|(
literal|0x80
argument_list|)
decl_stmt|;
specifier|const
name|uint16x8_t
name|minusAlphaOfColorVector
init|=
name|vdupq_n_u16
argument_list|(
name|minusAlphaOfColor
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|x
operator|<
name|length
operator|-
literal|3
condition|;
name|x
operator|+=
literal|4
control|)
block|{
name|uint32x4_t
name|dstVector
init|=
name|vld1q_u32
argument_list|(
operator|&
name|dst
index|[
name|x
index|]
argument_list|)
decl_stmt|;
specifier|const
name|uint8x16_t
name|dst8
init|=
name|vreinterpretq_u8_u32
argument_list|(
name|dstVector
argument_list|)
decl_stmt|;
specifier|const
name|uint8x8_t
name|dst8_low
init|=
name|vget_low_u8
argument_list|(
name|dst8
argument_list|)
decl_stmt|;
specifier|const
name|uint8x8_t
name|dst8_high
init|=
name|vget_high_u8
argument_list|(
name|dst8
argument_list|)
decl_stmt|;
specifier|const
name|uint16x8_t
name|dst16_low
init|=
name|vmovl_u8
argument_list|(
name|dst8_low
argument_list|)
decl_stmt|;
specifier|const
name|uint16x8_t
name|dst16_high
init|=
name|vmovl_u8
argument_list|(
name|dst8_high
argument_list|)
decl_stmt|;
specifier|const
name|uint16x8_t
name|result16_low
init|=
name|qvbyte_mul_u16
argument_list|(
name|dst16_low
argument_list|,
name|minusAlphaOfColorVector
argument_list|,
name|half
argument_list|)
decl_stmt|;
specifier|const
name|uint16x8_t
name|result16_high
init|=
name|qvbyte_mul_u16
argument_list|(
name|dst16_high
argument_list|,
name|minusAlphaOfColorVector
argument_list|,
name|half
argument_list|)
decl_stmt|;
specifier|const
name|uint32x2_t
name|result32_low
init|=
name|vreinterpret_u32_u8
argument_list|(
name|vmovn_u16
argument_list|(
name|result16_low
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|uint32x2_t
name|result32_high
init|=
name|vreinterpret_u32_u8
argument_list|(
name|vmovn_u16
argument_list|(
name|result16_high
argument_list|)
argument_list|)
decl_stmt|;
name|uint32x4_t
name|blendedPixels
init|=
name|vcombine_u32
argument_list|(
name|result32_low
argument_list|,
name|result32_high
argument_list|)
decl_stmt|;
name|uint32x4_t
name|colorPlusBlendedPixels
init|=
name|vaddq_u32
argument_list|(
name|colorVector
argument_list|,
name|blendedPixels
argument_list|)
decl_stmt|;
name|vst1q_u32
argument_list|(
operator|&
name|dst
index|[
name|x
index|]
argument_list|,
name|colorPlusBlendedPixels
argument_list|)
expr_stmt|;
block|}
for|for
control|(
init|;
name|x
operator|<
name|length
condition|;
operator|++
name|x
control|)
name|destPixels
index|[
name|x
index|]
operator|=
name|color
operator|+
name|BYTE_MUL
argument_list|(
name|destPixels
index|[
name|x
index|]
argument_list|,
name|minusAlphaOfColor
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Plus_neon
name|void
name|QT_FASTCALL
name|comp_func_Plus_neon
parameter_list|(
name|uint
modifier|*
name|dst
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
name|uint
modifier|*
specifier|const
name|end
init|=
name|dst
operator|+
name|length
decl_stmt|;
name|uint
modifier|*
specifier|const
name|neonEnd
init|=
name|end
operator|-
literal|3
decl_stmt|;
while|while
condition|(
name|dst
operator|<
name|neonEnd
condition|)
block|{
asm|asm
specifier|volatile
asm|(                 "vld2.8     { d0, d1 }, [%[SRC]] !\n\t"                 "vld2.8     { d2, d3 }, [%[DST]]\n\t"                 "vqadd.u8 q0, q0, q1\n\t"                 "vst2.8     { d0, d1 }, [%[DST]] !\n\t"                 : [DST]"+r" (dst), [SRC]"+r" (src)                 :                 : "memory", "d0", "d1", "d2", "d3", "q0", "q1"             );
block|}
while|while
condition|(
name|dst
operator|!=
name|end
condition|)
block|{
operator|*
name|dst
operator|=
name|comp_func_Plus_one_pixel
argument_list|(
operator|*
name|dst
argument_list|,
operator|*
name|src
argument_list|)
expr_stmt|;
operator|++
name|dst
expr_stmt|;
operator|++
name|src
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|x
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|one_minus_const_alpha
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
specifier|const
name|uint16x8_t
name|constAlphaVector
init|=
name|vdupq_n_u16
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
specifier|const
name|uint16x8_t
name|oneMinusconstAlphaVector
init|=
name|vdupq_n_u16
argument_list|(
name|one_minus_const_alpha
argument_list|)
decl_stmt|;
specifier|const
name|uint16x8_t
name|half
init|=
name|vdupq_n_u16
argument_list|(
literal|0x80
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|x
operator|<
name|length
operator|-
literal|3
condition|;
name|x
operator|+=
literal|4
control|)
block|{
specifier|const
name|uint32x4_t
name|src32
init|=
name|vld1q_u32
argument_list|(
operator|(
name|uint32_t
operator|*
operator|)
operator|&
name|src
index|[
name|x
index|]
argument_list|)
decl_stmt|;
specifier|const
name|uint8x16_t
name|src8
init|=
name|vreinterpretq_u8_u32
argument_list|(
name|src32
argument_list|)
decl_stmt|;
name|uint8x16_t
name|dst8
init|=
name|vld1q_u8
argument_list|(
operator|(
name|uint8_t
operator|*
operator|)
operator|&
name|dst
index|[
name|x
index|]
argument_list|)
decl_stmt|;
name|uint8x16_t
name|result
init|=
name|vqaddq_u8
argument_list|(
name|dst8
argument_list|,
name|src8
argument_list|)
decl_stmt|;
name|uint16x8_t
name|result_low
init|=
name|vmovl_u8
argument_list|(
name|vget_low_u8
argument_list|(
name|result
argument_list|)
argument_list|)
decl_stmt|;
name|uint16x8_t
name|result_high
init|=
name|vmovl_u8
argument_list|(
name|vget_high_u8
argument_list|(
name|result
argument_list|)
argument_list|)
decl_stmt|;
name|uint16x8_t
name|dst_low
init|=
name|vmovl_u8
argument_list|(
name|vget_low_u8
argument_list|(
name|dst8
argument_list|)
argument_list|)
decl_stmt|;
name|uint16x8_t
name|dst_high
init|=
name|vmovl_u8
argument_list|(
name|vget_high_u8
argument_list|(
name|dst8
argument_list|)
argument_list|)
decl_stmt|;
name|result_low
operator|=
name|qvinterpolate_pixel_255
argument_list|(
name|result_low
argument_list|,
name|constAlphaVector
argument_list|,
name|dst_low
argument_list|,
name|oneMinusconstAlphaVector
argument_list|,
name|half
argument_list|)
expr_stmt|;
name|result_high
operator|=
name|qvinterpolate_pixel_255
argument_list|(
name|result_high
argument_list|,
name|constAlphaVector
argument_list|,
name|dst_high
argument_list|,
name|oneMinusconstAlphaVector
argument_list|,
name|half
argument_list|)
expr_stmt|;
specifier|const
name|uint32x2_t
name|result32_low
init|=
name|vreinterpret_u32_u8
argument_list|(
name|vmovn_u16
argument_list|(
name|result_low
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|uint32x2_t
name|result32_high
init|=
name|vreinterpret_u32_u8
argument_list|(
name|vmovn_u16
argument_list|(
name|result_high
argument_list|)
argument_list|)
decl_stmt|;
name|vst1q_u32
argument_list|(
operator|(
name|uint32_t
operator|*
operator|)
operator|&
name|dst
index|[
name|x
index|]
argument_list|,
name|vcombine_u32
argument_list|(
name|result32_low
argument_list|,
name|result32_high
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
init|;
name|x
operator|<
name|length
condition|;
operator|++
name|x
control|)
name|dst
index|[
name|x
index|]
operator|=
name|comp_func_Plus_one_pixel_const_alpha
argument_list|(
name|dst
index|[
name|x
index|]
argument_list|,
name|src
index|[
name|x
index|]
argument_list|,
name|const_alpha
argument_list|,
name|one_minus_const_alpha
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_decl_stmt
DECL|variable|tileSize
specifier|static
specifier|const
name|int
name|tileSize
init|=
literal|32
decl_stmt|;
end_decl_stmt
begin_extern
extern|extern
literal|"C"
name|void
name|qt_rotate90_16_neon
parameter_list|(
name|quint16
modifier|*
name|dst
parameter_list|,
specifier|const
name|quint16
modifier|*
name|src
parameter_list|,
name|int
name|sstride
parameter_list|,
name|int
name|dstride
parameter_list|,
name|int
name|count
parameter_list|)
function_decl|;
end_extern
begin_function
DECL|function|qt_memrotate90_16_neon
name|void
name|qt_memrotate90_16_neon
parameter_list|(
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|sstride
parameter_list|,
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dstride
parameter_list|)
block|{
specifier|const
name|ushort
modifier|*
name|src
init|=
operator|(
specifier|const
name|ushort
operator|*
operator|)
name|srcPixels
decl_stmt|;
name|ushort
modifier|*
name|dest
init|=
operator|(
name|ushort
operator|*
operator|)
name|destPixels
decl_stmt|;
name|sstride
operator|/=
sizeof|sizeof
argument_list|(
name|ushort
argument_list|)
expr_stmt|;
name|dstride
operator|/=
sizeof|sizeof
argument_list|(
name|ushort
argument_list|)
expr_stmt|;
specifier|const
name|int
name|pack
init|=
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|ushort
argument_list|)
decl_stmt|;
specifier|const
name|int
name|unaligned
init|=
name|qMin
argument_list|(
name|uint
argument_list|(
operator|(
name|quintptr
argument_list|(
name|dest
argument_list|)
operator|&
operator|(
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
operator|-
literal|1
operator|)
operator|)
operator|/
sizeof|sizeof
argument_list|(
name|ushort
argument_list|)
argument_list|)
argument_list|,
name|uint
argument_list|(
name|h
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|int
name|restX
init|=
name|w
operator|%
name|tileSize
decl_stmt|;
specifier|const
name|int
name|restY
init|=
operator|(
name|h
operator|-
name|unaligned
operator|)
operator|%
name|tileSize
decl_stmt|;
specifier|const
name|int
name|unoptimizedY
init|=
name|restY
operator|%
name|pack
decl_stmt|;
specifier|const
name|int
name|numTilesX
init|=
name|w
operator|/
name|tileSize
operator|+
operator|(
name|restX
operator|>
literal|0
operator|)
decl_stmt|;
specifier|const
name|int
name|numTilesY
init|=
operator|(
name|h
operator|-
name|unaligned
operator|)
operator|/
name|tileSize
operator|+
operator|(
name|restY
operator|>=
name|pack
operator|)
decl_stmt|;
for|for
control|(
name|int
name|tx
init|=
literal|0
init|;
name|tx
operator|<
name|numTilesX
condition|;
operator|++
name|tx
control|)
block|{
specifier|const
name|int
name|startx
init|=
name|w
operator|-
name|tx
operator|*
name|tileSize
operator|-
literal|1
decl_stmt|;
specifier|const
name|int
name|stopx
init|=
name|qMax
argument_list|(
name|startx
operator|-
name|tileSize
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|unaligned
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
name|startx
init|;
name|x
operator|>=
name|stopx
condition|;
operator|--
name|x
control|)
block|{
name|ushort
modifier|*
name|d
init|=
name|dest
operator|+
operator|(
name|w
operator|-
name|x
operator|-
literal|1
operator|)
operator|*
name|dstride
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|unaligned
condition|;
operator|++
name|y
control|)
block|{
operator|*
name|d
operator|++
operator|=
name|src
index|[
name|y
operator|*
name|sstride
operator|+
name|x
index|]
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|ty
init|=
literal|0
init|;
name|ty
operator|<
name|numTilesY
condition|;
operator|++
name|ty
control|)
block|{
specifier|const
name|int
name|starty
init|=
name|ty
operator|*
name|tileSize
operator|+
name|unaligned
decl_stmt|;
specifier|const
name|int
name|stopy
init|=
name|qMin
argument_list|(
name|starty
operator|+
name|tileSize
argument_list|,
name|h
operator|-
name|unoptimizedY
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|startx
decl_stmt|;
comment|// qt_rotate90_16_neon writes to eight rows, four pixels at a time
for|for
control|(
init|;
name|x
operator|>=
name|stopx
operator|+
literal|7
condition|;
name|x
operator|-=
literal|8
control|)
block|{
name|ushort
modifier|*
name|d
init|=
name|dest
operator|+
operator|(
name|w
operator|-
name|x
operator|-
literal|1
operator|)
operator|*
name|dstride
operator|+
name|starty
decl_stmt|;
specifier|const
name|ushort
modifier|*
name|s
init|=
operator|&
name|src
index|[
name|starty
operator|*
name|sstride
operator|+
name|x
operator|-
literal|7
index|]
decl_stmt|;
name|qt_rotate90_16_neon
argument_list|(
name|d
argument_list|,
name|s
argument_list|,
name|sstride
operator|*
literal|2
argument_list|,
name|dstride
operator|*
literal|2
argument_list|,
name|stopy
operator|-
name|starty
argument_list|)
expr_stmt|;
block|}
for|for
control|(
init|;
name|x
operator|>=
name|stopx
condition|;
operator|--
name|x
control|)
block|{
name|quint32
modifier|*
name|d
init|=
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|dest
operator|+
operator|(
name|w
operator|-
name|x
operator|-
literal|1
operator|)
operator|*
name|dstride
operator|+
name|starty
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|starty
init|;
name|y
operator|<
name|stopy
condition|;
name|y
operator|+=
name|pack
control|)
block|{
name|quint32
name|c
init|=
name|src
index|[
name|y
operator|*
name|sstride
operator|+
name|x
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pack
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|shift
init|=
operator|(
sizeof|sizeof
argument_list|(
name|int
argument_list|)
operator|*
literal|8
operator|/
name|pack
operator|*
name|i
operator|)
decl_stmt|;
specifier|const
name|ushort
name|color
init|=
name|src
index|[
operator|(
name|y
operator|+
name|i
operator|)
operator|*
name|sstride
operator|+
name|x
index|]
decl_stmt|;
name|c
operator||=
name|color
operator|<<
name|shift
expr_stmt|;
block|}
operator|*
name|d
operator|++
operator|=
name|c
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|unoptimizedY
condition|)
block|{
specifier|const
name|int
name|starty
init|=
name|h
operator|-
name|unoptimizedY
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|startx
init|;
name|x
operator|>=
name|stopx
condition|;
operator|--
name|x
control|)
block|{
name|ushort
modifier|*
name|d
init|=
name|dest
operator|+
operator|(
name|w
operator|-
name|x
operator|-
literal|1
operator|)
operator|*
name|dstride
operator|+
name|starty
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|starty
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
operator|*
name|d
operator|++
operator|=
name|src
index|[
name|y
operator|*
name|sstride
operator|+
name|x
index|]
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_function
begin_extern
extern|extern
literal|"C"
name|void
name|qt_rotate270_16_neon
parameter_list|(
name|quint16
modifier|*
name|dst
parameter_list|,
specifier|const
name|quint16
modifier|*
name|src
parameter_list|,
name|int
name|sstride
parameter_list|,
name|int
name|dstride
parameter_list|,
name|int
name|count
parameter_list|)
function_decl|;
end_extern
begin_function
DECL|function|qt_memrotate270_16_neon
name|void
name|qt_memrotate270_16_neon
parameter_list|(
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|sstride
parameter_list|,
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dstride
parameter_list|)
block|{
specifier|const
name|ushort
modifier|*
name|src
init|=
operator|(
specifier|const
name|ushort
operator|*
operator|)
name|srcPixels
decl_stmt|;
name|ushort
modifier|*
name|dest
init|=
operator|(
name|ushort
operator|*
operator|)
name|destPixels
decl_stmt|;
name|sstride
operator|/=
sizeof|sizeof
argument_list|(
name|ushort
argument_list|)
expr_stmt|;
name|dstride
operator|/=
sizeof|sizeof
argument_list|(
name|ushort
argument_list|)
expr_stmt|;
specifier|const
name|int
name|pack
init|=
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|ushort
argument_list|)
decl_stmt|;
specifier|const
name|int
name|unaligned
init|=
name|qMin
argument_list|(
name|uint
argument_list|(
operator|(
name|long
argument_list|(
name|dest
argument_list|)
operator|&
operator|(
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
operator|-
literal|1
operator|)
operator|)
operator|/
sizeof|sizeof
argument_list|(
name|ushort
argument_list|)
argument_list|)
argument_list|,
name|uint
argument_list|(
name|h
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|int
name|restX
init|=
name|w
operator|%
name|tileSize
decl_stmt|;
specifier|const
name|int
name|restY
init|=
operator|(
name|h
operator|-
name|unaligned
operator|)
operator|%
name|tileSize
decl_stmt|;
specifier|const
name|int
name|unoptimizedY
init|=
name|restY
operator|%
name|pack
decl_stmt|;
specifier|const
name|int
name|numTilesX
init|=
name|w
operator|/
name|tileSize
operator|+
operator|(
name|restX
operator|>
literal|0
operator|)
decl_stmt|;
specifier|const
name|int
name|numTilesY
init|=
operator|(
name|h
operator|-
name|unaligned
operator|)
operator|/
name|tileSize
operator|+
operator|(
name|restY
operator|>=
name|pack
operator|)
decl_stmt|;
for|for
control|(
name|int
name|tx
init|=
literal|0
init|;
name|tx
operator|<
name|numTilesX
condition|;
operator|++
name|tx
control|)
block|{
specifier|const
name|int
name|startx
init|=
name|tx
operator|*
name|tileSize
decl_stmt|;
specifier|const
name|int
name|stopx
init|=
name|qMin
argument_list|(
name|startx
operator|+
name|tileSize
argument_list|,
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|unaligned
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
name|startx
init|;
name|x
operator|<
name|stopx
condition|;
operator|++
name|x
control|)
block|{
name|ushort
modifier|*
name|d
init|=
name|dest
operator|+
name|x
operator|*
name|dstride
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|h
operator|-
literal|1
init|;
name|y
operator|>=
name|h
operator|-
name|unaligned
condition|;
operator|--
name|y
control|)
block|{
operator|*
name|d
operator|++
operator|=
name|src
index|[
name|y
operator|*
name|sstride
operator|+
name|x
index|]
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|ty
init|=
literal|0
init|;
name|ty
operator|<
name|numTilesY
condition|;
operator|++
name|ty
control|)
block|{
specifier|const
name|int
name|starty
init|=
name|h
operator|-
literal|1
operator|-
name|unaligned
operator|-
name|ty
operator|*
name|tileSize
decl_stmt|;
specifier|const
name|int
name|stopy
init|=
name|qMax
argument_list|(
name|starty
operator|-
name|tileSize
argument_list|,
name|unoptimizedY
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|startx
decl_stmt|;
comment|// qt_rotate90_16_neon writes to eight rows, four pixels at a time
for|for
control|(
init|;
name|x
operator|<
name|stopx
operator|-
literal|7
condition|;
name|x
operator|+=
literal|8
control|)
block|{
name|ushort
modifier|*
name|d
init|=
name|dest
operator|+
name|x
operator|*
name|dstride
operator|+
name|h
operator|-
literal|1
operator|-
name|starty
decl_stmt|;
specifier|const
name|ushort
modifier|*
name|s
init|=
operator|&
name|src
index|[
name|starty
operator|*
name|sstride
operator|+
name|x
index|]
decl_stmt|;
name|qt_rotate90_16_neon
argument_list|(
name|d
operator|+
literal|7
operator|*
name|dstride
argument_list|,
name|s
argument_list|,
operator|-
name|sstride
operator|*
literal|2
argument_list|,
operator|-
name|dstride
operator|*
literal|2
argument_list|,
name|starty
operator|-
name|stopy
argument_list|)
expr_stmt|;
block|}
for|for
control|(
init|;
name|x
operator|<
name|stopx
condition|;
operator|++
name|x
control|)
block|{
name|quint32
modifier|*
name|d
init|=
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|dest
operator|+
name|x
operator|*
name|dstride
operator|+
name|h
operator|-
literal|1
operator|-
name|starty
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|starty
init|;
name|y
operator|>
name|stopy
condition|;
name|y
operator|-=
name|pack
control|)
block|{
name|quint32
name|c
init|=
name|src
index|[
name|y
operator|*
name|sstride
operator|+
name|x
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pack
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|shift
init|=
operator|(
sizeof|sizeof
argument_list|(
name|int
argument_list|)
operator|*
literal|8
operator|/
name|pack
operator|*
name|i
operator|)
decl_stmt|;
specifier|const
name|ushort
name|color
init|=
name|src
index|[
operator|(
name|y
operator|-
name|i
operator|)
operator|*
name|sstride
operator|+
name|x
index|]
decl_stmt|;
name|c
operator||=
name|color
operator|<<
name|shift
expr_stmt|;
block|}
operator|*
name|d
operator|++
operator|=
name|c
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|unoptimizedY
condition|)
block|{
specifier|const
name|int
name|starty
init|=
name|unoptimizedY
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|startx
init|;
name|x
operator|<
name|stopx
condition|;
operator|++
name|x
control|)
block|{
name|ushort
modifier|*
name|d
init|=
name|dest
operator|+
name|x
operator|*
name|dstride
operator|+
name|h
operator|-
literal|1
operator|-
name|starty
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|starty
init|;
name|y
operator|>=
literal|0
condition|;
operator|--
name|y
control|)
block|{
operator|*
name|d
operator|++
operator|=
name|src
index|[
name|y
operator|*
name|sstride
operator|+
name|x
index|]
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_function
begin_class
DECL|class|QSimdNeon
class|class
name|QSimdNeon
block|{
public|public:
DECL|typedef|Int32x4
typedef|typedef
name|int32x4_t
name|Int32x4
typedef|;
DECL|typedef|Float32x4
typedef|typedef
name|float32x4_t
name|Float32x4
typedef|;
DECL|union|Vect_buffer_i
DECL|member|v
DECL|member|i
union|union
name|Vect_buffer_i
block|{
name|Int32x4
name|v
decl_stmt|;
name|int
name|i
index|[
literal|4
index|]
decl_stmt|;
block|}
union|;
DECL|union|Vect_buffer_f
DECL|member|v
DECL|member|f
union|union
name|Vect_buffer_f
block|{
name|Float32x4
name|v
decl_stmt|;
name|float
name|f
index|[
literal|4
index|]
decl_stmt|;
block|}
union|;
DECL|function|v_dup
specifier|static
specifier|inline
name|Float32x4
name|v_dup
parameter_list|(
name|double
name|x
parameter_list|)
block|{
return|return
name|vdupq_n_f32
argument_list|(
name|float
argument_list|(
name|x
argument_list|)
argument_list|)
return|;
block|}
DECL|function|v_dup
specifier|static
specifier|inline
name|Float32x4
name|v_dup
parameter_list|(
name|float
name|x
parameter_list|)
block|{
return|return
name|vdupq_n_f32
argument_list|(
name|x
argument_list|)
return|;
block|}
DECL|function|v_dup
specifier|static
specifier|inline
name|Int32x4
name|v_dup
parameter_list|(
name|int
name|x
parameter_list|)
block|{
return|return
name|vdupq_n_s32
argument_list|(
name|x
argument_list|)
return|;
block|}
DECL|function|v_dup
specifier|static
specifier|inline
name|Int32x4
name|v_dup
parameter_list|(
name|uint
name|x
parameter_list|)
block|{
return|return
name|vdupq_n_s32
argument_list|(
name|x
argument_list|)
return|;
block|}
DECL|function|v_add
specifier|static
specifier|inline
name|Float32x4
name|v_add
parameter_list|(
name|Float32x4
name|a
parameter_list|,
name|Float32x4
name|b
parameter_list|)
block|{
return|return
name|vaddq_f32
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|function|v_add
specifier|static
specifier|inline
name|Int32x4
name|v_add
parameter_list|(
name|Int32x4
name|a
parameter_list|,
name|Int32x4
name|b
parameter_list|)
block|{
return|return
name|vaddq_s32
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|function|v_max
specifier|static
specifier|inline
name|Float32x4
name|v_max
parameter_list|(
name|Float32x4
name|a
parameter_list|,
name|Float32x4
name|b
parameter_list|)
block|{
return|return
name|vmaxq_f32
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|function|v_min
specifier|static
specifier|inline
name|Float32x4
name|v_min
parameter_list|(
name|Float32x4
name|a
parameter_list|,
name|Float32x4
name|b
parameter_list|)
block|{
return|return
name|vminq_f32
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|function|v_min_16
specifier|static
specifier|inline
name|Int32x4
name|v_min_16
parameter_list|(
name|Int32x4
name|a
parameter_list|,
name|Int32x4
name|b
parameter_list|)
block|{
return|return
name|vminq_s32
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|function|v_and
specifier|static
specifier|inline
name|Int32x4
name|v_and
parameter_list|(
name|Int32x4
name|a
parameter_list|,
name|Int32x4
name|b
parameter_list|)
block|{
return|return
name|vandq_s32
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|function|v_sub
specifier|static
specifier|inline
name|Float32x4
name|v_sub
parameter_list|(
name|Float32x4
name|a
parameter_list|,
name|Float32x4
name|b
parameter_list|)
block|{
return|return
name|vsubq_f32
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|function|v_sub
specifier|static
specifier|inline
name|Int32x4
name|v_sub
parameter_list|(
name|Int32x4
name|a
parameter_list|,
name|Int32x4
name|b
parameter_list|)
block|{
return|return
name|vsubq_s32
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|function|v_mul
specifier|static
specifier|inline
name|Float32x4
name|v_mul
parameter_list|(
name|Float32x4
name|a
parameter_list|,
name|Float32x4
name|b
parameter_list|)
block|{
return|return
name|vmulq_f32
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|function|v_sqrt
specifier|static
specifier|inline
name|Float32x4
name|v_sqrt
parameter_list|(
name|Float32x4
name|x
parameter_list|)
block|{
name|Float32x4
name|y
init|=
name|vrsqrteq_f32
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|y
operator|=
name|vmulq_f32
argument_list|(
name|y
argument_list|,
name|vrsqrtsq_f32
argument_list|(
name|x
argument_list|,
name|vmulq_f32
argument_list|(
name|y
argument_list|,
name|y
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|vmulq_f32
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
DECL|function|v_toInt
specifier|static
specifier|inline
name|Int32x4
name|v_toInt
parameter_list|(
name|Float32x4
name|x
parameter_list|)
block|{
return|return
name|vcvtq_s32_f32
argument_list|(
name|x
argument_list|)
return|;
block|}
DECL|function|v_greaterOrEqual
specifier|static
specifier|inline
name|Int32x4
name|v_greaterOrEqual
parameter_list|(
name|Float32x4
name|a
parameter_list|,
name|Float32x4
name|b
parameter_list|)
block|{
return|return
name|vreinterpretq_s32_u32
argument_list|(
name|vcgeq_f32
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|qt_fetch_radial_gradient_neon
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|qt_fetch_radial_gradient_neon
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|Operator
modifier|*
name|op
parameter_list|,
specifier|const
name|QSpanData
modifier|*
name|data
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|qt_fetch_radial_gradient_template
argument_list|<
name|QRadialFetchSimd
argument_list|<
name|QSimdNeon
argument_list|>
argument_list|>
argument_list|(
name|buffer
argument_list|,
name|op
argument_list|,
name|data
argument_list|,
name|y
argument_list|,
name|x
argument_list|,
name|length
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_COMPILER_SUPPORTS_NEON
end_comment
end_unit
