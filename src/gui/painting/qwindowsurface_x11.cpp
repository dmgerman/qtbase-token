begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui/QPaintDevice>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPainter>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPixmap>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWidget>
end_include
begin_include
include|#
directive|include
file|"private/qt_x11_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qpixmap_x11_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qwidget_p.h"
end_include
begin_include
include|#
directive|include
file|"qx11info_x11.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsurface_x11_p.h"
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|void
modifier|*
name|qt_getClipRects
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|r
parameter_list|,
name|int
modifier|&
name|num
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// in qpaintengine_x11.cpp
end_comment
begin_struct
DECL|struct|QX11WindowSurfacePrivate
struct|struct
name|QX11WindowSurfacePrivate
block|{
DECL|member|widget
name|QWidget
modifier|*
name|widget
decl_stmt|;
DECL|member|device
name|QPixmap
name|device
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
DECL|member|translucentBackground
name|bool
name|translucentBackground
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct
begin_constructor
DECL|function|QX11WindowSurface
name|QX11WindowSurface
operator|::
name|QX11WindowSurface
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QWindowSurface
argument_list|(
name|widget
argument_list|)
member_init_list|,
name|d_ptr
argument_list|(
operator|new
name|QX11WindowSurfacePrivate
argument_list|)
member_init_list|,
name|gc
argument_list|(
literal|0
argument_list|)
block|{
name|d_ptr
operator|->
name|widget
operator|=
name|widget
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
name|d_ptr
operator|->
name|translucentBackground
operator|=
name|X11
operator|->
name|use_xrender
operator|&&
name|widget
operator|->
name|x11Info
argument_list|()
operator|.
name|depth
argument_list|()
operator|==
literal|32
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QX11WindowSurface
name|QX11WindowSurface
operator|::
name|~
name|QX11WindowSurface
parameter_list|()
block|{
operator|delete
name|d_ptr
expr_stmt|;
if|if
condition|(
name|gc
condition|)
block|{
name|XFreeGC
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|gc
argument_list|)
expr_stmt|;
name|gc
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|paintDevice
name|QPaintDevice
modifier|*
name|QX11WindowSurface
operator|::
name|paintDevice
parameter_list|()
block|{
return|return
operator|&
name|d_ptr
operator|->
name|device
return|;
block|}
end_function
begin_function
DECL|function|beginPaint
name|void
name|QX11WindowSurface
operator|::
name|beginPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
name|Q_ASSERT
argument_list|(
operator|!
name|d_ptr
operator|->
name|device
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|translucentBackground
condition|)
block|{
if|if
condition|(
name|d_ptr
operator|->
name|device
operator|.
name|depth
argument_list|()
operator|!=
literal|32
condition|)
cast|static_cast
argument_list|<
name|QX11PixmapData
operator|*
argument_list|>
argument_list|(
name|d_ptr
operator|->
name|device
operator|.
name|data_ptr
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|convertToARGB32
argument_list|()
expr_stmt|;
operator|::
name|Picture
name|src
init|=
name|X11
operator|->
name|getSolidFill
argument_list|(
name|d_ptr
operator|->
name|device
operator|.
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
argument_list|,
name|Qt
operator|::
name|transparent
argument_list|)
decl_stmt|;
operator|::
name|Picture
name|dst
init|=
name|d_ptr
operator|->
name|device
operator|.
name|x11PictureHandle
argument_list|()
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|rgn
operator|.
name|rects
argument_list|()
decl_stmt|;
specifier|const
name|int
name|w
init|=
name|d_ptr
operator|->
name|device
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|h
init|=
name|d_ptr
operator|->
name|device
operator|.
name|height
argument_list|()
decl_stmt|;
for|for
control|(
name|QVector
argument_list|<
name|QRect
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|rects
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|rects
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|XRenderComposite
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|PictOpSrc
argument_list|,
name|src
argument_list|,
literal|0
argument_list|,
name|dst
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|it
operator|->
name|x
argument_list|()
argument_list|,
name|it
operator|->
name|y
argument_list|()
argument_list|,
name|it
operator|->
name|width
argument_list|()
argument_list|,
name|it
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|flush
name|void
name|QX11WindowSurface
operator|::
name|flush
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
block|{
if|if
condition|(
name|d_ptr
operator|->
name|device
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|QPoint
name|wOffset
init|=
name|qt_qwidget_data
argument_list|(
name|widget
argument_list|)
operator|->
name|wrect
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|QRegion
name|wrgn
argument_list|(
name|rgn
argument_list|)
decl_stmt|;
name|QRect
name|br
init|=
name|rgn
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|wOffset
operator|.
name|isNull
argument_list|()
condition|)
name|wrgn
operator|.
name|translate
argument_list|(
operator|-
name|wOffset
argument_list|)
expr_stmt|;
name|QRect
name|wbr
init|=
name|wrgn
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
name|int
name|num
decl_stmt|;
name|XRectangle
modifier|*
name|rects
init|=
operator|(
name|XRectangle
operator|*
operator|)
name|qt_getClipRects
argument_list|(
name|wrgn
argument_list|,
name|num
argument_list|)
decl_stmt|;
if|if
condition|(
name|num
operator|<=
literal|0
condition|)
return|return;
comment|//         qDebug()<< "XSetClipRectangles";
comment|//         for  (int i = 0; i< num; ++i)
comment|//             qDebug()<< ' '<< i<< rects[i].x<< rects[i].x<< rects[i].y<< rects[i].width<< rects[i].height;
if|if
condition|(
name|num
operator|!=
literal|1
condition|)
name|XSetClipRectangles
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|gc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rects
argument_list|,
name|num
argument_list|,
name|YXBanded
argument_list|)
expr_stmt|;
name|XCopyArea
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|d_ptr
operator|->
name|device
operator|.
name|handle
argument_list|()
argument_list|,
name|widget
operator|->
name|handle
argument_list|()
argument_list|,
name|gc
argument_list|,
name|br
operator|.
name|x
argument_list|()
operator|+
name|offset
operator|.
name|x
argument_list|()
argument_list|,
name|br
operator|.
name|y
argument_list|()
operator|+
name|offset
operator|.
name|y
argument_list|()
argument_list|,
name|br
operator|.
name|width
argument_list|()
argument_list|,
name|br
operator|.
name|height
argument_list|()
argument_list|,
name|wbr
operator|.
name|x
argument_list|()
argument_list|,
name|wbr
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|num
operator|!=
literal|1
condition|)
name|XSetClipMask
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|gc
argument_list|,
name|XNone
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setGeometry
name|void
name|QX11WindowSurface
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|QWindowSurface
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
specifier|const
name|QSize
name|size
init|=
name|rect
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|device
operator|.
name|size
argument_list|()
operator|==
name|size
operator|||
name|size
operator|.
name|width
argument_list|()
operator|<=
literal|0
operator|||
name|size
operator|.
name|height
argument_list|()
operator|<=
literal|0
condition|)
return|return;
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
if|if
condition|(
name|d_ptr
operator|->
name|translucentBackground
condition|)
block|{
name|QPixmap
operator|::
name|x11SetDefaultScreen
argument_list|(
name|d_ptr
operator|->
name|widget
operator|->
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
argument_list|)
expr_stmt|;
name|QX11PixmapData
modifier|*
name|data
init|=
operator|new
name|QX11PixmapData
argument_list|(
name|QPixmapData
operator|::
name|PixmapType
argument_list|)
decl_stmt|;
name|data
operator|->
name|xinfo
operator|=
name|d_ptr
operator|->
name|widget
operator|->
name|x11Info
argument_list|()
expr_stmt|;
name|data
operator|->
name|resize
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|device
operator|=
name|QPixmap
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|QPixmap
operator|::
name|x11SetDefaultScreen
argument_list|(
name|d_ptr
operator|->
name|widget
operator|->
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
argument_list|)
expr_stmt|;
name|QX11PixmapData
modifier|*
name|oldData
init|=
cast|static_cast
argument_list|<
name|QX11PixmapData
operator|*
argument_list|>
argument_list|(
name|d_ptr
operator|->
name|device
operator|.
name|pixmapData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldData
operator|&&
operator|!
operator|(
name|oldData
operator|->
name|flags
operator|&
name|QX11PixmapData
operator|::
name|Uninitialized
operator|)
operator|&&
name|hasStaticContents
argument_list|()
condition|)
block|{
comment|// Copy the content of the old pixmap into the new one.
name|QX11PixmapData
modifier|*
name|newData
init|=
operator|new
name|QX11PixmapData
argument_list|(
name|QPixmapData
operator|::
name|PixmapType
argument_list|)
decl_stmt|;
name|newData
operator|->
name|resize
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|oldData
operator|->
name|d
operator|==
name|newData
operator|->
name|d
argument_list|)
expr_stmt|;
name|QRegion
name|staticRegion
argument_list|(
name|staticContents
argument_list|()
argument_list|)
decl_stmt|;
comment|// Make sure we're inside the boundaries of the old pixmap.
name|staticRegion
operator|&=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|oldData
operator|->
name|w
argument_list|,
name|oldData
operator|->
name|h
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|boundingRect
argument_list|(
name|staticRegion
operator|.
name|boundingRect
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|dx
init|=
name|boundingRect
operator|.
name|x
argument_list|()
decl_stmt|;
specifier|const
name|int
name|dy
init|=
name|boundingRect
operator|.
name|y
argument_list|()
decl_stmt|;
name|int
name|num
decl_stmt|;
name|XRectangle
modifier|*
name|rects
init|=
operator|(
name|XRectangle
operator|*
operator|)
name|qt_getClipRects
argument_list|(
name|staticRegion
argument_list|,
name|num
argument_list|)
decl_stmt|;
name|GC
name|tmpGc
init|=
name|XCreateGC
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|oldData
operator|->
name|hd
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|XSetClipRectangles
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|tmpGc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rects
argument_list|,
name|num
argument_list|,
name|YXBanded
argument_list|)
expr_stmt|;
name|XCopyArea
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|oldData
operator|->
name|hd
argument_list|,
name|newData
operator|->
name|hd
argument_list|,
name|tmpGc
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
name|qMin
argument_list|(
name|boundingRect
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|)
argument_list|,
name|qMin
argument_list|(
name|boundingRect
operator|.
name|height
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|)
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
name|XFreeGC
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|tmpGc
argument_list|)
expr_stmt|;
name|newData
operator|->
name|flags
operator|&=
operator|~
name|QX11PixmapData
operator|::
name|Uninitialized
expr_stmt|;
name|d_ptr
operator|->
name|device
operator|=
name|QPixmap
argument_list|(
name|newData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d_ptr
operator|->
name|device
operator|=
name|QPixmap
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|gc
condition|)
block|{
name|XFreeGC
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|gc
argument_list|)
expr_stmt|;
name|gc
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|d_ptr
operator|->
name|device
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|gc
operator|=
name|XCreateGC
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|d_ptr
operator|->
name|device
operator|.
name|handle
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XSetGraphicsExposures
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|gc
argument_list|,
name|False
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|scroll
name|bool
name|QX11WindowSurface
operator|::
name|scroll
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|area
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
name|QRect
name|rect
init|=
name|area
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|device
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|false
return|;
name|GC
name|gc
init|=
name|XCreateGC
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|d_ptr
operator|->
name|device
operator|.
name|handle
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|XCopyArea
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|d_ptr
operator|->
name|device
operator|.
name|handle
argument_list|()
argument_list|,
name|d_ptr
operator|->
name|device
operator|.
name|handle
argument_list|()
argument_list|,
name|gc
argument_list|,
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|rect
operator|.
name|x
argument_list|()
operator|+
name|dx
argument_list|,
name|rect
operator|.
name|y
argument_list|()
operator|+
name|dy
argument_list|)
expr_stmt|;
name|XFreeGC
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|gc
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|grabWidget
name|QPixmap
name|QX11WindowSurface
operator|::
name|grabWidget
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|widget
operator|||
name|d_ptr
operator|->
name|device
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QPixmap
argument_list|()
return|;
name|QRect
name|srcRect
decl_stmt|;
comment|// make sure the rect is inside the widget& clip to widget's rect
if|if
condition|(
operator|!
name|rect
operator|.
name|isEmpty
argument_list|()
condition|)
name|srcRect
operator|=
name|rect
operator|&
name|widget
operator|->
name|rect
argument_list|()
expr_stmt|;
else|else
name|srcRect
operator|=
name|widget
operator|->
name|rect
argument_list|()
expr_stmt|;
if|if
condition|(
name|srcRect
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QPixmap
argument_list|()
return|;
comment|// If it's a child widget we have to translate the coordinates
if|if
condition|(
name|widget
operator|!=
name|window
argument_list|()
condition|)
name|srcRect
operator|.
name|translate
argument_list|(
name|widget
operator|->
name|mapTo
argument_list|(
name|window
argument_list|()
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QPixmap
operator|::
name|x11SetDefaultScreen
argument_list|(
name|widget
operator|->
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
argument_list|)
expr_stmt|;
name|QPixmap
name|px
argument_list|(
name|srcRect
operator|.
name|width
argument_list|()
argument_list|,
name|srcRect
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|GC
name|tmpGc
init|=
name|XCreateGC
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|d_ptr
operator|->
name|device
operator|.
name|handle
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// Copy srcRect from the backing store to the new pixmap
name|XSetGraphicsExposures
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|tmpGc
argument_list|,
name|False
argument_list|)
expr_stmt|;
name|XCopyArea
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|d_ptr
operator|->
name|device
operator|.
name|handle
argument_list|()
argument_list|,
name|px
operator|.
name|handle
argument_list|()
argument_list|,
name|tmpGc
argument_list|,
name|srcRect
operator|.
name|x
argument_list|()
argument_list|,
name|srcRect
operator|.
name|y
argument_list|()
argument_list|,
name|srcRect
operator|.
name|width
argument_list|()
argument_list|,
name|srcRect
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XFreeGC
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|tmpGc
argument_list|)
expr_stmt|;
return|return
name|px
return|;
block|}
end_function
begin_function
DECL|function|features
name|QWindowSurface
operator|::
name|WindowSurfaceFeatures
name|QX11WindowSurface
operator|::
name|features
parameter_list|()
specifier|const
block|{
name|WindowSurfaceFeatures
name|features
init|=
name|QWindowSurface
operator|::
name|PartialUpdates
operator||
name|QWindowSurface
operator|::
name|PreservedContents
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
if|if
condition|(
operator|!
name|d_ptr
operator|->
name|translucentBackground
condition|)
name|features
operator||=
name|QWindowSurface
operator|::
name|StaticContents
expr_stmt|;
else|#
directive|else
name|features
operator||=
name|QWindowSurface
operator|::
name|StaticContents
expr_stmt|;
endif|#
directive|endif
return|return
name|features
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
