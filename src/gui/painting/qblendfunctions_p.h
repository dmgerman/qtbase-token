begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QBLENDFUNCTIONS_P_H
end_ifndef
begin_define
DECL|macro|QBLENDFUNCTIONS_P_H
define|#
directive|define
name|QBLENDFUNCTIONS_P_H
end_define
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_include
include|#
directive|include
file|"qdrawhelper_p.h"
end_include
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
comment|//
comment|//  W A R N I N G
comment|//  -------------
comment|//
comment|// This file is not part of the Qt API.  It exists purely as an
comment|// implementation detail.  This header file may change from version to
comment|// version without notice, or even be removed.
comment|//
comment|// We mean it.
comment|//
DECL|variable|SRC
name|template
operator|<
name|typename
name|SRC
operator|,
name|typename
name|T
operator|>
DECL|function|qt_scale_image_16bit
name|void
name|qt_scale_image_16bit
argument_list|(
argument|uchar *destPixels
argument_list|,
argument|int dbpl
argument_list|,
argument|const uchar *srcPixels
argument_list|,
argument|int sbpl
argument_list|,
argument|const QRectF&targetRect
argument_list|,
argument|const QRectF&srcRect
argument_list|,
argument|const QRect&clip
argument_list|,
argument|T blender
argument_list|)
block|{
name|qreal
name|sx
operator|=
name|targetRect
operator|.
name|width
argument_list|()
operator|/
operator|(
name|qreal
operator|)
name|srcRect
operator|.
name|width
argument_list|()
block|;
name|qreal
name|sy
operator|=
name|targetRect
operator|.
name|height
argument_list|()
operator|/
operator|(
name|qreal
operator|)
name|srcRect
operator|.
name|height
argument_list|()
block|;
name|int
name|ix
operator|=
literal|0x00010000
operator|/
name|sx
block|;
name|int
name|iy
operator|=
literal|0x00010000
operator|/
name|sy
block|;
comment|//     qDebug()<< "scale:"<< endl
comment|//<< " - target"<< targetRect<< endl
comment|//<< " - source"<< srcRect<< endl
comment|//<< " - clip"<< clip<< endl
comment|//<< " - sx="<< sx<< " sy="<< sy<< " ix="<< ix<< " iy="<< iy;
name|int
name|cx1
operator|=
name|clip
operator|.
name|x
argument_list|()
block|;
name|int
name|cx2
operator|=
name|clip
operator|.
name|x
argument_list|()
operator|+
name|clip
operator|.
name|width
argument_list|()
block|;
name|int
name|cy1
operator|=
name|clip
operator|.
name|top
argument_list|()
block|;
name|int
name|cy2
operator|=
name|clip
operator|.
name|y
argument_list|()
operator|+
name|clip
operator|.
name|height
argument_list|()
block|;
name|int
name|tx1
operator|=
name|qRound
argument_list|(
name|targetRect
operator|.
name|left
argument_list|()
argument_list|)
block|;
name|int
name|tx2
operator|=
name|qRound
argument_list|(
name|targetRect
operator|.
name|right
argument_list|()
argument_list|)
block|;
name|int
name|ty1
operator|=
name|qRound
argument_list|(
name|targetRect
operator|.
name|top
argument_list|()
argument_list|)
block|;
name|int
name|ty2
operator|=
name|qRound
argument_list|(
name|targetRect
operator|.
name|bottom
argument_list|()
argument_list|)
block|;
if|if
condition|(
name|tx2
operator|<
name|tx1
condition|)
name|qSwap
argument_list|(
name|tx2
argument_list|,
name|tx1
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|ty2
operator|<
name|ty1
condition|)
name|qSwap
argument_list|(
name|ty2
argument_list|,
name|ty1
argument_list|)
expr_stmt|;
end_if
begin_if
if|if
condition|(
name|tx1
operator|<
name|cx1
condition|)
name|tx1
operator|=
name|cx1
expr_stmt|;
end_if
begin_if
if|if
condition|(
name|tx2
operator|>=
name|cx2
condition|)
name|tx2
operator|=
name|cx2
expr_stmt|;
end_if
begin_if
if|if
condition|(
name|tx1
operator|>=
name|tx2
condition|)
return|return;
end_if
begin_if
if|if
condition|(
name|ty1
operator|<
name|cy1
condition|)
name|ty1
operator|=
name|cy1
expr_stmt|;
end_if
begin_if
if|if
condition|(
name|ty2
operator|>=
name|cy2
condition|)
name|ty2
operator|=
name|cy2
expr_stmt|;
end_if
begin_if
if|if
condition|(
name|ty1
operator|>=
name|ty2
condition|)
return|return;
end_if
begin_decl_stmt
name|int
name|h
init|=
name|ty2
operator|-
name|ty1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|w
init|=
name|tx2
operator|-
name|tx1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|basex
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|srcy
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
name|sx
operator|<
literal|0
condition|)
block|{
name|int
name|dstx
init|=
name|qFloor
argument_list|(
operator|(
name|tx1
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|-
name|targetRect
operator|.
name|right
argument_list|()
operator|)
operator|*
name|ix
argument_list|)
operator|+
literal|1
decl_stmt|;
name|basex
operator|=
name|quint32
argument_list|(
name|srcRect
operator|.
name|right
argument_list|()
operator|*
literal|65536
argument_list|)
operator|+
name|dstx
expr_stmt|;
block|}
else|else
block|{
name|int
name|dstx
init|=
name|qCeil
argument_list|(
operator|(
name|tx1
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|-
name|targetRect
operator|.
name|left
argument_list|()
operator|)
operator|*
name|ix
argument_list|)
operator|-
literal|1
decl_stmt|;
name|basex
operator|=
name|quint32
argument_list|(
name|srcRect
operator|.
name|left
argument_list|()
operator|*
literal|65536
argument_list|)
operator|+
name|dstx
expr_stmt|;
block|}
end_if
begin_if
if|if
condition|(
name|sy
operator|<
literal|0
condition|)
block|{
name|int
name|dsty
init|=
name|qFloor
argument_list|(
operator|(
name|ty1
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|-
name|targetRect
operator|.
name|bottom
argument_list|()
operator|)
operator|*
name|iy
argument_list|)
operator|+
literal|1
decl_stmt|;
name|srcy
operator|=
name|quint32
argument_list|(
name|srcRect
operator|.
name|bottom
argument_list|()
operator|*
literal|65536
argument_list|)
operator|+
name|dsty
expr_stmt|;
block|}
else|else
block|{
name|int
name|dsty
init|=
name|qCeil
argument_list|(
operator|(
name|ty1
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|-
name|targetRect
operator|.
name|top
argument_list|()
operator|)
operator|*
name|iy
argument_list|)
operator|-
literal|1
decl_stmt|;
name|srcy
operator|=
name|quint32
argument_list|(
name|srcRect
operator|.
name|top
argument_list|()
operator|*
literal|65536
argument_list|)
operator|+
name|dsty
expr_stmt|;
block|}
end_if
begin_decl_stmt
name|quint16
modifier|*
name|dst
init|=
operator|(
operator|(
name|quint16
operator|*
operator|)
operator|(
name|destPixels
operator|+
name|ty1
operator|*
name|dbpl
operator|)
operator|)
operator|+
name|tx1
decl_stmt|;
end_decl_stmt
begin_while
while|while
condition|(
name|h
operator|--
condition|)
block|{
specifier|const
name|SRC
modifier|*
name|src
init|=
operator|(
specifier|const
name|SRC
operator|*
operator|)
operator|(
name|srcPixels
operator|+
operator|(
name|srcy
operator|>>
literal|16
operator|)
operator|*
name|sbpl
operator|)
decl_stmt|;
name|int
name|srcx
init|=
name|basex
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|x
operator|<
name|w
operator|-
literal|7
condition|;
name|x
operator|+=
literal|8
control|)
block|{
name|blender
operator|.
name|write
argument_list|(
operator|&
name|dst
index|[
name|x
index|]
argument_list|,
name|src
index|[
name|srcx
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|srcx
operator|+=
name|ix
expr_stmt|;
name|blender
operator|.
name|write
argument_list|(
operator|&
name|dst
index|[
name|x
operator|+
literal|1
index|]
argument_list|,
name|src
index|[
name|srcx
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|srcx
operator|+=
name|ix
expr_stmt|;
name|blender
operator|.
name|write
argument_list|(
operator|&
name|dst
index|[
name|x
operator|+
literal|2
index|]
argument_list|,
name|src
index|[
name|srcx
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|srcx
operator|+=
name|ix
expr_stmt|;
name|blender
operator|.
name|write
argument_list|(
operator|&
name|dst
index|[
name|x
operator|+
literal|3
index|]
argument_list|,
name|src
index|[
name|srcx
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|srcx
operator|+=
name|ix
expr_stmt|;
name|blender
operator|.
name|write
argument_list|(
operator|&
name|dst
index|[
name|x
operator|+
literal|4
index|]
argument_list|,
name|src
index|[
name|srcx
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|srcx
operator|+=
name|ix
expr_stmt|;
name|blender
operator|.
name|write
argument_list|(
operator|&
name|dst
index|[
name|x
operator|+
literal|5
index|]
argument_list|,
name|src
index|[
name|srcx
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|srcx
operator|+=
name|ix
expr_stmt|;
name|blender
operator|.
name|write
argument_list|(
operator|&
name|dst
index|[
name|x
operator|+
literal|6
index|]
argument_list|,
name|src
index|[
name|srcx
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|srcx
operator|+=
name|ix
expr_stmt|;
name|blender
operator|.
name|write
argument_list|(
operator|&
name|dst
index|[
name|x
operator|+
literal|7
index|]
argument_list|,
name|src
index|[
name|srcx
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|srcx
operator|+=
name|ix
expr_stmt|;
block|}
for|for
control|(
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
name|blender
operator|.
name|write
argument_list|(
operator|&
name|dst
index|[
name|x
index|]
argument_list|,
name|src
index|[
name|srcx
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|srcx
operator|+=
name|ix
expr_stmt|;
block|}
name|blender
operator|.
name|flush
argument_list|(
operator|&
name|dst
index|[
name|x
index|]
argument_list|)
expr_stmt|;
name|dst
operator|=
operator|(
name|quint16
operator|*
operator|)
operator|(
operator|(
operator|(
name|uchar
operator|*
operator|)
name|dst
operator|)
operator|+
name|dbpl
operator|)
expr_stmt|;
name|srcy
operator|+=
name|iy
expr_stmt|;
block|}
end_while
begin_expr_stmt
unit|}  template
DECL|function|qt_scale_image_32bit
operator|<
name|typename
name|T
operator|>
name|void
name|qt_scale_image_32bit
argument_list|(
argument|uchar *destPixels
argument_list|,
argument|int dbpl
argument_list|,
argument|const uchar *srcPixels
argument_list|,
argument|int sbpl
argument_list|,
argument|const QRectF&targetRect
argument_list|,
argument|const QRectF&srcRect
argument_list|,
argument|const QRect&clip
argument_list|,
argument|T blender
argument_list|)
block|{
name|qreal
name|sx
operator|=
name|targetRect
operator|.
name|width
argument_list|()
operator|/
operator|(
name|qreal
operator|)
name|srcRect
operator|.
name|width
argument_list|()
block|;
name|qreal
name|sy
operator|=
name|targetRect
operator|.
name|height
argument_list|()
operator|/
operator|(
name|qreal
operator|)
name|srcRect
operator|.
name|height
argument_list|()
block|;
name|int
name|ix
operator|=
literal|0x00010000
operator|/
name|sx
block|;
name|int
name|iy
operator|=
literal|0x00010000
operator|/
name|sy
block|;
comment|//     qDebug()<< "scale:"<< endl
comment|//<< " - target"<< targetRect<< endl
comment|//<< " - source"<< srcRect<< endl
comment|//<< " - clip"<< clip<< endl
comment|//<< " - sx="<< sx<< " sy="<< sy<< " ix="<< ix<< " iy="<< iy;
name|int
name|cx1
operator|=
name|clip
operator|.
name|x
argument_list|()
block|;
name|int
name|cx2
operator|=
name|clip
operator|.
name|x
argument_list|()
operator|+
name|clip
operator|.
name|width
argument_list|()
block|;
name|int
name|cy1
operator|=
name|clip
operator|.
name|top
argument_list|()
block|;
name|int
name|cy2
operator|=
name|clip
operator|.
name|y
argument_list|()
operator|+
name|clip
operator|.
name|height
argument_list|()
block|;
name|int
name|tx1
operator|=
name|qRound
argument_list|(
name|targetRect
operator|.
name|left
argument_list|()
argument_list|)
block|;
name|int
name|tx2
operator|=
name|qRound
argument_list|(
name|targetRect
operator|.
name|right
argument_list|()
argument_list|)
block|;
name|int
name|ty1
operator|=
name|qRound
argument_list|(
name|targetRect
operator|.
name|top
argument_list|()
argument_list|)
block|;
name|int
name|ty2
operator|=
name|qRound
argument_list|(
name|targetRect
operator|.
name|bottom
argument_list|()
argument_list|)
block|;
if|if
condition|(
name|tx2
operator|<
name|tx1
condition|)
name|qSwap
argument_list|(
name|tx2
argument_list|,
name|tx1
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|ty2
operator|<
name|ty1
condition|)
name|qSwap
argument_list|(
name|ty2
argument_list|,
name|ty1
argument_list|)
expr_stmt|;
end_if
begin_if
if|if
condition|(
name|tx1
operator|<
name|cx1
condition|)
name|tx1
operator|=
name|cx1
expr_stmt|;
end_if
begin_if
if|if
condition|(
name|tx2
operator|>=
name|cx2
condition|)
name|tx2
operator|=
name|cx2
expr_stmt|;
end_if
begin_if
if|if
condition|(
name|tx1
operator|>=
name|tx2
condition|)
return|return;
end_if
begin_if
if|if
condition|(
name|ty1
operator|<
name|cy1
condition|)
name|ty1
operator|=
name|cy1
expr_stmt|;
end_if
begin_if
if|if
condition|(
name|ty2
operator|>=
name|cy2
condition|)
name|ty2
operator|=
name|cy2
expr_stmt|;
end_if
begin_if
if|if
condition|(
name|ty1
operator|>=
name|ty2
condition|)
return|return;
end_if
begin_decl_stmt
name|int
name|h
init|=
name|ty2
operator|-
name|ty1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|w
init|=
name|tx2
operator|-
name|tx1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|basex
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|srcy
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
name|sx
operator|<
literal|0
condition|)
block|{
name|int
name|dstx
init|=
name|qFloor
argument_list|(
operator|(
name|tx1
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|-
name|targetRect
operator|.
name|right
argument_list|()
operator|)
operator|*
name|ix
argument_list|)
operator|+
literal|1
decl_stmt|;
name|basex
operator|=
name|quint32
argument_list|(
name|srcRect
operator|.
name|right
argument_list|()
operator|*
literal|65536
argument_list|)
operator|+
name|dstx
expr_stmt|;
block|}
else|else
block|{
name|int
name|dstx
init|=
name|qCeil
argument_list|(
operator|(
name|tx1
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|-
name|targetRect
operator|.
name|left
argument_list|()
operator|)
operator|*
name|ix
argument_list|)
operator|-
literal|1
decl_stmt|;
name|basex
operator|=
name|quint32
argument_list|(
name|srcRect
operator|.
name|left
argument_list|()
operator|*
literal|65536
argument_list|)
operator|+
name|dstx
expr_stmt|;
block|}
end_if
begin_if
if|if
condition|(
name|sy
operator|<
literal|0
condition|)
block|{
name|int
name|dsty
init|=
name|qFloor
argument_list|(
operator|(
name|ty1
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|-
name|targetRect
operator|.
name|bottom
argument_list|()
operator|)
operator|*
name|iy
argument_list|)
operator|+
literal|1
decl_stmt|;
name|srcy
operator|=
name|quint32
argument_list|(
name|srcRect
operator|.
name|bottom
argument_list|()
operator|*
literal|65536
argument_list|)
operator|+
name|dsty
expr_stmt|;
block|}
else|else
block|{
name|int
name|dsty
init|=
name|qCeil
argument_list|(
operator|(
name|ty1
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|-
name|targetRect
operator|.
name|top
argument_list|()
operator|)
operator|*
name|iy
argument_list|)
operator|-
literal|1
decl_stmt|;
name|srcy
operator|=
name|quint32
argument_list|(
name|srcRect
operator|.
name|top
argument_list|()
operator|*
literal|65536
argument_list|)
operator|+
name|dsty
expr_stmt|;
block|}
end_if
begin_decl_stmt
name|quint32
modifier|*
name|dst
init|=
operator|(
operator|(
name|quint32
operator|*
operator|)
operator|(
name|destPixels
operator|+
name|ty1
operator|*
name|dbpl
operator|)
operator|)
operator|+
name|tx1
decl_stmt|;
end_decl_stmt
begin_while
while|while
condition|(
name|h
operator|--
condition|)
block|{
specifier|const
name|uint
modifier|*
name|src
init|=
operator|(
specifier|const
name|quint32
operator|*
operator|)
operator|(
name|srcPixels
operator|+
operator|(
name|srcy
operator|>>
literal|16
operator|)
operator|*
name|sbpl
operator|)
decl_stmt|;
name|int
name|srcx
init|=
name|basex
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
name|blender
operator|.
name|write
argument_list|(
operator|&
name|dst
index|[
name|x
index|]
argument_list|,
name|src
index|[
name|srcx
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|srcx
operator|+=
name|ix
expr_stmt|;
block|}
name|blender
operator|.
name|flush
argument_list|(
operator|&
name|dst
index|[
name|x
index|]
argument_list|)
expr_stmt|;
name|dst
operator|=
operator|(
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
name|uchar
operator|*
operator|)
name|dst
operator|)
operator|+
name|dbpl
operator|)
expr_stmt|;
name|srcy
operator|+=
name|iy
expr_stmt|;
block|}
end_while
begin_macro
unit|}  struct
DECL|struct|QTransformImageVertex
name|QTransformImageVertex
end_macro
begin_block
block|{
DECL|member|x
DECL|member|y
DECL|member|u
DECL|member|v
name|qreal
name|x
decl_stmt|,
name|y
decl_stmt|,
name|u
decl_stmt|,
name|v
decl_stmt|;
comment|// destination coordinates (x, y) and source coordinates (u, v)
block|}
end_block
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
DECL|variable|SrcT
DECL|variable|DestT
name|template
operator|<
name|class
name|SrcT
operator|,
name|class
name|DestT
operator|,
name|class
name|Blender
operator|>
DECL|function|qt_transform_image_rasterize
name|void
name|qt_transform_image_rasterize
argument_list|(
argument|DestT *destPixels
argument_list|,
argument|int dbpl
argument_list|,
argument|const SrcT *srcPixels
argument_list|,
argument|int sbpl
argument_list|,
argument|const QTransformImageVertex&topLeft
argument_list|,
argument|const QTransformImageVertex&bottomLeft
argument_list|,
argument|const QTransformImageVertex&topRight
argument_list|,
argument|const QTransformImageVertex&bottomRight
argument_list|,
argument|const QRect&sourceRect
argument_list|,
argument|const QRect&clip
argument_list|,
argument|qreal topY
argument_list|,
argument|qreal bottomY
argument_list|,
argument|int dudx
argument_list|,
argument|int dvdx
argument_list|,
argument|int dudy
argument_list|,
argument|int dvdy
argument_list|,
argument|int u0
argument_list|,
argument|int v0
argument_list|,
argument|Blender blender
argument_list|)
block|{
name|int
name|fromY
operator|=
name|qMax
argument_list|(
name|qRound
argument_list|(
name|topY
argument_list|)
argument_list|,
name|clip
operator|.
name|top
argument_list|()
argument_list|)
block|;
name|int
name|toY
operator|=
name|qMin
argument_list|(
name|qRound
argument_list|(
name|bottomY
argument_list|)
argument_list|,
name|clip
operator|.
name|top
argument_list|()
operator|+
name|clip
operator|.
name|height
argument_list|()
argument_list|)
block|;
if|if
condition|(
name|fromY
operator|>=
name|toY
condition|)
return|return;
name|qreal
name|leftSlope
operator|=
operator|(
name|bottomLeft
operator|.
name|x
operator|-
name|topLeft
operator|.
name|x
operator|)
operator|/
operator|(
name|bottomLeft
operator|.
name|y
operator|-
name|topLeft
operator|.
name|y
operator|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|qreal
name|rightSlope
init|=
operator|(
name|bottomRight
operator|.
name|x
operator|-
name|topRight
operator|.
name|x
operator|)
operator|/
operator|(
name|bottomRight
operator|.
name|y
operator|-
name|topRight
operator|.
name|y
operator|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|dx_l
init|=
name|int
argument_list|(
name|leftSlope
operator|*
literal|0x10000
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|dx_r
init|=
name|int
argument_list|(
name|rightSlope
operator|*
literal|0x10000
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|x_l
init|=
name|int
argument_list|(
operator|(
name|topLeft
operator|.
name|x
operator|+
operator|(
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|+
name|fromY
operator|-
name|topLeft
operator|.
name|y
operator|)
operator|*
name|leftSlope
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|)
operator|*
literal|0x10000
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|x_r
init|=
name|int
argument_list|(
operator|(
name|topRight
operator|.
name|x
operator|+
operator|(
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|+
name|fromY
operator|-
name|topRight
operator|.
name|y
operator|)
operator|*
name|rightSlope
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|)
operator|*
literal|0x10000
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|fromX
decl_stmt|,
name|toX
decl_stmt|,
name|x1
decl_stmt|,
name|x2
decl_stmt|,
name|u
decl_stmt|,
name|v
decl_stmt|,
name|i
decl_stmt|,
name|ii
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|DestT
modifier|*
name|line
decl_stmt|;
end_decl_stmt
begin_for
for|for
control|(
name|int
name|y
init|=
name|fromY
init|;
name|y
operator|<
name|toY
condition|;
operator|++
name|y
control|)
block|{
name|line
operator|=
name|reinterpret_cast
operator|<
name|DestT
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
name|uchar
operator|*
operator|>
operator|(
name|destPixels
operator|)
operator|+
name|y
operator|*
name|dbpl
operator|)
expr_stmt|;
name|fromX
operator|=
name|qMax
argument_list|(
name|x_l
operator|>>
literal|16
argument_list|,
name|clip
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
name|toX
operator|=
name|qMin
argument_list|(
name|x_r
operator|>>
literal|16
argument_list|,
name|clip
operator|.
name|left
argument_list|()
operator|+
name|clip
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromX
operator|<
name|toX
condition|)
block|{
comment|// Because of rounding, we can get source coordinates outside the source image.
comment|// Clamp these coordinates to the source rect to avoid segmentation fault and
comment|// garbage on the screen.
comment|// Find the first pixel on the current scan line where the source coordinates are within the source rect.
name|x1
operator|=
name|fromX
expr_stmt|;
name|u
operator|=
name|x1
operator|*
name|dudx
operator|+
name|y
operator|*
name|dudy
operator|+
name|u0
expr_stmt|;
name|v
operator|=
name|x1
operator|*
name|dvdx
operator|+
name|y
operator|*
name|dvdy
operator|+
name|v0
expr_stmt|;
for|for
control|(
init|;
name|x1
operator|<
name|toX
condition|;
operator|++
name|x1
control|)
block|{
name|int
name|uu
init|=
name|u
operator|>>
literal|16
decl_stmt|;
name|int
name|vv
init|=
name|v
operator|>>
literal|16
decl_stmt|;
if|if
condition|(
name|uu
operator|>=
name|sourceRect
operator|.
name|left
argument_list|()
operator|&&
name|uu
operator|<
name|sourceRect
operator|.
name|left
argument_list|()
operator|+
name|sourceRect
operator|.
name|width
argument_list|()
operator|&&
name|vv
operator|>=
name|sourceRect
operator|.
name|top
argument_list|()
operator|&&
name|vv
operator|<
name|sourceRect
operator|.
name|top
argument_list|()
operator|+
name|sourceRect
operator|.
name|height
argument_list|()
condition|)
block|{
break|break;
block|}
name|u
operator|+=
name|dudx
expr_stmt|;
name|v
operator|+=
name|dvdx
expr_stmt|;
block|}
comment|// Find the last pixel on the current scan line where the source coordinates are within the source rect.
name|x2
operator|=
name|toX
expr_stmt|;
name|u
operator|=
operator|(
name|x2
operator|-
literal|1
operator|)
operator|*
name|dudx
operator|+
name|y
operator|*
name|dudy
operator|+
name|u0
expr_stmt|;
name|v
operator|=
operator|(
name|x2
operator|-
literal|1
operator|)
operator|*
name|dvdx
operator|+
name|y
operator|*
name|dvdy
operator|+
name|v0
expr_stmt|;
for|for
control|(
init|;
name|x2
operator|>
name|x1
condition|;
operator|--
name|x2
control|)
block|{
name|int
name|uu
init|=
name|u
operator|>>
literal|16
decl_stmt|;
name|int
name|vv
init|=
name|v
operator|>>
literal|16
decl_stmt|;
if|if
condition|(
name|uu
operator|>=
name|sourceRect
operator|.
name|left
argument_list|()
operator|&&
name|uu
operator|<
name|sourceRect
operator|.
name|left
argument_list|()
operator|+
name|sourceRect
operator|.
name|width
argument_list|()
operator|&&
name|vv
operator|>=
name|sourceRect
operator|.
name|top
argument_list|()
operator|&&
name|vv
operator|<
name|sourceRect
operator|.
name|top
argument_list|()
operator|+
name|sourceRect
operator|.
name|height
argument_list|()
condition|)
block|{
break|break;
block|}
name|u
operator|-=
name|dudx
expr_stmt|;
name|v
operator|-=
name|dvdx
expr_stmt|;
block|}
comment|// Set up values at the beginning of the scan line.
name|u
operator|=
name|fromX
operator|*
name|dudx
operator|+
name|y
operator|*
name|dudy
operator|+
name|u0
expr_stmt|;
name|v
operator|=
name|fromX
operator|*
name|dvdx
operator|+
name|y
operator|*
name|dvdy
operator|+
name|v0
expr_stmt|;
name|line
operator|+=
name|fromX
expr_stmt|;
comment|// Beginning of the scan line, with per-pixel checks.
name|i
operator|=
name|x1
operator|-
name|fromX
expr_stmt|;
while|while
condition|(
name|i
condition|)
block|{
name|int
name|uu
init|=
name|qBound
argument_list|(
name|sourceRect
operator|.
name|left
argument_list|()
argument_list|,
name|u
operator|>>
literal|16
argument_list|,
name|sourceRect
operator|.
name|left
argument_list|()
operator|+
name|sourceRect
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|vv
init|=
name|qBound
argument_list|(
name|sourceRect
operator|.
name|top
argument_list|()
argument_list|,
name|v
operator|>>
literal|16
argument_list|,
name|sourceRect
operator|.
name|top
argument_list|()
operator|+
name|sourceRect
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|blender
operator|.
name|write
argument_list|(
name|line
argument_list|,
name|reinterpret_cast
operator|<
specifier|const
name|SrcT
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|uchar
operator|*
operator|>
operator|(
name|srcPixels
operator|)
operator|+
name|vv
operator|*
name|sbpl
operator|)
index|[
name|uu
index|]
argument_list|)
expr_stmt|;
name|u
operator|+=
name|dudx
expr_stmt|;
name|v
operator|+=
name|dvdx
expr_stmt|;
operator|++
name|line
expr_stmt|;
operator|--
name|i
expr_stmt|;
block|}
comment|// Middle of the scan line, without checks.
comment|// Manual loop unrolling.
name|i
operator|=
name|x2
operator|-
name|x1
expr_stmt|;
name|ii
operator|=
name|i
operator|>>
literal|3
expr_stmt|;
while|while
condition|(
name|ii
condition|)
block|{
name|blender
operator|.
name|write
argument_list|(
operator|&
name|line
index|[
literal|0
index|]
argument_list|,
name|reinterpret_cast
operator|<
specifier|const
name|SrcT
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|uchar
operator|*
operator|>
operator|(
name|srcPixels
operator|)
operator|+
operator|(
name|v
operator|>>
literal|16
operator|)
operator|*
name|sbpl
operator|)
index|[
name|u
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|u
operator|+=
name|dudx
expr_stmt|;
name|v
operator|+=
name|dvdx
expr_stmt|;
name|blender
operator|.
name|write
argument_list|(
operator|&
name|line
index|[
literal|1
index|]
argument_list|,
name|reinterpret_cast
operator|<
specifier|const
name|SrcT
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|uchar
operator|*
operator|>
operator|(
name|srcPixels
operator|)
operator|+
operator|(
name|v
operator|>>
literal|16
operator|)
operator|*
name|sbpl
operator|)
index|[
name|u
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|u
operator|+=
name|dudx
expr_stmt|;
name|v
operator|+=
name|dvdx
expr_stmt|;
name|blender
operator|.
name|write
argument_list|(
operator|&
name|line
index|[
literal|2
index|]
argument_list|,
name|reinterpret_cast
operator|<
specifier|const
name|SrcT
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|uchar
operator|*
operator|>
operator|(
name|srcPixels
operator|)
operator|+
operator|(
name|v
operator|>>
literal|16
operator|)
operator|*
name|sbpl
operator|)
index|[
name|u
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|u
operator|+=
name|dudx
expr_stmt|;
name|v
operator|+=
name|dvdx
expr_stmt|;
name|blender
operator|.
name|write
argument_list|(
operator|&
name|line
index|[
literal|3
index|]
argument_list|,
name|reinterpret_cast
operator|<
specifier|const
name|SrcT
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|uchar
operator|*
operator|>
operator|(
name|srcPixels
operator|)
operator|+
operator|(
name|v
operator|>>
literal|16
operator|)
operator|*
name|sbpl
operator|)
index|[
name|u
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|u
operator|+=
name|dudx
expr_stmt|;
name|v
operator|+=
name|dvdx
expr_stmt|;
name|blender
operator|.
name|write
argument_list|(
operator|&
name|line
index|[
literal|4
index|]
argument_list|,
name|reinterpret_cast
operator|<
specifier|const
name|SrcT
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|uchar
operator|*
operator|>
operator|(
name|srcPixels
operator|)
operator|+
operator|(
name|v
operator|>>
literal|16
operator|)
operator|*
name|sbpl
operator|)
index|[
name|u
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|u
operator|+=
name|dudx
expr_stmt|;
name|v
operator|+=
name|dvdx
expr_stmt|;
name|blender
operator|.
name|write
argument_list|(
operator|&
name|line
index|[
literal|5
index|]
argument_list|,
name|reinterpret_cast
operator|<
specifier|const
name|SrcT
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|uchar
operator|*
operator|>
operator|(
name|srcPixels
operator|)
operator|+
operator|(
name|v
operator|>>
literal|16
operator|)
operator|*
name|sbpl
operator|)
index|[
name|u
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|u
operator|+=
name|dudx
expr_stmt|;
name|v
operator|+=
name|dvdx
expr_stmt|;
name|blender
operator|.
name|write
argument_list|(
operator|&
name|line
index|[
literal|6
index|]
argument_list|,
name|reinterpret_cast
operator|<
specifier|const
name|SrcT
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|uchar
operator|*
operator|>
operator|(
name|srcPixels
operator|)
operator|+
operator|(
name|v
operator|>>
literal|16
operator|)
operator|*
name|sbpl
operator|)
index|[
name|u
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|u
operator|+=
name|dudx
expr_stmt|;
name|v
operator|+=
name|dvdx
expr_stmt|;
name|blender
operator|.
name|write
argument_list|(
operator|&
name|line
index|[
literal|7
index|]
argument_list|,
name|reinterpret_cast
operator|<
specifier|const
name|SrcT
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|uchar
operator|*
operator|>
operator|(
name|srcPixels
operator|)
operator|+
operator|(
name|v
operator|>>
literal|16
operator|)
operator|*
name|sbpl
operator|)
index|[
name|u
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|u
operator|+=
name|dudx
expr_stmt|;
name|v
operator|+=
name|dvdx
expr_stmt|;
name|line
operator|+=
literal|8
expr_stmt|;
operator|--
name|ii
expr_stmt|;
block|}
switch|switch
condition|(
name|i
operator|&
literal|7
condition|)
block|{
case|case
literal|7
case|:
name|blender
operator|.
name|write
argument_list|(
name|line
argument_list|,
name|reinterpret_cast
operator|<
specifier|const
name|SrcT
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|uchar
operator|*
operator|>
operator|(
name|srcPixels
operator|)
operator|+
operator|(
name|v
operator|>>
literal|16
operator|)
operator|*
name|sbpl
operator|)
index|[
name|u
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|u
operator|+=
name|dudx
expr_stmt|;
name|v
operator|+=
name|dvdx
expr_stmt|;
operator|++
name|line
expr_stmt|;
case|case
literal|6
case|:
name|blender
operator|.
name|write
argument_list|(
name|line
argument_list|,
name|reinterpret_cast
operator|<
specifier|const
name|SrcT
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|uchar
operator|*
operator|>
operator|(
name|srcPixels
operator|)
operator|+
operator|(
name|v
operator|>>
literal|16
operator|)
operator|*
name|sbpl
operator|)
index|[
name|u
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|u
operator|+=
name|dudx
expr_stmt|;
name|v
operator|+=
name|dvdx
expr_stmt|;
operator|++
name|line
expr_stmt|;
case|case
literal|5
case|:
name|blender
operator|.
name|write
argument_list|(
name|line
argument_list|,
name|reinterpret_cast
operator|<
specifier|const
name|SrcT
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|uchar
operator|*
operator|>
operator|(
name|srcPixels
operator|)
operator|+
operator|(
name|v
operator|>>
literal|16
operator|)
operator|*
name|sbpl
operator|)
index|[
name|u
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|u
operator|+=
name|dudx
expr_stmt|;
name|v
operator|+=
name|dvdx
expr_stmt|;
operator|++
name|line
expr_stmt|;
case|case
literal|4
case|:
name|blender
operator|.
name|write
argument_list|(
name|line
argument_list|,
name|reinterpret_cast
operator|<
specifier|const
name|SrcT
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|uchar
operator|*
operator|>
operator|(
name|srcPixels
operator|)
operator|+
operator|(
name|v
operator|>>
literal|16
operator|)
operator|*
name|sbpl
operator|)
index|[
name|u
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|u
operator|+=
name|dudx
expr_stmt|;
name|v
operator|+=
name|dvdx
expr_stmt|;
operator|++
name|line
expr_stmt|;
case|case
literal|3
case|:
name|blender
operator|.
name|write
argument_list|(
name|line
argument_list|,
name|reinterpret_cast
operator|<
specifier|const
name|SrcT
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|uchar
operator|*
operator|>
operator|(
name|srcPixels
operator|)
operator|+
operator|(
name|v
operator|>>
literal|16
operator|)
operator|*
name|sbpl
operator|)
index|[
name|u
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|u
operator|+=
name|dudx
expr_stmt|;
name|v
operator|+=
name|dvdx
expr_stmt|;
operator|++
name|line
expr_stmt|;
case|case
literal|2
case|:
name|blender
operator|.
name|write
argument_list|(
name|line
argument_list|,
name|reinterpret_cast
operator|<
specifier|const
name|SrcT
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|uchar
operator|*
operator|>
operator|(
name|srcPixels
operator|)
operator|+
operator|(
name|v
operator|>>
literal|16
operator|)
operator|*
name|sbpl
operator|)
index|[
name|u
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|u
operator|+=
name|dudx
expr_stmt|;
name|v
operator|+=
name|dvdx
expr_stmt|;
operator|++
name|line
expr_stmt|;
case|case
literal|1
case|:
name|blender
operator|.
name|write
argument_list|(
name|line
argument_list|,
name|reinterpret_cast
operator|<
specifier|const
name|SrcT
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|uchar
operator|*
operator|>
operator|(
name|srcPixels
operator|)
operator|+
operator|(
name|v
operator|>>
literal|16
operator|)
operator|*
name|sbpl
operator|)
index|[
name|u
operator|>>
literal|16
index|]
argument_list|)
expr_stmt|;
name|u
operator|+=
name|dudx
expr_stmt|;
name|v
operator|+=
name|dvdx
expr_stmt|;
operator|++
name|line
expr_stmt|;
block|}
comment|// End of the scan line, with per-pixel checks.
name|i
operator|=
name|toX
operator|-
name|x2
expr_stmt|;
while|while
condition|(
name|i
condition|)
block|{
name|int
name|uu
init|=
name|qBound
argument_list|(
name|sourceRect
operator|.
name|left
argument_list|()
argument_list|,
name|u
operator|>>
literal|16
argument_list|,
name|sourceRect
operator|.
name|left
argument_list|()
operator|+
name|sourceRect
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|vv
init|=
name|qBound
argument_list|(
name|sourceRect
operator|.
name|top
argument_list|()
argument_list|,
name|v
operator|>>
literal|16
argument_list|,
name|sourceRect
operator|.
name|top
argument_list|()
operator|+
name|sourceRect
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|blender
operator|.
name|write
argument_list|(
name|line
argument_list|,
name|reinterpret_cast
operator|<
specifier|const
name|SrcT
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|uchar
operator|*
operator|>
operator|(
name|srcPixels
operator|)
operator|+
name|vv
operator|*
name|sbpl
operator|)
index|[
name|uu
index|]
argument_list|)
expr_stmt|;
name|u
operator|+=
name|dudx
expr_stmt|;
name|v
operator|+=
name|dvdx
expr_stmt|;
operator|++
name|line
expr_stmt|;
operator|--
name|i
expr_stmt|;
block|}
name|blender
operator|.
name|flush
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|x_l
operator|+=
name|dx_l
expr_stmt|;
name|x_r
operator|+=
name|dx_r
expr_stmt|;
block|}
end_for
begin_expr_stmt
unit|}  template
DECL|variable|SrcT
DECL|variable|DestT
operator|<
name|class
name|SrcT
operator|,
name|class
name|DestT
operator|,
name|class
name|Blender
operator|>
DECL|function|qt_transform_image
name|void
name|qt_transform_image
argument_list|(
argument|DestT *destPixels
argument_list|,
argument|int dbpl
argument_list|,
argument|const SrcT *srcPixels
argument_list|,
argument|int sbpl
argument_list|,
argument|const QRectF&targetRect
argument_list|,
argument|const QRectF&sourceRect
argument_list|,
argument|const QRect&clip
argument_list|,
argument|const QTransform&targetRectTransform
argument_list|,
argument|Blender blender
argument_list|)
block|{     enum
name|Corner
block|{
name|TopLeft
block|,
name|TopRight
block|,
name|BottomRight
block|,
name|BottomLeft
block|}
block|;
comment|// map source rectangle to destination.
name|QTransformImageVertex
name|v
index|[
literal|4
index|]
block|;
name|v
index|[
name|TopLeft
index|]
operator|.
name|u
operator|=
name|v
index|[
name|BottomLeft
index|]
operator|.
name|u
operator|=
name|sourceRect
operator|.
name|left
argument_list|()
block|;
name|v
index|[
name|TopLeft
index|]
operator|.
name|v
operator|=
name|v
index|[
name|TopRight
index|]
operator|.
name|v
operator|=
name|sourceRect
operator|.
name|top
argument_list|()
block|;
name|v
index|[
name|TopRight
index|]
operator|.
name|u
operator|=
name|v
index|[
name|BottomRight
index|]
operator|.
name|u
operator|=
name|sourceRect
operator|.
name|right
argument_list|()
block|;
name|v
index|[
name|BottomLeft
index|]
operator|.
name|v
operator|=
name|v
index|[
name|BottomRight
index|]
operator|.
name|v
operator|=
name|sourceRect
operator|.
name|bottom
argument_list|()
block|;
name|targetRectTransform
operator|.
name|map
argument_list|(
name|targetRect
operator|.
name|left
argument_list|()
argument_list|,
name|targetRect
operator|.
name|top
argument_list|()
argument_list|,
operator|&
name|v
index|[
name|TopLeft
index|]
operator|.
name|x
argument_list|,
operator|&
name|v
index|[
name|TopLeft
index|]
operator|.
name|y
argument_list|)
block|;
name|targetRectTransform
operator|.
name|map
argument_list|(
name|targetRect
operator|.
name|right
argument_list|()
argument_list|,
name|targetRect
operator|.
name|top
argument_list|()
argument_list|,
operator|&
name|v
index|[
name|TopRight
index|]
operator|.
name|x
argument_list|,
operator|&
name|v
index|[
name|TopRight
index|]
operator|.
name|y
argument_list|)
block|;
name|targetRectTransform
operator|.
name|map
argument_list|(
name|targetRect
operator|.
name|left
argument_list|()
argument_list|,
name|targetRect
operator|.
name|bottom
argument_list|()
argument_list|,
operator|&
name|v
index|[
name|BottomLeft
index|]
operator|.
name|x
argument_list|,
operator|&
name|v
index|[
name|BottomLeft
index|]
operator|.
name|y
argument_list|)
block|;
name|targetRectTransform
operator|.
name|map
argument_list|(
name|targetRect
operator|.
name|right
argument_list|()
argument_list|,
name|targetRect
operator|.
name|bottom
argument_list|()
argument_list|,
operator|&
name|v
index|[
name|BottomRight
index|]
operator|.
name|x
argument_list|,
operator|&
name|v
index|[
name|BottomRight
index|]
operator|.
name|y
argument_list|)
block|;
comment|// find topmost vertex.
name|int
name|topmost
operator|=
literal|0
block|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|v
index|[
name|i
index|]
operator|.
name|y
operator|<
name|v
index|[
name|topmost
index|]
operator|.
name|y
condition|)
name|topmost
operator|=
name|i
expr_stmt|;
block|}
end_expr_stmt
begin_comment
comment|// rearrange array such that topmost vertex is at index 0.
end_comment
begin_switch
switch|switch
condition|(
name|topmost
condition|)
block|{
case|case
literal|1
case|:
block|{
name|QTransformImageVertex
name|t
init|=
name|v
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
name|v
index|[
name|i
index|]
operator|=
name|v
index|[
name|i
operator|+
literal|1
index|]
expr_stmt|;
name|v
index|[
literal|3
index|]
operator|=
name|t
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
name|qSwap
argument_list|(
name|v
index|[
literal|0
index|]
argument_list|,
name|v
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|v
index|[
literal|1
index|]
argument_list|,
name|v
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
block|{
name|QTransformImageVertex
name|t
init|=
name|v
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|3
init|;
name|i
operator|>
literal|0
condition|;
operator|--
name|i
control|)
name|v
index|[
name|i
index|]
operator|=
name|v
index|[
name|i
operator|-
literal|1
index|]
expr_stmt|;
name|v
index|[
literal|0
index|]
operator|=
name|t
expr_stmt|;
block|}
break|break;
block|}
end_switch
begin_comment
comment|// if necessary, swap vertex 1 and 3 such that 1 is to the left of 3.
end_comment
begin_decl_stmt
name|qreal
name|dx1
init|=
name|v
index|[
literal|1
index|]
operator|.
name|x
operator|-
name|v
index|[
literal|0
index|]
operator|.
name|x
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|qreal
name|dy1
init|=
name|v
index|[
literal|1
index|]
operator|.
name|y
operator|-
name|v
index|[
literal|0
index|]
operator|.
name|y
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|qreal
name|dx2
init|=
name|v
index|[
literal|3
index|]
operator|.
name|x
operator|-
name|v
index|[
literal|0
index|]
operator|.
name|x
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|qreal
name|dy2
init|=
name|v
index|[
literal|3
index|]
operator|.
name|y
operator|-
name|v
index|[
literal|0
index|]
operator|.
name|y
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
name|dx1
operator|*
name|dy2
operator|-
name|dx2
operator|*
name|dy1
operator|>
literal|0
condition|)
name|qSwap
argument_list|(
name|v
index|[
literal|1
index|]
argument_list|,
name|v
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
end_if
begin_decl_stmt
name|QTransformImageVertex
name|u
init|=
block|{
name|v
index|[
literal|1
index|]
operator|.
name|x
operator|-
name|v
index|[
literal|0
index|]
operator|.
name|x
block|,
name|v
index|[
literal|1
index|]
operator|.
name|y
operator|-
name|v
index|[
literal|0
index|]
operator|.
name|y
block|,
name|v
index|[
literal|1
index|]
operator|.
name|u
operator|-
name|v
index|[
literal|0
index|]
operator|.
name|u
block|,
name|v
index|[
literal|1
index|]
operator|.
name|v
operator|-
name|v
index|[
literal|0
index|]
operator|.
name|v
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QTransformImageVertex
name|w
init|=
block|{
name|v
index|[
literal|2
index|]
operator|.
name|x
operator|-
name|v
index|[
literal|0
index|]
operator|.
name|x
block|,
name|v
index|[
literal|2
index|]
operator|.
name|y
operator|-
name|v
index|[
literal|0
index|]
operator|.
name|y
block|,
name|v
index|[
literal|2
index|]
operator|.
name|u
operator|-
name|v
index|[
literal|0
index|]
operator|.
name|u
block|,
name|v
index|[
literal|2
index|]
operator|.
name|v
operator|-
name|v
index|[
literal|0
index|]
operator|.
name|v
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|qreal
name|det
init|=
name|u
operator|.
name|x
operator|*
name|w
operator|.
name|y
operator|-
name|u
operator|.
name|y
operator|*
name|w
operator|.
name|x
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
name|det
operator|==
literal|0
condition|)
return|return;
end_if
begin_decl_stmt
name|qreal
name|invDet
init|=
literal|1.0
operator|/
name|det
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|qreal
name|m11
decl_stmt|,
name|m12
decl_stmt|,
name|m21
decl_stmt|,
name|m22
decl_stmt|,
name|mdx
decl_stmt|,
name|mdy
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|m11
operator|=
operator|(
name|u
operator|.
name|u
operator|*
name|w
operator|.
name|y
operator|-
name|u
operator|.
name|y
operator|*
name|w
operator|.
name|u
operator|)
operator|*
name|invDet
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m12
operator|=
operator|(
name|u
operator|.
name|x
operator|*
name|w
operator|.
name|u
operator|-
name|u
operator|.
name|u
operator|*
name|w
operator|.
name|x
operator|)
operator|*
name|invDet
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m21
operator|=
operator|(
name|u
operator|.
name|v
operator|*
name|w
operator|.
name|y
operator|-
name|u
operator|.
name|y
operator|*
name|w
operator|.
name|v
operator|)
operator|*
name|invDet
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m22
operator|=
operator|(
name|u
operator|.
name|x
operator|*
name|w
operator|.
name|v
operator|-
name|u
operator|.
name|v
operator|*
name|w
operator|.
name|x
operator|)
operator|*
name|invDet
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|mdx
operator|=
name|v
index|[
literal|0
index|]
operator|.
name|u
operator|-
name|m11
operator|*
name|v
index|[
literal|0
index|]
operator|.
name|x
operator|-
name|m12
operator|*
name|v
index|[
literal|0
index|]
operator|.
name|y
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|mdy
operator|=
name|v
index|[
literal|0
index|]
operator|.
name|v
operator|-
name|m21
operator|*
name|v
index|[
literal|0
index|]
operator|.
name|x
operator|-
name|m22
operator|*
name|v
index|[
literal|0
index|]
operator|.
name|y
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|int
name|dudx
init|=
name|int
argument_list|(
name|m11
operator|*
literal|0x10000
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|dvdx
init|=
name|int
argument_list|(
name|m21
operator|*
literal|0x10000
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|dudy
init|=
name|int
argument_list|(
name|m12
operator|*
literal|0x10000
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|dvdy
init|=
name|int
argument_list|(
name|m22
operator|*
literal|0x10000
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|u0
init|=
name|qCeil
argument_list|(
operator|(
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|*
name|m11
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|*
name|m12
operator|+
name|mdx
operator|)
operator|*
literal|0x10000
argument_list|)
operator|-
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|v0
init|=
name|qCeil
argument_list|(
operator|(
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|*
name|m21
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|*
name|m22
operator|+
name|mdy
operator|)
operator|*
literal|0x10000
argument_list|)
operator|-
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|x1
init|=
name|qFloor
argument_list|(
name|sourceRect
operator|.
name|left
argument_list|()
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|y1
init|=
name|qFloor
argument_list|(
name|sourceRect
operator|.
name|top
argument_list|()
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|x2
init|=
name|qCeil
argument_list|(
name|sourceRect
operator|.
name|right
argument_list|()
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|y2
init|=
name|qCeil
argument_list|(
name|sourceRect
operator|.
name|bottom
argument_list|()
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QRect
name|sourceRectI
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
name|x1
argument_list|,
name|y2
operator|-
name|y1
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|// rasterize trapezoids.
end_comment
begin_if
if|if
condition|(
name|v
index|[
literal|1
index|]
operator|.
name|y
operator|<
name|v
index|[
literal|3
index|]
operator|.
name|y
condition|)
block|{
name|qt_transform_image_rasterize
argument_list|(
name|destPixels
argument_list|,
name|dbpl
argument_list|,
name|srcPixels
argument_list|,
name|sbpl
argument_list|,
name|v
index|[
literal|0
index|]
argument_list|,
name|v
index|[
literal|1
index|]
argument_list|,
name|v
index|[
literal|0
index|]
argument_list|,
name|v
index|[
literal|3
index|]
argument_list|,
name|sourceRectI
argument_list|,
name|clip
argument_list|,
name|v
index|[
literal|0
index|]
operator|.
name|y
argument_list|,
name|v
index|[
literal|1
index|]
operator|.
name|y
argument_list|,
name|dudx
argument_list|,
name|dvdx
argument_list|,
name|dudy
argument_list|,
name|dvdy
argument_list|,
name|u0
argument_list|,
name|v0
argument_list|,
name|blender
argument_list|)
expr_stmt|;
name|qt_transform_image_rasterize
argument_list|(
name|destPixels
argument_list|,
name|dbpl
argument_list|,
name|srcPixels
argument_list|,
name|sbpl
argument_list|,
name|v
index|[
literal|1
index|]
argument_list|,
name|v
index|[
literal|2
index|]
argument_list|,
name|v
index|[
literal|0
index|]
argument_list|,
name|v
index|[
literal|3
index|]
argument_list|,
name|sourceRectI
argument_list|,
name|clip
argument_list|,
name|v
index|[
literal|1
index|]
operator|.
name|y
argument_list|,
name|v
index|[
literal|3
index|]
operator|.
name|y
argument_list|,
name|dudx
argument_list|,
name|dvdx
argument_list|,
name|dudy
argument_list|,
name|dvdy
argument_list|,
name|u0
argument_list|,
name|v0
argument_list|,
name|blender
argument_list|)
expr_stmt|;
name|qt_transform_image_rasterize
argument_list|(
name|destPixels
argument_list|,
name|dbpl
argument_list|,
name|srcPixels
argument_list|,
name|sbpl
argument_list|,
name|v
index|[
literal|1
index|]
argument_list|,
name|v
index|[
literal|2
index|]
argument_list|,
name|v
index|[
literal|3
index|]
argument_list|,
name|v
index|[
literal|2
index|]
argument_list|,
name|sourceRectI
argument_list|,
name|clip
argument_list|,
name|v
index|[
literal|3
index|]
operator|.
name|y
argument_list|,
name|v
index|[
literal|2
index|]
operator|.
name|y
argument_list|,
name|dudx
argument_list|,
name|dvdx
argument_list|,
name|dudy
argument_list|,
name|dvdy
argument_list|,
name|u0
argument_list|,
name|v0
argument_list|,
name|blender
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qt_transform_image_rasterize
argument_list|(
name|destPixels
argument_list|,
name|dbpl
argument_list|,
name|srcPixels
argument_list|,
name|sbpl
argument_list|,
name|v
index|[
literal|0
index|]
argument_list|,
name|v
index|[
literal|1
index|]
argument_list|,
name|v
index|[
literal|0
index|]
argument_list|,
name|v
index|[
literal|3
index|]
argument_list|,
name|sourceRectI
argument_list|,
name|clip
argument_list|,
name|v
index|[
literal|0
index|]
operator|.
name|y
argument_list|,
name|v
index|[
literal|3
index|]
operator|.
name|y
argument_list|,
name|dudx
argument_list|,
name|dvdx
argument_list|,
name|dudy
argument_list|,
name|dvdy
argument_list|,
name|u0
argument_list|,
name|v0
argument_list|,
name|blender
argument_list|)
expr_stmt|;
name|qt_transform_image_rasterize
argument_list|(
name|destPixels
argument_list|,
name|dbpl
argument_list|,
name|srcPixels
argument_list|,
name|sbpl
argument_list|,
name|v
index|[
literal|0
index|]
argument_list|,
name|v
index|[
literal|1
index|]
argument_list|,
name|v
index|[
literal|3
index|]
argument_list|,
name|v
index|[
literal|2
index|]
argument_list|,
name|sourceRectI
argument_list|,
name|clip
argument_list|,
name|v
index|[
literal|3
index|]
operator|.
name|y
argument_list|,
name|v
index|[
literal|1
index|]
operator|.
name|y
argument_list|,
name|dudx
argument_list|,
name|dvdx
argument_list|,
name|dudy
argument_list|,
name|dvdy
argument_list|,
name|u0
argument_list|,
name|v0
argument_list|,
name|blender
argument_list|)
expr_stmt|;
name|qt_transform_image_rasterize
argument_list|(
name|destPixels
argument_list|,
name|dbpl
argument_list|,
name|srcPixels
argument_list|,
name|sbpl
argument_list|,
name|v
index|[
literal|1
index|]
argument_list|,
name|v
index|[
literal|2
index|]
argument_list|,
name|v
index|[
literal|3
index|]
argument_list|,
name|v
index|[
literal|2
index|]
argument_list|,
name|sourceRectI
argument_list|,
name|clip
argument_list|,
name|v
index|[
literal|1
index|]
operator|.
name|y
argument_list|,
name|v
index|[
literal|2
index|]
operator|.
name|y
argument_list|,
name|dudx
argument_list|,
name|dvdx
argument_list|,
name|dudy
argument_list|,
name|dvdy
argument_list|,
name|u0
argument_list|,
name|v0
argument_list|,
name|blender
argument_list|)
expr_stmt|;
block|}
end_if
begin_endif
unit|}  QT_END_NAMESPACE
endif|#
directive|endif
end_endif
begin_comment
comment|// QBLENDFUNCTIONS_P_H
end_comment
end_unit
