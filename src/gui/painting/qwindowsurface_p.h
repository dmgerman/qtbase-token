begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QWINDOWSURFACE_P_H
end_ifndef
begin_define
DECL|macro|QWINDOWSURFACE_P_H
define|#
directive|define
name|QWINDOWSURFACE_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of other Qt classes.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtGui/qwidget.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QPaintDevice
name|class
name|QPaintDevice
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QRegion
name|class
name|QRegion
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QRect
name|class
name|QRect
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPoint
name|class
name|QPoint
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QImage
name|class
name|QImage
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWindowSurfacePrivate
name|class
name|QWindowSurfacePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPlatformWindow
name|class
name|QPlatformWindow
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QWindowSurface
block|{
name|public
label|:
enum|enum
name|WindowSurfaceFeature
block|{
name|PartialUpdates
init|=
literal|0x00000001
block|,
comment|// Supports doing partial updates.
name|PreservedContents
init|=
literal|0x00000002
block|,
comment|// Supports doing flush without first doing a repaint.
name|StaticContents
init|=
literal|0x00000004
block|,
comment|// Supports having static content regions when being resized.
name|AllFeatures
init|=
literal|0xffffffff
comment|// For convenience
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|WindowSurfaceFeatures
argument_list|,
argument|WindowSurfaceFeature
argument_list|)
name|QWindowSurface
argument_list|(
argument|QWidget *window
argument_list|,
argument|bool setDefaultSurface = true
argument_list|)
empty_stmt|;
name|virtual
operator|~
name|QWindowSurface
argument_list|()
expr_stmt|;
name|QWidget
operator|*
name|window
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QPaintDevice
modifier|*
name|paintDevice
parameter_list|()
init|=
literal|0
function_decl|;
comment|// 'widget' can be a child widget, in which case 'region' is in child widget coordinates and
comment|// offset is the (child) widget's offset in relation to the window surface. On QWS, 'offset'
comment|// can be larger than just the offset from the top-level widget as there may also be window
comment|// decorations which are painted into the window surface.
name|virtual
name|void
name|flush
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
init|=
literal|0
function_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_QPA
argument_list|)
name|virtual
name|void
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
function_decl|;
name|QRect
name|geometry
argument_list|()
specifier|const
expr_stmt|;
else|#
directive|else
name|virtual
name|void
name|resize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
function_decl|;
name|QSize
name|size
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QRect
name|geometry
argument_list|()
specifier|const
block|{
return|return
name|QRect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|size
argument_list|()
argument_list|)
return|;
block|}
comment|//### cleanup before Qt 5
endif|#
directive|endif
name|virtual
name|bool
name|scroll
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|area
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
function_decl|;
name|virtual
name|void
name|beginPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
parameter_list|)
function_decl|;
name|virtual
name|void
name|endPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
parameter_list|)
function_decl|;
name|virtual
name|QImage
modifier|*
name|buffer
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
function_decl|;
name|virtual
name|QPixmap
name|grabWidget
argument_list|(
specifier|const
name|QWidget
operator|*
name|widget
argument_list|,
specifier|const
name|QRect
operator|&
name|rectangle
operator|=
name|QRect
argument_list|()
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|QPoint
name|offset
argument_list|(
specifier|const
name|QWidget
operator|*
name|widget
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|QRect
name|rect
argument_list|(
specifier|const
name|QWidget
operator|*
name|widget
argument_list|)
decl|const
decl_stmt|;
name|bool
name|hasFeature
argument_list|(
name|WindowSurfaceFeature
name|feature
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|WindowSurfaceFeatures
name|features
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setStaticContents
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
function_decl|;
name|QRegion
name|staticContents
argument_list|()
specifier|const
expr_stmt|;
name|protected
label|:
name|bool
name|hasStaticContents
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|QWindowSurfacePrivate
modifier|*
name|d_ptr
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QWindowSurface::WindowSurfaceFeatures
argument_list|)
end_macro
begin_expr_stmt
DECL|function|rect
specifier|inline
name|QRect
name|QWindowSurface
operator|::
name|rect
argument_list|(
argument|const QWidget *widget
argument_list|)
specifier|const
block|{
return|return
name|widget
operator|->
name|rect
argument_list|()
operator|.
name|translated
argument_list|(
name|offset
argument_list|(
name|widget
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|hasFeature
specifier|inline
name|bool
name|QWindowSurface
operator|::
name|hasFeature
argument_list|(
argument|WindowSurfaceFeature feature
argument_list|)
specifier|const
block|{
return|return
operator|(
name|features
argument_list|()
operator|&
name|feature
operator|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QWINDOWSURFACE_P_H
end_comment
end_unit
