begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QOUTLINEMAPPER_P_H
end_ifndef
begin_define
DECL|macro|QOUTLINEMAPPER_P_H
define|#
directive|define
name|QOUTLINEMAPPER_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtCore/qrect.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qtransform.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpainterpath.h>
end_include
begin_define
DECL|macro|QT_FT_BEGIN_HEADER
define|#
directive|define
name|QT_FT_BEGIN_HEADER
end_define
begin_define
DECL|macro|QT_FT_END_HEADER
define|#
directive|define
name|QT_FT_END_HEADER
end_define
begin_include
include|#
directive|include
file|<private/qrasterdefs_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qdatabuffer_p.h>
end_include
begin_include
include|#
directive|include
file|"qpaintengineex_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// This limitations comes from qgrayraster.c. Any higher and
comment|// rasterization of shapes will produce incorrect results.
DECL|variable|QT_RASTER_COORD_LIMIT
specifier|const
name|int
name|QT_RASTER_COORD_LIMIT
init|=
literal|32767
decl_stmt|;
end_decl_stmt
begin_comment
comment|//#define QT_DEBUG_CONVERT
end_comment
begin_function_decl
name|Q_GUI_EXPORT
name|bool
name|qt_scaleForTransform
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|,
name|qreal
modifier|*
name|scale
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/********************************************************************************  * class QOutlineMapper  *  * Used to map between QPainterPath and the QT_FT_Outline structure used by the  * freetype scanconvertor.  *  * The outline mapper uses a path iterator to get points from the path,  * so that it is possible to transform the points as they are converted. The  * callback can be a noop, translate or full-fledged xform. (Tests indicated  * that using a C callback was low cost).  */
end_comment
begin_decl_stmt
name|class
name|QOutlineMapper
block|{
name|public
label|:
name|QOutlineMapper
argument_list|()
operator|:
name|m_element_types
argument_list|(
literal|0
argument_list|)
operator|,
name|m_elements
argument_list|(
literal|0
argument_list|)
operator|,
name|m_points
argument_list|(
literal|0
argument_list|)
operator|,
name|m_tags
argument_list|(
literal|0
argument_list|)
operator|,
name|m_contours
argument_list|(
literal|0
argument_list|)
operator|,
name|m_in_clip_elements
argument_list|(
argument|false
argument_list|)
block|{     }
comment|/*!       Sets up the matrix to be used for conversion. This also       sets up the qt_path_iterator function that is used as a callback       to get points.     */
name|void
name|setMatrix
argument_list|(
argument|const QTransform&m
argument_list|)
block|{
name|m_transform
operator|=
name|m
block|;
name|qreal
name|scale
block|;
name|qt_scaleForTransform
argument_list|(
name|m
argument_list|,
operator|&
name|scale
argument_list|)
block|;
name|m_curve_threshold
operator|=
name|scale
operator|==
literal|0
condition|?
name|qreal
argument_list|(
literal|0.25
argument_list|)
else|:
operator|(
name|qreal
argument_list|(
literal|0.25
argument_list|)
operator|/
name|scale
operator|)
block|;     }
name|void
name|beginOutline
argument_list|(
argument|Qt::FillRule fillRule
argument_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_CONVERT
name|printf
argument_list|(
literal|"QOutlineMapper::beginOutline rule=%d\n"
argument_list|,
name|fillRule
argument_list|)
block|;
endif|#
directive|endif
name|m_valid
operator|=
name|true
block|;
name|m_elements
operator|.
name|reset
argument_list|()
block|;
name|m_element_types
operator|.
name|reset
argument_list|()
block|;
name|m_points
operator|.
name|reset
argument_list|()
block|;
name|m_tags
operator|.
name|reset
argument_list|()
block|;
name|m_contours
operator|.
name|reset
argument_list|()
block|;
name|m_outline
operator|.
name|flags
operator|=
name|fillRule
operator|==
name|Qt
operator|::
name|WindingFill
condition|?
name|QT_FT_OUTLINE_NONE
else|:
name|QT_FT_OUTLINE_EVEN_ODD_FILL
block|;
name|m_subpath_start
operator|=
literal|0
block|;     }
name|void
name|endOutline
argument_list|()
expr_stmt|;
name|void
name|clipElements
argument_list|(
specifier|const
name|QPointF
operator|*
name|points
argument_list|,
specifier|const
name|QPainterPath
operator|::
name|ElementType
operator|*
name|types
argument_list|,
name|int
name|count
argument_list|)
decl_stmt|;
name|void
name|convertElements
argument_list|(
specifier|const
name|QPointF
operator|*
name|points
argument_list|,
specifier|const
name|QPainterPath
operator|::
name|ElementType
operator|*
name|types
argument_list|,
name|int
name|count
argument_list|)
decl_stmt|;
specifier|inline
name|void
name|moveTo
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pt
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_CONVERT
name|printf
argument_list|(
literal|"QOutlineMapper::moveTo() (%f, %f)\n"
argument_list|,
name|pt
operator|.
name|x
argument_list|()
argument_list|,
name|pt
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|closeSubpath
argument_list|()
expr_stmt|;
name|m_subpath_start
operator|=
name|m_elements
operator|.
name|size
argument_list|()
expr_stmt|;
name|m_elements
operator|<<
name|pt
expr_stmt|;
name|m_element_types
operator|<<
name|QPainterPath
operator|::
name|MoveToElement
expr_stmt|;
block|}
specifier|inline
name|void
name|lineTo
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pt
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_CONVERT
name|printf
argument_list|(
literal|"QOutlineMapper::lineTo() (%f, %f)\n"
argument_list|,
name|pt
operator|.
name|x
argument_list|()
argument_list|,
name|pt
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|m_elements
operator|.
name|add
argument_list|(
name|pt
argument_list|)
expr_stmt|;
name|m_element_types
operator|<<
name|QPainterPath
operator|::
name|LineToElement
expr_stmt|;
block|}
name|void
name|curveTo
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|cp1
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|cp2
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|ep
parameter_list|)
function_decl|;
specifier|inline
name|void
name|closeSubpath
parameter_list|()
block|{
name|int
name|element_count
init|=
name|m_elements
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|element_count
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|m_elements
operator|.
name|at
argument_list|(
name|element_count
operator|-
literal|1
argument_list|)
operator|!=
name|m_elements
operator|.
name|at
argument_list|(
name|m_subpath_start
argument_list|)
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_CONVERT
name|printf
argument_list|(
literal|" - implicitly closing\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Put the object on the stack to avoid the odd case where
comment|// lineTo reallocs the databuffer and the QPointF& will
comment|// be invalidated.
name|QPointF
name|pt
init|=
name|m_elements
operator|.
name|at
argument_list|(
name|m_subpath_start
argument_list|)
decl_stmt|;
comment|// only do lineTo if we have element_type array...
if|if
condition|(
name|m_element_types
operator|.
name|size
argument_list|()
condition|)
name|lineTo
argument_list|(
name|pt
argument_list|)
expr_stmt|;
else|else
name|m_elements
operator|<<
name|pt
expr_stmt|;
block|}
block|}
block|}
name|QT_FT_Outline
modifier|*
name|outline
parameter_list|()
block|{
if|if
condition|(
name|m_valid
condition|)
return|return
operator|&
name|m_outline
return|;
return|return
literal|0
return|;
block|}
name|QT_FT_Outline
modifier|*
name|convertPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
function_decl|;
name|QT_FT_Outline
modifier|*
name|convertPath
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|)
function_decl|;
specifier|inline
name|QPainterPath
operator|::
name|ElementType
operator|*
name|elementTypes
argument_list|()
specifier|const
block|{
return|return
name|m_element_types
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|?
literal|0
operator|:
name|m_element_types
operator|.
name|data
argument_list|()
return|;
block|}
name|public
label|:
name|QDataBuffer
operator|<
name|QPainterPath
operator|::
name|ElementType
operator|>
name|m_element_types
expr_stmt|;
name|QDataBuffer
operator|<
name|QPointF
operator|>
name|m_elements
expr_stmt|;
name|QDataBuffer
operator|<
name|QT_FT_Vector
operator|>
name|m_points
expr_stmt|;
name|QDataBuffer
operator|<
name|char
operator|>
name|m_tags
expr_stmt|;
name|QDataBuffer
operator|<
name|int
operator|>
name|m_contours
expr_stmt|;
name|QRect
name|m_clip_rect
decl_stmt|;
name|QRectF
name|controlPointRect
decl_stmt|;
comment|// only valid after endOutline()
name|QT_FT_Outline
name|m_outline
decl_stmt|;
name|int
name|m_subpath_start
decl_stmt|;
name|QTransform
name|m_transform
decl_stmt|;
name|qreal
name|m_curve_threshold
decl_stmt|;
name|bool
name|m_valid
decl_stmt|;
name|bool
name|m_in_clip_elements
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QOUTLINEMAPPER_P_H
end_comment
end_unit
