begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"private/qpaintengine_blitter_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qblittable_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qpaintengine_raster_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qpainter_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qpixmap_blitter_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BLITTABLE
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_define
DECL|macro|STATE_XFORM_SCALE
define|#
directive|define
name|STATE_XFORM_SCALE
value|0x00000001
end_define
begin_define
DECL|macro|STATE_XFORM_COMPLEX
define|#
directive|define
name|STATE_XFORM_COMPLEX
value|0x00000002
end_define
begin_define
DECL|macro|STATE_BRUSH_PATTERN
define|#
directive|define
name|STATE_BRUSH_PATTERN
value|0x00000010
end_define
begin_define
DECL|macro|STATE_BRUSH_ALPHA
define|#
directive|define
name|STATE_BRUSH_ALPHA
value|0x00000020
end_define
begin_define
DECL|macro|STATE_PEN_ENABLED
define|#
directive|define
name|STATE_PEN_ENABLED
value|0x00000100
end_define
begin_define
DECL|macro|STATE_ANTIALIASING
define|#
directive|define
name|STATE_ANTIALIASING
value|0x00001000
end_define
begin_define
DECL|macro|STATE_ALPHA
define|#
directive|define
name|STATE_ALPHA
value|0x00002000
end_define
begin_define
DECL|macro|STATE_BLENDING_COMPLEX
define|#
directive|define
name|STATE_BLENDING_COMPLEX
value|0x00004000
end_define
begin_define
DECL|macro|STATE_CLIPSYS_COMPLEX
define|#
directive|define
name|STATE_CLIPSYS_COMPLEX
value|0x00010000
end_define
begin_define
DECL|macro|STATE_CLIP_COMPLEX
define|#
directive|define
name|STATE_CLIP_COMPLEX
value|0x00020000
end_define
begin_class
DECL|class|CapabilitiesToStateMask
class|class
name|CapabilitiesToStateMask
block|{
public|public:
DECL|function|CapabilitiesToStateMask
name|CapabilitiesToStateMask
parameter_list|(
name|QBlittable
operator|::
name|Capabilities
name|capabilities
parameter_list|)
member_init_list|:
name|m_capabilities
argument_list|(
name|capabilities
argument_list|)
member_init_list|,
name|fillRectMask
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|drawRectMask
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|drawPixmapMask
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|capabillitiesState
argument_list|(
literal|0
argument_list|)
block|{
if|if
condition|(
name|capabilities
operator|&
name|QBlittable
operator|::
name|SolidRectCapability
condition|)
name|setFillRectMask
argument_list|()
expr_stmt|;
if|if
condition|(
name|capabilities
operator|&
name|QBlittable
operator|::
name|SourcePixmapCapability
condition|)
name|setSourcePixmapMask
argument_list|()
expr_stmt|;
if|if
condition|(
name|capabilities
operator|&
name|QBlittable
operator|::
name|SourceOverPixmapCapability
condition|)
name|setSourceOverPixmapMask
argument_list|()
expr_stmt|;
if|if
condition|(
name|capabilities
operator|&
name|QBlittable
operator|::
name|SourceOverScaledPixmapCapability
condition|)
name|setSourceOverScaledPixmapMask
argument_list|()
expr_stmt|;
block|}
DECL|function|canBlitterFillRect
specifier|inline
name|bool
name|canBlitterFillRect
parameter_list|()
specifier|const
block|{
return|return
name|checkStateAgainstMask
argument_list|(
name|capabillitiesState
argument_list|,
name|fillRectMask
argument_list|)
return|;
block|}
DECL|function|canBlitterDrawRectMask
specifier|inline
name|bool
name|canBlitterDrawRectMask
parameter_list|()
specifier|const
block|{
return|return
name|checkStateAgainstMask
argument_list|(
name|capabillitiesState
argument_list|,
name|drawRectMask
argument_list|)
return|;
block|}
DECL|function|canBlitterDrawPixmap
name|bool
name|canBlitterDrawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|pm
operator|.
name|handle
argument_list|()
operator|->
name|classId
argument_list|()
operator|!=
name|QPlatformPixmap
operator|::
name|BlitterClass
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|checkStateAgainstMask
argument_list|(
name|capabillitiesState
argument_list|,
name|drawPixmapMask
argument_list|)
condition|)
block|{
if|if
condition|(
name|m_capabilities
operator|&
operator|(
name|QBlittable
operator|::
name|SourceOverPixmapCapability
operator||
name|QBlittable
operator|::
name|SourceOverScaledPixmapCapability
operator|)
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|size
argument_list|()
operator|!=
name|sr
operator|.
name|size
argument_list|()
condition|)
return|return
name|m_capabilities
operator|&
name|QBlittable
operator|::
name|SourceOverScaledPixmapCapability
return|;
else|else
return|return
name|m_capabilities
operator|&
name|QBlittable
operator|::
name|SourceOverPixmapCapability
return|;
block|}
if|if
condition|(
operator|(
name|m_capabilities
operator|&
name|QBlittable
operator|::
name|SourcePixmapCapability
operator|)
operator|&&
name|r
operator|.
name|size
argument_list|()
operator|==
name|sr
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|pm
operator|.
name|hasAlphaChannel
argument_list|()
condition|)
return|return
name|m_capabilities
operator|&
name|QBlittable
operator|::
name|SourcePixmapCapability
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|updateState
specifier|inline
name|void
name|updateState
parameter_list|(
name|uint
name|mask
parameter_list|,
name|bool
name|on
parameter_list|)
block|{
name|updateStateBits
argument_list|(
operator|&
name|capabillitiesState
argument_list|,
name|mask
argument_list|,
name|on
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|function|updateStateBits
specifier|static
specifier|inline
name|void
name|updateStateBits
parameter_list|(
name|uint
modifier|*
name|state
parameter_list|,
name|uint
name|mask
parameter_list|,
name|bool
name|on
parameter_list|)
block|{
operator|*
name|state
operator|=
name|on
condition|?
operator|(
operator|*
name|state
operator||
name|mask
operator|)
else|:
operator|(
operator|*
name|state
operator|&
operator|~
name|mask
operator|)
expr_stmt|;
block|}
DECL|function|checkStateAgainstMask
specifier|static
specifier|inline
name|bool
name|checkStateAgainstMask
parameter_list|(
name|uint
name|state
parameter_list|,
name|uint
name|mask
parameter_list|)
block|{
return|return
operator|!
name|state
operator|||
operator|(
name|state
operator|&
name|mask
operator|&&
operator|!
operator|(
name|state
operator|&
operator|~
name|mask
operator|)
operator|)
return|;
block|}
DECL|function|setFillRectMask
name|void
name|setFillRectMask
parameter_list|()
block|{
name|updateStateBits
argument_list|(
operator|&
name|fillRectMask
argument_list|,
name|STATE_XFORM_SCALE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|updateStateBits
argument_list|(
operator|&
name|fillRectMask
argument_list|,
name|STATE_XFORM_COMPLEX
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|updateStateBits
argument_list|(
operator|&
name|fillRectMask
argument_list|,
name|STATE_BRUSH_PATTERN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|updateStateBits
argument_list|(
operator|&
name|fillRectMask
argument_list|,
name|STATE_BRUSH_ALPHA
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|updateStateBits
argument_list|(
operator|&
name|fillRectMask
argument_list|,
name|STATE_PEN_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//Sub-pixel aliasing should not be sent to the blitter
name|updateStateBits
argument_list|(
operator|&
name|fillRectMask
argument_list|,
name|STATE_ANTIALIASING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|updateStateBits
argument_list|(
operator|&
name|fillRectMask
argument_list|,
name|STATE_ALPHA
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|updateStateBits
argument_list|(
operator|&
name|fillRectMask
argument_list|,
name|STATE_BLENDING_COMPLEX
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|updateStateBits
argument_list|(
operator|&
name|fillRectMask
argument_list|,
name|STATE_CLIPSYS_COMPLEX
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|updateStateBits
argument_list|(
operator|&
name|fillRectMask
argument_list|,
name|STATE_CLIP_COMPLEX
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|function|setSourcePixmapMask
name|void
name|setSourcePixmapMask
parameter_list|()
block|{
name|updateStateBits
argument_list|(
operator|&
name|drawPixmapMask
argument_list|,
name|STATE_XFORM_SCALE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|updateStateBits
argument_list|(
operator|&
name|drawPixmapMask
argument_list|,
name|STATE_XFORM_COMPLEX
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|updateStateBits
argument_list|(
operator|&
name|drawPixmapMask
argument_list|,
name|STATE_BRUSH_PATTERN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|updateStateBits
argument_list|(
operator|&
name|drawPixmapMask
argument_list|,
name|STATE_BRUSH_ALPHA
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|updateStateBits
argument_list|(
operator|&
name|drawPixmapMask
argument_list|,
name|STATE_PEN_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|updateStateBits
argument_list|(
operator|&
name|drawPixmapMask
argument_list|,
name|STATE_ANTIALIASING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|updateStateBits
argument_list|(
operator|&
name|drawPixmapMask
argument_list|,
name|STATE_ALPHA
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|updateStateBits
argument_list|(
operator|&
name|drawPixmapMask
argument_list|,
name|STATE_BLENDING_COMPLEX
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|updateStateBits
argument_list|(
operator|&
name|drawPixmapMask
argument_list|,
name|STATE_CLIPSYS_COMPLEX
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|updateStateBits
argument_list|(
operator|&
name|drawPixmapMask
argument_list|,
name|STATE_CLIP_COMPLEX
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|function|setSourceOverPixmapMask
name|void
name|setSourceOverPixmapMask
parameter_list|()
block|{
name|setSourcePixmapMask
argument_list|()
expr_stmt|;
block|}
DECL|function|setSourceOverScaledPixmapMask
name|void
name|setSourceOverScaledPixmapMask
parameter_list|()
block|{
name|setSourceOverPixmapMask
argument_list|()
expr_stmt|;
name|updateStateBits
argument_list|(
operator|&
name|drawRectMask
argument_list|,
name|STATE_XFORM_SCALE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|member|m_capabilities
name|QBlittable
operator|::
name|Capabilities
name|m_capabilities
decl_stmt|;
DECL|member|fillRectMask
name|uint
name|fillRectMask
decl_stmt|;
DECL|member|drawRectMask
name|uint
name|drawRectMask
decl_stmt|;
DECL|member|drawPixmapMask
name|uint
name|drawPixmapMask
decl_stmt|;
DECL|member|capabillitiesState
name|uint
name|capabillitiesState
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QBlitterPaintEnginePrivate
class|class
name|QBlitterPaintEnginePrivate
super|:
specifier|public
name|QRasterPaintEnginePrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QBlitterPaintEngine
parameter_list|)
constructor_decl|;
public|public:
DECL|function|QBlitterPaintEnginePrivate
name|QBlitterPaintEnginePrivate
parameter_list|(
name|QBlittablePlatformPixmap
modifier|*
name|p
parameter_list|)
member_init_list|:
name|QRasterPaintEnginePrivate
argument_list|()
member_init_list|,
name|pmData
argument_list|(
name|p
argument_list|)
member_init_list|,
name|caps
argument_list|(
name|pmData
operator|->
name|blittable
argument_list|()
operator|->
name|capabilities
argument_list|()
argument_list|)
member_init_list|,
name|hasXForm
argument_list|(
literal|false
argument_list|)
block|{}
name|void
name|lock
parameter_list|()
function_decl|;
name|void
name|unlock
parameter_list|()
function_decl|;
name|void
name|fillRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
function_decl|;
name|void
name|clipAndDrawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|clip
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|target
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|)
function_decl|;
name|void
name|updateCompleteState
parameter_list|(
name|QPainterState
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|updatePenState
parameter_list|(
name|QPainterState
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|updateBrushState
parameter_list|(
name|QPainterState
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|updateOpacityState
parameter_list|(
name|QPainterState
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|updateCompositionModeState
parameter_list|(
name|QPainterState
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|updateRenderHintsState
parameter_list|(
name|QPainterState
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|updateTransformState
parameter_list|(
name|QPainterState
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|updateClipState
parameter_list|(
name|QPainterState
modifier|*
name|s
parameter_list|)
function_decl|;
DECL|member|pmData
name|QBlittablePlatformPixmap
modifier|*
name|pmData
decl_stmt|;
DECL|member|caps
name|CapabilitiesToStateMask
name|caps
decl_stmt|;
DECL|member|hasXForm
name|uint
name|hasXForm
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|lock
specifier|inline
name|void
name|QBlitterPaintEnginePrivate
operator|::
name|lock
parameter_list|()
block|{
if|if
condition|(
operator|!
name|pmData
operator|->
name|blittable
argument_list|()
operator|->
name|isLocked
argument_list|()
condition|)
name|rasterBuffer
operator|->
name|prepare
argument_list|(
name|pmData
operator|->
name|buffer
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unlock
specifier|inline
name|void
name|QBlitterPaintEnginePrivate
operator|::
name|unlock
parameter_list|()
block|{
name|pmData
operator|->
name|blittable
argument_list|()
operator|->
name|unlock
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// State tracking to make decisions
end_comment
begin_function
DECL|function|updateCompleteState
name|void
name|QBlitterPaintEnginePrivate
operator|::
name|updateCompleteState
parameter_list|(
name|QPainterState
modifier|*
name|s
parameter_list|)
block|{
name|updatePenState
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|updateBrushState
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|updateOpacityState
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|updateCompositionModeState
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|updateRenderHintsState
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|updateTransformState
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|updateClipState
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updatePenState
name|void
name|QBlitterPaintEnginePrivate
operator|::
name|updatePenState
parameter_list|(
name|QPainterState
modifier|*
name|s
parameter_list|)
block|{
name|caps
operator|.
name|updateState
argument_list|(
name|STATE_PEN_ENABLED
argument_list|,
name|qpen_style
argument_list|(
name|s
operator|->
name|pen
argument_list|)
operator|!=
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateBrushState
name|void
name|QBlitterPaintEnginePrivate
operator|::
name|updateBrushState
parameter_list|(
name|QPainterState
modifier|*
name|s
parameter_list|)
block|{
name|Qt
operator|::
name|BrushStyle
name|style
init|=
name|qbrush_style
argument_list|(
name|s
operator|->
name|brush
argument_list|)
decl_stmt|;
name|caps
operator|.
name|updateState
argument_list|(
name|STATE_BRUSH_PATTERN
argument_list|,
name|style
operator|>
name|Qt
operator|::
name|SolidPattern
argument_list|)
expr_stmt|;
name|caps
operator|.
name|updateState
argument_list|(
name|STATE_BRUSH_ALPHA
argument_list|,
name|qbrush_color
argument_list|(
name|s
operator|->
name|brush
argument_list|)
operator|.
name|alpha
argument_list|()
operator|<
literal|255
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateOpacityState
name|void
name|QBlitterPaintEnginePrivate
operator|::
name|updateOpacityState
parameter_list|(
name|QPainterState
modifier|*
name|s
parameter_list|)
block|{
name|bool
name|translucent
init|=
name|s
operator|->
name|opacity
operator|<
literal|1
decl_stmt|;
name|caps
operator|.
name|updateState
argument_list|(
name|STATE_ALPHA
argument_list|,
name|translucent
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateCompositionModeState
name|void
name|QBlitterPaintEnginePrivate
operator|::
name|updateCompositionModeState
parameter_list|(
name|QPainterState
modifier|*
name|s
parameter_list|)
block|{
name|bool
name|nonTrivial
init|=
name|s
operator|->
name|composition_mode
operator|!=
name|QPainter
operator|::
name|CompositionMode_SourceOver
operator|&&
name|s
operator|->
name|composition_mode
operator|!=
name|QPainter
operator|::
name|CompositionMode_Source
decl_stmt|;
name|caps
operator|.
name|updateState
argument_list|(
name|STATE_BLENDING_COMPLEX
argument_list|,
name|nonTrivial
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateRenderHintsState
name|void
name|QBlitterPaintEnginePrivate
operator|::
name|updateRenderHintsState
parameter_list|(
name|QPainterState
modifier|*
name|s
parameter_list|)
block|{
name|bool
name|aa
init|=
name|s
operator|->
name|renderHints
operator|&
name|QPainter
operator|::
name|Antialiasing
decl_stmt|;
name|caps
operator|.
name|updateState
argument_list|(
name|STATE_ANTIALIASING
argument_list|,
name|aa
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateTransformState
name|void
name|QBlitterPaintEnginePrivate
operator|::
name|updateTransformState
parameter_list|(
name|QPainterState
modifier|*
name|s
parameter_list|)
block|{
name|QTransform
operator|::
name|TransformationType
name|type
init|=
name|s
operator|->
name|matrix
operator|.
name|type
argument_list|()
decl_stmt|;
name|caps
operator|.
name|updateState
argument_list|(
name|STATE_XFORM_COMPLEX
argument_list|,
name|type
operator|>
name|QTransform
operator|::
name|TxScale
argument_list|)
expr_stmt|;
name|caps
operator|.
name|updateState
argument_list|(
name|STATE_XFORM_SCALE
argument_list|,
name|type
operator|>
name|QTransform
operator|::
name|TxTranslate
argument_list|)
expr_stmt|;
name|hasXForm
operator|=
name|type
operator|>=
name|QTransform
operator|::
name|TxTranslate
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateClipState
name|void
name|QBlitterPaintEnginePrivate
operator|::
name|updateClipState
parameter_list|(
name|QPainterState
modifier|*
parameter_list|)
block|{
specifier|const
name|QClipData
modifier|*
name|clipData
init|=
name|clip
argument_list|()
decl_stmt|;
name|bool
name|complexClip
init|=
name|clipData
operator|&&
operator|!
operator|(
name|clipData
operator|->
name|hasRectClip
operator|||
name|clipData
operator|->
name|hasRegionClip
operator|)
decl_stmt|;
name|caps
operator|.
name|updateState
argument_list|(
name|STATE_CLIP_COMPLEX
argument_list|,
name|complexClip
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillRect
name|void
name|QBlitterPaintEnginePrivate
operator|::
name|fillRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
name|pmData
operator|->
name|unmarkRasterOverlay
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|QRectF
name|targetRect
init|=
name|rect
decl_stmt|;
if|if
condition|(
name|hasXForm
condition|)
name|targetRect
operator|=
name|q
operator|->
name|state
argument_list|()
operator|->
name|matrix
operator|.
name|mapRect
argument_list|(
name|rect
argument_list|)
expr_stmt|;
specifier|const
name|QClipData
modifier|*
name|clipData
init|=
name|clip
argument_list|()
decl_stmt|;
if|if
condition|(
name|clipData
condition|)
block|{
if|if
condition|(
name|clipData
operator|->
name|hasRectClip
condition|)
block|{
name|unlock
argument_list|()
expr_stmt|;
name|pmData
operator|->
name|blittable
argument_list|()
operator|->
name|fillRect
argument_list|(
name|targetRect
operator|&
name|clipData
operator|->
name|clipRect
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|clipData
operator|->
name|hasRegionClip
condition|)
block|{
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|clipData
operator|->
name|clipRegion
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QRect
name|intersectRect
init|=
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|intersected
argument_list|(
name|targetRect
operator|.
name|toRect
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|intersectRect
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|unlock
argument_list|()
expr_stmt|;
name|pmData
operator|->
name|blittable
argument_list|()
operator|->
name|fillRect
argument_list|(
name|intersectRect
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|targetRect
operator|.
name|x
argument_list|()
operator|>=
literal|0
operator|&&
name|targetRect
operator|.
name|y
argument_list|()
operator|>=
literal|0
operator|&&
name|targetRect
operator|.
name|width
argument_list|()
operator|<=
name|q
operator|->
name|paintDevice
argument_list|()
operator|->
name|width
argument_list|()
operator|&&
name|targetRect
operator|.
name|height
argument_list|()
operator|<=
name|q
operator|->
name|paintDevice
argument_list|()
operator|->
name|height
argument_list|()
condition|)
block|{
name|unlock
argument_list|()
expr_stmt|;
name|pmData
operator|->
name|blittable
argument_list|()
operator|->
name|fillRect
argument_list|(
name|targetRect
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QRectF
name|deviceRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|q
operator|->
name|paintDevice
argument_list|()
operator|->
name|width
argument_list|()
argument_list|,
name|q
operator|->
name|paintDevice
argument_list|()
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|unlock
argument_list|()
expr_stmt|;
name|pmData
operator|->
name|blittable
argument_list|()
operator|->
name|fillRect
argument_list|(
name|deviceRect
operator|&
name|targetRect
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|clipAndDrawPixmap
name|void
name|QBlitterPaintEnginePrivate
operator|::
name|clipAndDrawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|clip
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|target
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|)
block|{
name|QRectF
name|intersectedRect
init|=
name|clip
operator|.
name|intersected
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|intersectedRect
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QRectF
name|source
init|=
name|sr
decl_stmt|;
if|if
condition|(
name|intersectedRect
operator|.
name|size
argument_list|()
operator|!=
name|target
operator|.
name|size
argument_list|()
condition|)
block|{
name|qreal
name|deltaTop
init|=
name|target
operator|.
name|top
argument_list|()
operator|-
name|intersectedRect
operator|.
name|top
argument_list|()
decl_stmt|;
name|qreal
name|deltaLeft
init|=
name|target
operator|.
name|left
argument_list|()
operator|-
name|intersectedRect
operator|.
name|left
argument_list|()
decl_stmt|;
name|qreal
name|deltaBottom
init|=
name|target
operator|.
name|bottom
argument_list|()
operator|-
name|intersectedRect
operator|.
name|bottom
argument_list|()
decl_stmt|;
name|qreal
name|deltaRight
init|=
name|target
operator|.
name|right
argument_list|()
operator|-
name|intersectedRect
operator|.
name|right
argument_list|()
decl_stmt|;
name|source
operator|.
name|adjust
argument_list|(
operator|-
name|deltaLeft
argument_list|,
operator|-
name|deltaTop
argument_list|,
operator|-
name|deltaRight
argument_list|,
operator|-
name|deltaBottom
argument_list|)
expr_stmt|;
block|}
name|pmData
operator|->
name|unmarkRasterOverlay
argument_list|(
name|intersectedRect
argument_list|)
expr_stmt|;
name|pmData
operator|->
name|blittable
argument_list|()
operator|->
name|drawPixmap
argument_list|(
name|intersectedRect
argument_list|,
name|pm
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QBlitterPaintEngine
name|QBlitterPaintEngine
operator|::
name|QBlitterPaintEngine
parameter_list|(
name|QBlittablePlatformPixmap
modifier|*
name|p
parameter_list|)
member_init_list|:
name|QRasterPaintEngine
argument_list|(
operator|*
operator|(
operator|new
name|QBlitterPaintEnginePrivate
argument_list|(
name|p
argument_list|)
operator|)
argument_list|,
name|p
operator|->
name|buffer
argument_list|()
argument_list|)
block|{}
end_constructor
begin_comment
comment|// State tracking
end_comment
begin_function
DECL|function|penChanged
name|void
name|QBlitterPaintEngine
operator|::
name|penChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|penChanged
argument_list|()
expr_stmt|;
name|d
operator|->
name|updatePenState
argument_list|(
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|brushChanged
name|void
name|QBlitterPaintEngine
operator|::
name|brushChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|brushChanged
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateBrushState
argument_list|(
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|opacityChanged
name|void
name|QBlitterPaintEngine
operator|::
name|opacityChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|opacityChanged
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateOpacityState
argument_list|(
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compositionModeChanged
name|void
name|QBlitterPaintEngine
operator|::
name|compositionModeChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|compositionModeChanged
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateCompositionModeState
argument_list|(
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|renderHintsChanged
name|void
name|QBlitterPaintEngine
operator|::
name|renderHintsChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|renderHintsChanged
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateRenderHintsState
argument_list|(
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|transformChanged
name|void
name|QBlitterPaintEngine
operator|::
name|transformChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|transformChanged
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateTransformState
argument_list|(
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clipEnabledChanged
name|void
name|QBlitterPaintEngine
operator|::
name|clipEnabledChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|clipEnabledChanged
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateClipState
argument_list|(
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|begin
name|bool
name|QBlitterPaintEngine
operator|::
name|begin
parameter_list|(
name|QPaintDevice
modifier|*
name|pdev
parameter_list|)
block|{
name|bool
name|ok
init|=
name|QRasterPaintEngine
operator|::
name|begin
argument_list|(
name|pdev
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_BLITTER_RASTEROVERLAY
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|pmData
operator|->
name|unmergeOverlay
argument_list|()
expr_stmt|;
endif|#
directive|endif
return|return
name|ok
return|;
block|}
end_function
begin_function
DECL|function|end
name|bool
name|QBlitterPaintEngine
operator|::
name|end
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_BLITTER_RASTEROVERLAY
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|pmData
operator|->
name|mergeOverlay
argument_list|()
expr_stmt|;
endif|#
directive|endif
return|return
name|QRasterPaintEngine
operator|::
name|end
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setState
name|void
name|QBlitterPaintEngine
operator|::
name|setState
parameter_list|(
name|QPainterState
modifier|*
name|s
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|setState
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateCompleteState
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Accelerated paths
end_comment
begin_function
DECL|function|fill
name|void
name|QBlitterPaintEngine
operator|::
name|fill
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|shape
argument_list|()
operator|==
name|QVectorPath
operator|::
name|RectangleHint
condition|)
block|{
name|QRectF
name|rect
argument_list|(
operator|(
operator|(
name|QPointF
operator|*
operator|)
name|path
operator|.
name|points
argument_list|()
operator|)
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|QPointF
operator|*
operator|)
name|path
operator|.
name|points
argument_list|()
operator|)
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|fillRect
argument_list|(
name|rect
argument_list|,
name|brush
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|d
operator|->
name|pmData
operator|->
name|markRasterOverlay
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|fill
argument_list|(
name|path
argument_list|,
name|brush
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fillRect
name|void
name|QBlitterPaintEngine
operator|::
name|fillRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|caps
operator|.
name|canBlitterFillRect
argument_list|()
operator|&&
name|color
operator|.
name|alpha
argument_list|()
operator|==
literal|0xff
condition|)
block|{
name|d
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|d
operator|->
name|pmData
operator|->
name|markRasterOverlay
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|fillRect
argument_list|(
name|rect
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fillRect
name|void
name|QBlitterPaintEngine
operator|::
name|fillRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
if|if
condition|(
name|rect
operator|.
name|size
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|qbrush_style
argument_list|(
name|brush
argument_list|)
operator|==
name|Qt
operator|::
name|SolidPattern
operator|&&
name|qbrush_color
argument_list|(
name|brush
argument_list|)
operator|.
name|alpha
argument_list|()
operator|==
literal|0xff
operator|&&
name|d
operator|->
name|caps
operator|.
name|canBlitterFillRect
argument_list|()
condition|)
block|{
name|d
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|,
name|qbrush_color
argument_list|(
name|brush
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|brush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|TexturePattern
operator|&&
name|d
operator|->
name|caps
operator|.
name|canBlitterDrawPixmap
argument_list|(
name|rect
argument_list|,
name|brush
operator|.
name|texture
argument_list|()
argument_list|,
name|rect
argument_list|)
condition|)
block|{
name|bool
name|rectIsFilled
init|=
literal|false
decl_stmt|;
name|QRectF
name|transformedRect
init|=
name|state
argument_list|()
operator|->
name|matrix
operator|.
name|mapRect
argument_list|(
name|rect
argument_list|)
decl_stmt|;
name|qreal
name|x
init|=
name|transformedRect
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|y
init|=
name|transformedRect
operator|.
name|y
argument_list|()
decl_stmt|;
name|QPixmap
name|pm
init|=
name|brush
operator|.
name|texture
argument_list|()
decl_stmt|;
name|d
operator|->
name|unlock
argument_list|()
expr_stmt|;
name|int
name|srcX
init|=
name|int
argument_list|(
name|rect
operator|.
name|x
argument_list|()
operator|-
name|state
argument_list|()
operator|->
name|brushOrigin
operator|.
name|x
argument_list|()
argument_list|)
operator|%
name|pm
operator|.
name|width
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcX
operator|<
literal|0
condition|)
name|srcX
operator|=
name|pm
operator|.
name|width
argument_list|()
operator|+
name|srcX
expr_stmt|;
specifier|const
name|int
name|startX
init|=
name|srcX
decl_stmt|;
name|int
name|srcY
init|=
name|int
argument_list|(
name|rect
operator|.
name|y
argument_list|()
operator|-
name|state
argument_list|()
operator|->
name|brushOrigin
operator|.
name|y
argument_list|()
argument_list|)
operator|%
name|pm
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcY
operator|<
literal|0
condition|)
name|srcY
operator|=
name|pm
operator|.
name|height
argument_list|()
operator|+
name|srcY
expr_stmt|;
while|while
condition|(
operator|!
name|rectIsFilled
condition|)
block|{
name|qreal
name|blitWidth
init|=
operator|(
name|pm
operator|.
name|width
argument_list|()
operator|)
operator|-
name|srcX
decl_stmt|;
name|qreal
name|blitHeight
init|=
operator|(
name|pm
operator|.
name|height
argument_list|()
operator|)
operator|-
name|srcY
decl_stmt|;
if|if
condition|(
name|x
operator|+
name|blitWidth
operator|>
name|transformedRect
operator|.
name|right
argument_list|()
condition|)
name|blitWidth
operator|=
name|transformedRect
operator|.
name|right
argument_list|()
operator|-
name|x
expr_stmt|;
if|if
condition|(
name|y
operator|+
name|blitHeight
operator|>
name|transformedRect
operator|.
name|bottom
argument_list|()
condition|)
name|blitHeight
operator|=
name|transformedRect
operator|.
name|bottom
argument_list|()
operator|-
name|y
expr_stmt|;
specifier|const
name|QClipData
modifier|*
name|clipData
init|=
name|d
operator|->
name|clip
argument_list|()
decl_stmt|;
if|if
condition|(
name|clipData
operator|->
name|hasRectClip
condition|)
block|{
name|QRect
name|targetRect
init|=
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|blitWidth
argument_list|,
name|blitHeight
argument_list|)
operator|.
name|intersected
argument_list|(
name|clipData
operator|->
name|clipRect
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetRect
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|int
name|tmpSrcX
init|=
name|srcX
operator|+
operator|(
name|targetRect
operator|.
name|x
argument_list|()
operator|-
name|x
operator|)
decl_stmt|;
name|int
name|tmpSrcY
init|=
name|srcY
operator|+
operator|(
name|targetRect
operator|.
name|y
argument_list|()
operator|-
name|y
operator|)
decl_stmt|;
name|QRect
name|srcRect
argument_list|(
name|tmpSrcX
argument_list|,
name|tmpSrcY
argument_list|,
name|targetRect
operator|.
name|width
argument_list|()
argument_list|,
name|targetRect
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|->
name|pmData
operator|->
name|blittable
argument_list|()
operator|->
name|drawPixmap
argument_list|(
name|targetRect
argument_list|,
name|pm
argument_list|,
name|srcRect
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|clipData
operator|->
name|hasRegionClip
condition|)
block|{
name|QVector
argument_list|<
name|QRect
argument_list|>
name|clipRects
init|=
name|clipData
operator|->
name|clipRegion
operator|.
name|rects
argument_list|()
decl_stmt|;
name|QRect
name|unclippedTargetRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|blitWidth
argument_list|,
name|blitHeight
argument_list|)
decl_stmt|;
name|QRegion
name|intersectedRects
init|=
name|clipData
operator|->
name|clipRegion
operator|.
name|intersected
argument_list|(
name|unclippedTargetRect
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|intersectedRects
operator|.
name|rects
argument_list|()
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QRect
name|targetRect
init|=
name|intersectedRects
operator|.
name|rects
argument_list|()
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|targetRect
operator|.
name|isValid
argument_list|()
operator|||
name|targetRect
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|int
name|tmpSrcX
init|=
name|srcX
operator|+
operator|(
name|targetRect
operator|.
name|x
argument_list|()
operator|-
name|x
operator|)
decl_stmt|;
name|int
name|tmpSrcY
init|=
name|srcY
operator|+
operator|(
name|targetRect
operator|.
name|y
argument_list|()
operator|-
name|y
operator|)
decl_stmt|;
name|QRect
name|srcRect
argument_list|(
name|tmpSrcX
argument_list|,
name|tmpSrcY
argument_list|,
name|targetRect
operator|.
name|width
argument_list|()
argument_list|,
name|targetRect
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|->
name|pmData
operator|->
name|blittable
argument_list|()
operator|->
name|drawPixmap
argument_list|(
name|targetRect
argument_list|,
name|pm
argument_list|,
name|srcRect
argument_list|)
expr_stmt|;
block|}
block|}
name|x
operator|+=
name|blitWidth
expr_stmt|;
if|if
condition|(
name|x
operator|>=
name|transformedRect
operator|.
name|right
argument_list|()
condition|)
block|{
name|x
operator|=
name|transformedRect
operator|.
name|x
argument_list|()
expr_stmt|;
name|srcX
operator|=
name|startX
expr_stmt|;
name|srcY
operator|=
literal|0
expr_stmt|;
name|y
operator|+=
name|blitHeight
expr_stmt|;
if|if
condition|(
name|y
operator|>=
name|transformedRect
operator|.
name|bottom
argument_list|()
condition|)
name|rectIsFilled
operator|=
literal|true
expr_stmt|;
block|}
else|else
name|srcX
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|d
operator|->
name|pmData
operator|->
name|markRasterOverlay
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|fillRect
argument_list|(
name|rect
argument_list|,
name|brush
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawRects
name|void
name|QBlitterPaintEngine
operator|::
name|drawRects
parameter_list|(
specifier|const
name|QRect
modifier|*
name|rects
parameter_list|,
name|int
name|rectCount
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|caps
operator|.
name|canBlitterDrawRectMask
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rectCount
condition|;
operator|++
name|i
control|)
name|d
operator|->
name|fillRect
argument_list|(
name|rects
index|[
name|i
index|]
argument_list|,
name|qbrush_color
argument_list|(
name|state
argument_list|()
operator|->
name|brush
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|pmData
operator|->
name|markRasterOverlay
argument_list|(
name|rects
argument_list|,
name|rectCount
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawRects
argument_list|(
name|rects
argument_list|,
name|rectCount
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawRects
name|void
name|QBlitterPaintEngine
operator|::
name|drawRects
parameter_list|(
specifier|const
name|QRectF
modifier|*
name|rects
parameter_list|,
name|int
name|rectCount
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|caps
operator|.
name|canBlitterDrawRectMask
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rectCount
condition|;
operator|++
name|i
control|)
name|d
operator|->
name|fillRect
argument_list|(
name|rects
index|[
name|i
index|]
argument_list|,
name|qbrush_color
argument_list|(
name|state
argument_list|()
operator|->
name|brush
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|pmData
operator|->
name|markRasterOverlay
argument_list|(
name|rects
argument_list|,
name|rectCount
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawRects
argument_list|(
name|rects
argument_list|,
name|rectCount
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawPixmap
name|void
name|QBlitterPaintEngine
operator|::
name|drawPixmap
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|)
block|{
name|drawPixmap
argument_list|(
name|QRectF
argument_list|(
name|pos
argument_list|,
name|pm
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|pm
argument_list|,
name|pm
operator|.
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPixmap
name|void
name|QBlitterPaintEngine
operator|::
name|drawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|caps
operator|.
name|canBlitterDrawPixmap
argument_list|(
name|r
argument_list|,
name|pm
argument_list|,
name|sr
argument_list|)
condition|)
block|{
name|d
operator|->
name|unlock
argument_list|()
expr_stmt|;
name|QRectF
name|targetRect
init|=
name|r
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|hasXForm
condition|)
name|targetRect
operator|=
name|state
argument_list|()
operator|->
name|matrix
operator|.
name|mapRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
specifier|const
name|QClipData
modifier|*
name|clipData
init|=
name|d
operator|->
name|clip
argument_list|()
decl_stmt|;
if|if
condition|(
name|clipData
condition|)
block|{
if|if
condition|(
name|clipData
operator|->
name|hasRectClip
condition|)
block|{
name|d
operator|->
name|clipAndDrawPixmap
argument_list|(
name|clipData
operator|->
name|clipRect
argument_list|,
name|targetRect
argument_list|,
name|pm
argument_list|,
name|sr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|clipData
operator|->
name|hasRegionClip
condition|)
block|{
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|clipData
operator|->
name|clipRegion
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|d
operator|->
name|clipAndDrawPixmap
argument_list|(
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|targetRect
argument_list|,
name|pm
argument_list|,
name|sr
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QRectF
name|deviceRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|paintDevice
argument_list|()
operator|->
name|width
argument_list|()
argument_list|,
name|paintDevice
argument_list|()
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|->
name|clipAndDrawPixmap
argument_list|(
name|deviceRect
argument_list|,
name|targetRect
argument_list|,
name|pm
argument_list|,
name|sr
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|d
operator|->
name|pmData
operator|->
name|markRasterOverlay
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawPixmap
argument_list|(
name|r
argument_list|,
name|pm
argument_list|,
name|sr
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Overridden methods to lock the graphics memory
end_comment
begin_function
DECL|function|drawPolygon
name|void
name|QBlitterPaintEngine
operator|::
name|drawPolygon
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|PolygonDrawMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|d
operator|->
name|pmData
operator|->
name|markRasterOverlay
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawPolygon
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPolygon
name|void
name|QBlitterPaintEngine
operator|::
name|drawPolygon
parameter_list|(
specifier|const
name|QPoint
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|PolygonDrawMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|d
operator|->
name|pmData
operator|->
name|markRasterOverlay
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawPolygon
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillPath
name|void
name|QBlitterPaintEngine
operator|::
name|fillPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
name|QSpanData
modifier|*
name|fillData
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|d
operator|->
name|pmData
operator|->
name|markRasterOverlay
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|fillPath
argument_list|(
name|path
argument_list|,
name|fillData
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillPolygon
name|void
name|QBlitterPaintEngine
operator|::
name|fillPolygon
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|PolygonDrawMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|d
operator|->
name|pmData
operator|->
name|markRasterOverlay
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|fillPolygon
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawEllipse
name|void
name|QBlitterPaintEngine
operator|::
name|drawEllipse
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|d
operator|->
name|pmData
operator|->
name|markRasterOverlay
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawEllipse
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawImage
name|void
name|QBlitterPaintEngine
operator|::
name|drawImage
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image
parameter_list|)
block|{
name|drawImage
argument_list|(
name|QRectF
argument_list|(
name|pos
argument_list|,
name|image
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|image
argument_list|,
name|image
operator|.
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawImage
name|void
name|QBlitterPaintEngine
operator|::
name|drawImage
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QImage
modifier|&
name|pm
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|d
operator|->
name|pmData
operator|->
name|markRasterOverlay
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawImage
argument_list|(
name|r
argument_list|,
name|pm
argument_list|,
name|sr
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawTiledPixmap
name|void
name|QBlitterPaintEngine
operator|::
name|drawTiledPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|sr
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|d
operator|->
name|pmData
operator|->
name|markRasterOverlay
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawTiledPixmap
argument_list|(
name|r
argument_list|,
name|pm
argument_list|,
name|sr
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawTextItem
name|void
name|QBlitterPaintEngine
operator|::
name|drawTextItem
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QTextItem
modifier|&
name|ti
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|d
operator|->
name|pmData
operator|->
name|markRasterOverlay
argument_list|(
name|pos
argument_list|,
name|ti
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawTextItem
argument_list|(
name|pos
argument_list|,
name|ti
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPoints
name|void
name|QBlitterPaintEngine
operator|::
name|drawPoints
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|d
operator|->
name|pmData
operator|->
name|markRasterOverlay
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawPoints
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPoints
name|void
name|QBlitterPaintEngine
operator|::
name|drawPoints
parameter_list|(
specifier|const
name|QPoint
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|d
operator|->
name|pmData
operator|->
name|markRasterOverlay
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawPoints
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stroke
name|void
name|QBlitterPaintEngine
operator|::
name|stroke
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|d
operator|->
name|pmData
operator|->
name|markRasterOverlay
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|stroke
argument_list|(
name|path
argument_list|,
name|pen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawStaticTextItem
name|void
name|QBlitterPaintEngine
operator|::
name|drawStaticTextItem
parameter_list|(
name|QStaticTextItem
modifier|*
name|sti
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBlitterPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawStaticTextItem
argument_list|(
name|sti
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_BLITTER_RASTEROVERLAY
comment|//#### d->pmData->markRasterOverlay(sti);
name|qWarning
argument_list|(
literal|"not implemented: markRasterOverlay for QStaticTextItem"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_BLITTABLE
end_comment
end_unit
