begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QWINDOWSURFACE_QWS_P_H
end_ifndef
begin_define
DECL|macro|QWINDOWSURFACE_QWS_P_H
define|#
directive|define
name|QWINDOWSURFACE_QWS_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"qwindowsurface_p.h"
end_include
begin_include
include|#
directive|include
file|<qregion.h>
end_include
begin_include
include|#
directive|include
file|<qimage.h>
end_include
begin_include
include|#
directive|include
file|<qdirectpainter_qws.h>
end_include
begin_include
include|#
directive|include
file|<qmutex.h>
end_include
begin_include
include|#
directive|include
file|<private/qwssharedmemory_p.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QScreen
name|class
name|QScreen
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWSWindowSurfacePrivate
name|class
name|QWSWindowSurfacePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QWSWindowSurface
range|:
name|public
name|QWindowSurface
block|{
name|public
operator|:
name|QWSWindowSurface
argument_list|()
block|;
name|QWSWindowSurface
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|)
block|;
operator|~
name|QWSWindowSurface
argument_list|()
block|;
name|virtual
name|bool
name|isValid
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|void
name|setGeometry
argument_list|(
specifier|const
name|QRect
operator|&
name|rect
argument_list|)
block|;
name|virtual
name|void
name|setGeometry
argument_list|(
specifier|const
name|QRect
operator|&
name|rect
argument_list|,
specifier|const
name|QRegion
operator|&
name|mask
argument_list|)
block|;
name|virtual
name|void
name|flush
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|,
specifier|const
name|QRegion
operator|&
name|region
argument_list|,
specifier|const
name|QPoint
operator|&
name|offset
argument_list|)
block|;
name|virtual
name|bool
name|move
argument_list|(
specifier|const
name|QPoint
operator|&
name|offset
argument_list|)
block|;
name|virtual
name|QRegion
name|move
argument_list|(
specifier|const
name|QPoint
operator|&
name|offset
argument_list|,
specifier|const
name|QRegion
operator|&
name|newClip
argument_list|)
block|;
name|virtual
name|QPoint
name|painterOffset
argument_list|()
specifier|const
block|;
comment|// remove!!!
name|virtual
name|void
name|beginPaint
argument_list|(
specifier|const
name|QRegion
operator|&
argument_list|)
block|;
name|virtual
name|void
name|endPaint
argument_list|(
specifier|const
name|QRegion
operator|&
argument_list|)
block|;
name|virtual
name|bool
name|lock
argument_list|(
argument|int timeout = -
literal|1
argument_list|)
block|;
name|virtual
name|void
name|unlock
argument_list|()
block|;
name|virtual
name|QString
name|key
argument_list|()
specifier|const
operator|=
literal|0
block|;
comment|// XXX: not good enough
name|virtual
name|QByteArray
name|transientState
argument_list|()
specifier|const
block|;
name|virtual
name|QByteArray
name|permanentState
argument_list|()
specifier|const
block|;
name|virtual
name|void
name|setTransientState
argument_list|(
specifier|const
name|QByteArray
operator|&
name|state
argument_list|)
block|;
name|virtual
name|void
name|setPermanentState
argument_list|(
specifier|const
name|QByteArray
operator|&
name|state
argument_list|)
block|;
name|virtual
name|QImage
name|image
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|QPaintDevice
operator|*
name|paintDevice
argument_list|()
operator|=
literal|0
block|;
specifier|const
name|QRegion
name|clipRegion
argument_list|()
specifier|const
block|;
name|void
name|setClipRegion
argument_list|(
specifier|const
name|QRegion
operator|&
argument_list|)
block|;
ifdef|#
directive|ifdef
name|QT_QWS_CLIENTBLIT
name|virtual
specifier|const
name|QRegion
name|directRegion
argument_list|()
specifier|const
block|;
name|virtual
name|int
name|directRegionId
argument_list|()
specifier|const
block|;
name|virtual
name|void
name|setDirectRegion
argument_list|(
specifier|const
name|QRegion
operator|&
argument_list|,
name|int
argument_list|)
block|;
endif|#
directive|endif
block|enum
name|SurfaceFlag
block|{
name|RegionReserved
operator|=
literal|0x1
block|,
name|Buffered
operator|=
literal|0x2
block|,
name|Opaque
operator|=
literal|0x4
block|}
block|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|SurfaceFlags
argument_list|,
argument|SurfaceFlag
argument_list|)
name|SurfaceFlags
name|surfaceFlags
argument_list|()
specifier|const
block|;
specifier|inline
name|bool
name|isRegionReserved
argument_list|()
specifier|const
block|{
return|return
name|surfaceFlags
argument_list|()
operator|&
name|RegionReserved
return|;
block|}
specifier|inline
name|bool
name|isBuffered
argument_list|()
specifier|const
block|{
return|return
name|surfaceFlags
argument_list|()
operator|&
name|Buffered
return|;
block|}
specifier|inline
name|bool
name|isOpaque
argument_list|()
specifier|const
block|{
return|return
name|surfaceFlags
argument_list|()
operator|&
name|Opaque
return|;
block|}
name|int
name|winId
argument_list|()
specifier|const
block|;
name|virtual
name|void
name|releaseSurface
argument_list|()
block|;
name|protected
operator|:
name|void
name|setSurfaceFlags
argument_list|(
argument|SurfaceFlags type
argument_list|)
block|;
name|void
name|setWinId
argument_list|(
argument|int id
argument_list|)
block|;
name|private
operator|:
name|friend
name|class
name|QWidgetPrivate
block|;
name|void
name|invalidateBuffer
argument_list|()
block|;
name|QWSWindowSurfacePrivate
operator|*
name|d_ptr
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QWSWindowSurface::SurfaceFlags
argument_list|)
end_macro
begin_decl_stmt
name|class
name|QWSWindowSurfacePrivate
block|{
name|public
label|:
name|QWSWindowSurfacePrivate
argument_list|()
expr_stmt|;
name|void
name|setWinId
parameter_list|(
name|int
name|id
parameter_list|)
function_decl|;
name|QWSWindowSurface
operator|::
name|SurfaceFlags
name|flags
expr_stmt|;
name|QRegion
name|clip
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_QWS_CLIENTBLIT
name|QRegion
name|direct
decl_stmt|;
name|int
name|directId
decl_stmt|;
endif|#
directive|endif
name|int
name|winId
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
DECL|variable|QWSLock
name|class
name|QWSLock
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QWSMemorySurface
range|:
name|public
name|QWSWindowSurface
block|{
name|public
operator|:
name|QWSMemorySurface
argument_list|()
block|;
name|QWSMemorySurface
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|)
block|;
operator|~
name|QWSMemorySurface
argument_list|()
block|;
name|bool
name|isValid
argument_list|()
specifier|const
block|;
name|QPaintDevice
operator|*
name|paintDevice
argument_list|()
block|{
return|return
operator|&
name|img
return|;
block|}
name|bool
name|scroll
argument_list|(
argument|const QRegion&area
argument_list|,
argument|int dx
argument_list|,
argument|int dy
argument_list|)
block|;
name|QImage
name|image
argument_list|()
specifier|const
block|{
return|return
name|img
return|;
block|}
name|QPoint
name|painterOffset
argument_list|()
specifier|const
block|;
name|void
name|beginPaint
argument_list|(
specifier|const
name|QRegion
operator|&
name|rgn
argument_list|)
block|;
name|bool
name|lock
argument_list|(
argument|int timeout = -
literal|1
argument_list|)
block|;
name|void
name|unlock
argument_list|()
block|;
name|protected
operator|:
name|QImage
operator|::
name|Format
name|preferredImageFormat
argument_list|(
argument|const QWidget *widget
argument_list|)
specifier|const
block|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
name|void
name|setLock
argument_list|(
argument|int lockId
argument_list|)
block|;
name|QWSLock
operator|*
name|memlock
block|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_THREAD
name|QMutex
name|threadLock
block|;
endif|#
directive|endif
name|QImage
name|img
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QWSLocalMemSurface
range|:
name|public
name|QWSMemorySurface
block|{
name|public
operator|:
name|QWSLocalMemSurface
argument_list|()
block|;
name|QWSLocalMemSurface
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|)
block|;
operator|~
name|QWSLocalMemSurface
argument_list|()
block|;
name|void
name|setGeometry
argument_list|(
specifier|const
name|QRect
operator|&
name|rect
argument_list|)
block|;
name|QString
name|key
argument_list|()
specifier|const
block|{
return|return
name|QLatin1String
argument_list|(
literal|"mem"
argument_list|)
return|;
block|}
name|QByteArray
name|permanentState
argument_list|()
specifier|const
block|;
name|void
name|setPermanentState
argument_list|(
specifier|const
name|QByteArray
operator|&
name|data
argument_list|)
block|;
name|virtual
name|void
name|releaseSurface
argument_list|()
block|;
name|protected
operator|:
name|uchar
operator|*
name|mem
block|;
name|int
name|memsize
block|; }
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
end_ifndef
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QWSSharedMemSurface
range|:
name|public
name|QWSMemorySurface
block|{
name|public
operator|:
name|QWSSharedMemSurface
argument_list|()
block|;
name|QWSSharedMemSurface
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|)
block|;
operator|~
name|QWSSharedMemSurface
argument_list|()
block|;
name|void
name|setGeometry
argument_list|(
specifier|const
name|QRect
operator|&
name|rect
argument_list|)
block|;
name|QString
name|key
argument_list|()
specifier|const
block|{
return|return
name|QLatin1String
argument_list|(
literal|"shm"
argument_list|)
return|;
block|}
name|QByteArray
name|permanentState
argument_list|()
specifier|const
block|;
name|void
name|setPermanentState
argument_list|(
specifier|const
name|QByteArray
operator|&
name|data
argument_list|)
block|;
ifdef|#
directive|ifdef
name|QT_QWS_CLIENTBLIT
name|virtual
name|void
name|setDirectRegion
argument_list|(
specifier|const
name|QRegion
operator|&
argument_list|,
name|int
argument_list|)
block|;
name|virtual
specifier|const
name|QRegion
name|directRegion
argument_list|()
specifier|const
block|;
endif|#
directive|endif
name|virtual
name|void
name|releaseSurface
argument_list|()
block|;
name|private
operator|:
name|bool
name|setMemory
argument_list|(
argument|int memId
argument_list|)
block|;
name|QWSSharedMemory
name|mem
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_MULTIPROCESS
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PAINTONSCREEN
end_ifndef
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QWSOnScreenSurface
range|:
name|public
name|QWSMemorySurface
block|{
name|public
operator|:
name|QWSOnScreenSurface
argument_list|()
block|;
name|QWSOnScreenSurface
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|)
block|;
operator|~
name|QWSOnScreenSurface
argument_list|()
block|;
name|bool
name|isValid
argument_list|()
specifier|const
block|;
name|QPoint
name|painterOffset
argument_list|()
specifier|const
block|;
name|QString
name|key
argument_list|()
specifier|const
block|{
return|return
name|QLatin1String
argument_list|(
literal|"OnScreen"
argument_list|)
return|;
block|}
name|QByteArray
name|permanentState
argument_list|()
specifier|const
block|;
name|void
name|setPermanentState
argument_list|(
specifier|const
name|QByteArray
operator|&
name|data
argument_list|)
block|;
name|private
operator|:
name|void
name|attachToScreen
argument_list|(
specifier|const
name|QScreen
operator|*
name|screen
argument_list|)
block|;
specifier|const
name|QScreen
operator|*
name|screen
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PAINTONSCREEN
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PAINT_DEBUG
end_ifndef
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QWSYellowSurface
range|:
name|public
name|QWSWindowSurface
block|{
name|public
operator|:
name|QWSYellowSurface
argument_list|(
argument|bool isClient = false
argument_list|)
block|;
operator|~
name|QWSYellowSurface
argument_list|()
block|;
name|void
name|setDelay
argument_list|(
argument|int msec
argument_list|)
block|{
name|delay
operator|=
name|msec
block|; }
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|void
name|flush
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|,
specifier|const
name|QRegion
operator|&
name|region
argument_list|,
specifier|const
name|QPoint
operator|&
name|offset
argument_list|)
block|;
name|QString
name|key
argument_list|()
specifier|const
block|{
return|return
name|QLatin1String
argument_list|(
literal|"Yellow"
argument_list|)
return|;
block|}
name|QByteArray
name|permanentState
argument_list|()
specifier|const
block|;
name|void
name|setPermanentState
argument_list|(
specifier|const
name|QByteArray
operator|&
name|data
argument_list|)
block|;
name|QPaintDevice
operator|*
name|paintDevice
argument_list|()
block|{
return|return
operator|&
name|img
return|;
block|}
name|QImage
name|image
argument_list|()
specifier|const
block|{
return|return
name|img
return|;
block|}
name|private
operator|:
name|int
name|delay
block|;
name|QSize
name|surfaceSize
block|;
comment|// client side
name|QImage
name|img
block|;
comment|// server side
block|}
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PAINT_DEBUG
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DIRECTPAINTER
end_ifndef
begin_decl_stmt
DECL|variable|QScreen
name|class
name|QScreen
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QWSDirectPainterSurface
range|:
name|public
name|QWSWindowSurface
block|{
name|public
operator|:
name|QWSDirectPainterSurface
argument_list|(
argument|bool isClient = false
argument_list|,
argument|QDirectPainter::SurfaceFlag flags = QDirectPainter::NonReserved
argument_list|)
block|;
operator|~
name|QWSDirectPainterSurface
argument_list|()
block|;
name|void
name|setReserved
argument_list|()
block|{
name|setSurfaceFlags
argument_list|(
name|RegionReserved
argument_list|)
block|; }
name|void
name|setGeometry
argument_list|(
argument|const QRect&rect
argument_list|)
block|{
name|setRegion
argument_list|(
name|rect
argument_list|)
block|; }
name|void
name|setRegion
argument_list|(
specifier|const
name|QRegion
operator|&
name|region
argument_list|)
block|;
name|QRegion
name|region
argument_list|()
specifier|const
block|{
return|return
name|clipRegion
argument_list|()
return|;
block|}
name|void
name|flush
argument_list|(
name|QWidget
operator|*
argument_list|,
specifier|const
name|QRegion
operator|&
argument_list|,
specifier|const
name|QPoint
operator|&
argument_list|)
block|;
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|QString
name|key
argument_list|()
specifier|const
block|{
return|return
name|QLatin1String
argument_list|(
literal|"DirectPainter"
argument_list|)
return|;
block|}
name|QByteArray
name|permanentState
argument_list|()
specifier|const
block|;
name|void
name|setPermanentState
argument_list|(
specifier|const
name|QByteArray
operator|&
argument_list|)
block|;
name|QImage
name|image
argument_list|()
specifier|const
block|{
return|return
name|QImage
argument_list|()
return|;
block|}
name|QPaintDevice
operator|*
name|paintDevice
argument_list|()
block|{
return|return
literal|0
return|;
block|}
comment|// hw: get rid of this
name|WId
name|windowId
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|WId
operator|>
operator|(
name|winId
argument_list|()
operator|)
return|;
block|}
name|QScreen
operator|*
name|screen
argument_list|()
specifier|const
block|{
return|return
name|_screen
return|;
block|}
name|void
name|beginPaint
argument_list|(
specifier|const
name|QRegion
operator|&
argument_list|)
block|;
name|bool
name|lock
argument_list|(
argument|int timeout = -
literal|1
argument_list|)
block|;
name|void
name|unlock
argument_list|()
block|;
name|void
name|setLocking
argument_list|(
argument|bool b
argument_list|)
block|{
name|doLocking
operator|=
name|b
block|; }
name|bool
name|hasPendingRegionEvents
argument_list|()
specifier|const
block|;
name|private
operator|:
name|QScreen
operator|*
name|_screen
block|;
ifndef|#
directive|ifndef
name|QT_NO_THREAD
name|QMutex
name|threadLock
block|;
endif|#
directive|endif
name|friend
name|void
name|qt_directpainter_region
argument_list|(
name|QDirectPainter
operator|*
argument_list|,
specifier|const
name|QRegion
operator|&
argument_list|,
name|int
argument_list|)
block|;
name|bool
name|flushingRegionEvents
block|;
name|bool
name|synchronous
block|;
name|bool
name|doLocking
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DIRECTPAINTER
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QWINDOWSURFACE_QWS_P_H
end_comment
end_unit
