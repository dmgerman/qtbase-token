begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QDRAWHELPER_SSE_P_H
end_ifndef
begin_define
DECL|macro|QDRAWHELPER_SSE_P_H
define|#
directive|define
name|QDRAWHELPER_SSE_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<private/qdrawhelper_mmx_p.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_COMPILER_SUPPORTS_SSE
end_ifdef
begin_ifdef
ifdef|#
directive|ifdef
name|QT_LINUXBASE
end_ifdef
begin_comment
comment|// this is an evil hack - the posix_memalign declaration in LSB
end_comment
begin_comment
comment|// is wrong - see http://bugs.linuxbase.org/show_bug.cgi?id=2431
end_comment
begin_define
DECL|macro|posix_memalign
define|#
directive|define
name|posix_memalign
value|_lsb_hack_posix_memalign
end_define
begin_include
include|#
directive|include
file|<xmmintrin.h>
end_include
begin_undef
DECL|macro|posix_memalign
undef|#
directive|undef
name|posix_memalign
end_undef
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<xmmintrin.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|_MM_SHUFFLE
DECL|macro|_MM_SHUFFLE
define|#
directive|define
name|_MM_SHUFFLE
parameter_list|(
name|fp3
parameter_list|,
name|fp2
parameter_list|,
name|fp1
parameter_list|,
name|fp0
parameter_list|)
define|\
value|(((fp3)<< 6) | ((fp2)<< 4) | ((fp1)<< 2) | (fp0))
endif|#
directive|endif
DECL|struct|QMMXIntrinsics
name|struct
name|QSSEIntrinsics
range|:
name|public
name|QMMXIntrinsics
block|{
DECL|function|alpha
specifier|static
specifier|inline
name|m64
name|alpha
argument_list|(
argument|m64 x
argument_list|)
block|{
return|return
name|_mm_shuffle_pi16
argument_list|(
name|x
argument_list|,
name|_MM_SHUFFLE
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
return|;
block|}
DECL|function|_load_alpha
specifier|static
specifier|inline
name|m64
name|_load_alpha
argument_list|(
argument|uint x
argument_list|,
argument|const m64&mmx_0x0000
argument_list|)
block|{
name|m64
name|t
operator|=
name|_mm_unpacklo_pi8
argument_list|(
name|_mm_cvtsi32_si64
argument_list|(
name|x
argument_list|)
argument_list|,
name|mmx_0x0000
argument_list|)
block|;
return|return
name|_mm_shuffle_pi16
argument_list|(
name|t
argument_list|,
name|_MM_SHUFFLE
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|class
name|MM
operator|>
DECL|function|qt_memfill32_sse_template
specifier|inline
name|void
name|qt_memfill32_sse_template
argument_list|(
argument|quint32 *dest
argument_list|,
argument|quint32 value
argument_list|,
argument|int count
argument_list|)
block|{
if|if
condition|(
name|count
operator|<
literal|7
condition|)
block|{
switch|switch
condition|(
name|count
condition|)
block|{
case|case
literal|6
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|5
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|4
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|3
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|2
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|1
case|:
operator|*
name|dest
operator|=
name|value
expr_stmt|;
block|}
return|return;
block|}
empty_stmt|;
name|__m64
operator|*
name|dst64
operator|=
name|reinterpret_cast
operator|<
name|__m64
operator|*
operator|>
operator|(
name|dest
operator|)
block|;
specifier|const
name|__m64
name|value64
operator|=
name|_mm_set_pi32
argument_list|(
name|value
argument_list|,
name|value
argument_list|)
block|;
name|int
name|count64
operator|=
name|count
operator|/
literal|2
block|;
name|int
name|n
operator|=
operator|(
name|count64
operator|+
literal|3
operator|)
operator|/
literal|4
block|;
switch|switch
condition|(
name|count64
operator|&
literal|0x3
condition|)
block|{
case|case
literal|0
case|:
do|do
block|{
name|_mm_stream_pi
argument_list|(
name|dst64
operator|++
argument_list|,
name|value64
argument_list|)
expr_stmt|;
case|case
literal|3
case|:
name|_mm_stream_pi
argument_list|(
name|dst64
operator|++
argument_list|,
name|value64
argument_list|)
expr_stmt|;
case|case
literal|2
case|:
name|_mm_stream_pi
argument_list|(
name|dst64
operator|++
argument_list|,
name|value64
argument_list|)
expr_stmt|;
case|case
literal|1
case|:
name|_mm_stream_pi
argument_list|(
name|dst64
operator|++
argument_list|,
name|value64
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|--
name|n
operator|>
literal|0
condition|)
empty_stmt|;
do|}      if (count& 0x1
block|)
name|dest
index|[
name|count
operator|-
literal|1
index|]
operator|=
name|value
expr_stmt|;
name|MM
operator|::
name|end
argument_list|()
block|; }
name|template
operator|<
name|class
name|MM
operator|>
DECL|function|qt_bitmapblit16_sse_template
specifier|inline
name|void
name|qt_bitmapblit16_sse_template
argument_list|(
argument|QRasterBuffer *rasterBuffer
argument_list|,
argument|int x
argument_list|,
argument|int y
argument_list|,
argument|quint32 color
argument_list|,
argument|const uchar *src
argument_list|,
argument|int width
argument_list|,
argument|int height
argument_list|,
argument|int stride
argument_list|)
block|{
specifier|const
name|quint16
name|c
operator|=
name|qConvertRgb32To16
argument_list|(
name|color
argument_list|)
block|;
name|quint16
operator|*
name|dest
operator|=
name|reinterpret_cast
operator|<
name|quint16
operator|*
operator|>
operator|(
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
operator|)
operator|+
name|x
block|;
specifier|const
name|int
name|destStride
operator|=
name|rasterBuffer
operator|->
name|bytesPerLine
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|quint16
argument_list|)
block|;
specifier|const
name|__m64
name|c64
operator|=
name|_mm_set1_pi16
argument_list|(
name|c
argument_list|)
block|;
ifdef|#
directive|ifdef
name|Q_CC_MSVC
pragma|#
directive|pragma
name|warning
name|(
name|disable
name|:
name|4309
name|)
comment|// truncation of constant value
endif|#
directive|endif
specifier|const
name|__m64
name|maskmask1
operator|=
name|_mm_set_pi16
argument_list|(
literal|0x1010
argument_list|,
literal|0x2020
argument_list|,
literal|0x4040
argument_list|,
literal|0x8080
argument_list|)
block|;
specifier|const
name|__m64
name|maskadd1
operator|=
name|_mm_set_pi16
argument_list|(
literal|0x7070
argument_list|,
literal|0x6060
argument_list|,
literal|0x4040
argument_list|,
literal|0x0000
argument_list|)
block|;
if|if
condition|(
name|width
operator|>
literal|4
condition|)
block|{
specifier|const
name|__m64
name|maskmask2
init|=
name|_mm_set_pi16
argument_list|(
literal|0x0101
argument_list|,
literal|0x0202
argument_list|,
literal|0x0404
argument_list|,
literal|0x0808
argument_list|)
decl_stmt|;
specifier|const
name|__m64
name|maskadd2
init|=
name|_mm_set_pi16
argument_list|(
literal|0x7f7f
argument_list|,
literal|0x7e7e
argument_list|,
literal|0x7c7c
argument_list|,
literal|0x7878
argument_list|)
decl_stmt|;
while|while
condition|(
name|height
operator|--
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|+=
literal|8
control|)
block|{
specifier|const
name|quint8
name|s
init|=
name|src
index|[
name|x
operator|>>
literal|3
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|s
condition|)
continue|continue;
name|__m64
name|mask1
init|=
name|_mm_set1_pi8
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|__m64
name|mask2
init|=
name|mask1
decl_stmt|;
name|mask1
operator|=
name|_m_pand
argument_list|(
name|mask1
argument_list|,
name|maskmask1
argument_list|)
expr_stmt|;
name|mask1
operator|=
name|_mm_add_pi16
argument_list|(
name|mask1
argument_list|,
name|maskadd1
argument_list|)
expr_stmt|;
name|_mm_maskmove_si64
argument_list|(
name|c64
argument_list|,
name|mask1
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|(
name|dest
operator|+
name|x
operator|)
argument_list|)
expr_stmt|;
name|mask2
operator|=
name|_m_pand
argument_list|(
name|mask2
argument_list|,
name|maskmask2
argument_list|)
expr_stmt|;
name|mask2
operator|=
name|_mm_add_pi16
argument_list|(
name|mask2
argument_list|,
name|maskadd2
argument_list|)
expr_stmt|;
name|_mm_maskmove_si64
argument_list|(
name|c64
argument_list|,
name|mask2
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|(
name|dest
operator|+
name|x
operator|+
literal|4
operator|)
argument_list|)
expr_stmt|;
block|}
name|dest
operator|+=
name|destStride
expr_stmt|;
name|src
operator|+=
name|stride
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|height
operator|--
condition|)
block|{
specifier|const
name|quint8
name|s
init|=
operator|*
name|src
decl_stmt|;
if|if
condition|(
name|s
condition|)
block|{
name|__m64
name|mask1
init|=
name|_mm_set1_pi8
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|mask1
operator|=
name|_m_pand
argument_list|(
name|mask1
argument_list|,
name|maskmask1
argument_list|)
expr_stmt|;
name|mask1
operator|=
name|_mm_add_pi16
argument_list|(
name|mask1
argument_list|,
name|maskadd1
argument_list|)
expr_stmt|;
name|_mm_maskmove_si64
argument_list|(
name|c64
argument_list|,
name|mask1
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|(
name|dest
operator|)
argument_list|)
expr_stmt|;
block|}
name|dest
operator|+=
name|destStride
expr_stmt|;
name|src
operator|+=
name|stride
expr_stmt|;
block|}
block|}
name|MM
operator|::
name|end
argument_list|()
expr_stmt|;
block|}
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_COMPILER_SUPPORTS_SSE
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QDRAWHELPER_SSE_P_H
end_comment
end_unit
