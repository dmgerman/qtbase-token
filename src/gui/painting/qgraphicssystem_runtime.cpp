begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<private/qgraphicssystem_runtime_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qgraphicssystem_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qgraphicssystemfactory_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidget_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTimer>
end_include
begin_include
include|#
directive|include
file|<QtGui/QBitmap>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|qt_pixmap_serial
specifier|static
name|int
name|qt_pixmap_serial
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|READBACK
define|#
directive|define
name|READBACK
parameter_list|(
name|f
parameter_list|)
define|\
value|f                                                       \     readBackInfo();
end_define
begin_class
DECL|class|QDeferredGraphicsSystemChange
class|class
name|QDeferredGraphicsSystemChange
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|QDeferredGraphicsSystemChange
name|QDeferredGraphicsSystemChange
parameter_list|(
name|QRuntimeGraphicsSystem
modifier|*
name|gs
parameter_list|,
specifier|const
name|QString
modifier|&
name|graphicsSystemName
parameter_list|)
member_init_list|:
name|m_graphicsSystem
argument_list|(
name|gs
argument_list|)
member_init_list|,
name|m_graphicsSystemName
argument_list|(
name|graphicsSystemName
argument_list|)
block|{     }
DECL|function|launch
name|void
name|launch
parameter_list|()
block|{
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|doChange
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|doChange
name|void
name|doChange
parameter_list|()
block|{
name|m_graphicsSystem
operator|->
name|setGraphicsSystem
argument_list|(
name|m_graphicsSystemName
argument_list|)
expr_stmt|;
name|deleteLater
argument_list|()
expr_stmt|;
block|}
private|private:
DECL|member|m_graphicsSystem
name|QRuntimeGraphicsSystem
modifier|*
name|m_graphicsSystem
decl_stmt|;
DECL|member|m_graphicsSystemName
name|QString
name|m_graphicsSystemName
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QRuntimePixmapData
name|QRuntimePixmapData
operator|::
name|QRuntimePixmapData
parameter_list|(
specifier|const
name|QRuntimeGraphicsSystem
modifier|*
name|gs
parameter_list|,
name|PixelType
name|type
parameter_list|)
member_init_list|:
name|QPixmapData
argument_list|(
name|type
argument_list|,
name|RuntimeClass
argument_list|)
member_init_list|,
name|m_graphicsSystem
argument_list|(
name|gs
argument_list|)
block|{
name|setSerialNumber
argument_list|(
operator|++
name|qt_pixmap_serial
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QRuntimePixmapData
name|QRuntimePixmapData
operator|::
name|~
name|QRuntimePixmapData
parameter_list|()
block|{
if|if
condition|(
name|QApplicationPrivate
operator|::
name|graphics_system
condition|)
name|m_graphicsSystem
operator|->
name|removePixmapData
argument_list|(
name|this
argument_list|)
expr_stmt|;
operator|delete
name|m_data
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|readBackInfo
name|void
name|QRuntimePixmapData
operator|::
name|readBackInfo
parameter_list|()
block|{
name|w
operator|=
name|m_data
operator|->
name|width
argument_list|()
expr_stmt|;
name|h
operator|=
name|m_data
operator|->
name|height
argument_list|()
expr_stmt|;
name|d
operator|=
name|m_data
operator|->
name|depth
argument_list|()
expr_stmt|;
name|is_null
operator|=
name|m_data
operator|->
name|isNull
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createCompatiblePixmapData
name|QPixmapData
modifier|*
name|QRuntimePixmapData
operator|::
name|createCompatiblePixmapData
parameter_list|()
specifier|const
block|{
name|QRuntimePixmapData
modifier|*
name|rtData
init|=
operator|new
name|QRuntimePixmapData
argument_list|(
name|m_graphicsSystem
argument_list|,
name|pixelType
argument_list|()
argument_list|)
decl_stmt|;
name|rtData
operator|->
name|m_data
operator|=
name|m_data
operator|->
name|createCompatiblePixmapData
argument_list|()
expr_stmt|;
return|return
name|rtData
return|;
block|}
end_function
begin_function
DECL|function|resize
name|void
name|QRuntimePixmapData
operator|::
name|resize
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|READBACK
argument_list|(
argument|m_data->resize(width, height);
argument_list|)
block|}
end_function
begin_function
DECL|function|fromImage
name|void
name|QRuntimePixmapData
operator|::
name|fromImage
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|READBACK
argument_list|(
argument|m_data->fromImage(image, flags);
argument_list|)
block|}
end_function
begin_function
DECL|function|fromFile
name|bool
name|QRuntimePixmapData
operator|::
name|fromFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|bool
name|success
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|READBACK
argument_list|(
argument|success = m_data->fromFile(filename, format, flags);
argument_list|)
return|return
name|success
return|;
block|}
end_function
begin_function
DECL|function|fromData
name|bool
name|QRuntimePixmapData
operator|::
name|fromData
parameter_list|(
specifier|const
name|uchar
modifier|*
name|buffer
parameter_list|,
name|uint
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|bool
name|success
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|READBACK
argument_list|(
argument|success = m_data->fromData(buffer, len, format, flags);
argument_list|)
return|return
name|success
return|;
block|}
end_function
begin_function
DECL|function|copy
name|void
name|QRuntimePixmapData
operator|::
name|copy
parameter_list|(
specifier|const
name|QPixmapData
modifier|*
name|data
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
if|if
condition|(
name|data
operator|->
name|runtimeData
argument_list|()
condition|)
block|{
name|READBACK
argument_list|(
argument|m_data->copy(data->runtimeData(), rect);
argument_list|)
block|}
else|else
block|{
name|READBACK
argument_list|(
argument|m_data->copy(data, rect);
argument_list|)
block|}
block|}
end_function
begin_function
DECL|function|scroll
name|bool
name|QRuntimePixmapData
operator|::
name|scroll
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
return|return
name|m_data
operator|->
name|scroll
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|,
name|rect
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|metric
name|int
name|QRuntimePixmapData
operator|::
name|metric
parameter_list|(
name|QPaintDevice
operator|::
name|PaintDeviceMetric
name|metric
parameter_list|)
specifier|const
block|{
return|return
name|m_data
operator|->
name|metric
argument_list|(
name|metric
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fill
name|void
name|QRuntimePixmapData
operator|::
name|fill
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
return|return
name|m_data
operator|->
name|fill
argument_list|(
name|color
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mask
name|QBitmap
name|QRuntimePixmapData
operator|::
name|mask
parameter_list|()
specifier|const
block|{
return|return
name|m_data
operator|->
name|mask
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setMask
name|void
name|QRuntimePixmapData
operator|::
name|setMask
parameter_list|(
specifier|const
name|QBitmap
modifier|&
name|mask
parameter_list|)
block|{
name|READBACK
argument_list|(
argument|m_data->setMask(mask);
argument_list|)
block|}
end_function
begin_function
DECL|function|hasAlphaChannel
name|bool
name|QRuntimePixmapData
operator|::
name|hasAlphaChannel
parameter_list|()
specifier|const
block|{
return|return
name|m_data
operator|->
name|hasAlphaChannel
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|transformed
name|QPixmap
name|QRuntimePixmapData
operator|::
name|transformed
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|Qt
operator|::
name|TransformationMode
name|mode
parameter_list|)
specifier|const
block|{
return|return
name|m_data
operator|->
name|transformed
argument_list|(
name|matrix
argument_list|,
name|mode
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setAlphaChannel
name|void
name|QRuntimePixmapData
operator|::
name|setAlphaChannel
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|alphaChannel
parameter_list|)
block|{
name|READBACK
argument_list|(
argument|m_data->setAlphaChannel(alphaChannel);
argument_list|)
block|}
end_function
begin_function
DECL|function|alphaChannel
name|QPixmap
name|QRuntimePixmapData
operator|::
name|alphaChannel
parameter_list|()
specifier|const
block|{
return|return
name|m_data
operator|->
name|alphaChannel
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toImage
name|QImage
name|QRuntimePixmapData
operator|::
name|toImage
parameter_list|()
specifier|const
block|{
return|return
name|m_data
operator|->
name|toImage
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|paintEngine
name|QPaintEngine
modifier|*
name|QRuntimePixmapData
operator|::
name|paintEngine
parameter_list|()
specifier|const
block|{
return|return
name|m_data
operator|->
name|paintEngine
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|buffer
name|QImage
modifier|*
name|QRuntimePixmapData
operator|::
name|buffer
parameter_list|()
block|{
return|return
name|m_data
operator|->
name|buffer
argument_list|()
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
end_if
begin_function
DECL|function|toNativeType
name|void
modifier|*
name|QRuntimePixmapData
operator|::
name|toNativeType
parameter_list|(
name|NativeType
name|type
parameter_list|)
block|{
return|return
name|m_data
operator|->
name|toNativeType
argument_list|(
name|type
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fromNativeType
name|void
name|QRuntimePixmapData
operator|::
name|fromNativeType
parameter_list|(
name|void
modifier|*
name|pixmap
parameter_list|,
name|NativeType
name|type
parameter_list|)
block|{
name|m_data
operator|->
name|fromNativeType
argument_list|(
name|pixmap
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|readBackInfo
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|runtimeData
name|QPixmapData
modifier|*
name|QRuntimePixmapData
operator|::
name|runtimeData
parameter_list|()
specifier|const
block|{
return|return
name|m_data
return|;
block|}
end_function
begin_constructor
DECL|function|QRuntimeWindowSurface
name|QRuntimeWindowSurface
operator|::
name|QRuntimeWindowSurface
parameter_list|(
specifier|const
name|QRuntimeGraphicsSystem
modifier|*
name|gs
parameter_list|,
name|QWidget
modifier|*
name|window
parameter_list|)
member_init_list|:
name|QWindowSurface
argument_list|(
name|window
argument_list|)
member_init_list|,
name|m_graphicsSystem
argument_list|(
name|gs
argument_list|)
block|{  }
end_constructor
begin_destructor
DECL|function|~QRuntimeWindowSurface
name|QRuntimeWindowSurface
operator|::
name|~
name|QRuntimeWindowSurface
parameter_list|()
block|{
if|if
condition|(
name|QApplicationPrivate
operator|::
name|graphics_system
condition|)
name|m_graphicsSystem
operator|->
name|removeWindowSurface
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|paintDevice
name|QPaintDevice
modifier|*
name|QRuntimeWindowSurface
operator|::
name|paintDevice
parameter_list|()
block|{
return|return
name|m_windowSurface
operator|->
name|paintDevice
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|flush
name|void
name|QRuntimeWindowSurface
operator|::
name|flush
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
block|{
name|m_windowSurface
operator|->
name|flush
argument_list|(
name|widget
argument_list|,
name|region
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|int
name|destroyPolicy
init|=
name|m_graphicsSystem
operator|->
name|windowSurfaceDestroyPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_pendingWindowSurface
operator|&&
name|destroyPolicy
operator|==
name|QRuntimeGraphicsSystem
operator|::
name|DestroyAfterFirstFlush
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QRuntimeWindowSurface::flush() - destroy pending window surface"
expr_stmt|;
endif|#
directive|endif
name|m_pendingWindowSurface
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setGeometry
name|void
name|QRuntimeWindowSurface
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|QWindowSurface
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|m_windowSurface
operator|->
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scroll
name|bool
name|QRuntimeWindowSurface
operator|::
name|scroll
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|area
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
return|return
name|m_windowSurface
operator|->
name|scroll
argument_list|(
name|area
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|beginPaint
name|void
name|QRuntimeWindowSurface
operator|::
name|beginPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|)
block|{
name|m_windowSurface
operator|->
name|beginPaint
argument_list|(
name|rgn
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endPaint
name|void
name|QRuntimeWindowSurface
operator|::
name|endPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|)
block|{
name|m_windowSurface
operator|->
name|endPaint
argument_list|(
name|rgn
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|buffer
name|QImage
modifier|*
name|QRuntimeWindowSurface
operator|::
name|buffer
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
return|return
name|m_windowSurface
operator|->
name|buffer
argument_list|(
name|widget
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|grabWidget
name|QPixmap
name|QRuntimeWindowSurface
operator|::
name|grabWidget
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rectangle
parameter_list|)
specifier|const
block|{
return|return
name|m_windowSurface
operator|->
name|grabWidget
argument_list|(
name|widget
argument_list|,
name|rectangle
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|offset
name|QPoint
name|QRuntimeWindowSurface
operator|::
name|offset
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
return|return
name|m_windowSurface
operator|->
name|offset
argument_list|(
name|widget
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|features
name|QWindowSurface
operator|::
name|WindowSurfaceFeatures
name|QRuntimeWindowSurface
operator|::
name|features
parameter_list|()
specifier|const
block|{
return|return
name|m_windowSurface
operator|->
name|features
argument_list|()
return|;
block|}
end_function
begin_constructor
DECL|function|QRuntimeGraphicsSystem
name|QRuntimeGraphicsSystem
operator|::
name|QRuntimeGraphicsSystem
parameter_list|()
member_init_list|:
name|m_windowSurfaceDestroyPolicy
argument_list|(
name|DestroyImmediately
argument_list|)
member_init_list|,
name|m_graphicsSystem
argument_list|(
literal|0
argument_list|)
block|{
name|QApplicationPrivate
operator|::
name|runtime_graphics_system
operator|=
literal|true
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_DEFAULT_RUNTIME_SYSTEM
name|m_graphicsSystemName
operator|=
name|QLatin1String
argument_list|(
name|QT_DEFAULT_RUNTIME_SYSTEM
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_graphicsSystemName
operator|.
name|isNull
argument_list|()
condition|)
endif|#
directive|endif
name|m_graphicsSystemName
operator|=
name|QLatin1String
argument_list|(
literal|"raster"
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|m_windowSurfaceDestroyPolicy
operator|=
name|DestroyAfterFirstFlush
expr_stmt|;
endif|#
directive|endif
name|m_graphicsSystem
operator|=
name|QGraphicsSystemFactory
operator|::
name|create
argument_list|(
name|m_graphicsSystemName
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|graphics_system_name
operator|=
name|QLatin1String
argument_list|(
literal|"runtime"
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|createPixmapData
name|QPixmapData
modifier|*
name|QRuntimeGraphicsSystem
operator|::
name|createPixmapData
parameter_list|(
name|QPixmapData
operator|::
name|PixelType
name|type
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|m_graphicsSystem
argument_list|)
expr_stmt|;
name|QPixmapData
modifier|*
name|data
init|=
name|m_graphicsSystem
operator|->
name|createPixmapData
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|QRuntimePixmapData
modifier|*
name|rtData
init|=
operator|new
name|QRuntimePixmapData
argument_list|(
name|this
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|rtData
operator|->
name|m_data
operator|=
name|data
expr_stmt|;
name|m_pixmapDatas
operator|<<
name|rtData
expr_stmt|;
return|return
name|rtData
return|;
block|}
end_function
begin_function
DECL|function|createWindowSurface
name|QWindowSurface
modifier|*
name|QRuntimeGraphicsSystem
operator|::
name|createWindowSurface
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|m_graphicsSystem
argument_list|)
expr_stmt|;
name|QRuntimeWindowSurface
modifier|*
name|rtSurface
init|=
operator|new
name|QRuntimeWindowSurface
argument_list|(
name|this
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|rtSurface
operator|->
name|m_windowSurface
operator|.
name|reset
argument_list|(
name|m_graphicsSystem
operator|->
name|createWindowSurface
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setWindowSurface
argument_list|(
name|rtSurface
argument_list|)
expr_stmt|;
name|m_windowSurfaces
operator|<<
name|rtSurface
expr_stmt|;
return|return
name|rtSurface
return|;
block|}
end_function
begin_function
DECL|function|setGraphicsSystem
name|void
name|QRuntimeGraphicsSystem
operator|::
name|setGraphicsSystem
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
if|if
condition|(
name|m_graphicsSystemName
operator|==
name|name
condition|)
return|return;
ifdef|#
directive|ifdef
name|QT_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QRuntimeGraphicsSystem::setGraphicsSystem( "
operator|<<
name|name
operator|<<
literal|" )"
expr_stmt|;
endif|#
directive|endif
name|QGraphicsSystem
modifier|*
name|oldSystem
init|=
name|m_graphicsSystem
decl_stmt|;
name|m_graphicsSystem
operator|=
name|QGraphicsSystemFactory
operator|::
name|create
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|m_graphicsSystemName
operator|=
name|name
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|m_graphicsSystem
argument_list|)
expr_stmt|;
name|m_pendingGraphicsSystemName
operator|=
name|QString
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_pixmapDatas
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QRuntimePixmapData
modifier|*
name|proxy
init|=
name|m_pixmapDatas
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QPixmapData
modifier|*
name|newData
init|=
name|m_graphicsSystem
operator|->
name|createPixmapData
argument_list|(
name|proxy
operator|->
name|m_data
argument_list|)
decl_stmt|;
name|newData
operator|->
name|fromImage
argument_list|(
name|proxy
operator|->
name|m_data
operator|->
name|toImage
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoOpaqueDetection
argument_list|)
expr_stmt|;
operator|delete
name|proxy
operator|->
name|m_data
expr_stmt|;
name|proxy
operator|->
name|m_data
operator|=
name|newData
expr_stmt|;
name|proxy
operator|->
name|readBackInfo
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_windowSurfaces
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QRuntimeWindowSurface
modifier|*
name|proxy
init|=
name|m_windowSurfaces
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|widget
init|=
name|proxy
operator|->
name|m_windowSurface
operator|->
name|window
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_windowSurfaceDestroyPolicy
operator|==
name|DestroyAfterFirstFlush
condition|)
name|proxy
operator|->
name|m_pendingWindowSurface
operator|.
name|reset
argument_list|(
name|proxy
operator|->
name|m_windowSurface
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
name|QWindowSurface
modifier|*
name|newWindowSurface
init|=
name|m_graphicsSystem
operator|->
name|createWindowSurface
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|newWindowSurface
operator|->
name|setGeometry
argument_list|(
name|proxy
operator|->
name|geometry
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
operator|->
name|m_windowSurface
operator|.
name|reset
argument_list|(
name|newWindowSurface
argument_list|)
expr_stmt|;
name|qt_widget_private
argument_list|(
name|widget
argument_list|)
operator|->
name|invalidateBuffer
argument_list|(
name|widget
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|delete
name|oldSystem
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removePixmapData
name|void
name|QRuntimeGraphicsSystem
operator|::
name|removePixmapData
parameter_list|(
name|QRuntimePixmapData
modifier|*
name|pixmapData
parameter_list|)
specifier|const
block|{
name|int
name|index
init|=
name|m_pixmapDatas
operator|.
name|lastIndexOf
argument_list|(
name|pixmapData
argument_list|)
decl_stmt|;
name|m_pixmapDatas
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeWindowSurface
name|void
name|QRuntimeGraphicsSystem
operator|::
name|removeWindowSurface
parameter_list|(
name|QRuntimeWindowSurface
modifier|*
name|windowSurface
parameter_list|)
specifier|const
block|{
name|int
name|index
init|=
name|m_windowSurfaces
operator|.
name|lastIndexOf
argument_list|(
name|windowSurface
argument_list|)
decl_stmt|;
name|m_windowSurfaces
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_include
include|#
directive|include
file|"qgraphicssystem_runtime.moc"
end_include
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
