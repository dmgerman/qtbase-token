begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QPRINTENGINE_QWS_P_H
end_ifndef
begin_define
DECL|macro|QPRINTENGINE_QWS_P_H
define|#
directive|define
name|QPRINTENGINE_QWS_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of other Qt classes.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtGui/qprinter.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
end_ifndef
begin_include
include|#
directive|include
file|"QtGui/qprintengine.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qbytearray.h"
end_include
begin_include
include|#
directive|include
file|"private/qpaintengine_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QtopiaPrintEnginePrivate
name|class
name|QtopiaPrintEnginePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QRasterPaintEngine
name|class
name|QRasterPaintEngine
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPrinterPrivate
name|class
name|QPrinterPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QImage
name|class
name|QImage
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPaintEngine
name|class
name|QtopiaPrintEngine
range|:
name|public
name|QPaintEngine
decl_stmt|,
name|public
name|QPrintEngine
block|{
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QtopiaPrintEngine
argument_list|)
name|public
label|:
name|QtopiaPrintEngine
argument_list|(
argument|QPrinter::PrinterMode mode
argument_list|)
empty_stmt|;
comment|// override QWSPaintEngine
name|bool
name|begin
parameter_list|(
name|QPaintDevice
modifier|*
name|dev
parameter_list|)
function_decl|;
name|bool
name|end
parameter_list|()
function_decl|;
name|void
name|drawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|)
function_decl|;
name|void
name|drawTextItem
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QTextItem
modifier|&
name|ti
parameter_list|)
function_decl|;
name|QPaintEngine
operator|::
name|Type
name|type
argument_list|()
specifier|const
block|{
return|return
name|QPaintEngine
operator|::
name|X11
return|;
block|}
name|QPaintEngine
operator|*
name|paintEngine
argument_list|()
specifier|const
expr_stmt|;
name|void
name|updateState
parameter_list|(
specifier|const
name|QPaintEngineState
modifier|&
name|state
parameter_list|)
function_decl|;
name|QRect
name|paperRect
argument_list|()
specifier|const
expr_stmt|;
name|QRect
name|pageRect
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|newPage
parameter_list|()
function_decl|;
name|bool
name|abort
parameter_list|()
function_decl|;
name|QPrinter
operator|::
name|PrinterState
name|printerState
argument_list|()
specifier|const
expr_stmt|;
name|int
name|metric
argument_list|(
name|QPaintDevice
operator|::
name|PaintDeviceMetric
name|metricType
argument_list|)
decl|const
decl_stmt|;
name|QVariant
name|property
argument_list|(
name|PrintEnginePropertyKey
name|key
argument_list|)
decl|const
decl_stmt|;
name|void
name|setProperty
parameter_list|(
name|PrintEnginePropertyKey
name|key
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
function_decl|;
name|private
label|:
name|friend
name|class
name|QPrintDialog
decl_stmt|;
name|friend
name|class
name|QPageSetupDialog
decl_stmt|;
name|void
name|clearPage
parameter_list|()
function_decl|;
name|void
name|flushPage
parameter_list|()
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|QtopiaPrintBuffer
block|{
name|public
label|:
name|QtopiaPrintBuffer
argument_list|(
argument|bool bigEndian=FALSE
argument_list|)
block|{
name|_bigEndian
operator|=
name|bigEndian
expr_stmt|;
block|}
operator|~
name|QtopiaPrintBuffer
argument_list|()
block|{}
specifier|const
name|QByteArray
operator|&
name|data
argument_list|()
specifier|const
block|{
return|return
name|_data
return|;
block|}
name|int
name|size
argument_list|()
specifier|const
block|{
return|return
name|_data
operator|.
name|size
argument_list|()
return|;
block|}
name|void
name|clear
parameter_list|()
block|{
name|_data
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|void
name|append
parameter_list|(
name|char
name|value
parameter_list|)
block|{
name|_data
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|void
name|append
parameter_list|(
name|short
name|value
parameter_list|)
function_decl|;
name|void
name|append
parameter_list|(
name|int
name|value
parameter_list|)
function_decl|;
name|void
name|append
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|array
parameter_list|)
block|{
name|_data
operator|.
name|append
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
name|void
name|patch
parameter_list|(
name|int
name|posn
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
name|void
name|pad
parameter_list|()
function_decl|;
name|private
label|:
name|QByteArray
name|_data
decl_stmt|;
name|bool
name|_bigEndian
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_define
DECL|macro|QT_QWS_PRINTER_DEFAULT_DPI
define|#
directive|define
name|QT_QWS_PRINTER_DEFAULT_DPI
value|200
end_define
begin_decl_stmt
name|class
name|QtopiaPrintEnginePrivate
range|:
name|public
name|QPaintEnginePrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QtopiaPrintEngine
argument_list|)
name|public
operator|:
name|QtopiaPrintEnginePrivate
argument_list|(
argument|QPrinter::PrinterMode m
argument_list|)
operator|:
name|mode
argument_list|(
name|m
argument_list|)
block|,
name|printerState
argument_list|(
name|QPrinter
operator|::
name|Idle
argument_list|)
block|,
name|orientation
argument_list|(
name|QPrinter
operator|::
name|Portrait
argument_list|)
block|,
name|paperSize
argument_list|(
name|QPrinter
operator|::
name|A4
argument_list|)
block|,
name|pageOrder
argument_list|(
name|QPrinter
operator|::
name|FirstPageFirst
argument_list|)
block|,
name|colorMode
argument_list|(
name|QPrinter
operator|::
name|GrayScale
argument_list|)
block|,
name|paperSource
argument_list|(
name|QPrinter
operator|::
name|OnlyOne
argument_list|)
block|,
name|resolution
argument_list|(
name|QT_QWS_PRINTER_DEFAULT_DPI
argument_list|)
block|,
name|_paintEngine
argument_list|(
literal|0
argument_list|)
block|,
name|numCopies
argument_list|(
literal|1
argument_list|)
block|,
name|outputToFile
argument_list|(
name|false
argument_list|)
block|,
name|fullPage
argument_list|(
name|false
argument_list|)
block|,
name|collateCopies
argument_list|(
name|false
argument_list|)
block|,
name|pageNumber
argument_list|(
literal|0
argument_list|)
block|,
name|pageImage
argument_list|(
literal|0
argument_list|)
block|,
name|partialByte
argument_list|(
literal|0
argument_list|)
block|,
name|partialBits
argument_list|(
literal|0
argument_list|)
block|{     }
operator|~
name|QtopiaPrintEnginePrivate
argument_list|()
block|;
name|void
name|initialize
argument_list|()
block|;
name|QPaintEngine
operator|*
name|paintEngine
argument_list|()
block|;
name|QPrinter
operator|::
name|PrinterMode
name|mode
block|;
name|QString
name|printerName
block|;
name|QString
name|outputFileName
block|;
name|QString
name|printProgram
block|;
name|QString
name|docName
block|;
name|QString
name|creator
block|;
name|QPrinter
operator|::
name|PrinterState
name|printerState
block|;
name|QPrinter
operator|::
name|Orientation
name|orientation
block|;
name|QPrinter
operator|::
name|PaperSize
name|paperSize
block|;
name|QPrinter
operator|::
name|PageOrder
name|pageOrder
block|;
name|QPrinter
operator|::
name|ColorMode
name|colorMode
block|;
name|QPrinter
operator|::
name|PaperSource
name|paperSource
block|;
name|int
name|resolution
block|;
name|QPaintEngine
operator|*
name|_paintEngine
block|;
name|int
name|numCopies
block|;
name|bool
name|outputToFile
block|;
name|bool
name|fullPage
block|;
name|bool
name|collateCopies
block|;
name|int
name|pageNumber
block|;
name|QImage
operator|*
name|pageImage
block|;
name|QtopiaPrintBuffer
name|buffer
block|;
comment|// Definitions that are only relevant to G3FAX output.
name|int
name|ifdPatch
block|;
name|int
name|partialByte
block|;
name|int
name|partialBits
block|;
name|void
name|writeG3FaxHeader
argument_list|()
block|;
name|void
name|writeG3FaxPage
argument_list|()
block|;
name|int
name|writeG3IFDEntry
argument_list|(
argument|int tag
argument_list|,
argument|int type
argument_list|,
argument|int count
argument_list|,
argument|int value
argument_list|)
block|;
name|void
name|writeG3Code
argument_list|(
argument|int code
argument_list|,
argument|int bits
argument_list|)
block|;
name|void
name|writeG3WhiteRun
argument_list|(
argument|int len
argument_list|)
block|;
name|void
name|writeG3BlackRun
argument_list|(
argument|int len
argument_list|)
block|;
name|void
name|writeG3EOL
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PRINTER
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QPRINTENGINE_QWS_P_H
end_comment
end_unit
