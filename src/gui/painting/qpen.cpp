begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qpen.h"
end_include
begin_include
include|#
directive|include
file|"qpen_p.h"
end_include
begin_include
include|#
directive|include
file|"qdatastream.h"
end_include
begin_include
include|#
directive|include
file|"qvariant.h"
end_include
begin_include
include|#
directive|include
file|"qbrush.h"
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_typedef
DECL|typedef|QPenData
typedef|typedef
name|QPenPrivate
name|QPenData
typedef|;
end_typedef
begin_comment
comment|/*!     \class QPen     \inmodule QtGui     \ingroup painting     \ingroup shared       \brief The QPen class defines how a QPainter should draw lines and outlines     of shapes.      A pen has a style(), width(), brush(), capStyle() and joinStyle().      The pen style defines the line type. The brush is used to fill     strokes generated with the pen. Use the QBrush class to specify     fill styles.  The cap style determines the line end caps that can     be drawn using QPainter, while the join style describes how joins     between two lines are drawn. The pen width can be specified in     both integer (width()) and floating point (widthF()) precision. A     line width of zero indicates a cosmetic pen.  This means that the     pen width is always drawn one pixel wide, independent of the \l     {QPainter#Coordinate Transformations}{transformation} set on the     painter.      The various settings can easily be modified using the     corresponding setStyle(), setWidth(), setBrush(), setCapStyle()     and setJoinStyle() functions (note that the painter's pen must be     reset when altering the pen's properties).      For example:      \snippet code/src_gui_painting_qpen.cpp 0      which is equivalent to      \snippet code/src_gui_painting_qpen.cpp 1      The default pen is a solid black brush with 1 width, square     cap style (Qt::SquareCap), and  bevel join style (Qt::BevelJoin).      In addition QPen provides the color() and setColor()     convenience functions to extract and set the color of the pen's     brush, respectively. Pens may also be compared and streamed.      For more information about painting in general, see the \l{Paint     System} documentation.      \tableofcontents      \section1 Pen Style      Qt provides several built-in styles represented by the     Qt::PenStyle enum:      \table     \row     \li \inlineimage qpen-solid.png     \li \inlineimage qpen-dash.png     \li \inlineimage qpen-dot.png     \row     \li Qt::SolidLine     \li Qt::DashLine     \li Qt::DotLine     \row     \li \inlineimage qpen-dashdot.png     \li \inlineimage qpen-dashdotdot.png     \li \inlineimage qpen-custom.png     \row     \li Qt::DashDotLine     \li Qt::DashDotDotLine     \li Qt::CustomDashLine     \endtable      Simply use the setStyle() function to convert the pen style to     either of the built-in styles, except the Qt::CustomDashLine style     which we will come back to shortly. Setting the style to Qt::NoPen     tells the painter to not draw lines or outlines. The default pen     style is Qt::SolidLine.      Since Qt 4.1 it is also possible to specify a custom dash pattern     using the setDashPattern() function which implicitly converts the     style of the pen to Qt::CustomDashLine. The pattern argument, a     QVector, must be specified as an even number of \l qreal entries     where the entries 1, 3, 5... are the dashes and 2, 4, 6... are the     spaces. For example, the custom pattern shown above is created     using the following code:      \snippet code/src_gui_painting_qpen.cpp 2      Note that the dash pattern is specified in units of the pens     width, e.g. a dash of length 5 in width 10 is 50 pixels long.      The currently set dash pattern can be retrieved using the     dashPattern() function. Use the isSolid() function to determine     whether the pen has a solid fill, or not.      \section1 Cap Style      The cap style defines how the end points of lines are drawn using     QPainter.  The cap style only apply to wide lines, i.e. when the     width is 1 or greater. The Qt::PenCapStyle enum provides the     following styles:      \table     \row     \li \inlineimage qpen-square.png     \li \inlineimage qpen-flat.png     \li \inlineimage qpen-roundcap.png     \row     \li Qt::SquareCap     \li Qt::FlatCap     \li Qt::RoundCap     \endtable      The Qt::SquareCap style is a square line end that covers the end     point and extends beyond it by half the line width. The     Qt::FlatCap style is a square line end that does not cover the end     point of the line. And the Qt::RoundCap style is a rounded line     end covering the end point.      The default is Qt::SquareCap.      Whether or not end points are drawn when the pen width is 0 or 1     depends on the cap style. Using Qt::SquareCap or Qt::RoundCap they     are drawn, using Qt::FlatCap they are not drawn.      \section1 Join Style      The join style defines how joins between two connected lines can     be drawn using QPainter. The join style only apply to wide lines,     i.e. when the width is 1 or greater. The Qt::PenJoinStyle enum     provides the following styles:      \table     \row     \li \inlineimage qpen-bevel.png     \li \inlineimage qpen-miter.png     \li \inlineimage qpen-roundjoin.png     \row     \li Qt::BevelJoin     \li Qt::MiterJoin     \li Qt::RoundJoin     \endtable      The Qt::BevelJoin style fills the triangular notch between the two     lines. The Qt::MiterJoin style extends the lines to meet at an     angle. And the Qt::RoundJoin style fills a circular arc between     the two lines.      The default is Qt::BevelJoin.      \image qpen-miterlimit.png      When the Qt::MiterJoin style is applied, it is possible to use the     setMiterLimit() function to specify how far the miter join can     extend from the join point. The miterLimit() is used to reduce     artifacts between line joins where the lines are close to     parallel.      The miterLimit() must be specified in units of the pens width,     e.g. a miter limit of 5 in width 10 is 50 pixels long. The     default miter limit is 2, i.e. twice the pen width in pixels.      \table 100%     \row     \li \inlineimage qpen-demo.png     \li \b {\l {painting/pathstroke}{The Path Stroking Example}}      The Path Stroking example shows Qt's built-in dash patterns and shows     how custom patterns can be used to extend the range of available     patterns.     \endtable      \sa QPainter, QBrush, {painting/pathstroke}{Path Stroking Example},         {Scribble Example} */
end_comment
begin_comment
comment|/*!   \internal */
end_comment
begin_constructor
DECL|function|QPenPrivate
specifier|inline
name|QPenPrivate
operator|::
name|QPenPrivate
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|_brush
parameter_list|,
name|qreal
name|_width
parameter_list|,
name|Qt
operator|::
name|PenStyle
name|penStyle
parameter_list|,
name|Qt
operator|::
name|PenCapStyle
name|_capStyle
parameter_list|,
name|Qt
operator|::
name|PenJoinStyle
name|_joinStyle
parameter_list|,
name|bool
name|_defaultWidth
parameter_list|)
member_init_list|:
name|ref
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|dashOffset
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|miterLimit
argument_list|(
literal|2
argument_list|)
member_init_list|,
name|cosmetic
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|defaultWidth
argument_list|(
name|_defaultWidth
argument_list|)
block|{
name|width
operator|=
name|_width
expr_stmt|;
name|brush
operator|=
name|_brush
expr_stmt|;
name|style
operator|=
name|penStyle
expr_stmt|;
name|capStyle
operator|=
name|_capStyle
expr_stmt|;
name|joinStyle
operator|=
name|_joinStyle
expr_stmt|;
block|}
end_constructor
begin_decl_stmt
DECL|variable|qpen_default_cap
specifier|static
specifier|const
name|Qt
operator|::
name|PenCapStyle
name|qpen_default_cap
init|=
name|Qt
operator|::
name|SquareCap
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qpen_default_join
specifier|static
specifier|const
name|Qt
operator|::
name|PenJoinStyle
name|qpen_default_join
init|=
name|Qt
operator|::
name|BevelJoin
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|QPenDataHolder
class|class
name|QPenDataHolder
block|{
public|public:
DECL|member|pen
name|QPenData
modifier|*
name|pen
decl_stmt|;
DECL|function|QPenDataHolder
name|QPenDataHolder
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|,
name|qreal
name|width
parameter_list|,
name|Qt
operator|::
name|PenStyle
name|penStyle
parameter_list|,
name|Qt
operator|::
name|PenCapStyle
name|penCapStyle
parameter_list|,
name|Qt
operator|::
name|PenJoinStyle
name|_joinStyle
parameter_list|)
member_init_list|:
name|pen
argument_list|(
operator|new
name|QPenData
argument_list|(
name|brush
argument_list|,
name|width
argument_list|,
name|penStyle
argument_list|,
name|penCapStyle
argument_list|,
name|_joinStyle
argument_list|)
argument_list|)
block|{ }
DECL|function|~QPenDataHolder
name|~
name|QPenDataHolder
parameter_list|()
block|{
if|if
condition|(
operator|!
name|pen
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|pen
expr_stmt|;
name|pen
operator|=
literal|0
expr_stmt|;
block|}
block|}
class|;
end_class
begin_macro
name|Q_GLOBAL_STATIC_WITH_ARGS
argument_list|(
argument|QPenDataHolder
argument_list|,
argument|defaultPenInstance
argument_list|,
argument|(Qt::black,
literal|1
argument|, Qt::SolidLine, qpen_default_cap, qpen_default_join)
argument_list|)
end_macro
begin_macro
name|Q_GLOBAL_STATIC_WITH_ARGS
argument_list|(
argument|QPenDataHolder
argument_list|,
argument|nullPenInstance
argument_list|,
argument|(Qt::black,
literal|1
argument|, Qt::NoPen, qpen_default_cap, qpen_default_join)
argument_list|)
end_macro
begin_comment
comment|/*!     Constructs a default black solid line pen with 1 width. */
end_comment
begin_constructor
DECL|function|QPen
name|QPen
operator|::
name|QPen
parameter_list|()
block|{
name|d
operator|=
name|defaultPenInstance
argument_list|()
operator|->
name|pen
expr_stmt|;
name|d
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a black pen with 1 width and the given \a style.      \sa setStyle() */
end_comment
begin_constructor
DECL|function|QPen
name|QPen
operator|::
name|QPen
parameter_list|(
name|Qt
operator|::
name|PenStyle
name|style
parameter_list|)
block|{
if|if
condition|(
name|style
operator|==
name|Qt
operator|::
name|NoPen
condition|)
block|{
name|d
operator|=
name|nullPenInstance
argument_list|()
operator|->
name|pen
expr_stmt|;
name|d
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
else|else
block|{
name|d
operator|=
operator|new
name|QPenData
argument_list|(
name|Qt
operator|::
name|black
argument_list|,
literal|1
argument_list|,
name|style
argument_list|,
name|qpen_default_cap
argument_list|,
name|qpen_default_join
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_comment
comment|/*!     Constructs a solid line pen with 1 width and the given \a color.      \sa setBrush(), setColor() */
end_comment
begin_constructor
DECL|function|QPen
name|QPen
operator|::
name|QPen
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|d
operator|=
operator|new
name|QPenData
argument_list|(
name|color
argument_list|,
literal|1
argument_list|,
name|Qt
operator|::
name|SolidLine
argument_list|,
name|qpen_default_cap
argument_list|,
name|qpen_default_join
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \fn QPen::QPen(const QBrush&brush, qreal width, Qt::PenStyle style, Qt::PenCapStyle cap, Qt::PenJoinStyle join)      Constructs a pen with the specified \a brush, \a width, pen \a style,     \a cap style and \a join style.      \sa setBrush(), setWidth(), setStyle(), setCapStyle(), setJoinStyle() */
end_comment
begin_constructor
DECL|function|QPen
name|QPen
operator|::
name|QPen
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|,
name|qreal
name|width
parameter_list|,
name|Qt
operator|::
name|PenStyle
name|s
parameter_list|,
name|Qt
operator|::
name|PenCapStyle
name|c
parameter_list|,
name|Qt
operator|::
name|PenJoinStyle
name|j
parameter_list|)
block|{
name|d
operator|=
operator|new
name|QPenData
argument_list|(
name|brush
argument_list|,
name|width
argument_list|,
name|s
argument_list|,
name|c
argument_list|,
name|j
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \fn QPen::QPen(const QPen&pen)      Constructs a pen that is a copy of the given \a pen. */
end_comment
begin_constructor
DECL|function|QPen
name|QPen
operator|::
name|QPen
parameter_list|(
specifier|const
name|QPen
modifier|&
name|p
parameter_list|)
block|{
name|d
operator|=
name|p
operator|.
name|d
expr_stmt|;
name|d
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the pen. */
end_comment
begin_destructor
DECL|function|~QPen
name|QPen
operator|::
name|~
name|QPen
parameter_list|()
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     \fn void QPen::detach()     Detaches from shared pen data to make sure that this pen is the     only one referring the data.      If multiple pens share common data, this pen dereferences the data     and gets a copy of the data. Nothing is done if there is just a     single reference. */
end_comment
begin_function
DECL|function|detach
name|void
name|QPen
operator|::
name|detach
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|==
literal|1
condition|)
return|return;
name|QPenData
modifier|*
name|x
init|=
operator|new
name|QPenData
argument_list|(
operator|*
cast|static_cast
argument_list|<
name|QPenData
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|d
expr_stmt|;
name|x
operator|->
name|ref
operator|.
name|store
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|d
operator|=
name|x
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn QPen&QPen::operator=(const QPen&pen)      Assigns the given \a pen to this pen and returns a reference to     this pen. */
end_comment
begin_function
DECL|function|operator =
name|QPen
modifier|&
name|QPen
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QPen
modifier|&
name|p
parameter_list|)
block|{
name|qAtomicAssign
argument_list|(
name|d
argument_list|,
name|p
operator|.
name|d
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QPen::swap(QPen&other)     \since 4.8      Swaps pen \a other with this pen. This operation is very     fast and never fails. */
end_comment
begin_comment
comment|/*!    Returns the pen as a QVariant. */
end_comment
begin_function
DECL|function|operator QVariant
name|QPen
operator|::
name|operator
name|QVariant
parameter_list|()
specifier|const
block|{
return|return
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Pen
argument_list|,
name|this
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn Qt::PenStyle QPen::style() const      Returns the pen style.      \sa setStyle(), {QPen#Pen Style}{Pen Style} */
end_comment
begin_function
DECL|function|style
name|Qt
operator|::
name|PenStyle
name|QPen
operator|::
name|style
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|style
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QPen::setStyle(Qt::PenStyle style)      Sets the pen style to the given \a style.      See the \l Qt::PenStyle documentation for a list of the available     styles. Since Qt 4.1 it is also possible to specify a custom dash     pattern using the setDashPattern() function which implicitly     converts the style of the pen to Qt::CustomDashLine.      \note This function resets the dash offset to zero.      \sa style(), {QPen#Pen Style}{Pen Style} */
end_comment
begin_function
DECL|function|setStyle
name|void
name|QPen
operator|::
name|setStyle
parameter_list|(
name|Qt
operator|::
name|PenStyle
name|s
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|style
operator|==
name|s
condition|)
return|return;
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|style
operator|=
name|s
expr_stmt|;
name|QPenData
modifier|*
name|dd
init|=
cast|static_cast
argument_list|<
name|QPenData
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|dd
operator|->
name|dashPattern
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dd
operator|->
name|dashOffset
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the dash pattern of this pen.      \sa style(), isSolid()  */
end_comment
begin_function
DECL|function|dashPattern
name|QVector
argument_list|<
name|qreal
argument_list|>
name|QPen
operator|::
name|dashPattern
parameter_list|()
specifier|const
block|{
name|QPenData
modifier|*
name|dd
init|=
cast|static_cast
argument_list|<
name|QPenData
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|style
operator|==
name|Qt
operator|::
name|SolidLine
operator|||
name|d
operator|->
name|style
operator|==
name|Qt
operator|::
name|NoPen
condition|)
block|{
return|return
name|QVector
argument_list|<
name|qreal
argument_list|>
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|dd
operator|->
name|dashPattern
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|qreal
name|space
init|=
literal|2
decl_stmt|;
specifier|const
name|qreal
name|dot
init|=
literal|1
decl_stmt|;
specifier|const
name|qreal
name|dash
init|=
literal|4
decl_stmt|;
switch|switch
condition|(
name|d
operator|->
name|style
condition|)
block|{
case|case
name|Qt
operator|::
name|DashLine
case|:
name|dd
operator|->
name|dashPattern
operator|.
name|reserve
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dd
operator|->
name|dashPattern
operator|<<
name|dash
operator|<<
name|space
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|DotLine
case|:
name|dd
operator|->
name|dashPattern
operator|.
name|reserve
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dd
operator|->
name|dashPattern
operator|<<
name|dot
operator|<<
name|space
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|DashDotLine
case|:
name|dd
operator|->
name|dashPattern
operator|.
name|reserve
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|dd
operator|->
name|dashPattern
operator|<<
name|dash
operator|<<
name|space
operator|<<
name|dot
operator|<<
name|space
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|DashDotDotLine
case|:
name|dd
operator|->
name|dashPattern
operator|.
name|reserve
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|dd
operator|->
name|dashPattern
operator|<<
name|dash
operator|<<
name|space
operator|<<
name|dot
operator|<<
name|space
operator|<<
name|dot
operator|<<
name|space
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
return|return
name|dd
operator|->
name|dashPattern
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the dash pattern for this pen to the given \a pattern. This     implicitly converts the style of the pen to Qt::CustomDashLine.      The pattern must be specified as an even number of positive entries     where the entries 1, 3, 5... are the dashes and 2, 4, 6... are the     spaces. For example:      \table 100%     \row     \li \inlineimage qpen-custom.png     \li     \snippet code/src_gui_painting_qpen.cpp 3     \endtable      The dash pattern is specified in units of the pens width; e.g. a     dash of length 5 in width 10 is 50 pixels long. Note that a pen     with zero width is equivalent to a cosmetic pen with a width of 1     pixel.      Each dash is also subject to cap styles so a dash of 1 with square     cap set will extend 0.5 pixels out in each direction resulting in     a total width of 2.      Note that the default cap style is Qt::SquareCap, meaning that a     square line end covers the end point and extends beyond it by half     the line width.      \sa setStyle(), dashPattern(), setCapStyle(), setCosmetic()  */
end_comment
begin_function
DECL|function|setDashPattern
name|void
name|QPen
operator|::
name|setDashPattern
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|qreal
argument_list|>
modifier|&
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|detach
argument_list|()
expr_stmt|;
name|QPenData
modifier|*
name|dd
init|=
cast|static_cast
argument_list|<
name|QPenData
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|dd
operator|->
name|dashPattern
operator|=
name|pattern
expr_stmt|;
name|d
operator|->
name|style
operator|=
name|Qt
operator|::
name|CustomDashLine
expr_stmt|;
if|if
condition|(
operator|(
name|dd
operator|->
name|dashPattern
operator|.
name|size
argument_list|()
operator|%
literal|2
operator|)
operator|==
literal|1
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPen::setDashPattern: Pattern not of even length"
argument_list|)
expr_stmt|;
name|dd
operator|->
name|dashPattern
operator|<<
literal|1
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the dash offset for the pen.      \sa setDashOffset() */
end_comment
begin_function
DECL|function|dashOffset
name|qreal
name|QPen
operator|::
name|dashOffset
parameter_list|()
specifier|const
block|{
name|QPenData
modifier|*
name|dd
init|=
cast|static_cast
argument_list|<
name|QPenData
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
decl_stmt|;
return|return
name|dd
operator|->
name|dashOffset
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the dash offset (the starting point on the dash pattern) for this pen     to the \a offset specified. The offset is measured in terms of the units used     to specify the dash pattern.      \table     \row \li \inlineimage qpen-dashpattern.png     \li For example, a pattern where each stroke is four units long, followed by a gap     of two units, will begin with the stroke when drawn as a line.      However, if the dash offset is set to 4.0, any line drawn will begin with the gap.     Values of the offset up to 4.0 will cause part of the stroke to be drawn first,     and values of the offset between 4.0 and 6.0 will cause the line to begin with     part of the gap.     \endtable      \note This implicitly converts the style of the pen to Qt::CustomDashLine. */
end_comment
begin_function
DECL|function|setDashOffset
name|void
name|QPen
operator|::
name|setDashOffset
parameter_list|(
name|qreal
name|offset
parameter_list|)
block|{
if|if
condition|(
name|qFuzzyCompare
argument_list|(
name|offset
argument_list|,
cast|static_cast
argument_list|<
name|QPenData
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|dashOffset
argument_list|)
condition|)
return|return;
name|detach
argument_list|()
expr_stmt|;
name|QPenData
modifier|*
name|dd
init|=
cast|static_cast
argument_list|<
name|QPenData
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|dd
operator|->
name|dashOffset
operator|=
name|offset
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|style
operator|!=
name|Qt
operator|::
name|CustomDashLine
condition|)
block|{
name|dd
operator|->
name|dashPattern
operator|=
name|dashPattern
argument_list|()
expr_stmt|;
name|d
operator|->
name|style
operator|=
name|Qt
operator|::
name|CustomDashLine
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the miter limit of the pen. The miter limit is only     relevant when the join style is set to Qt::MiterJoin.      \sa setMiterLimit(), {QPen#Join Style}{Join Style} */
end_comment
begin_function
DECL|function|miterLimit
name|qreal
name|QPen
operator|::
name|miterLimit
parameter_list|()
specifier|const
block|{
specifier|const
name|QPenData
modifier|*
name|dd
init|=
cast|static_cast
argument_list|<
name|QPenData
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
decl_stmt|;
return|return
name|dd
operator|->
name|miterLimit
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the miter limit of this pen to the given \a limit.      \image qpen-miterlimit.png      The miter limit describes how far a miter join can extend from the     join point. This is used to reduce artifacts between line joins     where the lines are close to parallel.      This value does only have effect when the pen style is set to     Qt::MiterJoin. The value is specified in units of the pen's width,     e.g. a miter limit of 5 in width 10 is 50 pixels long. The default     miter limit is 2, i.e. twice the pen width in pixels.      \sa miterLimit(), setJoinStyle(), {QPen#Join Style}{Join Style} */
end_comment
begin_function
DECL|function|setMiterLimit
name|void
name|QPen
operator|::
name|setMiterLimit
parameter_list|(
name|qreal
name|limit
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|QPenData
modifier|*
name|dd
init|=
cast|static_cast
argument_list|<
name|QPenData
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|dd
operator|->
name|miterLimit
operator|=
name|limit
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn qreal QPen::width() const      Returns the pen width with integer precision.      \sa setWidth(), widthF() */
end_comment
begin_function
DECL|function|width
name|int
name|QPen
operator|::
name|width
parameter_list|()
specifier|const
block|{
return|return
name|qRound
argument_list|(
name|d
operator|->
name|width
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn qreal QPen::widthF() const      Returns the pen width with floating point precision.      \sa setWidthF(), width() */
end_comment
begin_function
DECL|function|widthF
name|qreal
name|QPen
operator|::
name|widthF
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|width
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QPen::setWidth(int width)      Sets the pen width to the given \a width in pixels with integer     precision.      A line width of zero indicates a cosmetic pen. This means that the     pen width is always drawn one pixel wide, independent of the \l     {QPainter#Coordinate Transformations}{transformation} set on the     painter.      Setting a pen width with a negative value is not supported.      \sa setWidthF(), width() */
end_comment
begin_function
DECL|function|setWidth
name|void
name|QPen
operator|::
name|setWidth
parameter_list|(
name|int
name|width
parameter_list|)
block|{
if|if
condition|(
name|width
operator|<
literal|0
condition|)
name|qWarning
argument_list|(
literal|"QPen::setWidth: Setting a pen width with a negative value is not defined"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|qreal
operator|)
name|width
operator|==
name|d
operator|->
name|width
condition|)
return|return;
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|width
operator|=
name|width
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the pen width to the given \a width in pixels with floating point     precision.      A line width of zero indicates a cosmetic pen. This means that the     pen width is always drawn one pixel wide, independent of the \l     {QPainter#Coordinate Transformations}{transformation} on the     painter.      Setting a pen width with a negative value is not supported.      \sa setWidth(), widthF() */
end_comment
begin_function
DECL|function|setWidthF
name|void
name|QPen
operator|::
name|setWidthF
parameter_list|(
name|qreal
name|width
parameter_list|)
block|{
if|if
condition|(
name|width
operator|<
literal|0.f
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPen::setWidthF: Setting a pen width with a negative value is not defined"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|qAbs
argument_list|(
name|d
operator|->
name|width
operator|-
name|width
argument_list|)
operator|<
literal|0.00000001f
condition|)
return|return;
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|width
operator|=
name|width
expr_stmt|;
name|d
operator|->
name|defaultWidth
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the pen's cap style.      \sa setCapStyle(), {QPen#Cap Style}{Cap Style} */
end_comment
begin_function
DECL|function|capStyle
name|Qt
operator|::
name|PenCapStyle
name|QPen
operator|::
name|capStyle
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|capStyle
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QPen::setCapStyle(Qt::PenCapStyle style)      Sets the pen's cap style to the given \a style. The default value     is Qt::SquareCap.      \sa capStyle(), {QPen#Cap Style}{Cap Style} */
end_comment
begin_function
DECL|function|setCapStyle
name|void
name|QPen
operator|::
name|setCapStyle
parameter_list|(
name|Qt
operator|::
name|PenCapStyle
name|c
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|capStyle
operator|==
name|c
condition|)
return|return;
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|capStyle
operator|=
name|c
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the pen's join style.      \sa setJoinStyle(), {QPen#Join Style}{Join Style} */
end_comment
begin_function
DECL|function|joinStyle
name|Qt
operator|::
name|PenJoinStyle
name|QPen
operator|::
name|joinStyle
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|joinStyle
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QPen::setJoinStyle(Qt::PenJoinStyle style)      Sets the pen's join style to the given \a style. The default value     is Qt::BevelJoin.      \sa joinStyle(), {QPen#Join Style}{Join Style} */
end_comment
begin_function
DECL|function|setJoinStyle
name|void
name|QPen
operator|::
name|setJoinStyle
parameter_list|(
name|Qt
operator|::
name|PenJoinStyle
name|j
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|joinStyle
operator|==
name|j
condition|)
return|return;
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|joinStyle
operator|=
name|j
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn const QColor&QPen::color() const      Returns the color of this pen's brush.      \sa brush(), setColor() */
end_comment
begin_function
DECL|function|color
name|QColor
name|QPen
operator|::
name|color
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|brush
operator|.
name|color
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QPen::setColor(const QColor&color)      Sets the color of this pen's brush to the given \a color.      \sa setBrush(), color() */
end_comment
begin_function
DECL|function|setColor
name|void
name|QPen
operator|::
name|setColor
parameter_list|(
specifier|const
name|QColor
modifier|&
name|c
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|brush
operator|=
name|QBrush
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the brush used to fill strokes generated with this pen. */
end_comment
begin_function
DECL|function|brush
name|QBrush
name|QPen
operator|::
name|brush
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|brush
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the brush used to fill strokes generated with this pen to the given     \a brush.      \sa brush(), setColor() */
end_comment
begin_function
DECL|function|setBrush
name|void
name|QPen
operator|::
name|setBrush
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|d
operator|->
name|brush
operator|=
name|brush
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the pen has a solid fill, otherwise false.      \sa style(), dashPattern() */
end_comment
begin_function
DECL|function|isSolid
name|bool
name|QPen
operator|::
name|isSolid
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|brush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidPattern
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the pen is cosmetic; otherwise returns false.      Cosmetic pens are used to draw strokes that have a constant width     regardless of any transformations applied to the QPainter they are     used with. Drawing a shape with a cosmetic pen ensures that its     outline will have the same thickness at different scale factors.      A zero width pen is cosmetic by default.      \sa setCosmetic(), widthF() */
end_comment
begin_function
DECL|function|isCosmetic
name|bool
name|QPen
operator|::
name|isCosmetic
parameter_list|()
specifier|const
block|{
name|QPenData
modifier|*
name|dd
init|=
cast|static_cast
argument_list|<
name|QPenData
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
decl_stmt|;
return|return
operator|(
name|dd
operator|->
name|cosmetic
operator|==
literal|true
operator|)
operator|||
name|d
operator|->
name|width
operator|==
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Sets this pen to cosmetic or non-cosmetic, depending on the value of     \a cosmetic.      \sa isCosmetic() */
end_comment
begin_function
DECL|function|setCosmetic
name|void
name|QPen
operator|::
name|setCosmetic
parameter_list|(
name|bool
name|cosmetic
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|QPenData
modifier|*
name|dd
init|=
cast|static_cast
argument_list|<
name|QPenData
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|dd
operator|->
name|cosmetic
operator|=
name|cosmetic
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QPen::operator!=(const QPen&pen) const      Returns true if the pen is different from the given \a pen;     otherwise false. Two pens are different if they have different     styles, widths or colors.      \sa operator==() */
end_comment
begin_comment
comment|/*!     \fn bool QPen::operator==(const QPen&pen) const      Returns true if the pen is equal to the given \a pen; otherwise     false. Two pens are equal if they have equal styles, widths and     colors.      \sa operator!=() */
end_comment
begin_function
DECL|function|operator ==
name|bool
name|QPen
operator|::
name|operator
name|==
parameter_list|(
specifier|const
name|QPen
modifier|&
name|p
parameter_list|)
specifier|const
block|{
name|QPenData
modifier|*
name|dd
init|=
cast|static_cast
argument_list|<
name|QPenData
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|QPenData
modifier|*
name|pdd
init|=
cast|static_cast
argument_list|<
name|QPenData
operator|*
argument_list|>
argument_list|(
name|p
operator|.
name|d
argument_list|)
decl_stmt|;
return|return
operator|(
name|p
operator|.
name|d
operator|==
name|d
operator|)
operator|||
operator|(
name|p
operator|.
name|d
operator|->
name|style
operator|==
name|d
operator|->
name|style
operator|&&
name|p
operator|.
name|d
operator|->
name|capStyle
operator|==
name|d
operator|->
name|capStyle
operator|&&
name|p
operator|.
name|d
operator|->
name|joinStyle
operator|==
name|d
operator|->
name|joinStyle
operator|&&
name|p
operator|.
name|d
operator|->
name|width
operator|==
name|d
operator|->
name|width
operator|&&
name|pdd
operator|->
name|miterLimit
operator|==
name|dd
operator|->
name|miterLimit
operator|&&
operator|(
name|d
operator|->
name|style
operator|!=
name|Qt
operator|::
name|CustomDashLine
operator|||
operator|(
name|qFuzzyCompare
argument_list|(
name|pdd
operator|->
name|dashOffset
argument_list|,
name|dd
operator|->
name|dashOffset
argument_list|)
operator|&&
name|pdd
operator|->
name|dashPattern
operator|==
name|dd
operator|->
name|dashPattern
operator|)
operator|)
operator|&&
name|p
operator|.
name|d
operator|->
name|brush
operator|==
name|d
operator|->
name|brush
operator|&&
name|pdd
operator|->
name|cosmetic
operator|==
name|dd
operator|->
name|cosmetic
operator|&&
name|pdd
operator|->
name|defaultWidth
operator|==
name|dd
operator|->
name|defaultWidth
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QPen::isDetached()      \internal */
end_comment
begin_function
DECL|function|isDetached
name|bool
name|QPen
operator|::
name|isDetached
parameter_list|()
block|{
return|return
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|==
literal|1
return|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   QPen stream functions  *****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_comment
comment|/*!     \fn QDataStream&operator<<(QDataStream&stream, const QPen&pen)     \relates QPen      Writes the given \a pen to the given \a stream and returns a reference to     the \a stream.      \sa {Serializing Qt Data Types} */
end_comment
begin_function
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
specifier|const
name|QPen
modifier|&
name|p
parameter_list|)
block|{
name|QPenData
modifier|*
name|dd
init|=
cast|static_cast
argument_list|<
name|QPenData
operator|*
argument_list|>
argument_list|(
name|p
operator|.
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|<
literal|3
condition|)
block|{
name|s
operator|<<
operator|(
name|quint8
operator|)
name|p
operator|.
name|style
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|<
name|QDataStream
operator|::
name|Qt_4_3
condition|)
block|{
name|s
operator|<<
call|(
name|quint8
call|)
argument_list|(
name|p
operator|.
name|style
argument_list|()
operator||
name|p
operator|.
name|capStyle
argument_list|()
operator||
name|p
operator|.
name|joinStyle
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|<<
call|(
name|quint16
call|)
argument_list|(
name|p
operator|.
name|style
argument_list|()
operator||
name|p
operator|.
name|capStyle
argument_list|()
operator||
name|p
operator|.
name|joinStyle
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|<<
call|(
name|bool
call|)
argument_list|(
name|dd
operator|->
name|cosmetic
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|<
literal|7
condition|)
block|{
name|s
operator|<<
operator|(
name|quint8
operator|)
name|p
operator|.
name|width
argument_list|()
expr_stmt|;
name|s
operator|<<
name|p
operator|.
name|color
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|s
operator|<<
name|double
argument_list|(
name|p
operator|.
name|widthF
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|<<
name|p
operator|.
name|brush
argument_list|()
expr_stmt|;
name|s
operator|<<
name|double
argument_list|(
name|p
operator|.
name|miterLimit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|double
argument_list|)
condition|)
block|{
name|s
operator|<<
name|p
operator|.
name|dashPattern
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// ensure that we write doubles here instead of streaming the pattern
comment|// directly; otherwise, platforms that redefine qreal might generate
comment|// data that cannot be read on other platforms.
name|QVector
argument_list|<
name|qreal
argument_list|>
name|pattern
init|=
name|p
operator|.
name|dashPattern
argument_list|()
decl_stmt|;
name|s
operator|<<
name|quint32
argument_list|(
name|pattern
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pattern
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|s
operator|<<
name|double
argument_list|(
name|pattern
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|>=
literal|9
condition|)
name|s
operator|<<
name|double
argument_list|(
name|p
operator|.
name|dashOffset
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|>=
name|QDataStream
operator|::
name|Qt_5_0
condition|)
name|s
operator|<<
name|bool
argument_list|(
name|dd
operator|->
name|defaultWidth
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QDataStream&operator>>(QDataStream&stream, QPen&pen)     \relates QPen      Reads a pen from the given \a stream into the given \a pen and     returns a reference to the \a stream.      \sa {Serializing Qt Data Types} */
end_comment
begin_function
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
name|QPen
modifier|&
name|p
parameter_list|)
block|{
name|quint16
name|style
decl_stmt|;
name|quint8
name|width8
init|=
literal|0
decl_stmt|;
name|double
name|width
init|=
literal|0
decl_stmt|;
name|QColor
name|color
decl_stmt|;
name|QBrush
name|brush
decl_stmt|;
name|double
name|miterLimit
init|=
literal|2
decl_stmt|;
name|QVector
argument_list|<
name|qreal
argument_list|>
name|dashPattern
decl_stmt|;
name|double
name|dashOffset
init|=
literal|0
decl_stmt|;
name|bool
name|cosmetic
init|=
literal|false
decl_stmt|;
name|bool
name|defaultWidth
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|<
name|QDataStream
operator|::
name|Qt_4_3
condition|)
block|{
name|quint8
name|style8
decl_stmt|;
name|s
operator|>>
name|style8
expr_stmt|;
name|style
operator|=
name|style8
expr_stmt|;
block|}
else|else
block|{
name|s
operator|>>
name|style
expr_stmt|;
name|s
operator|>>
name|cosmetic
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|<
literal|7
condition|)
block|{
name|s
operator|>>
name|width8
expr_stmt|;
name|s
operator|>>
name|color
expr_stmt|;
name|brush
operator|=
name|color
expr_stmt|;
name|width
operator|=
name|width8
expr_stmt|;
block|}
else|else
block|{
name|s
operator|>>
name|width
expr_stmt|;
name|s
operator|>>
name|brush
expr_stmt|;
name|s
operator|>>
name|miterLimit
expr_stmt|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|double
argument_list|)
condition|)
block|{
name|s
operator|>>
name|dashPattern
expr_stmt|;
block|}
else|else
block|{
name|quint32
name|numDashes
decl_stmt|;
name|s
operator|>>
name|numDashes
expr_stmt|;
name|double
name|dash
decl_stmt|;
for|for
control|(
name|quint32
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDashes
condition|;
operator|++
name|i
control|)
block|{
name|s
operator|>>
name|dash
expr_stmt|;
name|dashPattern
operator|<<
name|dash
expr_stmt|;
block|}
block|}
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|>=
literal|9
condition|)
name|s
operator|>>
name|dashOffset
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|>=
name|QDataStream
operator|::
name|Qt_5_0
condition|)
block|{
name|s
operator|>>
name|defaultWidth
expr_stmt|;
block|}
else|else
block|{
comment|// best we can do for legacy pens
name|defaultWidth
operator|=
name|qFuzzyIsNull
argument_list|(
name|width
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|detach
argument_list|()
expr_stmt|;
name|QPenData
modifier|*
name|dd
init|=
cast|static_cast
argument_list|<
name|QPenData
operator|*
argument_list|>
argument_list|(
name|p
operator|.
name|d
argument_list|)
decl_stmt|;
name|dd
operator|->
name|width
operator|=
name|width
expr_stmt|;
name|dd
operator|->
name|brush
operator|=
name|brush
expr_stmt|;
name|dd
operator|->
name|style
operator|=
name|Qt
operator|::
name|PenStyle
argument_list|(
name|style
operator|&
name|Qt
operator|::
name|MPenStyle
argument_list|)
expr_stmt|;
name|dd
operator|->
name|capStyle
operator|=
name|Qt
operator|::
name|PenCapStyle
argument_list|(
name|style
operator|&
name|Qt
operator|::
name|MPenCapStyle
argument_list|)
expr_stmt|;
name|dd
operator|->
name|joinStyle
operator|=
name|Qt
operator|::
name|PenJoinStyle
argument_list|(
name|style
operator|&
name|Qt
operator|::
name|MPenJoinStyle
argument_list|)
expr_stmt|;
name|dd
operator|->
name|dashPattern
operator|=
name|dashPattern
expr_stmt|;
name|dd
operator|->
name|miterLimit
operator|=
name|miterLimit
expr_stmt|;
name|dd
operator|->
name|dashOffset
operator|=
name|dashOffset
expr_stmt|;
name|dd
operator|->
name|cosmetic
operator|=
name|cosmetic
expr_stmt|;
name|dd
operator|->
name|defaultWidth
operator|=
name|defaultWidth
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_DATASTREAM
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|dbg
parameter_list|,
specifier|const
name|QPen
modifier|&
name|p
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|PEN_STYLES
index|[]
init|=
block|{
literal|"NoPen"
block|,
literal|"SolidLine"
block|,
literal|"DashLine"
block|,
literal|"DotLine"
block|,
literal|"DashDotLine"
block|,
literal|"DashDotDotLine"
block|,
literal|"CustomDashLine"
block|}
decl_stmt|;
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QPen("
operator|<<
name|p
operator|.
name|width
argument_list|()
operator|<<
literal|','
operator|<<
name|p
operator|.
name|brush
argument_list|()
operator|<<
literal|','
operator|<<
name|PEN_STYLES
index|[
name|p
operator|.
name|style
argument_list|()
index|]
operator|<<
literal|','
operator|<<
name|int
argument_list|(
name|p
operator|.
name|capStyle
argument_list|()
argument_list|)
operator|<<
literal|','
operator|<<
name|int
argument_list|(
name|p
operator|.
name|joinStyle
argument_list|()
argument_list|)
operator|<<
literal|','
operator|<<
name|p
operator|.
name|dashPattern
argument_list|()
operator|<<
literal|','
operator|<<
name|p
operator|.
name|dashOffset
argument_list|()
operator|<<
literal|','
operator|<<
name|p
operator|.
name|miterLimit
argument_list|()
operator|<<
literal|')'
expr_stmt|;
return|return
name|dbg
operator|.
name|space
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \fn DataPtr&QPen::data_ptr()     \internal */
end_comment
begin_comment
comment|/*!     \typedef QPen::DataPtr      \internal */
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_undef
DECL|macro|QT_COMPILING_QPEN
undef|#
directive|undef
name|QT_COMPILING_QPEN
end_undef
end_unit
