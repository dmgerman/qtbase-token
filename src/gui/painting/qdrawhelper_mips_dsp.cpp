begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 MIPS Technologies, www.mips.com, author Damir Tatalovic<dtatalovic@mips.com> ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<private/qdrawhelper_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qdrawhelper_mips_dsp_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_raster_p.h>
end_include
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|QT_HAVE_MIPS_DSP
argument_list|)
specifier|extern
literal|"C"
name|uint
name|INTERPOLATE_PIXEL_255_asm_mips_dsp
argument_list|(
argument|uint x
argument_list|,
argument|uint a
argument_list|,
argument|uint y
argument_list|,
argument|uint b
argument_list|)
expr_stmt|;
end_expr_stmt
begin_extern
extern|extern
literal|"C"
name|uint
name|BYTE_MUL_asm_mips_dsp
parameter_list|(
name|uint
name|x
parameter_list|,
name|uint
name|a
parameter_list|)
function_decl|;
end_extern
begin_extern
extern|extern
literal|"C"
name|uint
modifier|*
name|destfetchARGB32_asm_mips_dsp
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|uint
modifier|*
name|data
parameter_list|,
name|int
name|length
parameter_list|)
function_decl|;
end_extern
begin_extern
extern|extern
literal|"C"
name|uint
modifier|*
name|qt_destStoreARGB32_asm_mips_dsp
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|uint
modifier|*
name|data
parameter_list|,
name|int
name|length
parameter_list|)
function_decl|;
end_extern
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_HAVE_MIPS_DSPR2
argument_list|)
end_if
begin_extern
extern|extern
literal|"C"
name|uint
name|INTERPOLATE_PIXEL_255_asm_mips_dspr2
parameter_list|(
name|uint
name|x
parameter_list|,
name|uint
name|a
parameter_list|,
name|uint
name|y
parameter_list|,
name|uint
name|b
parameter_list|)
function_decl|;
end_extern
begin_extern
extern|extern
literal|"C"
name|uint
name|BYTE_MUL_asm_mips_dspr2
parameter_list|(
name|uint
name|x
parameter_list|,
name|uint
name|a
parameter_list|)
function_decl|;
end_extern
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_HAVE_MIPS_DSPR2
end_comment
begin_function
DECL|function|qt_blend_argb32_on_argb32_mips_dsp
name|void
name|qt_blend_argb32_on_argb32_mips_dsp
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|const_alpha
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|fprintf
argument_list|(
name|stdout
argument_list|,
literal|"qt_blend_argb32_on_argb32: dst=(%p, %d), src=(%p, %d), dim=(%d, %d) alpha=%d\n"
argument_list|,
name|destPixels
argument_list|,
name|dbpl
argument_list|,
name|srcPixels
argument_list|,
name|sbpl
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
name|fflush
argument_list|(
name|stdout
argument_list|)
expr_stmt|;
endif|#
directive|endif
specifier|const
name|uint
modifier|*
name|src
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|srcPixels
decl_stmt|;
name|uint
modifier|*
name|dst
init|=
operator|(
name|uint
operator|*
operator|)
name|destPixels
decl_stmt|;
if|if
condition|(
name|const_alpha
operator|==
literal|256
condition|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
name|uint
name|s
init|=
name|src
index|[
name|x
index|]
decl_stmt|;
if|if
condition|(
name|s
operator|>=
literal|0xff000000
condition|)
name|dst
index|[
name|x
index|]
operator|=
name|s
expr_stmt|;
elseif|else
if|if
condition|(
name|s
operator|!=
literal|0
condition|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_HAVE_MIPS_DSPR2
argument_list|)
name|dst
index|[
name|x
index|]
operator|=
name|s
operator|+
name|BYTE_MUL_asm_mips_dsp
argument_list|(
name|dst
index|[
name|x
index|]
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|s
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|dst
index|[
name|x
index|]
operator|=
name|s
operator|+
name|BYTE_MUL_asm_mips_dspr2
argument_list|(
name|dst
index|[
name|x
index|]
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|s
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|dst
operator|=
operator|(
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
name|uchar
operator|*
operator|)
name|dst
operator|)
operator|+
name|dbpl
operator|)
expr_stmt|;
name|src
operator|=
operator|(
specifier|const
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|src
operator|)
operator|+
name|sbpl
operator|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|const_alpha
operator|!=
literal|0
condition|)
block|{
name|const_alpha
operator|=
operator|(
name|const_alpha
operator|*
literal|255
operator|)
operator|>>
literal|8
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_HAVE_MIPS_DSPR2
argument_list|)
name|uint
name|s
init|=
name|BYTE_MUL_asm_mips_dsp
argument_list|(
name|src
index|[
name|x
index|]
argument_list|,
name|const_alpha
argument_list|)
decl_stmt|;
name|dst
index|[
name|x
index|]
operator|=
name|s
operator|+
name|BYTE_MUL_asm_mips_dsp
argument_list|(
name|dst
index|[
name|x
index|]
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|s
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|uint
name|s
init|=
name|BYTE_MUL_asm_mips_dspr2
argument_list|(
name|src
index|[
name|x
index|]
argument_list|,
name|const_alpha
argument_list|)
decl_stmt|;
name|dst
index|[
name|x
index|]
operator|=
name|s
operator|+
name|BYTE_MUL_asm_mips_dspr2
argument_list|(
name|dst
index|[
name|x
index|]
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|s
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|dst
operator|=
operator|(
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
name|uchar
operator|*
operator|)
name|dst
operator|)
operator|+
name|dbpl
operator|)
expr_stmt|;
name|src
operator|=
operator|(
specifier|const
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|src
operator|)
operator|+
name|sbpl
operator|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|qt_blend_rgb32_on_rgb32_mips_dsp
name|void
name|qt_blend_rgb32_on_rgb32_mips_dsp
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|const_alpha
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG_DRAW
name|fprintf
argument_list|(
name|stdout
argument_list|,
literal|"qt_blend_rgb32_on_rgb32: dst=(%p, %d), src=(%p, %d), dim=(%d, %d) alpha=%d\n"
argument_list|,
name|destPixels
argument_list|,
name|dbpl
argument_list|,
name|srcPixels
argument_list|,
name|sbpl
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
name|fflush
argument_list|(
name|stdout
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|const_alpha
operator|!=
literal|256
condition|)
block|{
name|qt_blend_argb32_on_argb32_mips_dsp
argument_list|(
name|destPixels
argument_list|,
name|dbpl
argument_list|,
name|srcPixels
argument_list|,
name|sbpl
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|uint
modifier|*
name|src
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|srcPixels
decl_stmt|;
name|uint
modifier|*
name|dst
init|=
operator|(
name|uint
operator|*
operator|)
name|destPixels
decl_stmt|;
name|int
name|len
init|=
name|w
operator|*
literal|4
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
name|memcpy
argument_list|(
name|dst
argument_list|,
name|src
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|dst
operator|=
operator|(
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
name|uchar
operator|*
operator|)
name|dst
operator|)
operator|+
name|dbpl
operator|)
expr_stmt|;
name|src
operator|=
operator|(
specifier|const
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|src
operator|)
operator|+
name|sbpl
operator|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Source_mips_dsp
name|void
name|comp_func_Source_mips_dsp
parameter_list|(
name|uint
modifier|*
name|dest
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
operator|::
name|memcpy
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|length
operator|*
sizeof|sizeof
argument_list|(
name|uint
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|ialpha
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_HAVE_MIPS_DSPR2
argument_list|)
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255_asm_mips_dsp
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|,
name|dest
index|[
name|i
index|]
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
else|#
directive|else
name|dest
index|[
name|i
index|]
operator|=
name|INTERPOLATE_PIXEL_255_asm_mips_dspr2
argument_list|(
name|src
index|[
name|i
index|]
argument_list|,
name|const_alpha
argument_list|,
name|dest
index|[
name|i
index|]
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
block|}
end_function
begin_function
DECL|function|qt_destFetchARGB32_mips_dsp
name|uint
modifier|*
name|QT_FASTCALL
name|qt_destFetchARGB32_mips_dsp
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|length
parameter_list|)
block|{
specifier|const
name|uint
modifier|*
name|data
init|=
operator|(
specifier|const
name|uint
operator|*
operator|)
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
operator|+
name|x
decl_stmt|;
name|buffer
operator|=
name|destfetchARGB32_asm_mips_dsp
argument_list|(
name|buffer
argument_list|,
name|data
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
end_function
begin_function
DECL|function|qt_destStoreARGB32_mips_dsp
name|void
name|QT_FASTCALL
name|qt_destStoreARGB32_mips_dsp
parameter_list|(
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
specifier|const
name|uint
modifier|*
name|buffer
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|uint
modifier|*
name|data
init|=
operator|(
name|uint
operator|*
operator|)
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
operator|+
name|x
decl_stmt|;
name|qt_destStoreARGB32_asm_mips_dsp
argument_list|(
name|data
argument_list|,
name|buffer
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_HAVE_MIPS_DSP
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
