begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<private/qimagescale_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qdrawhelper_p.h>
end_include
begin_include
include|#
directive|include
file|"qimage.h"
end_include
begin_include
include|#
directive|include
file|"qcolor.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*  * Copyright (C) 2004, 2005 Daniel M. Duley  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  */
end_comment
begin_comment
comment|/* OTHER CREDITS:  *  * This is the normal smoothscale method, based on Imlib2's smoothscale.  *  * Originally I took the algorithm used in NetPBM and Qt and added MMX/3dnow  * optimizations. It ran in about 1/2 the time as Qt. Then I ported Imlib's  * C algorithm and it ran at about the same speed as my MMX optimized one...  * Finally I ported Imlib's MMX version and it ran in less than half the  * time as my MMX algorithm, (taking only a quarter of the time Qt does).  * After further optimization it seems to run at around 1/6th.  *  * Changes include formatting, namespaces and other C++'ings, removal of old  * #ifdef'ed code, and removal of unneeded border calculation code.  * Later the code has been refactored, an SSE4.1 optimizated path have been  * added instead of the removed MMX assembler, and scaling of clipped area  * removed.  *  * Imlib2 is (C) Carsten Haitzler and various contributors. The MMX code  * is by Willem Monsuwe<willem@stack.nl>. All other modifications are  * (C) Daniel M. Duley.  */
end_comment
begin_namespace
DECL|namespace|QImageScale
namespace|namespace
name|QImageScale
block|{
specifier|const
name|unsigned
name|int
modifier|*
modifier|*
name|qimageCalcYPoints
parameter_list|(
specifier|const
name|unsigned
name|int
modifier|*
name|src
parameter_list|,
name|int
name|sw
parameter_list|,
name|int
name|sh
parameter_list|,
name|int
name|dh
parameter_list|)
function_decl|;
name|int
modifier|*
name|qimageCalcXPoints
parameter_list|(
name|int
name|sw
parameter_list|,
name|int
name|dw
parameter_list|)
function_decl|;
name|int
modifier|*
name|qimageCalcApoints
parameter_list|(
name|int
name|s
parameter_list|,
name|int
name|d
parameter_list|,
name|int
name|up
parameter_list|)
function_decl|;
name|QImageScaleInfo
modifier|*
name|qimageFreeScaleInfo
parameter_list|(
name|QImageScaleInfo
modifier|*
name|isi
parameter_list|)
function_decl|;
name|QImageScaleInfo
modifier|*
name|qimageCalcScaleInfo
parameter_list|(
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
name|int
name|sw
parameter_list|,
name|int
name|sh
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|,
name|char
name|aa
parameter_list|)
function_decl|;
block|}
end_namespace
begin_using
using|using
namespace|namespace
name|QImageScale
namespace|;
end_using
begin_comment
comment|//
end_comment
begin_comment
comment|// Code ported from Imlib...
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|qimageCalcYPoints
specifier|const
name|unsigned
name|int
modifier|*
modifier|*
name|QImageScale
operator|::
name|qimageCalcYPoints
parameter_list|(
specifier|const
name|unsigned
name|int
modifier|*
name|src
parameter_list|,
name|int
name|sw
parameter_list|,
name|int
name|sh
parameter_list|,
name|int
name|dh
parameter_list|)
block|{
specifier|const
name|unsigned
name|int
modifier|*
modifier|*
name|p
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|,
name|rv
init|=
literal|0
decl_stmt|;
name|qint64
name|val
decl_stmt|,
name|inc
decl_stmt|;
if|if
condition|(
name|dh
operator|<
literal|0
condition|)
block|{
name|dh
operator|=
operator|-
name|dh
expr_stmt|;
name|rv
operator|=
literal|1
expr_stmt|;
block|}
name|p
operator|=
operator|new
specifier|const
name|unsigned
name|int
operator|*
index|[
name|dh
operator|+
literal|1
index|]
expr_stmt|;
name|int
name|up
init|=
name|qAbs
argument_list|(
name|dh
argument_list|)
operator|>=
name|sh
decl_stmt|;
name|val
operator|=
name|up
condition|?
literal|0x8000
operator|*
name|sh
operator|/
name|dh
operator|-
literal|0x8000
else|:
literal|0
expr_stmt|;
name|inc
operator|=
operator|(
operator|(
operator|(
name|qint64
operator|)
name|sh
operator|)
operator|<<
literal|16
operator|)
operator|/
name|dh
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dh
condition|;
name|i
operator|++
control|)
block|{
name|p
index|[
name|j
operator|++
index|]
operator|=
name|src
operator|+
name|qMax
argument_list|(
literal|0LL
argument_list|,
name|val
operator|>>
literal|16
argument_list|)
operator|*
name|sw
expr_stmt|;
name|val
operator|+=
name|inc
expr_stmt|;
block|}
if|if
condition|(
name|rv
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|dh
operator|/
literal|2
init|;
operator|--
name|i
operator|>=
literal|0
condition|;
control|)
block|{
specifier|const
name|unsigned
name|int
modifier|*
name|tmp
init|=
name|p
index|[
name|i
index|]
decl_stmt|;
name|p
index|[
name|i
index|]
operator|=
name|p
index|[
name|dh
operator|-
name|i
operator|-
literal|1
index|]
expr_stmt|;
name|p
index|[
name|dh
operator|-
name|i
operator|-
literal|1
index|]
operator|=
name|tmp
expr_stmt|;
block|}
block|}
return|return
operator|(
name|p
operator|)
return|;
block|}
end_function
begin_function
DECL|function|qimageCalcXPoints
name|int
modifier|*
name|QImageScale
operator|::
name|qimageCalcXPoints
parameter_list|(
name|int
name|sw
parameter_list|,
name|int
name|dw
parameter_list|)
block|{
name|int
modifier|*
name|p
decl_stmt|,
name|j
init|=
literal|0
decl_stmt|,
name|rv
init|=
literal|0
decl_stmt|;
name|qint64
name|val
decl_stmt|,
name|inc
decl_stmt|;
if|if
condition|(
name|dw
operator|<
literal|0
condition|)
block|{
name|dw
operator|=
operator|-
name|dw
expr_stmt|;
name|rv
operator|=
literal|1
expr_stmt|;
block|}
name|p
operator|=
operator|new
name|int
index|[
name|dw
operator|+
literal|1
index|]
expr_stmt|;
name|int
name|up
init|=
name|qAbs
argument_list|(
name|dw
argument_list|)
operator|>=
name|sw
decl_stmt|;
name|val
operator|=
name|up
condition|?
literal|0x8000
operator|*
name|sw
operator|/
name|dw
operator|-
literal|0x8000
else|:
literal|0
expr_stmt|;
name|inc
operator|=
operator|(
operator|(
operator|(
name|qint64
operator|)
name|sw
operator|)
operator|<<
literal|16
operator|)
operator|/
name|dw
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dw
condition|;
name|i
operator|++
control|)
block|{
name|p
index|[
name|j
operator|++
index|]
operator|=
name|qMax
argument_list|(
literal|0LL
argument_list|,
name|val
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|val
operator|+=
name|inc
expr_stmt|;
block|}
if|if
condition|(
name|rv
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|dw
operator|/
literal|2
init|;
operator|--
name|i
operator|>=
literal|0
condition|;
control|)
block|{
name|int
name|tmp
init|=
name|p
index|[
name|i
index|]
decl_stmt|;
name|p
index|[
name|i
index|]
operator|=
name|p
index|[
name|dw
operator|-
name|i
operator|-
literal|1
index|]
expr_stmt|;
name|p
index|[
name|dw
operator|-
name|i
operator|-
literal|1
index|]
operator|=
name|tmp
expr_stmt|;
block|}
block|}
return|return
name|p
return|;
block|}
end_function
begin_function
DECL|function|qimageCalcApoints
name|int
modifier|*
name|QImageScale
operator|::
name|qimageCalcApoints
parameter_list|(
name|int
name|s
parameter_list|,
name|int
name|d
parameter_list|,
name|int
name|up
parameter_list|)
block|{
name|int
modifier|*
name|p
decl_stmt|,
name|j
init|=
literal|0
decl_stmt|,
name|rv
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|d
operator|<
literal|0
condition|)
block|{
name|rv
operator|=
literal|1
expr_stmt|;
name|d
operator|=
operator|-
name|d
expr_stmt|;
block|}
name|p
operator|=
operator|new
name|int
index|[
name|d
index|]
expr_stmt|;
if|if
condition|(
name|up
condition|)
block|{
comment|/* scaling up */
name|qint64
name|val
init|=
literal|0x8000
operator|*
name|s
operator|/
name|d
operator|-
literal|0x8000
decl_stmt|;
name|qint64
name|inc
init|=
operator|(
operator|(
operator|(
name|qint64
operator|)
name|s
operator|)
operator|<<
literal|16
operator|)
operator|/
name|d
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
condition|;
name|i
operator|++
control|)
block|{
name|int
name|pos
init|=
name|val
operator|>>
literal|16
decl_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
name|p
index|[
name|j
operator|++
index|]
operator|=
literal|0
expr_stmt|;
elseif|else
if|if
condition|(
name|pos
operator|>=
operator|(
name|s
operator|-
literal|1
operator|)
condition|)
name|p
index|[
name|j
operator|++
index|]
operator|=
literal|0
expr_stmt|;
else|else
name|p
index|[
name|j
operator|++
index|]
operator|=
operator|(
name|val
operator|>>
literal|8
operator|)
operator|-
operator|(
operator|(
name|val
operator|>>
literal|8
operator|)
operator|&
literal|0xffffff00
operator|)
expr_stmt|;
name|val
operator|+=
name|inc
expr_stmt|;
block|}
block|}
else|else
block|{
comment|/* scaling down */
name|qint64
name|val
init|=
literal|0
decl_stmt|;
name|qint64
name|inc
init|=
operator|(
operator|(
operator|(
name|qint64
operator|)
name|s
operator|)
operator|<<
literal|16
operator|)
operator|/
name|d
decl_stmt|;
name|int
name|Cp
init|=
operator|(
operator|(
operator|(
name|d
operator|<<
literal|14
operator|)
operator|+
name|s
operator|-
literal|1
operator|)
operator|/
name|s
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
condition|;
name|i
operator|++
control|)
block|{
name|int
name|ap
init|=
operator|(
operator|(
literal|0x10000
operator|-
operator|(
name|val
operator|&
literal|0xffff
operator|)
operator|)
operator|*
name|Cp
operator|)
operator|>>
literal|16
decl_stmt|;
name|p
index|[
name|j
index|]
operator|=
name|ap
operator||
operator|(
name|Cp
operator|<<
literal|16
operator|)
expr_stmt|;
name|j
operator|++
expr_stmt|;
name|val
operator|+=
name|inc
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rv
condition|)
block|{
name|int
name|tmp
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|d
operator|/
literal|2
init|;
operator|--
name|i
operator|>=
literal|0
condition|;
control|)
block|{
name|tmp
operator|=
name|p
index|[
name|i
index|]
expr_stmt|;
name|p
index|[
name|i
index|]
operator|=
name|p
index|[
name|d
operator|-
name|i
operator|-
literal|1
index|]
expr_stmt|;
name|p
index|[
name|d
operator|-
name|i
operator|-
literal|1
index|]
operator|=
name|tmp
expr_stmt|;
block|}
block|}
return|return
name|p
return|;
block|}
end_function
begin_function
DECL|function|qimageFreeScaleInfo
name|QImageScaleInfo
modifier|*
name|QImageScale
operator|::
name|qimageFreeScaleInfo
parameter_list|(
name|QImageScaleInfo
modifier|*
name|isi
parameter_list|)
block|{
if|if
condition|(
name|isi
condition|)
block|{
operator|delete
index|[]
name|isi
operator|->
name|xpoints
expr_stmt|;
operator|delete
index|[]
name|isi
operator|->
name|ypoints
expr_stmt|;
operator|delete
index|[]
name|isi
operator|->
name|xapoints
expr_stmt|;
operator|delete
index|[]
name|isi
operator|->
name|yapoints
expr_stmt|;
operator|delete
name|isi
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qimageCalcScaleInfo
name|QImageScaleInfo
modifier|*
name|QImageScale
operator|::
name|qimageCalcScaleInfo
parameter_list|(
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
name|int
name|sw
parameter_list|,
name|int
name|sh
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|,
name|char
name|aa
parameter_list|)
block|{
name|QImageScaleInfo
modifier|*
name|isi
decl_stmt|;
name|int
name|scw
decl_stmt|,
name|sch
decl_stmt|;
name|scw
operator|=
name|dw
operator|*
name|qlonglong
argument_list|(
name|img
operator|.
name|width
argument_list|()
argument_list|)
operator|/
name|sw
expr_stmt|;
name|sch
operator|=
name|dh
operator|*
name|qlonglong
argument_list|(
name|img
operator|.
name|height
argument_list|()
argument_list|)
operator|/
name|sh
expr_stmt|;
name|isi
operator|=
operator|new
name|QImageScaleInfo
expr_stmt|;
if|if
condition|(
operator|!
name|isi
condition|)
return|return
literal|0
return|;
name|memset
argument_list|(
name|isi
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|QImageScaleInfo
argument_list|)
argument_list|)
expr_stmt|;
name|isi
operator|->
name|xup_yup
operator|=
operator|(
name|qAbs
argument_list|(
name|dw
argument_list|)
operator|>=
name|sw
operator|)
operator|+
operator|(
operator|(
name|qAbs
argument_list|(
name|dh
argument_list|)
operator|>=
name|sh
operator|)
operator|<<
literal|1
operator|)
expr_stmt|;
name|isi
operator|->
name|xpoints
operator|=
name|qimageCalcXPoints
argument_list|(
name|img
operator|.
name|width
argument_list|()
argument_list|,
name|scw
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isi
operator|->
name|xpoints
condition|)
return|return
name|qimageFreeScaleInfo
argument_list|(
name|isi
argument_list|)
return|;
name|isi
operator|->
name|ypoints
operator|=
name|qimageCalcYPoints
argument_list|(
operator|(
specifier|const
name|unsigned
name|int
operator|*
operator|)
name|img
operator|.
name|scanLine
argument_list|(
literal|0
argument_list|)
argument_list|,
name|img
operator|.
name|bytesPerLine
argument_list|()
operator|/
literal|4
argument_list|,
name|img
operator|.
name|height
argument_list|()
argument_list|,
name|sch
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isi
operator|->
name|ypoints
condition|)
return|return
name|qimageFreeScaleInfo
argument_list|(
name|isi
argument_list|)
return|;
if|if
condition|(
name|aa
condition|)
block|{
name|isi
operator|->
name|xapoints
operator|=
name|qimageCalcApoints
argument_list|(
name|img
operator|.
name|width
argument_list|()
argument_list|,
name|scw
argument_list|,
name|isi
operator|->
name|xup_yup
operator|&
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isi
operator|->
name|xapoints
condition|)
return|return
name|qimageFreeScaleInfo
argument_list|(
name|isi
argument_list|)
return|;
name|isi
operator|->
name|yapoints
operator|=
name|qimageCalcApoints
argument_list|(
name|img
operator|.
name|height
argument_list|()
argument_list|,
name|sch
argument_list|,
name|isi
operator|->
name|xup_yup
operator|&
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isi
operator|->
name|yapoints
condition|)
return|return
name|qimageFreeScaleInfo
argument_list|(
name|isi
argument_list|)
return|;
block|}
return|return
name|isi
return|;
block|}
end_function
begin_function_decl
specifier|static
name|void
name|qt_qimageScaleAARGBA_up_x_down_y
parameter_list|(
name|QImageScaleInfo
modifier|*
name|isi
parameter_list|,
name|unsigned
name|int
modifier|*
name|dest
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|sow
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|qt_qimageScaleAARGBA_down_x_up_y
parameter_list|(
name|QImageScaleInfo
modifier|*
name|isi
parameter_list|,
name|unsigned
name|int
modifier|*
name|dest
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|sow
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|qt_qimageScaleAARGBA_down_xy
parameter_list|(
name|QImageScaleInfo
modifier|*
name|isi
parameter_list|,
name|unsigned
name|int
modifier|*
name|dest
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|sow
parameter_list|)
function_decl|;
end_function_decl
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_COMPILER_SUPPORTS_SSE4_1
argument_list|)
end_if
begin_function_decl
template|template
parameter_list|<
name|bool
name|RGB
parameter_list|>
name|void
name|qt_qimageScaleAARGBA_up_x_down_y_sse4
parameter_list|(
name|QImageScaleInfo
modifier|*
name|isi
parameter_list|,
name|unsigned
name|int
modifier|*
name|dest
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|sow
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
template|template
parameter_list|<
name|bool
name|RGB
parameter_list|>
name|void
name|qt_qimageScaleAARGBA_down_x_up_y_sse4
parameter_list|(
name|QImageScaleInfo
modifier|*
name|isi
parameter_list|,
name|unsigned
name|int
modifier|*
name|dest
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|sow
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
template|template
parameter_list|<
name|bool
name|RGB
parameter_list|>
name|void
name|qt_qimageScaleAARGBA_down_xy_sse4
parameter_list|(
name|QImageScaleInfo
modifier|*
name|isi
parameter_list|,
name|unsigned
name|int
modifier|*
name|dest
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|sow
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__ARM_NEON__
argument_list|)
end_if
begin_function_decl
template|template
parameter_list|<
name|bool
name|RGB
parameter_list|>
name|void
name|qt_qimageScaleAARGBA_up_x_down_y_neon
parameter_list|(
name|QImageScaleInfo
modifier|*
name|isi
parameter_list|,
name|unsigned
name|int
modifier|*
name|dest
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|sow
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
template|template
parameter_list|<
name|bool
name|RGB
parameter_list|>
name|void
name|qt_qimageScaleAARGBA_down_x_up_y_neon
parameter_list|(
name|QImageScaleInfo
modifier|*
name|isi
parameter_list|,
name|unsigned
name|int
modifier|*
name|dest
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|sow
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
template|template
parameter_list|<
name|bool
name|RGB
parameter_list|>
name|void
name|qt_qimageScaleAARGBA_down_xy_neon
parameter_list|(
name|QImageScaleInfo
modifier|*
name|isi
parameter_list|,
name|unsigned
name|int
modifier|*
name|dest
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|sow
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qt_qimageScaleAARGBA_up_xy
specifier|static
name|void
name|qt_qimageScaleAARGBA_up_xy
parameter_list|(
name|QImageScaleInfo
modifier|*
name|isi
parameter_list|,
name|unsigned
name|int
modifier|*
name|dest
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|sow
parameter_list|)
block|{
specifier|const
name|unsigned
name|int
modifier|*
modifier|*
name|ypoints
init|=
name|isi
operator|->
name|ypoints
decl_stmt|;
name|int
modifier|*
name|xpoints
init|=
name|isi
operator|->
name|xpoints
decl_stmt|;
name|int
modifier|*
name|xapoints
init|=
name|isi
operator|->
name|xapoints
decl_stmt|;
name|int
modifier|*
name|yapoints
init|=
name|isi
operator|->
name|yapoints
decl_stmt|;
comment|/* go through every scanline in the output buffer */
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|dh
condition|;
name|y
operator|++
control|)
block|{
comment|/* calculate the source line we'll scan from */
specifier|const
name|unsigned
name|int
modifier|*
name|sptr
init|=
name|ypoints
index|[
name|y
index|]
decl_stmt|;
name|unsigned
name|int
modifier|*
name|dptr
init|=
name|dest
operator|+
operator|(
name|y
operator|*
name|dow
operator|)
decl_stmt|;
specifier|const
name|int
name|yap
init|=
name|yapoints
index|[
name|y
index|]
decl_stmt|;
if|if
condition|(
name|yap
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|dw
condition|;
name|x
operator|++
control|)
block|{
specifier|const
name|unsigned
name|int
modifier|*
name|pix
init|=
name|sptr
operator|+
name|xpoints
index|[
name|x
index|]
decl_stmt|;
specifier|const
name|int
name|xap
init|=
name|xapoints
index|[
name|x
index|]
decl_stmt|;
if|if
condition|(
name|xap
operator|>
literal|0
condition|)
operator|*
name|dptr
operator|=
name|interpolate_4_pixels
argument_list|(
name|pix
argument_list|,
name|pix
operator|+
name|sow
argument_list|,
name|xap
argument_list|,
name|yap
argument_list|)
expr_stmt|;
else|else
operator|*
name|dptr
operator|=
name|INTERPOLATE_PIXEL_256
argument_list|(
name|pix
index|[
literal|0
index|]
argument_list|,
literal|256
operator|-
name|yap
argument_list|,
name|pix
index|[
name|sow
index|]
argument_list|,
name|yap
argument_list|)
expr_stmt|;
name|dptr
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|dw
condition|;
name|x
operator|++
control|)
block|{
specifier|const
name|unsigned
name|int
modifier|*
name|pix
init|=
name|sptr
operator|+
name|xpoints
index|[
name|x
index|]
decl_stmt|;
specifier|const
name|int
name|xap
init|=
name|xapoints
index|[
name|x
index|]
decl_stmt|;
if|if
condition|(
name|xap
operator|>
literal|0
condition|)
operator|*
name|dptr
operator|=
name|INTERPOLATE_PIXEL_256
argument_list|(
name|pix
index|[
literal|0
index|]
argument_list|,
literal|256
operator|-
name|xap
argument_list|,
name|pix
index|[
literal|1
index|]
argument_list|,
name|xap
argument_list|)
expr_stmt|;
else|else
operator|*
name|dptr
operator|=
name|pix
index|[
literal|0
index|]
expr_stmt|;
name|dptr
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|/* scale by area sampling */
end_comment
begin_function
DECL|function|qt_qimageScaleAARGBA
specifier|static
name|void
name|qt_qimageScaleAARGBA
parameter_list|(
name|QImageScaleInfo
modifier|*
name|isi
parameter_list|,
name|unsigned
name|int
modifier|*
name|dest
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|sow
parameter_list|)
block|{
comment|/* scaling up both ways */
if|if
condition|(
name|isi
operator|->
name|xup_yup
operator|==
literal|3
condition|)
block|{
name|qt_qimageScaleAARGBA_up_xy
argument_list|(
name|isi
argument_list|,
name|dest
argument_list|,
name|dw
argument_list|,
name|dh
argument_list|,
name|dow
argument_list|,
name|sow
argument_list|)
expr_stmt|;
block|}
comment|/* if we're scaling down vertically */
elseif|else
if|if
condition|(
name|isi
operator|->
name|xup_yup
operator|==
literal|1
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_COMPILER_SUPPORTS_SSE4_1
if|if
condition|(
name|qCpuHasFeature
argument_list|(
name|SSE4_1
argument_list|)
condition|)
name|qt_qimageScaleAARGBA_up_x_down_y_sse4
argument_list|<
literal|false
argument_list|>
argument_list|(
name|isi
argument_list|,
name|dest
argument_list|,
name|dw
argument_list|,
name|dh
argument_list|,
name|dow
argument_list|,
name|sow
argument_list|)
expr_stmt|;
elseif|else
elif|#
directive|elif
name|defined
argument_list|(
name|__ARM_NEON__
argument_list|)
if|if
condition|(
name|qCpuHasFeature
argument_list|(
name|NEON
argument_list|)
condition|)
name|qt_qimageScaleAARGBA_up_x_down_y_neon
argument_list|<
literal|false
argument_list|>
argument_list|(
name|isi
argument_list|,
name|dest
argument_list|,
name|dw
argument_list|,
name|dh
argument_list|,
name|dow
argument_list|,
name|sow
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
name|qt_qimageScaleAARGBA_up_x_down_y
argument_list|(
name|isi
argument_list|,
name|dest
argument_list|,
name|dw
argument_list|,
name|dh
argument_list|,
name|dow
argument_list|,
name|sow
argument_list|)
expr_stmt|;
block|}
comment|/* if we're scaling down horizontally */
elseif|else
if|if
condition|(
name|isi
operator|->
name|xup_yup
operator|==
literal|2
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_COMPILER_SUPPORTS_SSE4_1
if|if
condition|(
name|qCpuHasFeature
argument_list|(
name|SSE4_1
argument_list|)
condition|)
name|qt_qimageScaleAARGBA_down_x_up_y_sse4
argument_list|<
literal|false
argument_list|>
argument_list|(
name|isi
argument_list|,
name|dest
argument_list|,
name|dw
argument_list|,
name|dh
argument_list|,
name|dow
argument_list|,
name|sow
argument_list|)
expr_stmt|;
elseif|else
elif|#
directive|elif
name|defined
argument_list|(
name|__ARM_NEON__
argument_list|)
if|if
condition|(
name|qCpuHasFeature
argument_list|(
name|NEON
argument_list|)
condition|)
name|qt_qimageScaleAARGBA_down_x_up_y_neon
argument_list|<
literal|false
argument_list|>
argument_list|(
name|isi
argument_list|,
name|dest
argument_list|,
name|dw
argument_list|,
name|dh
argument_list|,
name|dow
argument_list|,
name|sow
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
name|qt_qimageScaleAARGBA_down_x_up_y
argument_list|(
name|isi
argument_list|,
name|dest
argument_list|,
name|dw
argument_list|,
name|dh
argument_list|,
name|dow
argument_list|,
name|sow
argument_list|)
expr_stmt|;
block|}
comment|/* if we're scaling down horizontally& vertically */
else|else
block|{
ifdef|#
directive|ifdef
name|QT_COMPILER_SUPPORTS_SSE4_1
if|if
condition|(
name|qCpuHasFeature
argument_list|(
name|SSE4_1
argument_list|)
condition|)
name|qt_qimageScaleAARGBA_down_xy_sse4
argument_list|<
literal|false
argument_list|>
argument_list|(
name|isi
argument_list|,
name|dest
argument_list|,
name|dw
argument_list|,
name|dh
argument_list|,
name|dow
argument_list|,
name|sow
argument_list|)
expr_stmt|;
elseif|else
elif|#
directive|elif
name|defined
argument_list|(
name|__ARM_NEON__
argument_list|)
if|if
condition|(
name|qCpuHasFeature
argument_list|(
name|NEON
argument_list|)
condition|)
name|qt_qimageScaleAARGBA_down_xy_neon
argument_list|<
literal|false
argument_list|>
argument_list|(
name|isi
argument_list|,
name|dest
argument_list|,
name|dw
argument_list|,
name|dh
argument_list|,
name|dow
argument_list|,
name|sow
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
name|qt_qimageScaleAARGBA_down_xy
argument_list|(
name|isi
argument_list|,
name|dest
argument_list|,
name|dw
argument_list|,
name|dh
argument_list|,
name|dow
argument_list|,
name|sow
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_qimageScaleAARGBA_helper
specifier|inline
specifier|static
name|void
name|qt_qimageScaleAARGBA_helper
parameter_list|(
specifier|const
name|unsigned
name|int
modifier|*
name|pix
parameter_list|,
name|int
name|xyap
parameter_list|,
name|int
name|Cxy
parameter_list|,
name|int
name|step
parameter_list|,
name|int
modifier|&
name|r
parameter_list|,
name|int
modifier|&
name|g
parameter_list|,
name|int
modifier|&
name|b
parameter_list|,
name|int
modifier|&
name|a
parameter_list|)
block|{
name|r
operator|=
name|qRed
argument_list|(
operator|*
name|pix
argument_list|)
operator|*
name|xyap
expr_stmt|;
name|g
operator|=
name|qGreen
argument_list|(
operator|*
name|pix
argument_list|)
operator|*
name|xyap
expr_stmt|;
name|b
operator|=
name|qBlue
argument_list|(
operator|*
name|pix
argument_list|)
operator|*
name|xyap
expr_stmt|;
name|a
operator|=
name|qAlpha
argument_list|(
operator|*
name|pix
argument_list|)
operator|*
name|xyap
expr_stmt|;
name|int
name|j
decl_stmt|;
for|for
control|(
name|j
operator|=
operator|(
literal|1
operator|<<
literal|14
operator|)
operator|-
name|xyap
init|;
name|j
operator|>
name|Cxy
condition|;
name|j
operator|-=
name|Cxy
control|)
block|{
name|pix
operator|+=
name|step
expr_stmt|;
name|r
operator|+=
name|qRed
argument_list|(
operator|*
name|pix
argument_list|)
operator|*
name|Cxy
expr_stmt|;
name|g
operator|+=
name|qGreen
argument_list|(
operator|*
name|pix
argument_list|)
operator|*
name|Cxy
expr_stmt|;
name|b
operator|+=
name|qBlue
argument_list|(
operator|*
name|pix
argument_list|)
operator|*
name|Cxy
expr_stmt|;
name|a
operator|+=
name|qAlpha
argument_list|(
operator|*
name|pix
argument_list|)
operator|*
name|Cxy
expr_stmt|;
block|}
name|pix
operator|+=
name|step
expr_stmt|;
name|r
operator|+=
name|qRed
argument_list|(
operator|*
name|pix
argument_list|)
operator|*
name|j
expr_stmt|;
name|g
operator|+=
name|qGreen
argument_list|(
operator|*
name|pix
argument_list|)
operator|*
name|j
expr_stmt|;
name|b
operator|+=
name|qBlue
argument_list|(
operator|*
name|pix
argument_list|)
operator|*
name|j
expr_stmt|;
name|a
operator|+=
name|qAlpha
argument_list|(
operator|*
name|pix
argument_list|)
operator|*
name|j
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_qimageScaleAARGBA_up_x_down_y
specifier|static
name|void
name|qt_qimageScaleAARGBA_up_x_down_y
parameter_list|(
name|QImageScaleInfo
modifier|*
name|isi
parameter_list|,
name|unsigned
name|int
modifier|*
name|dest
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|sow
parameter_list|)
block|{
specifier|const
name|unsigned
name|int
modifier|*
modifier|*
name|ypoints
init|=
name|isi
operator|->
name|ypoints
decl_stmt|;
name|int
modifier|*
name|xpoints
init|=
name|isi
operator|->
name|xpoints
decl_stmt|;
name|int
modifier|*
name|xapoints
init|=
name|isi
operator|->
name|xapoints
decl_stmt|;
name|int
modifier|*
name|yapoints
init|=
name|isi
operator|->
name|yapoints
decl_stmt|;
comment|/* go through every scanline in the output buffer */
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|dh
condition|;
name|y
operator|++
control|)
block|{
name|int
name|Cy
init|=
name|yapoints
index|[
name|y
index|]
operator|>>
literal|16
decl_stmt|;
name|int
name|yap
init|=
name|yapoints
index|[
name|y
index|]
operator|&
literal|0xffff
decl_stmt|;
name|unsigned
name|int
modifier|*
name|dptr
init|=
name|dest
operator|+
operator|(
name|y
operator|*
name|dow
operator|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|dw
condition|;
name|x
operator|++
control|)
block|{
specifier|const
name|unsigned
name|int
modifier|*
name|sptr
init|=
name|ypoints
index|[
name|y
index|]
operator|+
name|xpoints
index|[
name|x
index|]
decl_stmt|;
name|int
name|r
decl_stmt|,
name|g
decl_stmt|,
name|b
decl_stmt|,
name|a
decl_stmt|;
name|qt_qimageScaleAARGBA_helper
argument_list|(
name|sptr
argument_list|,
name|yap
argument_list|,
name|Cy
argument_list|,
name|sow
argument_list|,
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|int
name|xap
init|=
name|xapoints
index|[
name|x
index|]
decl_stmt|;
if|if
condition|(
name|xap
operator|>
literal|0
condition|)
block|{
name|int
name|rr
decl_stmt|,
name|gg
decl_stmt|,
name|bb
decl_stmt|,
name|aa
decl_stmt|;
name|qt_qimageScaleAARGBA_helper
argument_list|(
name|sptr
operator|+
literal|1
argument_list|,
name|yap
argument_list|,
name|Cy
argument_list|,
name|sow
argument_list|,
name|rr
argument_list|,
name|gg
argument_list|,
name|bb
argument_list|,
name|aa
argument_list|)
expr_stmt|;
name|r
operator|=
name|r
operator|*
operator|(
literal|256
operator|-
name|xap
operator|)
expr_stmt|;
name|g
operator|=
name|g
operator|*
operator|(
literal|256
operator|-
name|xap
operator|)
expr_stmt|;
name|b
operator|=
name|b
operator|*
operator|(
literal|256
operator|-
name|xap
operator|)
expr_stmt|;
name|a
operator|=
name|a
operator|*
operator|(
literal|256
operator|-
name|xap
operator|)
expr_stmt|;
name|r
operator|=
operator|(
name|r
operator|+
operator|(
name|rr
operator|*
name|xap
operator|)
operator|)
operator|>>
literal|8
expr_stmt|;
name|g
operator|=
operator|(
name|g
operator|+
operator|(
name|gg
operator|*
name|xap
operator|)
operator|)
operator|>>
literal|8
expr_stmt|;
name|b
operator|=
operator|(
name|b
operator|+
operator|(
name|bb
operator|*
name|xap
operator|)
operator|)
operator|>>
literal|8
expr_stmt|;
name|a
operator|=
operator|(
name|a
operator|+
operator|(
name|aa
operator|*
name|xap
operator|)
operator|)
operator|>>
literal|8
expr_stmt|;
block|}
operator|*
name|dptr
operator|++
operator|=
name|qRgba
argument_list|(
name|r
operator|>>
literal|14
argument_list|,
name|g
operator|>>
literal|14
argument_list|,
name|b
operator|>>
literal|14
argument_list|,
name|a
operator|>>
literal|14
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|qt_qimageScaleAARGBA_down_x_up_y
specifier|static
name|void
name|qt_qimageScaleAARGBA_down_x_up_y
parameter_list|(
name|QImageScaleInfo
modifier|*
name|isi
parameter_list|,
name|unsigned
name|int
modifier|*
name|dest
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|sow
parameter_list|)
block|{
specifier|const
name|unsigned
name|int
modifier|*
modifier|*
name|ypoints
init|=
name|isi
operator|->
name|ypoints
decl_stmt|;
name|int
modifier|*
name|xpoints
init|=
name|isi
operator|->
name|xpoints
decl_stmt|;
name|int
modifier|*
name|xapoints
init|=
name|isi
operator|->
name|xapoints
decl_stmt|;
name|int
modifier|*
name|yapoints
init|=
name|isi
operator|->
name|yapoints
decl_stmt|;
comment|/* go through every scanline in the output buffer */
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|dh
condition|;
name|y
operator|++
control|)
block|{
name|unsigned
name|int
modifier|*
name|dptr
init|=
name|dest
operator|+
operator|(
name|y
operator|*
name|dow
operator|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|dw
condition|;
name|x
operator|++
control|)
block|{
name|int
name|Cx
init|=
name|xapoints
index|[
name|x
index|]
operator|>>
literal|16
decl_stmt|;
name|int
name|xap
init|=
name|xapoints
index|[
name|x
index|]
operator|&
literal|0xffff
decl_stmt|;
specifier|const
name|unsigned
name|int
modifier|*
name|sptr
init|=
name|ypoints
index|[
name|y
index|]
operator|+
name|xpoints
index|[
name|x
index|]
decl_stmt|;
name|int
name|r
decl_stmt|,
name|g
decl_stmt|,
name|b
decl_stmt|,
name|a
decl_stmt|;
name|qt_qimageScaleAARGBA_helper
argument_list|(
name|sptr
argument_list|,
name|xap
argument_list|,
name|Cx
argument_list|,
literal|1
argument_list|,
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|int
name|yap
init|=
name|yapoints
index|[
name|y
index|]
decl_stmt|;
if|if
condition|(
name|yap
operator|>
literal|0
condition|)
block|{
name|int
name|rr
decl_stmt|,
name|gg
decl_stmt|,
name|bb
decl_stmt|,
name|aa
decl_stmt|;
name|qt_qimageScaleAARGBA_helper
argument_list|(
name|sptr
operator|+
name|sow
argument_list|,
name|xap
argument_list|,
name|Cx
argument_list|,
literal|1
argument_list|,
name|rr
argument_list|,
name|gg
argument_list|,
name|bb
argument_list|,
name|aa
argument_list|)
expr_stmt|;
name|r
operator|=
name|r
operator|*
operator|(
literal|256
operator|-
name|yap
operator|)
expr_stmt|;
name|g
operator|=
name|g
operator|*
operator|(
literal|256
operator|-
name|yap
operator|)
expr_stmt|;
name|b
operator|=
name|b
operator|*
operator|(
literal|256
operator|-
name|yap
operator|)
expr_stmt|;
name|a
operator|=
name|a
operator|*
operator|(
literal|256
operator|-
name|yap
operator|)
expr_stmt|;
name|r
operator|=
operator|(
name|r
operator|+
operator|(
name|rr
operator|*
name|yap
operator|)
operator|)
operator|>>
literal|8
expr_stmt|;
name|g
operator|=
operator|(
name|g
operator|+
operator|(
name|gg
operator|*
name|yap
operator|)
operator|)
operator|>>
literal|8
expr_stmt|;
name|b
operator|=
operator|(
name|b
operator|+
operator|(
name|bb
operator|*
name|yap
operator|)
operator|)
operator|>>
literal|8
expr_stmt|;
name|a
operator|=
operator|(
name|a
operator|+
operator|(
name|aa
operator|*
name|yap
operator|)
operator|)
operator|>>
literal|8
expr_stmt|;
block|}
operator|*
name|dptr
operator|=
name|qRgba
argument_list|(
name|r
operator|>>
literal|14
argument_list|,
name|g
operator|>>
literal|14
argument_list|,
name|b
operator|>>
literal|14
argument_list|,
name|a
operator|>>
literal|14
argument_list|)
expr_stmt|;
name|dptr
operator|++
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|qt_qimageScaleAARGBA_down_xy
specifier|static
name|void
name|qt_qimageScaleAARGBA_down_xy
parameter_list|(
name|QImageScaleInfo
modifier|*
name|isi
parameter_list|,
name|unsigned
name|int
modifier|*
name|dest
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|sow
parameter_list|)
block|{
specifier|const
name|unsigned
name|int
modifier|*
modifier|*
name|ypoints
init|=
name|isi
operator|->
name|ypoints
decl_stmt|;
name|int
modifier|*
name|xpoints
init|=
name|isi
operator|->
name|xpoints
decl_stmt|;
name|int
modifier|*
name|xapoints
init|=
name|isi
operator|->
name|xapoints
decl_stmt|;
name|int
modifier|*
name|yapoints
init|=
name|isi
operator|->
name|yapoints
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|dh
condition|;
name|y
operator|++
control|)
block|{
name|int
name|Cy
init|=
operator|(
name|yapoints
index|[
name|y
index|]
operator|)
operator|>>
literal|16
decl_stmt|;
name|int
name|yap
init|=
operator|(
name|yapoints
index|[
name|y
index|]
operator|)
operator|&
literal|0xffff
decl_stmt|;
name|unsigned
name|int
modifier|*
name|dptr
init|=
name|dest
operator|+
operator|(
name|y
operator|*
name|dow
operator|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|dw
condition|;
name|x
operator|++
control|)
block|{
name|int
name|Cx
init|=
name|xapoints
index|[
name|x
index|]
operator|>>
literal|16
decl_stmt|;
name|int
name|xap
init|=
name|xapoints
index|[
name|x
index|]
operator|&
literal|0xffff
decl_stmt|;
specifier|const
name|unsigned
name|int
modifier|*
name|sptr
init|=
name|ypoints
index|[
name|y
index|]
operator|+
name|xpoints
index|[
name|x
index|]
decl_stmt|;
name|int
name|rx
decl_stmt|,
name|gx
decl_stmt|,
name|bx
decl_stmt|,
name|ax
decl_stmt|;
name|qt_qimageScaleAARGBA_helper
argument_list|(
name|sptr
argument_list|,
name|xap
argument_list|,
name|Cx
argument_list|,
literal|1
argument_list|,
name|rx
argument_list|,
name|gx
argument_list|,
name|bx
argument_list|,
name|ax
argument_list|)
expr_stmt|;
name|int
name|r
init|=
operator|(
operator|(
name|rx
operator|>>
literal|4
operator|)
operator|*
name|yap
operator|)
decl_stmt|;
name|int
name|g
init|=
operator|(
operator|(
name|gx
operator|>>
literal|4
operator|)
operator|*
name|yap
operator|)
decl_stmt|;
name|int
name|b
init|=
operator|(
operator|(
name|bx
operator|>>
literal|4
operator|)
operator|*
name|yap
operator|)
decl_stmt|;
name|int
name|a
init|=
operator|(
operator|(
name|ax
operator|>>
literal|4
operator|)
operator|*
name|yap
operator|)
decl_stmt|;
name|int
name|j
decl_stmt|;
for|for
control|(
name|j
operator|=
operator|(
literal|1
operator|<<
literal|14
operator|)
operator|-
name|yap
init|;
name|j
operator|>
name|Cy
condition|;
name|j
operator|-=
name|Cy
control|)
block|{
name|sptr
operator|+=
name|sow
expr_stmt|;
name|qt_qimageScaleAARGBA_helper
argument_list|(
name|sptr
argument_list|,
name|xap
argument_list|,
name|Cx
argument_list|,
literal|1
argument_list|,
name|rx
argument_list|,
name|gx
argument_list|,
name|bx
argument_list|,
name|ax
argument_list|)
expr_stmt|;
name|r
operator|+=
operator|(
operator|(
name|rx
operator|>>
literal|4
operator|)
operator|*
name|Cy
operator|)
expr_stmt|;
name|g
operator|+=
operator|(
operator|(
name|gx
operator|>>
literal|4
operator|)
operator|*
name|Cy
operator|)
expr_stmt|;
name|b
operator|+=
operator|(
operator|(
name|bx
operator|>>
literal|4
operator|)
operator|*
name|Cy
operator|)
expr_stmt|;
name|a
operator|+=
operator|(
operator|(
name|ax
operator|>>
literal|4
operator|)
operator|*
name|Cy
operator|)
expr_stmt|;
block|}
name|sptr
operator|+=
name|sow
expr_stmt|;
name|qt_qimageScaleAARGBA_helper
argument_list|(
name|sptr
argument_list|,
name|xap
argument_list|,
name|Cx
argument_list|,
literal|1
argument_list|,
name|rx
argument_list|,
name|gx
argument_list|,
name|bx
argument_list|,
name|ax
argument_list|)
expr_stmt|;
name|r
operator|+=
operator|(
operator|(
name|rx
operator|>>
literal|4
operator|)
operator|*
name|j
operator|)
expr_stmt|;
name|g
operator|+=
operator|(
operator|(
name|gx
operator|>>
literal|4
operator|)
operator|*
name|j
operator|)
expr_stmt|;
name|b
operator|+=
operator|(
operator|(
name|bx
operator|>>
literal|4
operator|)
operator|*
name|j
operator|)
expr_stmt|;
name|a
operator|+=
operator|(
operator|(
name|ax
operator|>>
literal|4
operator|)
operator|*
name|j
operator|)
expr_stmt|;
operator|*
name|dptr
operator|=
name|qRgba
argument_list|(
name|r
operator|>>
literal|24
argument_list|,
name|g
operator|>>
literal|24
argument_list|,
name|b
operator|>>
literal|24
argument_list|,
name|a
operator|>>
literal|24
argument_list|)
expr_stmt|;
name|dptr
operator|++
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function_decl
specifier|static
name|void
name|qt_qimageScaleAARGB_up_x_down_y
parameter_list|(
name|QImageScaleInfo
modifier|*
name|isi
parameter_list|,
name|unsigned
name|int
modifier|*
name|dest
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|sow
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|qt_qimageScaleAARGB_down_x_up_y
parameter_list|(
name|QImageScaleInfo
modifier|*
name|isi
parameter_list|,
name|unsigned
name|int
modifier|*
name|dest
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|sow
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|qt_qimageScaleAARGB_down_xy
parameter_list|(
name|QImageScaleInfo
modifier|*
name|isi
parameter_list|,
name|unsigned
name|int
modifier|*
name|dest
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|sow
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* scale by area sampling - IGNORE the ALPHA byte*/
end_comment
begin_function
DECL|function|qt_qimageScaleAARGB
specifier|static
name|void
name|qt_qimageScaleAARGB
parameter_list|(
name|QImageScaleInfo
modifier|*
name|isi
parameter_list|,
name|unsigned
name|int
modifier|*
name|dest
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|sow
parameter_list|)
block|{
comment|/* scaling up both ways */
if|if
condition|(
name|isi
operator|->
name|xup_yup
operator|==
literal|3
condition|)
block|{
name|qt_qimageScaleAARGBA_up_xy
argument_list|(
name|isi
argument_list|,
name|dest
argument_list|,
name|dw
argument_list|,
name|dh
argument_list|,
name|dow
argument_list|,
name|sow
argument_list|)
expr_stmt|;
block|}
comment|/* if we're scaling down vertically */
elseif|else
if|if
condition|(
name|isi
operator|->
name|xup_yup
operator|==
literal|1
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_COMPILER_SUPPORTS_SSE4_1
if|if
condition|(
name|qCpuHasFeature
argument_list|(
name|SSE4_1
argument_list|)
condition|)
name|qt_qimageScaleAARGBA_up_x_down_y_sse4
argument_list|<
literal|true
argument_list|>
argument_list|(
name|isi
argument_list|,
name|dest
argument_list|,
name|dw
argument_list|,
name|dh
argument_list|,
name|dow
argument_list|,
name|sow
argument_list|)
expr_stmt|;
elseif|else
elif|#
directive|elif
name|defined
argument_list|(
name|__ARM_NEON__
argument_list|)
if|if
condition|(
name|qCpuHasFeature
argument_list|(
name|NEON
argument_list|)
condition|)
name|qt_qimageScaleAARGBA_up_x_down_y_neon
argument_list|<
literal|true
argument_list|>
argument_list|(
name|isi
argument_list|,
name|dest
argument_list|,
name|dw
argument_list|,
name|dh
argument_list|,
name|dow
argument_list|,
name|sow
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
name|qt_qimageScaleAARGB_up_x_down_y
argument_list|(
name|isi
argument_list|,
name|dest
argument_list|,
name|dw
argument_list|,
name|dh
argument_list|,
name|dow
argument_list|,
name|sow
argument_list|)
expr_stmt|;
block|}
comment|/* if we're scaling down horizontally */
elseif|else
if|if
condition|(
name|isi
operator|->
name|xup_yup
operator|==
literal|2
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_COMPILER_SUPPORTS_SSE4_1
if|if
condition|(
name|qCpuHasFeature
argument_list|(
name|SSE4_1
argument_list|)
condition|)
name|qt_qimageScaleAARGBA_down_x_up_y_sse4
argument_list|<
literal|true
argument_list|>
argument_list|(
name|isi
argument_list|,
name|dest
argument_list|,
name|dw
argument_list|,
name|dh
argument_list|,
name|dow
argument_list|,
name|sow
argument_list|)
expr_stmt|;
elseif|else
elif|#
directive|elif
name|defined
argument_list|(
name|__ARM_NEON__
argument_list|)
if|if
condition|(
name|qCpuHasFeature
argument_list|(
name|NEON
argument_list|)
condition|)
name|qt_qimageScaleAARGBA_down_x_up_y_neon
argument_list|<
literal|true
argument_list|>
argument_list|(
name|isi
argument_list|,
name|dest
argument_list|,
name|dw
argument_list|,
name|dh
argument_list|,
name|dow
argument_list|,
name|sow
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
name|qt_qimageScaleAARGB_down_x_up_y
argument_list|(
name|isi
argument_list|,
name|dest
argument_list|,
name|dw
argument_list|,
name|dh
argument_list|,
name|dow
argument_list|,
name|sow
argument_list|)
expr_stmt|;
block|}
comment|/* if we're scaling down horizontally& vertically */
else|else
block|{
ifdef|#
directive|ifdef
name|QT_COMPILER_SUPPORTS_SSE4_1
if|if
condition|(
name|qCpuHasFeature
argument_list|(
name|SSE4_1
argument_list|)
condition|)
name|qt_qimageScaleAARGBA_down_xy_sse4
argument_list|<
literal|true
argument_list|>
argument_list|(
name|isi
argument_list|,
name|dest
argument_list|,
name|dw
argument_list|,
name|dh
argument_list|,
name|dow
argument_list|,
name|sow
argument_list|)
expr_stmt|;
elseif|else
elif|#
directive|elif
name|defined
argument_list|(
name|__ARM_NEON__
argument_list|)
if|if
condition|(
name|qCpuHasFeature
argument_list|(
name|NEON
argument_list|)
condition|)
name|qt_qimageScaleAARGBA_down_xy_neon
argument_list|<
literal|true
argument_list|>
argument_list|(
name|isi
argument_list|,
name|dest
argument_list|,
name|dw
argument_list|,
name|dh
argument_list|,
name|dow
argument_list|,
name|sow
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
name|qt_qimageScaleAARGB_down_xy
argument_list|(
name|isi
argument_list|,
name|dest
argument_list|,
name|dw
argument_list|,
name|dh
argument_list|,
name|dow
argument_list|,
name|sow
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_qimageScaleAARGB_helper
specifier|inline
specifier|static
name|void
name|qt_qimageScaleAARGB_helper
parameter_list|(
specifier|const
name|unsigned
name|int
modifier|*
name|pix
parameter_list|,
name|int
name|xyap
parameter_list|,
name|int
name|Cxy
parameter_list|,
name|int
name|step
parameter_list|,
name|int
modifier|&
name|r
parameter_list|,
name|int
modifier|&
name|g
parameter_list|,
name|int
modifier|&
name|b
parameter_list|)
block|{
name|r
operator|=
name|qRed
argument_list|(
operator|*
name|pix
argument_list|)
operator|*
name|xyap
expr_stmt|;
name|g
operator|=
name|qGreen
argument_list|(
operator|*
name|pix
argument_list|)
operator|*
name|xyap
expr_stmt|;
name|b
operator|=
name|qBlue
argument_list|(
operator|*
name|pix
argument_list|)
operator|*
name|xyap
expr_stmt|;
name|int
name|j
decl_stmt|;
for|for
control|(
name|j
operator|=
operator|(
literal|1
operator|<<
literal|14
operator|)
operator|-
name|xyap
init|;
name|j
operator|>
name|Cxy
condition|;
name|j
operator|-=
name|Cxy
control|)
block|{
name|pix
operator|+=
name|step
expr_stmt|;
name|r
operator|+=
name|qRed
argument_list|(
operator|*
name|pix
argument_list|)
operator|*
name|Cxy
expr_stmt|;
name|g
operator|+=
name|qGreen
argument_list|(
operator|*
name|pix
argument_list|)
operator|*
name|Cxy
expr_stmt|;
name|b
operator|+=
name|qBlue
argument_list|(
operator|*
name|pix
argument_list|)
operator|*
name|Cxy
expr_stmt|;
block|}
name|pix
operator|+=
name|step
expr_stmt|;
name|r
operator|+=
name|qRed
argument_list|(
operator|*
name|pix
argument_list|)
operator|*
name|j
expr_stmt|;
name|g
operator|+=
name|qGreen
argument_list|(
operator|*
name|pix
argument_list|)
operator|*
name|j
expr_stmt|;
name|b
operator|+=
name|qBlue
argument_list|(
operator|*
name|pix
argument_list|)
operator|*
name|j
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_qimageScaleAARGB_up_x_down_y
specifier|static
name|void
name|qt_qimageScaleAARGB_up_x_down_y
parameter_list|(
name|QImageScaleInfo
modifier|*
name|isi
parameter_list|,
name|unsigned
name|int
modifier|*
name|dest
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|sow
parameter_list|)
block|{
specifier|const
name|unsigned
name|int
modifier|*
modifier|*
name|ypoints
init|=
name|isi
operator|->
name|ypoints
decl_stmt|;
name|int
modifier|*
name|xpoints
init|=
name|isi
operator|->
name|xpoints
decl_stmt|;
name|int
modifier|*
name|xapoints
init|=
name|isi
operator|->
name|xapoints
decl_stmt|;
name|int
modifier|*
name|yapoints
init|=
name|isi
operator|->
name|yapoints
decl_stmt|;
comment|/* go through every scanline in the output buffer */
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|dh
condition|;
name|y
operator|++
control|)
block|{
name|int
name|Cy
init|=
name|yapoints
index|[
name|y
index|]
operator|>>
literal|16
decl_stmt|;
name|int
name|yap
init|=
name|yapoints
index|[
name|y
index|]
operator|&
literal|0xffff
decl_stmt|;
name|unsigned
name|int
modifier|*
name|dptr
init|=
name|dest
operator|+
operator|(
name|y
operator|*
name|dow
operator|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|dw
condition|;
name|x
operator|++
control|)
block|{
specifier|const
name|unsigned
name|int
modifier|*
name|sptr
init|=
name|ypoints
index|[
name|y
index|]
operator|+
name|xpoints
index|[
name|x
index|]
decl_stmt|;
name|int
name|r
decl_stmt|,
name|g
decl_stmt|,
name|b
decl_stmt|;
name|qt_qimageScaleAARGB_helper
argument_list|(
name|sptr
argument_list|,
name|yap
argument_list|,
name|Cy
argument_list|,
name|sow
argument_list|,
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|int
name|xap
init|=
name|xapoints
index|[
name|x
index|]
decl_stmt|;
if|if
condition|(
name|xap
operator|>
literal|0
condition|)
block|{
name|int
name|rr
decl_stmt|,
name|bb
decl_stmt|,
name|gg
decl_stmt|;
name|qt_qimageScaleAARGB_helper
argument_list|(
name|sptr
operator|+
literal|1
argument_list|,
name|yap
argument_list|,
name|Cy
argument_list|,
name|sow
argument_list|,
name|rr
argument_list|,
name|gg
argument_list|,
name|bb
argument_list|)
expr_stmt|;
name|r
operator|=
name|r
operator|*
operator|(
literal|256
operator|-
name|xap
operator|)
expr_stmt|;
name|g
operator|=
name|g
operator|*
operator|(
literal|256
operator|-
name|xap
operator|)
expr_stmt|;
name|b
operator|=
name|b
operator|*
operator|(
literal|256
operator|-
name|xap
operator|)
expr_stmt|;
name|r
operator|=
operator|(
name|r
operator|+
operator|(
name|rr
operator|*
name|xap
operator|)
operator|)
operator|>>
literal|8
expr_stmt|;
name|g
operator|=
operator|(
name|g
operator|+
operator|(
name|gg
operator|*
name|xap
operator|)
operator|)
operator|>>
literal|8
expr_stmt|;
name|b
operator|=
operator|(
name|b
operator|+
operator|(
name|bb
operator|*
name|xap
operator|)
operator|)
operator|>>
literal|8
expr_stmt|;
block|}
operator|*
name|dptr
operator|++
operator|=
name|qRgb
argument_list|(
name|r
operator|>>
literal|14
argument_list|,
name|g
operator|>>
literal|14
argument_list|,
name|b
operator|>>
literal|14
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|qt_qimageScaleAARGB_down_x_up_y
specifier|static
name|void
name|qt_qimageScaleAARGB_down_x_up_y
parameter_list|(
name|QImageScaleInfo
modifier|*
name|isi
parameter_list|,
name|unsigned
name|int
modifier|*
name|dest
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|sow
parameter_list|)
block|{
specifier|const
name|unsigned
name|int
modifier|*
modifier|*
name|ypoints
init|=
name|isi
operator|->
name|ypoints
decl_stmt|;
name|int
modifier|*
name|xpoints
init|=
name|isi
operator|->
name|xpoints
decl_stmt|;
name|int
modifier|*
name|xapoints
init|=
name|isi
operator|->
name|xapoints
decl_stmt|;
name|int
modifier|*
name|yapoints
init|=
name|isi
operator|->
name|yapoints
decl_stmt|;
comment|/* go through every scanline in the output buffer */
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|dh
condition|;
name|y
operator|++
control|)
block|{
name|unsigned
name|int
modifier|*
name|dptr
init|=
name|dest
operator|+
operator|(
name|y
operator|*
name|dow
operator|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|dw
condition|;
name|x
operator|++
control|)
block|{
name|int
name|Cx
init|=
name|xapoints
index|[
name|x
index|]
operator|>>
literal|16
decl_stmt|;
name|int
name|xap
init|=
name|xapoints
index|[
name|x
index|]
operator|&
literal|0xffff
decl_stmt|;
specifier|const
name|unsigned
name|int
modifier|*
name|sptr
init|=
name|ypoints
index|[
name|y
index|]
operator|+
name|xpoints
index|[
name|x
index|]
decl_stmt|;
name|int
name|r
decl_stmt|,
name|g
decl_stmt|,
name|b
decl_stmt|;
name|qt_qimageScaleAARGB_helper
argument_list|(
name|sptr
argument_list|,
name|xap
argument_list|,
name|Cx
argument_list|,
literal|1
argument_list|,
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|int
name|yap
init|=
name|yapoints
index|[
name|y
index|]
decl_stmt|;
if|if
condition|(
name|yap
operator|>
literal|0
condition|)
block|{
name|int
name|rr
decl_stmt|,
name|bb
decl_stmt|,
name|gg
decl_stmt|;
name|qt_qimageScaleAARGB_helper
argument_list|(
name|sptr
operator|+
name|sow
argument_list|,
name|xap
argument_list|,
name|Cx
argument_list|,
literal|1
argument_list|,
name|rr
argument_list|,
name|gg
argument_list|,
name|bb
argument_list|)
expr_stmt|;
name|r
operator|=
name|r
operator|*
operator|(
literal|256
operator|-
name|yap
operator|)
expr_stmt|;
name|g
operator|=
name|g
operator|*
operator|(
literal|256
operator|-
name|yap
operator|)
expr_stmt|;
name|b
operator|=
name|b
operator|*
operator|(
literal|256
operator|-
name|yap
operator|)
expr_stmt|;
name|r
operator|=
operator|(
name|r
operator|+
operator|(
name|rr
operator|*
name|yap
operator|)
operator|)
operator|>>
literal|8
expr_stmt|;
name|g
operator|=
operator|(
name|g
operator|+
operator|(
name|gg
operator|*
name|yap
operator|)
operator|)
operator|>>
literal|8
expr_stmt|;
name|b
operator|=
operator|(
name|b
operator|+
operator|(
name|bb
operator|*
name|yap
operator|)
operator|)
operator|>>
literal|8
expr_stmt|;
block|}
operator|*
name|dptr
operator|++
operator|=
name|qRgb
argument_list|(
name|r
operator|>>
literal|14
argument_list|,
name|g
operator|>>
literal|14
argument_list|,
name|b
operator|>>
literal|14
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|qt_qimageScaleAARGB_down_xy
specifier|static
name|void
name|qt_qimageScaleAARGB_down_xy
parameter_list|(
name|QImageScaleInfo
modifier|*
name|isi
parameter_list|,
name|unsigned
name|int
modifier|*
name|dest
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|sow
parameter_list|)
block|{
specifier|const
name|unsigned
name|int
modifier|*
modifier|*
name|ypoints
init|=
name|isi
operator|->
name|ypoints
decl_stmt|;
name|int
modifier|*
name|xpoints
init|=
name|isi
operator|->
name|xpoints
decl_stmt|;
name|int
modifier|*
name|xapoints
init|=
name|isi
operator|->
name|xapoints
decl_stmt|;
name|int
modifier|*
name|yapoints
init|=
name|isi
operator|->
name|yapoints
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|dh
condition|;
name|y
operator|++
control|)
block|{
name|int
name|Cy
init|=
name|yapoints
index|[
name|y
index|]
operator|>>
literal|16
decl_stmt|;
name|int
name|yap
init|=
name|yapoints
index|[
name|y
index|]
operator|&
literal|0xffff
decl_stmt|;
name|unsigned
name|int
modifier|*
name|dptr
init|=
name|dest
operator|+
operator|(
name|y
operator|*
name|dow
operator|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|dw
condition|;
name|x
operator|++
control|)
block|{
name|int
name|Cx
init|=
name|xapoints
index|[
name|x
index|]
operator|>>
literal|16
decl_stmt|;
name|int
name|xap
init|=
name|xapoints
index|[
name|x
index|]
operator|&
literal|0xffff
decl_stmt|;
specifier|const
name|unsigned
name|int
modifier|*
name|sptr
init|=
name|ypoints
index|[
name|y
index|]
operator|+
name|xpoints
index|[
name|x
index|]
decl_stmt|;
name|int
name|rx
decl_stmt|,
name|gx
decl_stmt|,
name|bx
decl_stmt|;
name|qt_qimageScaleAARGB_helper
argument_list|(
name|sptr
argument_list|,
name|xap
argument_list|,
name|Cx
argument_list|,
literal|1
argument_list|,
name|rx
argument_list|,
name|gx
argument_list|,
name|bx
argument_list|)
expr_stmt|;
name|int
name|r
init|=
operator|(
name|rx
operator|>>
literal|4
operator|)
operator|*
name|yap
decl_stmt|;
name|int
name|g
init|=
operator|(
name|gx
operator|>>
literal|4
operator|)
operator|*
name|yap
decl_stmt|;
name|int
name|b
init|=
operator|(
name|bx
operator|>>
literal|4
operator|)
operator|*
name|yap
decl_stmt|;
name|int
name|j
decl_stmt|;
for|for
control|(
name|j
operator|=
operator|(
literal|1
operator|<<
literal|14
operator|)
operator|-
name|yap
init|;
name|j
operator|>
name|Cy
condition|;
name|j
operator|-=
name|Cy
control|)
block|{
name|sptr
operator|+=
name|sow
expr_stmt|;
name|qt_qimageScaleAARGB_helper
argument_list|(
name|sptr
argument_list|,
name|xap
argument_list|,
name|Cx
argument_list|,
literal|1
argument_list|,
name|rx
argument_list|,
name|gx
argument_list|,
name|bx
argument_list|)
expr_stmt|;
name|r
operator|+=
operator|(
name|rx
operator|>>
literal|4
operator|)
operator|*
name|Cy
expr_stmt|;
name|g
operator|+=
operator|(
name|gx
operator|>>
literal|4
operator|)
operator|*
name|Cy
expr_stmt|;
name|b
operator|+=
operator|(
name|bx
operator|>>
literal|4
operator|)
operator|*
name|Cy
expr_stmt|;
block|}
name|sptr
operator|+=
name|sow
expr_stmt|;
name|qt_qimageScaleAARGB_helper
argument_list|(
name|sptr
argument_list|,
name|xap
argument_list|,
name|Cx
argument_list|,
literal|1
argument_list|,
name|rx
argument_list|,
name|gx
argument_list|,
name|bx
argument_list|)
expr_stmt|;
name|r
operator|+=
operator|(
name|rx
operator|>>
literal|4
operator|)
operator|*
name|j
expr_stmt|;
name|g
operator|+=
operator|(
name|gx
operator|>>
literal|4
operator|)
operator|*
name|j
expr_stmt|;
name|b
operator|+=
operator|(
name|bx
operator|>>
literal|4
operator|)
operator|*
name|j
expr_stmt|;
operator|*
name|dptr
operator|=
name|qRgb
argument_list|(
name|r
operator|>>
literal|24
argument_list|,
name|g
operator|>>
literal|24
argument_list|,
name|b
operator|>>
literal|24
argument_list|)
expr_stmt|;
name|dptr
operator|++
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|qSmoothScaleImage
name|QImage
name|qSmoothScaleImage
parameter_list|(
specifier|const
name|QImage
modifier|&
name|src
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|dh
parameter_list|)
block|{
name|QImage
name|buffer
decl_stmt|;
if|if
condition|(
name|src
operator|.
name|isNull
argument_list|()
operator|||
name|dw
operator|<=
literal|0
operator|||
name|dh
operator|<=
literal|0
condition|)
return|return
name|buffer
return|;
name|int
name|w
init|=
name|src
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|src
operator|.
name|height
argument_list|()
decl_stmt|;
name|QImageScaleInfo
modifier|*
name|scaleinfo
init|=
name|qimageCalcScaleInfo
argument_list|(
name|src
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|dw
argument_list|,
name|dh
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|scaleinfo
condition|)
return|return
name|buffer
return|;
name|buffer
operator|=
name|QImage
argument_list|(
name|dw
argument_list|,
name|dh
argument_list|,
name|src
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QImage: out of memory, returning null"
argument_list|)
expr_stmt|;
name|qimageFreeScaleInfo
argument_list|(
name|scaleinfo
argument_list|)
expr_stmt|;
return|return
name|QImage
argument_list|()
return|;
block|}
if|if
condition|(
name|src
operator|.
name|hasAlphaChannel
argument_list|()
condition|)
name|qt_qimageScaleAARGBA
argument_list|(
name|scaleinfo
argument_list|,
operator|(
name|unsigned
name|int
operator|*
operator|)
name|buffer
operator|.
name|scanLine
argument_list|(
literal|0
argument_list|)
argument_list|,
name|dw
argument_list|,
name|dh
argument_list|,
name|dw
argument_list|,
name|src
operator|.
name|bytesPerLine
argument_list|()
operator|/
literal|4
argument_list|)
expr_stmt|;
else|else
name|qt_qimageScaleAARGB
argument_list|(
name|scaleinfo
argument_list|,
operator|(
name|unsigned
name|int
operator|*
operator|)
name|buffer
operator|.
name|scanLine
argument_list|(
literal|0
argument_list|)
argument_list|,
name|dw
argument_list|,
name|dh
argument_list|,
name|dw
argument_list|,
name|src
operator|.
name|bytesPerLine
argument_list|()
operator|/
literal|4
argument_list|)
expr_stmt|;
name|qimageFreeScaleInfo
argument_list|(
name|scaleinfo
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
