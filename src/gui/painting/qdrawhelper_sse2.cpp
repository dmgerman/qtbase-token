begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<private/qdrawhelper_x86_p.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_COMPILER_SUPPORTS_SSE2
end_ifdef
begin_include
include|#
directive|include
file|<private/qdrawingprimitive_sse2_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_raster_p.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QDRAWHELPER_AVX
comment|// in AVX mode, we'll use the SSSE3 code
DECL|function|qt_blend_argb32_on_argb32_sse2
name|void
name|qt_blend_argb32_on_argb32_sse2
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|const_alpha
parameter_list|)
block|{
specifier|const
name|quint32
modifier|*
name|src
init|=
operator|(
specifier|const
name|quint32
operator|*
operator|)
name|srcPixels
decl_stmt|;
name|quint32
modifier|*
name|dst
init|=
operator|(
name|quint32
operator|*
operator|)
name|destPixels
decl_stmt|;
if|if
condition|(
name|const_alpha
operator|==
literal|256
condition|)
block|{
specifier|const
name|__m128i
name|alphaMask
init|=
name|_mm_set1_epi32
argument_list|(
literal|0xff000000
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|nullVector
init|=
name|_mm_set1_epi32
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|half
init|=
name|_mm_set1_epi16
argument_list|(
literal|0x80
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|one
init|=
name|_mm_set1_epi16
argument_list|(
literal|0xff
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|colorMask
init|=
name|_mm_set1_epi32
argument_list|(
literal|0x00ff00ff
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
name|BLEND_SOURCE_OVER_ARGB32_SSE2
argument_list|(
name|dst
argument_list|,
name|src
argument_list|,
name|w
argument_list|,
name|nullVector
argument_list|,
name|half
argument_list|,
name|one
argument_list|,
name|colorMask
argument_list|,
name|alphaMask
argument_list|)
expr_stmt|;
name|dst
operator|=
operator|(
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
name|uchar
operator|*
operator|)
name|dst
operator|)
operator|+
name|dbpl
operator|)
expr_stmt|;
name|src
operator|=
operator|(
specifier|const
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|src
operator|)
operator|+
name|sbpl
operator|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|const_alpha
operator|!=
literal|0
condition|)
block|{
comment|// dest = (s + d * sia) * ca + d * cia
comment|//      = s * ca + d * (sia * ca + cia)
comment|//      = s * ca + d * (1 - sa*ca)
name|const_alpha
operator|=
operator|(
name|const_alpha
operator|*
literal|255
operator|)
operator|>>
literal|8
expr_stmt|;
specifier|const
name|__m128i
name|nullVector
init|=
name|_mm_set1_epi32
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|half
init|=
name|_mm_set1_epi16
argument_list|(
literal|0x80
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|one
init|=
name|_mm_set1_epi16
argument_list|(
literal|0xff
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|colorMask
init|=
name|_mm_set1_epi32
argument_list|(
literal|0x00ff00ff
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|constAlphaVector
init|=
name|_mm_set1_epi16
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
name|BLEND_SOURCE_OVER_ARGB32_WITH_CONST_ALPHA_SSE2
argument_list|(
argument|dst
argument_list|,
argument|src
argument_list|,
argument|w
argument_list|,
argument|nullVector
argument_list|,
argument|half
argument_list|,
argument|one
argument_list|,
argument|colorMask
argument_list|,
argument|constAlphaVector
argument_list|)
name|dst
operator|=
operator|(
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
name|uchar
operator|*
operator|)
name|dst
operator|)
operator|+
name|dbpl
operator|)
expr_stmt|;
name|src
operator|=
operator|(
specifier|const
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|src
operator|)
operator|+
name|sbpl
operator|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// qblendfunctions.cpp
end_comment
begin_function_decl
name|void
name|qt_blend_rgb32_on_rgb32
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|const_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|qt_blend_rgb32_on_rgb32_sse2
name|void
name|qt_blend_rgb32_on_rgb32_sse2
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|const_alpha
parameter_list|)
block|{
specifier|const
name|quint32
modifier|*
name|src
init|=
operator|(
specifier|const
name|quint32
operator|*
operator|)
name|srcPixels
decl_stmt|;
name|quint32
modifier|*
name|dst
init|=
operator|(
name|quint32
operator|*
operator|)
name|destPixels
decl_stmt|;
if|if
condition|(
name|const_alpha
operator|!=
literal|256
condition|)
block|{
if|if
condition|(
name|const_alpha
operator|!=
literal|0
condition|)
block|{
specifier|const
name|__m128i
name|nullVector
init|=
name|_mm_set1_epi32
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|half
init|=
name|_mm_set1_epi16
argument_list|(
literal|0x80
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|colorMask
init|=
name|_mm_set1_epi32
argument_list|(
literal|0x00ff00ff
argument_list|)
decl_stmt|;
name|const_alpha
operator|=
operator|(
name|const_alpha
operator|*
literal|255
operator|)
operator|>>
literal|8
expr_stmt|;
name|int
name|one_minus_const_alpha
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
specifier|const
name|__m128i
name|constAlphaVector
init|=
name|_mm_set1_epi16
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|oneMinusConstAlpha
init|=
name|_mm_set1_epi16
argument_list|(
name|one_minus_const_alpha
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
name|int
name|x
init|=
literal|0
decl_stmt|;
comment|// First, align dest to 16 bytes:
name|ALIGNMENT_PROLOGUE_16BYTES
argument_list|(
argument|dst
argument_list|,
argument|x
argument_list|,
argument|w
argument_list|)
block|{
name|dst
index|[
name|x
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|src
index|[
name|x
index|]
argument_list|,
name|const_alpha
argument_list|,
name|dst
index|[
name|x
index|]
argument_list|,
name|one_minus_const_alpha
argument_list|)
expr_stmt|;
block|}
for|for
control|(
init|;
name|x
operator|<
name|w
operator|-
literal|3
condition|;
name|x
operator|+=
literal|4
control|)
block|{
name|__m128i
name|srcVector
init|=
name|_mm_loadu_si128
argument_list|(
operator|(
name|__m128i
operator|*
operator|)
operator|&
name|src
index|[
name|x
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|_mm_movemask_epi8
argument_list|(
name|_mm_cmpeq_epi32
argument_list|(
name|srcVector
argument_list|,
name|nullVector
argument_list|)
argument_list|)
operator|!=
literal|0xffff
condition|)
block|{
specifier|const
name|__m128i
name|dstVector
init|=
name|_mm_load_si128
argument_list|(
operator|(
name|__m128i
operator|*
operator|)
operator|&
name|dst
index|[
name|x
index|]
argument_list|)
decl_stmt|;
name|__m128i
name|result
decl_stmt|;
name|INTERPOLATE_PIXEL_255_SSE2
argument_list|(
name|result
argument_list|,
name|srcVector
argument_list|,
name|dstVector
argument_list|,
name|constAlphaVector
argument_list|,
name|oneMinusConstAlpha
argument_list|,
name|colorMask
argument_list|,
name|half
argument_list|)
expr_stmt|;
name|_mm_store_si128
argument_list|(
operator|(
name|__m128i
operator|*
operator|)
operator|&
name|dst
index|[
name|x
index|]
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
name|dst
index|[
name|x
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|src
index|[
name|x
index|]
argument_list|,
name|const_alpha
argument_list|,
name|dst
index|[
name|x
index|]
argument_list|,
name|one_minus_const_alpha
argument_list|)
expr_stmt|;
block|}
name|dst
operator|=
operator|(
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
name|uchar
operator|*
operator|)
name|dst
operator|)
operator|+
name|dbpl
operator|)
expr_stmt|;
name|src
operator|=
operator|(
specifier|const
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|src
operator|)
operator|+
name|sbpl
operator|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|qt_blend_rgb32_on_rgb32
argument_list|(
name|destPixels
argument_list|,
name|dbpl
argument_list|,
name|srcPixels
argument_list|,
name|sbpl
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_SourceOver_sse2
name|void
name|QT_FASTCALL
name|comp_func_SourceOver_sse2
parameter_list|(
name|uint
modifier|*
name|destPixels
parameter_list|,
specifier|const
name|uint
modifier|*
name|srcPixels
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|const_alpha
operator|<
literal|256
argument_list|)
expr_stmt|;
specifier|const
name|quint32
modifier|*
name|src
init|=
operator|(
specifier|const
name|quint32
operator|*
operator|)
name|srcPixels
decl_stmt|;
name|quint32
modifier|*
name|dst
init|=
operator|(
name|quint32
operator|*
operator|)
name|destPixels
decl_stmt|;
specifier|const
name|__m128i
name|nullVector
init|=
name|_mm_set1_epi32
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|half
init|=
name|_mm_set1_epi16
argument_list|(
literal|0x80
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|one
init|=
name|_mm_set1_epi16
argument_list|(
literal|0xff
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|colorMask
init|=
name|_mm_set1_epi32
argument_list|(
literal|0x00ff00ff
argument_list|)
decl_stmt|;
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
specifier|const
name|__m128i
name|alphaMask
init|=
name|_mm_set1_epi32
argument_list|(
literal|0xff000000
argument_list|)
decl_stmt|;
name|BLEND_SOURCE_OVER_ARGB32_SSE2
argument_list|(
name|dst
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|nullVector
argument_list|,
name|half
argument_list|,
name|one
argument_list|,
name|colorMask
argument_list|,
name|alphaMask
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|__m128i
name|constAlphaVector
init|=
name|_mm_set1_epi16
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
name|BLEND_SOURCE_OVER_ARGB32_WITH_CONST_ALPHA_SSE2
argument_list|(
name|dst
argument_list|,
name|src
argument_list|,
name|length
argument_list|,
name|nullVector
argument_list|,
name|half
argument_list|,
name|one
argument_list|,
name|colorMask
argument_list|,
name|constAlphaVector
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Plus_sse2
name|void
name|QT_FASTCALL
name|comp_func_Plus_sse2
parameter_list|(
name|uint
modifier|*
name|dst
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|int
name|x
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
comment|// 1) Prologue: align destination on 16 bytes
name|ALIGNMENT_PROLOGUE_16BYTES
argument_list|(
argument|dst
argument_list|,
argument|x
argument_list|,
argument|length
argument_list|)
name|dst
index|[
name|x
index|]
operator|=
name|comp_func_Plus_one_pixel
argument_list|(
name|dst
index|[
name|x
index|]
argument_list|,
name|src
index|[
name|x
index|]
argument_list|)
expr_stmt|;
comment|// 2) composition with SSE2
for|for
control|(
init|;
name|x
operator|<
name|length
operator|-
literal|3
condition|;
name|x
operator|+=
literal|4
control|)
block|{
specifier|const
name|__m128i
name|srcVector
init|=
name|_mm_loadu_si128
argument_list|(
operator|(
name|__m128i
operator|*
operator|)
operator|&
name|src
index|[
name|x
index|]
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|dstVector
init|=
name|_mm_load_si128
argument_list|(
operator|(
name|__m128i
operator|*
operator|)
operator|&
name|dst
index|[
name|x
index|]
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|result
init|=
name|_mm_adds_epu8
argument_list|(
name|srcVector
argument_list|,
name|dstVector
argument_list|)
decl_stmt|;
name|_mm_store_si128
argument_list|(
operator|(
name|__m128i
operator|*
operator|)
operator|&
name|dst
index|[
name|x
index|]
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|// 3) Epilogue:
for|for
control|(
init|;
name|x
operator|<
name|length
condition|;
operator|++
name|x
control|)
name|dst
index|[
name|x
index|]
operator|=
name|comp_func_Plus_one_pixel
argument_list|(
name|dst
index|[
name|x
index|]
argument_list|,
name|src
index|[
name|x
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|int
name|one_minus_const_alpha
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
specifier|const
name|__m128i
name|constAlphaVector
init|=
name|_mm_set1_epi16
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|oneMinusConstAlpha
init|=
name|_mm_set1_epi16
argument_list|(
name|one_minus_const_alpha
argument_list|)
decl_stmt|;
comment|// 1) Prologue: align destination on 16 bytes
name|ALIGNMENT_PROLOGUE_16BYTES
argument_list|(
argument|dst
argument_list|,
argument|x
argument_list|,
argument|length
argument_list|)
name|dst
index|[
name|x
index|]
operator|=
name|comp_func_Plus_one_pixel_const_alpha
argument_list|(
name|dst
index|[
name|x
index|]
argument_list|,
name|src
index|[
name|x
index|]
argument_list|,
name|const_alpha
argument_list|,
name|one_minus_const_alpha
argument_list|)
expr_stmt|;
specifier|const
name|__m128i
name|half
init|=
name|_mm_set1_epi16
argument_list|(
literal|0x80
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|colorMask
init|=
name|_mm_set1_epi32
argument_list|(
literal|0x00ff00ff
argument_list|)
decl_stmt|;
comment|// 2) composition with SSE2
for|for
control|(
init|;
name|x
operator|<
name|length
operator|-
literal|3
condition|;
name|x
operator|+=
literal|4
control|)
block|{
specifier|const
name|__m128i
name|srcVector
init|=
name|_mm_loadu_si128
argument_list|(
operator|(
name|__m128i
operator|*
operator|)
operator|&
name|src
index|[
name|x
index|]
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|dstVector
init|=
name|_mm_load_si128
argument_list|(
operator|(
name|__m128i
operator|*
operator|)
operator|&
name|dst
index|[
name|x
index|]
argument_list|)
decl_stmt|;
name|__m128i
name|result
init|=
name|_mm_adds_epu8
argument_list|(
name|srcVector
argument_list|,
name|dstVector
argument_list|)
decl_stmt|;
name|INTERPOLATE_PIXEL_255_SSE2
argument_list|(
argument|result
argument_list|,
argument|result
argument_list|,
argument|dstVector
argument_list|,
argument|constAlphaVector
argument_list|,
argument|oneMinusConstAlpha
argument_list|,
argument|colorMask
argument_list|,
argument|half
argument_list|)
name|_mm_store_si128
argument_list|(
operator|(
name|__m128i
operator|*
operator|)
operator|&
name|dst
index|[
name|x
index|]
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|// 3) Epilogue:
for|for
control|(
init|;
name|x
operator|<
name|length
condition|;
operator|++
name|x
control|)
name|dst
index|[
name|x
index|]
operator|=
name|comp_func_Plus_one_pixel_const_alpha
argument_list|(
name|dst
index|[
name|x
index|]
argument_list|,
name|src
index|[
name|x
index|]
argument_list|,
name|const_alpha
argument_list|,
name|one_minus_const_alpha
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_Source_sse2
name|void
name|QT_FASTCALL
name|comp_func_Source_sse2
parameter_list|(
name|uint
modifier|*
name|dst
parameter_list|,
specifier|const
name|uint
modifier|*
name|src
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|==
literal|255
condition|)
block|{
operator|::
name|memcpy
argument_list|(
name|dst
argument_list|,
name|src
argument_list|,
name|length
operator|*
sizeof|sizeof
argument_list|(
name|uint
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|int
name|ialpha
init|=
literal|255
operator|-
name|const_alpha
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
comment|// 1) prologue, align on 16 bytes
name|ALIGNMENT_PROLOGUE_16BYTES
argument_list|(
argument|dst
argument_list|,
argument|x
argument_list|,
argument|length
argument_list|)
name|dst
index|[
name|x
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|src
index|[
name|x
index|]
argument_list|,
name|const_alpha
argument_list|,
name|dst
index|[
name|x
index|]
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
comment|// 2) interpolate pixels with SSE2
specifier|const
name|__m128i
name|half
init|=
name|_mm_set1_epi16
argument_list|(
literal|0x80
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|colorMask
init|=
name|_mm_set1_epi32
argument_list|(
literal|0x00ff00ff
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|constAlphaVector
init|=
name|_mm_set1_epi16
argument_list|(
name|const_alpha
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|oneMinusConstAlpha
init|=
name|_mm_set1_epi16
argument_list|(
name|ialpha
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|x
operator|<
name|length
operator|-
literal|3
condition|;
name|x
operator|+=
literal|4
control|)
block|{
specifier|const
name|__m128i
name|srcVector
init|=
name|_mm_loadu_si128
argument_list|(
operator|(
name|__m128i
operator|*
operator|)
operator|&
name|src
index|[
name|x
index|]
argument_list|)
decl_stmt|;
name|__m128i
name|dstVector
init|=
name|_mm_load_si128
argument_list|(
operator|(
name|__m128i
operator|*
operator|)
operator|&
name|dst
index|[
name|x
index|]
argument_list|)
decl_stmt|;
name|INTERPOLATE_PIXEL_255_SSE2
argument_list|(
argument|dstVector
argument_list|,
argument|srcVector
argument_list|,
argument|dstVector
argument_list|,
argument|constAlphaVector
argument_list|,
argument|oneMinusConstAlpha
argument_list|,
argument|colorMask
argument_list|,
argument|half
argument_list|)
name|_mm_store_si128
argument_list|(
operator|(
name|__m128i
operator|*
operator|)
operator|&
name|dst
index|[
name|x
index|]
argument_list|,
name|dstVector
argument_list|)
expr_stmt|;
block|}
comment|// 3) Epilogue
for|for
control|(
init|;
name|x
operator|<
name|length
condition|;
operator|++
name|x
control|)
name|dst
index|[
name|x
index|]
operator|=
name|INTERPOLATE_PIXEL_255
argument_list|(
name|src
index|[
name|x
index|]
argument_list|,
name|const_alpha
argument_list|,
name|dst
index|[
name|x
index|]
argument_list|,
name|ialpha
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_memfill32
name|void
name|qt_memfill32
parameter_list|(
name|quint32
modifier|*
name|dest
parameter_list|,
name|quint32
name|value
parameter_list|,
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|count
operator|<
literal|7
condition|)
block|{
switch|switch
condition|(
name|count
condition|)
block|{
case|case
literal|6
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|5
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|4
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|3
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|2
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|1
case|:
operator|*
name|dest
operator|=
name|value
expr_stmt|;
block|}
return|return;
block|}
empty_stmt|;
specifier|const
name|int
name|align
init|=
call|(
name|quintptr
call|)
argument_list|(
name|dest
argument_list|)
operator|&
literal|0xf
decl_stmt|;
switch|switch
condition|(
name|align
condition|)
block|{
case|case
literal|4
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
operator|--
name|count
expr_stmt|;
case|case
literal|8
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
operator|--
name|count
expr_stmt|;
case|case
literal|12
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
operator|--
name|count
expr_stmt|;
block|}
specifier|const
name|int
name|rest
init|=
name|count
operator|&
literal|0x3
decl_stmt|;
if|if
condition|(
name|rest
condition|)
block|{
switch|switch
condition|(
name|rest
condition|)
block|{
case|case
literal|3
case|:
name|dest
index|[
name|count
operator|-
literal|3
index|]
operator|=
name|value
expr_stmt|;
case|case
literal|2
case|:
name|dest
index|[
name|count
operator|-
literal|2
index|]
operator|=
name|value
expr_stmt|;
case|case
literal|1
case|:
name|dest
index|[
name|count
operator|-
literal|1
index|]
operator|=
name|value
expr_stmt|;
block|}
block|}
name|int
name|count128
init|=
name|count
operator|/
literal|4
decl_stmt|;
name|__m128i
modifier|*
name|dst128
init|=
cast|reinterpret_cast
argument_list|<
name|__m128i
operator|*
argument_list|>
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|__m128i
modifier|*
name|end128
init|=
name|dst128
operator|+
name|count128
decl_stmt|;
specifier|const
name|__m128i
name|value128
init|=
name|_mm_set_epi32
argument_list|(
name|value
argument_list|,
name|value
argument_list|,
name|value
argument_list|,
name|value
argument_list|)
decl_stmt|;
while|while
condition|(
name|dst128
operator|+
literal|3
operator|<
name|end128
condition|)
block|{
name|_mm_stream_si128
argument_list|(
name|dst128
operator|+
literal|0
argument_list|,
name|value128
argument_list|)
expr_stmt|;
name|_mm_stream_si128
argument_list|(
name|dst128
operator|+
literal|1
argument_list|,
name|value128
argument_list|)
expr_stmt|;
name|_mm_stream_si128
argument_list|(
name|dst128
operator|+
literal|2
argument_list|,
name|value128
argument_list|)
expr_stmt|;
name|_mm_stream_si128
argument_list|(
name|dst128
operator|+
literal|3
argument_list|,
name|value128
argument_list|)
expr_stmt|;
name|dst128
operator|+=
literal|4
expr_stmt|;
block|}
switch|switch
condition|(
name|count128
operator|&
literal|0x3
condition|)
block|{
case|case
literal|3
case|:
name|_mm_stream_si128
argument_list|(
name|dst128
operator|++
argument_list|,
name|value128
argument_list|)
expr_stmt|;
case|case
literal|2
case|:
name|_mm_stream_si128
argument_list|(
name|dst128
operator|++
argument_list|,
name|value128
argument_list|)
expr_stmt|;
case|case
literal|1
case|:
name|_mm_stream_si128
argument_list|(
name|dst128
operator|++
argument_list|,
name|value128
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comp_func_solid_SourceOver_sse2
name|void
name|QT_FASTCALL
name|comp_func_solid_SourceOver_sse2
parameter_list|(
name|uint
modifier|*
name|destPixels
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|color
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
operator|(
name|const_alpha
operator|&
name|qAlpha
argument_list|(
name|color
argument_list|)
operator|)
operator|==
literal|255
condition|)
block|{
name|qt_memfill32
argument_list|(
name|destPixels
argument_list|,
name|color
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|const_alpha
operator|!=
literal|255
condition|)
name|color
operator|=
name|BYTE_MUL
argument_list|(
name|color
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
specifier|const
name|quint32
name|minusAlphaOfColor
init|=
name|qAlpha
argument_list|(
operator|~
name|color
argument_list|)
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
name|quint32
modifier|*
name|dst
init|=
operator|(
name|quint32
operator|*
operator|)
name|destPixels
decl_stmt|;
specifier|const
name|__m128i
name|colorVector
init|=
name|_mm_set1_epi32
argument_list|(
name|color
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|colorMask
init|=
name|_mm_set1_epi32
argument_list|(
literal|0x00ff00ff
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|half
init|=
name|_mm_set1_epi16
argument_list|(
literal|0x80
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|minusAlphaOfColorVector
init|=
name|_mm_set1_epi16
argument_list|(
name|minusAlphaOfColor
argument_list|)
decl_stmt|;
name|ALIGNMENT_PROLOGUE_16BYTES
argument_list|(
argument|dst
argument_list|,
argument|x
argument_list|,
argument|length
argument_list|)
name|destPixels
index|[
name|x
index|]
operator|=
name|color
operator|+
name|BYTE_MUL
argument_list|(
name|destPixels
index|[
name|x
index|]
argument_list|,
name|minusAlphaOfColor
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|x
operator|<
name|length
operator|-
literal|3
condition|;
name|x
operator|+=
literal|4
control|)
block|{
name|__m128i
name|dstVector
init|=
name|_mm_load_si128
argument_list|(
operator|(
name|__m128i
operator|*
operator|)
operator|&
name|dst
index|[
name|x
index|]
argument_list|)
decl_stmt|;
name|BYTE_MUL_SSE2
argument_list|(
name|dstVector
argument_list|,
name|dstVector
argument_list|,
name|minusAlphaOfColorVector
argument_list|,
name|colorMask
argument_list|,
name|half
argument_list|)
expr_stmt|;
name|dstVector
operator|=
name|_mm_add_epi8
argument_list|(
name|colorVector
argument_list|,
name|dstVector
argument_list|)
expr_stmt|;
name|_mm_store_si128
argument_list|(
operator|(
name|__m128i
operator|*
operator|)
operator|&
name|dst
index|[
name|x
index|]
argument_list|,
name|dstVector
argument_list|)
expr_stmt|;
block|}
for|for
control|(
init|;
name|x
operator|<
name|length
condition|;
operator|++
name|x
control|)
name|destPixels
index|[
name|x
index|]
operator|=
name|color
operator|+
name|BYTE_MUL
argument_list|(
name|destPixels
index|[
name|x
index|]
argument_list|,
name|minusAlphaOfColor
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QDRAWHELPER_AVX
end_ifndef
begin_decl_stmt
DECL|variable|qt_functionForModeSolid_SSE2
name|CompositionFunctionSolid
name|qt_functionForModeSolid_SSE2
index|[
name|numCompositionFunctions
index|]
init|=
block|{
name|comp_func_solid_SourceOver_sse2
block|,
name|comp_func_solid_DestinationOver
block|,
name|comp_func_solid_Clear
block|,
name|comp_func_solid_Source
block|,
name|comp_func_solid_Destination
block|,
name|comp_func_solid_SourceIn
block|,
name|comp_func_solid_DestinationIn
block|,
name|comp_func_solid_SourceOut
block|,
name|comp_func_solid_DestinationOut
block|,
name|comp_func_solid_SourceAtop
block|,
name|comp_func_solid_DestinationAtop
block|,
name|comp_func_solid_XOR
block|,
name|comp_func_solid_Plus
block|,
name|comp_func_solid_Multiply
block|,
name|comp_func_solid_Screen
block|,
name|comp_func_solid_Overlay
block|,
name|comp_func_solid_Darken
block|,
name|comp_func_solid_Lighten
block|,
name|comp_func_solid_ColorDodge
block|,
name|comp_func_solid_ColorBurn
block|,
name|comp_func_solid_HardLight
block|,
name|comp_func_solid_SoftLight
block|,
name|comp_func_solid_Difference
block|,
name|comp_func_solid_Exclusion
block|,
name|rasterop_solid_SourceOrDestination
block|,
name|rasterop_solid_SourceAndDestination
block|,
name|rasterop_solid_SourceXorDestination
block|,
name|rasterop_solid_NotSourceAndNotDestination
block|,
name|rasterop_solid_NotSourceOrNotDestination
block|,
name|rasterop_solid_NotSourceXorDestination
block|,
name|rasterop_solid_NotSource
block|,
name|rasterop_solid_NotSourceAndDestination
block|,
name|rasterop_solid_SourceAndNotDestination
block|,
name|rasterop_solid_NotSourceOrDestination
block|,
name|rasterop_solid_SourceOrNotDestination
block|,
name|rasterop_solid_ClearDestination
block|,
name|rasterop_solid_SetDestination
block|,
name|rasterop_solid_NotDestination
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_functionForMode_SSE2
name|CompositionFunction
name|qt_functionForMode_SSE2
index|[
name|numCompositionFunctions
index|]
init|=
block|{
name|comp_func_SourceOver_sse2
block|,
name|comp_func_DestinationOver
block|,
name|comp_func_Clear
block|,
name|comp_func_Source_sse2
block|,
name|comp_func_Destination
block|,
name|comp_func_SourceIn
block|,
name|comp_func_DestinationIn
block|,
name|comp_func_SourceOut
block|,
name|comp_func_DestinationOut
block|,
name|comp_func_SourceAtop
block|,
name|comp_func_DestinationAtop
block|,
name|comp_func_XOR
block|,
name|comp_func_Plus_sse2
block|,
name|comp_func_Multiply
block|,
name|comp_func_Screen
block|,
name|comp_func_Overlay
block|,
name|comp_func_Darken
block|,
name|comp_func_Lighten
block|,
name|comp_func_ColorDodge
block|,
name|comp_func_ColorBurn
block|,
name|comp_func_HardLight
block|,
name|comp_func_SoftLight
block|,
name|comp_func_Difference
block|,
name|comp_func_Exclusion
block|,
name|rasterop_SourceOrDestination
block|,
name|rasterop_SourceAndDestination
block|,
name|rasterop_SourceXorDestination
block|,
name|rasterop_NotSourceAndNotDestination
block|,
name|rasterop_NotSourceOrNotDestination
block|,
name|rasterop_NotSourceXorDestination
block|,
name|rasterop_NotSource
block|,
name|rasterop_NotSourceAndDestination
block|,
name|rasterop_SourceAndNotDestination
block|,
name|rasterop_NotSourceOrDestination
block|,
name|rasterop_SourceOrNotDestination
block|,
name|rasterop_ClearDestination
block|,
name|rasterop_SetDestination
block|,
name|rasterop_NotDestination
block|}
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qt_memfill16
name|void
name|qt_memfill16
parameter_list|(
name|quint16
modifier|*
name|dest
parameter_list|,
name|quint16
name|value
parameter_list|,
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|count
operator|<
literal|3
condition|)
block|{
switch|switch
condition|(
name|count
condition|)
block|{
case|case
literal|2
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
case|case
literal|1
case|:
operator|*
name|dest
operator|=
name|value
expr_stmt|;
block|}
return|return;
block|}
specifier|const
name|int
name|align
init|=
call|(
name|quintptr
call|)
argument_list|(
name|dest
argument_list|)
operator|&
literal|0x3
decl_stmt|;
switch|switch
condition|(
name|align
condition|)
block|{
case|case
literal|2
case|:
operator|*
name|dest
operator|++
operator|=
name|value
expr_stmt|;
operator|--
name|count
expr_stmt|;
block|}
specifier|const
name|quint32
name|value32
init|=
operator|(
name|value
operator|<<
literal|16
operator|)
operator||
name|value
decl_stmt|;
name|qt_memfill32
argument_list|(
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|dest
argument_list|)
argument_list|,
name|value32
argument_list|,
name|count
operator|/
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|&
literal|0x1
condition|)
name|dest
index|[
name|count
operator|-
literal|1
index|]
operator|=
name|value
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_bitmapblit32_sse2
name|void
name|qt_bitmapblit32_sse2
parameter_list|(
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|quint32
name|color
parameter_list|,
specifier|const
name|uchar
modifier|*
name|src
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|stride
parameter_list|)
block|{
name|quint32
modifier|*
name|dest
init|=
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
argument_list|)
operator|+
name|x
decl_stmt|;
specifier|const
name|int
name|destStride
init|=
name|rasterBuffer
operator|->
name|bytesPerLine
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|c128
init|=
name|_mm_set1_epi32
argument_list|(
name|color
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|maskmask1
init|=
name|_mm_set_epi32
argument_list|(
literal|0x10101010
argument_list|,
literal|0x20202020
argument_list|,
literal|0x40404040
argument_list|,
literal|0x80808080
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|maskadd1
init|=
name|_mm_set_epi32
argument_list|(
literal|0x70707070
argument_list|,
literal|0x60606060
argument_list|,
literal|0x40404040
argument_list|,
literal|0x00000000
argument_list|)
decl_stmt|;
if|if
condition|(
name|width
operator|>
literal|4
condition|)
block|{
specifier|const
name|__m128i
name|maskmask2
init|=
name|_mm_set_epi32
argument_list|(
literal|0x01010101
argument_list|,
literal|0x02020202
argument_list|,
literal|0x04040404
argument_list|,
literal|0x08080808
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|maskadd2
init|=
name|_mm_set_epi32
argument_list|(
literal|0x7f7f7f7f
argument_list|,
literal|0x7e7e7e7e
argument_list|,
literal|0x7c7c7c7c
argument_list|,
literal|0x78787878
argument_list|)
decl_stmt|;
while|while
condition|(
name|height
operator|--
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|+=
literal|8
control|)
block|{
specifier|const
name|quint8
name|s
init|=
name|src
index|[
name|x
operator|>>
literal|3
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|s
condition|)
continue|continue;
name|__m128i
name|mask1
init|=
name|_mm_set1_epi8
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|__m128i
name|mask2
init|=
name|mask1
decl_stmt|;
name|mask1
operator|=
name|_mm_and_si128
argument_list|(
name|mask1
argument_list|,
name|maskmask1
argument_list|)
expr_stmt|;
name|mask1
operator|=
name|_mm_add_epi8
argument_list|(
name|mask1
argument_list|,
name|maskadd1
argument_list|)
expr_stmt|;
name|_mm_maskmoveu_si128
argument_list|(
name|c128
argument_list|,
name|mask1
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|(
name|dest
operator|+
name|x
operator|)
argument_list|)
expr_stmt|;
name|mask2
operator|=
name|_mm_and_si128
argument_list|(
name|mask2
argument_list|,
name|maskmask2
argument_list|)
expr_stmt|;
name|mask2
operator|=
name|_mm_add_epi8
argument_list|(
name|mask2
argument_list|,
name|maskadd2
argument_list|)
expr_stmt|;
name|_mm_maskmoveu_si128
argument_list|(
name|c128
argument_list|,
name|mask2
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|(
name|dest
operator|+
name|x
operator|+
literal|4
operator|)
argument_list|)
expr_stmt|;
block|}
name|dest
operator|+=
name|destStride
expr_stmt|;
name|src
operator|+=
name|stride
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|height
operator|--
condition|)
block|{
specifier|const
name|quint8
name|s
init|=
operator|*
name|src
decl_stmt|;
if|if
condition|(
name|s
condition|)
block|{
name|__m128i
name|mask1
init|=
name|_mm_set1_epi8
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|mask1
operator|=
name|_mm_and_si128
argument_list|(
name|mask1
argument_list|,
name|maskmask1
argument_list|)
expr_stmt|;
name|mask1
operator|=
name|_mm_add_epi8
argument_list|(
name|mask1
argument_list|,
name|maskadd1
argument_list|)
expr_stmt|;
name|_mm_maskmoveu_si128
argument_list|(
name|c128
argument_list|,
name|mask1
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|(
name|dest
operator|)
argument_list|)
expr_stmt|;
block|}
name|dest
operator|+=
name|destStride
expr_stmt|;
name|src
operator|+=
name|stride
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|qt_bitmapblit8888_sse2
name|void
name|qt_bitmapblit8888_sse2
parameter_list|(
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|quint32
name|color
parameter_list|,
specifier|const
name|uchar
modifier|*
name|src
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|stride
parameter_list|)
block|{
name|qt_bitmapblit32_sse2
argument_list|(
name|rasterBuffer
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|ARGB2RGBA
argument_list|(
name|color
argument_list|)
argument_list|,
name|src
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|stride
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_bitmapblit16_sse2
name|void
name|qt_bitmapblit16_sse2
parameter_list|(
name|QRasterBuffer
modifier|*
name|rasterBuffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|quint32
name|color
parameter_list|,
specifier|const
name|uchar
modifier|*
name|src
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|stride
parameter_list|)
block|{
specifier|const
name|quint16
name|c
init|=
name|qConvertRgb32To16
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|quint16
modifier|*
name|dest
init|=
cast|reinterpret_cast
argument_list|<
name|quint16
operator|*
argument_list|>
argument_list|(
name|rasterBuffer
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
argument_list|)
operator|+
name|x
decl_stmt|;
specifier|const
name|int
name|destStride
init|=
name|rasterBuffer
operator|->
name|bytesPerLine
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|quint16
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|c128
init|=
name|_mm_set1_epi16
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|QT_WARNING_DISABLE_MSVC
argument_list|(
literal|4309
argument_list|)
comment|// truncation of constant value
specifier|const
name|__m128i
name|maskmask
init|=
name|_mm_set_epi16
argument_list|(
literal|0x0101
argument_list|,
literal|0x0202
argument_list|,
literal|0x0404
argument_list|,
literal|0x0808
argument_list|,
literal|0x1010
argument_list|,
literal|0x2020
argument_list|,
literal|0x4040
argument_list|,
literal|0x8080
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|maskadd
init|=
name|_mm_set_epi16
argument_list|(
literal|0x7f7f
argument_list|,
literal|0x7e7e
argument_list|,
literal|0x7c7c
argument_list|,
literal|0x7878
argument_list|,
literal|0x7070
argument_list|,
literal|0x6060
argument_list|,
literal|0x4040
argument_list|,
literal|0x0000
argument_list|)
decl_stmt|;
while|while
condition|(
name|height
operator|--
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|+=
literal|8
control|)
block|{
specifier|const
name|quint8
name|s
init|=
name|src
index|[
name|x
operator|>>
literal|3
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|s
condition|)
continue|continue;
name|__m128i
name|mask
init|=
name|_mm_set1_epi8
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|mask
operator|=
name|_mm_and_si128
argument_list|(
name|mask
argument_list|,
name|maskmask
argument_list|)
expr_stmt|;
name|mask
operator|=
name|_mm_add_epi8
argument_list|(
name|mask
argument_list|,
name|maskadd
argument_list|)
expr_stmt|;
name|_mm_maskmoveu_si128
argument_list|(
name|c128
argument_list|,
name|mask
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|(
name|dest
operator|+
name|x
operator|)
argument_list|)
expr_stmt|;
block|}
name|dest
operator|+=
name|destStride
expr_stmt|;
name|src
operator|+=
name|stride
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|QSimdSse2
class|class
name|QSimdSse2
block|{
public|public:
DECL|typedef|Int32x4
typedef|typedef
name|__m128i
name|Int32x4
typedef|;
DECL|typedef|Float32x4
typedef|typedef
name|__m128
name|Float32x4
typedef|;
DECL|union|Vect_buffer_i
DECL|member|v
DECL|member|i
union|union
name|Vect_buffer_i
block|{
name|Int32x4
name|v
decl_stmt|;
name|int
name|i
index|[
literal|4
index|]
decl_stmt|;
block|}
union|;
DECL|union|Vect_buffer_f
DECL|member|v
DECL|member|f
union|union
name|Vect_buffer_f
block|{
name|Float32x4
name|v
decl_stmt|;
name|float
name|f
index|[
literal|4
index|]
decl_stmt|;
block|}
union|;
DECL|function|v_dup
specifier|static
specifier|inline
name|Float32x4
name|v_dup
parameter_list|(
name|float
name|x
parameter_list|)
block|{
return|return
name|_mm_set1_ps
argument_list|(
name|x
argument_list|)
return|;
block|}
DECL|function|v_dup
specifier|static
specifier|inline
name|Float32x4
name|v_dup
parameter_list|(
name|double
name|x
parameter_list|)
block|{
return|return
name|_mm_set1_ps
argument_list|(
name|x
argument_list|)
return|;
block|}
DECL|function|v_dup
specifier|static
specifier|inline
name|Int32x4
name|v_dup
parameter_list|(
name|int
name|x
parameter_list|)
block|{
return|return
name|_mm_set1_epi32
argument_list|(
name|x
argument_list|)
return|;
block|}
DECL|function|v_dup
specifier|static
specifier|inline
name|Int32x4
name|v_dup
parameter_list|(
name|uint
name|x
parameter_list|)
block|{
return|return
name|_mm_set1_epi32
argument_list|(
name|x
argument_list|)
return|;
block|}
DECL|function|v_add
specifier|static
specifier|inline
name|Float32x4
name|v_add
parameter_list|(
name|Float32x4
name|a
parameter_list|,
name|Float32x4
name|b
parameter_list|)
block|{
return|return
name|_mm_add_ps
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|function|v_add
specifier|static
specifier|inline
name|Int32x4
name|v_add
parameter_list|(
name|Int32x4
name|a
parameter_list|,
name|Int32x4
name|b
parameter_list|)
block|{
return|return
name|_mm_add_epi32
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|function|v_max
specifier|static
specifier|inline
name|Float32x4
name|v_max
parameter_list|(
name|Float32x4
name|a
parameter_list|,
name|Float32x4
name|b
parameter_list|)
block|{
return|return
name|_mm_max_ps
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|function|v_min
specifier|static
specifier|inline
name|Float32x4
name|v_min
parameter_list|(
name|Float32x4
name|a
parameter_list|,
name|Float32x4
name|b
parameter_list|)
block|{
return|return
name|_mm_min_ps
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|function|v_min_16
specifier|static
specifier|inline
name|Int32x4
name|v_min_16
parameter_list|(
name|Int32x4
name|a
parameter_list|,
name|Int32x4
name|b
parameter_list|)
block|{
return|return
name|_mm_min_epi16
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|function|v_and
specifier|static
specifier|inline
name|Int32x4
name|v_and
parameter_list|(
name|Int32x4
name|a
parameter_list|,
name|Int32x4
name|b
parameter_list|)
block|{
return|return
name|_mm_and_si128
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|function|v_sub
specifier|static
specifier|inline
name|Float32x4
name|v_sub
parameter_list|(
name|Float32x4
name|a
parameter_list|,
name|Float32x4
name|b
parameter_list|)
block|{
return|return
name|_mm_sub_ps
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|function|v_sub
specifier|static
specifier|inline
name|Int32x4
name|v_sub
parameter_list|(
name|Int32x4
name|a
parameter_list|,
name|Int32x4
name|b
parameter_list|)
block|{
return|return
name|_mm_sub_epi32
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|function|v_mul
specifier|static
specifier|inline
name|Float32x4
name|v_mul
parameter_list|(
name|Float32x4
name|a
parameter_list|,
name|Float32x4
name|b
parameter_list|)
block|{
return|return
name|_mm_mul_ps
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|function|v_sqrt
specifier|static
specifier|inline
name|Float32x4
name|v_sqrt
parameter_list|(
name|Float32x4
name|x
parameter_list|)
block|{
return|return
name|_mm_sqrt_ps
argument_list|(
name|x
argument_list|)
return|;
block|}
DECL|function|v_toInt
specifier|static
specifier|inline
name|Int32x4
name|v_toInt
parameter_list|(
name|Float32x4
name|x
parameter_list|)
block|{
return|return
name|_mm_cvttps_epi32
argument_list|(
name|x
argument_list|)
return|;
block|}
comment|// pre-VS 2008 doesn't have cast intrinsics, whereas 2008 and later requires it
comment|// (same deal with gcc prior to 4.0)
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
operator|&&
name|_MSC_VER
operator|<
literal|1500
operator|)
operator|||
operator|(
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
name|__GNUC__
operator|<
literal|4
operator|)
DECL|function|v_greaterOrEqual
specifier|static
specifier|inline
name|Int32x4
name|v_greaterOrEqual
parameter_list|(
name|Float32x4
name|a
parameter_list|,
name|Float32x4
name|b
parameter_list|)
block|{
union|union
name|Convert
block|{
name|Int32x4
name|vi
decl_stmt|;
name|Float32x4
name|vf
decl_stmt|;
block|}
name|convert
union|;
name|convert
operator|.
name|vf
operator|=
name|_mm_cmpgt_ps
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
return|return
name|convert
operator|.
name|vi
return|;
block|}
else|#
directive|else
DECL|function|v_greaterOrEqual
specifier|static
specifier|inline
name|Int32x4
name|v_greaterOrEqual
parameter_list|(
name|Float32x4
name|a
parameter_list|,
name|Float32x4
name|b
parameter_list|)
block|{
return|return
name|_mm_castps_si128
argument_list|(
name|_mm_cmpgt_ps
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
return|;
block|}
endif|#
directive|endif
block|}
class|;
end_class
begin_function
DECL|function|qt_fetch_radial_gradient_sse2
specifier|const
name|uint
modifier|*
name|QT_FASTCALL
name|qt_fetch_radial_gradient_sse2
parameter_list|(
name|uint
modifier|*
name|buffer
parameter_list|,
specifier|const
name|Operator
modifier|*
name|op
parameter_list|,
specifier|const
name|QSpanData
modifier|*
name|data
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|qt_fetch_radial_gradient_template
argument_list|<
name|QRadialFetchSimd
argument_list|<
name|QSimdSse2
argument_list|>
argument_list|>
argument_list|(
name|buffer
argument_list|,
name|op
argument_list|,
name|data
argument_list|,
name|y
argument_list|,
name|x
argument_list|,
name|length
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_scale_image_argb32_on_argb32_sse2
name|void
name|qt_scale_image_argb32_on_argb32_sse2
parameter_list|(
name|uchar
modifier|*
name|destPixels
parameter_list|,
name|int
name|dbpl
parameter_list|,
specifier|const
name|uchar
modifier|*
name|srcPixels
parameter_list|,
name|int
name|sbpl
parameter_list|,
name|int
name|srch
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|targetRect
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sourceRect
parameter_list|,
specifier|const
name|QRect
modifier|&
name|clip
parameter_list|,
name|int
name|const_alpha
parameter_list|)
block|{
if|if
condition|(
name|const_alpha
operator|!=
literal|256
condition|)
block|{
comment|// from qblendfunctions.cpp
specifier|extern
name|void
name|qt_scale_image_argb32_on_argb32
argument_list|(
name|uchar
operator|*
name|destPixels
argument_list|,
name|int
name|dbpl
argument_list|,
specifier|const
name|uchar
operator|*
name|srcPixels
argument_list|,
name|int
name|sbpl
argument_list|,
name|int
name|srch
argument_list|,
specifier|const
name|QRectF
operator|&
name|targetRect
argument_list|,
specifier|const
name|QRectF
operator|&
name|sourceRect
argument_list|,
specifier|const
name|QRect
operator|&
name|clip
argument_list|,
name|int
name|const_alpha
argument_list|)
decl_stmt|;
return|return
name|qt_scale_image_argb32_on_argb32
argument_list|(
name|destPixels
argument_list|,
name|dbpl
argument_list|,
name|srcPixels
argument_list|,
name|sbpl
argument_list|,
name|srch
argument_list|,
name|targetRect
argument_list|,
name|sourceRect
argument_list|,
name|clip
argument_list|,
name|const_alpha
argument_list|)
return|;
block|}
name|qreal
name|sx
init|=
name|targetRect
operator|.
name|width
argument_list|()
operator|/
operator|(
name|qreal
operator|)
name|sourceRect
operator|.
name|width
argument_list|()
decl_stmt|;
name|qreal
name|sy
init|=
name|targetRect
operator|.
name|height
argument_list|()
operator|/
operator|(
name|qreal
operator|)
name|sourceRect
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|ix
init|=
literal|0x00010000
operator|/
name|sx
decl_stmt|;
name|int
name|iy
init|=
literal|0x00010000
operator|/
name|sy
decl_stmt|;
name|int
name|cx1
init|=
name|clip
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|cx2
init|=
name|clip
operator|.
name|x
argument_list|()
operator|+
name|clip
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|cy1
init|=
name|clip
operator|.
name|top
argument_list|()
decl_stmt|;
name|int
name|cy2
init|=
name|clip
operator|.
name|y
argument_list|()
operator|+
name|clip
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|tx1
init|=
name|qRound
argument_list|(
name|targetRect
operator|.
name|left
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|tx2
init|=
name|qRound
argument_list|(
name|targetRect
operator|.
name|right
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|ty1
init|=
name|qRound
argument_list|(
name|targetRect
operator|.
name|top
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|ty2
init|=
name|qRound
argument_list|(
name|targetRect
operator|.
name|bottom
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tx2
operator|<
name|tx1
condition|)
name|qSwap
argument_list|(
name|tx2
argument_list|,
name|tx1
argument_list|)
expr_stmt|;
if|if
condition|(
name|ty2
operator|<
name|ty1
condition|)
name|qSwap
argument_list|(
name|ty2
argument_list|,
name|ty1
argument_list|)
expr_stmt|;
if|if
condition|(
name|tx1
operator|<
name|cx1
condition|)
name|tx1
operator|=
name|cx1
expr_stmt|;
if|if
condition|(
name|tx2
operator|>=
name|cx2
condition|)
name|tx2
operator|=
name|cx2
expr_stmt|;
if|if
condition|(
name|tx1
operator|>=
name|tx2
condition|)
return|return;
if|if
condition|(
name|ty1
operator|<
name|cy1
condition|)
name|ty1
operator|=
name|cy1
expr_stmt|;
if|if
condition|(
name|ty2
operator|>=
name|cy2
condition|)
name|ty2
operator|=
name|cy2
expr_stmt|;
if|if
condition|(
name|ty1
operator|>=
name|ty2
condition|)
return|return;
name|int
name|h
init|=
name|ty2
operator|-
name|ty1
decl_stmt|;
name|int
name|w
init|=
name|tx2
operator|-
name|tx1
decl_stmt|;
name|quint32
name|basex
decl_stmt|;
name|quint32
name|srcy
decl_stmt|;
if|if
condition|(
name|sx
operator|<
literal|0
condition|)
block|{
name|int
name|dstx
init|=
name|qFloor
argument_list|(
operator|(
name|tx1
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|-
name|targetRect
operator|.
name|right
argument_list|()
operator|)
operator|*
name|ix
argument_list|)
operator|+
literal|1
decl_stmt|;
name|basex
operator|=
name|quint32
argument_list|(
name|sourceRect
operator|.
name|right
argument_list|()
operator|*
literal|65536
argument_list|)
operator|+
name|dstx
expr_stmt|;
block|}
else|else
block|{
name|int
name|dstx
init|=
name|qCeil
argument_list|(
operator|(
name|tx1
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|-
name|targetRect
operator|.
name|left
argument_list|()
operator|)
operator|*
name|ix
argument_list|)
operator|-
literal|1
decl_stmt|;
name|basex
operator|=
name|quint32
argument_list|(
name|sourceRect
operator|.
name|left
argument_list|()
operator|*
literal|65536
argument_list|)
operator|+
name|dstx
expr_stmt|;
block|}
if|if
condition|(
name|sy
operator|<
literal|0
condition|)
block|{
name|int
name|dsty
init|=
name|qFloor
argument_list|(
operator|(
name|ty1
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|-
name|targetRect
operator|.
name|bottom
argument_list|()
operator|)
operator|*
name|iy
argument_list|)
operator|+
literal|1
decl_stmt|;
name|srcy
operator|=
name|quint32
argument_list|(
name|sourceRect
operator|.
name|bottom
argument_list|()
operator|*
literal|65536
argument_list|)
operator|+
name|dsty
expr_stmt|;
block|}
else|else
block|{
name|int
name|dsty
init|=
name|qCeil
argument_list|(
operator|(
name|ty1
operator|+
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|-
name|targetRect
operator|.
name|top
argument_list|()
operator|)
operator|*
name|iy
argument_list|)
operator|-
literal|1
decl_stmt|;
name|srcy
operator|=
name|quint32
argument_list|(
name|sourceRect
operator|.
name|top
argument_list|()
operator|*
literal|65536
argument_list|)
operator|+
name|dsty
expr_stmt|;
block|}
name|quint32
modifier|*
name|dst
init|=
operator|(
operator|(
name|quint32
operator|*
operator|)
operator|(
name|destPixels
operator|+
name|ty1
operator|*
name|dbpl
operator|)
operator|)
operator|+
name|tx1
decl_stmt|;
specifier|const
name|__m128i
name|nullVector
init|=
name|_mm_set1_epi32
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|half
init|=
name|_mm_set1_epi16
argument_list|(
literal|0x80
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|one
init|=
name|_mm_set1_epi16
argument_list|(
literal|0xff
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|colorMask
init|=
name|_mm_set1_epi32
argument_list|(
literal|0x00ff00ff
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|alphaMask
init|=
name|_mm_set1_epi32
argument_list|(
literal|0xff000000
argument_list|)
decl_stmt|;
specifier|const
name|__m128i
name|ixVector
init|=
name|_mm_set1_epi32
argument_list|(
literal|4
operator|*
name|ix
argument_list|)
decl_stmt|;
comment|// this bounds check here is required as floating point rounding above might in some cases lead to
comment|// w/h values that are one pixel too large, falling outside of the valid image area.
name|int
name|yend
init|=
operator|(
name|srcy
operator|+
name|iy
operator|*
operator|(
name|h
operator|-
literal|1
operator|)
operator|)
operator|>>
literal|16
decl_stmt|;
if|if
condition|(
name|yend
operator|<
literal|0
operator|||
name|yend
operator|>=
name|srch
condition|)
operator|--
name|h
expr_stmt|;
name|int
name|xend
init|=
operator|(
name|basex
operator|+
name|ix
operator|*
operator|(
name|w
operator|-
literal|1
operator|)
operator|)
operator|>>
literal|16
decl_stmt|;
if|if
condition|(
name|xend
operator|<
literal|0
operator|||
name|xend
operator|>=
call|(
name|int
call|)
argument_list|(
name|sbpl
operator|/
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
argument_list|)
condition|)
operator|--
name|w
expr_stmt|;
while|while
condition|(
name|h
operator|--
condition|)
block|{
specifier|const
name|uint
modifier|*
name|src
init|=
operator|(
specifier|const
name|quint32
operator|*
operator|)
operator|(
name|srcPixels
operator|+
operator|(
name|srcy
operator|>>
literal|16
operator|)
operator|*
name|sbpl
operator|)
decl_stmt|;
name|int
name|srcx
init|=
name|basex
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
name|ALIGNMENT_PROLOGUE_16BYTES
argument_list|(
argument|dst
argument_list|,
argument|x
argument_list|,
argument|w
argument_list|)
block|{
name|uint
name|s
init|=
name|src
index|[
name|srcx
operator|>>
literal|16
index|]
decl_stmt|;
name|dst
index|[
name|x
index|]
operator|=
name|s
operator|+
name|BYTE_MUL
argument_list|(
name|dst
index|[
name|x
index|]
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|srcx
operator|+=
name|ix
expr_stmt|;
block|}
name|__m128i
name|srcxVector
init|=
name|_mm_set_epi32
argument_list|(
name|srcx
argument_list|,
name|srcx
operator|+
name|ix
argument_list|,
name|srcx
operator|+
name|ix
operator|+
name|ix
argument_list|,
name|srcx
operator|+
name|ix
operator|+
name|ix
operator|+
name|ix
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|x
operator|<
name|w
operator|-
literal|3
condition|;
name|x
operator|+=
literal|4
control|)
block|{
union|union
name|Vect_buffer
block|{
name|__m128i
name|vect
decl_stmt|;
name|quint32
name|i
index|[
literal|4
index|]
decl_stmt|;
block|}
union|;
name|Vect_buffer
name|addr
decl_stmt|;
name|addr
operator|.
name|vect
operator|=
name|_mm_srli_epi32
argument_list|(
name|srcxVector
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|srcxVector
operator|=
name|_mm_add_epi32
argument_list|(
name|srcxVector
argument_list|,
name|ixVector
argument_list|)
expr_stmt|;
specifier|const
name|__m128i
name|srcVector
init|=
name|_mm_set_epi32
argument_list|(
name|src
index|[
name|addr
operator|.
name|i
index|[
literal|0
index|]
index|]
argument_list|,
name|src
index|[
name|addr
operator|.
name|i
index|[
literal|1
index|]
index|]
argument_list|,
name|src
index|[
name|addr
operator|.
name|i
index|[
literal|2
index|]
index|]
argument_list|,
name|src
index|[
name|addr
operator|.
name|i
index|[
literal|3
index|]
index|]
argument_list|)
decl_stmt|;
name|BLEND_SOURCE_OVER_ARGB32_SSE2_helper
argument_list|(
name|dst
argument_list|,
name|srcVector
argument_list|,
name|nullVector
argument_list|,
name|half
argument_list|,
name|one
argument_list|,
name|colorMask
argument_list|,
name|alphaMask
argument_list|)
expr_stmt|;
block|}
for|for
control|(
init|;
name|x
operator|<
name|w
condition|;
name|x
operator|++
control|)
block|{
name|uint
name|s
init|=
name|src
index|[
operator|(
name|basex
operator|+
name|x
operator|*
name|ix
operator|)
operator|>>
literal|16
index|]
decl_stmt|;
name|dst
index|[
name|x
index|]
operator|=
name|s
operator|+
name|BYTE_MUL
argument_list|(
name|dst
index|[
name|x
index|]
argument_list|,
name|qAlpha
argument_list|(
operator|~
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dst
operator|=
operator|(
name|quint32
operator|*
operator|)
operator|(
operator|(
operator|(
name|uchar
operator|*
operator|)
name|dst
operator|)
operator|+
name|dbpl
operator|)
expr_stmt|;
name|srcy
operator|+=
name|iy
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_COMPILER_SUPPORTS_SSE2
end_comment
end_unit
