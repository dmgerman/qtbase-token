begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|<private/qprintengine_ps_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpainter_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qfontengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpdf_p.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
end_ifndef
begin_include
include|#
directive|include
file|"qprinter.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qpixmap.h"
end_include
begin_include
include|#
directive|include
file|"qimage.h"
end_include
begin_include
include|#
directive|include
file|"qdatetime.h"
end_include
begin_include
include|#
directive|include
file|"qstring.h"
end_include
begin_include
include|#
directive|include
file|"qbytearray.h"
end_include
begin_include
include|#
directive|include
file|"qhash.h"
end_include
begin_include
include|#
directive|include
file|"qbuffer.h"
end_include
begin_include
include|#
directive|include
file|"qsettings.h"
end_include
begin_include
include|#
directive|include
file|"qmap.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qregion.h"
end_include
begin_include
include|#
directive|include
file|"qimagewriter.h"
end_include
begin_include
include|#
directive|include
file|<private/qpainterpath_p.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<private/qdrawhelper_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qmutexpool_p.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WIN
end_ifndef
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|qt_gen_epsf
specifier|static
name|bool
name|qt_gen_epsf
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_generate_epsf
name|void
name|qt_generate_epsf
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|qt_gen_epsf
operator|=
name|b
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|ps_header
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|ps_header
init|=
literal|"/BD{bind def}bind def/d2{dup dup}BD/ED{exch def}BD/D0{0 ED}BD/F{setfont}BD\n"
literal|"/RL{rlineto}BD/CM{currentmatrix}BD/SM{setmatrix}BD/TR{translate}BD/SD\n"
literal|"{setdash}BD/SC{aload pop setrgbcolor}BD/CR{currentfile read pop}BD/i{index}\n"
literal|"BD/scs{setcolorspace}BD/DB{dict dup begin}BD/DE{end def}BD/ie{ifelse}BD/gs\n"
literal|"{gsave}BD/gr{grestore}BD/w{setlinewidth}BD/d{setdash}BD/J{setlinecap}BD/j\n"
literal|"{setlinejoin}BD/scn{3 array astore/BCol exch def}BD/SCN{3 array astore/PCol\n"
literal|"exch def}BD/cm{6 array astore concat}BD/m{moveto}BD/l{lineto}BD/c{curveto}BD\n"
literal|"/h{closepath}BD/W{clip}BD/W*{eoclip}BD/n{newpath}BD/q{gsave 10 dict begin}BD\n"
literal|"/Q{end grestore}BD/re{4 2 roll m dup 0 exch RL exch 0 RL 0 exch neg RL h}BD\n"
literal|"/S{gs PCol SC stroke gr n}BD/BT{gsave 10 dict begin/_m matrix CM def BCol\n"
literal|"SC}BD/ET{end grestore}BD/Tf{/_fs ED findfont[_fs 0 0 _fs 0 0]makefont F}BD\n"
literal|"/Tm{6 array astore concat}BD/Td{translate}BD/Tj{0 0 m show}BD/BDC{pop pop}BD\n"
literal|"/EMC{}BD/BSt 0 def/WFi false def/BCol[1 1 1]def/PCol[0 0 0]def/BDArr[0.94\n"
literal|"0.88 0.63 0.50 0.37 0.12 0.06]def/level3{/languagelevel where{pop\n"
literal|"languagelevel 3 ge}{false}ie}BD/QCIgray D0/QCIcolor D0/QCIindex D0/QCI{\n"
literal|"/colorimage where{pop false 3 colorimage}{exec/QCIcolor ED/QCIgray QCIcolor\n"
literal|"length 3 idiv string def 0 1 QCIcolor length 3 idiv 1 sub{/QCIindex ED/_x\n"
literal|"QCIindex 3 mul def QCIgray QCIindex QCIcolor _x get 0.30 mul QCIcolor _x 1\n"
literal|"add get 0.59 mul QCIcolor _x 2 add get 0.11 mul add add cvi put}for QCIgray\n"
literal|"image}ie}BD/di{gs TR 1 i 1 eq{pop pop false 3 1 roll BCol SC imagemask}{dup\n"
literal|"false ne{level3}{false}ie{/_ma ED 8 eq{/_dc[0 1]def/DeviceGray}{/_dc[0 1 0 1\n"
literal|"0 1]def/DeviceRGB}ie scs/_im ED/_mt ED/_h ED/_w ED<</ImageType 3/DataDict\n"
literal|"<</ImageType 1/Width _w/Height _h/ImageMatrix _mt/DataSource _im\n"
literal|"/BitsPerComponent 8/Decode _dc>>/MaskDict<</ImageType 1/Width _w/Height _h\n"
literal|"/ImageMatrix _mt/DataSource _ma/BitsPerComponent 1/Decode[0 1]>>\n"
literal|"/InterleaveType 3>> image}{pop 8 4 1 roll 8 eq{image}{QCI}ie}ie}ie gr}BD/BF\n"
literal|"{gs BSt 1 eq{BCol SC WFi{fill}{eofill}ie}if BSt 2 ge BSt 8 le and{BDArr BSt\n"
literal|"2 sub get/_sc ED BCol{1. exch sub _sc mul 1. exch sub}forall 3 array astore\n"
literal|"SC WFi{fill}{eofill}ie}if BSt 9 ge BSt 14 le and{WFi{W}{W*}ie pathbbox 3 i 3\n"
literal|"i TR 4 2 roll 3 2 roll exch sub/_h ED sub/_w ED BCol SC 0.3 w n BSt 9 eq BSt\n"
literal|"11 eq or{0 4 _h{dup 0 exch m _w exch l}for}if BSt 10 eq BSt 11 eq or{0 4 _w{\n"
literal|"dup 0 m _h l}for}if BSt 12 eq BSt 14 eq or{_w _h gt{0 6 _w _h add{dup 0 m _h\n"
literal|"sub _h l}for}{0 6 _w _h add{dup 0 exch m _w sub _w exch l}for}ie}if BSt 13\n"
literal|"eq BSt 14 eq or{_w _h gt{0 6 _w _h add{dup _h m _h sub 0 l}for}{0 6 _w _h\n"
literal|"add{dup _w exch m _w sub 0 exch l}for}ie}if stroke}if BSt 15 eq{}if BSt 24\n"
literal|"eq{}if gr}BD/f{/WFi true def BF n}BD/f*{/WFi false def BF n}BD/B{/WFi true\n"
literal|"def BF S n}BD/B*{/WFi false def BF S n}BD/QI{/C save def pageinit q n}BD/QP{\n"
literal|"Q C restore showpage}BD/SPD{/setpagedevice where{<< 3 1 roll>>\n"
literal|"setpagedevice}{pop pop}ie}BD/T1AddMapping{10 dict begin/glyphs ED/fnt ED\n"
literal|"/current fnt/NumGlyphs get def/CMap fnt/CMap get def 0 1 glyphs length 1 sub\n"
literal|"{glyphs exch get/gn ED current dup 256 mod/min ED 256 idiv/maj ED CMap dup\n"
literal|"maj get dup null eq{pop 256 array 0 1 255{1 i exch/.notdef put}for}if dup\n"
literal|"min gn put maj exch put/current current 1 add def}for fnt/CMap CMap put fnt\n"
literal|"/NumGlyphs current put end}def/T1AddGlyphs{10 dict begin/glyphs ED/fnt ED\n"
literal|"/current fnt/NumGlyphs get def/CMap fnt/CMap get def/CharStrings fnt\n"
literal|"/CharStrings get def 0 1 glyphs length 2 idiv 1 sub{2 mul dup glyphs exch\n"
literal|"get/gn ED 1 add glyphs exch get/cs ED current dup 256 mod/min ED 256 idiv\n"
literal|"/maj ED CMap dup maj get dup null eq{pop 256 array 0 1 255{1 i exch/.notdef\n"
literal|"put}for}if dup min gn put maj exch put CharStrings gn cs put/current current\n"
literal|"1 add def}for fnt/CharStrings CharStrings put fnt/CMap CMap put fnt\n"
literal|"/NumGlyphs current put end}def/StringAdd{1 i length 1 i length add string 3\n"
literal|"1 roll 2 i 0 3 i putinterval 2 i 2 i length 2 i putinterval pop pop}def\n"
literal|"/T1Setup{10 dict begin dup/FontName ED (-Base) StringAdd cvx cvn/Font ED\n"
literal|"/MaxPage Font/NumGlyphs get 1 sub 256 idiv def/FDepVector MaxPage 1 add\n"
literal|"array def/Encoding MaxPage 1 add array def 0 1 MaxPage{dup Encoding exch dup\n"
literal|"put dup/Page ED FontName (-) StringAdd exch 20 string cvs StringAdd cvn Font\n"
literal|"0 dict copy d2/CMap get Page get/Encoding exch put definefont FDepVector\n"
literal|"exch Page exch put}for FontName cvn<</FontType 0/FMapType 2/FontMatrix[1 0\n"
literal|"0 1 0 0]/Encoding Encoding/FDepVector FDepVector>> definefont pop end}def\n"
decl_stmt|;
end_decl_stmt
begin_comment
comment|// ------------------------------End of static data ----------------------------------
end_comment
begin_comment
comment|// make sure DSC comments are not longer than 255 chars per line.
end_comment
begin_function
DECL|function|wrapDSC
specifier|static
name|QByteArray
name|wrapDSC
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|str
parameter_list|)
block|{
name|QByteArray
name|dsc
init|=
name|str
operator|.
name|simplified
argument_list|()
decl_stmt|;
specifier|const
name|int
name|wrapAt
init|=
literal|254
decl_stmt|;
name|QByteArray
name|wrapped
decl_stmt|;
if|if
condition|(
name|dsc
operator|.
name|length
argument_list|()
operator|<
name|wrapAt
condition|)
name|wrapped
operator|=
name|dsc
expr_stmt|;
else|else
block|{
name|wrapped
operator|=
name|dsc
operator|.
name|left
argument_list|(
name|wrapAt
argument_list|)
expr_stmt|;
name|QByteArray
name|tmp
init|=
name|dsc
operator|.
name|mid
argument_list|(
name|wrapAt
argument_list|)
decl_stmt|;
while|while
condition|(
name|tmp
operator|.
name|length
argument_list|()
operator|>
name|wrapAt
operator|-
literal|3
condition|)
block|{
name|wrapped
operator|+=
literal|"\n%%+"
operator|+
name|tmp
operator|.
name|left
argument_list|(
name|wrapAt
operator|-
literal|3
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|tmp
operator|.
name|mid
argument_list|(
name|wrapAt
operator|-
literal|3
argument_list|)
expr_stmt|;
block|}
name|wrapped
operator|+=
literal|"\n%%+"
operator|+
name|tmp
expr_stmt|;
block|}
return|return
name|wrapped
operator|+
literal|'\n'
return|;
block|}
end_function
begin_comment
comment|// ----------------------------- Internal class declarations -----------------------------
end_comment
begin_constructor
DECL|function|QPSPrintEnginePrivate
name|QPSPrintEnginePrivate
operator|::
name|QPSPrintEnginePrivate
parameter_list|(
name|QPrinter
operator|::
name|PrinterMode
name|m
parameter_list|)
member_init_list|:
name|QPdfBaseEnginePrivate
argument_list|(
name|m
argument_list|)
member_init_list|,
name|printerState
argument_list|(
name|QPrinter
operator|::
name|Idle
argument_list|)
member_init_list|,
name|hugeDocument
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|headerDone
argument_list|(
literal|false
argument_list|)
block|{
name|useAlphaEngine
operator|=
literal|true
expr_stmt|;
name|postscript
operator|=
literal|true
expr_stmt|;
name|firstPage
operator|=
literal|true
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SETTINGS
name|QSettings
name|settings
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
name|QLatin1String
argument_list|(
literal|"Trolltech"
argument_list|)
argument_list|)
decl_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
name|QLatin1String
argument_list|(
literal|"Qt"
argument_list|)
argument_list|)
expr_stmt|;
name|embedFonts
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"embedFonts"
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|.
name|toBool
argument_list|()
expr_stmt|;
else|#
directive|else
name|embedFonts
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QPSPrintEnginePrivate
name|QPSPrintEnginePrivate
operator|::
name|~
name|QPSPrintEnginePrivate
parameter_list|()
block|{ }
end_destructor
begin_function
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|<qdebug.h>
name|QT_END_INCLUDE_NAMESPACE
DECL|function|ps_r7
specifier|static
name|void
name|ps_r7
parameter_list|(
name|QPdf
operator|::
name|ByteStream
modifier|&
name|stream
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|int
name|l
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|uchar
name|line
index|[
literal|84
index|]
decl_stmt|;
name|int
name|col
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|line
index|[
name|col
operator|++
index|]
operator|=
name|s
index|[
name|i
operator|++
index|]
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|l
operator|-
literal|1
operator|&&
name|col
operator|>=
literal|76
condition|)
block|{
name|line
index|[
name|col
operator|++
index|]
operator|=
literal|'\n'
expr_stmt|;
name|line
index|[
name|col
operator|++
index|]
operator|=
literal|'\0'
expr_stmt|;
name|stream
operator|<<
operator|(
specifier|const
name|char
operator|*
operator|)
name|line
expr_stmt|;
name|col
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|col
operator|>
literal|0
condition|)
block|{
while|while
condition|(
operator|(
name|col
operator|&
literal|3
operator|)
operator|!=
literal|0
condition|)
name|line
index|[
name|col
operator|++
index|]
operator|=
literal|'%'
expr_stmt|;
comment|// use a comment as padding
name|line
index|[
name|col
operator|++
index|]
operator|=
literal|'\n'
expr_stmt|;
name|line
index|[
name|col
operator|++
index|]
operator|=
literal|'\0'
expr_stmt|;
name|stream
operator|<<
operator|(
specifier|const
name|char
operator|*
operator|)
name|line
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|runlengthEncode
specifier|static
name|QByteArray
name|runlengthEncode
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|input
parameter_list|)
block|{
if|if
condition|(
operator|!
name|input
operator|.
name|length
argument_list|()
condition|)
return|return
name|input
return|;
specifier|const
name|char
modifier|*
name|data
init|=
name|input
operator|.
name|constData
argument_list|()
decl_stmt|;
name|QByteArray
name|out
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|char
name|last
init|=
operator|*
name|data
decl_stmt|;
enum|enum
name|State
block|{
name|Undef
block|,
name|Equal
block|,
name|Diff
block|}
enum|;
name|State
name|state
init|=
name|Undef
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
name|int
name|written
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|1
condition|)
block|{
name|bool
name|flush
init|=
operator|(
name|i
operator|==
name|input
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|flush
condition|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|Undef
case|:
name|state
operator|=
operator|(
name|last
operator|==
name|data
index|[
name|i
index|]
operator|)
condition|?
name|Equal
else|:
name|Diff
expr_stmt|;
break|break;
case|case
name|Equal
case|:
if|if
condition|(
name|data
index|[
name|i
index|]
operator|!=
name|last
condition|)
name|flush
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Diff
case|:
if|if
condition|(
name|data
index|[
name|i
index|]
operator|==
name|last
condition|)
block|{
operator|--
name|i
expr_stmt|;
name|flush
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|flush
operator|||
name|i
operator|-
name|start
operator|==
literal|128
condition|)
block|{
name|int
name|size
init|=
name|i
operator|-
name|start
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|Equal
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|uchar
argument_list|)
argument_list|(
literal|257
operator|-
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|last
argument_list|)
expr_stmt|;
name|written
operator|+=
name|size
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
operator|(
name|uchar
operator|)
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|start
operator|<
name|i
condition|)
name|out
operator|.
name|append
argument_list|(
name|data
index|[
name|start
operator|++
index|]
argument_list|)
expr_stmt|;
name|written
operator|+=
name|size
expr_stmt|;
block|}
name|state
operator|=
name|Undef
expr_stmt|;
name|start
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|input
operator|.
name|size
argument_list|()
condition|)
break|break;
block|}
name|last
operator|=
name|data
index|[
name|i
index|]
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
empty_stmt|;
name|out
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|uchar
argument_list|)
literal|128
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
end_function
begin_enum
DECL|enum|format
enum|enum
name|format
block|{
DECL|enumerator|Raw
name|Raw
block|,
DECL|enumerator|Runlength
name|Runlength
block|,
DECL|enumerator|DCT
name|DCT
block|}
enum|;
end_enum
begin_decl_stmt
DECL|variable|filters
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|filters
index|[
literal|3
index|]
init|=
block|{
literal|" "
block|,
literal|"/RunLengthDecode filter "
block|,
literal|"/DCTDecode filter "
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|compressHelper
specifier|static
name|QByteArray
name|compressHelper
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|bool
name|gray
parameter_list|,
name|int
modifier|*
name|format
parameter_list|)
block|{
comment|// we can't use premultiplied here
name|QByteArray
name|pixelData
decl_stmt|;
name|int
name|depth
init|=
name|image
operator|.
name|depth
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|image
operator|.
name|format
argument_list|()
operator|!=
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
if|if
condition|(
name|depth
operator|!=
literal|1
operator|&&
operator|!
name|gray
operator|&&
name|QImageWriter
operator|::
name|supportedImageFormats
argument_list|()
operator|.
name|contains
argument_list|(
literal|"jpeg"
argument_list|)
condition|)
block|{
name|QBuffer
name|buffer
argument_list|(
operator|&
name|pixelData
argument_list|)
decl_stmt|;
name|QImageWriter
name|writer
argument_list|(
operator|&
name|buffer
argument_list|,
literal|"jpeg"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setQuality
argument_list|(
literal|94
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|image
argument_list|)
expr_stmt|;
operator|*
name|format
operator|=
name|DCT
expr_stmt|;
block|}
else|else
block|{
name|int
name|width
init|=
name|image
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|image
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|width
operator|*
name|height
decl_stmt|;
if|if
condition|(
name|depth
operator|==
literal|1
condition|)
name|size
operator|=
operator|(
name|width
operator|+
literal|7
operator|)
operator|/
literal|8
operator|*
name|height
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|gray
condition|)
name|size
operator|=
name|size
operator|*
literal|3
expr_stmt|;
name|pixelData
operator|.
name|resize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|uchar
modifier|*
name|pixel
init|=
operator|(
name|uchar
operator|*
operator|)
name|pixelData
operator|.
name|data
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|depth
operator|==
literal|1
condition|)
block|{
name|QImage
operator|::
name|Format
name|format
init|=
name|image
operator|.
name|format
argument_list|()
decl_stmt|;
name|memset
argument_list|(
name|pixel
argument_list|,
literal|0xff
argument_list|,
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uchar
modifier|*
name|s
init|=
name|image
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
comment|// need to copy bit for bit...
name|bool
name|b
init|=
operator|(
name|format
operator|==
name|QImage
operator|::
name|Format_MonoLSB
operator|)
condition|?
operator|(
operator|*
operator|(
name|s
operator|+
operator|(
name|x
operator|>>
literal|3
operator|)
operator|)
operator|>>
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
operator|&
literal|1
else|:
operator|(
operator|*
operator|(
name|s
operator|+
operator|(
name|x
operator|>>
literal|3
operator|)
operator|)
operator|<<
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
operator|&
literal|0x80
decl_stmt|;
if|if
condition|(
name|b
condition|)
name|pixel
index|[
name|i
operator|>>
literal|3
index|]
operator|^=
operator|(
literal|0x80
operator|>>
operator|(
name|i
operator|&
literal|7
operator|)
operator|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
comment|// we need to align to 8 bit here
name|i
operator|=
operator|(
name|i
operator|+
literal|7
operator|)
operator|&
literal|0xffffff8
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|depth
operator|==
literal|8
condition|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uchar
modifier|*
name|s
init|=
name|image
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|QRgb
name|rgb
init|=
name|image
operator|.
name|color
argument_list|(
name|s
index|[
name|x
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|gray
condition|)
block|{
name|pixel
index|[
name|i
index|]
operator|=
operator|(
name|unsigned
name|char
operator|)
name|qGray
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|pixel
index|[
name|i
index|]
operator|=
operator|(
name|unsigned
name|char
operator|)
name|qRed
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
name|pixel
index|[
name|i
operator|+
literal|1
index|]
operator|=
operator|(
name|unsigned
name|char
operator|)
name|qGreen
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
name|pixel
index|[
name|i
operator|+
literal|2
index|]
operator|=
operator|(
name|unsigned
name|char
operator|)
name|qBlue
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|3
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|QRgb
modifier|*
name|s
init|=
operator|(
name|QRgb
operator|*
operator|)
operator|(
name|image
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
operator|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|QRgb
name|rgb
init|=
operator|(
operator|*
name|s
operator|++
operator|)
decl_stmt|;
if|if
condition|(
name|gray
condition|)
block|{
name|pixel
index|[
name|i
index|]
operator|=
operator|(
name|unsigned
name|char
operator|)
name|qGray
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|pixel
index|[
name|i
index|]
operator|=
operator|(
name|unsigned
name|char
operator|)
name|qRed
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
name|pixel
index|[
name|i
operator|+
literal|1
index|]
operator|=
operator|(
name|unsigned
name|char
operator|)
name|qGreen
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
name|pixel
index|[
name|i
operator|+
literal|2
index|]
operator|=
operator|(
name|unsigned
name|char
operator|)
name|qBlue
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|3
expr_stmt|;
block|}
block|}
block|}
block|}
operator|*
name|format
operator|=
name|Raw
expr_stmt|;
if|if
condition|(
name|depth
operator|==
literal|1
condition|)
block|{
name|pixelData
operator|=
name|runlengthEncode
argument_list|(
name|pixelData
argument_list|)
expr_stmt|;
operator|*
name|format
operator|=
name|Runlength
expr_stmt|;
block|}
block|}
name|QByteArray
name|outarr
init|=
name|QPdf
operator|::
name|ascii85Encode
argument_list|(
name|pixelData
argument_list|)
decl_stmt|;
return|return
name|outarr
return|;
block|}
end_function
begin_function
DECL|function|drawImageHelper
name|void
name|QPSPrintEnginePrivate
operator|::
name|drawImageHelper
parameter_list|(
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|,
name|qreal
name|w
parameter_list|,
name|qreal
name|h
parameter_list|,
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
specifier|const
name|QImage
modifier|&
name|mask
parameter_list|,
name|bool
name|gray
parameter_list|,
name|qreal
name|scaleX
parameter_list|,
name|qreal
name|scaleY
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|int
name|width
init|=
name|img
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|img
operator|.
name|height
argument_list|()
decl_stmt|;
name|QByteArray
name|out
decl_stmt|;
name|int
name|size
init|=
literal|0
decl_stmt|;
specifier|const
name|char
modifier|*
name|bits
decl_stmt|;
if|if
condition|(
operator|!
name|mask
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|int
name|format
decl_stmt|;
name|out
operator|=
name|compressHelper
argument_list|(
name|mask
argument_list|,
literal|true
argument_list|,
operator|&
name|format
argument_list|)
expr_stmt|;
name|size
operator|=
operator|(
name|width
operator|+
literal|7
operator|)
operator|/
literal|8
operator|*
name|height
expr_stmt|;
operator|*
name|currentPage
operator|<<
literal|"/mask currentfile/ASCII85Decode filter"
operator|<<
name|filters
index|[
name|format
index|]
operator|<<
name|size
operator|<<
literal|" string readstring\n"
expr_stmt|;
name|ps_r7
argument_list|(
operator|*
name|currentPage
argument_list|,
name|out
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
operator|*
name|currentPage
operator|<<
literal|" pop def\n"
expr_stmt|;
block|}
if|if
condition|(
name|img
operator|.
name|depth
argument_list|()
operator|==
literal|1
condition|)
block|{
name|size
operator|=
operator|(
name|width
operator|+
literal|7
operator|)
operator|/
literal|8
operator|*
name|height
expr_stmt|;
name|bits
operator|=
literal|"1 "
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|gray
condition|)
block|{
name|size
operator|=
name|width
operator|*
name|height
expr_stmt|;
name|bits
operator|=
literal|"8 "
expr_stmt|;
block|}
else|else
block|{
name|size
operator|=
name|width
operator|*
name|height
operator|*
literal|3
expr_stmt|;
name|bits
operator|=
literal|"24 "
expr_stmt|;
block|}
name|int
name|format
decl_stmt|;
name|out
operator|=
name|compressHelper
argument_list|(
name|img
argument_list|,
name|gray
argument_list|,
operator|&
name|format
argument_list|)
expr_stmt|;
operator|*
name|currentPage
operator|<<
literal|"/sl currentfile/ASCII85Decode filter"
operator|<<
name|filters
index|[
name|format
index|]
operator|<<
name|size
operator|<<
literal|" string readstring\n"
expr_stmt|;
name|ps_r7
argument_list|(
operator|*
name|currentPage
argument_list|,
name|out
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
operator|*
name|currentPage
operator|<<
literal|" pop def\n"
expr_stmt|;
operator|*
name|currentPage
operator|<<
name|width
operator|<<
literal|' '
operator|<<
name|height
operator|<<
literal|'['
operator|<<
name|scaleX
operator|<<
literal|" 0 0 "
operator|<<
name|scaleY
operator|<<
literal|" 0 0]sl "
operator|<<
name|bits
operator|<<
operator|(
operator|!
name|mask
operator|.
name|isNull
argument_list|()
condition|?
literal|"mask "
else|:
literal|"false "
operator|)
operator|<<
name|x
operator|<<
literal|' '
operator|<<
name|y
operator|<<
literal|" di\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawImage
name|void
name|QPSPrintEnginePrivate
operator|::
name|drawImage
parameter_list|(
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|,
name|qreal
name|w
parameter_list|,
name|qreal
name|h
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
specifier|const
name|QImage
modifier|&
name|msk
parameter_list|)
block|{
if|if
condition|(
operator|!
name|w
operator|||
operator|!
name|h
operator|||
name|image
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|QImage
name|img
argument_list|(
name|image
argument_list|)
decl_stmt|;
name|QImage
name|mask
argument_list|(
name|msk
argument_list|)
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
condition|)
name|img
operator|=
name|image
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|msk
operator|.
name|isNull
argument_list|()
operator|&&
name|msk
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
condition|)
name|mask
operator|=
name|msk
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
name|int
name|width
init|=
name|img
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|img
operator|.
name|height
argument_list|()
decl_stmt|;
name|qreal
name|scaleX
init|=
name|width
operator|/
name|w
decl_stmt|;
name|qreal
name|scaleY
init|=
name|height
operator|/
name|h
decl_stmt|;
name|bool
name|gray
init|=
operator|(
name|colorMode
operator|==
name|QPrinter
operator|::
name|GrayScale
operator|)
operator|||
name|img
operator|.
name|allGray
argument_list|()
decl_stmt|;
name|int
name|splitSize
init|=
literal|21830
operator|*
operator|(
name|gray
condition|?
literal|3
else|:
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|width
operator|*
name|height
operator|>
name|splitSize
condition|)
block|{
comment|// 65535/3, tolerance for broken printers
name|int
name|images
decl_stmt|,
name|subheight
decl_stmt|;
name|images
operator|=
operator|(
name|width
operator|*
name|height
operator|+
name|splitSize
operator|-
literal|1
operator|)
operator|/
name|splitSize
expr_stmt|;
name|subheight
operator|=
operator|(
name|height
operator|+
name|images
operator|-
literal|1
operator|)
operator|/
name|images
expr_stmt|;
while|while
condition|(
name|subheight
operator|*
name|width
operator|>
name|splitSize
condition|)
block|{
name|images
operator|++
expr_stmt|;
name|subheight
operator|=
operator|(
name|height
operator|+
name|images
operator|-
literal|1
operator|)
operator|/
name|images
expr_stmt|;
block|}
name|int
name|suby
init|=
literal|0
decl_stmt|;
specifier|const
name|QImage
name|constImg
argument_list|(
name|img
argument_list|)
decl_stmt|;
specifier|const
name|QImage
name|constMask
argument_list|(
name|mask
argument_list|)
decl_stmt|;
while|while
condition|(
name|suby
operator|<
name|height
condition|)
block|{
name|qreal
name|subImageHeight
init|=
name|qMin
argument_list|(
name|subheight
argument_list|,
name|height
operator|-
name|suby
argument_list|)
decl_stmt|;
specifier|const
name|QImage
name|subImage
argument_list|(
name|constImg
operator|.
name|scanLine
argument_list|(
name|suby
argument_list|)
argument_list|,
name|width
argument_list|,
name|subImageHeight
argument_list|,
name|constImg
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
name|constImg
operator|.
name|format
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QImage
name|subMask
init|=
name|mask
operator|.
name|isNull
argument_list|()
condition|?
name|mask
else|:
name|QImage
argument_list|(
name|constMask
operator|.
name|scanLine
argument_list|(
name|suby
argument_list|)
argument_list|,
name|width
argument_list|,
name|subImageHeight
argument_list|,
name|constMask
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
name|constMask
operator|.
name|format
argument_list|()
argument_list|)
decl_stmt|;
name|drawImageHelper
argument_list|(
name|x
argument_list|,
name|y
operator|+
name|suby
operator|/
name|scaleY
argument_list|,
name|w
argument_list|,
name|subImageHeight
operator|/
name|scaleY
argument_list|,
name|subImage
argument_list|,
name|subMask
argument_list|,
name|gray
argument_list|,
name|scaleX
argument_list|,
name|scaleY
argument_list|)
expr_stmt|;
name|suby
operator|+=
name|subheight
expr_stmt|;
block|}
block|}
else|else
block|{
name|drawImageHelper
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|img
argument_list|,
name|mask
argument_list|,
name|gray
argument_list|,
name|scaleX
argument_list|,
name|scaleY
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|emitHeader
name|void
name|QPSPrintEnginePrivate
operator|::
name|emitHeader
parameter_list|(
name|bool
name|finished
parameter_list|)
block|{
name|QPSPrintEngine
modifier|*
name|q
init|=
cast|static_cast
argument_list|<
name|QPSPrintEngine
operator|*
argument_list|>
argument_list|(
name|q_ptr
argument_list|)
decl_stmt|;
name|QPrinter
modifier|*
name|printer
init|=
cast|static_cast
argument_list|<
name|QPrinter
operator|*
argument_list|>
argument_list|(
name|pdev
argument_list|)
decl_stmt|;
if|if
condition|(
name|creator
operator|.
name|isEmpty
argument_list|()
condition|)
name|creator
operator|=
name|QLatin1String
argument_list|(
literal|"Qt "
name|QT_VERSION_STR
argument_list|)
expr_stmt|;
name|QByteArray
name|header
decl_stmt|;
name|QPdf
operator|::
name|ByteStream
name|s
argument_list|(
operator|&
name|header
argument_list|)
decl_stmt|;
name|qreal
name|scale
init|=
literal|72.
operator|/
operator|(
operator|(
name|qreal
operator|)
name|q
operator|->
name|metric
argument_list|(
name|QPaintDevice
operator|::
name|PdmDpiY
argument_list|)
operator|)
decl_stmt|;
name|QRect
name|pageRect
init|=
name|this
operator|->
name|pageRect
argument_list|()
decl_stmt|;
name|QRect
name|paperRect
init|=
name|this
operator|->
name|paperRect
argument_list|()
decl_stmt|;
name|int
name|mtop
init|=
name|pageRect
operator|.
name|top
argument_list|()
operator|-
name|paperRect
operator|.
name|top
argument_list|()
decl_stmt|;
name|int
name|mleft
init|=
name|pageRect
operator|.
name|left
argument_list|()
operator|-
name|paperRect
operator|.
name|left
argument_list|()
decl_stmt|;
name|int
name|mbottom
init|=
name|paperRect
operator|.
name|bottom
argument_list|()
operator|-
name|pageRect
operator|.
name|bottom
argument_list|()
decl_stmt|;
name|int
name|mright
init|=
name|paperRect
operator|.
name|right
argument_list|()
operator|-
name|pageRect
operator|.
name|right
argument_list|()
decl_stmt|;
name|int
name|width
init|=
name|pageRect
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|pageRect
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
name|finished
operator|&&
name|pageCount
operator|==
literal|1
operator|&&
name|copies
operator|==
literal|1
operator|&&
operator|(
operator|(
name|fullPage
operator|&&
name|qt_gen_epsf
operator|)
operator|||
operator|(
name|outputFileName
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|".eps"
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
comment|// According to the EPSF 3.0 spec it is required that the PS
comment|// version is PS-Adobe-3.0
name|s
operator|<<
literal|"%!PS-Adobe-3.0"
expr_stmt|;
if|if
condition|(
operator|!
name|boundingBox
operator|.
name|isValid
argument_list|()
condition|)
name|boundingBox
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
if|if
condition|(
name|orientation
operator|==
name|QPrinter
operator|::
name|Landscape
condition|)
block|{
if|if
condition|(
operator|!
name|fullPage
condition|)
name|boundingBox
operator|.
name|translate
argument_list|(
operator|-
name|mleft
argument_list|,
operator|-
name|mtop
argument_list|)
expr_stmt|;
name|s
operator|<<
literal|" EPSF-3.0\n%%BoundingBox: "
operator|<<
name|int
argument_list|(
operator|(
name|printer
operator|->
name|height
argument_list|()
operator|-
name|boundingBox
operator|.
name|bottom
argument_list|()
operator|)
operator|*
name|scale
argument_list|)
comment|// llx
operator|<<
name|int
argument_list|(
operator|(
name|printer
operator|->
name|width
argument_list|()
operator|-
name|boundingBox
operator|.
name|right
argument_list|()
operator|)
operator|*
name|scale
operator|-
literal|1
argument_list|)
comment|// lly
operator|<<
name|int
argument_list|(
operator|(
name|printer
operator|->
name|height
argument_list|()
operator|-
name|boundingBox
operator|.
name|top
argument_list|()
operator|)
operator|*
name|scale
operator|+
literal|1
argument_list|)
comment|// urx
operator|<<
name|int
argument_list|(
operator|(
name|printer
operator|->
name|width
argument_list|()
operator|-
name|boundingBox
operator|.
name|left
argument_list|()
operator|)
operator|*
name|scale
argument_list|)
expr_stmt|;
comment|// ury
block|}
else|else
block|{
if|if
condition|(
operator|!
name|fullPage
condition|)
name|boundingBox
operator|.
name|translate
argument_list|(
name|mleft
argument_list|,
operator|-
name|mtop
argument_list|)
expr_stmt|;
name|s
operator|<<
literal|" EPSF-3.0\n%%BoundingBox: "
operator|<<
name|int
argument_list|(
operator|(
name|boundingBox
operator|.
name|left
argument_list|()
operator|)
operator|*
name|scale
argument_list|)
operator|<<
name|int
argument_list|(
operator|(
name|printer
operator|->
name|height
argument_list|()
operator|-
name|boundingBox
operator|.
name|bottom
argument_list|()
operator|)
operator|*
name|scale
operator|-
literal|1
argument_list|)
operator|<<
name|int
argument_list|(
operator|(
name|boundingBox
operator|.
name|right
argument_list|()
operator|)
operator|*
name|scale
operator|+
literal|1
argument_list|)
operator|<<
name|int
argument_list|(
operator|(
name|printer
operator|->
name|height
argument_list|()
operator|-
name|boundingBox
operator|.
name|top
argument_list|()
operator|)
operator|*
name|scale
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|s
operator|<<
literal|"%!PS-Adobe-1.0"
expr_stmt|;
name|int
name|w
init|=
name|width
operator|+
operator|(
name|fullPage
condition|?
literal|0
else|:
name|mleft
operator|+
name|mright
operator|)
decl_stmt|;
name|int
name|h
init|=
name|height
operator|+
operator|(
name|fullPage
condition|?
literal|0
else|:
name|mtop
operator|+
name|mbottom
operator|)
decl_stmt|;
name|w
operator|=
call|(
name|int
call|)
argument_list|(
name|w
operator|*
name|scale
argument_list|)
expr_stmt|;
name|h
operator|=
call|(
name|int
call|)
argument_list|(
name|h
operator|*
name|scale
argument_list|)
expr_stmt|;
comment|// set a bounding box according to the DSC
if|if
condition|(
name|orientation
operator|==
name|QPrinter
operator|::
name|Landscape
condition|)
name|s
operator|<<
literal|"\n%%BoundingBox: 0 0 "
operator|<<
name|h
operator|<<
name|w
expr_stmt|;
else|else
name|s
operator|<<
literal|"\n%%BoundingBox: 0 0 "
operator|<<
name|w
operator|<<
name|h
expr_stmt|;
block|}
name|s
operator|<<
literal|'\n'
operator|<<
name|wrapDSC
argument_list|(
literal|"%%Creator: "
operator|+
name|creator
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
name|s
operator|<<
name|wrapDSC
argument_list|(
literal|"%%Title: "
operator|+
name|title
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DATESTRING
name|s
operator|<<
literal|"%%CreationDate: "
operator|<<
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toUtf8
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|s
operator|<<
literal|"\n%%Orientation: "
expr_stmt|;
if|if
condition|(
name|orientation
operator|==
name|QPrinter
operator|::
name|Landscape
condition|)
name|s
operator|<<
literal|"Landscape"
expr_stmt|;
else|else
name|s
operator|<<
literal|"Portrait"
expr_stmt|;
name|s
operator|<<
literal|"\n%%Pages: (atend)"
literal|"\n%%DocumentFonts: (atend)"
literal|"\n%%EndComments\n"
literal|"%%BeginProlog\n"
literal|"% Prolog copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies).\n"
literal|"% You may copy this prolog in any way that is directly related to this document.\n"
literal|"% For other use of this prolog, see your licensing agreement for Qt.\n"
operator|<<
name|ps_header
operator|<<
literal|'\n'
expr_stmt|;
name|s
operator|<<
literal|"/pageinit {\n"
expr_stmt|;
if|if
condition|(
operator|!
name|fullPage
condition|)
block|{
if|if
condition|(
name|orientation
operator|==
name|QPrinter
operator|::
name|Portrait
condition|)
name|s
operator|<<
name|mleft
operator|*
name|scale
operator|<<
name|mbottom
operator|*
name|scale
operator|<<
literal|"translate\n"
expr_stmt|;
else|else
name|s
operator|<<
name|mtop
operator|*
name|scale
operator|<<
name|mleft
operator|*
name|scale
operator|<<
literal|"translate\n"
expr_stmt|;
block|}
if|if
condition|(
name|orientation
operator|==
name|QPrinter
operator|::
name|Portrait
condition|)
block|{
name|s
operator|<<
literal|"% "
operator|<<
name|printer
operator|->
name|widthMM
argument_list|()
operator|<<
literal|'*'
operator|<<
name|printer
operator|->
name|heightMM
argument_list|()
operator|<<
literal|"mm (portrait)\n0 "
operator|<<
name|height
operator|*
name|scale
operator|<<
literal|"translate "
operator|<<
name|scale
operator|<<
literal|'-'
operator|<<
name|scale
operator|<<
literal|"scale } def\n"
expr_stmt|;
block|}
else|else
block|{
name|s
operator|<<
literal|"% "
operator|<<
name|printer
operator|->
name|heightMM
argument_list|()
operator|<<
literal|'*'
operator|<<
name|printer
operator|->
name|widthMM
argument_list|()
operator|<<
literal|" mm (landscape)\n 90 rotate "
operator|<<
name|scale
operator|<<
literal|'-'
operator|<<
name|scale
operator|<<
literal|"scale } def\n"
expr_stmt|;
block|}
name|s
operator|<<
literal|"%%EndProlog\n"
expr_stmt|;
name|outDevice
operator|->
name|write
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|headerDone
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|emitPages
name|void
name|QPSPrintEnginePrivate
operator|::
name|emitPages
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hugeDocument
condition|)
block|{
for|for
control|(
name|QHash
argument_list|<
name|QFontEngine
operator|::
name|FaceId
argument_list|,
name|QFontSubset
operator|*
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|fonts
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|fonts
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
name|outDevice
operator|->
name|write
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|->
name|toType1
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QIODevice
modifier|*
name|content
init|=
name|buffer
operator|.
name|stream
argument_list|()
decl_stmt|;
comment|// Write the page contents in chunks.
while|while
condition|(
operator|!
name|content
operator|->
name|atEnd
argument_list|()
condition|)
block|{
name|QByteArray
name|buf
init|=
name|content
operator|->
name|read
argument_list|(
name|currentPage
operator|->
name|chunkSize
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|buf
operator|.
name|isEmpty
argument_list|()
condition|)
name|outDevice
operator|->
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
name|content
operator|=
name|currentPage
operator|->
name|stream
argument_list|()
expr_stmt|;
comment|// Write the page contents in chunks.
while|while
condition|(
operator|!
name|content
operator|->
name|atEnd
argument_list|()
condition|)
block|{
name|QByteArray
name|buf
init|=
name|content
operator|->
name|read
argument_list|(
name|currentPage
operator|->
name|chunkSize
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|buf
operator|.
name|isEmpty
argument_list|()
condition|)
name|outDevice
operator|->
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
name|outDevice
operator|->
name|write
argument_list|(
name|trailer
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|currentPage
operator|->
name|clear
argument_list|()
expr_stmt|;
name|trailer
operator|=
name|QByteArray
argument_list|()
expr_stmt|;
name|hugeDocument
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_QWS
end_ifdef
begin_decl_stmt
DECL|variable|max_in_memory_size
specifier|static
specifier|const
name|int
name|max_in_memory_size
init|=
literal|2000000
decl_stmt|;
end_decl_stmt
begin_else
else|#
directive|else
end_else
begin_decl_stmt
DECL|variable|max_in_memory_size
specifier|static
specifier|const
name|int
name|max_in_memory_size
init|=
literal|32000000
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|flushPage
name|void
name|QPSPrintEnginePrivate
operator|::
name|flushPage
parameter_list|(
name|bool
name|last
parameter_list|)
block|{
if|if
condition|(
operator|!
name|last
operator|&&
name|currentPage
operator|->
name|stream
argument_list|()
operator|->
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|QPdf
operator|::
name|ByteStream
name|e
argument_list|(
operator|&
name|trailer
argument_list|)
decl_stmt|;
name|buffer
operator|<<
literal|"%%Page: "
operator|<<
name|pageCount
operator|<<
name|pageCount
operator|<<
literal|"\n"
literal|"%%BeginPageSetup\n"
literal|"QI\n"
expr_stmt|;
if|if
condition|(
name|hugeDocument
condition|)
block|{
for|for
control|(
name|QHash
argument_list|<
name|QFontEngine
operator|::
name|FaceId
argument_list|,
name|QFontSubset
operator|*
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|fonts
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|fonts
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|currentPage
operator|->
name|fonts
operator|.
name|contains
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|->
name|object_id
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|->
name|downloaded_glyphs
operator|==
literal|0
condition|)
block|{
name|buffer
operator|<<
operator|(
operator|*
name|it
operator|)
operator|->
name|toType1
argument_list|()
expr_stmt|;
operator|(
operator|*
name|it
operator|)
operator|->
name|downloaded_glyphs
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|<<
operator|(
operator|*
name|it
operator|)
operator|->
name|type1AddedGlyphs
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentPage
operator|->
name|fonts
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|buffer
operator|<<
literal|"(F"
operator|<<
name|QByteArray
operator|::
name|number
argument_list|(
name|currentPage
operator|->
name|fonts
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|<<
literal|") T1Setup\n"
expr_stmt|;
name|buffer
operator|<<
literal|"%%EndPageSetup\nq\n"
expr_stmt|;
name|e
operator|<<
literal|"\nQ QP\n"
expr_stmt|;
if|if
condition|(
name|last
operator|||
name|hugeDocument
operator|||
name|buffer
operator|.
name|stream
argument_list|()
operator|->
name|size
argument_list|()
operator|+
name|currentPage
operator|->
name|stream
argument_list|()
operator|->
name|size
argument_list|()
operator|>
name|max_in_memory_size
condition|)
block|{
comment|//        qDebug("emiting header at page %d", pageCount);
if|if
condition|(
operator|!
name|headerDone
condition|)
name|emitHeader
argument_list|(
name|last
argument_list|)
expr_stmt|;
name|emitPages
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|<<
operator|*
name|currentPage
operator|<<
name|e
expr_stmt|;
name|currentPage
operator|->
name|clear
argument_list|()
expr_stmt|;
name|trailer
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|pageCount
operator|++
expr_stmt|;
block|}
end_function
begin_comment
comment|// ================ PSPrinter class ========================
end_comment
begin_constructor
DECL|function|QPSPrintEngine
name|QPSPrintEngine
operator|::
name|QPSPrintEngine
parameter_list|(
name|QPrinter
operator|::
name|PrinterMode
name|m
parameter_list|)
member_init_list|:
name|QPdfBaseEngine
argument_list|(
operator|*
operator|(
operator|new
name|QPSPrintEnginePrivate
argument_list|(
name|m
argument_list|)
operator|)
argument_list|,
name|PrimitiveTransform
operator||
name|PatternTransform
operator||
name|PixmapTransform
operator||
name|PainterPaths
operator||
name|PatternBrush
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|ignoreSigPipe
specifier|static
name|void
name|ignoreSigPipe
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_LPR
specifier|static
name|struct
name|sigaction
modifier|*
name|users_sigpipe_handler
init|=
literal|0
decl_stmt|;
specifier|static
name|int
name|lockCount
init|=
literal|0
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_THREAD
name|QMutexLocker
name|locker
argument_list|(
name|QMutexPool
operator|::
name|globalInstanceGet
argument_list|(
operator|&
name|users_sigpipe_handler
argument_list|)
argument_list|)
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|b
condition|)
block|{
if|if
condition|(
name|lockCount
operator|++
operator|>
literal|0
condition|)
return|return;
if|if
condition|(
name|users_sigpipe_handler
operator|!=
literal|0
condition|)
return|return;
comment|// already ignoring sigpipe
name|users_sigpipe_handler
operator|=
operator|new
expr|struct
name|sigaction
expr_stmt|;
name|struct
name|sigaction
name|tmp_sigpipe_handler
decl_stmt|;
name|tmp_sigpipe_handler
operator|.
name|sa_handler
operator|=
name|SIG_IGN
expr_stmt|;
name|sigemptyset
argument_list|(
operator|&
name|tmp_sigpipe_handler
operator|.
name|sa_mask
argument_list|)
expr_stmt|;
name|tmp_sigpipe_handler
operator|.
name|sa_flags
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|sigaction
argument_list|(
name|SIGPIPE
argument_list|,
operator|&
name|tmp_sigpipe_handler
argument_list|,
name|users_sigpipe_handler
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
operator|delete
name|users_sigpipe_handler
expr_stmt|;
name|users_sigpipe_handler
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|--
name|lockCount
operator|>
literal|0
condition|)
return|return;
if|if
condition|(
name|users_sigpipe_handler
operator|==
literal|0
condition|)
return|return;
comment|// not ignoring sigpipe
if|if
condition|(
name|sigaction
argument_list|(
name|SIGPIPE
argument_list|,
name|users_sigpipe_handler
argument_list|,
literal|0
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|qWarning
argument_list|(
literal|"QPSPrintEngine: Could not restore SIGPIPE handler"
argument_list|)
expr_stmt|;
operator|delete
name|users_sigpipe_handler
expr_stmt|;
name|users_sigpipe_handler
operator|=
literal|0
expr_stmt|;
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|b
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_destructor
DECL|function|~QPSPrintEngine
name|QPSPrintEngine
operator|::
name|~
name|QPSPrintEngine
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPSPrintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|fd
operator|>=
literal|0
condition|)
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|_MSC_VER
operator|>=
literal|1400
operator|::
name|_close
argument_list|(
name|d
operator|->
name|fd
argument_list|)
expr_stmt|;
else|#
directive|else
operator|::
name|close
argument_list|(
name|d
operator|->
name|fd
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_function
DECL|function|begin
name|bool
name|QPSPrintEngine
operator|::
name|begin
parameter_list|(
name|QPaintDevice
modifier|*
name|pdev
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPSPrintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|fd
operator|>=
literal|0
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|d
operator|->
name|useAlphaEngine
condition|)
block|{
name|QAlphaPaintEngine
operator|::
name|begin
argument_list|(
name|pdev
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|continueCall
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|QPdfBaseEngine
operator|::
name|begin
argument_list|(
name|pdev
argument_list|)
condition|)
block|{
name|d
operator|->
name|printerState
operator|=
name|QPrinter
operator|::
name|Error
expr_stmt|;
return|return
literal|false
return|;
block|}
name|d
operator|->
name|pageCount
operator|=
literal|1
expr_stmt|;
comment|// initialize state
name|d
operator|->
name|pen
operator|=
name|QPen
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|d
operator|->
name|brush
operator|=
name|Qt
operator|::
name|NoBrush
expr_stmt|;
name|d
operator|->
name|hasPen
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|hasBrush
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|clipEnabled
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|allClipped
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|boundingBox
operator|=
name|QRect
argument_list|()
expr_stmt|;
name|d
operator|->
name|fontsUsed
operator|=
literal|""
expr_stmt|;
name|d
operator|->
name|hugeDocument
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|simplePen
operator|=
literal|false
expr_stmt|;
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|d
operator|->
name|printerState
operator|=
name|QPrinter
operator|::
name|Active
expr_stmt|;
name|newPage
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|end
name|bool
name|QPSPrintEngine
operator|::
name|end
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPSPrintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|useAlphaEngine
condition|)
block|{
name|QAlphaPaintEngine
operator|::
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|continueCall
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
comment|// we're writing to lp/lpr through a pipe, we don't want to crash with SIGPIPE
comment|// if lp/lpr dies
name|ignoreSigPipe
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|d
operator|->
name|flushPage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QByteArray
name|trailer
decl_stmt|;
name|QPdf
operator|::
name|ByteStream
name|s
argument_list|(
operator|&
name|trailer
argument_list|)
decl_stmt|;
name|s
operator|<<
literal|"%%Trailer\n"
literal|"%%Pages: "
operator|<<
name|d
operator|->
name|pageCount
operator|-
literal|1
operator|<<
literal|'\n'
operator|<<
name|wrapDSC
argument_list|(
literal|"%%DocumentFonts: "
operator|+
name|d
operator|->
name|fontsUsed
argument_list|)
expr_stmt|;
name|s
operator|<<
literal|"%%EOF\n"
expr_stmt|;
name|d
operator|->
name|outDevice
operator|->
name|write
argument_list|(
name|trailer
argument_list|)
expr_stmt|;
name|QPdfBaseEngine
operator|::
name|end
argument_list|()
expr_stmt|;
name|ignoreSigPipe
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|firstPage
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|headerDone
operator|=
literal|false
expr_stmt|;
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|printerState
operator|=
name|QPrinter
operator|::
name|Idle
expr_stmt|;
name|d
operator|->
name|pdev
operator|=
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setBrush
name|void
name|QPSPrintEngine
operator|::
name|setBrush
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPSPrintEngine
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
block|bool specifyColor;     int gStateObject = 0;     int patternObject = d->addBrushPattern(brush, d->stroker.matrix, brushOrigin,&specifyColor,&gStateObject);      *d->currentPage<< (patternObject ? "/PCSp cs " : "/CSp cs ");     if (specifyColor) {         QColor rgba = brush.color();         *d->currentPage<< rgba.redF()<< rgba.greenF()<< rgba.blueF();     }     if (patternObject)         *d->currentPage<< "/Pat"<< patternObject;     *d->currentPage<< "scn\n";
endif|#
directive|endif
name|QColor
name|rgba
init|=
name|d
operator|->
name|brush
operator|.
name|color
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|colorMode
operator|==
name|QPrinter
operator|::
name|GrayScale
condition|)
block|{
name|qreal
name|gray
init|=
name|qGray
argument_list|(
name|rgba
operator|.
name|rgba
argument_list|()
argument_list|)
operator|/
literal|255.
decl_stmt|;
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|gray
operator|<<
name|gray
operator|<<
name|gray
expr_stmt|;
block|}
else|else
block|{
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|rgba
operator|.
name|redF
argument_list|()
operator|<<
name|rgba
operator|.
name|greenF
argument_list|()
operator|<<
name|rgba
operator|.
name|blueF
argument_list|()
expr_stmt|;
block|}
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"scn\n"
operator|<<
literal|"/BSt "
operator|<<
name|d
operator|->
name|brush
operator|.
name|style
argument_list|()
operator|<<
literal|"def\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawImageInternal
name|void
name|QPSPrintEngine
operator|::
name|drawImageInternal
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
name|QImage
name|image
parameter_list|,
name|bool
name|bitmap
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPSPrintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|clipEnabled
operator|&&
name|d
operator|->
name|allClipped
condition|)
return|return;
if|if
condition|(
name|bitmap
operator|&&
name|image
operator|.
name|depth
argument_list|()
operator|!=
literal|1
condition|)
name|bitmap
operator|=
literal|false
expr_stmt|;
name|QImage
name|mask
decl_stmt|;
comment|// the below is not necessary since it's handled by the alpha
comment|// engine
if|if
condition|(
operator|!
name|d
operator|->
name|useAlphaEngine
operator|&&
operator|!
name|bitmap
condition|)
block|{
if|if
condition|(
name|image
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_Mono
operator|||
name|image
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_MonoLSB
condition|)
name|image
operator|=
name|image
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|hasAlphaChannel
argument_list|()
condition|)
block|{
comment|// get better alpha dithering
name|int
name|xscale
init|=
name|image
operator|.
name|width
argument_list|()
decl_stmt|;
name|xscale
operator|*=
name|xscale
operator|<=
literal|800
condition|?
literal|4
else|:
operator|(
name|xscale
operator|<=
literal|1600
condition|?
literal|2
else|:
literal|1
operator|)
expr_stmt|;
name|int
name|yscale
init|=
name|image
operator|.
name|height
argument_list|()
decl_stmt|;
name|yscale
operator|*=
name|yscale
operator|<=
literal|800
condition|?
literal|4
else|:
operator|(
name|yscale
operator|<=
literal|1600
condition|?
literal|2
else|:
literal|1
operator|)
expr_stmt|;
name|image
operator|=
name|image
operator|.
name|scaled
argument_list|(
name|xscale
argument_list|,
name|yscale
argument_list|)
expr_stmt|;
name|mask
operator|=
name|image
operator|.
name|createAlphaMask
argument_list|(
name|Qt
operator|::
name|OrderedAlphaDither
argument_list|)
expr_stmt|;
block|}
block|}
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"q\n"
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|simplePen
condition|)
operator|*
name|d
operator|->
name|currentPage
operator|<<
name|QPdf
operator|::
name|generateMatrix
argument_list|(
name|d
operator|->
name|stroker
operator|.
name|matrix
argument_list|)
expr_stmt|;
name|QBrush
name|b
init|=
name|d
operator|->
name|brush
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// set current pen as brush
name|d
operator|->
name|brush
operator|=
name|d
operator|->
name|pen
operator|.
name|brush
argument_list|()
expr_stmt|;
name|setBrush
argument_list|()
expr_stmt|;
block|}
name|d
operator|->
name|drawImage
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|,
name|image
argument_list|,
name|mask
argument_list|)
expr_stmt|;
operator|*
name|d
operator|->
name|currentPage
operator|<<
literal|"Q\n"
expr_stmt|;
name|d
operator|->
name|brush
operator|=
name|b
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawImage
name|void
name|QPSPrintEngine
operator|::
name|drawImage
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPSPrintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|useAlphaEngine
condition|)
block|{
name|QAlphaPaintEngine
operator|::
name|drawImage
argument_list|(
name|r
argument_list|,
name|img
argument_list|,
name|sr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|continueCall
argument_list|()
condition|)
return|return;
block|}
name|QImage
name|image
init|=
name|img
operator|.
name|copy
argument_list|(
name|sr
operator|.
name|toRect
argument_list|()
argument_list|)
decl_stmt|;
name|drawImageInternal
argument_list|(
name|r
argument_list|,
name|image
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPixmap
name|void
name|QPSPrintEngine
operator|::
name|drawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPSPrintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|useAlphaEngine
condition|)
block|{
name|QAlphaPaintEngine
operator|::
name|drawPixmap
argument_list|(
name|r
argument_list|,
name|pm
argument_list|,
name|sr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|continueCall
argument_list|()
condition|)
return|return;
block|}
name|QImage
name|img
init|=
name|pm
operator|.
name|copy
argument_list|(
name|sr
operator|.
name|toRect
argument_list|()
argument_list|)
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|drawImageInternal
argument_list|(
name|r
argument_list|,
name|img
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawTiledPixmap
name|void
name|QPSPrintEngine
operator|::
name|drawTiledPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPSPrintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|useAlphaEngine
condition|)
block|{
name|QAlphaPaintEngine
operator|::
name|drawTiledPixmap
argument_list|(
name|r
argument_list|,
name|pixmap
argument_list|,
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|continueCall
argument_list|()
condition|)
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|clipEnabled
operator|&&
name|d
operator|->
name|allClipped
condition|)
return|return;
comment|// ### Optimize implementation!
name|qreal
name|yPos
init|=
name|r
operator|.
name|y
argument_list|()
decl_stmt|;
name|qreal
name|yOff
init|=
name|p
operator|.
name|y
argument_list|()
decl_stmt|;
while|while
condition|(
name|yPos
operator|<
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
condition|)
block|{
name|qreal
name|drawH
init|=
name|pixmap
operator|.
name|height
argument_list|()
operator|-
name|yOff
decl_stmt|;
comment|// Cropping first row
if|if
condition|(
name|yPos
operator|+
name|drawH
operator|>
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
condition|)
comment|// Cropping last row
name|drawH
operator|=
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
operator|-
name|yPos
expr_stmt|;
name|qreal
name|xPos
init|=
name|r
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|xOff
init|=
name|p
operator|.
name|x
argument_list|()
decl_stmt|;
while|while
condition|(
name|xPos
operator|<
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
condition|)
block|{
name|qreal
name|drawW
init|=
name|pixmap
operator|.
name|width
argument_list|()
operator|-
name|xOff
decl_stmt|;
comment|// Cropping first column
if|if
condition|(
name|xPos
operator|+
name|drawW
operator|>
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
condition|)
comment|// Cropping last column
name|drawW
operator|=
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
operator|-
name|xPos
expr_stmt|;
comment|// ########
name|painter
argument_list|()
operator|->
name|drawPixmap
argument_list|(
name|QPointF
argument_list|(
name|xPos
argument_list|,
name|yPos
argument_list|)
operator|.
name|toPoint
argument_list|()
argument_list|,
name|pixmap
argument_list|,
name|QRectF
argument_list|(
name|xOff
argument_list|,
name|yOff
argument_list|,
name|drawW
argument_list|,
name|drawH
argument_list|)
operator|.
name|toRect
argument_list|()
argument_list|)
expr_stmt|;
name|xPos
operator|+=
name|drawW
expr_stmt|;
name|xOff
operator|=
literal|0
expr_stmt|;
block|}
name|yPos
operator|+=
name|drawH
expr_stmt|;
name|yOff
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|newPage
name|bool
name|QPSPrintEngine
operator|::
name|newPage
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPSPrintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|firstPage
operator|&&
name|d
operator|->
name|useAlphaEngine
condition|)
name|flushAndInit
argument_list|()
expr_stmt|;
comment|// we're writing to lp/lpr through a pipe, we don't want to crash with SIGPIPE
comment|// if lp/lpr dies
name|ignoreSigPipe
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|firstPage
condition|)
name|d
operator|->
name|flushPage
argument_list|()
expr_stmt|;
name|d
operator|->
name|firstPage
operator|=
literal|false
expr_stmt|;
name|ignoreSigPipe
argument_list|(
literal|false
argument_list|)
expr_stmt|;
operator|delete
name|d
operator|->
name|currentPage
expr_stmt|;
name|d
operator|->
name|currentPage
operator|=
operator|new
name|QPdfPage
expr_stmt|;
name|d
operator|->
name|stroker
operator|.
name|stream
operator|=
name|d
operator|->
name|currentPage
expr_stmt|;
return|return
name|QPdfBaseEngine
operator|::
name|newPage
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|abort
name|bool
name|QPSPrintEngine
operator|::
name|abort
parameter_list|()
block|{
comment|// ### abort!?!
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|printerState
name|QPrinter
operator|::
name|PrinterState
name|QPSPrintEngine
operator|::
name|printerState
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPSPrintEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printerState
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PRINTER
end_comment
end_unit
