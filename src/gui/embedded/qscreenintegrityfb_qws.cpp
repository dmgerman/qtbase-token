begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_INTEGRITYFB
end_ifndef
begin_include
include|#
directive|include
file|<qscreenintegrityfb_qws.h>
end_include
begin_include
include|#
directive|include
file|<qwindowsystem_qws.h>
end_include
begin_include
include|#
directive|include
file|<qsocketnotifier.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qscreen_qws.h>
end_include
begin_include
include|#
directive|include
file|"qmouseintegrity_qws.h"
end_include
begin_include
include|#
directive|include
file|"qkbdintegrity_qws.h"
end_include
begin_include
include|#
directive|include
file|<qmousedriverfactory_qws.h>
end_include
begin_include
include|#
directive|include
file|<qkbddriverfactory_qws.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<INTEGRITY.h>
end_include
begin_include
include|#
directive|include
file|<device/fbdriver.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QIntfbScreenPrivate
class|class
name|QIntfbScreenPrivate
block|{
public|public:
name|QIntfbScreenPrivate
parameter_list|()
constructor_decl|;
name|~
name|QIntfbScreenPrivate
parameter_list|()
destructor_decl|;
DECL|member|handle
name|FBHandle
name|handle
decl_stmt|;
DECL|member|fbinfo
name|struct
name|FBInfoStruct
name|fbinfo
decl_stmt|;
DECL|member|mouse
name|QWSMouseHandler
modifier|*
name|mouse
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_KEYBOARD
DECL|member|keyboard
name|QWSKeyboardHandler
modifier|*
name|keyboard
decl_stmt|;
endif|#
directive|endif
block|}
class|;
end_class
begin_constructor
DECL|function|QIntfbScreenPrivate
name|QIntfbScreenPrivate
operator|::
name|QIntfbScreenPrivate
parameter_list|()
member_init_list|:
name|mouse
argument_list|(
literal|0
argument_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_QWS_KEYBOARD
name|keyboard
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QIntfbScreenPrivate
name|QIntfbScreenPrivate
operator|::
name|~
name|QIntfbScreenPrivate
parameter_list|()
block|{
operator|delete
name|mouse
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_KEYBOARD
operator|delete
name|keyboard
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_comment
comment|/*!     \internal      \class QIntfbScreen     \ingroup qws      \brief The QIntfbScreen class implements a screen driver for the     INTEGRITY framebuffer drivers.      Note that this class is only available in \l{Qt for INTEGRITY}.     Custom screen drivers can be added by subclassing the     QScreenDriverPlugin class, using the QScreenDriverFactory class to     dynamically load the driver into the application, but there should     only be one screen object per application.      \sa QScreen, QScreenDriverPlugin, {Running Applications} */
end_comment
begin_comment
comment|/*!     \fn bool QIntfbScreen::connect(const QString& displaySpec)     \reimp */
end_comment
begin_comment
comment|/*!     \fn void QIntfbScreen::disconnect()     \reimp */
end_comment
begin_comment
comment|/*!     \fn bool QIntfbScreen::initDevice()     \reimp */
end_comment
begin_comment
comment|/*!     \fn void QIntfbScreen::restore()     \reimp */
end_comment
begin_comment
comment|/*!     \fn void QIntfbScreen::save()     \reimp */
end_comment
begin_comment
comment|/*!     \fn void QIntfbScreen::setDirty(const QRect& r)     \reimp */
end_comment
begin_comment
comment|/*!     \fn void QIntfbScreen::setMode(int nw, int nh, int nd)     \reimp */
end_comment
begin_comment
comment|/*!     \fn void QIntfbScreen::shutdownDevice()     \reimp */
end_comment
begin_comment
comment|/*!     \fn QIntfbScreen::QIntfbScreen(int displayId)      Constructs a QVNCScreen object. The \a displayId argument     identifies the Qt for Embedded Linux server to connect to. */
end_comment
begin_constructor
DECL|function|QIntfbScreen
name|QIntfbScreen
operator|::
name|QIntfbScreen
parameter_list|(
name|int
name|display_id
parameter_list|)
member_init_list|:
name|QScreen
argument_list|(
name|display_id
argument_list|,
name|IntfbClass
argument_list|)
member_init_list|,
name|d_ptr
argument_list|(
operator|new
name|QIntfbScreenPrivate
argument_list|)
block|{
name|d_ptr
operator|->
name|handle
operator|=
literal|0
expr_stmt|;
name|data
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys this QIntfbScreen object. */
end_comment
begin_destructor
DECL|function|~QIntfbScreen
name|QIntfbScreen
operator|::
name|~
name|QIntfbScreen
parameter_list|()
block|{
operator|delete
name|d_ptr
expr_stmt|;
block|}
end_destructor
begin_decl_stmt
DECL|variable|connected
specifier|static
name|QIntfbScreen
modifier|*
name|connected
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|connect
name|bool
name|QIntfbScreen
operator|::
name|connect
parameter_list|(
specifier|const
name|QString
modifier|&
name|displaySpec
parameter_list|)
block|{
name|FBDriver
modifier|*
name|fbdev
decl_stmt|;
name|CheckSuccess
argument_list|(
name|gh_FB_get_driver
argument_list|(
literal|0
argument_list|,
operator|&
name|fbdev
argument_list|)
argument_list|)
expr_stmt|;
name|CheckSuccess
argument_list|(
name|gh_FB_init_device
argument_list|(
name|fbdev
argument_list|,
literal|0
argument_list|,
operator|&
name|d_ptr
operator|->
name|handle
argument_list|)
argument_list|)
expr_stmt|;
name|CheckSuccess
argument_list|(
name|gh_FB_get_info
argument_list|(
name|d_ptr
operator|->
name|handle
argument_list|,
operator|&
name|d_ptr
operator|->
name|fbinfo
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|(
name|uchar
operator|*
operator|)
name|d_ptr
operator|->
name|fbinfo
operator|.
name|start
expr_stmt|;
name|d
operator|=
name|d_ptr
operator|->
name|fbinfo
operator|.
name|bitsperpixel
expr_stmt|;
switch|switch
condition|(
name|d
condition|)
block|{
case|case
literal|1
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_Mono
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
break|break;
case|case
literal|12
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB444
argument_list|)
expr_stmt|;
break|break;
case|case
literal|15
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
expr_stmt|;
break|break;
case|case
literal|16
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
expr_stmt|;
break|break;
case|case
literal|18
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
expr_stmt|;
break|break;
case|case
literal|24
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_GENERIC
if|#
directive|if
name|Q_BYTE_ORDER
operator|!=
name|Q_BIG_ENDIAN
name|qt_set_generic_blit
argument_list|(
name|this
argument_list|,
literal|24
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|redbits
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|greenbits
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|bluebits
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|alphabits
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|redoffset
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|greenoffset
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|blueoffset
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|alphaoffset
argument_list|)
expr_stmt|;
else|#
directive|else
name|qt_set_generic_blit
argument_list|(
name|this
argument_list|,
literal|24
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|redbits
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|greenbits
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|bluebits
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|alphabits
argument_list|,
literal|16
operator|-
name|d_ptr
operator|->
name|fbinfo
operator|.
name|redoffset
argument_list|,
literal|16
operator|-
name|d_ptr
operator|->
name|fbinfo
operator|.
name|greenoffset
argument_list|,
literal|16
operator|-
name|d_ptr
operator|->
name|fbinfo
operator|.
name|blueoffset
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|alphaoffset
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
break|break;
case|case
literal|32
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_GENERIC
if|#
directive|if
name|Q_BYTE_ORDER
operator|!=
name|Q_BIG_ENDIAN
name|qt_set_generic_blit
argument_list|(
name|this
argument_list|,
literal|32
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|redbits
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|greenbits
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|bluebits
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|alphabits
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|redoffset
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|greenoffset
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|blueoffset
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|alphaoffset
argument_list|)
expr_stmt|;
else|#
directive|else
name|qt_set_generic_blit
argument_list|(
name|this
argument_list|,
literal|32
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|redbits
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|greenbits
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|bluebits
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|alphabits
argument_list|,
literal|24
operator|-
name|d_ptr
operator|->
name|fbinfo
operator|.
name|redoffset
argument_list|,
literal|24
operator|-
name|d_ptr
operator|->
name|fbinfo
operator|.
name|greenoffset
argument_list|,
literal|24
operator|-
name|d_ptr
operator|->
name|fbinfo
operator|.
name|blueoffset
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|alphaoffset
condition|?
literal|24
operator|-
name|d_ptr
operator|->
name|fbinfo
operator|.
name|alphaoffset
else|:
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
break|break;
block|}
name|dw
operator|=
name|w
operator|=
name|d_ptr
operator|->
name|fbinfo
operator|.
name|width
expr_stmt|;
name|dh
operator|=
name|h
operator|=
name|d_ptr
operator|->
name|fbinfo
operator|.
name|height
expr_stmt|;
comment|/* assumes no padding */
name|lstep
operator|=
name|w
operator|*
operator|(
operator|(
name|d
operator|+
literal|7
operator|)
operator|>>
literal|3
operator|)
expr_stmt|;
name|mapsize
operator|=
name|size
operator|=
name|h
operator|*
name|lstep
expr_stmt|;
comment|/* default values */
name|int
name|dpi
init|=
literal|72
decl_stmt|;
name|physWidth
operator|=
name|qRound
argument_list|(
name|dw
operator|*
literal|25.4
operator|/
name|dpi
argument_list|)
expr_stmt|;
name|physHeight
operator|=
name|qRound
argument_list|(
name|dh
operator|*
literal|25.4
operator|/
name|dpi
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"Connected to INTEGRITYfb server: %d x %d x %d %dx%dmm (%dx%ddpi)"
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|d
argument_list|,
name|physWidth
argument_list|,
name|physHeight
argument_list|,
name|qRound
argument_list|(
name|dw
operator|*
literal|25.4
operator|/
name|physWidth
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|dh
operator|*
literal|25.4
operator|/
name|physHeight
argument_list|)
argument_list|)
expr_stmt|;
name|QWSServer
operator|::
name|setDefaultMouse
argument_list|(
literal|"integrity"
argument_list|)
expr_stmt|;
name|QWSServer
operator|::
name|setDefaultKeyboard
argument_list|(
literal|"integrity"
argument_list|)
expr_stmt|;
name|connected
operator|=
name|this
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|disconnect
name|void
name|QIntfbScreen
operator|::
name|disconnect
parameter_list|()
block|{
name|connected
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initDevice
name|bool
name|QIntfbScreen
operator|::
name|initDevice
parameter_list|()
block|{
name|CheckSuccess
argument_list|(
name|gh_FB_set_info
argument_list|(
name|d_ptr
operator|->
name|handle
argument_list|,
operator|&
name|d_ptr
operator|->
name|fbinfo
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|CheckSuccess
argument_list|(
name|gh_FB_get_info
argument_list|(
name|d_ptr
operator|->
name|handle
argument_list|,
operator|&
name|d_ptr
operator|->
name|fbinfo
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|(
name|uchar
operator|*
operator|)
name|d_ptr
operator|->
name|fbinfo
operator|.
name|start
expr_stmt|;
name|d
operator|=
name|d_ptr
operator|->
name|fbinfo
operator|.
name|bitsperpixel
expr_stmt|;
name|dw
operator|=
name|w
operator|=
name|d_ptr
operator|->
name|fbinfo
operator|.
name|width
expr_stmt|;
name|dh
operator|=
name|h
operator|=
name|d_ptr
operator|->
name|fbinfo
operator|.
name|height
expr_stmt|;
name|mapsize
operator|=
name|d_ptr
operator|->
name|fbinfo
operator|.
name|length
expr_stmt|;
comment|/* assumes no padding */
name|lstep
operator|=
name|w
operator|*
operator|(
operator|(
name|d
operator|+
literal|7
operator|)
operator|>>
literal|3
operator|)
expr_stmt|;
name|mapsize
operator|=
name|size
operator|=
name|h
operator|*
name|lstep
expr_stmt|;
name|data
operator|=
operator|(
name|uchar
operator|*
operator|)
name|d_ptr
operator|->
name|fbinfo
operator|.
name|start
expr_stmt|;
name|d
operator|=
name|d_ptr
operator|->
name|fbinfo
operator|.
name|bitsperpixel
expr_stmt|;
switch|switch
condition|(
name|d
condition|)
block|{
case|case
literal|1
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_Mono
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
break|break;
case|case
literal|12
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB444
argument_list|)
expr_stmt|;
break|break;
case|case
literal|15
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
expr_stmt|;
break|break;
case|case
literal|16
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
expr_stmt|;
break|break;
case|case
literal|18
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
expr_stmt|;
break|break;
case|case
literal|24
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
expr_stmt|;
break|break;
case|case
literal|32
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
break|break;
block|}
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_GENERIC
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN__
argument_list|)
name|qt_set_generic_blit
argument_list|(
name|this
argument_list|,
name|d
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|redbits
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|greenbits
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|bluebits
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|alphabits
argument_list|,
literal|24
operator|-
name|d_ptr
operator|->
name|fbinfo
operator|.
name|redoffset
argument_list|,
literal|24
operator|-
name|d_ptr
operator|->
name|fbinfo
operator|.
name|greenoffset
argument_list|,
literal|24
operator|-
name|d_ptr
operator|->
name|fbinfo
operator|.
name|blueoffset
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|alphaoffset
condition|?
literal|24
operator|-
name|d_ptr
operator|->
name|fbinfo
operator|.
name|alphaoffset
else|:
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
name|qt_set_generic_blit
argument_list|(
name|this
argument_list|,
name|d
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|redbits
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|greenbits
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|bluebits
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|alphabits
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|redoffset
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|greenoffset
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|blueoffset
argument_list|,
name|d_ptr
operator|->
name|fbinfo
operator|.
name|alphaoffset
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
name|QScreenCursor
operator|::
name|initSoftwareCursor
argument_list|()
expr_stmt|;
endif|#
directive|endif
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|shutdownDevice
name|void
name|QIntfbScreen
operator|::
name|shutdownDevice
parameter_list|()
block|{
name|gh_FB_close
argument_list|(
name|d_ptr
operator|->
name|handle
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setMode
name|void
name|QIntfbScreen
operator|::
name|setMode
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
block|{ }
end_function
begin_comment
comment|// save the state of the graphics card
end_comment
begin_comment
comment|// This is needed so that e.g. we can restore the palette when switching
end_comment
begin_comment
comment|// between linux virtual consoles.
end_comment
begin_function
DECL|function|save
name|void
name|QIntfbScreen
operator|::
name|save
parameter_list|()
block|{
comment|// nothing to do.
block|}
end_function
begin_comment
comment|// restore the state of the graphics card.
end_comment
begin_function
DECL|function|restore
name|void
name|QIntfbScreen
operator|::
name|restore
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|setDirty
name|void
name|QIntfbScreen
operator|::
name|setDirty
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|FBRect
name|fbrect
decl_stmt|;
name|fbrect
operator|.
name|dx
operator|=
name|rect
operator|.
name|x
argument_list|()
expr_stmt|;
name|fbrect
operator|.
name|dy
operator|=
name|rect
operator|.
name|y
argument_list|()
expr_stmt|;
name|fbrect
operator|.
name|width
operator|=
name|rect
operator|.
name|width
argument_list|()
expr_stmt|;
name|fbrect
operator|.
name|height
operator|=
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
name|gh_FB_expose
argument_list|(
name|d_ptr
operator|->
name|handle
argument_list|,
operator|&
name|fbrect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setBrightness
name|void
name|QIntfbScreen
operator|::
name|setBrightness
parameter_list|(
name|int
name|b
parameter_list|)
block|{
if|if
condition|(
name|connected
condition|)
block|{     }
block|}
end_function
begin_function
DECL|function|blank
name|void
name|QIntfbScreen
operator|::
name|blank
parameter_list|(
name|bool
name|on
parameter_list|)
block|{ }
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_INTEGRITYFB
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
