begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwsproperty_qws.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_PROPERTIES
end_ifndef
begin_include
include|#
directive|include
file|"qwscommand_qws_p.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsystem_qws.h"
end_include
begin_include
include|#
directive|include
file|"qhash.h"
end_include
begin_include
include|#
directive|include
file|"qalgorithms.h"
end_include
begin_include
include|#
directive|include
file|"qbytearray.h"
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|Data
class|class
name|QWSPropertyManager
operator|::
name|Data
block|{
public|public:
DECL|function|find
name|QByteArray
name|find
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|property
parameter_list|)
block|{
return|return
name|properties
operator|.
name|value
argument_list|(
name|winId
argument_list|)
operator|.
name|value
argument_list|(
name|property
argument_list|)
return|;
block|}
DECL|typedef|PropertyHash
typedef|typedef
name|QHash
argument_list|<
name|int
argument_list|,
name|QHash
argument_list|<
name|int
argument_list|,
name|QByteArray
argument_list|>
argument_list|>
name|PropertyHash
typedef|;
DECL|member|properties
name|PropertyHash
name|properties
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*********************************************************************  *  * Class: QWSPropertyManager  *  *********************************************************************/
end_comment
begin_constructor
DECL|function|QWSPropertyManager
name|QWSPropertyManager
operator|::
name|QWSPropertyManager
parameter_list|()
block|{
name|d
operator|=
operator|new
name|Data
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWSPropertyManager
name|QWSPropertyManager
operator|::
name|~
name|QWSPropertyManager
parameter_list|()
block|{
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|setProperty
name|bool
name|QWSPropertyManager
operator|::
name|setProperty
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|property
parameter_list|,
name|int
name|mode
parameter_list|,
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|QByteArray
argument_list|>
name|props
init|=
name|d
operator|->
name|properties
operator|.
name|value
argument_list|(
name|winId
argument_list|)
decl_stmt|;
name|QHash
argument_list|<
name|int
argument_list|,
name|QByteArray
argument_list|>
operator|::
name|iterator
name|it
init|=
name|props
operator|.
name|find
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|props
operator|.
name|end
argument_list|()
condition|)
return|return
literal|false
return|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|PropReplace
case|:
name|d
operator|->
name|properties
index|[
name|winId
index|]
index|[
name|property
index|]
operator|=
name|QByteArray
argument_list|(
name|data
argument_list|,
name|len
argument_list|)
expr_stmt|;
break|break;
case|case
name|PropAppend
case|:
name|d
operator|->
name|properties
index|[
name|winId
index|]
index|[
name|property
index|]
operator|.
name|append
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|PropPrepend
case|:
name|d
operator|->
name|properties
index|[
name|winId
index|]
index|[
name|property
index|]
operator|.
name|prepend
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|hasProperty
name|bool
name|QWSPropertyManager
operator|::
name|hasProperty
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|property
parameter_list|)
block|{
return|return
name|d
operator|->
name|properties
operator|.
name|value
argument_list|(
name|winId
argument_list|)
operator|.
name|contains
argument_list|(
name|property
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|removeProperty
name|bool
name|QWSPropertyManager
operator|::
name|removeProperty
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|property
parameter_list|)
block|{
name|QWSPropertyManager
operator|::
name|Data
operator|::
name|PropertyHash
operator|::
name|iterator
name|it
init|=
name|d
operator|->
name|properties
operator|.
name|find
argument_list|(
name|winId
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|d
operator|->
name|properties
operator|.
name|end
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
name|d
operator|->
name|properties
index|[
name|winId
index|]
operator|.
name|remove
argument_list|(
name|property
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|addProperty
name|bool
name|QWSPropertyManager
operator|::
name|addProperty
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|property
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|properties
index|[
name|winId
index|]
operator|.
name|contains
argument_list|(
name|property
argument_list|)
condition|)
name|d
operator|->
name|properties
index|[
name|winId
index|]
index|[
name|property
index|]
operator|=
name|QByteArray
argument_list|()
expr_stmt|;
comment|// only add if it doesn't exist
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|getProperty
name|bool
name|QWSPropertyManager
operator|::
name|getProperty
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|property
parameter_list|,
specifier|const
name|char
modifier|*
modifier|&
name|data
parameter_list|,
name|int
modifier|&
name|len
parameter_list|)
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|QByteArray
argument_list|>
name|props
init|=
name|d
operator|->
name|properties
operator|.
name|value
argument_list|(
name|winId
argument_list|)
decl_stmt|;
name|QHash
argument_list|<
name|int
argument_list|,
name|QByteArray
argument_list|>
operator|::
name|iterator
name|it
init|=
name|props
operator|.
name|find
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|props
operator|.
name|end
argument_list|()
condition|)
block|{
name|data
operator|=
literal|0
expr_stmt|;
name|len
operator|=
operator|-
literal|1
expr_stmt|;
return|return
literal|false
return|;
block|}
name|data
operator|=
name|it
operator|.
name|value
argument_list|()
operator|.
name|constData
argument_list|()
expr_stmt|;
name|len
operator|=
name|it
operator|.
name|value
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|removeProperties
name|bool
name|QWSPropertyManager
operator|::
name|removeProperties
parameter_list|(
name|int
name|winId
parameter_list|)
block|{
return|return
name|d
operator|->
name|properties
operator|.
name|remove
argument_list|(
name|winId
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_QWS_PROPERTIES
end_comment
end_unit
