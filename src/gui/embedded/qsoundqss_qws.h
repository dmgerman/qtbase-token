begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSOUNDQSS_QWS_H
end_ifndef
begin_define
DECL|macro|QSOUNDQSS_QWS_H
define|#
directive|define
name|QSOUNDQSS_QWS_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SOUND
end_ifndef
begin_include
include|#
directive|include
file|<QtNetwork/qtcpserver.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qtcpsocket.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qwssocket_qws.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Gui
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_NETWORK
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_NO_DNS
argument_list|)
DECL|macro|QT_NO_QWS_SOUNDSERVER
define|#
directive|define
name|QT_NO_QWS_SOUNDSERVER
endif|#
directive|endif
ifndef|#
directive|ifndef
name|Q_OS_MAC
name|class
name|QWSSoundServerPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QWSSoundServer
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|QWSSoundServer
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QWSSoundServer
argument_list|()
block|;
name|void
name|playFile
argument_list|(
argument|int id
argument_list|,
argument|const QString& filename
argument_list|)
block|;
name|void
name|stopFile
argument_list|(
argument|int id
argument_list|)
block|;
name|void
name|pauseFile
argument_list|(
argument|int id
argument_list|)
block|;
name|void
name|resumeFile
argument_list|(
argument|int id
argument_list|)
block|;
name|Q_SIGNALS
operator|:
name|void
name|soundCompleted
argument_list|(
name|int
argument_list|)
block|;
name|private
name|Q_SLOTS
operator|:
name|void
name|translateSoundCompleted
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
block|;
name|private
operator|:
name|QWSSoundServerPrivate
operator|*
name|d
block|; }
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_SOUNDSERVER
end_ifndef
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QWSSoundClient
range|:
name|public
name|QWSSocket
block|{
name|Q_OBJECT
name|public
operator|:
expr|enum
name|SoundFlags
block|{
name|Priority
operator|=
literal|0x01
block|,
name|Streaming
operator|=
literal|0x02
comment|// currently ignored, but but could set up so both Raw and non raw can be done streaming or not.
block|}
block|;     enum
name|DeviceErrors
block|{
name|ErrOpeningAudioDevice
operator|=
literal|0x01
block|,
name|ErrOpeningFile
operator|=
literal|0x02
block|,
name|ErrReadingFile
operator|=
literal|0x04
block|}
block|;
name|explicit
name|QWSSoundClient
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QWSSoundClient
argument_list|( )
block|;
name|void
name|reconnect
argument_list|()
block|;
name|void
name|play
argument_list|(
argument|int id
argument_list|,
argument|const QString& filename
argument_list|)
block|;
name|void
name|play
argument_list|(
argument|int id
argument_list|,
argument|const QString& filename
argument_list|,
argument|int volume
argument_list|,
argument|int flags =
literal|0
argument_list|)
block|;
name|void
name|playRaw
argument_list|(
argument|int id
argument_list|,
argument|const QString&
argument_list|,
argument|int
argument_list|,
argument|int
argument_list|,
argument|int
argument_list|,
argument|int flags =
literal|0
argument_list|)
block|;
name|void
name|pause
argument_list|(
argument|int id
argument_list|)
block|;
name|void
name|stop
argument_list|(
argument|int id
argument_list|)
block|;
name|void
name|resume
argument_list|(
argument|int id
argument_list|)
block|;
name|void
name|setVolume
argument_list|(
argument|int id
argument_list|,
argument|int left
argument_list|,
argument|int right
argument_list|)
block|;
name|void
name|setMute
argument_list|(
argument|int id
argument_list|,
argument|bool m
argument_list|)
block|;
comment|// to be used by server only, to protect phone conversation/rings.
name|void
name|playPriorityOnly
argument_list|(
name|bool
argument_list|)
block|;
comment|// If silent, tell sound server to release audio device
comment|// Otherwise, allow sound server to regain audio device
name|void
name|setSilent
argument_list|(
name|bool
argument_list|)
block|;
name|Q_SIGNALS
operator|:
name|void
name|soundCompleted
argument_list|(
name|int
argument_list|)
block|;
name|void
name|deviceReady
argument_list|(
argument|int id
argument_list|)
block|;
name|void
name|deviceError
argument_list|(
argument|int id
argument_list|,
argument|QWSSoundClient::DeviceErrors
argument_list|)
block|;
name|private
name|Q_SLOTS
operator|:
name|void
name|tryReadCommand
argument_list|()
block|;
name|void
name|emitConnectionRefused
argument_list|()
block|;
name|private
operator|:
name|void
name|sendServerMessage
argument_list|(
argument|QString msg
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QWSSoundServerSocket
range|:
name|public
name|QWSServerSocket
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|QWSSoundServerSocket
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|public
name|Q_SLOTS
operator|:
name|void
name|newConnection
argument_list|()
block|;
ifdef|#
directive|ifdef
name|QT3_SUPPORT
name|public
operator|:
name|QT3_SUPPORT_CONSTRUCTOR
name|QWSSoundServerSocket
argument_list|(
name|QObject
operator|*
name|parent
argument_list|,
specifier|const
name|char
operator|*
name|name
argument_list|)
block|;
endif|#
directive|endif
name|Q_SIGNALS
operator|:
name|void
name|playFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|QString
operator|&
argument_list|)
block|;
name|void
name|playFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|QString
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
block|;
name|void
name|playRawFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|QString
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
block|;
name|void
name|pauseFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
block|;
name|void
name|stopFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
block|;
name|void
name|resumeFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
block|;
name|void
name|setVolume
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
block|;
name|void
name|setMute
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|bool
argument_list|)
block|;
name|void
name|stopAll
argument_list|(
name|int
argument_list|)
block|;
name|void
name|playPriorityOnly
argument_list|(
name|bool
argument_list|)
block|;
name|void
name|setSilent
argument_list|(
name|bool
argument_list|)
block|;
name|void
name|soundFileCompleted
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
block|;
name|void
name|deviceReady
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
block|;
name|void
name|deviceError
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_MAC
end_comment
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SOUND
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QSOUNDQSS_QWS_H
end_comment
end_unit
