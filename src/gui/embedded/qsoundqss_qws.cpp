begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsoundqss_qws.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SOUND
end_ifndef
begin_include
include|#
directive|include
file|<qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<qlist.h>
end_include
begin_include
include|#
directive|include
file|<qsocketnotifier.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qalgorithms.h>
end_include
begin_include
include|#
directive|include
file|<qtimer.h>
end_include
begin_include
include|#
directive|include
file|<qpointer.h>
end_include
begin_include
include|#
directive|include
file|<qendian.h>
end_include
begin_include
include|#
directive|include
file|<private/qcore_unix_p.h>
end_include
begin_comment
comment|// overrides QT_OPEN
end_comment
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<time.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_include
include|#
directive|include
file|<sys/ioctl.h>
end_include
begin_include
include|#
directive|include
file|<sys/soundcard.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qvfbhdr.h>
end_include
begin_decl_stmt
specifier|extern
name|int
name|errno
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|macro|QT_QWS_SOUND_16BIT
define|#
directive|define
name|QT_QWS_SOUND_16BIT
value|1
comment|// or 0, or undefined for always 0
DECL|macro|QT_QWS_SOUND_STEREO
define|#
directive|define
name|QT_QWS_SOUND_STEREO
value|1
comment|// or 0, or undefined for always 0
comment|// Zaurus SL5000D doesn't seem to return any error if setting to 44000 and it fails,
comment|// however 44100 works, 44100 is more common that 44000.
DECL|variable|sound_speed
specifier|static
name|int
name|sound_speed
init|=
literal|44100
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_SOUNDSERVER
end_ifndef
begin_decl_stmt
specifier|extern
name|int
name|qws_display_id
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|zeroMem
specifier|static
name|char
modifier|*
name|zeroMem
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|QRiffChunk
struct|struct
name|QRiffChunk
block|{
DECL|member|id
name|char
name|id
index|[
literal|4
index|]
decl_stmt|;
DECL|member|size
name|quint32
name|size
decl_stmt|;
DECL|member|data
name|char
name|data
index|[
literal|4
comment|/*size*/
index|]
decl_stmt|;
block|}
struct|;
end_struct
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_QWS_IPAQ
argument_list|)
end_if
begin_decl_stmt
DECL|variable|sound_fragment_size
specifier|static
specifier|const
name|int
name|sound_fragment_size
init|=
literal|12
decl_stmt|;
end_decl_stmt
begin_else
else|#
directive|else
end_else
begin_decl_stmt
DECL|variable|sound_fragment_size
specifier|static
specifier|const
name|int
name|sound_fragment_size
init|=
literal|12
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|sound_buffer_size
specifier|static
specifier|const
name|int
name|sound_buffer_size
init|=
literal|1
operator|<<
name|sound_fragment_size
decl_stmt|;
end_decl_stmt
begin_comment
comment|// nb. there will be an sound startup delay of
end_comment
begin_comment
comment|//        2^sound_fragment_size / sound_speed seconds.
end_comment
begin_comment
comment|// (eg. sound_fragment_size==12, sound_speed==44000 means 0.093s delay)
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_QWS_SOUND_STEREO
end_ifdef
begin_decl_stmt
DECL|variable|sound_stereo
specifier|static
name|int
name|sound_stereo
init|=
name|QT_QWS_SOUND_STEREO
decl_stmt|;
end_decl_stmt
begin_else
else|#
directive|else
end_else
begin_decl_stmt
DECL|variable|sound_stereo
specifier|static
specifier|const
name|int
name|sound_stereo
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_QWS_SOUND_16BIT
end_ifdef
begin_decl_stmt
DECL|variable|sound_16bit
specifier|static
name|bool
name|sound_16bit
init|=
name|QT_QWS_SOUND_16BIT
decl_stmt|;
end_decl_stmt
begin_else
else|#
directive|else
end_else
begin_decl_stmt
DECL|variable|sound_16bit
specifier|static
specifier|const
name|bool
name|sound_16bit
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_SOUNDSERVER
end_ifndef
begin_class
DECL|class|QWSSoundServerClient
class|class
name|QWSSoundServerClient
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|QWSSoundServerClient
parameter_list|(
name|QWS_SOCK_BASE
modifier|*
name|s
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
constructor_decl|;
name|~
name|QWSSoundServerClient
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|sendSoundCompleted
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|sendDeviceReady
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|sendDeviceError
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
signals|signals:
name|void
name|play
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
name|void
name|play
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|playRaw
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|pause
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|stop
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|resume
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|setVolume
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|setMute
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|bool
parameter_list|)
function_decl|;
name|void
name|stopAll
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|playPriorityOnly
parameter_list|(
name|bool
parameter_list|)
function_decl|;
name|void
name|setSilent
parameter_list|(
name|bool
parameter_list|)
function_decl|;
private|private
name|slots
private|:
name|void
name|tryReadCommand
parameter_list|()
function_decl|;
private|private:
name|void
name|sendClientMessage
parameter_list|(
name|QString
name|msg
parameter_list|)
function_decl|;
DECL|member|mCurrentID
name|int
name|mCurrentID
decl_stmt|;
DECL|member|left
DECL|member|right
name|int
name|left
decl_stmt|,
name|right
decl_stmt|;
DECL|member|priExist
name|bool
name|priExist
decl_stmt|;
DECL|member|lastId
specifier|static
name|int
name|lastId
decl_stmt|;
DECL|function|nextId
specifier|static
name|int
name|nextId
parameter_list|()
block|{
return|return
operator|++
name|lastId
return|;
block|}
DECL|member|socket
name|QPointer
argument_list|<
name|QWS_SOCK_BASE
argument_list|>
name|socket
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|lastId
name|int
name|QWSSoundServerClient
operator|::
name|lastId
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QWSSoundServerClient
name|QWSSoundServerClient
operator|::
name|QWSSoundServerClient
parameter_list|(
name|QWS_SOCK_BASE
modifier|*
name|s
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{
name|socket
operator|=
name|s
expr_stmt|;
name|priExist
operator|=
literal|false
expr_stmt|;
name|mCurrentID
operator|=
name|nextId
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|tryReadCommand
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|deleteLater
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWSSoundServerClient
name|QWSSoundServerClient
operator|::
name|~
name|QWSSoundServerClient
parameter_list|()
block|{
if|if
condition|(
name|priExist
condition|)
name|playPriorityOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
emit|emit
name|stopAll
argument_list|(
name|mCurrentID
argument_list|)
emit|;
if|if
condition|(
name|socket
condition|)
name|socket
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|getStringTok
specifier|static
name|QString
name|getStringTok
parameter_list|(
name|QString
modifier|&
name|in
parameter_list|)
block|{
name|int
name|pos
init|=
name|in
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|ret
decl_stmt|;
if|if
condition|(
name|pos
operator|>
literal|0
condition|)
block|{
name|ret
operator|=
name|in
operator|.
name|left
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|in
operator|=
name|in
operator|.
name|mid
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|in
expr_stmt|;
name|in
operator|=
name|QString
operator|::
name|null
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|getNumTok
specifier|static
name|int
name|getNumTok
parameter_list|(
name|QString
modifier|&
name|in
parameter_list|)
block|{
return|return
name|getStringTok
argument_list|(
name|in
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|tryReadCommand
name|void
name|QWSSoundServerClient
operator|::
name|tryReadCommand
parameter_list|()
block|{
while|while
condition|(
name|socket
operator|->
name|canReadLine
argument_list|()
condition|)
block|{
name|QString
name|l
init|=
name|QString
operator|::
name|fromAscii
argument_list|(
name|socket
operator|->
name|readLine
argument_list|()
argument_list|)
decl_stmt|;
name|l
operator|.
name|truncate
argument_list|(
name|l
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// chomp
name|QString
name|functionName
init|=
name|getStringTok
argument_list|(
name|l
argument_list|)
decl_stmt|;
name|int
name|soundid
init|=
name|getNumTok
argument_list|(
name|l
argument_list|)
decl_stmt|;
if|if
condition|(
name|functionName
operator|==
name|QLatin1String
argument_list|(
literal|"PLAY"
argument_list|)
condition|)
block|{
emit|emit
name|play
argument_list|(
name|mCurrentID
argument_list|,
name|soundid
argument_list|,
name|l
argument_list|)
emit|;
block|}
elseif|else
if|if
condition|(
name|functionName
operator|==
name|QLatin1String
argument_list|(
literal|"PLAYEXTEND"
argument_list|)
condition|)
block|{
name|int
name|volume
init|=
name|getNumTok
argument_list|(
name|l
argument_list|)
decl_stmt|;
name|int
name|flags
init|=
name|getNumTok
argument_list|(
name|l
argument_list|)
decl_stmt|;
emit|emit
name|play
argument_list|(
name|mCurrentID
argument_list|,
name|soundid
argument_list|,
name|l
argument_list|,
name|volume
argument_list|,
name|flags
argument_list|)
emit|;
block|}
elseif|else
if|if
condition|(
name|functionName
operator|==
name|QLatin1String
argument_list|(
literal|"PLAYRAW"
argument_list|)
condition|)
block|{
name|int
name|chs
init|=
name|getNumTok
argument_list|(
name|l
argument_list|)
decl_stmt|;
name|int
name|freq
init|=
name|getNumTok
argument_list|(
name|l
argument_list|)
decl_stmt|;
name|int
name|bitspersample
init|=
name|getNumTok
argument_list|(
name|l
argument_list|)
decl_stmt|;
name|int
name|flags
init|=
name|getNumTok
argument_list|(
name|l
argument_list|)
decl_stmt|;
emit|emit
name|playRaw
argument_list|(
name|mCurrentID
argument_list|,
name|soundid
argument_list|,
name|l
argument_list|,
name|freq
argument_list|,
name|chs
argument_list|,
name|bitspersample
argument_list|,
name|flags
argument_list|)
emit|;
block|}
elseif|else
if|if
condition|(
name|functionName
operator|==
name|QLatin1String
argument_list|(
literal|"PAUSE"
argument_list|)
condition|)
block|{
emit|emit
name|pause
argument_list|(
name|mCurrentID
argument_list|,
name|soundid
argument_list|)
emit|;
block|}
elseif|else
if|if
condition|(
name|functionName
operator|==
name|QLatin1String
argument_list|(
literal|"STOP"
argument_list|)
condition|)
block|{
emit|emit
name|stop
argument_list|(
name|mCurrentID
argument_list|,
name|soundid
argument_list|)
emit|;
block|}
elseif|else
if|if
condition|(
name|functionName
operator|==
name|QLatin1String
argument_list|(
literal|"RESUME"
argument_list|)
condition|)
block|{
emit|emit
name|resume
argument_list|(
name|mCurrentID
argument_list|,
name|soundid
argument_list|)
emit|;
block|}
elseif|else
if|if
condition|(
name|functionName
operator|==
name|QLatin1String
argument_list|(
literal|"SETVOLUME"
argument_list|)
condition|)
block|{
name|int
name|left
init|=
name|getNumTok
argument_list|(
name|l
argument_list|)
decl_stmt|;
name|int
name|right
init|=
name|getNumTok
argument_list|(
name|l
argument_list|)
decl_stmt|;
emit|emit
name|setVolume
argument_list|(
name|mCurrentID
argument_list|,
name|soundid
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
emit|;
block|}
elseif|else
if|if
condition|(
name|functionName
operator|==
name|QLatin1String
argument_list|(
literal|"MUTE"
argument_list|)
condition|)
block|{
emit|emit
name|setMute
argument_list|(
name|mCurrentID
argument_list|,
name|soundid
argument_list|,
literal|true
argument_list|)
emit|;
block|}
elseif|else
if|if
condition|(
name|functionName
operator|==
name|QLatin1String
argument_list|(
literal|"UNMUTE"
argument_list|)
condition|)
block|{
emit|emit
name|setMute
argument_list|(
name|mCurrentID
argument_list|,
name|soundid
argument_list|,
literal|false
argument_list|)
emit|;
block|}
elseif|else
if|if
condition|(
name|functionName
operator|==
name|QLatin1String
argument_list|(
literal|"PRIORITYONLY"
argument_list|)
condition|)
block|{
name|bool
name|sPri
init|=
name|soundid
operator|!=
literal|0
decl_stmt|;
if|if
condition|(
name|sPri
operator|!=
name|priExist
condition|)
block|{
name|priExist
operator|=
name|sPri
expr_stmt|;
emit|emit
name|playPriorityOnly
argument_list|(
name|sPri
argument_list|)
emit|;
block|}
block|}
elseif|else
if|if
condition|(
name|functionName
operator|==
name|QLatin1String
argument_list|(
literal|"SILENT"
argument_list|)
condition|)
block|{
emit|emit
name|setSilent
argument_list|(
name|soundid
operator|!=
literal|0
argument_list|)
emit|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|sendClientMessage
name|void
name|QWSSoundServerClient
operator|::
name|sendClientMessage
parameter_list|(
name|QString
name|msg
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TEXTCODEC
name|QByteArray
name|u
init|=
name|msg
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
else|#
directive|else
name|QByteArray
name|u
init|=
name|msg
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
endif|#
directive|endif
name|socket
operator|->
name|write
argument_list|(
name|u
operator|.
name|data
argument_list|()
argument_list|,
name|u
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|->
name|flush
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendSoundCompleted
name|void
name|QWSSoundServerClient
operator|::
name|sendSoundCompleted
parameter_list|(
name|int
name|gid
parameter_list|,
name|int
name|sid
parameter_list|)
block|{
if|if
condition|(
name|gid
operator|==
name|mCurrentID
condition|)
name|sendClientMessage
argument_list|(
name|QLatin1String
argument_list|(
literal|"SOUNDCOMPLETED "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|sid
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendDeviceReady
name|void
name|QWSSoundServerClient
operator|::
name|sendDeviceReady
parameter_list|(
name|int
name|gid
parameter_list|,
name|int
name|sid
parameter_list|)
block|{
if|if
condition|(
name|gid
operator|==
name|mCurrentID
condition|)
name|sendClientMessage
argument_list|(
name|QLatin1String
argument_list|(
literal|"DEVICEREADY "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|sid
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendDeviceError
name|void
name|QWSSoundServerClient
operator|::
name|sendDeviceError
parameter_list|(
name|int
name|gid
parameter_list|,
name|int
name|sid
parameter_list|,
name|int
name|err
parameter_list|)
block|{
if|if
condition|(
name|gid
operator|==
name|mCurrentID
condition|)
name|sendClientMessage
argument_list|(
name|QLatin1String
argument_list|(
literal|"DEVICEERROR "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|sid
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|err
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|maxVolume
specifier|static
specifier|const
name|int
name|maxVolume
init|=
literal|100
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|runinLength
specifier|static
specifier|const
name|int
name|runinLength
init|=
literal|2
operator|*
name|sound_buffer_size
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|QWSSoundServerProvider
class|class
name|QWSSoundServerProvider
block|{
public|public:
DECL|function|QWSSoundServerProvider
name|QWSSoundServerProvider
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|s
parameter_list|)
member_init_list|:
name|mWid
argument_list|(
name|w
argument_list|)
member_init_list|,
name|mSid
argument_list|(
name|s
argument_list|)
member_init_list|,
name|mMuted
argument_list|(
literal|false
argument_list|)
block|{
name|leftVolume
operator|=
name|maxVolume
operator|>>
literal|1
expr_stmt|;
name|rightVolume
operator|=
name|maxVolume
operator|>>
literal|1
expr_stmt|;
name|isPriority
operator|=
literal|false
expr_stmt|;
name|samples_due
operator|=
literal|0
expr_stmt|;
name|max1
operator|=
name|max2
operator|=
name|out
operator|=
literal|0
expr_stmt|;
comment|// = sound_buffer_size;
name|data
operator|=
name|data1
expr_stmt|;
name|max
operator|=
operator|&
name|max1
expr_stmt|;
name|sampleRunin
operator|=
literal|0
expr_stmt|;
name|dev
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|function|~QWSSoundServerProvider
specifier|virtual
name|~
name|QWSSoundServerProvider
parameter_list|()
block|{     }
DECL|function|groupId
name|int
name|groupId
parameter_list|()
specifier|const
block|{
return|return
name|mWid
return|;
block|}
DECL|function|soundId
name|int
name|soundId
parameter_list|()
specifier|const
block|{
return|return
name|mSid
return|;
block|}
DECL|function|startSampleRunin
name|void
name|startSampleRunin
parameter_list|()
block|{
comment|// inteded to provide even audio return from mute/pause/dead samples.
comment|//sampleRunin = runinLength; // or more?
block|}
DECL|function|setVolume
name|void
name|setVolume
parameter_list|(
name|int
name|lv
parameter_list|,
name|int
name|rv
parameter_list|)
block|{
name|leftVolume
operator|=
name|qMin
argument_list|(
name|maxVolume
argument_list|,
name|qMax
argument_list|(
literal|0
argument_list|,
name|lv
argument_list|)
argument_list|)
expr_stmt|;
name|rightVolume
operator|=
name|qMin
argument_list|(
name|maxVolume
argument_list|,
name|qMax
argument_list|(
literal|0
argument_list|,
name|rv
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|setMute
name|void
name|setMute
parameter_list|(
name|bool
name|m
parameter_list|)
block|{
name|mMuted
operator|=
name|m
expr_stmt|;
block|}
DECL|function|muted
name|bool
name|muted
parameter_list|()
block|{
return|return
name|mMuted
return|;
block|}
DECL|function|setPriority
name|void
name|setPriority
parameter_list|(
name|bool
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|!=
name|isPriority
condition|)
block|{
name|isPriority
operator|=
name|p
expr_stmt|;
comment|// currently meaningless.
block|}
block|}
DECL|function|setPlayPriorityOnly
specifier|static
name|void
name|setPlayPriorityOnly
parameter_list|(
name|bool
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
condition|)
name|priorityExists
operator|++
expr_stmt|;
else|else
name|priorityExists
operator|--
expr_stmt|;
if|if
condition|(
name|priorityExists
operator|<
literal|0
condition|)
name|qDebug
argument_list|(
literal|"QSS: got more priority offs than ons"
argument_list|)
expr_stmt|;
block|}
comment|// return -1 for file broken, give up.
comment|// else return sampels ready for playing.
comment|// argument is max samples server is looking for,
comment|// in terms of current device status.
specifier|virtual
name|int
name|readySamples
parameter_list|(
name|int
parameter_list|)
function_decl|=
literal|0
function_decl|;
DECL|function|getSample
name|int
name|getSample
parameter_list|(
name|int
name|off
parameter_list|,
name|int
name|bps
parameter_list|)
block|{
comment|//
comment|//  16-bit audio data is converted to native endian so that it can be scaled
comment|//  Yes, this is ugly on a BigEndian machine
comment|//  Perhaps it shouldn't be scaled at all
comment|//
return|return
operator|(
name|bps
operator|==
literal|1
operator|)
condition|?
operator|(
name|data
index|[
name|out
operator|+
name|off
index|]
operator|-
literal|128
operator|)
operator|*
literal|128
else|:
name|qToLittleEndian
argument_list|(
operator|(
operator|(
name|short
operator|*
operator|)
name|data
operator|)
index|[
operator|(
name|out
operator|/
literal|2
operator|)
operator|+
name|off
index|]
argument_list|)
return|;
block|}
DECL|function|add
name|int
name|add
parameter_list|(
name|int
modifier|*
name|mixl
parameter_list|,
name|int
modifier|*
name|mixr
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|int
name|bytesPerSample
init|=
name|chunkdata
operator|.
name|wBitsPerSample
operator|>>
literal|3
decl_stmt|;
if|if
condition|(
name|mMuted
condition|)
block|{
name|sampleRunin
operator|-=
name|qMin
argument_list|(
name|sampleRunin
argument_list|,
name|count
argument_list|)
expr_stmt|;
while|while
condition|(
name|count
operator|&&
operator|(
name|dev
operator|!=
operator|-
literal|1
operator|)
condition|)
block|{
if|if
condition|(
name|out
operator|>=
operator|*
name|max
condition|)
block|{
comment|// switch buffers
name|out
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|data
operator|==
name|data1
operator|&&
name|max2
operator|!=
literal|0
condition|)
block|{
name|data
operator|=
name|data2
expr_stmt|;
name|max
operator|=
operator|&
name|max2
expr_stmt|;
name|max1
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|==
name|data2
operator|&&
name|max1
operator|!=
literal|0
condition|)
block|{
name|data
operator|=
name|data1
expr_stmt|;
name|max
operator|=
operator|&
name|max1
expr_stmt|;
name|max2
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|qDebug
argument_list|(
literal|"QSS Read Error: both buffers empty"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
name|samples_due
operator|+=
name|sound_speed
expr_stmt|;
while|while
condition|(
name|count
operator|&&
name|samples_due
operator|>=
name|chunkdata
operator|.
name|samplesPerSec
condition|)
block|{
name|samples_due
operator|-=
name|chunkdata
operator|.
name|samplesPerSec
expr_stmt|;
name|count
operator|--
expr_stmt|;
block|}
name|out
operator|+=
name|bytesPerSample
operator|*
name|chunkdata
operator|.
name|channels
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|// This shouldn't be the case
if|if
condition|(
operator|!
name|mixl
operator|||
operator|!
name|mixr
condition|)
return|return
literal|0
return|;
name|int
name|lVolNum
init|=
name|leftVolume
decl_stmt|,
name|lVolDen
init|=
name|maxVolume
decl_stmt|;
name|int
name|rVolNum
init|=
name|rightVolume
decl_stmt|,
name|rVolDen
init|=
name|maxVolume
decl_stmt|;
if|if
condition|(
name|priorityExists
operator|>
literal|0
operator|&&
operator|!
name|isPriority
condition|)
block|{
name|lVolNum
operator|=
literal|0
expr_stmt|;
comment|// later, make this gradually fade in and out.
name|lVolDen
operator|=
literal|5
expr_stmt|;
name|rVolNum
operator|=
literal|0
expr_stmt|;
name|rVolDen
operator|=
literal|5
expr_stmt|;
block|}
while|while
condition|(
name|count
operator|&&
operator|(
name|dev
operator|!=
operator|-
literal|1
operator|)
condition|)
block|{
if|if
condition|(
name|out
operator|>=
operator|*
name|max
condition|)
block|{
comment|// switch buffers
name|out
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|data
operator|==
name|data1
operator|&&
name|max2
operator|!=
literal|0
condition|)
block|{
name|data
operator|=
name|data2
expr_stmt|;
name|max
operator|=
operator|&
name|max2
expr_stmt|;
name|max1
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|==
name|data2
operator|&&
name|max1
operator|!=
literal|0
condition|)
block|{
name|data
operator|=
name|data1
expr_stmt|;
name|max
operator|=
operator|&
name|max1
expr_stmt|;
name|max2
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|qDebug
argument_list|(
literal|"QSS Read Error: both buffers empty"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
name|samples_due
operator|+=
name|sound_speed
expr_stmt|;
if|if
condition|(
name|count
operator|&&
name|samples_due
operator|>=
name|chunkdata
operator|.
name|samplesPerSec
condition|)
block|{
name|int
name|l
init|=
name|getSample
argument_list|(
literal|0
argument_list|,
name|bytesPerSample
argument_list|)
operator|*
name|lVolNum
operator|/
name|lVolDen
decl_stmt|;
name|int
name|r
init|=
operator|(
name|chunkdata
operator|.
name|channels
operator|==
literal|2
operator|)
condition|?
name|getSample
argument_list|(
literal|1
argument_list|,
name|bytesPerSample
argument_list|)
operator|*
name|rVolNum
operator|/
name|rVolDen
else|:
name|l
decl_stmt|;
if|if
condition|(
operator|!
name|sound_stereo
operator|&&
name|chunkdata
operator|.
name|channels
operator|==
literal|2
condition|)
name|l
operator|+=
name|r
expr_stmt|;
if|if
condition|(
name|sampleRunin
condition|)
block|{
while|while
condition|(
name|sampleRunin
operator|&&
name|count
operator|&&
name|samples_due
operator|>=
name|chunkdata
operator|.
name|samplesPerSec
condition|)
block|{
name|mixl
operator|++
expr_stmt|;
if|if
condition|(
name|sound_stereo
condition|)
name|mixr
operator|++
expr_stmt|;
name|samples_due
operator|-=
name|chunkdata
operator|.
name|samplesPerSec
expr_stmt|;
name|sampleRunin
operator|--
expr_stmt|;
name|count
operator|--
expr_stmt|;
block|}
block|}
while|while
condition|(
name|count
operator|&&
name|samples_due
operator|>=
name|chunkdata
operator|.
name|samplesPerSec
condition|)
block|{
operator|*
name|mixl
operator|++
operator|+=
name|l
expr_stmt|;
if|if
condition|(
name|sound_stereo
condition|)
operator|*
name|mixr
operator|++
operator|+=
name|r
expr_stmt|;
name|samples_due
operator|-=
name|chunkdata
operator|.
name|samplesPerSec
expr_stmt|;
name|count
operator|--
expr_stmt|;
block|}
block|}
comment|// optimize out manipulation of sample if downsampling and we skip it
name|out
operator|+=
name|bytesPerSample
operator|*
name|chunkdata
operator|.
name|channels
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
specifier|virtual
name|bool
name|finished
parameter_list|()
specifier|const
function_decl|=
literal|0
function_decl|;
DECL|function|equal
name|bool
name|equal
parameter_list|(
name|int
name|wid
parameter_list|,
name|int
name|sid
parameter_list|)
block|{
return|return
operator|(
name|wid
operator|==
name|mWid
operator|&&
name|sid
operator|==
name|mSid
operator|)
return|;
block|}
protected|protected:
DECL|function|prepareBuffer
name|char
modifier|*
name|prepareBuffer
parameter_list|(
name|int
modifier|&
name|size
parameter_list|)
block|{
comment|// keep reading as long as there is 50 % or more room in off buffer.
if|if
condition|(
name|data
operator|==
name|data1
operator|&&
operator|(
name|max2
operator|<<
literal|1
operator|<
name|sound_buffer_size
operator|)
condition|)
block|{
name|size
operator|=
name|sound_buffer_size
operator|-
name|max2
expr_stmt|;
return|return
operator|(
name|char
operator|*
operator|)
name|data2
return|;
block|}
elseif|else
if|if
condition|(
name|data
operator|==
name|data2
operator|&&
operator|(
name|max1
operator|<<
literal|1
operator|<
name|sound_buffer_size
operator|)
condition|)
block|{
name|size
operator|=
name|sound_buffer_size
operator|-
name|max1
expr_stmt|;
return|return
operator|(
name|char
operator|*
operator|)
name|data1
return|;
block|}
else|else
block|{
name|size
operator|=
literal|0
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|updateBuffer
name|void
name|updateBuffer
parameter_list|(
name|int
name|read
parameter_list|)
block|{
comment|// always reads to off buffer.
if|if
condition|(
name|read
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|data
operator|==
name|data2
condition|)
block|{
name|max1
operator|=
name|read
expr_stmt|;
block|}
else|else
block|{
name|max2
operator|=
name|read
expr_stmt|;
block|}
block|}
block|}
DECL|function|devSamples
name|int
name|devSamples
parameter_list|()
block|{
name|int
name|possible
init|=
operator|(
operator|(
operator|(
name|max1
operator|+
name|max2
operator|-
name|out
operator|)
operator|/
operator|(
operator|(
name|chunkdata
operator|.
name|wBitsPerSample
operator|>>
literal|3
operator|)
operator|*
name|chunkdata
operator|.
name|channels
operator|)
operator|)
operator|*
name|sound_speed
operator|)
operator|/
name|chunkdata
operator|.
name|samplesPerSec
decl_stmt|;
return|return
name|possible
return|;
block|}
struct|struct
block|{
DECL|member|formatTag
name|qint16
name|formatTag
decl_stmt|;
DECL|member|channels
name|qint16
name|channels
decl_stmt|;
DECL|member|samplesPerSec
name|qint32
name|samplesPerSec
decl_stmt|;
DECL|member|avgBytesPerSec
name|qint32
name|avgBytesPerSec
decl_stmt|;
DECL|member|blockAlign
name|qint16
name|blockAlign
decl_stmt|;
DECL|member|wBitsPerSample
name|qint16
name|wBitsPerSample
decl_stmt|;
DECL|member|chunkdata
block|}
name|chunkdata
struct|;
DECL|member|dev
name|int
name|dev
decl_stmt|;
DECL|member|samples_due
name|int
name|samples_due
decl_stmt|;
private|private:
DECL|member|mWid
name|int
name|mWid
decl_stmt|;
DECL|member|mSid
name|int
name|mSid
decl_stmt|;
DECL|member|leftVolume
name|int
name|leftVolume
decl_stmt|;
DECL|member|rightVolume
name|int
name|rightVolume
decl_stmt|;
DECL|member|isPriority
name|bool
name|isPriority
decl_stmt|;
DECL|member|priorityExists
specifier|static
name|int
name|priorityExists
decl_stmt|;
DECL|member|max
name|int
modifier|*
name|max
decl_stmt|;
DECL|member|data
name|uchar
modifier|*
name|data
decl_stmt|;
DECL|member|data1
name|uchar
name|data1
index|[
name|sound_buffer_size
operator|+
literal|4
index|]
decl_stmt|;
comment|// +4 to handle badly aligned input data
DECL|member|data2
name|uchar
name|data2
index|[
name|sound_buffer_size
operator|+
literal|4
index|]
decl_stmt|;
comment|// +4 to handle badly aligned input data
DECL|member|out
DECL|member|max1
DECL|member|max2
name|int
name|out
decl_stmt|,
name|max1
decl_stmt|,
name|max2
decl_stmt|;
DECL|member|sampleRunin
name|int
name|sampleRunin
decl_stmt|;
DECL|member|mMuted
name|bool
name|mMuted
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|priorityExists
name|int
name|QWSSoundServerProvider
operator|::
name|priorityExists
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|QWSSoundServerBucket
class|class
name|QWSSoundServerBucket
super|:
specifier|public
name|QWSSoundServerProvider
block|{
public|public:
DECL|function|QWSSoundServerBucket
name|QWSSoundServerBucket
parameter_list|(
name|int
name|d
parameter_list|,
name|int
name|wid
parameter_list|,
name|int
name|sid
parameter_list|)
member_init_list|:
name|QWSSoundServerProvider
argument_list|(
name|wid
argument_list|,
name|sid
argument_list|)
block|{
name|dev
operator|=
name|d
expr_stmt|;
name|wavedata_remaining
operator|=
operator|-
literal|1
expr_stmt|;
name|mFinishedRead
operator|=
literal|false
expr_stmt|;
name|mInsufficientSamples
operator|=
literal|false
expr_stmt|;
block|}
DECL|function|~QWSSoundServerBucket
name|~
name|QWSSoundServerBucket
parameter_list|()
block|{
comment|//dev->close();
operator|::
name|close
argument_list|(
name|dev
argument_list|)
expr_stmt|;
block|}
DECL|function|finished
name|bool
name|finished
parameter_list|()
specifier|const
block|{
comment|//return !max;
return|return
name|mInsufficientSamples
operator|&&
name|mFinishedRead
return|;
block|}
DECL|function|readySamples
name|int
name|readySamples
parameter_list|(
name|int
parameter_list|)
block|{
name|int
name|size
decl_stmt|;
name|char
modifier|*
name|dest
init|=
name|prepareBuffer
argument_list|(
name|size
argument_list|)
decl_stmt|;
comment|// may want to change this to something like
comment|// if (data == data1&& max2<<1< sound_buffer_size
comment|//	||
comment|//	data == data2&& max1<<1< sound_buffer_size)
comment|// so will keep filling off buffer while there is +50% space left
if|if
condition|(
name|size
operator|>
literal|0
operator|&&
name|dest
operator|!=
literal|0
condition|)
block|{
while|while
condition|(
name|wavedata_remaining
operator|<
literal|0
condition|)
block|{
comment|//max = 0;
name|wavedata_remaining
operator|=
operator|-
literal|1
expr_stmt|;
comment|// Keep reading chunks...
specifier|const
name|int
name|n
init|=
sizeof|sizeof
argument_list|(
name|chunk
argument_list|)
operator|-
sizeof|sizeof
argument_list|(
name|chunk
operator|.
name|data
argument_list|)
decl_stmt|;
name|int
name|nr
init|=
operator|::
name|read
argument_list|(
name|dev
argument_list|,
operator|(
name|void
operator|*
operator|)
operator|&
name|chunk
argument_list|,
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|nr
operator|!=
name|n
condition|)
block|{
comment|// XXX check error? or don't we care?
name|wavedata_remaining
operator|=
literal|0
expr_stmt|;
name|mFinishedRead
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qstrncmp
argument_list|(
name|chunk
operator|.
name|id
argument_list|,
literal|"data"
argument_list|,
literal|4
argument_list|)
operator|==
literal|0
condition|)
block|{
name|wavedata_remaining
operator|=
name|qToLittleEndian
argument_list|(
name|chunk
operator|.
name|size
argument_list|)
expr_stmt|;
comment|//out = max = sound_buffer_size;
block|}
elseif|else
if|if
condition|(
name|qstrncmp
argument_list|(
name|chunk
operator|.
name|id
argument_list|,
literal|"RIFF"
argument_list|,
literal|4
argument_list|)
operator|==
literal|0
condition|)
block|{
name|char
name|d
index|[
literal|4
index|]
decl_stmt|;
if|if
condition|(
name|read
argument_list|(
name|dev
argument_list|,
name|d
argument_list|,
literal|4
argument_list|)
operator|!=
literal|4
condition|)
block|{
comment|// XXX check error? or don't we care?
comment|//qDebug("couldn't read riff");
name|mInsufficientSamples
operator|=
literal|true
expr_stmt|;
name|mFinishedRead
operator|=
literal|true
expr_stmt|;
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|qstrncmp
argument_list|(
name|d
argument_list|,
literal|"WAVE"
argument_list|,
literal|4
argument_list|)
operator|!=
literal|0
condition|)
block|{
comment|// skip
if|if
condition|(
name|chunk
operator|.
name|size
operator|>
literal|1000000000
operator|||
name|lseek
argument_list|(
name|dev
argument_list|,
name|chunk
operator|.
name|size
operator|-
literal|4
argument_list|,
name|SEEK_CUR
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
comment|//qDebug("oversized wav chunk");
name|mFinishedRead
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|qstrncmp
argument_list|(
name|chunk
operator|.
name|id
argument_list|,
literal|"fmt "
argument_list|,
literal|4
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|::
name|read
argument_list|(
name|dev
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|chunkdata
argument_list|,
sizeof|sizeof
argument_list|(
name|chunkdata
argument_list|)
argument_list|)
operator|!=
sizeof|sizeof
argument_list|(
name|chunkdata
argument_list|)
condition|)
block|{
comment|// XXX check error? or don't we care?
comment|//qDebug("couldn't ready chunkdata");
name|mFinishedRead
operator|=
literal|true
expr_stmt|;
block|}
DECL|macro|WAVE_FORMAT_PCM
define|#
directive|define
name|WAVE_FORMAT_PCM
value|1
else|else
block|{
comment|/*                 **  Endian Fix the chuck data                 */
name|chunkdata
operator|.
name|formatTag
operator|=
name|qToLittleEndian
argument_list|(
name|chunkdata
operator|.
name|formatTag
argument_list|)
expr_stmt|;
name|chunkdata
operator|.
name|channels
operator|=
name|qToLittleEndian
argument_list|(
name|chunkdata
operator|.
name|channels
argument_list|)
expr_stmt|;
name|chunkdata
operator|.
name|samplesPerSec
operator|=
name|qToLittleEndian
argument_list|(
name|chunkdata
operator|.
name|samplesPerSec
argument_list|)
expr_stmt|;
name|chunkdata
operator|.
name|avgBytesPerSec
operator|=
name|qToLittleEndian
argument_list|(
name|chunkdata
operator|.
name|avgBytesPerSec
argument_list|)
expr_stmt|;
name|chunkdata
operator|.
name|blockAlign
operator|=
name|qToLittleEndian
argument_list|(
name|chunkdata
operator|.
name|blockAlign
argument_list|)
expr_stmt|;
name|chunkdata
operator|.
name|wBitsPerSample
operator|=
name|qToLittleEndian
argument_list|(
name|chunkdata
operator|.
name|wBitsPerSample
argument_list|)
expr_stmt|;
if|if
condition|(
name|chunkdata
operator|.
name|formatTag
operator|!=
name|WAVE_FORMAT_PCM
condition|)
block|{
name|qWarning
argument_list|(
literal|"WAV file: UNSUPPORTED FORMAT %d"
argument_list|,
name|chunkdata
operator|.
name|formatTag
argument_list|)
expr_stmt|;
name|mFinishedRead
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// ignored chunk
if|if
condition|(
name|chunk
operator|.
name|size
operator|>
literal|1000000000
operator|||
name|lseek
argument_list|(
name|dev
argument_list|,
name|chunk
operator|.
name|size
argument_list|,
name|SEEK_CUR
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
comment|//qDebug("chunk size too big");
name|mFinishedRead
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|// this looks wrong.
if|if
condition|(
name|wavedata_remaining
operator|<=
literal|0
condition|)
block|{
name|mFinishedRead
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// may want to change this to something like
comment|// if (data == data1&& max2<<1< sound_buffer_size
comment|//	||
comment|//	data == data2&& max1<<1< sound_buffer_size)
comment|// so will keep filling off buffer while there is +50% space left
if|if
condition|(
name|wavedata_remaining
condition|)
block|{
if|if
condition|(
name|size
operator|>
literal|0
operator|&&
name|dest
operator|!=
literal|0
condition|)
block|{
name|int
name|read
init|=
operator|::
name|read
argument_list|(
name|dev
argument_list|,
name|dest
argument_list|,
name|qMin
argument_list|(
name|size
argument_list|,
name|wavedata_remaining
argument_list|)
argument_list|)
decl_stmt|;
comment|// XXX check error? or don't we care?
name|wavedata_remaining
operator|-=
name|read
expr_stmt|;
name|updateBuffer
argument_list|(
name|read
argument_list|)
expr_stmt|;
if|if
condition|(
name|read
operator|<=
literal|0
condition|)
comment|// data unexpectidly ended
name|mFinishedRead
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|int
name|possible
init|=
name|devSamples
argument_list|()
decl_stmt|;
if|if
condition|(
name|possible
operator|==
literal|0
condition|)
name|mInsufficientSamples
operator|=
literal|true
expr_stmt|;
return|return
name|possible
return|;
block|}
protected|protected:
DECL|member|chunk
name|QRiffChunk
name|chunk
decl_stmt|;
DECL|member|wavedata_remaining
name|int
name|wavedata_remaining
decl_stmt|;
DECL|member|mFinishedRead
name|bool
name|mFinishedRead
decl_stmt|;
DECL|member|mInsufficientSamples
name|bool
name|mInsufficientSamples
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QWSSoundServerStream
class|class
name|QWSSoundServerStream
super|:
specifier|public
name|QWSSoundServerProvider
block|{
public|public:
DECL|function|QWSSoundServerStream
name|QWSSoundServerStream
parameter_list|(
name|int
name|d
parameter_list|,
name|int
name|c
parameter_list|,
name|int
name|f
parameter_list|,
name|int
name|b
parameter_list|,
name|int
name|wid
parameter_list|,
name|int
name|sid
parameter_list|)
member_init_list|:
name|QWSSoundServerProvider
argument_list|(
name|wid
argument_list|,
name|sid
argument_list|)
block|{
name|chunkdata
operator|.
name|channels
operator|=
name|c
expr_stmt|;
name|chunkdata
operator|.
name|samplesPerSec
operator|=
name|f
expr_stmt|;
name|chunkdata
operator|.
name|wBitsPerSample
operator|=
name|b
expr_stmt|;
name|dev
operator|=
name|d
expr_stmt|;
comment|//fcntl( dev, F_SETFL, O_NONBLOCK );
name|lasttime
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|~QWSSoundServerStream
name|~
name|QWSSoundServerStream
parameter_list|()
block|{
if|if
condition|(
name|dev
operator|!=
operator|-
literal|1
condition|)
block|{
operator|::
name|close
argument_list|(
name|dev
argument_list|)
expr_stmt|;
name|dev
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
DECL|function|finished
name|bool
name|finished
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|dev
operator|==
operator|-
literal|1
operator|)
return|;
block|}
DECL|function|readySamples
name|int
name|readySamples
parameter_list|(
name|int
parameter_list|)
block|{
name|int
name|size
decl_stmt|;
name|char
modifier|*
name|dest
init|=
name|prepareBuffer
argument_list|(
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
operator|&&
name|dest
operator|!=
literal|0
operator|&&
name|dev
operator|!=
operator|-
literal|1
condition|)
block|{
name|int
name|read
init|=
operator|::
name|read
argument_list|(
name|dev
argument_list|,
name|dest
argument_list|,
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|<
literal|0
condition|)
block|{
switch|switch
condition|(
name|errno
condition|)
block|{
case|case
name|EAGAIN
case|:
case|case
name|EINTR
case|:
comment|// means read may yet succeed on the next attempt
break|break;
default|default:
comment|// unexpected error, fail.
operator|::
name|close
argument_list|(
name|dev
argument_list|)
expr_stmt|;
name|dev
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|read
operator|==
literal|0
condition|)
block|{
comment|// 0 means writer has closed dev and/or
comment|// file is at end.
operator|::
name|close
argument_list|(
name|dev
argument_list|)
expr_stmt|;
name|dev
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|updateBuffer
argument_list|(
name|read
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|possible
init|=
name|devSamples
argument_list|()
decl_stmt|;
if|if
condition|(
name|possible
operator|==
literal|0
condition|)
name|startSampleRunin
argument_list|()
expr_stmt|;
return|return
name|possible
return|;
block|}
protected|protected:
DECL|member|lasttime
name|time_t
name|lasttime
decl_stmt|;
block|}
class|;
end_class
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_SOUNDSERVER
end_ifndef
begin_constructor
DECL|function|QWSSoundServerSocket
name|QWSSoundServerSocket
operator|::
name|QWSSoundServerSocket
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWSServerSocket
argument_list|(
name|QT_VFB_SOUND_PIPE
argument_list|(
name|qws_display_id
argument_list|)
argument_list|,
name|parent
argument_list|)
block|{
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_ifdef
ifdef|#
directive|ifdef
name|QT3_SUPPORT
end_ifdef
begin_constructor
DECL|function|QWSSoundServerSocket
name|QWSSoundServerSocket
operator|::
name|QWSSoundServerSocket
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
member_init_list|:
name|QWSServerSocket
argument_list|(
name|QT_VFB_SOUND_PIPE
argument_list|(
name|qws_display_id
argument_list|)
argument_list|,
name|parent
argument_list|)
block|{
if|if
condition|(
name|name
condition|)
name|setObjectName
argument_list|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|newConnection
name|void
name|QWSSoundServerSocket
operator|::
name|newConnection
parameter_list|()
block|{
while|while
condition|(
name|QWS_SOCK_BASE
modifier|*
name|sock
init|=
name|nextPendingConnection
argument_list|()
condition|)
block|{
name|QWSSoundServerClient
modifier|*
name|client
init|=
operator|new
name|QWSSoundServerClient
argument_list|(
name|sock
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|play
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|playFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|play
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|QString
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|playFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|QString
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|playRaw
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|QString
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|playRawFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|QString
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|pause
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|pauseFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|stop
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|stopFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|playPriorityOnly
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|playPriorityOnly
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|stopAll
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|stopAll
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|resume
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|resumeFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|setSilent
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|setSilent
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|setMute
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|setMute
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|setVolume
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|setVolume
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|soundFileCompleted
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|client
argument_list|,
name|SLOT
argument_list|(
name|sendSoundCompleted
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|deviceReady
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|client
argument_list|,
name|SLOT
argument_list|(
name|sendDeviceReady
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|deviceError
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|client
argument_list|,
name|SLOT
argument_list|(
name|sendDeviceError
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|QWSSoundServerPrivate
class|class
name|QWSSoundServerPrivate
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|QWSSoundServerPrivate
name|QWSSoundServerPrivate
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|,
specifier|const
name|char
modifier|*
name|name
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{
name|timerId
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|name
condition|)
name|setObjectName
argument_list|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_SOUNDSERVER
name|server
operator|=
operator|new
name|QWSSoundServerSocket
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|playFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|playFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|playFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|QString
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|playFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|QString
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|playRawFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|QString
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|playRawFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|QString
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|pauseFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|pauseFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|stopFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|stopFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|stopAll
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|stopAll
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|playPriorityOnly
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|playPriorityOnly
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|resumeFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|resumeFile
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|setSilent
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|setSilent
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|setMute
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|setMute
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|setVolume
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|setVolume
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|soundFileCompleted
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|soundFileCompleted
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|deviceReady
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|deviceReady
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|deviceError
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|deviceError
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|silent
operator|=
literal|false
expr_stmt|;
name|fd
operator|=
operator|-
literal|1
expr_stmt|;
name|unwritten
operator|=
literal|0
expr_stmt|;
name|can_GETOSPACE
operator|=
literal|true
expr_stmt|;
block|}
DECL|function|~QWSSoundServerPrivate
name|~
name|QWSSoundServerPrivate
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|active
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|inactive
argument_list|)
expr_stmt|;
block|}
signals|signals:
name|void
name|soundFileCompleted
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|deviceReady
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|deviceError
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
public|public
name|slots
public|:
name|void
name|playRawFile
parameter_list|(
name|int
name|wid
parameter_list|,
name|int
name|sid
parameter_list|,
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
name|int
name|freq
parameter_list|,
name|int
name|channels
parameter_list|,
name|int
name|bitspersample
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
name|void
name|playFile
parameter_list|(
name|int
name|wid
parameter_list|,
name|int
name|sid
parameter_list|,
specifier|const
name|QString
modifier|&
name|filename
parameter_list|)
function_decl|;
name|void
name|playFile
parameter_list|(
name|int
name|wid
parameter_list|,
name|int
name|sid
parameter_list|,
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
name|int
name|v
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
name|void
name|checkPresetVolumes
parameter_list|(
name|int
name|wid
parameter_list|,
name|int
name|sid
parameter_list|,
name|QWSSoundServerProvider
modifier|*
name|p
parameter_list|)
function_decl|;
name|void
name|pauseFile
parameter_list|(
name|int
name|wid
parameter_list|,
name|int
name|sid
parameter_list|)
function_decl|;
name|void
name|resumeFile
parameter_list|(
name|int
name|wid
parameter_list|,
name|int
name|sid
parameter_list|)
function_decl|;
name|void
name|stopFile
parameter_list|(
name|int
name|wid
parameter_list|,
name|int
name|sid
parameter_list|)
function_decl|;
name|void
name|stopAll
parameter_list|(
name|int
name|wid
parameter_list|)
function_decl|;
name|void
name|setVolume
parameter_list|(
name|int
name|wid
parameter_list|,
name|int
name|sid
parameter_list|,
name|int
name|lv
parameter_list|,
name|int
name|rv
parameter_list|)
function_decl|;
name|void
name|setMute
parameter_list|(
name|int
name|wid
parameter_list|,
name|int
name|sid
parameter_list|,
name|bool
name|m
parameter_list|)
function_decl|;
name|void
name|playPriorityOnly
parameter_list|(
name|bool
name|p
parameter_list|)
function_decl|;
name|void
name|sendCompletedSignals
parameter_list|()
function_decl|;
name|void
name|feedDevice
parameter_list|(
name|int
name|fd
parameter_list|)
function_decl|;
name|void
name|setSilent
parameter_list|(
name|bool
name|enabled
parameter_list|)
function_decl|;
protected|protected:
name|void
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|event
parameter_list|)
function_decl|;
private|private:
name|int
name|openFile
parameter_list|(
name|int
name|wid
parameter_list|,
name|int
name|sid
parameter_list|,
specifier|const
name|QString
modifier|&
name|filename
parameter_list|)
function_decl|;
name|bool
name|openDevice
parameter_list|()
function_decl|;
DECL|function|closeDevice
name|void
name|closeDevice
parameter_list|()
block|{
if|if
condition|(
name|fd
operator|>=
literal|0
condition|)
block|{
operator|::
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
name|fd
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
DECL|member|active
name|QList
argument_list|<
name|QWSSoundServerProvider
modifier|*
argument_list|>
name|active
decl_stmt|;
DECL|member|inactive
name|QList
argument_list|<
name|QWSSoundServerProvider
modifier|*
argument_list|>
name|inactive
decl_stmt|;
DECL|struct|PresetVolume
struct|struct
name|PresetVolume
block|{
DECL|member|wid
name|int
name|wid
decl_stmt|;
DECL|member|sid
name|int
name|sid
decl_stmt|;
DECL|member|left
name|int
name|left
decl_stmt|;
DECL|member|right
name|int
name|right
decl_stmt|;
DECL|member|mute
name|bool
name|mute
decl_stmt|;
block|}
struct|;
DECL|member|volumes
name|QList
argument_list|<
name|PresetVolume
argument_list|>
name|volumes
decl_stmt|;
DECL|struct|CompletedInfo
struct|struct
name|CompletedInfo
block|{
DECL|function|CompletedInfo
name|CompletedInfo
parameter_list|( )
member_init_list|:
name|groupId
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|soundId
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|CompletedInfo
name|CompletedInfo
parameter_list|(
name|int
name|_groupId
parameter_list|,
name|int
name|_soundId
parameter_list|)
member_init_list|:
name|groupId
argument_list|(
name|_groupId
argument_list|)
member_init_list|,
name|soundId
argument_list|(
name|_soundId
argument_list|)
block|{ }
DECL|member|groupId
name|int
name|groupId
decl_stmt|;
DECL|member|soundId
name|int
name|soundId
decl_stmt|;
block|}
struct|;
DECL|member|completed
name|QList
argument_list|<
name|CompletedInfo
argument_list|>
name|completed
decl_stmt|;
DECL|member|silent
name|bool
name|silent
decl_stmt|;
DECL|member|fd
name|int
name|fd
decl_stmt|;
DECL|member|unwritten
name|int
name|unwritten
decl_stmt|;
DECL|member|timerId
name|int
name|timerId
decl_stmt|;
DECL|member|cursor
name|char
modifier|*
name|cursor
decl_stmt|;
DECL|member|data
name|short
name|data
index|[
name|sound_buffer_size
operator|*
literal|2
index|]
decl_stmt|;
DECL|member|can_GETOSPACE
name|bool
name|can_GETOSPACE
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_SOUNDSERVER
DECL|member|server
name|QWSSoundServerSocket
modifier|*
name|server
decl_stmt|;
endif|#
directive|endif
block|}
class|;
end_class
begin_function
DECL|function|setSilent
name|void
name|QWSSoundServerPrivate
operator|::
name|setSilent
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
comment|// Close output device
name|closeDevice
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|unwritten
operator|&&
operator|!
name|active
operator|.
name|count
argument_list|()
condition|)
block|{
name|sendCompletedSignals
argument_list|()
expr_stmt|;
block|}
comment|// Stop processing audio
name|killTimer
argument_list|(
name|timerId
argument_list|)
expr_stmt|;
name|silent
operator|=
name|enabled
expr_stmt|;
comment|// If audio remaining, open output device and continue processing
if|if
condition|(
name|unwritten
operator|||
name|active
operator|.
name|count
argument_list|()
condition|)
block|{
name|openDevice
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|timerEvent
name|void
name|QWSSoundServerPrivate
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|event
parameter_list|)
block|{
comment|// qDebug("QSS timer event");
if|if
condition|(
name|event
operator|->
name|timerId
argument_list|()
operator|==
name|timerId
condition|)
block|{
if|if
condition|(
name|fd
operator|>=
literal|0
condition|)
name|feedDevice
argument_list|(
name|fd
argument_list|)
expr_stmt|;
if|if
condition|(
name|fd
operator|<
literal|0
condition|)
block|{
name|killTimer
argument_list|(
name|timerId
argument_list|)
expr_stmt|;
name|timerId
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|playRawFile
name|void
name|QWSSoundServerPrivate
operator|::
name|playRawFile
parameter_list|(
name|int
name|wid
parameter_list|,
name|int
name|sid
parameter_list|,
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
name|int
name|freq
parameter_list|,
name|int
name|channels
parameter_list|,
name|int
name|bitspersample
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_QWS_SOUNDSERVER
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|int
name|f
init|=
name|openFile
argument_list|(
name|wid
argument_list|,
name|sid
argument_list|,
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
condition|)
block|{
name|QWSSoundServerStream
modifier|*
name|b
init|=
operator|new
name|QWSSoundServerStream
argument_list|(
name|f
argument_list|,
name|channels
argument_list|,
name|freq
argument_list|,
name|bitspersample
argument_list|,
name|wid
argument_list|,
name|sid
argument_list|)
decl_stmt|;
comment|// check preset volumes.
name|checkPresetVolumes
argument_list|(
name|wid
argument_list|,
name|sid
argument_list|,
name|b
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_SOUNDSERVER
name|b
operator|->
name|setPriority
argument_list|(
operator|(
name|flags
operator|&
name|QWSSoundClient
operator|::
name|Priority
operator|)
operator|==
name|QWSSoundClient
operator|::
name|Priority
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|active
operator|.
name|append
argument_list|(
name|b
argument_list|)
expr_stmt|;
emit|emit
name|deviceReady
argument_list|(
name|wid
argument_list|,
name|sid
argument_list|)
emit|;
block|}
block|}
end_function
begin_function
DECL|function|playFile
name|void
name|QWSSoundServerPrivate
operator|::
name|playFile
parameter_list|(
name|int
name|wid
parameter_list|,
name|int
name|sid
parameter_list|,
specifier|const
name|QString
modifier|&
name|filename
parameter_list|)
block|{
name|int
name|f
init|=
name|openFile
argument_list|(
name|wid
argument_list|,
name|sid
argument_list|,
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
condition|)
block|{
name|QWSSoundServerProvider
modifier|*
name|b
init|=
operator|new
name|QWSSoundServerBucket
argument_list|(
name|f
argument_list|,
name|wid
argument_list|,
name|sid
argument_list|)
decl_stmt|;
name|checkPresetVolumes
argument_list|(
name|wid
argument_list|,
name|sid
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|active
operator|.
name|append
argument_list|(
name|b
argument_list|)
expr_stmt|;
emit|emit
name|deviceReady
argument_list|(
name|wid
argument_list|,
name|sid
argument_list|)
emit|;
block|}
block|}
end_function
begin_function
DECL|function|playFile
name|void
name|QWSSoundServerPrivate
operator|::
name|playFile
parameter_list|(
name|int
name|wid
parameter_list|,
name|int
name|sid
parameter_list|,
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
name|int
name|v
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_QWS_SOUNDSERVER
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|int
name|f
init|=
name|openFile
argument_list|(
name|wid
argument_list|,
name|sid
argument_list|,
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
condition|)
block|{
name|QWSSoundServerProvider
modifier|*
name|b
init|=
operator|new
name|QWSSoundServerBucket
argument_list|(
name|f
argument_list|,
name|wid
argument_list|,
name|sid
argument_list|)
decl_stmt|;
name|checkPresetVolumes
argument_list|(
name|wid
argument_list|,
name|sid
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|b
operator|->
name|setVolume
argument_list|(
name|v
argument_list|,
name|v
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_SOUNDSERVER
name|b
operator|->
name|setPriority
argument_list|(
operator|(
name|flags
operator|&
name|QWSSoundClient
operator|::
name|Priority
operator|)
operator|==
name|QWSSoundClient
operator|::
name|Priority
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|active
operator|.
name|append
argument_list|(
name|b
argument_list|)
expr_stmt|;
emit|emit
name|deviceReady
argument_list|(
name|wid
argument_list|,
name|sid
argument_list|)
emit|;
block|}
block|}
end_function
begin_function
DECL|function|checkPresetVolumes
name|void
name|QWSSoundServerPrivate
operator|::
name|checkPresetVolumes
parameter_list|(
name|int
name|wid
parameter_list|,
name|int
name|sid
parameter_list|,
name|QWSSoundServerProvider
modifier|*
name|p
parameter_list|)
block|{
name|QList
argument_list|<
name|PresetVolume
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|volumes
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|volumes
operator|.
name|end
argument_list|()
condition|)
block|{
name|PresetVolume
name|v
init|=
operator|*
name|it
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|wid
operator|==
name|wid
operator|&&
name|v
operator|.
name|sid
operator|==
name|sid
condition|)
block|{
name|p
operator|->
name|setVolume
argument_list|(
name|v
operator|.
name|left
argument_list|,
name|v
operator|.
name|right
argument_list|)
expr_stmt|;
name|p
operator|->
name|setMute
argument_list|(
name|v
operator|.
name|mute
argument_list|)
expr_stmt|;
name|it
operator|=
name|volumes
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
operator|++
name|it
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|pauseFile
name|void
name|QWSSoundServerPrivate
operator|::
name|pauseFile
parameter_list|(
name|int
name|wid
parameter_list|,
name|int
name|sid
parameter_list|)
block|{
name|QWSSoundServerProvider
modifier|*
name|bucket
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|active
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|bucket
operator|=
name|active
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|bucket
operator|->
name|equal
argument_list|(
name|wid
argument_list|,
name|sid
argument_list|)
condition|)
block|{
comment|// found bucket....
name|active
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|inactive
operator|.
name|append
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
end_function
begin_function
DECL|function|resumeFile
name|void
name|QWSSoundServerPrivate
operator|::
name|resumeFile
parameter_list|(
name|int
name|wid
parameter_list|,
name|int
name|sid
parameter_list|)
block|{
name|QWSSoundServerProvider
modifier|*
name|bucket
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inactive
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|bucket
operator|=
name|inactive
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|bucket
operator|->
name|equal
argument_list|(
name|wid
argument_list|,
name|sid
argument_list|)
condition|)
block|{
comment|// found bucket....
name|inactive
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|active
operator|.
name|append
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
end_function
begin_function
DECL|function|stopFile
name|void
name|QWSSoundServerPrivate
operator|::
name|stopFile
parameter_list|(
name|int
name|wid
parameter_list|,
name|int
name|sid
parameter_list|)
block|{
name|QWSSoundServerProvider
modifier|*
name|bucket
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|active
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|bucket
operator|=
name|active
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|bucket
operator|->
name|equal
argument_list|(
name|wid
argument_list|,
name|sid
argument_list|)
condition|)
block|{
name|active
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|delete
name|bucket
expr_stmt|;
return|return;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inactive
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|bucket
operator|=
name|inactive
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|bucket
operator|->
name|equal
argument_list|(
name|wid
argument_list|,
name|sid
argument_list|)
condition|)
block|{
name|inactive
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|delete
name|bucket
expr_stmt|;
return|return;
block|}
block|}
block|}
end_function
begin_function
DECL|function|stopAll
name|void
name|QWSSoundServerPrivate
operator|::
name|stopAll
parameter_list|(
name|int
name|wid
parameter_list|)
block|{
name|QWSSoundServerProvider
modifier|*
name|bucket
decl_stmt|;
if|if
condition|(
operator|!
name|active
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|QWSSoundServerProvider
modifier|*
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|active
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|active
operator|.
name|end
argument_list|()
condition|)
block|{
name|bucket
operator|=
operator|*
name|it
expr_stmt|;
if|if
condition|(
name|bucket
operator|->
name|groupId
argument_list|()
operator|==
name|wid
condition|)
block|{
name|it
operator|=
name|active
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
operator|delete
name|bucket
expr_stmt|;
block|}
else|else
block|{
operator|++
name|it
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|inactive
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|QWSSoundServerProvider
modifier|*
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|inactive
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|inactive
operator|.
name|end
argument_list|()
condition|)
block|{
name|bucket
operator|=
operator|*
name|it
expr_stmt|;
if|if
condition|(
name|bucket
operator|->
name|groupId
argument_list|()
operator|==
name|wid
condition|)
block|{
name|it
operator|=
name|inactive
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
operator|delete
name|bucket
expr_stmt|;
block|}
else|else
block|{
operator|++
name|it
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|setVolume
name|void
name|QWSSoundServerPrivate
operator|::
name|setVolume
parameter_list|(
name|int
name|wid
parameter_list|,
name|int
name|sid
parameter_list|,
name|int
name|lv
parameter_list|,
name|int
name|rv
parameter_list|)
block|{
name|QWSSoundServerProvider
modifier|*
name|bucket
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|active
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|bucket
operator|=
name|active
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|bucket
operator|->
name|equal
argument_list|(
name|wid
argument_list|,
name|sid
argument_list|)
condition|)
block|{
name|bucket
operator|->
name|setVolume
argument_list|(
name|lv
argument_list|,
name|rv
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// If gotten here, then it means wid/sid wasn't set up yet.
comment|// first find and remove current preset volumes, then add this one.
name|QList
argument_list|<
name|PresetVolume
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|volumes
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|volumes
operator|.
name|end
argument_list|()
condition|)
block|{
name|PresetVolume
name|v
init|=
operator|*
name|it
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|wid
operator|==
name|wid
operator|&&
name|v
operator|.
name|sid
operator|==
name|sid
condition|)
name|it
operator|=
name|volumes
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
else|else
operator|++
name|it
expr_stmt|;
block|}
comment|// and then add this volume
name|PresetVolume
name|nv
decl_stmt|;
name|nv
operator|.
name|wid
operator|=
name|wid
expr_stmt|;
name|nv
operator|.
name|sid
operator|=
name|sid
expr_stmt|;
name|nv
operator|.
name|left
operator|=
name|lv
expr_stmt|;
name|nv
operator|.
name|right
operator|=
name|rv
expr_stmt|;
name|nv
operator|.
name|mute
operator|=
literal|false
expr_stmt|;
name|volumes
operator|.
name|append
argument_list|(
name|nv
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setMute
name|void
name|QWSSoundServerPrivate
operator|::
name|setMute
parameter_list|(
name|int
name|wid
parameter_list|,
name|int
name|sid
parameter_list|,
name|bool
name|m
parameter_list|)
block|{
name|QWSSoundServerProvider
modifier|*
name|bucket
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|active
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|bucket
operator|=
name|active
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|bucket
operator|->
name|equal
argument_list|(
name|wid
argument_list|,
name|sid
argument_list|)
condition|)
block|{
name|bucket
operator|->
name|setMute
argument_list|(
name|m
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// if gotten here then setting is being applied before item
comment|// is created.
name|QList
argument_list|<
name|PresetVolume
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|volumes
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|volumes
operator|.
name|end
argument_list|()
condition|)
block|{
name|PresetVolume
name|v
init|=
operator|*
name|it
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|wid
operator|==
name|wid
operator|&&
name|v
operator|.
name|sid
operator|==
name|sid
condition|)
block|{
operator|(
operator|*
name|it
operator|)
operator|.
name|mute
operator|=
name|m
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|m
condition|)
block|{
name|PresetVolume
name|nv
decl_stmt|;
name|nv
operator|.
name|wid
operator|=
name|wid
expr_stmt|;
name|nv
operator|.
name|sid
operator|=
name|sid
expr_stmt|;
name|nv
operator|.
name|left
operator|=
name|maxVolume
operator|>>
literal|1
expr_stmt|;
name|nv
operator|.
name|right
operator|=
name|maxVolume
operator|>>
literal|1
expr_stmt|;
name|nv
operator|.
name|mute
operator|=
literal|true
expr_stmt|;
name|volumes
operator|.
name|append
argument_list|(
name|nv
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|playPriorityOnly
name|void
name|QWSSoundServerPrivate
operator|::
name|playPriorityOnly
parameter_list|(
name|bool
name|p
parameter_list|)
block|{
name|QWSSoundServerProvider
operator|::
name|setPlayPriorityOnly
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendCompletedSignals
name|void
name|QWSSoundServerPrivate
operator|::
name|sendCompletedSignals
parameter_list|()
block|{
while|while
condition|(
operator|!
name|completed
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
emit|emit
name|soundFileCompleted
argument_list|(
operator|(
operator|*
name|completed
operator|.
name|begin
argument_list|()
operator|)
operator|.
name|groupId
argument_list|,
operator|(
operator|*
name|completed
operator|.
name|begin
argument_list|()
operator|)
operator|.
name|soundId
argument_list|)
emit|;
name|completed
operator|.
name|erase
argument_list|(
name|completed
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|openFile
name|int
name|QWSSoundServerPrivate
operator|::
name|openFile
parameter_list|(
name|int
name|wid
parameter_list|,
name|int
name|sid
parameter_list|,
specifier|const
name|QString
modifier|&
name|filename
parameter_list|)
block|{
name|stopFile
argument_list|(
name|wid
argument_list|,
name|sid
argument_list|)
expr_stmt|;
comment|// close and re-open.
name|int
name|f
init|=
name|QT_OPEN
argument_list|(
name|QFile
operator|::
name|encodeName
argument_list|(
name|filename
argument_list|)
argument_list|,
name|O_RDONLY
operator||
name|O_NONBLOCK
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
operator|-
literal|1
condition|)
block|{
comment|// XXX check ferror, check reason.
name|qDebug
argument_list|(
literal|"Failed opening \"%s\""
argument_list|,
name|filename
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_SOUNDSERVER
emit|emit
name|deviceError
argument_list|(
name|wid
argument_list|,
name|sid
argument_list|,
operator|(
name|int
operator|)
name|QWSSoundClient
operator|::
name|ErrOpeningFile
argument_list|)
emit|;
endif|#
directive|endif
block|}
elseif|else
if|if
condition|(
name|openDevice
argument_list|()
condition|)
block|{
return|return
name|f
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_QWS_SOUNDSERVER
emit|emit
name|deviceError
argument_list|(
name|wid
argument_list|,
name|sid
argument_list|,
operator|(
name|int
operator|)
name|QWSSoundClient
operator|::
name|ErrOpeningAudioDevice
argument_list|)
emit|;
endif|#
directive|endif
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|openDevice
name|bool
name|QWSSoundServerPrivate
operator|::
name|openDevice
parameter_list|()
block|{
if|if
condition|(
name|fd
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|silent
condition|)
block|{
name|fd
operator|=
name|QT_OPEN
argument_list|(
literal|"/dev/null"
argument_list|,
name|O_WRONLY
argument_list|)
expr_stmt|;
comment|// Emulate write to audio device
name|int
name|delay
init|=
literal|1000
operator|*
operator|(
name|sound_buffer_size
operator|>>
operator|(
name|sound_stereo
operator|+
name|sound_16bit
operator|)
operator|)
operator|/
name|sound_speed
operator|/
literal|2
decl_stmt|;
name|timerId
operator|=
name|startTimer
argument_list|(
name|delay
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|//
comment|// Don't block open right away.
comment|//
name|bool
name|openOkay
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|fd
operator|=
name|QT_OPEN
argument_list|(
literal|"/dev/dsp"
argument_list|,
name|O_WRONLY
operator||
name|O_NONBLOCK
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|int
name|flags
init|=
name|fcntl
argument_list|(
name|fd
argument_list|,
name|F_GETFL
argument_list|)
decl_stmt|;
name|flags
operator|&=
operator|~
name|O_NONBLOCK
expr_stmt|;
name|openOkay
operator|=
operator|(
name|fcntl
argument_list|(
name|fd
argument_list|,
name|F_SETFL
argument_list|,
name|flags
argument_list|)
operator|==
literal|0
operator|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|openOkay
condition|)
block|{
name|qDebug
argument_list|(
literal|"Failed opening audio device"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Setup soundcard at 16 bit mono
name|int
name|v
decl_stmt|;
comment|//v=0x00010000+sound_fragment_size;
comment|// um the media player did this instead.
name|v
operator|=
literal|0x10000
operator|*
literal|4
operator|+
name|sound_fragment_size
expr_stmt|;
if|if
condition|(
name|ioctl
argument_list|(
name|fd
argument_list|,
name|SNDCTL_DSP_SETFRAGMENT
argument_list|,
operator|&
name|v
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"Could not set fragments to %08x"
argument_list|,
name|v
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_QWS_SOUND_16BIT
comment|//
comment|//  Use native endian
comment|//  Since we have manipulated the data volume the data
comment|//  is now in native format, even though its stored
comment|//  as little endian in the WAV file
comment|//
name|v
operator|=
name|AFMT_S16_NE
expr_stmt|;
if|if
condition|(
name|ioctl
argument_list|(
name|fd
argument_list|,
name|SNDCTL_DSP_SETFMT
argument_list|,
operator|&
name|v
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"Could not set format %d"
argument_list|,
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|AFMT_S16_NE
operator|!=
name|v
condition|)
name|qDebug
argument_list|(
literal|"Want format %d got %d"
argument_list|,
name|AFMT_S16_LE
argument_list|,
name|v
argument_list|)
expr_stmt|;
else|#
directive|else
name|v
operator|=
name|AFMT_U8
expr_stmt|;
if|if
condition|(
name|ioctl
argument_list|(
name|fd
argument_list|,
name|SNDCTL_DSP_SETFMT
argument_list|,
operator|&
name|v
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"Could not set format %d"
argument_list|,
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|AFMT_U8
operator|!=
name|v
condition|)
name|qDebug
argument_list|(
literal|"Want format %d got %d"
argument_list|,
name|AFMT_U8
argument_list|,
name|v
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|v
operator|=
name|sound_stereo
expr_stmt|;
if|if
condition|(
name|ioctl
argument_list|(
name|fd
argument_list|,
name|SNDCTL_DSP_STEREO
argument_list|,
operator|&
name|v
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"Could not set stereo %d"
argument_list|,
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|sound_stereo
operator|!=
name|v
condition|)
name|qDebug
argument_list|(
literal|"Want stereo %d got %d"
argument_list|,
name|sound_stereo
argument_list|,
name|v
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_QWS_SOUND_STEREO
name|sound_stereo
operator|=
name|v
expr_stmt|;
endif|#
directive|endif
name|v
operator|=
name|sound_speed
expr_stmt|;
if|if
condition|(
name|ioctl
argument_list|(
name|fd
argument_list|,
name|SNDCTL_DSP_SPEED
argument_list|,
operator|&
name|sound_speed
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"Could not set speed %d"
argument_list|,
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|!=
name|sound_speed
condition|)
name|qDebug
argument_list|(
literal|"Want speed %d got %d"
argument_list|,
name|v
argument_list|,
name|sound_speed
argument_list|)
expr_stmt|;
name|int
name|delay
init|=
literal|1000
operator|*
operator|(
name|sound_buffer_size
operator|>>
operator|(
name|sound_stereo
operator|+
name|sound_16bit
operator|)
operator|)
operator|/
name|sound_speed
operator|/
literal|2
decl_stmt|;
comment|// qDebug("QSS delay: %d", delay);
name|timerId
operator|=
name|startTimer
argument_list|(
name|delay
argument_list|)
expr_stmt|;
comment|//
comment|// Check system volume
comment|//
name|int
name|mixerHandle
init|=
name|QT_OPEN
argument_list|(
literal|"/dev/mixer"
argument_list|,
name|O_RDWR
operator||
name|O_NONBLOCK
argument_list|)
decl_stmt|;
if|if
condition|(
name|mixerHandle
operator|>=
literal|0
condition|)
block|{
name|int
name|volume
decl_stmt|;
name|ioctl
argument_list|(
name|mixerHandle
argument_list|,
name|MIXER_READ
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|&
name|volume
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|mixerHandle
argument_list|)
expr_stmt|;
if|if
condition|(
name|volume
operator|<
literal|1
operator|<<
operator|(
name|sound_stereo
operator|+
name|sound_16bit
operator|)
condition|)
name|qDebug
argument_list|(
literal|"Want sound at %d got %d"
argument_list|,
literal|1
operator|<<
operator|(
name|sound_stereo
operator|+
name|sound_16bit
operator|)
argument_list|,
name|volume
argument_list|)
expr_stmt|;
block|}
else|else
name|qDebug
argument_list|(
literal|"get volume of audio device failed"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|feedDevice
name|void
name|QWSSoundServerPrivate
operator|::
name|feedDevice
parameter_list|(
name|int
name|fd
parameter_list|)
block|{
if|if
condition|(
operator|!
name|unwritten
operator|&&
name|active
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|closeDevice
argument_list|()
expr_stmt|;
name|sendCompletedSignals
argument_list|()
expr_stmt|;
return|return;
block|}
else|else
block|{
name|sendCompletedSignals
argument_list|()
expr_stmt|;
block|}
name|QWSSoundServerProvider
modifier|*
name|bucket
decl_stmt|;
comment|// find out how much audio is possible
name|int
name|available
init|=
name|sound_buffer_size
decl_stmt|;
name|QList
argument_list|<
name|QWSSoundServerProvider
modifier|*
argument_list|>
name|running
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|active
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|bucket
operator|=
name|active
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|int
name|ready
init|=
name|bucket
operator|->
name|readySamples
argument_list|(
name|available
argument_list|)
decl_stmt|;
if|if
condition|(
name|ready
operator|>
literal|0
condition|)
block|{
name|available
operator|=
name|qMin
argument_list|(
name|available
argument_list|,
name|ready
argument_list|)
expr_stmt|;
name|running
operator|.
name|append
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
block|}
block|}
name|audio_buf_info
name|info
decl_stmt|;
if|if
condition|(
name|can_GETOSPACE
operator|&&
name|ioctl
argument_list|(
name|fd
argument_list|,
name|SNDCTL_DSP_GETOSPACE
argument_list|,
operator|&
name|info
argument_list|)
condition|)
block|{
name|can_GETOSPACE
operator|=
literal|false
expr_stmt|;
name|fcntl
argument_list|(
name|fd
argument_list|,
name|F_SETFL
argument_list|,
name|O_NONBLOCK
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|can_GETOSPACE
condition|)
name|info
operator|.
name|fragments
operator|=
literal|4
expr_stmt|;
comment|// #### configurable?
if|if
condition|(
name|info
operator|.
name|fragments
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|unwritten
condition|)
block|{
name|int
name|left
index|[
name|sound_buffer_size
index|]
decl_stmt|;
name|memset
argument_list|(
name|left
argument_list|,
literal|0
argument_list|,
name|available
operator|*
sizeof|sizeof
argument_list|(
name|int
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|right
index|[
name|sound_buffer_size
index|]
decl_stmt|;
if|if
condition|(
name|sound_stereo
condition|)
name|memset
argument_list|(
name|right
argument_list|,
literal|0
argument_list|,
name|available
operator|*
sizeof|sizeof
argument_list|(
name|int
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|running
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// should do volume mod here in regards to each bucket to avoid flattened/bad peaks.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|running
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|bucket
operator|=
name|running
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|int
name|unused
init|=
name|bucket
operator|->
name|add
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
name|available
argument_list|)
decl_stmt|;
if|if
condition|(
name|unused
operator|>
literal|0
condition|)
block|{
comment|// this error is quite serious, as
comment|// it will really screw up mixing.
name|qDebug
argument_list|(
literal|"provider lied about samples ready"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sound_16bit
condition|)
block|{
name|short
modifier|*
name|d
init|=
operator|(
name|short
operator|*
operator|)
name|data
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|available
condition|;
name|i
operator|++
control|)
block|{
operator|*
name|d
operator|++
operator|=
operator|(
name|short
operator|)
name|qMax
argument_list|(
name|qMin
argument_list|(
name|left
index|[
name|i
index|]
argument_list|,
literal|32767
argument_list|)
argument_list|,
operator|-
literal|32768
argument_list|)
expr_stmt|;
if|if
condition|(
name|sound_stereo
condition|)
operator|*
name|d
operator|++
operator|=
operator|(
name|short
operator|)
name|qMax
argument_list|(
name|qMin
argument_list|(
name|right
index|[
name|i
index|]
argument_list|,
literal|32767
argument_list|)
argument_list|,
operator|-
literal|32768
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|signed
name|char
modifier|*
name|d
init|=
operator|(
name|signed
name|char
operator|*
operator|)
name|data
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|available
condition|;
name|i
operator|++
control|)
block|{
operator|*
name|d
operator|++
operator|=
operator|(
name|signed
name|char
operator|)
name|qMax
argument_list|(
name|qMin
argument_list|(
name|left
index|[
name|i
index|]
operator|/
literal|256
argument_list|,
literal|127
argument_list|)
argument_list|,
operator|-
literal|128
argument_list|)
operator|+
literal|128
expr_stmt|;
if|if
condition|(
name|sound_stereo
condition|)
operator|*
name|d
operator|++
operator|=
operator|(
name|signed
name|char
operator|)
name|qMax
argument_list|(
name|qMin
argument_list|(
name|right
index|[
name|i
index|]
operator|/
literal|256
argument_list|,
literal|127
argument_list|)
argument_list|,
operator|-
literal|128
argument_list|)
operator|+
literal|128
expr_stmt|;
block|}
block|}
name|unwritten
operator|=
name|available
operator|*
operator|(
name|sound_16bit
operator|+
literal|1
operator|)
operator|*
operator|(
name|sound_stereo
operator|+
literal|1
operator|)
expr_stmt|;
name|cursor
operator|=
operator|(
name|char
operator|*
operator|)
name|data
expr_stmt|;
block|}
block|}
comment|// sound open, but nothing written.  Should clear the buffer.
name|int
name|w
decl_stmt|;
if|if
condition|(
name|unwritten
condition|)
block|{
name|w
operator|=
operator|::
name|write
argument_list|(
name|fd
argument_list|,
name|cursor
argument_list|,
name|unwritten
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|can_GETOSPACE
condition|)
return|return;
name|w
operator|=
literal|0
expr_stmt|;
block|}
name|cursor
operator|+=
name|w
expr_stmt|;
name|unwritten
operator|-=
name|w
expr_stmt|;
block|}
else|else
block|{
comment|// write some zeros to clear the buffer?
if|if
condition|(
operator|!
name|zeroMem
condition|)
name|zeroMem
operator|=
operator|(
name|char
operator|*
operator|)
name|calloc
argument_list|(
name|sound_buffer_size
argument_list|,
sizeof|sizeof
argument_list|(
name|char
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|=
operator|::
name|write
argument_list|(
name|fd
argument_list|,
name|zeroMem
argument_list|,
name|sound_buffer_size
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|<
literal|0
condition|)
name|w
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|QList
argument_list|<
name|QWSSoundServerProvider
modifier|*
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|active
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|active
operator|.
name|end
argument_list|()
condition|)
block|{
name|bucket
operator|=
operator|*
name|it
expr_stmt|;
if|if
condition|(
name|bucket
operator|->
name|finished
argument_list|()
condition|)
block|{
name|completed
operator|.
name|append
argument_list|(
name|CompletedInfo
argument_list|(
name|bucket
operator|->
name|groupId
argument_list|()
argument_list|,
name|bucket
operator|->
name|soundId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|it
operator|=
name|active
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
operator|delete
name|bucket
expr_stmt|;
block|}
else|else
block|{
operator|++
name|it
expr_stmt|;
block|}
block|}
block|}
end_function
begin_constructor
DECL|function|QWSSoundServer
name|QWSSoundServer
operator|::
name|QWSSoundServer
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{
name|d
operator|=
operator|new
name|QWSSoundServerPrivate
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
argument_list|,
name|SIGNAL
argument_list|(
name|soundFileCompleted
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|translateSoundCompleted
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|playFile
name|void
name|QWSSoundServer
operator|::
name|playFile
parameter_list|(
name|int
name|sid
parameter_list|,
specifier|const
name|QString
modifier|&
name|filename
parameter_list|)
block|{
comment|//wid == 0, as it is the server initiating rather than a client
comment|// if wid was passable, would accidently collide with server
comment|// sockect's wids.
name|d
operator|->
name|playFile
argument_list|(
literal|0
argument_list|,
name|sid
argument_list|,
name|filename
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pauseFile
name|void
name|QWSSoundServer
operator|::
name|pauseFile
parameter_list|(
name|int
name|sid
parameter_list|)
block|{
name|d
operator|->
name|pauseFile
argument_list|(
literal|0
argument_list|,
name|sid
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stopFile
name|void
name|QWSSoundServer
operator|::
name|stopFile
parameter_list|(
name|int
name|sid
parameter_list|)
block|{
name|d
operator|->
name|stopFile
argument_list|(
literal|0
argument_list|,
name|sid
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resumeFile
name|void
name|QWSSoundServer
operator|::
name|resumeFile
parameter_list|(
name|int
name|sid
parameter_list|)
block|{
name|d
operator|->
name|resumeFile
argument_list|(
literal|0
argument_list|,
name|sid
argument_list|)
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~QWSSoundServer
name|QWSSoundServer
operator|::
name|~
name|QWSSoundServer
parameter_list|()
block|{
name|d
operator|->
name|stopAll
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|translateSoundCompleted
name|void
name|QWSSoundServer
operator|::
name|translateSoundCompleted
parameter_list|(
name|int
parameter_list|,
name|int
name|sid
parameter_list|)
block|{
emit|emit
name|soundCompleted
argument_list|(
name|sid
argument_list|)
emit|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_SOUNDSERVER
end_ifndef
begin_constructor
DECL|function|QWSSoundClient
name|QWSSoundClient
operator|::
name|QWSSoundClient
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWSSocket
argument_list|(
name|parent
argument_list|)
block|{
name|connectToLocalFile
argument_list|(
name|QT_VFB_SOUND_PIPE
argument_list|(
name|qws_display_id
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|tryReadCommand
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
argument_list|()
operator|==
name|QWS_SOCK_BASE
operator|::
name|ConnectedState
condition|)
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|1
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|1
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|emitConnectionRefused
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWSSoundClient
name|QWSSoundClient
operator|::
name|~
name|QWSSoundClient
parameter_list|( )
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|reconnect
name|void
name|QWSSoundClient
operator|::
name|reconnect
parameter_list|()
block|{
name|connectToLocalFile
argument_list|(
name|QT_VFB_SOUND_PIPE
argument_list|(
name|qws_display_id
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
argument_list|()
operator|==
name|QWS_SOCK_BASE
operator|::
name|ConnectedState
condition|)
emit|emit
name|connected
argument_list|()
emit|;
else|else
emit|emit
name|error
argument_list|(
name|QTcpSocket
operator|::
name|ConnectionRefusedError
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|sendServerMessage
name|void
name|QWSSoundClient
operator|::
name|sendServerMessage
parameter_list|(
name|QString
name|msg
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TEXTCODEC
name|QByteArray
name|u
init|=
name|msg
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
else|#
directive|else
name|QByteArray
name|u
init|=
name|msg
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
endif|#
directive|endif
name|write
argument_list|(
name|u
operator|.
name|data
argument_list|()
argument_list|,
name|u
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|flush
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|play
name|void
name|QWSSoundClient
operator|::
name|play
parameter_list|(
name|int
name|id
parameter_list|,
specifier|const
name|QString
modifier|&
name|filename
parameter_list|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|sendServerMessage
argument_list|(
name|QLatin1String
argument_list|(
literal|"PLAY "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|id
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|fi
operator|.
name|absoluteFilePath
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|play
name|void
name|QWSSoundClient
operator|::
name|play
parameter_list|(
name|int
name|id
parameter_list|,
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
name|int
name|volume
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|sendServerMessage
argument_list|(
name|QLatin1String
argument_list|(
literal|"PLAYEXTEND "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|id
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|volume
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|flags
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|fi
operator|.
name|absoluteFilePath
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pause
name|void
name|QWSSoundClient
operator|::
name|pause
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|sendServerMessage
argument_list|(
name|QLatin1String
argument_list|(
literal|"PAUSE "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|id
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stop
name|void
name|QWSSoundClient
operator|::
name|stop
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|sendServerMessage
argument_list|(
name|QLatin1String
argument_list|(
literal|"STOP "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|id
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resume
name|void
name|QWSSoundClient
operator|::
name|resume
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|sendServerMessage
argument_list|(
name|QLatin1String
argument_list|(
literal|"RESUME "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|id
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|playRaw
name|void
name|QWSSoundClient
operator|::
name|playRaw
parameter_list|(
name|int
name|id
parameter_list|,
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
name|int
name|freq
parameter_list|,
name|int
name|chs
parameter_list|,
name|int
name|bitspersample
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|sendServerMessage
argument_list|(
name|QLatin1String
argument_list|(
literal|"PLAYRAW "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|id
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|chs
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|freq
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|bitspersample
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|flags
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|fi
operator|.
name|absoluteFilePath
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setMute
name|void
name|QWSSoundClient
operator|::
name|setMute
parameter_list|(
name|int
name|id
parameter_list|,
name|bool
name|m
parameter_list|)
block|{
name|sendServerMessage
argument_list|(
name|QLatin1String
argument_list|(
name|m
condition|?
literal|"MUTE "
else|:
literal|"UNMUTE "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|id
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setVolume
name|void
name|QWSSoundClient
operator|::
name|setVolume
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|leftVol
parameter_list|,
name|int
name|rightVol
parameter_list|)
block|{
name|sendServerMessage
argument_list|(
name|QLatin1String
argument_list|(
literal|"SETVOLUME "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|id
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|leftVol
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|rightVol
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|playPriorityOnly
name|void
name|QWSSoundClient
operator|::
name|playPriorityOnly
parameter_list|(
name|bool
name|pri
parameter_list|)
block|{
name|sendServerMessage
argument_list|(
name|QLatin1String
argument_list|(
literal|"PRIORITYONLY "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|pri
condition|?
literal|1
else|:
literal|0
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSilent
name|void
name|QWSSoundClient
operator|::
name|setSilent
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|sendServerMessage
argument_list|(
name|QLatin1String
argument_list|(
literal|"SILENT "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|enable
condition|?
literal|1
else|:
literal|0
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tryReadCommand
name|void
name|QWSSoundClient
operator|::
name|tryReadCommand
parameter_list|()
block|{
while|while
condition|(
name|canReadLine
argument_list|()
condition|)
block|{
name|QString
name|l
init|=
name|QString
operator|::
name|fromAscii
argument_list|(
name|readLine
argument_list|()
argument_list|)
decl_stmt|;
name|l
operator|.
name|truncate
argument_list|(
name|l
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// chomp
name|QStringList
name|token
init|=
name|l
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
index|[
literal|0
index|]
operator|==
name|QLatin1String
argument_list|(
literal|"SOUNDCOMPLETED"
argument_list|)
condition|)
block|{
emit|emit
name|soundCompleted
argument_list|(
name|token
index|[
literal|1
index|]
operator|.
name|toInt
argument_list|()
argument_list|)
emit|;
block|}
elseif|else
if|if
condition|(
name|token
index|[
literal|0
index|]
operator|==
name|QLatin1String
argument_list|(
literal|"DEVICEREADY"
argument_list|)
condition|)
block|{
emit|emit
name|deviceReady
argument_list|(
name|token
index|[
literal|1
index|]
operator|.
name|toInt
argument_list|()
argument_list|)
emit|;
block|}
elseif|else
if|if
condition|(
name|token
index|[
literal|0
index|]
operator|==
name|QLatin1String
argument_list|(
literal|"DEVICEERROR"
argument_list|)
condition|)
block|{
emit|emit
name|deviceError
argument_list|(
name|token
index|[
literal|1
index|]
operator|.
name|toInt
argument_list|()
argument_list|,
operator|(
name|DeviceErrors
operator|)
name|token
index|[
literal|2
index|]
operator|.
name|toInt
argument_list|()
argument_list|)
emit|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|emitConnectionRefused
name|void
name|QWSSoundClient
operator|::
name|emitConnectionRefused
parameter_list|()
block|{
emit|emit
name|error
argument_list|(
name|QTcpSocket
operator|::
name|ConnectionRefusedError
argument_list|)
emit|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qsoundqss_qws.moc"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SOUND
end_comment
end_unit
