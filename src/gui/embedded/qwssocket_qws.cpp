begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qwssocket_qws.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
end_ifndef
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<netdb.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<sys/file.h>
end_include
begin_include
include|#
directive|include
file|<sys/time.h>
end_include
begin_include
include|#
directive|include
file|<sys/un.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|__MIPSEL__
end_ifdef
begin_ifndef
ifndef|#
directive|ifndef
name|SOCK_DGRAM
end_ifndef
begin_define
DECL|macro|SOCK_DGRAM
define|#
directive|define
name|SOCK_DGRAM
value|1
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|SOCK_STREAM
end_ifndef
begin_define
DECL|macro|SOCK_STREAM
define|#
directive|define
name|SOCK_STREAM
value|2
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SOLARIS
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_LINUXBASE
argument_list|)
end_if
begin_comment
comment|// uff-da apparently Solaris doesn't have the SUN_LEN macro, here is
end_comment
begin_comment
comment|// an implementation of it...
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|SUN_LEN
end_ifndef
begin_define
DECL|macro|SUN_LEN
define|#
directive|define
name|SUN_LEN
parameter_list|(
name|su
parameter_list|)
define|\
value|sizeof(*(su)) - sizeof((su)->sun_path) + strlen((su)->sun_path)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// nor the POSIX names of UNIX domain sockets *sigh*
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|AF_LOCAL
end_ifndef
begin_define
DECL|macro|AF_LOCAL
define|#
directive|define
name|AF_LOCAL
value|AF_UNIX
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PF_LOCAL
end_ifndef
begin_define
DECL|macro|PF_LOCAL
define|#
directive|define
name|PF_LOCAL
value|PF_UNIX
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_SOLARIS || QT_LINUXBASE
end_comment
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/***********************************************************************  *  * QWSSocket  *  **********************************************************************/
end_comment
begin_constructor
DECL|function|QWSSocket
name|QWSSocket
operator|::
name|QWSSocket
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWS_SOCK_BASE
argument_list|(
name|parent
argument_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SXE
name|QObject
operator|::
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|SocketState
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|forwardStateChange
argument_list|(
name|SocketState
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QWSSocket
name|QWSSocket
operator|::
name|~
name|QWSSocket
parameter_list|()
block|{ }
end_destructor
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SXE
end_ifndef
begin_function
DECL|function|errorString
name|QString
name|QWSSocket
operator|::
name|errorString
parameter_list|()
block|{
switch|switch
condition|(
name|QUnixSocket
operator|::
name|error
argument_list|()
condition|)
block|{
case|case
name|NoError
case|:
return|return
name|QString
argument_list|()
return|;
case|case
name|InvalidPath
case|:
case|case
name|NonexistentPath
case|:
return|return
name|QLatin1String
argument_list|(
literal|"Bad path"
argument_list|)
return|;
comment|// NO_TR
default|default:
return|return
name|QLatin1String
argument_list|(
literal|"Bad socket"
argument_list|)
return|;
comment|// NO TR
block|}
block|}
end_function
begin_function
DECL|function|forwardStateChange
name|void
name|QWSSocket
operator|::
name|forwardStateChange
parameter_list|(
name|QUnixSocket
operator|::
name|SocketState
name|st
parameter_list|)
block|{
switch|switch
condition|(
name|st
condition|)
block|{
case|case
name|ConnectedState
case|:
emit|emit
name|connected
argument_list|()
emit|;
break|break;
case|case
name|ClosingState
case|:
break|break;
case|case
name|UnconnectedState
case|:
emit|emit
name|disconnected
argument_list|()
emit|;
break|break;
default|default:
comment|// nothing
break|break;
block|}
if|if
condition|(
name|QUnixSocket
operator|::
name|error
argument_list|()
operator|!=
name|NoError
condition|)
emit|emit
name|error
argument_list|(
operator|(
name|QAbstractSocket
operator|::
name|SocketError
operator|)
literal|0
argument_list|)
emit|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|connectToLocalFile
name|bool
name|QWSSocket
operator|::
name|connectToLocalFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SXE
name|bool
name|result
init|=
name|QUnixSocket
operator|::
name|connect
argument_list|(
name|file
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|perror
argument_list|(
literal|"QWSSocketAuth::connectToLocalFile could not connect:"
argument_list|)
expr_stmt|;
emit|emit
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|ConnectionRefusedError
argument_list|)
emit|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
else|#
directive|else
comment|// create socket
name|int
name|s
init|=
operator|::
name|socket
argument_list|(
name|PF_LOCAL
argument_list|,
name|SOCK_STREAM
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// connect to socket
name|struct
name|sockaddr_un
name|a
decl_stmt|;
name|memset
argument_list|(
operator|&
name|a
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|sun_family
operator|=
name|PF_LOCAL
expr_stmt|;
name|strncpy
argument_list|(
name|a
operator|.
name|sun_path
argument_list|,
name|file
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
sizeof|sizeof
argument_list|(
name|a
operator|.
name|sun_path
argument_list|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|r
init|=
operator|::
name|connect
argument_list|(
name|s
argument_list|,
operator|(
expr|struct
name|sockaddr
operator|*
operator|)
operator|&
name|a
argument_list|,
name|SUN_LEN
argument_list|(
operator|&
name|a
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|0
condition|)
block|{
name|setSocketDescriptor
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|perror
argument_list|(
literal|"QWSSocket::connectToLocalFile could not connect:"
argument_list|)
expr_stmt|;
operator|::
name|close
argument_list|(
name|s
argument_list|)
expr_stmt|;
emit|emit
name|error
argument_list|(
name|ConnectionRefusedError
argument_list|)
emit|;
return|return
literal|false
return|;
block|}
endif|#
directive|endif
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/***********************************************************************  *  * QWSServerSocket  *  **********************************************************************/
end_comment
begin_constructor
DECL|function|QWSServerSocket
name|QWSServerSocket
operator|::
name|QWSServerSocket
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
ifndef|#
directive|ifndef
name|QT_NO_SXE
member_init_list|:
name|QUnixSocketServer
argument_list|(
name|parent
argument_list|)
else|#
directive|else
member_init_list|:
name|QTcpServer
argument_list|(
name|parent
argument_list|)
endif|#
directive|endif
block|{
name|init
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|init
name|void
name|QWSServerSocket
operator|::
name|init
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SXE
name|QByteArray
name|fn
init|=
name|file
operator|.
name|toLocal8Bit
argument_list|()
decl_stmt|;
name|bool
name|result
init|=
name|QUnixSocketServer
operator|::
name|listen
argument_list|(
name|fn
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|QUnixSocketServer
operator|::
name|ServerError
name|err
init|=
name|serverError
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|err
condition|)
block|{
case|case
name|InvalidPath
case|:
name|qWarning
argument_list|(
literal|"QWSServerSocket:: invalid path %s"
argument_list|,
name|qPrintable
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|ResourceError
case|:
case|case
name|BindError
case|:
case|case
name|ListenError
case|:
name|qWarning
argument_list|(
literal|"QWSServerSocket:: could not listen on path %s"
argument_list|,
name|qPrintable
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
else|#
directive|else
name|int
name|backlog
init|=
literal|16
decl_stmt|;
comment|//#####
comment|// create socket
name|int
name|s
init|=
operator|::
name|socket
argument_list|(
name|PF_LOCAL
argument_list|,
name|SOCK_STREAM
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
operator|-
literal|1
condition|)
block|{
name|perror
argument_list|(
literal|"QWSServerSocket::init"
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"QWSServerSocket: unable to create socket."
argument_list|)
expr_stmt|;
return|return;
block|}
name|QByteArray
name|fn
init|=
name|file
operator|.
name|toLocal8Bit
argument_list|()
decl_stmt|;
name|unlink
argument_list|(
name|fn
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
comment|// doesn't have to succeed
comment|// bind socket
name|struct
name|sockaddr_un
name|a
decl_stmt|;
name|memset
argument_list|(
operator|&
name|a
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|sun_family
operator|=
name|PF_LOCAL
expr_stmt|;
name|strncpy
argument_list|(
name|a
operator|.
name|sun_path
argument_list|,
name|fn
operator|.
name|constData
argument_list|()
argument_list|,
sizeof|sizeof
argument_list|(
name|a
operator|.
name|sun_path
argument_list|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|r
init|=
operator|::
name|bind
argument_list|(
name|s
argument_list|,
operator|(
expr|struct
name|sockaddr
operator|*
operator|)
operator|&
name|a
argument_list|,
name|SUN_LEN
argument_list|(
operator|&
name|a
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|<
literal|0
condition|)
block|{
name|perror
argument_list|(
literal|"QWSServerSocket::init"
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"QWSServerSocket: could not bind to file %s"
argument_list|,
name|fn
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
operator|::
name|close
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|chmod
argument_list|(
name|fn
operator|.
name|constData
argument_list|()
argument_list|,
literal|0600
argument_list|)
operator|<
literal|0
condition|)
block|{
name|perror
argument_list|(
literal|"QWSServerSocket::init"
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"Could not set permissions of %s"
argument_list|,
name|fn
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
operator|::
name|close
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// listen
if|if
condition|(
operator|::
name|listen
argument_list|(
name|s
argument_list|,
name|backlog
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|setSocketDescriptor
argument_list|(
name|s
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"QWSServerSocket could not set descriptor %d : %s"
argument_list|,
name|s
argument_list|,
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|perror
argument_list|(
literal|"QWSServerSocket::init"
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"QWSServerSocket: could not listen to file %s"
argument_list|,
name|fn
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
operator|::
name|close
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_destructor
DECL|function|~QWSServerSocket
name|QWSServerSocket
operator|::
name|~
name|QWSServerSocket
parameter_list|()
block|{ }
end_destructor
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SXE
end_ifndef
begin_function
DECL|function|incomingConnection
name|void
name|QWSServerSocket
operator|::
name|incomingConnection
parameter_list|(
name|int
name|socketDescriptor
parameter_list|)
block|{
name|inboundConnections
operator|.
name|append
argument_list|(
name|socketDescriptor
argument_list|)
expr_stmt|;
emit|emit
name|newConnection
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|nextPendingConnection
name|QWSSocket
modifier|*
name|QWSServerSocket
operator|::
name|nextPendingConnection
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|ssmx
argument_list|)
decl_stmt|;
if|if
condition|(
name|inboundConnections
operator|.
name|count
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|0
return|;
name|QWSSocket
modifier|*
name|s
init|=
operator|new
name|QWSSocket
argument_list|()
decl_stmt|;
name|s
operator|->
name|setSocketDescriptor
argument_list|(
name|inboundConnections
operator|.
name|takeFirst
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SXE
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_QWS_MULTIPROCESS
end_comment
end_unit
