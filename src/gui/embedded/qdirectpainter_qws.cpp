begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdirectpainter_qws.h"
end_include
begin_include
include|#
directive|include
file|"qscreen_qws.h"
end_include
begin_include
include|#
directive|include
file|"private/qobject_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"qwsdisplay_qws.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qimage.h"
end_include
begin_include
include|#
directive|include
file|<qwsevent_qws.h>
end_include
begin_include
include|#
directive|include
file|<private/qwindowsurface_qws_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwsdisplay_qws_p.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
ifdef|#
directive|ifdef
name|Q_WS_QWS
ifndef|#
directive|ifndef
name|QT_NO_DIRECTPAINTER
comment|/*!     \class QDirectPainter     \ingroup painting     \ingroup qws      \brief The QDirectPainter class provides direct access to the     underlying hardware in Qt for Embedded Linux.      Note that this class is only available in \l{Qt for Embedded Linux}.      QDirectPainter allows a client application to reserve a region of     the framebuffer and render directly onto the screen. There are two     ways of using the QDirectPainter class: You can either reserve a     region using the provided static functions, or you can instantiate     an object and make use of its more dynamic API.      \tableofcontents      \section1 Dynamic Allocation      By instantiating a QDirectPainter object using the default     QDirectPainter::NonReserved surface flag, the client application     only gets some control over the reserved region, i.e., it can     still render directly onto the screen but the allocated region may     change (for example, if a window with a higher focus requests     parts of the same region). The currently allocated region can be     retrieved using the allocatedRegion() function, while the     requestedRegion() function returns the originally reserved     region.       \section1 Static Allocation       Using the static approach, the client application gets complete     control over the reserved region, i.e., the affected region will     never be modified by the screen driver.      To create a static region, pass the QDirectPainter::Reserved     surface flag to the constructor. After the reserved region is     reported through regionChanged(), the allocated region will not     change, unless setRegion() is called.      If QDirectPainter::ReservedSynchronous is passed to the     constructor, calls to setRegion() will block until the region is     reserved, meaning that allocatedRegion() will be available immediately.     Note that in the current version setRegion() will cause the application     event loop to be entered, potentially causing reentrancy issues.      \section1 Rendering      To draw on a given region, the application must first get hold of     a pointer to the framebuffer. In most cases, this pointer can be     retrieved using the QDirectPainter::frameBuffer() function. But     note that if the current screen has subscreens, you must query the     screen driver instead to identify the correct subscreen. A pointer     to the current screen driver can always be retrieved using the     static QScreen::instance() function. Then use QScreen's \l     {QScreen::}{subScreenIndexAt()} and \l {QScreen::}{subScreens()}     functions to access the correct subscreen, and the subscreen's \l     {QScreen::}{base()} function to retrieve a pointer to the     framebuffer.      Depending on the hardware, it might be necessary to lock the     framebuffer for exclusive use while writing to it. This is     possible using the lock() and unlock() functions. Note that     calling lock() will prevent all other applications from working     until unlock() is called.      In addition, QDirectPainter provides several functions returning     information about the framebuffer: the linestep() function returns     the length (in bytes) of each scanline of the framebuffer while     the screenDepth(), screenWidth() and screenHeight() function     return the screen metrics.      \sa QScreen, QWSEmbedWidget, {Qt for Embedded Linux Architecture} */
comment|/*!     \enum QDirectPainter::SurfaceFlag      This enum describes the behavior of the region reserved by this     QDirectPainter object.      \value NonReserved The allocated region may change, e.g., if a     window with a higher focus requests parts of the same region. See     also \l {Dynamic Allocation}.      \value Reserved The allocated region will never change. See also     \l {Static Allocation}.      \value ReservedSynchronous The allocated region will never change and     each function that changes the allocated region will be blocking.      \sa allocatedRegion() */
comment|/*!     \fn QRegion QDirectPainter::region()     \obsolete      Use QDirectPainter::allocatedRegion() instead. */
DECL|function|getPrimaryScreen
specifier|static
specifier|inline
name|QScreen
modifier|*
name|getPrimaryScreen
parameter_list|()
block|{
name|QScreen
modifier|*
name|screen
init|=
name|QScreen
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|screen
operator|->
name|base
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|QScreen
modifier|*
argument_list|>
name|subScreens
init|=
name|screen
operator|->
name|subScreens
argument_list|()
decl_stmt|;
if|if
condition|(
name|subScreens
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
return|return
literal|0
return|;
name|screen
operator|=
name|subScreens
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|screen
return|;
block|}
end_function
begin_function
DECL|function|screenS
specifier|static
specifier|inline
name|QSize
name|screenS
parameter_list|()
block|{
name|QScreen
modifier|*
name|screen
init|=
name|getPrimaryScreen
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|screen
condition|)
return|return
name|QSize
argument_list|()
return|;
return|return
name|QSize
argument_list|(
name|screen
operator|->
name|width
argument_list|()
argument_list|,
name|screen
operator|->
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|devS
specifier|static
specifier|inline
name|QSize
name|devS
parameter_list|()
block|{
name|QScreen
modifier|*
name|screen
init|=
name|getPrimaryScreen
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|screen
condition|)
return|return
name|QSize
argument_list|()
return|;
return|return
name|QSize
argument_list|(
name|screen
operator|->
name|deviceWidth
argument_list|()
argument_list|,
name|screen
operator|->
name|deviceHeight
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_class
DECL|class|QDirectPainterPrivate
class|class
name|QDirectPainterPrivate
super|:
specifier|public
name|QObjectPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QDirectPainter
parameter_list|)
constructor_decl|;
public|public:
DECL|function|QDirectPainterPrivate
name|QDirectPainterPrivate
parameter_list|()
member_init_list|:
name|surface
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|seenRegion
argument_list|(
literal|false
argument_list|)
block|{}
DECL|function|~QDirectPainterPrivate
name|~
name|QDirectPainterPrivate
parameter_list|()
block|{
if|if
condition|(
name|QPaintDevice
operator|::
name|qwsDisplay
argument_list|()
condition|)
block|{
comment|// make sure not in QApplication destructor
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|directPainters
operator|->
name|remove
argument_list|(
name|surface
operator|->
name|windowId
argument_list|()
argument_list|)
expr_stmt|;
name|surface
operator|->
name|setGeometry
argument_list|(
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|delete
name|surface
expr_stmt|;
block|}
DECL|member|surface
name|QWSDirectPainterSurface
modifier|*
name|surface
decl_stmt|;
DECL|member|requested_region
name|QRegion
name|requested_region
decl_stmt|;
DECL|member|staticPainter
specifier|static
name|QDirectPainter
modifier|*
name|staticPainter
decl_stmt|;
DECL|member|seenRegion
name|bool
name|seenRegion
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|staticPainter
name|QDirectPainter
modifier|*
name|QDirectPainterPrivate
operator|::
name|staticPainter
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_directpainter_region
name|void
name|qt_directpainter_region
parameter_list|(
name|QDirectPainter
modifier|*
name|dp
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|alloc
parameter_list|,
name|int
name|type
parameter_list|)
block|{
name|QDirectPainterPrivate
modifier|*
name|d
init|=
name|dp
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|QRegion
name|r
init|=
name|alloc
decl_stmt|;
name|QScreen
modifier|*
name|screen
init|=
name|d
operator|->
name|surface
operator|->
name|screen
argument_list|()
decl_stmt|;
if|if
condition|(
name|screen
operator|->
name|isTransformed
argument_list|()
condition|)
block|{
specifier|const
name|QSize
name|screenSize
argument_list|(
name|screen
operator|->
name|width
argument_list|()
argument_list|,
name|screen
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|=
name|screen
operator|->
name|mapToDevice
argument_list|(
name|r
argument_list|,
name|screenSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
name|QWSRegionEvent
operator|::
name|Allocation
condition|)
block|{
name|d
operator|->
name|surface
operator|->
name|setClipRegion
argument_list|(
name|alloc
argument_list|)
expr_stmt|;
name|d
operator|->
name|seenRegion
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|dp
operator|!=
name|QDirectPainterPrivate
operator|::
name|staticPainter
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|surface
operator|->
name|flushingRegionEvents
condition|)
comment|// recursion guard
name|dp
operator|->
name|regionChanged
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWSEMBEDWIDGET
end_ifndef
begin_function
DECL|function|qt_directpainter_embedevent
name|void
name|qt_directpainter_embedevent
parameter_list|(
name|QDirectPainter
modifier|*
name|dp
parameter_list|,
specifier|const
name|QWSEmbedEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
operator||
name|QWSEmbedEvent
operator|::
name|Region
condition|)
block|{
name|QScreen
modifier|*
name|screen
init|=
name|dp
operator|->
name|d_func
argument_list|()
operator|->
name|surface
operator|->
name|screen
argument_list|()
decl_stmt|;
name|QRegion
name|r
init|=
name|event
operator|->
name|region
decl_stmt|;
if|if
condition|(
name|screen
operator|->
name|isTransformed
argument_list|()
condition|)
block|{
specifier|const
name|QSize
name|screenSize
argument_list|(
name|screen
operator|->
name|width
argument_list|()
argument_list|,
name|screen
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|=
name|screen
operator|->
name|mapToDevice
argument_list|(
name|r
argument_list|,
name|screenSize
argument_list|)
expr_stmt|;
block|}
name|dp
operator|->
name|setRegion
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     Constructs a QDirectPainter object with the given \a parent and     surface \a flag. */
end_comment
begin_constructor
DECL|function|QDirectPainter
name|QDirectPainter
operator|::
name|QDirectPainter
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|,
name|SurfaceFlag
name|flag
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QDirectPainterPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QDirectPainter
argument_list|)
expr_stmt|;
name|d
operator|->
name|surface
operator|=
operator|new
name|QWSDirectPainterSurface
argument_list|(
literal|true
argument_list|,
name|flag
argument_list|)
expr_stmt|;
if|if
condition|(
name|flag
operator|!=
name|NonReserved
condition|)
name|d
operator|->
name|surface
operator|->
name|setReserved
argument_list|()
expr_stmt|;
name|QApplicationPrivate
modifier|*
name|ad
init|=
name|qApp
operator|->
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ad
operator|->
name|directPainters
condition|)
name|ad
operator|->
name|directPainters
operator|=
operator|new
name|QMap
argument_list|<
name|WId
argument_list|,
name|QDirectPainter
operator|*
argument_list|>
expr_stmt|;
name|ad
operator|->
name|directPainters
operator|->
name|insert
argument_list|(
name|d
operator|->
name|surface
operator|->
name|windowId
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys this QDirectPainter object, releasing the reserved region.      \sa allocatedRegion() */
end_comment
begin_destructor
DECL|function|~QDirectPainter
name|QDirectPainter
operator|::
name|~
name|QDirectPainter
parameter_list|()
block|{
comment|/* should not be necessary     if (this == QDirectPainterPrivate::staticPainter)         QDirectPainterPrivate::staticPainter = 0;     */
block|}
end_destructor
begin_comment
comment|/*!     \fn void QDirectPainter::setGeometry(const QRect&rectangle)     \since 4.2      Request to reserve the given \a rectangle of the framebuffer.      Note that the actually allocated region might differ from the     requested one, e.g., if the given region overlaps with the     region of another QDirectPainter object.      \sa geometry(), allocatedRegion(), setRegion() */
end_comment
begin_function
DECL|function|setGeometry
name|void
name|QDirectPainter
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|setRegion
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the bounding rectangle of the requested region.      \sa setGeometry(), requestedRegion() */
end_comment
begin_function
DECL|function|geometry
name|QRect
name|QDirectPainter
operator|::
name|geometry
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDirectPainter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|requested_region
operator|.
name|boundingRect
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Requests to reserve the given \a region of the framebuffer.      Note that the actually allocated region might differ from the     requested one, e.g., if the given region overlaps with the region     of another QDirectPainter object.      \sa requestedRegion(), allocatedRegion(), {Dynamic Allocation} */
end_comment
begin_function
DECL|function|setRegion
name|void
name|QDirectPainter
operator|::
name|setRegion
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDirectPainter
argument_list|)
expr_stmt|;
name|d
operator|->
name|requested_region
operator|=
name|region
expr_stmt|;
specifier|const
name|QScreen
modifier|*
name|screen
init|=
name|d
operator|->
name|surface
operator|->
name|screen
argument_list|()
decl_stmt|;
if|if
condition|(
name|screen
operator|->
name|isTransformed
argument_list|()
condition|)
block|{
specifier|const
name|QSize
name|devSize
argument_list|(
name|screen
operator|->
name|deviceWidth
argument_list|()
argument_list|,
name|screen
operator|->
name|deviceHeight
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QRegion
name|r
init|=
name|screen
operator|->
name|mapFromDevice
argument_list|(
name|region
argument_list|,
name|devSize
argument_list|)
decl_stmt|;
name|d
operator|->
name|surface
operator|->
name|setRegion
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|surface
operator|->
name|setRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the region requested by this QDirectPainter.      Note that if the QDirectPainter::Reserved flag is set, the region     returned by this function will always be equivalent to the region     returned by the allocatedRegion() function. Otherwise they might     differ (see \l {Dynamic Allocation} for details).      \sa geometry(), setRegion(), allocatedRegion() */
end_comment
begin_function
DECL|function|requestedRegion
name|QRegion
name|QDirectPainter
operator|::
name|requestedRegion
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDirectPainter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|requested_region
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the currently reserved region.      Note that if the QDirectPainter::Reserved flag is set, the region     returned by this function will always be equivalent to the region     returned by the requestedRegion() function. Otherwise they might     differ (see \l {Dynamic Allocation} for details).      \sa requestedRegion(), geometry() */
end_comment
begin_function
DECL|function|allocatedRegion
name|QRegion
name|QDirectPainter
operator|::
name|allocatedRegion
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDirectPainter
argument_list|)
expr_stmt|;
specifier|const
name|QScreen
modifier|*
name|screen
init|=
name|d
operator|->
name|surface
operator|->
name|screen
argument_list|()
decl_stmt|;
if|if
condition|(
name|screen
operator|->
name|isTransformed
argument_list|()
condition|)
block|{
specifier|const
name|QSize
name|screenSize
argument_list|(
name|screen
operator|->
name|width
argument_list|()
argument_list|,
name|screen
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|screen
operator|->
name|mapToDevice
argument_list|(
name|d
operator|->
name|surface
operator|->
name|region
argument_list|()
argument_list|,
name|screenSize
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|d
operator|->
name|surface
operator|->
name|region
argument_list|()
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the window system identifier of the widget. */
end_comment
begin_function
DECL|function|winId
name|WId
name|QDirectPainter
operator|::
name|winId
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDirectPainter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|surface
operator|->
name|windowId
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QDirectPainter::regionChanged(const QRegion&newRegion)     \since 4.2      This function is called when the allocated region changes.      This function is not called for region changes that happen while the     startPainting() function is executing.      Note that the given region, \a newRegion, is not guaranteed to be correct at the     time you access the display. To prevent reentrancy problems you should     always call startPainting() before updating the display and then use     allocatedRegion() to retrieve the correct region.      \sa allocatedRegion(), startPainting(), {Dynamic Allocation} */
end_comment
begin_function
DECL|function|regionChanged
name|void
name|QDirectPainter
operator|::
name|regionChanged
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Call this function before you start updating the pixels in the     allocated region. The hardware will be notified, if necessary,     that you are about to start painting operations.      Set \a lockDisplay if you want startPainting() and endPainting()     to lock() and unlock() the display automatically.      Note that for a NonReserved direct painter, you must call     allocatedRegion() after calling this function, since the allocated     region is only guaranteed to be correct after this function has     returned.      The regionChanged() function will not be called between startPainting()     and endPainting().      \sa endPainting(), flush() */
end_comment
begin_function
DECL|function|startPainting
name|void
name|QDirectPainter
operator|::
name|startPainting
parameter_list|(
name|bool
name|lockDisplay
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDirectPainter
argument_list|)
expr_stmt|;
name|d
operator|->
name|surface
operator|->
name|setLocking
argument_list|(
name|lockDisplay
argument_list|)
expr_stmt|;
specifier|const
name|QScreen
modifier|*
name|screen
init|=
name|d
operator|->
name|surface
operator|->
name|screen
argument_list|()
decl_stmt|;
if|if
condition|(
name|screen
operator|->
name|isTransformed
argument_list|()
condition|)
block|{
specifier|const
name|QSize
name|devSize
argument_list|(
name|screen
operator|->
name|deviceWidth
argument_list|()
argument_list|,
name|screen
operator|->
name|deviceHeight
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QRegion
name|r
init|=
name|screen
operator|->
name|mapFromDevice
argument_list|(
name|d
operator|->
name|surface
operator|->
name|region
argument_list|()
argument_list|,
name|devSize
argument_list|)
decl_stmt|;
name|d
operator|->
name|surface
operator|->
name|beginPaint
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|surface
operator|->
name|beginPaint
argument_list|(
name|d
operator|->
name|surface
operator|->
name|region
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Call this function when you are done updating the screen. It will     notify the hardware, if necessary, that your painting operations     have ended. */
end_comment
begin_function
DECL|function|endPainting
name|void
name|QDirectPainter
operator|::
name|endPainting
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QDirectPainter
argument_list|)
expr_stmt|;
specifier|const
name|QScreen
modifier|*
name|screen
init|=
name|d
operator|->
name|surface
operator|->
name|screen
argument_list|()
decl_stmt|;
if|if
condition|(
name|screen
operator|->
name|isTransformed
argument_list|()
condition|)
block|{
specifier|const
name|QSize
name|devSize
argument_list|(
name|screen
operator|->
name|deviceWidth
argument_list|()
argument_list|,
name|screen
operator|->
name|deviceHeight
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QRegion
name|r
init|=
name|screen
operator|->
name|mapFromDevice
argument_list|(
name|d
operator|->
name|surface
operator|->
name|region
argument_list|()
argument_list|,
name|devSize
argument_list|)
decl_stmt|;
name|d
operator|->
name|surface
operator|->
name|endPaint
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|surface
operator|->
name|endPaint
argument_list|(
name|d
operator|->
name|surface
operator|->
name|region
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \since 4.3     \overload      This function will automatically call flush() to flush the     \a region to the display before notifying the hardware, if     necessary, that painting operations have ended. */
end_comment
begin_function
DECL|function|endPainting
name|void
name|QDirectPainter
operator|::
name|endPainting
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
name|endPainting
argument_list|()
expr_stmt|;
name|flush
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.3      Flushes the \a region onto the screen. */
end_comment
begin_function
DECL|function|flush
name|void
name|QDirectPainter
operator|::
name|flush
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDirectPainter
argument_list|)
expr_stmt|;
specifier|const
name|QScreen
modifier|*
name|screen
init|=
name|d
operator|->
name|surface
operator|->
name|screen
argument_list|()
decl_stmt|;
if|if
condition|(
name|screen
operator|->
name|isTransformed
argument_list|()
condition|)
block|{
specifier|const
name|QSize
name|devSize
argument_list|(
name|screen
operator|->
name|deviceWidth
argument_list|()
argument_list|,
name|screen
operator|->
name|deviceHeight
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QRegion
name|r
init|=
name|screen
operator|->
name|mapFromDevice
argument_list|(
name|region
argument_list|,
name|devSize
argument_list|)
decl_stmt|;
name|d
operator|->
name|surface
operator|->
name|flush
argument_list|(
literal|0
argument_list|,
name|r
argument_list|,
name|QPoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|surface
operator|->
name|flush
argument_list|(
literal|0
argument_list|,
name|region
argument_list|,
name|QPoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Raises the reserved region to the top of the widget stack.      After this call the reserved region will be visually in front of     any overlapping widgets.      \sa lower(), requestedRegion() */
end_comment
begin_function
DECL|function|raise
name|void
name|QDirectPainter
operator|::
name|raise
parameter_list|()
block|{
name|QWidget
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|setAltitude
argument_list|(
name|winId
argument_list|()
argument_list|,
name|QWSChangeAltitudeCommand
operator|::
name|Raise
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Lowers the reserved region to the bottom of the widget stack.      After this call the reserved region will be visually behind (and     therefore obscured by) any overlapping widgets.      \sa raise(), requestedRegion() */
end_comment
begin_function
DECL|function|lower
name|void
name|QDirectPainter
operator|::
name|lower
parameter_list|()
block|{
name|QWidget
operator|::
name|qwsDisplay
argument_list|()
operator|->
name|setAltitude
argument_list|(
name|winId
argument_list|()
argument_list|,
name|QWSChangeAltitudeCommand
operator|::
name|Lower
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn QRegion QDirectPainter::reserveRegion(const QRegion&region)      Attempts to reserve the \a region and returns the region that is     actually reserved.      This function also releases the previously reserved region if     any. If not released explicitly, the region will be released on     application exit.      \sa allocatedRegion(), {Static Allocation}      \obsolete      Construct a QDirectPainter using QDirectPainter::ReservedSynchronous instead. */
end_comment
begin_function
DECL|function|reserveRegion
name|QRegion
name|QDirectPainter
operator|::
name|reserveRegion
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|reg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QDirectPainterPrivate
operator|::
name|staticPainter
condition|)
name|QDirectPainterPrivate
operator|::
name|staticPainter
operator|=
operator|new
name|QDirectPainter
argument_list|(
name|qApp
argument_list|,
name|ReservedSynchronous
argument_list|)
expr_stmt|;
name|QDirectPainter
modifier|*
name|dp
init|=
name|QDirectPainterPrivate
operator|::
name|staticPainter
decl_stmt|;
name|dp
operator|->
name|setRegion
argument_list|(
name|reg
argument_list|)
expr_stmt|;
return|return
name|dp
operator|->
name|allocatedRegion
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a pointer to the beginning of the display memory.      Note that it is the application's responsibility to limit itself     to modifying only the reserved region.      Do not use this pointer if the current screen has subscreens,     query the screen driver instead: A pointer to the current screen     driver can always be retrieved using the static     QScreen::instance() function. Then use QScreen's \l     {QScreen::}{subScreenIndexAt()} and \l {QScreen::}{subScreens()}     functions to access the correct subscreen, and the subscreen's \l     {QScreen::}{base()} function to retrieve a pointer to the     framebuffer.      \sa requestedRegion(), allocatedRegion(), linestep() */
end_comment
begin_function
DECL|function|frameBuffer
name|uchar
modifier|*
name|QDirectPainter
operator|::
name|frameBuffer
parameter_list|()
block|{
name|QScreen
modifier|*
name|screen
init|=
name|getPrimaryScreen
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|screen
condition|)
return|return
literal|0
return|;
return|return
name|screen
operator|->
name|base
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the reserved region.      \sa reserveRegion(), frameBuffer()      \obsolete      Use allocatedRegion() instead. */
end_comment
begin_function
DECL|function|reservedRegion
name|QRegion
name|QDirectPainter
operator|::
name|reservedRegion
parameter_list|()
block|{
return|return
name|QDirectPainterPrivate
operator|::
name|staticPainter
condition|?
name|QDirectPainterPrivate
operator|::
name|staticPainter
operator|->
name|allocatedRegion
argument_list|()
else|:
name|QRegion
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the bit depth of the display.      \sa screenHeight(), screenWidth() */
end_comment
begin_function
DECL|function|screenDepth
name|int
name|QDirectPainter
operator|::
name|screenDepth
parameter_list|()
block|{
name|QScreen
modifier|*
name|screen
init|=
name|getPrimaryScreen
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|screen
condition|)
return|return
literal|0
return|;
return|return
name|screen
operator|->
name|depth
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the width of the display in pixels.      \sa screenHeight(), screenDepth() */
end_comment
begin_function
DECL|function|screenWidth
name|int
name|QDirectPainter
operator|::
name|screenWidth
parameter_list|()
block|{
name|QScreen
modifier|*
name|screen
init|=
name|getPrimaryScreen
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|screen
condition|)
return|return
literal|0
return|;
return|return
name|screen
operator|->
name|deviceWidth
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the height of the display in pixels.      \sa screenWidth(), screenDepth() */
end_comment
begin_function
DECL|function|screenHeight
name|int
name|QDirectPainter
operator|::
name|screenHeight
parameter_list|()
block|{
name|QScreen
modifier|*
name|screen
init|=
name|getPrimaryScreen
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|screen
condition|)
return|return
literal|0
return|;
return|return
name|screen
operator|->
name|deviceHeight
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the length (in bytes) of each scanline of the framebuffer.      \sa frameBuffer() */
end_comment
begin_function
DECL|function|linestep
name|int
name|QDirectPainter
operator|::
name|linestep
parameter_list|()
block|{
name|QScreen
modifier|*
name|screen
init|=
name|getPrimaryScreen
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|screen
condition|)
return|return
literal|0
return|;
return|return
name|screen
operator|->
name|linestep
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Locks access to the framebuffer.    Note that calling this function will prevent all other   applications from updating the display until unlock() is called.    \sa unlock() */
end_comment
begin_function
DECL|function|lock
name|void
name|QDirectPainter
operator|::
name|lock
parameter_list|()
block|{
name|QWSDisplay
operator|::
name|grab
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Unlocks the lock on the framebuffer (set using the lock()   function), allowing other applications to access the screen.    \sa lock()  */
end_comment
begin_function
DECL|function|unlock
name|void
name|QDirectPainter
operator|::
name|unlock
parameter_list|()
block|{
name|QWSDisplay
operator|::
name|ungrab
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_DIRECTPAINTER
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
