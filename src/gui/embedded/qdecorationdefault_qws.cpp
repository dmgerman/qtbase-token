begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qwidget.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qpaintengine.h>
end_include
begin_include
include|#
directive|include
file|<qdrawutil.h>
end_include
begin_include
include|#
directive|include
file|"qdecorationdefault_qws.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_QWS_DECORATION_DEFAULT
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_PLUGIN
argument_list|)
DECL|member|staticHelpPixmap
name|QPixmap
modifier|*
name|QDecorationDefault
operator|::
name|staticHelpPixmap
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|staticMenuPixmap
name|QPixmap
modifier|*
name|QDecorationDefault
operator|::
name|staticMenuPixmap
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|staticClosePixmap
name|QPixmap
modifier|*
name|QDecorationDefault
operator|::
name|staticClosePixmap
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|staticMinimizePixmap
name|QPixmap
modifier|*
name|QDecorationDefault
operator|::
name|staticMinimizePixmap
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|staticMaximizePixmap
name|QPixmap
modifier|*
name|QDecorationDefault
operator|::
name|staticMaximizePixmap
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|staticNormalizePixmap
name|QPixmap
modifier|*
name|QDecorationDefault
operator|::
name|staticNormalizePixmap
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_IMAGEFORMAT_XPM
end_ifndef
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|default_menu_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|default_menu_xpm
index|[]
init|=
block|{
comment|/* width height ncolors chars_per_pixel */
literal|"16 16 11 1"
block|,
comment|/* colors */
literal|"  c #000000"
block|,
literal|". c #336600"
block|,
literal|"X c #666600"
block|,
literal|"o c #99CC00"
block|,
literal|"O c #999933"
block|,
literal|"+ c #333300"
block|,
literal|"@ c #669900"
block|,
literal|"# c #999900"
block|,
literal|"$ c #336633"
block|,
literal|"% c #666633"
block|,
literal|"& c #99CC33"
block|,
comment|/* pixels */
literal|"oooooooooooooooo"
block|,
literal|"oooooooooooooooo"
block|,
literal|"ooooo#.++X#ooooo"
block|,
literal|"ooooX      Xoooo"
block|,
literal|"oooX  XO#%  X&oo"
block|,
literal|"oo#  Ooo&@O  Ooo"
block|,
literal|"oo. Xoo#+ @X Xoo"
block|,
literal|"oo+ OoO+ +O# +oo"
block|,
literal|"oo+ #O+  +## +oo"
block|,
literal|"oo. %@ ++ +. Xoo"
block|,
literal|"oo#  O@OO+   #oo"
block|,
literal|"oooX  X##$   Ooo"
block|,
literal|"ooooX        Xoo"
block|,
literal|"oooo&OX++X#OXooo"
block|,
literal|"oooooooooooooooo"
block|,
literal|"oooooooooooooooo"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|default_help_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|default_help_xpm
index|[]
init|=
block|{
literal|"16 16 3 1"
block|,
literal|"       s None  c None"
block|,
literal|".      c #ffffff"
block|,
literal|"X      c #707070"
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"    ......      "
block|,
literal|"   ..XXXXXX     "
block|,
literal|"   .XX   .XX    "
block|,
literal|"   .XX   .XX    "
block|,
literal|"        ..XX    "
block|,
literal|"       ..XX     "
block|,
literal|"      ..XX      "
block|,
literal|"      .XX       "
block|,
literal|"      .XX       "
block|,
literal|"      ..        "
block|,
literal|"      .XX       "
block|,
literal|"      .XX       "
block|,
literal|"                "
block|,
literal|"                "
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|default_close_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|default_close_xpm
index|[]
init|=
block|{
literal|"16 16 3 1"
block|,
literal|"       s None  c None"
block|,
literal|".      c #ffffff"
block|,
literal|"X      c #707070"
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"  .X        .X  "
block|,
literal|"  .XX      .XX  "
block|,
literal|"   .XX    .XX   "
block|,
literal|"    .XX  .XX    "
block|,
literal|"     .XX.XX     "
block|,
literal|"      .XXX      "
block|,
literal|"      .XXX      "
block|,
literal|"     .XX.XX     "
block|,
literal|"    .XX  .XX    "
block|,
literal|"   .XX    .XX   "
block|,
literal|"  .XX      .XX  "
block|,
literal|"  .X        .X  "
block|,
literal|"                "
block|,
literal|"                "
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|default_maximize_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|default_maximize_xpm
index|[]
init|=
block|{
literal|"16 16 3 1"
block|,
literal|"       s None  c None"
block|,
literal|".      c #ffffff"
block|,
literal|"X      c #707070"
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"  ...........   "
block|,
literal|"  .XXXXXXXXXX   "
block|,
literal|"  .X       .X   "
block|,
literal|"  .X       .X   "
block|,
literal|"  .X       .X   "
block|,
literal|"  .X       .X   "
block|,
literal|"  .X       .X   "
block|,
literal|"  .X       .X   "
block|,
literal|"  .X       .X   "
block|,
literal|"  .X........X   "
block|,
literal|"  .XXXXXXXXXX   "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|default_minimize_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|default_minimize_xpm
index|[]
init|=
block|{
literal|"16 16 3 1"
block|,
literal|"       s None  c None"
block|,
literal|".      c #ffffff"
block|,
literal|"X      c #707070"
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"       ...      "
block|,
literal|"       . X      "
block|,
literal|"       .XX      "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|default_normalize_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|default_normalize_xpm
index|[]
init|=
block|{
literal|"16 16 3 1"
block|,
literal|"       s None  c None"
block|,
literal|".      c #ffffff"
block|,
literal|"X      c #707070"
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"     ........   "
block|,
literal|"     .XXXXXXXX  "
block|,
literal|"     .X     .X  "
block|,
literal|"     .X     .X  "
block|,
literal|"  ....X...  .X  "
block|,
literal|"  .XXXXXXXX .X  "
block|,
literal|"  .X     .XXXX  "
block|,
literal|"  .X     .X     "
block|,
literal|"  .X     .X     "
block|,
literal|"  .X......X     "
block|,
literal|"  .XXXXXXXX     "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|}
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_IMAGEFORMAT_XPM
end_comment
begin_comment
comment|/*!   \class QDecorationDefault   \since 4.4   \ingroup qws   \brief The QDecorationDefault class is a base class providing default window decorations.    See the documentation for class QDecoration for a detailed   description. This subclass of QDecoration provides standard   icons for the decoration regions.    Note that this class is non-portable and only available in   \l{Qt for Embedded Linux}.  */
end_comment
begin_comment
comment|/*!   Default constructor.  */
end_comment
begin_constructor
DECL|function|QDecorationDefault
name|QDecorationDefault
operator|::
name|QDecorationDefault
parameter_list|()
member_init_list|:
name|QDecoration
argument_list|()
block|{
name|menu_width
operator|=
literal|20
expr_stmt|;
name|help_width
operator|=
literal|20
expr_stmt|;
name|close_width
operator|=
literal|20
expr_stmt|;
name|minimize_width
operator|=
literal|20
expr_stmt|;
name|maximize_width
operator|=
literal|20
expr_stmt|;
name|normalize_width
operator|=
literal|20
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   The constructor deletes the static pixmaps.  */
end_comment
begin_destructor
DECL|function|~QDecorationDefault
name|QDecorationDefault
operator|::
name|~
name|QDecorationDefault
parameter_list|()
block|{
operator|delete
name|staticMenuPixmap
expr_stmt|;
operator|delete
name|staticClosePixmap
expr_stmt|;
operator|delete
name|staticMinimizePixmap
expr_stmt|;
operator|delete
name|staticMaximizePixmap
expr_stmt|;
operator|delete
name|staticNormalizePixmap
expr_stmt|;
comment|// This makes it safe to delete and then create a QDecorationDefault
name|staticMenuPixmap
operator|=
literal|0
expr_stmt|;
name|staticClosePixmap
operator|=
literal|0
expr_stmt|;
name|staticMinimizePixmap
operator|=
literal|0
expr_stmt|;
name|staticMaximizePixmap
operator|=
literal|0
expr_stmt|;
name|staticNormalizePixmap
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!   \fn const char **QDecorationDefault::xpmForRegion(int region)    Returns a pointer to the X pixmap for the icon specified by   \a region. An X pixmap is an ASCII-text-based image. The value   of \a region must be one of a subset of the values of enum   DecorationRegion. The supported values are \e Help, \e Menu,   \e Close, \e Minimize, \e Maximize, and \e Normalize. Other   values of \a region cause zero to be returned.    \sa QDecoration::DecorationRegion  */
end_comment
begin_function
DECL|function|xpmForRegion
specifier|const
name|char
modifier|*
modifier|*
name|QDecorationDefault
operator|::
name|xpmForRegion
parameter_list|(
name|int
name|reg
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_IMAGEFORMAT_XPM
name|Q_UNUSED
argument_list|(
name|reg
argument_list|)
expr_stmt|;
else|#
directive|else
switch|switch
condition|(
name|reg
condition|)
block|{
case|case
name|Help
case|:
return|return
operator|(
specifier|const
name|char
operator|*
operator|*
operator|)
name|default_help_xpm
return|;
case|case
name|Menu
case|:
return|return
operator|(
specifier|const
name|char
operator|*
operator|*
operator|)
name|default_menu_xpm
return|;
case|case
name|Close
case|:
return|return
operator|(
specifier|const
name|char
operator|*
operator|*
operator|)
name|default_close_xpm
return|;
case|case
name|Minimize
case|:
return|return
operator|(
specifier|const
name|char
operator|*
operator|*
operator|)
name|default_minimize_xpm
return|;
case|case
name|Maximize
case|:
return|return
operator|(
specifier|const
name|char
operator|*
operator|*
operator|)
name|default_maximize_xpm
return|;
case|case
name|Normalize
case|:
return|return
operator|(
specifier|const
name|char
operator|*
operator|*
operator|)
name|default_normalize_xpm
return|;
block|}
endif|#
directive|endif
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QPixmap QDecorationDefault::pixmapFor(const QWidget *widget,     int decorationRegion, int&xoff, int&yoff)      Returns a pointer to the QPixmap for the widget specified by \a widget and     \a decorationRegion. The returned QPixmap is constructed from the default     X pixmap obtained from xpmForRegion().      \a xoff and \a yoff specify the offset for the pixmap.      The value of \a decorationRegion must be one of a subset of the values     of enum DecorationRegion. The supported values are \e Help,     \e Menu, \e Close, \e Minimize, \e Maximize, and \e Normalize.     Other values of \a decorationRegion return 0.      \sa QDecoration::DecorationRegion */
end_comment
begin_function
DECL|function|pixmapFor
name|QPixmap
name|QDecorationDefault
operator|::
name|pixmapFor
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|int
name|decorationRegion
parameter_list|,
name|int
modifier|&
name|xoff
parameter_list|,
name|int
modifier|&
comment|/*yoff*/
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_IMAGEFORMAT_XPM
name|Q_UNUSED
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|decorationRegion
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|xoff
argument_list|)
expr_stmt|;
return|return
name|QPixmap
argument_list|()
return|;
else|#
directive|else
specifier|static
specifier|const
name|char
modifier|*
modifier|*
name|staticHelpPixmapXPM
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|char
modifier|*
modifier|*
name|staticMenuPixmapXPM
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|char
modifier|*
modifier|*
name|staticClosePixmapXPM
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|char
modifier|*
modifier|*
name|staticMinimizePixmapXPM
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|char
modifier|*
modifier|*
name|staticMaximizePixmapXPM
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|char
modifier|*
modifier|*
name|staticNormalizePixmapXPM
init|=
literal|0
decl_stmt|;
specifier|const
name|char
modifier|*
modifier|*
name|xpm
decl_stmt|;
comment|// Why don't we just use/extend the enum type...
if|if
condition|(
name|staticHelpPixmapXPM
operator|!=
operator|(
name|xpm
operator|=
name|xpmForRegion
argument_list|(
name|Help
argument_list|)
operator|)
operator|||
operator|!
name|staticHelpPixmap
condition|)
block|{
name|staticHelpPixmapXPM
operator|=
name|xpm
expr_stmt|;
name|staticHelpPixmap
operator|=
operator|new
name|QPixmap
argument_list|(
name|xpm
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|staticMenuPixmapXPM
operator|!=
operator|(
name|xpm
operator|=
name|xpmForRegion
argument_list|(
name|Menu
argument_list|)
operator|)
operator|||
operator|!
name|staticMenuPixmap
condition|)
block|{
name|staticMenuPixmapXPM
operator|=
name|xpm
expr_stmt|;
name|staticMenuPixmap
operator|=
operator|new
name|QPixmap
argument_list|(
name|xpm
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|staticClosePixmapXPM
operator|!=
operator|(
name|xpm
operator|=
name|xpmForRegion
argument_list|(
name|Close
argument_list|)
operator|)
operator|||
operator|!
name|staticClosePixmap
condition|)
block|{
name|staticClosePixmapXPM
operator|=
name|xpm
expr_stmt|;
name|staticClosePixmap
operator|=
operator|new
name|QPixmap
argument_list|(
name|xpm
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|staticMinimizePixmapXPM
operator|!=
operator|(
name|xpm
operator|=
name|xpmForRegion
argument_list|(
name|Minimize
argument_list|)
operator|)
operator|||
operator|!
name|staticMinimizePixmap
condition|)
block|{
name|staticMinimizePixmapXPM
operator|=
name|xpm
expr_stmt|;
name|staticMinimizePixmap
operator|=
operator|new
name|QPixmap
argument_list|(
name|xpm
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|staticMaximizePixmapXPM
operator|!=
operator|(
name|xpm
operator|=
name|xpmForRegion
argument_list|(
name|Maximize
argument_list|)
operator|)
operator|||
operator|!
name|staticMaximizePixmap
condition|)
block|{
name|staticMaximizePixmapXPM
operator|=
name|xpm
expr_stmt|;
name|staticMaximizePixmap
operator|=
operator|new
name|QPixmap
argument_list|(
name|xpm
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|staticNormalizePixmapXPM
operator|!=
operator|(
name|xpm
operator|=
name|xpmForRegion
argument_list|(
name|Normalize
argument_list|)
operator|)
operator|||
operator|!
name|staticNormalizePixmap
condition|)
block|{
name|staticNormalizePixmapXPM
operator|=
name|xpm
expr_stmt|;
name|staticNormalizePixmap
operator|=
operator|new
name|QPixmap
argument_list|(
name|xpm
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QPixmap
modifier|*
name|pm
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|decorationRegion
condition|)
block|{
case|case
name|Help
case|:
name|pm
operator|=
name|staticHelpPixmap
expr_stmt|;
break|break;
case|case
name|Menu
case|:
if|if
condition|(
operator|!
name|widget
operator|->
name|windowIcon
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|widget
operator|->
name|windowIcon
argument_list|()
operator|.
name|pixmap
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|)
return|;
comment|//##### QIcon::pixmap() needs a size !!!!!!"
if|if
condition|(
operator|!
name|pm
condition|)
block|{
name|xoff
operator|=
literal|1
expr_stmt|;
name|pm
operator|=
name|staticMenuPixmap
expr_stmt|;
block|}
break|break;
case|case
name|Close
case|:
name|pm
operator|=
name|staticClosePixmap
expr_stmt|;
break|break;
case|case
name|Maximize
case|:
name|pm
operator|=
name|staticMaximizePixmap
expr_stmt|;
break|break;
case|case
name|Normalize
case|:
name|pm
operator|=
name|staticNormalizePixmap
expr_stmt|;
break|break;
case|case
name|Minimize
case|:
name|pm
operator|=
name|staticMinimizePixmap
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
operator|*
name|pm
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \fn int QDecorationDefault::titleBarHeight(const QWidget *widget)      Returns the title bar height in pixels for the given \a widget. It is the     greater of 20, or the sum of the application font's line spacing value     plus a border width fudge factor. */
end_comment
begin_function
DECL|function|titleBarHeight
name|int
name|QDecorationDefault
operator|::
name|titleBarHeight
parameter_list|(
specifier|const
name|QWidget
modifier|*
parameter_list|)
block|{
return|return
name|qMax
argument_list|(
literal|20
argument_list|,
name|QApplication
operator|::
name|fontMetrics
argument_list|()
operator|.
name|height
argument_list|()
operator|+
name|BORDER_WIDTH
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the region specified by \a decorationRegion for the   top-level \a widget. \a rect specifies the rectangle the decoration   wraps. The value of \a decorationRegion is a combination of the   bitmask values of enum DecorationRegion.  */
end_comment
begin_function
DECL|function|region
name|QRegion
name|QDecorationDefault
operator|::
name|region
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|int
name|decorationRegion
parameter_list|)
block|{
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|widget
operator|->
name|windowFlags
argument_list|()
decl_stmt|;
name|bool
name|hasBorder
init|=
operator|!
name|widget
operator|->
name|isMaximized
argument_list|()
decl_stmt|;
name|bool
name|hasTitle
init|=
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
decl_stmt|;
name|bool
name|hasSysMenu
init|=
name|flags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
decl_stmt|;
name|bool
name|hasContextHelp
init|=
name|flags
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
decl_stmt|;
name|bool
name|hasMinimize
init|=
name|flags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
decl_stmt|;
name|bool
name|hasMaximize
init|=
name|flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
decl_stmt|;
name|int
name|state
init|=
name|widget
operator|->
name|windowState
argument_list|()
decl_stmt|;
name|bool
name|isMinimized
init|=
name|state
operator|&
name|Qt
operator|::
name|WindowMinimized
decl_stmt|;
name|bool
name|isMaximized
init|=
name|state
operator|&
name|Qt
operator|::
name|WindowMaximized
decl_stmt|;
name|int
name|titleHeight
init|=
name|hasTitle
condition|?
name|titleBarHeight
argument_list|(
name|widget
argument_list|)
else|:
literal|0
decl_stmt|;
name|int
name|bw
init|=
name|hasBorder
condition|?
name|BORDER_WIDTH
else|:
literal|0
decl_stmt|;
name|int
name|bbw
init|=
name|hasBorder
condition|?
name|BOTTOM_BORDER_WIDTH
else|:
literal|0
decl_stmt|;
name|QRegion
name|region
decl_stmt|;
switch|switch
condition|(
name|decorationRegion
condition|)
block|{
case|case
name|All
case|:
block|{
name|QRect
name|r
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|-
name|bw
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|titleHeight
operator|-
name|bw
argument_list|,
name|rect
operator|.
name|width
argument_list|()
operator|+
literal|2
operator|*
name|bw
argument_list|,
name|rect
operator|.
name|height
argument_list|()
operator|+
name|titleHeight
operator|+
name|bw
operator|+
name|bbw
argument_list|)
decl_stmt|;
name|region
operator|=
name|r
expr_stmt|;
name|region
operator|-=
name|rect
expr_stmt|;
block|}
break|break;
case|case
name|Title
case|:
block|{
name|QRect
name|r
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|+
operator|(
name|hasSysMenu
condition|?
name|menu_width
else|:
literal|0
operator|)
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|titleHeight
argument_list|,
name|rect
operator|.
name|width
argument_list|()
operator|-
operator|(
name|hasSysMenu
condition|?
name|menu_width
else|:
literal|0
operator|)
operator|-
name|close_width
operator|-
operator|(
name|hasMaximize
condition|?
name|maximize_width
else|:
literal|0
operator|)
operator|-
operator|(
name|hasMinimize
condition|?
name|minimize_width
else|:
literal|0
operator|)
operator|-
operator|(
name|hasContextHelp
condition|?
name|help_width
else|:
literal|0
operator|)
argument_list|,
name|titleHeight
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|width
argument_list|()
operator|>
literal|0
condition|)
name|region
operator|=
name|r
expr_stmt|;
block|}
break|break;
case|case
name|Top
case|:
block|{
name|QRect
name|r
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|+
name|CORNER_GRAB
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|titleHeight
operator|-
name|bw
argument_list|,
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|2
operator|*
name|CORNER_GRAB
argument_list|,
name|bw
argument_list|)
decl_stmt|;
name|region
operator|=
name|r
expr_stmt|;
block|}
break|break;
case|case
name|Left
case|:
block|{
name|QRect
name|r
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|-
name|bw
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|titleHeight
operator|+
name|CORNER_GRAB
argument_list|,
name|bw
argument_list|,
name|rect
operator|.
name|height
argument_list|()
operator|+
name|titleHeight
operator|-
literal|2
operator|*
name|CORNER_GRAB
argument_list|)
decl_stmt|;
name|region
operator|=
name|r
expr_stmt|;
block|}
break|break;
case|case
name|Right
case|:
block|{
name|QRect
name|r
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|+
literal|1
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|titleHeight
operator|+
name|CORNER_GRAB
argument_list|,
name|bw
argument_list|,
name|rect
operator|.
name|height
argument_list|()
operator|+
name|titleHeight
operator|-
literal|2
operator|*
name|CORNER_GRAB
argument_list|)
decl_stmt|;
name|region
operator|=
name|r
expr_stmt|;
block|}
break|break;
case|case
name|Bottom
case|:
block|{
name|QRect
name|r
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|+
name|CORNER_GRAB
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
operator|+
literal|1
argument_list|,
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|2
operator|*
name|CORNER_GRAB
argument_list|,
name|bw
argument_list|)
decl_stmt|;
name|region
operator|=
name|r
expr_stmt|;
block|}
break|break;
case|case
name|TopLeft
case|:
block|{
name|QRect
name|r1
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|-
name|bw
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|bw
operator|-
name|titleHeight
argument_list|,
name|CORNER_GRAB
operator|+
name|bw
argument_list|,
name|bw
argument_list|)
decl_stmt|;
name|QRect
name|r2
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|-
name|bw
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|bw
operator|-
name|titleHeight
argument_list|,
name|bw
argument_list|,
name|CORNER_GRAB
operator|+
name|bw
argument_list|)
decl_stmt|;
name|region
operator|=
name|QRegion
argument_list|(
name|r1
argument_list|)
operator|+
name|r2
expr_stmt|;
block|}
break|break;
case|case
name|TopRight
case|:
block|{
name|QRect
name|r1
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|-
name|CORNER_GRAB
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|bw
operator|-
name|titleHeight
argument_list|,
name|CORNER_GRAB
operator|+
name|bw
argument_list|,
name|bw
argument_list|)
decl_stmt|;
name|QRect
name|r2
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|+
literal|1
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|bw
operator|-
name|titleHeight
argument_list|,
name|bw
argument_list|,
name|CORNER_GRAB
operator|+
name|bw
argument_list|)
decl_stmt|;
name|region
operator|=
name|QRegion
argument_list|(
name|r1
argument_list|)
operator|+
name|r2
expr_stmt|;
block|}
break|break;
case|case
name|BottomLeft
case|:
block|{
name|QRect
name|r1
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|-
name|bw
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
operator|+
literal|1
argument_list|,
name|CORNER_GRAB
operator|+
name|bw
argument_list|,
name|bw
argument_list|)
decl_stmt|;
name|QRect
name|r2
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|-
name|bw
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|CORNER_GRAB
argument_list|,
name|bw
argument_list|,
name|CORNER_GRAB
operator|+
name|bw
argument_list|)
decl_stmt|;
name|region
operator|=
name|QRegion
argument_list|(
name|r1
argument_list|)
operator|+
name|r2
expr_stmt|;
block|}
break|break;
case|case
name|BottomRight
case|:
block|{
name|QRect
name|r1
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|-
name|CORNER_GRAB
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
operator|+
literal|1
argument_list|,
name|CORNER_GRAB
operator|+
name|bw
argument_list|,
name|bw
argument_list|)
decl_stmt|;
name|QRect
name|r2
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|+
literal|1
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|CORNER_GRAB
argument_list|,
name|bw
argument_list|,
name|CORNER_GRAB
operator|+
name|bw
argument_list|)
decl_stmt|;
name|region
operator|=
name|QRegion
argument_list|(
name|r1
argument_list|)
operator|+
name|r2
expr_stmt|;
block|}
break|break;
case|case
name|Menu
case|:
block|{
if|if
condition|(
name|hasSysMenu
condition|)
block|{
name|region
operator|=
name|QRect
argument_list|(
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|titleHeight
argument_list|,
name|menu_width
argument_list|,
name|titleHeight
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|Help
case|:
block|{
if|if
condition|(
name|hasContextHelp
condition|)
block|{
name|QRect
name|r
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|-
name|close_width
operator|-
operator|(
name|hasMaximize
condition|?
name|maximize_width
else|:
literal|0
operator|)
operator|-
operator|(
name|hasMinimize
condition|?
name|minimize_width
else|:
literal|0
operator|)
operator|-
name|help_width
operator|+
literal|1
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|titleHeight
argument_list|,
name|help_width
argument_list|,
name|titleHeight
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|left
argument_list|()
operator|>
name|rect
operator|.
name|left
argument_list|()
operator|+
name|titleHeight
condition|)
name|region
operator|=
name|r
expr_stmt|;
block|}
block|}
break|break;
case|case
name|Minimize
case|:
block|{
if|if
condition|(
name|hasMinimize
operator|&&
operator|!
name|isMinimized
condition|)
block|{
name|QRect
name|r
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|-
name|close_width
operator|-
operator|(
name|hasMaximize
condition|?
name|maximize_width
else|:
literal|0
operator|)
operator|-
name|minimize_width
operator|+
literal|1
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|titleHeight
argument_list|,
name|minimize_width
argument_list|,
name|titleHeight
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|left
argument_list|()
operator|>
name|rect
operator|.
name|left
argument_list|()
operator|+
name|titleHeight
condition|)
name|region
operator|=
name|r
expr_stmt|;
block|}
block|}
break|break;
case|case
name|Maximize
case|:
block|{
if|if
condition|(
name|hasMaximize
operator|&&
operator|!
name|isMaximized
condition|)
block|{
name|QRect
name|r
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|-
name|close_width
operator|-
name|maximize_width
operator|+
literal|1
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|titleHeight
argument_list|,
name|maximize_width
argument_list|,
name|titleHeight
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|left
argument_list|()
operator|>
name|rect
operator|.
name|left
argument_list|()
operator|+
name|titleHeight
condition|)
name|region
operator|=
name|r
expr_stmt|;
block|}
block|}
break|break;
case|case
name|Normalize
case|:
block|{
if|if
condition|(
name|hasMinimize
operator|&&
name|isMinimized
condition|)
block|{
name|QRect
name|r
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|-
name|close_width
operator|-
operator|(
name|hasMaximize
condition|?
name|maximize_width
else|:
literal|0
operator|)
operator|-
name|minimize_width
operator|+
literal|1
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|titleHeight
argument_list|,
name|minimize_width
argument_list|,
name|titleHeight
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|left
argument_list|()
operator|>
name|rect
operator|.
name|left
argument_list|()
operator|+
name|titleHeight
condition|)
name|region
operator|=
name|r
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hasMaximize
operator|&&
name|isMaximized
condition|)
block|{
name|QRect
name|r
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|-
name|close_width
operator|-
name|maximize_width
operator|+
literal|1
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|titleHeight
argument_list|,
name|maximize_width
argument_list|,
name|titleHeight
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|left
argument_list|()
operator|>
name|rect
operator|.
name|left
argument_list|()
operator|+
name|titleHeight
condition|)
name|region
operator|=
name|r
expr_stmt|;
block|}
block|}
break|break;
case|case
name|Close
case|:
block|{
name|QRect
name|r
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|-
name|close_width
operator|+
literal|1
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|titleHeight
argument_list|,
name|close_width
argument_list|,
name|titleHeight
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|left
argument_list|()
operator|>
name|rect
operator|.
name|left
argument_list|()
operator|+
name|titleHeight
condition|)
name|region
operator|=
name|r
expr_stmt|;
block|}
break|break;
default|default:
block|{
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|i
condition|)
block|{
if|if
condition|(
name|i
operator|&
name|decorationRegion
condition|)
name|region
operator|+=
name|this
operator|->
name|region
argument_list|(
name|widget
argument_list|,
name|rect
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|i
operator|<<=
literal|1
expr_stmt|;
block|}
block|}
break|break;
block|}
return|return
name|region
return|;
block|}
end_function
begin_comment
comment|/*!   Paints the border and title decoration for the top-level \a widget   using the \a painter provided and the decoration \a state. The value   of \a decorationRegion is a combination of the bitmask values of   enum DecorationRegion.    Note that Qt for Embedded Linux expects this function to return true if any of   the widget's decorations are repainted; otherwise it returns false.  */
end_comment
begin_function
DECL|function|paint
name|bool
name|QDecorationDefault
operator|::
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|int
name|decorationRegion
parameter_list|,
name|DecorationState
name|state
parameter_list|)
block|{
if|if
condition|(
name|decorationRegion
operator|==
name|None
condition|)
return|return
literal|false
return|;
specifier|const
name|QRect
name|titleRect
init|=
name|QDecoration
operator|::
name|region
argument_list|(
name|widget
argument_list|,
name|Title
argument_list|)
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
specifier|const
name|QPalette
name|pal
init|=
name|QApplication
operator|::
name|palette
argument_list|()
decl_stmt|;
name|int
name|titleHeight
init|=
name|titleRect
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|titleWidth
init|=
name|titleRect
operator|.
name|width
argument_list|()
decl_stmt|;
name|QRegion
name|oldClipRegion
init|=
name|painter
operator|->
name|clipRegion
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|widget
operator|->
name|windowFlags
argument_list|()
decl_stmt|;
name|bool
name|hasBorder
init|=
operator|!
name|widget
operator|->
name|isMaximized
argument_list|()
decl_stmt|;
name|bool
name|hasTitle
init|=
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
decl_stmt|;
name|bool
name|hasSysMenu
init|=
name|flags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
decl_stmt|;
name|bool
name|hasContextHelp
init|=
name|flags
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
decl_stmt|;
name|bool
name|hasMinimize
init|=
name|flags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
decl_stmt|;
name|bool
name|hasMaximize
init|=
name|flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
decl_stmt|;
name|bool
name|paintAll
init|=
operator|(
name|decorationRegion
operator|==
name|int
argument_list|(
name|All
argument_list|)
operator|)
decl_stmt|;
name|bool
name|handled
init|=
literal|false
decl_stmt|;
name|bool
name|porterDuff
init|=
name|painter
operator|->
name|paintEngine
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QPaintEngine
operator|::
name|PorterDuff
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|paintAll
operator|||
name|decorationRegion
operator|&
name|Borders
operator|)
operator|&&
name|state
operator|==
name|Normal
operator|&&
name|hasBorder
condition|)
block|{
if|if
condition|(
name|hasTitle
condition|)
block|{
comment|// reduce flicker
name|QRect
name|rect
argument_list|(
name|widget
operator|->
name|rect
argument_list|()
argument_list|)
decl_stmt|;
name|QRect
name|r
argument_list|(
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|titleHeight
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|titleHeight
argument_list|)
decl_stmt|;
name|painter
operator|->
name|setClipRegion
argument_list|(
name|oldClipRegion
operator|-
name|r
argument_list|)
expr_stmt|;
block|}
name|QRect
name|br
init|=
name|QDecoration
operator|::
name|region
argument_list|(
name|widget
argument_list|)
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|porterDuff
condition|)
name|painter
operator|->
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Source
argument_list|)
expr_stmt|;
name|qDrawWinPanel
argument_list|(
name|painter
argument_list|,
name|br
operator|.
name|x
argument_list|()
argument_list|,
name|br
operator|.
name|y
argument_list|()
argument_list|,
name|br
operator|.
name|width
argument_list|()
argument_list|,
name|br
operator|.
name|height
argument_list|()
argument_list|,
name|pal
argument_list|,
literal|false
argument_list|,
operator|&
name|pal
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|porterDuff
condition|)
name|painter
operator|->
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_SourceOver
argument_list|)
expr_stmt|;
name|handled
operator||=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|paintAll
operator|||
name|decorationRegion
operator|&
name|Title
operator|&&
name|titleWidth
operator|>
literal|0
operator|)
operator|&&
name|state
operator|==
name|Normal
operator|&&
name|hasTitle
condition|)
block|{
name|painter
operator|->
name|setClipRegion
argument_list|(
name|oldClipRegion
argument_list|)
expr_stmt|;
name|QBrush
name|titleBrush
decl_stmt|;
name|QPen
name|titlePen
decl_stmt|;
if|if
condition|(
name|widget
operator|==
name|qApp
operator|->
name|activeWindow
argument_list|()
condition|)
block|{
name|titleBrush
operator|=
name|pal
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|)
expr_stmt|;
name|titlePen
operator|=
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|titleBrush
operator|=
name|pal
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
expr_stmt|;
name|titlePen
operator|=
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|porterDuff
condition|)
name|painter
operator|->
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Source
argument_list|)
expr_stmt|;
name|qDrawShadePanel
argument_list|(
name|painter
argument_list|,
name|titleRect
operator|.
name|x
argument_list|()
argument_list|,
name|titleRect
operator|.
name|y
argument_list|()
argument_list|,
name|titleRect
operator|.
name|width
argument_list|()
argument_list|,
name|titleRect
operator|.
name|height
argument_list|()
argument_list|,
name|pal
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
operator|&
name|titleBrush
argument_list|)
expr_stmt|;
if|if
condition|(
name|porterDuff
condition|)
name|painter
operator|->
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_SourceOver
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|titlePen
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawText
argument_list|(
name|titleRect
operator|.
name|x
argument_list|()
operator|+
literal|4
argument_list|,
name|titleRect
operator|.
name|y
argument_list|()
argument_list|,
name|titleRect
operator|.
name|width
argument_list|()
operator|-
literal|8
argument_list|,
name|titleRect
operator|.
name|height
argument_list|()
argument_list|,
name|Qt
operator|::
name|AlignVCenter
argument_list|,
name|windowTitleFor
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
name|handled
operator||=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|!=
name|Hover
condition|)
block|{
name|painter
operator|->
name|setClipRegion
argument_list|(
name|oldClipRegion
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|paintAll
operator|||
name|decorationRegion
operator|&
name|Menu
operator|)
operator|&&
name|hasSysMenu
condition|)
block|{
name|paintButton
argument_list|(
name|painter
argument_list|,
name|widget
argument_list|,
name|Menu
argument_list|,
name|state
argument_list|,
name|pal
argument_list|)
expr_stmt|;
name|handled
operator||=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|paintAll
operator|||
name|decorationRegion
operator|&
name|Help
operator|)
operator|&&
name|hasContextHelp
condition|)
block|{
name|paintButton
argument_list|(
name|painter
argument_list|,
name|widget
argument_list|,
name|Help
argument_list|,
name|state
argument_list|,
name|pal
argument_list|)
expr_stmt|;
name|handled
operator||=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|paintAll
operator|||
name|decorationRegion
operator|&
name|Minimize
operator|)
operator|&&
name|hasMinimize
condition|)
block|{
name|paintButton
argument_list|(
name|painter
argument_list|,
name|widget
argument_list|,
name|Minimize
argument_list|,
name|state
argument_list|,
name|pal
argument_list|)
expr_stmt|;
name|handled
operator||=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|paintAll
operator|||
name|decorationRegion
operator|&
name|Maximize
operator|)
operator|&&
name|hasMaximize
condition|)
block|{
name|paintButton
argument_list|(
name|painter
argument_list|,
name|widget
argument_list|,
operator|(
operator|(
name|widget
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|?
name|Normalize
else|:
name|Maximize
operator|)
argument_list|,
name|state
argument_list|,
name|pal
argument_list|)
expr_stmt|;
name|handled
operator||=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|paintAll
operator|||
name|decorationRegion
operator|&
name|Close
condition|)
block|{
name|paintButton
argument_list|(
name|painter
argument_list|,
name|widget
argument_list|,
name|Close
argument_list|,
name|state
argument_list|,
name|pal
argument_list|)
expr_stmt|;
name|handled
operator||=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|handled
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QDecorationDefault::paintButton(QPainter *painter, const     QWidget *widget, int buttonRegion, DecorationState state,     const QPalette&palette)      Paints a region of the top-level \a widget. The region is     painted in the specified decoration \a state using the     \a painter and \a palette provided. The region to be painted is specified     by \a buttonRegion, which is a combination of the bitmask values of     DecorationRegion. If the value of \a buttonRegion is one of \e Help,     \e Menu, \e Close, \e Minimize, \e Maximize, and \e Normalize, the     button pixmap for that region is painted.      \sa pixmapFor()  */
end_comment
begin_function
DECL|function|paintButton
name|void
name|QDecorationDefault
operator|::
name|paintButton
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|int
name|buttonRegion
parameter_list|,
name|DecorationState
name|state
parameter_list|,
specifier|const
name|QPalette
modifier|&
name|pal
parameter_list|)
block|{
name|int
name|xoff
init|=
literal|2
decl_stmt|;
name|int
name|yoff
init|=
literal|2
decl_stmt|;
specifier|const
name|QPixmap
name|pm
init|=
name|pixmapFor
argument_list|(
name|widget
argument_list|,
name|buttonRegion
argument_list|,
name|xoff
argument_list|,
name|yoff
argument_list|)
decl_stmt|;
name|QRect
name|brect
argument_list|(
name|QDecoration
operator|::
name|region
argument_list|(
name|widget
argument_list|,
name|buttonRegion
argument_list|)
operator|.
name|boundingRect
argument_list|()
argument_list|)
decl_stmt|;
name|bool
name|porterDuff
init|=
name|painter
operator|->
name|paintEngine
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QPaintEngine
operator|::
name|PorterDuff
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|&
name|QDecoration
operator|::
name|Pressed
condition|)
block|{
if|if
condition|(
name|porterDuff
condition|)
name|painter
operator|->
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Source
argument_list|)
expr_stmt|;
name|qDrawWinPanel
argument_list|(
name|painter
argument_list|,
name|brect
argument_list|,
name|pal
argument_list|,
literal|true
argument_list|,
operator|&
name|pal
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|porterDuff
condition|)
name|painter
operator|->
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_SourceOver
argument_list|)
expr_stmt|;
operator|++
name|xoff
expr_stmt|;
operator|++
name|yoff
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|brect
argument_list|,
name|pal
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|pm
operator|.
name|isNull
argument_list|()
condition|)
name|painter
operator|->
name|drawPixmap
argument_list|(
name|brect
operator|.
name|x
argument_list|()
operator|+
name|xoff
argument_list|,
name|brect
operator|.
name|y
argument_list|()
operator|+
name|yoff
argument_list|,
name|pm
argument_list|)
expr_stmt|;
block|}
end_function
begin_function_decl
specifier|extern
name|QString
name|qt_setWindowTitle_helperHelper
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QWidget
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*!   \internal  */
end_comment
begin_function
DECL|function|windowTitleFor
name|QString
name|QDecorationDefault
operator|::
name|windowTitleFor
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
return|return
name|qt_setWindowTitle_helperHelper
argument_list|(
name|widget
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_DECORATION_DEFAULT
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
