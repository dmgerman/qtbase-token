begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QWINDOWSYSTEM_QWS_H
end_ifndef
begin_define
DECL|macro|QWINDOWSYSTEM_QWS_H
define|#
directive|define
name|QWINDOWSYSTEM_QWS_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmap.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qwsevent_qws.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qkbd_qws.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qregion.h>
end_include
begin_function
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
parameter_list|(
name|Gui
parameter_list|)
function|struct QWSWindowPrivate;
end_function
begin_decl_stmt
DECL|variable|QWSCursor
name|class
name|QWSCursor
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWSClient
name|class
name|QWSClient
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWSRegionManager
name|class
name|QWSRegionManager
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QBrush
name|class
name|QBrush
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QVariant
name|class
name|QVariant
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QInputMethodEvent
name|class
name|QInputMethodEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWSInputMethod
name|class
name|QWSInputMethod
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWSBackingStore
name|class
name|QWSBackingStore
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWSWindowSurface
name|class
name|QWSWindowSurface
decl_stmt|;
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|QT3_SUPPORT
end_ifdef
begin_decl_stmt
DECL|variable|QImage
name|class
name|QImage
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QColor
name|class
name|QColor
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|class
name|QWSInternalWindowInfo
block|{
name|public
label|:
name|int
name|winid
decl_stmt|;
name|unsigned
name|int
name|clientid
decl_stmt|;
name|QString
name|name
decl_stmt|;
comment|// Corresponds to QObject name of top-level widget
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QWSScreenSaver
block|{
name|public
label|:
name|virtual
operator|~
name|QWSScreenSaver
argument_list|()
expr_stmt|;
name|virtual
name|void
name|restore
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|save
parameter_list|(
name|int
name|level
parameter_list|)
init|=
literal|0
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QWSWindow
block|{
name|friend
name|class
name|QWSServer
decl_stmt|;
name|friend
name|class
name|QWSServerPrivate
decl_stmt|;
name|public
label|:
name|QWSWindow
argument_list|(
argument|int i
argument_list|,
argument|QWSClient* client
argument_list|)
empty_stmt|;
operator|~
name|QWSWindow
argument_list|()
expr_stmt|;
name|int
name|winId
argument_list|()
specifier|const
block|{
return|return
name|id
return|;
block|}
specifier|const
name|QString
operator|&
name|name
argument_list|()
specifier|const
block|{
return|return
name|rgnName
return|;
block|}
specifier|const
name|QString
operator|&
name|caption
argument_list|()
specifier|const
block|{
return|return
name|rgnCaption
return|;
block|}
name|QWSClient
operator|*
name|client
argument_list|()
specifier|const
block|{
return|return
name|c
return|;
block|}
specifier|const
name|QRegion
operator|&
name|requestedRegion
argument_list|()
specifier|const
block|{
return|return
name|requested_region
return|;
block|}
name|QRegion
name|allocatedRegion
argument_list|()
specifier|const
expr_stmt|;
name|QRegion
name|paintedRegion
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isVisible
argument_list|()
specifier|const
block|{
return|return
operator|!
name|requested_region
operator|.
name|isEmpty
argument_list|()
return|;
block|}
name|bool
name|isPartiallyObscured
argument_list|()
specifier|const
block|{
return|return
name|requested_region
operator|!=
name|allocatedRegion
argument_list|()
return|;
block|}
name|bool
name|isFullyObscured
argument_list|()
specifier|const
block|{
return|return
name|allocatedRegion
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
enum|enum
name|State
block|{
name|NoState
block|,
name|Hidden
block|,
name|Showing
block|,
name|Visible
block|,
name|Hiding
block|,
name|Raising
block|,
name|Lowering
block|,
name|Moving
block|,
name|ChangingGeometry
block|,
name|Destroyed
block|}
enum|;
name|State
name|state
argument_list|()
specifier|const
expr_stmt|;
name|Qt
operator|::
name|WindowFlags
name|windowFlags
argument_list|()
specifier|const
expr_stmt|;
name|QRegion
name|dirtyOnScreen
argument_list|()
specifier|const
expr_stmt|;
name|void
name|raise
parameter_list|()
function_decl|;
name|void
name|lower
parameter_list|()
function_decl|;
name|void
name|show
parameter_list|()
function_decl|;
name|void
name|hide
parameter_list|()
function_decl|;
name|void
name|setActiveWindow
parameter_list|()
function_decl|;
name|bool
name|isOpaque
argument_list|()
specifier|const
block|{
return|return
name|opaque
operator|&&
name|_opacity
operator|==
literal|255
return|;
block|}
name|uint
name|opacity
argument_list|()
specifier|const
block|{
return|return
name|_opacity
return|;
block|}
name|QWSWindowSurface
operator|*
name|windowSurface
argument_list|()
specifier|const
block|{
return|return
name|surface
return|;
block|}
name|private
label|:
name|bool
name|hidden
argument_list|()
specifier|const
block|{
return|return
name|requested_region
operator|.
name|isEmpty
argument_list|()
return|;
block|}
name|bool
name|forClient
argument_list|(
specifier|const
name|QWSClient
operator|*
name|cl
argument_list|)
decl|const
block|{
return|return
name|cl
operator|==
name|c
return|;
block|}
name|void
name|setName
parameter_list|(
specifier|const
name|QString
modifier|&
name|n
parameter_list|)
function_decl|;
name|void
name|setCaption
parameter_list|(
specifier|const
name|QString
modifier|&
name|c
parameter_list|)
function_decl|;
name|void
name|focus
parameter_list|(
name|bool
name|get
parameter_list|)
function_decl|;
name|int
name|focusPriority
argument_list|()
specifier|const
block|{
return|return
name|last_focus_time
return|;
block|}
name|void
name|operation
argument_list|(
name|QWSWindowOperationEvent
operator|::
name|Operation
name|o
argument_list|)
decl_stmt|;
name|void
name|shuttingDown
parameter_list|()
block|{
name|last_focus_time
operator|=
literal|0
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QT_QWS_CLIENTBLIT
name|QRegion
name|directPaintRegion
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|void
name|setDirectPaintRegion
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|topmost
parameter_list|)
function_decl|;
endif|#
directive|endif
specifier|inline
name|void
name|setAllocatedRegion
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
function_decl|;
name|void
name|createSurface
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_QWSEMBEDWIDGET
name|void
name|startEmbed
parameter_list|(
name|QWSWindow
modifier|*
name|window
parameter_list|)
function_decl|;
name|void
name|stopEmbed
parameter_list|(
name|QWSWindow
modifier|*
name|window
parameter_list|)
function_decl|;
endif|#
directive|endif
name|private
label|:
name|int
name|id
decl_stmt|;
name|QString
name|rgnName
decl_stmt|;
name|QString
name|rgnCaption
decl_stmt|;
name|bool
name|modified
decl_stmt|;
name|bool
name|onTop
decl_stmt|;
name|QWSClient
modifier|*
name|c
decl_stmt|;
name|QRegion
name|requested_region
decl_stmt|;
name|QRegion
name|exposed
decl_stmt|;
name|int
name|last_focus_time
decl_stmt|;
name|QWSWindowSurface
modifier|*
name|surface
decl_stmt|;
name|uint
name|_opacity
decl_stmt|;
name|bool
name|opaque
decl_stmt|;
name|QWSWindowPrivate
modifier|*
name|d
decl_stmt|;
ifdef|#
directive|ifdef
name|QT3_SUPPORT
specifier|inline
name|QT3_SUPPORT
name|QRegion
name|requested
argument_list|()
specifier|const
block|{
return|return
name|requested_region
return|;
block|}
comment|//    inline QT3_SUPPORT QRegion allocation() const { return allocated_region; }
endif|#
directive|endif
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SOUND
end_ifndef
begin_decl_stmt
DECL|variable|QWSSoundServer
name|class
name|QWSSoundServer
decl_stmt|;
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|QT_USE_OLD_QWS_SOUND
end_ifdef
begin_decl_stmt
DECL|variable|QWSSoundServerData
name|class
name|QWSSoundServerData
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QWSSoundServer
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
operator|:
name|QWSSoundServer
argument_list|(
name|QObject
operator|*
name|parent
argument_list|)
block|;
operator|~
name|QWSSoundServer
argument_list|()
block|;
name|void
name|playFile
argument_list|(
specifier|const
name|QString
operator|&
name|filename
argument_list|)
block|;
name|private
name|Q_SLOTS
operator|:
name|void
name|feedDevice
argument_list|(
argument|int fd
argument_list|)
block|;
name|private
operator|:
name|QWSSoundServerData
operator|*
name|d
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*********************************************************************  *  * Class: QWSServer  *  *********************************************************************/
end_comment
begin_decl_stmt
DECL|variable|QWSMouseHandler
name|class
name|QWSMouseHandler
decl_stmt|;
end_decl_stmt
begin_struct_decl
struct_decl|struct
name|QWSCommandStruct
struct_decl|;
end_struct_decl
begin_decl_stmt
DECL|variable|QWSServerPrivate
name|class
name|QWSServerPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWSServer
name|class
name|QWSServer
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|Q_GUI_EXPORT
name|QWSServer
modifier|*
name|qwsServer
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QWSServer
range|:
name|public
name|QObject
block|{
name|friend
name|class
name|QCopChannel
block|;
name|friend
name|class
name|QWSMouseHandler
block|;
name|friend
name|class
name|QWSWindow
block|;
name|friend
name|class
name|QWSDisplay
block|;
name|friend
name|class
name|QWSInputMethod
block|;
name|Q_OBJECT
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QWSServer
argument_list|)
name|public
operator|:
name|explicit
name|QWSServer
argument_list|(
argument|int flags =
literal|0
argument_list|,
argument|QObject *parent=
literal|0
argument_list|)
block|;
ifdef|#
directive|ifdef
name|QT3_SUPPORT
name|QT3_SUPPORT_CONSTRUCTOR
name|QWSServer
argument_list|(
argument|int flags
argument_list|,
argument|QObject *parent
argument_list|,
argument|const char *name
argument_list|)
block|;
endif|#
directive|endif
operator|~
name|QWSServer
argument_list|()
block|;     enum
name|ServerFlags
block|{
name|DisableKeyboard
operator|=
literal|0x01
block|,
name|DisableMouse
operator|=
literal|0x02
block|}
block|;
specifier|static
name|void
name|sendKeyEvent
argument_list|(
argument|int unicode
argument_list|,
argument|int keycode
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|,
argument|bool isPress
argument_list|,
argument|bool autoRepeat
argument_list|)
block|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_KEYBOARD
specifier|static
name|void
name|processKeyEvent
argument_list|(
argument|int unicode
argument_list|,
argument|int keycode
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|,
argument|bool isPress
argument_list|,
argument|bool autoRepeat
argument_list|)
block|;
endif|#
directive|endif
specifier|static
name|QWSServer
operator|*
name|instance
argument_list|()
block|{
return|return
name|qwsServer
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_QWS_INPUTMETHODS
ifdef|#
directive|ifdef
name|QT3_SUPPORT
expr|enum
name|IMState
block|{
name|IMCompose
block|,
name|IMEnd
block|,
name|IMStart
operator|=
name|IMCompose
block|}
block|;
endif|#
directive|endif
block|enum
name|IMMouse
block|{
name|MousePress
block|,
name|MouseRelease
block|,
name|MouseMove
block|,
name|MouseOutside
block|}
block|;
comment|//MouseMove reserved but not used
name|void
name|sendIMEvent
argument_list|(
specifier|const
name|QInputMethodEvent
operator|*
argument_list|)
block|;
name|void
name|sendIMQuery
argument_list|(
argument|int property
argument_list|)
block|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_QWS_KEYBOARD
name|class
name|KeyboardFilter
block|{
name|public
operator|:
name|virtual
operator|~
name|KeyboardFilter
argument_list|()
block|{}
name|virtual
name|bool
name|filter
argument_list|(
argument|int unicode
argument_list|,
argument|int keycode
argument_list|,
argument|int modifiers
argument_list|,
argument|bool isPress
argument_list|,
argument|bool autoRepeat
argument_list|)
operator|=
literal|0
block|;     }
block|;
specifier|static
name|void
name|addKeyboardFilter
argument_list|(
name|KeyboardFilter
operator|*
name|f
argument_list|)
block|;
specifier|static
name|void
name|removeKeyboardFilter
argument_list|()
block|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_QWS_INPUTMETHODS
specifier|static
name|void
name|setCurrentInputMethod
argument_list|(
name|QWSInputMethod
operator|*
name|im
argument_list|)
block|;
specifier|static
name|void
name|resetInputMethod
argument_list|()
block|;
endif|#
directive|endif
specifier|static
name|void
name|setDefaultMouse
argument_list|(
specifier|const
name|char
operator|*
argument_list|)
block|;
specifier|static
name|void
name|setDefaultKeyboard
argument_list|(
specifier|const
name|char
operator|*
argument_list|)
block|;
specifier|static
name|void
name|setMaxWindowRect
argument_list|(
specifier|const
name|QRect
operator|&
argument_list|)
block|;
specifier|static
name|void
name|sendMouseEvent
argument_list|(
argument|const QPoint& pos
argument_list|,
argument|int state
argument_list|,
argument|int wheel =
literal|0
argument_list|)
block|;
specifier|static
name|void
name|setBackground
argument_list|(
specifier|const
name|QBrush
operator|&
argument_list|)
block|;
ifdef|#
directive|ifdef
name|QT3_SUPPORT
specifier|static
name|QT3_SUPPORT
name|void
name|setDesktopBackground
argument_list|(
specifier|const
name|QImage
operator|&
name|img
argument_list|)
block|;
specifier|static
name|QT3_SUPPORT
name|void
name|setDesktopBackground
argument_list|(
specifier|const
name|QColor
operator|&
argument_list|)
block|;
endif|#
directive|endif
specifier|static
name|QWSMouseHandler
operator|*
name|mouseHandler
argument_list|()
block|;
specifier|static
specifier|const
name|QList
operator|<
name|QWSMouseHandler
operator|*
operator|>
operator|&
name|mouseHandlers
argument_list|()
block|;
specifier|static
name|void
name|setMouseHandler
argument_list|(
name|QWSMouseHandler
operator|*
argument_list|)
block|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_KEYBOARD
specifier|static
name|QWSKeyboardHandler
operator|*
name|keyboardHandler
argument_list|()
block|;
specifier|static
name|void
name|setKeyboardHandler
argument_list|(
name|QWSKeyboardHandler
operator|*
name|kh
argument_list|)
block|;
endif|#
directive|endif
name|QWSWindow
operator|*
name|windowAt
argument_list|(
specifier|const
name|QPoint
operator|&
name|pos
argument_list|)
block|;
specifier|const
name|QList
operator|<
name|QWSWindow
operator|*
operator|>
operator|&
name|clientWindows
argument_list|()
block|;
name|void
name|openMouse
argument_list|()
block|;
name|void
name|closeMouse
argument_list|()
block|;
name|void
name|suspendMouse
argument_list|()
block|;
name|void
name|resumeMouse
argument_list|()
block|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_KEYBOARD
name|void
name|openKeyboard
argument_list|()
block|;
name|void
name|closeKeyboard
argument_list|()
block|;
endif|#
directive|endif
specifier|static
name|void
name|setScreenSaver
argument_list|(
name|QWSScreenSaver
operator|*
argument_list|)
block|;
specifier|static
name|void
name|setScreenSaverIntervals
argument_list|(
name|int
operator|*
name|ms
argument_list|)
block|;
specifier|static
name|void
name|setScreenSaverInterval
argument_list|(
name|int
argument_list|)
block|;
specifier|static
name|void
name|setScreenSaverBlockLevel
argument_list|(
name|int
argument_list|)
block|;
specifier|static
name|bool
name|screenSaverActive
argument_list|()
block|;
specifier|static
name|void
name|screenSaverActivate
argument_list|(
name|bool
argument_list|)
block|;
comment|// the following are internal.
name|void
name|refresh
argument_list|()
block|;
name|void
name|refresh
argument_list|(
name|QRegion
operator|&
argument_list|)
block|;
name|void
name|enablePainting
argument_list|(
name|bool
argument_list|)
block|;
specifier|static
name|void
name|processEventQueue
argument_list|()
block|;
specifier|static
name|QList
operator|<
name|QWSInternalWindowInfo
operator|*
operator|>
operator|*
name|windowList
argument_list|()
block|;
name|void
name|sendPropertyNotifyEvent
argument_list|(
argument|int property
argument_list|,
argument|int state
argument_list|)
block|;
specifier|static
name|QPoint
name|mousePosition
block|;
specifier|static
name|void
name|startup
argument_list|(
argument|int flags
argument_list|)
block|;
specifier|static
name|void
name|closedown
argument_list|()
block|;
specifier|static
name|void
name|beginDisplayReconfigure
argument_list|()
block|;
specifier|static
name|void
name|endDisplayReconfigure
argument_list|()
block|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
specifier|static
name|void
name|setCursorVisible
argument_list|(
name|bool
argument_list|)
block|;
specifier|static
name|bool
name|isCursorVisible
argument_list|()
block|;
endif|#
directive|endif
specifier|const
name|QBrush
operator|&
name|backgroundBrush
argument_list|()
specifier|const
block|;      enum
name|WindowEvent
block|{
name|Create
operator|=
literal|0x0001
block|,
name|Destroy
operator|=
literal|0x0002
block|,
name|Hide
operator|=
literal|0x0004
block|,
name|Show
operator|=
literal|0x0008
block|,
name|Raise
operator|=
literal|0x0010
block|,
name|Lower
operator|=
literal|0x0020
block|,
name|Geometry
operator|=
literal|0x0040
block|,
name|Active
operator|=
literal|0x0080
block|,
name|Name
operator|=
literal|0x0100
block|}
block|;
name|Q_SIGNALS
operator|:
name|void
name|windowEvent
argument_list|(
argument|QWSWindow *w
argument_list|,
argument|QWSServer::WindowEvent e
argument_list|)
block|;
ifndef|#
directive|ifndef
name|QT_NO_COP
name|void
name|newChannel
argument_list|(
specifier|const
name|QString
operator|&
name|channel
argument_list|)
block|;
name|void
name|removedChannel
argument_list|(
specifier|const
name|QString
operator|&
name|channel
argument_list|)
block|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_QWS_INPUTMETHODS
name|void
name|markedText
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
block|;
endif|#
directive|endif
name|protected
operator|:
name|void
name|timerEvent
argument_list|(
name|QTimerEvent
operator|*
name|e
argument_list|)
block|;
name|private
operator|:
name|friend
name|class
name|QApplicationPrivate
block|;
name|void
name|updateWindowRegions
argument_list|()
specifier|const
block|;
ifdef|#
directive|ifdef
name|QT3_SUPPORT
ifndef|#
directive|ifndef
name|QT_NO_QWS_KEYBOARD
specifier|static
specifier|inline
name|QT3_SUPPORT
name|void
name|setKeyboardFilter
argument_list|(
argument|QWSServer::KeyboardFilter *f
argument_list|)
block|{
if|if
condition|(
name|f
condition|)
name|addKeyboardFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
else|else
name|removeKeyboardFilter
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
endif|#
directive|endif
name|private
operator|:
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_clientClosed()
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_doClient()
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_deleteWindowsLater()
argument_list|)
endif|#
directive|endif
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_screenSaverWake()
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_screenSaverSleep()
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_screenSaverTimeout()
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_newConnection()
argument_list|)
endif|#
directive|endif
expr|}
block|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_INPUTMETHODS
name|class
name|Q_GUI_EXPORT
name|QWSInputMethod
operator|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
operator|:
name|QWSInputMethod
argument_list|()
block|;
name|virtual
operator|~
name|QWSInputMethod
argument_list|()
block|;      enum
name|UpdateType
block|{
name|Update
block|,
name|FocusIn
block|,
name|FocusOut
block|,
name|Reset
block|,
name|Destroyed
block|}
block|;
name|virtual
name|bool
name|filter
argument_list|(
argument|int unicode
argument_list|,
argument|int keycode
argument_list|,
argument|int modifiers
argument_list|,
argument|bool isPress
argument_list|,
argument|bool autoRepeat
argument_list|)
block|;
name|virtual
name|bool
name|filter
argument_list|(
argument|const QPoint&
argument_list|,
argument|int state
argument_list|,
argument|int wheel
argument_list|)
block|;
name|virtual
name|void
name|reset
argument_list|()
block|;
name|virtual
name|void
name|updateHandler
argument_list|(
argument|int type
argument_list|)
block|;
name|virtual
name|void
name|mouseHandler
argument_list|(
argument|int pos
argument_list|,
argument|int state
argument_list|)
block|;
name|virtual
name|void
name|queryResponse
argument_list|(
argument|int property
argument_list|,
argument|const QVariant&
argument_list|)
block|;
name|protected
operator|:
name|uint
name|setInputResolution
argument_list|(
argument|bool isHigh
argument_list|)
block|;
name|uint
name|inputResolutionShift
argument_list|()
specifier|const
block|;
comment|// needed for required transform
name|void
name|sendMouseEvent
argument_list|(
argument|const QPoint&pos
argument_list|,
argument|int state
argument_list|,
argument|int wheel
argument_list|)
block|;
name|void
name|sendEvent
argument_list|(
specifier|const
name|QInputMethodEvent
operator|*
argument_list|)
block|;
name|void
name|sendPreeditString
argument_list|(
argument|const QString&preeditString
argument_list|,
argument|int cursorPosition
argument_list|,
argument|int selectionLength =
literal|0
argument_list|)
block|;
name|void
name|sendCommitString
argument_list|(
argument|const QString&commitString
argument_list|,
argument|int replaceFrom =
literal|0
argument_list|,
argument|int replaceLength =
literal|0
argument_list|)
block|;
name|void
name|sendQuery
argument_list|(
argument|int property
argument_list|)
block|;
ifdef|#
directive|ifdef
name|QT3_SUPPORT
specifier|inline
name|void
name|sendIMEvent
argument_list|(
argument|QWSServer::IMState
argument_list|,
argument|const QString& txt
argument_list|,
argument|int cpos
argument_list|,
argument|int selLen =
literal|0
argument_list|)
block|;
endif|#
directive|endif
name|private
operator|:
name|bool
name|mIResolution
block|; }
block|;
DECL|function|sendEvent
specifier|inline
name|void
name|QWSInputMethod
operator|::
name|sendEvent
argument_list|(
argument|const QInputMethodEvent *ime
argument_list|)
block|{
name|qwsServer
operator|->
name|sendIMEvent
argument_list|(
name|ime
argument_list|)
block|; }
ifdef|#
directive|ifdef
name|QT3_SUPPORT
DECL|function|sendIMEvent
specifier|inline
name|void
name|QWSInputMethod
operator|::
name|sendIMEvent
argument_list|(
argument|QWSServer::IMState state
argument_list|,
argument|const QString& txt
argument_list|,
argument|int cpos
argument_list|,
argument|int selLen
argument_list|)
block|{
if|if
condition|(
name|state
operator|==
name|QWSServer
operator|::
name|IMCompose
condition|)
name|sendPreeditString
argument_list|(
name|txt
argument_list|,
name|cpos
argument_list|,
name|selLen
argument_list|)
expr_stmt|;
else|else
name|sendCommitString
argument_list|(
name|txt
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
DECL|function|sendQuery
specifier|inline
name|void
name|QWSInputMethod
operator|::
name|sendQuery
argument_list|(
argument|int property
argument_list|)
block|{
name|qwsServer
operator|->
name|sendIMQuery
argument_list|(
name|property
argument_list|)
block|; }
comment|// mouse events not inline as involve transformations.
endif|#
directive|endif
comment|// QT_NO_QWS_INPUTMETHODS
comment|/*********************************************************************  *  * Class: QWSClient  *  *********************************************************************/
expr|struct
name|QWSMouseEvent
block|;
DECL|typedef|QWSCursorMap
typedef|typedef
name|QMap
operator|<
name|int
operator|,
name|QWSCursor
operator|*
operator|>
name|QWSCursorMap
expr_stmt|;
DECL|variable|QWSClientPrivate
name|class
name|QWSClientPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWSCommand
name|class
name|QWSCommand
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWSConvertSelectionCommand
name|class
name|QWSConvertSelectionCommand
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QWSClient
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QWSClient
argument_list|)
name|public
operator|:
name|QWSClient
argument_list|(
argument|QObject* parent
argument_list|,
argument|QWS_SOCK_BASE *
argument_list|,
argument|int id
argument_list|)
block|;
operator|~
name|QWSClient
argument_list|()
block|;
name|int
name|socket
argument_list|()
specifier|const
block|;
name|void
name|setIdentity
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
block|;
name|QString
name|identity
argument_list|()
specifier|const
block|{
return|return
name|id
return|;
block|}
name|void
name|sendEvent
argument_list|(
name|QWSEvent
operator|*
name|event
argument_list|)
block|;
name|void
name|sendConnectedEvent
argument_list|(
specifier|const
name|char
operator|*
name|display_spec
argument_list|)
block|;
name|void
name|sendMaxWindowRectEvent
argument_list|(
specifier|const
name|QRect
operator|&
name|rect
argument_list|)
block|;
name|void
name|sendPropertyNotifyEvent
argument_list|(
argument|int property
argument_list|,
argument|int state
argument_list|)
block|;
name|void
name|sendPropertyReplyEvent
argument_list|(
argument|int property
argument_list|,
argument|int len
argument_list|,
argument|const char *data
argument_list|)
block|;
name|void
name|sendSelectionClearEvent
argument_list|(
argument|int windowid
argument_list|)
block|;
name|void
name|sendSelectionRequestEvent
argument_list|(
argument|QWSConvertSelectionCommand *cmd
argument_list|,
argument|int windowid
argument_list|)
block|;
ifndef|#
directive|ifndef
name|QT_QWS_CLIENTBLIT
name|void
name|sendRegionEvent
argument_list|(
argument|int winid
argument_list|,
argument|QRegion rgn
argument_list|,
argument|int type
argument_list|)
block|;
else|#
directive|else
name|void
name|sendRegionEvent
argument_list|(
argument|int winid
argument_list|,
argument|QRegion rgn
argument_list|,
argument|int type
argument_list|,
argument|int id =
literal|0
argument_list|)
block|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_QWSEMBEDWIDGET
name|void
name|sendEmbedEvent
argument_list|(
argument|int winid
argument_list|,
argument|QWSEmbedEvent::Type type
argument_list|,
argument|const QRegion&region = QRegion()
argument_list|)
block|;
endif|#
directive|endif
name|QWSCommand
operator|*
name|readMoreCommand
argument_list|()
block|;
name|int
name|clientId
argument_list|()
specifier|const
block|{
return|return
name|cid
return|;
block|}
name|QWSCursorMap
name|cursors
block|;
comment|// cursors defined by this client
name|Q_SIGNALS
operator|:
name|void
name|connectionClosed
argument_list|()
block|;
name|void
name|readyRead
argument_list|()
block|;
name|private
name|Q_SLOTS
operator|:
name|void
name|closeHandler
argument_list|()
block|;
name|void
name|errorHandler
argument_list|()
block|;
name|private
operator|:
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
name|friend
name|class
name|QWSWindow
block|;
name|void
name|removeUnbufferedSurface
argument_list|()
block|;
name|void
name|addUnbufferedSurface
argument_list|()
block|;
endif|#
directive|endif
name|private
operator|:
name|int
name|socketDescriptor
block|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
name|QWSSocket
operator|*
name|csocket
block|;
endif|#
directive|endif
name|QWSCommand
operator|*
name|command
block|;
name|uint
name|isClosed
operator|:
literal|1
block|;
name|QString
name|id
block|;
name|int
name|cid
block|;
name|friend
name|class
name|QWSServerPrivate
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QWINDOWSYSTEM_QWS_H
end_comment
end_unit
