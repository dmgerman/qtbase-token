begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTRANSPORTAUTH_QWS_H
end_ifndef
begin_define
DECL|macro|QTRANSPORTAUTH_QWS_H
define|#
directive|define
name|QTRANSPORTAUTH_QWS_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_SXE
argument_list|)
operator|||
name|defined
argument_list|(
name|SXE_INSTALLER
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QtCore/qobject.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qhash.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qbuffer.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpointer.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Gui
argument_list|)
name|class
name|QAuthDevice
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWSClient
name|class
name|QWSClient
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QIODevice
name|class
name|QIODevice
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTransportAuthPrivate
name|class
name|QTransportAuthPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QMutex
name|class
name|QMutex
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QTransportAuth
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
operator|:
specifier|static
name|QTransportAuth
operator|*
name|getInstance
argument_list|()
block|;      enum
name|Result
block|{
comment|// Error codes
name|Pending
operator|=
literal|0x00
block|,
name|TooSmall
operator|=
literal|0x01
block|,
name|CacheMiss
operator|=
literal|0x02
block|,
name|NoMagic
operator|=
literal|0x03
block|,
name|NoSuchKey
operator|=
literal|0x04
block|,
name|FailMatch
operator|=
literal|0x05
block|,
name|OutOfDate
operator|=
literal|0x06
block|,
comment|// reserved for expansion
name|Success
operator|=
literal|0x1e
block|,
name|ErrMask
operator|=
literal|0x1f
block|,
comment|// Verification codes
name|Allow
operator|=
literal|0x20
block|,
name|Deny
operator|=
literal|0x40
block|,
name|Ask
operator|=
literal|0x60
block|,
comment|// reserved
name|StatusMask
operator|=
literal|0xe0
block|}
block|;      enum
name|Properties
block|{
name|Trusted
operator|=
literal|0x01
block|,
name|Connection
operator|=
literal|0x02
block|,
name|UnixStreamSock
operator|=
literal|0x04
block|,
name|SharedMemory
operator|=
literal|0x08
block|,
name|MessageQueue
operator|=
literal|0x10
block|,
name|UDP
operator|=
literal|0x20
block|,
name|TCP
operator|=
literal|0x40
block|,
name|UserDefined
operator|=
literal|0x80
block|,
name|TransportType
operator|=
literal|0xfc
block|}
block|;      struct
name|Data
block|{
name|Data
argument_list|()
block|{
name|processId
operator|=
operator|-
literal|1
block|; }
name|Data
argument_list|(
argument|unsigned char p
argument_list|,
argument|int d
argument_list|)
operator|:
name|properties
argument_list|(
name|p
argument_list|)
block|,
name|descriptor
argument_list|(
name|d
argument_list|)
block|,
name|processId
argument_list|(
argument|-
literal|1
argument_list|)
block|{
if|if
condition|(
operator|(
name|properties
operator|&
name|TransportType
operator|)
operator|==
name|TCP
operator|||
operator|(
name|properties
operator|&
name|TransportType
operator|)
operator|==
name|UnixStreamSock
condition|)
name|properties
operator||=
name|Connection
expr_stmt|;
block|}
name|unsigned
name|char
name|properties
block|;
name|unsigned
name|char
name|progId
block|;
name|unsigned
name|char
name|status
block|;
name|unsigned
name|int
name|descriptor
block|;
comment|// socket fd or shmget key
name|pid_t
name|processId
block|;
name|bool
name|trusted
argument_list|()
specifier|const
block|;
name|void
name|setTrusted
argument_list|(
name|bool
argument_list|)
block|;
name|bool
name|connection
argument_list|()
specifier|const
block|;
name|void
name|setConnection
argument_list|(
name|bool
argument_list|)
block|;     }
block|;
specifier|static
specifier|const
name|char
operator|*
name|errorString
argument_list|(
specifier|const
name|QTransportAuth
operator|::
name|Data
operator|&
argument_list|)
block|;
name|QTransportAuth
operator|::
name|Data
operator|*
name|connectTransport
argument_list|(
argument|unsigned char
argument_list|,
argument|int
argument_list|)
block|;
name|QAuthDevice
operator|*
name|authBuf
argument_list|(
name|QTransportAuth
operator|::
name|Data
operator|*
argument_list|,
name|QIODevice
operator|*
argument_list|)
block|;
name|QAuthDevice
operator|*
name|recvBuf
argument_list|(
name|QTransportAuth
operator|::
name|Data
operator|*
argument_list|,
name|QIODevice
operator|*
argument_list|)
block|;
name|QIODevice
operator|*
name|passThroughByClient
argument_list|(
argument|QWSClient *
argument_list|)
specifier|const
block|;
name|void
name|setKeyFilePath
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
block|;
name|QString
name|keyFilePath
argument_list|()
specifier|const
block|;
specifier|const
name|unsigned
name|char
operator|*
name|getClientKey
argument_list|(
argument|unsigned char progId
argument_list|)
block|;
name|void
name|invalidateClientKeyCache
argument_list|()
block|;
name|QMutex
operator|*
name|getKeyFileMutex
argument_list|()
block|;
name|void
name|setLogFilePath
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
block|;
name|QString
name|logFilePath
argument_list|()
specifier|const
block|;
name|void
name|setPackageRegistry
argument_list|(
name|QObject
operator|*
name|registry
argument_list|)
block|;
name|bool
name|isDiscoveryMode
argument_list|()
specifier|const
block|;
name|void
name|setProcessKey
argument_list|(
specifier|const
name|char
operator|*
argument_list|)
block|;
name|void
name|setProcessKey
argument_list|(
specifier|const
name|char
operator|*
argument_list|,
specifier|const
name|char
operator|*
argument_list|)
block|;
name|void
name|registerPolicyReceiver
argument_list|(
name|QObject
operator|*
argument_list|)
block|;
name|void
name|unregisterPolicyReceiver
argument_list|(
name|QObject
operator|*
argument_list|)
block|;
name|bool
name|authToMessage
argument_list|(
argument|QTransportAuth::Data&d
argument_list|,
argument|char *hdr
argument_list|,
argument|const char *msg
argument_list|,
argument|int msgLen
argument_list|)
block|;
name|bool
name|authFromMessage
argument_list|(
argument|QTransportAuth::Data&d
argument_list|,
argument|const char *msg
argument_list|,
argument|int msgLen
argument_list|)
block|;
name|bool
name|authorizeRequest
argument_list|(
name|QTransportAuth
operator|::
name|Data
operator|&
name|d
argument_list|,
specifier|const
name|QString
operator|&
name|request
argument_list|)
block|;
name|Q_SIGNALS
operator|:
name|void
name|policyCheck
argument_list|(
name|QTransportAuth
operator|::
name|Data
operator|&
argument_list|,
specifier|const
name|QString
operator|&
argument_list|)
block|;
name|void
name|authViolation
argument_list|(
name|QTransportAuth
operator|::
name|Data
operator|&
argument_list|)
block|;
name|private
name|Q_SLOTS
operator|:
name|void
name|bufferDestroyed
argument_list|(
name|QObject
operator|*
argument_list|)
block|;
name|private
operator|:
comment|// users should never construct their own
name|QTransportAuth
argument_list|()
block|;
operator|~
name|QTransportAuth
argument_list|()
block|;
name|friend
name|class
name|QAuthDevice
block|;
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QTransportAuth
argument_list|)
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|RequestAnalyzer
block|{
name|public
label|:
name|RequestAnalyzer
argument_list|()
expr_stmt|;
name|virtual
operator|~
name|RequestAnalyzer
argument_list|()
expr_stmt|;
name|QString
name|operator
argument_list|()
operator|(
name|QByteArray
operator|*
name|data
operator|)
block|{
return|return
name|analyze
argument_list|(
name|data
argument_list|)
return|;
block|}
name|bool
name|requireMoreData
argument_list|()
specifier|const
block|{
return|return
name|moreData
return|;
block|}
name|qint64
name|bytesAnalyzed
argument_list|()
specifier|const
block|{
return|return
name|dataSize
return|;
block|}
name|protected
label|:
name|virtual
name|QString
name|analyze
parameter_list|(
name|QByteArray
modifier|*
parameter_list|)
function_decl|;
name|bool
name|moreData
decl_stmt|;
name|qint64
name|dataSize
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|/*!   \internal   \class QAuthDevice    \brief Pass-through QIODevice sub-class for authentication.     Use this class to forward on or receive forwarded data over a real    device for authentication. */
end_comment
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QAuthDevice
range|:
name|public
name|QIODevice
block|{
name|Q_OBJECT
name|public
operator|:
expr|enum
name|AuthDirection
block|{
name|Receive
block|,
name|Send
block|}
block|;
name|QAuthDevice
argument_list|(
name|QIODevice
operator|*
argument_list|,
name|QTransportAuth
operator|::
name|Data
operator|*
argument_list|,
name|AuthDirection
argument_list|)
block|;
operator|~
name|QAuthDevice
argument_list|()
block|;
name|void
name|setTarget
argument_list|(
argument|QIODevice *t
argument_list|)
block|{
name|m_target
operator|=
name|t
block|; }
name|QIODevice
operator|*
name|target
argument_list|()
specifier|const
block|{
return|return
name|m_target
return|;
block|}
name|void
name|setClient
argument_list|(
name|QObject
operator|*
argument_list|)
block|;
name|QObject
operator|*
name|client
argument_list|()
specifier|const
block|;
name|void
name|setRequestAnalyzer
argument_list|(
name|RequestAnalyzer
operator|*
argument_list|)
block|;
name|bool
name|isSequential
argument_list|()
specifier|const
block|;
name|bool
name|atEnd
argument_list|()
specifier|const
block|;
name|qint64
name|bytesAvailable
argument_list|()
specifier|const
block|;
name|qint64
name|bytesToWrite
argument_list|()
specifier|const
block|;
name|bool
name|seek
argument_list|(
name|qint64
argument_list|)
block|;
name|QByteArray
operator|&
name|buffer
argument_list|()
block|;
name|protected
operator|:
name|qint64
name|readData
argument_list|(
name|char
operator|*
argument_list|,
name|qint64
argument_list|)
block|;
name|qint64
name|writeData
argument_list|(
specifier|const
name|char
operator|*
argument_list|,
name|qint64
argument_list|)
block|;
name|private
name|Q_SLOTS
operator|:
name|void
name|recvReadyRead
argument_list|()
block|;
name|void
name|targetBytesWritten
argument_list|(
name|qint64
argument_list|)
block|;
name|private
operator|:
name|bool
name|authorizeMessage
argument_list|()
block|;
name|QTransportAuth
operator|::
name|Data
operator|*
name|d
block|;
name|AuthDirection
name|way
block|;
name|QIODevice
operator|*
name|m_target
block|;
name|QObject
operator|*
name|m_client
block|;
name|QByteArray
name|msgQueue
block|;
name|qint64
name|m_bytesAvailable
block|;
name|qint64
name|m_skipWritten
block|;
name|RequestAnalyzer
operator|*
name|analyzer
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|function|isSequential
specifier|inline
name|bool
name|QAuthDevice
operator|::
name|isSequential
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|seek
specifier|inline
name|bool
name|QAuthDevice
operator|::
name|seek
argument_list|(
argument|qint64
argument_list|)
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|atEnd
specifier|inline
name|bool
name|QAuthDevice
operator|::
name|atEnd
argument_list|()
specifier|const
block|{
return|return
name|msgQueue
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|bytesAvailable
specifier|inline
name|qint64
name|QAuthDevice
operator|::
name|bytesAvailable
argument_list|()
specifier|const
block|{
if|if
condition|(
name|way
operator|==
name|Receive
condition|)
return|return
name|m_bytesAvailable
return|;
else|else
return|return
operator|(
name|m_target
condition|?
name|m_target
operator|->
name|bytesAvailable
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|bytesToWrite
specifier|inline
name|qint64
name|QAuthDevice
operator|::
name|bytesToWrite
argument_list|()
specifier|const
block|{
return|return
name|msgQueue
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|buffer
specifier|inline
name|QByteArray
operator|&
name|QAuthDevice
operator|::
name|buffer
argument_list|()
block|{
return|return
name|msgQueue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SXE
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QTRANSPORTAUTH_QWS_H
end_comment
end_unit
