begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwsembedwidget.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWSEMBEDWIDGET
end_ifndef
begin_include
include|#
directive|include
file|<qwsdisplay_qws.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidget_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwsdisplay_qws_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwscommand_qws_p.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|// TODO:
end_comment
begin_comment
comment|// Must remove window decorations from the embedded window
end_comment
begin_comment
comment|// Focus In/Out, Keyboard/Mouse...
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// BUG: what if my parent change parent?
end_comment
begin_class
DECL|class|QWSEmbedWidgetPrivate
class|class
name|QWSEmbedWidgetPrivate
super|:
specifier|public
name|QWidgetPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QWSEmbedWidget
parameter_list|)
constructor_decl|;
public|public:
name|QWSEmbedWidgetPrivate
parameter_list|(
name|int
name|winId
parameter_list|)
constructor_decl|;
name|void
name|updateWindow
parameter_list|()
function_decl|;
name|void
name|resize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
function_decl|;
DECL|member|window
name|QWidget
modifier|*
name|window
decl_stmt|;
DECL|member|windowId
name|WId
name|windowId
decl_stmt|;
DECL|member|embeddedId
name|WId
name|embeddedId
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QWSEmbedWidgetPrivate
name|QWSEmbedWidgetPrivate
operator|::
name|QWSEmbedWidgetPrivate
parameter_list|(
name|int
name|winId
parameter_list|)
member_init_list|:
name|window
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|windowId
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|embeddedId
argument_list|(
name|winId
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|updateWindow
name|void
name|QWSEmbedWidgetPrivate
operator|::
name|updateWindow
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWSEmbedWidget
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|win
init|=
name|q
operator|->
name|window
argument_list|()
decl_stmt|;
if|if
condition|(
name|win
operator|==
name|window
condition|)
return|return;
if|if
condition|(
name|window
condition|)
block|{
name|window
operator|->
name|removeEventFilter
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|QWSEmbedCommand
name|command
decl_stmt|;
name|command
operator|.
name|setData
argument_list|(
name|windowId
argument_list|,
name|embeddedId
argument_list|,
name|QWSEmbedEvent
operator|::
name|StopEmbed
argument_list|)
expr_stmt|;
name|QWSDisplay
operator|::
name|instance
argument_list|()
operator|->
name|d
operator|->
name|sendCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
name|window
operator|=
name|win
expr_stmt|;
if|if
condition|(
operator|!
name|window
condition|)
return|return;
name|windowId
operator|=
name|window
operator|->
name|winId
argument_list|()
expr_stmt|;
name|QWSEmbedCommand
name|command
decl_stmt|;
name|command
operator|.
name|setData
argument_list|(
name|windowId
argument_list|,
name|embeddedId
argument_list|,
name|QWSEmbedEvent
operator|::
name|StartEmbed
argument_list|)
expr_stmt|;
name|QWSDisplay
operator|::
name|instance
argument_list|()
operator|->
name|d
operator|->
name|sendCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|window
operator|->
name|installEventFilter
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|q
operator|->
name|installEventFilter
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resize
name|void
name|QWSEmbedWidgetPrivate
operator|::
name|resize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
if|if
condition|(
operator|!
name|window
condition|)
return|return;
name|Q_Q
argument_list|(
name|QWSEmbedWidget
argument_list|)
expr_stmt|;
name|QWSEmbedCommand
name|command
decl_stmt|;
name|command
operator|.
name|setData
argument_list|(
name|windowId
argument_list|,
name|embeddedId
argument_list|,
name|QWSEmbedEvent
operator|::
name|Region
argument_list|,
name|QRect
argument_list|(
name|q
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|QWSDisplay
operator|::
name|instance
argument_list|()
operator|->
name|d
operator|->
name|sendCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QWSEmbedWidget     \since 4.2     \ingroup qws     \ingroup advanced      \brief The QWSEmbedWidget class enables embedded top-level widgets     in Qt for Embedded Linux.      Note that this class is only available in \l{Qt for Embedded Linux}.      QWSEmbedWidget inherits QWidget and acts as any other widget, but     in addition it is capable of embedding another top-level widget.      An example of use is when painting directly onto the screen using     the QDirectPainter class. Then the reserved region can be embedded     into an instance of the QWSEmbedWidget class, providing for     example event handling and size policies for the reserved region.      All that is required to embed a top-level widget is its window ID.      \sa {Qt for Embedded Linux Architecture} */
end_comment
begin_comment
comment|/*!     Constructs a widget with the given \a parent, embedding the widget     identified by the given window \a id. */
end_comment
begin_constructor
DECL|function|QWSEmbedWidget
name|QWSEmbedWidget
operator|::
name|QWSEmbedWidget
parameter_list|(
name|WId
name|id
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QWSEmbedWidgetPrivate
argument_list|(
name|id
argument_list|)
argument_list|,
name|parent
argument_list|,
literal|0
argument_list|)
block|{
name|Q_D
argument_list|(
name|QWSEmbedWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateWindow
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys this widget. */
end_comment
begin_destructor
DECL|function|~QWSEmbedWidget
name|QWSEmbedWidget
operator|::
name|~
name|QWSEmbedWidget
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWSEmbedWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|window
condition|)
return|return;
name|QWSEmbedCommand
name|command
decl_stmt|;
name|command
operator|.
name|setData
argument_list|(
name|d
operator|->
name|windowId
argument_list|,
name|d
operator|->
name|embeddedId
argument_list|,
name|QWSEmbedEvent
operator|::
name|StopEmbed
argument_list|)
expr_stmt|;
name|QWSDisplay
operator|::
name|instance
argument_list|()
operator|->
name|d
operator|->
name|sendCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|eventFilter
name|bool
name|QWSEmbedWidget
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWSEmbedWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|object
operator|==
name|d
operator|->
name|window
operator|&&
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|Move
condition|)
name|resizeEvent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|object
operator|==
name|this
operator|&&
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|Hide
condition|)
name|d
operator|->
name|resize
argument_list|(
name|QSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QWidget
operator|::
name|eventFilter
argument_list|(
name|object
argument_list|,
name|event
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|changeEvent
name|void
name|QWSEmbedWidget
operator|::
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWSEmbedWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ParentChange
condition|)
name|d
operator|->
name|updateWindow
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|resizeEvent
name|void
name|QWSEmbedWidget
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWSEmbedWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|resize
argument_list|(
name|rect
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|moveEvent
name|void
name|QWSEmbedWidget
operator|::
name|moveEvent
parameter_list|(
name|QMoveEvent
modifier|*
parameter_list|)
block|{
name|resizeEvent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|hideEvent
name|void
name|QWSEmbedWidget
operator|::
name|hideEvent
parameter_list|(
name|QHideEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWSEmbedWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|resize
argument_list|(
name|QSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|showEvent
name|void
name|QWSEmbedWidget
operator|::
name|showEvent
parameter_list|(
name|QShowEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWSEmbedWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|resize
argument_list|(
name|rect
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWSEMBEDWIDGET
end_comment
end_unit
