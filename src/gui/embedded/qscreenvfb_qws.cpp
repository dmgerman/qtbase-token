begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_QVFB
end_ifndef
begin_define
DECL|macro|QTOPIA_QVFB_BRIGHTNESS
define|#
directive|define
name|QTOPIA_QVFB_BRIGHTNESS
end_define
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/ipc.h>
end_include
begin_include
include|#
directive|include
file|<sys/shm.h>
end_include
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<qvfbhdr.h>
end_include
begin_include
include|#
directive|include
file|<qscreenvfb_qws.h>
end_include
begin_include
include|#
directive|include
file|<qkbdvfb_qws.h>
end_include
begin_include
include|#
directive|include
file|<qmousevfb_qws.h>
end_include
begin_include
include|#
directive|include
file|<qwindowsystem_qws.h>
end_include
begin_include
include|#
directive|include
file|<qsocketnotifier.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qscreen_qws.h>
end_include
begin_include
include|#
directive|include
file|<qmousedriverfactory_qws.h>
end_include
begin_include
include|#
directive|include
file|<qkbddriverfactory_qws.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QVFbScreenPrivate
class|class
name|QVFbScreenPrivate
block|{
public|public:
name|QVFbScreenPrivate
parameter_list|()
constructor_decl|;
name|~
name|QVFbScreenPrivate
parameter_list|()
destructor_decl|;
DECL|member|success
name|bool
name|success
decl_stmt|;
DECL|member|shmrgn
name|unsigned
name|char
modifier|*
name|shmrgn
decl_stmt|;
DECL|member|brightness
name|int
name|brightness
decl_stmt|;
DECL|member|blank
name|bool
name|blank
decl_stmt|;
DECL|member|hdr
name|QVFbHeader
modifier|*
name|hdr
decl_stmt|;
DECL|member|mouse
name|QWSMouseHandler
modifier|*
name|mouse
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_KEYBOARD
DECL|member|keyboard
name|QWSKeyboardHandler
modifier|*
name|keyboard
decl_stmt|;
endif|#
directive|endif
block|}
class|;
end_class
begin_constructor
DECL|function|QVFbScreenPrivate
name|QVFbScreenPrivate
operator|::
name|QVFbScreenPrivate
parameter_list|()
member_init_list|:
name|mouse
argument_list|(
literal|0
argument_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_QWS_KEYBOARD
name|keyboard
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
name|brightness
operator|=
literal|255
expr_stmt|;
name|blank
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QVFbScreenPrivate
name|QVFbScreenPrivate
operator|::
name|~
name|QVFbScreenPrivate
parameter_list|()
block|{
operator|delete
name|mouse
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_KEYBOARD
operator|delete
name|keyboard
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_comment
comment|/*!     \internal      \class QVFbScreen     \ingroup qws      \brief The QVFbScreen class implements a screen driver for the     virtual framebuffer.      Note that this class is only available in \l{Qt for Embedded Linux}.     Custom screen drivers can be added by subclassing the     QScreenDriverPlugin class, using the QScreenDriverFactory class to     dynamically load the driver into the application, but there should     only be one screen object per application.      The Qt for Embedded Linux platform provides a \l{The Virtual     Framebuffer}{virtual framebuffer} for development and debugging;     the virtual framebuffer allows Qt for Embedded Linux applications to be     developed on a desktop machine, without switching between consoles     and X11.      \sa QScreen, QScreenDriverPlugin, {Running Applications} */
end_comment
begin_comment
comment|/*!     \fn bool QVFbScreen::connect(const QString& displaySpec)     \reimp */
end_comment
begin_comment
comment|/*!     \fn void QVFbScreen::disconnect()     \reimp */
end_comment
begin_comment
comment|/*!     \fn bool QVFbScreen::initDevice()     \reimp */
end_comment
begin_comment
comment|/*!     \fn void QVFbScreen::restore()     \reimp */
end_comment
begin_comment
comment|/*!     \fn void QVFbScreen::save()     \reimp */
end_comment
begin_comment
comment|/*!     \fn void QVFbScreen::setDirty(const QRect& r)     \reimp */
end_comment
begin_comment
comment|/*!     \fn void QVFbScreen::setMode(int nw, int nh, int nd)     \reimp */
end_comment
begin_comment
comment|/*!     \fn void QVFbScreen::shutdownDevice()     \reimp */
end_comment
begin_comment
comment|/*!     \fn QVFbScreen::QVFbScreen(int displayId)      Constructs a QVNCScreen object. The \a displayId argument     identifies the Qt for Embedded Linux server to connect to. */
end_comment
begin_constructor
DECL|function|QVFbScreen
name|QVFbScreen
operator|::
name|QVFbScreen
parameter_list|(
name|int
name|display_id
parameter_list|)
member_init_list|:
name|QScreen
argument_list|(
name|display_id
argument_list|,
name|VFbClass
argument_list|)
member_init_list|,
name|d_ptr
argument_list|(
operator|new
name|QVFbScreenPrivate
argument_list|)
block|{
name|d_ptr
operator|->
name|shmrgn
operator|=
literal|0
expr_stmt|;
name|d_ptr
operator|->
name|hdr
operator|=
literal|0
expr_stmt|;
name|data
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys this QVFbScreen object. */
end_comment
begin_destructor
DECL|function|~QVFbScreen
name|QVFbScreen
operator|::
name|~
name|QVFbScreen
parameter_list|()
block|{
operator|delete
name|d_ptr
expr_stmt|;
block|}
end_destructor
begin_decl_stmt
DECL|variable|connected
specifier|static
name|QVFbScreen
modifier|*
name|connected
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|connect
name|bool
name|QVFbScreen
operator|::
name|connect
parameter_list|(
specifier|const
name|QString
modifier|&
name|displaySpec
parameter_list|)
block|{
name|QStringList
name|displayArgs
init|=
name|displaySpec
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|displayArgs
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"Gray"
argument_list|)
argument_list|)
condition|)
name|grayscale
operator|=
literal|true
expr_stmt|;
name|key_t
name|key
init|=
name|ftok
argument_list|(
name|QT_VFB_MOUSE_PIPE
argument_list|(
name|displayId
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|,
literal|'b'
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
operator|-
literal|1
condition|)
return|return
literal|false
return|;
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_BIG_ENDIAN
ifndef|#
directive|ifndef
name|QT_QWS_FRAMEBUFFER_LITTLE_ENDIAN
if|if
condition|(
name|displayArgs
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"littleendian"
argument_list|)
argument_list|)
condition|)
endif|#
directive|endif
name|QScreen
operator|::
name|setFrameBufferLittleEndian
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|int
name|shmId
init|=
name|shmget
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|shmId
operator|!=
operator|-
literal|1
condition|)
name|d_ptr
operator|->
name|shmrgn
operator|=
operator|(
name|unsigned
name|char
operator|*
operator|)
name|shmat
argument_list|(
name|shmId
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
return|return
literal|false
return|;
if|if
condition|(
operator|(
name|long
operator|)
name|d_ptr
operator|->
name|shmrgn
operator|==
operator|-
literal|1
operator|||
name|d_ptr
operator|->
name|shmrgn
operator|==
literal|0
condition|)
block|{
name|qDebug
argument_list|(
literal|"No shmrgn %ld"
argument_list|,
operator|(
name|long
operator|)
name|d_ptr
operator|->
name|shmrgn
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|d_ptr
operator|->
name|hdr
operator|=
operator|(
name|QVFbHeader
operator|*
operator|)
name|d_ptr
operator|->
name|shmrgn
expr_stmt|;
name|data
operator|=
name|d_ptr
operator|->
name|shmrgn
operator|+
name|d_ptr
operator|->
name|hdr
operator|->
name|dataoffset
expr_stmt|;
name|dw
operator|=
name|w
operator|=
name|d_ptr
operator|->
name|hdr
operator|->
name|width
expr_stmt|;
name|dh
operator|=
name|h
operator|=
name|d_ptr
operator|->
name|hdr
operator|->
name|height
expr_stmt|;
name|d
operator|=
name|d_ptr
operator|->
name|hdr
operator|->
name|depth
expr_stmt|;
switch|switch
condition|(
name|d
condition|)
block|{
case|case
literal|1
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_Mono
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
break|break;
case|case
literal|12
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB444
argument_list|)
expr_stmt|;
break|break;
case|case
literal|15
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
expr_stmt|;
break|break;
case|case
literal|16
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
expr_stmt|;
break|break;
case|case
literal|18
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
expr_stmt|;
break|break;
case|case
literal|24
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
expr_stmt|;
break|break;
case|case
literal|32
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
break|break;
block|}
name|lstep
operator|=
name|d_ptr
operator|->
name|hdr
operator|->
name|linestep
expr_stmt|;
comment|// Handle display physical size spec.
name|int
name|dimIdxW
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|dimIdxH
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|displayArgs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|displayArgs
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"mmWidth"
argument_list|)
argument_list|)
condition|)
block|{
name|dimIdxW
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|displayArgs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|displayArgs
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"mmHeight"
argument_list|)
argument_list|)
condition|)
block|{
name|dimIdxH
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|dimIdxW
operator|>=
literal|0
condition|)
block|{
name|bool
name|ok
decl_stmt|;
name|int
name|pos
init|=
literal|7
decl_stmt|;
if|if
condition|(
name|displayArgs
operator|.
name|at
argument_list|(
name|dimIdxW
argument_list|)
operator|.
name|at
argument_list|(
name|pos
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'='
argument_list|)
condition|)
operator|++
name|pos
expr_stmt|;
name|int
name|pw
init|=
name|displayArgs
operator|.
name|at
argument_list|(
name|dimIdxW
argument_list|)
operator|.
name|mid
argument_list|(
name|pos
argument_list|)
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
name|physWidth
operator|=
name|pw
expr_stmt|;
if|if
condition|(
name|dimIdxH
operator|<
literal|0
condition|)
name|physHeight
operator|=
name|dh
operator|*
name|physWidth
operator|/
name|dw
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dimIdxH
operator|>=
literal|0
condition|)
block|{
name|bool
name|ok
decl_stmt|;
name|int
name|pos
init|=
literal|8
decl_stmt|;
if|if
condition|(
name|displayArgs
operator|.
name|at
argument_list|(
name|dimIdxH
argument_list|)
operator|.
name|at
argument_list|(
name|pos
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'='
argument_list|)
condition|)
operator|++
name|pos
expr_stmt|;
name|int
name|ph
init|=
name|displayArgs
operator|.
name|at
argument_list|(
name|dimIdxH
argument_list|)
operator|.
name|mid
argument_list|(
name|pos
argument_list|)
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
name|physHeight
operator|=
name|ph
expr_stmt|;
if|if
condition|(
name|dimIdxW
operator|<
literal|0
condition|)
name|physWidth
operator|=
name|dw
operator|*
name|physHeight
operator|/
name|dh
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dimIdxW
operator|<
literal|0
operator|&&
name|dimIdxH
operator|<
literal|0
condition|)
block|{
specifier|const
name|int
name|dpi
init|=
literal|72
decl_stmt|;
name|physWidth
operator|=
name|qRound
argument_list|(
name|dw
operator|*
literal|25.4
operator|/
name|dpi
argument_list|)
expr_stmt|;
name|physHeight
operator|=
name|qRound
argument_list|(
name|dh
operator|*
literal|25.4
operator|/
name|dpi
argument_list|)
expr_stmt|;
block|}
name|qDebug
argument_list|(
literal|"Connected to VFB server %s: %d x %d x %d %dx%dmm (%dx%ddpi)"
argument_list|,
name|displaySpec
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|d
argument_list|,
name|physWidth
argument_list|,
name|physHeight
argument_list|,
name|qRound
argument_list|(
name|dw
operator|*
literal|25.4
operator|/
name|physWidth
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|dh
operator|*
literal|25.4
operator|/
name|physHeight
argument_list|)
argument_list|)
expr_stmt|;
name|size
operator|=
name|lstep
operator|*
name|h
expr_stmt|;
name|mapsize
operator|=
name|size
expr_stmt|;
name|screencols
operator|=
name|d_ptr
operator|->
name|hdr
operator|->
name|numcols
expr_stmt|;
name|memcpy
argument_list|(
name|screenclut
argument_list|,
name|d_ptr
operator|->
name|hdr
operator|->
name|clut
argument_list|,
sizeof|sizeof
argument_list|(
name|QRgb
argument_list|)
operator|*
name|screencols
argument_list|)
expr_stmt|;
name|connected
operator|=
name|this
expr_stmt|;
if|if
condition|(
name|qgetenv
argument_list|(
literal|"QT_QVFB_BGR"
argument_list|)
operator|.
name|toInt
argument_list|()
condition|)
name|pixeltype
operator|=
name|BGRPixel
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|disconnect
name|void
name|QVFbScreen
operator|::
name|disconnect
parameter_list|()
block|{
name|connected
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|(
name|long
operator|)
name|d_ptr
operator|->
name|shmrgn
operator|!=
operator|-
literal|1
operator|&&
name|d_ptr
operator|->
name|shmrgn
condition|)
block|{
if|if
condition|(
name|qApp
operator|->
name|type
argument_list|()
operator|==
name|QApplication
operator|::
name|GuiServer
operator|&&
name|d_ptr
operator|->
name|hdr
operator|->
name|dataoffset
operator|>=
operator|(
name|int
operator|)
sizeof|sizeof
argument_list|(
name|QVFbHeader
argument_list|)
condition|)
block|{
name|d_ptr
operator|->
name|hdr
operator|->
name|serverVersion
operator|=
literal|0
expr_stmt|;
block|}
name|shmdt
argument_list|(
operator|(
name|char
operator|*
operator|)
name|d_ptr
operator|->
name|shmrgn
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|initDevice
name|bool
name|QVFbScreen
operator|::
name|initDevice
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_QWS_MOUSE_QVFB
specifier|const
name|QString
name|mouseDev
init|=
name|QT_VFB_MOUSE_PIPE
argument_list|(
name|displayId
argument_list|)
decl_stmt|;
name|d_ptr
operator|->
name|mouse
operator|=
operator|new
name|QVFbMouseHandler
argument_list|(
name|QLatin1String
argument_list|(
literal|"QVFbMouse"
argument_list|)
argument_list|,
name|mouseDev
argument_list|)
expr_stmt|;
name|qwsServer
operator|->
name|setDefaultMouse
argument_list|(
literal|"None"
argument_list|)
expr_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|mouse
condition|)
name|d_ptr
operator|->
name|mouse
operator|->
name|setScreen
argument_list|(
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_QWS_KBD_QVFB
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_QWS_KEYBOARD
argument_list|)
specifier|const
name|QString
name|keyboardDev
init|=
name|QT_VFB_KEYBOARD_PIPE
argument_list|(
name|displayId
argument_list|)
decl_stmt|;
name|d_ptr
operator|->
name|keyboard
operator|=
operator|new
name|QVFbKeyboardHandler
argument_list|(
name|keyboardDev
argument_list|)
expr_stmt|;
name|qwsServer
operator|->
name|setDefaultKeyboard
argument_list|(
literal|"None"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|d_ptr
operator|->
name|hdr
operator|->
name|dataoffset
operator|>=
operator|(
name|int
operator|)
sizeof|sizeof
argument_list|(
name|QVFbHeader
argument_list|)
condition|)
name|d_ptr
operator|->
name|hdr
operator|->
name|serverVersion
operator|=
name|QT_VERSION
expr_stmt|;
if|if
condition|(
name|d
operator|==
literal|8
condition|)
block|{
name|screencols
operator|=
literal|256
expr_stmt|;
if|if
condition|(
name|grayscale
condition|)
block|{
comment|// Build grayscale palette
for|for
control|(
name|int
name|loopc
init|=
literal|0
init|;
name|loopc
operator|<
literal|256
condition|;
name|loopc
operator|++
control|)
block|{
name|screenclut
index|[
name|loopc
index|]
operator|=
name|qRgb
argument_list|(
name|loopc
argument_list|,
name|loopc
argument_list|,
name|loopc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// 6x6x6 216 color cube
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|ir
init|=
literal|0x0
init|;
name|ir
operator|<=
literal|0xff
condition|;
name|ir
operator|+=
literal|0x33
control|)
block|{
for|for
control|(
name|int
name|ig
init|=
literal|0x0
init|;
name|ig
operator|<=
literal|0xff
condition|;
name|ig
operator|+=
literal|0x33
control|)
block|{
for|for
control|(
name|int
name|ib
init|=
literal|0x0
init|;
name|ib
operator|<=
literal|0xff
condition|;
name|ib
operator|+=
literal|0x33
control|)
block|{
name|screenclut
index|[
name|idx
index|]
operator|=
name|qRgb
argument_list|(
name|ir
argument_list|,
name|ig
argument_list|,
name|ib
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
block|}
name|screencols
operator|=
name|idx
expr_stmt|;
block|}
name|memcpy
argument_list|(
name|d_ptr
operator|->
name|hdr
operator|->
name|clut
argument_list|,
name|screenclut
argument_list|,
sizeof|sizeof
argument_list|(
name|QRgb
argument_list|)
operator|*
name|screencols
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|hdr
operator|->
name|numcols
operator|=
name|screencols
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|==
literal|4
condition|)
block|{
name|int
name|val
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|16
condition|;
name|idx
operator|++
operator|,
name|val
operator|+=
literal|17
control|)
block|{
name|screenclut
index|[
name|idx
index|]
operator|=
name|qRgb
argument_list|(
name|val
argument_list|,
name|val
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
name|screencols
operator|=
literal|16
expr_stmt|;
name|memcpy
argument_list|(
name|d_ptr
operator|->
name|hdr
operator|->
name|clut
argument_list|,
name|screenclut
argument_list|,
sizeof|sizeof
argument_list|(
name|QRgb
argument_list|)
operator|*
name|screencols
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|hdr
operator|->
name|numcols
operator|=
name|screencols
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|==
literal|1
condition|)
block|{
name|screencols
operator|=
literal|2
expr_stmt|;
name|screenclut
index|[
literal|1
index|]
operator|=
name|qRgb
argument_list|(
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|)
expr_stmt|;
name|screenclut
index|[
literal|0
index|]
operator|=
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|d_ptr
operator|->
name|hdr
operator|->
name|clut
argument_list|,
name|screenclut
argument_list|,
sizeof|sizeof
argument_list|(
name|QRgb
argument_list|)
operator|*
name|screencols
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|hdr
operator|->
name|numcols
operator|=
name|screencols
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
name|QScreenCursor
operator|::
name|initSoftwareCursor
argument_list|()
expr_stmt|;
endif|#
directive|endif
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|shutdownDevice
name|void
name|QVFbScreen
operator|::
name|shutdownDevice
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|setMode
name|void
name|QVFbScreen
operator|::
name|setMode
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
block|{ }
end_function
begin_comment
comment|// save the state of the graphics card
end_comment
begin_comment
comment|// This is needed so that e.g. we can restore the palette when switching
end_comment
begin_comment
comment|// between linux virtual consoles.
end_comment
begin_function
DECL|function|save
name|void
name|QVFbScreen
operator|::
name|save
parameter_list|()
block|{
comment|// nothing to do.
block|}
end_function
begin_comment
comment|// restore the state of the graphics card.
end_comment
begin_function
DECL|function|restore
name|void
name|QVFbScreen
operator|::
name|restore
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|setDirty
name|void
name|QVFbScreen
operator|::
name|setDirty
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
specifier|const
name|QRect
name|r
init|=
name|rect
operator|.
name|translated
argument_list|(
operator|-
name|offset
argument_list|()
argument_list|)
decl_stmt|;
name|d_ptr
operator|->
name|hdr
operator|->
name|dirty
operator|=
literal|true
expr_stmt|;
name|d_ptr
operator|->
name|hdr
operator|->
name|update
operator|=
name|d_ptr
operator|->
name|hdr
operator|->
name|update
operator|.
name|united
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setBrightness
name|void
name|QVFbScreen
operator|::
name|setBrightness
parameter_list|(
name|int
name|b
parameter_list|)
block|{
if|if
condition|(
name|connected
condition|)
block|{
name|connected
operator|->
name|d_ptr
operator|->
name|brightness
operator|=
name|b
expr_stmt|;
name|QVFbHeader
modifier|*
name|hdr
init|=
name|connected
operator|->
name|d_ptr
operator|->
name|hdr
decl_stmt|;
if|if
condition|(
name|hdr
operator|->
name|viewerVersion
operator|<
literal|0x040400
condition|)
comment|// brightness not supported
return|return;
specifier|const
name|int
name|br
init|=
name|connected
operator|->
name|d_ptr
operator|->
name|blank
condition|?
literal|0
else|:
name|b
decl_stmt|;
if|if
condition|(
name|hdr
operator|->
name|brightness
operator|!=
name|br
condition|)
block|{
name|hdr
operator|->
name|brightness
operator|=
name|br
expr_stmt|;
name|connected
operator|->
name|setDirty
argument_list|(
name|connected
operator|->
name|region
argument_list|()
operator|.
name|boundingRect
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|blank
name|void
name|QVFbScreen
operator|::
name|blank
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
name|d_ptr
operator|->
name|blank
operator|=
name|on
expr_stmt|;
name|setBrightness
argument_list|(
name|connected
operator|->
name|d_ptr
operator|->
name|brightness
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_QVFB
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
