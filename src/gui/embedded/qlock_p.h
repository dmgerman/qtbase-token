begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QLOCK_P_H
end_ifndef
begin_define
DECL|macro|QLOCK_P_H
define|#
directive|define
name|QLOCK_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  This header file may
end_comment
begin_comment
comment|// change from version to version without notice, or even be
end_comment
begin_comment
comment|// removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtCore/qstring.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QLockData
name|class
name|QLockData
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QLock
block|{
name|public
label|:
name|QLock
argument_list|(
argument|const QString&filename
argument_list|,
argument|char id
argument_list|,
argument|bool create = false
argument_list|)
empty_stmt|;
operator|~
name|QLock
argument_list|()
expr_stmt|;
enum|enum
name|Type
block|{
name|Read
block|,
name|Write
block|}
enum|;
name|bool
name|isValid
argument_list|()
specifier|const
expr_stmt|;
name|void
name|lock
parameter_list|(
name|Type
name|type
parameter_list|)
function_decl|;
name|void
name|unlock
parameter_list|()
function_decl|;
name|bool
name|locked
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|Type
name|type
decl_stmt|;
name|QLockData
modifier|*
name|data
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|// Nice class for ensuring the lock is released.
end_comment
begin_comment
comment|// Just create one on the stack and the lock is automatically released
end_comment
begin_comment
comment|// when QLockHandle is destructed.
end_comment
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QLockHandle
block|{
name|public
label|:
name|QLockHandle
argument_list|(
argument|QLock *l
argument_list|,
argument|QLock::Type type
argument_list|)
block|:
name|qlock
argument_list|(
argument|l
argument_list|)
block|{
name|qlock
operator|->
name|lock
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
operator|~
name|QLockHandle
argument_list|()
block|{
if|if
condition|(
name|locked
argument_list|()
condition|)
name|qlock
operator|->
name|unlock
argument_list|()
expr_stmt|;
block|}
name|void
name|lock
argument_list|(
name|QLock
operator|::
name|Type
name|type
argument_list|)
block|{
name|qlock
operator|->
name|lock
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|void
name|unlock
parameter_list|()
block|{
name|qlock
operator|->
name|unlock
argument_list|()
expr_stmt|;
block|}
name|bool
name|locked
argument_list|()
specifier|const
block|{
return|return
name|qlock
operator|->
name|locked
argument_list|()
return|;
block|}
name|private
label|:
name|QLock
modifier|*
name|qlock
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QLOCK_P_H
end_comment
end_unit
