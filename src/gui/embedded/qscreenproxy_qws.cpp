begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qscreenproxy_qws.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_PROXYSCREEN
end_ifndef
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
end_ifndef
begin_comment
comment|/*!     \class QProxyScreenCursor     \since 4.5     \ingroup qws     \brief The QProxyScreenCursor class provides a generic interface to     QScreenCursor implementations. */
end_comment
begin_comment
comment|/*!     Constructs a proxy screen cursor. */
end_comment
begin_constructor
DECL|function|QProxyScreenCursor
name|QProxyScreenCursor
operator|::
name|QProxyScreenCursor
parameter_list|()
member_init_list|:
name|QScreenCursor
argument_list|()
member_init_list|,
name|realCursor
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|d_ptr
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the proxy screen cursor. */
end_comment
begin_destructor
DECL|function|~QProxyScreenCursor
name|QProxyScreenCursor
operator|::
name|~
name|QProxyScreenCursor
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Sets the real screen cursor to be used for the proxy screen cursor to     the \a cursor specified.      \sa screenCursor() */
end_comment
begin_function
DECL|function|setScreenCursor
name|void
name|QProxyScreenCursor
operator|::
name|setScreenCursor
parameter_list|(
name|QScreenCursor
modifier|*
name|cursor
parameter_list|)
block|{
name|realCursor
operator|=
name|cursor
expr_stmt|;
name|configure
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the real screen cursor used by the proxy screen cursor.      \sa setScreenCursor() */
end_comment
begin_function
DECL|function|screenCursor
name|QScreenCursor
modifier|*
name|QProxyScreenCursor
operator|::
name|screenCursor
parameter_list|()
specifier|const
block|{
return|return
name|realCursor
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|set
name|void
name|QProxyScreenCursor
operator|::
name|set
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|int
name|hotx
parameter_list|,
name|int
name|hoty
parameter_list|)
block|{
if|if
condition|(
name|realCursor
condition|)
block|{
name|hotspot
operator|=
name|QPoint
argument_list|(
name|hotx
argument_list|,
name|hoty
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|image
expr_stmt|;
name|size
operator|=
name|image
operator|.
name|size
argument_list|()
expr_stmt|;
name|realCursor
operator|->
name|set
argument_list|(
name|image
argument_list|,
name|hotx
argument_list|,
name|hoty
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QScreenCursor
operator|::
name|set
argument_list|(
name|image
argument_list|,
name|hotx
argument_list|,
name|hoty
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|move
name|void
name|QProxyScreenCursor
operator|::
name|move
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
if|if
condition|(
name|realCursor
condition|)
block|{
name|pos
operator|=
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|realCursor
operator|->
name|move
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QScreenCursor
operator|::
name|move
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|show
name|void
name|QProxyScreenCursor
operator|::
name|show
parameter_list|()
block|{
if|if
condition|(
name|realCursor
condition|)
block|{
name|realCursor
operator|->
name|show
argument_list|()
expr_stmt|;
name|enable
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|QScreenCursor
operator|::
name|show
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|hide
name|void
name|QProxyScreenCursor
operator|::
name|hide
parameter_list|()
block|{
if|if
condition|(
name|realCursor
condition|)
block|{
name|realCursor
operator|->
name|hide
argument_list|()
expr_stmt|;
name|enable
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|QScreenCursor
operator|::
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|configure
name|void
name|QProxyScreenCursor
operator|::
name|configure
parameter_list|()
block|{
if|if
condition|(
operator|!
name|realCursor
condition|)
return|return;
name|cursor
operator|=
name|realCursor
operator|->
name|cursor
expr_stmt|;
name|size
operator|=
name|realCursor
operator|->
name|size
expr_stmt|;
name|pos
operator|=
name|realCursor
operator|->
name|pos
expr_stmt|;
name|hotspot
operator|=
name|realCursor
operator|->
name|hotspot
expr_stmt|;
name|enable
operator|=
name|realCursor
operator|->
name|enable
expr_stmt|;
name|hwaccel
operator|=
name|realCursor
operator|->
name|hwaccel
expr_stmt|;
name|supportsAlpha
operator|=
name|realCursor
operator|->
name|supportsAlpha
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_CURSOR
end_comment
begin_comment
comment|/*!     \class QProxyScreen     \ingroup qws     \brief The QProxyScreen class provides a generic interface to QScreen implementations. */
end_comment
begin_comment
comment|/*!     \fn QProxyScreen::QProxyScreen(int displayId, ClassId classId)      Constructs a proxy screen with the given \a displayId and \a classId. */
end_comment
begin_constructor
DECL|function|QProxyScreen
name|QProxyScreen
operator|::
name|QProxyScreen
parameter_list|(
name|int
name|displayId
parameter_list|,
name|QScreen
operator|::
name|ClassId
name|classId
parameter_list|)
member_init_list|:
name|QScreen
argument_list|(
name|displayId
argument_list|,
name|classId
argument_list|)
member_init_list|,
name|realScreen
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|d_ptr
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the proxy screen. */
end_comment
begin_destructor
DECL|function|~QProxyScreen
name|QProxyScreen
operator|::
name|~
name|QProxyScreen
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Sets the real \a screen to be used by the proxy screen.      \sa screen() */
end_comment
begin_function
DECL|function|setScreen
name|void
name|QProxyScreen
operator|::
name|setScreen
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|)
block|{
name|realScreen
operator|=
name|screen
expr_stmt|;
name|configure
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the real screen used by the proxy screen.      \sa setScreen() */
end_comment
begin_function
DECL|function|screen
name|QScreen
modifier|*
name|QProxyScreen
operator|::
name|screen
parameter_list|()
specifier|const
block|{
return|return
name|realScreen
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|configure
name|void
name|QProxyScreen
operator|::
name|configure
parameter_list|()
block|{
if|if
condition|(
operator|!
name|realScreen
condition|)
return|return;
name|d
operator|=
name|realScreen
operator|->
name|depth
argument_list|()
expr_stmt|;
name|w
operator|=
name|realScreen
operator|->
name|width
argument_list|()
expr_stmt|;
name|h
operator|=
name|realScreen
operator|->
name|height
argument_list|()
expr_stmt|;
name|dw
operator|=
name|realScreen
operator|->
name|deviceWidth
argument_list|()
expr_stmt|;
name|dh
operator|=
name|realScreen
operator|->
name|deviceHeight
argument_list|()
expr_stmt|;
name|lstep
operator|=
name|realScreen
operator|->
name|linestep
argument_list|()
expr_stmt|;
name|data
operator|=
name|realScreen
operator|->
name|base
argument_list|()
expr_stmt|;
name|lstep
operator|=
name|realScreen
operator|->
name|linestep
argument_list|()
expr_stmt|;
name|size
operator|=
name|realScreen
operator|->
name|screenSize
argument_list|()
expr_stmt|;
name|physWidth
operator|=
name|realScreen
operator|->
name|physicalWidth
argument_list|()
expr_stmt|;
name|physHeight
operator|=
name|realScreen
operator|->
name|physicalHeight
argument_list|()
expr_stmt|;
name|pixeltype
operator|=
name|realScreen
operator|->
name|pixelType
argument_list|()
expr_stmt|;
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_BIG_ENDIAN
name|setFrameBufferLittleEndian
argument_list|(
name|realScreen
operator|->
name|frameBufferLittleEndian
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|setOffset
argument_list|(
name|realScreen
operator|->
name|offset
argument_list|()
argument_list|)
expr_stmt|;
name|setPixelFormat
argument_list|(
name|realScreen
operator|->
name|pixelFormat
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_QWS_CLIENTBLIT
name|setSupportsBlitInClients
argument_list|(
name|realScreen
operator|->
name|supportsBlitInClients
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \internal     Returns the display ID that corresponds to the given \a spec. */
end_comment
begin_function
DECL|function|getDisplayId
specifier|static
name|int
name|getDisplayId
parameter_list|(
specifier|const
name|QString
modifier|&
name|spec
parameter_list|)
block|{
name|QRegExp
name|regexp
argument_list|(
name|QLatin1String
argument_list|(
literal|":(\\d+)\\b"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|regexp
operator|.
name|lastIndexIn
argument_list|(
name|spec
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|const
name|QString
name|capture
init|=
name|regexp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
decl_stmt|;
return|return
name|capture
operator|.
name|toInt
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|connect
name|bool
name|QProxyScreen
operator|::
name|connect
parameter_list|(
specifier|const
name|QString
modifier|&
name|displaySpec
parameter_list|)
block|{
specifier|const
name|int
name|id
init|=
name|getDisplayId
argument_list|(
name|displaySpec
argument_list|)
decl_stmt|;
name|realScreen
operator|=
name|qt_get_screen
argument_list|(
name|id
argument_list|,
name|displaySpec
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|configure
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|exposeRegion
name|void
name|QProxyScreen
operator|::
name|exposeRegion
parameter_list|(
name|QRegion
name|r
parameter_list|,
name|int
name|changing
parameter_list|)
block|{
if|if
condition|(
operator|!
name|realScreen
condition|)
block|{
name|QScreen
operator|::
name|exposeRegion
argument_list|(
name|r
argument_list|,
name|changing
argument_list|)
expr_stmt|;
return|return;
block|}
name|realScreen
operator|->
name|exposeRegion
argument_list|(
name|r
argument_list|,
name|changing
argument_list|)
expr_stmt|;
name|r
operator|&=
name|realScreen
operator|->
name|region
argument_list|()
expr_stmt|;
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|r
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|setDirty
argument_list|(
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|blit
name|void
name|QProxyScreen
operator|::
name|blit
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
if|if
condition|(
operator|!
name|realScreen
condition|)
block|{
name|QScreen
operator|::
name|blit
argument_list|(
name|image
argument_list|,
name|topLeft
argument_list|,
name|region
argument_list|)
expr_stmt|;
return|return;
block|}
name|realScreen
operator|->
name|blit
argument_list|(
name|image
argument_list|,
name|topLeft
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|solidFill
name|void
name|QProxyScreen
operator|::
name|solidFill
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
if|if
condition|(
operator|!
name|realScreen
condition|)
block|{
name|QScreen
operator|::
name|solidFill
argument_list|(
name|color
argument_list|,
name|region
argument_list|)
expr_stmt|;
return|return;
block|}
name|realScreen
operator|->
name|solidFill
argument_list|(
name|color
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mapToDevice
name|QSize
name|QProxyScreen
operator|::
name|mapToDevice
parameter_list|(
specifier|const
name|QSize
modifier|&
name|s
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|realScreen
condition|)
return|return
name|QScreen
operator|::
name|mapToDevice
argument_list|(
name|s
argument_list|)
return|;
return|return
name|realScreen
operator|->
name|mapToDevice
argument_list|(
name|s
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mapFromDevice
name|QSize
name|QProxyScreen
operator|::
name|mapFromDevice
parameter_list|(
specifier|const
name|QSize
modifier|&
name|s
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|realScreen
condition|)
return|return
name|QScreen
operator|::
name|mapFromDevice
argument_list|(
name|s
argument_list|)
return|;
return|return
name|realScreen
operator|->
name|mapFromDevice
argument_list|(
name|s
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mapToDevice
name|QPoint
name|QProxyScreen
operator|::
name|mapToDevice
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|,
specifier|const
name|QSize
modifier|&
name|s
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|realScreen
condition|)
return|return
name|QScreen
operator|::
name|mapToDevice
argument_list|(
name|p
argument_list|,
name|s
argument_list|)
return|;
return|return
name|realScreen
operator|->
name|mapToDevice
argument_list|(
name|p
argument_list|,
name|s
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mapFromDevice
name|QPoint
name|QProxyScreen
operator|::
name|mapFromDevice
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|,
specifier|const
name|QSize
modifier|&
name|s
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|realScreen
condition|)
return|return
name|QScreen
operator|::
name|mapFromDevice
argument_list|(
name|p
argument_list|,
name|s
argument_list|)
return|;
return|return
name|realScreen
operator|->
name|mapFromDevice
argument_list|(
name|p
argument_list|,
name|s
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mapToDevice
name|QRect
name|QProxyScreen
operator|::
name|mapToDevice
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|,
specifier|const
name|QSize
modifier|&
name|s
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|realScreen
condition|)
return|return
name|QScreen
operator|::
name|mapToDevice
argument_list|(
name|r
argument_list|,
name|s
argument_list|)
return|;
return|return
name|realScreen
operator|->
name|mapToDevice
argument_list|(
name|r
argument_list|,
name|s
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mapFromDevice
name|QRect
name|QProxyScreen
operator|::
name|mapFromDevice
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|,
specifier|const
name|QSize
modifier|&
name|s
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|realScreen
condition|)
return|return
name|QScreen
operator|::
name|mapFromDevice
argument_list|(
name|r
argument_list|,
name|s
argument_list|)
return|;
return|return
name|realScreen
operator|->
name|mapFromDevice
argument_list|(
name|r
argument_list|,
name|s
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mapToDevice
name|QRegion
name|QProxyScreen
operator|::
name|mapToDevice
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|r
parameter_list|,
specifier|const
name|QSize
modifier|&
name|s
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|realScreen
condition|)
return|return
name|QScreen
operator|::
name|mapToDevice
argument_list|(
name|r
argument_list|,
name|s
argument_list|)
return|;
return|return
name|realScreen
operator|->
name|mapToDevice
argument_list|(
name|r
argument_list|,
name|s
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mapFromDevice
name|QRegion
name|QProxyScreen
operator|::
name|mapFromDevice
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|r
parameter_list|,
specifier|const
name|QSize
modifier|&
name|s
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|realScreen
condition|)
return|return
name|QScreen
operator|::
name|mapFromDevice
argument_list|(
name|r
argument_list|,
name|s
argument_list|)
return|;
return|return
name|realScreen
operator|->
name|mapFromDevice
argument_list|(
name|r
argument_list|,
name|s
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|disconnect
name|void
name|QProxyScreen
operator|::
name|disconnect
parameter_list|()
block|{
if|if
condition|(
name|realScreen
condition|)
block|{
name|realScreen
operator|->
name|disconnect
argument_list|()
expr_stmt|;
operator|delete
name|realScreen
expr_stmt|;
name|realScreen
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*! */
end_comment
begin_function
DECL|function|initDevice
name|bool
name|QProxyScreen
operator|::
name|initDevice
parameter_list|()
block|{
if|if
condition|(
name|realScreen
condition|)
return|return
name|realScreen
operator|->
name|initDevice
argument_list|()
return|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|shutdownDevice
name|void
name|QProxyScreen
operator|::
name|shutdownDevice
parameter_list|()
block|{
if|if
condition|(
name|realScreen
condition|)
name|realScreen
operator|->
name|shutdownDevice
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|setMode
name|void
name|QProxyScreen
operator|::
name|setMode
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|d
parameter_list|)
block|{
if|if
condition|(
name|realScreen
condition|)
block|{
name|realScreen
operator|->
name|setMode
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QScreen
operator|::
name|dw
operator|=
name|QScreen
operator|::
name|w
operator|=
name|w
expr_stmt|;
name|QScreen
operator|::
name|dh
operator|=
name|QScreen
operator|::
name|h
operator|=
name|h
expr_stmt|;
name|QScreen
operator|::
name|d
operator|=
name|d
expr_stmt|;
block|}
name|configure
argument_list|()
expr_stmt|;
name|exposeRegion
argument_list|(
name|region
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|supportsDepth
name|bool
name|QProxyScreen
operator|::
name|supportsDepth
parameter_list|(
name|int
name|depth
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|realScreen
condition|)
return|return
name|realScreen
operator|->
name|supportsDepth
argument_list|(
name|depth
argument_list|)
return|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|save
name|void
name|QProxyScreen
operator|::
name|save
parameter_list|()
block|{
if|if
condition|(
name|realScreen
condition|)
name|realScreen
operator|->
name|save
argument_list|()
expr_stmt|;
name|QScreen
operator|::
name|save
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|restore
name|void
name|QProxyScreen
operator|::
name|restore
parameter_list|()
block|{
if|if
condition|(
name|realScreen
condition|)
name|realScreen
operator|->
name|restore
argument_list|()
expr_stmt|;
name|QScreen
operator|::
name|restore
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|blank
name|void
name|QProxyScreen
operator|::
name|blank
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
if|if
condition|(
name|realScreen
condition|)
name|realScreen
operator|->
name|blank
argument_list|(
name|on
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|onCard
name|bool
name|QProxyScreen
operator|::
name|onCard
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|ptr
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|realScreen
condition|)
return|return
name|realScreen
operator|->
name|onCard
argument_list|(
name|ptr
argument_list|)
return|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|onCard
name|bool
name|QProxyScreen
operator|::
name|onCard
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|ptr
parameter_list|,
name|ulong
modifier|&
name|offset
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|realScreen
condition|)
return|return
name|realScreen
operator|->
name|onCard
argument_list|(
name|ptr
argument_list|,
name|offset
argument_list|)
return|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|isInterlaced
name|bool
name|QProxyScreen
operator|::
name|isInterlaced
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|realScreen
condition|)
return|return
name|realScreen
operator|->
name|isInterlaced
argument_list|()
return|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|isTransformed
name|bool
name|QProxyScreen
operator|::
name|isTransformed
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|realScreen
condition|)
return|return
name|realScreen
operator|->
name|isTransformed
argument_list|()
return|;
return|return
name|QScreen
operator|::
name|isTransformed
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|transformOrientation
name|int
name|QProxyScreen
operator|::
name|transformOrientation
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|realScreen
condition|)
return|return
name|realScreen
operator|->
name|transformOrientation
argument_list|()
return|;
return|return
name|QScreen
operator|::
name|transformOrientation
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|memoryNeeded
name|int
name|QProxyScreen
operator|::
name|memoryNeeded
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
if|if
condition|(
name|realScreen
condition|)
return|return
name|realScreen
operator|->
name|memoryNeeded
argument_list|(
name|str
argument_list|)
return|;
else|else
return|return
name|QScreen
operator|::
name|memoryNeeded
argument_list|(
name|str
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|sharedRamSize
name|int
name|QProxyScreen
operator|::
name|sharedRamSize
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|)
block|{
if|if
condition|(
name|realScreen
condition|)
return|return
name|realScreen
operator|->
name|sharedRamSize
argument_list|(
name|ptr
argument_list|)
return|;
else|else
return|return
name|QScreen
operator|::
name|sharedRamSize
argument_list|(
name|ptr
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|haltUpdates
name|void
name|QProxyScreen
operator|::
name|haltUpdates
parameter_list|()
block|{
if|if
condition|(
name|realScreen
condition|)
name|realScreen
operator|->
name|haltUpdates
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|resumeUpdates
name|void
name|QProxyScreen
operator|::
name|resumeUpdates
parameter_list|()
block|{
if|if
condition|(
name|realScreen
condition|)
name|realScreen
operator|->
name|resumeUpdates
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|setDirty
name|void
name|QProxyScreen
operator|::
name|setDirty
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
if|if
condition|(
name|realScreen
condition|)
name|realScreen
operator|->
name|setDirty
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|createSurface
name|QWSWindowSurface
modifier|*
name|QProxyScreen
operator|::
name|createSurface
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|realScreen
condition|)
return|return
name|realScreen
operator|->
name|createSurface
argument_list|(
name|widget
argument_list|)
return|;
return|return
name|QScreen
operator|::
name|createSurface
argument_list|(
name|widget
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|createSurface
name|QWSWindowSurface
modifier|*
name|QProxyScreen
operator|::
name|createSurface
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|realScreen
condition|)
return|return
name|realScreen
operator|->
name|createSurface
argument_list|(
name|key
argument_list|)
return|;
return|return
name|QScreen
operator|::
name|createSurface
argument_list|(
name|key
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|subScreens
name|QList
argument_list|<
name|QScreen
modifier|*
argument_list|>
name|QProxyScreen
operator|::
name|subScreens
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|realScreen
condition|)
return|return
name|realScreen
operator|->
name|subScreens
argument_list|()
return|;
return|return
name|QScreen
operator|::
name|subScreens
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|region
name|QRegion
name|QProxyScreen
operator|::
name|region
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|realScreen
condition|)
return|return
name|realScreen
operator|->
name|region
argument_list|()
return|;
else|else
return|return
name|QScreen
operator|::
name|region
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_PROXYSCREEN
end_comment
end_unit
