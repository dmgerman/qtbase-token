begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_MOUSE_INTEGRITY
end_ifndef
begin_include
include|#
directive|include
file|"qmouseintegrity_qws.h"
end_include
begin_include
include|#
directive|include
file|<qwindowsystem_qws.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qtimer.h>
end_include
begin_include
include|#
directive|include
file|<qthread.h>
end_include
begin_include
include|#
directive|include
file|<INTEGRITY.h>
end_include
begin_typedef
DECL|typedef|MOUSEHandler
typedef|typedef
name|Address
name|MOUSEHandler
typedef|;
end_typedef
begin_typedef
DECL|struct|MOUSEMessageStruct
typedef|typedef
struct|struct
name|MOUSEMessageStruct
block|{
DECL|member|x
name|Value
name|x
decl_stmt|;
DECL|member|y
name|Value
name|y
decl_stmt|;
DECL|member|z
name|Value
name|z
decl_stmt|;
DECL|member|buttons
name|Value
name|buttons
decl_stmt|;
block|}
DECL|typedef|MOUSEMessage
name|MOUSEMessage
typedef|;
end_typedef
begin_function_decl
specifier|static
name|Error
name|MOUSE_Init
parameter_list|(
name|MOUSEHandler
modifier|*
name|handler
parameter_list|,
name|Boolean
modifier|*
name|isabsolute
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|Error
name|MOUSE_SynchronousGetPosition
parameter_list|(
name|MOUSEHandler
name|handler
parameter_list|,
name|MOUSEMessage
modifier|*
name|msg
parameter_list|,
name|Boolean
name|absolute
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|Error
name|MOUSE_ShouldFilter
parameter_list|(
name|MOUSEHandler
name|handler
parameter_list|,
name|Boolean
modifier|*
name|filter
parameter_list|)
function_decl|;
end_function_decl
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class_decl
class_decl|class
name|QIntMouseListenThread
class_decl|;
end_class_decl
begin_class
DECL|class|QIntMousePrivate
class|class
name|QIntMousePrivate
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
friend|friend
class_decl|class
name|QIntMouseListenTaskThread
class_decl|;
name|Q_SIGNALS
label|:
name|void
name|mouseDataAvailable
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|buttons
parameter_list|)
function_decl|;
public|public:
name|QIntMousePrivate
parameter_list|(
name|QIntMouseHandler
modifier|*
name|handler
parameter_list|)
constructor_decl|;
name|~
name|QIntMousePrivate
parameter_list|()
destructor_decl|;
DECL|function|dataReady
name|void
name|dataReady
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|buttons
parameter_list|)
block|{
emit|emit
name|mouseDataAvailable
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|buttons
argument_list|)
emit|;
block|}
DECL|member|calibrated
name|bool
name|calibrated
decl_stmt|;
DECL|member|waitforread
name|bool
name|waitforread
decl_stmt|;
DECL|member|suspended
name|bool
name|suspended
decl_stmt|;
DECL|member|mousethread
name|QIntMouseListenThread
modifier|*
name|mousethread
decl_stmt|;
private|private:
DECL|member|handler
name|QIntMouseHandler
modifier|*
name|handler
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QIntMouseListenThread
class|class
name|QIntMouseListenThread
super|:
specifier|public
name|QThread
block|{
protected|protected:
DECL|member|imp
name|QIntMousePrivate
modifier|*
name|imp
decl_stmt|;
DECL|member|loop
name|bool
name|loop
decl_stmt|;
public|public:
DECL|function|QIntMouseListenThread
name|QIntMouseListenThread
parameter_list|(
name|QIntMousePrivate
modifier|*
name|im
parameter_list|)
member_init_list|:
name|QThread
argument_list|()
member_init_list|,
name|imp
argument_list|(
name|im
argument_list|)
block|{}
empty_stmt|;
DECL|function|~QIntMouseListenThread
name|~
name|QIntMouseListenThread
parameter_list|()
block|{}
empty_stmt|;
name|void
name|run
parameter_list|()
function_decl|;
DECL|function|stoploop
name|void
name|stoploop
parameter_list|()
block|{
name|loop
operator|=
literal|false
expr_stmt|;
block|}
empty_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QIntMouseHandler
name|QIntMouseHandler
operator|::
name|QIntMouseHandler
parameter_list|(
specifier|const
name|QString
modifier|&
name|driver
parameter_list|,
specifier|const
name|QString
modifier|&
name|device
parameter_list|)
member_init_list|:
name|QObject
argument_list|()
member_init_list|,
name|QWSCalibratedMouseHandler
argument_list|(
name|driver
argument_list|,
name|device
argument_list|)
block|{
name|QPoint
name|test
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|d
operator|=
operator|new
name|QIntMousePrivate
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
argument_list|,
name|SIGNAL
argument_list|(
name|mouseDataAvailable
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readMouseData
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|calibrated
operator|=
operator|(
name|test
operator|!=
name|transform
argument_list|(
name|test
argument_list|)
operator|)
expr_stmt|;
name|d
operator|->
name|mousethread
operator|->
name|start
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QIntMouseHandler
name|QIntMouseHandler
operator|::
name|~
name|QIntMouseHandler
parameter_list|()
block|{
name|disconnect
argument_list|(
name|d
argument_list|,
name|SIGNAL
argument_list|(
name|mouseDataAvailable
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readMouseData
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|resume
name|void
name|QIntMouseHandler
operator|::
name|resume
parameter_list|()
block|{
name|d
operator|->
name|suspended
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|suspend
name|void
name|QIntMouseHandler
operator|::
name|suspend
parameter_list|()
block|{
name|d
operator|->
name|suspended
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readMouseData
name|void
name|QIntMouseHandler
operator|::
name|readMouseData
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|buttons
parameter_list|)
block|{
name|d
operator|->
name|waitforread
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|suspended
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|calibrated
condition|)
block|{
name|sendFiltered
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|buttons
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPoint
name|pos
decl_stmt|;
name|pos
operator|=
name|transform
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|limitToScreen
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|mouseChanged
argument_list|(
name|pos
argument_list|,
name|buttons
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|clearCalibration
name|void
name|QIntMouseHandler
operator|::
name|clearCalibration
parameter_list|()
block|{
name|QWSCalibratedMouseHandler
operator|::
name|clearCalibration
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|calibrate
name|void
name|QIntMouseHandler
operator|::
name|calibrate
parameter_list|(
specifier|const
name|QWSPointerCalibrationData
modifier|*
name|data
parameter_list|)
block|{
name|QWSCalibratedMouseHandler
operator|::
name|calibrate
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|run
name|void
name|QIntMouseListenThread
operator|::
name|run
parameter_list|(
name|void
parameter_list|)
block|{
name|MOUSEHandler
name|handler
decl_stmt|;
name|MOUSEMessage
name|msg
decl_stmt|;
name|Boolean
name|filter
decl_stmt|;
name|Boolean
name|isabsolute
decl_stmt|;
name|loop
operator|=
literal|true
expr_stmt|;
name|CheckSuccess
argument_list|(
name|MOUSE_Init
argument_list|(
operator|&
name|handler
argument_list|,
operator|&
name|isabsolute
argument_list|)
argument_list|)
expr_stmt|;
name|CheckSuccess
argument_list|(
name|MOUSE_ShouldFilter
argument_list|(
name|handler
argument_list|,
operator|&
name|filter
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|filter
condition|)
name|imp
operator|->
name|calibrated
operator|=
literal|false
expr_stmt|;
name|imp
operator|->
name|waitforread
operator|=
literal|false
expr_stmt|;
do|do
block|{
name|MOUSE_SynchronousGetPosition
argument_list|(
name|handler
argument_list|,
operator|&
name|msg
argument_list|,
name|isabsolute
argument_list|)
expr_stmt|;
name|imp
operator|->
name|dataReady
argument_list|(
name|msg
operator|.
name|x
argument_list|,
name|msg
operator|.
name|y
argument_list|,
name|msg
operator|.
name|buttons
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|loop
condition|)
do|;
name|QThread
operator|::
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QIntMousePrivate
name|QIntMousePrivate
operator|::
name|QIntMousePrivate
parameter_list|(
name|QIntMouseHandler
modifier|*
name|handler
parameter_list|)
member_init_list|:
name|QObject
argument_list|()
block|{
name|this
operator|->
name|handler
operator|=
name|handler
expr_stmt|;
name|suspended
operator|=
literal|false
expr_stmt|;
name|mousethread
operator|=
operator|new
name|QIntMouseListenThread
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QIntMousePrivate
name|QIntMousePrivate
operator|::
name|~
name|QIntMousePrivate
parameter_list|()
block|{
name|mousethread
operator|->
name|stoploop
argument_list|()
expr_stmt|;
name|mousethread
operator|->
name|wait
argument_list|()
expr_stmt|;
operator|delete
name|mousethread
expr_stmt|;
block|}
end_destructor
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qmouseintegrity_qws.moc"
end_include
begin_typedef
DECL|struct|USBMouseStruct
typedef|typedef
struct|struct
name|USBMouseStruct
block|{
DECL|member|mouseconn
name|Connection
name|mouseconn
decl_stmt|;
DECL|member|mousemsg
name|Buffer
name|mousemsg
index|[
literal|2
index|]
decl_stmt|;
DECL|member|x
name|Value
name|x
decl_stmt|;
DECL|member|y
name|Value
name|y
decl_stmt|;
block|}
DECL|typedef|USBMouse
name|USBMouse
typedef|;
end_typedef
begin_decl_stmt
DECL|variable|mousedev
name|USBMouse
name|mousedev
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|MOUSE_Init
name|Error
name|MOUSE_Init
parameter_list|(
name|MOUSEHandler
modifier|*
name|handler
parameter_list|,
name|Boolean
modifier|*
name|isabsolute
parameter_list|)
block|{
name|Error
name|E
decl_stmt|;
name|bool
name|loop
init|=
literal|true
decl_stmt|;
name|memset
argument_list|(
operator|(
name|void
operator|*
operator|)
operator|&
name|mousedev
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|USBMouse
argument_list|)
argument_list|)
expr_stmt|;
name|mousedev
operator|.
name|mousemsg
index|[
literal|0
index|]
operator|.
name|BufferType
operator|=
name|DataImmediate
expr_stmt|;
name|mousedev
operator|.
name|mousemsg
index|[
literal|1
index|]
operator|.
name|BufferType
operator|=
name|DataImmediate
operator||
name|LastBuffer
expr_stmt|;
do|do
block|{
name|E
operator|=
name|RequestResource
argument_list|(
operator|(
name|Object
operator|*
operator|)
operator|&
name|mousedev
operator|.
name|mouseconn
argument_list|,
literal|"MouseClient"
argument_list|,
literal|"!systempassword"
argument_list|)
expr_stmt|;
if|if
condition|(
name|E
operator|==
name|Success
condition|)
block|{
operator|*
name|isabsolute
operator|=
literal|true
expr_stmt|;
name|loop
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|E
operator|=
name|RequestResource
argument_list|(
operator|(
name|Object
operator|*
operator|)
operator|&
name|mousedev
operator|.
name|mouseconn
argument_list|,
literal|"USBMouseClient"
argument_list|,
literal|"!systempassword"
argument_list|)
expr_stmt|;
if|if
condition|(
name|E
operator|==
name|Success
condition|)
block|{
operator|*
name|isabsolute
operator|=
literal|false
expr_stmt|;
name|loop
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|loop
condition|)
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|loop
condition|)
do|;
operator|*
name|handler
operator|=
operator|(
name|MOUSEHandler
operator|)
operator|&
name|mousedev
expr_stmt|;
return|return
name|Success
return|;
block|}
end_function
begin_function
DECL|function|MOUSE_SynchronousGetPosition
name|Error
name|MOUSE_SynchronousGetPosition
parameter_list|(
name|MOUSEHandler
name|handler
parameter_list|,
name|MOUSEMessage
modifier|*
name|msg
parameter_list|,
name|Boolean
name|isabsolute
parameter_list|)
block|{
name|signed
name|long
name|x
decl_stmt|;
name|signed
name|long
name|y
decl_stmt|;
name|USBMouse
modifier|*
name|mdev
init|=
operator|(
name|USBMouse
operator|*
operator|)
name|handler
decl_stmt|;
name|mdev
operator|->
name|mousemsg
index|[
literal|0
index|]
operator|.
name|Transferred
operator|=
literal|0
expr_stmt|;
name|mdev
operator|->
name|mousemsg
index|[
literal|1
index|]
operator|.
name|Transferred
operator|=
literal|0
expr_stmt|;
name|SynchronousReceive
argument_list|(
name|mdev
operator|->
name|mouseconn
argument_list|,
name|mdev
operator|->
name|mousemsg
argument_list|)
expr_stmt|;
if|if
condition|(
name|isabsolute
condition|)
block|{
name|x
operator|=
operator|(
name|signed
name|long
operator|)
name|mdev
operator|->
name|mousemsg
index|[
literal|0
index|]
operator|.
name|Length
expr_stmt|;
name|y
operator|=
operator|(
name|signed
name|long
operator|)
name|mdev
operator|->
name|mousemsg
index|[
literal|1
index|]
operator|.
name|TheAddress
expr_stmt|;
block|}
else|else
block|{
name|x
operator|=
name|mdev
operator|->
name|x
operator|+
operator|(
name|signed
name|long
operator|)
name|mdev
operator|->
name|mousemsg
index|[
literal|0
index|]
operator|.
name|Length
expr_stmt|;
name|y
operator|=
name|mdev
operator|->
name|y
operator|+
operator|(
name|signed
name|long
operator|)
name|mdev
operator|->
name|mousemsg
index|[
literal|1
index|]
operator|.
name|TheAddress
expr_stmt|;
block|}
if|if
condition|(
name|x
operator|<
literal|0
condition|)
name|mdev
operator|->
name|x
operator|=
literal|0
expr_stmt|;
else|else
name|mdev
operator|->
name|x
operator|=
name|x
expr_stmt|;
if|if
condition|(
name|y
operator|<
literal|0
condition|)
name|mdev
operator|->
name|y
operator|=
literal|0
expr_stmt|;
else|else
name|mdev
operator|->
name|y
operator|=
name|y
expr_stmt|;
name|msg
operator|->
name|x
operator|=
name|mdev
operator|->
name|x
expr_stmt|;
name|msg
operator|->
name|y
operator|=
name|mdev
operator|->
name|y
expr_stmt|;
name|msg
operator|->
name|buttons
operator|=
name|mdev
operator|->
name|mousemsg
index|[
literal|0
index|]
operator|.
name|TheAddress
expr_stmt|;
return|return
name|Success
return|;
block|}
end_function
begin_function
DECL|function|MOUSE_ShouldFilter
name|Error
name|MOUSE_ShouldFilter
parameter_list|(
name|MOUSEHandler
name|handler
parameter_list|,
name|Boolean
modifier|*
name|filter
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|==
name|NULL
condition|)
return|return
name|Failure
return|;
operator|*
name|filter
operator|=
literal|false
expr_stmt|;
return|return
name|Success
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_MOUSE_INTEGRITY
end_comment
end_unit
