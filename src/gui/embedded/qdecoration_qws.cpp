begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdecoration_qws.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qdrawutil.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qregion.h"
end_include
begin_include
include|#
directive|include
file|"qwhatsthis.h"
end_include
begin_include
include|#
directive|include
file|"qmenu.h"
end_include
begin_include
include|#
directive|include
file|"private/qwidget_p.h"
end_include
begin_include
include|#
directive|include
file|"qwsmanager_qws.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*!     \class QDecoration     \ingroup qws      \brief The QDecoration class is a base class for window     decorations in Qt for Embedded Linux      Note that this class is non-portable and only available in     \l{Qt for Embedded Linux}.      \l{Qt for Embedded Linux} provides window management of top level windows     and several ready made decorations (i.e., \c Default, \c Styled     and \c Windows). Custom decorations can be implemented by     subclassing the QDecoration class and creating a decoration plugin     (derived from QDecorationPlugin). The default     implementation of the QDecorationFactory class will automatically     detect the plugin, and load the decoration into the application at     run-time using Qt's \l {How to Create Qt Plugins}{plugin     system}. To actually apply a decoration, use the     QApplication::qwsSetDecoration() function.      When creating a custom decoration, implement the paint() function     to paint the border and title decoration, and the region()     function to return the regions the decoration     occupies. Reimplement the regionClicked() and     regionDoubleClicked() functions to respond to mouse clicks (the     default implementations responds to (single) clicks on items in a     widget's system menu and double clicks on a widget's title).      QDecoration provides the DecorationRegion enum that describes the     various regions of the window decoration, and the regionAt()     function to determine the region containing a given point. The     QDecoration class also provides the DecorationState enum     describing the state of a given region, e.g. whether it is active     or not.      In addition, it is possible to build the system menu for a given     top level widget using the buildSysMenu() function; whenever an     action in this menu is triggered, the menuTriggered() function is     called automatically.      Finally, the QDecoration class provides a couple of static     functions, startMove() and startResize(), which start a move or     resize action by making the appropriate decoration region active     and grabbing the mouse input.      \sa QDecorationFactory, QDecorationPlugin, {Qt for Embedded Linux     Architecture} */
comment|/*!     \fn QDecoration::QDecoration()      Constructs a decoration object. */
comment|/*!     \fn QDecoration::~QDecoration()      Destroys this decoration object. */
comment|/*!     \enum QDecoration::DecorationRegion      This enum describes the various regions of the window decoration.      \value All The entire region used by the window decoration.      \value Top    The top border used to vertically resize the window.     \value Bottom The bottom border used to vertically resize the window.     \value Left   The left border used to horizontally resize the window.     \value Right  The right border used to horizontally resize the window.     \value TopLeft    The top-left corner of the window used to resize the                       window both horizontally and vertically.     \value TopRight   The top-right corner of the window used to resize the                       window both horizontally and vertically.     \value BottomLeft The bottom-left corner of the window used to resize the                       window both horizontally and vertically.     \value BottomRight The bottom-right corner of the window used to resize the                       window both horizontally and vertically.     \value Borders    All the regions used to describe the window's borders.      \value Title    The region containing the window title, used                     to move the window by dragging with the mouse cursor.     \value Close    The region occupied by the close button. Clicking in this                     region closes the window.     \value Minimize The region occupied by the minimize button. Clicking in                     this region minimizes the window.     \value Maximize The region occupied by the maximize button. Clicking in                     this region maximizes the window.     \value Normalize The region occupied by a button used to restore a window's                      normal size. Clicking in this region restores a maximized                      window to its previous size. The region used for this                      button is often also the Maximize region.     \value Menu     The region occupied by the window's menu button. Clicking                     in this region opens the window operations (system) menu.     \value Help     The region occupied by the window's help button. Clicking                     in this region causes the context-sensitive help function                     to be enabled.     \value Resize   The region used to resize the window.     \value Move     The region used to move the window.     \value None      No region.      \sa region(), regionAt(), DecorationState */
comment|/*!     \enum QDecoration::DecorationState      This enum describes the various states of a decoration region.      \value Normal The region is active     \value Disabled The region is inactive.     \value Hover The cursor is hovering over the region.     \value Pressed The region is pressed.      \sa paint(), DecorationRegion */
comment|/*!     \fn QRegion QDecoration::region(const QWidget *widget, const QRect& rectangle, int decorationRegion)      Implement this function to return the region specified by \a     decorationRegion for the given top level \a widget.      The \a rectangle parameter specifies the rectangle the decoration     is wrapped around. The \a decorationRegion is a bitmask of the     values described by the DecorationRegion enum.      \sa regionAt(), paint() */
comment|/*!     \fn QRegion QDecoration::region(const QWidget *widget, int decorationRegion)     \overload */
comment|/*!     \fn bool QDecoration::paint(QPainter *painter, const QWidget *widget, int decorationRegion,                                 DecorationState state)      Implement this function to paint the border and title decoration     for the specified top level \a widget using the given \a painter     and decoration \a state. The specified \a decorationRegion is a     bitmask of the values described by the DecorationRegion enum.      Note that \l{Qt for Embedded Linux} expects this function to return true if     any of the widget's decorations are repainted; otherwise it should     return false.      \sa region() */
comment|/*!     \fn int QDecoration::regionAt(const QWidget *widget, const QPoint&point)      Returns the type of the first region of the specified top level \a     widget containing the given \a point.      The return value is one of the DecorationRegion enum's values. Use     the region() function to retrieve the actual region. If none of     the widget's regions contain the point, this function returns \l     None.      \sa region() */
DECL|function|regionAt
name|int
name|QDecoration
operator|::
name|regionAt
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|point
parameter_list|)
block|{
name|int
name|regions
index|[]
init|=
block|{
name|TopLeft
block|,
name|Top
block|,
name|TopRight
block|,
name|Left
block|,
name|Right
block|,
name|BottomLeft
block|,
name|Bottom
block|,
name|BottomRight
block|,
comment|// Borders first
name|Menu
block|,
name|Title
block|,
name|Help
block|,
name|Minimize
block|,
name|Normalize
block|,
name|Maximize
block|,
name|Close
block|,
comment|// then buttons
name|None
block|}
decl_stmt|;
comment|//     char *regions_str[] = {
comment|//         "TopLeft", "Top", "TopRight", "Left", "Right", "BottomLeft", "Bottom", "BottomRight",
comment|//         "Menu", "Title", "Help", "Minimize", "Normalize", "Maximize", "Close",
comment|//         "None"
comment|//     };
comment|// First check to see if within all regions at all
name|QRegion
name|reg
init|=
name|region
argument_list|(
name|w
argument_list|,
name|w
operator|->
name|geometry
argument_list|()
argument_list|,
name|All
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|reg
operator|.
name|contains
argument_list|(
name|point
argument_list|)
condition|)
block|{
return|return
name|None
return|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|regions
index|[
name|i
index|]
condition|)
block|{
name|reg
operator|=
name|region
argument_list|(
name|w
argument_list|,
name|w
operator|->
name|geometry
argument_list|()
argument_list|,
name|regions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|reg
operator|.
name|contains
argument_list|(
name|point
argument_list|)
condition|)
block|{
comment|//            qDebug("In region %s", regions_str[i]);
return|return
name|regions
index|[
name|i
index|]
return|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
name|None
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MENU
end_ifndef
begin_comment
comment|/*!     Builds the system menu for the given top level \a widget, adding     \gui Restore, \gui Move, \gui Size, \gui Minimize, \gui Maximize     and \gui Close actions to the given \a menu.      \sa menuTriggered() */
end_comment
begin_function
DECL|function|buildSysMenu
name|void
name|QDecoration
operator|::
name|buildSysMenu
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QMenu
modifier|*
name|menu
parameter_list|)
block|{
name|QDecorationAction
modifier|*
name|act
init|=
operator|new
name|QDecorationAction
argument_list|(
name|QLatin1String
argument_list|(
literal|"Restore"
argument_list|)
argument_list|,
name|menu
argument_list|,
name|Maximize
argument_list|)
decl_stmt|;
name|act
operator|->
name|setEnabled
argument_list|(
name|widget
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|act
argument_list|)
expr_stmt|;
name|act
operator|=
operator|new
name|QDecorationAction
argument_list|(
name|QLatin1String
argument_list|(
literal|"Move"
argument_list|)
argument_list|,
name|menu
argument_list|,
name|Move
argument_list|)
expr_stmt|;
name|act
operator|->
name|setEnabled
argument_list|(
operator|!
operator|(
name|widget
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|act
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
operator|new
name|QDecorationAction
argument_list|(
name|QLatin1String
argument_list|(
literal|"Size"
argument_list|)
argument_list|,
name|menu
argument_list|,
name|Resize
argument_list|)
argument_list|)
expr_stmt|;
name|act
operator|=
operator|new
name|QDecorationAction
argument_list|(
name|QLatin1String
argument_list|(
literal|"Minimize"
argument_list|)
argument_list|,
name|menu
argument_list|,
name|Minimize
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|act
argument_list|)
expr_stmt|;
name|act
operator|=
operator|new
name|QDecorationAction
argument_list|(
name|QLatin1String
argument_list|(
literal|"Maximize"
argument_list|)
argument_list|,
name|menu
argument_list|,
name|Maximize
argument_list|)
expr_stmt|;
name|act
operator|->
name|setDisabled
argument_list|(
name|widget
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|act
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
operator|new
name|QDecorationAction
argument_list|(
name|QLatin1String
argument_list|(
literal|"Close"
argument_list|)
argument_list|,
name|menu
argument_list|,
name|Close
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     This function is called whenever an action in a top level widget's     menu is triggered, and simply calls the regionClicked() function     passing the \a widget and \a action parameters as arguments.      \sa buildSysMenu() */
end_comment
begin_function
DECL|function|menuTriggered
name|void
name|QDecoration
operator|::
name|menuTriggered
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QAction
modifier|*
name|action
parameter_list|)
block|{
name|QDecorationAction
modifier|*
name|decAction
init|=
cast|static_cast
argument_list|<
name|QDecorationAction
operator|*
argument_list|>
argument_list|(
name|action
argument_list|)
decl_stmt|;
name|regionClicked
argument_list|(
name|widget
argument_list|,
name|decAction
operator|->
name|reg
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_MENU
end_comment
begin_comment
comment|/*!     \fn void QDecoration::regionClicked(QWidget *widget, int region)      Handles the event that the specified \a region in the given top     level \a widget is activated by a single click (the \a region     parameter is described using the DecorationRegion enum).      This function is called whenever a region in a top level widget is     clicked; the default implementation responds to clicks on items in     the system menu, performing the requested actions.      \sa regionDoubleClicked(), region() */
end_comment
begin_function
DECL|function|regionClicked
name|void
name|QDecoration
operator|::
name|regionClicked
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|int
name|reg
parameter_list|)
block|{
switch|switch
condition|(
name|reg
condition|)
block|{
case|case
name|Move
case|:
name|startMove
argument_list|(
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|Resize
case|:
name|startResize
argument_list|(
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|Help
case|:
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
if|if
condition|(
name|QWhatsThis
operator|::
name|inWhatsThisMode
argument_list|()
condition|)
name|QWhatsThis
operator|::
name|leaveWhatsThisMode
argument_list|()
expr_stmt|;
else|else
name|QWhatsThis
operator|::
name|enterWhatsThisMode
argument_list|()
expr_stmt|;
endif|#
directive|endif
break|break;
case|case
name|Close
case|:
name|widget
operator|->
name|close
argument_list|()
expr_stmt|;
break|break;
case|case
name|Normalize
case|:
name|widget
operator|->
name|showNormal
argument_list|()
expr_stmt|;
break|break;
case|case
name|Maximize
case|:
if|if
condition|(
name|widget
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
name|widget
operator|->
name|showNormal
argument_list|()
expr_stmt|;
else|else
name|widget
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_comment
comment|/*!     \fn void QDecoration::regionDoubleClicked(QWidget *widget, int region)      Handles the event that the specified \a region in the given top     level \a widget is activated by a double click (the region     parameter is described using the DecorationRegion enum).      This function is called whenever a region in a top level widget is     double clicked; the default implementation responds to a double     click on the widget's title, toggling its size between the maximum     and its normal size.      \sa regionClicked(), region() */
end_comment
begin_function
DECL|function|regionDoubleClicked
name|void
name|QDecoration
operator|::
name|regionDoubleClicked
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|int
name|reg
parameter_list|)
block|{
switch|switch
condition|(
name|reg
condition|)
block|{
case|case
name|Title
case|:
block|{
if|if
condition|(
name|widget
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
name|widget
operator|->
name|showNormal
argument_list|()
expr_stmt|;
else|else
name|widget
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     Starts to move the given top level \a widget by making its \l     Title region active and grabbing the mouse input.      \sa startResize() */
end_comment
begin_function
DECL|function|startMove
name|void
name|QDecoration
operator|::
name|startMove
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_QWS_MANAGER
name|Q_UNUSED
argument_list|(
name|widget
argument_list|)
expr_stmt|;
else|#
directive|else
name|QWSManager
modifier|*
name|manager
init|=
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
operator|->
name|qwsManager
decl_stmt|;
if|if
condition|(
name|manager
condition|)
name|manager
operator|->
name|startMove
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     Starts to resize the given top level \a widget by making its \l     BottomRight region active and grabbing the mouse input.      \sa startMove() */
end_comment
begin_function
DECL|function|startResize
name|void
name|QDecoration
operator|::
name|startResize
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_QWS_MANAGER
name|Q_UNUSED
argument_list|(
name|widget
argument_list|)
expr_stmt|;
else|#
directive|else
name|QWSManager
modifier|*
name|manager
init|=
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
operator|->
name|qwsManager
decl_stmt|;
if|if
condition|(
name|manager
condition|)
name|manager
operator|->
name|startResize
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
