begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwscommand_qws_p.h"
end_include
begin_include
include|#
directive|include
file|"qtransportauth_qws.h"
end_include
begin_include
include|#
directive|include
file|"qtransportauth_qws_p.h"
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_comment
comment|// #define QWSCOMMAND_DEBUG 1 // Uncomment to debug client/server communication
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QWSCOMMAND_DEBUG
end_ifdef
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|"qfile.h"
end_include
begin_include
include|#
directive|include
file|<ctype.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_ifdef
ifdef|#
directive|ifdef
name|QWSCOMMAND_DEBUG
end_ifdef
begin_comment
comment|// QWSHexDump -[ start ]---------------------------------------------
end_comment
begin_define
DECL|macro|QWSHEXDUMP_MAX
define|#
directive|define
name|QWSHEXDUMP_MAX
value|32
end_define
begin_class
DECL|class|QWSHexDump
class|class
name|QWSHexDump
block|{
public|public:
DECL|function|QWSHexDump
name|QWSHexDump
parameter_list|(
specifier|const
name|void
modifier|*
name|address
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|wrapAt
init|=
literal|16
parameter_list|)
member_init_list|:
name|wrap
argument_list|(
name|wrapAt
argument_list|)
member_init_list|,
name|dataSize
argument_list|(
name|len
argument_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|data
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|address
argument_list|)
expr_stmt|;
if|if
condition|(
name|len
operator|<
literal|0
condition|)
name|dataSize
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|QWSHexDump
name|QWSHexDump
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|int
name|len
init|=
operator|-
literal|1
parameter_list|,
name|int
name|wrapAt
init|=
literal|16
parameter_list|)
member_init_list|:
name|wrap
argument_list|(
name|wrapAt
argument_list|)
member_init_list|,
name|dataSize
argument_list|(
name|len
argument_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|data
operator|=
name|str
expr_stmt|;
if|if
condition|(
name|len
operator|==
operator|-
literal|1
condition|)
name|dataSize
operator|=
name|str
condition|?
name|strlen
argument_list|(
name|str
argument_list|)
else|:
literal|0
expr_stmt|;
block|}
DECL|function|QWSHexDump
name|QWSHexDump
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|array
parameter_list|,
name|int
name|wrapAt
init|=
literal|16
parameter_list|)
member_init_list|:
name|wrap
argument_list|(
name|wrapAt
argument_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|data
operator|=
name|array
operator|.
name|data
argument_list|()
expr_stmt|;
name|dataSize
operator|=
name|array
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
comment|// Sets a customized prefix for the hexdump
DECL|function|setPrefix
name|void
name|setPrefix
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|)
block|{
name|prefix
operator|=
name|str
expr_stmt|;
block|}
comment|// Sets number of bytes to cluster together
DECL|function|setClusterSize
name|void
name|setClusterSize
parameter_list|(
name|uint
name|num
parameter_list|)
block|{
name|clustering
operator|=
name|num
expr_stmt|;
block|}
comment|// Output hexdump to a text stream
DECL|function|intoTextStream
name|void
name|intoTextStream
parameter_list|(
name|QTextStream
modifier|&
name|strm
parameter_list|)
block|{
name|outstrm
operator|=
operator|&
name|strm
expr_stmt|;
name|hexDump
argument_list|()
expr_stmt|;
block|}
comment|// Output hexdump to a QString
name|QString
name|toString
parameter_list|()
function_decl|;
protected|protected:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|hexDump
parameter_list|()
function_decl|;
name|void
name|sideviewDump
parameter_list|(
name|int
name|at
parameter_list|)
function_decl|;
private|private:
DECL|member|wrap
name|uint
name|wrap
decl_stmt|;
DECL|member|clustering
name|uint
name|clustering
decl_stmt|;
DECL|member|dataSize
name|uint
name|dataSize
decl_stmt|;
DECL|member|dataWidth
name|int
name|dataWidth
decl_stmt|;
DECL|member|data
specifier|const
name|char
modifier|*
name|data
decl_stmt|;
DECL|member|prefix
specifier|const
name|char
modifier|*
name|prefix
decl_stmt|;
DECL|member|dirty
name|bool
name|dirty
decl_stmt|;
DECL|member|sideviewLayout
name|char
name|sideviewLayout
index|[
name|QWSHEXDUMP_MAX
operator|+
literal|1
index|]
decl_stmt|;
DECL|member|sideview
name|char
name|sideview
index|[
literal|15
index|]
decl_stmt|;
DECL|member|outstrm
name|QTextStream
modifier|*
name|outstrm
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|init
name|void
name|QWSHexDump
operator|::
name|init
parameter_list|()
block|{
name|prefix
operator|=
literal|"> "
expr_stmt|;
comment|// Standard line prefix
name|clustering
operator|=
literal|2
expr_stmt|;
comment|// Word-size clustering by default
if|if
condition|(
name|wrap
operator|>
name|QWSHEXDUMP_MAX
condition|)
comment|// No wider than QWSHexDump_MAX bytes
name|wrap
operator|=
name|QWSHEXDUMP_MAX
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hexDump
name|void
name|QWSHexDump
operator|::
name|hexDump
parameter_list|()
block|{
operator|*
name|outstrm
operator|<<
literal|'('
operator|<<
name|dataSize
operator|<<
literal|" bytes):\n"
operator|<<
name|prefix
expr_stmt|;
name|sprintf
argument_list|(
name|sideviewLayout
argument_list|,
literal|" [%%-%us]"
argument_list|,
name|wrap
argument_list|)
expr_stmt|;
name|dataWidth
operator|=
operator|(
literal|2
operator|*
name|wrap
operator|)
operator|+
operator|(
name|wrap
operator|/
name|clustering
operator|)
expr_stmt|;
name|dirty
operator|=
literal|false
expr_stmt|;
name|uint
name|wrapIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataSize
condition|;
name|i
operator|++
control|)
block|{
name|uint
name|c
init|=
cast|static_cast
argument_list|<
name|uchar
argument_list|>
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|sideview
index|[
name|wrapIndex
operator|=
name|i
operator|%
name|wrap
index|]
operator|=
name|isprint
argument_list|(
name|c
argument_list|)
condition|?
name|c
else|:
literal|'.'
expr_stmt|;
if|if
condition|(
name|wrapIndex
operator|&&
operator|(
name|wrapIndex
operator|%
name|clustering
operator|==
literal|0
operator|)
condition|)
operator|*
name|outstrm
operator|<<
literal|' '
expr_stmt|;
name|outstrm
operator|->
name|setFieldWidth
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|outstrm
operator|->
name|setPadChar
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
name|outstrm
operator|->
name|setNumberFlags
argument_list|(
name|QTextStream
operator|::
name|ShowBase
argument_list|)
expr_stmt|;
operator|*
name|outstrm
operator|<<
name|hex
operator|<<
name|c
expr_stmt|;
name|dirty
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|wrapIndex
operator|==
name|wrap
operator|-
literal|1
condition|)
block|{
name|sideviewDump
argument_list|(
name|wrapIndex
argument_list|)
expr_stmt|;
name|wrapIndex
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|dataSize
condition|)
operator|*
name|outstrm
operator|<<
name|endl
operator|<<
name|prefix
expr_stmt|;
block|}
block|}
name|sideviewDump
argument_list|(
name|wrapIndex
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sideviewDump
name|void
name|QWSHexDump
operator|::
name|sideviewDump
parameter_list|(
name|int
name|at
parameter_list|)
block|{
if|if
condition|(
name|dirty
condition|)
block|{
name|dirty
operator|=
literal|false
expr_stmt|;
operator|++
name|at
expr_stmt|;
name|sideview
index|[
name|at
index|]
operator|=
literal|'\0'
expr_stmt|;
name|int
name|currentWidth
init|=
operator|(
literal|2
operator|*
name|at
operator|)
operator|+
operator|(
name|at
operator|/
name|clustering
operator|)
operator|-
operator|(
name|at
operator|%
name|clustering
condition|?
literal|0
else|:
literal|1
operator|)
decl_stmt|;
name|int
name|missing
init|=
name|qMax
argument_list|(
name|dataWidth
operator|-
name|currentWidth
argument_list|,
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
name|missing
operator|--
condition|)
operator|*
name|outstrm
operator|<<
literal|' '
expr_stmt|;
operator|*
name|outstrm
operator|<<
literal|" ["
expr_stmt|;
name|outstrm
operator|->
name|setPadChar
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|outstrm
operator|->
name|setFieldWidth
argument_list|(
name|wrap
argument_list|)
expr_stmt|;
name|outstrm
operator|->
name|setFieldAlignment
argument_list|(
name|QTextStream
operator|::
name|AlignLeft
argument_list|)
expr_stmt|;
operator|*
name|outstrm
operator|<<
name|sideview
expr_stmt|;
operator|*
name|outstrm
operator|<<
literal|']'
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Output hexdump to a QString
end_comment
begin_function
DECL|function|toString
name|QString
name|QWSHexDump
operator|::
name|toString
parameter_list|()
block|{
name|QString
name|result
decl_stmt|;
name|QTextStream
name|strm
argument_list|(
operator|&
name|result
argument_list|,
name|QFile
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|outstrm
operator|=
operator|&
name|strm
expr_stmt|;
name|hexDump
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
end_ifndef
begin_function
DECL|function|operator <<
name|QDebug
modifier|&
name|operator
name|<<
parameter_list|(
name|QDebug
modifier|&
name|dbg
parameter_list|,
name|QWSHexDump
modifier|*
name|hd
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hd
condition|)
return|return
name|dbg
operator|<<
literal|"QWSHexDump(0x0)"
return|;
name|QString
name|result
init|=
name|hd
operator|->
name|toString
argument_list|()
decl_stmt|;
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
name|result
expr_stmt|;
return|return
name|dbg
operator|.
name|space
argument_list|()
return|;
block|}
end_function
begin_comment
comment|// GCC& Intel wont handle references here
end_comment
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|dbg
parameter_list|,
name|QWSHexDump
name|hd
parameter_list|)
block|{
return|return
name|dbg
operator|<<
operator|&
name|hd
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QWSHexDump -[ end ]-----------------------------------------------
end_comment
begin_function
DECL|function|operator <<
name|QDebug
modifier|&
name|operator
name|<<
parameter_list|(
name|QDebug
modifier|&
name|dbg
parameter_list|,
name|QWSCommand
operator|::
name|Type
name|tp
parameter_list|)
block|{
name|dbg
operator|<<
name|qws_getCommandTypeString
argument_list|(
name|tp
argument_list|)
expr_stmt|;
return|return
name|dbg
return|;
block|}
end_function
begin_define
DECL|macro|N_EVENTS
define|#
directive|define
name|N_EVENTS
value|19
end_define
begin_decl_stmt
DECL|variable|eventNames
specifier|const
name|char
modifier|*
name|eventNames
index|[
name|N_EVENTS
index|]
init|=
block|{
literal|"NoEvent"
block|,
literal|"Connected"
block|,
literal|"Mouse"
block|,
literal|"Focus"
block|,
literal|"Key"
block|,
literal|"Region"
block|,
literal|"Creation"
block|,
literal|"PropertyNotify"
block|,
literal|"PropertyReply"
block|,
literal|"SelectionClear"
block|,
literal|"SelectionRequest"
block|,
literal|"SelectionNotify"
block|,
literal|"MaxWindowRect"
block|,
literal|"QCopMessage"
block|,
literal|"WindowOperation"
block|,
literal|"IMEvent"
block|,
literal|"IMQuery"
block|,
literal|"IMInit"
block|,
literal|"Font"
block|}
decl_stmt|;
end_decl_stmt
begin_class_decl
class_decl|class
name|QWSServer
class_decl|;
end_class_decl
begin_decl_stmt
specifier|extern
name|QWSServer
modifier|*
name|qwsServer
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qws_getCommandTypeString
specifier|const
name|char
modifier|*
name|qws_getCommandTypeString
parameter_list|(
name|QWSCommand
operator|::
name|Type
name|tp
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|typeStr
decl_stmt|;
switch|switch
condition|(
name|tp
condition|)
block|{
case|case
name|QWSCommand
operator|::
name|Create
case|:
name|typeStr
operator|=
literal|"Create"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|Shutdown
case|:
name|typeStr
operator|=
literal|"Shutdown"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|Region
case|:
name|typeStr
operator|=
literal|"Region"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|RegionMove
case|:
name|typeStr
operator|=
literal|"RegionMove"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|RegionDestroy
case|:
name|typeStr
operator|=
literal|"RegionDestroy"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|SetProperty
case|:
name|typeStr
operator|=
literal|"SetProperty"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|AddProperty
case|:
name|typeStr
operator|=
literal|"AddProperty"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|RemoveProperty
case|:
name|typeStr
operator|=
literal|"RemoveProperty"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|GetProperty
case|:
name|typeStr
operator|=
literal|"GetProperty"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|SetSelectionOwner
case|:
name|typeStr
operator|=
literal|"SetSelectionOwner"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|ConvertSelection
case|:
name|typeStr
operator|=
literal|"ConvertSelection"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|RequestFocus
case|:
name|typeStr
operator|=
literal|"RequestFocus"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|ChangeAltitude
case|:
name|typeStr
operator|=
literal|"ChangeAltitude"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|SetOpacity
case|:
name|typeStr
operator|=
literal|"SetOpacity"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|DefineCursor
case|:
name|typeStr
operator|=
literal|"DefineCursor"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|SelectCursor
case|:
name|typeStr
operator|=
literal|"SelectCursor"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|PositionCursor
case|:
name|typeStr
operator|=
literal|"PositionCursor"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|GrabMouse
case|:
name|typeStr
operator|=
literal|"GrabMouse"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|PlaySound
case|:
name|typeStr
operator|=
literal|"PlaySound"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|QCopRegisterChannel
case|:
name|typeStr
operator|=
literal|"QCopRegisterChannel"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|QCopSend
case|:
name|typeStr
operator|=
literal|"QCopSend"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|RegionName
case|:
name|typeStr
operator|=
literal|"RegionName"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|Identify
case|:
name|typeStr
operator|=
literal|"Identify"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|GrabKeyboard
case|:
name|typeStr
operator|=
literal|"GrabKeyboard"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|RepaintRegion
case|:
name|typeStr
operator|=
literal|"RepaintRegion"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|IMMouse
case|:
name|typeStr
operator|=
literal|"IMMouse"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|IMUpdate
case|:
name|typeStr
operator|=
literal|"IMUpdate"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|IMResponse
case|:
name|typeStr
operator|=
literal|"IMResponse"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|Font
case|:
name|typeStr
operator|=
literal|"Font"
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|Unknown
case|:
default|default:
name|typeStr
operator|=
literal|"Unknown"
expr_stmt|;
break|break;
block|}
return|return
name|typeStr
return|;
block|}
end_function
begin_comment
comment|/*********************************************************************  *  * Functions to read/write commands on/from a socket  *  *********************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
end_ifndef
begin_function
DECL|function|qws_write_command
name|void
name|qws_write_command
parameter_list|(
name|QIODevice
modifier|*
name|socket
parameter_list|,
name|int
name|type
parameter_list|,
name|char
modifier|*
name|simpleData
parameter_list|,
name|int
name|simpleLen
parameter_list|,
name|char
modifier|*
name|rawData
parameter_list|,
name|int
name|rawLen
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QWSCOMMAND_DEBUG
if|if
condition|(
name|simpleLen
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"WRITE simpleData "
operator|<<
name|QWSHexDump
argument_list|(
name|simpleData
argument_list|,
name|simpleLen
argument_list|)
expr_stmt|;
if|if
condition|(
name|rawLen
operator|>
literal|0
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"WRITE rawData "
operator|<<
name|QWSHexDump
argument_list|(
name|rawData
argument_list|,
name|rawLen
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_SXE
name|QTransportAuth
modifier|*
name|a
init|=
name|QTransportAuth
operator|::
name|getInstance
argument_list|()
decl_stmt|;
comment|// ###### as soon as public API can be modified get rid of horrible casts
name|QIODevice
modifier|*
name|ad
init|=
name|a
operator|->
name|passThroughByClient
argument_list|(
cast|reinterpret_cast
argument_list|<
name|QWSClient
operator|*
argument_list|>
argument_list|(
name|socket
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ad
condition|)
name|socket
operator|=
name|ad
expr_stmt|;
endif|#
directive|endif
name|qws_write_uint
argument_list|(
name|socket
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|rawLen
operator|>
name|MAX_COMMAND_SIZE
condition|)
block|{
name|qWarning
argument_list|(
literal|"qws_write_command: Message of size %d too big. "
literal|"Truncated to %d"
argument_list|,
name|rawLen
argument_list|,
name|MAX_COMMAND_SIZE
argument_list|)
expr_stmt|;
name|rawLen
operator|=
name|MAX_COMMAND_SIZE
expr_stmt|;
block|}
name|qws_write_uint
argument_list|(
name|socket
argument_list|,
name|rawLen
operator|==
operator|-
literal|1
condition|?
literal|0
else|:
name|rawLen
argument_list|)
expr_stmt|;
if|if
condition|(
name|simpleData
operator|&&
name|simpleLen
condition|)
name|socket
operator|->
name|write
argument_list|(
name|simpleData
argument_list|,
name|simpleLen
argument_list|)
expr_stmt|;
if|if
condition|(
name|rawLen
operator|&&
name|rawData
condition|)
name|socket
operator|->
name|write
argument_list|(
name|rawData
argument_list|,
name|rawLen
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*   command format: [type][rawLen][simpleData][rawData]   type is already read when entering this function */
end_comment
begin_function
DECL|function|qws_read_command
name|bool
name|qws_read_command
parameter_list|(
name|QIODevice
modifier|*
name|socket
parameter_list|,
name|char
modifier|*
modifier|&
name|simpleData
parameter_list|,
name|int
modifier|&
name|simpleLen
parameter_list|,
name|char
modifier|*
modifier|&
name|rawData
parameter_list|,
name|int
modifier|&
name|rawLen
parameter_list|,
name|int
modifier|&
name|bytesRead
parameter_list|)
block|{
comment|// read rawLen
if|if
condition|(
name|rawLen
operator|==
operator|-
literal|1
condition|)
block|{
name|rawLen
operator|=
name|qws_read_uint
argument_list|(
name|socket
argument_list|)
expr_stmt|;
if|if
condition|(
name|rawLen
operator|==
operator|-
literal|1
condition|)
return|return
literal|false
return|;
block|}
comment|// read simpleData, assumes socket is capable of buffering all the data
if|if
condition|(
name|simpleLen
operator|&&
operator|!
name|rawData
condition|)
block|{
if|if
condition|(
name|socket
operator|->
name|bytesAvailable
argument_list|()
operator|<
name|uint
argument_list|(
name|simpleLen
argument_list|)
condition|)
return|return
literal|false
return|;
name|int
name|tmp
init|=
name|socket
operator|->
name|read
argument_list|(
name|simpleData
argument_list|,
name|simpleLen
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|tmp
operator|==
name|simpleLen
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rawLen
operator|>
name|MAX_COMMAND_SIZE
condition|)
block|{
name|socket
operator|->
name|close
argument_list|()
expr_stmt|;
name|qWarning
argument_list|(
literal|"qws_read_command: Won't read command of length %d, "
literal|"connection closed."
argument_list|,
name|rawLen
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// read rawData
if|if
condition|(
name|rawLen
operator|&&
operator|!
name|rawData
condition|)
block|{
name|rawData
operator|=
operator|new
name|char
index|[
name|rawLen
index|]
expr_stmt|;
name|bytesRead
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|bytesRead
operator|<
name|rawLen
operator|&&
name|socket
operator|->
name|bytesAvailable
argument_list|()
condition|)
name|bytesRead
operator|+=
name|socket
operator|->
name|read
argument_list|(
name|rawData
operator|+
name|bytesRead
argument_list|,
name|rawLen
operator|-
name|bytesRead
argument_list|)
expr_stmt|;
return|return
operator|(
name|bytesRead
operator|==
name|rawLen
operator|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*********************************************************************  *  * QWSCommand base class - only use derived classes from that  *  *********************************************************************/
end_comment
begin_destructor
DECL|function|~QWSProtocolItem
name|QWSProtocolItem
operator|::
name|~
name|QWSProtocolItem
parameter_list|()
block|{
if|if
condition|(
name|deleteRaw
condition|)
operator|delete
index|[]
name|rawDataPtr
expr_stmt|;
block|}
end_destructor
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
end_ifndef
begin_function
DECL|function|write
name|void
name|QWSProtocolItem
operator|::
name|write
parameter_list|(
name|QIODevice
modifier|*
name|s
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QWSCOMMAND_DEBUG
if|if
condition|(
operator|!
name|qwsServer
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"QWSProtocolItem::write sending type "
operator|<<
cast|static_cast
argument_list|<
name|QWSCommand
operator|::
name|Type
argument_list|>
argument_list|(
name|type
argument_list|)
expr_stmt|;
else|else
name|qDebug
argument_list|()
operator|<<
literal|"QWSProtocolItem::write sending event "
operator|<<
operator|(
name|type
operator|<
name|N_EVENTS
condition|?
name|eventNames
index|[
name|type
index|]
else|:
literal|"unknown"
operator|)
expr_stmt|;
endif|#
directive|endif
name|qws_write_command
argument_list|(
name|s
argument_list|,
name|type
argument_list|,
name|simpleDataPtr
argument_list|,
name|simpleLen
argument_list|,
name|rawDataPtr
argument_list|,
name|rawLen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|read
name|bool
name|QWSProtocolItem
operator|::
name|read
parameter_list|(
name|QIODevice
modifier|*
name|s
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QWSCOMMAND_DEBUG
name|QLatin1String
name|reread
argument_list|(
operator|(
name|rawLen
operator|==
operator|-
literal|1
operator|)
condition|?
literal|""
else|:
literal|"REREAD"
argument_list|)
decl_stmt|;
if|if
condition|(
name|qwsServer
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"QWSProtocolItem::read reading type "
operator|<<
cast|static_cast
argument_list|<
name|QWSCommand
operator|::
name|Type
argument_list|>
argument_list|(
name|type
argument_list|)
operator|<<
name|reread
expr_stmt|;
else|else
name|qDebug
argument_list|()
operator|<<
literal|"QWSProtocolItem::read reading event "
operator|<<
operator|(
name|type
operator|<
name|N_EVENTS
condition|?
name|eventNames
index|[
name|type
index|]
else|:
literal|"unknown"
operator|)
operator|<<
name|reread
expr_stmt|;
comment|//qDebug("QWSProtocolItem::read reading event %s", type< N_EVENTS ? eventNames[type] : "unknown");
endif|#
directive|endif
name|bool
name|b
init|=
name|qws_read_command
argument_list|(
name|s
argument_list|,
name|simpleDataPtr
argument_list|,
name|simpleLen
argument_list|,
name|rawDataPtr
argument_list|,
name|rawLen
argument_list|,
name|bytesRead
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
condition|)
block|{
name|setData
argument_list|(
name|rawDataPtr
argument_list|,
name|rawLen
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|deleteRaw
operator|=
literal|true
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QWSCOMMAND_DEBUG
else|else
block|{
name|qDebug
argument_list|()
operator|<<
literal|"error in reading command "
operator|<<
cast|static_cast
argument_list|<
name|QWSCommand
operator|::
name|Type
argument_list|>
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|b
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_MULTIPROCESS
end_comment
begin_function
DECL|function|copyFrom
name|void
name|QWSProtocolItem
operator|::
name|copyFrom
parameter_list|(
specifier|const
name|QWSProtocolItem
modifier|*
name|item
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|item
condition|)
return|return;
name|simpleLen
operator|=
name|item
operator|->
name|simpleLen
expr_stmt|;
name|memcpy
argument_list|(
name|simpleDataPtr
argument_list|,
name|item
operator|->
name|simpleDataPtr
argument_list|,
name|simpleLen
argument_list|)
expr_stmt|;
name|setData
argument_list|(
name|item
operator|->
name|rawDataPtr
argument_list|,
name|item
operator|->
name|rawLen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setData
name|void
name|QWSProtocolItem
operator|::
name|setData
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|,
name|bool
name|allocateMem
parameter_list|)
block|{
if|if
condition|(
name|deleteRaw
condition|)
operator|delete
index|[]
name|rawDataPtr
expr_stmt|;
if|if
condition|(
operator|!
name|data
operator|||
name|len
operator|<=
literal|0
condition|)
block|{
name|rawDataPtr
operator|=
literal|0
expr_stmt|;
name|rawLen
operator|=
literal|0
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|allocateMem
condition|)
block|{
name|rawDataPtr
operator|=
operator|new
name|char
index|[
name|len
index|]
expr_stmt|;
name|memcpy
argument_list|(
name|rawDataPtr
argument_list|,
name|data
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|deleteRaw
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|rawDataPtr
operator|=
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|deleteRaw
operator|=
literal|false
expr_stmt|;
block|}
name|rawLen
operator|=
name|len
expr_stmt|;
block|}
end_function
begin_function
DECL|function|factory
name|QWSCommand
modifier|*
name|QWSCommand
operator|::
name|factory
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|QWSCommand
modifier|*
name|command
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QWSCommand
operator|::
name|Create
case|:
name|command
operator|=
operator|new
name|QWSCreateCommand
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|Shutdown
case|:
name|command
operator|=
operator|new
name|QWSCommand
argument_list|(
name|type
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|Region
case|:
name|command
operator|=
operator|new
name|QWSRegionCommand
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|RegionMove
case|:
name|command
operator|=
operator|new
name|QWSRegionMoveCommand
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|RegionDestroy
case|:
name|command
operator|=
operator|new
name|QWSRegionDestroyCommand
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|AddProperty
case|:
name|command
operator|=
operator|new
name|QWSAddPropertyCommand
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|SetProperty
case|:
name|command
operator|=
operator|new
name|QWSSetPropertyCommand
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|RemoveProperty
case|:
name|command
operator|=
operator|new
name|QWSRemovePropertyCommand
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|GetProperty
case|:
name|command
operator|=
operator|new
name|QWSGetPropertyCommand
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|SetSelectionOwner
case|:
name|command
operator|=
operator|new
name|QWSSetSelectionOwnerCommand
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|RequestFocus
case|:
name|command
operator|=
operator|new
name|QWSRequestFocusCommand
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|ChangeAltitude
case|:
name|command
operator|=
operator|new
name|QWSChangeAltitudeCommand
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|SetOpacity
case|:
name|command
operator|=
operator|new
name|QWSSetOpacityCommand
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|DefineCursor
case|:
name|command
operator|=
operator|new
name|QWSDefineCursorCommand
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|SelectCursor
case|:
name|command
operator|=
operator|new
name|QWSSelectCursorCommand
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|GrabMouse
case|:
name|command
operator|=
operator|new
name|QWSGrabMouseCommand
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|GrabKeyboard
case|:
name|command
operator|=
operator|new
name|QWSGrabKeyboardCommand
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SOUND
case|case
name|QWSCommand
operator|::
name|PlaySound
case|:
name|command
operator|=
operator|new
name|QWSPlaySoundCommand
expr_stmt|;
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_COP
case|case
name|QWSCommand
operator|::
name|QCopRegisterChannel
case|:
name|command
operator|=
operator|new
name|QWSQCopRegisterChannelCommand
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|QCopSend
case|:
name|command
operator|=
operator|new
name|QWSQCopSendCommand
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QWSCommand
operator|::
name|RegionName
case|:
name|command
operator|=
operator|new
name|QWSRegionNameCommand
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|Identify
case|:
name|command
operator|=
operator|new
name|QWSIdentifyCommand
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|RepaintRegion
case|:
name|command
operator|=
operator|new
name|QWSRepaintRegionCommand
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_QWS_INPUTMETHODS
case|case
name|QWSCommand
operator|::
name|IMUpdate
case|:
name|command
operator|=
operator|new
name|QWSIMUpdateCommand
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|IMMouse
case|:
name|command
operator|=
operator|new
name|QWSIMMouseCommand
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|IMResponse
case|:
name|command
operator|=
operator|new
name|QWSIMResponseCommand
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QWSCommand
operator|::
name|PositionCursor
case|:
name|command
operator|=
operator|new
name|QWSPositionCursorCommand
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_QWSEMBEDWIDGET
case|case
name|QWSCommand
operator|::
name|Embed
case|:
name|command
operator|=
operator|new
name|QWSEmbedCommand
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QWSCommand
operator|::
name|Font
case|:
name|command
operator|=
operator|new
name|QWSFontCommand
expr_stmt|;
break|break;
case|case
name|QWSCommand
operator|::
name|ScreenTransform
case|:
name|command
operator|=
operator|new
name|QWSScreenTransformCommand
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"QWSCommand::factory : Type error - got %08x!"
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|command
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
