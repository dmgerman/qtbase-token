begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<qvfbhdr.h>
end_include
begin_include
include|#
directive|include
file|<qkbdvfb_qws.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_KEYBOARD
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_KBD_QVFB
end_ifndef
begin_include
include|#
directive|include
file|<qwindowsystem_qws.h>
end_include
begin_include
include|#
directive|include
file|<qsocketnotifier.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<private/qcore_unix_p.h>
end_include
begin_comment
comment|// overrides QT_OPEN
end_comment
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QVFbKeyboardHandler
name|QVFbKeyboardHandler
operator|::
name|QVFbKeyboardHandler
parameter_list|(
specifier|const
name|QString
modifier|&
name|device
parameter_list|)
member_init_list|:
name|QObject
argument_list|()
block|{
name|terminalName
operator|=
name|device
expr_stmt|;
if|if
condition|(
name|terminalName
operator|.
name|isEmpty
argument_list|()
condition|)
name|terminalName
operator|=
name|QLatin1String
argument_list|(
literal|"/dev/vkdb"
argument_list|)
expr_stmt|;
name|kbdFD
operator|=
operator|-
literal|1
expr_stmt|;
name|kbdIdx
operator|=
literal|0
expr_stmt|;
name|kbdBufferLen
operator|=
sizeof|sizeof
argument_list|(
name|QVFbKeyData
argument_list|)
operator|*
literal|5
expr_stmt|;
name|kbdBuffer
operator|=
operator|new
name|unsigned
name|char
index|[
name|kbdBufferLen
index|]
expr_stmt|;
if|if
condition|(
operator|(
name|kbdFD
operator|=
name|QT_OPEN
argument_list|(
name|terminalName
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDONLY
operator||
name|O_NDELAY
argument_list|)
operator|)
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"Cannot open %s (%s)"
argument_list|,
name|terminalName
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Clear pending input
name|char
name|buf
index|[
literal|2
index|]
decl_stmt|;
while|while
condition|(
name|QT_READ
argument_list|(
name|kbdFD
argument_list|,
name|buf
argument_list|,
literal|1
argument_list|)
operator|>
literal|0
condition|)
block|{ }
name|notifier
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|kbdFD
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|notifier
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readKeyboardData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QVFbKeyboardHandler
name|QVFbKeyboardHandler
operator|::
name|~
name|QVFbKeyboardHandler
parameter_list|()
block|{
if|if
condition|(
name|kbdFD
operator|>=
literal|0
condition|)
name|QT_CLOSE
argument_list|(
name|kbdFD
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|kbdBuffer
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|readKeyboardData
name|void
name|QVFbKeyboardHandler
operator|::
name|readKeyboardData
parameter_list|()
block|{
name|int
name|n
decl_stmt|;
do|do
block|{
name|n
operator|=
name|QT_READ
argument_list|(
name|kbdFD
argument_list|,
name|kbdBuffer
operator|+
name|kbdIdx
argument_list|,
name|kbdBufferLen
operator|-
name|kbdIdx
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
name|kbdIdx
operator|+=
name|n
expr_stmt|;
block|}
do|while
condition|(
name|n
operator|>
literal|0
condition|)
do|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|kbdIdx
operator|-
name|idx
operator|>=
operator|(
name|int
operator|)
sizeof|sizeof
argument_list|(
name|QVFbKeyData
argument_list|)
condition|)
block|{
name|QVFbKeyData
modifier|*
name|kd
init|=
operator|(
name|QVFbKeyData
operator|*
operator|)
operator|(
name|kbdBuffer
operator|+
name|idx
operator|)
decl_stmt|;
if|if
condition|(
name|kd
operator|->
name|unicode
operator|==
literal|0
operator|&&
name|kd
operator|->
name|keycode
operator|==
literal|0
operator|&&
name|kd
operator|->
name|modifiers
operator|==
literal|0
operator|&&
name|kd
operator|->
name|press
condition|)
block|{
comment|// magic exit key
name|qWarning
argument_list|(
literal|"Instructed to quit by Virtual Keyboard"
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|quit
argument_list|()
expr_stmt|;
block|}
name|QWSServer
operator|::
name|processKeyEvent
argument_list|(
name|kd
operator|->
name|unicode
condition|?
name|kd
operator|->
name|unicode
else|:
literal|0xffff
argument_list|,
name|kd
operator|->
name|keycode
argument_list|,
name|kd
operator|->
name|modifiers
argument_list|,
name|kd
operator|->
name|press
argument_list|,
name|kd
operator|->
name|repeat
argument_list|)
expr_stmt|;
name|idx
operator|+=
sizeof|sizeof
argument_list|(
name|QVFbKeyData
argument_list|)
expr_stmt|;
block|}
name|int
name|surplus
init|=
name|kbdIdx
operator|-
name|idx
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|surplus
condition|;
name|i
operator|++
control|)
name|kbdBuffer
index|[
name|i
index|]
operator|=
name|kbdBuffer
index|[
name|idx
operator|+
name|i
index|]
expr_stmt|;
name|kbdIdx
operator|=
name|surplus
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_KBD_QVFB
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_KEYBOARD
end_comment
end_unit
