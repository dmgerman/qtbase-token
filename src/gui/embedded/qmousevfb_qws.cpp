begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_MOUSE_QVFB
end_ifndef
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<qvfbhdr.h>
end_include
begin_include
include|#
directive|include
file|<qmousevfb_qws.h>
end_include
begin_include
include|#
directive|include
file|<qwindowsystem_qws.h>
end_include
begin_include
include|#
directive|include
file|<qsocketnotifier.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qtimer.h>
end_include
begin_include
include|#
directive|include
file|<private/qcore_unix_p.h>
end_include
begin_comment
comment|// overrides QT_OPEN
end_comment
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QVFbMouseHandler
name|QVFbMouseHandler
operator|::
name|QVFbMouseHandler
parameter_list|(
specifier|const
name|QString
modifier|&
name|driver
parameter_list|,
specifier|const
name|QString
modifier|&
name|device
parameter_list|)
member_init_list|:
name|QObject
argument_list|()
member_init_list|,
name|QWSMouseHandler
argument_list|(
name|driver
argument_list|,
name|device
argument_list|)
block|{
name|QString
name|mouseDev
init|=
name|device
decl_stmt|;
if|if
condition|(
name|device
operator|.
name|isEmpty
argument_list|()
condition|)
name|mouseDev
operator|=
name|QLatin1String
argument_list|(
literal|"/dev/vmouse"
argument_list|)
expr_stmt|;
name|mouseFD
operator|=
name|QT_OPEN
argument_list|(
name|mouseDev
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDWR
operator||
name|O_NDELAY
argument_list|)
expr_stmt|;
if|if
condition|(
name|mouseFD
operator|==
operator|-
literal|1
condition|)
block|{
name|perror
argument_list|(
literal|"QVFbMouseHandler::QVFbMouseHandler"
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"QVFbMouseHander: Unable to open device %s"
argument_list|,
name|qPrintable
argument_list|(
name|mouseDev
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Clear pending input
name|char
name|buf
index|[
literal|2
index|]
decl_stmt|;
while|while
condition|(
name|QT_READ
argument_list|(
name|mouseFD
argument_list|,
name|buf
argument_list|,
literal|1
argument_list|)
operator|>
literal|0
condition|)
block|{ }
name|mouseIdx
operator|=
literal|0
expr_stmt|;
name|mouseNotifier
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|mouseFD
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|mouseNotifier
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readMouseData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QVFbMouseHandler
name|QVFbMouseHandler
operator|::
name|~
name|QVFbMouseHandler
parameter_list|()
block|{
if|if
condition|(
name|mouseFD
operator|>=
literal|0
condition|)
name|QT_CLOSE
argument_list|(
name|mouseFD
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|resume
name|void
name|QVFbMouseHandler
operator|::
name|resume
parameter_list|()
block|{
name|mouseNotifier
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|suspend
name|void
name|QVFbMouseHandler
operator|::
name|suspend
parameter_list|()
block|{
name|mouseNotifier
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readMouseData
name|void
name|QVFbMouseHandler
operator|::
name|readMouseData
parameter_list|()
block|{
name|int
name|n
decl_stmt|;
do|do
block|{
name|n
operator|=
name|QT_READ
argument_list|(
name|mouseFD
argument_list|,
name|mouseBuf
operator|+
name|mouseIdx
argument_list|,
name|mouseBufSize
operator|-
name|mouseIdx
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
name|mouseIdx
operator|+=
name|n
expr_stmt|;
block|}
do|while
condition|(
name|n
operator|>
literal|0
condition|)
do|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|int
name|packetsize
init|=
sizeof|sizeof
argument_list|(
name|QPoint
argument_list|)
operator|+
literal|2
operator|*
sizeof|sizeof
argument_list|(
name|int
argument_list|)
decl_stmt|;
while|while
condition|(
name|mouseIdx
operator|-
name|idx
operator|>=
name|packetsize
condition|)
block|{
name|uchar
modifier|*
name|mb
init|=
name|mouseBuf
operator|+
name|idx
decl_stmt|;
name|QPoint
name|mousePos
init|=
operator|*
cast|reinterpret_cast
argument_list|<
name|QPoint
operator|*
argument_list|>
argument_list|(
name|mb
argument_list|)
decl_stmt|;
name|mb
operator|+=
sizeof|sizeof
argument_list|(
name|QPoint
argument_list|)
expr_stmt|;
name|int
name|bstate
init|=
operator|*
cast|reinterpret_cast
argument_list|<
name|int
operator|*
argument_list|>
argument_list|(
name|mb
argument_list|)
decl_stmt|;
name|mb
operator|+=
sizeof|sizeof
argument_list|(
name|int
argument_list|)
expr_stmt|;
name|int
name|wheel
init|=
operator|*
cast|reinterpret_cast
argument_list|<
name|int
operator|*
argument_list|>
argument_list|(
name|mb
argument_list|)
decl_stmt|;
comment|//        limitToScreen(mousePos);
name|mouseChanged
argument_list|(
name|mousePos
argument_list|,
name|bstate
argument_list|,
name|wheel
argument_list|)
expr_stmt|;
name|idx
operator|+=
name|packetsize
expr_stmt|;
block|}
name|int
name|surplus
init|=
name|mouseIdx
operator|-
name|idx
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|surplus
condition|;
name|i
operator|++
control|)
name|mouseBuf
index|[
name|i
index|]
operator|=
name|mouseBuf
index|[
name|idx
operator|+
name|i
index|]
expr_stmt|;
name|mouseIdx
operator|=
name|surplus
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_MOUSE_QVFB
end_comment
end_unit
