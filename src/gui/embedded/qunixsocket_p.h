begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QUNIXSOCKET_P_H
end_ifndef
begin_define
DECL|macro|QUNIXSOCKET_P_H
define|#
directive|define
name|QUNIXSOCKET_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtNetwork/qabstractsocket.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qiodevice.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qshareddata.h>
end_include
begin_extern
extern|extern
literal|"C"
block|{
include|#
directive|include
file|<sys/types.h>
block|}
end_extern
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QUnixSocketRights
name|class
name|QUnixSocketRights
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QUnixSocketRightsPrivate
name|class
name|QUnixSocketRightsPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QUnixSocketPrivate
name|class
name|QUnixSocketPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QUnixSocketMessagePrivate
name|class
name|QUnixSocketMessagePrivate
decl_stmt|;
end_decl_stmt
begin_struct_decl
struct_decl|struct
name|iovec
struct_decl|;
end_struct_decl
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QUnixSocketRights
block|{
name|public
label|:
name|QUnixSocketRights
argument_list|(
name|int
argument_list|)
expr_stmt|;
operator|~
name|QUnixSocketRights
argument_list|()
expr_stmt|;
name|QUnixSocketRights
argument_list|(
specifier|const
name|QUnixSocketRights
operator|&
argument_list|)
expr_stmt|;
name|QUnixSocketRights
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QUnixSocketRights
operator|&
operator|)
decl_stmt|;
name|bool
name|isValid
argument_list|()
specifier|const
expr_stmt|;
name|int
name|dupFd
argument_list|()
specifier|const
expr_stmt|;
name|int
name|peekFd
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|friend
name|class
name|QUnixSocket
decl_stmt|;
name|QUnixSocketRights
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
expr_stmt|;
name|QSharedDataPointer
operator|<
name|QUnixSocketRightsPrivate
operator|>
name|d
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QUnixSocketMessage
block|{
name|public
label|:
name|QUnixSocketMessage
argument_list|()
expr_stmt|;
name|QUnixSocketMessage
argument_list|(
specifier|const
name|QByteArray
operator|&
argument_list|)
expr_stmt|;
name|QUnixSocketMessage
argument_list|(
specifier|const
name|QByteArray
operator|&
argument_list|,
specifier|const
name|QList
operator|<
name|QUnixSocketRights
operator|>
operator|&
argument_list|)
expr_stmt|;
name|QUnixSocketMessage
argument_list|(
specifier|const
name|QUnixSocketMessage
operator|&
argument_list|)
expr_stmt|;
name|QUnixSocketMessage
argument_list|(
specifier|const
name|iovec
operator|*
argument_list|,
name|int
argument_list|)
expr_stmt|;
name|QUnixSocketMessage
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QUnixSocketMessage
operator|&
operator|)
decl_stmt|;
operator|~
name|QUnixSocketMessage
argument_list|()
expr_stmt|;
name|void
name|setBytes
parameter_list|(
specifier|const
name|QByteArray
modifier|&
parameter_list|)
function_decl|;
name|void
name|setRights
argument_list|(
specifier|const
name|QList
operator|<
name|QUnixSocketRights
operator|>
operator|&
argument_list|)
decl_stmt|;
specifier|const
name|QList
operator|<
name|QUnixSocketRights
operator|>
operator|&
name|rights
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|rightsWereTruncated
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|QByteArray
operator|&
name|bytes
argument_list|()
specifier|const
expr_stmt|;
name|pid_t
name|processId
argument_list|()
specifier|const
expr_stmt|;
name|uid_t
name|userId
argument_list|()
specifier|const
expr_stmt|;
name|gid_t
name|groupId
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setProcessId
parameter_list|(
name|pid_t
parameter_list|)
function_decl|;
name|void
name|setUserId
parameter_list|(
name|uid_t
parameter_list|)
function_decl|;
name|void
name|setGroupId
parameter_list|(
name|gid_t
parameter_list|)
function_decl|;
name|bool
name|isValid
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|friend
name|class
name|QUnixSocket
decl_stmt|;
name|friend
name|class
name|QUnixSocketPrivate
decl_stmt|;
name|QSharedDataPointer
operator|<
name|QUnixSocketMessagePrivate
operator|>
name|d
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QUnixSocket
range|:
name|public
name|QIODevice
block|{
name|Q_OBJECT
name|public
operator|:
name|QUnixSocket
argument_list|(
name|QObject
operator|*
operator|=
literal|0
argument_list|)
block|;
name|QUnixSocket
argument_list|(
name|qint64
argument_list|,
name|qint64
argument_list|,
name|QObject
operator|*
operator|=
literal|0
argument_list|)
block|;
name|virtual
operator|~
name|QUnixSocket
argument_list|()
block|;      enum
name|SocketState
block|{
name|UnconnectedState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
block|,
name|HostLookupState
operator|=
name|QAbstractSocket
operator|::
name|HostLookupState
block|,
name|ConnectingState
operator|=
name|QAbstractSocket
operator|::
name|ConnectingState
block|,
name|ConnectedState
operator|=
name|QAbstractSocket
operator|::
name|ConnectedState
block|,
name|BoundState
operator|=
name|QAbstractSocket
operator|::
name|BoundState
block|,
name|ClosingState
operator|=
name|QAbstractSocket
operator|::
name|ClosingState
block|,
name|ListeningState
operator|=
name|QAbstractSocket
operator|::
name|ListeningState
block|,     }
block|;      enum
name|SocketError
block|{
name|NoError
block|,
name|InvalidPath
block|,
name|ResourceError
block|,
name|NonexistentPath
block|,
name|ConnectionRefused
block|,
name|UnknownError
block|,
name|ReadFailure
block|,
name|WriteFailure
block|}
block|;
name|bool
name|connect
argument_list|(
specifier|const
name|QByteArray
operator|&
name|path
argument_list|)
block|;
name|bool
name|setSocketDescriptor
argument_list|(
argument|int socketDescriptor
argument_list|)
block|;
name|int
name|socketDescriptor
argument_list|()
specifier|const
block|;
name|void
name|abort
argument_list|()
block|;
name|void
name|close
argument_list|()
block|;
name|bool
name|flush
argument_list|()
block|;
name|SocketError
name|error
argument_list|()
specifier|const
block|;
name|SocketState
name|state
argument_list|()
specifier|const
block|;
name|QByteArray
name|address
argument_list|()
specifier|const
block|;
name|qint64
name|bytesAvailable
argument_list|()
specifier|const
block|;
name|qint64
name|bytesToWrite
argument_list|()
specifier|const
block|;
name|qint64
name|readBufferSize
argument_list|()
specifier|const
block|;
name|void
name|setReadBufferSize
argument_list|(
argument|qint64 size
argument_list|)
block|;
name|qint64
name|rightsBufferSize
argument_list|()
specifier|const
block|;
name|void
name|setRightsBufferSize
argument_list|(
argument|qint64 size
argument_list|)
block|;
name|bool
name|canReadLine
argument_list|()
specifier|const
block|;
name|qint64
name|write
argument_list|(
argument|const char * data
argument_list|,
argument|qint64 maxSize
argument_list|)
block|{
return|return
name|QIODevice
operator|::
name|write
argument_list|(
name|data
argument_list|,
name|maxSize
argument_list|)
return|;
block|}
name|qint64
name|write
argument_list|(
argument|const QByteArray& byteArray
argument_list|)
block|{
return|return
name|QIODevice
operator|::
name|write
argument_list|(
name|byteArray
argument_list|)
return|;
block|}
name|qint64
name|read
argument_list|(
argument|char * data
argument_list|,
argument|qint64 maxSize
argument_list|)
block|{
return|return
name|QIODevice
operator|::
name|read
argument_list|(
name|data
argument_list|,
name|maxSize
argument_list|)
return|;
block|}
name|QByteArray
name|read
argument_list|(
argument|qint64 maxSize
argument_list|)
block|{
return|return
name|QIODevice
operator|::
name|read
argument_list|(
name|maxSize
argument_list|)
return|;
block|}
name|qint64
name|write
argument_list|(
specifier|const
name|QUnixSocketMessage
operator|&
argument_list|)
block|;
name|QUnixSocketMessage
name|read
argument_list|()
block|;
name|virtual
name|bool
name|isSequential
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|waitForReadyRead
argument_list|(
argument|int msec =
literal|300
argument_list|)
block|;
name|virtual
name|bool
name|waitForBytesWritten
argument_list|(
argument|int msec =
literal|300
argument_list|)
block|;
name|Q_SIGNALS
operator|:
name|void
name|stateChanged
argument_list|(
argument|SocketState socketState
argument_list|)
block|;
name|protected
operator|:
name|virtual
name|qint64
name|readData
argument_list|(
argument|char * data
argument_list|,
argument|qint64 maxSize
argument_list|)
block|;
name|virtual
name|qint64
name|writeData
argument_list|(
argument|const char * data
argument_list|,
argument|qint64 maxSize
argument_list|)
block|;
name|private
operator|:
name|QUnixSocket
argument_list|(
specifier|const
name|QUnixSocket
operator|&
argument_list|)
block|;
name|QUnixSocket
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QUnixSocket
operator|&
operator|)
block|;
name|QUnixSocketPrivate
operator|*
name|d
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QUNIXSOCKET_P_H
end_comment
end_unit
