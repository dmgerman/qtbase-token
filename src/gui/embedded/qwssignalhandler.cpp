begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwssignalhandler_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_SIGNALHANDLER
end_ifndef
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
end_ifndef
begin_include
include|#
directive|include
file|<sys/ipc.h>
end_include
begin_include
include|#
directive|include
file|<sys/sem.h>
end_include
begin_include
include|#
directive|include
file|<private/qcore_unix_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<signal.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QWSSignalHandlerPrivate
class|class
name|QWSSignalHandlerPrivate
super|:
specifier|public
name|QWSSignalHandler
block|{
public|public:
DECL|function|QWSSignalHandlerPrivate
name|QWSSignalHandlerPrivate
parameter_list|()
member_init_list|:
name|QWSSignalHandler
argument_list|()
block|{}
block|}
class|;
end_class
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QWSSignalHandlerPrivate
argument_list|,
name|signalHandlerInstance
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|instance
name|QWSSignalHandler
modifier|*
name|QWSSignalHandler
operator|::
name|instance
parameter_list|()
block|{
return|return
name|signalHandlerInstance
argument_list|()
return|;
block|}
end_function
begin_constructor
DECL|function|QWSSignalHandler
name|QWSSignalHandler
operator|::
name|QWSSignalHandler
parameter_list|()
block|{
specifier|const
name|int
name|signums
index|[]
init|=
block|{
name|SIGHUP
block|,
name|SIGINT
block|,
name|SIGQUIT
block|,
name|SIGILL
block|,
name|SIGABRT
block|,
name|SIGFPE
block|,
name|SIGSEGV
block|,
name|SIGTERM
block|,
name|SIGBUS
block|}
decl_stmt|;
specifier|const
name|int
name|n
init|=
sizeof|sizeof
argument_list|(
name|signums
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|int
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|signum
init|=
name|signums
index|[
name|i
index|]
decl_stmt|;
name|qt_sighandler_t
name|old
init|=
name|signal
argument_list|(
name|signum
argument_list|,
name|handleSignal
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|==
name|SIG_IGN
condition|)
comment|// don't remove shm and semaphores when ignored
name|signal
argument_list|(
name|signum
argument_list|,
name|old
argument_list|)
expr_stmt|;
else|else
name|oldHandlers
index|[
name|signum
index|]
operator|=
operator|(
name|old
operator|==
name|SIG_ERR
condition|?
name|SIG_DFL
else|:
name|old
operator|)
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QWSSignalHandler
name|QWSSignalHandler
operator|::
name|~
name|QWSSignalHandler
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
while|while
condition|(
operator|!
name|semaphores
operator|.
name|isEmpty
argument_list|()
condition|)
name|removeSemaphore
argument_list|(
name|semaphores
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
end_ifndef
begin_function
DECL|function|removeSemaphore
name|void
name|QWSSignalHandler
operator|::
name|removeSemaphore
parameter_list|(
name|int
name|semno
parameter_list|)
block|{
specifier|const
name|int
name|index
init|=
name|semaphores
operator|.
name|lastIndexOf
argument_list|(
name|semno
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|qt_semun
name|semval
decl_stmt|;
name|semval
operator|.
name|val
operator|=
literal|0
expr_stmt|;
name|semctl
argument_list|(
name|semaphores
operator|.
name|at
argument_list|(
name|index
argument_list|)
argument_list|,
literal|0
argument_list|,
name|IPC_RMID
argument_list|,
name|semval
argument_list|)
expr_stmt|;
name|semaphores
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_MULTIPROCESS
end_comment
begin_function
DECL|function|handleSignal
name|void
name|QWSSignalHandler
operator|::
name|handleSignal
parameter_list|(
name|int
name|signum
parameter_list|)
block|{
name|QWSSignalHandler
modifier|*
name|h
init|=
name|instance
argument_list|()
decl_stmt|;
name|signal
argument_list|(
name|signum
argument_list|,
name|h
operator|->
name|oldHandlers
index|[
name|signum
index|]
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
name|qt_semun
name|semval
decl_stmt|;
name|semval
operator|.
name|val
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|h
operator|->
name|semaphores
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|semctl
argument_list|(
name|h
operator|->
name|semaphores
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0
argument_list|,
name|IPC_RMID
argument_list|,
name|semval
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|h
operator|->
name|objects
operator|.
name|clear
argument_list|()
expr_stmt|;
name|raise
argument_list|(
name|signum
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_QWS_NO_SIGNALHANDLER
end_comment
end_unit
