begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qmousetslib_qws.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_QWS_MOUSE_TSLIB
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_PLUGIN
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QtCore/qregexp.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstringlist.h>
end_include
begin_include
include|#
directive|include
file|"qsocketnotifier.h"
end_include
begin_include
include|#
directive|include
file|"qscreen_qws.h"
end_include
begin_include
include|#
directive|include
file|<tslib.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_ifdef
ifdef|#
directive|ifdef
name|TSLIBMOUSEHANDLER_DEBUG
end_ifdef
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \internal      \class QWSTslibMouseHandler     \ingroup qws      \brief The QWSTslibMouseHandler class implements a mouse driver     for the Universal Touch Screen Library, tslib.      QWSTslibMouseHandler inherits the QWSCalibratedMouseHandler class,     providing calibration and noise reduction functionality in     addition to generating mouse events, for devices using the     Universal Touch Screen Library.      To be able to compile this mouse handler, \l{Qt for Embedded Linux}     must be configured with the \c -qt-mouse-tslib option, see the     \l{Pointer Handling} documentation for details. In addition, the tslib     headers and library must be present in the build environment.  The     tslib sources can be downloaded from \l     {http://tslib.berlios.de/}.  Use the \c -L and \c -I options     with \c configure to explicitly specify the location of the     library and its headers:      \snippet doc/src/snippets/code/src_gui_embedded_qmousetslib_qws.cpp 0      In order to use this mouse handler, tslib must also be correctly     installed on the target machine. This includes providing a \c     ts.conf configuration file and setting the necessary environment     variables, see the README file provided with tslib for details.      The ts.conf file will usually contain the following two lines      \snippet doc/src/snippets/code/src_gui_embedded_qmousetslib_qws.cpp 1      To make \l{Qt for Embedded Linux} explicitly choose the tslib mouse     handler, set the QWS_MOUSE_PROTO environment variable.      \sa {Pointer Handling}, {Qt for Embedded Linux} */
end_comment
begin_class
DECL|class|QWSTslibMouseHandlerPrivate
class|class
name|QWSTslibMouseHandlerPrivate
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|QWSTslibMouseHandlerPrivate
parameter_list|(
name|QWSTslibMouseHandler
modifier|*
name|h
parameter_list|,
specifier|const
name|QString
modifier|&
name|device
parameter_list|)
constructor_decl|;
name|~
name|QWSTslibMouseHandlerPrivate
parameter_list|()
destructor_decl|;
name|void
name|suspend
parameter_list|()
function_decl|;
name|void
name|resume
parameter_list|()
function_decl|;
name|void
name|calibrate
parameter_list|(
specifier|const
name|QWSPointerCalibrationData
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
name|clearCalibration
parameter_list|()
function_decl|;
private|private:
DECL|member|handler
name|QWSTslibMouseHandler
modifier|*
name|handler
decl_stmt|;
DECL|member|dev
name|struct
name|tsdev
modifier|*
name|dev
decl_stmt|;
DECL|member|mouseNotifier
name|QSocketNotifier
modifier|*
name|mouseNotifier
decl_stmt|;
DECL|member|jitter_limit
name|int
name|jitter_limit
decl_stmt|;
DECL|member|lastSample
name|struct
name|ts_sample
name|lastSample
decl_stmt|;
DECL|member|wasPressed
name|bool
name|wasPressed
decl_stmt|;
DECL|member|lastdx
name|int
name|lastdx
decl_stmt|;
DECL|member|lastdy
name|int
name|lastdy
decl_stmt|;
DECL|member|calibrated
name|bool
name|calibrated
decl_stmt|;
DECL|member|devName
name|QString
name|devName
decl_stmt|;
name|bool
name|open
parameter_list|()
function_decl|;
name|void
name|close
parameter_list|()
function_decl|;
specifier|inline
name|bool
name|get_sample
parameter_list|(
name|struct
name|ts_sample
modifier|*
name|sample
parameter_list|)
function_decl|;
private|private
name|slots
private|:
name|void
name|readMouseData
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|QWSTslibMouseHandlerPrivate
name|QWSTslibMouseHandlerPrivate
operator|::
name|QWSTslibMouseHandlerPrivate
parameter_list|(
name|QWSTslibMouseHandler
modifier|*
name|h
parameter_list|,
specifier|const
name|QString
modifier|&
name|device
parameter_list|)
member_init_list|:
name|handler
argument_list|(
name|h
argument_list|)
member_init_list|,
name|dev
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mouseNotifier
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|jitter_limit
argument_list|(
literal|3
argument_list|)
block|{
name|QStringList
name|args
init|=
name|device
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
name|QRegExp
name|jitterRegex
argument_list|(
name|QLatin1String
argument_list|(
literal|"^jitter_limit=(\\d+)$"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|args
operator|.
name|indexOf
argument_list|(
name|jitterRegex
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|jitter_limit
operator|=
name|jitterRegex
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|args
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|devName
operator|=
name|args
operator|.
name|join
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|devName
operator|.
name|isNull
argument_list|()
condition|)
block|{
specifier|const
name|char
modifier|*
name|str
init|=
name|getenv
argument_list|(
literal|"TSLIB_TSDEVICE"
argument_list|)
decl_stmt|;
if|if
condition|(
name|str
condition|)
name|devName
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|devName
operator|.
name|isNull
argument_list|()
condition|)
name|devName
operator|=
name|QLatin1String
argument_list|(
literal|"/dev/ts"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|open
argument_list|()
condition|)
return|return;
name|calibrated
operator|=
literal|true
expr_stmt|;
name|int
name|fd
init|=
name|ts_fd
argument_list|(
name|dev
argument_list|)
decl_stmt|;
name|mouseNotifier
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|fd
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|mouseNotifier
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readMouseData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|resume
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWSTslibMouseHandlerPrivate
name|QWSTslibMouseHandlerPrivate
operator|::
name|~
name|QWSTslibMouseHandlerPrivate
parameter_list|()
block|{
name|close
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|open
name|bool
name|QWSTslibMouseHandlerPrivate
operator|::
name|open
parameter_list|()
block|{
name|dev
operator|=
name|ts_open
argument_list|(
name|devName
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dev
condition|)
block|{
name|qCritical
argument_list|(
literal|"QWSTslibMouseHandlerPrivate: ts_open() failed"
literal|" with error: '%s'"
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
name|qCritical
argument_list|(
literal|"Please check your tslib installation!"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|ts_config
argument_list|(
name|dev
argument_list|)
condition|)
block|{
name|qCritical
argument_list|(
literal|"QWSTslibMouseHandlerPrivate: ts_config() failed"
literal|" with error: '%s'"
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
name|qCritical
argument_list|(
literal|"Please check your tslib installation!"
argument_list|)
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|close
name|void
name|QWSTslibMouseHandlerPrivate
operator|::
name|close
parameter_list|()
block|{
if|if
condition|(
name|dev
condition|)
name|ts_close
argument_list|(
name|dev
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|suspend
name|void
name|QWSTslibMouseHandlerPrivate
operator|::
name|suspend
parameter_list|()
block|{
if|if
condition|(
name|mouseNotifier
condition|)
name|mouseNotifier
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resume
name|void
name|QWSTslibMouseHandlerPrivate
operator|::
name|resume
parameter_list|()
block|{
name|memset
argument_list|(
operator|&
name|lastSample
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|lastSample
argument_list|)
argument_list|)
expr_stmt|;
name|wasPressed
operator|=
literal|false
expr_stmt|;
name|lastdx
operator|=
literal|0
expr_stmt|;
name|lastdy
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|mouseNotifier
condition|)
name|mouseNotifier
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|get_sample
name|bool
name|QWSTslibMouseHandlerPrivate
operator|::
name|get_sample
parameter_list|(
name|struct
name|ts_sample
modifier|*
name|sample
parameter_list|)
block|{
if|if
condition|(
operator|!
name|calibrated
condition|)
return|return
operator|(
name|ts_read_raw
argument_list|(
name|dev
argument_list|,
name|sample
argument_list|,
literal|1
argument_list|)
operator|==
literal|1
operator|)
return|;
return|return
operator|(
name|ts_read
argument_list|(
name|dev
argument_list|,
name|sample
argument_list|,
literal|1
argument_list|)
operator|==
literal|1
operator|)
return|;
block|}
end_function
begin_function
DECL|function|readMouseData
name|void
name|QWSTslibMouseHandlerPrivate
operator|::
name|readMouseData
parameter_list|()
block|{
if|if
condition|(
operator|!
name|qt_screen
condition|)
return|return;
for|for
control|(
init|;
condition|;
control|)
block|{
name|struct
name|ts_sample
name|sample
init|=
name|lastSample
decl_stmt|;
name|bool
name|pressed
init|=
name|wasPressed
decl_stmt|;
comment|// Fast return if there's no events.
if|if
condition|(
operator|!
name|get_sample
argument_list|(
operator|&
name|sample
argument_list|)
condition|)
return|return;
name|pressed
operator|=
operator|(
name|sample
operator|.
name|pressure
operator|>
literal|0
operator|)
expr_stmt|;
comment|// Only return last sample unless there's a press/release event.
while|while
condition|(
name|pressed
operator|==
name|wasPressed
condition|)
block|{
if|if
condition|(
operator|!
name|get_sample
argument_list|(
operator|&
name|sample
argument_list|)
condition|)
break|break;
name|pressed
operator|=
operator|(
name|sample
operator|.
name|pressure
operator|>
literal|0
operator|)
expr_stmt|;
block|}
comment|// work around missing coordinates on mouse release in raw mode
if|if
condition|(
operator|!
name|calibrated
operator|&&
operator|!
name|pressed
operator|&&
name|sample
operator|.
name|x
operator|==
literal|0
operator|&&
name|sample
operator|.
name|y
operator|==
literal|0
condition|)
block|{
name|sample
operator|.
name|x
operator|=
name|lastSample
operator|.
name|x
expr_stmt|;
name|sample
operator|.
name|y
operator|=
name|lastSample
operator|.
name|y
expr_stmt|;
block|}
name|int
name|dx
init|=
name|sample
operator|.
name|x
operator|-
name|lastSample
operator|.
name|x
decl_stmt|;
name|int
name|dy
init|=
name|sample
operator|.
name|y
operator|-
name|lastSample
operator|.
name|y
decl_stmt|;
comment|// Remove small movements in oppsite direction
if|if
condition|(
name|dx
operator|*
name|lastdx
operator|<
literal|0
operator|&&
name|qAbs
argument_list|(
name|dx
argument_list|)
operator|<
name|jitter_limit
condition|)
block|{
name|sample
operator|.
name|x
operator|=
name|lastSample
operator|.
name|x
expr_stmt|;
name|dx
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|dy
operator|*
name|lastdy
operator|<
literal|0
operator|&&
name|qAbs
argument_list|(
name|dy
argument_list|)
operator|<
name|jitter_limit
condition|)
block|{
name|sample
operator|.
name|y
operator|=
name|lastSample
operator|.
name|y
expr_stmt|;
name|dy
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|wasPressed
operator|==
name|pressed
operator|&&
name|dx
operator|==
literal|0
operator|&&
name|dy
operator|==
literal|0
condition|)
return|return;
ifdef|#
directive|ifdef
name|TSLIBMOUSEHANDLER_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"last"
operator|<<
name|QPoint
argument_list|(
name|lastSample
operator|.
name|x
argument_list|,
name|lastSample
operator|.
name|y
argument_list|)
operator|<<
literal|"curr"
operator|<<
name|QPoint
argument_list|(
name|sample
operator|.
name|x
argument_list|,
name|sample
operator|.
name|y
argument_list|)
operator|<<
literal|"dx,dy"
operator|<<
name|QPoint
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
operator|<<
literal|"ddx,ddy"
operator|<<
name|QPoint
argument_list|(
name|dx
operator|*
name|lastdx
argument_list|,
name|dy
operator|*
name|lastdy
argument_list|)
operator|<<
literal|"pressed"
operator|<<
name|wasPressed
operator|<<
name|pressed
expr_stmt|;
endif|#
directive|endif
name|lastSample
operator|=
name|sample
expr_stmt|;
name|wasPressed
operator|=
name|pressed
expr_stmt|;
if|if
condition|(
name|dx
operator|!=
literal|0
condition|)
name|lastdx
operator|=
name|dx
expr_stmt|;
if|if
condition|(
name|dy
operator|!=
literal|0
condition|)
name|lastdy
operator|=
name|dy
expr_stmt|;
specifier|const
name|QPoint
name|p
argument_list|(
name|sample
operator|.
name|x
argument_list|,
name|sample
operator|.
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|calibrated
condition|)
block|{
comment|// tslib should do all the translation and filtering, so we send a
comment|// "raw" mouse event
name|handler
operator|->
name|QWSMouseHandler
operator|::
name|mouseChanged
argument_list|(
name|p
argument_list|,
name|pressed
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handler
operator|->
name|sendFiltered
argument_list|(
name|p
argument_list|,
name|pressed
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|clearCalibration
name|void
name|QWSTslibMouseHandlerPrivate
operator|::
name|clearCalibration
parameter_list|()
block|{
name|suspend
argument_list|()
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
name|handler
operator|->
name|QWSCalibratedMouseHandler
operator|::
name|clearCalibration
argument_list|()
expr_stmt|;
name|calibrated
operator|=
literal|false
expr_stmt|;
name|open
argument_list|()
expr_stmt|;
name|resume
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|calibrate
name|void
name|QWSTslibMouseHandlerPrivate
operator|::
name|calibrate
parameter_list|(
specifier|const
name|QWSPointerCalibrationData
modifier|*
name|data
parameter_list|)
block|{
name|suspend
argument_list|()
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
comment|// default implementation writes to /etc/pointercal
comment|// using the same format as the tslib linear module.
name|handler
operator|->
name|QWSCalibratedMouseHandler
operator|::
name|calibrate
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|calibrated
operator|=
literal|true
expr_stmt|;
name|open
argument_list|()
expr_stmt|;
name|resume
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_constructor
DECL|function|QWSTslibMouseHandler
name|QWSTslibMouseHandler
operator|::
name|QWSTslibMouseHandler
parameter_list|(
specifier|const
name|QString
modifier|&
name|driver
parameter_list|,
specifier|const
name|QString
modifier|&
name|device
parameter_list|)
member_init_list|:
name|QWSCalibratedMouseHandler
argument_list|(
name|driver
argument_list|,
name|device
argument_list|)
block|{
name|d
operator|=
operator|new
name|QWSTslibMouseHandlerPrivate
argument_list|(
name|this
argument_list|,
name|device
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_destructor
DECL|function|~QWSTslibMouseHandler
name|QWSTslibMouseHandler
operator|::
name|~
name|QWSTslibMouseHandler
parameter_list|()
block|{
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|suspend
name|void
name|QWSTslibMouseHandler
operator|::
name|suspend
parameter_list|()
block|{
name|d
operator|->
name|suspend
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|resume
name|void
name|QWSTslibMouseHandler
operator|::
name|resume
parameter_list|()
block|{
name|d
operator|->
name|resume
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|clearCalibration
name|void
name|QWSTslibMouseHandler
operator|::
name|clearCalibration
parameter_list|()
block|{
name|d
operator|->
name|clearCalibration
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|calibrate
name|void
name|QWSTslibMouseHandler
operator|::
name|calibrate
parameter_list|(
specifier|const
name|QWSPointerCalibrationData
modifier|*
name|data
parameter_list|)
block|{
name|d
operator|->
name|calibrate
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qmousetslib_qws.moc"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_QWS_MOUSE_TSLIB
end_comment
end_unit
