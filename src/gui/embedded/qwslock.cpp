begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwslock_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
end_ifndef
begin_include
include|#
directive|include
file|"qwssignalhandler_p.h"
end_include
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/ipc.h>
end_include
begin_include
include|#
directive|include
file|<sys/sem.h>
end_include
begin_include
include|#
directive|include
file|<sys/time.h>
end_include
begin_include
include|#
directive|include
file|<time.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_LINUX
end_ifdef
begin_include
include|#
directive|include
file|<linux/version.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<private/qcore_unix_p.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
ifdef|#
directive|ifdef
name|QT_NO_SEMAPHORE
error|#
directive|error
error|QWSLock currently requires semaphores
endif|#
directive|endif
DECL|function|QWSLock
name|QWSLock
operator|::
name|QWSLock
parameter_list|()
block|{
name|semId
operator|=
name|semget
argument_list|(
name|IPC_PRIVATE
argument_list|,
literal|3
argument_list|,
name|IPC_CREAT
operator||
literal|0666
argument_list|)
expr_stmt|;
if|if
condition|(
name|semId
operator|==
operator|-
literal|1
condition|)
block|{
name|perror
argument_list|(
literal|"QWSLock::QWSLock"
argument_list|)
expr_stmt|;
name|qFatal
argument_list|(
literal|"Unable to create semaphore"
argument_list|)
expr_stmt|;
block|}
name|QWSSignalHandler
operator|::
name|instance
argument_list|()
operator|->
name|addSemaphore
argument_list|(
name|semId
argument_list|)
expr_stmt|;
name|qt_semun
name|semval
decl_stmt|;
name|semval
operator|.
name|val
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|semctl
argument_list|(
name|semId
argument_list|,
name|BackingStore
argument_list|,
name|SETVAL
argument_list|,
name|semval
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|perror
argument_list|(
literal|"QWSLock::QWSLock"
argument_list|)
expr_stmt|;
name|qFatal
argument_list|(
literal|"Unable to initialize backingstore semaphore"
argument_list|)
expr_stmt|;
block|}
name|lockCount
index|[
name|BackingStore
index|]
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|semctl
argument_list|(
name|semId
argument_list|,
name|Communication
argument_list|,
name|SETVAL
argument_list|,
name|semval
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|perror
argument_list|(
literal|"QWSLock::QWSLock"
argument_list|)
expr_stmt|;
name|qFatal
argument_list|(
literal|"Unable to initialize communication semaphore"
argument_list|)
expr_stmt|;
block|}
name|lockCount
index|[
name|Communication
index|]
operator|=
literal|0
expr_stmt|;
name|semval
operator|.
name|val
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|semctl
argument_list|(
name|semId
argument_list|,
name|RegionEvent
argument_list|,
name|SETVAL
argument_list|,
name|semval
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|perror
argument_list|(
literal|"QWSLock::QWSLock"
argument_list|)
expr_stmt|;
name|qFatal
argument_list|(
literal|"Unable to initialize region event semaphore"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|QWSLock
name|QWSLock
operator|::
name|QWSLock
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|semId
operator|=
name|id
expr_stmt|;
name|QWSSignalHandler
operator|::
name|instance
argument_list|()
operator|->
name|addSemaphore
argument_list|(
name|semId
argument_list|)
expr_stmt|;
name|lockCount
index|[
literal|0
index|]
operator|=
name|lockCount
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWSLock
name|QWSLock
operator|::
name|~
name|QWSLock
parameter_list|()
block|{
if|if
condition|(
name|semId
operator|==
operator|-
literal|1
condition|)
return|return;
name|QWSSignalHandler
operator|::
name|instance
argument_list|()
operator|->
name|removeSemaphore
argument_list|(
name|semId
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|forceLock
specifier|static
name|bool
name|forceLock
parameter_list|(
name|int
name|semId
parameter_list|,
name|unsigned
name|short
name|semNum
parameter_list|,
name|int
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
do|do
block|{
name|sembuf
name|sops
init|=
block|{
name|semNum
block|,
operator|-
literal|1
block|,
literal|0
block|}
decl_stmt|;
comment|// As the BackingStore lock is a mutex, and only one process may own
comment|// the lock, it's safe to use SEM_UNDO. On the other hand, the
comment|// Communication lock is locked by the client but unlocked by the
comment|// server and therefore can't use SEM_UNDO.
if|if
condition|(
name|semNum
operator|==
name|QWSLock
operator|::
name|BackingStore
condition|)
name|sops
operator|.
name|sem_flg
operator||=
name|SEM_UNDO
expr_stmt|;
name|ret
operator|=
name|semop
argument_list|(
name|semId
argument_list|,
operator|&
name|sops
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|!=
name|EINTR
condition|)
name|qDebug
argument_list|(
literal|"QWSLock::lock: %s"
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|ret
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|==
name|EINTR
condition|)
do|;
return|return
operator|(
name|ret
operator|!=
operator|-
literal|1
operator|)
return|;
block|}
end_function
begin_function
DECL|function|up
specifier|static
name|bool
name|up
parameter_list|(
name|int
name|semId
parameter_list|,
name|unsigned
name|short
name|semNum
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
do|do
block|{
name|sembuf
name|sops
init|=
block|{
name|semNum
block|,
literal|1
block|,
literal|0
block|}
decl_stmt|;
name|ret
operator|=
name|semop
argument_list|(
name|semId
argument_list|,
operator|&
name|sops
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|!=
name|EINTR
condition|)
name|qDebug
argument_list|(
literal|"QWSLock::up: %s"
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|ret
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|==
name|EINTR
condition|)
do|;
return|return
operator|(
name|ret
operator|!=
operator|-
literal|1
operator|)
return|;
block|}
end_function
begin_function
DECL|function|down
specifier|static
name|bool
name|down
parameter_list|(
name|int
name|semId
parameter_list|,
name|unsigned
name|short
name|semNum
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
do|do
block|{
name|sembuf
name|sops
init|=
block|{
name|semNum
block|,
operator|-
literal|1
block|,
literal|0
block|}
decl_stmt|;
name|ret
operator|=
name|semop
argument_list|(
name|semId
argument_list|,
operator|&
name|sops
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|!=
name|EINTR
condition|)
name|qDebug
argument_list|(
literal|"QWSLock::down: %s"
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|ret
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|==
name|EINTR
condition|)
do|;
return|return
operator|(
name|ret
operator|!=
operator|-
literal|1
operator|)
return|;
block|}
end_function
begin_function
DECL|function|getValue
specifier|static
name|int
name|getValue
parameter_list|(
name|int
name|semId
parameter_list|,
name|unsigned
name|short
name|semNum
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
do|do
block|{
name|ret
operator|=
name|semctl
argument_list|(
name|semId
argument_list|,
name|semNum
argument_list|,
name|GETVAL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|!=
name|EINTR
condition|)
name|qDebug
argument_list|(
literal|"QWSLock::getValue: %s"
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|ret
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|==
name|EINTR
condition|)
do|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|lock
name|bool
name|QWSLock
operator|::
name|lock
parameter_list|(
name|LockType
name|type
parameter_list|,
name|int
name|timeout
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|RegionEvent
condition|)
return|return
name|up
argument_list|(
name|semId
argument_list|,
name|RegionEvent
argument_list|)
return|;
if|if
condition|(
name|hasLock
argument_list|(
name|type
argument_list|)
condition|)
block|{
operator|++
name|lockCount
index|[
name|type
index|]
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|forceLock
argument_list|(
name|semId
argument_list|,
name|type
argument_list|,
name|timeout
argument_list|)
condition|)
return|return
literal|false
return|;
operator|++
name|lockCount
index|[
name|type
index|]
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|hasLock
name|bool
name|QWSLock
operator|::
name|hasLock
parameter_list|(
name|LockType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|RegionEvent
condition|)
return|return
operator|(
name|getValue
argument_list|(
name|semId
argument_list|,
name|RegionEvent
argument_list|)
operator|==
literal|0
operator|)
return|;
return|return
operator|(
name|lockCount
index|[
name|type
index|]
operator|>
literal|0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|unlock
name|void
name|QWSLock
operator|::
name|unlock
parameter_list|(
name|LockType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|RegionEvent
condition|)
block|{
name|down
argument_list|(
name|semId
argument_list|,
name|RegionEvent
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|hasLock
argument_list|(
name|type
argument_list|)
condition|)
block|{
operator|--
name|lockCount
index|[
name|type
index|]
expr_stmt|;
if|if
condition|(
name|hasLock
argument_list|(
name|type
argument_list|)
condition|)
return|return;
block|}
specifier|const
name|unsigned
name|short
name|semNum
init|=
name|type
decl_stmt|;
name|int
name|ret
decl_stmt|;
do|do
block|{
name|sembuf
name|sops
init|=
block|{
name|semNum
block|,
literal|1
block|,
literal|0
block|}
decl_stmt|;
if|if
condition|(
name|semNum
operator|==
name|QWSLock
operator|::
name|BackingStore
condition|)
name|sops
operator|.
name|sem_flg
operator||=
name|SEM_UNDO
expr_stmt|;
name|ret
operator|=
name|semop
argument_list|(
name|semId
argument_list|,
operator|&
name|sops
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|!=
name|EINTR
condition|)
name|qDebug
argument_list|(
literal|"QWSLock::unlock: %s"
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|ret
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|==
name|EINTR
condition|)
do|;
block|}
end_function
begin_function
DECL|function|wait
name|bool
name|QWSLock
operator|::
name|wait
parameter_list|(
name|LockType
name|type
parameter_list|,
name|int
name|timeout
parameter_list|)
block|{
name|bool
name|ok
init|=
name|forceLock
argument_list|(
name|semId
argument_list|,
name|type
argument_list|,
name|timeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
name|unlock
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|ok
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_MULTIPROCESS
end_comment
end_unit
