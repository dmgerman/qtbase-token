begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qmousepc_qws.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_MOUSE_PC
end_ifndef
begin_include
include|#
directive|include
file|"qwindowsystem_qws.h"
end_include
begin_include
include|#
directive|include
file|"qsocketnotifier.h"
end_include
begin_include
include|#
directive|include
file|"qwsevent_qws.h"
end_include
begin_include
include|#
directive|include
file|"qwscommand_qws_p.h"
end_include
begin_include
include|#
directive|include
file|"qwsutils_qws.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qpolygon.h"
end_include
begin_include
include|#
directive|include
file|"qtimer.h"
end_include
begin_include
include|#
directive|include
file|"qfile.h"
end_include
begin_include
include|#
directive|include
file|"qtextstream.h"
end_include
begin_include
include|#
directive|include
file|"qstringlist.h"
end_include
begin_include
include|#
directive|include
file|<private/qcore_unix_p.h>
end_include
begin_comment
comment|// overrides QT_OPEN
end_comment
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<sys/ioctl.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<termios.h>
end_include
begin_include
include|#
directive|include
file|<qscreen_qws.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|//#define QWS_MOUSE_DEBUG
end_comment
begin_comment
comment|/*  * Automatic-detection mouse driver  */
end_comment
begin_class
DECL|class|QWSPcMouseSubHandler
class|class
name|QWSPcMouseSubHandler
block|{
protected|protected:
DECL|enumerator|max_buf
enum|enum
block|{
name|max_buf
init|=
literal|32
block|}
enum|;
DECL|member|fd
name|int
name|fd
decl_stmt|;
DECL|member|buffer
name|uchar
name|buffer
index|[
name|max_buf
index|]
decl_stmt|;
DECL|member|nbuf
name|int
name|nbuf
decl_stmt|;
DECL|member|motion
name|QPoint
name|motion
decl_stmt|;
DECL|member|bstate
name|int
name|bstate
decl_stmt|;
DECL|member|wheel
name|int
name|wheel
decl_stmt|;
DECL|member|goodness
name|int
name|goodness
decl_stmt|;
DECL|member|badness
name|int
name|badness
decl_stmt|;
specifier|virtual
name|int
name|tryData
parameter_list|()
function_decl|=
literal|0
function_decl|;
public|public:
DECL|function|QWSPcMouseSubHandler
name|QWSPcMouseSubHandler
parameter_list|(
name|int
name|f
parameter_list|)
member_init_list|:
name|fd
argument_list|(
name|f
argument_list|)
block|{
name|initState
argument_list|()
expr_stmt|;
block|}
DECL|function|~QWSPcMouseSubHandler
specifier|virtual
name|~
name|QWSPcMouseSubHandler
parameter_list|()
block|{}
DECL|function|file
name|int
name|file
parameter_list|()
specifier|const
block|{
return|return
name|fd
return|;
block|}
DECL|function|closeIfNot
name|void
name|closeIfNot
parameter_list|(
name|int
modifier|&
name|f
parameter_list|)
block|{
if|if
condition|(
name|fd
operator|!=
name|f
condition|)
block|{
name|f
operator|=
name|fd
expr_stmt|;
name|QT_CLOSE
argument_list|(
name|fd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|initState
name|void
name|initState
parameter_list|()
block|{
name|nbuf
operator|=
name|bstate
operator|=
name|goodness
operator|=
name|badness
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|worse
name|void
name|worse
parameter_list|(
name|int
name|by
init|=
literal|1
parameter_list|)
block|{
name|badness
operator|+=
name|by
expr_stmt|;
block|}
DECL|function|reliable
name|bool
name|reliable
parameter_list|()
specifier|const
block|{
return|return
name|goodness
operator|>=
literal|5
operator|&&
name|badness
operator|<
literal|50
return|;
block|}
DECL|function|buttonState
name|int
name|buttonState
parameter_list|()
specifier|const
block|{
return|return
name|bstate
return|;
block|}
DECL|function|motionPending
name|bool
name|motionPending
parameter_list|()
specifier|const
block|{
return|return
name|motion
operator|!=
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|function|takeMotion
name|QPoint
name|takeMotion
parameter_list|()
block|{
name|QPoint
name|r
init|=
name|motion
decl_stmt|;
name|motion
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|function|takeWheel
name|int
name|takeWheel
parameter_list|()
block|{
name|int
name|result
init|=
name|wheel
decl_stmt|;
name|wheel
operator|=
literal|0
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|function|appendData
name|void
name|appendData
parameter_list|(
name|uchar
modifier|*
name|data
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|memcpy
argument_list|(
name|buffer
operator|+
name|nbuf
argument_list|,
name|data
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|nbuf
operator|+=
name|length
expr_stmt|;
block|}
DECL|enum|UsageResult
DECL|enumerator|Insufficient
DECL|enumerator|Motion
DECL|enumerator|Button
enum|enum
name|UsageResult
block|{
name|Insufficient
block|,
name|Motion
block|,
name|Button
block|}
enum|;
DECL|function|useData
name|UsageResult
name|useData
parameter_list|()
block|{
name|int
name|pbstate
init|=
name|bstate
decl_stmt|;
name|int
name|n
init|=
name|tryData
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QWS_MOUSE_DEBUG
if|if
condition|(
name|n
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"QWSPcMouseSubHandler tryData read %d bytes:"
argument_list|,
name|n
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|" %02x"
argument_list|,
name|buffer
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|n
operator|<
name|nbuf
condition|)
name|memmove
argument_list|(
name|buffer
argument_list|,
name|buffer
operator|+
name|n
argument_list|,
name|nbuf
operator|-
name|n
argument_list|)
expr_stmt|;
name|nbuf
operator|-=
name|n
expr_stmt|;
return|return
operator|(
name|wheel
operator|||
name|pbstate
operator|!=
name|bstate
operator|)
condition|?
name|Button
else|:
name|Motion
return|;
block|}
return|return
name|Insufficient
return|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|QWSPcMouseSubHandler_intellimouse
class|class
name|QWSPcMouseSubHandler_intellimouse
super|:
specifier|public
name|QWSPcMouseSubHandler
block|{
DECL|member|packetsize
name|int
name|packetsize
decl_stmt|;
public|public:
DECL|function|QWSPcMouseSubHandler_intellimouse
name|QWSPcMouseSubHandler_intellimouse
parameter_list|(
name|int
name|f
parameter_list|)
member_init_list|:
name|QWSPcMouseSubHandler
argument_list|(
name|f
argument_list|)
block|{
name|init
argument_list|()
expr_stmt|;
block|}
DECL|function|init
name|void
name|init
parameter_list|()
block|{
name|int
name|n
decl_stmt|;
name|uchar
name|reply
index|[
literal|20
index|]
decl_stmt|;
if|if
condition|(
name|tcflush
argument_list|(
name|fd
argument_list|,
name|TCIOFLUSH
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
ifdef|#
directive|ifdef
name|QWS_MOUSE_DEBUG
name|perror
argument_list|(
literal|"QWSPcMouseSubHandler_intellimouse: pre-init tcflush"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
specifier|static
specifier|const
name|uchar
name|initseq
index|[]
init|=
block|{
literal|243
block|,
literal|200
block|,
literal|243
block|,
literal|100
block|,
literal|243
block|,
literal|80
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|query
index|[]
init|=
block|{
literal|0xf2
block|}
decl_stmt|;
if|if
condition|(
name|QT_WRITE
argument_list|(
name|fd
argument_list|,
name|initseq
argument_list|,
sizeof|sizeof
argument_list|(
name|initseq
argument_list|)
argument_list|)
operator|!=
sizeof|sizeof
argument_list|(
name|initseq
argument_list|)
condition|)
block|{
name|badness
operator|=
literal|100
expr_stmt|;
return|return;
block|}
name|usleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
if|if
condition|(
name|tcflush
argument_list|(
name|fd
argument_list|,
name|TCIOFLUSH
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
ifdef|#
directive|ifdef
name|QWS_MOUSE_DEBUG
name|perror
argument_list|(
literal|"QWSPcMouseSubHandler_intellimouse: post-init tcflush"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
if|if
condition|(
name|QT_WRITE
argument_list|(
name|fd
argument_list|,
name|query
argument_list|,
sizeof|sizeof
argument_list|(
name|query
argument_list|)
argument_list|)
operator|!=
sizeof|sizeof
argument_list|(
name|query
argument_list|)
condition|)
block|{
name|badness
operator|=
literal|100
expr_stmt|;
return|return;
block|}
name|usleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|n
operator|=
name|QT_READ
argument_list|(
name|fd
argument_list|,
name|reply
argument_list|,
literal|20
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|goodness
operator|=
literal|10
expr_stmt|;
switch|switch
condition|(
name|reply
index|[
name|n
operator|-
literal|1
index|]
condition|)
block|{
case|case
literal|3
case|:
case|case
literal|4
case|:
name|packetsize
operator|=
literal|4
expr_stmt|;
break|break;
default|default:
name|packetsize
operator|=
literal|3
expr_stmt|;
block|}
block|}
else|else
block|{
name|badness
operator|=
literal|100
expr_stmt|;
block|}
block|}
DECL|function|tryData
name|int
name|tryData
parameter_list|()
block|{
if|if
condition|(
name|nbuf
operator|>=
name|packetsize
condition|)
block|{
comment|//int overflow = (buffer[0]>>6)& 0x03;
if|if
condition|(
comment|/*overflow ||*/
operator|!
operator|(
name|buffer
index|[
literal|0
index|]
operator|&
literal|8
operator|)
condition|)
block|{
ifdef|#
directive|ifdef
name|QWS_MOUSE_DEBUG
name|qDebug
argument_list|(
literal|"Intellimouse: skipping (overflow)"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|badness
operator|++
expr_stmt|;
return|return
literal|1
return|;
block|}
else|else
block|{
name|QPoint
name|delta
argument_list|(
operator|(
name|buffer
index|[
literal|0
index|]
operator|&
literal|0x10
operator|)
condition|?
name|buffer
index|[
literal|1
index|]
operator|-
literal|256
else|:
name|buffer
index|[
literal|1
index|]
argument_list|,
operator|(
name|buffer
index|[
literal|0
index|]
operator|&
literal|0x20
operator|)
condition|?
literal|256
operator|-
name|buffer
index|[
literal|2
index|]
else|:
operator|-
name|buffer
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|motion
operator|+=
name|delta
expr_stmt|;
name|int
name|nbstate
init|=
name|buffer
index|[
literal|0
index|]
operator|&
literal|0x7
decl_stmt|;
ifdef|#
directive|ifdef
name|QWS_MOUSE_DEBUG
name|int
name|debugwheel
init|=
endif|#
directive|endif
name|wheel
operator|=
name|packetsize
operator|>
literal|3
condition|?
operator|-
operator|(
name|signed
name|char
operator|)
name|buffer
index|[
literal|3
index|]
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|wheel
argument_list|<
operator|-
literal|2
operator|||
name|wheel
argument_list|>
literal|2
condition|)
name|wheel
operator|=
literal|0
expr_stmt|;
name|wheel
operator|*=
literal|120
expr_stmt|;
comment|// WHEEL_DELTA?
ifdef|#
directive|ifdef
name|QWS_MOUSE_DEBUG
name|qDebug
argument_list|(
literal|"Intellimouse: motion %d,%d, state %d, raw wheel %d, wheel %d"
argument_list|,
name|motion
operator|.
name|x
argument_list|()
argument_list|,
name|motion
operator|.
name|y
argument_list|()
argument_list|,
name|nbstate
argument_list|,
name|debugwheel
argument_list|,
name|wheel
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|motion
operator|.
name|x
argument_list|()
operator|||
name|motion
operator|.
name|y
argument_list|()
operator|||
name|bstate
operator|!=
name|nbstate
operator|||
name|wheel
condition|)
block|{
name|bstate
operator|=
name|nbstate
expr_stmt|;
name|goodness
operator|++
expr_stmt|;
block|}
else|else
block|{
name|badness
operator|++
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
return|return
name|packetsize
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|QWSPcMouseSubHandler_mouseman
class|class
name|QWSPcMouseSubHandler_mouseman
super|:
specifier|public
name|QWSPcMouseSubHandler
block|{
DECL|member|packetsize
name|int
name|packetsize
decl_stmt|;
public|public:
DECL|function|QWSPcMouseSubHandler_mouseman
name|QWSPcMouseSubHandler_mouseman
parameter_list|(
name|int
name|f
parameter_list|)
member_init_list|:
name|QWSPcMouseSubHandler
argument_list|(
name|f
argument_list|)
block|{
name|init
argument_list|()
expr_stmt|;
block|}
DECL|function|init
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|tcflush
argument_list|(
name|fd
argument_list|,
name|TCIOFLUSH
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
ifdef|#
directive|ifdef
name|QWS_MOUSE_DEBUG
name|perror
argument_list|(
literal|"QWSPcMouseSubHandler_mouseman: initial tcflush"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|QT_WRITE
argument_list|(
name|fd
argument_list|,
literal|""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|usleep
argument_list|(
literal|50000
argument_list|)
expr_stmt|;
name|QT_WRITE
argument_list|(
name|fd
argument_list|,
literal|"@EeI!"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|usleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|char
name|ibuf
index|[]
init|=
block|{
literal|246
block|,
literal|244
block|}
decl_stmt|;
name|QT_WRITE
argument_list|(
name|fd
argument_list|,
name|ibuf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QT_WRITE
argument_list|(
name|fd
argument_list|,
name|ibuf
operator|+
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|tcflush
argument_list|(
name|fd
argument_list|,
name|TCIOFLUSH
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
ifdef|#
directive|ifdef
name|QWS_MOUSE_DEBUG
name|perror
argument_list|(
literal|"QWSPcMouseSubHandler_mouseman: tcflush"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|usleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|char
name|buf
index|[
literal|100
index|]
decl_stmt|;
while|while
condition|(
name|QT_READ
argument_list|(
name|fd
argument_list|,
name|buf
argument_list|,
literal|100
argument_list|)
operator|>
literal|0
condition|)
block|{ }
comment|// eat unwanted replies
block|}
DECL|function|tryData
name|int
name|tryData
parameter_list|()
block|{
if|if
condition|(
name|nbuf
operator|>=
literal|3
condition|)
block|{
name|int
name|nbstate
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|buffer
index|[
literal|0
index|]
operator|&
literal|0x01
condition|)
name|nbstate
operator||=
name|Qt
operator|::
name|LeftButton
expr_stmt|;
if|if
condition|(
name|buffer
index|[
literal|0
index|]
operator|&
literal|0x02
condition|)
name|nbstate
operator||=
name|Qt
operator|::
name|RightButton
expr_stmt|;
if|if
condition|(
name|buffer
index|[
literal|0
index|]
operator|&
literal|0x04
condition|)
name|nbstate
operator||=
name|Qt
operator|::
name|MidButton
expr_stmt|;
name|int
name|overflow
init|=
operator|(
name|buffer
index|[
literal|0
index|]
operator|>>
literal|6
operator|)
operator|&
literal|0x03
decl_stmt|;
if|if
condition|(
name|overflow
condition|)
block|{
comment|//### wheel events signalled with overflow bit, ignore for now
name|badness
operator|++
expr_stmt|;
return|return
literal|1
return|;
block|}
else|else
block|{
name|bool
name|xs
init|=
name|buffer
index|[
literal|0
index|]
operator|&
literal|0x10
decl_stmt|;
name|bool
name|ys
init|=
name|buffer
index|[
literal|0
index|]
operator|&
literal|0x20
decl_stmt|;
name|int
name|dx
init|=
name|xs
condition|?
name|buffer
index|[
literal|1
index|]
operator|-
literal|256
else|:
name|buffer
index|[
literal|1
index|]
decl_stmt|;
name|int
name|dy
init|=
name|ys
condition|?
name|buffer
index|[
literal|2
index|]
operator|-
literal|256
else|:
name|buffer
index|[
literal|2
index|]
decl_stmt|;
name|motion
operator|+=
name|QPoint
argument_list|(
name|dx
argument_list|,
operator|-
name|dy
argument_list|)
expr_stmt|;
if|if
condition|(
name|motion
operator|.
name|x
argument_list|()
operator|||
name|motion
operator|.
name|y
argument_list|()
operator|||
name|bstate
operator|!=
name|nbstate
condition|)
block|{
name|bstate
operator|=
name|nbstate
expr_stmt|;
name|goodness
operator|++
expr_stmt|;
block|}
else|else
block|{
name|badness
operator|++
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
return|return
literal|3
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|QWSPcMouseSubHandler_serial
class|class
name|QWSPcMouseSubHandler_serial
super|:
specifier|public
name|QWSPcMouseSubHandler
block|{
public|public:
DECL|function|QWSPcMouseSubHandler_serial
name|QWSPcMouseSubHandler_serial
parameter_list|(
name|int
name|f
parameter_list|)
member_init_list|:
name|QWSPcMouseSubHandler
argument_list|(
name|f
argument_list|)
block|{
name|initSerial
argument_list|()
expr_stmt|;
block|}
protected|protected:
DECL|function|setflags
name|void
name|setflags
parameter_list|(
name|int
name|f
parameter_list|)
block|{
name|termios
name|tty
decl_stmt|;
if|if
condition|(
name|tcgetattr
argument_list|(
name|fd
argument_list|,
operator|&
name|tty
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
ifdef|#
directive|ifdef
name|QWS_MOUSE_DEBUG
name|perror
argument_list|(
literal|"QWSPcMouseSubHandler_serial: tcgetattr"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|tty
operator|.
name|c_iflag
operator|=
name|IGNBRK
operator||
name|IGNPAR
expr_stmt|;
name|tty
operator|.
name|c_oflag
operator|=
literal|0
expr_stmt|;
name|tty
operator|.
name|c_lflag
operator|=
literal|0
expr_stmt|;
name|tty
operator|.
name|c_cflag
operator|=
name|f
operator||
name|CREAD
operator||
name|CLOCAL
operator||
name|HUPCL
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_LINUX
name|tty
operator|.
name|c_line
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
name|tty
operator|.
name|c_cc
index|[
name|VTIME
index|]
operator|=
literal|0
expr_stmt|;
name|tty
operator|.
name|c_cc
index|[
name|VMIN
index|]
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|tcsetattr
argument_list|(
name|fd
argument_list|,
name|TCSANOW
argument_list|,
operator|&
name|tty
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
ifdef|#
directive|ifdef
name|QWS_MOUSE_DEBUG
name|perror
argument_list|(
literal|"QWSPcMouseSubHandler_serial: tcgetattr"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
private|private:
DECL|function|initSerial
name|void
name|initSerial
parameter_list|()
block|{
name|int
name|speed
index|[
literal|4
index|]
init|=
block|{
name|B9600
block|,
name|B4800
block|,
name|B2400
block|,
name|B1200
block|}
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
literal|4
condition|;
name|n
operator|++
control|)
block|{
name|setflags
argument_list|(
name|CSTOPB
operator||
name|speed
index|[
name|n
index|]
argument_list|)
expr_stmt|;
name|QT_WRITE
argument_list|(
name|fd
argument_list|,
literal|"*q"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|usleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
class|;
end_class
begin_class
DECL|class|QWSPcMouseSubHandler_mousesystems
class|class
name|QWSPcMouseSubHandler_mousesystems
super|:
specifier|public
name|QWSPcMouseSubHandler_serial
block|{
public|public:
comment|// ##### This driver has not been tested
DECL|function|QWSPcMouseSubHandler_mousesystems
name|QWSPcMouseSubHandler_mousesystems
parameter_list|(
name|int
name|f
parameter_list|)
member_init_list|:
name|QWSPcMouseSubHandler_serial
argument_list|(
name|f
argument_list|)
block|{
name|init
argument_list|()
expr_stmt|;
block|}
DECL|function|init
name|void
name|init
parameter_list|()
block|{
name|setflags
argument_list|(
name|B1200
operator||
name|CS8
operator||
name|CSTOPB
argument_list|)
expr_stmt|;
comment|// 60Hz
if|if
condition|(
name|QT_WRITE
argument_list|(
name|fd
argument_list|,
literal|"R"
argument_list|,
literal|1
argument_list|)
operator|!=
literal|1
condition|)
block|{
name|badness
operator|=
literal|100
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|tcflush
argument_list|(
name|fd
argument_list|,
name|TCIOFLUSH
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_QWS_VNC_DEBUG
name|perror
argument_list|(
literal|"QWSPcMouseSubHandler_mousesystems: tcflush"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
DECL|function|tryData
name|int
name|tryData
parameter_list|()
block|{
if|if
condition|(
name|nbuf
operator|>=
literal|5
condition|)
block|{
if|if
condition|(
operator|(
name|buffer
index|[
literal|0
index|]
operator|&
literal|0xf8
operator|)
operator|!=
literal|0x80
condition|)
block|{
name|badness
operator|++
expr_stmt|;
return|return
literal|1
return|;
block|}
name|motion
operator|+=
name|QPoint
argument_list|(
operator|(
name|signed
name|char
operator|)
name|buffer
index|[
literal|1
index|]
operator|+
operator|(
name|signed
name|char
operator|)
name|buffer
index|[
literal|3
index|]
argument_list|,
operator|-
operator|(
name|signed
name|char
operator|)
name|buffer
index|[
literal|2
index|]
operator|+
operator|(
name|signed
name|char
operator|)
name|buffer
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|int
name|t
init|=
operator|~
name|buffer
index|[
literal|0
index|]
decl_stmt|;
name|int
name|nbstate
init|=
operator|(
operator|(
name|t
operator|&
literal|3
operator|)
operator|<<
literal|1
operator|)
operator||
operator|(
operator|(
name|t
operator|&
literal|4
operator|)
operator|>>
literal|2
operator|)
decl_stmt|;
if|if
condition|(
name|motion
operator|.
name|x
argument_list|()
operator|||
name|motion
operator|.
name|y
argument_list|()
operator|||
name|bstate
operator|!=
name|nbstate
condition|)
block|{
name|bstate
operator|=
name|nbstate
expr_stmt|;
name|goodness
operator|++
expr_stmt|;
block|}
else|else
block|{
name|badness
operator|++
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
literal|5
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|QWSPcMouseSubHandler_ms
class|class
name|QWSPcMouseSubHandler_ms
super|:
specifier|public
name|QWSPcMouseSubHandler_serial
block|{
DECL|member|mman
name|int
name|mman
decl_stmt|;
public|public:
DECL|function|QWSPcMouseSubHandler_ms
name|QWSPcMouseSubHandler_ms
parameter_list|(
name|int
name|f
parameter_list|)
member_init_list|:
name|QWSPcMouseSubHandler_serial
argument_list|(
name|f
argument_list|)
block|{
name|mman
operator|=
literal|0
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
DECL|function|init
name|void
name|init
parameter_list|()
block|{
name|setflags
argument_list|(
name|B1200
operator||
name|CS7
argument_list|)
expr_stmt|;
comment|// 60Hz
if|if
condition|(
name|QT_WRITE
argument_list|(
name|fd
argument_list|,
literal|"R"
argument_list|,
literal|1
argument_list|)
operator|!=
literal|1
condition|)
block|{
name|badness
operator|=
literal|100
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|tcflush
argument_list|(
name|fd
argument_list|,
name|TCIOFLUSH
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
ifdef|#
directive|ifdef
name|QWS_MOUSE_DEBUG
name|perror
argument_list|(
literal|"QWSPcMouseSubHandler_ms: tcflush"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
DECL|function|tryData
name|int
name|tryData
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|buffer
index|[
literal|0
index|]
operator|&
literal|0x40
operator|)
condition|)
block|{
if|if
condition|(
name|buffer
index|[
literal|0
index|]
operator|==
literal|0x20
operator|&&
operator|(
name|bstate
operator|&
name|Qt
operator|::
name|MidButton
operator|)
condition|)
block|{
name|mman
operator|=
literal|1
expr_stmt|;
comment|// mouseman extension
block|}
return|return
literal|1
return|;
block|}
name|int
name|extra
init|=
name|mman
operator|&&
operator|(
name|bstate
operator|&
name|Qt
operator|::
name|MidButton
operator|)
decl_stmt|;
if|if
condition|(
name|nbuf
operator|>=
literal|3
operator|+
name|extra
condition|)
block|{
name|int
name|nbstate
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|buffer
index|[
literal|0
index|]
operator|==
literal|0x40
operator|&&
operator|!
name|bstate
operator|&&
operator|!
name|buffer
index|[
literal|1
index|]
operator|&&
operator|!
name|buffer
index|[
literal|2
index|]
condition|)
block|{
name|nbstate
operator|=
name|Qt
operator|::
name|MidButton
expr_stmt|;
block|}
else|else
block|{
name|nbstate
operator|=
operator|(
operator|(
name|buffer
index|[
literal|0
index|]
operator|&
literal|0x20
operator|)
operator|>>
literal|5
operator|)
operator||
operator|(
operator|(
name|buffer
index|[
literal|0
index|]
operator|&
literal|0x10
operator|)
operator|>>
literal|3
operator|)
expr_stmt|;
if|if
condition|(
name|extra
operator|&&
name|buffer
index|[
literal|3
index|]
operator|==
literal|0x20
condition|)
name|nbstate
operator|=
name|Qt
operator|::
name|MidButton
expr_stmt|;
block|}
if|if
condition|(
name|buffer
index|[
literal|1
index|]
operator|&
literal|0x40
condition|)
block|{
name|badness
operator|++
expr_stmt|;
return|return
literal|1
return|;
block|}
else|else
block|{
name|motion
operator|+=
name|QPoint
argument_list|(
call|(
name|signed
name|char
call|)
argument_list|(
operator|(
name|buffer
index|[
literal|0
index|]
operator|&
literal|0x3
operator|)
operator|<<
literal|6
argument_list|)
operator||
call|(
name|signed
name|char
call|)
argument_list|(
name|buffer
index|[
literal|1
index|]
operator|&
literal|0x3f
argument_list|)
argument_list|,
call|(
name|signed
name|char
call|)
argument_list|(
operator|(
name|buffer
index|[
literal|0
index|]
operator|&
literal|0xc
operator|)
operator|<<
literal|4
argument_list|)
operator||
call|(
name|signed
name|char
call|)
argument_list|(
name|buffer
index|[
literal|2
index|]
operator|&
literal|0x3f
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|motion
operator|.
name|x
argument_list|()
operator|||
name|motion
operator|.
name|y
argument_list|()
operator|||
name|bstate
operator|!=
name|nbstate
condition|)
block|{
name|bstate
operator|=
name|nbstate
expr_stmt|;
name|goodness
operator|++
expr_stmt|;
block|}
else|else
block|{
name|badness
operator|++
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
literal|3
operator|+
name|extra
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
block|}
class|;
end_class
begin_comment
comment|//===========================================================================
end_comment
begin_class
DECL|class|QWSPcMouseHandlerPrivate
class|class
name|QWSPcMouseHandlerPrivate
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|QWSPcMouseHandlerPrivate
parameter_list|(
name|QWSPcMouseHandler
modifier|*
name|h
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|)
constructor_decl|;
name|~
name|QWSPcMouseHandlerPrivate
parameter_list|()
destructor_decl|;
name|void
name|suspend
parameter_list|()
function_decl|;
name|void
name|resume
parameter_list|()
function_decl|;
private|private:
DECL|enumerator|max_dev
enum|enum
block|{
name|max_dev
init|=
literal|32
block|}
enum|;
DECL|member|sub
name|QWSPcMouseSubHandler
modifier|*
name|sub
index|[
name|max_dev
index|]
decl_stmt|;
DECL|member|notifiers
name|QList
argument_list|<
name|QSocketNotifier
modifier|*
argument_list|>
name|notifiers
decl_stmt|;
DECL|member|nsub
name|int
name|nsub
decl_stmt|;
DECL|member|retries
name|int
name|retries
decl_stmt|;
private|private
name|slots
private|:
name|void
name|readMouseData
parameter_list|(
name|int
parameter_list|)
function_decl|;
private|private:
name|void
name|openDevices
parameter_list|()
function_decl|;
name|void
name|closeDevices
parameter_list|()
function_decl|;
name|void
name|notify
parameter_list|(
name|int
name|fd
parameter_list|)
function_decl|;
name|bool
name|sendEvent
parameter_list|(
name|QWSPcMouseSubHandler
modifier|&
name|h
parameter_list|)
function_decl|;
private|private:
DECL|member|handler
name|QWSPcMouseHandler
modifier|*
name|handler
decl_stmt|;
DECL|member|driver
name|QString
name|driver
decl_stmt|;
DECL|member|device
name|QString
name|device
decl_stmt|;
DECL|member|accel
name|qreal
name|accel
decl_stmt|;
DECL|member|accel_limit
name|int
name|accel_limit
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QWSPcMouseHandler
name|QWSPcMouseHandler
operator|::
name|QWSPcMouseHandler
parameter_list|(
specifier|const
name|QString
modifier|&
name|driver
parameter_list|,
specifier|const
name|QString
modifier|&
name|device
parameter_list|)
member_init_list|:
name|QWSMouseHandler
argument_list|(
name|driver
argument_list|,
name|device
argument_list|)
block|{
name|d
operator|=
operator|new
name|QWSPcMouseHandlerPrivate
argument_list|(
name|this
argument_list|,
name|driver
argument_list|,
name|device
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWSPcMouseHandler
name|QWSPcMouseHandler
operator|::
name|~
name|QWSPcMouseHandler
parameter_list|()
block|{
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|suspend
name|void
name|QWSPcMouseHandler
operator|::
name|suspend
parameter_list|()
block|{
name|d
operator|->
name|suspend
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resume
name|void
name|QWSPcMouseHandler
operator|::
name|resume
parameter_list|()
block|{
name|d
operator|->
name|resume
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QWSPcMouseHandlerPrivate
name|QWSPcMouseHandlerPrivate
operator|::
name|QWSPcMouseHandlerPrivate
parameter_list|(
name|QWSPcMouseHandler
modifier|*
name|h
parameter_list|,
specifier|const
name|QString
modifier|&
name|drv
parameter_list|,
specifier|const
name|QString
modifier|&
name|arg
parameter_list|)
member_init_list|:
name|handler
argument_list|(
name|h
argument_list|)
member_init_list|,
name|driver
argument_list|(
name|drv
argument_list|)
block|{
name|QStringList
name|args
init|=
name|arg
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
name|int
name|index
decl_stmt|;
name|accel
operator|=
name|qreal
argument_list|(
literal|2.0
argument_list|)
expr_stmt|;
name|QRegExp
name|accelRegex
argument_list|(
name|QLatin1String
argument_list|(
literal|"^accel=(\\d+\\.?\\d*)$"
argument_list|)
argument_list|)
decl_stmt|;
name|index
operator|=
name|args
operator|.
name|indexOf
argument_list|(
name|accelRegex
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|accel
operator|=
name|qreal
argument_list|(
name|accelRegex
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|accel_limit
operator|=
literal|5
expr_stmt|;
name|QRegExp
name|accelLimitRegex
argument_list|(
name|QLatin1String
argument_list|(
literal|"^accel_limit=(\\d+)$"
argument_list|)
argument_list|)
decl_stmt|;
name|index
operator|=
name|args
operator|.
name|indexOf
argument_list|(
name|accelLimitRegex
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|accel_limit
operator|=
name|accelLimitRegex
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|args
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|device
operator|=
name|args
operator|.
name|join
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|retries
operator|=
literal|0
expr_stmt|;
name|openDevices
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWSPcMouseHandlerPrivate
name|QWSPcMouseHandlerPrivate
operator|::
name|~
name|QWSPcMouseHandlerPrivate
parameter_list|()
block|{
name|closeDevices
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/* QWSPcMouseHandler::UsageResult QWSPcMouseHandler::useDev(Dev& d) {     if (d.nbuf>= mouseData[d.protocol].bytesPerPacket) {         uchar *mb = d.buf;         int bstate = 0;         int dx = 0;         int dy = 0;          switch (mouseProtocol) {             case MouseMan:             case IntelliMouse:             {                 bstate = mb[0]& 0x7; // assuming Qt::*Button order                  int overflow = (mb[0]>>6)& 0x03;                 if (mouseProtocol == MouseMan&& overflow) {                     //### wheel events signalled with overflow bit, ignore for now                 }                 else {                     bool xs = mb[0]& 0x10;                     bool ys = mb[0]& 0x20;                     dx = xs ? mb[1]-256 : mb[1];                     dy = ys ? mb[2]-256 : mb[2];                 }                 break;             }             case Microsoft:                 if (((mb[0]& 0x20)>> 3)) {                     bstate |= Qt::LeftButton;                 }                 if (((mb[0]& 0x10)>> 4)) {                     bstate |= Qt::RightButton;                 }                  dx=(signed char)(((mb[0]& 0x03)<< 6) | (mb[1]& 0x3f));                 dy=-(signed char)(((mb[0]& 0x0c)<< 4) | (mb[2]& 0x3f));                  break;         }     }     } */
end_comment
begin_function
DECL|function|sendEvent
name|bool
name|QWSPcMouseHandlerPrivate
operator|::
name|sendEvent
parameter_list|(
name|QWSPcMouseSubHandler
modifier|&
name|h
parameter_list|)
block|{
if|if
condition|(
name|h
operator|.
name|reliable
argument_list|()
condition|)
block|{
name|QPoint
name|motion
init|=
name|h
operator|.
name|takeMotion
argument_list|()
decl_stmt|;
if|if
condition|(
name|qAbs
argument_list|(
name|motion
operator|.
name|x
argument_list|()
argument_list|)
operator|>
name|accel_limit
operator|||
name|qAbs
argument_list|(
name|motion
operator|.
name|y
argument_list|()
argument_list|)
operator|>
name|accel_limit
condition|)
name|motion
operator|*=
name|accel
expr_stmt|;
name|QPoint
name|newPos
init|=
name|handler
operator|->
name|pos
argument_list|()
operator|+
name|motion
decl_stmt|;
if|if
condition|(
name|qt_screen
operator|->
name|isTransformed
argument_list|()
condition|)
block|{
name|QSize
name|s
init|=
name|QSize
argument_list|(
name|qt_screen
operator|->
name|width
argument_list|()
argument_list|,
name|qt_screen
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|newPos
operator|=
name|qt_screen
operator|->
name|mapToDevice
argument_list|(
name|newPos
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
name|handler
operator|->
name|limitToScreen
argument_list|(
name|newPos
argument_list|)
expr_stmt|;
name|handler
operator|->
name|mouseChanged
argument_list|(
name|newPos
argument_list|,
name|h
operator|.
name|buttonState
argument_list|()
argument_list|,
name|h
operator|.
name|takeWheel
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|h
operator|.
name|takeMotion
argument_list|()
expr_stmt|;
if|if
condition|(
name|h
operator|.
name|buttonState
argument_list|()
operator|&
operator|(
name|Qt
operator|::
name|RightButton
operator||
name|Qt
operator|::
name|MidButton
operator|)
condition|)
block|{
comment|// Strange for the user to press right or middle without
comment|// a moving mouse!
name|h
operator|.
name|worse
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|openDevices
name|void
name|QWSPcMouseHandlerPrivate
operator|::
name|openDevices
parameter_list|()
block|{
name|nsub
operator|=
literal|0
expr_stmt|;
name|int
name|fd
init|=
operator|-
literal|1
decl_stmt|;
name|QString
name|drv
init|=
name|driver
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|drv
operator|.
name|isEmpty
argument_list|()
operator|&&
name|drv
operator|!=
name|QLatin1String
argument_list|(
literal|"auto"
argument_list|)
condition|)
block|{
comment|// Manually specified mouse
name|QByteArray
name|dev
init|=
name|device
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
if|if
condition|(
name|drv
operator|==
name|QLatin1String
argument_list|(
literal|"intellimouse"
argument_list|)
condition|)
block|{
if|if
condition|(
name|dev
operator|.
name|isEmpty
argument_list|()
condition|)
name|dev
operator|=
literal|"/dev/psaux"
expr_stmt|;
name|fd
operator|=
name|QT_OPEN
argument_list|(
name|dev
argument_list|,
name|O_RDWR
operator||
name|O_NDELAY
argument_list|)
expr_stmt|;
if|if
condition|(
name|fd
operator|>=
literal|0
condition|)
name|sub
index|[
name|nsub
operator|++
index|]
operator|=
operator|new
name|QWSPcMouseSubHandler_intellimouse
argument_list|(
name|fd
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|drv
operator|==
name|QLatin1String
argument_list|(
literal|"microsoft"
argument_list|)
condition|)
block|{
if|if
condition|(
name|dev
operator|.
name|isEmpty
argument_list|()
condition|)
name|dev
operator|=
literal|"/dev/ttyS0"
expr_stmt|;
name|fd
operator|=
name|QT_OPEN
argument_list|(
name|dev
argument_list|,
name|O_RDWR
operator||
name|O_NDELAY
argument_list|)
expr_stmt|;
if|if
condition|(
name|fd
operator|>=
literal|0
condition|)
name|sub
index|[
name|nsub
operator|++
index|]
operator|=
operator|new
name|QWSPcMouseSubHandler_ms
argument_list|(
name|fd
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|drv
operator|==
name|QLatin1String
argument_list|(
literal|"mousesystems"
argument_list|)
condition|)
block|{
if|if
condition|(
name|dev
operator|.
name|isEmpty
argument_list|()
condition|)
name|dev
operator|=
literal|"/dev/ttyS0"
expr_stmt|;
name|fd
operator|=
name|QT_OPEN
argument_list|(
name|dev
argument_list|,
name|O_RDWR
operator||
name|O_NDELAY
argument_list|)
expr_stmt|;
if|if
condition|(
name|fd
operator|>=
literal|0
condition|)
name|sub
index|[
name|nsub
operator|++
index|]
operator|=
operator|new
name|QWSPcMouseSubHandler_mousesystems
argument_list|(
name|fd
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|drv
operator|==
name|QLatin1String
argument_list|(
literal|"mouseman"
argument_list|)
condition|)
block|{
if|if
condition|(
name|dev
operator|.
name|isEmpty
argument_list|()
condition|)
name|dev
operator|=
literal|"/dev/psaux"
expr_stmt|;
name|fd
operator|=
name|QT_OPEN
argument_list|(
name|dev
argument_list|,
name|O_RDWR
operator||
name|O_NDELAY
argument_list|)
expr_stmt|;
if|if
condition|(
name|fd
operator|>=
literal|0
condition|)
name|sub
index|[
name|nsub
operator|++
index|]
operator|=
operator|new
name|QWSPcMouseSubHandler_mouseman
argument_list|(
name|fd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fd
operator|>=
literal|0
condition|)
name|notify
argument_list|(
name|fd
argument_list|)
expr_stmt|;
else|else
name|qCritical
argument_list|(
literal|"Error opening mouse device '%s': %s"
argument_list|,
name|dev
operator|.
name|constData
argument_list|()
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Try automatically
name|fd
operator|=
name|QT_OPEN
argument_list|(
literal|"/dev/psaux"
argument_list|,
name|O_RDWR
operator||
name|O_NDELAY
argument_list|)
expr_stmt|;
if|if
condition|(
name|fd
operator|>=
literal|0
condition|)
block|{
name|sub
index|[
name|nsub
operator|++
index|]
operator|=
operator|new
name|QWSPcMouseSubHandler_intellimouse
argument_list|(
name|fd
argument_list|)
expr_stmt|;
name|notify
argument_list|(
name|fd
argument_list|)
expr_stmt|;
block|}
name|fd
operator|=
name|QT_OPEN
argument_list|(
literal|"/dev/input/mice"
argument_list|,
name|O_RDWR
operator||
name|O_NDELAY
argument_list|)
expr_stmt|;
if|if
condition|(
name|fd
operator|>=
literal|0
condition|)
block|{
name|sub
index|[
name|nsub
operator|++
index|]
operator|=
operator|new
name|QWSPcMouseSubHandler_intellimouse
argument_list|(
name|fd
argument_list|)
expr_stmt|;
name|notify
argument_list|(
name|fd
argument_list|)
expr_stmt|;
comment|//qDebug("/dev/input/mice fd %d #%d", fd, nsub-1);
block|}
comment|// include the code below to auto-detect serial mice, and to mess up
comment|// any sort of serial communication
if|#
directive|if
literal|0
block|const char fn[4][11] = { "/dev/ttyS0", "/dev/ttyS1", "/dev/ttyS2", "/dev/ttyS3" };         for (int ch = 0; ch< 4; ++ch) {             fd = QT_OPEN(fn[ch], O_RDWR | O_NDELAY);             if (fd>= 0) {
comment|//sub[nsub++] = new QWSPcMouseSubHandler_intellimouse(fd);
block|sub[nsub++] = new QWSPcMouseSubHandler_mousesystems(fd);                 sub[nsub++] = new QWSPcMouseSubHandler_ms(fd);                 notify(fd);             }         }
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|closeDevices
name|void
name|QWSPcMouseHandlerPrivate
operator|::
name|closeDevices
parameter_list|()
block|{
name|int
name|pfd
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nsub
condition|;
name|i
operator|++
control|)
block|{
name|sub
index|[
name|i
index|]
operator|->
name|closeIfNot
argument_list|(
name|pfd
argument_list|)
expr_stmt|;
operator|delete
name|sub
index|[
name|i
index|]
expr_stmt|;
block|}
name|qDeleteAll
argument_list|(
name|notifiers
argument_list|)
expr_stmt|;
name|notifiers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|suspend
name|void
name|QWSPcMouseHandlerPrivate
operator|::
name|suspend
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|notifiers
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|notifiers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resume
name|void
name|QWSPcMouseHandlerPrivate
operator|::
name|resume
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nsub
condition|;
name|i
operator|++
control|)
name|sub
index|[
name|i
index|]
operator|->
name|initState
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|notifiers
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|notifiers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|notify
name|void
name|QWSPcMouseHandlerPrivate
operator|::
name|notify
parameter_list|(
name|int
name|fd
parameter_list|)
block|{
name|QSocketNotifier
modifier|*
name|mouseNotifier
init|=
operator|new
name|QSocketNotifier
argument_list|(
name|fd
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|mouseNotifier
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readMouseData
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|notifiers
operator|.
name|append
argument_list|(
name|mouseNotifier
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readMouseData
name|void
name|QWSPcMouseHandlerPrivate
operator|::
name|readMouseData
parameter_list|(
name|int
name|fd
parameter_list|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|uchar
name|buf
index|[
literal|8
index|]
decl_stmt|;
name|int
name|n
init|=
name|read
argument_list|(
name|fd
argument_list|,
name|buf
argument_list|,
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|<=
literal|0
condition|)
break|break;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nsub
condition|;
name|i
operator|++
control|)
block|{
name|QWSPcMouseSubHandler
modifier|&
name|h
init|=
operator|*
name|sub
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|h
operator|.
name|file
argument_list|()
operator|==
name|fd
condition|)
block|{
name|h
operator|.
name|appendData
argument_list|(
name|buf
argument_list|,
name|n
argument_list|)
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
switch|switch
condition|(
name|h
operator|.
name|useData
argument_list|()
condition|)
block|{
case|case
name|QWSPcMouseSubHandler
operator|::
name|Button
case|:
name|sendEvent
argument_list|(
name|h
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWSPcMouseSubHandler
operator|::
name|Insufficient
case|:
goto|goto
name|breakbreak
goto|;
case|case
name|QWSPcMouseSubHandler
operator|::
name|Motion
case|:
break|break;
block|}
block|}
name|breakbreak
label|:
empty_stmt|;
block|}
block|}
block|}
name|bool
name|any_reliable
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nsub
condition|;
name|i
operator|++
control|)
block|{
name|QWSPcMouseSubHandler
modifier|&
name|h
init|=
operator|*
name|sub
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|h
operator|.
name|motionPending
argument_list|()
condition|)
name|sendEvent
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|any_reliable
operator|=
name|any_reliable
operator|||
name|h
operator|.
name|reliable
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|any_reliable
condition|)
block|{
comment|// ... get rid of all unreliable ones?  All bad ones?
block|}
elseif|else
if|if
condition|(
name|retries
operator|<
literal|2
condition|)
block|{
comment|// Try again - maybe the mouse was being moved when we tried to init.
name|closeDevices
argument_list|()
expr_stmt|;
name|openDevices
argument_list|()
expr_stmt|;
name|retries
operator|++
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qmousepc_qws.moc"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_MOUSE_PC
end_comment
end_unit
