begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_QWS_KEYBOARD
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_QWS_KBD_INTEGRITY
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qkbdintegrity_qws.h"
end_include
begin_include
include|#
directive|include
file|<qwindowsystem_qws.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qtimer.h>
end_include
begin_include
include|#
directive|include
file|<qthread.h>
end_include
begin_include
include|#
directive|include
file|<INTEGRITY.h>
end_include
begin_comment
comment|//===========================================================================
end_comment
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|//
end_comment
begin_comment
comment|// INTEGRITY keyboard
end_comment
begin_comment
comment|//
end_comment
begin_class_decl
class_decl|class
name|QIntKeyboardListenThread
class_decl|;
end_class_decl
begin_class
DECL|class|QWSIntKbPrivate
class|class
name|QWSIntKbPrivate
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
friend|friend
class_decl|class
name|QIntKeyboardListenThread
class_decl|;
public|public:
name|QWSIntKbPrivate
parameter_list|(
name|QWSKeyboardHandler
modifier|*
parameter_list|,
specifier|const
name|QString
modifier|&
name|device
parameter_list|)
constructor_decl|;
name|~
name|QWSIntKbPrivate
parameter_list|()
destructor_decl|;
DECL|function|dataReady
name|void
name|dataReady
parameter_list|(
name|int
name|amount
parameter_list|)
block|{
emit|emit
name|kbdDataAvailable
argument_list|(
name|amount
argument_list|)
emit|;
block|}
DECL|member|scancodebuf
name|uint8_t
name|scancodebuf
index|[
literal|32
comment|/* USB_SCANCODE_BUF_LEN */
index|]
decl_stmt|;
DECL|member|rxpost
name|uint8_t
name|rxpost
decl_stmt|;
DECL|member|rxack
name|uint8_t
name|rxack
decl_stmt|;
name|Q_SIGNALS
label|:
name|void
name|kbdDataAvailable
parameter_list|(
name|int
name|amount
parameter_list|)
function_decl|;
private|private
name|Q_SLOTS
private|:
name|void
name|readKeyboardData
parameter_list|(
name|int
name|amount
parameter_list|)
function_decl|;
private|private:
DECL|member|handler
name|QWSKeyboardHandler
modifier|*
name|handler
decl_stmt|;
DECL|member|kbdthread
name|QIntKeyboardListenThread
modifier|*
name|kbdthread
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QIntKeyboardListenThread
class|class
name|QIntKeyboardListenThread
super|:
specifier|public
name|QThread
block|{
protected|protected:
DECL|member|imp
name|QWSIntKbPrivate
modifier|*
name|imp
decl_stmt|;
DECL|member|loop
name|bool
name|loop
decl_stmt|;
public|public:
DECL|function|QIntKeyboardListenThread
name|QIntKeyboardListenThread
parameter_list|(
name|QWSIntKbPrivate
modifier|*
name|im
parameter_list|)
member_init_list|:
name|QThread
argument_list|()
member_init_list|,
name|imp
argument_list|(
name|im
argument_list|)
block|{}
empty_stmt|;
DECL|function|~QIntKeyboardListenThread
name|~
name|QIntKeyboardListenThread
parameter_list|()
block|{}
empty_stmt|;
name|void
name|run
parameter_list|()
function_decl|;
DECL|function|stoploop
name|void
name|stoploop
parameter_list|()
block|{
name|loop
operator|=
literal|false
expr_stmt|;
block|}
empty_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QWSIntKeyboardHandler
name|QWSIntKeyboardHandler
operator|::
name|QWSIntKeyboardHandler
parameter_list|(
specifier|const
name|QString
modifier|&
name|device
parameter_list|)
member_init_list|:
name|QWSKeyboardHandler
argument_list|(
name|device
argument_list|)
block|{
name|d
operator|=
operator|new
name|QWSIntKbPrivate
argument_list|(
name|this
argument_list|,
name|device
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWSIntKeyboardHandler
name|QWSIntKeyboardHandler
operator|::
name|~
name|QWSIntKeyboardHandler
parameter_list|()
block|{
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_comment
comment|//void QWSIntKeyboardHandler::processKeyEvent(int keycode, bool isPress,
end_comment
begin_comment
comment|//                                            bool autoRepeat)
end_comment
begin_comment
comment|//{
end_comment
begin_comment
comment|//    QWSKeyboardHandler::processKeyEvent(keycode, isPress, autoRepeat);
end_comment
begin_comment
comment|//}
end_comment
begin_function
DECL|function|run
name|void
name|QIntKeyboardListenThread
operator|::
name|run
parameter_list|(
name|void
parameter_list|)
block|{
name|Error
name|E
decl_stmt|;
name|Buffer
name|b
decl_stmt|;
name|Connection
name|kbdc
decl_stmt|;
name|bool
name|waitforresource
init|=
literal|true
decl_stmt|;
do|do
block|{
name|E
operator|=
name|RequestResource
argument_list|(
operator|(
name|Object
operator|*
operator|)
operator|&
name|kbdc
argument_list|,
literal|"USBKeyboardClient"
argument_list|,
literal|"!systempassword"
argument_list|)
expr_stmt|;
if|if
condition|(
name|E
operator|==
name|Success
condition|)
block|{
name|loop
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|E
operator|=
name|RequestResource
argument_list|(
operator|(
name|Object
operator|*
operator|)
operator|&
name|kbdc
argument_list|,
literal|"KeyboardClient"
argument_list|,
literal|"!systempassword"
argument_list|)
expr_stmt|;
if|if
condition|(
name|E
operator|==
name|Success
condition|)
block|{
name|waitforresource
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|waitforresource
condition|)
operator|::
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|loop
operator|&&
name|waitforresource
condition|)
do|;
if|if
condition|(
operator|!
name|loop
condition|)
return|return;
name|b
operator|.
name|BufferType
operator|=
name|DataBuffer
operator||
name|LastBuffer
expr_stmt|;
name|b
operator|.
name|Length
operator|=
sizeof|sizeof
argument_list|(
name|imp
operator|->
name|scancodebuf
argument_list|)
expr_stmt|;
name|b
operator|.
name|TheAddress
operator|=
operator|(
name|Address
operator|)
name|imp
operator|->
name|scancodebuf
expr_stmt|;
do|do
block|{
name|b
operator|.
name|Transferred
operator|=
literal|0
expr_stmt|;
name|b
operator|.
name|TheAddress
operator|=
operator|(
name|Address
operator|)
name|imp
operator|->
name|scancodebuf
operator|+
name|imp
operator|->
name|rxpost
expr_stmt|;
name|CheckSuccess
argument_list|(
name|SynchronousReceive
argument_list|(
name|kbdc
argument_list|,
operator|&
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|imp
operator|->
name|rxpost
operator|+=
name|b
operator|.
name|Transferred
expr_stmt|;
if|if
condition|(
name|imp
operator|->
name|rxpost
operator|>=
literal|32
comment|/* USB_SCANCODE_BUF_LEN */
condition|)
name|imp
operator|->
name|rxpost
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|imp
operator|->
name|rxpost
operator|==
operator|(
name|imp
operator|->
name|rxack
operator|+
name|b
operator|.
name|Transferred
operator|)
operator|%
literal|32
comment|/* USB_SCANCODE_BUF_LEN */
condition|)
block|{
name|imp
operator|->
name|kbdDataAvailable
argument_list|(
name|b
operator|.
name|Transferred
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|loop
condition|)
do|;
block|}
end_function
begin_function
DECL|function|readKeyboardData
name|void
name|QWSIntKbPrivate
operator|::
name|readKeyboardData
parameter_list|(
name|int
name|amount
parameter_list|)
block|{
name|uint16_t
name|keycode
decl_stmt|;
do|do
block|{
if|if
condition|(
name|scancodebuf
index|[
name|rxack
index|]
operator|==
literal|0xe0
condition|)
block|{
name|keycode
operator|=
name|scancodebuf
index|[
name|rxack
index|]
operator|<<
literal|8
expr_stmt|;
name|rxack
operator|++
expr_stmt|;
if|if
condition|(
name|rxack
operator|>=
literal|32
comment|/* USB_SCANCODE_BUF_LEN */
condition|)
name|rxack
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|keycode
operator|=
literal|0
expr_stmt|;
block|}
name|handler
operator|->
name|processKeycode
argument_list|(
name|keycode
operator|+
operator|(
name|scancodebuf
index|[
name|rxack
index|]
operator|&
literal|0x7f
operator|)
argument_list|,
operator|(
name|scancodebuf
index|[
name|rxack
index|]
operator|&
literal|0x80
operator|)
operator|==
literal|0
argument_list|,
name|scancodebuf
index|[
name|rxack
index|]
operator|==
literal|2
argument_list|)
expr_stmt|;
name|rxack
operator|++
expr_stmt|;
if|if
condition|(
name|rxack
operator|>=
literal|32
comment|/* USB_SCANCODE_BUF_LEN */
condition|)
name|rxack
operator|=
literal|0
expr_stmt|;
block|}
do|while
condition|(
name|rxack
operator|!=
name|rxpost
condition|)
do|;
block|}
end_function
begin_constructor
DECL|function|QWSIntKbPrivate
name|QWSIntKbPrivate
operator|::
name|QWSIntKbPrivate
parameter_list|(
name|QWSKeyboardHandler
modifier|*
name|h
parameter_list|,
specifier|const
name|QString
modifier|&
name|device
parameter_list|)
member_init_list|:
name|handler
argument_list|(
name|h
argument_list|)
block|{
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|kbdDataAvailable
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readKeyboardData
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|->
name|handler
operator|=
name|handler
expr_stmt|;
name|rxack
operator|=
name|rxpost
operator|=
literal|0
expr_stmt|;
name|kbdthread
operator|=
operator|new
name|QIntKeyboardListenThread
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|kbdthread
operator|->
name|start
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWSIntKbPrivate
name|QWSIntKbPrivate
operator|::
name|~
name|QWSIntKbPrivate
parameter_list|()
block|{
name|kbdthread
operator|->
name|stoploop
argument_list|()
expr_stmt|;
name|kbdthread
operator|->
name|wait
argument_list|()
expr_stmt|;
operator|delete
name|kbdthread
expr_stmt|;
block|}
end_destructor
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qkbdintegrity_qws.moc"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_KEYBOARD || QT_NO_QWS_KBD_TTY
end_comment
end_unit
