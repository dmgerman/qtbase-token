begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTRANSPORTAUTHDEFS_QWS_H
end_ifndef
begin_define
DECL|macro|QTRANSPORTAUTHDEFS_QWS_H
define|#
directive|define
name|QTRANSPORTAUTHDEFS_QWS_H
end_define
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Gui
argument_list|)
DECL|macro|QSXE_KEY_LEN
define|#
directive|define
name|QSXE_KEY_LEN
value|16
DECL|macro|QSXE_MAGIC_BYTES
define|#
directive|define
name|QSXE_MAGIC_BYTES
value|4
comment|// Number of bytes of each message to authenticate.  Just need to ensure
comment|// that the command at the beginning hasn't been tampered with.  This value
comment|// does not matter for trusted transports.
DECL|macro|AMOUNT_TO_AUTHENTICATE
define|#
directive|define
name|AMOUNT_TO_AUTHENTICATE
value|200
DECL|macro|AUTH_ID
define|#
directive|define
name|AUTH_ID
parameter_list|(
name|k
parameter_list|)
value|((unsigned char)(k[QSXE_KEY_LEN]))
DECL|macro|AUTH_KEY
define|#
directive|define
name|AUTH_KEY
parameter_list|(
name|k
parameter_list|)
value|((unsigned char *)(k))
comment|// must be a largish -ve number under any endianess when cast as an int
decl|const
name|unsigned
name|char
name|magic
index|[
name|QSXE_MAGIC_BYTES
index|]
init|=
block|{
literal|0xBA
block|,
literal|0xD4
block|,
literal|0xD4
block|,
literal|0xBA
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|magicInt
specifier|const
name|int
name|magicInt
init|=
literal|0xBAD4D4BA
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|QSXE_KEYFILE
define|#
directive|define
name|QSXE_KEYFILE
value|"keyfile"
end_define
begin_comment
comment|/*   Header in above format, less the magic bytes.   Useful for reading off the socket */
end_comment
begin_struct
DECL|struct|AuthHeader
struct|struct
name|AuthHeader
block|{
DECL|member|len
name|unsigned
name|char
name|len
decl_stmt|;
DECL|member|pad
name|unsigned
name|char
name|pad
decl_stmt|;
DECL|member|digest
name|unsigned
name|char
name|digest
index|[
name|QSXE_KEY_LEN
index|]
decl_stmt|;
DECL|member|id
name|unsigned
name|char
name|id
decl_stmt|;
DECL|member|seq
name|unsigned
name|char
name|seq
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|/*   Header in a form suitable for authentication routines */
end_comment
begin_struct
DECL|struct|AuthMessage
struct|struct
name|AuthMessage
block|{
DECL|function|AuthMessage
name|AuthMessage
argument_list|()
block|{
operator|::
name|memset
argument_list|(
name|authData
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|authData
argument_list|)
argument_list|)
expr_stmt|;
operator|::
name|memcpy
argument_list|(
name|pad_magic
argument_list|,
name|magic
argument_list|,
name|QSXE_MAGIC_BYTES
argument_list|)
expr_stmt|;
block|}
DECL|member|pad_magic
name|unsigned
name|char
name|pad_magic
index|[
name|QSXE_MAGIC_BYTES
index|]
decl_stmt|;
union|union
block|{
DECL|member|hdr
name|AuthHeader
name|hdr
decl_stmt|;
DECL|member|authData
name|char
name|authData
index|[
sizeof|sizeof
argument_list|(
name|AuthHeader
argument_list|)
index|]
decl_stmt|;
block|}
union|;
DECL|member|payLoad
name|char
name|payLoad
index|[
name|AMOUNT_TO_AUTHENTICATE
index|]
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|/**   Auth data as stored in _key */
end_comment
begin_struct
DECL|struct|AuthCookie
struct|struct
name|AuthCookie
block|{
DECL|member|key
name|unsigned
name|char
name|key
index|[
name|QSXE_KEY_LEN
index|]
decl_stmt|;
DECL|member|pad
name|unsigned
name|char
name|pad
decl_stmt|;
DECL|member|progId
name|unsigned
name|char
name|progId
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|/*   Auth data as written to the key file - SUPERSEDED by usr_key_entry    This is still used internally for some functions, ie the socket   related calls. */
end_comment
begin_struct
DECL|struct|AuthRecord
struct|struct
name|AuthRecord
block|{
union|union
block|{
DECL|member|auth
name|AuthCookie
name|auth
decl_stmt|;
DECL|member|data
name|char
name|data
index|[
sizeof|sizeof
argument_list|(
expr|struct
name|AuthCookie
argument_list|)
index|]
decl_stmt|;
block|}
union|;
DECL|member|change_time
name|time_t
name|change_time
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|/*!   \class usr_key_entry   This comes from the SXE kernel patch file include/linux/lidsif.h    This is the (new) data record for the key file (version 2).    The key file is (now) either /proc/lids/keys (and the per-process   keys in /proc/<pid>/lids_key) OR for desktop/development ONLY (not   for production) it is $QPEDIR/etc/keyfile    The key file maps keys to files.    File are identified by inode and device numbers, not paths.    (See the "installs" file for path to inode/device mapping) */
end_comment
begin_struct
DECL|struct|usr_key_entry
struct|struct
name|usr_key_entry
block|{
DECL|member|key
name|char
name|key
index|[
name|QSXE_KEY_LEN
index|]
decl_stmt|;
DECL|member|ino
name|ino_t
name|ino
decl_stmt|;
DECL|member|dev
name|dev_t
name|dev
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|/*!   \class IdBlock   \brief Data record for the manifest file.   The manifest file maps program id's to files */
end_comment
begin_struct
DECL|struct|IdBlock
struct|struct
name|IdBlock
block|{
DECL|member|inode
name|quint64
name|inode
decl_stmt|;
DECL|member|device
name|quint64
name|device
decl_stmt|;
DECL|member|pad
name|unsigned
name|char
name|pad
decl_stmt|;
DECL|member|progId
name|unsigned
name|char
name|progId
decl_stmt|;
DECL|member|installId
name|unsigned
name|short
name|installId
decl_stmt|;
DECL|member|keyOffset
name|unsigned
name|int
name|keyOffset
decl_stmt|;
DECL|member|install_time
name|qint64
name|install_time
decl_stmt|;
block|}
struct|;
end_struct
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QTRANSPORTAUTHDEFS_QWS_H
end_comment
end_unit
