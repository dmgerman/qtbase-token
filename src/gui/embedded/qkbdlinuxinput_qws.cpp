begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qkbdlinuxinput_qws.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_KEYBOARD
end_ifndef
begin_include
include|#
directive|include
file|<QSocketNotifier>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<qplatformdefs.h>
end_include
begin_include
include|#
directive|include
file|<private/qcore_unix_p.h>
end_include
begin_comment
comment|// overrides QT_OPEN
end_comment
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<termios.h>
end_include
begin_include
include|#
directive|include
file|<linux/kd.h>
end_include
begin_include
include|#
directive|include
file|<linux/input.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QWSLinuxInputKbPrivate
class|class
name|QWSLinuxInputKbPrivate
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|QWSLinuxInputKbPrivate
parameter_list|(
name|QWSLinuxInputKeyboardHandler
modifier|*
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|)
constructor_decl|;
name|~
name|QWSLinuxInputKbPrivate
parameter_list|()
destructor_decl|;
private|private:
name|void
name|switchLed
parameter_list|(
name|int
parameter_list|,
name|bool
parameter_list|)
function_decl|;
private|private
name|Q_SLOTS
private|:
name|void
name|readKeycode
parameter_list|()
function_decl|;
private|private:
DECL|member|m_handler
name|QWSLinuxInputKeyboardHandler
modifier|*
name|m_handler
decl_stmt|;
DECL|member|m_fd
name|int
name|m_fd
decl_stmt|;
DECL|member|m_tty_fd
name|int
name|m_tty_fd
decl_stmt|;
DECL|member|m_tty_attr
name|struct
name|termios
name|m_tty_attr
decl_stmt|;
DECL|member|m_orig_kbmode
name|int
name|m_orig_kbmode
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QWSLinuxInputKeyboardHandler
name|QWSLinuxInputKeyboardHandler
operator|::
name|QWSLinuxInputKeyboardHandler
parameter_list|(
specifier|const
name|QString
modifier|&
name|device
parameter_list|)
member_init_list|:
name|QWSKeyboardHandler
argument_list|(
name|device
argument_list|)
block|{
name|d
operator|=
operator|new
name|QWSLinuxInputKbPrivate
argument_list|(
name|this
argument_list|,
name|device
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWSLinuxInputKeyboardHandler
name|QWSLinuxInputKeyboardHandler
operator|::
name|~
name|QWSLinuxInputKeyboardHandler
parameter_list|()
block|{
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|filterInputEvent
name|bool
name|QWSLinuxInputKeyboardHandler
operator|::
name|filterInputEvent
parameter_list|(
name|quint16
modifier|&
parameter_list|,
name|qint32
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_constructor
DECL|function|QWSLinuxInputKbPrivate
name|QWSLinuxInputKbPrivate
operator|::
name|QWSLinuxInputKbPrivate
parameter_list|(
name|QWSLinuxInputKeyboardHandler
modifier|*
name|h
parameter_list|,
specifier|const
name|QString
modifier|&
name|device
parameter_list|)
member_init_list|:
name|m_handler
argument_list|(
name|h
argument_list|)
member_init_list|,
name|m_fd
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_tty_fd
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_orig_kbmode
argument_list|(
name|K_XLATE
argument_list|)
block|{
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"LinuxInputSubsystem Keyboard Handler"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|dev
init|=
name|QLatin1String
argument_list|(
literal|"/dev/input/event1"
argument_list|)
decl_stmt|;
name|int
name|repeat_delay
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|repeat_rate
init|=
operator|-
literal|1
decl_stmt|;
name|QStringList
name|args
init|=
name|device
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|arg
decl|,
name|args
control|)
block|{
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"repeat-delay="
argument_list|)
argument_list|)
condition|)
name|repeat_delay
operator|=
name|arg
operator|.
name|mid
argument_list|(
literal|13
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"repeat-rate="
argument_list|)
argument_list|)
condition|)
name|repeat_rate
operator|=
name|arg
operator|.
name|mid
argument_list|(
literal|12
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"/dev/"
argument_list|)
argument_list|)
condition|)
name|dev
operator|=
name|arg
expr_stmt|;
block|}
name|m_fd
operator|=
name|QT_OPEN
argument_list|(
name|dev
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDWR
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_fd
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|repeat_delay
operator|>
literal|0
operator|&&
name|repeat_rate
operator|>
literal|0
condition|)
block|{
name|int
name|kbdrep
index|[
literal|2
index|]
init|=
block|{
name|repeat_delay
block|,
name|repeat_rate
block|}
decl_stmt|;
operator|::
name|ioctl
argument_list|(
name|m_fd
argument_list|,
name|EVIOCSREP
argument_list|,
name|kbdrep
argument_list|)
expr_stmt|;
block|}
name|QSocketNotifier
modifier|*
name|notifier
decl_stmt|;
name|notifier
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|m_fd
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|notifier
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readKeycode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// play nice in case we are started from a shell (e.g. for debugging)
name|m_tty_fd
operator|=
name|isatty
argument_list|(
literal|0
argument_list|)
condition|?
literal|0
else|:
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|m_tty_fd
operator|>=
literal|0
condition|)
block|{
comment|// save tty config for restore.
name|tcgetattr
argument_list|(
name|m_tty_fd
argument_list|,
operator|&
name|m_tty_attr
argument_list|)
expr_stmt|;
name|struct
operator|::
name|termios
name|termdata
decl_stmt|;
name|tcgetattr
argument_list|(
name|m_tty_fd
argument_list|,
operator|&
name|termdata
argument_list|)
expr_stmt|;
comment|// record the original mode so we can restore it again in the destructor.
operator|::
name|ioctl
argument_list|(
name|m_tty_fd
argument_list|,
name|KDGKBMODE
argument_list|,
operator|&
name|m_orig_kbmode
argument_list|)
expr_stmt|;
comment|// setting this translation mode is even needed in INPUT mode to prevent
comment|// the shell from also interpreting codes, if the process has a tty
comment|// attached: e.g. Ctrl+C wouldn't copy, but kill the application.
operator|::
name|ioctl
argument_list|(
name|m_tty_fd
argument_list|,
name|KDSKBMODE
argument_list|,
name|K_MEDIUMRAW
argument_list|)
expr_stmt|;
comment|// set the tty layer to pass-through
name|termdata
operator|.
name|c_iflag
operator|=
operator|(
name|IGNPAR
operator||
name|IGNBRK
operator|)
operator|&
operator|(
operator|~
name|PARMRK
operator|)
operator|&
operator|(
operator|~
name|ISTRIP
operator|)
expr_stmt|;
name|termdata
operator|.
name|c_oflag
operator|=
literal|0
expr_stmt|;
name|termdata
operator|.
name|c_cflag
operator|=
name|CREAD
operator||
name|CS8
expr_stmt|;
name|termdata
operator|.
name|c_lflag
operator|=
literal|0
expr_stmt|;
name|termdata
operator|.
name|c_cc
index|[
name|VTIME
index|]
operator|=
literal|0
expr_stmt|;
name|termdata
operator|.
name|c_cc
index|[
name|VMIN
index|]
operator|=
literal|1
expr_stmt|;
name|cfsetispeed
argument_list|(
operator|&
name|termdata
argument_list|,
literal|9600
argument_list|)
expr_stmt|;
name|cfsetospeed
argument_list|(
operator|&
name|termdata
argument_list|,
literal|9600
argument_list|)
expr_stmt|;
name|tcsetattr
argument_list|(
name|m_tty_fd
argument_list|,
name|TCSANOW
argument_list|,
operator|&
name|termdata
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Cannot open keyboard input device '%s': %s"
argument_list|,
name|qPrintable
argument_list|(
name|dev
argument_list|)
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QWSLinuxInputKbPrivate
name|QWSLinuxInputKbPrivate
operator|::
name|~
name|QWSLinuxInputKbPrivate
parameter_list|()
block|{
if|if
condition|(
name|m_tty_fd
operator|>=
literal|0
condition|)
block|{
operator|::
name|ioctl
argument_list|(
name|m_tty_fd
argument_list|,
name|KDSKBMODE
argument_list|,
name|m_orig_kbmode
argument_list|)
expr_stmt|;
name|tcsetattr
argument_list|(
name|m_tty_fd
argument_list|,
name|TCSANOW
argument_list|,
operator|&
name|m_tty_attr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_fd
operator|>=
literal|0
condition|)
name|QT_CLOSE
argument_list|(
name|m_fd
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|switchLed
name|void
name|QWSLinuxInputKbPrivate
operator|::
name|switchLed
parameter_list|(
name|int
name|led
parameter_list|,
name|bool
name|state
parameter_list|)
block|{
name|struct
operator|::
name|input_event
name|led_ie
decl_stmt|;
operator|::
name|gettimeofday
argument_list|(
operator|&
name|led_ie
operator|.
name|time
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|led_ie
operator|.
name|type
operator|=
name|EV_LED
expr_stmt|;
name|led_ie
operator|.
name|code
operator|=
name|led
expr_stmt|;
name|led_ie
operator|.
name|value
operator|=
name|state
expr_stmt|;
name|QT_WRITE
argument_list|(
name|m_fd
argument_list|,
operator|&
name|led_ie
argument_list|,
sizeof|sizeof
argument_list|(
name|led_ie
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readKeycode
name|void
name|QWSLinuxInputKbPrivate
operator|::
name|readKeycode
parameter_list|()
block|{
name|struct
operator|::
name|input_event
name|buffer
index|[
literal|32
index|]
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
forever|forever
block|{
name|n
operator|=
name|QT_READ
argument_list|(
name|m_fd
argument_list|,
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|buffer
argument_list|)
operator|+
name|n
argument_list|,
sizeof|sizeof
argument_list|(
name|buffer
argument_list|)
operator|-
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"Got EOF from the input device."
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|n
operator|<
literal|0
operator|&&
operator|(
name|errno
operator|!=
name|EINTR
operator|&&
name|errno
operator|!=
name|EAGAIN
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not read from input device: %s"
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|n
operator|%
sizeof|sizeof
argument_list|(
name|buffer
index|[
literal|0
index|]
argument_list|)
operator|==
literal|0
condition|)
block|{
break|break;
block|}
block|}
name|n
operator|/=
sizeof|sizeof
argument_list|(
name|buffer
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|buffer
index|[
name|i
index|]
operator|.
name|type
operator|!=
name|EV_KEY
condition|)
continue|continue;
name|quint16
name|code
init|=
name|buffer
index|[
name|i
index|]
operator|.
name|code
decl_stmt|;
name|qint32
name|value
init|=
name|buffer
index|[
name|i
index|]
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|m_handler
operator|->
name|filterInputEvent
argument_list|(
name|code
argument_list|,
name|value
argument_list|)
condition|)
continue|continue;
name|QWSKeyboardHandler
operator|::
name|KeycodeAction
name|ka
decl_stmt|;
name|ka
operator|=
name|m_handler
operator|->
name|processKeycode
argument_list|(
name|code
argument_list|,
name|value
operator|!=
literal|0
argument_list|,
name|value
operator|==
literal|2
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|ka
condition|)
block|{
case|case
name|QWSKeyboardHandler
operator|::
name|CapsLockOn
case|:
case|case
name|QWSKeyboardHandler
operator|::
name|CapsLockOff
case|:
name|switchLed
argument_list|(
name|LED_CAPSL
argument_list|,
name|ka
operator|==
name|QWSKeyboardHandler
operator|::
name|CapsLockOn
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWSKeyboardHandler
operator|::
name|NumLockOn
case|:
case|case
name|QWSKeyboardHandler
operator|::
name|NumLockOff
case|:
name|switchLed
argument_list|(
name|LED_NUML
argument_list|,
name|ka
operator|==
name|QWSKeyboardHandler
operator|::
name|NumLockOn
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWSKeyboardHandler
operator|::
name|ScrollLockOn
case|:
case|case
name|QWSKeyboardHandler
operator|::
name|ScrollLockOff
case|:
name|switchLed
argument_list|(
name|LED_SCROLLL
argument_list|,
name|ka
operator|==
name|QWSKeyboardHandler
operator|::
name|ScrollLockOn
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// ignore console switching and reboot
break|break;
block|}
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qkbdlinuxinput_qws.moc"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_KEYBOARD
end_comment
end_unit
