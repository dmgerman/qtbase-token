begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qmouselinuxinput_qws.h"
end_include
begin_include
include|#
directive|include
file|<QScreen>
end_include
begin_include
include|#
directive|include
file|<QSocketNotifier>
end_include
begin_include
include|#
directive|include
file|<qplatformdefs.h>
end_include
begin_include
include|#
directive|include
file|<private/qcore_unix_p.h>
end_include
begin_comment
comment|// overrides QT_OPEN
end_comment
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<linux/input.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QWSLinuxInputMousePrivate
class|class
name|QWSLinuxInputMousePrivate
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|QWSLinuxInputMousePrivate
parameter_list|(
name|QWSLinuxInputMouseHandler
modifier|*
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|)
constructor_decl|;
name|~
name|QWSLinuxInputMousePrivate
parameter_list|()
destructor_decl|;
name|void
name|enable
parameter_list|(
name|bool
name|on
parameter_list|)
function_decl|;
private|private
name|Q_SLOTS
private|:
name|void
name|readMouseData
parameter_list|()
function_decl|;
private|private:
DECL|member|m_handler
name|QWSLinuxInputMouseHandler
modifier|*
name|m_handler
decl_stmt|;
DECL|member|m_notify
name|QSocketNotifier
modifier|*
name|m_notify
decl_stmt|;
DECL|member|m_fd
name|int
name|m_fd
decl_stmt|;
DECL|member|m_x
DECL|member|m_y
name|int
name|m_x
decl_stmt|,
name|m_y
decl_stmt|;
DECL|member|m_buttons
name|int
name|m_buttons
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QWSLinuxInputMouseHandler
name|QWSLinuxInputMouseHandler
operator|::
name|QWSLinuxInputMouseHandler
parameter_list|(
specifier|const
name|QString
modifier|&
name|device
parameter_list|)
member_init_list|:
name|QWSCalibratedMouseHandler
argument_list|(
name|device
argument_list|)
block|{
name|d
operator|=
operator|new
name|QWSLinuxInputMousePrivate
argument_list|(
name|this
argument_list|,
name|device
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWSLinuxInputMouseHandler
name|QWSLinuxInputMouseHandler
operator|::
name|~
name|QWSLinuxInputMouseHandler
parameter_list|()
block|{
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|suspend
name|void
name|QWSLinuxInputMouseHandler
operator|::
name|suspend
parameter_list|()
block|{
name|d
operator|->
name|enable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resume
name|void
name|QWSLinuxInputMouseHandler
operator|::
name|resume
parameter_list|()
block|{
name|d
operator|->
name|enable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QWSLinuxInputMousePrivate
name|QWSLinuxInputMousePrivate
operator|::
name|QWSLinuxInputMousePrivate
parameter_list|(
name|QWSLinuxInputMouseHandler
modifier|*
name|h
parameter_list|,
specifier|const
name|QString
modifier|&
name|device
parameter_list|)
member_init_list|:
name|m_handler
argument_list|(
name|h
argument_list|)
member_init_list|,
name|m_notify
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_x
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_y
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_buttons
argument_list|(
literal|0
argument_list|)
block|{
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"LinuxInputSubsystem Mouse Handler"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|dev
init|=
name|QLatin1String
argument_list|(
literal|"/dev/input/event0"
argument_list|)
decl_stmt|;
if|if
condition|(
name|device
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"/dev/"
argument_list|)
argument_list|)
condition|)
name|dev
operator|=
name|device
expr_stmt|;
name|m_fd
operator|=
name|QT_OPEN
argument_list|(
name|dev
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDONLY
operator||
name|O_NDELAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_fd
operator|>=
literal|0
condition|)
block|{
name|m_notify
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|m_fd
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_notify
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readMouseData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Cannot open mouse input device '%s': %s"
argument_list|,
name|qPrintable
argument_list|(
name|dev
argument_list|)
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QWSLinuxInputMousePrivate
name|QWSLinuxInputMousePrivate
operator|::
name|~
name|QWSLinuxInputMousePrivate
parameter_list|()
block|{
if|if
condition|(
name|m_fd
operator|>=
literal|0
condition|)
name|QT_CLOSE
argument_list|(
name|m_fd
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|enable
name|void
name|QWSLinuxInputMousePrivate
operator|::
name|enable
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
if|if
condition|(
name|m_notify
condition|)
name|m_notify
operator|->
name|setEnabled
argument_list|(
name|on
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readMouseData
name|void
name|QWSLinuxInputMousePrivate
operator|::
name|readMouseData
parameter_list|()
block|{
if|if
condition|(
operator|!
name|qt_screen
condition|)
return|return;
name|struct
operator|::
name|input_event
name|buffer
index|[
literal|32
index|]
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
forever|forever
block|{
name|n
operator|=
name|QT_READ
argument_list|(
name|m_fd
argument_list|,
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|buffer
argument_list|)
operator|+
name|n
argument_list|,
sizeof|sizeof
argument_list|(
name|buffer
argument_list|)
operator|-
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"Got EOF from the input device."
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|n
operator|<
literal|0
operator|&&
operator|(
name|errno
operator|!=
name|EINTR
operator|&&
name|errno
operator|!=
name|EAGAIN
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not read from input device: %s"
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|n
operator|%
sizeof|sizeof
argument_list|(
name|buffer
index|[
literal|0
index|]
argument_list|)
operator|==
literal|0
condition|)
block|{
break|break;
block|}
block|}
name|n
operator|/=
sizeof|sizeof
argument_list|(
name|buffer
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|struct
operator|::
name|input_event
modifier|*
name|data
init|=
operator|&
name|buffer
index|[
name|i
index|]
decl_stmt|;
name|bool
name|unknown
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_ABS
condition|)
block|{
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_X
condition|)
block|{
name|m_x
operator|=
name|data
operator|->
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_Y
condition|)
block|{
name|m_y
operator|=
name|data
operator|->
name|value
expr_stmt|;
block|}
else|else
block|{
name|unknown
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_REL
condition|)
block|{
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|REL_X
condition|)
block|{
name|m_x
operator|+=
name|data
operator|->
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|REL_Y
condition|)
block|{
name|m_y
operator|+=
name|data
operator|->
name|value
expr_stmt|;
block|}
else|else
block|{
name|unknown
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_KEY
operator|&&
name|data
operator|->
name|code
operator|==
name|BTN_TOUCH
condition|)
block|{
name|m_buttons
operator|=
name|data
operator|->
name|value
condition|?
name|Qt
operator|::
name|LeftButton
else|:
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_KEY
condition|)
block|{
name|int
name|button
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|data
operator|->
name|code
condition|)
block|{
case|case
name|BTN_LEFT
case|:
name|button
operator|=
name|Qt
operator|::
name|LeftButton
expr_stmt|;
break|break;
case|case
name|BTN_MIDDLE
case|:
name|button
operator|=
name|Qt
operator|::
name|MidButton
expr_stmt|;
break|break;
case|case
name|BTN_RIGHT
case|:
name|button
operator|=
name|Qt
operator|::
name|RightButton
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|data
operator|->
name|value
condition|)
name|m_buttons
operator||=
name|button
expr_stmt|;
else|else
name|m_buttons
operator|&=
operator|~
name|button
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_SYN
operator|&&
name|data
operator|->
name|code
operator|==
name|SYN_REPORT
condition|)
block|{
name|QPoint
name|pos
argument_list|(
name|m_x
argument_list|,
name|m_y
argument_list|)
decl_stmt|;
name|pos
operator|=
name|m_handler
operator|->
name|transform
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|m_handler
operator|->
name|limitToScreen
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|m_handler
operator|->
name|mouseChanged
argument_list|(
name|pos
argument_list|,
name|m_buttons
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_MSC
operator|&&
name|data
operator|->
name|code
operator|==
name|MSC_SCAN
condition|)
block|{
comment|// kernel encountered an unmapped key - just ignore it
continue|continue;
block|}
else|else
block|{
name|unknown
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|unknown
condition|)
block|{
name|qWarning
argument_list|(
literal|"unknown mouse event type=%x, code=%x, value=%x"
argument_list|,
name|data
operator|->
name|type
argument_list|,
name|data
operator|->
name|code
argument_list|,
name|data
operator|->
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qmouselinuxinput_qws.moc"
end_include
end_unit
