begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwsmanager_qws.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_MANAGER
end_ifndef
begin_include
include|#
directive|include
file|"qdrawutil.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qstyle.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qmenu.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"private/qpainter_p.h"
end_include
begin_include
include|#
directive|include
file|"qregion.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qcursor.h"
end_include
begin_include
include|#
directive|include
file|"qwsdisplay_qws.h"
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidget_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qbackingstore_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwindowsurface_qws_p.h>
end_include
begin_include
include|#
directive|include
file|"qdecorationfactory_qws.h"
end_include
begin_include
include|#
directive|include
file|"qlayout.h"
end_include
begin_include
include|#
directive|include
file|"qwsmanager_p.h"
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|member|active
name|QWidget
modifier|*
name|QWSManagerPrivate
operator|::
name|active
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|mousePos
name|QPoint
name|QWSManagerPrivate
operator|::
name|mousePos
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QWSManagerPrivate
name|QWSManagerPrivate
operator|::
name|QWSManagerPrivate
parameter_list|()
member_init_list|:
name|QObjectPrivate
argument_list|()
member_init_list|,
name|activeRegion
argument_list|(
name|QDecoration
operator|::
name|None
argument_list|)
member_init_list|,
name|managed
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|popup
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|previousRegionType
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|previousRegionRepainted
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|entireDecorationNeedsRepaint
argument_list|(
literal|false
argument_list|)
block|{
name|cached_region
operator|.
name|regionType
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|cachedRegion
name|QRegion
modifier|&
name|QWSManager
operator|::
name|cachedRegion
parameter_list|()
block|{
return|return
name|d_func
argument_list|()
operator|->
name|cached_region
operator|.
name|region
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWSManager     \ingroup qws     \internal */
end_comment
begin_comment
comment|/*!  */
end_comment
begin_constructor
DECL|function|QWSManager
name|QWSManager
operator|::
name|QWSManager
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QWSManagerPrivate
argument_list|,
operator|(
name|QObject
operator|*
operator|)
literal|0
argument_list|)
block|{
name|d_func
argument_list|()
operator|->
name|managed
operator|=
name|w
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWSManager
name|QWSManager
operator|::
name|~
name|QWSManager
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWSManager
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
if|if
condition|(
name|d
operator|->
name|popup
condition|)
operator|delete
name|d
operator|->
name|popup
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|d
operator|->
name|managed
operator|==
name|QWSManagerPrivate
operator|::
name|active
condition|)
name|QWSManagerPrivate
operator|::
name|active
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|widget
name|QWidget
modifier|*
name|QWSManager
operator|::
name|widget
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWSManager
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|managed
return|;
block|}
end_function
begin_function
DECL|function|grabbedMouse
name|QWidget
modifier|*
name|QWSManager
operator|::
name|grabbedMouse
parameter_list|()
block|{
return|return
name|QWSManagerPrivate
operator|::
name|active
return|;
block|}
end_function
begin_function
DECL|function|region
name|QRegion
name|QWSManager
operator|::
name|region
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWSManager
argument_list|)
expr_stmt|;
return|return
name|QApplication
operator|::
name|qwsDecoration
argument_list|()
operator|.
name|region
argument_list|(
name|d
operator|->
name|managed
argument_list|,
name|d
operator|->
name|managed
operator|->
name|geometry
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|event
name|bool
name|QWSManager
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|QObject
operator|::
name|event
argument_list|(
name|e
argument_list|)
condition|)
return|return
literal|true
return|;
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|MouseMove
case|:
name|mouseMoveEvent
argument_list|(
operator|(
name|QMouseEvent
operator|*
operator|)
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
name|mousePressEvent
argument_list|(
operator|(
name|QMouseEvent
operator|*
operator|)
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
name|mouseReleaseEvent
argument_list|(
operator|(
name|QMouseEvent
operator|*
operator|)
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|MouseButtonDblClick
case|:
name|mouseDoubleClickEvent
argument_list|(
operator|(
name|QMouseEvent
operator|*
operator|)
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Paint
case|:
name|paintEvent
argument_list|(
operator|(
name|QPaintEvent
operator|*
operator|)
name|e
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
literal|false
return|;
break|break;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|QWSManager
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWSManager
argument_list|)
expr_stmt|;
name|d
operator|->
name|mousePos
operator|=
name|e
operator|->
name|globalPos
argument_list|()
expr_stmt|;
name|d
operator|->
name|activeRegion
operator|=
name|QApplication
operator|::
name|qwsDecoration
argument_list|()
operator|.
name|regionAt
argument_list|(
name|d
operator|->
name|managed
argument_list|,
name|d
operator|->
name|mousePos
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|cached_region
operator|.
name|regionType
condition|)
name|d
operator|->
name|previousRegionRepainted
operator||=
name|repaintRegion
argument_list|(
name|d
operator|->
name|cached_region
operator|.
name|regionType
argument_list|,
name|QDecoration
operator|::
name|Pressed
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|activeRegion
operator|==
name|QDecoration
operator|::
name|Menu
condition|)
block|{
name|QPoint
name|pos
init|=
operator|(
name|QApplication
operator|::
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|LeftToRight
condition|?
name|d
operator|->
name|managed
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
else|:
name|d
operator|->
name|managed
operator|->
name|geometry
argument_list|()
operator|.
name|topRight
argument_list|()
operator|)
decl_stmt|;
name|menu
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|activeRegion
operator|!=
name|QDecoration
operator|::
name|None
operator|&&
name|d
operator|->
name|activeRegion
operator|!=
name|QDecoration
operator|::
name|Menu
condition|)
block|{
name|d
operator|->
name|active
operator|=
name|d
operator|->
name|managed
expr_stmt|;
name|d
operator|->
name|managed
operator|->
name|grabMouse
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|activeRegion
operator|!=
name|QDecoration
operator|::
name|None
operator|&&
name|d
operator|->
name|activeRegion
operator|!=
name|QDecoration
operator|::
name|Close
operator|&&
name|d
operator|->
name|activeRegion
operator|!=
name|QDecoration
operator|::
name|Minimize
operator|&&
name|d
operator|->
name|activeRegion
operator|!=
name|QDecoration
operator|::
name|Menu
condition|)
block|{
name|d
operator|->
name|managed
operator|->
name|raise
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|RightButton
condition|)
block|{
name|menu
argument_list|(
name|e
operator|->
name|globalPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QWSManager
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWSManager
argument_list|)
expr_stmt|;
name|d
operator|->
name|managed
operator|->
name|releaseMouse
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|cached_region
operator|.
name|regionType
operator|&&
name|d
operator|->
name|previousRegionRepainted
operator|&&
name|QApplication
operator|::
name|mouseButtons
argument_list|()
operator|==
literal|0
condition|)
block|{
name|bool
name|doesHover
init|=
name|repaintRegion
argument_list|(
name|d
operator|->
name|cached_region
operator|.
name|regionType
argument_list|,
name|QDecoration
operator|::
name|Hover
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|doesHover
condition|)
block|{
name|repaintRegion
argument_list|(
name|d
operator|->
name|cached_region
operator|.
name|regionType
argument_list|,
name|QDecoration
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|d
operator|->
name|previousRegionRepainted
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|e
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
condition|)
block|{
comment|//handleMove();
name|int
name|itm
init|=
name|QApplication
operator|::
name|qwsDecoration
argument_list|()
operator|.
name|regionAt
argument_list|(
name|d
operator|->
name|managed
argument_list|,
name|e
operator|->
name|globalPos
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|activatedItem
init|=
name|d
operator|->
name|activeRegion
decl_stmt|;
name|d
operator|->
name|activeRegion
operator|=
name|QDecoration
operator|::
name|None
expr_stmt|;
name|d
operator|->
name|active
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|activatedItem
operator|==
name|itm
condition|)
name|QApplication
operator|::
name|qwsDecoration
argument_list|()
operator|.
name|regionClicked
argument_list|(
name|d
operator|->
name|managed
argument_list|,
name|itm
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|activeRegion
operator|==
name|QDecoration
operator|::
name|None
condition|)
block|{
name|d
operator|->
name|active
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|mouseDoubleClickEvent
name|void
name|QWSManager
operator|::
name|mouseDoubleClickEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWSManager
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
condition|)
name|QApplication
operator|::
name|qwsDecoration
argument_list|()
operator|.
name|regionDoubleClicked
argument_list|(
name|d
operator|->
name|managed
argument_list|,
name|QApplication
operator|::
name|qwsDecoration
argument_list|()
operator|.
name|regionAt
argument_list|(
name|d
operator|->
name|managed
argument_list|,
name|e
operator|->
name|globalPos
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|regionToShape
specifier|static
specifier|inline
name|Qt
operator|::
name|CursorShape
name|regionToShape
parameter_list|(
name|int
name|region
parameter_list|)
block|{
if|if
condition|(
name|region
operator|==
name|QDecoration
operator|::
name|None
condition|)
return|return
name|Qt
operator|::
name|ArrowCursor
return|;
specifier|static
specifier|const
struct|struct
block|{
name|int
name|region
decl_stmt|;
name|Qt
operator|::
name|CursorShape
name|shape
decl_stmt|;
block|}
name|r2s
index|[]
init|=
block|{
block|{
name|QDecoration
operator|::
name|TopLeft
block|,
name|Qt
operator|::
name|SizeFDiagCursor
block|}
block|,
block|{
name|QDecoration
operator|::
name|Top
block|,
name|Qt
operator|::
name|SizeVerCursor
block|}
block|,
block|{
name|QDecoration
operator|::
name|TopRight
block|,
name|Qt
operator|::
name|SizeBDiagCursor
block|}
block|,
block|{
name|QDecoration
operator|::
name|Left
block|,
name|Qt
operator|::
name|SizeHorCursor
block|}
block|,
block|{
name|QDecoration
operator|::
name|Right
block|,
name|Qt
operator|::
name|SizeHorCursor
block|}
block|,
block|{
name|QDecoration
operator|::
name|BottomLeft
block|,
name|Qt
operator|::
name|SizeBDiagCursor
block|}
block|,
block|{
name|QDecoration
operator|::
name|Bottom
block|,
name|Qt
operator|::
name|SizeVerCursor
block|}
block|,
block|{
name|QDecoration
operator|::
name|BottomRight
block|,
name|Qt
operator|::
name|SizeFDiagCursor
block|}
block|,
block|{
name|QDecoration
operator|::
name|None
block|,
name|Qt
operator|::
name|ArrowCursor
block|}
block|}
struct|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|region
operator|!=
name|r2s
index|[
name|i
index|]
operator|.
name|region
operator|&&
name|r2s
index|[
name|i
index|]
operator|.
name|region
condition|)
operator|++
name|i
expr_stmt|;
return|return
name|r2s
index|[
name|i
index|]
operator|.
name|shape
return|;
block|}
end_function
begin_function
DECL|function|mouseMoveEvent
name|void
name|QWSManager
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWSManager
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|newCachedRegion
argument_list|(
name|e
operator|->
name|globalPos
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|previousRegionType
operator|&&
name|d
operator|->
name|previousRegionRepainted
condition|)
name|repaintRegion
argument_list|(
name|d
operator|->
name|previousRegionType
argument_list|,
name|QDecoration
operator|::
name|Normal
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|cached_region
operator|.
name|regionType
condition|)
block|{
name|d
operator|->
name|previousRegionRepainted
operator|=
name|repaintRegion
argument_list|(
name|d
operator|->
name|cached_region
operator|.
name|regionType
argument_list|,
name|QDecoration
operator|::
name|Hover
argument_list|)
expr_stmt|;
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
if|if
condition|(
name|d
operator|->
name|managed
operator|->
name|minimumSize
argument_list|()
operator|!=
name|d
operator|->
name|managed
operator|->
name|maximumSize
argument_list|()
condition|)
block|{
name|QWSDisplay
modifier|*
name|qwsd
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|qwsDisplay
argument_list|()
decl_stmt|;
name|qwsd
operator|->
name|selectCursor
argument_list|(
name|d
operator|->
name|managed
argument_list|,
name|regionToShape
argument_list|(
name|d
operator|->
name|cachedRegionAt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|//QT_NO_CURSOR
if|if
condition|(
name|d
operator|->
name|activeRegion
condition|)
name|handleMove
argument_list|(
name|e
operator|->
name|globalPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleMove
name|void
name|QWSManager
operator|::
name|handleMove
parameter_list|(
name|QPoint
name|g
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWSManager
argument_list|)
expr_stmt|;
comment|// don't allow dragging to where the user probably cannot click!
name|QApplicationPrivate
modifier|*
name|ap
init|=
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|maxWindowRect
init|=
name|ap
operator|->
name|maxWindowRect
argument_list|(
name|qt_screen
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxWindowRect
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
name|g
operator|.
name|x
argument_list|()
operator|<
name|maxWindowRect
operator|.
name|x
argument_list|()
condition|)
name|g
operator|.
name|setX
argument_list|(
name|maxWindowRect
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|y
argument_list|()
operator|<
name|maxWindowRect
operator|.
name|y
argument_list|()
condition|)
name|g
operator|.
name|setY
argument_list|(
name|maxWindowRect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|x
argument_list|()
operator|>
name|maxWindowRect
operator|.
name|right
argument_list|()
condition|)
name|g
operator|.
name|setX
argument_list|(
name|maxWindowRect
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|y
argument_list|()
operator|>
name|maxWindowRect
operator|.
name|bottom
argument_list|()
condition|)
name|g
operator|.
name|setY
argument_list|(
name|maxWindowRect
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|g
operator|==
name|d
operator|->
name|mousePos
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|managed
operator|->
name|isMaximized
argument_list|()
condition|)
return|return;
name|int
name|x
init|=
name|d
operator|->
name|managed
operator|->
name|geometry
argument_list|()
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|d
operator|->
name|managed
operator|->
name|geometry
argument_list|()
operator|.
name|y
argument_list|()
decl_stmt|;
name|int
name|w
init|=
name|d
operator|->
name|managed
operator|->
name|width
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|d
operator|->
name|managed
operator|->
name|height
argument_list|()
decl_stmt|;
name|QRect
name|geom
argument_list|(
name|d
operator|->
name|managed
operator|->
name|geometry
argument_list|()
argument_list|)
decl_stmt|;
name|QPoint
name|delta
init|=
name|g
operator|-
name|d
operator|->
name|mousePos
decl_stmt|;
name|d
operator|->
name|mousePos
operator|=
name|g
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|activeRegion
operator|==
name|QDecoration
operator|::
name|Title
condition|)
block|{
name|geom
operator|=
name|QRect
argument_list|(
name|x
operator|+
name|delta
operator|.
name|x
argument_list|()
argument_list|,
name|y
operator|+
name|delta
operator|.
name|y
argument_list|()
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bool
name|keepTop
init|=
literal|true
decl_stmt|;
name|bool
name|keepLeft
init|=
literal|true
decl_stmt|;
switch|switch
condition|(
name|d
operator|->
name|activeRegion
condition|)
block|{
case|case
name|QDecoration
operator|::
name|Top
case|:
name|geom
operator|.
name|setTop
argument_list|(
name|geom
operator|.
name|top
argument_list|()
operator|+
name|delta
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|keepTop
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|QDecoration
operator|::
name|Bottom
case|:
name|geom
operator|.
name|setBottom
argument_list|(
name|geom
operator|.
name|bottom
argument_list|()
operator|+
name|delta
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|keepTop
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QDecoration
operator|::
name|Left
case|:
name|geom
operator|.
name|setLeft
argument_list|(
name|geom
operator|.
name|left
argument_list|()
operator|+
name|delta
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|keepLeft
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|QDecoration
operator|::
name|Right
case|:
name|geom
operator|.
name|setRight
argument_list|(
name|geom
operator|.
name|right
argument_list|()
operator|+
name|delta
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|keepLeft
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QDecoration
operator|::
name|TopRight
case|:
name|geom
operator|.
name|setTopRight
argument_list|(
name|geom
operator|.
name|topRight
argument_list|()
operator|+
name|delta
argument_list|)
expr_stmt|;
name|keepLeft
operator|=
literal|true
expr_stmt|;
name|keepTop
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|QDecoration
operator|::
name|TopLeft
case|:
name|geom
operator|.
name|setTopLeft
argument_list|(
name|geom
operator|.
name|topLeft
argument_list|()
operator|+
name|delta
argument_list|)
expr_stmt|;
name|keepLeft
operator|=
literal|false
expr_stmt|;
name|keepTop
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|QDecoration
operator|::
name|BottomLeft
case|:
name|geom
operator|.
name|setBottomLeft
argument_list|(
name|geom
operator|.
name|bottomLeft
argument_list|()
operator|+
name|delta
argument_list|)
expr_stmt|;
name|keepLeft
operator|=
literal|false
expr_stmt|;
name|keepTop
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QDecoration
operator|::
name|BottomRight
case|:
name|geom
operator|.
name|setBottomRight
argument_list|(
name|geom
operator|.
name|bottomRight
argument_list|()
operator|+
name|delta
argument_list|)
expr_stmt|;
name|keepLeft
operator|=
literal|true
expr_stmt|;
name|keepTop
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
return|return;
block|}
name|QSize
name|newSize
init|=
name|QLayout
operator|::
name|closestAcceptableSize
argument_list|(
name|d
operator|->
name|managed
argument_list|,
name|geom
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|dx
init|=
name|newSize
operator|.
name|width
argument_list|()
operator|-
name|geom
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|dy
init|=
name|newSize
operator|.
name|height
argument_list|()
operator|-
name|geom
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
name|keepTop
condition|)
block|{
name|geom
operator|.
name|setBottom
argument_list|(
name|geom
operator|.
name|bottom
argument_list|()
operator|+
name|dy
argument_list|)
expr_stmt|;
name|d
operator|->
name|mousePos
operator|.
name|ry
argument_list|()
operator|+=
name|dy
expr_stmt|;
block|}
else|else
block|{
name|geom
operator|.
name|setTop
argument_list|(
name|geom
operator|.
name|top
argument_list|()
operator|-
name|dy
argument_list|)
expr_stmt|;
name|d
operator|->
name|mousePos
operator|.
name|ry
argument_list|()
operator|-=
name|dy
expr_stmt|;
block|}
if|if
condition|(
name|keepLeft
condition|)
block|{
name|geom
operator|.
name|setRight
argument_list|(
name|geom
operator|.
name|right
argument_list|()
operator|+
name|dx
argument_list|)
expr_stmt|;
name|d
operator|->
name|mousePos
operator|.
name|rx
argument_list|()
operator|+=
name|dx
expr_stmt|;
block|}
else|else
block|{
name|geom
operator|.
name|setLeft
argument_list|(
name|geom
operator|.
name|left
argument_list|()
operator|-
name|dx
argument_list|)
expr_stmt|;
name|d
operator|->
name|mousePos
operator|.
name|rx
argument_list|()
operator|-=
name|dx
expr_stmt|;
block|}
block|}
if|if
condition|(
name|geom
operator|!=
name|d
operator|->
name|managed
operator|->
name|geometry
argument_list|()
condition|)
block|{
name|QApplication
operator|::
name|sendPostedEvents
argument_list|()
expr_stmt|;
name|d
operator|->
name|managed
operator|->
name|setGeometry
argument_list|(
name|geom
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|paintEvent
name|void
name|QWSManager
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWSManager
argument_list|)
expr_stmt|;
name|d
operator|->
name|dirtyRegion
argument_list|(
name|QDecoration
operator|::
name|All
argument_list|,
name|QDecoration
operator|::
name|Normal
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dirtyRegion
name|void
name|QWSManagerPrivate
operator|::
name|dirtyRegion
parameter_list|(
name|int
name|decorationRegion
parameter_list|,
name|QDecoration
operator|::
name|DecorationState
name|state
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|clip
parameter_list|)
block|{
name|QTLWExtra
modifier|*
name|topextra
init|=
name|managed
operator|->
name|d_func
argument_list|()
operator|->
name|extra
operator|->
name|topextra
decl_stmt|;
name|QWidgetBackingStore
modifier|*
name|bs
init|=
name|topextra
operator|->
name|backingStore
operator|.
name|data
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|pendingUpdateRequest
init|=
name|bs
operator|->
name|isDirty
argument_list|()
decl_stmt|;
if|if
condition|(
name|decorationRegion
operator|==
name|QDecoration
operator|::
name|All
condition|)
block|{
if|if
condition|(
name|clip
operator|.
name|isEmpty
argument_list|()
condition|)
name|entireDecorationNeedsRepaint
operator|=
literal|true
expr_stmt|;
name|dirtyRegions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dirtyStates
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|int
name|i
init|=
name|dirtyRegions
operator|.
name|indexOf
argument_list|(
name|decorationRegion
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|dirtyRegions
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|dirtyStates
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|dirtyRegions
operator|.
name|append
argument_list|(
name|decorationRegion
argument_list|)
expr_stmt|;
name|dirtyStates
operator|.
name|append
argument_list|(
name|state
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|entireDecorationNeedsRepaint
condition|)
name|dirtyClip
operator|+=
name|clip
expr_stmt|;
if|if
condition|(
operator|!
name|pendingUpdateRequest
condition|)
name|QApplication
operator|::
name|postEvent
argument_list|(
name|managed
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|UpdateRequest
argument_list|)
argument_list|,
name|Qt
operator|::
name|LowEventPriority
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearDirtyRegions
name|void
name|QWSManagerPrivate
operator|::
name|clearDirtyRegions
parameter_list|()
block|{
name|dirtyRegions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dirtyStates
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dirtyClip
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|entireDecorationNeedsRepaint
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|repaintRegion
name|bool
name|QWSManager
operator|::
name|repaintRegion
parameter_list|(
name|int
name|decorationRegion
parameter_list|,
name|QDecoration
operator|::
name|DecorationState
name|state
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWSManager
argument_list|)
expr_stmt|;
name|d
operator|->
name|dirtyRegion
argument_list|(
name|decorationRegion
argument_list|,
name|state
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|menu
name|void
name|QWSManager
operator|::
name|menu
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_MENU
name|Q_UNUSED
argument_list|(
name|pos
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_D
argument_list|(
name|QWSManager
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|popup
condition|)
operator|delete
name|d
operator|->
name|popup
expr_stmt|;
comment|// Basic window operation menu
name|d
operator|->
name|popup
operator|=
operator|new
name|QMenu
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|qwsDecoration
argument_list|()
operator|.
name|buildSysMenu
argument_list|(
name|d
operator|->
name|managed
argument_list|,
name|d
operator|->
name|popup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|popup
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|menuTriggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|popup
operator|->
name|popup
parameter_list|(
name|pos
parameter_list|)
constructor_decl|;
name|d
operator|->
name|activeRegion
operator|=
name|QDecoration
operator|::
name|None
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_MENU
block|}
end_function
begin_function
DECL|function|menuTriggered
name|void
name|QWSManager
operator|::
name|menuTriggered
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_MENU
name|Q_UNUSED
argument_list|(
name|action
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_D
argument_list|(
name|QWSManager
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|qwsDecoration
argument_list|()
operator|.
name|menuTriggered
argument_list|(
name|d
operator|->
name|managed
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|d
operator|->
name|popup
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|d
operator|->
name|popup
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|startMove
name|void
name|QWSManager
operator|::
name|startMove
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWSManager
argument_list|)
expr_stmt|;
name|d
operator|->
name|mousePos
operator|=
name|QCursor
operator|::
name|pos
argument_list|()
expr_stmt|;
name|d
operator|->
name|activeRegion
operator|=
name|QDecoration
operator|::
name|Title
expr_stmt|;
name|d
operator|->
name|active
operator|=
name|d
operator|->
name|managed
expr_stmt|;
name|d
operator|->
name|managed
operator|->
name|grabMouse
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|startResize
name|void
name|QWSManager
operator|::
name|startResize
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWSManager
argument_list|)
expr_stmt|;
name|d
operator|->
name|activeRegion
operator|=
name|QDecoration
operator|::
name|BottomRight
expr_stmt|;
name|d
operator|->
name|active
operator|=
name|d
operator|->
name|managed
expr_stmt|;
name|d
operator|->
name|managed
operator|->
name|grabMouse
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|maximize
name|void
name|QWSManager
operator|::
name|maximize
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWSManager
argument_list|)
expr_stmt|;
comment|// find out how much space the decoration needs
specifier|const
name|int
name|screen
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenNumber
argument_list|(
name|d
operator|->
name|managed
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|desk
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
name|screen
argument_list|)
decl_stmt|;
name|QRect
name|dummy
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QRect
name|nr
decl_stmt|;
name|QRegion
name|r
init|=
name|QApplication
operator|::
name|qwsDecoration
argument_list|()
operator|.
name|region
argument_list|(
name|d
operator|->
name|managed
argument_list|,
name|dummy
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nr
operator|=
name|desk
expr_stmt|;
block|}
else|else
block|{
name|r
operator|+=
name|dummy
expr_stmt|;
comment|// make sure we get the full window region in case of 0 width borders
name|QRect
name|rect
init|=
name|r
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
name|nr
operator|=
name|QRect
argument_list|(
name|desk
operator|.
name|x
argument_list|()
operator|-
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|desk
operator|.
name|y
argument_list|()
operator|-
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|desk
operator|.
name|width
argument_list|()
operator|-
operator|(
name|rect
operator|.
name|width
argument_list|()
operator|==
literal|1
condition|?
literal|0
else|:
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|1
operator|)
argument_list|,
comment|// ==1 -> dummy
name|desk
operator|.
name|height
argument_list|()
operator|-
operator|(
name|rect
operator|.
name|height
argument_list|()
operator|==
literal|1
condition|?
literal|0
else|:
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|managed
operator|->
name|setGeometry
argument_list|(
name|nr
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|newCachedRegion
name|bool
name|QWSManagerPrivate
operator|::
name|newCachedRegion
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
comment|// Check if anything has changed that would affect the region caching
if|if
condition|(
name|managed
operator|->
name|windowFlags
argument_list|()
operator|==
name|cached_region
operator|.
name|windowFlags
operator|&&
name|managed
operator|->
name|geometry
argument_list|()
operator|==
name|cached_region
operator|.
name|windowGeometry
operator|&&
name|cached_region
operator|.
name|region
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// Update the cached region
name|int
name|reg
init|=
name|QApplication
operator|::
name|qwsDecoration
argument_list|()
operator|.
name|regionAt
argument_list|(
name|managed
argument_list|,
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
condition|)
name|reg
operator|=
name|QDecoration
operator|::
name|None
expr_stmt|;
name|previousRegionType
operator|=
name|cached_region
operator|.
name|regionType
expr_stmt|;
name|cached_region
operator|.
name|regionType
operator|=
name|reg
expr_stmt|;
name|cached_region
operator|.
name|region
operator|=
name|QApplication
operator|::
name|qwsDecoration
argument_list|()
operator|.
name|region
argument_list|(
name|managed
argument_list|,
name|managed
operator|->
name|geometry
argument_list|()
argument_list|,
name|reg
argument_list|)
expr_stmt|;
comment|// Make room for borders around the widget, even if the decoration doesn't have a frame.
if|if
condition|(
name|reg
operator|&&
operator|!
operator|(
name|reg
operator|&
name|int
argument_list|(
name|QDecoration
operator|::
name|Borders
argument_list|)
operator|)
condition|)
block|{
name|cached_region
operator|.
name|region
operator|-=
name|QApplication
operator|::
name|qwsDecoration
argument_list|()
operator|.
name|region
argument_list|(
name|managed
argument_list|,
name|managed
operator|->
name|geometry
argument_list|()
argument_list|,
name|QDecoration
operator|::
name|Borders
argument_list|)
expr_stmt|;
block|}
name|cached_region
operator|.
name|windowFlags
operator|=
name|managed
operator|->
name|windowFlags
argument_list|()
expr_stmt|;
name|cached_region
operator|.
name|windowGeometry
operator|=
name|managed
operator|->
name|geometry
argument_list|()
expr_stmt|;
comment|//    QRect rec = cached_region.region.boundingRect();
comment|//    qDebug("Updated cached region: 0x%04x (%d, %d)  (%d, %d,  %d, %d)",
comment|//           reg, pos.x(), pos.y(), rec.x(), rec.y(), rec.right(), rec.bottom());
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_QWS_MANAGER
end_comment
end_unit
