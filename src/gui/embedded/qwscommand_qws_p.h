begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QWSCOMMAND_QWS_P_H
end_ifndef
begin_define
DECL|macro|QWSCOMMAND_QWS_P_H
define|#
directive|define
name|QWSCOMMAND_QWS_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// When reading commands "off the wire" in the server, the rawLen is read
end_comment
begin_comment
comment|// and then that many bytes are allocated.  If the rawLen is corrupted (or
end_comment
begin_comment
comment|// the protocol is being attacked) too many bytes can be allocated.  Set
end_comment
begin_comment
comment|// a hard limit here for security.
end_comment
begin_define
DECL|macro|MAX_COMMAND_SIZE
define|#
directive|define
name|MAX_COMMAND_SIZE
value|(16 * 1024)
end_define
begin_include
include|#
directive|include
file|<QtCore/qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qwsutils_qws.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qfont.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdatastream.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvariant.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qrect.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qregion.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvector.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qwsevent_qws.h>
end_include
begin_include
include|#
directive|include
file|"qwsprotocolitem_qws.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Gui
argument_list|)
name|class
name|QRect
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*********************************************************************  *  * Functions to read/write commands on/from a socket  *  *********************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTIPROCESS
end_ifndef
begin_function_decl
DECL|variable|qws_write_command
name|void
name|qws_write_command
parameter_list|(
name|QIODevice
modifier|*
name|socket
parameter_list|,
name|int
name|type
parameter_list|,
name|char
modifier|*
name|simpleData
parameter_list|,
name|int
name|simpleLen
parameter_list|,
name|char
modifier|*
name|rawData
parameter_list|,
name|int
name|rawLen
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|qws_read_command
parameter_list|(
name|QIODevice
modifier|*
name|socket
parameter_list|,
name|char
modifier|*
modifier|&
name|simpleData
parameter_list|,
name|int
modifier|&
name|simpleLen
parameter_list|,
name|char
modifier|*
modifier|&
name|rawData
parameter_list|,
name|int
modifier|&
name|rawLen
parameter_list|,
name|int
modifier|&
name|bytesRead
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|struct|QWSProtocolItem
name|struct
name|QWSCommand
range|:
name|QWSProtocolItem
block|{
DECL|function|QWSCommand
name|QWSCommand
argument_list|(
argument|int t
argument_list|,
argument|int len
argument_list|,
argument|char *ptr
argument_list|)
operator|:
name|QWSProtocolItem
argument_list|(
argument|t
argument_list|,
argument|len
argument_list|,
argument|ptr
argument_list|)
block|{}
expr|enum
DECL|enum|Type
name|Type
block|{
DECL|enumerator|Unknown
name|Unknown
operator|=
literal|0
block|,
DECL|enumerator|Create
name|Create
block|,
DECL|enumerator|Shutdown
name|Shutdown
block|,
DECL|enumerator|Region
name|Region
block|,
DECL|enumerator|RegionMove
name|RegionMove
block|,
DECL|enumerator|RegionDestroy
name|RegionDestroy
block|,
DECL|enumerator|SetProperty
name|SetProperty
block|,
DECL|enumerator|AddProperty
name|AddProperty
block|,
DECL|enumerator|RemoveProperty
name|RemoveProperty
block|,
DECL|enumerator|GetProperty
name|GetProperty
block|,
DECL|enumerator|SetSelectionOwner
name|SetSelectionOwner
block|,
DECL|enumerator|ConvertSelection
name|ConvertSelection
block|,
DECL|enumerator|RequestFocus
name|RequestFocus
block|,
DECL|enumerator|ChangeAltitude
name|ChangeAltitude
block|,
DECL|enumerator|SetOpacity
name|SetOpacity
block|,
DECL|enumerator|DefineCursor
name|DefineCursor
block|,
DECL|enumerator|SelectCursor
name|SelectCursor
block|,
DECL|enumerator|PositionCursor
name|PositionCursor
block|,
DECL|enumerator|GrabMouse
name|GrabMouse
block|,
DECL|enumerator|PlaySound
name|PlaySound
block|,
DECL|enumerator|QCopRegisterChannel
name|QCopRegisterChannel
block|,
DECL|enumerator|QCopSend
name|QCopSend
block|,
DECL|enumerator|RegionName
name|RegionName
block|,
DECL|enumerator|Identify
name|Identify
block|,
DECL|enumerator|GrabKeyboard
name|GrabKeyboard
block|,
DECL|enumerator|RepaintRegion
name|RepaintRegion
block|,
DECL|enumerator|IMMouse
name|IMMouse
block|,
DECL|enumerator|IMUpdate
name|IMUpdate
block|,
DECL|enumerator|IMResponse
name|IMResponse
block|,
DECL|enumerator|Embed
name|Embed
block|,
DECL|enumerator|Font
name|Font
block|,
DECL|enumerator|ScreenTransform
name|ScreenTransform
block|}
block|;
specifier|static
name|QWSCommand
operator|*
name|factory
argument_list|(
argument|int type
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|const
name|char
modifier|*
name|qws_getCommandTypeString
argument_list|(
name|QWSCommand
operator|::
name|Type
name|tp
argument_list|)
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
end_ifndef
begin_decl_stmt
DECL|variable|QDebug
name|class
name|QDebug
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QDebug
operator|&
name|operator
operator|<<
operator|(
name|QDebug
operator|&
name|dbg
operator|,
name|QWSCommand
operator|::
name|Type
name|tp
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DEBUG
end_comment
begin_comment
comment|/*********************************************************************  *  * Commands  *  *********************************************************************/
end_comment
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSIdentifyCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSIdentifyCommand
name|QWSIdentifyCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::Identify
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char *>(&simpleData)
argument_list|)
block|{
name|simpleData
operator|.
name|idLen
operator|=
literal|0
block|;
name|simpleData
operator|.
name|idLock
operator|=
operator|-
literal|1
block|;     }
DECL|function|setData
name|void
name|setData
argument_list|(
argument|const char *d
argument_list|,
argument|int len
argument_list|,
argument|bool allocateMem
argument_list|)
block|{
name|QWSCommand
operator|::
name|setData
argument_list|(
name|d
argument_list|,
name|len
argument_list|,
name|allocateMem
argument_list|)
block|;
if|if
condition|(
name|simpleData
operator|.
name|idLen
operator|>
name|MAX_COMMAND_SIZE
condition|)
block|{
name|qWarning
argument_list|(
literal|"Identify command - name length %d - too big!"
argument_list|,
name|simpleData
operator|.
name|idLen
argument_list|)
expr_stmt|;
name|simpleData
operator|.
name|idLen
operator|=
name|MAX_COMMAND_SIZE
expr_stmt|;
block|}
if|if
condition|(
name|simpleData
operator|.
name|idLen
operator|*
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
operator|>
name|len
condition|)
block|{
name|qWarning
argument_list|(
literal|"Identify command - name length %d - buffer size %d - buffer overrun!"
argument_list|,
name|simpleData
operator|.
name|idLen
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|id
operator|=
name|QString
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|QChar
operator|*
operator|>
operator|(
name|d
operator|)
argument_list|,
name|simpleData
operator|.
name|idLen
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|setId
name|void
name|setId
argument_list|(
argument|const QString& i
argument_list|,
argument|int lock
argument_list|)
block|{
name|id
operator|=
name|i
block|;
name|simpleData
operator|.
name|idLen
operator|=
name|id
operator|.
name|length
argument_list|()
block|;
name|simpleData
operator|.
name|idLock
operator|=
name|lock
block|;
name|setData
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|id
operator|.
name|unicode
argument_list|()
operator|)
argument_list|,
name|simpleData
operator|.
name|idLen
operator|*
literal|2
argument_list|,
name|true
argument_list|)
block|;     }
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|idLen
name|int
name|idLen
block|;
DECL|member|idLock
name|int
name|idLock
block|;     }
DECL|member|simpleData
name|simpleData
block|;
DECL|member|id
name|QString
name|id
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSCreateCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSCreateCommand
name|QWSCreateCommand
argument_list|(
argument|int n =
literal|1
argument_list|)
operator|:
name|QWSCommand
argument_list|(
name|QWSCommand
operator|::
name|Create
argument_list|,
sizeof|sizeof
argument_list|(
name|count
argument_list|)
argument_list|,
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
operator|&
name|count
operator|)
argument_list|)
block|,
name|count
argument_list|(
argument|n
argument_list|)
block|{}
DECL|member|count
name|int
name|count
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSRegionNameCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSRegionNameCommand
name|QWSRegionNameCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::RegionName
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char *>(&simpleData)
argument_list|)
block|{}
DECL|function|setData
name|void
name|setData
argument_list|(
argument|const char *d
argument_list|,
argument|int len
argument_list|,
argument|bool allocateMem
argument_list|)
block|{
name|QWSCommand
operator|::
name|setData
argument_list|(
name|d
argument_list|,
name|len
argument_list|,
name|allocateMem
argument_list|)
block|;
if|if
condition|(
name|simpleData
operator|.
name|nameLen
operator|>
name|MAX_COMMAND_SIZE
condition|)
block|{
name|qWarning
argument_list|(
literal|"region name command - name length too big!"
argument_list|)
expr_stmt|;
name|simpleData
operator|.
name|nameLen
operator|=
name|MAX_COMMAND_SIZE
expr_stmt|;
block|}
if|if
condition|(
name|simpleData
operator|.
name|captionLen
operator|>
name|MAX_COMMAND_SIZE
condition|)
block|{
name|qWarning
argument_list|(
literal|"region name command - caption length too big!"
argument_list|)
expr_stmt|;
name|simpleData
operator|.
name|captionLen
operator|=
name|MAX_COMMAND_SIZE
expr_stmt|;
block|}
if|if
condition|(
name|simpleData
operator|.
name|nameLen
operator|+
name|simpleData
operator|.
name|captionLen
operator|>
name|len
condition|)
block|{
name|qWarning
argument_list|(
literal|"region name command - name length %d - caption length %d - buffer size %d - buffer overrun!"
argument_list|,
name|simpleData
operator|.
name|nameLen
argument_list|,
name|simpleData
operator|.
name|captionLen
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|QString
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|QChar
operator|*
operator|>
operator|(
name|d
operator|)
argument_list|,
name|simpleData
operator|.
name|nameLen
operator|/
literal|2
argument_list|)
expr_stmt|;
name|d
operator|+=
name|simpleData
operator|.
name|nameLen
expr_stmt|;
name|caption
operator|=
name|QString
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|QChar
operator|*
operator|>
operator|(
name|d
operator|)
argument_list|,
name|simpleData
operator|.
name|captionLen
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|setName
name|void
name|setName
argument_list|(
argument|const QString& n
argument_list|,
argument|const QString&c
argument_list|)
block|{
name|name
operator|=
name|n
block|;
name|caption
operator|=
name|c
block|;
name|int
name|l
operator|=
name|simpleData
operator|.
name|nameLen
operator|=
name|name
operator|.
name|length
argument_list|()
operator|*
literal|2
block|;
name|l
operator|+=
name|simpleData
operator|.
name|captionLen
operator|=
name|caption
operator|.
name|length
argument_list|()
operator|*
literal|2
block|;
name|char
operator|*
name|d
operator|=
name|new
name|char
index|[
name|l
index|]
block|;
name|memcpy
argument_list|(
name|d
argument_list|,
name|name
operator|.
name|unicode
argument_list|()
argument_list|,
name|simpleData
operator|.
name|nameLen
argument_list|)
block|;
name|memcpy
argument_list|(
name|d
operator|+
name|simpleData
operator|.
name|nameLen
argument_list|,
name|caption
operator|.
name|unicode
argument_list|()
argument_list|,
name|simpleData
operator|.
name|captionLen
argument_list|)
block|;
name|setData
argument_list|(
name|d
argument_list|,
name|l
argument_list|,
name|true
argument_list|)
block|;
name|delete
index|[]
name|d
block|;     }
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|windowid
name|int
name|windowid
block|;
DECL|member|nameLen
name|int
name|nameLen
block|;
DECL|member|captionLen
name|int
name|captionLen
block|;     }
DECL|member|simpleData
name|simpleData
block|;
DECL|member|name
name|QString
name|name
block|;
DECL|member|caption
name|QString
name|caption
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSRegionCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSRegionCommand
name|QWSRegionCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::Region
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
DECL|function|setData
name|void
name|setData
argument_list|(
argument|const char *d
argument_list|,
argument|int len
argument_list|,
argument|bool allocateMem = true
argument_list|)
block|{
name|QWSCommand
operator|::
name|setData
argument_list|(
name|d
argument_list|,
name|len
argument_list|,
name|allocateMem
argument_list|)
block|;
if|if
condition|(
name|simpleData
operator|.
name|nrectangles
operator|*
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|QRect
argument_list|)
argument_list|)
operator|+
name|simpleData
operator|.
name|surfacekeylength
operator|*
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
operator|+
name|simpleData
operator|.
name|surfacedatalength
operator|*
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|char
argument_list|)
argument_list|)
operator|>
name|len
condition|)
block|{
name|qWarning
argument_list|(
literal|"region command - rectangle count %d - surface key length %d - region data size %d - buffer size %d - buffer overrun!"
argument_list|,
name|simpleData
operator|.
name|nrectangles
argument_list|,
name|simpleData
operator|.
name|surfacekeylength
argument_list|,
name|simpleData
operator|.
name|surfacedatalength
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|char
modifier|*
name|ptr
init|=
name|rawDataPtr
decl_stmt|;
name|region
operator|.
name|setRects
argument_list|(
name|reinterpret_cast
operator|<
name|QRect
operator|*
operator|>
operator|(
name|ptr
operator|)
argument_list|,
name|simpleData
operator|.
name|nrectangles
argument_list|)
expr_stmt|;
name|ptr
operator|+=
name|simpleData
operator|.
name|nrectangles
operator|*
sizeof|sizeof
argument_list|(
name|QRect
argument_list|)
expr_stmt|;
name|surfaceKey
operator|=
name|QString
argument_list|(
name|reinterpret_cast
operator|<
name|QChar
operator|*
operator|>
operator|(
name|ptr
operator|)
argument_list|,
name|simpleData
operator|.
name|surfacekeylength
argument_list|)
expr_stmt|;
name|ptr
operator|+=
name|simpleData
operator|.
name|surfacekeylength
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
expr_stmt|;
name|surfaceData
operator|=
name|QByteArray
argument_list|(
name|ptr
argument_list|,
name|simpleData
operator|.
name|surfacedatalength
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|setData
name|void
name|setData
argument_list|(
argument|int id
argument_list|,
argument|const QString&key
argument_list|,
argument|const QByteArray&data
argument_list|,
argument|const QRegion&reg
argument_list|)
block|{
name|surfaceKey
operator|=
name|key
block|;
name|surfaceData
operator|=
name|data
block|;
name|region
operator|=
name|reg
block|;
specifier|const
name|QVector
operator|<
name|QRect
operator|>
name|rects
operator|=
name|reg
operator|.
name|rects
argument_list|()
block|;
name|simpleData
operator|.
name|windowid
operator|=
name|id
block|;
name|simpleData
operator|.
name|surfacekeylength
operator|=
name|key
operator|.
name|size
argument_list|()
block|;
name|simpleData
operator|.
name|surfacedatalength
operator|=
name|data
operator|.
name|size
argument_list|()
block|;
name|simpleData
operator|.
name|nrectangles
operator|=
name|rects
operator|.
name|count
argument_list|()
block|;
name|QVarLengthArray
operator|<
name|char
block|,
literal|256
operator|>
name|buffer
block|;
name|buffer
operator|.
name|append
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|rects
operator|.
name|constData
argument_list|()
operator|)
argument_list|,
name|rects
operator|.
name|count
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|QRect
argument_list|)
argument_list|)
block|;
name|buffer
operator|.
name|append
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|key
operator|.
name|constData
argument_list|()
operator|)
argument_list|,
name|key
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
block|;
name|buffer
operator|.
name|append
argument_list|(
name|data
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|QWSCommand
operator|::
name|setData
argument_list|(
name|buffer
operator|.
name|constData
argument_list|()
argument_list|,
name|buffer
operator|.
name|size
argument_list|()
argument_list|,
name|true
argument_list|)
block|;     }
comment|/* XXX this will pad out in a compiler dependent way,        should move nrectangles to before windowtype, and        add reserved bytes.        Symptom will be valgrind reported uninitialized memory usage        */
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|windowid
name|int
name|windowid
block|;
DECL|member|surfacekeylength
name|int
name|surfacekeylength
block|;
DECL|member|surfacedatalength
name|int
name|surfacedatalength
block|;
DECL|member|nrectangles
name|int
name|nrectangles
block|;     }
DECL|member|simpleData
name|simpleData
block|;
DECL|member|surfaceKey
name|QString
name|surfaceKey
block|;
DECL|member|surfaceData
name|QByteArray
name|surfaceData
block|;
DECL|member|region
name|QRegion
name|region
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSSetOpacityCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSSetOpacityCommand
name|QWSSetOpacityCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::SetOpacity
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|windowid
name|int
name|windowid
block|;
DECL|member|opacity
name|uchar
name|opacity
block|;     }
DECL|member|simpleData
name|simpleData
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSRegionMoveCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSRegionMoveCommand
name|QWSRegionMoveCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::RegionMove
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|windowid
name|int
name|windowid
block|;
DECL|member|dx
name|int
name|dx
block|;
DECL|member|dy
name|int
name|dy
block|;     }
DECL|member|simpleData
name|simpleData
block|;  }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSRegionDestroyCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSRegionDestroyCommand
name|QWSRegionDestroyCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::RegionDestroy
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|windowid
name|int
name|windowid
block|;     }
DECL|member|simpleData
name|simpleData
block|;  }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSRequestFocusCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSRequestFocusCommand
name|QWSRequestFocusCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::RequestFocus
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|windowid
name|int
name|windowid
block|;
DECL|member|flag
name|int
name|flag
block|;     }
DECL|member|simpleData
name|simpleData
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSChangeAltitudeCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSChangeAltitudeCommand
name|QWSChangeAltitudeCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::ChangeAltitude
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
expr|enum
DECL|enum|Altitude
name|Altitude
block|{
DECL|enumerator|Lower
name|Lower
operator|=
operator|-
literal|1
block|,
DECL|enumerator|Raise
name|Raise
operator|=
literal|0
block|,
DECL|enumerator|StaysOnTop
name|StaysOnTop
operator|=
literal|1
block|}
block|;      struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|windowid
name|int
name|windowid
block|;
DECL|member|altitude
name|Altitude
name|altitude
block|;
DECL|member|fixed
name|bool
name|fixed
block|;     }
DECL|member|simpleData
name|simpleData
block|;  }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSAddPropertyCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSAddPropertyCommand
name|QWSAddPropertyCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::AddProperty
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|windowid
DECL|member|property
name|int
name|windowid
block|,
name|property
block|;     }
DECL|member|simpleData
name|simpleData
block|;  }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSSetPropertyCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSSetPropertyCommand
name|QWSSetPropertyCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::SetProperty
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{
name|data
operator|=
literal|0
block|; }
DECL|function|setData
name|void
name|setData
argument_list|(
argument|const char *d
argument_list|,
argument|int len
argument_list|,
argument|bool allocateMem = true
argument_list|)
block|{
name|QWSCommand
operator|::
name|setData
argument_list|(
name|d
argument_list|,
name|len
argument_list|,
name|allocateMem
argument_list|)
block|;
name|data
operator|=
name|rawDataPtr
block|;     }
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|windowid
DECL|member|property
DECL|member|mode
name|int
name|windowid
block|,
name|property
block|,
name|mode
block|;     }
DECL|member|simpleData
name|simpleData
block|;
DECL|member|data
name|char
operator|*
name|data
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSRepaintRegionCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSRepaintRegionCommand
name|QWSRepaintRegionCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::RepaintRegion
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
DECL|function|setData
name|void
name|setData
argument_list|(
argument|const char *d
argument_list|,
argument|int len
argument_list|,
argument|bool allocateMem = true
argument_list|)
block|{
name|QWSCommand
operator|::
name|setData
argument_list|(
name|d
argument_list|,
name|len
argument_list|,
name|allocateMem
argument_list|)
block|;
if|if
condition|(
name|simpleData
operator|.
name|nrectangles
operator|*
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|QRect
argument_list|)
argument_list|)
operator|>
name|len
condition|)
block|{
name|qWarning
argument_list|(
literal|"repaint region command - region rectangle count %d - buffer size %d - buffer overrun"
argument_list|,
name|simpleData
operator|.
name|nrectangles
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|simpleData
operator|.
name|nrectangles
operator|=
name|len
operator|/
sizeof|sizeof
argument_list|(
name|QRect
argument_list|)
expr_stmt|;
block|}
name|rectangles
operator|=
name|reinterpret_cast
operator|<
name|QRect
operator|*
operator|>
operator|(
name|rawDataPtr
operator|)
expr_stmt|;
block|}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|windowid
name|int
name|windowid
block|;
DECL|member|windowFlags
name|int
name|windowFlags
block|;
DECL|member|opaque
name|bool
name|opaque
block|;
DECL|member|nrectangles
name|int
name|nrectangles
block|;     }
DECL|member|simpleData
name|simpleData
block|;
DECL|member|rectangles
name|QRect
operator|*
name|rectangles
block|;  }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSRemovePropertyCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSRemovePropertyCommand
name|QWSRemovePropertyCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::RemoveProperty
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|windowid
DECL|member|property
name|int
name|windowid
block|,
name|property
block|;     }
DECL|member|simpleData
name|simpleData
block|;  }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSGetPropertyCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSGetPropertyCommand
name|QWSGetPropertyCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::GetProperty
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|windowid
DECL|member|property
name|int
name|windowid
block|,
name|property
block|;     }
DECL|member|simpleData
name|simpleData
block|;  }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSSetSelectionOwnerCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSSetSelectionOwnerCommand
name|QWSSetSelectionOwnerCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::SetSelectionOwner
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|windowid
name|int
name|windowid
block|;
DECL|member|hour
DECL|member|minute
DECL|member|sec
DECL|member|ms
name|int
name|hour
block|,
name|minute
block|,
name|sec
block|,
name|ms
block|;
comment|// time
block|}
DECL|member|simpleData
name|simpleData
block|;  }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSConvertSelectionCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSConvertSelectionCommand
name|QWSConvertSelectionCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::ConvertSelection
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|requestor
name|int
name|requestor
block|;
comment|// requestor window of the selection
DECL|member|selection
name|int
name|selection
block|;
comment|// property on requestor into which the selection should be stored
DECL|member|mimeTypes
name|int
name|mimeTypes
block|;
comment|// property ion requestor in which the mimetypes, in which the selection may be, are stored
block|}
DECL|member|simpleData
name|simpleData
block|;  }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSDefineCursorCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSDefineCursorCommand
name|QWSDefineCursorCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::DefineCursor
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char *>(&simpleData)
argument_list|)
block|{}
DECL|function|setData
name|void
name|setData
argument_list|(
argument|const char *d
argument_list|,
argument|int len
argument_list|,
argument|bool allocateMem = true
argument_list|)
block|{
name|QWSCommand
operator|::
name|setData
argument_list|(
name|d
argument_list|,
name|len
argument_list|,
name|allocateMem
argument_list|)
block|;
name|data
operator|=
name|reinterpret_cast
operator|<
name|unsigned
name|char
operator|*
operator|>
operator|(
name|rawDataPtr
operator|)
block|;
if|if
condition|(
name|simpleData
operator|.
name|height
operator|*
operator|(
operator|(
name|simpleData
operator|.
name|width
operator|+
literal|7
operator|)
operator|/
literal|8
operator|)
operator|>
name|len
condition|)
block|{
name|qWarning
argument_list|(
literal|"define cursor command - width %d height %d- buffer size %d - buffer overrun"
argument_list|,
name|simpleData
operator|.
name|width
argument_list|,
name|simpleData
operator|.
name|height
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|simpleData
operator|.
name|width
operator|=
name|simpleData
operator|.
name|height
operator|=
literal|0
expr_stmt|;
block|}
block|}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|width
name|int
name|width
block|;
DECL|member|height
name|int
name|height
block|;
DECL|member|hotX
name|int
name|hotX
block|;
DECL|member|hotY
name|int
name|hotY
block|;
DECL|member|id
name|int
name|id
block|;     }
DECL|member|simpleData
name|simpleData
block|;
DECL|member|data
name|unsigned
name|char
operator|*
name|data
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSSelectCursorCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSSelectCursorCommand
name|QWSSelectCursorCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::SelectCursor
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char *>(&simpleData)
argument_list|)
block|{}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|windowid
name|int
name|windowid
block|;
DECL|member|id
name|int
name|id
block|;     }
DECL|member|simpleData
name|simpleData
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSPositionCursorCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSPositionCursorCommand
name|QWSPositionCursorCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::PositionCursor
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char *>(&simpleData)
argument_list|)
block|{}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|newX
name|int
name|newX
block|;
DECL|member|newY
name|int
name|newY
block|;     }
DECL|member|simpleData
name|simpleData
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSGrabMouseCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSGrabMouseCommand
name|QWSGrabMouseCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::GrabMouse
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char *>(&simpleData)
argument_list|)
block|{}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|windowid
name|int
name|windowid
block|;
DECL|member|grab
name|bool
name|grab
block|;
comment|// grab or ungrab?
block|}
DECL|member|simpleData
name|simpleData
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSGrabKeyboardCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSGrabKeyboardCommand
name|QWSGrabKeyboardCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::GrabKeyboard
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char *>(&simpleData)
argument_list|)
block|{}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|windowid
name|int
name|windowid
block|;
DECL|member|grab
name|bool
name|grab
block|;
comment|// grab or ungrab?
block|}
DECL|member|simpleData
name|simpleData
block|; }
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SOUND
end_ifndef
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSPlaySoundCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSPlaySoundCommand
name|QWSPlaySoundCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::PlaySound
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char *>(&simpleData)
argument_list|)
block|{}
DECL|function|setData
name|void
name|setData
argument_list|(
argument|const char *d
argument_list|,
argument|int len
argument_list|,
argument|bool allocateMem
argument_list|)
block|{
name|QWSCommand
operator|::
name|setData
argument_list|(
name|d
argument_list|,
name|len
argument_list|,
name|allocateMem
argument_list|)
block|;
name|filename
operator|=
name|QString
argument_list|(
name|reinterpret_cast
operator|<
name|QChar
operator|*
operator|>
operator|(
name|rawDataPtr
operator|)
argument_list|,
name|len
operator|/
literal|2
argument_list|)
block|;     }
DECL|function|setFileName
name|void
name|setFileName
argument_list|(
argument|const QString& n
argument_list|)
block|{
name|setData
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|n
operator|.
name|unicode
argument_list|()
operator|)
argument_list|,
name|n
operator|.
name|length
argument_list|()
operator|*
literal|2
argument_list|,
name|true
argument_list|)
block|;     }
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|windowid
name|int
name|windowid
block|;     }
DECL|member|simpleData
name|simpleData
block|;
DECL|member|filename
name|QString
name|filename
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_COP
end_ifndef
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSQCopRegisterChannelCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSQCopRegisterChannelCommand
name|QWSQCopRegisterChannelCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::QCopRegisterChannel
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char *>(&simpleData)
argument_list|)
block|{}
DECL|function|setData
name|void
name|setData
argument_list|(
argument|const char *d
argument_list|,
argument|int len
argument_list|,
argument|bool allocateMem
argument_list|)
block|{
name|QWSCommand
operator|::
name|setData
argument_list|(
name|d
argument_list|,
name|len
argument_list|,
name|allocateMem
argument_list|)
block|;
if|if
condition|(
name|simpleData
operator|.
name|chLen
operator|>
name|MAX_COMMAND_SIZE
condition|)
block|{
name|qWarning
argument_list|(
literal|"Command channel name too large!"
argument_list|)
expr_stmt|;
name|simpleData
operator|.
name|chLen
operator|=
name|MAX_COMMAND_SIZE
expr_stmt|;
block|}
if|if
condition|(
name|simpleData
operator|.
name|chLen
operator|*
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
operator|>
name|len
condition|)
block|{
name|qWarning
argument_list|(
literal|"register qcop channel command - channel name length %d - buffer size %d - buffer overrun!"
argument_list|,
name|simpleData
operator|.
name|chLen
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|channel
operator|=
name|QString
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|QChar
operator|*
operator|>
operator|(
name|d
operator|)
argument_list|,
name|simpleData
operator|.
name|chLen
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|setChannel
name|void
name|setChannel
argument_list|(
argument|const QString& n
argument_list|)
block|{
name|channel
operator|=
name|n
block|;
name|simpleData
operator|.
name|chLen
operator|=
name|channel
operator|.
name|length
argument_list|()
block|;
name|setData
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|channel
operator|.
name|unicode
argument_list|()
operator|)
argument_list|,
name|simpleData
operator|.
name|chLen
operator|*
literal|2
argument_list|,
name|true
argument_list|)
block|;     }
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|chLen
name|int
name|chLen
block|;     }
DECL|member|simpleData
name|simpleData
block|;
DECL|member|channel
name|QString
name|channel
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSQCopSendCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSQCopSendCommand
name|QWSQCopSendCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::QCopSend
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char *>(&simpleData)
argument_list|)
block|{}
DECL|function|setData
name|void
name|setData
argument_list|(
argument|const char *d
argument_list|,
argument|int len
argument_list|,
argument|bool allocateMem
argument_list|)
block|{
name|QWSCommand
operator|::
name|setData
argument_list|(
name|d
argument_list|,
name|len
argument_list|,
name|allocateMem
argument_list|)
block|;
if|if
condition|(
name|simpleData
operator|.
name|clen
operator|*
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
operator|+
name|simpleData
operator|.
name|mlen
operator|*
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
operator|+
name|simpleData
operator|.
name|dlen
operator|*
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|char
argument_list|)
argument_list|)
operator|>
name|len
condition|)
block|{
name|qWarning
argument_list|(
literal|"qcop send command - channel name length %d - message name length %d - data size %d - buffer size %d - buffer overrun!"
argument_list|,
name|simpleData
operator|.
name|clen
argument_list|,
name|simpleData
operator|.
name|mlen
argument_list|,
name|simpleData
operator|.
name|dlen
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QChar
modifier|*
name|cd
init|=
name|reinterpret_cast
operator|<
specifier|const
name|QChar
operator|*
operator|>
operator|(
name|d
operator|)
decl_stmt|;
name|channel
operator|=
name|QString
argument_list|(
name|cd
argument_list|,
name|simpleData
operator|.
name|clen
argument_list|)
expr_stmt|;
name|cd
operator|+=
name|simpleData
operator|.
name|clen
expr_stmt|;
name|message
operator|=
name|QString
argument_list|(
name|cd
argument_list|,
name|simpleData
operator|.
name|mlen
argument_list|)
expr_stmt|;
name|d
operator|+=
name|simpleData
operator|.
name|clen
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
operator|+
name|simpleData
operator|.
name|mlen
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
expr_stmt|;
name|data
operator|=
name|QByteArray
argument_list|(
name|d
argument_list|,
name|simpleData
operator|.
name|dlen
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|setMessage
name|void
name|setMessage
argument_list|(
argument|const QString&c
argument_list|,
argument|const QString&m
argument_list|,
argument|const QByteArray&data
argument_list|)
block|{
name|this
operator|->
name|channel
operator|=
name|c
block|;
name|this
operator|->
name|message
operator|=
name|m
block|;
name|this
operator|->
name|data
operator|=
name|data
block|;
name|simpleData
operator|.
name|clen
operator|=
name|c
operator|.
name|length
argument_list|()
block|;
name|simpleData
operator|.
name|mlen
operator|=
name|m
operator|.
name|length
argument_list|()
block|;
name|simpleData
operator|.
name|dlen
operator|=
name|data
operator|.
name|size
argument_list|()
block|;
name|int
name|l
operator|=
name|simpleData
operator|.
name|clen
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
block|;
name|l
operator|+=
name|simpleData
operator|.
name|mlen
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
block|;
name|l
operator|+=
name|simpleData
operator|.
name|dlen
block|;
name|char
operator|*
name|tmp
operator|=
name|new
name|char
index|[
name|l
index|]
block|;
name|char
operator|*
name|d
operator|=
name|tmp
block|;
name|memcpy
argument_list|(
name|d
argument_list|,
name|c
operator|.
name|unicode
argument_list|()
argument_list|,
name|simpleData
operator|.
name|clen
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
block|;
name|d
operator|+=
name|simpleData
operator|.
name|clen
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
block|;
name|memcpy
argument_list|(
name|d
argument_list|,
name|m
operator|.
name|unicode
argument_list|()
argument_list|,
name|simpleData
operator|.
name|mlen
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
block|;
name|d
operator|+=
name|simpleData
operator|.
name|mlen
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
block|;
name|memcpy
argument_list|(
name|d
argument_list|,
name|data
operator|.
name|data
argument_list|()
argument_list|,
name|simpleData
operator|.
name|dlen
argument_list|)
block|;
name|QWSCommand
operator|::
name|setData
argument_list|(
name|tmp
argument_list|,
name|l
argument_list|,
name|false
argument_list|)
block|;
name|deleteRaw
operator|=
name|true
block|;     }
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|clen
name|int
name|clen
block|;
DECL|member|mlen
name|int
name|mlen
block|;
DECL|member|dlen
name|int
name|dlen
block|;     }
DECL|member|simpleData
name|simpleData
block|;
DECL|member|channel
name|QString
name|channel
block|;
DECL|member|message
name|QString
name|message
block|;
DECL|member|data
name|QByteArray
name|data
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_INPUTMETHODS
end_ifndef
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSIMMouseCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSIMMouseCommand
name|QWSIMMouseCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::IMMouse
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char *>(&simpleData)
argument_list|)
block|{}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|windowid
name|int
name|windowid
block|;
DECL|member|state
name|int
name|state
block|;
DECL|member|index
name|int
name|index
block|;     }
DECL|member|simpleData
name|simpleData
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSIMResponseCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSIMResponseCommand
name|QWSIMResponseCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::IMResponse
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char *>(&simpleData)
argument_list|)
block|{}
DECL|function|setData
name|void
name|setData
argument_list|(
argument|const char *d
argument_list|,
argument|int len
argument_list|,
argument|bool allocateMem
argument_list|)
block|{
name|QWSCommand
operator|::
name|setData
argument_list|(
name|d
argument_list|,
name|len
argument_list|,
name|allocateMem
argument_list|)
block|;
name|QByteArray
name|tmp
operator|=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|d
argument_list|,
name|len
argument_list|)
block|;
name|QDataStream
name|s
argument_list|(
name|tmp
argument_list|)
block|;
name|s
operator|>>
name|result
block|;     }
DECL|function|setResult
name|void
name|setResult
argument_list|(
argument|const QVariant& v
argument_list|)
block|{
name|QByteArray
name|tmp
block|;
name|QDataStream
name|s
argument_list|(
operator|&
name|tmp
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
block|;
name|s
operator|<<
name|v
block|;
name|setData
argument_list|(
name|tmp
operator|.
name|data
argument_list|()
argument_list|,
name|tmp
operator|.
name|size
argument_list|()
argument_list|,
name|true
argument_list|)
block|;     }
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|windowid
name|int
name|windowid
block|;
DECL|member|property
name|int
name|property
block|;     }
DECL|member|simpleData
name|simpleData
block|;
DECL|member|result
name|QVariant
name|result
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSIMUpdateCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSIMUpdateCommand
name|QWSIMUpdateCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::IMUpdate
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char *>(&simpleData)
argument_list|)
block|{}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|windowid
name|int
name|windowid
block|;
DECL|member|type
name|int
name|type
block|;
DECL|member|widgetid
name|int
name|widgetid
block|;     }
DECL|member|simpleData
name|simpleData
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWSEMBEDWIDGET
end_ifndef
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSEmbedCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSEmbedCommand
name|QWSEmbedCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::Embed
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
DECL|function|setData
name|void
name|setData
argument_list|(
argument|const char *d
argument_list|,
argument|int len
argument_list|,
argument|bool allocateMem = true
argument_list|)
block|{
name|QWSCommand
operator|::
name|setData
argument_list|(
name|d
argument_list|,
name|len
argument_list|,
name|allocateMem
argument_list|)
block|;
if|if
condition|(
name|simpleData
operator|.
name|rects
operator|*
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|QRect
argument_list|)
argument_list|)
operator|>
name|len
condition|)
block|{
name|qWarning
argument_list|(
literal|"embed command - region rectangle count %d - buffer size %d - buffer overrun!"
argument_list|,
name|simpleData
operator|.
name|rects
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|region
operator|.
name|setRects
argument_list|(
name|reinterpret_cast
operator|<
name|QRect
operator|*
operator|>
operator|(
name|rawDataPtr
operator|)
argument_list|,
name|simpleData
operator|.
name|rects
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|setData
name|void
name|setData
argument_list|(
argument|WId embedder
argument_list|,
argument|WId embedded
argument_list|,
argument|QWSEmbedEvent::Type type
argument_list|,
argument|const QRegion reg = QRegion()
argument_list|)
block|{
name|simpleData
operator|.
name|embedder
operator|=
name|embedder
block|;
name|simpleData
operator|.
name|embedded
operator|=
name|embedded
block|;
name|simpleData
operator|.
name|type
operator|=
name|type
block|;
name|region
operator|=
name|reg
block|;
specifier|const
name|QVector
operator|<
name|QRect
operator|>
name|rects
operator|=
name|reg
operator|.
name|rects
argument_list|()
block|;
name|simpleData
operator|.
name|rects
operator|=
name|rects
operator|.
name|count
argument_list|()
block|;
name|QWSCommand
operator|::
name|setData
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|rects
operator|.
name|constData
argument_list|()
operator|)
argument_list|,
name|rects
operator|.
name|count
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|QRect
argument_list|)
argument_list|)
block|;     }
expr|struct
block|{
DECL|member|embedder
name|WId
name|embedder
block|;
DECL|member|embedded
name|WId
name|embedded
block|;
DECL|member|type
name|QWSEmbedEvent
operator|::
name|Type
name|type
block|;
DECL|member|rects
name|int
name|rects
block|;     }
DECL|member|simpleData
name|simpleData
block|;
DECL|member|region
name|QRegion
name|region
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWSEMBEDWIDGET
end_comment
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSFontCommand
range|:
name|public
name|QWSCommand
block|{     enum
DECL|enum|CommandType
name|CommandType
block|{
DECL|enumerator|StartedUsingFont
name|StartedUsingFont
block|,
DECL|enumerator|StoppedUsingFont
name|StoppedUsingFont
block|}
block|;
DECL|function|QWSFontCommand
name|QWSFontCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::Font
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char *>(&simpleData)
argument_list|)
block|{}
DECL|function|setData
name|void
name|setData
argument_list|(
argument|const char *d
argument_list|,
argument|int len
argument_list|,
argument|bool allocateMem
argument_list|)
block|{
name|QWSCommand
operator|::
name|setData
argument_list|(
name|d
argument_list|,
name|len
argument_list|,
name|allocateMem
argument_list|)
block|;
name|fontName
operator|=
name|QByteArray
argument_list|(
name|d
argument_list|,
name|len
argument_list|)
block|;     }
DECL|function|setFontName
name|void
name|setFontName
argument_list|(
argument|const QByteArray&name
argument_list|)
block|{
name|setData
argument_list|(
name|name
operator|.
name|constData
argument_list|()
argument_list|,
name|name
operator|.
name|size
argument_list|()
argument_list|,
name|true
argument_list|)
block|;     }
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|type
name|int
name|type
block|;     }
DECL|member|simpleData
name|simpleData
block|;
DECL|member|fontName
name|QByteArray
name|fontName
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSCommand
name|struct
name|QWSScreenTransformCommand
range|:
name|public
name|QWSCommand
block|{
DECL|function|QWSScreenTransformCommand
name|QWSScreenTransformCommand
argument_list|()
operator|:
name|QWSCommand
argument_list|(
argument|QWSCommand::ScreenTransform
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char *>(&simpleData)
argument_list|)
block|{}
DECL|function|setTransformation
name|void
name|setTransformation
argument_list|(
argument|int screen
argument_list|,
argument|int transformation
argument_list|)
block|{
name|simpleData
operator|.
name|screen
operator|=
name|screen
block|;
name|simpleData
operator|.
name|transformation
operator|=
name|transformation
block|;     }
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|screen
name|int
name|screen
block|;
DECL|member|transformation
name|int
name|transformation
block|;     }
DECL|member|simpleData
name|simpleData
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QWSCOMMAND_QWS_P_H
end_comment
end_unit
