begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qwidget.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qdrawutil.h>
end_include
begin_include
include|#
directive|include
file|"qdecorationwindows_qws.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_QWS_DECORATION_WINDOWS
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_PLUGIN
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_IMAGEFORMAT_XPM
comment|/* XPM */
DECL|variable|win_close_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|win_close_xpm
index|[]
init|=
block|{
literal|"16 16 4 1"
block|,
literal|"  s None  c None"
block|,
literal|". c #000000"
block|,
literal|"X c #FFFFFF"
block|,
literal|"Y c #707070"
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"   Y.      .Y   "
block|,
literal|"    ..    ..    "
block|,
literal|"     ..  ..     "
block|,
literal|"      .YY.      "
block|,
literal|"      Y..Y      "
block|,
literal|"      .YY.      "
block|,
literal|"     ..  ..     "
block|,
literal|"    ..    ..    "
block|,
literal|"   Y.      .Y   "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|win_help_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|win_help_xpm
index|[]
init|=
block|{
literal|"16 16 3 1"
block|,
literal|"       s None  c None"
block|,
literal|".      c #ffffff"
block|,
literal|"X      c #000000"
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"     XXXXXX     "
block|,
literal|"    XX    XX    "
block|,
literal|"    XX    XX    "
block|,
literal|"          XX    "
block|,
literal|"         XX     "
block|,
literal|"       XX       "
block|,
literal|"       XX       "
block|,
literal|"                "
block|,
literal|"       XX       "
block|,
literal|"       XX       "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|win_maximize_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|win_maximize_xpm
index|[]
init|=
block|{
literal|"16 16 4 1"
block|,
literal|"  s None  c None"
block|,
literal|". c #000000"
block|,
literal|"X c #FFFFFF"
block|,
literal|"Y c #707070"
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"   ..........   "
block|,
literal|"   ..........   "
block|,
literal|"   .        .   "
block|,
literal|"   .        .   "
block|,
literal|"   .        .   "
block|,
literal|"   .        .   "
block|,
literal|"   .        .   "
block|,
literal|"   .        .   "
block|,
literal|"   ..........   "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|win_minimize_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|win_minimize_xpm
index|[]
init|=
block|{
literal|"16 16 4 1"
block|,
literal|"  s None  c None"
block|,
literal|". c #000000"
block|,
literal|"X c #FFFFFF"
block|,
literal|"Y c #707070"
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"    ........    "
block|,
literal|"    ........    "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|win_normalize_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|win_normalize_xpm
index|[]
init|=
block|{
literal|"16 16 4 1"
block|,
literal|"  s None  c None"
block|,
literal|". c #000000"
block|,
literal|"X c #FFFFFF"
block|,
literal|"Y c #707070"
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"     .........  "
block|,
literal|"     .........  "
block|,
literal|"     .       .  "
block|,
literal|"     .       .  "
block|,
literal|"  .........  .  "
block|,
literal|"  .........  .  "
block|,
literal|"  .       .  .  "
block|,
literal|"  .       ....  "
block|,
literal|"  .       .     "
block|,
literal|"  .       .     "
block|,
literal|"  .........     "
block|,
literal|"                "
block|,
literal|"                "
block|,
literal|"                "
block|}
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_IMAGEFORMAT_XPM
end_comment
begin_constructor
DECL|function|QDecorationWindows
name|QDecorationWindows
operator|::
name|QDecorationWindows
parameter_list|()
member_init_list|:
name|QDecorationDefault
argument_list|()
block|{
name|menu_width
operator|=
literal|16
expr_stmt|;
name|help_width
operator|=
literal|18
expr_stmt|;
name|minimize_width
operator|=
literal|18
expr_stmt|;
name|maximize_width
operator|=
literal|18
expr_stmt|;
name|close_width
operator|=
literal|18
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QDecorationWindows
name|QDecorationWindows
operator|::
name|~
name|QDecorationWindows
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|xpmForRegion
specifier|const
name|char
modifier|*
modifier|*
name|QDecorationWindows
operator|::
name|xpmForRegion
parameter_list|(
name|int
name|reg
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_IMAGEFORMAT_XPM
name|Q_UNUSED
argument_list|(
name|reg
argument_list|)
expr_stmt|;
else|#
directive|else
switch|switch
condition|(
name|reg
condition|)
block|{
case|case
name|Close
case|:
return|return
operator|(
specifier|const
name|char
operator|*
operator|*
operator|)
name|win_close_xpm
return|;
case|case
name|Help
case|:
return|return
operator|(
specifier|const
name|char
operator|*
operator|*
operator|)
name|win_help_xpm
return|;
case|case
name|Minimize
case|:
return|return
operator|(
specifier|const
name|char
operator|*
operator|*
operator|)
name|win_minimize_xpm
return|;
case|case
name|Maximize
case|:
return|return
operator|(
specifier|const
name|char
operator|*
operator|*
operator|)
name|win_maximize_xpm
return|;
case|case
name|Normalize
case|:
return|return
operator|(
specifier|const
name|char
operator|*
operator|*
operator|)
name|win_normalize_xpm
return|;
default|default:
return|return
name|QDecorationDefault
operator|::
name|xpmForRegion
argument_list|(
name|reg
argument_list|)
return|;
block|}
endif|#
directive|endif
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|region
name|QRegion
name|QDecorationWindows
operator|::
name|region
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|int
name|type
parameter_list|)
block|{
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|widget
operator|->
name|windowFlags
argument_list|()
decl_stmt|;
name|bool
name|hasTitle
init|=
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
decl_stmt|;
name|bool
name|hasSysMenu
init|=
name|flags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
decl_stmt|;
name|bool
name|hasContextHelp
init|=
name|flags
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
decl_stmt|;
name|bool
name|hasMinimize
init|=
name|flags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
decl_stmt|;
name|bool
name|hasMaximize
init|=
name|flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
decl_stmt|;
specifier|const
name|QFontMetrics
name|fontMetrics
init|=
name|QApplication
operator|::
name|fontMetrics
argument_list|()
decl_stmt|;
name|int
name|titleHeight
init|=
name|hasTitle
condition|?
name|qMax
argument_list|(
literal|20
argument_list|,
name|fontMetrics
operator|.
name|height
argument_list|()
argument_list|)
else|:
literal|0
decl_stmt|;
name|int
name|state
init|=
name|widget
operator|->
name|windowState
argument_list|()
decl_stmt|;
name|bool
name|isMinimized
init|=
name|state
operator|&
name|Qt
operator|::
name|WindowMinimized
decl_stmt|;
name|bool
name|isMaximized
init|=
name|state
operator|&
name|Qt
operator|::
name|WindowMaximized
decl_stmt|;
name|QRegion
name|region
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Menu
case|:
block|{
if|if
condition|(
name|hasSysMenu
condition|)
block|{
name|region
operator|=
name|QRect
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|+
literal|2
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|titleHeight
argument_list|,
name|menu_width
argument_list|,
name|titleHeight
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|Title
case|:
block|{
name|QRect
name|r
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|+
operator|(
name|hasSysMenu
condition|?
name|menu_width
operator|+
literal|4
else|:
literal|0
operator|)
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|titleHeight
argument_list|,
name|rect
operator|.
name|width
argument_list|()
operator|-
operator|(
name|hasSysMenu
condition|?
name|menu_width
else|:
literal|0
operator|)
operator|-
name|close_width
operator|-
operator|(
name|hasMaximize
condition|?
name|maximize_width
else|:
literal|0
operator|)
operator|-
operator|(
name|hasMinimize
condition|?
name|minimize_width
else|:
literal|0
operator|)
operator|-
operator|(
name|hasContextHelp
condition|?
name|help_width
else|:
literal|0
operator|)
operator|-
literal|3
argument_list|,
name|titleHeight
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|width
argument_list|()
operator|>
literal|0
condition|)
name|region
operator|=
name|r
expr_stmt|;
block|}
break|break;
case|case
name|Help
case|:
block|{
if|if
condition|(
name|hasContextHelp
condition|)
block|{
name|QRect
name|r
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|-
name|close_width
operator|-
operator|(
name|hasMaximize
condition|?
name|maximize_width
else|:
literal|0
operator|)
operator|-
operator|(
name|hasMinimize
condition|?
name|minimize_width
else|:
literal|0
operator|)
operator|-
name|help_width
operator|-
literal|3
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|titleHeight
argument_list|,
name|help_width
argument_list|,
name|titleHeight
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|left
argument_list|()
operator|>
name|rect
operator|.
name|left
argument_list|()
operator|+
name|titleHeight
condition|)
name|region
operator|=
name|r
expr_stmt|;
block|}
block|}
break|break;
case|case
name|Minimize
case|:
block|{
if|if
condition|(
name|hasMinimize
operator|&&
operator|!
name|isMinimized
condition|)
block|{
name|QRect
name|r
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|-
name|close_width
operator|-
operator|(
name|hasMaximize
condition|?
name|maximize_width
else|:
literal|0
operator|)
operator|-
name|minimize_width
operator|-
literal|3
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|titleHeight
argument_list|,
name|minimize_width
argument_list|,
name|titleHeight
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|left
argument_list|()
operator|>
name|rect
operator|.
name|left
argument_list|()
operator|+
name|titleHeight
condition|)
name|region
operator|=
name|r
expr_stmt|;
block|}
block|}
break|break;
case|case
name|Maximize
case|:
block|{
if|if
condition|(
name|hasMaximize
operator|&&
operator|!
name|isMaximized
condition|)
block|{
name|QRect
name|r
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|-
name|close_width
operator|-
name|maximize_width
operator|-
literal|3
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|titleHeight
argument_list|,
name|maximize_width
argument_list|,
name|titleHeight
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|left
argument_list|()
operator|>
name|rect
operator|.
name|left
argument_list|()
operator|+
name|titleHeight
condition|)
name|region
operator|=
name|r
expr_stmt|;
block|}
block|}
break|break;
case|case
name|Normalize
case|:
block|{
if|if
condition|(
name|hasMinimize
operator|&&
name|isMinimized
condition|)
block|{
name|QRect
name|r
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|-
name|close_width
operator|-
operator|(
name|hasMaximize
condition|?
name|maximize_width
else|:
literal|0
operator|)
operator|-
name|minimize_width
operator|-
literal|3
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|titleHeight
argument_list|,
name|minimize_width
argument_list|,
name|titleHeight
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|left
argument_list|()
operator|>
name|rect
operator|.
name|left
argument_list|()
operator|+
name|titleHeight
condition|)
name|region
operator|=
name|r
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hasMaximize
operator|&&
name|isMaximized
condition|)
block|{
name|QRect
name|r
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|-
name|close_width
operator|-
name|maximize_width
operator|-
literal|3
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|titleHeight
argument_list|,
name|maximize_width
argument_list|,
name|titleHeight
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|left
argument_list|()
operator|>
name|rect
operator|.
name|left
argument_list|()
operator|+
name|titleHeight
condition|)
name|region
operator|=
name|r
expr_stmt|;
block|}
block|}
break|break;
case|case
name|Close
case|:
block|{
name|QRect
name|r
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|-
name|close_width
operator|-
literal|1
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|titleHeight
argument_list|,
name|close_width
argument_list|,
name|titleHeight
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|left
argument_list|()
operator|>
name|rect
operator|.
name|left
argument_list|()
operator|+
name|titleHeight
condition|)
name|region
operator|=
name|r
expr_stmt|;
block|}
break|break;
default|default:
name|region
operator|=
name|QDecorationDefault
operator|::
name|region
argument_list|(
name|widget
argument_list|,
name|rect
argument_list|,
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|region
return|;
block|}
end_function
begin_function
DECL|function|paint
name|bool
name|QDecorationWindows
operator|::
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|int
name|decorationRegion
parameter_list|,
name|DecorationState
name|state
parameter_list|)
block|{
if|if
condition|(
name|decorationRegion
operator|==
name|None
condition|)
return|return
literal|false
return|;
specifier|const
name|QRect
name|titleRect
init|=
name|QDecoration
operator|::
name|region
argument_list|(
name|widget
argument_list|,
name|Title
argument_list|)
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
specifier|const
name|QPalette
name|pal
init|=
name|QApplication
operator|::
name|palette
argument_list|()
decl_stmt|;
name|QRegion
name|oldClipRegion
init|=
name|painter
operator|->
name|clipRegion
argument_list|()
decl_stmt|;
name|bool
name|paintAll
init|=
operator|(
name|decorationRegion
operator|==
name|int
argument_list|(
name|All
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|paintAll
operator|||
name|decorationRegion
operator|&
name|Title
operator|&&
name|titleRect
operator|.
name|width
argument_list|()
operator|>
literal|0
operator|)
operator|&&
name|state
operator|==
name|Normal
operator|&&
operator|(
name|widget
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowTitleHint
operator|)
condition|)
block|{
name|painter
operator|->
name|setClipRegion
argument_list|(
name|oldClipRegion
argument_list|)
expr_stmt|;
name|QColor
name|fromBrush
decl_stmt|,
name|toBrush
decl_stmt|;
name|QPen
name|titlePen
decl_stmt|;
if|if
condition|(
name|widget
operator|==
name|qApp
operator|->
name|activeWindow
argument_list|()
operator|||
name|qApp
operator|->
name|activeWindow
argument_list|()
operator|==
name|qApp
operator|->
name|activePopupWidget
argument_list|()
condition|)
block|{
name|fromBrush
operator|=
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|)
expr_stmt|;
name|titlePen
operator|=
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fromBrush
operator|=
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
expr_stmt|;
name|titlePen
operator|=
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|)
expr_stmt|;
block|}
name|toBrush
operator|=
name|fromBrush
operator|.
name|lighter
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|QPoint
name|p1
argument_list|(
name|titleRect
operator|.
name|x
argument_list|()
argument_list|,
name|titleRect
operator|.
name|y
argument_list|()
operator|+
name|titleRect
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
name|QPoint
name|p2
argument_list|(
name|titleRect
operator|.
name|right
argument_list|()
argument_list|,
name|titleRect
operator|.
name|y
argument_list|()
operator|+
name|titleRect
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
name|QLinearGradient
name|lg
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
decl_stmt|;
name|lg
operator|.
name|setColorAt
argument_list|(
literal|0
argument_list|,
name|fromBrush
argument_list|)
expr_stmt|;
name|lg
operator|.
name|setColorAt
argument_list|(
literal|1
argument_list|,
name|toBrush
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|titleRect
argument_list|,
name|lg
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|titlePen
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawText
argument_list|(
name|titleRect
argument_list|,
name|Qt
operator|::
name|AlignVCenter
argument_list|,
name|windowTitleFor
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
name|decorationRegion
operator|^=
name|Title
expr_stmt|;
block|}
return|return
name|QDecorationDefault
operator|::
name|paint
argument_list|(
name|painter
argument_list|,
name|widget
argument_list|,
name|decorationRegion
argument_list|,
name|state
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|paintButton
name|void
name|QDecorationWindows
operator|::
name|paintButton
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|int
name|buttonRegion
parameter_list|,
name|DecorationState
name|state
parameter_list|,
specifier|const
name|QPalette
modifier|&
name|pal
parameter_list|)
block|{
name|QBrush
name|fromBrush
decl_stmt|,
name|toBrush
decl_stmt|;
name|QPen
name|titlePen
decl_stmt|;
if|if
condition|(
name|widget
operator|==
name|qApp
operator|->
name|activeWindow
argument_list|()
operator|||
name|qApp
operator|->
name|activeWindow
argument_list|()
operator|==
name|qApp
operator|->
name|activePopupWidget
argument_list|()
condition|)
block|{
name|fromBrush
operator|=
name|pal
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|)
expr_stmt|;
name|titlePen
operator|=
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fromBrush
operator|=
name|pal
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
expr_stmt|;
name|titlePen
operator|=
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|)
expr_stmt|;
block|}
name|toBrush
operator|=
name|fromBrush
operator|.
name|color
argument_list|()
operator|.
name|lighter
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|QRect
name|brect
argument_list|(
name|QDecoration
operator|::
name|region
argument_list|(
name|widget
argument_list|,
name|buttonRegion
argument_list|)
operator|.
name|boundingRect
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|buttonRegion
operator|!=
name|Close
operator|&&
name|buttonRegion
operator|!=
name|Menu
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|brect
argument_list|,
name|toBrush
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|fillRect
argument_list|(
name|brect
operator|.
name|x
argument_list|()
operator|-
literal|2
argument_list|,
name|brect
operator|.
name|y
argument_list|()
argument_list|,
name|brect
operator|.
name|width
argument_list|()
operator|+
literal|4
argument_list|,
name|brect
operator|.
name|height
argument_list|()
argument_list|,
name|buttonRegion
operator|==
name|Menu
condition|?
name|fromBrush
else|:
name|toBrush
argument_list|)
expr_stmt|;
name|int
name|xoff
init|=
literal|1
decl_stmt|;
name|int
name|yoff
init|=
literal|2
decl_stmt|;
specifier|const
name|QPixmap
name|pm
init|=
name|pixmapFor
argument_list|(
name|widget
argument_list|,
name|buttonRegion
argument_list|,
name|xoff
argument_list|,
name|yoff
argument_list|)
decl_stmt|;
if|if
condition|(
name|buttonRegion
operator|!=
name|Menu
condition|)
block|{
if|if
condition|(
name|state
operator|&
name|Normal
condition|)
block|{
name|qDrawWinPanel
argument_list|(
name|painter
argument_list|,
name|brect
operator|.
name|x
argument_list|()
argument_list|,
name|brect
operator|.
name|y
argument_list|()
operator|+
literal|2
argument_list|,
name|brect
operator|.
name|width
argument_list|()
argument_list|,
name|brect
operator|.
name|height
argument_list|()
operator|-
literal|4
argument_list|,
name|pal
argument_list|,
literal|false
argument_list|,
operator|&
name|pal
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|&
name|Pressed
condition|)
block|{
name|qDrawWinPanel
argument_list|(
name|painter
argument_list|,
name|brect
operator|.
name|x
argument_list|()
argument_list|,
name|brect
operator|.
name|y
argument_list|()
operator|+
literal|2
argument_list|,
name|brect
operator|.
name|width
argument_list|()
argument_list|,
name|brect
operator|.
name|height
argument_list|()
operator|-
literal|4
argument_list|,
name|pal
argument_list|,
literal|true
argument_list|,
operator|&
name|pal
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|xoff
expr_stmt|;
operator|++
name|yoff
expr_stmt|;
block|}
block|}
else|else
block|{
name|xoff
operator|=
literal|0
expr_stmt|;
name|yoff
operator|=
literal|2
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|pm
operator|.
name|isNull
argument_list|()
condition|)
name|painter
operator|->
name|drawPixmap
argument_list|(
name|brect
operator|.
name|x
argument_list|()
operator|+
name|xoff
argument_list|,
name|brect
operator|.
name|y
argument_list|()
operator|+
name|yoff
argument_list|,
name|pm
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_DECORATION_WINDOWS || QT_PLUGIN
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
