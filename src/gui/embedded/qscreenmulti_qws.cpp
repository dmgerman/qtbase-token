begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qscreenmulti_qws_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_MULTISCREEN
end_ifndef
begin_include
include|#
directive|include
file|<qlist.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qwidget.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
end_ifndef
begin_class
DECL|class|QMultiScreenCursor
class|class
name|QMultiScreenCursor
super|:
specifier|public
name|QScreenCursor
block|{
public|public:
DECL|function|QMultiScreenCursor
name|QMultiScreenCursor
parameter_list|()
member_init_list|:
name|currentCursor
argument_list|(
name|qt_screencursor
argument_list|)
block|{
name|enable
operator|=
literal|false
expr_stmt|;
block|}
DECL|function|~QMultiScreenCursor
name|~
name|QMultiScreenCursor
parameter_list|()
block|{
name|qt_screencursor
operator|=
literal|0
expr_stmt|;
block|}
name|void
name|set
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|int
name|hotx
parameter_list|,
name|int
name|hoty
parameter_list|)
function_decl|;
name|void
name|move
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
name|void
name|show
parameter_list|()
function_decl|;
name|void
name|hide
parameter_list|()
function_decl|;
name|void
name|addCursor
parameter_list|(
name|QScreenCursor
modifier|*
name|cursor
parameter_list|)
function_decl|;
private|private:
name|void
name|setCurrentCursor
parameter_list|(
name|QScreenCursor
modifier|*
name|newCursor
parameter_list|)
function_decl|;
DECL|member|currentCursor
name|QScreenCursor
modifier|*
name|currentCursor
decl_stmt|;
DECL|member|cursors
name|QList
argument_list|<
name|QScreenCursor
modifier|*
argument_list|>
name|cursors
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|set
name|void
name|QMultiScreenCursor
operator|::
name|set
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|int
name|hotx
parameter_list|,
name|int
name|hoty
parameter_list|)
block|{
name|QScreenCursor
operator|::
name|set
argument_list|(
name|image
argument_list|,
name|hotx
argument_list|,
name|hoty
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentCursor
condition|)
name|currentCursor
operator|->
name|set
argument_list|(
name|image
argument_list|,
name|hotx
argument_list|,
name|hoty
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCurrentCursor
name|void
name|QMultiScreenCursor
operator|::
name|setCurrentCursor
parameter_list|(
name|QScreenCursor
modifier|*
name|newCursor
parameter_list|)
block|{
operator|*
operator|(
operator|(
name|QScreenCursor
operator|*
operator|)
name|this
operator|)
operator|=
operator|*
name|newCursor
expr_stmt|;
name|currentCursor
operator|=
name|newCursor
expr_stmt|;
block|}
end_function
begin_comment
comment|// XXX: this is a mess!
end_comment
begin_function
DECL|function|move
name|void
name|QMultiScreenCursor
operator|::
name|move
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
specifier|const
name|int
name|oldIndex
init|=
name|qt_screen
operator|->
name|subScreenIndexAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|QScreenCursor
operator|::
name|move
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
comment|// updates pos
specifier|const
name|int
name|newIndex
init|=
name|qt_screen
operator|->
name|subScreenIndexAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|currentCursor
operator|&&
name|oldIndex
operator|!=
operator|-
literal|1
condition|)
name|setCurrentCursor
argument_list|(
name|cursors
operator|.
name|at
argument_list|(
name|oldIndex
argument_list|)
argument_list|)
expr_stmt|;
name|QScreenCursor
modifier|*
name|oldCursor
init|=
name|currentCursor
decl_stmt|;
if|if
condition|(
name|oldIndex
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|const
name|QScreen
modifier|*
name|oldScreen
init|=
name|qt_screen
operator|->
name|subScreens
argument_list|()
operator|.
name|at
argument_list|(
name|oldIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|newIndex
operator|==
operator|-
literal|1
operator|||
name|oldScreen
operator|->
name|region
argument_list|()
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
condition|)
block|{
name|oldCursor
operator|->
name|move
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|newIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|QScreenCursor
modifier|*
name|newCursor
init|=
name|cursors
operator|.
name|at
argument_list|(
name|newIndex
argument_list|)
decl_stmt|;
name|newCursor
operator|->
name|set
argument_list|(
name|cursor
argument_list|,
name|hotspot
operator|.
name|x
argument_list|()
argument_list|,
name|hotspot
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldCursor
condition|)
block|{
if|if
condition|(
name|oldCursor
operator|->
name|isVisible
argument_list|()
condition|)
name|newCursor
operator|->
name|show
argument_list|()
expr_stmt|;
name|oldCursor
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
name|newCursor
operator|->
name|move
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|setCurrentCursor
argument_list|(
name|newCursor
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|show
name|void
name|QMultiScreenCursor
operator|::
name|show
parameter_list|()
block|{
if|if
condition|(
name|currentCursor
condition|)
name|currentCursor
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hide
name|void
name|QMultiScreenCursor
operator|::
name|hide
parameter_list|()
block|{
if|if
condition|(
name|currentCursor
condition|)
name|currentCursor
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addCursor
name|void
name|QMultiScreenCursor
operator|::
name|addCursor
parameter_list|(
name|QScreenCursor
modifier|*
name|cursor
parameter_list|)
block|{
name|cursors
operator|.
name|append
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|QMultiScreenPrivate
class|class
name|QMultiScreenPrivate
block|{
public|public:
DECL|function|QMultiScreenPrivate
name|QMultiScreenPrivate
parameter_list|()
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
member_init_list|:
name|cursor
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
block|{}
DECL|function|~QMultiScreenPrivate
name|~
name|QMultiScreenPrivate
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
operator|delete
name|cursor
expr_stmt|;
endif|#
directive|endif
block|}
DECL|member|screens
name|QList
argument_list|<
name|QScreen
modifier|*
argument_list|>
name|screens
decl_stmt|;
DECL|member|region
name|QRegion
name|region
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
DECL|member|cursor
name|QMultiScreenCursor
modifier|*
name|cursor
decl_stmt|;
endif|#
directive|endif
block|}
class|;
end_class
begin_constructor
DECL|function|QMultiScreen
name|QMultiScreen
operator|::
name|QMultiScreen
parameter_list|(
name|int
name|displayId
parameter_list|)
member_init_list|:
name|QScreen
argument_list|(
name|displayId
argument_list|,
name|MultiClass
argument_list|)
member_init_list|,
name|d_ptr
argument_list|(
operator|new
name|QMultiScreenPrivate
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QMultiScreen
name|QMultiScreen
operator|::
name|~
name|QMultiScreen
parameter_list|()
block|{
operator|delete
name|d_ptr
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|initDevice
name|bool
name|QMultiScreen
operator|::
name|initDevice
parameter_list|()
block|{
name|bool
name|ok
init|=
literal|true
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
name|d_ptr
operator|->
name|cursor
operator|=
operator|new
name|QMultiScreenCursor
expr_stmt|;
endif|#
directive|endif
specifier|const
name|int
name|n
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|QScreen
modifier|*
name|s
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ok
operator|=
name|s
operator|->
name|initDevice
argument_list|()
operator|&&
name|ok
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
name|d_ptr
operator|->
name|cursor
operator|->
name|addCursor
argument_list|(
name|qt_screencursor
argument_list|)
expr_stmt|;
comment|// XXX
endif|#
directive|endif
block|}
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
comment|// XXX
name|qt_screencursor
operator|=
name|d_ptr
operator|->
name|cursor
expr_stmt|;
endif|#
directive|endif
return|return
name|ok
return|;
block|}
end_function
begin_function
DECL|function|getDisplayId
specifier|static
name|int
name|getDisplayId
parameter_list|(
specifier|const
name|QString
modifier|&
name|spec
parameter_list|)
block|{
name|QRegExp
name|regexp
argument_list|(
name|QLatin1String
argument_list|(
literal|":(\\d+)\\b"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|regexp
operator|.
name|lastIndexIn
argument_list|(
name|spec
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|const
name|QString
name|capture
init|=
name|regexp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
decl_stmt|;
return|return
name|capture
operator|.
name|toInt
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|filterDisplayOffset
specifier|static
name|QPoint
name|filterDisplayOffset
parameter_list|(
name|QString
modifier|&
name|spec
parameter_list|)
block|{
name|QRegExp
name|regexp
argument_list|(
name|QLatin1String
argument_list|(
literal|":offset=(\\d+),(\\d+)\\b"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|regexp
operator|.
name|indexIn
argument_list|(
name|spec
argument_list|)
operator|==
operator|-
literal|1
condition|)
return|return
name|QPoint
argument_list|()
return|;
specifier|const
name|int
name|x
init|=
name|regexp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
specifier|const
name|int
name|y
init|=
name|regexp
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|spec
operator|.
name|remove
argument_list|(
name|regexp
operator|.
name|pos
argument_list|(
literal|0
argument_list|)
argument_list|,
name|regexp
operator|.
name|matchedLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|connect
name|bool
name|QMultiScreen
operator|::
name|connect
parameter_list|(
specifier|const
name|QString
modifier|&
name|displaySpec
parameter_list|)
block|{
name|QString
name|dSpec
init|=
name|displaySpec
decl_stmt|;
if|if
condition|(
name|dSpec
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"Multi:"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|dSpec
operator|=
name|dSpec
operator|.
name|mid
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Multi:"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|displayIdSpec
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" :%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|displayId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dSpec
operator|.
name|endsWith
argument_list|(
name|displayIdSpec
argument_list|)
condition|)
name|dSpec
operator|=
name|dSpec
operator|.
name|left
argument_list|(
name|dSpec
operator|.
name|size
argument_list|()
operator|-
name|displayIdSpec
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QStringList
name|specs
init|=
name|dSpec
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QString
name|spec
decl|,
name|specs
control|)
block|{
specifier|const
name|int
name|id
init|=
name|getDisplayId
argument_list|(
name|spec
argument_list|)
decl_stmt|;
if|if
condition|(
name|spec
operator|.
name|startsWith
argument_list|(
literal|"vnc:"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
name|spec
operator|.
name|append
argument_list|(
literal|":noDisablePainting"
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QPoint
name|offset
init|=
name|filterDisplayOffset
argument_list|(
name|spec
argument_list|)
decl_stmt|;
name|QScreen
modifier|*
name|s
init|=
name|qt_get_screen
argument_list|(
name|id
argument_list|,
name|spec
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|s
operator|->
name|setOffset
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|addSubScreen
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|QScreen
modifier|*
name|firstScreen
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|firstScreen
argument_list|)
expr_stmt|;
comment|// XXX
name|QScreen
operator|::
name|d
operator|=
name|firstScreen
operator|->
name|depth
argument_list|()
expr_stmt|;
name|QScreen
operator|::
name|lstep
operator|=
literal|0
expr_stmt|;
name|QScreen
operator|::
name|data
operator|=
literal|0
expr_stmt|;
name|QScreen
operator|::
name|size
operator|=
literal|0
expr_stmt|;
name|QScreen
operator|::
name|w
operator|=
name|d_ptr
operator|->
name|region
operator|.
name|boundingRect
argument_list|()
operator|.
name|width
argument_list|()
expr_stmt|;
name|QScreen
operator|::
name|h
operator|=
name|d_ptr
operator|->
name|region
operator|.
name|boundingRect
argument_list|()
operator|.
name|height
argument_list|()
expr_stmt|;
name|QScreen
operator|::
name|dw
operator|=
name|QScreen
operator|::
name|w
expr_stmt|;
name|QScreen
operator|::
name|dh
operator|=
name|QScreen
operator|::
name|h
expr_stmt|;
comment|// XXX - Extend the physical size based on the first screen
comment|// to encompass all screens, so that code that uses the multi
comment|// screen to calculate dpi values will get the right numbers.
name|QScreen
operator|::
name|physWidth
operator|=
name|firstScreen
operator|->
name|physicalWidth
argument_list|()
operator|*
name|w
operator|/
name|firstScreen
operator|->
name|width
argument_list|()
expr_stmt|;
name|QScreen
operator|::
name|physHeight
operator|=
name|firstScreen
operator|->
name|physicalHeight
argument_list|()
operator|*
name|h
operator|/
name|firstScreen
operator|->
name|height
argument_list|()
expr_stmt|;
comment|// XXXXX
name|qt_screen
operator|=
name|this
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|disconnect
name|void
name|QMultiScreen
operator|::
name|disconnect
parameter_list|()
block|{
specifier|const
name|int
name|n
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
name|d_ptr
operator|->
name|screens
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|disconnect
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|shutdownDevice
name|void
name|QMultiScreen
operator|::
name|shutdownDevice
parameter_list|()
block|{
specifier|const
name|int
name|n
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
name|d_ptr
operator|->
name|screens
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|shutdownDevice
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setMode
name|void
name|QMultiScreen
operator|::
name|setMode
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
block|{
return|return;
block|}
end_function
begin_function
DECL|function|supportsDepth
name|bool
name|QMultiScreen
operator|::
name|supportsDepth
parameter_list|(
name|int
parameter_list|)
specifier|const
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|save
name|void
name|QMultiScreen
operator|::
name|save
parameter_list|()
block|{
specifier|const
name|int
name|n
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
name|d_ptr
operator|->
name|screens
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|save
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|restore
name|void
name|QMultiScreen
operator|::
name|restore
parameter_list|()
block|{
specifier|const
name|int
name|n
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
name|d_ptr
operator|->
name|screens
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blank
name|void
name|QMultiScreen
operator|::
name|blank
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
specifier|const
name|int
name|n
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
name|d_ptr
operator|->
name|screens
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|blank
argument_list|(
name|on
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onCard
name|bool
name|QMultiScreen
operator|::
name|onCard
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|ptr
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|n
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|d_ptr
operator|->
name|screens
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|onCard
argument_list|(
name|ptr
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|onCard
name|bool
name|QMultiScreen
operator|::
name|onCard
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|ptr
parameter_list|,
name|ulong
modifier|&
name|offset
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|n
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|d_ptr
operator|->
name|screens
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|onCard
argument_list|(
name|ptr
argument_list|,
name|offset
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|isInterlaced
name|bool
name|QMultiScreen
operator|::
name|isInterlaced
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|n
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|d_ptr
operator|->
name|screens
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|isInterlaced
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|memoryNeeded
name|int
name|QMultiScreen
operator|::
name|memoryNeeded
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|)
block|{
name|int
name|total
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|n
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
name|total
operator|+=
name|d_ptr
operator|->
name|screens
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|memoryNeeded
argument_list|(
name|string
argument_list|)
expr_stmt|;
return|return
name|total
return|;
block|}
end_function
begin_function
DECL|function|sharedRamSize
name|int
name|QMultiScreen
operator|::
name|sharedRamSize
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|)
block|{
name|int
name|total
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|n
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
name|total
operator|+=
name|d_ptr
operator|->
name|screens
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|sharedRamSize
argument_list|(
name|arg
argument_list|)
expr_stmt|;
return|return
name|total
return|;
block|}
end_function
begin_function
DECL|function|haltUpdates
name|void
name|QMultiScreen
operator|::
name|haltUpdates
parameter_list|()
block|{
specifier|const
name|int
name|n
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
name|d_ptr
operator|->
name|screens
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|haltUpdates
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resumeUpdates
name|void
name|QMultiScreen
operator|::
name|resumeUpdates
parameter_list|()
block|{
specifier|const
name|int
name|n
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
name|d_ptr
operator|->
name|screens
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|resumeUpdates
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|exposeRegion
name|void
name|QMultiScreen
operator|::
name|exposeRegion
parameter_list|(
name|QRegion
name|region
parameter_list|,
name|int
name|changing
parameter_list|)
block|{
specifier|const
name|int
name|n
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|QScreen
modifier|*
name|screen
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QRegion
name|r
init|=
name|region
operator|&
name|screen
operator|->
name|region
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|screen
operator|->
name|exposeRegion
argument_list|(
name|r
argument_list|,
name|changing
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|solidFill
name|void
name|QMultiScreen
operator|::
name|solidFill
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
specifier|const
name|int
name|n
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|QScreen
modifier|*
name|screen
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QRegion
name|r
init|=
name|region
operator|&
name|screen
operator|->
name|region
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|screen
operator|->
name|solidFill
argument_list|(
name|color
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|blit
name|void
name|QMultiScreen
operator|::
name|blit
parameter_list|(
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
specifier|const
name|int
name|n
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|QScreen
modifier|*
name|screen
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QRegion
name|r
init|=
name|region
operator|&
name|screen
operator|->
name|region
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|screen
operator|->
name|blit
argument_list|(
name|img
argument_list|,
name|topLeft
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|blit
name|void
name|QMultiScreen
operator|::
name|blit
parameter_list|(
name|QWSWindow
modifier|*
name|bs
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|clip
parameter_list|)
block|{
specifier|const
name|int
name|n
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|QScreen
modifier|*
name|screen
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QRegion
name|r
init|=
name|clip
operator|&
name|screen
operator|->
name|region
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|screen
operator|->
name|blit
argument_list|(
name|bs
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setDirty
name|void
name|QMultiScreen
operator|::
name|setDirty
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
specifier|const
name|int
name|n
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|QScreen
modifier|*
name|screen
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QRegion
name|r
init|=
name|screen
operator|->
name|region
argument_list|()
operator|&
name|rect
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|screen
operator|->
name|setDirty
argument_list|(
name|r
operator|.
name|boundingRect
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|createSurface
name|QWSWindowSurface
modifier|*
name|QMultiScreen
operator|::
name|createSurface
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
specifier|const
block|{
name|QWSWindowSurface
modifier|*
name|surf
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|n
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|QScreen
modifier|*
name|screen
init|=
name|d_ptr
operator|->
name|screens
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|surf
operator|=
name|screen
operator|->
name|createSurface
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|surf
condition|)
break|break;
block|}
return|return
name|surf
return|;
block|}
end_function
begin_function
DECL|function|createSurface
name|QWSWindowSurface
modifier|*
name|QMultiScreen
operator|::
name|createSurface
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
specifier|const
name|QPoint
name|midpoint
init|=
operator|(
name|widget
operator|->
name|frameGeometry
argument_list|()
operator|.
name|topLeft
argument_list|()
operator|+
name|widget
operator|->
name|frameGeometry
argument_list|()
operator|.
name|bottomRight
argument_list|()
operator|)
operator|/
literal|2
decl_stmt|;
name|int
name|index
init|=
name|subScreenIndexAt
argument_list|(
name|midpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
name|index
operator|=
literal|0
expr_stmt|;
comment|// XXX
return|return
name|d_ptr
operator|->
name|screens
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|->
name|createSurface
argument_list|(
name|widget
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|subScreens
name|QList
argument_list|<
name|QScreen
modifier|*
argument_list|>
name|QMultiScreen
operator|::
name|subScreens
parameter_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|screens
return|;
block|}
end_function
begin_function
DECL|function|region
name|QRegion
name|QMultiScreen
operator|::
name|region
parameter_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|region
return|;
block|}
end_function
begin_function
DECL|function|addSubScreen
name|void
name|QMultiScreen
operator|::
name|addSubScreen
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|)
block|{
name|d_ptr
operator|->
name|screens
operator|.
name|append
argument_list|(
name|screen
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|region
operator|+=
name|screen
operator|->
name|region
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeSubScreen
name|void
name|QMultiScreen
operator|::
name|removeSubScreen
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|)
block|{
name|d_ptr
operator|->
name|screens
operator|.
name|removeAll
argument_list|(
name|screen
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|region
operator|-=
name|screen
operator|->
name|region
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_MULTISCREEN
end_comment
end_unit
