begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSCREEN_QWS_H
end_ifndef
begin_define
DECL|macro|QSCREEN_QWS_H
define|#
directive|define
name|QSCREEN_QWS_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qnamespace.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpoint.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qrgb.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qrect.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qimage.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qregion.h>
end_include
begin_struct_decl
struct_decl|struct
name|fb_cmap
struct_decl|;
end_struct_decl
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Gui
argument_list|)
name|class
name|QScreenCursor
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QBrush
name|class
name|QBrush
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWSWindow
name|class
name|QWSWindow
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWSWindowSurface
name|class
name|QWSWindowSurface
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QGraphicsSystem
name|class
name|QGraphicsSystem
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPixmapData
name|class
name|QPixmapData
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_QWS_DEPTH16_RGB
end_ifndef
begin_define
DECL|macro|QT_QWS_DEPTH16_RGB
define|#
directive|define
name|QT_QWS_DEPTH16_RGB
value|565
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|qt_rbits
specifier|static
specifier|const
name|int
name|qt_rbits
init|=
operator|(
name|QT_QWS_DEPTH16_RGB
operator|/
literal|100
operator|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_gbits
specifier|static
specifier|const
name|int
name|qt_gbits
init|=
operator|(
name|QT_QWS_DEPTH16_RGB
operator|/
literal|10
operator|%
literal|10
operator|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_bbits
specifier|static
specifier|const
name|int
name|qt_bbits
init|=
operator|(
name|QT_QWS_DEPTH16_RGB
operator|%
literal|10
operator|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_red_shift
specifier|static
specifier|const
name|int
name|qt_red_shift
init|=
name|qt_bbits
operator|+
name|qt_gbits
operator|-
operator|(
literal|8
operator|-
name|qt_rbits
operator|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_green_shift
specifier|static
specifier|const
name|int
name|qt_green_shift
init|=
name|qt_bbits
operator|-
operator|(
literal|8
operator|-
name|qt_gbits
operator|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_neg_blue_shift
specifier|static
specifier|const
name|int
name|qt_neg_blue_shift
init|=
literal|8
operator|-
name|qt_bbits
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_blue_mask
specifier|static
specifier|const
name|int
name|qt_blue_mask
init|=
operator|(
literal|1
operator|<<
name|qt_bbits
operator|)
operator|-
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_green_mask
specifier|static
specifier|const
name|int
name|qt_green_mask
init|=
operator|(
literal|1
operator|<<
operator|(
name|qt_gbits
operator|+
name|qt_bbits
operator|)
operator|)
operator|-
operator|(
literal|1
operator|<<
name|qt_bbits
operator|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_red_mask
specifier|static
specifier|const
name|int
name|qt_red_mask
init|=
operator|(
literal|1
operator|<<
operator|(
name|qt_rbits
operator|+
name|qt_gbits
operator|+
name|qt_bbits
operator|)
operator|)
operator|-
operator|(
literal|1
operator|<<
operator|(
name|qt_gbits
operator|+
name|qt_bbits
operator|)
operator|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_red_rounding_shift
specifier|static
specifier|const
name|int
name|qt_red_rounding_shift
init|=
name|qt_red_shift
operator|+
name|qt_rbits
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_green_rounding_shift
specifier|static
specifier|const
name|int
name|qt_green_rounding_shift
init|=
name|qt_green_shift
operator|+
name|qt_gbits
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_blue_rounding_shift
specifier|static
specifier|const
name|int
name|qt_blue_rounding_shift
init|=
name|qt_bbits
operator|-
name|qt_neg_blue_shift
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_convRgbTo16
specifier|inline
name|ushort
name|qt_convRgbTo16
parameter_list|(
specifier|const
name|int
name|r
parameter_list|,
specifier|const
name|int
name|g
parameter_list|,
specifier|const
name|int
name|b
parameter_list|)
block|{
specifier|const
name|int
name|tr
init|=
name|r
operator|<<
name|qt_red_shift
decl_stmt|;
specifier|const
name|int
name|tg
init|=
name|g
operator|<<
name|qt_green_shift
decl_stmt|;
specifier|const
name|int
name|tb
init|=
name|b
operator|>>
name|qt_neg_blue_shift
decl_stmt|;
return|return
operator|(
name|tb
operator|&
name|qt_blue_mask
operator|)
operator||
operator|(
name|tg
operator|&
name|qt_green_mask
operator|)
operator||
operator|(
name|tr
operator|&
name|qt_red_mask
operator|)
return|;
block|}
end_function
begin_function
DECL|function|qt_convRgbTo16
specifier|inline
name|ushort
name|qt_convRgbTo16
parameter_list|(
name|QRgb
name|c
parameter_list|)
block|{
specifier|const
name|int
name|tr
init|=
name|qRed
argument_list|(
name|c
argument_list|)
operator|<<
name|qt_red_shift
decl_stmt|;
specifier|const
name|int
name|tg
init|=
name|qGreen
argument_list|(
name|c
argument_list|)
operator|<<
name|qt_green_shift
decl_stmt|;
specifier|const
name|int
name|tb
init|=
name|qBlue
argument_list|(
name|c
argument_list|)
operator|>>
name|qt_neg_blue_shift
decl_stmt|;
return|return
operator|(
name|tb
operator|&
name|qt_blue_mask
operator|)
operator||
operator|(
name|tg
operator|&
name|qt_green_mask
operator|)
operator||
operator|(
name|tr
operator|&
name|qt_red_mask
operator|)
return|;
block|}
end_function
begin_function
DECL|function|qt_conv16ToRgb
specifier|inline
name|QRgb
name|qt_conv16ToRgb
parameter_list|(
name|ushort
name|c
parameter_list|)
block|{
specifier|const
name|int
name|r
init|=
operator|(
name|c
operator|&
name|qt_red_mask
operator|)
decl_stmt|;
specifier|const
name|int
name|g
init|=
operator|(
name|c
operator|&
name|qt_green_mask
operator|)
decl_stmt|;
specifier|const
name|int
name|b
init|=
operator|(
name|c
operator|&
name|qt_blue_mask
operator|)
decl_stmt|;
specifier|const
name|int
name|tr
init|=
name|r
operator|>>
name|qt_red_shift
operator||
name|r
operator|>>
name|qt_red_rounding_shift
decl_stmt|;
specifier|const
name|int
name|tg
init|=
name|g
operator|>>
name|qt_green_shift
operator||
name|g
operator|>>
name|qt_green_rounding_shift
decl_stmt|;
specifier|const
name|int
name|tb
init|=
name|b
operator|<<
name|qt_neg_blue_shift
operator||
name|b
operator|>>
name|qt_blue_rounding_shift
decl_stmt|;
return|return
name|qRgb
argument_list|(
name|tr
argument_list|,
name|tg
argument_list|,
name|tb
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_conv16ToRgb
specifier|inline
name|void
name|qt_conv16ToRgb
parameter_list|(
name|ushort
name|c
parameter_list|,
name|int
modifier|&
name|r
parameter_list|,
name|int
modifier|&
name|g
parameter_list|,
name|int
modifier|&
name|b
parameter_list|)
block|{
specifier|const
name|int
name|tr
init|=
operator|(
name|c
operator|&
name|qt_red_mask
operator|)
decl_stmt|;
specifier|const
name|int
name|tg
init|=
operator|(
name|c
operator|&
name|qt_green_mask
operator|)
decl_stmt|;
specifier|const
name|int
name|tb
init|=
operator|(
name|c
operator|&
name|qt_blue_mask
operator|)
decl_stmt|;
name|r
operator|=
name|tr
operator|>>
name|qt_red_shift
operator||
name|tr
operator|>>
name|qt_red_rounding_shift
expr_stmt|;
name|g
operator|=
name|tg
operator|>>
name|qt_green_shift
operator||
name|tg
operator|>>
name|qt_green_rounding_shift
expr_stmt|;
name|b
operator|=
name|tb
operator|<<
name|qt_neg_blue_shift
operator||
name|tb
operator|>>
name|qt_blue_rounding_shift
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|SourceSolid
specifier|const
name|int
name|SourceSolid
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|SourcePixmap
specifier|const
name|int
name|SourcePixmap
init|=
literal|1
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
end_ifndef
begin_decl_stmt
DECL|variable|QScreenCursor
name|class
name|QScreenCursor
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|QScreenCursor
modifier|*
name|qt_screencursor
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|bool
name|qws_sw_cursor
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QScreenCursor
block|{
name|public
label|:
name|QScreenCursor
argument_list|()
expr_stmt|;
name|virtual
operator|~
name|QScreenCursor
argument_list|()
expr_stmt|;
name|virtual
name|void
name|set
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|int
name|hotx
parameter_list|,
name|int
name|hoty
parameter_list|)
function_decl|;
name|virtual
name|void
name|move
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
name|virtual
name|void
name|show
parameter_list|()
function_decl|;
name|virtual
name|void
name|hide
parameter_list|()
function_decl|;
name|bool
name|supportsAlphaCursor
argument_list|()
specifier|const
block|{
return|return
name|supportsAlpha
return|;
block|}
specifier|static
name|bool
name|enabled
parameter_list|()
block|{
return|return
name|qws_sw_cursor
return|;
block|}
name|QRect
name|boundingRect
argument_list|()
specifier|const
block|{
return|return
name|QRect
argument_list|(
name|pos
operator|-
name|hotspot
argument_list|,
name|size
argument_list|)
return|;
block|}
name|QImage
name|image
argument_list|()
specifier|const
block|{
return|return
name|cursor
return|;
block|}
name|bool
name|isVisible
argument_list|()
specifier|const
block|{
return|return
name|enable
return|;
block|}
name|bool
name|isAccelerated
argument_list|()
specifier|const
block|{
return|return
name|hwaccel
return|;
block|}
specifier|static
name|void
name|initSoftwareCursor
parameter_list|()
function_decl|;
specifier|static
name|QScreenCursor
modifier|*
name|instance
parameter_list|()
block|{
return|return
name|qt_screencursor
return|;
block|}
name|protected
label|:
name|QImage
name|cursor
decl_stmt|;
name|QSize
name|size
decl_stmt|;
name|QPoint
name|pos
decl_stmt|;
name|QPoint
name|hotspot
decl_stmt|;
name|uint
name|enable
range|:
literal|1
decl_stmt|;
name|uint
name|hwaccel
range|:
literal|1
decl_stmt|;
name|uint
name|supportsAlpha
range|:
literal|1
decl_stmt|;
name|private
label|:
name|friend
name|class
name|QProxyScreenCursor
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_CURSOR
end_comment
begin_comment
comment|// A (used) chunk of offscreen memory
end_comment
begin_decl_stmt
name|class
name|QPoolEntry
block|{
name|public
label|:
name|unsigned
name|int
name|start
decl_stmt|;
name|unsigned
name|int
name|end
decl_stmt|;
name|int
name|clientId
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
DECL|variable|QScreen
name|class
name|QScreen
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QScreenPrivate
name|class
name|QScreenPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPixmapDataFactory
name|class
name|QPixmapDataFactory
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|Q_GUI_EXPORT
name|QScreen
modifier|*
name|qt_screen
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|ClearCacheFunc
typedef|typedef
name|void
function_decl|(
modifier|*
name|ClearCacheFunc
function_decl|)
parameter_list|(
name|QScreen
modifier|*
name|obj
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QScreen
block|{
name|public
label|:
enum|enum
name|ClassId
block|{
name|LinuxFBClass
block|,
name|TransformedClass
block|,
name|VNCClass
block|,
name|MultiClass
block|,
name|VFbClass
block|,
name|DirectFBClass
block|,
name|SvgalibClass
block|,
name|ProxyClass
block|,
name|GLClass
block|,
name|IntfbClass
block|,
name|CustomClass
init|=
literal|1024
block|}
enum|;
name|QScreen
argument_list|(
argument|int display_id
argument_list|,
argument|ClassId classId
argument_list|)
empty_stmt|;
name|explicit
name|QScreen
parameter_list|(
name|int
name|display_id
parameter_list|)
function_decl|;
name|virtual
operator|~
name|QScreen
argument_list|()
expr_stmt|;
specifier|static
name|QScreen
modifier|*
name|instance
parameter_list|()
block|{
return|return
name|qt_screen
return|;
block|}
name|virtual
name|bool
name|initDevice
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|connect
parameter_list|(
specifier|const
name|QString
modifier|&
name|displaySpec
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|disconnect
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|void
name|shutdownDevice
parameter_list|()
function_decl|;
name|virtual
name|void
name|setMode
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|supportsDepth
argument_list|(
name|int
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|void
name|save
parameter_list|()
function_decl|;
name|virtual
name|void
name|restore
parameter_list|()
function_decl|;
name|virtual
name|void
name|blank
parameter_list|(
name|bool
name|on
parameter_list|)
function_decl|;
name|virtual
name|int
name|pixmapOffsetAlignment
parameter_list|()
block|{
return|return
literal|64
return|;
block|}
name|virtual
name|int
name|pixmapLinestepAlignment
parameter_list|()
block|{
return|return
literal|64
return|;
block|}
name|virtual
name|int
name|sharedRamSize
parameter_list|(
name|void
modifier|*
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|bool
name|onCard
argument_list|(
specifier|const
name|unsigned
name|char
operator|*
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|bool
name|onCard
argument_list|(
specifier|const
name|unsigned
name|char
operator|*
argument_list|,
name|ulong
operator|&
name|out_offset
argument_list|)
decl|const
decl_stmt|;
enum|enum
name|PixelType
block|{
name|NormalPixel
block|,
name|BGRPixel
block|}
enum|;
comment|// sets a single color in the colormap
name|virtual
name|void
name|set
parameter_list|(
name|unsigned
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
comment|// allocates a color
name|virtual
name|int
name|alloc
parameter_list|(
name|unsigned
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
name|int
name|width
argument_list|()
specifier|const
block|{
return|return
name|w
return|;
block|}
name|int
name|height
argument_list|()
specifier|const
block|{
return|return
name|h
return|;
block|}
name|int
name|depth
argument_list|()
specifier|const
block|{
return|return
name|d
return|;
block|}
name|virtual
name|int
name|pixmapDepth
argument_list|()
specifier|const
expr_stmt|;
name|PixelType
name|pixelType
argument_list|()
specifier|const
block|{
return|return
name|pixeltype
return|;
block|}
name|int
name|linestep
argument_list|()
specifier|const
block|{
return|return
name|lstep
return|;
block|}
name|int
name|deviceWidth
argument_list|()
specifier|const
block|{
return|return
name|dw
return|;
block|}
name|int
name|deviceHeight
argument_list|()
specifier|const
block|{
return|return
name|dh
return|;
block|}
name|uchar
operator|*
name|base
argument_list|()
specifier|const
block|{
return|return
name|data
return|;
block|}
comment|// Ask for memory from card cache with alignment
name|virtual
name|uchar
modifier|*
name|cache
parameter_list|(
name|int
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|void
name|uncache
parameter_list|(
name|uchar
modifier|*
parameter_list|)
block|{}
name|QImage
operator|::
name|Format
name|pixelFormat
argument_list|()
specifier|const
expr_stmt|;
name|int
name|screenSize
argument_list|()
specifier|const
block|{
return|return
name|size
return|;
block|}
name|int
name|totalSize
argument_list|()
specifier|const
block|{
return|return
name|mapsize
return|;
block|}
name|QRgb
modifier|*
name|clut
parameter_list|()
block|{
return|return
name|screenclut
return|;
block|}
ifdef|#
directive|ifdef
name|QT_DEPRECATED
name|QT_DEPRECATED
name|int
name|numCols
parameter_list|()
block|{
return|return
name|screencols
return|;
block|}
endif|#
directive|endif
name|int
name|colorCount
parameter_list|()
block|{
return|return
name|screencols
return|;
block|}
name|virtual
name|QSize
name|mapToDevice
argument_list|(
specifier|const
name|QSize
operator|&
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|QSize
name|mapFromDevice
argument_list|(
specifier|const
name|QSize
operator|&
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|QPoint
name|mapToDevice
argument_list|(
specifier|const
name|QPoint
operator|&
argument_list|,
specifier|const
name|QSize
operator|&
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|QPoint
name|mapFromDevice
argument_list|(
specifier|const
name|QPoint
operator|&
argument_list|,
specifier|const
name|QSize
operator|&
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|QRect
name|mapToDevice
argument_list|(
specifier|const
name|QRect
operator|&
argument_list|,
specifier|const
name|QSize
operator|&
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|QRect
name|mapFromDevice
argument_list|(
specifier|const
name|QRect
operator|&
argument_list|,
specifier|const
name|QSize
operator|&
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|QImage
name|mapToDevice
argument_list|(
specifier|const
name|QImage
operator|&
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|QImage
name|mapFromDevice
argument_list|(
specifier|const
name|QImage
operator|&
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|QRegion
name|mapToDevice
argument_list|(
specifier|const
name|QRegion
operator|&
argument_list|,
specifier|const
name|QSize
operator|&
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|QRegion
name|mapFromDevice
argument_list|(
specifier|const
name|QRegion
operator|&
argument_list|,
specifier|const
name|QSize
operator|&
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|int
name|transformOrientation
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|bool
name|isTransformed
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|bool
name|isInterlaced
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|void
name|setDirty
parameter_list|(
specifier|const
name|QRect
modifier|&
parameter_list|)
function_decl|;
name|virtual
name|int
name|memoryNeeded
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
name|virtual
name|void
name|haltUpdates
parameter_list|()
function_decl|;
name|virtual
name|void
name|resumeUpdates
parameter_list|()
function_decl|;
comment|// composition manager methods
name|virtual
name|void
name|exposeRegion
parameter_list|(
name|QRegion
name|r
parameter_list|,
name|int
name|changing
parameter_list|)
function_decl|;
comment|// these work directly on the screen
name|virtual
name|void
name|blit
parameter_list|(
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
function_decl|;
name|virtual
name|void
name|solidFill
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
function_decl|;
name|void
name|blit
parameter_list|(
name|QWSWindow
modifier|*
name|bs
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|clip
parameter_list|)
function_decl|;
name|virtual
name|QWSWindowSurface
modifier|*
name|createSurface
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|QWSWindowSurface
modifier|*
name|createSurface
argument_list|(
specifier|const
name|QString
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|QList
operator|<
name|QScreen
operator|*
operator|>
name|subScreens
argument_list|()
specifier|const
block|{
return|return
name|QList
operator|<
name|QScreen
operator|*
operator|>
operator|(
operator|)
return|;
block|}
name|virtual
name|QRegion
name|region
argument_list|()
specifier|const
block|{
return|return
name|QRect
argument_list|(
name|offset
argument_list|()
argument_list|,
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
argument_list|)
return|;
block|}
name|int
name|subScreenIndexAt
argument_list|(
specifier|const
name|QPoint
operator|&
name|p
argument_list|)
decl|const
decl_stmt|;
name|void
name|setOffset
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|)
function_decl|;
name|QPoint
name|offset
argument_list|()
specifier|const
expr_stmt|;
name|int
name|physicalWidth
argument_list|()
specifier|const
block|{
return|return
name|physWidth
return|;
block|}
comment|// physical display size in mm
name|int
name|physicalHeight
argument_list|()
specifier|const
block|{
return|return
name|physHeight
return|;
block|}
comment|// physical display size in mm
name|QPixmapDataFactory
operator|*
name|pixmapDataFactory
argument_list|()
specifier|const
expr_stmt|;
comment|// Deprecated, will be removed in 4.6
name|QGraphicsSystem
operator|*
name|graphicsSystem
argument_list|()
specifier|const
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_QWS_CLIENTBLIT
name|bool
name|supportsBlitInClients
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setSupportsBlitInClients
parameter_list|(
name|bool
parameter_list|)
function_decl|;
endif|#
directive|endif
name|ClassId
name|classId
argument_list|()
specifier|const
expr_stmt|;
name|protected
label|:
name|void
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format
name|format
argument_list|)
decl_stmt|;
name|void
name|setPixmapDataFactory
parameter_list|(
name|QPixmapDataFactory
modifier|*
name|factory
parameter_list|)
function_decl|;
comment|// Deprecated, will be removed in 4.6
name|void
name|setGraphicsSystem
parameter_list|(
name|QGraphicsSystem
modifier|*
name|system
parameter_list|)
function_decl|;
name|QRgb
name|screenclut
index|[
literal|256
index|]
decl_stmt|;
name|int
name|screencols
decl_stmt|;
name|uchar
modifier|*
name|data
decl_stmt|;
comment|// Table of allocated lumps, kept in sorted highest-to-lowest order
comment|// The table itself is allocated at the bottom of offscreen memory
comment|// i.e. it's similar to having a stack (the table) and a heap
comment|// (the allocated blocks). Freed space is implicitly described
comment|// by the gaps between the allocated lumps (this saves entries and
comment|// means we don't need to worry about coalescing freed lumps)
name|QPoolEntry
modifier|*
name|entries
decl_stmt|;
name|int
modifier|*
name|entryp
decl_stmt|;
name|unsigned
name|int
modifier|*
name|lowest
decl_stmt|;
name|int
name|w
decl_stmt|;
name|int
name|lstep
decl_stmt|;
name|int
name|h
decl_stmt|;
name|int
name|d
decl_stmt|;
name|PixelType
name|pixeltype
decl_stmt|;
name|bool
name|grayscale
decl_stmt|;
name|int
name|dw
decl_stmt|;
name|int
name|dh
decl_stmt|;
name|int
name|size
decl_stmt|;
comment|// Screen size
name|int
name|mapsize
decl_stmt|;
comment|// Total mapped memory
name|int
name|displayId
decl_stmt|;
name|int
name|physWidth
decl_stmt|;
name|int
name|physHeight
decl_stmt|;
name|friend
name|class
name|QWSServer
decl_stmt|;
name|friend
name|class
name|QWSServerPrivate
decl_stmt|;
specifier|static
name|ClearCacheFunc
name|clearCacheFunc
decl_stmt|;
name|private
label|:
name|void
name|compose
parameter_list|(
name|int
name|level
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|exposed
parameter_list|,
name|QRegion
modifier|&
name|blend
parameter_list|,
name|QImage
modifier|*
modifier|*
name|blendbuffer
parameter_list|,
name|int
name|changing_level
parameter_list|)
function_decl|;
name|void
name|paintBackground
parameter_list|(
specifier|const
name|QRegion
modifier|&
parameter_list|)
function_decl|;
name|friend
name|class
name|QWSOnScreenSurface
decl_stmt|;
specifier|static
name|bool
name|isWidgetPaintOnScreen
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
function_decl|;
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_BIG_ENDIAN
name|void
name|setFrameBufferLittleEndian
parameter_list|(
name|bool
name|littleEndian
parameter_list|)
function_decl|;
name|bool
name|frameBufferLittleEndian
argument_list|()
specifier|const
expr_stmt|;
name|friend
name|class
name|QVNCScreen
decl_stmt|;
name|friend
name|class
name|QLinuxFbScreen
decl_stmt|;
name|friend
name|class
name|QVFbScreen
decl_stmt|;
name|friend
name|class
name|QProxyScreen
decl_stmt|;
name|friend
name|class
name|QIntfbScreen
decl_stmt|;
endif|#
directive|endif
name|friend
name|void
name|qt_solidFill_setup
parameter_list|(
name|QScreen
modifier|*
parameter_list|,
specifier|const
name|QColor
modifier|&
parameter_list|,
specifier|const
name|QRegion
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|qt_blit_setup
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_GENERIC
name|friend
name|void
name|qt_set_generic_blit
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
name|int
name|bpp
parameter_list|,
name|int
name|len_red
parameter_list|,
name|int
name|len_green
parameter_list|,
name|int
name|len_blue
parameter_list|,
name|int
name|len_alpha
parameter_list|,
name|int
name|off_red
parameter_list|,
name|int
name|off_green
parameter_list|,
name|int
name|off_blue
parameter_list|,
name|int
name|off_alpha
parameter_list|)
function_decl|;
endif|#
directive|endif
name|QScreenPrivate
modifier|*
name|d_ptr
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|// This lives in loadable modules
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_LOADABLE_MODULES
end_ifndef
begin_extern
extern|extern
literal|"C"
name|QScreen
modifier|*
name|qt_get_screen
parameter_list|(
name|int
name|display_id
parameter_list|,
specifier|const
name|char
modifier|*
name|spec
parameter_list|)
function_decl|;
end_extern
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// This is in main lib, loads the right module, calls qt_get_screen
end_comment
begin_comment
comment|// In non-loadable cases just aliases to qt_get_screen
end_comment
begin_function_decl
specifier|const
name|unsigned
name|char
modifier|*
name|qt_probe_bus
parameter_list|()
function_decl|;
end_function_decl
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QSCREEN_QWS_H
end_comment
end_unit
