begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwsevent_qws.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|factory
name|QWSEvent
modifier|*
name|QWSEvent
operator|::
name|factory
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|QWSEvent
modifier|*
name|event
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QWSEvent
operator|::
name|Connected
case|:
name|event
operator|=
operator|new
name|QWSConnectedEvent
expr_stmt|;
break|break;
case|case
name|QWSEvent
operator|::
name|MaxWindowRect
case|:
name|event
operator|=
operator|new
name|QWSMaxWindowRectEvent
expr_stmt|;
break|break;
case|case
name|QWSEvent
operator|::
name|Mouse
case|:
name|event
operator|=
operator|new
name|QWSMouseEvent
expr_stmt|;
break|break;
case|case
name|QWSEvent
operator|::
name|Focus
case|:
name|event
operator|=
operator|new
name|QWSFocusEvent
expr_stmt|;
break|break;
case|case
name|QWSEvent
operator|::
name|Key
case|:
name|event
operator|=
operator|new
name|QWSKeyEvent
expr_stmt|;
break|break;
case|case
name|QWSEvent
operator|::
name|Region
case|:
name|event
operator|=
operator|new
name|QWSRegionEvent
expr_stmt|;
break|break;
case|case
name|QWSEvent
operator|::
name|Creation
case|:
name|event
operator|=
operator|new
name|QWSCreationEvent
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_QWS_PROPERTIES
case|case
name|QWSEvent
operator|::
name|PropertyNotify
case|:
name|event
operator|=
operator|new
name|QWSPropertyNotifyEvent
expr_stmt|;
break|break;
case|case
name|QWSEvent
operator|::
name|PropertyReply
case|:
name|event
operator|=
operator|new
name|QWSPropertyReplyEvent
expr_stmt|;
break|break;
endif|#
directive|endif
comment|// QT_NO_QWS_PROPERTIES
case|case
name|QWSEvent
operator|::
name|SelectionClear
case|:
name|event
operator|=
operator|new
name|QWSSelectionClearEvent
expr_stmt|;
break|break;
case|case
name|QWSEvent
operator|::
name|SelectionRequest
case|:
name|event
operator|=
operator|new
name|QWSSelectionRequestEvent
expr_stmt|;
break|break;
case|case
name|QWSEvent
operator|::
name|SelectionNotify
case|:
name|event
operator|=
operator|new
name|QWSSelectionNotifyEvent
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_COP
case|case
name|QWSEvent
operator|::
name|QCopMessage
case|:
name|event
operator|=
operator|new
name|QWSQCopMessageEvent
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QWSEvent
operator|::
name|WindowOperation
case|:
name|event
operator|=
operator|new
name|QWSWindowOperationEvent
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_QWS_INPUTMETHODS
case|case
name|QWSEvent
operator|::
name|IMEvent
case|:
name|event
operator|=
operator|new
name|QWSIMEvent
expr_stmt|;
break|break;
case|case
name|QWSEvent
operator|::
name|IMQuery
case|:
name|event
operator|=
operator|new
name|QWSIMQueryEvent
expr_stmt|;
break|break;
case|case
name|QWSEvent
operator|::
name|IMInit
case|:
name|event
operator|=
operator|new
name|QWSIMInitEvent
expr_stmt|;
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_QWSEMBEDWIDGET
case|case
name|QWSEvent
operator|::
name|Embed
case|:
name|event
operator|=
operator|new
name|QWSEmbedEvent
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QWSEvent
operator|::
name|Font
case|:
name|event
operator|=
operator|new
name|QWSFontEvent
expr_stmt|;
break|break;
case|case
name|QWSEvent
operator|::
name|ScreenTransformation
case|:
name|event
operator|=
operator|new
name|QWSScreenTransformationEvent
expr_stmt|;
break|break;
default|default:
name|qCritical
argument_list|(
literal|"QWSEvent::factory() : Unknown event type %08x!"
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|event
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWSEvent     \ingroup qws      \brief The QWSEvent class encapsulates an event in Qt for Embedded Linux.      When running a \l{Qt for Embedded Linux} application, it either runs as a     server or connects to an existing server. All system generated     events are passed to the server application which then propagates     the event to the appropriate client.      Whenever the server receives an event, it queries its stack of     top-level windows to find the window containing the event's     position. Each window can identify the client application that     created it, and returns its ID to the server upon     request. Finally, the server forwards the event, encapsulated by     an instance of the QWSEvent class, to the appropriate client.      \image qt-embedded-client.png      The server communicates with the client applications over the UNIX     domain socket. You can retrieve direct access to all the events a     client receives from the server, by reimplementing QApplication's     \l {QApplication::}{qwsEventFilter()} function.      QWSEvent provides the \l Type enum specifying the origin of the     event. Internally, each type is represented by a QWSEvent     subclass, e.g., \c QWSKeyEvent.      \sa QWSServer, QWSClient, {Qt for Embedded Linux Architecture} */
end_comment
begin_comment
comment|/*!     \enum QWSEvent::Type      This enum describes the origin of the event.      \value NoEvent No event has occurred.     \value Connected An application has connected to the server.     \value Mouse A mouse button is pressed or released, or the mouse cursor is moved.              See also \l{Qt for Embedded Linux Pointer Handling}.     \value Focus A window has lost or received focus.     \value Key A key is pressed or released. See also \l{Qt for Embedded Linux Character Input}.     \value Region A region has changed.     \value Creation The server has created an ID, typically for a window.     \value PropertyNotify A property has changed.     \value PropertyReply The server is responding to a request for a property's value.     \value SelectionClear A selection is deleted.     \value SelectionRequest The server has queried for a selection.     \value SelectionNotify A new selection has been created.     \value MaxWindowRect The server has changed the maximum window for an application.     \value QCopMessage A new Qt Cop message has appeared. See also QCopChannel     \value WindowOperation A window operation, e.g. resizing, has occurred.     \value IMEvent An input method has been used  to enter text for languages with               non-Latin alphabets. See also QWSInputMethod.     \value IMQuery An input method query for a specified property has occurred.              See also QWSInputMethod.     \value NEvent The number of events has changed.     \value Embed An event used internally to implement embedded windows. See also            QWSEmbedWidget.     \value ScreenTransformation An event used internally to notify the client processes     that the screen has changed for example, rotation, etc.     \omitvalue Font     \omitvalue IMInit */
end_comment
begin_comment
comment|/*!    \fn  QWSMouseEvent *QWSEvent::asMouse()    \internal */
end_comment
begin_comment
comment|/*!    \fn  int QWSEvent::window()    \internal */
end_comment
begin_comment
comment|/*!    \fn  int QWSEvent::window() const    \internal */
end_comment
begin_comment
comment|/*!    \fn  QWSEvent *QWSEvent::factory(int type)    \internal */
end_comment
begin_comment
comment|/*!    \fn  QWSEvent::QWSEvent( int t, int len, char * ptr)    \internal */
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
