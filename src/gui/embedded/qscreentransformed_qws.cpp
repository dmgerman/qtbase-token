begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qscreentransformed_qws.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_TRANSFORMED
end_ifndef
begin_include
include|#
directive|include
file|<qscreendriverfactory_qws.h>
end_include
begin_include
include|#
directive|include
file|<qvector.h>
end_include
begin_include
include|#
directive|include
file|<private/qpainter_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qmemrotate_p.h>
end_include
begin_include
include|#
directive|include
file|<qmatrix.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<sys/ioctl.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_include
include|#
directive|include
file|<sys/mman.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<qwindowsystem_qws.h>
end_include
begin_include
include|#
directive|include
file|<qwsdisplay_qws.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|//#define QT_REGION_DEBUG
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_REGION_DEBUG
end_ifdef
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|QTransformedScreenPrivate
class|class
name|QTransformedScreenPrivate
block|{
public|public:
name|QTransformedScreenPrivate
parameter_list|(
name|QTransformedScreen
modifier|*
name|parent
parameter_list|)
constructor_decl|;
name|void
name|configure
parameter_list|()
function_decl|;
DECL|member|transformation
name|QTransformedScreen
operator|::
name|Transformation
name|transformation
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_GENERIC
DECL|member|doGenericColors
name|bool
name|doGenericColors
decl_stmt|;
endif|#
directive|endif
DECL|member|q
name|QTransformedScreen
modifier|*
name|q
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QTransformedScreenPrivate
name|QTransformedScreenPrivate
operator|::
name|QTransformedScreenPrivate
parameter_list|(
name|QTransformedScreen
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|transformation
argument_list|(
name|QTransformedScreen
operator|::
name|None
argument_list|)
member_init_list|,
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_GENERIC
name|doGenericColors
argument_list|(
literal|false
argument_list|)
member_init_list|,
endif|#
directive|endif
name|q
argument_list|(
name|parent
argument_list|)
block|{ }
end_constructor
begin_extern
extern|extern
literal|"C"
ifndef|#
directive|ifndef
name|QT_BUILD_GUI_LIB
name|Q_DECL_EXPORT
endif|#
directive|endif
DECL|function|qws_setScreenTransformation
name|void
name|qws_setScreenTransformation
parameter_list|(
name|QScreen
modifier|*
name|that
parameter_list|,
name|int
name|t
parameter_list|)
block|{
name|QTransformedScreen
modifier|*
name|tscreen
init|=
cast|static_cast
argument_list|<
name|QTransformedScreen
operator|*
argument_list|>
argument_list|(
name|that
argument_list|)
decl_stmt|;
name|tscreen
operator|->
name|setTransformation
argument_list|(
operator|(
name|QTransformedScreen
operator|::
name|Transformation
operator|)
name|t
argument_list|)
expr_stmt|;
block|}
end_extern
begin_comment
comment|// ---------------------------------------------------------------------------
end_comment
begin_comment
comment|// Transformed Screen
end_comment
begin_comment
comment|// ---------------------------------------------------------------------------
end_comment
begin_comment
comment|/*!     \internal      \class QTransformedScreen     \ingroup qws      \brief The QTransformedScreen class implements a screen driver for     a transformed screen.      Note that this class is only available in \l{Qt for Embedded Linux}.     Custom screen drivers can be added by subclassing the     QScreenDriverPlugin class, using the QScreenDriverFactory class to     dynamically load the driver into the application, but there should     only be one screen object per application.      Use the QScreen::isTransformed() function to determine if a screen     is transformed. The QTransformedScreen class itself provides means     of rotating the screen with its setTransformation() function; the     transformation() function returns the currently set rotation in     terms of the \l Transformation enum (which describes the various     available rotation settings). Alternatively, QTransformedScreen     provides an implementation of the QScreen::transformOrientation()     function, returning the current rotation as an integer value.      \sa QScreen, QScreenDriverPlugin, {Running Applications} */
end_comment
begin_comment
comment|/*!     \enum QTransformedScreen::Transformation      This enum describes the various rotations a transformed screen can     have.      \value None No rotation     \value Rot90 90 degrees rotation     \value Rot180 180 degrees rotation     \value Rot270 270 degrees rotation */
end_comment
begin_comment
comment|/*!     \fn bool QTransformedScreen::isTransformed() const     \reimp */
end_comment
begin_comment
comment|/*!     Constructs a QTransformedScreen object. The \a displayId argument     identifies the Qt for Embedded Linux server to connect to. */
end_comment
begin_constructor
DECL|function|QTransformedScreen
name|QTransformedScreen
operator|::
name|QTransformedScreen
parameter_list|(
name|int
name|displayId
parameter_list|)
member_init_list|:
name|QProxyScreen
argument_list|(
name|displayId
argument_list|,
name|QScreen
operator|::
name|TransformedClass
argument_list|)
block|{
name|d_ptr
operator|=
operator|new
name|QTransformedScreenPrivate
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|transformation
operator|=
name|None
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_REGION_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QTransformedScreen::QTransformedScreen"
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_function
DECL|function|configure
name|void
name|QTransformedScreenPrivate
operator|::
name|configure
parameter_list|()
block|{
comment|// ###: works because setTransformation recalculates unconditionally
name|q
operator|->
name|setTransformation
argument_list|(
name|transformation
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Destroys the QTransformedScreen object. */
end_comment
begin_destructor
DECL|function|~QTransformedScreen
name|QTransformedScreen
operator|::
name|~
name|QTransformedScreen
parameter_list|()
block|{
operator|delete
name|d_ptr
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|getDisplayId
specifier|static
name|int
name|getDisplayId
parameter_list|(
specifier|const
name|QString
modifier|&
name|spec
parameter_list|)
block|{
name|QRegExp
name|regexp
argument_list|(
name|QLatin1String
argument_list|(
literal|":(\\d+)\\b"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|regexp
operator|.
name|lastIndexIn
argument_list|(
name|spec
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|const
name|QString
name|capture
init|=
name|regexp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
decl_stmt|;
return|return
name|capture
operator|.
name|toInt
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|filterTransformation
specifier|static
name|QTransformedScreen
operator|::
name|Transformation
name|filterTransformation
parameter_list|(
name|QString
modifier|&
name|spec
parameter_list|)
block|{
name|QRegExp
name|regexp
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\bRot(\\d+):?\\b"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
decl_stmt|;
if|if
condition|(
name|regexp
operator|.
name|indexIn
argument_list|(
name|spec
argument_list|)
operator|==
operator|-
literal|1
condition|)
return|return
name|QTransformedScreen
operator|::
name|None
return|;
specifier|const
name|int
name|degrees
init|=
name|regexp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|spec
operator|.
name|remove
argument_list|(
name|regexp
operator|.
name|pos
argument_list|(
literal|0
argument_list|)
argument_list|,
name|regexp
operator|.
name|matchedLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|QTransformedScreen
operator|::
name|Transformation
argument_list|>
argument_list|(
name|degrees
operator|/
literal|90
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|connect
name|bool
name|QTransformedScreen
operator|::
name|connect
parameter_list|(
specifier|const
name|QString
modifier|&
name|displaySpec
parameter_list|)
block|{
name|QString
name|dspec
init|=
name|displaySpec
operator|.
name|trimmed
argument_list|()
decl_stmt|;
if|if
condition|(
name|dspec
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"Transformed:"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|dspec
operator|=
name|dspec
operator|.
name|mid
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Transformed:"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|dspec
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"Transformed"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|dspec
operator|=
name|QString
argument_list|()
expr_stmt|;
specifier|const
name|QString
name|displayIdSpec
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" :%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|displayId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dspec
operator|.
name|endsWith
argument_list|(
name|displayIdSpec
argument_list|)
condition|)
name|dspec
operator|=
name|dspec
operator|.
name|left
argument_list|(
name|dspec
operator|.
name|size
argument_list|()
operator|-
name|displayIdSpec
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|transformation
operator|=
name|filterTransformation
argument_list|(
name|dspec
argument_list|)
expr_stmt|;
name|QString
name|driver
init|=
name|dspec
decl_stmt|;
name|int
name|colon
init|=
name|driver
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|colon
operator|>=
literal|0
condition|)
name|driver
operator|.
name|truncate
argument_list|(
name|colon
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QScreenDriverFactory
operator|::
name|keys
argument_list|()
operator|.
name|contains
argument_list|(
name|driver
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
if|if
condition|(
operator|!
name|dspec
operator|.
name|isEmpty
argument_list|()
condition|)
name|dspec
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|int
name|id
init|=
name|getDisplayId
argument_list|(
name|dspec
argument_list|)
decl_stmt|;
name|QScreen
modifier|*
name|s
init|=
name|qt_get_screen
argument_list|(
name|id
argument_list|,
name|dspec
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|setScreen
argument_list|(
name|s
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_GENERIC
name|d_ptr
operator|->
name|doGenericColors
operator|=
name|dspec
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"genericcolors"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|d_ptr
operator|->
name|configure
argument_list|()
expr_stmt|;
comment|// XXX
name|qt_screen
operator|=
name|this
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the currently set rotation.      \sa setTransformation(), QScreen::transformOrientation() */
end_comment
begin_function
DECL|function|transformation
name|QTransformedScreen
operator|::
name|Transformation
name|QTransformedScreen
operator|::
name|transformation
parameter_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|transformation
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|transformOrientation
name|int
name|QTransformedScreen
operator|::
name|transformOrientation
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|int
operator|)
name|d_ptr
operator|->
name|transformation
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|exposeRegion
name|void
name|QTransformedScreen
operator|::
name|exposeRegion
parameter_list|(
name|QRegion
name|region
parameter_list|,
name|int
name|changing
parameter_list|)
block|{
if|if
condition|(
operator|!
name|data
operator|||
name|d_ptr
operator|->
name|transformation
operator|==
name|None
condition|)
block|{
name|QProxyScreen
operator|::
name|exposeRegion
argument_list|(
name|region
argument_list|,
name|changing
argument_list|)
expr_stmt|;
return|return;
block|}
name|QScreen
operator|::
name|exposeRegion
argument_list|(
name|region
argument_list|,
name|changing
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Rotates this screen object according to the specified \a transformation.      \sa transformation() */
end_comment
begin_function
DECL|function|setTransformation
name|void
name|QTransformedScreen
operator|::
name|setTransformation
parameter_list|(
name|Transformation
name|transformation
parameter_list|)
block|{
name|d_ptr
operator|->
name|transformation
operator|=
name|transformation
expr_stmt|;
name|QSize
name|size
init|=
name|mapFromDevice
argument_list|(
name|QSize
argument_list|(
name|dw
argument_list|,
name|dh
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|=
name|size
operator|.
name|width
argument_list|()
expr_stmt|;
name|h
operator|=
name|size
operator|.
name|height
argument_list|()
expr_stmt|;
specifier|const
name|QScreen
modifier|*
name|s
init|=
name|screen
argument_list|()
decl_stmt|;
name|size
operator|=
name|mapFromDevice
argument_list|(
name|QSize
argument_list|(
name|s
operator|->
name|physicalWidth
argument_list|()
argument_list|,
name|s
operator|->
name|physicalHeight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|physWidth
operator|=
name|size
operator|.
name|width
argument_list|()
expr_stmt|;
name|physHeight
operator|=
name|size
operator|.
name|height
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_REGION_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QTransformedScreen::setTransformation"
operator|<<
name|transformation
operator|<<
literal|"size"
operator|<<
name|w
operator|<<
name|h
operator|<<
literal|"dev size"
operator|<<
name|dw
operator|<<
name|dh
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|correctNormalized
specifier|static
specifier|inline
name|QRect
name|correctNormalized
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
block|{
specifier|const
name|int
name|x1
init|=
name|qMin
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|right
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|x2
init|=
name|qMax
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|right
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|y1
init|=
name|qMin
argument_list|(
name|r
operator|.
name|top
argument_list|()
argument_list|,
name|r
operator|.
name|bottom
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|y2
init|=
name|qMax
argument_list|(
name|r
operator|.
name|top
argument_list|()
argument_list|,
name|r
operator|.
name|bottom
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|QRect
argument_list|(
name|QPoint
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
argument_list|,
name|QPoint
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|DST
parameter_list|,
name|class
name|SRC
parameter_list|>
DECL|function|blit90
specifier|static
specifier|inline
name|void
name|blit90
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|topLeft
parameter_list|)
block|{
specifier|const
name|SRC
modifier|*
name|src
init|=
operator|(
specifier|const
name|SRC
operator|*
operator|)
operator|(
name|image
operator|.
name|scanLine
argument_list|(
name|rect
operator|.
name|top
argument_list|()
argument_list|)
operator|)
operator|+
name|rect
operator|.
name|left
argument_list|()
decl_stmt|;
name|DST
modifier|*
name|dest
init|=
operator|(
name|DST
operator|*
operator|)
operator|(
name|screen
operator|->
name|base
argument_list|()
operator|+
name|topLeft
operator|.
name|y
argument_list|()
operator|*
name|screen
operator|->
name|linestep
argument_list|()
operator|)
operator|+
name|topLeft
operator|.
name|x
argument_list|()
decl_stmt|;
name|qt_memrotate90
argument_list|(
name|src
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|image
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
name|dest
argument_list|,
name|screen
operator|->
name|linestep
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|DST
parameter_list|,
name|class
name|SRC
parameter_list|>
DECL|function|blit180
specifier|static
specifier|inline
name|void
name|blit180
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|topLeft
parameter_list|)
block|{
specifier|const
name|SRC
modifier|*
name|src
init|=
operator|(
specifier|const
name|SRC
operator|*
operator|)
operator|(
name|image
operator|.
name|scanLine
argument_list|(
name|rect
operator|.
name|top
argument_list|()
argument_list|)
operator|)
operator|+
name|rect
operator|.
name|left
argument_list|()
decl_stmt|;
name|DST
modifier|*
name|dest
init|=
operator|(
name|DST
operator|*
operator|)
operator|(
name|screen
operator|->
name|base
argument_list|()
operator|+
name|topLeft
operator|.
name|y
argument_list|()
operator|*
name|screen
operator|->
name|linestep
argument_list|()
operator|)
operator|+
name|topLeft
operator|.
name|x
argument_list|()
decl_stmt|;
name|qt_memrotate180
argument_list|(
name|src
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|image
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
name|dest
argument_list|,
name|screen
operator|->
name|linestep
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|DST
parameter_list|,
name|class
name|SRC
parameter_list|>
DECL|function|blit270
specifier|static
specifier|inline
name|void
name|blit270
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|topLeft
parameter_list|)
block|{
specifier|const
name|SRC
modifier|*
name|src
init|=
operator|(
specifier|const
name|SRC
operator|*
operator|)
operator|(
name|image
operator|.
name|scanLine
argument_list|(
name|rect
operator|.
name|top
argument_list|()
argument_list|)
operator|)
operator|+
name|rect
operator|.
name|left
argument_list|()
decl_stmt|;
name|DST
modifier|*
name|dest
init|=
operator|(
name|DST
operator|*
operator|)
operator|(
name|screen
operator|->
name|base
argument_list|()
operator|+
name|topLeft
operator|.
name|y
argument_list|()
operator|*
name|screen
operator|->
name|linestep
argument_list|()
operator|)
operator|+
name|topLeft
operator|.
name|x
argument_list|()
decl_stmt|;
name|qt_memrotate270
argument_list|(
name|src
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|image
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
name|dest
argument_list|,
name|screen
operator|->
name|linestep
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_typedef
DECL|typedef|BlitFunc
typedef|typedef
name|void
function_decl|(
modifier|*
name|BlitFunc
function_decl|)
parameter_list|(
name|QScreen
modifier|*
parameter_list|,
specifier|const
name|QImage
modifier|&
parameter_list|,
specifier|const
name|QRect
modifier|&
parameter_list|,
specifier|const
name|QPoint
modifier|&
parameter_list|)
function_decl|;
end_typedef
begin_define
DECL|macro|SET_BLIT_FUNC
define|#
directive|define
name|SET_BLIT_FUNC
parameter_list|(
name|dst
parameter_list|,
name|src
parameter_list|,
name|rotation
parameter_list|,
name|func
parameter_list|)
define|\
value|do {                                            \     switch (rotation) {                         \     case Rot90:                                 \         func = blit90<dst, src>;                \         break;                                  \     case Rot180:                                \         func = blit180<dst, src>;               \         break;                                  \     case Rot270:                                \         func = blit270<dst, src>;               \         break;                                  \     default:                                    \         break;                                  \     }                                           \ } while (0)
end_define
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|blit
name|void
name|QTransformedScreen
operator|::
name|blit
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
specifier|const
name|Transformation
name|trans
init|=
name|d_ptr
operator|->
name|transformation
decl_stmt|;
if|if
condition|(
name|trans
operator|==
name|None
condition|)
block|{
name|QProxyScreen
operator|::
name|blit
argument_list|(
name|image
argument_list|,
name|topLeft
argument_list|,
name|region
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|region
operator|.
name|rects
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|bound
init|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QScreen
operator|::
name|w
argument_list|,
name|QScreen
operator|::
name|h
argument_list|)
operator|&
name|QRect
argument_list|(
name|topLeft
argument_list|,
name|image
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|BlitFunc
name|func
init|=
literal|0
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_GENERIC
if|if
condition|(
name|d_ptr
operator|->
name|doGenericColors
operator|&&
name|depth
argument_list|()
operator|==
literal|16
condition|)
block|{
if|if
condition|(
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|16
condition|)
name|SET_BLIT_FUNC
argument_list|(
name|qrgb_generic16
argument_list|,
name|quint16
argument_list|,
name|trans
argument_list|,
name|func
argument_list|)
expr_stmt|;
else|else
name|SET_BLIT_FUNC
argument_list|(
name|qrgb_generic16
argument_list|,
name|quint32
argument_list|,
name|trans
argument_list|,
name|func
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
switch|switch
condition|(
name|depth
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_32
case|case
literal|32
case|:
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_16
if|if
condition|(
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|16
condition|)
name|SET_BLIT_FUNC
argument_list|(
name|quint32
argument_list|,
name|quint16
argument_list|,
name|trans
argument_list|,
name|func
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
name|SET_BLIT_FUNC
argument_list|(
name|quint32
argument_list|,
name|quint32
argument_list|,
name|trans
argument_list|,
name|func
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|QT_QWS_DEPTH_24
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_QWS_DEPTH18
argument_list|)
case|case
literal|24
case|:
case|case
literal|18
case|:
name|SET_BLIT_FUNC
argument_list|(
name|quint24
argument_list|,
name|quint24
argument_list|,
name|trans
argument_list|,
name|func
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|QT_QWS_DEPTH_16
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_QWS_DEPTH_15
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_QWS_DEPTH_12
argument_list|)
case|case
literal|16
case|:
if|#
directive|if
name|defined
name|QT_QWS_ROTATE_BGR
if|if
condition|(
name|pixelType
argument_list|()
operator|==
name|BGRPixel
operator|&&
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|16
condition|)
block|{
name|SET_BLIT_FUNC
argument_list|(
name|qbgr565
argument_list|,
name|quint16
argument_list|,
name|trans
argument_list|,
name|func
argument_list|)
expr_stmt|;
break|break;
block|}
comment|//fall-through here!!!
endif|#
directive|endif
case|case
literal|15
case|:
if|#
directive|if
name|defined
name|QT_QWS_ROTATE_BGR
if|if
condition|(
name|pixelType
argument_list|()
operator|==
name|BGRPixel
operator|&&
name|image
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_RGB555
condition|)
block|{
name|SET_BLIT_FUNC
argument_list|(
name|qbgr555
argument_list|,
name|qrgb555
argument_list|,
name|trans
argument_list|,
name|func
argument_list|)
expr_stmt|;
break|break;
block|}
comment|//fall-through here!!!
endif|#
directive|endif
case|case
literal|12
case|:
if|if
condition|(
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|16
condition|)
name|SET_BLIT_FUNC
argument_list|(
name|quint16
argument_list|,
name|quint16
argument_list|,
name|trans
argument_list|,
name|func
argument_list|)
expr_stmt|;
else|else
name|SET_BLIT_FUNC
argument_list|(
name|quint16
argument_list|,
name|quint32
argument_list|,
name|trans
argument_list|,
name|func
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_8
case|case
literal|8
case|:
if|if
condition|(
name|image
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_RGB444
condition|)
name|SET_BLIT_FUNC
argument_list|(
name|quint8
argument_list|,
name|qrgb444
argument_list|,
name|trans
argument_list|,
name|func
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|16
condition|)
name|SET_BLIT_FUNC
argument_list|(
name|quint8
argument_list|,
name|quint16
argument_list|,
name|trans
argument_list|,
name|func
argument_list|)
expr_stmt|;
else|else
name|SET_BLIT_FUNC
argument_list|(
name|quint8
argument_list|,
name|quint32
argument_list|,
name|trans
argument_list|,
name|func
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
default|default:
return|return;
block|}
if|if
condition|(
operator|!
name|func
condition|)
return|return;
name|QWSDisplay
operator|::
name|grab
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRect
name|r
init|=
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|&
name|bound
decl_stmt|;
name|QPoint
name|dst
decl_stmt|;
switch|switch
condition|(
name|trans
condition|)
block|{
case|case
name|Rot90
case|:
name|dst
operator|=
name|mapToDevice
argument_list|(
name|r
operator|.
name|topRight
argument_list|()
argument_list|,
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Rot180
case|:
name|dst
operator|=
name|mapToDevice
argument_list|(
name|r
operator|.
name|bottomRight
argument_list|()
argument_list|,
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Rot270
case|:
name|dst
operator|=
name|mapToDevice
argument_list|(
name|r
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|func
argument_list|(
name|this
argument_list|,
name|image
argument_list|,
name|r
operator|.
name|translated
argument_list|(
operator|-
name|topLeft
argument_list|)
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
name|QWSDisplay
operator|::
name|ungrab
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|solidFill
name|void
name|QTransformedScreen
operator|::
name|solidFill
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
specifier|const
name|QRegion
name|tr
init|=
name|mapToDevice
argument_list|(
name|region
argument_list|,
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|tr
operator|.
name|boundingRect
argument_list|()
operator|==
name|mapToDevice
argument_list|(
name|region
operator|.
name|boundingRect
argument_list|()
argument_list|,
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_REGION_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QTransformedScreen::solidFill region"
operator|<<
name|region
operator|<<
literal|"transformed"
operator|<<
name|tr
expr_stmt|;
endif|#
directive|endif
name|QProxyScreen
operator|::
name|solidFill
argument_list|(
name|color
argument_list|,
name|tr
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mapToDevice
name|QSize
name|QTransformedScreen
operator|::
name|mapToDevice
parameter_list|(
specifier|const
name|QSize
modifier|&
name|s
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|d_ptr
operator|->
name|transformation
condition|)
block|{
case|case
name|None
case|:
case|case
name|Rot180
case|:
break|break;
case|case
name|Rot90
case|:
case|case
name|Rot270
case|:
return|return
name|QSize
argument_list|(
name|s
operator|.
name|height
argument_list|()
argument_list|,
name|s
operator|.
name|width
argument_list|()
argument_list|)
return|;
break|break;
block|}
return|return
name|s
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mapFromDevice
name|QSize
name|QTransformedScreen
operator|::
name|mapFromDevice
parameter_list|(
specifier|const
name|QSize
modifier|&
name|s
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|d_ptr
operator|->
name|transformation
condition|)
block|{
case|case
name|None
case|:
case|case
name|Rot180
case|:
break|break;
case|case
name|Rot90
case|:
case|case
name|Rot270
case|:
return|return
name|QSize
argument_list|(
name|s
operator|.
name|height
argument_list|()
argument_list|,
name|s
operator|.
name|width
argument_list|()
argument_list|)
return|;
break|break;
block|}
return|return
name|s
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mapToDevice
name|QPoint
name|QTransformedScreen
operator|::
name|mapToDevice
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|,
specifier|const
name|QSize
modifier|&
name|s
parameter_list|)
specifier|const
block|{
name|QPoint
name|rp
argument_list|(
name|p
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|d_ptr
operator|->
name|transformation
condition|)
block|{
case|case
name|None
case|:
break|break;
case|case
name|Rot90
case|:
name|rp
operator|.
name|setX
argument_list|(
name|p
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setY
argument_list|(
name|s
operator|.
name|width
argument_list|()
operator|-
name|p
operator|.
name|x
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|Rot180
case|:
name|rp
operator|.
name|setX
argument_list|(
name|s
operator|.
name|width
argument_list|()
operator|-
name|p
operator|.
name|x
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setY
argument_list|(
name|s
operator|.
name|height
argument_list|()
operator|-
name|p
operator|.
name|y
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|Rot270
case|:
name|rp
operator|.
name|setX
argument_list|(
name|s
operator|.
name|height
argument_list|()
operator|-
name|p
operator|.
name|y
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setY
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|rp
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mapFromDevice
name|QPoint
name|QTransformedScreen
operator|::
name|mapFromDevice
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|,
specifier|const
name|QSize
modifier|&
name|s
parameter_list|)
specifier|const
block|{
name|QPoint
name|rp
argument_list|(
name|p
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|d_ptr
operator|->
name|transformation
condition|)
block|{
case|case
name|None
case|:
break|break;
case|case
name|Rot90
case|:
name|rp
operator|.
name|setX
argument_list|(
name|s
operator|.
name|height
argument_list|()
operator|-
name|p
operator|.
name|y
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setY
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Rot180
case|:
name|rp
operator|.
name|setX
argument_list|(
name|s
operator|.
name|width
argument_list|()
operator|-
name|p
operator|.
name|x
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setY
argument_list|(
name|s
operator|.
name|height
argument_list|()
operator|-
name|p
operator|.
name|y
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|Rot270
case|:
name|rp
operator|.
name|setX
argument_list|(
name|p
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setY
argument_list|(
name|s
operator|.
name|width
argument_list|()
operator|-
name|p
operator|.
name|x
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|rp
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mapToDevice
name|QRect
name|QTransformedScreen
operator|::
name|mapToDevice
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|,
specifier|const
name|QSize
modifier|&
name|s
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|r
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
name|QRect
name|tr
decl_stmt|;
switch|switch
condition|(
name|d_ptr
operator|->
name|transformation
condition|)
block|{
case|case
name|None
case|:
name|tr
operator|=
name|r
expr_stmt|;
break|break;
case|case
name|Rot90
case|:
name|tr
operator|.
name|setCoords
argument_list|(
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|s
operator|.
name|width
argument_list|()
operator|-
name|r
operator|.
name|x
argument_list|()
operator|-
literal|1
argument_list|,
name|r
operator|.
name|bottom
argument_list|()
argument_list|,
name|s
operator|.
name|width
argument_list|()
operator|-
name|r
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|Rot180
case|:
name|tr
operator|.
name|setCoords
argument_list|(
name|s
operator|.
name|width
argument_list|()
operator|-
name|r
operator|.
name|x
argument_list|()
operator|-
literal|1
argument_list|,
name|s
operator|.
name|height
argument_list|()
operator|-
name|r
operator|.
name|y
argument_list|()
operator|-
literal|1
argument_list|,
name|s
operator|.
name|width
argument_list|()
operator|-
name|r
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|,
name|s
operator|.
name|height
argument_list|()
operator|-
name|r
operator|.
name|bottom
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|Rot270
case|:
name|tr
operator|.
name|setCoords
argument_list|(
name|s
operator|.
name|height
argument_list|()
operator|-
name|r
operator|.
name|y
argument_list|()
operator|-
literal|1
argument_list|,
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|s
operator|.
name|height
argument_list|()
operator|-
name|r
operator|.
name|bottom
argument_list|()
operator|-
literal|1
argument_list|,
name|r
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|correctNormalized
argument_list|(
name|tr
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mapFromDevice
name|QRect
name|QTransformedScreen
operator|::
name|mapFromDevice
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|,
specifier|const
name|QSize
modifier|&
name|s
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|r
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
name|QRect
name|tr
decl_stmt|;
switch|switch
condition|(
name|d_ptr
operator|->
name|transformation
condition|)
block|{
case|case
name|None
case|:
name|tr
operator|=
name|r
expr_stmt|;
break|break;
case|case
name|Rot90
case|:
name|tr
operator|.
name|setCoords
argument_list|(
name|s
operator|.
name|height
argument_list|()
operator|-
name|r
operator|.
name|y
argument_list|()
operator|-
literal|1
argument_list|,
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|s
operator|.
name|height
argument_list|()
operator|-
name|r
operator|.
name|bottom
argument_list|()
operator|-
literal|1
argument_list|,
name|r
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Rot180
case|:
name|tr
operator|.
name|setCoords
argument_list|(
name|s
operator|.
name|width
argument_list|()
operator|-
name|r
operator|.
name|x
argument_list|()
operator|-
literal|1
argument_list|,
name|s
operator|.
name|height
argument_list|()
operator|-
name|r
operator|.
name|y
argument_list|()
operator|-
literal|1
argument_list|,
name|s
operator|.
name|width
argument_list|()
operator|-
name|r
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|,
name|s
operator|.
name|height
argument_list|()
operator|-
name|r
operator|.
name|bottom
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|Rot270
case|:
name|tr
operator|.
name|setCoords
argument_list|(
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|s
operator|.
name|width
argument_list|()
operator|-
name|r
operator|.
name|x
argument_list|()
operator|-
literal|1
argument_list|,
name|r
operator|.
name|bottom
argument_list|()
argument_list|,
name|s
operator|.
name|width
argument_list|()
operator|-
name|r
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|correctNormalized
argument_list|(
name|tr
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mapToDevice
name|QRegion
name|QTransformedScreen
operator|::
name|mapToDevice
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|,
specifier|const
name|QSize
modifier|&
name|s
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|d_ptr
operator|->
name|transformation
operator|==
name|None
condition|)
return|return
name|QProxyScreen
operator|::
name|mapToDevice
argument_list|(
name|rgn
argument_list|,
name|s
argument_list|)
return|;
ifdef|#
directive|ifdef
name|QT_REGION_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"mapToDevice size"
operator|<<
name|s
operator|<<
literal|"rgn:  "
operator|<<
name|rgn
expr_stmt|;
endif|#
directive|endif
name|QRect
name|tr
decl_stmt|;
name|QRegion
name|trgn
decl_stmt|;
name|QVector
argument_list|<
name|QRect
argument_list|>
name|a
init|=
name|rgn
operator|.
name|rects
argument_list|()
decl_stmt|;
specifier|const
name|QRect
modifier|*
name|r
init|=
name|a
operator|.
name|data
argument_list|()
decl_stmt|;
name|int
name|w
init|=
name|s
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|s
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|a
operator|.
name|size
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|d_ptr
operator|->
name|transformation
condition|)
block|{
case|case
name|None
case|:
break|break;
case|case
name|Rot90
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
operator|,
name|r
operator|++
control|)
block|{
name|tr
operator|.
name|setCoords
argument_list|(
name|r
operator|->
name|y
argument_list|()
argument_list|,
name|w
operator|-
name|r
operator|->
name|x
argument_list|()
operator|-
literal|1
argument_list|,
name|r
operator|->
name|bottom
argument_list|()
argument_list|,
name|w
operator|-
name|r
operator|->
name|right
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|trgn
operator||=
name|correctNormalized
argument_list|(
name|tr
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Rot180
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
operator|,
name|r
operator|++
control|)
block|{
name|tr
operator|.
name|setCoords
argument_list|(
name|w
operator|-
name|r
operator|->
name|x
argument_list|()
operator|-
literal|1
argument_list|,
name|h
operator|-
name|r
operator|->
name|y
argument_list|()
operator|-
literal|1
argument_list|,
name|w
operator|-
name|r
operator|->
name|right
argument_list|()
operator|-
literal|1
argument_list|,
name|h
operator|-
name|r
operator|->
name|bottom
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|trgn
operator||=
name|correctNormalized
argument_list|(
name|tr
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Rot270
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
operator|,
name|r
operator|++
control|)
block|{
name|tr
operator|.
name|setCoords
argument_list|(
name|h
operator|-
name|r
operator|->
name|y
argument_list|()
operator|-
literal|1
argument_list|,
name|r
operator|->
name|x
argument_list|()
argument_list|,
name|h
operator|-
name|r
operator|->
name|bottom
argument_list|()
operator|-
literal|1
argument_list|,
name|r
operator|->
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|trgn
operator||=
name|correctNormalized
argument_list|(
name|tr
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
ifdef|#
directive|ifdef
name|QT_REGION_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"mapToDevice trgn:  "
operator|<<
name|trgn
expr_stmt|;
endif|#
directive|endif
return|return
name|trgn
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mapFromDevice
name|QRegion
name|QTransformedScreen
operator|::
name|mapFromDevice
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|,
specifier|const
name|QSize
modifier|&
name|s
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|d_ptr
operator|->
name|transformation
operator|==
name|None
condition|)
return|return
name|QProxyScreen
operator|::
name|mapFromDevice
argument_list|(
name|rgn
argument_list|,
name|s
argument_list|)
return|;
ifdef|#
directive|ifdef
name|QT_REGION_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"fromDevice: realRegion count:  "
operator|<<
name|rgn
operator|.
name|rects
argument_list|()
operator|.
name|size
argument_list|()
operator|<<
literal|" isEmpty? "
operator|<<
name|rgn
operator|.
name|isEmpty
argument_list|()
operator|<<
literal|"  bounds:"
operator|<<
name|rgn
operator|.
name|boundingRect
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QRect
name|tr
decl_stmt|;
name|QRegion
name|trgn
decl_stmt|;
name|QVector
argument_list|<
name|QRect
argument_list|>
name|a
init|=
name|rgn
operator|.
name|rects
argument_list|()
decl_stmt|;
specifier|const
name|QRect
modifier|*
name|r
init|=
name|a
operator|.
name|data
argument_list|()
decl_stmt|;
name|int
name|w
init|=
name|s
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|s
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|a
operator|.
name|size
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|d_ptr
operator|->
name|transformation
condition|)
block|{
case|case
name|None
case|:
break|break;
case|case
name|Rot90
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
operator|,
name|r
operator|++
control|)
block|{
name|tr
operator|.
name|setCoords
argument_list|(
name|h
operator|-
name|r
operator|->
name|y
argument_list|()
operator|-
literal|1
argument_list|,
name|r
operator|->
name|x
argument_list|()
argument_list|,
name|h
operator|-
name|r
operator|->
name|bottom
argument_list|()
operator|-
literal|1
argument_list|,
name|r
operator|->
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|trgn
operator||=
name|correctNormalized
argument_list|(
name|tr
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Rot180
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
operator|,
name|r
operator|++
control|)
block|{
name|tr
operator|.
name|setCoords
argument_list|(
name|w
operator|-
name|r
operator|->
name|x
argument_list|()
operator|-
literal|1
argument_list|,
name|h
operator|-
name|r
operator|->
name|y
argument_list|()
operator|-
literal|1
argument_list|,
name|w
operator|-
name|r
operator|->
name|right
argument_list|()
operator|-
literal|1
argument_list|,
name|h
operator|-
name|r
operator|->
name|bottom
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|trgn
operator||=
name|correctNormalized
argument_list|(
name|tr
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Rot270
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
operator|,
name|r
operator|++
control|)
block|{
name|tr
operator|.
name|setCoords
argument_list|(
name|r
operator|->
name|y
argument_list|()
argument_list|,
name|w
operator|-
name|r
operator|->
name|x
argument_list|()
operator|-
literal|1
argument_list|,
name|r
operator|->
name|bottom
argument_list|()
argument_list|,
name|w
operator|-
name|r
operator|->
name|right
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|trgn
operator||=
name|correctNormalized
argument_list|(
name|tr
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
ifdef|#
directive|ifdef
name|QT_REGION_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"fromDevice: transRegion count: "
operator|<<
name|trgn
operator|.
name|rects
argument_list|()
operator|.
name|size
argument_list|()
operator|<<
literal|" isEmpty? "
operator|<<
name|trgn
operator|.
name|isEmpty
argument_list|()
operator|<<
literal|"  bounds:"
operator|<<
name|trgn
operator|.
name|boundingRect
argument_list|()
expr_stmt|;
endif|#
directive|endif
return|return
name|trgn
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|setDirty
name|void
name|QTransformedScreen
operator|::
name|setDirty
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
specifier|const
name|QRect
name|r
init|=
name|mapToDevice
argument_list|(
name|rect
argument_list|,
name|QSize
argument_list|(
name|width
argument_list|()
argument_list|,
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QProxyScreen
operator|::
name|setDirty
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|region
name|QRegion
name|QTransformedScreen
operator|::
name|region
parameter_list|()
specifier|const
block|{
name|QRegion
name|deviceRegion
init|=
name|QProxyScreen
operator|::
name|region
argument_list|()
decl_stmt|;
return|return
name|mapFromDevice
argument_list|(
name|deviceRegion
argument_list|,
name|QSize
argument_list|(
name|deviceWidth
argument_list|()
argument_list|,
name|deviceHeight
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_TRANSFORMED
end_comment
end_unit
