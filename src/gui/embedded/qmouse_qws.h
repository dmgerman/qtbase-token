begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QMOUSE_QWS_H
end_ifndef
begin_define
DECL|macro|QMOUSE_QWS_H
define|#
directive|define
name|QMOUSE_QWS_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qobject.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpolygon.h>
end_include
begin_function
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
parameter_list|(
name|Gui
parameter_list|)
name|class
name|QWSMouseHandlerPrivate
decl_stmt|;
DECL|variable|QScreen
name|class
name|QScreen
decl_stmt|;
name|class
name|Q_GUI_EXPORT
name|QWSPointerCalibrationData
decl_stmt|{ public:     enum Location
block|{
name|TopLeft
operator|=
literal|0
operator|,
name|BottomLeft
operator|=
literal|1
operator|,
name|BottomRight
operator|=
literal|2
operator|,
name|TopRight
operator|=
literal|3
operator|,
name|Center
operator|=
literal|4
operator|,
name|LastLocation
operator|=
name|Center
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|QPoint
name|devPoints
index|[
literal|5
index|]
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QPoint
name|screenPoints
index|[
literal|5
index|]
decl_stmt|;
end_decl_stmt
begin_decl_stmt
unit|};
name|class
name|Q_GUI_EXPORT
name|QWSMouseHandler
block|{
name|public
label|:
name|explicit
name|QWSMouseHandler
parameter_list|(
specifier|const
name|QString
modifier|&
name|driver
init|=
name|QString
argument_list|()
parameter_list|,
specifier|const
name|QString
modifier|&
name|device
init|=
name|QString
argument_list|()
parameter_list|)
function_decl|;
name|virtual
operator|~
name|QWSMouseHandler
argument_list|()
expr_stmt|;
name|virtual
name|void
name|clearCalibration
parameter_list|()
block|{}
name|virtual
name|void
name|calibrate
parameter_list|(
specifier|const
name|QWSPointerCalibrationData
modifier|*
parameter_list|)
block|{}
name|virtual
name|void
name|getCalibration
argument_list|(
name|QWSPointerCalibrationData
operator|*
argument_list|)
decl|const
block|{}
name|virtual
name|void
name|resume
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|void
name|suspend
parameter_list|()
init|=
literal|0
function_decl|;
name|void
name|limitToScreen
parameter_list|(
name|QPoint
modifier|&
name|pt
parameter_list|)
function_decl|;
name|void
name|mouseChanged
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|,
name|int
name|bstate
parameter_list|,
name|int
name|wheel
init|=
literal|0
parameter_list|)
function_decl|;
specifier|const
name|QPoint
operator|&
name|pos
argument_list|()
specifier|const
block|{
return|return
name|mousePos
return|;
block|}
name|void
name|setScreen
parameter_list|(
specifier|const
name|QScreen
modifier|*
name|screen
parameter_list|)
function_decl|;
name|protected
label|:
name|QPoint
modifier|&
name|mousePos
decl_stmt|;
name|QWSMouseHandlerPrivate
modifier|*
name|d_ptr
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QWSCalibratedMouseHandler
range|:
name|public
name|QWSMouseHandler
block|{
name|public
operator|:
name|explicit
name|QWSCalibratedMouseHandler
argument_list|(
specifier|const
name|QString
operator|&
name|driver
operator|=
name|QString
argument_list|()
argument_list|,
specifier|const
name|QString
operator|&
name|device
operator|=
name|QString
argument_list|()
argument_list|)
block|;
name|virtual
name|void
name|clearCalibration
argument_list|()
block|;
name|virtual
name|void
name|calibrate
argument_list|(
specifier|const
name|QWSPointerCalibrationData
operator|*
argument_list|)
block|;
name|virtual
name|void
name|getCalibration
argument_list|(
argument|QWSPointerCalibrationData *
argument_list|)
specifier|const
block|;
name|protected
operator|:
name|bool
name|sendFiltered
argument_list|(
argument|const QPoint&
argument_list|,
argument|int button
argument_list|)
block|;
name|QPoint
name|transform
argument_list|(
specifier|const
name|QPoint
operator|&
argument_list|)
block|;
name|void
name|readCalibration
argument_list|()
block|;
name|void
name|writeCalibration
argument_list|()
block|;
name|void
name|setFilterSize
argument_list|(
name|int
argument_list|)
block|;
name|private
operator|:
name|int
name|a
block|,
name|b
block|,
name|c
block|;
name|int
name|d
block|,
name|e
block|,
name|f
block|;
name|int
name|s
block|;
name|QPolygon
name|samples
block|;
name|int
name|currSample
block|;
name|int
name|numSamples
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QMOUSE_QWS_H
end_comment
end_unit
