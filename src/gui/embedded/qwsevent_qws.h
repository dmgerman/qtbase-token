begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QWSEVENT_QWS_H
end_ifndef
begin_define
DECL|macro|QWSEVENT_QWS_H
define|#
directive|define
name|QWSEVENT_QWS_H
end_define
begin_include
include|#
directive|include
file|<QtGui/qwsutils_qws.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qwsprotocolitem_qws.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qrect.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qregion.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvector.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Gui
argument_list|)
decl|struct
name|QWSMouseEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSProtocolItem
name|struct
name|QWSEvent
range|:
name|QWSProtocolItem
block|{
DECL|function|QWSEvent
name|QWSEvent
argument_list|(
argument|int t
argument_list|,
argument|int len
argument_list|,
argument|char *ptr
argument_list|)
operator|:
name|QWSProtocolItem
argument_list|(
argument|t
argument_list|,
argument|len
argument_list|,
argument|ptr
argument_list|)
block|{}
expr|enum
DECL|enum|Type
name|Type
block|{
DECL|enumerator|NoEvent
name|NoEvent
block|,
DECL|enumerator|Connected
name|Connected
block|,
DECL|enumerator|Mouse
name|Mouse
block|,
DECL|enumerator|Focus
name|Focus
block|,
DECL|enumerator|Key
name|Key
block|,
DECL|enumerator|Region
name|Region
block|,
DECL|enumerator|Creation
name|Creation
block|,
DECL|enumerator|PropertyNotify
name|PropertyNotify
block|,
DECL|enumerator|PropertyReply
name|PropertyReply
block|,
DECL|enumerator|SelectionClear
name|SelectionClear
block|,
DECL|enumerator|SelectionRequest
name|SelectionRequest
block|,
DECL|enumerator|SelectionNotify
name|SelectionNotify
block|,
DECL|enumerator|MaxWindowRect
name|MaxWindowRect
block|,
DECL|enumerator|QCopMessage
name|QCopMessage
block|,
DECL|enumerator|WindowOperation
name|WindowOperation
block|,
DECL|enumerator|IMEvent
name|IMEvent
block|,
DECL|enumerator|IMQuery
name|IMQuery
block|,
DECL|enumerator|IMInit
name|IMInit
block|,
DECL|enumerator|Embed
name|Embed
block|,
DECL|enumerator|Font
name|Font
block|,
DECL|enumerator|ScreenTransformation
name|ScreenTransformation
block|,
DECL|enumerator|NEvent
name|NEvent
block|}
block|;
DECL|function|asMouse
name|QWSMouseEvent
operator|*
name|asMouse
argument_list|()
block|{
return|return
name|type
operator|==
name|Mouse
operator|?
name|reinterpret_cast
operator|<
name|QWSMouseEvent
operator|*
operator|>
operator|(
name|this
operator|)
operator|:
literal|0
return|;
block|}
DECL|function|window
name|int
name|window
argument_list|()
block|{
return|return
operator|*
operator|(
name|reinterpret_cast
operator|<
name|int
operator|*
operator|>
operator|(
name|simpleDataPtr
operator|)
operator|)
return|;
block|}
DECL|function|window
name|int
name|window
argument_list|()
specifier|const
block|{
return|return
operator|*
operator|(
name|reinterpret_cast
operator|<
name|int
operator|*
operator|>
operator|(
name|simpleDataPtr
operator|)
operator|)
return|;
block|}
specifier|static
name|QWSEvent
operator|*
name|factory
argument_list|(
argument|int type
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|//All events must start with windowID
end_comment
begin_decl_stmt
DECL|struct|QWSEvent
name|struct
name|QWSConnectedEvent
range|:
name|QWSEvent
block|{
DECL|function|QWSConnectedEvent
name|QWSConnectedEvent
argument_list|()
operator|:
name|QWSEvent
argument_list|(
argument|QWSEvent::Connected
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
DECL|function|setData
name|void
name|setData
argument_list|(
argument|const char *d
argument_list|,
argument|int len
argument_list|,
argument|bool allocateMem = true
argument_list|)
block|{
name|QWSEvent
operator|::
name|setData
argument_list|(
name|d
argument_list|,
name|len
argument_list|,
name|allocateMem
argument_list|)
block|;
name|display
operator|=
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|rawDataPtr
operator|)
block|;     }
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|window
name|int
name|window
block|;
DECL|member|len
name|int
name|len
block|;
DECL|member|clientId
name|int
name|clientId
block|;
DECL|member|servershmid
name|int
name|servershmid
block|;     }
DECL|member|simpleData
name|simpleData
block|;
DECL|member|display
name|char
operator|*
name|display
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSEvent
name|struct
name|QWSMaxWindowRectEvent
range|:
name|QWSEvent
block|{
DECL|function|QWSMaxWindowRectEvent
name|QWSMaxWindowRectEvent
argument_list|()
operator|:
name|QWSEvent
argument_list|(
argument|MaxWindowRect
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{ }
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|window
name|int
name|window
block|;
DECL|member|rect
name|QRect
name|rect
block|;     }
DECL|member|simpleData
name|simpleData
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSEvent
name|struct
name|QWSMouseEvent
range|:
name|QWSEvent
block|{
DECL|function|QWSMouseEvent
name|QWSMouseEvent
argument_list|()
operator|:
name|QWSEvent
argument_list|(
argument|QWSEvent::Mouse
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|window
name|int
name|window
block|;
DECL|member|x_root
DECL|member|y_root
DECL|member|state
DECL|member|delta
name|int
name|x_root
block|,
name|y_root
block|,
name|state
block|,
name|delta
block|;
DECL|member|time
name|int
name|time
block|;
comment|// milliseconds
block|}
DECL|member|simpleData
name|simpleData
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSEvent
name|struct
name|QWSFocusEvent
range|:
name|QWSEvent
block|{
DECL|function|QWSFocusEvent
name|QWSFocusEvent
argument_list|()
operator|:
name|QWSEvent
argument_list|(
argument|QWSEvent::Focus
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{
name|memset
argument_list|(
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
operator|&
name|simpleData
operator|)
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|simpleData
argument_list|)
argument_list|)
block|; }
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|window
name|int
name|window
block|;
DECL|member|get_focus
name|uint
name|get_focus
operator|:
literal|1
block|;     }
DECL|member|simpleData
name|simpleData
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSEvent
name|struct
name|QWSKeyEvent
range|:
name|QWSEvent
block|{
DECL|function|QWSKeyEvent
name|QWSKeyEvent
argument_list|()
operator|:
name|QWSEvent
argument_list|(
argument|QWSEvent::Key
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|window
name|int
name|window
block|;
DECL|member|keycode
name|uint
name|keycode
block|;
DECL|member|modifiers
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
block|;
DECL|member|unicode
name|ushort
name|unicode
block|;
DECL|member|is_press
name|uint
name|is_press
operator|:
literal|1
block|;
DECL|member|is_auto_repeat
name|uint
name|is_auto_repeat
operator|:
literal|1
block|;     }
DECL|member|simpleData
name|simpleData
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSEvent
name|struct
name|QWSCreationEvent
range|:
name|QWSEvent
block|{
DECL|function|QWSCreationEvent
name|QWSCreationEvent
argument_list|()
operator|:
name|QWSEvent
argument_list|(
argument|QWSEvent::Creation
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|objectid
name|int
name|objectid
block|;
DECL|member|count
name|int
name|count
block|;     }
DECL|member|simpleData
name|simpleData
block|; }
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_PROPERTIES
end_ifndef
begin_decl_stmt
DECL|struct|QWSEvent
name|struct
name|QWSPropertyNotifyEvent
range|:
name|QWSEvent
block|{
DECL|function|QWSPropertyNotifyEvent
name|QWSPropertyNotifyEvent
argument_list|()
operator|:
name|QWSEvent
argument_list|(
argument|QWSEvent::PropertyNotify
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
expr|enum
DECL|enum|State
name|State
block|{
DECL|enumerator|PropertyNewValue
name|PropertyNewValue
block|,
DECL|enumerator|PropertyDeleted
name|PropertyDeleted
block|}
block|;     struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|window
name|int
name|window
block|;
DECL|member|property
name|int
name|property
block|;
DECL|member|state
name|int
name|state
block|;     }
DECL|member|simpleData
name|simpleData
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|struct|QWSEvent
name|struct
name|QWSSelectionClearEvent
range|:
name|QWSEvent
block|{
DECL|function|QWSSelectionClearEvent
name|QWSSelectionClearEvent
argument_list|()
operator|:
name|QWSEvent
argument_list|(
argument|QWSEvent::SelectionClear
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|window
name|int
name|window
block|;     }
DECL|member|simpleData
name|simpleData
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSEvent
name|struct
name|QWSSelectionRequestEvent
range|:
name|QWSEvent
block|{
DECL|function|QWSSelectionRequestEvent
name|QWSSelectionRequestEvent
argument_list|()
operator|:
name|QWSEvent
argument_list|(
argument|QWSEvent::SelectionRequest
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|window
name|int
name|window
block|;
DECL|member|requestor
name|int
name|requestor
block|;
comment|// window which wants the selection
DECL|member|property
name|int
name|property
block|;
comment|// property on requestor into which the selection should be stored, normally QWSProperty::PropSelection
DECL|member|mimeTypes
name|int
name|mimeTypes
block|;
comment|// Value is stored in the property mimeType on the requestor window. This value may contain
comment|// multiple mimeTypes separated by ;; where the order reflects the priority
block|}
DECL|member|simpleData
name|simpleData
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSEvent
name|struct
name|QWSSelectionNotifyEvent
range|:
name|QWSEvent
block|{
DECL|function|QWSSelectionNotifyEvent
name|QWSSelectionNotifyEvent
argument_list|()
operator|:
name|QWSEvent
argument_list|(
argument|QWSEvent::SelectionNotify
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|window
name|int
name|window
block|;
DECL|member|requestor
name|int
name|requestor
block|;
comment|// the window which wanted the selection and to which this event is sent
DECL|member|property
name|int
name|property
block|;
comment|// property of requestor in which the data of the selection is stored
DECL|member|mimeType
name|int
name|mimeType
block|;
comment|// a property on the requestor in which the mime type in which the selection is, is stored
block|}
DECL|member|simpleData
name|simpleData
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|//complex events:
end_comment
begin_decl_stmt
DECL|struct|QWSEvent
name|struct
name|QWSRegionEvent
range|:
name|QWSEvent
block|{
DECL|function|QWSRegionEvent
name|QWSRegionEvent
argument_list|()
operator|:
name|QWSEvent
argument_list|(
argument|QWSEvent::Region
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{
name|memset
argument_list|(
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
operator|&
name|simpleData
operator|)
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|simpleData
argument_list|)
argument_list|)
block|; }
DECL|function|setData
name|void
name|setData
argument_list|(
argument|const char *d
argument_list|,
argument|int len
argument_list|,
argument|bool allocateMem = true
argument_list|)
block|{
name|QWSEvent
operator|::
name|setData
argument_list|(
name|d
argument_list|,
name|len
argument_list|,
name|allocateMem
argument_list|)
block|;
name|rectangles
operator|=
name|reinterpret_cast
operator|<
name|QRect
operator|*
operator|>
operator|(
name|rawDataPtr
operator|)
block|;     }
DECL|function|setData
name|void
name|setData
argument_list|(
argument|int winId
argument_list|,
argument|const QRegion&region
argument_list|,
argument|uint type
argument_list|)
block|{
specifier|const
name|QVector
operator|<
name|QRect
operator|>
name|rects
operator|=
name|region
operator|.
name|rects
argument_list|()
block|;
name|setData
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|rects
operator|.
name|constData
argument_list|()
operator|)
argument_list|,
name|rects
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|QRect
argument_list|)
argument_list|)
block|;
name|simpleData
operator|.
name|window
operator|=
name|winId
block|;
name|simpleData
operator|.
name|nrectangles
operator|=
name|rects
operator|.
name|size
argument_list|()
block|;
name|simpleData
operator|.
name|type
operator|=
name|type
block|;
ifdef|#
directive|ifdef
name|QT_QWS_CLIENTBLIT
name|simpleData
operator|.
name|id
operator|=
literal|0
block|;
endif|#
directive|endif
block|}
expr|enum
DECL|enum|Type
DECL|enumerator|Allocation
name|Type
block|{
name|Allocation
ifdef|#
directive|ifdef
name|QT_QWS_CLIENTBLIT
block|,
DECL|enumerator|DirectPaint
name|DirectPaint
endif|#
directive|endif
block|}
block|;     struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|window
name|int
name|window
block|;
DECL|member|nrectangles
name|int
name|nrectangles
block|;
ifdef|#
directive|ifdef
name|QT_QWS_CLIENTBLIT
DECL|member|id
name|int
name|id
block|;
endif|#
directive|endif
DECL|member|type
name|uint
name|type
operator|:
literal|8
block|;     }
DECL|member|simpleData
name|simpleData
block|;
DECL|member|rectangles
name|QRect
operator|*
name|rectangles
block|; }
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWSEMBEDWIDGET
end_ifndef
begin_decl_stmt
DECL|struct|QWSEvent
name|struct
name|QWSEmbedEvent
range|:
name|QWSEvent
block|{
DECL|function|QWSEmbedEvent
name|QWSEmbedEvent
argument_list|()
operator|:
name|QWSEvent
argument_list|(
argument|QWSEvent::Embed
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
expr|enum
DECL|enum|Type
DECL|enumerator|StartEmbed
DECL|enumerator|StopEmbed
DECL|enumerator|Region
name|Type
block|{
name|StartEmbed
operator|=
literal|1
block|,
name|StopEmbed
operator|=
literal|2
block|,
name|Region
operator|=
literal|4
block|}
block|;
DECL|function|setData
name|void
name|setData
argument_list|(
argument|const char *d
argument_list|,
argument|int len
argument_list|,
argument|bool allocateMem = true
argument_list|)
block|{
name|QWSEvent
operator|::
name|setData
argument_list|(
name|d
argument_list|,
name|len
argument_list|,
name|allocateMem
argument_list|)
block|;
name|region
operator|.
name|setRects
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|QRect
operator|*
operator|>
operator|(
name|rawDataPtr
operator|)
argument_list|,
name|simpleData
operator|.
name|nrectangles
argument_list|)
block|;     }
DECL|function|setData
name|void
name|setData
argument_list|(
argument|int winId
argument_list|,
argument|Type type
argument_list|,
argument|const QRegion&reg = QRegion()
argument_list|)
block|{
name|simpleData
operator|.
name|window
operator|=
name|winId
block|;
name|simpleData
operator|.
name|nrectangles
operator|=
name|reg
operator|.
name|rects
argument_list|()
operator|.
name|size
argument_list|()
block|;
name|simpleData
operator|.
name|type
operator|=
name|type
block|;
name|region
operator|=
name|reg
block|;
specifier|const
name|QVector
operator|<
name|QRect
operator|>
name|rects
operator|=
name|reg
operator|.
name|rects
argument_list|()
block|;
name|QWSEvent
operator|::
name|setData
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|rects
operator|.
name|data
argument_list|()
operator|)
argument_list|,
name|rects
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|QRect
argument_list|)
argument_list|)
block|;     }
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|window
name|int
name|window
block|;
DECL|member|nrectangles
name|int
name|nrectangles
block|;
DECL|member|type
name|Type
name|type
block|;     }
DECL|member|simpleData
name|simpleData
block|;
DECL|member|region
name|QRegion
name|region
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWSEMBEDWIDGET
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_PROPERTIES
end_ifndef
begin_decl_stmt
DECL|struct|QWSEvent
name|struct
name|QWSPropertyReplyEvent
range|:
name|QWSEvent
block|{
DECL|function|QWSPropertyReplyEvent
name|QWSPropertyReplyEvent
argument_list|()
operator|:
name|QWSEvent
argument_list|(
argument|QWSEvent::PropertyReply
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
DECL|function|setData
name|void
name|setData
argument_list|(
argument|const char *d
argument_list|,
argument|int len
argument_list|,
argument|bool allocateMem = true
argument_list|)
block|{
name|QWSEvent
operator|::
name|setData
argument_list|(
name|d
argument_list|,
name|len
argument_list|,
name|allocateMem
argument_list|)
block|;
name|data
operator|=
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|rawDataPtr
operator|)
block|;     }
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|window
name|int
name|window
block|;
DECL|member|property
name|int
name|property
block|;
DECL|member|len
name|int
name|len
block|;     }
DECL|member|simpleData
name|simpleData
block|;
DECL|member|data
name|char
operator|*
name|data
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_QWS_PROPERTIES
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_COP
end_ifndef
begin_decl_stmt
DECL|struct|QWSEvent
name|struct
name|QWSQCopMessageEvent
range|:
name|QWSEvent
block|{
DECL|function|QWSQCopMessageEvent
name|QWSQCopMessageEvent
argument_list|()
operator|:
name|QWSEvent
argument_list|(
argument|QWSEvent::QCopMessage
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{
name|memset
argument_list|(
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
operator|&
name|simpleData
operator|)
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|simpleData
argument_list|)
argument_list|)
block|; }
DECL|function|setData
name|void
name|setData
argument_list|(
argument|const char *d
argument_list|,
argument|int len
argument_list|,
argument|bool allocateMem = true
argument_list|)
block|{
name|QWSEvent
operator|::
name|setData
argument_list|(
name|d
argument_list|,
name|len
argument_list|,
name|allocateMem
argument_list|)
block|;
name|char
operator|*
name|p
operator|=
name|rawDataPtr
block|;
name|channel
operator|=
name|QByteArray
argument_list|(
name|p
argument_list|,
name|simpleData
operator|.
name|lchannel
argument_list|)
block|;
name|p
operator|+=
name|simpleData
operator|.
name|lchannel
block|;
name|message
operator|=
name|QByteArray
argument_list|(
name|p
argument_list|,
name|simpleData
operator|.
name|lmessage
argument_list|)
block|;
name|p
operator|+=
name|simpleData
operator|.
name|lmessage
block|;
name|data
operator|=
name|QByteArray
argument_list|(
name|p
argument_list|,
name|simpleData
operator|.
name|ldata
argument_list|)
block|;     }
DECL|function|setDataDirect
name|void
name|setDataDirect
argument_list|(
argument|const char *d
argument_list|,
argument|int len
argument_list|)
block|{
name|QWSEvent
operator|::
name|setData
argument_list|(
name|d
argument_list|,
name|len
argument_list|,
name|false
argument_list|)
block|;
name|deleteRaw
operator|=
name|true
block|;     }
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|is_response
name|bool
name|is_response
block|;
DECL|member|lchannel
name|int
name|lchannel
block|;
DECL|member|lmessage
name|int
name|lmessage
block|;
DECL|member|ldata
name|int
name|ldata
block|;     }
DECL|member|simpleData
name|simpleData
block|;
DECL|member|channel
name|QByteArray
name|channel
block|;
DECL|member|message
name|QByteArray
name|message
block|;
DECL|member|data
name|QByteArray
name|data
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|struct|QWSEvent
name|struct
name|QWSWindowOperationEvent
range|:
name|QWSEvent
block|{
DECL|function|QWSWindowOperationEvent
name|QWSWindowOperationEvent
argument_list|()
operator|:
name|QWSEvent
argument_list|(
argument|WindowOperation
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{ }
expr|enum
DECL|enum|Operation
DECL|enumerator|Show
DECL|enumerator|Hide
DECL|enumerator|ShowMaximized
DECL|enumerator|ShowNormal
DECL|enumerator|ShowMinimized
DECL|enumerator|Close
name|Operation
block|{
name|Show
block|,
name|Hide
block|,
name|ShowMaximized
block|,
name|ShowNormal
block|,
name|ShowMinimized
block|,
name|Close
block|}
block|;     struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|window
name|int
name|window
block|;
DECL|member|op
name|Operation
name|op
block|;     }
DECL|member|simpleData
name|simpleData
block|; }
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_INPUTMETHODS
end_ifndef
begin_decl_stmt
DECL|struct|QWSEvent
name|struct
name|QWSIMEvent
range|:
name|QWSEvent
block|{
DECL|function|QWSIMEvent
name|QWSIMEvent
argument_list|()
operator|:
name|QWSEvent
argument_list|(
argument|IMEvent
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{
name|memset
argument_list|(
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
operator|&
name|simpleData
operator|)
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|simpleData
argument_list|)
argument_list|)
block|; }
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|window
name|int
name|window
block|;
DECL|member|replaceFrom
name|int
name|replaceFrom
block|;
DECL|member|replaceLength
name|int
name|replaceLength
block|;     }
DECL|member|simpleData
name|simpleData
block|;
DECL|function|setData
name|void
name|setData
argument_list|(
argument|const char *d
argument_list|,
argument|int len
argument_list|,
argument|bool allocateMem = true
argument_list|)
block|{
name|QWSEvent
operator|::
name|setData
argument_list|(
name|d
argument_list|,
name|len
argument_list|,
name|allocateMem
argument_list|)
block|;
name|streamingData
operator|=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|rawDataPtr
argument_list|,
name|len
argument_list|)
block|;     }
DECL|member|streamingData
name|QByteArray
name|streamingData
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSEvent
name|struct
name|QWSIMInitEvent
range|:
name|QWSEvent
block|{
DECL|function|QWSIMInitEvent
name|QWSIMInitEvent
argument_list|()
operator|:
name|QWSEvent
argument_list|(
argument|IMInit
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{
name|memset
argument_list|(
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
operator|&
name|simpleData
operator|)
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|simpleData
argument_list|)
argument_list|)
block|; }
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|window
name|int
name|window
block|;
DECL|member|existence
name|int
name|existence
block|;     }
DECL|member|simpleData
name|simpleData
block|;
DECL|function|setData
name|void
name|setData
argument_list|(
argument|const char *d
argument_list|,
argument|int len
argument_list|,
argument|bool allocateMem = true
argument_list|)
block|{
name|QWSEvent
operator|::
name|setData
argument_list|(
name|d
argument_list|,
name|len
argument_list|,
name|allocateMem
argument_list|)
block|;
name|streamingData
operator|=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|rawDataPtr
argument_list|,
name|len
argument_list|)
block|;     }
DECL|member|streamingData
name|QByteArray
name|streamingData
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSEvent
name|struct
name|QWSIMQueryEvent
range|:
name|QWSEvent
block|{
DECL|function|QWSIMQueryEvent
name|QWSIMQueryEvent
argument_list|()
operator|:
name|QWSEvent
argument_list|(
argument|QWSEvent::IMQuery
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|window
name|int
name|window
block|;
DECL|member|property
name|int
name|property
block|;     }
DECL|member|simpleData
name|simpleData
block|;  }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|struct|QWSEvent
name|struct
name|QWSFontEvent
range|:
name|QWSEvent
block|{
DECL|function|QWSFontEvent
name|QWSFontEvent
argument_list|()
operator|:
name|QWSEvent
argument_list|(
argument|QWSEvent::Font
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
expr|enum
DECL|enum|EventType
name|EventType
block|{
DECL|enumerator|FontRemoved
name|FontRemoved
block|}
block|;
DECL|function|setData
name|void
name|setData
argument_list|(
argument|const char *d
argument_list|,
argument|int len
argument_list|,
argument|bool allocateMem = true
argument_list|)
block|{
name|QWSEvent
operator|::
name|setData
argument_list|(
name|d
argument_list|,
name|len
argument_list|,
name|allocateMem
argument_list|)
block|;
name|fontName
operator|=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|rawDataPtr
argument_list|,
name|len
argument_list|)
block|;     }
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|type
name|uchar
name|type
block|;     }
DECL|member|simpleData
name|simpleData
block|;
DECL|member|fontName
name|QByteArray
name|fontName
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QWSEvent
name|struct
name|QWSScreenTransformationEvent
range|:
name|QWSEvent
block|{
DECL|function|QWSScreenTransformationEvent
name|QWSScreenTransformationEvent
argument_list|()
operator|:
name|QWSEvent
argument_list|(
argument|QWSEvent::ScreenTransformation
argument_list|,
argument|sizeof(simpleData)
argument_list|,
argument|reinterpret_cast<char*>(&simpleData)
argument_list|)
block|{}
expr|struct
DECL|struct|SimpleData
name|SimpleData
block|{
DECL|member|screen
name|int
name|screen
block|;
DECL|member|transformation
name|int
name|transformation
block|;     }
DECL|member|simpleData
name|simpleData
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QWSEVENT_QWS_H
end_comment
end_unit
