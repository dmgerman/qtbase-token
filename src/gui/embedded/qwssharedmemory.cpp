begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwssharedmemory_p.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_QWS_MULTIPROCESS
argument_list|)
end_if
begin_include
include|#
directive|include
file|<sys/shm.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QWSSharedMemory
name|QWSSharedMemory
operator|::
name|QWSSharedMemory
parameter_list|()
member_init_list|:
name|shmBase
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|shmSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|character
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|shmId
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|key
argument_list|(
operator|-
literal|1
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QWSSharedMemory
name|QWSSharedMemory
operator|::
name|~
name|QWSSharedMemory
parameter_list|()
block|{
name|detach
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*   man page says:     On  Linux,  it is possible to attach a shared memory segment even if it     is already marked to be deleted.  However, POSIX.1-2001 does not  spec-     ify this behaviour and many other implementations do not support it. */
end_comment
begin_function
DECL|function|create
name|bool
name|QWSSharedMemory
operator|::
name|create
parameter_list|(
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|shmId
operator|!=
operator|-
literal|1
condition|)
name|detach
argument_list|()
expr_stmt|;
name|shmId
operator|=
name|shmget
argument_list|(
name|IPC_PRIVATE
argument_list|,
name|size
argument_list|,
name|IPC_CREAT
operator||
literal|0600
argument_list|)
expr_stmt|;
if|if
condition|(
name|shmId
operator|==
operator|-
literal|1
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_SHM_DEBUG
name|perror
argument_list|(
literal|"QWSSharedMemory::create allocating shared memory"
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"Error allocating shared memory of size %d"
argument_list|,
name|size
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|false
return|;
block|}
name|shmBase
operator|=
name|shmat
argument_list|(
name|shmId
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|shmctl
argument_list|(
name|shmId
argument_list|,
name|IPC_RMID
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|shmBase
operator|==
operator|(
name|void
operator|*
operator|)
operator|-
literal|1
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_SHM_DEBUG
name|perror
argument_list|(
literal|"QWSSharedMemory::create attaching to shared memory"
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"Error attaching to shared memory id %d"
argument_list|,
name|shmId
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|shmBase
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|attach
name|bool
name|QWSSharedMemory
operator|::
name|attach
parameter_list|(
name|int
name|id
parameter_list|)
block|{
if|if
condition|(
name|shmId
operator|==
name|id
condition|)
return|return
name|id
operator|!=
operator|-
literal|1
return|;
if|if
condition|(
name|shmId
operator|!=
operator|-
literal|1
condition|)
name|detach
argument_list|()
expr_stmt|;
name|shmBase
operator|=
name|shmat
argument_list|(
name|id
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|shmBase
operator|==
operator|(
name|void
operator|*
operator|)
operator|-
literal|1
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_SHM_DEBUG
name|perror
argument_list|(
literal|"QWSSharedMemory::attach attaching to shared memory"
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"Error attaching to shared memory 0x%x of size %d"
argument_list|,
name|id
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|shmBase
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
name|shmId
operator|=
name|id
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|detach
name|void
name|QWSSharedMemory
operator|::
name|detach
parameter_list|()
block|{
if|if
condition|(
operator|!
name|shmBase
condition|)
return|return;
name|shmdt
argument_list|(
name|shmBase
argument_list|)
expr_stmt|;
name|shmBase
operator|=
literal|0
expr_stmt|;
name|shmSize
operator|=
literal|0
expr_stmt|;
name|shmId
operator|=
operator|-
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setPermissions
name|void
name|QWSSharedMemory
operator|::
name|setPermissions
parameter_list|(
name|mode_t
name|mode
parameter_list|)
block|{
name|struct
name|shmid_ds
name|shm
decl_stmt|;
name|shmctl
argument_list|(
name|shmId
argument_list|,
name|IPC_STAT
argument_list|,
operator|&
name|shm
argument_list|)
expr_stmt|;
name|shm
operator|.
name|shm_perm
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
name|shmctl
argument_list|(
name|shmId
argument_list|,
name|IPC_SET
argument_list|,
operator|&
name|shm
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|size
name|int
name|QWSSharedMemory
operator|::
name|size
parameter_list|()
specifier|const
block|{
name|struct
name|shmid_ds
name|shm
decl_stmt|;
name|shmctl
argument_list|(
name|shmId
argument_list|,
name|IPC_STAT
argument_list|,
operator|&
name|shm
argument_list|)
expr_stmt|;
return|return
name|shm
operator|.
name|shm_segsz
return|;
block|}
end_function
begin_comment
comment|// old API
end_comment
begin_constructor
DECL|function|QWSSharedMemory
name|QWSSharedMemory
operator|::
name|QWSSharedMemory
parameter_list|(
name|int
name|size
parameter_list|,
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
name|char
name|c
parameter_list|)
block|{
name|shmSize
operator|=
name|size
expr_stmt|;
name|shmFile
operator|=
name|filename
expr_stmt|;
name|shmBase
operator|=
literal|0
expr_stmt|;
name|shmId
operator|=
operator|-
literal|1
expr_stmt|;
name|character
operator|=
name|c
expr_stmt|;
name|key
operator|=
name|ftok
argument_list|(
name|shmFile
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|create
name|bool
name|QWSSharedMemory
operator|::
name|create
parameter_list|()
block|{
name|shmId
operator|=
name|shmget
argument_list|(
name|key
argument_list|,
name|shmSize
argument_list|,
name|IPC_CREAT
operator||
literal|0666
argument_list|)
expr_stmt|;
return|return
operator|(
name|shmId
operator|!=
operator|-
literal|1
operator|)
return|;
block|}
end_function
begin_function
DECL|function|destroy
name|void
name|QWSSharedMemory
operator|::
name|destroy
parameter_list|()
block|{
if|if
condition|(
name|shmId
operator|!=
operator|-
literal|1
condition|)
name|shmctl
argument_list|(
name|shmId
argument_list|,
name|IPC_RMID
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|attach
name|bool
name|QWSSharedMemory
operator|::
name|attach
parameter_list|()
block|{
if|if
condition|(
name|shmId
operator|==
operator|-
literal|1
condition|)
name|shmId
operator|=
name|shmget
argument_list|(
name|key
argument_list|,
name|shmSize
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|shmBase
operator|=
name|shmat
argument_list|(
name|shmId
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|long
operator|)
name|shmBase
operator|==
operator|-
literal|1
condition|)
name|shmBase
operator|=
literal|0
expr_stmt|;
return|return
operator|(
name|long
operator|)
name|shmBase
operator|!=
literal|0
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_MULTIPROCESS
end_comment
end_unit
