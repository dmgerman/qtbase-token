begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSCREENTRANSFORMED_QWS_H
end_ifndef
begin_define
DECL|macro|QSCREENTRANSFORMED_QWS_H
define|#
directive|define
name|QSCREENTRANSFORMED_QWS_H
end_define
begin_include
include|#
directive|include
file|<QtGui/qscreenproxy_qws.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Gui
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_QWS_TRANSFORMED
name|class
name|QTransformedScreenPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_AUTOTEST_EXPORT
name|QTransformedScreen
range|:
name|public
name|QProxyScreen
block|{
name|public
operator|:
name|explicit
name|QTransformedScreen
argument_list|(
argument|int display_id
argument_list|)
block|;
operator|~
name|QTransformedScreen
argument_list|()
block|;      enum
name|Transformation
block|{
name|None
block|,
name|Rot90
block|,
name|Rot180
block|,
name|Rot270
block|}
block|;
name|void
name|setTransformation
argument_list|(
argument|Transformation t
argument_list|)
block|;
name|Transformation
name|transformation
argument_list|()
specifier|const
block|;
name|int
name|transformOrientation
argument_list|()
specifier|const
block|;
name|QSize
name|mapToDevice
argument_list|(
argument|const QSize&s
argument_list|)
specifier|const
block|;
name|QSize
name|mapFromDevice
argument_list|(
argument|const QSize&s
argument_list|)
specifier|const
block|;
name|QPoint
name|mapToDevice
argument_list|(
argument|const QPoint&
argument_list|,
argument|const QSize&
argument_list|)
specifier|const
block|;
name|QPoint
name|mapFromDevice
argument_list|(
argument|const QPoint&
argument_list|,
argument|const QSize&
argument_list|)
specifier|const
block|;
name|QRect
name|mapToDevice
argument_list|(
argument|const QRect&
argument_list|,
argument|const QSize&
argument_list|)
specifier|const
block|;
name|QRect
name|mapFromDevice
argument_list|(
argument|const QRect&
argument_list|,
argument|const QSize&
argument_list|)
specifier|const
block|;
name|QRegion
name|mapToDevice
argument_list|(
argument|const QRegion&
argument_list|,
argument|const QSize&
argument_list|)
specifier|const
block|;
name|QRegion
name|mapFromDevice
argument_list|(
argument|const QRegion&
argument_list|,
argument|const QSize&
argument_list|)
specifier|const
block|;
name|bool
name|connect
argument_list|(
specifier|const
name|QString
operator|&
name|displaySpec
argument_list|)
block|;
name|bool
name|isTransformed
argument_list|()
specifier|const
block|{
return|return
name|transformation
argument_list|()
operator|!=
name|None
return|;
block|}
name|void
name|exposeRegion
argument_list|(
argument|QRegion region
argument_list|,
argument|int changing
argument_list|)
block|;
name|void
name|blit
argument_list|(
specifier|const
name|QImage
operator|&
name|img
argument_list|,
specifier|const
name|QPoint
operator|&
name|topLeft
argument_list|,
specifier|const
name|QRegion
operator|&
name|region
argument_list|)
block|;
name|void
name|solidFill
argument_list|(
specifier|const
name|QColor
operator|&
name|color
argument_list|,
specifier|const
name|QRegion
operator|&
name|region
argument_list|)
block|;
name|void
name|setDirty
argument_list|(
specifier|const
name|QRect
operator|&
argument_list|)
block|;
name|QRegion
name|region
argument_list|()
specifier|const
block|;
name|private
operator|:
name|friend
name|class
name|QTransformedScreenPrivate
block|;
name|QTransformedScreenPrivate
operator|*
name|d_ptr
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_TRANSFORMED
end_comment
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QSCREENTRANSFORMED_QWS_H
end_comment
end_unit
