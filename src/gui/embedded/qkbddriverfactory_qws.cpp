begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qkbddriverfactory_qws.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_KEYBOARD
end_ifndef
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qkbdtty_qws.h"
end_include
begin_include
include|#
directive|include
file|"qkbdlinuxinput_qws.h"
end_include
begin_include
include|#
directive|include
file|"qkbdum_qws.h"
end_include
begin_include
include|#
directive|include
file|"qkbdvfb_qws.h"
end_include
begin_include
include|#
directive|include
file|"qkbdqnx_qws.h"
end_include
begin_include
include|#
directive|include
file|"qkbdintegrity_qws.h"
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|"private/qfactoryloader_p.h"
end_include
begin_include
include|#
directive|include
file|"qkbddriverplugin_qws.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_MAKEDLL
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
name|Q_GLOBAL_STATIC_WITH_ARGS
argument_list|(
name|QFactoryLoader
argument_list|,
name|loader
argument_list|,
operator|(
name|QWSKeyboardHandlerFactoryInterface_iid
operator|,
name|QLatin1String
argument_list|(
literal|"/kbddrivers"
argument_list|)
operator|,
name|Qt
operator|::
name|CaseInsensitive
operator|)
argument_list|)
endif|#
directive|endif
comment|//QT_NO_LIBRARY
endif|#
directive|endif
comment|//QT_MAKEDLL
comment|/*!     \class QKbdDriverFactory     \ingroup qws      \brief The QKbdDriverFactory class creates keyboard drivers in     Qt for Embedded Linux.      Note that this class is only available in \l{Qt for Embedded Linux}.      QKbdDriverFactory is used to detect and instantiate the available     keyboard drivers, allowing \l{Qt for Embedded Linux} to load the preferred     driver into the server application at runtime. The create()     function returns a QWSKeyboardHandler object representing the     keyboard driver identified by a given key. The valid keys     (i.e. the supported drivers) can be retrieved using the keys()     function.      \l{Qt for Embedded Linux} provides several built-in keyboard drivers. In     addition, custom keyboard drivers can be added using Qt's plugin     mechanism, i.e. by subclassing the QWSKeyboardHandler class and     creating a keyboard driver plugin (QKbdDriverPlugin). See the     \l{Qt for Embedded Linux Character Input}{character input} documentation     for details.      \sa QWSKeyboardHandler, QKbdDriverPlugin */
comment|/*!     Creates the keyboard driver specified by the given \a key, using     the display specified by the given \a device.      Note that the keys are case-insensitive.      \sa keys() */
DECL|function|create
name|QWSKeyboardHandler
modifier|*
name|QKbdDriverFactory
operator|::
name|create
argument_list|(
specifier|const
name|QString
operator|&
name|key
argument_list|,
specifier|const
name|QString
operator|&
name|device
argument_list|)
argument_list|{
name|QString
name|driver
operator|=
name|key
operator|.
name|toLower
argument_list|()
argument_list|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_QWS_KBD_QNX
argument_list|)
argument_list|if
operator|(
name|driver
operator|==
name|QLatin1String
argument_list|(
literal|"qnx"
argument_list|)
operator|||
name|driver
operator|.
name|isEmpty
argument_list|()
operator|)
return|return
operator|new
name|QWSQnxKeyboardHandler
argument_list|(
name|device
argument_list|)
return|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_INTEGRITY
argument_list|)
end_if
begin_if
if|if
condition|(
name|driver
operator|==
name|QLatin1String
argument_list|(
literal|"integrity"
argument_list|)
operator|||
name|driver
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|new
name|QWSIntKeyboardHandler
argument_list|(
name|device
argument_list|)
return|;
end_if
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_KEYBOARD
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_KBD_TTY
end_ifndef
begin_if
if|if
condition|(
name|driver
operator|==
name|QLatin1String
argument_list|(
literal|"tty"
argument_list|)
operator|||
name|driver
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|new
name|QWSTtyKeyboardHandler
argument_list|(
name|device
argument_list|)
return|;
end_if
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_KBD_LINUXINPUT
end_ifndef
begin_if
if|if
condition|(
name|driver
operator|==
name|QLatin1String
argument_list|(
literal|"linuxinput"
argument_list|)
operator|||
expr|\
name|driver
operator|==
name|QLatin1String
argument_list|(
literal|"usb"
argument_list|)
operator|||
expr|\
name|driver
operator|==
name|QLatin1String
argument_list|(
literal|"linuxis"
argument_list|)
condition|)
return|return
operator|new
name|QWSLinuxInputKeyboardHandler
argument_list|(
name|device
argument_list|)
return|;
end_if
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_KBD_UM
end_ifndef
begin_if
if|if
condition|(
name|driver
operator|==
name|QLatin1String
argument_list|(
literal|"um"
argument_list|)
operator|||
name|driver
operator|==
name|QLatin1String
argument_list|(
literal|"qvfbkeyboard"
argument_list|)
condition|)
return|return
operator|new
name|QWSUmKeyboardHandler
argument_list|(
name|device
argument_list|)
return|;
end_if
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_KBD_QVFB
end_ifndef
begin_if
if|if
condition|(
name|driver
operator|==
name|QLatin1String
argument_list|(
literal|"qvfbkbd"
argument_list|)
operator|||
name|driver
operator|==
name|QLatin1String
argument_list|(
literal|"qvfbkeyboard"
argument_list|)
operator|||
name|driver
operator|==
name|QLatin1String
argument_list|(
literal|"qvfb"
argument_list|)
condition|)
return|return
operator|new
name|QVFbKeyboardHandler
argument_list|(
name|device
argument_list|)
return|;
end_if
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_MAKEDLL
argument_list|)
end_if
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
end_ifndef
begin_if
if|if
condition|(
name|QWSKeyboardHandlerFactoryInterface
modifier|*
name|factory
init|=
name|qobject_cast
argument_list|<
name|QWSKeyboardHandlerFactoryInterface
operator|*
argument_list|>
argument_list|(
name|loader
argument_list|()
operator|->
name|instance
argument_list|(
name|driver
argument_list|)
argument_list|)
condition|)
return|return
name|factory
operator|->
name|create
argument_list|(
name|driver
argument_list|,
name|device
argument_list|)
return|;
end_if
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_return
return|return
literal|0
return|;
end_return
begin_comment
unit|}
comment|/*!     Returns the list of valid keys, i.e. the available keyboard     drivers.      \sa create() */
end_comment
begin_macro
unit|QStringList
DECL|function|keys
name|QKbdDriverFactory
end_macro
begin_expr_stmt
DECL|function|keys
operator|::
name|keys
operator|(
operator|)
block|{
name|QStringList
name|list
block|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_QWS_KBD_QNX
argument_list|)
name|list
operator|<<
name|QLatin1String
argument_list|(
literal|"QNX"
argument_list|)
block|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_INTEGRITY
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_QWS_KBD_INTEGRITY
argument_list|)
name|list
operator|<<
name|QLatin1String
argument_list|(
literal|"INTEGRITY"
argument_list|)
block|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_QWS_KBD_TTY
name|list
operator|<<
name|QLatin1String
argument_list|(
literal|"TTY"
argument_list|)
block|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_QWS_KBD_LINUXINPUT
name|list
operator|<<
name|QLatin1String
argument_list|(
literal|"LinuxInput"
argument_list|)
block|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_QWS_KBD_UM
name|list
operator|<<
name|QLatin1String
argument_list|(
literal|"UM"
argument_list|)
block|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_MAKEDLL
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
name|QStringList
name|plugins
operator|=
name|loader
argument_list|()
operator|->
name|keys
argument_list|()
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|plugins
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|list
operator|.
name|contains
argument_list|(
name|plugins
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
name|list
operator|+=
name|plugins
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_LIBRARY
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_MAKEDLL
end_comment
begin_return
return|return
name|list
return|;
end_return
begin_endif
unit|}  QT_END_NAMESPACE
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_KEYBOARD
end_comment
end_unit
