begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qkbdtty_qws.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_QWS_KEYBOARD
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_QWS_KBD_TTY
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QSocketNotifier>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<qplatformdefs.h>
end_include
begin_include
include|#
directive|include
file|<private/qcore_unix_p.h>
end_include
begin_comment
comment|// overrides QT_OPEN
end_comment
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<termios.h>
end_include
begin_if
if|#
directive|if
name|defined
name|Q_OS_LINUX
end_if
begin_include
include|#
directive|include
file|<linux/kd.h>
end_include
begin_include
include|#
directive|include
file|<linux/vt.h>
end_include
begin_comment
comment|//TODO: move vt handling somewhere else (QLinuxFbScreen?)
end_comment
begin_include
include|#
directive|include
file|"qscreen_qws.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsystem_qws.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"private/qwindowsurface_qws_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qwssignalhandler_p.h"
end_include
begin_define
DECL|macro|VTACQSIG
define|#
directive|define
name|VTACQSIG
value|SIGUSR1
end_define
begin_define
DECL|macro|VTRELSIG
define|#
directive|define
name|VTRELSIG
value|SIGUSR2
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QWSTtyKbPrivate
class|class
name|QWSTtyKbPrivate
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|QWSTtyKbPrivate
parameter_list|(
name|QWSTtyKeyboardHandler
modifier|*
name|handler
parameter_list|,
specifier|const
name|QString
modifier|&
name|device
parameter_list|)
constructor_decl|;
name|~
name|QWSTtyKbPrivate
parameter_list|()
destructor_decl|;
private|private:
name|void
name|switchLed
parameter_list|(
name|char
parameter_list|,
name|bool
parameter_list|)
function_decl|;
name|void
name|switchConsole
parameter_list|(
name|int
name|vt
parameter_list|)
function_decl|;
private|private
name|Q_SLOTS
private|:
name|void
name|readKeycode
parameter_list|()
function_decl|;
name|void
name|handleConsoleSwitch
parameter_list|(
name|int
name|sig
parameter_list|)
function_decl|;
private|private:
DECL|member|m_handler
name|QWSTtyKeyboardHandler
modifier|*
name|m_handler
decl_stmt|;
DECL|member|m_tty_fd
name|int
name|m_tty_fd
decl_stmt|;
DECL|member|m_tty_attr
name|struct
name|termios
name|m_tty_attr
decl_stmt|;
DECL|member|m_last_keycode
name|char
name|m_last_keycode
decl_stmt|;
DECL|member|m_vt_qws
name|int
name|m_vt_qws
decl_stmt|;
DECL|member|m_orig_kbmode
name|int
name|m_orig_kbmode
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QWSTtyKeyboardHandler
name|QWSTtyKeyboardHandler
operator|::
name|QWSTtyKeyboardHandler
parameter_list|(
specifier|const
name|QString
modifier|&
name|device
parameter_list|)
member_init_list|:
name|QWSKeyboardHandler
argument_list|(
name|device
argument_list|)
block|{
name|d
operator|=
operator|new
name|QWSTtyKbPrivate
argument_list|(
name|this
argument_list|,
name|device
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWSTtyKeyboardHandler
name|QWSTtyKeyboardHandler
operator|::
name|~
name|QWSTtyKeyboardHandler
parameter_list|()
block|{
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|filterKeycode
name|bool
name|QWSTtyKeyboardHandler
operator|::
name|filterKeycode
parameter_list|(
name|char
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_constructor
DECL|function|QWSTtyKbPrivate
name|QWSTtyKbPrivate
operator|::
name|QWSTtyKbPrivate
parameter_list|(
name|QWSTtyKeyboardHandler
modifier|*
name|h
parameter_list|,
specifier|const
name|QString
modifier|&
name|device
parameter_list|)
member_init_list|:
name|m_handler
argument_list|(
name|h
argument_list|)
member_init_list|,
name|m_tty_fd
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_last_keycode
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_vt_qws
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_orig_kbmode
argument_list|(
name|K_XLATE
argument_list|)
block|{
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"TTY Keyboard Handler"
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_SIGNALHANDLER
name|QWSSignalHandler
operator|::
name|instance
argument_list|()
operator|->
name|addObject
argument_list|(
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QString
name|dev
init|=
name|QLatin1String
argument_list|(
literal|"/dev/tty0"
argument_list|)
decl_stmt|;
name|int
name|repeat_delay
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|repeat_rate
init|=
operator|-
literal|1
decl_stmt|;
name|QStringList
name|args
init|=
name|device
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|arg
decl|,
name|args
control|)
block|{
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"repeat-delay="
argument_list|)
argument_list|)
condition|)
name|repeat_delay
operator|=
name|arg
operator|.
name|mid
argument_list|(
literal|13
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"repeat-rate="
argument_list|)
argument_list|)
condition|)
name|repeat_rate
operator|=
name|arg
operator|.
name|mid
argument_list|(
literal|12
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"/dev/"
argument_list|)
argument_list|)
condition|)
name|dev
operator|=
name|arg
expr_stmt|;
block|}
name|m_tty_fd
operator|=
name|QT_OPEN
argument_list|(
name|dev
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDWR
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_tty_fd
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|repeat_delay
operator|>
literal|0
operator|&&
name|repeat_rate
operator|>
literal|0
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
name|struct
operator|::
name|kbd_repeat
name|kbdrep
init|=
block|{
name|repeat_delay
block|,
name|repeat_rate
block|}
decl_stmt|;
operator|::
name|ioctl
argument_list|(
name|m_tty_fd
argument_list|,
name|KDKBDREP
argument_list|,
operator|&
name|kbdrep
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|QSocketNotifier
modifier|*
name|notifier
decl_stmt|;
name|notifier
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|m_tty_fd
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|notifier
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readKeycode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// save tty config for restore.
name|tcgetattr
argument_list|(
name|m_tty_fd
argument_list|,
operator|&
name|m_tty_attr
argument_list|)
expr_stmt|;
name|struct
operator|::
name|termios
name|termdata
decl_stmt|;
name|tcgetattr
argument_list|(
name|m_tty_fd
argument_list|,
operator|&
name|termdata
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
comment|// record the original mode so we can restore it again in the destructor.
operator|::
name|ioctl
argument_list|(
name|m_tty_fd
argument_list|,
name|KDGKBMODE
argument_list|,
operator|&
name|m_orig_kbmode
argument_list|)
expr_stmt|;
comment|// PLEASE NOTE:
comment|// the tty keycode interface can only report keycodes 0x01 .. 0x7f
comment|// KEY_MAX is however defined to 0x1ff. In practice this is sufficient
comment|// for a PC style keyboard though.
comment|// we don't support K_RAW anymore - if you need that, you have to add
comment|// a scan- to keycode converter yourself.
operator|::
name|ioctl
argument_list|(
name|m_tty_fd
argument_list|,
name|KDSKBMODE
argument_list|,
name|K_MEDIUMRAW
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// set the tty layer to pass-through
name|termdata
operator|.
name|c_iflag
operator|=
operator|(
name|IGNPAR
operator||
name|IGNBRK
operator|)
operator|&
operator|(
operator|~
name|PARMRK
operator|)
operator|&
operator|(
operator|~
name|ISTRIP
operator|)
expr_stmt|;
name|termdata
operator|.
name|c_oflag
operator|=
literal|0
expr_stmt|;
name|termdata
operator|.
name|c_cflag
operator|=
name|CREAD
operator||
name|CS8
expr_stmt|;
name|termdata
operator|.
name|c_lflag
operator|=
literal|0
expr_stmt|;
name|termdata
operator|.
name|c_cc
index|[
name|VTIME
index|]
operator|=
literal|0
expr_stmt|;
name|termdata
operator|.
name|c_cc
index|[
name|VMIN
index|]
operator|=
literal|1
expr_stmt|;
name|cfsetispeed
argument_list|(
operator|&
name|termdata
argument_list|,
literal|9600
argument_list|)
expr_stmt|;
name|cfsetospeed
argument_list|(
operator|&
name|termdata
argument_list|,
literal|9600
argument_list|)
expr_stmt|;
name|tcsetattr
argument_list|(
name|m_tty_fd
argument_list|,
name|TCSANOW
argument_list|,
operator|&
name|termdata
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
comment|// VT switching is handled via unix signals
name|connect
argument_list|(
name|QApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|unixSignal
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|handleConsoleSwitch
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|instance
argument_list|()
operator|->
name|watchUnixSignal
argument_list|(
name|VTACQSIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|instance
argument_list|()
operator|->
name|watchUnixSignal
argument_list|(
name|VTRELSIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|struct
operator|::
name|vt_mode
name|vtMode
decl_stmt|;
if|if
condition|(
operator|::
name|ioctl
argument_list|(
name|m_tty_fd
argument_list|,
name|VT_GETMODE
argument_list|,
operator|&
name|vtMode
argument_list|)
operator|==
literal|0
condition|)
block|{
name|vtMode
operator|.
name|mode
operator|=
name|VT_PROCESS
expr_stmt|;
name|vtMode
operator|.
name|relsig
operator|=
name|VTRELSIG
expr_stmt|;
name|vtMode
operator|.
name|acqsig
operator|=
name|VTACQSIG
expr_stmt|;
if|if
condition|(
operator|::
name|ioctl
argument_list|(
name|m_tty_fd
argument_list|,
name|VT_SETMODE
argument_list|,
operator|&
name|vtMode
argument_list|)
operator|==
literal|0
condition|)
block|{
name|struct
operator|::
name|vt_stat
name|vtStat
decl_stmt|;
operator|::
name|memset
argument_list|(
operator|&
name|vtStat
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|vtStat
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|::
name|ioctl
argument_list|(
name|m_tty_fd
argument_list|,
name|VT_GETSTATE
argument_list|,
operator|&
name|vtStat
argument_list|)
operator|==
literal|0
condition|)
block|{
name|m_vt_qws
operator|=
name|vtStat
operator|.
name|v_active
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|m_vt_qws
condition|)
name|qWarning
argument_list|(
literal|"Could not initialize virtual console switching"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Cannot open input device '%s': %s"
argument_list|,
name|qPrintable
argument_list|(
name|dev
argument_list|)
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QWSTtyKbPrivate
name|QWSTtyKbPrivate
operator|::
name|~
name|QWSTtyKbPrivate
parameter_list|()
block|{
if|if
condition|(
name|m_tty_fd
operator|>=
literal|0
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|::
name|ioctl
argument_list|(
name|m_tty_fd
argument_list|,
name|KDSKBMODE
argument_list|,
name|m_orig_kbmode
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|tcsetattr
argument_list|(
name|m_tty_fd
argument_list|,
name|TCSANOW
argument_list|,
operator|&
name|m_tty_attr
argument_list|)
expr_stmt|;
name|QT_CLOSE
argument_list|(
name|m_tty_fd
argument_list|)
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|switchLed
name|void
name|QWSTtyKbPrivate
operator|::
name|switchLed
parameter_list|(
name|char
name|led
parameter_list|,
name|bool
name|state
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
name|char
name|ledstate
decl_stmt|;
operator|::
name|ioctl
argument_list|(
name|m_tty_fd
argument_list|,
name|KDGETLED
argument_list|,
operator|&
name|ledstate
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
condition|)
name|ledstate
operator||=
name|led
expr_stmt|;
else|else
name|ledstate
operator|&=
operator|~
name|led
expr_stmt|;
operator|::
name|ioctl
argument_list|(
name|m_tty_fd
argument_list|,
name|KDSETLED
argument_list|,
name|ledstate
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|readKeycode
name|void
name|QWSTtyKbPrivate
operator|::
name|readKeycode
parameter_list|()
block|{
name|char
name|buffer
index|[
literal|32
index|]
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
forever|forever
block|{
name|n
operator|=
name|QT_READ
argument_list|(
name|m_tty_fd
argument_list|,
name|buffer
operator|+
name|n
argument_list|,
literal|32
operator|-
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"Got EOF from the input device."
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|n
operator|<
literal|0
operator|&&
operator|(
name|errno
operator|!=
name|EINTR
operator|&&
name|errno
operator|!=
name|EAGAIN
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not read from input device: %s"
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
break|break;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|m_handler
operator|->
name|filterKeycode
argument_list|(
name|buffer
index|[
name|i
index|]
argument_list|)
condition|)
continue|continue;
name|QWSKeyboardHandler
operator|::
name|KeycodeAction
name|ka
decl_stmt|;
name|ka
operator|=
name|m_handler
operator|->
name|processKeycode
argument_list|(
name|buffer
index|[
name|i
index|]
operator|&
literal|0x7f
argument_list|,
operator|(
name|buffer
index|[
name|i
index|]
operator|&
literal|0x80
operator|)
operator|==
literal|0x00
argument_list|,
name|buffer
index|[
name|i
index|]
operator|==
name|m_last_keycode
argument_list|)
expr_stmt|;
name|m_last_keycode
operator|=
name|buffer
index|[
name|i
index|]
expr_stmt|;
switch|switch
condition|(
name|ka
condition|)
block|{
case|case
name|QWSKeyboardHandler
operator|::
name|CapsLockOn
case|:
case|case
name|QWSKeyboardHandler
operator|::
name|CapsLockOff
case|:
name|switchLed
argument_list|(
name|LED_CAP
argument_list|,
name|ka
operator|==
name|QWSKeyboardHandler
operator|::
name|CapsLockOn
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWSKeyboardHandler
operator|::
name|NumLockOn
case|:
case|case
name|QWSKeyboardHandler
operator|::
name|NumLockOff
case|:
name|switchLed
argument_list|(
name|LED_NUM
argument_list|,
name|ka
operator|==
name|QWSKeyboardHandler
operator|::
name|NumLockOn
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWSKeyboardHandler
operator|::
name|ScrollLockOn
case|:
case|case
name|QWSKeyboardHandler
operator|::
name|ScrollLockOff
case|:
name|switchLed
argument_list|(
name|LED_SCR
argument_list|,
name|ka
operator|==
name|QWSKeyboardHandler
operator|::
name|ScrollLockOn
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWSKeyboardHandler
operator|::
name|PreviousConsole
case|:
name|switchConsole
argument_list|(
name|qBound
argument_list|(
literal|1
argument_list|,
name|m_vt_qws
operator|-
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWSKeyboardHandler
operator|::
name|NextConsole
case|:
name|switchConsole
argument_list|(
name|qBound
argument_list|(
literal|1
argument_list|,
name|m_vt_qws
operator|+
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|ka
operator|>=
name|QWSKeyboardHandler
operator|::
name|SwitchConsoleFirst
operator|&&
name|ka
operator|<=
name|QWSKeyboardHandler
operator|::
name|SwitchConsoleLast
condition|)
block|{
name|switchConsole
argument_list|(
literal|1
operator|+
operator|(
name|ka
operator|&
name|QWSKeyboardHandler
operator|::
name|SwitchConsoleMask
operator|)
argument_list|)
expr_stmt|;
block|}
comment|//ignore reboot
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|switchConsole
name|void
name|QWSTtyKbPrivate
operator|::
name|switchConsole
parameter_list|(
name|int
name|vt
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
if|if
condition|(
name|m_vt_qws
operator|&&
name|vt
operator|&&
operator|(
name|m_tty_fd
operator|>=
literal|0
operator|)
condition|)
operator|::
name|ioctl
argument_list|(
name|m_tty_fd
argument_list|,
name|VT_ACTIVATE
argument_list|,
name|vt
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|handleConsoleSwitch
name|void
name|QWSTtyKbPrivate
operator|::
name|handleConsoleSwitch
parameter_list|(
name|int
name|sig
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
comment|// received a notification from the kernel that the current VT is
comment|// changing: either enable or disable QWS painting accordingly.
if|if
condition|(
name|sig
operator|==
name|VTACQSIG
condition|)
block|{
if|if
condition|(
operator|::
name|ioctl
argument_list|(
name|m_tty_fd
argument_list|,
name|VT_RELDISP
argument_list|,
name|VT_ACKACQ
argument_list|)
operator|==
literal|0
condition|)
block|{
name|qwsServer
operator|->
name|enablePainting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|qt_screen
operator|->
name|restore
argument_list|()
expr_stmt|;
name|qwsServer
operator|->
name|resumeMouse
argument_list|()
expr_stmt|;
name|qwsServer
operator|->
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sig
operator|==
name|VTRELSIG
condition|)
block|{
name|qwsServer
operator|->
name|enablePainting
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Check for reserved surfaces which might still do painting
name|bool
name|allWindowsHidden
init|=
literal|true
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QWSWindow
modifier|*
argument_list|>
name|windows
init|=
name|QWSServer
operator|::
name|instance
argument_list|()
operator|->
name|clientWindows
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windows
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QWSWindow
modifier|*
name|w
init|=
name|windows
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QWSWindowSurface
modifier|*
name|s
init|=
name|w
operator|->
name|windowSurface
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|&&
name|s
operator|->
name|isRegionReserved
argument_list|()
operator|&&
operator|!
name|w
operator|->
name|allocatedRegion
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|allWindowsHidden
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|allWindowsHidden
condition|)
block|{
operator|::
name|ioctl
argument_list|(
name|m_tty_fd
argument_list|,
name|VT_RELDISP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// abort console switch
name|qwsServer
operator|->
name|enablePainting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|::
name|ioctl
argument_list|(
name|m_tty_fd
argument_list|,
name|VT_RELDISP
argument_list|,
literal|1
argument_list|)
operator|==
literal|0
condition|)
block|{
name|qt_screen
operator|->
name|save
argument_list|()
expr_stmt|;
name|qwsServer
operator|->
name|suspendMouse
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|qwsServer
operator|->
name|enablePainting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qkbdtty_qws.moc"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_KEYBOARD || QT_NO_QWS_KBD_TTY
end_comment
end_unit
