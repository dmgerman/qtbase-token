begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qopenglfunctions.h"
end_include
begin_include
include|#
directive|include
file|"qopenglextensions_p.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qopenglcontext_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qopengl_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformintegration.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QOpenGLFunctions     \brief The QOpenGLFunctions class provides cross-platform access to the OpenGL ES 2.0 API.     \since 5.0     \ingroup painting-3D     \inmodule QtGui      OpenGL ES 2.0 defines a subset of the OpenGL specification that is     common across many desktop and embedded OpenGL implementations.     However, it can be difficult to use the functions from that subset     because they need to be resolved manually on desktop systems.      QOpenGLFunctions provides a guaranteed API that is available on all     OpenGL systems and takes care of function resolution on systems     that need it.  The recommended way to use QOpenGLFunctions is by     direct inheritance:      \code     class MyGLWindow : public QWindow, protected QOpenGLFunctions     {         Q_OBJECT     public:         MyGLWindow(QScreen *screen = 0);      protected:         void initializeGL();         void paintGL();          QOpenGLContext *m_context;     };      MyGLWindow(QScreen *screen)       : QWindow(screen), QOpenGLWidget(parent)     {         setSurfaceType(OpenGLSurface);         create();          // Create an OpenGL context         m_context = new QOpenGLContext;         m_context->create();          // Setup scene and render it         initializeGL();         paintGL()     }      void MyGLWindow::initializeGL()     {         m_context->makeCurrent(this);         initializeOpenGLFunctions();     }     \endcode      The \c{paintGL()} function can then use any of the OpenGL ES 2.0     functions without explicit resolution, such as glActiveTexture()     in the following example:      \code     void MyGLWindow::paintGL()     {         m_context->makeCurrent(this);         glActiveTexture(GL_TEXTURE1);         glBindTexture(GL_TEXTURE_2D, textureId);         ...         m_context->swapBuffers(this);         m_context->doneCurrent();     }     \endcode      QOpenGLFunctions can also be used directly for ad-hoc invocation     of OpenGL ES 2.0 functions on all platforms:      \code     QOpenGLFunctions glFuncs(QOpenGLContext::currentContext());     glFuncs.glActiveTexture(GL_TEXTURE1);     \endcode      QOpenGLFunctions provides wrappers for all OpenGL ES 2.0     functions, including the common subset of OpenGL 1.x and ES     2.0. While such functions, for example glClear() or     glDrawArrays(), can be called also directly, as long as the     application links to the platform-specific OpenGL library, calling     them via QOpenGLFunctions enables the possibility of dynamically     loading the OpenGL implementation.      The hasOpenGLFeature() and openGLFeatures() functions can be used     to determine if the OpenGL implementation has a major OpenGL ES 2.0     feature.  For example, the following checks if non power of two     textures are available:      \code     QOpenGLFunctions funcs(QOpenGLContext::currentContext());     bool npot = funcs.hasOpenGLFeature(QOpenGLFunctions::NPOTTextures);     \endcode */
end_comment
begin_comment
comment|/*!     \enum QOpenGLFunctions::OpenGLFeature     This enum defines OpenGL and OpenGL ES features whose presence     may depend on the implementation.      \value Multitexture glActiveTexture() function is available.     \value Shaders Shader functions are available.     \value Buffers Vertex and index buffer functions are available.     \value Framebuffers Framebuffer object functions are available.     \value BlendColor glBlendColor() is available.     \value BlendEquation glBlendEquation() is available.     \value BlendEquationSeparate glBlendEquationSeparate() is available.     \value BlendFuncSeparate glBlendFuncSeparate() is available.     \value BlendSubtract Blend subtract mode is available.     \value CompressedTextures Compressed texture functions are available.     \value Multisample glSampleCoverage() function is available.     \value StencilSeparate Separate stencil functions are available.     \value NPOTTextures Non power of two textures are available.     \value NPOTTextureRepeat Non power of two textures can use GL_REPEAT as wrap parameter.     \value FixedFunctionPipeline The fixed function pipeline is available. */
end_comment
begin_comment
comment|// Hidden private fields for additional extension data.
end_comment
begin_struct
DECL|struct|QOpenGLFunctionsPrivateEx
struct|struct
name|QOpenGLFunctionsPrivateEx
super|:
specifier|public
name|QOpenGLExtensionsPrivate
super|,
specifier|public
name|QOpenGLSharedResource
block|{
DECL|function|QOpenGLFunctionsPrivateEx
name|QOpenGLFunctionsPrivateEx
parameter_list|(
name|QOpenGLContext
modifier|*
name|context
parameter_list|)
member_init_list|:
name|QOpenGLExtensionsPrivate
argument_list|(
name|context
argument_list|)
member_init_list|,
name|QOpenGLSharedResource
argument_list|(
name|context
operator|->
name|shareGroup
argument_list|()
argument_list|)
member_init_list|,
name|m_features
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_extensions
argument_list|(
operator|-
literal|1
argument_list|)
block|{}
DECL|function|invalidateResource
name|void
name|invalidateResource
parameter_list|()
block|{
name|m_features
operator|=
operator|-
literal|1
expr_stmt|;
name|m_extensions
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|function|freeResource
name|void
name|freeResource
parameter_list|(
name|QOpenGLContext
modifier|*
parameter_list|)
block|{
comment|// no gl resources to free
block|}
DECL|member|m_features
name|int
name|m_features
decl_stmt|;
DECL|member|m_extensions
name|int
name|m_extensions
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QOpenGLMultiGroupSharedResource
argument_list|,
argument|qt_gl_functions_resource
argument_list|)
end_macro
begin_function
DECL|function|qt_gl_functions
specifier|static
name|QOpenGLFunctionsPrivateEx
modifier|*
name|qt_gl_functions
parameter_list|(
name|QOpenGLContext
modifier|*
name|context
init|=
literal|0
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
condition|)
name|context
operator|=
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|QOpenGLFunctionsPrivateEx
modifier|*
name|funcs
init|=
name|qt_gl_functions_resource
argument_list|()
operator|->
name|value
argument_list|<
name|QOpenGLFunctionsPrivateEx
argument_list|>
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
name|funcs
return|;
block|}
end_function
begin_comment
comment|/*!     Constructs a default function resolver. The resolver cannot     be used until initializeOpenGLFunctions() is called to specify     the context.      \sa initializeOpenGLFunctions() */
end_comment
begin_constructor
DECL|function|QOpenGLFunctions
name|QOpenGLFunctions
operator|::
name|QOpenGLFunctions
parameter_list|()
member_init_list|:
name|d_ptr
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a function resolver for \a context.  If \a context     is null, then the resolver will be created for the current QOpenGLContext.      The context or another context in the group must be current.      An object constructed in this way can only be used with \a context     and other contexts that share with it.  Use initializeOpenGLFunctions()     to change the object's context association.      \sa initializeOpenGLFunctions() */
end_comment
begin_constructor
DECL|function|QOpenGLFunctions
name|QOpenGLFunctions
operator|::
name|QOpenGLFunctions
parameter_list|(
name|QOpenGLContext
modifier|*
name|context
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
literal|0
argument_list|)
block|{
if|if
condition|(
name|context
operator|&&
name|QOpenGLContextGroup
operator|::
name|currentContextGroup
argument_list|()
operator|==
name|context
operator|->
name|shareGroup
argument_list|()
condition|)
name|d_ptr
operator|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
expr_stmt|;
else|else
name|qWarning
argument_list|()
operator|<<
literal|"QOpenGLFunctions created with non-current context"
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QOpenGLExtensions
name|QOpenGLExtensions
operator|::
name|QOpenGLExtensions
parameter_list|()
member_init_list|:
name|QOpenGLFunctions
argument_list|()
block|{ }
end_constructor
begin_constructor
DECL|function|QOpenGLExtensions
name|QOpenGLExtensions
operator|::
name|QOpenGLExtensions
parameter_list|(
name|QOpenGLContext
modifier|*
name|context
parameter_list|)
member_init_list|:
name|QOpenGLFunctions
argument_list|(
name|context
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \fn QOpenGLFunctions::~QOpenGLFunctions()      Destroys this function resolver. */
end_comment
begin_function
DECL|function|qt_gl_resolve_features
specifier|static
name|int
name|qt_gl_resolve_features
parameter_list|()
block|{
name|QOpenGLContext
modifier|*
name|ctx
init|=
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|->
name|isOpenGLES
argument_list|()
condition|)
block|{
comment|// OpenGL ES 2
name|int
name|features
init|=
name|QOpenGLFunctions
operator|::
name|Multitexture
operator||
name|QOpenGLFunctions
operator|::
name|Shaders
operator||
name|QOpenGLFunctions
operator|::
name|Buffers
operator||
name|QOpenGLFunctions
operator|::
name|Framebuffers
operator||
name|QOpenGLFunctions
operator|::
name|BlendColor
operator||
name|QOpenGLFunctions
operator|::
name|BlendEquation
operator||
name|QOpenGLFunctions
operator|::
name|BlendEquationSeparate
operator||
name|QOpenGLFunctions
operator|::
name|BlendFuncSeparate
operator||
name|QOpenGLFunctions
operator|::
name|BlendSubtract
operator||
name|QOpenGLFunctions
operator|::
name|CompressedTextures
operator||
name|QOpenGLFunctions
operator|::
name|Multisample
operator||
name|QOpenGLFunctions
operator|::
name|StencilSeparate
decl_stmt|;
name|QOpenGLExtensionMatcher
name|extensions
decl_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_IMG_texture_npot"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|NPOTTextures
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_OES_texture_npot"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|NPOTTextures
operator||
name|QOpenGLFunctions
operator|::
name|NPOTTextureRepeat
expr_stmt|;
return|return
name|features
return|;
block|}
else|else
block|{
comment|// OpenGL
name|int
name|features
init|=
literal|0
decl_stmt|;
name|QSurfaceFormat
name|format
init|=
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
operator|->
name|format
argument_list|()
decl_stmt|;
name|QOpenGLExtensionMatcher
name|extensions
decl_stmt|;
if|if
condition|(
name|format
operator|.
name|majorVersion
argument_list|()
operator|>=
literal|3
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|Framebuffers
expr_stmt|;
elseif|else
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_EXT_framebuffer_object"
argument_list|)
operator|||
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_ARB_framebuffer_object"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|Framebuffers
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|majorVersion
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|BlendColor
operator||
name|QOpenGLFunctions
operator|::
name|BlendEquation
operator||
name|QOpenGLFunctions
operator|::
name|BlendSubtract
operator||
name|QOpenGLFunctions
operator|::
name|Multitexture
operator||
name|QOpenGLFunctions
operator|::
name|CompressedTextures
operator||
name|QOpenGLFunctions
operator|::
name|Multisample
operator||
name|QOpenGLFunctions
operator|::
name|BlendFuncSeparate
operator||
name|QOpenGLFunctions
operator|::
name|Buffers
operator||
name|QOpenGLFunctions
operator|::
name|Shaders
operator||
name|QOpenGLFunctions
operator|::
name|StencilSeparate
operator||
name|QOpenGLFunctions
operator|::
name|BlendEquationSeparate
operator||
name|QOpenGLFunctions
operator|::
name|NPOTTextures
operator||
name|QOpenGLFunctions
operator|::
name|NPOTTextureRepeat
expr_stmt|;
block|}
else|else
block|{
comment|// Recognize features by extension name.
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_ARB_multitexture"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|Multitexture
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_ARB_shader_objects"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|Shaders
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_EXT_blend_color"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|BlendColor
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_EXT_blend_equation_separate"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|BlendEquationSeparate
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_EXT_blend_subtract"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|BlendSubtract
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_EXT_blend_func_separate"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|BlendFuncSeparate
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_ARB_texture_compression"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|CompressedTextures
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_ARB_multisample"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|Multisample
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_ARB_texture_non_power_of_two"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|NPOTTextures
operator||
name|QOpenGLFunctions
operator|::
name|NPOTTextureRepeat
expr_stmt|;
block|}
specifier|const
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|version
init|=
name|format
operator|.
name|version
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|<
name|qMakePair
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
operator|||
operator|(
name|version
operator|==
name|qMakePair
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
operator|&&
name|format
operator|.
name|testOption
argument_list|(
name|QSurfaceFormat
operator|::
name|DeprecatedFunctions
argument_list|)
operator|)
operator|||
operator|(
name|version
operator|==
name|qMakePair
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
operator|&&
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_ARB_compatibility"
argument_list|)
operator|)
operator|||
operator|(
name|version
operator|>=
name|qMakePair
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
operator|&&
name|format
operator|.
name|profile
argument_list|()
operator|==
name|QSurfaceFormat
operator|::
name|CompatibilityProfile
operator|)
condition|)
block|{
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|FixedFunctionPipeline
expr_stmt|;
block|}
return|return
name|features
return|;
block|}
block|}
end_function
begin_function
DECL|function|qt_gl_resolve_extensions
specifier|static
name|int
name|qt_gl_resolve_extensions
parameter_list|()
block|{
name|int
name|extensions
init|=
literal|0
decl_stmt|;
name|QOpenGLExtensionMatcher
name|extensionMatcher
decl_stmt|;
name|QOpenGLContext
modifier|*
name|ctx
init|=
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QSurfaceFormat
name|format
init|=
name|ctx
operator|->
name|format
argument_list|()
decl_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_EXT_bgra"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|BGRATextureFormat
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_ARB_texture_rectangle"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|TextureRectangle
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_SGIS_generate_mipmap"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|GenerateMipmap
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_ARB_texture_compression"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|TextureCompression
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_EXT_texture_compression_s3tc"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|DDSTextureCompression
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_OES_compressed_ETC1_RGB8_texture"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|ETC1TextureCompression
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_IMG_texture_compression_pvrtc"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|PVRTCTextureCompression
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_ARB_texture_mirrored_repeat"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|MirroredRepeat
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_EXT_stencil_two_side"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|StencilTwoSide
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_EXT_stencil_wrap"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|StencilWrap
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_NV_float_buffer"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|NVFloatBuffer
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_ARB_pixel_buffer_object"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|PixelBufferObject
expr_stmt|;
if|if
condition|(
name|ctx
operator|->
name|isOpenGLES
argument_list|()
condition|)
block|{
if|if
condition|(
name|format
operator|.
name|majorVersion
argument_list|()
operator|>=
literal|2
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|GenerateMipmap
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_OES_mapbuffer"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|MapBuffer
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_OES_packed_depth_stencil"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|PackedDepthStencil
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_OES_element_index_uint"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|ElementIndexUint
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_OES_depth24"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|Depth24
expr_stmt|;
comment|// TODO: Consider matching GL_APPLE_texture_format_BGRA8888 as well, but it needs testing.
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_IMG_texture_format_BGRA8888"
argument_list|)
operator|||
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_EXT_texture_format_BGRA8888"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|BGRATextureFormat
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_ANGLE_framebuffer_blit"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|FramebufferBlit
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_ANGLE_framebuffer_multisample"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|FramebufferMultisample
expr_stmt|;
block|}
else|else
block|{
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|ElementIndexUint
operator||
name|QOpenGLExtensions
operator|::
name|MapBuffer
expr_stmt|;
comment|// Recognize features by extension name.
if|if
condition|(
name|format
operator|.
name|majorVersion
argument_list|()
operator|>=
literal|3
operator|||
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_ARB_framebuffer_object"
argument_list|)
condition|)
block|{
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|FramebufferMultisample
operator||
name|QOpenGLExtensions
operator|::
name|FramebufferBlit
operator||
name|QOpenGLExtensions
operator|::
name|PackedDepthStencil
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_EXT_framebuffer_multisample"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|FramebufferMultisample
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_EXT_framebuffer_blit"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|FramebufferBlit
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_EXT_packed_depth_stencil"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|PackedDepthStencil
expr_stmt|;
block|}
block|}
if|if
condition|(
name|format
operator|.
name|renderableType
argument_list|()
operator|==
name|QSurfaceFormat
operator|::
name|OpenGL
operator|&&
name|format
operator|.
name|version
argument_list|()
operator|>=
name|qMakePair
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|GeometryShaders
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_EXT_framebuffer_sRGB"
argument_list|)
condition|)
block|{
name|GLboolean
name|srgbCapableFramebuffers
init|=
literal|false
decl_stmt|;
name|ctx
operator|->
name|functions
argument_list|()
operator|->
name|glGetBooleanv
argument_list|(
name|GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
argument_list|,
operator|&
name|srgbCapableFramebuffers
argument_list|)
expr_stmt|;
if|if
condition|(
name|srgbCapableFramebuffers
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|SRGBFrameBuffer
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|extensions
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the set of features that are present on this system's     OpenGL implementation.      It is assumed that the QOpenGLContext associated with this function     resolver is current.      \sa hasOpenGLFeature() */
end_comment
begin_function
DECL|function|openGLFeatures
name|QOpenGLFunctions
operator|::
name|OpenGLFeatures
name|QOpenGLFunctions
operator|::
name|openGLFeatures
parameter_list|()
specifier|const
block|{
name|QOpenGLFunctionsPrivateEx
modifier|*
name|d
init|=
cast|static_cast
argument_list|<
name|QOpenGLFunctionsPrivateEx
operator|*
argument_list|>
argument_list|(
name|d_ptr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|d
operator|->
name|m_features
operator|==
operator|-
literal|1
condition|)
name|d
operator|->
name|m_features
operator|=
name|qt_gl_resolve_features
argument_list|()
expr_stmt|;
return|return
name|QOpenGLFunctions
operator|::
name|OpenGLFeatures
argument_list|(
name|d
operator|->
name|m_features
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if \a feature is present on this system's OpenGL     implementation; false otherwise.      It is assumed that the QOpenGLContext associated with this function     resolver is current.      \sa openGLFeatures() */
end_comment
begin_function
DECL|function|hasOpenGLFeature
name|bool
name|QOpenGLFunctions
operator|::
name|hasOpenGLFeature
parameter_list|(
name|QOpenGLFunctions
operator|::
name|OpenGLFeature
name|feature
parameter_list|)
specifier|const
block|{
name|QOpenGLFunctionsPrivateEx
modifier|*
name|d
init|=
cast|static_cast
argument_list|<
name|QOpenGLFunctionsPrivateEx
operator|*
argument_list|>
argument_list|(
name|d_ptr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|m_features
operator|==
operator|-
literal|1
condition|)
name|d
operator|->
name|m_features
operator|=
name|qt_gl_resolve_features
argument_list|()
expr_stmt|;
return|return
operator|(
name|d
operator|->
name|m_features
operator|&
name|int
argument_list|(
name|feature
argument_list|)
operator|)
operator|!=
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the set of extensions that are present on this system's     OpenGL implementation.      It is assumed that the QOpenGLContext associated with this extension     resolver is current.      \sa hasOpenGLExtensions() */
end_comment
begin_function
DECL|function|openGLExtensions
name|QOpenGLExtensions
operator|::
name|OpenGLExtensions
name|QOpenGLExtensions
operator|::
name|openGLExtensions
parameter_list|()
block|{
name|QOpenGLFunctionsPrivateEx
modifier|*
name|d
init|=
cast|static_cast
argument_list|<
name|QOpenGLFunctionsPrivateEx
operator|*
argument_list|>
argument_list|(
name|d_ptr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|d
operator|->
name|m_extensions
operator|==
operator|-
literal|1
condition|)
name|d
operator|->
name|m_extensions
operator|=
name|qt_gl_resolve_extensions
argument_list|()
expr_stmt|;
return|return
name|QOpenGLExtensions
operator|::
name|OpenGLExtensions
argument_list|(
name|d
operator|->
name|m_extensions
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if \a extension is present on this system's OpenGL     implementation; false otherwise.      It is assumed that the QOpenGLContext associated with this extension     resolver is current.      \sa openGLFeatures() */
end_comment
begin_function
DECL|function|hasOpenGLExtension
name|bool
name|QOpenGLExtensions
operator|::
name|hasOpenGLExtension
parameter_list|(
name|QOpenGLExtensions
operator|::
name|OpenGLExtension
name|extension
parameter_list|)
specifier|const
block|{
name|QOpenGLFunctionsPrivateEx
modifier|*
name|d
init|=
cast|static_cast
argument_list|<
name|QOpenGLFunctionsPrivateEx
operator|*
argument_list|>
argument_list|(
name|d_ptr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|m_extensions
operator|==
operator|-
literal|1
condition|)
name|d
operator|->
name|m_extensions
operator|=
name|qt_gl_resolve_extensions
argument_list|()
expr_stmt|;
return|return
operator|(
name|d
operator|->
name|m_extensions
operator|&
name|int
argument_list|(
name|extension
argument_list|)
operator|)
operator|!=
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QOpenGLFunctions::initializeGLFunctions()     \obsolete      Use initializeOpenGLFunctions() instead. */
end_comment
begin_comment
comment|/*!     Initializes OpenGL function resolution for the current context.      After calling this function, the QOpenGLFunctions object can only be     used with the current context and other contexts that share with it.     Call initializeOpenGLFunctions() again to change the object's context     association. */
end_comment
begin_function
DECL|function|initializeOpenGLFunctions
name|void
name|QOpenGLFunctions
operator|::
name|initializeOpenGLFunctions
parameter_list|()
block|{
name|d_ptr
operator|=
name|qt_gl_functions
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBindTexture(GLenum target, GLuint texture)      Convenience function that calls glBindTexture(\a target, \a texture).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBindTexture.xml}{glBindTexture()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBlendFunc(GLenum sfactor, GLenum dfactor)      Convenience function that calls glBlendFunc(\a sfactor, \a dfactor).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBlendFunc.xml}{glBlendFunc()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glClear(GLbitfield mask)      Convenience function that calls glClear(\a mask).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glClear.xml}{glClear()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)      Convenience function that calls glClearColor(\a red, \a green, \a blue, \a alpha).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glClearColor.xml}{glClearColor()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glClearStencil(GLint s)      Convenience function that calls glClearStencil(\a s).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glClearStencil.xml}{glClearStencil()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)      Convenience function that calls glColorMask(\a red, \a green, \a blue, \a alpha).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glColorMask.xml}{glColorMask()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)      Convenience function that calls glCopyTexImage2D(\a target, \a level, \a internalformat, \a x, \a y, \a width, \a height, \a border).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCopyTexImage2D.xml}{glCopyTexImage2D()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)      Convenience function that calls glCopyTexSubImage2D(\a target, \a level, \a xoffset, \a yoffset, \a x, \a y, \a width, \a height).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCopyTexSubImage2D.xml}{glCopyTexSubImage2D()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glCullFace(GLenum mode)      Convenience function that calls glCullFace(\a mode).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCullFace.xml}{glCullFace()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDeleteTextures(GLsizei n, const GLuint* textures)      Convenience function that calls glDeleteTextures(\a n, \a textures).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDeleteTextures.xml}{glDeleteTextures()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDepthFunc(GLenum func)      Convenience function that calls glDepthFunc(\a func).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDepthFunc.xml}{glDepthFunc()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDepthMask(GLboolean flag)      Convenience function that calls glDepthMask(\a flag).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDepthMask.xml}{glDepthMask()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDisable(GLenum cap)      Convenience function that calls glDisable(\a cap).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDisable.xml}{glDisable()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDrawArrays(GLenum mode, GLint first, GLsizei count)      Convenience function that calls glDrawArrays(\a mode, \a first, \a count).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDrawArrays.xml}{glDrawArrays()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid* indices)      Convenience function that calls glDrawElements(\a mode, \a count, \a type, \a indices).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDrawElements.xml}{glDrawElements()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glEnable(GLenum cap)      Convenience function that calls glEnable(\a cap).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glEnable.xml}{glEnable()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glFinish()      Convenience function that calls glFinish().      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glFinish.xml}{glFinish()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glFlush()      Convenience function that calls glFlush().      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glFlush.xml}{glFlush()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glFrontFace(GLenum mode)      Convenience function that calls glFrontFace(\a mode).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glFrontFace.xml}{glFrontFace()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGenTextures(GLsizei n, GLuint* textures)      Convenience function that calls glGenTextures(\a n, \a textures).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGenTextures.xml}{glGenTextures()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetBooleanv(GLenum pname, GLboolean* params)      Convenience function that calls glGetBooleanv(\a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetBooleanv.xml}{glGetBooleanv()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn GLenum QOpenGLFunctions::glGetError()      Convenience function that calls glGetError().      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetError.xml}{glGetError()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetFloatv(GLenum pname, GLfloat* params)      Convenience function that calls glGetFloatv(\a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetFloatv.xml}{glGetFloatv()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetIntegerv(GLenum pname, GLint* params)      Convenience function that calls glGetIntegerv(\a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetIntegerv.xml}{glGetIntegerv()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn const GLubyte *QOpenGLFunctions::glGetString(GLenum name)      Convenience function that calls glGetString(\a name).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetString.xml}{glGetString()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetTexParameterfv(GLenum target, GLenum pname, GLfloat* params)      Convenience function that calls glGetTexParameterfv(\a target, \a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetTexParameterfv.xml}{glGetTexParameterfv()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetTexParameteriv(GLenum target, GLenum pname, GLint* params)      Convenience function that calls glGetTexParameteriv(\a target, \a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetTexParameteriv.xml}{glGetTexParameteriv()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glHint(GLenum target, GLenum mode)      Convenience function that calls glHint(\a target, \a mode).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glHint.xml}{glHint()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn GLboolean QOpenGLFunctions::glIsEnabled(GLenum cap)      Convenience function that calls glIsEnabled(\a cap).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glIsEnabled.xml}{glIsEnabled()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn GLboolean QOpenGLFunctions::glIsTexture(GLuint texture)      Convenience function that calls glIsTexture(\a texture).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glIsTexture.xml}{glIsTexture()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glLineWidth(GLfloat width)      Convenience function that calls glLineWidth(\a width).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glLineWidth.xml}{glLineWidth()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glPixelStorei(GLenum pname, GLint param)      Convenience function that calls glPixelStorei(\a pname, \a param).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glPixelStorei.xml}{glPixelStorei()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glPolygonOffset(GLfloat factor, GLfloat units)      Convenience function that calls glPolygonOffset(\a factor, \a units).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glPolygonOffset.xml}{glPolygonOffset()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels)      Convenience function that calls glReadPixels(\a x, \a y, \a width, \a height, \a format, \a type, \a pixels).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glReadPixels.xml}{glReadPixels()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glScissor(GLint x, GLint y, GLsizei width, GLsizei height)      Convenience function that calls glScissor(\a x, \a y, \a width, \a height).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glScissor.xml}{glScissor()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glStencilFunc(GLenum func, GLint ref, GLuint mask)      Convenience function that calls glStencilFunc(\a func, \a ref, \a mask).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glStencilFunc.xml}{glStencilFunc()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glStencilMask(GLuint mask)      Convenience function that calls glStencilMask(\a mask).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glStencilMask.xml}{glStencilMask()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)      Convenience function that calls glStencilOp(\a fail, \a zfail, \a zpass).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glStencilOp.xml}{glStencilOp()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid* pixels)      Convenience function that calls glTexImage2D(\a target, \a level, \a internalformat, \a width, \a height, \a border, \a format, \a type, \a pixels).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glTexImage2D.xml}{glTexImage2D()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glTexParameterf(GLenum target, GLenum pname, GLfloat param)      Convenience function that calls glTexParameterf(\a target, \a pname, \a param).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glTexParameterf.xml}{glTexParameterf()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glTexParameterfv(GLenum target, GLenum pname, const GLfloat* params)      Convenience function that calls glTexParameterfv(\a target, \a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glTexParameterfv.xml}{glTexParameterfv()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glTexParameteri(GLenum target, GLenum pname, GLint param)      Convenience function that calls glTexParameteri(\a target, \a pname, \a param).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glTexParameteri.xml}{glTexParameteri()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glTexParameteriv(GLenum target, GLenum pname, const GLint* params)      Convenience function that calls glTexParameteriv(\a target, \a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glTexParameteriv.xml}{glTexParameteriv()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels)      Convenience function that calls glTexSubImage2D(\a target, \a level, \a xoffset, \a yoffset, \a width, \a height, \a format, \a type, \a pixels).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glTexSubImage2D.xml}{glTexSubImage2D()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glViewport(GLint x, GLint y, GLsizei width, GLsizei height)      Convenience function that calls glViewport(\a x, \a y, \a width, \a height).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glViewport.xml}{glViewport()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glActiveTexture(GLenum texture)      Convenience function that calls glActiveTexture(\a texture).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glActiveTexture.xml}{glActiveTexture()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glAttachShader(GLuint program, GLuint shader)      Convenience function that calls glAttachShader(\a program, \a shader).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glAttachShader.xml}{glAttachShader()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBindAttribLocation(GLuint program, GLuint index, const char* name)      Convenience function that calls glBindAttribLocation(\a program, \a index, \a name).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBindAttribLocation.xml}{glBindAttribLocation()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBindBuffer(GLenum target, GLuint buffer)      Convenience function that calls glBindBuffer(\a target, \a buffer).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBindBuffer.xml}{glBindBuffer()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBindFramebuffer(GLenum target, GLuint framebuffer)      Convenience function that calls glBindFramebuffer(\a target, \a framebuffer).      Note that Qt will translate a \a framebuffer argument of 0 to the currently     bound QOpenGLContext's defaultFramebufferObject().      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBindFramebuffer.xml}{glBindFramebuffer()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBindRenderbuffer(GLenum target, GLuint renderbuffer)      Convenience function that calls glBindRenderbuffer(\a target, \a renderbuffer).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBindRenderbuffer.xml}{glBindRenderbuffer()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)      Convenience function that calls glBlendColor(\a red, \a green, \a blue, \a alpha).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBlendColor.xml}{glBlendColor()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBlendEquation(GLenum mode)      Convenience function that calls glBlendEquation(\a mode).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBlendEquation.xml}{glBlendEquation()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)      Convenience function that calls glBlendEquationSeparate(\a modeRGB, \a modeAlpha).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBlendEquationSeparate.xml}{glBlendEquationSeparate()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)      Convenience function that calls glBlendFuncSeparate(\a srcRGB, \a dstRGB, \a srcAlpha, \a dstAlpha).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBlendFuncSeparate.xml}{glBlendFuncSeparate()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBufferData(GLenum target, qopengl_GLsizeiptr size, const void* data, GLenum usage)      Convenience function that calls glBufferData(\a target, \a size, \a data, \a usage).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBufferData.xml}{glBufferData()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBufferSubData(GLenum target, qopengl_GLintptr offset, qopengl_GLsizeiptr size, const void* data)      Convenience function that calls glBufferSubData(\a target, \a offset, \a size, \a data).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBufferSubData.xml}{glBufferSubData()}. */
end_comment
begin_comment
comment|/*!     \fn GLenum QOpenGLFunctions::glCheckFramebufferStatus(GLenum target)      Convenience function that calls glCheckFramebufferStatus(\a target).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCheckFramebufferStatus.xml}{glCheckFramebufferStatus()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glClearDepthf(GLclampf depth)      Convenience function that calls glClearDepth(\a depth) on     desktop OpenGL systems and glClearDepthf(\a depth) on     embedded OpenGL ES systems.      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glClearDepthf.xml}{glClearDepthf()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glCompileShader(GLuint shader)      Convenience function that calls glCompileShader(\a shader).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCompileShader.xml}{glCompileShader()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data)      Convenience function that calls glCompressedTexImage2D(\a target, \a level, \a internalformat, \a width, \a height, \a border, \a imageSize, \a data).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCompressedTexImage2D.xml}{glCompressedTexImage2D()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data)      Convenience function that calls glCompressedTexSubImage2D(\a target, \a level, \a xoffset, \a yoffset, \a width, \a height, \a format, \a imageSize, \a data).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCompressedTexSubImage2D.xml}{glCompressedTexSubImage2D()}. */
end_comment
begin_comment
comment|/*!     \fn GLuint QOpenGLFunctions::glCreateProgram()      Convenience function that calls glCreateProgram().      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCreateProgram.xml}{glCreateProgram()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn GLuint QOpenGLFunctions::glCreateShader(GLenum type)      Convenience function that calls glCreateShader(\a type).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCreateShader.xml}{glCreateShader()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDeleteBuffers(GLsizei n, const GLuint* buffers)      Convenience function that calls glDeleteBuffers(\a n, \a buffers).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDeleteBuffers.xml}{glDeleteBuffers()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDeleteFramebuffers(GLsizei n, const GLuint* framebuffers)      Convenience function that calls glDeleteFramebuffers(\a n, \a framebuffers).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDeleteFramebuffers.xml}{glDeleteFramebuffers()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDeleteProgram(GLuint program)      Convenience function that calls glDeleteProgram(\a program).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDeleteProgram.xml}{glDeleteProgram()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDeleteRenderbuffers(GLsizei n, const GLuint* renderbuffers)      Convenience function that calls glDeleteRenderbuffers(\a n, \a renderbuffers).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDeleteRenderbuffers.xml}{glDeleteRenderbuffers()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDeleteShader(GLuint shader)      Convenience function that calls glDeleteShader(\a shader).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDeleteShader.xml}{glDeleteShader()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDepthRangef(GLclampf zNear, GLclampf zFar)      Convenience function that calls glDepthRange(\a zNear, \a zFar) on     desktop OpenGL systems and glDepthRangef(\a zNear, \a zFar) on     embedded OpenGL ES systems.      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDepthRangef.xml}{glDepthRangef()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDetachShader(GLuint program, GLuint shader)      Convenience function that calls glDetachShader(\a program, \a shader).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDetachShader.xml}{glDetachShader()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDisableVertexAttribArray(GLuint index)      Convenience function that calls glDisableVertexAttribArray(\a index).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDisableVertexAttribArray.xml}{glDisableVertexAttribArray()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glEnableVertexAttribArray(GLuint index)      Convenience function that calls glEnableVertexAttribArray(\a index).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glEnableVertexAttribArray.xml}{glEnableVertexAttribArray()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)      Convenience function that calls glFramebufferRenderbuffer(\a target, \a attachment, \a renderbuffertarget, \a renderbuffer).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glFramebufferRenderbuffer.xml}{glFramebufferRenderbuffer()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)      Convenience function that calls glFramebufferTexture2D(\a target, \a attachment, \a textarget, \a texture, \a level).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glFramebufferTexture2D.xml}{glFramebufferTexture2D()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGenBuffers(GLsizei n, GLuint* buffers)      Convenience function that calls glGenBuffers(\a n, \a buffers).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGenBuffers.xml}{glGenBuffers()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGenerateMipmap(GLenum target)      Convenience function that calls glGenerateMipmap(\a target).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGenerateMipmap.xml}{glGenerateMipmap()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGenFramebuffers(GLsizei n, GLuint* framebuffers)      Convenience function that calls glGenFramebuffers(\a n, \a framebuffers).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGenFramebuffers.xml}{glGenFramebuffers()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGenRenderbuffers(GLsizei n, GLuint* renderbuffers)      Convenience function that calls glGenRenderbuffers(\a n, \a renderbuffers).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGenRenderbuffers.xml}{glGenRenderbuffers()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name)      Convenience function that calls glGetActiveAttrib(\a program, \a index, \a bufsize, \a length, \a size, \a type, \a name).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetActiveAttrib.xml}{glGetActiveAttrib()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetActiveUniform(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name)      Convenience function that calls glGetActiveUniform(\a program, \a index, \a bufsize, \a length, \a size, \a type, \a name).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetActiveUniform.xml}{glGetActiveUniform()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetAttachedShaders(GLuint program, GLsizei maxcount, GLsizei* count, GLuint* shaders)      Convenience function that calls glGetAttachedShaders(\a program, \a maxcount, \a count, \a shaders).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetAttachedShaders.xml}{glGetAttachedShaders()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn GLint QOpenGLFunctions::glGetAttribLocation(GLuint program, const char* name)      Convenience function that calls glGetAttribLocation(\a program, \a name).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetAttribLocation.xml}{glGetAttribLocation()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetBufferParameteriv(GLenum target, GLenum pname, GLint* params)      Convenience function that calls glGetBufferParameteriv(\a target, \a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetBufferParameteriv.xml}{glGetBufferParameteriv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint* params)      Convenience function that calls glGetFramebufferAttachmentParameteriv(\a target, \a attachment, \a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetFramebufferAttachmentParameteriv.xml}{glGetFramebufferAttachmentParameteriv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetProgramiv(GLuint program, GLenum pname, GLint* params)      Convenience function that calls glGetProgramiv(\a program, \a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetProgramiv.xml}{glGetProgramiv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetProgramInfoLog(GLuint program, GLsizei bufsize, GLsizei* length, char* infolog)      Convenience function that calls glGetProgramInfoLog(\a program, \a bufsize, \a length, \a infolog).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetProgramInfoLog.xml}{glGetProgramInfoLog()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint* params)      Convenience function that calls glGetRenderbufferParameteriv(\a target, \a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetRenderbufferParameteriv.xml}{glGetRenderbufferParameteriv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetShaderiv(GLuint shader, GLenum pname, GLint* params)      Convenience function that calls glGetShaderiv(\a shader, \a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetShaderiv.xml}{glGetShaderiv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetShaderInfoLog(GLuint shader, GLsizei bufsize, GLsizei* length, char* infolog)      Convenience function that calls glGetShaderInfoLog(\a shader, \a bufsize, \a length, \a infolog).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetShaderInfoLog.xml}{glGetShaderInfoLog()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision)      Convenience function that calls glGetShaderPrecisionFormat(\a shadertype, \a precisiontype, \a range, \a precision).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetShaderPrecisionFormat.xml}{glGetShaderPrecisionFormat()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetShaderSource(GLuint shader, GLsizei bufsize, GLsizei* length, char* source)      Convenience function that calls glGetShaderSource(\a shader, \a bufsize, \a length, \a source).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetShaderSource.xml}{glGetShaderSource()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetUniformfv(GLuint program, GLint location, GLfloat* params)      Convenience function that calls glGetUniformfv(\a program, \a location, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetUniformfv.xml}{glGetUniformfv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetUniformiv(GLuint program, GLint location, GLint* params)      Convenience function that calls glGetUniformiv(\a program, \a location, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetUniformiv.xml}{glGetUniformiv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn GLint QOpenGLFunctions::glGetUniformLocation(GLuint program, const char* name)      Convenience function that calls glGetUniformLocation(\a program, \a name).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetUniformLocation.xml}{glGetUniformLocation()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat* params)      Convenience function that calls glGetVertexAttribfv(\a index, \a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetVertexAttribfv.xml}{glGetVertexAttribfv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetVertexAttribiv(GLuint index, GLenum pname, GLint* params)      Convenience function that calls glGetVertexAttribiv(\a index, \a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetVertexAttribiv.xml}{glGetVertexAttribiv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetVertexAttribPointerv(GLuint index, GLenum pname, void** pointer)      Convenience function that calls glGetVertexAttribPointerv(\a index, \a pname, \a pointer).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetVertexAttribPointerv.xml}{glGetVertexAttribPointerv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn GLboolean QOpenGLFunctions::glIsBuffer(GLuint buffer)      Convenience function that calls glIsBuffer(\a buffer).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glIsBuffer.xml}{glIsBuffer()}. */
end_comment
begin_comment
comment|/*!     \fn GLboolean QOpenGLFunctions::glIsFramebuffer(GLuint framebuffer)      Convenience function that calls glIsFramebuffer(\a framebuffer).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glIsFramebuffer.xml}{glIsFramebuffer()}. */
end_comment
begin_comment
comment|/*!     \fn GLboolean QOpenGLFunctions::glIsProgram(GLuint program)      Convenience function that calls glIsProgram(\a program).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glIsProgram.xml}{glIsProgram()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn GLboolean QOpenGLFunctions::glIsRenderbuffer(GLuint renderbuffer)      Convenience function that calls glIsRenderbuffer(\a renderbuffer).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glIsRenderbuffer.xml}{glIsRenderbuffer()}. */
end_comment
begin_comment
comment|/*!     \fn GLboolean QOpenGLFunctions::glIsShader(GLuint shader)      Convenience function that calls glIsShader(\a shader).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glIsShader.xml}{glIsShader()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glLinkProgram(GLuint program)      Convenience function that calls glLinkProgram(\a program).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glLinkProgram.xml}{glLinkProgram()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glReleaseShaderCompiler()      Convenience function that calls glReleaseShaderCompiler().      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glReleaseShaderCompiler.xml}{glReleaseShaderCompiler()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)      Convenience function that calls glRenderbufferStorage(\a target, \a internalformat, \a width, \a height).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glRenderbufferStorage.xml}{glRenderbufferStorage()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glSampleCoverage(GLclampf value, GLboolean invert)      Convenience function that calls glSampleCoverage(\a value, \a invert).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glSampleCoverage.xml}{glSampleCoverage()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glShaderBinary(GLint n, const GLuint* shaders, GLenum binaryformat, const void* binary, GLint length)      Convenience function that calls glShaderBinary(\a n, \a shaders, \a binaryformat, \a binary, \a length).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glShaderBinary.xml}{glShaderBinary()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glShaderSource(GLuint shader, GLsizei count, const char** string, const GLint* length)      Convenience function that calls glShaderSource(\a shader, \a count, \a string, \a length).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glShaderSource.xml}{glShaderSource()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)      Convenience function that calls glStencilFuncSeparate(\a face, \a func, \a ref, \a mask).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glStencilFuncSeparate.xml}{glStencilFuncSeparate()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glStencilMaskSeparate(GLenum face, GLuint mask)      Convenience function that calls glStencilMaskSeparate(\a face, \a mask).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glStencilMaskSeparate.xml}{glStencilMaskSeparate()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)      Convenience function that calls glStencilOpSeparate(\a face, \a fail, \a zfail, \a zpass).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glStencilOpSeparate.xml}{glStencilOpSeparate()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform1f(GLint location, GLfloat x)      Convenience function that calls glUniform1f(\a location, \a x).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform1f.xml}{glUniform1f()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform1fv(GLint location, GLsizei count, const GLfloat* v)      Convenience function that calls glUniform1fv(\a location, \a count, \a v).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform1fv.xml}{glUniform1fv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform1i(GLint location, GLint x)      Convenience function that calls glUniform1i(\a location, \a x).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform1i.xml}{glUniform1i()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform1iv(GLint location, GLsizei count, const GLint* v)      Convenience function that calls glUniform1iv(\a location, \a count, \a v).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform1iv.xml}{glUniform1iv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform2f(GLint location, GLfloat x, GLfloat y)      Convenience function that calls glUniform2f(\a location, \a x, \a y).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform2f.xml}{glUniform2f()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform2fv(GLint location, GLsizei count, const GLfloat* v)      Convenience function that calls glUniform2fv(\a location, \a count, \a v).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform2fv.xml}{glUniform2fv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform2i(GLint location, GLint x, GLint y)      Convenience function that calls glUniform2i(\a location, \a x, \a y).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform2i.xml}{glUniform2i()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform2iv(GLint location, GLsizei count, const GLint* v)      Convenience function that calls glUniform2iv(\a location, \a count, \a v).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform2iv.xml}{glUniform2iv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform3f(GLint location, GLfloat x, GLfloat y, GLfloat z)      Convenience function that calls glUniform3f(\a location, \a x, \a y, \a z).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform3f.xml}{glUniform3f()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform3fv(GLint location, GLsizei count, const GLfloat* v)      Convenience function that calls glUniform3fv(\a location, \a count, \a v).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform3fv.xml}{glUniform3fv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform3i(GLint location, GLint x, GLint y, GLint z)      Convenience function that calls glUniform3i(\a location, \a x, \a y, \a z).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform3i.xml}{glUniform3i()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform3iv(GLint location, GLsizei count, const GLint* v)      Convenience function that calls glUniform3iv(\a location, \a count, \a v).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform3iv.xml}{glUniform3iv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform4f(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)      Convenience function that calls glUniform4f(\a location, \a x, \a y, \a z, \a w).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform4f.xml}{glUniform4f()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform4fv(GLint location, GLsizei count, const GLfloat* v)      Convenience function that calls glUniform4fv(\a location, \a count, \a v).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform4fv.xml}{glUniform4fv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform4i(GLint location, GLint x, GLint y, GLint z, GLint w)      Convenience function that calls glUniform4i(\a location, \a x, \a y, \a z, \a w).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform4i.xml}{glUniform4i()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform4iv(GLint location, GLsizei count, const GLint* v)      Convenience function that calls glUniform4iv(\a location, \a count, \a v).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform4iv.xml}{glUniform4iv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)      Convenience function that calls glUniformMatrix2fv(\a location, \a count, \a transpose, \a value).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniformMatrix2fv.xml}{glUniformMatrix2fv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)      Convenience function that calls glUniformMatrix3fv(\a location, \a count, \a transpose, \a value).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniformMatrix3fv.xml}{glUniformMatrix3fv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)      Convenience function that calls glUniformMatrix4fv(\a location, \a count, \a transpose, \a value).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniformMatrix4fv.xml}{glUniformMatrix4fv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUseProgram(GLuint program)      Convenience function that calls glUseProgram(\a program).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUseProgram.xml}{glUseProgram()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glValidateProgram(GLuint program)      Convenience function that calls glValidateProgram(\a program).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glValidateProgram.xml}{glValidateProgram()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glVertexAttrib1f(GLuint indx, GLfloat x)      Convenience function that calls glVertexAttrib1f(\a indx, \a x).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib1f.xml}{glVertexAttrib1f()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glVertexAttrib1fv(GLuint indx, const GLfloat* values)      Convenience function that calls glVertexAttrib1fv(\a indx, \a values).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib1fv.xml}{glVertexAttrib1fv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glVertexAttrib2f(GLuint indx, GLfloat x, GLfloat y)      Convenience function that calls glVertexAttrib2f(\a indx, \a x, \a y).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib2f.xml}{glVertexAttrib2f()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glVertexAttrib2fv(GLuint indx, const GLfloat* values)      Convenience function that calls glVertexAttrib2fv(\a indx, \a values).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib2fv.xml}{glVertexAttrib2fv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glVertexAttrib3f(GLuint indx, GLfloat x, GLfloat y, GLfloat z)      Convenience function that calls glVertexAttrib3f(\a indx, \a x, \a y, \a z).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib3f.xml}{glVertexAttrib3f()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glVertexAttrib3fv(GLuint indx, const GLfloat* values)      Convenience function that calls glVertexAttrib3fv(\a indx, \a values).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib3fv.xml}{glVertexAttrib3fv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glVertexAttrib4f(GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w)      Convenience function that calls glVertexAttrib4f(\a indx, \a x, \a y, \a z, \a w).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib4f.xml}{glVertexAttrib4f()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glVertexAttrib4fv(GLuint indx, const GLfloat* values)      Convenience function that calls glVertexAttrib4fv(\a indx, \a values).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib4fv.xml}{glVertexAttrib4fv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glVertexAttribPointer(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* ptr)      Convenience function that calls glVertexAttribPointer(\a indx, \a size, \a type, \a normalized, \a stride, \a ptr).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttribPointer.xml}{glVertexAttribPointer()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn bool QOpenGLFunctions::isInitialized(const QOpenGLFunctionsPrivate *d)     \internal */
end_comment
begin_namespace
namespace|namespace
block|{
DECL|enum|ResolvePolicy
enum|enum
name|ResolvePolicy
block|{
DECL|enumerator|ResolveOES
name|ResolveOES
init|=
literal|0x1
block|,
DECL|enumerator|ResolveEXT
name|ResolveEXT
init|=
literal|0x2
block|}
enum|;
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
class|class
DECL|class|Resolver
name|Resolver
block|{
public|public:
DECL|function|Resolver
name|Resolver
parameter_list|(
name|FuncType
name|Base
operator|::
modifier|*
name|func
parameter_list|,
name|FuncType
name|fallback
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|alternateName
init|=
literal|0
parameter_list|)
member_init_list|:
name|funcPointerName
argument_list|(
name|func
argument_list|)
member_init_list|,
name|fallbackFuncPointer
argument_list|(
name|fallback
argument_list|)
member_init_list|,
name|funcName
argument_list|(
name|name
argument_list|)
member_init_list|,
name|alternateFuncName
argument_list|(
name|alternateName
argument_list|)
block|{     }
name|ReturnType
name|operator
name|()
parameter_list|()
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|>
name|ReturnType
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|>
name|ReturnType
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|>
name|ReturnType
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|>
name|ReturnType
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|>
name|ReturnType
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|>
name|ReturnType
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|>
name|ReturnType
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|>
name|ReturnType
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|,
name|typename
name|P9
parameter_list|>
name|ReturnType
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|,
name|P9
name|p9
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|,
name|typename
name|P9
parameter_list|,
name|typename
name|P10
parameter_list|>
name|ReturnType
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|,
name|P9
name|p9
parameter_list|,
name|P10
name|p10
parameter_list|)
function_decl|;
private|private:
DECL|member|funcPointerName
name|FuncType
name|Base
operator|::
modifier|*
name|funcPointerName
decl_stmt|;
DECL|member|fallbackFuncPointer
name|FuncType
name|fallbackFuncPointer
decl_stmt|;
DECL|member|funcName
name|QByteArray
name|funcName
decl_stmt|;
DECL|member|alternateFuncName
name|QByteArray
name|alternateFuncName
decl_stmt|;
block|}
class|;
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
class|class
DECL|class|Resolver
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
block|{
public|public:
DECL|function|Resolver
name|Resolver
parameter_list|(
name|FuncType
name|Base
operator|::
modifier|*
name|func
parameter_list|,
name|FuncType
name|fallback
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|alternateName
init|=
literal|0
parameter_list|)
member_init_list|:
name|funcPointerName
argument_list|(
name|func
argument_list|)
member_init_list|,
name|fallbackFuncPointer
argument_list|(
name|fallback
argument_list|)
member_init_list|,
name|funcName
argument_list|(
name|name
argument_list|)
member_init_list|,
name|alternateFuncName
argument_list|(
name|alternateName
argument_list|)
block|{     }
name|void
name|operator
name|()
parameter_list|()
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|>
name|void
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|>
name|void
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|>
name|void
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|>
name|void
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|>
name|void
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|>
name|void
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|>
name|void
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|>
name|void
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|,
name|typename
name|P9
parameter_list|>
name|void
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|,
name|P9
name|p9
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|,
name|typename
name|P9
parameter_list|,
name|typename
name|P10
parameter_list|>
name|void
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|,
name|P9
name|p9
parameter_list|,
name|P10
name|p10
parameter_list|)
function_decl|;
private|private:
DECL|member|funcPointerName
name|FuncType
name|Base
operator|::
modifier|*
name|funcPointerName
decl_stmt|;
DECL|member|fallbackFuncPointer
name|FuncType
name|fallbackFuncPointer
decl_stmt|;
DECL|member|funcName
name|QByteArray
name|funcName
decl_stmt|;
DECL|member|alternateFuncName
name|QByteArray
name|alternateFuncName
decl_stmt|;
block|}
class|;
DECL|macro|RESOLVER_COMMON
define|#
directive|define
name|RESOLVER_COMMON
define|\
value|QOpenGLContext *context = QOpenGLContext::currentContext(); \     Base *funcs = qt_gl_functions(context); \  \     FuncType old = funcs->*funcPointerName; \  \     funcs->*funcPointerName = (FuncType)context->getProcAddress(funcName); \  \     if ((Policy& ResolveOES)&& !(funcs->*funcPointerName)) \         funcs->*funcPointerName = (FuncType)context->getProcAddress(funcName + "OES"); \  \     if (!(funcs->*funcPointerName)) \         funcs->*funcPointerName = (FuncType)context->getProcAddress(funcName + "ARB"); \  \     if ((Policy& ResolveEXT)&& !(funcs->*funcPointerName)) \         funcs->*funcPointerName = (FuncType)context->getProcAddress(funcName + "EXT"); \  \     if (!alternateFuncName.isEmpty()&& !(funcs->*funcPointerName)) { \         funcs->*funcPointerName = (FuncType)context->getProcAddress(alternateFuncName); \  \         if ((Policy& ResolveOES)&& !(funcs->*funcPointerName)) \             funcs->*funcPointerName = (FuncType)context->getProcAddress(alternateFuncName + "OES"); \  \         if (!(funcs->*funcPointerName)) \             funcs->*funcPointerName = (FuncType)context->getProcAddress(alternateFuncName + "ARB"); \  \         if ((Policy& ResolveEXT)&& !(funcs->*funcPointerName)) \             funcs->*funcPointerName = (FuncType)context->getProcAddress(alternateFuncName + "EXT"); \     }
DECL|macro|RESOLVER_COMMON_NON_VOID
define|#
directive|define
name|RESOLVER_COMMON_NON_VOID
define|\
value|RESOLVER_COMMON \  \     if (!(funcs->*funcPointerName)) { \         if (fallbackFuncPointer) { \             funcs->*funcPointerName = fallbackFuncPointer; \         } else { \             funcs->*funcPointerName = old; \             return ReturnType(); \         } \     }
DECL|macro|RESOLVER_COMMON_VOID
define|#
directive|define
name|RESOLVER_COMMON_VOID
define|\
value|RESOLVER_COMMON \  \     if (!(funcs->*funcPointerName)) { \         if (fallbackFuncPointer) { \             funcs->*funcPointerName = fallbackFuncPointer; \         } else { \             funcs->*funcPointerName = old; \             return; \         } \     }
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
DECL|function|operator ()
name|ReturnType
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
operator|::
name|operator
name|()
parameter_list|()
block|{
name|RESOLVER_COMMON_NON_VOID
return|return
call|(
name|funcs
operator|->*
name|funcPointerName
call|)
argument_list|()
return|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|>
DECL|function|operator ()
name|ReturnType
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|)
block|{
name|RESOLVER_COMMON_NON_VOID
return|return
call|(
name|funcs
operator|->*
name|funcPointerName
call|)
argument_list|(
name|p1
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|>
DECL|function|operator ()
name|ReturnType
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|)
block|{
name|RESOLVER_COMMON_NON_VOID
return|return
call|(
name|funcs
operator|->*
name|funcPointerName
call|)
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|>
DECL|function|operator ()
name|ReturnType
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|)
block|{
name|RESOLVER_COMMON_NON_VOID
return|return
call|(
name|funcs
operator|->*
name|funcPointerName
call|)
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|>
DECL|function|operator ()
name|ReturnType
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|)
block|{
name|RESOLVER_COMMON_NON_VOID
return|return
call|(
name|funcs
operator|->*
name|funcPointerName
call|)
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|>
DECL|function|operator ()
name|ReturnType
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|)
block|{
name|RESOLVER_COMMON_NON_VOID
return|return
call|(
name|funcs
operator|->*
name|funcPointerName
call|)
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|,
name|p5
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|>
DECL|function|operator ()
name|ReturnType
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|)
block|{
name|RESOLVER_COMMON_NON_VOID
return|return
call|(
name|funcs
operator|->*
name|funcPointerName
call|)
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|,
name|p5
argument_list|,
name|p6
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|>
DECL|function|operator ()
name|ReturnType
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|)
block|{
name|RESOLVER_COMMON_NON_VOID
return|return
call|(
name|funcs
operator|->*
name|funcPointerName
call|)
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|,
name|p5
argument_list|,
name|p6
argument_list|,
name|p7
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|>
DECL|function|operator ()
name|ReturnType
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|)
block|{
name|RESOLVER_COMMON_NON_VOID
return|return
call|(
name|funcs
operator|->*
name|funcPointerName
call|)
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|,
name|p5
argument_list|,
name|p6
argument_list|,
name|p7
argument_list|,
name|p8
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|,
name|typename
name|P9
parameter_list|>
DECL|function|operator ()
name|ReturnType
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|,
name|P9
name|p9
parameter_list|)
block|{
name|RESOLVER_COMMON_NON_VOID
return|return
call|(
name|funcs
operator|->*
name|funcPointerName
call|)
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|,
name|p5
argument_list|,
name|p6
argument_list|,
name|p7
argument_list|,
name|p8
argument_list|,
name|p9
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|,
name|typename
name|P9
parameter_list|,
name|typename
name|P10
parameter_list|>
DECL|function|operator ()
name|ReturnType
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|,
name|P9
name|p9
parameter_list|,
name|P10
name|p10
parameter_list|)
block|{
name|RESOLVER_COMMON_NON_VOID
return|return
call|(
name|funcs
operator|->*
name|funcPointerName
call|)
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|,
name|p5
argument_list|,
name|p6
argument_list|,
name|p7
argument_list|,
name|p8
argument_list|,
name|p9
argument_list|,
name|p10
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
DECL|function|operator ()
name|void
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
operator|::
name|operator
name|()
parameter_list|()
block|{
name|RESOLVER_COMMON_VOID
function_decl|(
name|funcs
operator|->*
name|funcPointerName
function_decl|)
parameter_list|()
function_decl|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|>
DECL|function|operator ()
name|void
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|)
block|{
name|RESOLVER_COMMON_VOID
function_decl|(
name|funcs
operator|->*
name|funcPointerName
function_decl|)
parameter_list|(
name|p1
parameter_list|)
function_decl|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|>
DECL|function|operator ()
name|void
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|)
block|{
name|RESOLVER_COMMON_VOID
function_decl|(
name|funcs
operator|->*
name|funcPointerName
function_decl|)
parameter_list|(
name|p1
parameter_list|,
name|p2
parameter_list|)
function_decl|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|>
DECL|function|operator ()
name|void
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|)
block|{
name|RESOLVER_COMMON_VOID
function_decl|(
name|funcs
operator|->*
name|funcPointerName
function_decl|)
parameter_list|(
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|)
function_decl|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|>
DECL|function|operator ()
name|void
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|)
block|{
name|RESOLVER_COMMON_VOID
function_decl|(
name|funcs
operator|->*
name|funcPointerName
function_decl|)
parameter_list|(
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|)
function_decl|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|>
DECL|function|operator ()
name|void
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|)
block|{
name|RESOLVER_COMMON_VOID
function_decl|(
name|funcs
operator|->*
name|funcPointerName
function_decl|)
parameter_list|(
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|)
function_decl|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|>
DECL|function|operator ()
name|void
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|)
block|{
name|RESOLVER_COMMON_VOID
function_decl|(
name|funcs
operator|->*
name|funcPointerName
function_decl|)
parameter_list|(
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|)
function_decl|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|>
DECL|function|operator ()
name|void
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|)
block|{
name|RESOLVER_COMMON_VOID
function_decl|(
name|funcs
operator|->*
name|funcPointerName
function_decl|)
parameter_list|(
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|,
name|p7
parameter_list|)
function_decl|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|>
DECL|function|operator ()
name|void
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|)
block|{
name|RESOLVER_COMMON_VOID
function_decl|(
name|funcs
operator|->*
name|funcPointerName
function_decl|)
parameter_list|(
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|,
name|p7
parameter_list|,
name|p8
parameter_list|)
function_decl|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|,
name|typename
name|P9
parameter_list|>
DECL|function|operator ()
name|void
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|,
name|P9
name|p9
parameter_list|)
block|{
name|RESOLVER_COMMON_VOID
function_decl|(
name|funcs
operator|->*
name|funcPointerName
function_decl|)
parameter_list|(
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|,
name|p7
parameter_list|,
name|p8
parameter_list|,
name|p9
parameter_list|)
function_decl|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|,
name|typename
name|P9
parameter_list|,
name|typename
name|P10
parameter_list|>
DECL|function|operator ()
name|void
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|,
name|P9
name|p9
parameter_list|,
name|P10
name|p10
parameter_list|)
block|{
name|RESOLVER_COMMON_VOID
function_decl|(
name|funcs
operator|->*
name|funcPointerName
function_decl|)
parameter_list|(
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|,
name|p7
parameter_list|,
name|p8
parameter_list|,
name|p9
parameter_list|,
name|p10
parameter_list|)
function_decl|;
block|}
template|template
parameter_list|<
name|typename
name|ReturnType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|>
DECL|function|functionResolverWithFallback
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
name|functionResolverWithFallback
parameter_list|(
name|FuncType
name|Base
operator|::
modifier|*
name|func
parameter_list|,
name|FuncType
name|fallback
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|alternate
init|=
literal|0
parameter_list|)
block|{
return|return
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
argument_list|(
name|func
argument_list|,
name|fallback
argument_list|,
name|name
argument_list|,
name|alternate
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|ReturnType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|>
DECL|function|functionResolver
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
name|functionResolver
parameter_list|(
name|FuncType
name|Base
operator|::
modifier|*
name|func
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|alternate
init|=
literal|0
parameter_list|)
block|{
return|return
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
argument_list|(
name|func
argument_list|,
literal|0
argument_list|,
name|name
argument_list|,
name|alternate
argument_list|)
return|;
block|}
block|}
end_namespace
begin_define
DECL|macro|RESOLVE_FUNC
define|#
directive|define
name|RESOLVE_FUNC
parameter_list|(
name|RETURN_TYPE
parameter_list|,
name|POLICY
parameter_list|,
name|NAME
parameter_list|)
define|\
value|return functionResolver<RETURN_TYPE, POLICY>(&QOpenGLExtensionsPrivate::NAME, "gl" #NAME)
end_define
begin_define
DECL|macro|RESOLVE_FUNC_VOID
define|#
directive|define
name|RESOLVE_FUNC_VOID
parameter_list|(
name|POLICY
parameter_list|,
name|NAME
parameter_list|)
define|\
value|functionResolver<void, POLICY>(&QOpenGLExtensionsPrivate::NAME, "gl" #NAME)
end_define
begin_define
DECL|macro|RESOLVE_FUNC_SPECIAL
define|#
directive|define
name|RESOLVE_FUNC_SPECIAL
parameter_list|(
name|RETURN_TYPE
parameter_list|,
name|POLICY
parameter_list|,
name|NAME
parameter_list|)
define|\
value|return functionResolverWithFallback<RETURN_TYPE, POLICY>(&QOpenGLExtensionsPrivate::NAME, qopenglfSpecial##NAME, "gl" #NAME)
end_define
begin_define
DECL|macro|RESOLVE_FUNC_SPECIAL_VOID
define|#
directive|define
name|RESOLVE_FUNC_SPECIAL_VOID
parameter_list|(
name|POLICY
parameter_list|,
name|NAME
parameter_list|)
define|\
value|functionResolverWithFallback<void, POLICY>(&QOpenGLExtensionsPrivate::NAME, qopenglfSpecial##NAME, "gl" #NAME)
end_define
begin_define
DECL|macro|RESOLVE_FUNC_WITH_ALTERNATE
define|#
directive|define
name|RESOLVE_FUNC_WITH_ALTERNATE
parameter_list|(
name|RETURN_TYPE
parameter_list|,
name|POLICY
parameter_list|,
name|NAME
parameter_list|,
name|ALTERNATE
parameter_list|)
define|\
value|return functionResolver<RETURN_TYPE, POLICY>(&QOpenGLExtensionsPrivate::NAME, "gl" #NAME, "gl" #ALTERNATE)
end_define
begin_define
DECL|macro|RESOLVE_FUNC_VOID_WITH_ALTERNATE
define|#
directive|define
name|RESOLVE_FUNC_VOID_WITH_ALTERNATE
parameter_list|(
name|POLICY
parameter_list|,
name|NAME
parameter_list|,
name|ALTERNATE
parameter_list|)
define|\
value|functionResolver<void, POLICY>(&QOpenGLExtensionsPrivate::NAME, "gl" #NAME, "gl" #ALTERNATE)
end_define
begin_ifndef
ifndef|#
directive|ifndef
name|QT_OPENGL_ES_2
end_ifndef
begin_comment
comment|// GLES2 + OpenGL1 common subset. These are normally not resolvable,
end_comment
begin_comment
comment|// but the underlying platform code may hide this limitation.
end_comment
begin_function
DECL|function|qopenglfResolveBindTexture
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBindTexture
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|texture
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|BindTexture
argument_list|)
argument_list|(
name|target
argument_list|,
name|texture
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBlendFunc
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBlendFunc
parameter_list|(
name|GLenum
name|sfactor
parameter_list|,
name|GLenum
name|dfactor
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|BlendFunc
argument_list|)
argument_list|(
name|sfactor
argument_list|,
name|dfactor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveClear
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveClear
parameter_list|(
name|GLbitfield
name|mask
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Clear
argument_list|)
argument_list|(
name|mask
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveClearColor
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveClearColor
parameter_list|(
name|GLclampf
name|red
parameter_list|,
name|GLclampf
name|green
parameter_list|,
name|GLclampf
name|blue
parameter_list|,
name|GLclampf
name|alpha
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ClearColor
argument_list|)
argument_list|(
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveClearDepthf
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveClearDepthf
parameter_list|(
name|GLclampf
name|depth
parameter_list|)
block|{
if|if
condition|(
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
operator|->
name|isOpenGLES
argument_list|()
condition|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ClearDepthf
argument_list|)
argument_list|(
name|depth
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ClearDepth
argument_list|)
argument_list|(
operator|(
name|GLdouble
operator|)
name|depth
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qopenglfResolveClearStencil
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveClearStencil
parameter_list|(
name|GLint
name|s
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ClearStencil
argument_list|)
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveColorMask
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveColorMask
parameter_list|(
name|GLboolean
name|red
parameter_list|,
name|GLboolean
name|green
parameter_list|,
name|GLboolean
name|blue
parameter_list|,
name|GLboolean
name|alpha
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ColorMask
argument_list|)
argument_list|(
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveCopyTexImage2D
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveCopyTexImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|border
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|CopyTexImage2D
argument_list|)
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveCopyTexSubImage2D
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveCopyTexSubImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|CopyTexSubImage2D
argument_list|)
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveCullFace
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveCullFace
parameter_list|(
name|GLenum
name|mode
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|CullFace
argument_list|)
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDeleteTextures
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDeleteTextures
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|textures
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DeleteTextures
argument_list|)
argument_list|(
name|n
argument_list|,
name|textures
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDepthFunc
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDepthFunc
parameter_list|(
name|GLenum
name|func
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DepthFunc
argument_list|)
argument_list|(
name|func
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDepthMask
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDepthMask
parameter_list|(
name|GLboolean
name|flag
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DepthMask
argument_list|)
argument_list|(
name|flag
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDepthRangef
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDepthRangef
parameter_list|(
name|GLclampf
name|zNear
parameter_list|,
name|GLclampf
name|zFar
parameter_list|)
block|{
if|if
condition|(
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
operator|->
name|isOpenGLES
argument_list|()
condition|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DepthRangef
argument_list|)
argument_list|(
name|zNear
argument_list|,
name|zFar
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DepthRange
argument_list|)
argument_list|(
operator|(
name|GLdouble
operator|)
name|zNear
argument_list|,
operator|(
name|GLdouble
operator|)
name|zFar
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qopenglfResolveDisable
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDisable
parameter_list|(
name|GLenum
name|cap
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Disable
argument_list|)
argument_list|(
name|cap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDrawArrays
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDrawArrays
parameter_list|(
name|GLenum
name|mode
parameter_list|,
name|GLint
name|first
parameter_list|,
name|GLsizei
name|count
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DrawArrays
argument_list|)
argument_list|(
name|mode
argument_list|,
name|first
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDrawElements
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDrawElements
parameter_list|(
name|GLenum
name|mode
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|indices
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DrawElements
argument_list|)
argument_list|(
name|mode
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveEnable
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveEnable
parameter_list|(
name|GLenum
name|cap
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Enable
argument_list|)
argument_list|(
name|cap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveFinish
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveFinish
parameter_list|()
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Finish
argument_list|)
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveFlush
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveFlush
parameter_list|()
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Flush
argument_list|)
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveFrontFace
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveFrontFace
parameter_list|(
name|GLenum
name|mode
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|FrontFace
argument_list|)
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGenTextures
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGenTextures
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|textures
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GenTextures
argument_list|)
argument_list|(
name|n
argument_list|,
name|textures
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetBooleanv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetBooleanv
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLboolean
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetBooleanv
argument_list|)
argument_list|(
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetError
specifier|static
name|GLenum
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetError
parameter_list|()
block|{
name|RESOLVE_FUNC
argument_list|(
name|GLenum
argument_list|,
literal|0
argument_list|,
name|GetError
argument_list|)
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetFloatv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetFloatv
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetFloatv
argument_list|)
argument_list|(
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetIntegerv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetIntegerv
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetIntegerv
argument_list|)
argument_list|(
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetString
specifier|static
specifier|const
name|GLubyte
modifier|*
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetString
parameter_list|(
name|GLenum
name|name
parameter_list|)
block|{
name|RESOLVE_FUNC
argument_list|(
specifier|const
name|GLubyte
operator|*
argument_list|,
literal|0
argument_list|,
name|GetString
argument_list|)
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetTexParameterfv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetTexParameterfv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetTexParameterfv
argument_list|)
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetTexParameteriv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetTexParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetTexParameteriv
argument_list|)
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveHint
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveHint
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|mode
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Hint
argument_list|)
argument_list|(
name|target
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveIsEnabled
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfResolveIsEnabled
parameter_list|(
name|GLenum
name|cap
parameter_list|)
block|{
name|RESOLVE_FUNC
argument_list|(
name|GLboolean
argument_list|,
literal|0
argument_list|,
name|IsEnabled
argument_list|)
argument_list|(
name|cap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveIsTexture
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfResolveIsTexture
parameter_list|(
name|GLuint
name|texture
parameter_list|)
block|{
name|RESOLVE_FUNC
argument_list|(
name|GLboolean
argument_list|,
literal|0
argument_list|,
name|IsTexture
argument_list|)
argument_list|(
name|texture
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveLineWidth
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveLineWidth
parameter_list|(
name|GLfloat
name|width
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|LineWidth
argument_list|)
argument_list|(
name|width
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolvePixelStorei
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolvePixelStorei
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLint
name|param
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|PixelStorei
argument_list|)
argument_list|(
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolvePolygonOffset
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolvePolygonOffset
parameter_list|(
name|GLfloat
name|factor
parameter_list|,
name|GLfloat
name|units
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|PolygonOffset
argument_list|)
argument_list|(
name|factor
argument_list|,
name|units
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveReadPixels
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveReadPixels
parameter_list|(
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLvoid
modifier|*
name|pixels
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ReadPixels
argument_list|)
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveScissor
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveScissor
parameter_list|(
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Scissor
argument_list|)
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveStencilFunc
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveStencilFunc
parameter_list|(
name|GLenum
name|func
parameter_list|,
name|GLint
name|ref
parameter_list|,
name|GLuint
name|mask
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|StencilFunc
argument_list|)
argument_list|(
name|func
argument_list|,
name|ref
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveStencilMask
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveStencilMask
parameter_list|(
name|GLuint
name|mask
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|StencilMask
argument_list|)
argument_list|(
name|mask
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveStencilOp
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveStencilOp
parameter_list|(
name|GLenum
name|fail
parameter_list|,
name|GLenum
name|zfail
parameter_list|,
name|GLenum
name|zpass
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|StencilOp
argument_list|)
argument_list|(
name|fail
argument_list|,
name|zfail
argument_list|,
name|zpass
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveTexImage2D
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveTexImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|pixels
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|TexImage2D
argument_list|)
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveTexParameterf
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveTexParameterf
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLfloat
name|param
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|TexParameterf
argument_list|)
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveTexParameterfv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveTexParameterfv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|TexParameterfv
argument_list|)
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveTexParameteri
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveTexParameteri
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
name|param
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|TexParameteri
argument_list|)
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveTexParameteriv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveTexParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
specifier|const
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|TexParameteriv
argument_list|)
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveTexSubImage2D
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveTexSubImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|pixels
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|TexSubImage2D
argument_list|)
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveViewport
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveViewport
parameter_list|(
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Viewport
argument_list|)
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// GL(ES)2
end_comment
begin_function
DECL|function|qopenglfResolveActiveTexture
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveActiveTexture
parameter_list|(
name|GLenum
name|texture
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ActiveTexture
argument_list|)
argument_list|(
name|texture
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveAttachShader
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveAttachShader
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|shader
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID_WITH_ALTERNATE
argument_list|(
literal|0
argument_list|,
name|AttachShader
argument_list|,
name|AttachObject
argument_list|)
argument_list|(
name|program
argument_list|,
name|shader
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBindAttribLocation
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBindAttribLocation
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|BindAttribLocation
argument_list|)
argument_list|(
name|program
argument_list|,
name|index
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBindBuffer
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBindBuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|buffer
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|BindBuffer
argument_list|)
argument_list|(
name|target
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBindFramebuffer
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBindFramebuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|framebuffer
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|BindFramebuffer
argument_list|)
argument_list|(
name|target
argument_list|,
name|framebuffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBindRenderbuffer
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBindRenderbuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|renderbuffer
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|BindRenderbuffer
argument_list|)
argument_list|(
name|target
argument_list|,
name|renderbuffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBlendColor
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBlendColor
parameter_list|(
name|GLclampf
name|red
parameter_list|,
name|GLclampf
name|green
parameter_list|,
name|GLclampf
name|blue
parameter_list|,
name|GLclampf
name|alpha
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|BlendColor
argument_list|)
argument_list|(
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBlendEquation
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBlendEquation
parameter_list|(
name|GLenum
name|mode
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|BlendEquation
argument_list|)
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBlendEquationSeparate
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBlendEquationSeparate
parameter_list|(
name|GLenum
name|modeRGB
parameter_list|,
name|GLenum
name|modeAlpha
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|BlendEquationSeparate
argument_list|)
argument_list|(
name|modeRGB
argument_list|,
name|modeAlpha
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBlendFuncSeparate
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBlendFuncSeparate
parameter_list|(
name|GLenum
name|srcRGB
parameter_list|,
name|GLenum
name|dstRGB
parameter_list|,
name|GLenum
name|srcAlpha
parameter_list|,
name|GLenum
name|dstAlpha
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|BlendFuncSeparate
argument_list|)
argument_list|(
name|srcRGB
argument_list|,
name|dstRGB
argument_list|,
name|srcAlpha
argument_list|,
name|dstAlpha
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBufferData
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBufferData
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|qopengl_GLsizeiptr
name|size
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|GLenum
name|usage
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|BufferData
argument_list|)
argument_list|(
name|target
argument_list|,
name|size
argument_list|,
name|data
argument_list|,
name|usage
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBufferSubData
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBufferSubData
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|qopengl_GLintptr
name|offset
parameter_list|,
name|qopengl_GLsizeiptr
name|size
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|BufferSubData
argument_list|)
argument_list|(
name|target
argument_list|,
name|offset
argument_list|,
name|size
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveCheckFramebufferStatus
specifier|static
name|GLenum
name|QOPENGLF_APIENTRY
name|qopenglfResolveCheckFramebufferStatus
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
name|RESOLVE_FUNC
argument_list|(
name|GLenum
argument_list|,
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|CheckFramebufferStatus
argument_list|)
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveCompileShader
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveCompileShader
parameter_list|(
name|GLuint
name|shader
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|CompileShader
argument_list|)
argument_list|(
name|shader
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveCompressedTexImage2D
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveCompressedTexImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|CompressedTexImage2D
argument_list|)
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|,
name|imageSize
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveCompressedTexSubImage2D
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveCompressedTexSubImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|CompressedTexSubImage2D
argument_list|)
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveCreateProgram
specifier|static
name|GLuint
name|QOPENGLF_APIENTRY
name|qopenglfResolveCreateProgram
parameter_list|()
block|{
name|RESOLVE_FUNC_WITH_ALTERNATE
argument_list|(
name|GLuint
argument_list|,
literal|0
argument_list|,
name|CreateProgram
argument_list|,
name|CreateProgramObject
argument_list|)
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveCreateShader
specifier|static
name|GLuint
name|QOPENGLF_APIENTRY
name|qopenglfResolveCreateShader
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
name|RESOLVE_FUNC_WITH_ALTERNATE
argument_list|(
name|GLuint
argument_list|,
literal|0
argument_list|,
name|CreateShader
argument_list|,
name|CreateShaderObject
argument_list|)
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDeleteBuffers
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDeleteBuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|buffers
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|DeleteBuffers
argument_list|)
argument_list|(
name|n
argument_list|,
name|buffers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDeleteFramebuffers
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDeleteFramebuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|framebuffers
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|DeleteFramebuffers
argument_list|)
argument_list|(
name|n
argument_list|,
name|framebuffers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDeleteProgram
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDeleteProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DeleteProgram
argument_list|)
argument_list|(
name|program
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDeleteRenderbuffers
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDeleteRenderbuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|renderbuffers
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|DeleteRenderbuffers
argument_list|)
argument_list|(
name|n
argument_list|,
name|renderbuffers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDeleteShader
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDeleteShader
parameter_list|(
name|GLuint
name|shader
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID_WITH_ALTERNATE
argument_list|(
literal|0
argument_list|,
name|DeleteShader
argument_list|,
name|DeleteObject
argument_list|)
argument_list|(
name|shader
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDetachShader
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDetachShader
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|shader
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID_WITH_ALTERNATE
argument_list|(
literal|0
argument_list|,
name|DetachShader
argument_list|,
name|DetachObject
argument_list|)
argument_list|(
name|program
argument_list|,
name|shader
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDisableVertexAttribArray
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDisableVertexAttribArray
parameter_list|(
name|GLuint
name|index
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DisableVertexAttribArray
argument_list|)
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveEnableVertexAttribArray
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveEnableVertexAttribArray
parameter_list|(
name|GLuint
name|index
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|EnableVertexAttribArray
argument_list|)
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveFramebufferRenderbuffer
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveFramebufferRenderbuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|renderbuffertarget
parameter_list|,
name|GLuint
name|renderbuffer
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|FramebufferRenderbuffer
argument_list|)
argument_list|(
name|target
argument_list|,
name|attachment
argument_list|,
name|renderbuffertarget
argument_list|,
name|renderbuffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveFramebufferTexture2D
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveFramebufferTexture2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|textarget
parameter_list|,
name|GLuint
name|texture
parameter_list|,
name|GLint
name|level
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|FramebufferTexture2D
argument_list|)
argument_list|(
name|target
argument_list|,
name|attachment
argument_list|,
name|textarget
argument_list|,
name|texture
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGenBuffers
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGenBuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|buffers
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|GenBuffers
argument_list|)
argument_list|(
name|n
argument_list|,
name|buffers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGenerateMipmap
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGenerateMipmap
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|GenerateMipmap
argument_list|)
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGenFramebuffers
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGenFramebuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|framebuffers
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|GenFramebuffers
argument_list|)
argument_list|(
name|n
argument_list|,
name|framebuffers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGenRenderbuffers
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGenRenderbuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|renderbuffers
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|GenRenderbuffers
argument_list|)
argument_list|(
name|n
argument_list|,
name|renderbuffers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetActiveAttrib
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetActiveAttrib
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLint
modifier|*
name|size
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetActiveAttrib
argument_list|)
argument_list|(
name|program
argument_list|,
name|index
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetActiveUniform
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetActiveUniform
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLint
modifier|*
name|size
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetActiveUniform
argument_list|)
argument_list|(
name|program
argument_list|,
name|index
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetAttachedShaders
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetAttachedShaders
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|maxcount
parameter_list|,
name|GLsizei
modifier|*
name|count
parameter_list|,
name|GLuint
modifier|*
name|shaders
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID_WITH_ALTERNATE
argument_list|(
literal|0
argument_list|,
name|GetAttachedShaders
argument_list|,
name|GetAttachedObjects
argument_list|)
argument_list|(
name|program
argument_list|,
name|maxcount
argument_list|,
name|count
argument_list|,
name|shaders
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetAttribLocation
specifier|static
name|GLint
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetAttribLocation
parameter_list|(
name|GLuint
name|program
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
name|RESOLVE_FUNC
argument_list|(
name|GLint
argument_list|,
literal|0
argument_list|,
name|GetAttribLocation
argument_list|)
argument_list|(
name|program
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetBufferParameteriv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetBufferParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|GetBufferParameteriv
argument_list|)
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetFramebufferAttachmentParameteriv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetFramebufferAttachmentParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|GetFramebufferAttachmentParameteriv
argument_list|)
argument_list|(
name|target
argument_list|,
name|attachment
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetProgramiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetProgramiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID_WITH_ALTERNATE
argument_list|(
literal|0
argument_list|,
name|GetProgramiv
argument_list|,
name|GetObjectParameteriv
argument_list|)
argument_list|(
name|program
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetProgramInfoLog
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetProgramInfoLog
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|infolog
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID_WITH_ALTERNATE
argument_list|(
literal|0
argument_list|,
name|GetProgramInfoLog
argument_list|,
name|GetInfoLog
argument_list|)
argument_list|(
name|program
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|infolog
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetRenderbufferParameteriv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetRenderbufferParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|GetRenderbufferParameteriv
argument_list|)
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetShaderiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetShaderiv
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID_WITH_ALTERNATE
argument_list|(
literal|0
argument_list|,
name|GetShaderiv
argument_list|,
name|GetObjectParameteriv
argument_list|)
argument_list|(
name|shader
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetShaderInfoLog
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetShaderInfoLog
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|infolog
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID_WITH_ALTERNATE
argument_list|(
literal|0
argument_list|,
name|GetShaderInfoLog
argument_list|,
name|GetInfoLog
argument_list|)
argument_list|(
name|shader
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|infolog
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfSpecialGetShaderPrecisionFormat
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfSpecialGetShaderPrecisionFormat
parameter_list|(
name|GLenum
name|shadertype
parameter_list|,
name|GLenum
name|precisiontype
parameter_list|,
name|GLint
modifier|*
name|range
parameter_list|,
name|GLint
modifier|*
name|precision
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|shadertype
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|precisiontype
argument_list|)
expr_stmt|;
name|range
index|[
literal|0
index|]
operator|=
name|range
index|[
literal|1
index|]
operator|=
name|precision
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetShaderPrecisionFormat
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetShaderPrecisionFormat
parameter_list|(
name|GLenum
name|shadertype
parameter_list|,
name|GLenum
name|precisiontype
parameter_list|,
name|GLint
modifier|*
name|range
parameter_list|,
name|GLint
modifier|*
name|precision
parameter_list|)
block|{
name|RESOLVE_FUNC_SPECIAL_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|GetShaderPrecisionFormat
argument_list|)
argument_list|(
name|shadertype
argument_list|,
name|precisiontype
argument_list|,
name|range
argument_list|,
name|precision
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetShaderSource
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetShaderSource
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|source
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetShaderSource
argument_list|)
argument_list|(
name|shader
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetUniformfv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetUniformfv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetUniformfv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetUniformiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetUniformiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetUniformiv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetUniformLocation
specifier|static
name|GLint
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetUniformLocation
parameter_list|(
name|GLuint
name|program
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
name|RESOLVE_FUNC
argument_list|(
name|GLint
argument_list|,
literal|0
argument_list|,
name|GetUniformLocation
argument_list|)
argument_list|(
name|program
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetVertexAttribfv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetVertexAttribfv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetVertexAttribfv
argument_list|)
argument_list|(
name|index
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetVertexAttribiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetVertexAttribiv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetVertexAttribiv
argument_list|)
argument_list|(
name|index
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetVertexAttribPointerv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetVertexAttribPointerv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|void
modifier|*
modifier|*
name|pointer
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetVertexAttribPointerv
argument_list|)
argument_list|(
name|index
argument_list|,
name|pname
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveIsBuffer
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfResolveIsBuffer
parameter_list|(
name|GLuint
name|buffer
parameter_list|)
block|{
name|RESOLVE_FUNC
argument_list|(
name|GLboolean
argument_list|,
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|IsBuffer
argument_list|)
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveIsFramebuffer
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfResolveIsFramebuffer
parameter_list|(
name|GLuint
name|framebuffer
parameter_list|)
block|{
name|RESOLVE_FUNC
argument_list|(
name|GLboolean
argument_list|,
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|IsFramebuffer
argument_list|)
argument_list|(
name|framebuffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfSpecialIsProgram
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfSpecialIsProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
return|return
name|program
operator|!=
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveIsProgram
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfResolveIsProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
name|RESOLVE_FUNC_SPECIAL
argument_list|(
name|GLboolean
argument_list|,
literal|0
argument_list|,
name|IsProgram
argument_list|)
argument_list|(
name|program
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveIsRenderbuffer
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfResolveIsRenderbuffer
parameter_list|(
name|GLuint
name|renderbuffer
parameter_list|)
block|{
name|RESOLVE_FUNC
argument_list|(
name|GLboolean
argument_list|,
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|IsRenderbuffer
argument_list|)
argument_list|(
name|renderbuffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfSpecialIsShader
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfSpecialIsShader
parameter_list|(
name|GLuint
name|shader
parameter_list|)
block|{
return|return
name|shader
operator|!=
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveIsShader
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfResolveIsShader
parameter_list|(
name|GLuint
name|shader
parameter_list|)
block|{
name|RESOLVE_FUNC_SPECIAL
argument_list|(
name|GLboolean
argument_list|,
literal|0
argument_list|,
name|IsShader
argument_list|)
argument_list|(
name|shader
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveLinkProgram
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveLinkProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|LinkProgram
argument_list|)
argument_list|(
name|program
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfSpecialReleaseShaderCompiler
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfSpecialReleaseShaderCompiler
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|qopenglfResolveReleaseShaderCompiler
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveReleaseShaderCompiler
parameter_list|()
block|{
name|RESOLVE_FUNC_SPECIAL_VOID
argument_list|(
literal|0
argument_list|,
name|ReleaseShaderCompiler
argument_list|)
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveRenderbufferStorage
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveRenderbufferStorage
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|RenderbufferStorage
argument_list|)
argument_list|(
name|target
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveSampleCoverage
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveSampleCoverage
parameter_list|(
name|GLclampf
name|value
parameter_list|,
name|GLboolean
name|invert
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|SampleCoverage
argument_list|)
argument_list|(
name|value
argument_list|,
name|invert
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveShaderBinary
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveShaderBinary
parameter_list|(
name|GLint
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|shaders
parameter_list|,
name|GLenum
name|binaryformat
parameter_list|,
specifier|const
name|void
modifier|*
name|binary
parameter_list|,
name|GLint
name|length
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ShaderBinary
argument_list|)
argument_list|(
name|n
argument_list|,
name|shaders
argument_list|,
name|binaryformat
argument_list|,
name|binary
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveShaderSource
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveShaderSource
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|string
parameter_list|,
specifier|const
name|GLint
modifier|*
name|length
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ShaderSource
argument_list|)
argument_list|(
name|shader
argument_list|,
name|count
argument_list|,
name|string
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveStencilFuncSeparate
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveStencilFuncSeparate
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLenum
name|func
parameter_list|,
name|GLint
name|ref
parameter_list|,
name|GLuint
name|mask
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveEXT
argument_list|,
name|StencilFuncSeparate
argument_list|)
argument_list|(
name|face
argument_list|,
name|func
argument_list|,
name|ref
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveStencilMaskSeparate
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveStencilMaskSeparate
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLuint
name|mask
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveEXT
argument_list|,
name|StencilMaskSeparate
argument_list|)
argument_list|(
name|face
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveStencilOpSeparate
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveStencilOpSeparate
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLenum
name|fail
parameter_list|,
name|GLenum
name|zfail
parameter_list|,
name|GLenum
name|zpass
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveEXT
argument_list|,
name|StencilOpSeparate
argument_list|)
argument_list|(
name|face
argument_list|,
name|fail
argument_list|,
name|zfail
argument_list|,
name|zpass
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform1f
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform1f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform1f
argument_list|)
argument_list|(
name|location
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform1fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform1fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform1fv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform1i
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform1i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform1i
argument_list|)
argument_list|(
name|location
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform1iv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform1iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform1iv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform2f
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform2f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform2f
argument_list|)
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform2fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform2fv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform2i
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform2i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform2i
argument_list|)
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform2iv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform2iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform2iv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform3f
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform3f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform3f
argument_list|)
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform3fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform3fv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform3i
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform3i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLint
name|z
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform3i
argument_list|)
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform3iv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform3iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform3iv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform4f
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform4f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|,
name|GLfloat
name|w
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform4f
argument_list|)
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform4fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform4fv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform4i
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform4i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLint
name|z
parameter_list|,
name|GLint
name|w
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform4i
argument_list|)
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform4iv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform4iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform4iv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniformMatrix2fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniformMatrix2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|UniformMatrix2fv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniformMatrix3fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniformMatrix3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|UniformMatrix3fv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniformMatrix4fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniformMatrix4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|UniformMatrix4fv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUseProgram
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUseProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|UseProgram
argument_list|)
argument_list|(
name|program
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveValidateProgram
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveValidateProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ValidateProgram
argument_list|)
argument_list|(
name|program
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttrib1f
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttrib1f
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttrib1f
argument_list|)
argument_list|(
name|indx
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttrib1fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttrib1fv
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttrib1fv
argument_list|)
argument_list|(
name|indx
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttrib2f
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttrib2f
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttrib2f
argument_list|)
argument_list|(
name|indx
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttrib2fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttrib2fv
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttrib2fv
argument_list|)
argument_list|(
name|indx
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttrib3f
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttrib3f
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttrib3f
argument_list|)
argument_list|(
name|indx
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttrib3fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttrib3fv
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttrib3fv
argument_list|)
argument_list|(
name|indx
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttrib4f
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttrib4f
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|,
name|GLfloat
name|w
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttrib4f
argument_list|)
argument_list|(
name|indx
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttrib4fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttrib4fv
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttrib4fv
argument_list|)
argument_list|(
name|indx
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttribPointer
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttribPointer
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLint
name|size
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLboolean
name|normalized
parameter_list|,
name|GLsizei
name|stride
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttribPointer
argument_list|)
argument_list|(
name|indx
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|normalized
argument_list|,
name|stride
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !QT_OPENGL_ES_2
end_comment
begin_function
DECL|function|qopenglfResolveMapBuffer
specifier|static
name|GLvoid
modifier|*
name|QOPENGLF_APIENTRY
name|qopenglfResolveMapBuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|access
parameter_list|)
block|{
name|RESOLVE_FUNC
argument_list|(
name|GLvoid
operator|*
argument_list|,
name|ResolveOES
argument_list|,
name|MapBuffer
argument_list|)
argument_list|(
name|target
argument_list|,
name|access
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUnmapBuffer
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfResolveUnmapBuffer
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
name|RESOLVE_FUNC
argument_list|(
name|GLboolean
argument_list|,
name|ResolveOES
argument_list|,
name|UnmapBuffer
argument_list|)
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBlitFramebuffer
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBlitFramebuffer
parameter_list|(
name|GLint
name|srcX0
parameter_list|,
name|GLint
name|srcY0
parameter_list|,
name|GLint
name|srcX1
parameter_list|,
name|GLint
name|srcY1
parameter_list|,
name|GLint
name|dstX0
parameter_list|,
name|GLint
name|dstY0
parameter_list|,
name|GLint
name|dstX1
parameter_list|,
name|GLint
name|dstY1
parameter_list|,
name|GLbitfield
name|mask
parameter_list|,
name|GLenum
name|filter
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID_WITH_ALTERNATE
argument_list|(
name|ResolveEXT
argument_list|,
name|BlitFramebuffer
argument_list|,
name|BlitFramebufferANGLE
argument_list|)
argument_list|(
name|srcX0
argument_list|,
name|srcY0
argument_list|,
name|srcX1
argument_list|,
name|srcY1
argument_list|,
name|dstX0
argument_list|,
name|dstY0
argument_list|,
name|dstX1
argument_list|,
name|dstY1
argument_list|,
name|mask
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveRenderbufferStorageMultisample
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveRenderbufferStorageMultisample
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|samples
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID_WITH_ALTERNATE
argument_list|(
name|ResolveEXT
argument_list|,
name|RenderbufferStorageMultisample
argument_list|,
name|RenderbufferStorageMultisampleANGLE
argument_list|)
argument_list|(
name|target
argument_list|,
name|samples
argument_list|,
name|internalFormat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetBufferSubData
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetBufferSubData
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|qopengl_GLintptr
name|offset
parameter_list|,
name|qopengl_GLsizeiptr
name|size
parameter_list|,
name|GLvoid
modifier|*
name|data
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveEXT
argument_list|,
name|GetBufferSubData
argument_list|)
argument_list|(
name|target
argument_list|,
name|offset
argument_list|,
name|size
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_OPENGL_DYNAMIC
argument_list|)
end_if
begin_comment
comment|// Special translation functions for ES-specific calls on desktop GL
end_comment
begin_function
DECL|function|qopenglfTranslateClearDepthf
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfTranslateClearDepthf
parameter_list|(
name|GLclampf
name|depth
parameter_list|)
block|{
operator|::
name|glClearDepth
argument_list|(
name|depth
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfTranslateDepthRangef
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfTranslateDepthRangef
parameter_list|(
name|GLclampf
name|zNear
parameter_list|,
name|GLclampf
name|zFar
parameter_list|)
block|{
operator|::
name|glDepthRange
argument_list|(
name|zNear
argument_list|,
name|zFar
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !ES&& !DYNAMIC
end_comment
begin_constructor
DECL|function|QOpenGLFunctionsPrivate
name|QOpenGLFunctionsPrivate
operator|::
name|QOpenGLFunctionsPrivate
parameter_list|(
name|QOpenGLContext
modifier|*
parameter_list|)
block|{
comment|/* Assign a pointer to an above defined static function      * which on first call resolves the function from the current      * context, assigns it to the member variable and executes it      * (see Resolver template) */
ifndef|#
directive|ifndef
name|QT_OPENGL_ES_2
comment|// The GL1 functions may not be queriable via getProcAddress().
if|if
condition|(
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|hasCapability
argument_list|(
name|QPlatformIntegration
operator|::
name|AllGLFunctionsQueryable
argument_list|)
condition|)
block|{
comment|// The platform plugin supports resolving these.
name|BindTexture
operator|=
name|qopenglfResolveBindTexture
expr_stmt|;
name|BlendFunc
operator|=
name|qopenglfResolveBlendFunc
expr_stmt|;
name|Clear
operator|=
name|qopenglfResolveClear
expr_stmt|;
name|ClearColor
operator|=
name|qopenglfResolveClearColor
expr_stmt|;
name|ClearDepthf
operator|=
name|qopenglfResolveClearDepthf
expr_stmt|;
name|ClearStencil
operator|=
name|qopenglfResolveClearStencil
expr_stmt|;
name|ColorMask
operator|=
name|qopenglfResolveColorMask
expr_stmt|;
name|CopyTexImage2D
operator|=
name|qopenglfResolveCopyTexImage2D
expr_stmt|;
name|CopyTexSubImage2D
operator|=
name|qopenglfResolveCopyTexSubImage2D
expr_stmt|;
name|CullFace
operator|=
name|qopenglfResolveCullFace
expr_stmt|;
name|DeleteTextures
operator|=
name|qopenglfResolveDeleteTextures
expr_stmt|;
name|DepthFunc
operator|=
name|qopenglfResolveDepthFunc
expr_stmt|;
name|DepthMask
operator|=
name|qopenglfResolveDepthMask
expr_stmt|;
name|DepthRangef
operator|=
name|qopenglfResolveDepthRangef
expr_stmt|;
name|Disable
operator|=
name|qopenglfResolveDisable
expr_stmt|;
name|DrawArrays
operator|=
name|qopenglfResolveDrawArrays
expr_stmt|;
name|DrawElements
operator|=
name|qopenglfResolveDrawElements
expr_stmt|;
name|Enable
operator|=
name|qopenglfResolveEnable
expr_stmt|;
name|Finish
operator|=
name|qopenglfResolveFinish
expr_stmt|;
name|Flush
operator|=
name|qopenglfResolveFlush
expr_stmt|;
name|FrontFace
operator|=
name|qopenglfResolveFrontFace
expr_stmt|;
name|GenTextures
operator|=
name|qopenglfResolveGenTextures
expr_stmt|;
name|GetBooleanv
operator|=
name|qopenglfResolveGetBooleanv
expr_stmt|;
name|GetError
operator|=
name|qopenglfResolveGetError
expr_stmt|;
name|GetFloatv
operator|=
name|qopenglfResolveGetFloatv
expr_stmt|;
name|GetIntegerv
operator|=
name|qopenglfResolveGetIntegerv
expr_stmt|;
name|GetString
operator|=
name|qopenglfResolveGetString
expr_stmt|;
name|GetTexParameterfv
operator|=
name|qopenglfResolveGetTexParameterfv
expr_stmt|;
name|GetTexParameteriv
operator|=
name|qopenglfResolveGetTexParameteriv
expr_stmt|;
name|Hint
operator|=
name|qopenglfResolveHint
expr_stmt|;
name|IsEnabled
operator|=
name|qopenglfResolveIsEnabled
expr_stmt|;
name|IsTexture
operator|=
name|qopenglfResolveIsTexture
expr_stmt|;
name|LineWidth
operator|=
name|qopenglfResolveLineWidth
expr_stmt|;
name|PixelStorei
operator|=
name|qopenglfResolvePixelStorei
expr_stmt|;
name|PolygonOffset
operator|=
name|qopenglfResolvePolygonOffset
expr_stmt|;
name|ReadPixels
operator|=
name|qopenglfResolveReadPixels
expr_stmt|;
name|Scissor
operator|=
name|qopenglfResolveScissor
expr_stmt|;
name|StencilFunc
operator|=
name|qopenglfResolveStencilFunc
expr_stmt|;
name|StencilMask
operator|=
name|qopenglfResolveStencilMask
expr_stmt|;
name|StencilOp
operator|=
name|qopenglfResolveStencilOp
expr_stmt|;
name|TexImage2D
operator|=
name|qopenglfResolveTexImage2D
expr_stmt|;
name|TexParameterf
operator|=
name|qopenglfResolveTexParameterf
expr_stmt|;
name|TexParameterfv
operator|=
name|qopenglfResolveTexParameterfv
expr_stmt|;
name|TexParameteri
operator|=
name|qopenglfResolveTexParameteri
expr_stmt|;
name|TexParameteriv
operator|=
name|qopenglfResolveTexParameteriv
expr_stmt|;
name|TexSubImage2D
operator|=
name|qopenglfResolveTexSubImage2D
expr_stmt|;
name|Viewport
operator|=
name|qopenglfResolveViewport
expr_stmt|;
block|}
else|else
block|{
ifndef|#
directive|ifndef
name|QT_OPENGL_DYNAMIC
comment|// Use the functions directly. This requires linking QtGui to an OpenGL implementation.
name|BindTexture
operator|=
operator|::
name|glBindTexture
expr_stmt|;
name|BlendFunc
operator|=
operator|::
name|glBlendFunc
expr_stmt|;
name|Clear
operator|=
operator|::
name|glClear
expr_stmt|;
name|ClearColor
operator|=
operator|::
name|glClearColor
expr_stmt|;
name|ClearDepthf
operator|=
name|qopenglfTranslateClearDepthf
expr_stmt|;
name|ClearStencil
operator|=
operator|::
name|glClearStencil
expr_stmt|;
name|ColorMask
operator|=
operator|::
name|glColorMask
expr_stmt|;
name|CopyTexImage2D
operator|=
operator|::
name|glCopyTexImage2D
expr_stmt|;
name|CopyTexSubImage2D
operator|=
operator|::
name|glCopyTexSubImage2D
expr_stmt|;
name|CullFace
operator|=
operator|::
name|glCullFace
expr_stmt|;
name|DeleteTextures
operator|=
operator|::
name|glDeleteTextures
expr_stmt|;
name|DepthFunc
operator|=
operator|::
name|glDepthFunc
expr_stmt|;
name|DepthMask
operator|=
operator|::
name|glDepthMask
expr_stmt|;
name|DepthRangef
operator|=
name|qopenglfTranslateDepthRangef
expr_stmt|;
name|Disable
operator|=
operator|::
name|glDisable
expr_stmt|;
name|DrawArrays
operator|=
operator|::
name|glDrawArrays
expr_stmt|;
name|DrawElements
operator|=
operator|::
name|glDrawElements
expr_stmt|;
name|Enable
operator|=
operator|::
name|glEnable
expr_stmt|;
name|Finish
operator|=
operator|::
name|glFinish
expr_stmt|;
name|Flush
operator|=
operator|::
name|glFlush
expr_stmt|;
name|FrontFace
operator|=
operator|::
name|glFrontFace
expr_stmt|;
name|GenTextures
operator|=
operator|::
name|glGenTextures
expr_stmt|;
name|GetBooleanv
operator|=
operator|::
name|glGetBooleanv
expr_stmt|;
name|GetError
operator|=
operator|::
name|glGetError
expr_stmt|;
name|GetFloatv
operator|=
operator|::
name|glGetFloatv
expr_stmt|;
name|GetIntegerv
operator|=
operator|::
name|glGetIntegerv
expr_stmt|;
name|GetString
operator|=
operator|::
name|glGetString
expr_stmt|;
name|GetTexParameterfv
operator|=
operator|::
name|glGetTexParameterfv
expr_stmt|;
name|GetTexParameteriv
operator|=
operator|::
name|glGetTexParameteriv
expr_stmt|;
name|Hint
operator|=
operator|::
name|glHint
expr_stmt|;
name|IsEnabled
operator|=
operator|::
name|glIsEnabled
expr_stmt|;
name|IsTexture
operator|=
operator|::
name|glIsTexture
expr_stmt|;
name|LineWidth
operator|=
operator|::
name|glLineWidth
expr_stmt|;
name|PixelStorei
operator|=
operator|::
name|glPixelStorei
expr_stmt|;
name|PolygonOffset
operator|=
operator|::
name|glPolygonOffset
expr_stmt|;
name|ReadPixels
operator|=
operator|::
name|glReadPixels
expr_stmt|;
name|Scissor
operator|=
operator|::
name|glScissor
expr_stmt|;
name|StencilFunc
operator|=
operator|::
name|glStencilFunc
expr_stmt|;
name|StencilMask
operator|=
operator|::
name|glStencilMask
expr_stmt|;
name|StencilOp
operator|=
operator|::
name|glStencilOp
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_OSX
argument_list|)
operator|&&
name|MAC_OS_X_VERSION_MAX_ALLOWED
operator|<
name|MAC_OS_X_VERSION_10_7
name|TexImage2D
operator|=
expr|reinterpret_cast
operator|<
name|void
argument_list|(
operator|*
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
argument_list|,
name|GLint
argument_list|,
name|GLenum
argument_list|,
name|GLenum
argument_list|,
specifier|const
name|GLvoid
operator|*
argument_list|)
operator|>
operator|(
name|glTexImage2D
operator|)
expr_stmt|;
else|#
directive|else
name|TexImage2D
operator|=
name|glTexImage2D
expr_stmt|;
endif|#
directive|endif
name|TexParameterf
operator|=
operator|::
name|glTexParameterf
expr_stmt|;
name|TexParameterfv
operator|=
operator|::
name|glTexParameterfv
expr_stmt|;
name|TexParameteri
operator|=
operator|::
name|glTexParameteri
expr_stmt|;
name|TexParameteriv
operator|=
operator|::
name|glTexParameteriv
expr_stmt|;
name|TexSubImage2D
operator|=
operator|::
name|glTexSubImage2D
expr_stmt|;
name|Viewport
operator|=
operator|::
name|glViewport
expr_stmt|;
else|#
directive|else
comment|// QT_OPENGL_DYNAMIC
comment|// This should not happen.
name|qFatal
argument_list|(
literal|"QOpenGLFunctions: Dynamic OpenGL builds do not support platforms with insufficient function resolving capabilities"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|ActiveTexture
operator|=
name|qopenglfResolveActiveTexture
expr_stmt|;
name|AttachShader
operator|=
name|qopenglfResolveAttachShader
expr_stmt|;
name|BindAttribLocation
operator|=
name|qopenglfResolveBindAttribLocation
expr_stmt|;
name|BindBuffer
operator|=
name|qopenglfResolveBindBuffer
expr_stmt|;
name|BindFramebuffer
operator|=
name|qopenglfResolveBindFramebuffer
expr_stmt|;
name|BindRenderbuffer
operator|=
name|qopenglfResolveBindRenderbuffer
expr_stmt|;
name|BlendColor
operator|=
name|qopenglfResolveBlendColor
expr_stmt|;
name|BlendEquation
operator|=
name|qopenglfResolveBlendEquation
expr_stmt|;
name|BlendEquationSeparate
operator|=
name|qopenglfResolveBlendEquationSeparate
expr_stmt|;
name|BlendFuncSeparate
operator|=
name|qopenglfResolveBlendFuncSeparate
expr_stmt|;
name|BufferData
operator|=
name|qopenglfResolveBufferData
expr_stmt|;
name|BufferSubData
operator|=
name|qopenglfResolveBufferSubData
expr_stmt|;
name|CheckFramebufferStatus
operator|=
name|qopenglfResolveCheckFramebufferStatus
expr_stmt|;
name|CompileShader
operator|=
name|qopenglfResolveCompileShader
expr_stmt|;
name|CompressedTexImage2D
operator|=
name|qopenglfResolveCompressedTexImage2D
expr_stmt|;
name|CompressedTexSubImage2D
operator|=
name|qopenglfResolveCompressedTexSubImage2D
expr_stmt|;
name|CreateProgram
operator|=
name|qopenglfResolveCreateProgram
expr_stmt|;
name|CreateShader
operator|=
name|qopenglfResolveCreateShader
expr_stmt|;
name|DeleteBuffers
operator|=
name|qopenglfResolveDeleteBuffers
expr_stmt|;
name|DeleteFramebuffers
operator|=
name|qopenglfResolveDeleteFramebuffers
expr_stmt|;
name|DeleteProgram
operator|=
name|qopenglfResolveDeleteProgram
expr_stmt|;
name|DeleteRenderbuffers
operator|=
name|qopenglfResolveDeleteRenderbuffers
expr_stmt|;
name|DeleteShader
operator|=
name|qopenglfResolveDeleteShader
expr_stmt|;
name|DetachShader
operator|=
name|qopenglfResolveDetachShader
expr_stmt|;
name|DisableVertexAttribArray
operator|=
name|qopenglfResolveDisableVertexAttribArray
expr_stmt|;
name|EnableVertexAttribArray
operator|=
name|qopenglfResolveEnableVertexAttribArray
expr_stmt|;
name|FramebufferRenderbuffer
operator|=
name|qopenglfResolveFramebufferRenderbuffer
expr_stmt|;
name|FramebufferTexture2D
operator|=
name|qopenglfResolveFramebufferTexture2D
expr_stmt|;
name|GenBuffers
operator|=
name|qopenglfResolveGenBuffers
expr_stmt|;
name|GenerateMipmap
operator|=
name|qopenglfResolveGenerateMipmap
expr_stmt|;
name|GenFramebuffers
operator|=
name|qopenglfResolveGenFramebuffers
expr_stmt|;
name|GenRenderbuffers
operator|=
name|qopenglfResolveGenRenderbuffers
expr_stmt|;
name|GetActiveAttrib
operator|=
name|qopenglfResolveGetActiveAttrib
expr_stmt|;
name|GetActiveUniform
operator|=
name|qopenglfResolveGetActiveUniform
expr_stmt|;
name|GetAttachedShaders
operator|=
name|qopenglfResolveGetAttachedShaders
expr_stmt|;
name|GetAttribLocation
operator|=
name|qopenglfResolveGetAttribLocation
expr_stmt|;
name|GetBufferParameteriv
operator|=
name|qopenglfResolveGetBufferParameteriv
expr_stmt|;
name|GetFramebufferAttachmentParameteriv
operator|=
name|qopenglfResolveGetFramebufferAttachmentParameteriv
expr_stmt|;
name|GetProgramiv
operator|=
name|qopenglfResolveGetProgramiv
expr_stmt|;
name|GetProgramInfoLog
operator|=
name|qopenglfResolveGetProgramInfoLog
expr_stmt|;
name|GetRenderbufferParameteriv
operator|=
name|qopenglfResolveGetRenderbufferParameteriv
expr_stmt|;
name|GetShaderiv
operator|=
name|qopenglfResolveGetShaderiv
expr_stmt|;
name|GetShaderInfoLog
operator|=
name|qopenglfResolveGetShaderInfoLog
expr_stmt|;
name|GetShaderPrecisionFormat
operator|=
name|qopenglfResolveGetShaderPrecisionFormat
expr_stmt|;
name|GetShaderSource
operator|=
name|qopenglfResolveGetShaderSource
expr_stmt|;
name|GetUniformfv
operator|=
name|qopenglfResolveGetUniformfv
expr_stmt|;
name|GetUniformiv
operator|=
name|qopenglfResolveGetUniformiv
expr_stmt|;
name|GetUniformLocation
operator|=
name|qopenglfResolveGetUniformLocation
expr_stmt|;
name|GetVertexAttribfv
operator|=
name|qopenglfResolveGetVertexAttribfv
expr_stmt|;
name|GetVertexAttribiv
operator|=
name|qopenglfResolveGetVertexAttribiv
expr_stmt|;
name|GetVertexAttribPointerv
operator|=
name|qopenglfResolveGetVertexAttribPointerv
expr_stmt|;
name|IsBuffer
operator|=
name|qopenglfResolveIsBuffer
expr_stmt|;
name|IsFramebuffer
operator|=
name|qopenglfResolveIsFramebuffer
expr_stmt|;
name|IsProgram
operator|=
name|qopenglfResolveIsProgram
expr_stmt|;
name|IsRenderbuffer
operator|=
name|qopenglfResolveIsRenderbuffer
expr_stmt|;
name|IsShader
operator|=
name|qopenglfResolveIsShader
expr_stmt|;
name|LinkProgram
operator|=
name|qopenglfResolveLinkProgram
expr_stmt|;
name|ReleaseShaderCompiler
operator|=
name|qopenglfResolveReleaseShaderCompiler
expr_stmt|;
name|RenderbufferStorage
operator|=
name|qopenglfResolveRenderbufferStorage
expr_stmt|;
name|SampleCoverage
operator|=
name|qopenglfResolveSampleCoverage
expr_stmt|;
name|ShaderBinary
operator|=
name|qopenglfResolveShaderBinary
expr_stmt|;
name|ShaderSource
operator|=
name|qopenglfResolveShaderSource
expr_stmt|;
name|StencilFuncSeparate
operator|=
name|qopenglfResolveStencilFuncSeparate
expr_stmt|;
name|StencilMaskSeparate
operator|=
name|qopenglfResolveStencilMaskSeparate
expr_stmt|;
name|StencilOpSeparate
operator|=
name|qopenglfResolveStencilOpSeparate
expr_stmt|;
name|Uniform1f
operator|=
name|qopenglfResolveUniform1f
expr_stmt|;
name|Uniform1fv
operator|=
name|qopenglfResolveUniform1fv
expr_stmt|;
name|Uniform1i
operator|=
name|qopenglfResolveUniform1i
expr_stmt|;
name|Uniform1iv
operator|=
name|qopenglfResolveUniform1iv
expr_stmt|;
name|Uniform2f
operator|=
name|qopenglfResolveUniform2f
expr_stmt|;
name|Uniform2fv
operator|=
name|qopenglfResolveUniform2fv
expr_stmt|;
name|Uniform2i
operator|=
name|qopenglfResolveUniform2i
expr_stmt|;
name|Uniform2iv
operator|=
name|qopenglfResolveUniform2iv
expr_stmt|;
name|Uniform3f
operator|=
name|qopenglfResolveUniform3f
expr_stmt|;
name|Uniform3fv
operator|=
name|qopenglfResolveUniform3fv
expr_stmt|;
name|Uniform3i
operator|=
name|qopenglfResolveUniform3i
expr_stmt|;
name|Uniform3iv
operator|=
name|qopenglfResolveUniform3iv
expr_stmt|;
name|Uniform4f
operator|=
name|qopenglfResolveUniform4f
expr_stmt|;
name|Uniform4fv
operator|=
name|qopenglfResolveUniform4fv
expr_stmt|;
name|Uniform4i
operator|=
name|qopenglfResolveUniform4i
expr_stmt|;
name|Uniform4iv
operator|=
name|qopenglfResolveUniform4iv
expr_stmt|;
name|UniformMatrix2fv
operator|=
name|qopenglfResolveUniformMatrix2fv
expr_stmt|;
name|UniformMatrix3fv
operator|=
name|qopenglfResolveUniformMatrix3fv
expr_stmt|;
name|UniformMatrix4fv
operator|=
name|qopenglfResolveUniformMatrix4fv
expr_stmt|;
name|UseProgram
operator|=
name|qopenglfResolveUseProgram
expr_stmt|;
name|ValidateProgram
operator|=
name|qopenglfResolveValidateProgram
expr_stmt|;
name|VertexAttrib1f
operator|=
name|qopenglfResolveVertexAttrib1f
expr_stmt|;
name|VertexAttrib1fv
operator|=
name|qopenglfResolveVertexAttrib1fv
expr_stmt|;
name|VertexAttrib2f
operator|=
name|qopenglfResolveVertexAttrib2f
expr_stmt|;
name|VertexAttrib2fv
operator|=
name|qopenglfResolveVertexAttrib2fv
expr_stmt|;
name|VertexAttrib3f
operator|=
name|qopenglfResolveVertexAttrib3f
expr_stmt|;
name|VertexAttrib3fv
operator|=
name|qopenglfResolveVertexAttrib3fv
expr_stmt|;
name|VertexAttrib4f
operator|=
name|qopenglfResolveVertexAttrib4f
expr_stmt|;
name|VertexAttrib4fv
operator|=
name|qopenglfResolveVertexAttrib4fv
expr_stmt|;
name|VertexAttribPointer
operator|=
name|qopenglfResolveVertexAttribPointer
expr_stmt|;
endif|#
directive|endif
comment|// !QT_OPENGL_ES_2
block|}
end_constructor
begin_constructor
DECL|function|QOpenGLExtensionsPrivate
name|QOpenGLExtensionsPrivate
operator|::
name|QOpenGLExtensionsPrivate
parameter_list|(
name|QOpenGLContext
modifier|*
name|ctx
parameter_list|)
member_init_list|:
name|QOpenGLFunctionsPrivate
argument_list|(
name|ctx
argument_list|)
block|{
name|MapBuffer
operator|=
name|qopenglfResolveMapBuffer
expr_stmt|;
name|UnmapBuffer
operator|=
name|qopenglfResolveUnmapBuffer
expr_stmt|;
name|BlitFramebuffer
operator|=
name|qopenglfResolveBlitFramebuffer
expr_stmt|;
name|RenderbufferStorageMultisample
operator|=
name|qopenglfResolveRenderbufferStorageMultisample
expr_stmt|;
name|GetBufferSubData
operator|=
name|qopenglfResolveGetBufferSubData
expr_stmt|;
block|}
end_constructor
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
