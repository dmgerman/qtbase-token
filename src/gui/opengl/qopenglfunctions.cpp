begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qopenglfunctions.h"
end_include
begin_include
include|#
directive|include
file|"qopenglextrafunctions.h"
end_include
begin_include
include|#
directive|include
file|"qopenglextensions_p.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qopenglcontext_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qopengl_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformintegration.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qloggingcategory.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_IOS
end_ifdef
begin_include
include|#
directive|include
file|<dlfcn.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
end_ifndef
begin_define
DECL|macro|GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
define|#
directive|define
name|GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
value|0x8DBA
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|Q_LOGGING_CATEGORY
argument_list|(
name|lcGLES3
argument_list|,
literal|"qt.opengl.es3"
argument_list|)
comment|/*!     \class QOpenGLFunctions     \brief The QOpenGLFunctions class provides cross-platform access to the OpenGL ES 2.0 API.     \since 5.0     \ingroup painting-3D     \inmodule QtGui      OpenGL ES 2.0 defines a subset of the OpenGL specification that is     common across many desktop and embedded OpenGL implementations.     However, it can be difficult to use the functions from that subset     because they need to be resolved manually on desktop systems.      QOpenGLFunctions provides a guaranteed API that is available on all     OpenGL systems and takes care of function resolution on systems     that need it.  The recommended way to use QOpenGLFunctions is by     direct inheritance:      \code     class MyGLWindow : public QWindow, protected QOpenGLFunctions     {         Q_OBJECT     public:         MyGLWindow(QScreen *screen = 0);      protected:         void initializeGL();         void paintGL();          QOpenGLContext *m_context;     };      MyGLWindow(QScreen *screen)       : QWindow(screen), QOpenGLWidget(parent)     {         setSurfaceType(OpenGLSurface);         create();          // Create an OpenGL context         m_context = new QOpenGLContext;         m_context->create();          // Setup scene and render it         initializeGL();         paintGL();     }      void MyGLWindow::initializeGL()     {         m_context->makeCurrent(this);         initializeOpenGLFunctions();     }     \endcode      The \c{paintGL()} function can then use any of the OpenGL ES 2.0     functions without explicit resolution, such as glActiveTexture()     in the following example:      \code     void MyGLWindow::paintGL()     {         m_context->makeCurrent(this);         glActiveTexture(GL_TEXTURE1);         glBindTexture(GL_TEXTURE_2D, textureId);         ...         m_context->swapBuffers(this);         m_context->doneCurrent();     }     \endcode      QOpenGLFunctions can also be used directly for ad-hoc invocation     of OpenGL ES 2.0 functions on all platforms:      \code     QOpenGLFunctions glFuncs(QOpenGLContext::currentContext());     glFuncs.glActiveTexture(GL_TEXTURE1);     \endcode      An alternative approach is to query the context's associated     QOpenGLFunctions instance. This is somewhat faster than the previous     approach due to avoiding the creation of a new instance, but the difference     is fairly small since the internal data structures are shared, and function     resolving happens only once for a given context, regardless of the number of     QOpenGLFunctions instances initialized for it.      \code     QOpenGLFunctions *glFuncs = QOpenGLContext::currentContext()->functions();     glFuncs->glActiveTexture(GL_TEXTURE1);     \endcode      QOpenGLFunctions provides wrappers for all OpenGL ES 2.0     functions, including the common subset of OpenGL 1.x and ES     2.0. While such functions, for example glClear() or     glDrawArrays(), can be called also directly, as long as the     application links to the platform-specific OpenGL library, calling     them via QOpenGLFunctions enables the possibility of dynamically     loading the OpenGL implementation.      The hasOpenGLFeature() and openGLFeatures() functions can be used     to determine if the OpenGL implementation has a major OpenGL ES 2.0     feature.  For example, the following checks if non power of two     textures are available:      \code     QOpenGLFunctions funcs(QOpenGLContext::currentContext());     bool npot = funcs.hasOpenGLFeature(QOpenGLFunctions::NPOTTextures);     \endcode      \sa QOpenGLContext, QSurfaceFormat */
comment|/*!     \enum QOpenGLFunctions::OpenGLFeature     This enum defines OpenGL and OpenGL ES features whose presence     may depend on the implementation.      \value Multitexture glActiveTexture() function is available.     \value Shaders Shader functions are available.     \value Buffers Vertex and index buffer functions are available.     \value Framebuffers Framebuffer object functions are available.     \value BlendColor glBlendColor() is available.     \value BlendEquation glBlendEquation() is available.     \value BlendEquationSeparate glBlendEquationSeparate() is available.     \value BlendFuncSeparate glBlendFuncSeparate() is available.     \value BlendSubtract Blend subtract mode is available.     \value CompressedTextures Compressed texture functions are available.     \value Multisample glSampleCoverage() function is available.     \value StencilSeparate Separate stencil functions are available.     \value NPOTTextures Non power of two textures are available.     \value NPOTTextureRepeat Non power of two textures can use GL_REPEAT as wrap parameter.     \value FixedFunctionPipeline The fixed function pipeline is available.     \value TextureRGFormats The GL_RED and GL_RG texture formats are available.     \value MultipleRenderTargets Multiple color attachments to framebuffer objects are available. */
comment|// Hidden private fields for additional extension data.
decl|struct
DECL|struct|QOpenGLFunctionsPrivateEx
name|QOpenGLFunctionsPrivateEx
range|:
specifier|public
name|QOpenGLExtensionsPrivate
decl_stmt|, public
name|QOpenGLSharedResource
argument_list|{
DECL|function|QOpenGLFunctionsPrivateEx
name|QOpenGLFunctionsPrivateEx
argument_list|(
name|QOpenGLContext
operator|*
name|context
argument_list|)
operator|:
name|QOpenGLExtensionsPrivate
argument_list|(
name|context
argument_list|)
argument_list|,
name|QOpenGLSharedResource
argument_list|(
name|context
operator|->
name|shareGroup
argument_list|()
argument_list|)
argument_list|,
name|m_features
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|m_extensions
argument_list|(
argument|-
literal|1
argument_list|)
block|{}
name|void
name|invalidateResource
argument_list|()
name|Q_DECL_OVERRIDE
block|{
name|m_features
operator|=
operator|-
literal|1
block|;
name|m_extensions
operator|=
operator|-
literal|1
block|;     }
name|void
name|freeResource
argument_list|(
argument|QOpenGLContext *
argument_list|)
name|Q_DECL_OVERRIDE
block|{
comment|// no gl resources to free
block|}
DECL|member|m_features
name|int
name|m_features
argument_list|;
DECL|member|m_extensions
name|int
name|m_extensions
argument_list|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QOpenGLMultiGroupSharedResource
argument_list|,
argument|qt_gl_functions_resource
argument_list|)
end_macro
begin_function
DECL|function|qt_gl_functions
specifier|static
name|QOpenGLFunctionsPrivateEx
modifier|*
name|qt_gl_functions
parameter_list|(
name|QOpenGLContext
modifier|*
name|context
init|=
literal|0
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
condition|)
name|context
operator|=
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|QOpenGLFunctionsPrivateEx
modifier|*
name|funcs
init|=
name|qt_gl_functions_resource
argument_list|()
operator|->
name|value
argument_list|<
name|QOpenGLFunctionsPrivateEx
argument_list|>
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
name|funcs
return|;
block|}
end_function
begin_comment
comment|/*!     Constructs a default function resolver. The resolver cannot     be used until initializeOpenGLFunctions() is called to specify     the context.      \sa initializeOpenGLFunctions() */
end_comment
begin_constructor
DECL|function|QOpenGLFunctions
name|QOpenGLFunctions
operator|::
name|QOpenGLFunctions
parameter_list|()
member_init_list|:
name|d_ptr
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a function resolver for \a context.  If \a context     is null, then the resolver will be created for the current QOpenGLContext.      The context or another context in the group must be current.      An object constructed in this way can only be used with \a context     and other contexts that share with it.  Use initializeOpenGLFunctions()     to change the object's context association.      \sa initializeOpenGLFunctions() */
end_comment
begin_constructor
DECL|function|QOpenGLFunctions
name|QOpenGLFunctions
operator|::
name|QOpenGLFunctions
parameter_list|(
name|QOpenGLContext
modifier|*
name|context
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
literal|0
argument_list|)
block|{
if|if
condition|(
name|context
operator|&&
name|QOpenGLContextGroup
operator|::
name|currentContextGroup
argument_list|()
operator|==
name|context
operator|->
name|shareGroup
argument_list|()
condition|)
name|d_ptr
operator|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
expr_stmt|;
else|else
name|qWarning
argument_list|()
operator|<<
literal|"QOpenGLFunctions created with non-current context"
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QOpenGLExtensions
name|QOpenGLExtensions
operator|::
name|QOpenGLExtensions
parameter_list|()
block|{ }
end_constructor
begin_constructor
DECL|function|QOpenGLExtensions
name|QOpenGLExtensions
operator|::
name|QOpenGLExtensions
parameter_list|(
name|QOpenGLContext
modifier|*
name|context
parameter_list|)
member_init_list|:
name|QOpenGLExtraFunctions
argument_list|(
name|context
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \fn QOpenGLFunctions::~QOpenGLFunctions()      Destroys this function resolver. */
end_comment
begin_function
DECL|function|qt_gl_resolve_features
specifier|static
name|int
name|qt_gl_resolve_features
parameter_list|()
block|{
name|QOpenGLContext
modifier|*
name|ctx
init|=
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|->
name|isOpenGLES
argument_list|()
condition|)
block|{
comment|// OpenGL ES
name|int
name|features
init|=
name|QOpenGLFunctions
operator|::
name|Multitexture
operator||
name|QOpenGLFunctions
operator|::
name|Shaders
operator||
name|QOpenGLFunctions
operator|::
name|Buffers
operator||
name|QOpenGLFunctions
operator|::
name|Framebuffers
operator||
name|QOpenGLFunctions
operator|::
name|BlendColor
operator||
name|QOpenGLFunctions
operator|::
name|BlendEquation
operator||
name|QOpenGLFunctions
operator|::
name|BlendEquationSeparate
operator||
name|QOpenGLFunctions
operator|::
name|BlendFuncSeparate
operator||
name|QOpenGLFunctions
operator|::
name|BlendSubtract
operator||
name|QOpenGLFunctions
operator|::
name|CompressedTextures
operator||
name|QOpenGLFunctions
operator|::
name|Multisample
operator||
name|QOpenGLFunctions
operator|::
name|StencilSeparate
decl_stmt|;
name|QOpenGLExtensionMatcher
name|extensions
decl_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_IMG_texture_npot"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|NPOTTextures
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_OES_texture_npot"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|NPOTTextures
operator||
name|QOpenGLFunctions
operator|::
name|NPOTTextureRepeat
expr_stmt|;
if|if
condition|(
name|ctx
operator|->
name|format
argument_list|()
operator|.
name|majorVersion
argument_list|()
operator|>=
literal|3
operator|||
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_EXT_texture_rg"
argument_list|)
condition|)
block|{
comment|// Mesa's GLES implementation (as of 10.6.0) is unable to handle this, even though it provides 3.0.
specifier|const
name|char
modifier|*
name|renderer
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|ctx
operator|->
name|functions
argument_list|()
operator|->
name|glGetString
argument_list|(
name|GL_RENDERER
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|renderer
operator|&&
name|strstr
argument_list|(
name|renderer
argument_list|,
literal|"Mesa"
argument_list|)
operator|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|TextureRGFormats
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|->
name|format
argument_list|()
operator|.
name|majorVersion
argument_list|()
operator|>=
literal|3
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|MultipleRenderTargets
expr_stmt|;
return|return
name|features
return|;
block|}
else|else
block|{
comment|// OpenGL
name|int
name|features
init|=
name|QOpenGLFunctions
operator|::
name|TextureRGFormats
decl_stmt|;
name|QSurfaceFormat
name|format
init|=
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
operator|->
name|format
argument_list|()
decl_stmt|;
name|QOpenGLExtensionMatcher
name|extensions
decl_stmt|;
if|if
condition|(
name|format
operator|.
name|majorVersion
argument_list|()
operator|>=
literal|3
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|Framebuffers
operator||
name|QOpenGLFunctions
operator|::
name|MultipleRenderTargets
expr_stmt|;
elseif|else
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_EXT_framebuffer_object"
argument_list|)
operator|||
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_ARB_framebuffer_object"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|Framebuffers
operator||
name|QOpenGLFunctions
operator|::
name|MultipleRenderTargets
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|majorVersion
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|BlendColor
operator||
name|QOpenGLFunctions
operator|::
name|BlendEquation
operator||
name|QOpenGLFunctions
operator|::
name|BlendSubtract
operator||
name|QOpenGLFunctions
operator|::
name|Multitexture
operator||
name|QOpenGLFunctions
operator|::
name|CompressedTextures
operator||
name|QOpenGLFunctions
operator|::
name|Multisample
operator||
name|QOpenGLFunctions
operator|::
name|BlendFuncSeparate
operator||
name|QOpenGLFunctions
operator|::
name|Buffers
operator||
name|QOpenGLFunctions
operator|::
name|Shaders
operator||
name|QOpenGLFunctions
operator|::
name|StencilSeparate
operator||
name|QOpenGLFunctions
operator|::
name|BlendEquationSeparate
operator||
name|QOpenGLFunctions
operator|::
name|NPOTTextures
operator||
name|QOpenGLFunctions
operator|::
name|NPOTTextureRepeat
expr_stmt|;
block|}
else|else
block|{
comment|// Recognize features by extension name.
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_ARB_multitexture"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|Multitexture
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_ARB_shader_objects"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|Shaders
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_EXT_blend_color"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|BlendColor
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_EXT_blend_equation_separate"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|BlendEquationSeparate
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_EXT_blend_subtract"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|BlendSubtract
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_EXT_blend_func_separate"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|BlendFuncSeparate
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_ARB_texture_compression"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|CompressedTextures
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_ARB_multisample"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|Multisample
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_ARB_texture_non_power_of_two"
argument_list|)
condition|)
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|NPOTTextures
operator||
name|QOpenGLFunctions
operator|::
name|NPOTTextureRepeat
expr_stmt|;
block|}
specifier|const
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|version
init|=
name|format
operator|.
name|version
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|<
name|qMakePair
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
operator|||
operator|(
name|version
operator|==
name|qMakePair
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
operator|&&
name|format
operator|.
name|testOption
argument_list|(
name|QSurfaceFormat
operator|::
name|DeprecatedFunctions
argument_list|)
operator|)
operator|||
operator|(
name|version
operator|==
name|qMakePair
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
operator|&&
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_ARB_compatibility"
argument_list|)
operator|)
operator|||
operator|(
name|version
operator|>=
name|qMakePair
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
operator|&&
name|format
operator|.
name|profile
argument_list|()
operator|==
name|QSurfaceFormat
operator|::
name|CompatibilityProfile
operator|)
condition|)
block|{
name|features
operator||=
name|QOpenGLFunctions
operator|::
name|FixedFunctionPipeline
expr_stmt|;
block|}
return|return
name|features
return|;
block|}
block|}
end_function
begin_function
DECL|function|qt_gl_resolve_extensions
specifier|static
name|int
name|qt_gl_resolve_extensions
parameter_list|()
block|{
name|int
name|extensions
init|=
literal|0
decl_stmt|;
name|QOpenGLExtensionMatcher
name|extensionMatcher
decl_stmt|;
name|QOpenGLContext
modifier|*
name|ctx
init|=
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QSurfaceFormat
name|format
init|=
name|ctx
operator|->
name|format
argument_list|()
decl_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_EXT_bgra"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|BGRATextureFormat
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_ARB_texture_rectangle"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|TextureRectangle
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_ARB_texture_compression"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|TextureCompression
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_EXT_texture_compression_s3tc"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|DDSTextureCompression
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_OES_compressed_ETC1_RGB8_texture"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|ETC1TextureCompression
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_IMG_texture_compression_pvrtc"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|PVRTCTextureCompression
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_ARB_texture_mirrored_repeat"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|MirroredRepeat
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_EXT_stencil_two_side"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|StencilTwoSide
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_EXT_stencil_wrap"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|StencilWrap
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_NV_float_buffer"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|NVFloatBuffer
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_ARB_pixel_buffer_object"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|PixelBufferObject
expr_stmt|;
if|if
condition|(
name|ctx
operator|->
name|isOpenGLES
argument_list|()
condition|)
block|{
if|if
condition|(
name|format
operator|.
name|majorVersion
argument_list|()
operator|>=
literal|2
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|GenerateMipmap
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|majorVersion
argument_list|()
operator|>=
literal|3
condition|)
block|{
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|PackedDepthStencil
operator||
name|QOpenGLExtensions
operator|::
name|Depth24
operator||
name|QOpenGLExtensions
operator|::
name|ElementIndexUint
operator||
name|QOpenGLExtensions
operator|::
name|MapBufferRange
operator||
name|QOpenGLExtensions
operator|::
name|FramebufferBlit
operator||
name|QOpenGLExtensions
operator|::
name|FramebufferMultisample
operator||
name|QOpenGLExtensions
operator|::
name|Sized8Formats
expr_stmt|;
block|}
else|else
block|{
comment|// Recognize features by extension name.
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_OES_packed_depth_stencil"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|PackedDepthStencil
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_OES_depth24"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|Depth24
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_ANGLE_framebuffer_blit"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|FramebufferBlit
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_ANGLE_framebuffer_multisample"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|FramebufferMultisample
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_NV_framebuffer_blit"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|FramebufferBlit
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_NV_framebuffer_multisample"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|FramebufferMultisample
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_OES_rgb8_rgba8"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|Sized8Formats
expr_stmt|;
block|}
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_OES_mapbuffer"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|MapBuffer
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_OES_element_index_uint"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|ElementIndexUint
expr_stmt|;
comment|// We don't match GL_APPLE_texture_format_BGRA8888 here because it has different semantics.
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_IMG_texture_format_BGRA8888"
argument_list|)
operator|||
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_EXT_texture_format_BGRA8888"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|BGRATextureFormat
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_EXT_discard_framebuffer"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|DiscardFramebuffer
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_EXT_texture_norm16"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|Sized16Formats
expr_stmt|;
block|}
else|else
block|{
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|ElementIndexUint
operator||
name|QOpenGLExtensions
operator|::
name|MapBuffer
operator||
name|QOpenGLExtensions
operator|::
name|Sized16Formats
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|version
argument_list|()
operator|>=
name|qMakePair
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|BGRATextureFormat
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|version
argument_list|()
operator|>=
name|qMakePair
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
operator|||
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_SGIS_generate_mipmap"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|GenerateMipmap
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|majorVersion
argument_list|()
operator|>=
literal|3
operator|||
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_ARB_framebuffer_object"
argument_list|)
condition|)
block|{
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|FramebufferMultisample
operator||
name|QOpenGLExtensions
operator|::
name|FramebufferBlit
operator||
name|QOpenGLExtensions
operator|::
name|PackedDepthStencil
operator||
name|QOpenGLExtensions
operator|::
name|Sized8Formats
expr_stmt|;
block|}
else|else
block|{
comment|// Recognize features by extension name.
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_EXT_framebuffer_multisample"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|FramebufferMultisample
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_EXT_framebuffer_blit"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|FramebufferBlit
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_EXT_packed_depth_stencil"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|PackedDepthStencil
expr_stmt|;
block|}
if|if
condition|(
name|format
operator|.
name|version
argument_list|()
operator|>=
name|qMakePair
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
operator|||
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_ARB_geometry_shader4"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|GeometryShaders
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_ARB_map_buffer_range"
argument_list|)
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|MapBufferRange
expr_stmt|;
if|if
condition|(
name|extensionMatcher
operator|.
name|match
argument_list|(
literal|"GL_EXT_framebuffer_sRGB"
argument_list|)
condition|)
block|{
name|GLboolean
name|srgbCapableFramebuffers
init|=
literal|false
decl_stmt|;
name|ctx
operator|->
name|functions
argument_list|()
operator|->
name|glGetBooleanv
argument_list|(
name|GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
argument_list|,
operator|&
name|srgbCapableFramebuffers
argument_list|)
expr_stmt|;
if|if
condition|(
name|srgbCapableFramebuffers
condition|)
name|extensions
operator||=
name|QOpenGLExtensions
operator|::
name|SRGBFrameBuffer
expr_stmt|;
block|}
block|}
return|return
name|extensions
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the set of features that are present on this system's     OpenGL implementation.      It is assumed that the QOpenGLContext associated with this function     resolver is current.      \sa hasOpenGLFeature() */
end_comment
begin_function
DECL|function|openGLFeatures
name|QOpenGLFunctions
operator|::
name|OpenGLFeatures
name|QOpenGLFunctions
operator|::
name|openGLFeatures
parameter_list|()
specifier|const
block|{
name|QOpenGLFunctionsPrivateEx
modifier|*
name|d
init|=
cast|static_cast
argument_list|<
name|QOpenGLFunctionsPrivateEx
operator|*
argument_list|>
argument_list|(
name|d_ptr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|d
operator|->
name|m_features
operator|==
operator|-
literal|1
condition|)
name|d
operator|->
name|m_features
operator|=
name|qt_gl_resolve_features
argument_list|()
expr_stmt|;
return|return
name|QOpenGLFunctions
operator|::
name|OpenGLFeatures
argument_list|(
name|d
operator|->
name|m_features
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if \a feature is present on this system's OpenGL     implementation; false otherwise.      It is assumed that the QOpenGLContext associated with this function     resolver is current.      \sa openGLFeatures() */
end_comment
begin_function
DECL|function|hasOpenGLFeature
name|bool
name|QOpenGLFunctions
operator|::
name|hasOpenGLFeature
parameter_list|(
name|QOpenGLFunctions
operator|::
name|OpenGLFeature
name|feature
parameter_list|)
specifier|const
block|{
name|QOpenGLFunctionsPrivateEx
modifier|*
name|d
init|=
cast|static_cast
argument_list|<
name|QOpenGLFunctionsPrivateEx
operator|*
argument_list|>
argument_list|(
name|d_ptr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|m_features
operator|==
operator|-
literal|1
condition|)
name|d
operator|->
name|m_features
operator|=
name|qt_gl_resolve_features
argument_list|()
expr_stmt|;
return|return
operator|(
name|d
operator|->
name|m_features
operator|&
name|int
argument_list|(
name|feature
argument_list|)
operator|)
operator|!=
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the set of extensions that are present on this system's     OpenGL implementation.      It is assumed that the QOpenGLContext associated with this extension     resolver is current.      \sa hasOpenGLExtensions() */
end_comment
begin_function
DECL|function|openGLExtensions
name|QOpenGLExtensions
operator|::
name|OpenGLExtensions
name|QOpenGLExtensions
operator|::
name|openGLExtensions
parameter_list|()
block|{
name|QOpenGLFunctionsPrivateEx
modifier|*
name|d
init|=
cast|static_cast
argument_list|<
name|QOpenGLFunctionsPrivateEx
operator|*
argument_list|>
argument_list|(
name|d_ptr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|d
operator|->
name|m_extensions
operator|==
operator|-
literal|1
condition|)
name|d
operator|->
name|m_extensions
operator|=
name|qt_gl_resolve_extensions
argument_list|()
expr_stmt|;
return|return
name|QOpenGLExtensions
operator|::
name|OpenGLExtensions
argument_list|(
name|d
operator|->
name|m_extensions
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if \a extension is present on this system's OpenGL     implementation; false otherwise.      It is assumed that the QOpenGLContext associated with this extension     resolver is current.      \sa openGLFeatures() */
end_comment
begin_function
DECL|function|hasOpenGLExtension
name|bool
name|QOpenGLExtensions
operator|::
name|hasOpenGLExtension
parameter_list|(
name|QOpenGLExtensions
operator|::
name|OpenGLExtension
name|extension
parameter_list|)
specifier|const
block|{
name|QOpenGLFunctionsPrivateEx
modifier|*
name|d
init|=
cast|static_cast
argument_list|<
name|QOpenGLFunctionsPrivateEx
operator|*
argument_list|>
argument_list|(
name|d_ptr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|m_extensions
operator|==
operator|-
literal|1
condition|)
name|d
operator|->
name|m_extensions
operator|=
name|qt_gl_resolve_extensions
argument_list|()
expr_stmt|;
return|return
operator|(
name|d
operator|->
name|m_extensions
operator|&
name|int
argument_list|(
name|extension
argument_list|)
operator|)
operator|!=
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QOpenGLFunctions::initializeGLFunctions()     \obsolete      Use initializeOpenGLFunctions() instead. */
end_comment
begin_comment
comment|/*!     Initializes OpenGL function resolution for the current context.      After calling this function, the QOpenGLFunctions object can only be     used with the current context and other contexts that share with it.     Call initializeOpenGLFunctions() again to change the object's context     association. */
end_comment
begin_function
DECL|function|initializeOpenGLFunctions
name|void
name|QOpenGLFunctions
operator|::
name|initializeOpenGLFunctions
parameter_list|()
block|{
name|d_ptr
operator|=
name|qt_gl_functions
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBindTexture(GLenum target, GLuint texture)      Convenience function that calls glBindTexture(\a target, \a texture).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBindTexture.xml}{glBindTexture()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBlendFunc(GLenum sfactor, GLenum dfactor)      Convenience function that calls glBlendFunc(\a sfactor, \a dfactor).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBlendFunc.xml}{glBlendFunc()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glClear(GLbitfield mask)      Convenience function that calls glClear(\a mask).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glClear.xml}{glClear()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)      Convenience function that calls glClearColor(\a red, \a green, \a blue, \a alpha).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glClearColor.xml}{glClearColor()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glClearStencil(GLint s)      Convenience function that calls glClearStencil(\a s).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glClearStencil.xml}{glClearStencil()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)      Convenience function that calls glColorMask(\a red, \a green, \a blue, \a alpha).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glColorMask.xml}{glColorMask()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)      Convenience function that calls glCopyTexImage2D(\a target, \a level, \a internalformat, \a x, \a y, \a width, \a height, \a border).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCopyTexImage2D.xml}{glCopyTexImage2D()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)      Convenience function that calls glCopyTexSubImage2D(\a target, \a level, \a xoffset, \a yoffset, \a x, \a y, \a width, \a height).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCopyTexSubImage2D.xml}{glCopyTexSubImage2D()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glCullFace(GLenum mode)      Convenience function that calls glCullFace(\a mode).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCullFace.xml}{glCullFace()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDeleteTextures(GLsizei n, const GLuint* textures)      Convenience function that calls glDeleteTextures(\a n, \a textures).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDeleteTextures.xml}{glDeleteTextures()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDepthFunc(GLenum func)      Convenience function that calls glDepthFunc(\a func).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDepthFunc.xml}{glDepthFunc()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDepthMask(GLboolean flag)      Convenience function that calls glDepthMask(\a flag).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDepthMask.xml}{glDepthMask()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDisable(GLenum cap)      Convenience function that calls glDisable(\a cap).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDisable.xml}{glDisable()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDrawArrays(GLenum mode, GLint first, GLsizei count)      Convenience function that calls glDrawArrays(\a mode, \a first, \a count).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDrawArrays.xml}{glDrawArrays()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid* indices)      Convenience function that calls glDrawElements(\a mode, \a count, \a type, \a indices).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDrawElements.xml}{glDrawElements()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glEnable(GLenum cap)      Convenience function that calls glEnable(\a cap).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glEnable.xml}{glEnable()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glFinish()      Convenience function that calls glFinish().      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glFinish.xml}{glFinish()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glFlush()      Convenience function that calls glFlush().      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glFlush.xml}{glFlush()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glFrontFace(GLenum mode)      Convenience function that calls glFrontFace(\a mode).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glFrontFace.xml}{glFrontFace()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGenTextures(GLsizei n, GLuint* textures)      Convenience function that calls glGenTextures(\a n, \a textures).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGenTextures.xml}{glGenTextures()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetBooleanv(GLenum pname, GLboolean* params)      Convenience function that calls glGetBooleanv(\a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetBooleanv.xml}{glGetBooleanv()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn GLenum QOpenGLFunctions::glGetError()      Convenience function that calls glGetError().      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetError.xml}{glGetError()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetFloatv(GLenum pname, GLfloat* params)      Convenience function that calls glGetFloatv(\a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetFloatv.xml}{glGetFloatv()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetIntegerv(GLenum pname, GLint* params)      Convenience function that calls glGetIntegerv(\a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetIntegerv.xml}{glGetIntegerv()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn const GLubyte *QOpenGLFunctions::glGetString(GLenum name)      Convenience function that calls glGetString(\a name).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetString.xml}{glGetString()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetTexParameterfv(GLenum target, GLenum pname, GLfloat* params)      Convenience function that calls glGetTexParameterfv(\a target, \a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetTexParameterfv.xml}{glGetTexParameterfv()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetTexParameteriv(GLenum target, GLenum pname, GLint* params)      Convenience function that calls glGetTexParameteriv(\a target, \a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetTexParameteriv.xml}{glGetTexParameteriv()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glHint(GLenum target, GLenum mode)      Convenience function that calls glHint(\a target, \a mode).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glHint.xml}{glHint()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn GLboolean QOpenGLFunctions::glIsEnabled(GLenum cap)      Convenience function that calls glIsEnabled(\a cap).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glIsEnabled.xml}{glIsEnabled()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn GLboolean QOpenGLFunctions::glIsTexture(GLuint texture)      Convenience function that calls glIsTexture(\a texture).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glIsTexture.xml}{glIsTexture()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glLineWidth(GLfloat width)      Convenience function that calls glLineWidth(\a width).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glLineWidth.xml}{glLineWidth()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glPixelStorei(GLenum pname, GLint param)      Convenience function that calls glPixelStorei(\a pname, \a param).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glPixelStorei.xml}{glPixelStorei()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glPolygonOffset(GLfloat factor, GLfloat units)      Convenience function that calls glPolygonOffset(\a factor, \a units).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glPolygonOffset.xml}{glPolygonOffset()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels)      Convenience function that calls glReadPixels(\a x, \a y, \a width, \a height, \a format, \a type, \a pixels).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glReadPixels.xml}{glReadPixels()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glScissor(GLint x, GLint y, GLsizei width, GLsizei height)      Convenience function that calls glScissor(\a x, \a y, \a width, \a height).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glScissor.xml}{glScissor()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glStencilFunc(GLenum func, GLint ref, GLuint mask)      Convenience function that calls glStencilFunc(\a func, \a ref, \a mask).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glStencilFunc.xml}{glStencilFunc()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glStencilMask(GLuint mask)      Convenience function that calls glStencilMask(\a mask).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glStencilMask.xml}{glStencilMask()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)      Convenience function that calls glStencilOp(\a fail, \a zfail, \a zpass).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glStencilOp.xml}{glStencilOp()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid* pixels)      Convenience function that calls glTexImage2D(\a target, \a level, \a internalformat, \a width, \a height, \a border, \a format, \a type, \a pixels).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glTexImage2D.xml}{glTexImage2D()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glTexParameterf(GLenum target, GLenum pname, GLfloat param)      Convenience function that calls glTexParameterf(\a target, \a pname, \a param).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glTexParameterf.xml}{glTexParameterf()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glTexParameterfv(GLenum target, GLenum pname, const GLfloat* params)      Convenience function that calls glTexParameterfv(\a target, \a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glTexParameterfv.xml}{glTexParameterfv()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glTexParameteri(GLenum target, GLenum pname, GLint param)      Convenience function that calls glTexParameteri(\a target, \a pname, \a param).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glTexParameteri.xml}{glTexParameteri()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glTexParameteriv(GLenum target, GLenum pname, const GLint* params)      Convenience function that calls glTexParameteriv(\a target, \a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glTexParameteriv.xml}{glTexParameteriv()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels)      Convenience function that calls glTexSubImage2D(\a target, \a level, \a xoffset, \a yoffset, \a width, \a height, \a format, \a type, \a pixels).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glTexSubImage2D.xml}{glTexSubImage2D()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glViewport(GLint x, GLint y, GLsizei width, GLsizei height)      Convenience function that calls glViewport(\a x, \a y, \a width, \a height).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glViewport.xml}{glViewport()}.      \since 5.3 */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glActiveTexture(GLenum texture)      Convenience function that calls glActiveTexture(\a texture).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glActiveTexture.xml}{glActiveTexture()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glAttachShader(GLuint program, GLuint shader)      Convenience function that calls glAttachShader(\a program, \a shader).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glAttachShader.xml}{glAttachShader()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBindAttribLocation(GLuint program, GLuint index, const char* name)      Convenience function that calls glBindAttribLocation(\a program, \a index, \a name).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBindAttribLocation.xml}{glBindAttribLocation()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBindBuffer(GLenum target, GLuint buffer)      Convenience function that calls glBindBuffer(\a target, \a buffer).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBindBuffer.xml}{glBindBuffer()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBindFramebuffer(GLenum target, GLuint framebuffer)      Convenience function that calls glBindFramebuffer(\a target, \a framebuffer).      Note that Qt will translate a \a framebuffer argument of 0 to the currently     bound QOpenGLContext's defaultFramebufferObject().      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBindFramebuffer.xml}{glBindFramebuffer()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBindRenderbuffer(GLenum target, GLuint renderbuffer)      Convenience function that calls glBindRenderbuffer(\a target, \a renderbuffer).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBindRenderbuffer.xml}{glBindRenderbuffer()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)      Convenience function that calls glBlendColor(\a red, \a green, \a blue, \a alpha).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBlendColor.xml}{glBlendColor()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBlendEquation(GLenum mode)      Convenience function that calls glBlendEquation(\a mode).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBlendEquation.xml}{glBlendEquation()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)      Convenience function that calls glBlendEquationSeparate(\a modeRGB, \a modeAlpha).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBlendEquationSeparate.xml}{glBlendEquationSeparate()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)      Convenience function that calls glBlendFuncSeparate(\a srcRGB, \a dstRGB, \a srcAlpha, \a dstAlpha).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBlendFuncSeparate.xml}{glBlendFuncSeparate()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBufferData(GLenum target, qopengl_GLsizeiptr size, const void* data, GLenum usage)      Convenience function that calls glBufferData(\a target, \a size, \a data, \a usage).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBufferData.xml}{glBufferData()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glBufferSubData(GLenum target, qopengl_GLintptr offset, qopengl_GLsizeiptr size, const void* data)      Convenience function that calls glBufferSubData(\a target, \a offset, \a size, \a data).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBufferSubData.xml}{glBufferSubData()}. */
end_comment
begin_comment
comment|/*!     \fn GLenum QOpenGLFunctions::glCheckFramebufferStatus(GLenum target)      Convenience function that calls glCheckFramebufferStatus(\a target).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCheckFramebufferStatus.xml}{glCheckFramebufferStatus()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glClearDepthf(GLclampf depth)      Convenience function that calls glClearDepth(\a depth) on     desktop OpenGL systems and glClearDepthf(\a depth) on     embedded OpenGL ES systems.      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glClearDepthf.xml}{glClearDepthf()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glCompileShader(GLuint shader)      Convenience function that calls glCompileShader(\a shader).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCompileShader.xml}{glCompileShader()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data)      Convenience function that calls glCompressedTexImage2D(\a target, \a level, \a internalformat, \a width, \a height, \a border, \a imageSize, \a data).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCompressedTexImage2D.xml}{glCompressedTexImage2D()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data)      Convenience function that calls glCompressedTexSubImage2D(\a target, \a level, \a xoffset, \a yoffset, \a width, \a height, \a format, \a imageSize, \a data).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCompressedTexSubImage2D.xml}{glCompressedTexSubImage2D()}. */
end_comment
begin_comment
comment|/*!     \fn GLuint QOpenGLFunctions::glCreateProgram()      Convenience function that calls glCreateProgram().      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCreateProgram.xml}{glCreateProgram()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn GLuint QOpenGLFunctions::glCreateShader(GLenum type)      Convenience function that calls glCreateShader(\a type).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCreateShader.xml}{glCreateShader()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDeleteBuffers(GLsizei n, const GLuint* buffers)      Convenience function that calls glDeleteBuffers(\a n, \a buffers).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDeleteBuffers.xml}{glDeleteBuffers()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDeleteFramebuffers(GLsizei n, const GLuint* framebuffers)      Convenience function that calls glDeleteFramebuffers(\a n, \a framebuffers).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDeleteFramebuffers.xml}{glDeleteFramebuffers()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDeleteProgram(GLuint program)      Convenience function that calls glDeleteProgram(\a program).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDeleteProgram.xml}{glDeleteProgram()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDeleteRenderbuffers(GLsizei n, const GLuint* renderbuffers)      Convenience function that calls glDeleteRenderbuffers(\a n, \a renderbuffers).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDeleteRenderbuffers.xml}{glDeleteRenderbuffers()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDeleteShader(GLuint shader)      Convenience function that calls glDeleteShader(\a shader).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDeleteShader.xml}{glDeleteShader()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDepthRangef(GLclampf zNear, GLclampf zFar)      Convenience function that calls glDepthRange(\a zNear, \a zFar) on     desktop OpenGL systems and glDepthRangef(\a zNear, \a zFar) on     embedded OpenGL ES systems.      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDepthRangef.xml}{glDepthRangef()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDetachShader(GLuint program, GLuint shader)      Convenience function that calls glDetachShader(\a program, \a shader).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDetachShader.xml}{glDetachShader()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glDisableVertexAttribArray(GLuint index)      Convenience function that calls glDisableVertexAttribArray(\a index).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDisableVertexAttribArray.xml}{glDisableVertexAttribArray()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glEnableVertexAttribArray(GLuint index)      Convenience function that calls glEnableVertexAttribArray(\a index).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glEnableVertexAttribArray.xml}{glEnableVertexAttribArray()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)      Convenience function that calls glFramebufferRenderbuffer(\a target, \a attachment, \a renderbuffertarget, \a renderbuffer).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glFramebufferRenderbuffer.xml}{glFramebufferRenderbuffer()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)      Convenience function that calls glFramebufferTexture2D(\a target, \a attachment, \a textarget, \a texture, \a level).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glFramebufferTexture2D.xml}{glFramebufferTexture2D()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGenBuffers(GLsizei n, GLuint* buffers)      Convenience function that calls glGenBuffers(\a n, \a buffers).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGenBuffers.xml}{glGenBuffers()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGenerateMipmap(GLenum target)      Convenience function that calls glGenerateMipmap(\a target).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGenerateMipmap.xml}{glGenerateMipmap()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGenFramebuffers(GLsizei n, GLuint* framebuffers)      Convenience function that calls glGenFramebuffers(\a n, \a framebuffers).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGenFramebuffers.xml}{glGenFramebuffers()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGenRenderbuffers(GLsizei n, GLuint* renderbuffers)      Convenience function that calls glGenRenderbuffers(\a n, \a renderbuffers).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGenRenderbuffers.xml}{glGenRenderbuffers()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name)      Convenience function that calls glGetActiveAttrib(\a program, \a index, \a bufsize, \a length, \a size, \a type, \a name).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetActiveAttrib.xml}{glGetActiveAttrib()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetActiveUniform(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name)      Convenience function that calls glGetActiveUniform(\a program, \a index, \a bufsize, \a length, \a size, \a type, \a name).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetActiveUniform.xml}{glGetActiveUniform()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetAttachedShaders(GLuint program, GLsizei maxcount, GLsizei* count, GLuint* shaders)      Convenience function that calls glGetAttachedShaders(\a program, \a maxcount, \a count, \a shaders).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetAttachedShaders.xml}{glGetAttachedShaders()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn GLint QOpenGLFunctions::glGetAttribLocation(GLuint program, const char* name)      Convenience function that calls glGetAttribLocation(\a program, \a name).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetAttribLocation.xml}{glGetAttribLocation()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetBufferParameteriv(GLenum target, GLenum pname, GLint* params)      Convenience function that calls glGetBufferParameteriv(\a target, \a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetBufferParameteriv.xml}{glGetBufferParameteriv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint* params)      Convenience function that calls glGetFramebufferAttachmentParameteriv(\a target, \a attachment, \a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetFramebufferAttachmentParameteriv.xml}{glGetFramebufferAttachmentParameteriv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetProgramiv(GLuint program, GLenum pname, GLint* params)      Convenience function that calls glGetProgramiv(\a program, \a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetProgramiv.xml}{glGetProgramiv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetProgramInfoLog(GLuint program, GLsizei bufsize, GLsizei* length, char* infolog)      Convenience function that calls glGetProgramInfoLog(\a program, \a bufsize, \a length, \a infolog).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetProgramInfoLog.xml}{glGetProgramInfoLog()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint* params)      Convenience function that calls glGetRenderbufferParameteriv(\a target, \a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetRenderbufferParameteriv.xml}{glGetRenderbufferParameteriv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetShaderiv(GLuint shader, GLenum pname, GLint* params)      Convenience function that calls glGetShaderiv(\a shader, \a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetShaderiv.xml}{glGetShaderiv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetShaderInfoLog(GLuint shader, GLsizei bufsize, GLsizei* length, char* infolog)      Convenience function that calls glGetShaderInfoLog(\a shader, \a bufsize, \a length, \a infolog).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetShaderInfoLog.xml}{glGetShaderInfoLog()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision)      Convenience function that calls glGetShaderPrecisionFormat(\a shadertype, \a precisiontype, \a range, \a precision).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetShaderPrecisionFormat.xml}{glGetShaderPrecisionFormat()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetShaderSource(GLuint shader, GLsizei bufsize, GLsizei* length, char* source)      Convenience function that calls glGetShaderSource(\a shader, \a bufsize, \a length, \a source).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetShaderSource.xml}{glGetShaderSource()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetUniformfv(GLuint program, GLint location, GLfloat* params)      Convenience function that calls glGetUniformfv(\a program, \a location, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetUniformfv.xml}{glGetUniformfv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetUniformiv(GLuint program, GLint location, GLint* params)      Convenience function that calls glGetUniformiv(\a program, \a location, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetUniformiv.xml}{glGetUniformiv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn GLint QOpenGLFunctions::glGetUniformLocation(GLuint program, const char* name)      Convenience function that calls glGetUniformLocation(\a program, \a name).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetUniformLocation.xml}{glGetUniformLocation()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat* params)      Convenience function that calls glGetVertexAttribfv(\a index, \a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetVertexAttribfv.xml}{glGetVertexAttribfv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetVertexAttribiv(GLuint index, GLenum pname, GLint* params)      Convenience function that calls glGetVertexAttribiv(\a index, \a pname, \a params).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetVertexAttribiv.xml}{glGetVertexAttribiv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glGetVertexAttribPointerv(GLuint index, GLenum pname, void** pointer)      Convenience function that calls glGetVertexAttribPointerv(\a index, \a pname, \a pointer).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetVertexAttribPointerv.xml}{glGetVertexAttribPointerv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn GLboolean QOpenGLFunctions::glIsBuffer(GLuint buffer)      Convenience function that calls glIsBuffer(\a buffer).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glIsBuffer.xml}{glIsBuffer()}. */
end_comment
begin_comment
comment|/*!     \fn GLboolean QOpenGLFunctions::glIsFramebuffer(GLuint framebuffer)      Convenience function that calls glIsFramebuffer(\a framebuffer).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glIsFramebuffer.xml}{glIsFramebuffer()}. */
end_comment
begin_comment
comment|/*!     \fn GLboolean QOpenGLFunctions::glIsProgram(GLuint program)      Convenience function that calls glIsProgram(\a program).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glIsProgram.xml}{glIsProgram()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn GLboolean QOpenGLFunctions::glIsRenderbuffer(GLuint renderbuffer)      Convenience function that calls glIsRenderbuffer(\a renderbuffer).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glIsRenderbuffer.xml}{glIsRenderbuffer()}. */
end_comment
begin_comment
comment|/*!     \fn GLboolean QOpenGLFunctions::glIsShader(GLuint shader)      Convenience function that calls glIsShader(\a shader).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glIsShader.xml}{glIsShader()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glLinkProgram(GLuint program)      Convenience function that calls glLinkProgram(\a program).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glLinkProgram.xml}{glLinkProgram()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glReleaseShaderCompiler()      Convenience function that calls glReleaseShaderCompiler().      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glReleaseShaderCompiler.xml}{glReleaseShaderCompiler()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)      Convenience function that calls glRenderbufferStorage(\a target, \a internalformat, \a width, \a height).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glRenderbufferStorage.xml}{glRenderbufferStorage()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glSampleCoverage(GLclampf value, GLboolean invert)      Convenience function that calls glSampleCoverage(\a value, \a invert).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glSampleCoverage.xml}{glSampleCoverage()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glShaderBinary(GLint n, const GLuint* shaders, GLenum binaryformat, const void* binary, GLint length)      Convenience function that calls glShaderBinary(\a n, \a shaders, \a binaryformat, \a binary, \a length).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glShaderBinary.xml}{glShaderBinary()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glShaderSource(GLuint shader, GLsizei count, const char** string, const GLint* length)      Convenience function that calls glShaderSource(\a shader, \a count, \a string, \a length).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glShaderSource.xml}{glShaderSource()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)      Convenience function that calls glStencilFuncSeparate(\a face, \a func, \a ref, \a mask).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glStencilFuncSeparate.xml}{glStencilFuncSeparate()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glStencilMaskSeparate(GLenum face, GLuint mask)      Convenience function that calls glStencilMaskSeparate(\a face, \a mask).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glStencilMaskSeparate.xml}{glStencilMaskSeparate()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)      Convenience function that calls glStencilOpSeparate(\a face, \a fail, \a zfail, \a zpass).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glStencilOpSeparate.xml}{glStencilOpSeparate()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform1f(GLint location, GLfloat x)      Convenience function that calls glUniform1f(\a location, \a x).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform1f.xml}{glUniform1f()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform1fv(GLint location, GLsizei count, const GLfloat* v)      Convenience function that calls glUniform1fv(\a location, \a count, \a v).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform1fv.xml}{glUniform1fv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform1i(GLint location, GLint x)      Convenience function that calls glUniform1i(\a location, \a x).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform1i.xml}{glUniform1i()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform1iv(GLint location, GLsizei count, const GLint* v)      Convenience function that calls glUniform1iv(\a location, \a count, \a v).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform1iv.xml}{glUniform1iv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform2f(GLint location, GLfloat x, GLfloat y)      Convenience function that calls glUniform2f(\a location, \a x, \a y).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform2f.xml}{glUniform2f()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform2fv(GLint location, GLsizei count, const GLfloat* v)      Convenience function that calls glUniform2fv(\a location, \a count, \a v).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform2fv.xml}{glUniform2fv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform2i(GLint location, GLint x, GLint y)      Convenience function that calls glUniform2i(\a location, \a x, \a y).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform2i.xml}{glUniform2i()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform2iv(GLint location, GLsizei count, const GLint* v)      Convenience function that calls glUniform2iv(\a location, \a count, \a v).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform2iv.xml}{glUniform2iv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform3f(GLint location, GLfloat x, GLfloat y, GLfloat z)      Convenience function that calls glUniform3f(\a location, \a x, \a y, \a z).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform3f.xml}{glUniform3f()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform3fv(GLint location, GLsizei count, const GLfloat* v)      Convenience function that calls glUniform3fv(\a location, \a count, \a v).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform3fv.xml}{glUniform3fv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform3i(GLint location, GLint x, GLint y, GLint z)      Convenience function that calls glUniform3i(\a location, \a x, \a y, \a z).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform3i.xml}{glUniform3i()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform3iv(GLint location, GLsizei count, const GLint* v)      Convenience function that calls glUniform3iv(\a location, \a count, \a v).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform3iv.xml}{glUniform3iv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform4f(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)      Convenience function that calls glUniform4f(\a location, \a x, \a y, \a z, \a w).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform4f.xml}{glUniform4f()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform4fv(GLint location, GLsizei count, const GLfloat* v)      Convenience function that calls glUniform4fv(\a location, \a count, \a v).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform4fv.xml}{glUniform4fv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform4i(GLint location, GLint x, GLint y, GLint z, GLint w)      Convenience function that calls glUniform4i(\a location, \a x, \a y, \a z, \a w).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform4i.xml}{glUniform4i()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniform4iv(GLint location, GLsizei count, const GLint* v)      Convenience function that calls glUniform4iv(\a location, \a count, \a v).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform4iv.xml}{glUniform4iv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)      Convenience function that calls glUniformMatrix2fv(\a location, \a count, \a transpose, \a value).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniformMatrix2fv.xml}{glUniformMatrix2fv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)      Convenience function that calls glUniformMatrix3fv(\a location, \a count, \a transpose, \a value).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniformMatrix3fv.xml}{glUniformMatrix3fv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)      Convenience function that calls glUniformMatrix4fv(\a location, \a count, \a transpose, \a value).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniformMatrix4fv.xml}{glUniformMatrix4fv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glUseProgram(GLuint program)      Convenience function that calls glUseProgram(\a program).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUseProgram.xml}{glUseProgram()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glValidateProgram(GLuint program)      Convenience function that calls glValidateProgram(\a program).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glValidateProgram.xml}{glValidateProgram()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glVertexAttrib1f(GLuint indx, GLfloat x)      Convenience function that calls glVertexAttrib1f(\a indx, \a x).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib1f.xml}{glVertexAttrib1f()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glVertexAttrib1fv(GLuint indx, const GLfloat* values)      Convenience function that calls glVertexAttrib1fv(\a indx, \a values).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib1fv.xml}{glVertexAttrib1fv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glVertexAttrib2f(GLuint indx, GLfloat x, GLfloat y)      Convenience function that calls glVertexAttrib2f(\a indx, \a x, \a y).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib2f.xml}{glVertexAttrib2f()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glVertexAttrib2fv(GLuint indx, const GLfloat* values)      Convenience function that calls glVertexAttrib2fv(\a indx, \a values).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib2fv.xml}{glVertexAttrib2fv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glVertexAttrib3f(GLuint indx, GLfloat x, GLfloat y, GLfloat z)      Convenience function that calls glVertexAttrib3f(\a indx, \a x, \a y, \a z).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib3f.xml}{glVertexAttrib3f()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glVertexAttrib3fv(GLuint indx, const GLfloat* values)      Convenience function that calls glVertexAttrib3fv(\a indx, \a values).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib3fv.xml}{glVertexAttrib3fv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glVertexAttrib4f(GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w)      Convenience function that calls glVertexAttrib4f(\a indx, \a x, \a y, \a z, \a w).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib4f.xml}{glVertexAttrib4f()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glVertexAttrib4fv(GLuint indx, const GLfloat* values)      Convenience function that calls glVertexAttrib4fv(\a indx, \a values).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib4fv.xml}{glVertexAttrib4fv()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLFunctions::glVertexAttribPointer(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* ptr)      Convenience function that calls glVertexAttribPointer(\a indx, \a size, \a type, \a normalized, \a stride, \a ptr).      For more information, see the OpenGL ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttribPointer.xml}{glVertexAttribPointer()}.      This convenience function will do nothing on OpenGL ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn bool QOpenGLFunctions::isInitialized(const QOpenGLFunctionsPrivate *d)     \internal */
end_comment
begin_namespace
namespace|namespace
block|{
DECL|enum|ResolvePolicy
enum|enum
name|ResolvePolicy
block|{
DECL|enumerator|ResolveOES
name|ResolveOES
init|=
literal|0x1
block|,
DECL|enumerator|ResolveEXT
name|ResolveEXT
init|=
literal|0x2
block|,
DECL|enumerator|ResolveANGLE
name|ResolveANGLE
init|=
literal|0x4
block|,
DECL|enumerator|ResolveNV
name|ResolveNV
init|=
literal|0x8
block|}
enum|;
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
class|class
DECL|class|Resolver
name|Resolver
block|{
public|public:
DECL|function|Resolver
name|Resolver
parameter_list|(
name|FuncType
name|Base
operator|::
modifier|*
name|func
parameter_list|,
name|FuncType
name|fallback
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|alternateName
init|=
literal|0
parameter_list|)
member_init_list|:
name|funcPointerName
argument_list|(
name|func
argument_list|)
member_init_list|,
name|fallbackFuncPointer
argument_list|(
name|fallback
argument_list|)
member_init_list|,
name|funcName
argument_list|(
name|name
argument_list|)
member_init_list|,
name|alternateFuncName
argument_list|(
name|alternateName
argument_list|)
block|{     }
name|ReturnType
name|operator
name|()
parameter_list|()
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|>
name|ReturnType
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|>
name|ReturnType
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|>
name|ReturnType
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|>
name|ReturnType
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|>
name|ReturnType
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|>
name|ReturnType
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|>
name|ReturnType
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|>
name|ReturnType
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|,
name|typename
name|P9
parameter_list|>
name|ReturnType
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|,
name|P9
name|p9
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|,
name|typename
name|P9
parameter_list|,
name|typename
name|P10
parameter_list|>
name|ReturnType
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|,
name|P9
name|p9
parameter_list|,
name|P10
name|p10
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|,
name|typename
name|P9
parameter_list|,
name|typename
name|P10
parameter_list|,
name|typename
name|P11
parameter_list|>
name|ReturnType
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|,
name|P9
name|p9
parameter_list|,
name|P10
name|p10
parameter_list|,
name|P11
name|p11
parameter_list|)
function_decl|;
private|private:
DECL|member|funcPointerName
name|FuncType
name|Base
operator|::
modifier|*
name|funcPointerName
decl_stmt|;
DECL|member|fallbackFuncPointer
name|FuncType
name|fallbackFuncPointer
decl_stmt|;
DECL|member|funcName
name|QByteArray
name|funcName
decl_stmt|;
DECL|member|alternateFuncName
name|QByteArray
name|alternateFuncName
decl_stmt|;
block|}
class|;
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
class|class
DECL|class|Resolver
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
block|{
public|public:
DECL|function|Resolver
name|Resolver
parameter_list|(
name|FuncType
name|Base
operator|::
modifier|*
name|func
parameter_list|,
name|FuncType
name|fallback
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|alternateName
init|=
literal|0
parameter_list|)
member_init_list|:
name|funcPointerName
argument_list|(
name|func
argument_list|)
member_init_list|,
name|fallbackFuncPointer
argument_list|(
name|fallback
argument_list|)
member_init_list|,
name|funcName
argument_list|(
name|name
argument_list|)
member_init_list|,
name|alternateFuncName
argument_list|(
name|alternateName
argument_list|)
block|{     }
name|void
name|operator
name|()
parameter_list|()
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|>
name|void
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|>
name|void
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|>
name|void
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|>
name|void
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|>
name|void
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|>
name|void
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|>
name|void
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|>
name|void
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|,
name|typename
name|P9
parameter_list|>
name|void
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|,
name|P9
name|p9
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|,
name|typename
name|P9
parameter_list|,
name|typename
name|P10
parameter_list|>
name|void
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|,
name|P9
name|p9
parameter_list|,
name|P10
name|p10
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|,
name|typename
name|P9
parameter_list|,
name|typename
name|P10
parameter_list|,
name|typename
name|P11
parameter_list|>
name|void
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|,
name|P9
name|p9
parameter_list|,
name|P10
name|p10
parameter_list|,
name|P11
name|p11
parameter_list|)
function_decl|;
private|private:
DECL|member|funcPointerName
name|FuncType
name|Base
operator|::
modifier|*
name|funcPointerName
decl_stmt|;
DECL|member|fallbackFuncPointer
name|FuncType
name|fallbackFuncPointer
decl_stmt|;
DECL|member|funcName
name|QByteArray
name|funcName
decl_stmt|;
DECL|member|alternateFuncName
name|QByteArray
name|alternateFuncName
decl_stmt|;
block|}
class|;
DECL|macro|RESOLVER_COMMON
define|#
directive|define
name|RESOLVER_COMMON
define|\
value|QOpenGLContext *context = QOpenGLContext::currentContext(); \     Base *funcs = qt_gl_functions(context); \  \     FuncType old = funcs->*funcPointerName; \  \     funcs->*funcPointerName = (FuncType)context->getProcAddress(funcName); \  \     if ((Policy& ResolveOES)&& !(funcs->*funcPointerName)) \         funcs->*funcPointerName = (FuncType)context->getProcAddress(funcName + "OES"); \  \     if (!(funcs->*funcPointerName)) \         funcs->*funcPointerName = (FuncType)context->getProcAddress(funcName + "ARB"); \  \     if ((Policy& ResolveEXT)&& !(funcs->*funcPointerName)) \         funcs->*funcPointerName = (FuncType)context->getProcAddress(funcName + "EXT"); \  \     if ((Policy& ResolveANGLE)&& !(funcs->*funcPointerName)) \         funcs->*funcPointerName = (FuncType)context->getProcAddress(funcName + "ANGLE"); \  \     if ((Policy& ResolveNV)&& !(funcs->*funcPointerName)) \         funcs->*funcPointerName = (FuncType)context->getProcAddress(funcName + "NV"); \  \     if (!alternateFuncName.isEmpty()&& !(funcs->*funcPointerName)) { \         funcs->*funcPointerName = (FuncType)context->getProcAddress(alternateFuncName); \  \         if ((Policy& ResolveOES)&& !(funcs->*funcPointerName)) \             funcs->*funcPointerName = (FuncType)context->getProcAddress(alternateFuncName + "OES"); \  \         if (!(funcs->*funcPointerName)) \             funcs->*funcPointerName = (FuncType)context->getProcAddress(alternateFuncName + "ARB"); \  \         if ((Policy& ResolveEXT)&& !(funcs->*funcPointerName)) \             funcs->*funcPointerName = (FuncType)context->getProcAddress(alternateFuncName + "EXT"); \  \         if ((Policy& ResolveANGLE)&& !(funcs->*funcPointerName)) \             funcs->*funcPointerName = (FuncType)context->getProcAddress(funcName + "ANGLE"); \  \         if ((Policy& ResolveNV)&& !(funcs->*funcPointerName)) \             funcs->*funcPointerName = (FuncType)context->getProcAddress(funcName + "NV"); \     }
DECL|macro|RESOLVER_COMMON_NON_VOID
define|#
directive|define
name|RESOLVER_COMMON_NON_VOID
define|\
value|RESOLVER_COMMON \  \     if (!(funcs->*funcPointerName)) { \         if (fallbackFuncPointer) { \             funcs->*funcPointerName = fallbackFuncPointer; \         } else { \             funcs->*funcPointerName = old; \             return ReturnType(); \         } \     }
DECL|macro|RESOLVER_COMMON_VOID
define|#
directive|define
name|RESOLVER_COMMON_VOID
define|\
value|RESOLVER_COMMON \  \     if (!(funcs->*funcPointerName)) { \         if (fallbackFuncPointer) { \             funcs->*funcPointerName = fallbackFuncPointer; \         } else { \             funcs->*funcPointerName = old; \             return; \         } \     }
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
DECL|function|operator ()
name|ReturnType
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
operator|::
name|operator
name|()
parameter_list|()
block|{
name|RESOLVER_COMMON_NON_VOID
return|return
call|(
name|funcs
operator|->*
name|funcPointerName
call|)
argument_list|()
return|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|>
DECL|function|operator ()
name|ReturnType
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|)
block|{
name|RESOLVER_COMMON_NON_VOID
return|return
call|(
name|funcs
operator|->*
name|funcPointerName
call|)
argument_list|(
name|p1
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|>
DECL|function|operator ()
name|ReturnType
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|)
block|{
name|RESOLVER_COMMON_NON_VOID
return|return
call|(
name|funcs
operator|->*
name|funcPointerName
call|)
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|>
DECL|function|operator ()
name|ReturnType
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|)
block|{
name|RESOLVER_COMMON_NON_VOID
return|return
call|(
name|funcs
operator|->*
name|funcPointerName
call|)
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|>
DECL|function|operator ()
name|ReturnType
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|)
block|{
name|RESOLVER_COMMON_NON_VOID
return|return
call|(
name|funcs
operator|->*
name|funcPointerName
call|)
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|>
DECL|function|operator ()
name|ReturnType
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|)
block|{
name|RESOLVER_COMMON_NON_VOID
return|return
call|(
name|funcs
operator|->*
name|funcPointerName
call|)
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|,
name|p5
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|>
DECL|function|operator ()
name|ReturnType
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|)
block|{
name|RESOLVER_COMMON_NON_VOID
return|return
call|(
name|funcs
operator|->*
name|funcPointerName
call|)
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|,
name|p5
argument_list|,
name|p6
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|>
DECL|function|operator ()
name|ReturnType
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|)
block|{
name|RESOLVER_COMMON_NON_VOID
return|return
call|(
name|funcs
operator|->*
name|funcPointerName
call|)
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|,
name|p5
argument_list|,
name|p6
argument_list|,
name|p7
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|>
DECL|function|operator ()
name|ReturnType
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|)
block|{
name|RESOLVER_COMMON_NON_VOID
return|return
call|(
name|funcs
operator|->*
name|funcPointerName
call|)
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|,
name|p5
argument_list|,
name|p6
argument_list|,
name|p7
argument_list|,
name|p8
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|,
name|typename
name|P9
parameter_list|>
DECL|function|operator ()
name|ReturnType
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|,
name|P9
name|p9
parameter_list|)
block|{
name|RESOLVER_COMMON_NON_VOID
return|return
call|(
name|funcs
operator|->*
name|funcPointerName
call|)
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|,
name|p5
argument_list|,
name|p6
argument_list|,
name|p7
argument_list|,
name|p8
argument_list|,
name|p9
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|ReturnType
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|,
name|typename
name|P9
parameter_list|,
name|typename
name|P10
parameter_list|>
DECL|function|operator ()
name|ReturnType
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|,
name|P9
name|p9
parameter_list|,
name|P10
name|p10
parameter_list|)
block|{
name|RESOLVER_COMMON_NON_VOID
return|return
call|(
name|funcs
operator|->*
name|funcPointerName
call|)
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|,
name|p5
argument_list|,
name|p6
argument_list|,
name|p7
argument_list|,
name|p8
argument_list|,
name|p9
argument_list|,
name|p10
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
DECL|function|operator ()
name|void
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
operator|::
name|operator
name|()
parameter_list|()
block|{
name|RESOLVER_COMMON_VOID
function_decl|(
name|funcs
operator|->*
name|funcPointerName
function_decl|)
parameter_list|()
function_decl|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|>
DECL|function|operator ()
name|void
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|)
block|{
name|RESOLVER_COMMON_VOID
function_decl|(
name|funcs
operator|->*
name|funcPointerName
function_decl|)
parameter_list|(
name|p1
parameter_list|)
function_decl|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|>
DECL|function|operator ()
name|void
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|)
block|{
name|RESOLVER_COMMON_VOID
function_decl|(
name|funcs
operator|->*
name|funcPointerName
function_decl|)
parameter_list|(
name|p1
parameter_list|,
name|p2
parameter_list|)
function_decl|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|>
DECL|function|operator ()
name|void
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|)
block|{
name|RESOLVER_COMMON_VOID
function_decl|(
name|funcs
operator|->*
name|funcPointerName
function_decl|)
parameter_list|(
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|)
function_decl|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|>
DECL|function|operator ()
name|void
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|)
block|{
name|RESOLVER_COMMON_VOID
function_decl|(
name|funcs
operator|->*
name|funcPointerName
function_decl|)
parameter_list|(
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|)
function_decl|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|>
DECL|function|operator ()
name|void
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|)
block|{
name|RESOLVER_COMMON_VOID
function_decl|(
name|funcs
operator|->*
name|funcPointerName
function_decl|)
parameter_list|(
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|)
function_decl|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|>
DECL|function|operator ()
name|void
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|)
block|{
name|RESOLVER_COMMON_VOID
function_decl|(
name|funcs
operator|->*
name|funcPointerName
function_decl|)
parameter_list|(
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|)
function_decl|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|>
DECL|function|operator ()
name|void
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|)
block|{
name|RESOLVER_COMMON_VOID
function_decl|(
name|funcs
operator|->*
name|funcPointerName
function_decl|)
parameter_list|(
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|,
name|p7
parameter_list|)
function_decl|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|>
DECL|function|operator ()
name|void
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|)
block|{
name|RESOLVER_COMMON_VOID
function_decl|(
name|funcs
operator|->*
name|funcPointerName
function_decl|)
parameter_list|(
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|,
name|p7
parameter_list|,
name|p8
parameter_list|)
function_decl|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|,
name|typename
name|P9
parameter_list|>
DECL|function|operator ()
name|void
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|,
name|P9
name|p9
parameter_list|)
block|{
name|RESOLVER_COMMON_VOID
function_decl|(
name|funcs
operator|->*
name|funcPointerName
function_decl|)
parameter_list|(
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|,
name|p7
parameter_list|,
name|p8
parameter_list|,
name|p9
parameter_list|)
function_decl|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|,
name|typename
name|P9
parameter_list|,
name|typename
name|P10
parameter_list|>
DECL|function|operator ()
name|void
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|,
name|P9
name|p9
parameter_list|,
name|P10
name|p10
parameter_list|)
block|{
name|RESOLVER_COMMON_VOID
function_decl|(
name|funcs
operator|->*
name|funcPointerName
function_decl|)
parameter_list|(
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|,
name|p7
parameter_list|,
name|p8
parameter_list|,
name|p9
parameter_list|,
name|p10
parameter_list|)
function_decl|;
block|}
template|template
parameter_list|<
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|,
name|int
name|Policy
parameter_list|>
template|template
parameter_list|<
name|typename
name|P1
parameter_list|,
name|typename
name|P2
parameter_list|,
name|typename
name|P3
parameter_list|,
name|typename
name|P4
parameter_list|,
name|typename
name|P5
parameter_list|,
name|typename
name|P6
parameter_list|,
name|typename
name|P7
parameter_list|,
name|typename
name|P8
parameter_list|,
name|typename
name|P9
parameter_list|,
name|typename
name|P10
parameter_list|,
name|typename
name|P11
parameter_list|>
DECL|function|operator ()
name|void
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|void
argument_list|>
operator|::
name|operator
name|()
parameter_list|(
name|P1
name|p1
parameter_list|,
name|P2
name|p2
parameter_list|,
name|P3
name|p3
parameter_list|,
name|P4
name|p4
parameter_list|,
name|P5
name|p5
parameter_list|,
name|P6
name|p6
parameter_list|,
name|P7
name|p7
parameter_list|,
name|P8
name|p8
parameter_list|,
name|P9
name|p9
parameter_list|,
name|P10
name|p10
parameter_list|,
name|P11
name|p11
parameter_list|)
block|{
name|RESOLVER_COMMON_VOID
function_decl|(
name|funcs
operator|->*
name|funcPointerName
function_decl|)
parameter_list|(
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|,
name|p7
parameter_list|,
name|p8
parameter_list|,
name|p9
parameter_list|,
name|p10
parameter_list|,
name|p11
parameter_list|)
function_decl|;
block|}
template|template
parameter_list|<
name|typename
name|ReturnType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|>
DECL|function|functionResolverWithFallback
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
name|functionResolverWithFallback
parameter_list|(
name|FuncType
name|Base
operator|::
modifier|*
name|func
parameter_list|,
name|FuncType
name|fallback
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|alternate
init|=
literal|0
parameter_list|)
block|{
return|return
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
argument_list|(
name|func
argument_list|,
name|fallback
argument_list|,
name|name
argument_list|,
name|alternate
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|ReturnType
parameter_list|,
name|int
name|Policy
parameter_list|,
name|typename
name|Base
parameter_list|,
name|typename
name|FuncType
parameter_list|>
DECL|function|functionResolver
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
name|functionResolver
parameter_list|(
name|FuncType
name|Base
operator|::
modifier|*
name|func
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|alternate
init|=
literal|0
parameter_list|)
block|{
return|return
name|Resolver
argument_list|<
name|Base
argument_list|,
name|FuncType
argument_list|,
name|Policy
argument_list|,
name|ReturnType
argument_list|>
argument_list|(
name|func
argument_list|,
literal|0
argument_list|,
name|name
argument_list|,
name|alternate
argument_list|)
return|;
block|}
block|}
end_namespace
begin_comment
comment|// namespace
end_comment
begin_define
DECL|macro|RESOLVE_FUNC
define|#
directive|define
name|RESOLVE_FUNC
parameter_list|(
name|RETURN_TYPE
parameter_list|,
name|POLICY
parameter_list|,
name|NAME
parameter_list|)
define|\
value|return functionResolver<RETURN_TYPE, POLICY>(&QOpenGLExtensionsPrivate::NAME, "gl" #NAME)
end_define
begin_define
DECL|macro|RESOLVE_FUNC_VOID
define|#
directive|define
name|RESOLVE_FUNC_VOID
parameter_list|(
name|POLICY
parameter_list|,
name|NAME
parameter_list|)
define|\
value|functionResolver<void, POLICY>(&QOpenGLExtensionsPrivate::NAME, "gl" #NAME)
end_define
begin_define
DECL|macro|RESOLVE_FUNC_SPECIAL
define|#
directive|define
name|RESOLVE_FUNC_SPECIAL
parameter_list|(
name|RETURN_TYPE
parameter_list|,
name|POLICY
parameter_list|,
name|NAME
parameter_list|)
define|\
value|return functionResolverWithFallback<RETURN_TYPE, POLICY>(&QOpenGLExtensionsPrivate::NAME, qopenglfSpecial##NAME, "gl" #NAME)
end_define
begin_define
DECL|macro|RESOLVE_FUNC_SPECIAL_VOID
define|#
directive|define
name|RESOLVE_FUNC_SPECIAL_VOID
parameter_list|(
name|POLICY
parameter_list|,
name|NAME
parameter_list|)
define|\
value|functionResolverWithFallback<void, POLICY>(&QOpenGLExtensionsPrivate::NAME, qopenglfSpecial##NAME, "gl" #NAME)
end_define
begin_define
DECL|macro|RESOLVE_FUNC_WITH_ALTERNATE
define|#
directive|define
name|RESOLVE_FUNC_WITH_ALTERNATE
parameter_list|(
name|RETURN_TYPE
parameter_list|,
name|POLICY
parameter_list|,
name|NAME
parameter_list|,
name|ALTERNATE
parameter_list|)
define|\
value|return functionResolver<RETURN_TYPE, POLICY>(&QOpenGLExtensionsPrivate::NAME, "gl" #NAME, "gl" #ALTERNATE)
end_define
begin_define
DECL|macro|RESOLVE_FUNC_VOID_WITH_ALTERNATE
define|#
directive|define
name|RESOLVE_FUNC_VOID_WITH_ALTERNATE
parameter_list|(
name|POLICY
parameter_list|,
name|NAME
parameter_list|,
name|ALTERNATE
parameter_list|)
define|\
value|functionResolver<void, POLICY>(&QOpenGLExtensionsPrivate::NAME, "gl" #NAME, "gl" #ALTERNATE)
end_define
begin_ifndef
ifndef|#
directive|ifndef
name|QT_OPENGL_ES_2
end_ifndef
begin_comment
comment|// GLES2 + OpenGL1 common subset. These are normally not resolvable,
end_comment
begin_comment
comment|// but the underlying platform code may hide this limitation.
end_comment
begin_function
DECL|function|qopenglfResolveBindTexture
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBindTexture
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|texture
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|BindTexture
argument_list|)
argument_list|(
name|target
argument_list|,
name|texture
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBlendFunc
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBlendFunc
parameter_list|(
name|GLenum
name|sfactor
parameter_list|,
name|GLenum
name|dfactor
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|BlendFunc
argument_list|)
argument_list|(
name|sfactor
argument_list|,
name|dfactor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveClear
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveClear
parameter_list|(
name|GLbitfield
name|mask
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Clear
argument_list|)
argument_list|(
name|mask
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveClearColor
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveClearColor
parameter_list|(
name|GLclampf
name|red
parameter_list|,
name|GLclampf
name|green
parameter_list|,
name|GLclampf
name|blue
parameter_list|,
name|GLclampf
name|alpha
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ClearColor
argument_list|)
argument_list|(
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveClearDepthf
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveClearDepthf
parameter_list|(
name|GLclampf
name|depth
parameter_list|)
block|{
if|if
condition|(
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
operator|->
name|isOpenGLES
argument_list|()
condition|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ClearDepthf
argument_list|)
argument_list|(
name|depth
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ClearDepth
argument_list|)
argument_list|(
operator|(
name|GLdouble
operator|)
name|depth
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qopenglfResolveClearStencil
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveClearStencil
parameter_list|(
name|GLint
name|s
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ClearStencil
argument_list|)
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveColorMask
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveColorMask
parameter_list|(
name|GLboolean
name|red
parameter_list|,
name|GLboolean
name|green
parameter_list|,
name|GLboolean
name|blue
parameter_list|,
name|GLboolean
name|alpha
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ColorMask
argument_list|)
argument_list|(
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveCopyTexImage2D
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveCopyTexImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|border
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|CopyTexImage2D
argument_list|)
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveCopyTexSubImage2D
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveCopyTexSubImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|CopyTexSubImage2D
argument_list|)
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveCullFace
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveCullFace
parameter_list|(
name|GLenum
name|mode
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|CullFace
argument_list|)
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDeleteTextures
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDeleteTextures
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|textures
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DeleteTextures
argument_list|)
argument_list|(
name|n
argument_list|,
name|textures
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDepthFunc
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDepthFunc
parameter_list|(
name|GLenum
name|func
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DepthFunc
argument_list|)
argument_list|(
name|func
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDepthMask
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDepthMask
parameter_list|(
name|GLboolean
name|flag
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DepthMask
argument_list|)
argument_list|(
name|flag
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDepthRangef
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDepthRangef
parameter_list|(
name|GLclampf
name|zNear
parameter_list|,
name|GLclampf
name|zFar
parameter_list|)
block|{
if|if
condition|(
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
operator|->
name|isOpenGLES
argument_list|()
condition|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DepthRangef
argument_list|)
argument_list|(
name|zNear
argument_list|,
name|zFar
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DepthRange
argument_list|)
argument_list|(
operator|(
name|GLdouble
operator|)
name|zNear
argument_list|,
operator|(
name|GLdouble
operator|)
name|zFar
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qopenglfResolveDisable
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDisable
parameter_list|(
name|GLenum
name|cap
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Disable
argument_list|)
argument_list|(
name|cap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDrawArrays
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDrawArrays
parameter_list|(
name|GLenum
name|mode
parameter_list|,
name|GLint
name|first
parameter_list|,
name|GLsizei
name|count
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DrawArrays
argument_list|)
argument_list|(
name|mode
argument_list|,
name|first
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDrawElements
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDrawElements
parameter_list|(
name|GLenum
name|mode
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|indices
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DrawElements
argument_list|)
argument_list|(
name|mode
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveEnable
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveEnable
parameter_list|(
name|GLenum
name|cap
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Enable
argument_list|)
argument_list|(
name|cap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveFinish
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveFinish
parameter_list|()
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Finish
argument_list|)
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveFlush
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveFlush
parameter_list|()
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Flush
argument_list|)
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveFrontFace
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveFrontFace
parameter_list|(
name|GLenum
name|mode
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|FrontFace
argument_list|)
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGenTextures
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGenTextures
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|textures
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GenTextures
argument_list|)
argument_list|(
name|n
argument_list|,
name|textures
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetBooleanv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetBooleanv
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLboolean
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetBooleanv
argument_list|)
argument_list|(
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetError
specifier|static
name|GLenum
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetError
parameter_list|()
block|{
name|RESOLVE_FUNC
argument_list|(
name|GLenum
argument_list|,
literal|0
argument_list|,
name|GetError
argument_list|)
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetFloatv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetFloatv
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetFloatv
argument_list|)
argument_list|(
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetIntegerv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetIntegerv
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetIntegerv
argument_list|)
argument_list|(
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetString
specifier|static
specifier|const
name|GLubyte
modifier|*
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetString
parameter_list|(
name|GLenum
name|name
parameter_list|)
block|{
name|RESOLVE_FUNC
argument_list|(
specifier|const
name|GLubyte
operator|*
argument_list|,
literal|0
argument_list|,
name|GetString
argument_list|)
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetTexParameterfv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetTexParameterfv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetTexParameterfv
argument_list|)
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetTexParameteriv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetTexParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetTexParameteriv
argument_list|)
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveHint
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveHint
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|mode
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Hint
argument_list|)
argument_list|(
name|target
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveIsEnabled
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfResolveIsEnabled
parameter_list|(
name|GLenum
name|cap
parameter_list|)
block|{
name|RESOLVE_FUNC
argument_list|(
name|GLboolean
argument_list|,
literal|0
argument_list|,
name|IsEnabled
argument_list|)
argument_list|(
name|cap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveIsTexture
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfResolveIsTexture
parameter_list|(
name|GLuint
name|texture
parameter_list|)
block|{
name|RESOLVE_FUNC
argument_list|(
name|GLboolean
argument_list|,
literal|0
argument_list|,
name|IsTexture
argument_list|)
argument_list|(
name|texture
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveLineWidth
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveLineWidth
parameter_list|(
name|GLfloat
name|width
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|LineWidth
argument_list|)
argument_list|(
name|width
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolvePixelStorei
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolvePixelStorei
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLint
name|param
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|PixelStorei
argument_list|)
argument_list|(
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolvePolygonOffset
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolvePolygonOffset
parameter_list|(
name|GLfloat
name|factor
parameter_list|,
name|GLfloat
name|units
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|PolygonOffset
argument_list|)
argument_list|(
name|factor
argument_list|,
name|units
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveReadPixels
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveReadPixels
parameter_list|(
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLvoid
modifier|*
name|pixels
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ReadPixels
argument_list|)
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveScissor
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveScissor
parameter_list|(
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Scissor
argument_list|)
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveStencilFunc
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveStencilFunc
parameter_list|(
name|GLenum
name|func
parameter_list|,
name|GLint
name|ref
parameter_list|,
name|GLuint
name|mask
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|StencilFunc
argument_list|)
argument_list|(
name|func
argument_list|,
name|ref
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveStencilMask
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveStencilMask
parameter_list|(
name|GLuint
name|mask
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|StencilMask
argument_list|)
argument_list|(
name|mask
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveStencilOp
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveStencilOp
parameter_list|(
name|GLenum
name|fail
parameter_list|,
name|GLenum
name|zfail
parameter_list|,
name|GLenum
name|zpass
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|StencilOp
argument_list|)
argument_list|(
name|fail
argument_list|,
name|zfail
argument_list|,
name|zpass
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveTexImage2D
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveTexImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|pixels
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|TexImage2D
argument_list|)
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveTexParameterf
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveTexParameterf
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLfloat
name|param
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|TexParameterf
argument_list|)
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveTexParameterfv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveTexParameterfv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|TexParameterfv
argument_list|)
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveTexParameteri
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveTexParameteri
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
name|param
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|TexParameteri
argument_list|)
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveTexParameteriv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveTexParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
specifier|const
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|TexParameteriv
argument_list|)
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveTexSubImage2D
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveTexSubImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|pixels
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|TexSubImage2D
argument_list|)
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveViewport
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveViewport
parameter_list|(
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Viewport
argument_list|)
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// GL(ES)2
end_comment
begin_function
DECL|function|qopenglfResolveActiveTexture
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveActiveTexture
parameter_list|(
name|GLenum
name|texture
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ActiveTexture
argument_list|)
argument_list|(
name|texture
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveAttachShader
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveAttachShader
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|shader
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID_WITH_ALTERNATE
argument_list|(
literal|0
argument_list|,
name|AttachShader
argument_list|,
name|AttachObject
argument_list|)
argument_list|(
name|program
argument_list|,
name|shader
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBindAttribLocation
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBindAttribLocation
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|BindAttribLocation
argument_list|)
argument_list|(
name|program
argument_list|,
name|index
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBindBuffer
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBindBuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|buffer
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|BindBuffer
argument_list|)
argument_list|(
name|target
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBindFramebuffer
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBindFramebuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|framebuffer
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|BindFramebuffer
argument_list|)
argument_list|(
name|target
argument_list|,
name|framebuffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBindRenderbuffer
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBindRenderbuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|renderbuffer
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|BindRenderbuffer
argument_list|)
argument_list|(
name|target
argument_list|,
name|renderbuffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBlendColor
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBlendColor
parameter_list|(
name|GLclampf
name|red
parameter_list|,
name|GLclampf
name|green
parameter_list|,
name|GLclampf
name|blue
parameter_list|,
name|GLclampf
name|alpha
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|BlendColor
argument_list|)
argument_list|(
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBlendEquation
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBlendEquation
parameter_list|(
name|GLenum
name|mode
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|BlendEquation
argument_list|)
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBlendEquationSeparate
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBlendEquationSeparate
parameter_list|(
name|GLenum
name|modeRGB
parameter_list|,
name|GLenum
name|modeAlpha
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|BlendEquationSeparate
argument_list|)
argument_list|(
name|modeRGB
argument_list|,
name|modeAlpha
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBlendFuncSeparate
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBlendFuncSeparate
parameter_list|(
name|GLenum
name|srcRGB
parameter_list|,
name|GLenum
name|dstRGB
parameter_list|,
name|GLenum
name|srcAlpha
parameter_list|,
name|GLenum
name|dstAlpha
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|BlendFuncSeparate
argument_list|)
argument_list|(
name|srcRGB
argument_list|,
name|dstRGB
argument_list|,
name|srcAlpha
argument_list|,
name|dstAlpha
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBufferData
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBufferData
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|qopengl_GLsizeiptr
name|size
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|GLenum
name|usage
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|BufferData
argument_list|)
argument_list|(
name|target
argument_list|,
name|size
argument_list|,
name|data
argument_list|,
name|usage
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBufferSubData
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBufferSubData
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|qopengl_GLintptr
name|offset
parameter_list|,
name|qopengl_GLsizeiptr
name|size
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|BufferSubData
argument_list|)
argument_list|(
name|target
argument_list|,
name|offset
argument_list|,
name|size
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveCheckFramebufferStatus
specifier|static
name|GLenum
name|QOPENGLF_APIENTRY
name|qopenglfResolveCheckFramebufferStatus
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
name|RESOLVE_FUNC
argument_list|(
name|GLenum
argument_list|,
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|CheckFramebufferStatus
argument_list|)
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveCompileShader
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveCompileShader
parameter_list|(
name|GLuint
name|shader
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|CompileShader
argument_list|)
argument_list|(
name|shader
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveCompressedTexImage2D
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveCompressedTexImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|CompressedTexImage2D
argument_list|)
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|,
name|imageSize
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveCompressedTexSubImage2D
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveCompressedTexSubImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|CompressedTexSubImage2D
argument_list|)
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveCreateProgram
specifier|static
name|GLuint
name|QOPENGLF_APIENTRY
name|qopenglfResolveCreateProgram
parameter_list|()
block|{
name|RESOLVE_FUNC_WITH_ALTERNATE
argument_list|(
name|GLuint
argument_list|,
literal|0
argument_list|,
name|CreateProgram
argument_list|,
name|CreateProgramObject
argument_list|)
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveCreateShader
specifier|static
name|GLuint
name|QOPENGLF_APIENTRY
name|qopenglfResolveCreateShader
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
name|RESOLVE_FUNC_WITH_ALTERNATE
argument_list|(
name|GLuint
argument_list|,
literal|0
argument_list|,
name|CreateShader
argument_list|,
name|CreateShaderObject
argument_list|)
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDeleteBuffers
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDeleteBuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|buffers
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|DeleteBuffers
argument_list|)
argument_list|(
name|n
argument_list|,
name|buffers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDeleteFramebuffers
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDeleteFramebuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|framebuffers
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|DeleteFramebuffers
argument_list|)
argument_list|(
name|n
argument_list|,
name|framebuffers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDeleteProgram
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDeleteProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DeleteProgram
argument_list|)
argument_list|(
name|program
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDeleteRenderbuffers
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDeleteRenderbuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|renderbuffers
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|DeleteRenderbuffers
argument_list|)
argument_list|(
name|n
argument_list|,
name|renderbuffers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDeleteShader
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDeleteShader
parameter_list|(
name|GLuint
name|shader
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID_WITH_ALTERNATE
argument_list|(
literal|0
argument_list|,
name|DeleteShader
argument_list|,
name|DeleteObject
argument_list|)
argument_list|(
name|shader
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDetachShader
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDetachShader
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|shader
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID_WITH_ALTERNATE
argument_list|(
literal|0
argument_list|,
name|DetachShader
argument_list|,
name|DetachObject
argument_list|)
argument_list|(
name|program
argument_list|,
name|shader
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDisableVertexAttribArray
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDisableVertexAttribArray
parameter_list|(
name|GLuint
name|index
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DisableVertexAttribArray
argument_list|)
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveEnableVertexAttribArray
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveEnableVertexAttribArray
parameter_list|(
name|GLuint
name|index
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|EnableVertexAttribArray
argument_list|)
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveFramebufferRenderbuffer
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveFramebufferRenderbuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|renderbuffertarget
parameter_list|,
name|GLuint
name|renderbuffer
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|FramebufferRenderbuffer
argument_list|)
argument_list|(
name|target
argument_list|,
name|attachment
argument_list|,
name|renderbuffertarget
argument_list|,
name|renderbuffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveFramebufferTexture2D
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveFramebufferTexture2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|textarget
parameter_list|,
name|GLuint
name|texture
parameter_list|,
name|GLint
name|level
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|FramebufferTexture2D
argument_list|)
argument_list|(
name|target
argument_list|,
name|attachment
argument_list|,
name|textarget
argument_list|,
name|texture
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGenBuffers
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGenBuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|buffers
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|GenBuffers
argument_list|)
argument_list|(
name|n
argument_list|,
name|buffers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGenerateMipmap
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGenerateMipmap
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|GenerateMipmap
argument_list|)
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGenFramebuffers
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGenFramebuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|framebuffers
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|GenFramebuffers
argument_list|)
argument_list|(
name|n
argument_list|,
name|framebuffers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGenRenderbuffers
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGenRenderbuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|renderbuffers
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|GenRenderbuffers
argument_list|)
argument_list|(
name|n
argument_list|,
name|renderbuffers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetActiveAttrib
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetActiveAttrib
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLint
modifier|*
name|size
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetActiveAttrib
argument_list|)
argument_list|(
name|program
argument_list|,
name|index
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetActiveUniform
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetActiveUniform
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLint
modifier|*
name|size
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetActiveUniform
argument_list|)
argument_list|(
name|program
argument_list|,
name|index
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetAttachedShaders
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetAttachedShaders
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|maxcount
parameter_list|,
name|GLsizei
modifier|*
name|count
parameter_list|,
name|GLuint
modifier|*
name|shaders
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID_WITH_ALTERNATE
argument_list|(
literal|0
argument_list|,
name|GetAttachedShaders
argument_list|,
name|GetAttachedObjects
argument_list|)
argument_list|(
name|program
argument_list|,
name|maxcount
argument_list|,
name|count
argument_list|,
name|shaders
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetAttribLocation
specifier|static
name|GLint
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetAttribLocation
parameter_list|(
name|GLuint
name|program
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
name|RESOLVE_FUNC
argument_list|(
name|GLint
argument_list|,
literal|0
argument_list|,
name|GetAttribLocation
argument_list|)
argument_list|(
name|program
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetBufferParameteriv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetBufferParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|GetBufferParameteriv
argument_list|)
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetFramebufferAttachmentParameteriv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetFramebufferAttachmentParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|GetFramebufferAttachmentParameteriv
argument_list|)
argument_list|(
name|target
argument_list|,
name|attachment
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetProgramiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetProgramiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID_WITH_ALTERNATE
argument_list|(
literal|0
argument_list|,
name|GetProgramiv
argument_list|,
name|GetObjectParameteriv
argument_list|)
argument_list|(
name|program
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetProgramInfoLog
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetProgramInfoLog
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|infolog
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID_WITH_ALTERNATE
argument_list|(
literal|0
argument_list|,
name|GetProgramInfoLog
argument_list|,
name|GetInfoLog
argument_list|)
argument_list|(
name|program
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|infolog
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetRenderbufferParameteriv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetRenderbufferParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|GetRenderbufferParameteriv
argument_list|)
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetShaderiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetShaderiv
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID_WITH_ALTERNATE
argument_list|(
literal|0
argument_list|,
name|GetShaderiv
argument_list|,
name|GetObjectParameteriv
argument_list|)
argument_list|(
name|shader
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetShaderInfoLog
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetShaderInfoLog
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|infolog
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID_WITH_ALTERNATE
argument_list|(
literal|0
argument_list|,
name|GetShaderInfoLog
argument_list|,
name|GetInfoLog
argument_list|)
argument_list|(
name|shader
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|infolog
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfSpecialGetShaderPrecisionFormat
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfSpecialGetShaderPrecisionFormat
parameter_list|(
name|GLenum
name|shadertype
parameter_list|,
name|GLenum
name|precisiontype
parameter_list|,
name|GLint
modifier|*
name|range
parameter_list|,
name|GLint
modifier|*
name|precision
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|shadertype
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|precisiontype
argument_list|)
expr_stmt|;
name|range
index|[
literal|0
index|]
operator|=
name|range
index|[
literal|1
index|]
operator|=
name|precision
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetShaderPrecisionFormat
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetShaderPrecisionFormat
parameter_list|(
name|GLenum
name|shadertype
parameter_list|,
name|GLenum
name|precisiontype
parameter_list|,
name|GLint
modifier|*
name|range
parameter_list|,
name|GLint
modifier|*
name|precision
parameter_list|)
block|{
name|RESOLVE_FUNC_SPECIAL_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|GetShaderPrecisionFormat
argument_list|)
argument_list|(
name|shadertype
argument_list|,
name|precisiontype
argument_list|,
name|range
argument_list|,
name|precision
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetShaderSource
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetShaderSource
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|source
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetShaderSource
argument_list|)
argument_list|(
name|shader
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetUniformfv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetUniformfv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetUniformfv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetUniformiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetUniformiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetUniformiv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetUniformLocation
specifier|static
name|GLint
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetUniformLocation
parameter_list|(
name|GLuint
name|program
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
name|RESOLVE_FUNC
argument_list|(
name|GLint
argument_list|,
literal|0
argument_list|,
name|GetUniformLocation
argument_list|)
argument_list|(
name|program
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetVertexAttribfv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetVertexAttribfv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetVertexAttribfv
argument_list|)
argument_list|(
name|index
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetVertexAttribiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetVertexAttribiv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetVertexAttribiv
argument_list|)
argument_list|(
name|index
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetVertexAttribPointerv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetVertexAttribPointerv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|void
modifier|*
modifier|*
name|pointer
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetVertexAttribPointerv
argument_list|)
argument_list|(
name|index
argument_list|,
name|pname
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveIsBuffer
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfResolveIsBuffer
parameter_list|(
name|GLuint
name|buffer
parameter_list|)
block|{
name|RESOLVE_FUNC
argument_list|(
name|GLboolean
argument_list|,
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|IsBuffer
argument_list|)
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveIsFramebuffer
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfResolveIsFramebuffer
parameter_list|(
name|GLuint
name|framebuffer
parameter_list|)
block|{
name|RESOLVE_FUNC
argument_list|(
name|GLboolean
argument_list|,
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|IsFramebuffer
argument_list|)
argument_list|(
name|framebuffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfSpecialIsProgram
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfSpecialIsProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
return|return
name|program
operator|!=
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveIsProgram
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfResolveIsProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
name|RESOLVE_FUNC_SPECIAL
argument_list|(
name|GLboolean
argument_list|,
literal|0
argument_list|,
name|IsProgram
argument_list|)
argument_list|(
name|program
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveIsRenderbuffer
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfResolveIsRenderbuffer
parameter_list|(
name|GLuint
name|renderbuffer
parameter_list|)
block|{
name|RESOLVE_FUNC
argument_list|(
name|GLboolean
argument_list|,
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|IsRenderbuffer
argument_list|)
argument_list|(
name|renderbuffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfSpecialIsShader
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfSpecialIsShader
parameter_list|(
name|GLuint
name|shader
parameter_list|)
block|{
return|return
name|shader
operator|!=
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveIsShader
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfResolveIsShader
parameter_list|(
name|GLuint
name|shader
parameter_list|)
block|{
name|RESOLVE_FUNC_SPECIAL
argument_list|(
name|GLboolean
argument_list|,
literal|0
argument_list|,
name|IsShader
argument_list|)
argument_list|(
name|shader
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveLinkProgram
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveLinkProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|LinkProgram
argument_list|)
argument_list|(
name|program
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfSpecialReleaseShaderCompiler
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfSpecialReleaseShaderCompiler
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|qopenglfResolveReleaseShaderCompiler
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveReleaseShaderCompiler
parameter_list|()
block|{
name|RESOLVE_FUNC_SPECIAL_VOID
argument_list|(
literal|0
argument_list|,
name|ReleaseShaderCompiler
argument_list|)
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveRenderbufferStorage
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveRenderbufferStorage
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|RenderbufferStorage
argument_list|)
argument_list|(
name|target
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveSampleCoverage
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveSampleCoverage
parameter_list|(
name|GLclampf
name|value
parameter_list|,
name|GLboolean
name|invert
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveOES
operator||
name|ResolveEXT
argument_list|,
name|SampleCoverage
argument_list|)
argument_list|(
name|value
argument_list|,
name|invert
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveShaderBinary
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveShaderBinary
parameter_list|(
name|GLint
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|shaders
parameter_list|,
name|GLenum
name|binaryformat
parameter_list|,
specifier|const
name|void
modifier|*
name|binary
parameter_list|,
name|GLint
name|length
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ShaderBinary
argument_list|)
argument_list|(
name|n
argument_list|,
name|shaders
argument_list|,
name|binaryformat
argument_list|,
name|binary
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveShaderSource
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveShaderSource
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|string
parameter_list|,
specifier|const
name|GLint
modifier|*
name|length
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ShaderSource
argument_list|)
argument_list|(
name|shader
argument_list|,
name|count
argument_list|,
name|string
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveStencilFuncSeparate
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveStencilFuncSeparate
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLenum
name|func
parameter_list|,
name|GLint
name|ref
parameter_list|,
name|GLuint
name|mask
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveEXT
argument_list|,
name|StencilFuncSeparate
argument_list|)
argument_list|(
name|face
argument_list|,
name|func
argument_list|,
name|ref
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveStencilMaskSeparate
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveStencilMaskSeparate
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLuint
name|mask
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveEXT
argument_list|,
name|StencilMaskSeparate
argument_list|)
argument_list|(
name|face
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveStencilOpSeparate
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveStencilOpSeparate
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLenum
name|fail
parameter_list|,
name|GLenum
name|zfail
parameter_list|,
name|GLenum
name|zpass
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveEXT
argument_list|,
name|StencilOpSeparate
argument_list|)
argument_list|(
name|face
argument_list|,
name|fail
argument_list|,
name|zfail
argument_list|,
name|zpass
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform1f
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform1f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform1f
argument_list|)
argument_list|(
name|location
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform1fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform1fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform1fv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform1i
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform1i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform1i
argument_list|)
argument_list|(
name|location
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform1iv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform1iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform1iv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform2f
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform2f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform2f
argument_list|)
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform2fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform2fv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform2i
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform2i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform2i
argument_list|)
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform2iv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform2iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform2iv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform3f
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform3f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform3f
argument_list|)
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform3fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform3fv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform3i
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform3i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLint
name|z
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform3i
argument_list|)
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform3iv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform3iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform3iv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform4f
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform4f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|,
name|GLfloat
name|w
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform4f
argument_list|)
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform4fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform4fv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform4i
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform4i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLint
name|z
parameter_list|,
name|GLint
name|w
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform4i
argument_list|)
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform4iv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform4iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform4iv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniformMatrix2fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniformMatrix2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|UniformMatrix2fv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniformMatrix3fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniformMatrix3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|UniformMatrix3fv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniformMatrix4fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniformMatrix4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|UniformMatrix4fv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUseProgram
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUseProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|UseProgram
argument_list|)
argument_list|(
name|program
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveValidateProgram
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveValidateProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ValidateProgram
argument_list|)
argument_list|(
name|program
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttrib1f
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttrib1f
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttrib1f
argument_list|)
argument_list|(
name|indx
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttrib1fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttrib1fv
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttrib1fv
argument_list|)
argument_list|(
name|indx
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttrib2f
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttrib2f
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttrib2f
argument_list|)
argument_list|(
name|indx
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttrib2fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttrib2fv
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttrib2fv
argument_list|)
argument_list|(
name|indx
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttrib3f
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttrib3f
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttrib3f
argument_list|)
argument_list|(
name|indx
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttrib3fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttrib3fv
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttrib3fv
argument_list|)
argument_list|(
name|indx
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttrib4f
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttrib4f
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|,
name|GLfloat
name|w
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttrib4f
argument_list|)
argument_list|(
name|indx
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttrib4fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttrib4fv
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttrib4fv
argument_list|)
argument_list|(
name|indx
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttribPointer
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttribPointer
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLint
name|size
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLboolean
name|normalized
parameter_list|,
name|GLsizei
name|stride
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttribPointer
argument_list|)
argument_list|(
name|indx
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|normalized
argument_list|,
name|stride
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !QT_OPENGL_ES_2
end_comment
begin_comment
comment|// Extensions not standard in any ES version
end_comment
begin_function
DECL|function|qopenglfResolveMapBuffer
specifier|static
name|GLvoid
modifier|*
name|QOPENGLF_APIENTRY
name|qopenglfResolveMapBuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|access
parameter_list|)
block|{
comment|// It is possible that GL_OES_map_buffer is present, but then having to
comment|// differentiate between glUnmapBufferOES and glUnmapBuffer causes extra
comment|// headache. QOpenGLBuffer::map() will handle this automatically, while direct
comment|// calls are better off with migrating to the standard glMapBufferRange.
name|QOpenGLContext
modifier|*
name|ctx
init|=
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|->
name|isOpenGLES
argument_list|()
operator|&&
name|ctx
operator|->
name|format
argument_list|()
operator|.
name|majorVersion
argument_list|()
operator|>=
literal|3
condition|)
block|{
name|qWarning
argument_list|(
literal|"QOpenGLFunctions: glMapBuffer is not available in OpenGL ES 3.0 and up. Use glMapBufferRange instead."
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
name|RESOLVE_FUNC
argument_list|(
name|GLvoid
operator|*
argument_list|,
name|ResolveOES
argument_list|,
name|MapBuffer
argument_list|)
argument_list|(
name|target
argument_list|,
name|access
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetBufferSubData
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetBufferSubData
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|qopengl_GLintptr
name|offset
parameter_list|,
name|qopengl_GLsizeiptr
name|size
parameter_list|,
name|GLvoid
modifier|*
name|data
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveEXT
argument_list|,
name|GetBufferSubData
argument_list|)
argument_list|(
name|target
argument_list|,
name|offset
argument_list|,
name|size
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDiscardFramebuffer
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDiscardFramebuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|numAttachments
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|attachments
parameter_list|)
block|{
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveEXT
argument_list|,
name|DiscardFramebuffer
argument_list|)
argument_list|(
name|target
argument_list|,
name|numAttachments
argument_list|,
name|attachments
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_OPENGL_DYNAMIC
argument_list|)
end_if
begin_comment
comment|// Special translation functions for ES-specific calls on desktop GL
end_comment
begin_function
DECL|function|qopenglfTranslateClearDepthf
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfTranslateClearDepthf
parameter_list|(
name|GLclampf
name|depth
parameter_list|)
block|{
operator|::
name|glClearDepth
argument_list|(
name|depth
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfTranslateDepthRangef
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfTranslateDepthRangef
parameter_list|(
name|GLclampf
name|zNear
parameter_list|,
name|GLclampf
name|zFar
parameter_list|)
block|{
operator|::
name|glDepthRange
argument_list|(
name|zNear
argument_list|,
name|zFar
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !ES&& !DYNAMIC
end_comment
begin_constructor
DECL|function|QOpenGLFunctionsPrivate
name|QOpenGLFunctionsPrivate
operator|::
name|QOpenGLFunctionsPrivate
parameter_list|(
name|QOpenGLContext
modifier|*
parameter_list|)
block|{
comment|/* Assign a pointer to an above defined static function      * which on first call resolves the function from the current      * context, assigns it to the member variable and executes it      * (see Resolver template) */
ifndef|#
directive|ifndef
name|QT_OPENGL_ES_2
comment|// The GL1 functions may not be queriable via getProcAddress().
if|if
condition|(
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|hasCapability
argument_list|(
name|QPlatformIntegration
operator|::
name|AllGLFunctionsQueryable
argument_list|)
condition|)
block|{
comment|// The platform plugin supports resolving these.
name|BindTexture
operator|=
name|qopenglfResolveBindTexture
expr_stmt|;
name|BlendFunc
operator|=
name|qopenglfResolveBlendFunc
expr_stmt|;
name|Clear
operator|=
name|qopenglfResolveClear
expr_stmt|;
name|ClearColor
operator|=
name|qopenglfResolveClearColor
expr_stmt|;
name|ClearDepthf
operator|=
name|qopenglfResolveClearDepthf
expr_stmt|;
name|ClearStencil
operator|=
name|qopenglfResolveClearStencil
expr_stmt|;
name|ColorMask
operator|=
name|qopenglfResolveColorMask
expr_stmt|;
name|CopyTexImage2D
operator|=
name|qopenglfResolveCopyTexImage2D
expr_stmt|;
name|CopyTexSubImage2D
operator|=
name|qopenglfResolveCopyTexSubImage2D
expr_stmt|;
name|CullFace
operator|=
name|qopenglfResolveCullFace
expr_stmt|;
name|DeleteTextures
operator|=
name|qopenglfResolveDeleteTextures
expr_stmt|;
name|DepthFunc
operator|=
name|qopenglfResolveDepthFunc
expr_stmt|;
name|DepthMask
operator|=
name|qopenglfResolveDepthMask
expr_stmt|;
name|DepthRangef
operator|=
name|qopenglfResolveDepthRangef
expr_stmt|;
name|Disable
operator|=
name|qopenglfResolveDisable
expr_stmt|;
name|DrawArrays
operator|=
name|qopenglfResolveDrawArrays
expr_stmt|;
name|DrawElements
operator|=
name|qopenglfResolveDrawElements
expr_stmt|;
name|Enable
operator|=
name|qopenglfResolveEnable
expr_stmt|;
name|Finish
operator|=
name|qopenglfResolveFinish
expr_stmt|;
name|Flush
operator|=
name|qopenglfResolveFlush
expr_stmt|;
name|FrontFace
operator|=
name|qopenglfResolveFrontFace
expr_stmt|;
name|GenTextures
operator|=
name|qopenglfResolveGenTextures
expr_stmt|;
name|GetBooleanv
operator|=
name|qopenglfResolveGetBooleanv
expr_stmt|;
name|GetError
operator|=
name|qopenglfResolveGetError
expr_stmt|;
name|GetFloatv
operator|=
name|qopenglfResolveGetFloatv
expr_stmt|;
name|GetIntegerv
operator|=
name|qopenglfResolveGetIntegerv
expr_stmt|;
name|GetString
operator|=
name|qopenglfResolveGetString
expr_stmt|;
name|GetTexParameterfv
operator|=
name|qopenglfResolveGetTexParameterfv
expr_stmt|;
name|GetTexParameteriv
operator|=
name|qopenglfResolveGetTexParameteriv
expr_stmt|;
name|Hint
operator|=
name|qopenglfResolveHint
expr_stmt|;
name|IsEnabled
operator|=
name|qopenglfResolveIsEnabled
expr_stmt|;
name|IsTexture
operator|=
name|qopenglfResolveIsTexture
expr_stmt|;
name|LineWidth
operator|=
name|qopenglfResolveLineWidth
expr_stmt|;
name|PixelStorei
operator|=
name|qopenglfResolvePixelStorei
expr_stmt|;
name|PolygonOffset
operator|=
name|qopenglfResolvePolygonOffset
expr_stmt|;
name|ReadPixels
operator|=
name|qopenglfResolveReadPixels
expr_stmt|;
name|Scissor
operator|=
name|qopenglfResolveScissor
expr_stmt|;
name|StencilFunc
operator|=
name|qopenglfResolveStencilFunc
expr_stmt|;
name|StencilMask
operator|=
name|qopenglfResolveStencilMask
expr_stmt|;
name|StencilOp
operator|=
name|qopenglfResolveStencilOp
expr_stmt|;
name|TexImage2D
operator|=
name|qopenglfResolveTexImage2D
expr_stmt|;
name|TexParameterf
operator|=
name|qopenglfResolveTexParameterf
expr_stmt|;
name|TexParameterfv
operator|=
name|qopenglfResolveTexParameterfv
expr_stmt|;
name|TexParameteri
operator|=
name|qopenglfResolveTexParameteri
expr_stmt|;
name|TexParameteriv
operator|=
name|qopenglfResolveTexParameteriv
expr_stmt|;
name|TexSubImage2D
operator|=
name|qopenglfResolveTexSubImage2D
expr_stmt|;
name|Viewport
operator|=
name|qopenglfResolveViewport
expr_stmt|;
block|}
else|else
block|{
ifndef|#
directive|ifndef
name|QT_OPENGL_DYNAMIC
comment|// Use the functions directly. This requires linking QtGui to an OpenGL implementation.
name|BindTexture
operator|=
operator|::
name|glBindTexture
expr_stmt|;
name|BlendFunc
operator|=
operator|::
name|glBlendFunc
expr_stmt|;
name|Clear
operator|=
operator|::
name|glClear
expr_stmt|;
name|ClearColor
operator|=
operator|::
name|glClearColor
expr_stmt|;
name|ClearDepthf
operator|=
name|qopenglfTranslateClearDepthf
expr_stmt|;
name|ClearStencil
operator|=
operator|::
name|glClearStencil
expr_stmt|;
name|ColorMask
operator|=
operator|::
name|glColorMask
expr_stmt|;
name|CopyTexImage2D
operator|=
operator|::
name|glCopyTexImage2D
expr_stmt|;
name|CopyTexSubImage2D
operator|=
operator|::
name|glCopyTexSubImage2D
expr_stmt|;
name|CullFace
operator|=
operator|::
name|glCullFace
expr_stmt|;
name|DeleteTextures
operator|=
operator|::
name|glDeleteTextures
expr_stmt|;
name|DepthFunc
operator|=
operator|::
name|glDepthFunc
expr_stmt|;
name|DepthMask
operator|=
operator|::
name|glDepthMask
expr_stmt|;
name|DepthRangef
operator|=
name|qopenglfTranslateDepthRangef
expr_stmt|;
name|Disable
operator|=
operator|::
name|glDisable
expr_stmt|;
name|DrawArrays
operator|=
operator|::
name|glDrawArrays
expr_stmt|;
name|DrawElements
operator|=
operator|::
name|glDrawElements
expr_stmt|;
name|Enable
operator|=
operator|::
name|glEnable
expr_stmt|;
name|Finish
operator|=
operator|::
name|glFinish
expr_stmt|;
name|Flush
operator|=
operator|::
name|glFlush
expr_stmt|;
name|FrontFace
operator|=
operator|::
name|glFrontFace
expr_stmt|;
name|GenTextures
operator|=
operator|::
name|glGenTextures
expr_stmt|;
name|GetBooleanv
operator|=
operator|::
name|glGetBooleanv
expr_stmt|;
name|GetError
operator|=
operator|::
name|glGetError
expr_stmt|;
name|GetFloatv
operator|=
operator|::
name|glGetFloatv
expr_stmt|;
name|GetIntegerv
operator|=
operator|::
name|glGetIntegerv
expr_stmt|;
name|GetString
operator|=
operator|::
name|glGetString
expr_stmt|;
name|GetTexParameterfv
operator|=
operator|::
name|glGetTexParameterfv
expr_stmt|;
name|GetTexParameteriv
operator|=
operator|::
name|glGetTexParameteriv
expr_stmt|;
name|Hint
operator|=
operator|::
name|glHint
expr_stmt|;
name|IsEnabled
operator|=
operator|::
name|glIsEnabled
expr_stmt|;
name|IsTexture
operator|=
operator|::
name|glIsTexture
expr_stmt|;
name|LineWidth
operator|=
operator|::
name|glLineWidth
expr_stmt|;
name|PixelStorei
operator|=
operator|::
name|glPixelStorei
expr_stmt|;
name|PolygonOffset
operator|=
operator|::
name|glPolygonOffset
expr_stmt|;
name|ReadPixels
operator|=
operator|::
name|glReadPixels
expr_stmt|;
name|Scissor
operator|=
operator|::
name|glScissor
expr_stmt|;
name|StencilFunc
operator|=
operator|::
name|glStencilFunc
expr_stmt|;
name|StencilMask
operator|=
operator|::
name|glStencilMask
expr_stmt|;
name|StencilOp
operator|=
operator|::
name|glStencilOp
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_OSX
argument_list|)
operator|&&
name|MAC_OS_X_VERSION_MAX_ALLOWED
operator|<
name|MAC_OS_X_VERSION_10_7
name|TexImage2D
operator|=
expr|reinterpret_cast
operator|<
name|void
argument_list|(
operator|*
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
argument_list|,
name|GLint
argument_list|,
name|GLenum
argument_list|,
name|GLenum
argument_list|,
specifier|const
name|GLvoid
operator|*
argument_list|)
operator|>
operator|(
name|glTexImage2D
operator|)
expr_stmt|;
else|#
directive|else
name|TexImage2D
operator|=
name|glTexImage2D
expr_stmt|;
endif|#
directive|endif
name|TexParameterf
operator|=
operator|::
name|glTexParameterf
expr_stmt|;
name|TexParameterfv
operator|=
operator|::
name|glTexParameterfv
expr_stmt|;
name|TexParameteri
operator|=
operator|::
name|glTexParameteri
expr_stmt|;
name|TexParameteriv
operator|=
operator|::
name|glTexParameteriv
expr_stmt|;
name|TexSubImage2D
operator|=
operator|::
name|glTexSubImage2D
expr_stmt|;
name|Viewport
operator|=
operator|::
name|glViewport
expr_stmt|;
else|#
directive|else
comment|// QT_OPENGL_DYNAMIC
comment|// This should not happen.
name|qFatal
argument_list|(
literal|"QOpenGLFunctions: Dynamic OpenGL builds do not support platforms with insufficient function resolving capabilities"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|ActiveTexture
operator|=
name|qopenglfResolveActiveTexture
expr_stmt|;
name|AttachShader
operator|=
name|qopenglfResolveAttachShader
expr_stmt|;
name|BindAttribLocation
operator|=
name|qopenglfResolveBindAttribLocation
expr_stmt|;
name|BindBuffer
operator|=
name|qopenglfResolveBindBuffer
expr_stmt|;
name|BindFramebuffer
operator|=
name|qopenglfResolveBindFramebuffer
expr_stmt|;
name|BindRenderbuffer
operator|=
name|qopenglfResolveBindRenderbuffer
expr_stmt|;
name|BlendColor
operator|=
name|qopenglfResolveBlendColor
expr_stmt|;
name|BlendEquation
operator|=
name|qopenglfResolveBlendEquation
expr_stmt|;
name|BlendEquationSeparate
operator|=
name|qopenglfResolveBlendEquationSeparate
expr_stmt|;
name|BlendFuncSeparate
operator|=
name|qopenglfResolveBlendFuncSeparate
expr_stmt|;
name|BufferData
operator|=
name|qopenglfResolveBufferData
expr_stmt|;
name|BufferSubData
operator|=
name|qopenglfResolveBufferSubData
expr_stmt|;
name|CheckFramebufferStatus
operator|=
name|qopenglfResolveCheckFramebufferStatus
expr_stmt|;
name|CompileShader
operator|=
name|qopenglfResolveCompileShader
expr_stmt|;
name|CompressedTexImage2D
operator|=
name|qopenglfResolveCompressedTexImage2D
expr_stmt|;
name|CompressedTexSubImage2D
operator|=
name|qopenglfResolveCompressedTexSubImage2D
expr_stmt|;
name|CreateProgram
operator|=
name|qopenglfResolveCreateProgram
expr_stmt|;
name|CreateShader
operator|=
name|qopenglfResolveCreateShader
expr_stmt|;
name|DeleteBuffers
operator|=
name|qopenglfResolveDeleteBuffers
expr_stmt|;
name|DeleteFramebuffers
operator|=
name|qopenglfResolveDeleteFramebuffers
expr_stmt|;
name|DeleteProgram
operator|=
name|qopenglfResolveDeleteProgram
expr_stmt|;
name|DeleteRenderbuffers
operator|=
name|qopenglfResolveDeleteRenderbuffers
expr_stmt|;
name|DeleteShader
operator|=
name|qopenglfResolveDeleteShader
expr_stmt|;
name|DetachShader
operator|=
name|qopenglfResolveDetachShader
expr_stmt|;
name|DisableVertexAttribArray
operator|=
name|qopenglfResolveDisableVertexAttribArray
expr_stmt|;
name|EnableVertexAttribArray
operator|=
name|qopenglfResolveEnableVertexAttribArray
expr_stmt|;
name|FramebufferRenderbuffer
operator|=
name|qopenglfResolveFramebufferRenderbuffer
expr_stmt|;
name|FramebufferTexture2D
operator|=
name|qopenglfResolveFramebufferTexture2D
expr_stmt|;
name|GenBuffers
operator|=
name|qopenglfResolveGenBuffers
expr_stmt|;
name|GenerateMipmap
operator|=
name|qopenglfResolveGenerateMipmap
expr_stmt|;
name|GenFramebuffers
operator|=
name|qopenglfResolveGenFramebuffers
expr_stmt|;
name|GenRenderbuffers
operator|=
name|qopenglfResolveGenRenderbuffers
expr_stmt|;
name|GetActiveAttrib
operator|=
name|qopenglfResolveGetActiveAttrib
expr_stmt|;
name|GetActiveUniform
operator|=
name|qopenglfResolveGetActiveUniform
expr_stmt|;
name|GetAttachedShaders
operator|=
name|qopenglfResolveGetAttachedShaders
expr_stmt|;
name|GetAttribLocation
operator|=
name|qopenglfResolveGetAttribLocation
expr_stmt|;
name|GetBufferParameteriv
operator|=
name|qopenglfResolveGetBufferParameteriv
expr_stmt|;
name|GetFramebufferAttachmentParameteriv
operator|=
name|qopenglfResolveGetFramebufferAttachmentParameteriv
expr_stmt|;
name|GetProgramiv
operator|=
name|qopenglfResolveGetProgramiv
expr_stmt|;
name|GetProgramInfoLog
operator|=
name|qopenglfResolveGetProgramInfoLog
expr_stmt|;
name|GetRenderbufferParameteriv
operator|=
name|qopenglfResolveGetRenderbufferParameteriv
expr_stmt|;
name|GetShaderiv
operator|=
name|qopenglfResolveGetShaderiv
expr_stmt|;
name|GetShaderInfoLog
operator|=
name|qopenglfResolveGetShaderInfoLog
expr_stmt|;
name|GetShaderPrecisionFormat
operator|=
name|qopenglfResolveGetShaderPrecisionFormat
expr_stmt|;
name|GetShaderSource
operator|=
name|qopenglfResolveGetShaderSource
expr_stmt|;
name|GetUniformfv
operator|=
name|qopenglfResolveGetUniformfv
expr_stmt|;
name|GetUniformiv
operator|=
name|qopenglfResolveGetUniformiv
expr_stmt|;
name|GetUniformLocation
operator|=
name|qopenglfResolveGetUniformLocation
expr_stmt|;
name|GetVertexAttribfv
operator|=
name|qopenglfResolveGetVertexAttribfv
expr_stmt|;
name|GetVertexAttribiv
operator|=
name|qopenglfResolveGetVertexAttribiv
expr_stmt|;
name|GetVertexAttribPointerv
operator|=
name|qopenglfResolveGetVertexAttribPointerv
expr_stmt|;
name|IsBuffer
operator|=
name|qopenglfResolveIsBuffer
expr_stmt|;
name|IsFramebuffer
operator|=
name|qopenglfResolveIsFramebuffer
expr_stmt|;
name|IsProgram
operator|=
name|qopenglfResolveIsProgram
expr_stmt|;
name|IsRenderbuffer
operator|=
name|qopenglfResolveIsRenderbuffer
expr_stmt|;
name|IsShader
operator|=
name|qopenglfResolveIsShader
expr_stmt|;
name|LinkProgram
operator|=
name|qopenglfResolveLinkProgram
expr_stmt|;
name|ReleaseShaderCompiler
operator|=
name|qopenglfResolveReleaseShaderCompiler
expr_stmt|;
name|RenderbufferStorage
operator|=
name|qopenglfResolveRenderbufferStorage
expr_stmt|;
name|SampleCoverage
operator|=
name|qopenglfResolveSampleCoverage
expr_stmt|;
name|ShaderBinary
operator|=
name|qopenglfResolveShaderBinary
expr_stmt|;
name|ShaderSource
operator|=
name|qopenglfResolveShaderSource
expr_stmt|;
name|StencilFuncSeparate
operator|=
name|qopenglfResolveStencilFuncSeparate
expr_stmt|;
name|StencilMaskSeparate
operator|=
name|qopenglfResolveStencilMaskSeparate
expr_stmt|;
name|StencilOpSeparate
operator|=
name|qopenglfResolveStencilOpSeparate
expr_stmt|;
name|Uniform1f
operator|=
name|qopenglfResolveUniform1f
expr_stmt|;
name|Uniform1fv
operator|=
name|qopenglfResolveUniform1fv
expr_stmt|;
name|Uniform1i
operator|=
name|qopenglfResolveUniform1i
expr_stmt|;
name|Uniform1iv
operator|=
name|qopenglfResolveUniform1iv
expr_stmt|;
name|Uniform2f
operator|=
name|qopenglfResolveUniform2f
expr_stmt|;
name|Uniform2fv
operator|=
name|qopenglfResolveUniform2fv
expr_stmt|;
name|Uniform2i
operator|=
name|qopenglfResolveUniform2i
expr_stmt|;
name|Uniform2iv
operator|=
name|qopenglfResolveUniform2iv
expr_stmt|;
name|Uniform3f
operator|=
name|qopenglfResolveUniform3f
expr_stmt|;
name|Uniform3fv
operator|=
name|qopenglfResolveUniform3fv
expr_stmt|;
name|Uniform3i
operator|=
name|qopenglfResolveUniform3i
expr_stmt|;
name|Uniform3iv
operator|=
name|qopenglfResolveUniform3iv
expr_stmt|;
name|Uniform4f
operator|=
name|qopenglfResolveUniform4f
expr_stmt|;
name|Uniform4fv
operator|=
name|qopenglfResolveUniform4fv
expr_stmt|;
name|Uniform4i
operator|=
name|qopenglfResolveUniform4i
expr_stmt|;
name|Uniform4iv
operator|=
name|qopenglfResolveUniform4iv
expr_stmt|;
name|UniformMatrix2fv
operator|=
name|qopenglfResolveUniformMatrix2fv
expr_stmt|;
name|UniformMatrix3fv
operator|=
name|qopenglfResolveUniformMatrix3fv
expr_stmt|;
name|UniformMatrix4fv
operator|=
name|qopenglfResolveUniformMatrix4fv
expr_stmt|;
name|UseProgram
operator|=
name|qopenglfResolveUseProgram
expr_stmt|;
name|ValidateProgram
operator|=
name|qopenglfResolveValidateProgram
expr_stmt|;
name|VertexAttrib1f
operator|=
name|qopenglfResolveVertexAttrib1f
expr_stmt|;
name|VertexAttrib1fv
operator|=
name|qopenglfResolveVertexAttrib1fv
expr_stmt|;
name|VertexAttrib2f
operator|=
name|qopenglfResolveVertexAttrib2f
expr_stmt|;
name|VertexAttrib2fv
operator|=
name|qopenglfResolveVertexAttrib2fv
expr_stmt|;
name|VertexAttrib3f
operator|=
name|qopenglfResolveVertexAttrib3f
expr_stmt|;
name|VertexAttrib3fv
operator|=
name|qopenglfResolveVertexAttrib3fv
expr_stmt|;
name|VertexAttrib4f
operator|=
name|qopenglfResolveVertexAttrib4f
expr_stmt|;
name|VertexAttrib4fv
operator|=
name|qopenglfResolveVertexAttrib4fv
expr_stmt|;
name|VertexAttribPointer
operator|=
name|qopenglfResolveVertexAttribPointer
expr_stmt|;
endif|#
directive|endif
comment|// !QT_OPENGL_ES_2
block|}
end_constructor
begin_comment
comment|/*!     \class QOpenGLExtraFunctions     \brief The QOpenGLExtraFunctions class provides cross-platform access to the OpenGL ES 3.0 and 3.1 API.     \since 5.6     \ingroup painting-3D     \inmodule QtGui      This subclass of QOpenGLFunctions includes the OpenGL ES 3.0 and 3.1     functions. These will only work when an OpenGL ES 3.0 or 3.1 context, or an     OpenGL context of a version containing the functions in question either in     core or as extension, is in use. This allows developing GLES 3.0 and 3.1     applications in a cross-platform manner: development can happen on a desktop     platform with OpenGL 3.x or 4.x, deploying to a real GLES 3.1 device later     on will require no or minimal changes to the application.      \note This class is different from the versioned OpenGL wrappers, for     instance QOpenGLFunctions_3_2_Core. The versioned function wrappers target a     given version and profile of OpenGL. They are therefore not suitable for     cross-OpenGL-OpenGLES development.  */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glBeginQuery(GLenum target, GLuint id)      Convenience function that calls glBeginQuery(\a target, \a id).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glBeginQuery.xml}{glBeginQuery()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glBeginTransformFeedback(GLenum primitiveMode)      Convenience function that calls glBeginTransformFeedback(\a primitiveMode).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glBeginTransformFeedback.xml}{glBeginTransformFeedback()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glBindBufferBase(GLenum target, GLuint index, GLuint buffer)      Convenience function that calls glBindBufferBase(\a target, \a index, \a buffer).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glBindBufferBase.xml}{glBindBufferBase()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)      Convenience function that calls glBindBufferRange(\a target, \a index, \a buffer, \a offset, \a size).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glBindBufferRange.xml}{glBindBufferRange()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glBindSampler(GLuint unit, GLuint sampler)      Convenience function that calls glBindSampler(\a unit, \a sampler).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glBindSampler.xml}{glBindSampler()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glBindTransformFeedback(GLenum target, GLuint id)      Convenience function that calls glBindTransformFeedback(\a target, \a id).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glBindTransformFeedback.xml}{glBindTransformFeedback()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glBindVertexArray(GLuint array)      Convenience function that calls glBindVertexArray(\a array).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glBindVertexArray.xml}{glBindVertexArray()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)      Convenience function that calls glBlitFramebuffer(\a srcX0, \a srcY0, \a srcX1, \a srcY1, \a dstX0, \a dstY0, \a dstX1, \a dstY1, \a mask, \a filter).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glBlitFramebuffer.xml}{glBlitFramebuffer()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)      Convenience function that calls glClearBufferfi(\a buffer, \a drawbuffer, \a depth, \a stencil).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glClearBufferfi.xml}{glClearBufferfi()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat * value)      Convenience function that calls glClearBufferfv(\a buffer, \a drawbuffer, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glClearBufferfv.xml}{glClearBufferfv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint * value)      Convenience function that calls glClearBufferiv(\a buffer, \a drawbuffer, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glClearBufferiv.xml}{glClearBufferiv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint * value)      Convenience function that calls glClearBufferuiv(\a buffer, \a drawbuffer, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glClearBufferuiv.xml}{glClearBufferuiv()}. */
end_comment
begin_comment
comment|/*!     \fn GLenum QOpenGLExtraFunctions::glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)      Convenience function that calls glClientWaitSync(\a sync, \a flags, \a timeout).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glClientWaitSync.xml}{glClientWaitSync()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data)      Convenience function that calls glCompressedTexImage3D(\a target, \a level, \a internalformat, \a width, \a height, \a depth, \a border, \a imageSize, \a data).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glCompressedTexImage3D.xml}{glCompressedTexImage3D()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data)      Convenience function that calls glCompressedTexSubImage3D(\a target, \a level, \a xoffset, \a yoffset, \a zoffset, \a width, \a height, \a depth, \a format, \a imageSize, \a data).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glCompressedTexSubImage3D.xml}{glCompressedTexSubImage3D()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)      Convenience function that calls glCopyBufferSubData(\a readTarget, \a writeTarget, \a readOffset, \a writeOffset, \a size).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glCopyBufferSubData.xml}{glCopyBufferSubData()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)      Convenience function that calls glCopyTexSubImage3D(\a target, \a level, \a xoffset, \a yoffset, \a zoffset, \a x, \a y, \a width, \a height).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glCopyTexSubImage3D.xml}{glCopyTexSubImage3D()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glDeleteQueries(GLsizei n, const GLuint * ids)      Convenience function that calls glDeleteQueries(\a n, \a ids).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glDeleteQueries.xml}{glDeleteQueries()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glDeleteSamplers(GLsizei count, const GLuint * samplers)      Convenience function that calls glDeleteSamplers(\a count, \a samplers).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glDeleteSamplers.xml}{glDeleteSamplers()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glDeleteSync(GLsync sync)      Convenience function that calls glDeleteSync(\a sync).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glDeleteSync.xml}{glDeleteSync()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glDeleteTransformFeedbacks(GLsizei n, const GLuint * ids)      Convenience function that calls glDeleteTransformFeedbacks(\a n, \a ids).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glDeleteTransformFeedbacks.xml}{glDeleteTransformFeedbacks()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glDeleteVertexArrays(GLsizei n, const GLuint * arrays)      Convenience function that calls glDeleteVertexArrays(\a n, \a arrays).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glDeleteVertexArrays.xml}{glDeleteVertexArrays()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount)      Convenience function that calls glDrawArraysInstanced(\a mode, \a first, \a count, \a instancecount).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glDrawArraysInstanced.xml}{glDrawArraysInstanced()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glDrawBuffers(GLsizei n, const GLenum * bufs)      Convenience function that calls glDrawBuffers(\a n, \a bufs).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glDrawBuffers.xml}{glDrawBuffers()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount)      Convenience function that calls glDrawElementsInstanced(\a mode, \a count, \a type, \a indices, \a instancecount).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glDrawElementsInstanced.xml}{glDrawElementsInstanced()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices)      Convenience function that calls glDrawRangeElements(\a mode, \a start, \a end, \a count, \a type, \a indices).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glDrawRangeElements.xml}{glDrawRangeElements()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glEndQuery(GLenum target)      Convenience function that calls glEndQuery(\a target).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glEndQuery.xml}{glEndQuery()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glEndTransformFeedback(void)      Convenience function that calls glEndTransformFeedback().      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glEndTransformFeedback.xml}{glEndTransformFeedback()}. */
end_comment
begin_comment
comment|/*!     \fn GLsync QOpenGLExtraFunctions::glFenceSync(GLenum condition, GLbitfield flags)      Convenience function that calls glFenceSync(\a condition, \a flags).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glFenceSync.xml}{glFenceSync()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)      Convenience function that calls glFlushMappedBufferRange(\a target, \a offset, \a length).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glFlushMappedBufferRange.xml}{glFlushMappedBufferRange()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)      Convenience function that calls glFramebufferTextureLayer(\a target, \a attachment, \a texture, \a level, \a layer).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glFramebufferTextureLayer.xml}{glFramebufferTextureLayer()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGenQueries(GLsizei n, GLuint* ids)      Convenience function that calls glGenQueries(\a n, \a ids).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGenQueries.xml}{glGenQueries()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGenSamplers(GLsizei count, GLuint* samplers)      Convenience function that calls glGenSamplers(\a count, \a samplers).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGenSamplers.xml}{glGenSamplers()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGenTransformFeedbacks(GLsizei n, GLuint* ids)      Convenience function that calls glGenTransformFeedbacks(\a n, \a ids).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGenTransformFeedbacks.xml}{glGenTransformFeedbacks()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGenVertexArrays(GLsizei n, GLuint* arrays)      Convenience function that calls glGenVertexArrays(\a n, \a arrays).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGenVertexArrays.xml}{glGenVertexArrays()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName)      Convenience function that calls glGetActiveUniformBlockName(\a program, \a uniformBlockIndex, \a bufSize, \a length, \a uniformBlockName).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetActiveUniformBlockName.xml}{glGetActiveUniformBlockName()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params)      Convenience function that calls glGetActiveUniformBlockiv(\a program, \a uniformBlockIndex, \a pname, \a params).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetActiveUniformBlockiv.xml}{glGetActiveUniformBlockiv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint* params)      Convenience function that calls glGetActiveUniformsiv(\a program, \a uniformCount, \a uniformIndices, \a pname, \a params).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetActiveUniformsiv.xml}{glGetActiveUniformsiv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64* params)      Convenience function that calls glGetBufferParameteri64v(\a target, \a pname, \a params).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetBufferParameteri64v.xml}{glGetBufferParameteri64v()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetBufferPointerv(GLenum target, GLenum pname, void ** params)      Convenience function that calls glGetBufferPointerv(\a target, \a pname, \a params).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetBufferPointerv.xml}{glGetBufferPointerv()}. */
end_comment
begin_comment
comment|/*!     \fn GLint QOpenGLExtraFunctions::glGetFragDataLocation(GLuint program, const GLchar * name)      Convenience function that calls glGetFragDataLocation(\a program, \a name).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetFragDataLocation.xml}{glGetFragDataLocation()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetInteger64i_v(GLenum target, GLuint index, GLint64* data)      Convenience function that calls glGetInteger64i_v(\a target, \a index, \a data).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetInteger64i_v.xml}{glGetInteger64i_v()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetInteger64v(GLenum pname, GLint64* data)      Convenience function that calls glGetInteger64v(\a pname, \a data).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetInteger64v.xml}{glGetInteger64v()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetIntegeri_v(GLenum target, GLuint index, GLint* data)      Convenience function that calls glGetIntegeri_v(\a target, \a index, \a data).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetIntegeri_v.xml}{glGetIntegeri_v()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint* params)      Convenience function that calls glGetInternalformativ(\a target, \a internalformat, \a pname, \a bufSize, \a params).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetInternalformativ.xml}{glGetInternalformativ()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, void * binary)      Convenience function that calls glGetProgramBinary(\a program, \a bufSize, \a length, \a binaryFormat, \a binary).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetProgramBinary.xml}{glGetProgramBinary()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint* params)      Convenience function that calls glGetQueryObjectuiv(\a id, \a pname, \a params).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetQueryObjectuiv.xml}{glGetQueryObjectuiv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetQueryiv(GLenum target, GLenum pname, GLint* params)      Convenience function that calls glGetQueryiv(\a target, \a pname, \a params).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetQueryiv.xml}{glGetQueryiv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat* params)      Convenience function that calls glGetSamplerParameterfv(\a sampler, \a pname, \a params).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetSamplerParameterfv.xml}{glGetSamplerParameterfv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint* params)      Convenience function that calls glGetSamplerParameteriv(\a sampler, \a pname, \a params).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetSamplerParameteriv.xml}{glGetSamplerParameteriv()}. */
end_comment
begin_comment
comment|/*!     \fn const GLubyte * QOpenGLExtraFunctions::glGetStringi(GLenum name, GLuint index)      Convenience function that calls glGetStringi(\a name, \a index).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetStringi.xml}{glGetStringi()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values)      Convenience function that calls glGetSynciv(\a sync, \a pname, \a bufSize, \a length, \a values).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetSynciv.xml}{glGetSynciv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name)      Convenience function that calls glGetTransformFeedbackVarying(\a program, \a index, \a bufSize, \a length, \a size, \a type, \a name).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetTransformFeedbackVarying.xml}{glGetTransformFeedbackVarying()}. */
end_comment
begin_comment
comment|/*!     \fn GLuint QOpenGLExtraFunctions::glGetUniformBlockIndex(GLuint program, const GLchar * uniformBlockName)      Convenience function that calls glGetUniformBlockIndex(\a program, \a uniformBlockName).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetUniformBlockIndex.xml}{glGetUniformBlockIndex()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint* uniformIndices)      Convenience function that calls glGetUniformIndices(\a program, \a uniformCount, \a uniformNames, \a uniformIndices).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetUniformIndices.xml}{glGetUniformIndices()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetUniformuiv(GLuint program, GLint location, GLuint* params)      Convenience function that calls glGetUniformuiv(\a program, \a location, \a params).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetUniformuiv.xml}{glGetUniformuiv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetVertexAttribIiv(GLuint index, GLenum pname, GLint* params)      Convenience function that calls glGetVertexAttribIiv(\a index, \a pname, \a params).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetVertexAttribIiv.xml}{glGetVertexAttribIiv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint* params)      Convenience function that calls glGetVertexAttribIuiv(\a index, \a pname, \a params).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetVertexAttribIuiv.xml}{glGetVertexAttribIuiv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments)      Convenience function that calls glInvalidateFramebuffer(\a target, \a numAttachments, \a attachments).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glInvalidateFramebuffer.xml}{glInvalidateFramebuffer()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height)      Convenience function that calls glInvalidateSubFramebuffer(\a target, \a numAttachments, \a attachments, \a x, \a y, \a width, \a height).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glInvalidateSubFramebuffer.xml}{glInvalidateSubFramebuffer()}. */
end_comment
begin_comment
comment|/*!     \fn GLboolean QOpenGLExtraFunctions::glIsQuery(GLuint id)      Convenience function that calls glIsQuery(\a id).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glIsQuery.xml}{glIsQuery()}. */
end_comment
begin_comment
comment|/*!     \fn GLboolean QOpenGLExtraFunctions::glIsSampler(GLuint sampler)      Convenience function that calls glIsSampler(\a sampler).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glIsSampler.xml}{glIsSampler()}. */
end_comment
begin_comment
comment|/*!     \fn GLboolean QOpenGLExtraFunctions::glIsSync(GLsync sync)      Convenience function that calls glIsSync(\a sync).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glIsSync.xml}{glIsSync()}. */
end_comment
begin_comment
comment|/*!     \fn GLboolean QOpenGLExtraFunctions::glIsTransformFeedback(GLuint id)      Convenience function that calls glIsTransformFeedback(\a id).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glIsTransformFeedback.xml}{glIsTransformFeedback()}. */
end_comment
begin_comment
comment|/*!     \fn GLboolean QOpenGLExtraFunctions::glIsVertexArray(GLuint array)      Convenience function that calls glIsVertexArray(\a array).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glIsVertexArray.xml}{glIsVertexArray()}. */
end_comment
begin_comment
comment|/*!     \fn void * QOpenGLExtraFunctions::glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)      Convenience function that calls glMapBufferRange(\a target, \a offset, \a length, \a access).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glMapBufferRange.xml}{glMapBufferRange()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glPauseTransformFeedback(void)      Convenience function that calls glPauseTransformFeedback().      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glPauseTransformFeedback.xml}{glPauseTransformFeedback()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramBinary(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length)      Convenience function that calls glProgramBinary(\a program, \a binaryFormat, \a binary, \a length).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramBinary.xml}{glProgramBinary()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramParameteri(GLuint program, GLenum pname, GLint value)      Convenience function that calls glProgramParameteri(\a program, \a pname, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramParameteri.xml}{glProgramParameteri()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glReadBuffer(GLenum src)      Convenience function that calls glReadBuffer(\a src).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glReadBuffer.xml}{glReadBuffer()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)      Convenience function that calls glRenderbufferStorageMultisample(\a target, \a samples, \a internalformat, \a width, \a height).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glRenderbufferStorageMultisample.xml}{glRenderbufferStorageMultisample()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glResumeTransformFeedback(void)      Convenience function that calls glResumeTransformFeedback().      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glResumeTransformFeedback.xml}{glResumeTransformFeedback()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)      Convenience function that calls glSamplerParameterf(\a sampler, \a pname, \a param).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glSamplerParameterf.xml}{glSamplerParameterf()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat * param)      Convenience function that calls glSamplerParameterfv(\a sampler, \a pname, \a param).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glSamplerParameterfv.xml}{glSamplerParameterfv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glSamplerParameteri(GLuint sampler, GLenum pname, GLint param)      Convenience function that calls glSamplerParameteri(\a sampler, \a pname, \a param).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glSamplerParameteri.xml}{glSamplerParameteri()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint * param)      Convenience function that calls glSamplerParameteriv(\a sampler, \a pname, \a param).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glSamplerParameteriv.xml}{glSamplerParameteriv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels)      Convenience function that calls glTexImage3D(\a target, \a level, \a internalformat, \a width, \a height, \a depth, \a border, \a format, \a type, \a pixels).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glTexImage3D.xml}{glTexImage3D()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)      Convenience function that calls glTexStorage2D(\a target, \a levels, \a internalformat, \a width, \a height).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glTexStorage2D.xml}{glTexStorage2D()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)      Convenience function that calls glTexStorage3D(\a target, \a levels, \a internalformat, \a width, \a height, \a depth).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glTexStorage3D.xml}{glTexStorage3D()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels)      Convenience function that calls glTexSubImage3D(\a target, \a level, \a xoffset, \a yoffset, \a zoffset, \a width, \a height, \a depth, \a format, \a type, \a pixels).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glTexSubImage3D.xml}{glTexSubImage3D()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode)      Convenience function that calls glTransformFeedbackVaryings(\a program, \a count, \a varyings, \a bufferMode).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glTransformFeedbackVaryings.xml}{glTransformFeedbackVaryings()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glUniform1ui(GLint location, GLuint v0)      Convenience function that calls glUniform1ui(\a location, \a v0).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glUniform1ui.xml}{glUniform1ui()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glUniform1uiv(GLint location, GLsizei count, const GLuint * value)      Convenience function that calls glUniform1uiv(\a location, \a count, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glUniform1uiv.xml}{glUniform1uiv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glUniform2ui(GLint location, GLuint v0, GLuint v1)      Convenience function that calls glUniform2ui(\a location, \a v0, \a v1).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glUniform2ui.xml}{glUniform2ui()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glUniform2uiv(GLint location, GLsizei count, const GLuint * value)      Convenience function that calls glUniform2uiv(\a location, \a count, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glUniform2uiv.xml}{glUniform2uiv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)      Convenience function that calls glUniform3ui(\a location, \a v0, \a v1, \a v2).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glUniform3ui.xml}{glUniform3ui()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glUniform3uiv(GLint location, GLsizei count, const GLuint * value)      Convenience function that calls glUniform3uiv(\a location, \a count, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glUniform3uiv.xml}{glUniform3uiv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)      Convenience function that calls glUniform4ui(\a location, \a v0, \a v1, \a v2, \a v3).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glUniform4ui.xml}{glUniform4ui()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glUniform4uiv(GLint location, GLsizei count, const GLuint * value)      Convenience function that calls glUniform4uiv(\a location, \a count, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glUniform4uiv.xml}{glUniform4uiv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)      Convenience function that calls glUniformBlockBinding(\a program, \a uniformBlockIndex, \a uniformBlockBinding).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glUniformBlockBinding.xml}{glUniformBlockBinding()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)      Convenience function that calls glUniformMatrix2x3fv(\a location, \a count, \a transpose, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glUniformMatrix2x3fv.xml}{glUniformMatrix2x3fv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)      Convenience function that calls glUniformMatrix2x4fv(\a location, \a count, \a transpose, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glUniformMatrix2x4fv.xml}{glUniformMatrix2x4fv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)      Convenience function that calls glUniformMatrix3x2fv(\a location, \a count, \a transpose, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glUniformMatrix3x2fv.xml}{glUniformMatrix3x2fv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)      Convenience function that calls glUniformMatrix3x4fv(\a location, \a count, \a transpose, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glUniformMatrix3x4fv.xml}{glUniformMatrix3x4fv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)      Convenience function that calls glUniformMatrix4x2fv(\a location, \a count, \a transpose, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glUniformMatrix4x2fv.xml}{glUniformMatrix4x2fv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)      Convenience function that calls glUniformMatrix4x3fv(\a location, \a count, \a transpose, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glUniformMatrix4x3fv.xml}{glUniformMatrix4x3fv()}. */
end_comment
begin_comment
comment|/*!     \fn GLboolean QOpenGLExtraFunctions::glUnmapBuffer(GLenum target)      Convenience function that calls glUnmapBuffer(\a target).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glUnmapBuffer.xml}{glUnmapBuffer()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glVertexAttribDivisor(GLuint index, GLuint divisor)      Convenience function that calls glVertexAttribDivisor(\a index, \a divisor).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glVertexAttribDivisor.xml}{glVertexAttribDivisor()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w)      Convenience function that calls glVertexAttribI4i(\a index, \a x, \a y, \a z, \a w).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glVertexAttribI4i.xml}{glVertexAttribI4i()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glVertexAttribI4iv(GLuint index, const GLint * v)      Convenience function that calls glVertexAttribI4iv(\a index, \a v).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glVertexAttribI4iv.xml}{glVertexAttribI4iv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)      Convenience function that calls glVertexAttribI4ui(\a index, \a x, \a y, \a z, \a w).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glVertexAttribI4ui.xml}{glVertexAttribI4ui()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glVertexAttribI4uiv(GLuint index, const GLuint * v)      Convenience function that calls glVertexAttribI4uiv(\a index, \a v).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glVertexAttribI4uiv.xml}{glVertexAttribI4uiv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer)      Convenience function that calls glVertexAttribIPointer(\a index, \a size, \a type, \a stride, \a pointer).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glVertexAttribIPointer.xml}{glVertexAttribIPointer()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)      Convenience function that calls glWaitSync(\a sync, \a flags, \a timeout).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glWaitSync.xml}{glWaitSync()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glActiveShaderProgram(GLuint pipeline, GLuint program)      Convenience function that calls glActiveShaderProgram(\a pipeline, \a program).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glActiveShaderProgram.xml}{glActiveShaderProgram()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)      Convenience function that calls glBindImageTexture(\a unit, \a texture, \a level, \a layered, \a layer, \a access, \a format).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glBindImageTexture.xml}{glBindImageTexture()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glBindProgramPipeline(GLuint pipeline)      Convenience function that calls glBindProgramPipeline(\a pipeline).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glBindProgramPipeline.xml}{glBindProgramPipeline()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)      Convenience function that calls glBindVertexBuffer(\a bindingindex, \a buffer, \a offset, \a stride).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glBindVertexBuffer.xml}{glBindVertexBuffer()}. */
end_comment
begin_comment
comment|/*!     \fn GLuint QOpenGLExtraFunctions::glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const* strings)      Convenience function that calls glCreateShaderProgramv(\a type, \a count, \a strings).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glCreateShaderProgramv.xml}{glCreateShaderProgramv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glDeleteProgramPipelines(GLsizei n, const GLuint * pipelines)      Convenience function that calls glDeleteProgramPipelines(\a n, \a pipelines).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glDeleteProgramPipelines.xml}{glDeleteProgramPipelines()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)      Convenience function that calls glDispatchCompute(\a num_groups_x, \a num_groups_y, \a num_groups_z).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glDispatchCompute.xml}{glDispatchCompute()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glDispatchComputeIndirect(GLintptr indirect)      Convenience function that calls glDispatchComputeIndirect(\a indirect).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glDispatchComputeIndirect.xml}{glDispatchComputeIndirect()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glDrawArraysIndirect(GLenum mode, const void * indirect)      Convenience function that calls glDrawArraysIndirect(\a mode, \a indirect).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glDrawArraysIndirect.xml}{glDrawArraysIndirect()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect)      Convenience function that calls glDrawElementsIndirect(\a mode, \a type, \a indirect).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glDrawElementsIndirect.xml}{glDrawElementsIndirect()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glFramebufferParameteri(GLenum target, GLenum pname, GLint param)      Convenience function that calls glFramebufferParameteri(\a target, \a pname, \a param).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glFramebufferParameteri.xml}{glFramebufferParameteri()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGenProgramPipelines(GLsizei n, GLuint* pipelines)      Convenience function that calls glGenProgramPipelines(\a n, \a pipelines).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGenProgramPipelines.xml}{glGenProgramPipelines()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetBooleani_v(GLenum target, GLuint index, GLboolean* data)      Convenience function that calls glGetBooleani_v(\a target, \a index, \a data).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetBooleani_v.xml}{glGetBooleani_v()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint* params)      Convenience function that calls glGetFramebufferParameteriv(\a target, \a pname, \a params).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetFramebufferParameteriv.xml}{glGetFramebufferParameteriv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetMultisamplefv(GLenum pname, GLuint index, GLfloat* val)      Convenience function that calls glGetMultisamplefv(\a pname, \a index, \a val).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetMultisamplefv.xml}{glGetMultisamplefv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint* params)      Convenience function that calls glGetProgramInterfaceiv(\a program, \a programInterface, \a pname, \a params).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetProgramInterfaceiv.xml}{glGetProgramInterfaceiv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar* infoLog)      Convenience function that calls glGetProgramPipelineInfoLog(\a pipeline, \a bufSize, \a length, \a infoLog).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetProgramPipelineInfoLog.xml}{glGetProgramPipelineInfoLog()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint* params)      Convenience function that calls glGetProgramPipelineiv(\a pipeline, \a pname, \a params).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetProgramPipelineiv.xml}{glGetProgramPipelineiv()}. */
end_comment
begin_comment
comment|/*!     \fn GLuint QOpenGLExtraFunctions::glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar * name)      Convenience function that calls glGetProgramResourceIndex(\a program, \a programInterface, \a name).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetProgramResourceIndex.xml}{glGetProgramResourceIndex()}. */
end_comment
begin_comment
comment|/*!     \fn GLint QOpenGLExtraFunctions::glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar * name)      Convenience function that calls glGetProgramResourceLocation(\a program, \a programInterface, \a name).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetProgramResourceLocation.xml}{glGetProgramResourceLocation()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name)      Convenience function that calls glGetProgramResourceName(\a program, \a programInterface, \a index, \a bufSize, \a length, \a name).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetProgramResourceName.xml}{glGetProgramResourceName()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei* length, GLint* params)      Convenience function that calls glGetProgramResourceiv(\a program, \a programInterface, \a index, \a propCount, \a props, \a bufSize, \a length, \a params).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetProgramResourceiv.xml}{glGetProgramResourceiv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat* params)      Convenience function that calls glGetTexLevelParameterfv(\a target, \a level, \a pname, \a params).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetTexLevelParameterfv.xml}{glGetTexLevelParameterfv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint* params)      Convenience function that calls glGetTexLevelParameteriv(\a target, \a level, \a pname, \a params).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glGetTexLevelParameteriv.xml}{glGetTexLevelParameteriv()}. */
end_comment
begin_comment
comment|/*!     \fn GLboolean QOpenGLExtraFunctions::glIsProgramPipeline(GLuint pipeline)      Convenience function that calls glIsProgramPipeline(\a pipeline).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glIsProgramPipeline.xml}{glIsProgramPipeline()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glMemoryBarrier(GLbitfield barriers)      Convenience function that calls glMemoryBarrier(\a barriers).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glMemoryBarrier.xml}{glMemoryBarrier()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glMemoryBarrierByRegion(GLbitfield barriers)      Convenience function that calls glMemoryBarrierByRegion(\a barriers).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glMemoryBarrierByRegion.xml}{glMemoryBarrierByRegion()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform1f(GLuint program, GLint location, GLfloat v0)      Convenience function that calls glProgramUniform1f(\a program, \a location, \a v0).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform1f.xml}{glProgramUniform1f()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat * value)      Convenience function that calls glProgramUniform1fv(\a program, \a location, \a count, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform1fv.xml}{glProgramUniform1fv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform1i(GLuint program, GLint location, GLint v0)      Convenience function that calls glProgramUniform1i(\a program, \a location, \a v0).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform1i.xml}{glProgramUniform1i()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint * value)      Convenience function that calls glProgramUniform1iv(\a program, \a location, \a count, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform1iv.xml}{glProgramUniform1iv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform1ui(GLuint program, GLint location, GLuint v0)      Convenience function that calls glProgramUniform1ui(\a program, \a location, \a v0).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform1ui.xml}{glProgramUniform1ui()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint * value)      Convenience function that calls glProgramUniform1uiv(\a program, \a location, \a count, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform1uiv.xml}{glProgramUniform1uiv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1)      Convenience function that calls glProgramUniform2f(\a program, \a location, \a v0, \a v1).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform2f.xml}{glProgramUniform2f()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat * value)      Convenience function that calls glProgramUniform2fv(\a program, \a location, \a count, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform2fv.xml}{glProgramUniform2fv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1)      Convenience function that calls glProgramUniform2i(\a program, \a location, \a v0, \a v1).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform2i.xml}{glProgramUniform2i()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint * value)      Convenience function that calls glProgramUniform2iv(\a program, \a location, \a count, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform2iv.xml}{glProgramUniform2iv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1)      Convenience function that calls glProgramUniform2ui(\a program, \a location, \a v0, \a v1).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform2ui.xml}{glProgramUniform2ui()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint * value)      Convenience function that calls glProgramUniform2uiv(\a program, \a location, \a count, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform2uiv.xml}{glProgramUniform2uiv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)      Convenience function that calls glProgramUniform3f(\a program, \a location, \a v0, \a v1, \a v2).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform3f.xml}{glProgramUniform3f()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat * value)      Convenience function that calls glProgramUniform3fv(\a program, \a location, \a count, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform3fv.xml}{glProgramUniform3fv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)      Convenience function that calls glProgramUniform3i(\a program, \a location, \a v0, \a v1, \a v2).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform3i.xml}{glProgramUniform3i()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint * value)      Convenience function that calls glProgramUniform3iv(\a program, \a location, \a count, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform3iv.xml}{glProgramUniform3iv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)      Convenience function that calls glProgramUniform3ui(\a program, \a location, \a v0, \a v1, \a v2).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform3ui.xml}{glProgramUniform3ui()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint * value)      Convenience function that calls glProgramUniform3uiv(\a program, \a location, \a count, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform3uiv.xml}{glProgramUniform3uiv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)      Convenience function that calls glProgramUniform4f(\a program, \a location, \a v0, \a v1, \a v2, \a v3).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform4f.xml}{glProgramUniform4f()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat * value)      Convenience function that calls glProgramUniform4fv(\a program, \a location, \a count, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform4fv.xml}{glProgramUniform4fv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)      Convenience function that calls glProgramUniform4i(\a program, \a location, \a v0, \a v1, \a v2, \a v3).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform4i.xml}{glProgramUniform4i()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint * value)      Convenience function that calls glProgramUniform4iv(\a program, \a location, \a count, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform4iv.xml}{glProgramUniform4iv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)      Convenience function that calls glProgramUniform4ui(\a program, \a location, \a v0, \a v1, \a v2, \a v3).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform4ui.xml}{glProgramUniform4ui()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint * value)      Convenience function that calls glProgramUniform4uiv(\a program, \a location, \a count, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniform4uiv.xml}{glProgramUniform4uiv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)      Convenience function that calls glProgramUniformMatrix2fv(\a program, \a location, \a count, \a transpose, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniformMatrix2fv.xml}{glProgramUniformMatrix2fv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)      Convenience function that calls glProgramUniformMatrix2x3fv(\a program, \a location, \a count, \a transpose, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniformMatrix2x3fv.xml}{glProgramUniformMatrix2x3fv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)      Convenience function that calls glProgramUniformMatrix2x4fv(\a program, \a location, \a count, \a transpose, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniformMatrix2x4fv.xml}{glProgramUniformMatrix2x4fv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)      Convenience function that calls glProgramUniformMatrix3fv(\a program, \a location, \a count, \a transpose, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniformMatrix3fv.xml}{glProgramUniformMatrix3fv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)      Convenience function that calls glProgramUniformMatrix3x2fv(\a program, \a location, \a count, \a transpose, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniformMatrix3x2fv.xml}{glProgramUniformMatrix3x2fv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)      Convenience function that calls glProgramUniformMatrix3x4fv(\a program, \a location, \a count, \a transpose, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniformMatrix3x4fv.xml}{glProgramUniformMatrix3x4fv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)      Convenience function that calls glProgramUniformMatrix4fv(\a program, \a location, \a count, \a transpose, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniformMatrix4fv.xml}{glProgramUniformMatrix4fv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)      Convenience function that calls glProgramUniformMatrix4x2fv(\a program, \a location, \a count, \a transpose, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniformMatrix4x2fv.xml}{glProgramUniformMatrix4x2fv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)      Convenience function that calls glProgramUniformMatrix4x3fv(\a program, \a location, \a count, \a transpose, \a value).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glProgramUniformMatrix4x3fv.xml}{glProgramUniformMatrix4x3fv()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glSampleMaski(GLuint maskNumber, GLbitfield mask)      Convenience function that calls glSampleMaski(\a maskNumber, \a mask).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glSampleMaski.xml}{glSampleMaski()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)      Convenience function that calls glTexStorage2DMultisample(\a target, \a samples, \a internalformat, \a width, \a height, \a fixedsamplelocations).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glTexStorage2DMultisample.xml}{glTexStorage2DMultisample()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)      Convenience function that calls glUseProgramStages(\a pipeline, \a stages, \a program).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glUseProgramStages.xml}{glUseProgramStages()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glValidateProgramPipeline(GLuint pipeline)      Convenience function that calls glValidateProgramPipeline(\a pipeline).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glValidateProgramPipeline.xml}{glValidateProgramPipeline()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glVertexAttribBinding(GLuint attribindex, GLuint bindingindex)      Convenience function that calls glVertexAttribBinding(\a attribindex, \a bindingindex).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glVertexAttribBinding.xml}{glVertexAttribBinding()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)      Convenience function that calls glVertexAttribFormat(\a attribindex, \a size, \a type, \a normalized, \a relativeoffset).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glVertexAttribFormat.xml}{glVertexAttribFormat()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)      Convenience function that calls glVertexAttribIFormat(\a attribindex, \a size, \a type, \a relativeoffset).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glVertexAttribIFormat.xml}{glVertexAttribIFormat()}. */
end_comment
begin_comment
comment|/*!     \fn void QOpenGLExtraFunctions::glVertexBindingDivisor(GLuint bindingindex, GLuint divisor)      Convenience function that calls glVertexBindingDivisor(\a bindingindex, \a divisor).      This function is only available in OpenGL ES 3.x, or OpenGL 3.x or 4.x contexts. When running     with plain OpenGL, the function is only usable when the given profile and version contains the     function either in core or as an extension.      For more information, see the OpenGL ES 3.x documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man31/glVertexBindingDivisor.xml}{glVertexBindingDivisor()}. */
end_comment
begin_comment
comment|/*!     \fn bool QOpenGLExtraFunctions::isInitialized(const QOpenGLExtraFunctionsPrivate *d)     \internal */
end_comment
begin_comment
comment|// Functions part of the OpenGL ES 3.0+ standard need special handling. These, just like
end_comment
begin_comment
comment|// the 2.0 functions, are not guaranteed to be resolvable via eglGetProcAddress or
end_comment
begin_comment
comment|// similar. (we cannot count on EGL_KHR_(client_)get_all_proc_addresses being available)
end_comment
begin_comment
comment|// Calling them directly is, unlike the 2.0 functions, not feasible because one may build
end_comment
begin_comment
comment|// the binaries on a GLES3-capable system and then deploy on a GLES2-only system that does
end_comment
begin_comment
comment|// not have these symbols, and vice versa. Until ES3 becomes universally available, they
end_comment
begin_comment
comment|// have to be dlsym'ed.
end_comment
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QOpenGLES3Helper
argument_list|,
argument|qgles3Helper
argument_list|)
end_macro
begin_function
DECL|function|init
name|bool
name|QOpenGLES3Helper
operator|::
name|init
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_NO_LIBRARY
return|return
literal|false
return|;
elif|#
directive|elif
operator|!
name|defined
argument_list|(
name|Q_OS_IOS
argument_list|)
ifdef|#
directive|ifdef
name|Q_OS_WIN
ifndef|#
directive|ifndef
name|QT_DEBUG
name|m_gl
operator|.
name|setFileName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"libGLESv2"
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|m_gl
operator|.
name|setFileName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"libGLESv2d"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
else|#
directive|else
ifdef|#
directive|ifdef
name|Q_OS_ANDROID
name|m_gl
operator|.
name|setFileName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"GLESv2"
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|m_gl
operator|.
name|setFileNameAndVersion
argument_list|(
name|QStringLiteral
argument_list|(
literal|"GLESv2"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
comment|// Q_OS_WIN
return|return
name|m_gl
operator|.
name|load
argument_list|()
return|;
else|#
directive|else
return|return
literal|true
return|;
endif|#
directive|endif
comment|// Q_OS_IOS
block|}
end_function
begin_function
DECL|function|resolve
name|QFunctionPointer
name|QOpenGLES3Helper
operator|::
name|resolve
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_IOS
return|return
name|QFunctionPointer
argument_list|(
name|dlsym
argument_list|(
name|RTLD_DEFAULT
argument_list|,
name|name
argument_list|)
argument_list|)
return|;
elif|#
directive|elif
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
return|return
name|m_gl
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
endif|#
directive|endif
block|}
end_function
begin_constructor
DECL|function|QOpenGLES3Helper
name|QOpenGLES3Helper
operator|::
name|QOpenGLES3Helper
parameter_list|()
block|{
name|m_supportedVersion
operator|=
name|qMakePair
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
operator|!
name|init
argument_list|()
argument_list|)
condition|)
block|{
name|qFatal
argument_list|(
literal|"Failed to load libGLESv2"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|contextVersion
init|=
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|version
argument_list|()
decl_stmt|;
name|qCDebug
argument_list|(
name|lcGLES3
argument_list|,
literal|"Resolving OpenGL ES 3.0 entry points"
argument_list|)
expr_stmt|;
name|BeginQuery
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glBeginQuery"
argument_list|)
expr_stmt|;
name|BeginTransformFeedback
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glBeginTransformFeedback"
argument_list|)
expr_stmt|;
name|BindBufferBase
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLuint
argument_list|,
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glBindBufferBase"
argument_list|)
expr_stmt|;
name|BindBufferRange
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLuint
argument_list|,
name|GLuint
argument_list|,
name|GLintptr
argument_list|,
name|GLsizeiptr
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glBindBufferRange"
argument_list|)
expr_stmt|;
name|BindSampler
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glBindSampler"
argument_list|)
expr_stmt|;
name|BindTransformFeedback
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glBindTransformFeedback"
argument_list|)
expr_stmt|;
name|BindVertexArray
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glBindVertexArray"
argument_list|)
expr_stmt|;
name|BlitFramebuffer
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLbitfield
argument_list|,
name|GLenum
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glBlitFramebuffer"
argument_list|)
expr_stmt|;
name|ClearBufferfi
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLint
argument_list|,
name|GLfloat
argument_list|,
name|GLint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glClearBufferfi"
argument_list|)
expr_stmt|;
name|ClearBufferfv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLint
argument_list|,
specifier|const
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glClearBufferfv"
argument_list|)
expr_stmt|;
name|ClearBufferiv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLint
argument_list|,
specifier|const
name|GLint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glClearBufferiv"
argument_list|)
expr_stmt|;
name|ClearBufferuiv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLint
argument_list|,
specifier|const
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glClearBufferuiv"
argument_list|)
expr_stmt|;
name|ClientWaitSync
operator|=
operator|(
name|GLenum
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLsync
argument_list|,
name|GLbitfield
argument_list|,
name|GLuint64
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glClientWaitSync"
argument_list|)
expr_stmt|;
name|CompressedTexImage3D
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLint
argument_list|,
name|GLenum
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|void
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glCompressedTexImage3D"
argument_list|)
expr_stmt|;
name|CompressedTexSubImage3D
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
argument_list|,
name|GLenum
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|void
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glCompressedTexSubImage3D"
argument_list|)
expr_stmt|;
name|CopyBufferSubData
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLenum
argument_list|,
name|GLintptr
argument_list|,
name|GLintptr
argument_list|,
name|GLsizeiptr
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glCopyBufferSubData"
argument_list|)
expr_stmt|;
name|CopyTexSubImage3D
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glCopyTexSubImage3D"
argument_list|)
expr_stmt|;
name|DeleteQueries
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLsizei
argument_list|,
specifier|const
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glDeleteQueries"
argument_list|)
expr_stmt|;
name|DeleteSamplers
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLsizei
argument_list|,
specifier|const
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glDeleteSamplers"
argument_list|)
expr_stmt|;
name|DeleteSync
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLsync
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glDeleteSync"
argument_list|)
expr_stmt|;
name|DeleteTransformFeedbacks
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLsizei
argument_list|,
specifier|const
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glDeleteTransformFeedbacks"
argument_list|)
expr_stmt|;
name|DeleteVertexArrays
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLsizei
argument_list|,
specifier|const
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glDeleteVertexArrays"
argument_list|)
expr_stmt|;
name|DrawArraysInstanced
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glDrawArraysInstanced"
argument_list|)
expr_stmt|;
name|DrawBuffers
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLsizei
argument_list|,
specifier|const
name|GLenum
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glDrawBuffers"
argument_list|)
expr_stmt|;
name|DrawElementsInstanced
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLsizei
argument_list|,
name|GLenum
argument_list|,
specifier|const
name|void
operator|*
argument_list|,
name|GLsizei
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glDrawElementsInstanced"
argument_list|)
expr_stmt|;
name|DrawRangeElements
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLuint
argument_list|,
name|GLuint
argument_list|,
name|GLsizei
argument_list|,
name|GLenum
argument_list|,
specifier|const
name|void
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glDrawRangeElements"
argument_list|)
expr_stmt|;
name|EndQuery
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glEndQuery"
argument_list|)
expr_stmt|;
name|EndTransformFeedback
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|()
operator|)
name|resolve
argument_list|(
literal|"glEndTransformFeedback"
argument_list|)
expr_stmt|;
name|FenceSync
operator|=
operator|(
name|GLsync
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLbitfield
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glFenceSync"
argument_list|)
expr_stmt|;
name|FlushMappedBufferRange
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLintptr
argument_list|,
name|GLsizeiptr
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glFlushMappedBufferRange"
argument_list|)
expr_stmt|;
name|FramebufferTextureLayer
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLenum
argument_list|,
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glFramebufferTextureLayer"
argument_list|)
expr_stmt|;
name|GenQueries
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLsizei
argument_list|,
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGenQueries"
argument_list|)
expr_stmt|;
name|GenSamplers
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLsizei
argument_list|,
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGenSamplers"
argument_list|)
expr_stmt|;
name|GenTransformFeedbacks
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLsizei
argument_list|,
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGenTransformFeedbacks"
argument_list|)
expr_stmt|;
name|GenVertexArrays
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLsizei
argument_list|,
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGenVertexArrays"
argument_list|)
expr_stmt|;
name|GetActiveUniformBlockName
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLuint
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
operator|*
argument_list|,
name|GLchar
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetActiveUniformBlockName"
argument_list|)
expr_stmt|;
name|GetActiveUniformBlockiv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLuint
argument_list|,
name|GLenum
argument_list|,
name|GLint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetActiveUniformBlockiv"
argument_list|)
expr_stmt|;
name|GetActiveUniformsiv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|GLuint
operator|*
argument_list|,
name|GLenum
argument_list|,
name|GLint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetActiveUniformsiv"
argument_list|)
expr_stmt|;
name|GetBufferParameteri64v
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLenum
argument_list|,
name|GLint64
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetBufferParameteri64v"
argument_list|)
expr_stmt|;
name|GetBufferPointerv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLenum
argument_list|,
name|void
operator|*
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetBufferPointerv"
argument_list|)
expr_stmt|;
name|GetFragDataLocation
operator|=
operator|(
name|GLint
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
specifier|const
name|GLchar
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetFragDataLocation"
argument_list|)
expr_stmt|;
name|GetInteger64i_v
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLuint
argument_list|,
name|GLint64
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetInteger64i_v"
argument_list|)
expr_stmt|;
name|GetInteger64v
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLint64
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetInteger64v"
argument_list|)
expr_stmt|;
name|GetIntegeri_v
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLuint
argument_list|,
name|GLint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetIntegeri_v"
argument_list|)
expr_stmt|;
name|GetInternalformativ
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLenum
argument_list|,
name|GLenum
argument_list|,
name|GLsizei
argument_list|,
name|GLint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetInternalformativ"
argument_list|)
expr_stmt|;
name|GetProgramBinary
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
operator|*
argument_list|,
name|GLenum
operator|*
argument_list|,
name|void
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetProgramBinary"
argument_list|)
expr_stmt|;
name|GetQueryObjectuiv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLenum
argument_list|,
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetQueryObjectuiv"
argument_list|)
expr_stmt|;
name|GetQueryiv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLenum
argument_list|,
name|GLint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetQueryiv"
argument_list|)
expr_stmt|;
name|GetSamplerParameterfv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLenum
argument_list|,
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetSamplerParameterfv"
argument_list|)
expr_stmt|;
name|GetSamplerParameteriv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLenum
argument_list|,
name|GLint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetSamplerParameteriv"
argument_list|)
expr_stmt|;
name|GetStringi
operator|=
operator|(
specifier|const
name|GLubyte
operator|*
call|(
name|QOPENGLF_APIENTRYP
call|)
argument_list|(
name|GLenum
argument_list|,
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetStringi"
argument_list|)
expr_stmt|;
name|GetSynciv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLsync
argument_list|,
name|GLenum
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
operator|*
argument_list|,
name|GLint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetSynciv"
argument_list|)
expr_stmt|;
name|GetTransformFeedbackVarying
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLuint
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
operator|*
argument_list|,
name|GLsizei
operator|*
argument_list|,
name|GLenum
operator|*
argument_list|,
name|GLchar
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetTransformFeedbackVarying"
argument_list|)
expr_stmt|;
name|GetUniformBlockIndex
operator|=
operator|(
name|GLuint
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
specifier|const
name|GLchar
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetUniformBlockIndex"
argument_list|)
expr_stmt|;
name|GetUniformIndices
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|GLchar
operator|*
specifier|const
operator|*
argument_list|,
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetUniformIndices"
argument_list|)
expr_stmt|;
name|GetUniformuiv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetUniformuiv"
argument_list|)
expr_stmt|;
name|GetVertexAttribIiv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLenum
argument_list|,
name|GLint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetVertexAttribIiv"
argument_list|)
expr_stmt|;
name|GetVertexAttribIuiv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLenum
argument_list|,
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetVertexAttribIuiv"
argument_list|)
expr_stmt|;
name|InvalidateFramebuffer
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|GLenum
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glInvalidateFramebuffer"
argument_list|)
expr_stmt|;
name|InvalidateSubFramebuffer
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|GLenum
operator|*
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glInvalidateSubFramebuffer"
argument_list|)
expr_stmt|;
name|IsQuery
operator|=
operator|(
name|GLboolean
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glIsQuery"
argument_list|)
expr_stmt|;
name|IsSampler
operator|=
operator|(
name|GLboolean
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glIsSampler"
argument_list|)
expr_stmt|;
name|IsSync
operator|=
operator|(
name|GLboolean
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLsync
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glIsSync"
argument_list|)
expr_stmt|;
name|IsTransformFeedback
operator|=
operator|(
name|GLboolean
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glIsTransformFeedback"
argument_list|)
expr_stmt|;
name|IsVertexArray
operator|=
operator|(
name|GLboolean
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glIsVertexArray"
argument_list|)
expr_stmt|;
name|MapBufferRange
operator|=
operator|(
name|void
operator|*
call|(
name|QOPENGLF_APIENTRYP
call|)
argument_list|(
name|GLenum
argument_list|,
name|GLintptr
argument_list|,
name|GLsizeiptr
argument_list|,
name|GLbitfield
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glMapBufferRange"
argument_list|)
expr_stmt|;
name|PauseTransformFeedback
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|()
operator|)
name|resolve
argument_list|(
literal|"glPauseTransformFeedback"
argument_list|)
expr_stmt|;
name|ProgramBinary
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLenum
argument_list|,
specifier|const
name|void
operator|*
argument_list|,
name|GLsizei
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramBinary"
argument_list|)
expr_stmt|;
name|ProgramParameteri
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLenum
argument_list|,
name|GLint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramParameteri"
argument_list|)
expr_stmt|;
name|ReadBuffer
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glReadBuffer"
argument_list|)
expr_stmt|;
name|RenderbufferStorageMultisample
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLsizei
argument_list|,
name|GLenum
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glRenderbufferStorageMultisample"
argument_list|)
expr_stmt|;
name|ResumeTransformFeedback
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|()
operator|)
name|resolve
argument_list|(
literal|"glResumeTransformFeedback"
argument_list|)
expr_stmt|;
name|SamplerParameterf
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLenum
argument_list|,
name|GLfloat
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glSamplerParameterf"
argument_list|)
expr_stmt|;
name|SamplerParameterfv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLenum
argument_list|,
specifier|const
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glSamplerParameterfv"
argument_list|)
expr_stmt|;
name|SamplerParameteri
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLenum
argument_list|,
name|GLint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glSamplerParameteri"
argument_list|)
expr_stmt|;
name|SamplerParameteriv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLenum
argument_list|,
specifier|const
name|GLint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glSamplerParameteriv"
argument_list|)
expr_stmt|;
name|TexImage3D
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
argument_list|,
name|GLint
argument_list|,
name|GLenum
argument_list|,
name|GLenum
argument_list|,
specifier|const
name|void
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glTexImage3D"
argument_list|)
expr_stmt|;
name|TexStorage2D
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLsizei
argument_list|,
name|GLenum
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glTexStorage2D"
argument_list|)
expr_stmt|;
name|TexStorage3D
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLsizei
argument_list|,
name|GLenum
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glTexStorage3D"
argument_list|)
expr_stmt|;
name|TexSubImage3D
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
argument_list|,
name|GLenum
argument_list|,
name|GLenum
argument_list|,
specifier|const
name|void
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glTexSubImage3D"
argument_list|)
expr_stmt|;
name|TransformFeedbackVaryings
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|GLchar
operator|*
specifier|const
operator|*
argument_list|,
name|GLenum
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glTransformFeedbackVaryings"
argument_list|)
expr_stmt|;
name|Uniform1ui
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLint
argument_list|,
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glUniform1ui"
argument_list|)
expr_stmt|;
name|Uniform1uiv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLint
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glUniform1uiv"
argument_list|)
expr_stmt|;
name|Uniform2ui
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLint
argument_list|,
name|GLuint
argument_list|,
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glUniform2ui"
argument_list|)
expr_stmt|;
name|Uniform2uiv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLint
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glUniform2uiv"
argument_list|)
expr_stmt|;
name|Uniform3ui
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLint
argument_list|,
name|GLuint
argument_list|,
name|GLuint
argument_list|,
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glUniform3ui"
argument_list|)
expr_stmt|;
name|Uniform3uiv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLint
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glUniform3uiv"
argument_list|)
expr_stmt|;
name|Uniform4ui
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLint
argument_list|,
name|GLuint
argument_list|,
name|GLuint
argument_list|,
name|GLuint
argument_list|,
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glUniform4ui"
argument_list|)
expr_stmt|;
name|Uniform4uiv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLint
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glUniform4uiv"
argument_list|)
expr_stmt|;
name|UniformBlockBinding
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLuint
argument_list|,
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glUniformBlockBinding"
argument_list|)
expr_stmt|;
name|UniformMatrix2x3fv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLint
argument_list|,
name|GLsizei
argument_list|,
name|GLboolean
argument_list|,
specifier|const
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glUniformMatrix2x3fv"
argument_list|)
expr_stmt|;
name|UniformMatrix2x4fv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLint
argument_list|,
name|GLsizei
argument_list|,
name|GLboolean
argument_list|,
specifier|const
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glUniformMatrix2x4fv"
argument_list|)
expr_stmt|;
name|UniformMatrix3x2fv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLint
argument_list|,
name|GLsizei
argument_list|,
name|GLboolean
argument_list|,
specifier|const
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glUniformMatrix3x2fv"
argument_list|)
expr_stmt|;
name|UniformMatrix3x4fv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLint
argument_list|,
name|GLsizei
argument_list|,
name|GLboolean
argument_list|,
specifier|const
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glUniformMatrix3x4fv"
argument_list|)
expr_stmt|;
name|UniformMatrix4x2fv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLint
argument_list|,
name|GLsizei
argument_list|,
name|GLboolean
argument_list|,
specifier|const
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glUniformMatrix4x2fv"
argument_list|)
expr_stmt|;
name|UniformMatrix4x3fv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLint
argument_list|,
name|GLsizei
argument_list|,
name|GLboolean
argument_list|,
specifier|const
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glUniformMatrix4x3fv"
argument_list|)
expr_stmt|;
name|UnmapBuffer
operator|=
operator|(
name|GLboolean
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glUnmapBuffer"
argument_list|)
expr_stmt|;
name|VertexAttribDivisor
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glVertexAttribDivisor"
argument_list|)
expr_stmt|;
name|VertexAttribI4i
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glVertexAttribI4i"
argument_list|)
expr_stmt|;
name|VertexAttribI4iv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
specifier|const
name|GLint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glVertexAttribI4iv"
argument_list|)
expr_stmt|;
name|VertexAttribI4ui
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLuint
argument_list|,
name|GLuint
argument_list|,
name|GLuint
argument_list|,
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glVertexAttribI4ui"
argument_list|)
expr_stmt|;
name|VertexAttribI4uiv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
specifier|const
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glVertexAttribI4uiv"
argument_list|)
expr_stmt|;
name|VertexAttribIPointer
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLenum
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|void
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glVertexAttribIPointer"
argument_list|)
expr_stmt|;
name|WaitSync
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLsync
argument_list|,
name|GLbitfield
argument_list|,
name|GLuint64
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glWaitSync"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|BeginQuery
operator|||
operator|!
name|BlitFramebuffer
operator|||
operator|!
name|GenTransformFeedbacks
operator|||
operator|!
name|GenVertexArrays
operator|||
operator|!
name|MapBufferRange
operator|||
operator|!
name|RenderbufferStorageMultisample
operator|||
operator|!
name|TexStorage2D
operator|||
operator|!
name|WaitSync
condition|)
block|{
name|qWarning
argument_list|(
literal|"OpenGL ES 3.0 entry points not found. This is odd because the driver returned a context of version %d.%d"
argument_list|,
name|contextVersion
operator|.
name|first
argument_list|,
name|contextVersion
operator|.
name|second
argument_list|)
expr_stmt|;
return|return;
block|}
name|m_supportedVersion
operator|=
name|qMakePair
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextVersion
operator|>=
name|qMakePair
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
condition|)
block|{
name|qCDebug
argument_list|(
name|lcGLES3
argument_list|,
literal|"Resolving OpenGL ES 3.1 entry points"
argument_list|)
expr_stmt|;
name|ActiveShaderProgram
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glActiveShaderProgram"
argument_list|)
expr_stmt|;
name|BindImageTexture
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLboolean
argument_list|,
name|GLint
argument_list|,
name|GLenum
argument_list|,
name|GLenum
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glBindImageTexture"
argument_list|)
expr_stmt|;
name|BindProgramPipeline
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glBindProgramPipeline"
argument_list|)
expr_stmt|;
name|BindVertexBuffer
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLuint
argument_list|,
name|GLintptr
argument_list|,
name|GLsizei
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glBindVertexBuffer"
argument_list|)
expr_stmt|;
name|CreateShaderProgramv
operator|=
operator|(
name|GLuint
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|GLchar
operator|*
specifier|const
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glCreateShaderProgramv"
argument_list|)
expr_stmt|;
name|DeleteProgramPipelines
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLsizei
argument_list|,
specifier|const
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glDeleteProgramPipelines"
argument_list|)
expr_stmt|;
name|DispatchCompute
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLuint
argument_list|,
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glDispatchCompute"
argument_list|)
expr_stmt|;
name|DispatchComputeIndirect
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLintptr
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glDispatchComputeIndirect"
argument_list|)
expr_stmt|;
name|DrawArraysIndirect
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
specifier|const
name|void
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glDrawArraysIndirect"
argument_list|)
expr_stmt|;
name|DrawElementsIndirect
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLenum
argument_list|,
specifier|const
name|void
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glDrawElementsIndirect"
argument_list|)
expr_stmt|;
name|FramebufferParameteri
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLenum
argument_list|,
name|GLint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glFramebufferParameteri"
argument_list|)
expr_stmt|;
name|GenProgramPipelines
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLsizei
argument_list|,
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGenProgramPipelines"
argument_list|)
expr_stmt|;
name|GetBooleani_v
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLuint
argument_list|,
name|GLboolean
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetBooleani_v"
argument_list|)
expr_stmt|;
name|GetFramebufferParameteriv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLenum
argument_list|,
name|GLint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetFramebufferParameteriv"
argument_list|)
expr_stmt|;
name|GetMultisamplefv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLuint
argument_list|,
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetMultisamplefv"
argument_list|)
expr_stmt|;
name|GetProgramInterfaceiv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLenum
argument_list|,
name|GLenum
argument_list|,
name|GLint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetProgramInterfaceiv"
argument_list|)
expr_stmt|;
name|GetProgramPipelineInfoLog
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
operator|*
argument_list|,
name|GLchar
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetProgramPipelineInfoLog"
argument_list|)
expr_stmt|;
name|GetProgramPipelineiv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLenum
argument_list|,
name|GLint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetProgramPipelineiv"
argument_list|)
expr_stmt|;
name|GetProgramResourceIndex
operator|=
operator|(
name|GLuint
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLenum
argument_list|,
specifier|const
name|GLchar
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetProgramResourceIndex"
argument_list|)
expr_stmt|;
name|GetProgramResourceLocation
operator|=
operator|(
name|GLint
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLenum
argument_list|,
specifier|const
name|GLchar
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetProgramResourceLocation"
argument_list|)
expr_stmt|;
name|GetProgramResourceName
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLenum
argument_list|,
name|GLuint
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
operator|*
argument_list|,
name|GLchar
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetProgramResourceName"
argument_list|)
expr_stmt|;
name|GetProgramResourceiv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLenum
argument_list|,
name|GLuint
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|GLenum
operator|*
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
operator|*
argument_list|,
name|GLint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetProgramResourceiv"
argument_list|)
expr_stmt|;
name|GetTexLevelParameterfv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLint
argument_list|,
name|GLenum
argument_list|,
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetTexLevelParameterfv"
argument_list|)
expr_stmt|;
name|GetTexLevelParameteriv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLint
argument_list|,
name|GLenum
argument_list|,
name|GLint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glGetTexLevelParameteriv"
argument_list|)
expr_stmt|;
name|IsProgramPipeline
operator|=
operator|(
name|GLboolean
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glIsProgramPipeline"
argument_list|)
expr_stmt|;
name|MemoryBarrierFunc
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLbitfield
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glMemoryBarrier"
argument_list|)
expr_stmt|;
name|MemoryBarrierByRegion
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLbitfield
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glMemoryBarrierByRegion"
argument_list|)
expr_stmt|;
name|ProgramUniform1f
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLfloat
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform1f"
argument_list|)
expr_stmt|;
name|ProgramUniform1fv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform1fv"
argument_list|)
expr_stmt|;
name|ProgramUniform1i
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform1i"
argument_list|)
expr_stmt|;
name|ProgramUniform1iv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|GLint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform1iv"
argument_list|)
expr_stmt|;
name|ProgramUniform1ui
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform1ui"
argument_list|)
expr_stmt|;
name|ProgramUniform1uiv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform1uiv"
argument_list|)
expr_stmt|;
name|ProgramUniform2f
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLfloat
argument_list|,
name|GLfloat
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform2f"
argument_list|)
expr_stmt|;
name|ProgramUniform2fv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform2fv"
argument_list|)
expr_stmt|;
name|ProgramUniform2i
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform2i"
argument_list|)
expr_stmt|;
name|ProgramUniform2iv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|GLint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform2iv"
argument_list|)
expr_stmt|;
name|ProgramUniform2ui
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLuint
argument_list|,
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform2ui"
argument_list|)
expr_stmt|;
name|ProgramUniform2uiv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform2uiv"
argument_list|)
expr_stmt|;
name|ProgramUniform3f
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLfloat
argument_list|,
name|GLfloat
argument_list|,
name|GLfloat
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform3f"
argument_list|)
expr_stmt|;
name|ProgramUniform3fv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform3fv"
argument_list|)
expr_stmt|;
name|ProgramUniform3i
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform3i"
argument_list|)
expr_stmt|;
name|ProgramUniform3iv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|GLint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform3iv"
argument_list|)
expr_stmt|;
name|ProgramUniform3ui
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLuint
argument_list|,
name|GLuint
argument_list|,
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform3ui"
argument_list|)
expr_stmt|;
name|ProgramUniform3uiv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform3uiv"
argument_list|)
expr_stmt|;
name|ProgramUniform4f
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLfloat
argument_list|,
name|GLfloat
argument_list|,
name|GLfloat
argument_list|,
name|GLfloat
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform4f"
argument_list|)
expr_stmt|;
name|ProgramUniform4fv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform4fv"
argument_list|)
expr_stmt|;
name|ProgramUniform4i
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|,
name|GLint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform4i"
argument_list|)
expr_stmt|;
name|ProgramUniform4iv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|GLint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform4iv"
argument_list|)
expr_stmt|;
name|ProgramUniform4ui
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLuint
argument_list|,
name|GLuint
argument_list|,
name|GLuint
argument_list|,
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform4ui"
argument_list|)
expr_stmt|;
name|ProgramUniform4uiv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
specifier|const
name|GLuint
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniform4uiv"
argument_list|)
expr_stmt|;
name|ProgramUniformMatrix2fv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
name|GLboolean
argument_list|,
specifier|const
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniformMatrix2fv"
argument_list|)
expr_stmt|;
name|ProgramUniformMatrix2x3fv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
name|GLboolean
argument_list|,
specifier|const
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniformMatrix2x3fv"
argument_list|)
expr_stmt|;
name|ProgramUniformMatrix2x4fv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
name|GLboolean
argument_list|,
specifier|const
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniformMatrix2x4fv"
argument_list|)
expr_stmt|;
name|ProgramUniformMatrix3fv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
name|GLboolean
argument_list|,
specifier|const
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniformMatrix3fv"
argument_list|)
expr_stmt|;
name|ProgramUniformMatrix3x2fv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
name|GLboolean
argument_list|,
specifier|const
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniformMatrix3x2fv"
argument_list|)
expr_stmt|;
name|ProgramUniformMatrix3x4fv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
name|GLboolean
argument_list|,
specifier|const
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniformMatrix3x4fv"
argument_list|)
expr_stmt|;
name|ProgramUniformMatrix4fv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
name|GLboolean
argument_list|,
specifier|const
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniformMatrix4fv"
argument_list|)
expr_stmt|;
name|ProgramUniformMatrix4x2fv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
name|GLboolean
argument_list|,
specifier|const
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniformMatrix4x2fv"
argument_list|)
expr_stmt|;
name|ProgramUniformMatrix4x3fv
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLsizei
argument_list|,
name|GLboolean
argument_list|,
specifier|const
name|GLfloat
operator|*
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glProgramUniformMatrix4x3fv"
argument_list|)
expr_stmt|;
name|SampleMaski
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLbitfield
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glSampleMaski"
argument_list|)
expr_stmt|;
name|TexStorage2DMultisample
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLenum
argument_list|,
name|GLsizei
argument_list|,
name|GLenum
argument_list|,
name|GLsizei
argument_list|,
name|GLsizei
argument_list|,
name|GLboolean
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glTexStorage2DMultisample"
argument_list|)
expr_stmt|;
name|UseProgramStages
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLbitfield
argument_list|,
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glUseProgramStages"
argument_list|)
expr_stmt|;
name|ValidateProgramPipeline
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glValidateProgramPipeline"
argument_list|)
expr_stmt|;
name|VertexAttribBinding
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glVertexAttribBinding"
argument_list|)
expr_stmt|;
name|VertexAttribFormat
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLenum
argument_list|,
name|GLboolean
argument_list|,
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glVertexAttribFormat"
argument_list|)
expr_stmt|;
name|VertexAttribIFormat
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLint
argument_list|,
name|GLenum
argument_list|,
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glVertexAttribIFormat"
argument_list|)
expr_stmt|;
name|VertexBindingDivisor
operator|=
operator|(
name|void
argument_list|(
name|QOPENGLF_APIENTRYP
argument_list|)
argument_list|(
name|GLuint
argument_list|,
name|GLuint
argument_list|)
operator|)
name|resolve
argument_list|(
literal|"glVertexBindingDivisor"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ActiveShaderProgram
operator|||
operator|!
name|BindImageTexture
operator|||
operator|!
name|DispatchCompute
operator|||
operator|!
name|DrawArraysIndirect
operator|||
operator|!
name|GenProgramPipelines
operator|||
operator|!
name|MemoryBarrierFunc
condition|)
block|{
name|qWarning
argument_list|(
literal|"OpenGL ES 3.1 entry points not found. This is odd because the driver returned a context of version %d.%d"
argument_list|,
name|contextVersion
operator|.
name|first
argument_list|,
name|contextVersion
operator|.
name|second
argument_list|)
expr_stmt|;
return|return;
block|}
name|m_supportedVersion
operator|=
name|qMakePair
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_constructor
begin_comment
comment|// GLES 3.0 and 3.1
end_comment
begin_comment
comment|// Checks for true OpenGL ES 3.x. OpenGL with GL_ARB_ES3_compatibility
end_comment
begin_comment
comment|// does not count because there the plain resolvers work anyhow.
end_comment
begin_function
DECL|function|isES3
specifier|static
specifier|inline
name|bool
name|isES3
parameter_list|(
name|int
name|minor
parameter_list|)
block|{
name|QOpenGLContext
modifier|*
name|ctx
init|=
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|libMatches
init|=
name|QOpenGLContext
operator|::
name|openGLModuleType
argument_list|()
operator|==
name|QOpenGLContext
operator|::
name|LibGLES
decl_stmt|;
specifier|const
name|bool
name|contextMatches
init|=
name|ctx
operator|->
name|isOpenGLES
argument_list|()
operator|&&
name|ctx
operator|->
name|format
argument_list|()
operator|.
name|version
argument_list|()
operator|>=
name|qMakePair
argument_list|(
literal|3
argument_list|,
name|minor
argument_list|)
decl_stmt|;
comment|// Resolving happens whenever qgles3Helper() is called first. So do it only
comment|// when the driver gives a 3.0+ context.
if|if
condition|(
name|libMatches
operator|&&
name|contextMatches
condition|)
return|return
name|qgles3Helper
argument_list|()
operator|->
name|supportedVersion
argument_list|()
operator|>=
name|qMakePair
argument_list|(
literal|3
argument_list|,
name|minor
argument_list|)
return|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|// Go through the dlsym-based helper for real ES 3, resolve using
end_comment
begin_comment
comment|// wglGetProcAddress or similar when on plain OpenGL.
end_comment
begin_function
DECL|function|qopenglfResolveBeginQuery
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBeginQuery
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|id
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|BeginQuery
argument_list|(
name|target
argument_list|,
name|id
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|BeginQuery
argument_list|)
argument_list|(
name|target
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBeginTransformFeedback
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBeginTransformFeedback
parameter_list|(
name|GLenum
name|primitiveMode
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|BeginTransformFeedback
argument_list|(
name|primitiveMode
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|BeginTransformFeedback
argument_list|)
argument_list|(
name|primitiveMode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBindBufferBase
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBindBufferBase
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLuint
name|buffer
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|BindBufferBase
argument_list|(
name|target
argument_list|,
name|index
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|BindBufferBase
argument_list|)
argument_list|(
name|target
argument_list|,
name|index
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBindBufferRange
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBindBufferRange
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLuint
name|buffer
parameter_list|,
name|GLintptr
name|offset
parameter_list|,
name|GLsizeiptr
name|size
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|BindBufferRange
argument_list|(
name|target
argument_list|,
name|index
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|size
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|BindBufferRange
argument_list|)
argument_list|(
name|target
argument_list|,
name|index
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBindSampler
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBindSampler
parameter_list|(
name|GLuint
name|unit
parameter_list|,
name|GLuint
name|sampler
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|BindSampler
argument_list|(
name|unit
argument_list|,
name|sampler
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|BindSampler
argument_list|)
argument_list|(
name|unit
argument_list|,
name|sampler
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBindTransformFeedback
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBindTransformFeedback
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|id
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|BindTransformFeedback
argument_list|(
name|target
argument_list|,
name|id
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|BindTransformFeedback
argument_list|)
argument_list|(
name|target
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBindVertexArray
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBindVertexArray
parameter_list|(
name|GLuint
name|array
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|BindVertexArray
argument_list|(
name|array
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|BindVertexArray
argument_list|)
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBlitFramebuffer
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBlitFramebuffer
parameter_list|(
name|GLint
name|srcX0
parameter_list|,
name|GLint
name|srcY0
parameter_list|,
name|GLint
name|srcX1
parameter_list|,
name|GLint
name|srcY1
parameter_list|,
name|GLint
name|dstX0
parameter_list|,
name|GLint
name|dstY0
parameter_list|,
name|GLint
name|dstX1
parameter_list|,
name|GLint
name|dstY1
parameter_list|,
name|GLbitfield
name|mask
parameter_list|,
name|GLenum
name|filter
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|BlitFramebuffer
argument_list|(
name|srcX0
argument_list|,
name|srcY0
argument_list|,
name|srcX1
argument_list|,
name|srcY1
argument_list|,
name|dstX0
argument_list|,
name|dstY0
argument_list|,
name|dstX1
argument_list|,
name|dstY1
argument_list|,
name|mask
argument_list|,
name|filter
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveEXT
operator||
name|ResolveANGLE
operator||
name|ResolveNV
argument_list|,
name|BlitFramebuffer
argument_list|)
argument_list|(
name|srcX0
argument_list|,
name|srcY0
argument_list|,
name|srcX1
argument_list|,
name|srcY1
argument_list|,
name|dstX0
argument_list|,
name|dstY0
argument_list|,
name|dstX1
argument_list|,
name|dstY1
argument_list|,
name|mask
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveClearBufferfi
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveClearBufferfi
parameter_list|(
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
name|GLfloat
name|depth
parameter_list|,
name|GLint
name|stencil
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ClearBufferfi
argument_list|(
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|depth
argument_list|,
name|stencil
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ClearBufferfi
argument_list|)
argument_list|(
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|depth
argument_list|,
name|stencil
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveClearBufferfv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveClearBufferfv
parameter_list|(
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ClearBufferfv
argument_list|(
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ClearBufferfv
argument_list|)
argument_list|(
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveClearBufferiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveClearBufferiv
parameter_list|(
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
specifier|const
name|GLint
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ClearBufferiv
argument_list|(
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ClearBufferiv
argument_list|)
argument_list|(
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveClearBufferuiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveClearBufferuiv
parameter_list|(
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ClearBufferuiv
argument_list|(
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ClearBufferuiv
argument_list|)
argument_list|(
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveClientWaitSync
specifier|static
name|GLenum
name|QOPENGLF_APIENTRY
name|qopenglfResolveClientWaitSync
parameter_list|(
name|GLsync
name|sync
parameter_list|,
name|GLbitfield
name|flags
parameter_list|,
name|GLuint64
name|timeout
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
return|return
name|qgles3Helper
argument_list|()
operator|->
name|ClientWaitSync
argument_list|(
name|sync
argument_list|,
name|flags
argument_list|,
name|timeout
argument_list|)
return|;
else|else
name|RESOLVE_FUNC
argument_list|(
name|GLenum
argument_list|,
literal|0
argument_list|,
name|ClientWaitSync
argument_list|)
argument_list|(
name|sync
argument_list|,
name|flags
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveCompressedTexImage3D
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveCompressedTexImage3D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|CompressedTexImage3D
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|border
argument_list|,
name|imageSize
argument_list|,
name|data
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|CompressedTexImage3D
argument_list|)
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|border
argument_list|,
name|imageSize
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveCompressedTexSubImage3D
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveCompressedTexSubImage3D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|CompressedTexSubImage3D
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
name|data
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|CompressedTexSubImage3D
argument_list|)
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveCopyBufferSubData
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveCopyBufferSubData
parameter_list|(
name|GLenum
name|readTarget
parameter_list|,
name|GLenum
name|writeTarget
parameter_list|,
name|GLintptr
name|readOffset
parameter_list|,
name|GLintptr
name|writeOffset
parameter_list|,
name|GLsizeiptr
name|size
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|CopyBufferSubData
argument_list|(
name|readTarget
argument_list|,
name|writeTarget
argument_list|,
name|readOffset
argument_list|,
name|writeOffset
argument_list|,
name|size
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|CopyBufferSubData
argument_list|)
argument_list|(
name|readTarget
argument_list|,
name|writeTarget
argument_list|,
name|readOffset
argument_list|,
name|writeOffset
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveCopyTexSubImage3D
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveCopyTexSubImage3D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|CopyTexSubImage3D
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|CopyTexSubImage3D
argument_list|)
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDeleteQueries
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDeleteQueries
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|ids
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|DeleteQueries
argument_list|(
name|n
argument_list|,
name|ids
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DeleteQueries
argument_list|)
argument_list|(
name|n
argument_list|,
name|ids
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDeleteSamplers
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDeleteSamplers
parameter_list|(
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|samplers
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|DeleteSamplers
argument_list|(
name|count
argument_list|,
name|samplers
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DeleteSamplers
argument_list|)
argument_list|(
name|count
argument_list|,
name|samplers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDeleteSync
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDeleteSync
parameter_list|(
name|GLsync
name|sync
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|DeleteSync
argument_list|(
name|sync
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DeleteSync
argument_list|)
argument_list|(
name|sync
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDeleteTransformFeedbacks
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDeleteTransformFeedbacks
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|ids
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|DeleteTransformFeedbacks
argument_list|(
name|n
argument_list|,
name|ids
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DeleteTransformFeedbacks
argument_list|)
argument_list|(
name|n
argument_list|,
name|ids
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDeleteVertexArrays
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDeleteVertexArrays
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|arrays
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|DeleteVertexArrays
argument_list|(
name|n
argument_list|,
name|arrays
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DeleteVertexArrays
argument_list|)
argument_list|(
name|n
argument_list|,
name|arrays
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDrawArraysInstanced
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDrawArraysInstanced
parameter_list|(
name|GLenum
name|mode
parameter_list|,
name|GLint
name|first
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLsizei
name|instancecount
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|DrawArraysInstanced
argument_list|(
name|mode
argument_list|,
name|first
argument_list|,
name|count
argument_list|,
name|instancecount
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DrawArraysInstanced
argument_list|)
argument_list|(
name|mode
argument_list|,
name|first
argument_list|,
name|count
argument_list|,
name|instancecount
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDrawBuffers
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDrawBuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|bufs
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|DrawBuffers
argument_list|(
name|n
argument_list|,
name|bufs
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DrawBuffers
argument_list|)
argument_list|(
name|n
argument_list|,
name|bufs
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDrawElementsInstanced
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDrawElementsInstanced
parameter_list|(
name|GLenum
name|mode
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|void
modifier|*
name|indices
parameter_list|,
name|GLsizei
name|instancecount
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|DrawElementsInstanced
argument_list|(
name|mode
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|,
name|instancecount
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DrawElementsInstanced
argument_list|)
argument_list|(
name|mode
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|,
name|instancecount
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDrawRangeElements
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDrawRangeElements
parameter_list|(
name|GLenum
name|mode
parameter_list|,
name|GLuint
name|start
parameter_list|,
name|GLuint
name|end
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|void
modifier|*
name|indices
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|DrawRangeElements
argument_list|(
name|mode
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DrawRangeElements
argument_list|)
argument_list|(
name|mode
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveEndQuery
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveEndQuery
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|EndQuery
argument_list|(
name|target
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|EndQuery
argument_list|)
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveEndTransformFeedback
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveEndTransformFeedback
parameter_list|()
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|EndTransformFeedback
argument_list|()
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|EndTransformFeedback
argument_list|)
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveFenceSync
specifier|static
name|GLsync
name|QOPENGLF_APIENTRY
name|qopenglfResolveFenceSync
parameter_list|(
name|GLenum
name|condition
parameter_list|,
name|GLbitfield
name|flags
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
return|return
name|qgles3Helper
argument_list|()
operator|->
name|FenceSync
argument_list|(
name|condition
argument_list|,
name|flags
argument_list|)
return|;
else|else
name|RESOLVE_FUNC
argument_list|(
name|GLsync
argument_list|,
literal|0
argument_list|,
name|FenceSync
argument_list|)
argument_list|(
name|condition
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveFlushMappedBufferRange
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveFlushMappedBufferRange
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLintptr
name|offset
parameter_list|,
name|GLsizeiptr
name|length
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|FlushMappedBufferRange
argument_list|(
name|target
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|FlushMappedBufferRange
argument_list|)
argument_list|(
name|target
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveFramebufferTextureLayer
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveFramebufferTextureLayer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLuint
name|texture
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|layer
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|FramebufferTextureLayer
argument_list|(
name|target
argument_list|,
name|attachment
argument_list|,
name|texture
argument_list|,
name|level
argument_list|,
name|layer
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|FramebufferTextureLayer
argument_list|)
argument_list|(
name|target
argument_list|,
name|attachment
argument_list|,
name|texture
argument_list|,
name|level
argument_list|,
name|layer
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGenQueries
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGenQueries
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|ids
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GenQueries
argument_list|(
name|n
argument_list|,
name|ids
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GenQueries
argument_list|)
argument_list|(
name|n
argument_list|,
name|ids
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGenSamplers
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGenSamplers
parameter_list|(
name|GLsizei
name|count
parameter_list|,
name|GLuint
modifier|*
name|samplers
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GenSamplers
argument_list|(
name|count
argument_list|,
name|samplers
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GenSamplers
argument_list|)
argument_list|(
name|count
argument_list|,
name|samplers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGenTransformFeedbacks
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGenTransformFeedbacks
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|ids
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GenTransformFeedbacks
argument_list|(
name|n
argument_list|,
name|ids
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GenTransformFeedbacks
argument_list|)
argument_list|(
name|n
argument_list|,
name|ids
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGenVertexArrays
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGenVertexArrays
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|arrays
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GenVertexArrays
argument_list|(
name|n
argument_list|,
name|arrays
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GenVertexArrays
argument_list|)
argument_list|(
name|n
argument_list|,
name|arrays
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetActiveUniformBlockName
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetActiveUniformBlockName
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|uniformBlockIndex
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLchar
modifier|*
name|uniformBlockName
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetActiveUniformBlockName
argument_list|(
name|program
argument_list|,
name|uniformBlockIndex
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|uniformBlockName
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetActiveUniformBlockName
argument_list|)
argument_list|(
name|program
argument_list|,
name|uniformBlockIndex
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|uniformBlockName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetActiveUniformBlockiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetActiveUniformBlockiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|uniformBlockIndex
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetActiveUniformBlockiv
argument_list|(
name|program
argument_list|,
name|uniformBlockIndex
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetActiveUniformBlockiv
argument_list|)
argument_list|(
name|program
argument_list|,
name|uniformBlockIndex
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetActiveUniformsiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetActiveUniformsiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|uniformCount
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|uniformIndices
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetActiveUniformsiv
argument_list|(
name|program
argument_list|,
name|uniformCount
argument_list|,
name|uniformIndices
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetActiveUniformsiv
argument_list|)
argument_list|(
name|program
argument_list|,
name|uniformCount
argument_list|,
name|uniformIndices
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetBufferParameteri64v
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetBufferParameteri64v
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint64
modifier|*
name|params
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetBufferParameteri64v
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetBufferParameteri64v
argument_list|)
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetBufferPointerv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetBufferPointerv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|void
modifier|*
modifier|*
name|params
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetBufferPointerv
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetBufferPointerv
argument_list|)
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetFragDataLocation
specifier|static
name|GLint
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetFragDataLocation
parameter_list|(
name|GLuint
name|program
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|name
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
return|return
name|qgles3Helper
argument_list|()
operator|->
name|GetFragDataLocation
argument_list|(
name|program
argument_list|,
name|name
argument_list|)
return|;
else|else
name|RESOLVE_FUNC
argument_list|(
name|GLint
argument_list|,
literal|0
argument_list|,
name|GetFragDataLocation
argument_list|)
argument_list|(
name|program
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetInteger64i_v
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetInteger64i_v
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLint64
modifier|*
name|data
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetInteger64i_v
argument_list|(
name|target
argument_list|,
name|index
argument_list|,
name|data
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetInteger64i_v
argument_list|)
argument_list|(
name|target
argument_list|,
name|index
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetInteger64v
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetInteger64v
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLint64
modifier|*
name|data
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetInteger64v
argument_list|(
name|pname
argument_list|,
name|data
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetInteger64v
argument_list|)
argument_list|(
name|pname
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetIntegeri_v
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetIntegeri_v
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLint
modifier|*
name|data
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetIntegeri_v
argument_list|(
name|target
argument_list|,
name|index
argument_list|,
name|data
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetIntegeri_v
argument_list|)
argument_list|(
name|target
argument_list|,
name|index
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetInternalformativ
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetInternalformativ
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetInternalformativ
argument_list|(
name|target
argument_list|,
name|internalformat
argument_list|,
name|pname
argument_list|,
name|bufSize
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetInternalformativ
argument_list|)
argument_list|(
name|target
argument_list|,
name|internalformat
argument_list|,
name|pname
argument_list|,
name|bufSize
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetProgramBinary
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetProgramBinary
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLenum
modifier|*
name|binaryFormat
parameter_list|,
name|void
modifier|*
name|binary
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetProgramBinary
argument_list|(
name|program
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|binaryFormat
argument_list|,
name|binary
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetProgramBinary
argument_list|)
argument_list|(
name|program
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|binaryFormat
argument_list|,
name|binary
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetQueryObjectuiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetQueryObjectuiv
parameter_list|(
name|GLuint
name|id
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLuint
modifier|*
name|params
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetQueryObjectuiv
argument_list|(
name|id
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetQueryObjectuiv
argument_list|)
argument_list|(
name|id
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetQueryiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetQueryiv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetQueryiv
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetQueryiv
argument_list|)
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetSamplerParameterfv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetSamplerParameterfv
parameter_list|(
name|GLuint
name|sampler
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetSamplerParameterfv
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetSamplerParameterfv
argument_list|)
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetSamplerParameteriv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetSamplerParameteriv
parameter_list|(
name|GLuint
name|sampler
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetSamplerParameteriv
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetSamplerParameteriv
argument_list|)
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetStringi
specifier|static
specifier|const
name|GLubyte
modifier|*
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetStringi
parameter_list|(
name|GLenum
name|name
parameter_list|,
name|GLuint
name|index
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
return|return
name|qgles3Helper
argument_list|()
operator|->
name|GetStringi
argument_list|(
name|name
argument_list|,
name|index
argument_list|)
return|;
else|else
name|RESOLVE_FUNC
argument_list|(
specifier|const
name|GLubyte
operator|*
argument_list|,
literal|0
argument_list|,
name|GetStringi
argument_list|)
argument_list|(
name|name
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetSynciv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetSynciv
parameter_list|(
name|GLsync
name|sync
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLint
modifier|*
name|values
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetSynciv
argument_list|(
name|sync
argument_list|,
name|pname
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|values
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetSynciv
argument_list|)
argument_list|(
name|sync
argument_list|,
name|pname
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetTransformFeedbackVarying
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetTransformFeedbackVarying
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLsizei
modifier|*
name|size
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|,
name|GLchar
modifier|*
name|name
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetTransformFeedbackVarying
argument_list|(
name|program
argument_list|,
name|index
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetTransformFeedbackVarying
argument_list|)
argument_list|(
name|program
argument_list|,
name|index
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetUniformBlockIndex
specifier|static
name|GLuint
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetUniformBlockIndex
parameter_list|(
name|GLuint
name|program
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|uniformBlockName
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
return|return
name|qgles3Helper
argument_list|()
operator|->
name|GetUniformBlockIndex
argument_list|(
name|program
argument_list|,
name|uniformBlockName
argument_list|)
return|;
else|else
name|RESOLVE_FUNC
argument_list|(
name|GLuint
argument_list|,
literal|0
argument_list|,
name|GetUniformBlockIndex
argument_list|)
argument_list|(
name|program
argument_list|,
name|uniformBlockName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetUniformIndices
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetUniformIndices
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|uniformCount
parameter_list|,
specifier|const
name|GLchar
modifier|*
specifier|const
modifier|*
name|uniformNames
parameter_list|,
name|GLuint
modifier|*
name|uniformIndices
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetUniformIndices
argument_list|(
name|program
argument_list|,
name|uniformCount
argument_list|,
name|uniformNames
argument_list|,
name|uniformIndices
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetUniformIndices
argument_list|)
argument_list|(
name|program
argument_list|,
name|uniformCount
argument_list|,
name|uniformNames
argument_list|,
name|uniformIndices
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetUniformuiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetUniformuiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLuint
modifier|*
name|params
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetUniformuiv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetUniformuiv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetVertexAttribIiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetVertexAttribIiv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetVertexAttribIiv
argument_list|(
name|index
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetVertexAttribIiv
argument_list|)
argument_list|(
name|index
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetVertexAttribIuiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetVertexAttribIuiv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLuint
modifier|*
name|params
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetVertexAttribIuiv
argument_list|(
name|index
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetVertexAttribIuiv
argument_list|)
argument_list|(
name|index
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveInvalidateFramebuffer
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveInvalidateFramebuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|numAttachments
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|attachments
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|InvalidateFramebuffer
argument_list|(
name|target
argument_list|,
name|numAttachments
argument_list|,
name|attachments
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|InvalidateFramebuffer
argument_list|)
argument_list|(
name|target
argument_list|,
name|numAttachments
argument_list|,
name|attachments
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveInvalidateSubFramebuffer
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveInvalidateSubFramebuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|numAttachments
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|attachments
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|InvalidateSubFramebuffer
argument_list|(
name|target
argument_list|,
name|numAttachments
argument_list|,
name|attachments
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|InvalidateSubFramebuffer
argument_list|)
argument_list|(
name|target
argument_list|,
name|numAttachments
argument_list|,
name|attachments
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveIsQuery
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfResolveIsQuery
parameter_list|(
name|GLuint
name|id
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
return|return
name|qgles3Helper
argument_list|()
operator|->
name|IsQuery
argument_list|(
name|id
argument_list|)
return|;
else|else
name|RESOLVE_FUNC
argument_list|(
name|GLboolean
argument_list|,
literal|0
argument_list|,
name|IsQuery
argument_list|)
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveIsSampler
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfResolveIsSampler
parameter_list|(
name|GLuint
name|sampler
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
return|return
name|qgles3Helper
argument_list|()
operator|->
name|IsSampler
argument_list|(
name|sampler
argument_list|)
return|;
else|else
name|RESOLVE_FUNC
argument_list|(
name|GLboolean
argument_list|,
literal|0
argument_list|,
name|IsSampler
argument_list|)
argument_list|(
name|sampler
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveIsSync
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfResolveIsSync
parameter_list|(
name|GLsync
name|sync
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
return|return
name|qgles3Helper
argument_list|()
operator|->
name|IsSync
argument_list|(
name|sync
argument_list|)
return|;
else|else
name|RESOLVE_FUNC
argument_list|(
name|GLboolean
argument_list|,
literal|0
argument_list|,
name|IsSync
argument_list|)
argument_list|(
name|sync
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveIsTransformFeedback
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfResolveIsTransformFeedback
parameter_list|(
name|GLuint
name|id
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
return|return
name|qgles3Helper
argument_list|()
operator|->
name|IsTransformFeedback
argument_list|(
name|id
argument_list|)
return|;
else|else
name|RESOLVE_FUNC
argument_list|(
name|GLboolean
argument_list|,
literal|0
argument_list|,
name|IsTransformFeedback
argument_list|)
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveIsVertexArray
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfResolveIsVertexArray
parameter_list|(
name|GLuint
name|array
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
return|return
name|qgles3Helper
argument_list|()
operator|->
name|IsVertexArray
argument_list|(
name|array
argument_list|)
return|;
else|else
name|RESOLVE_FUNC
argument_list|(
name|GLboolean
argument_list|,
literal|0
argument_list|,
name|IsVertexArray
argument_list|)
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveMapBufferRange
specifier|static
name|void
modifier|*
name|QOPENGLF_APIENTRY
name|qopenglfResolveMapBufferRange
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLintptr
name|offset
parameter_list|,
name|GLsizeiptr
name|length
parameter_list|,
name|GLbitfield
name|access
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
return|return
name|qgles3Helper
argument_list|()
operator|->
name|MapBufferRange
argument_list|(
name|target
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|access
argument_list|)
return|;
else|else
name|RESOLVE_FUNC
argument_list|(
name|void
operator|*
argument_list|,
literal|0
argument_list|,
name|MapBufferRange
argument_list|)
argument_list|(
name|target
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|access
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolvePauseTransformFeedback
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolvePauseTransformFeedback
parameter_list|()
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|PauseTransformFeedback
argument_list|()
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|PauseTransformFeedback
argument_list|)
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramBinary
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramBinary
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLenum
name|binaryFormat
parameter_list|,
specifier|const
name|void
modifier|*
name|binary
parameter_list|,
name|GLsizei
name|length
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramBinary
argument_list|(
name|program
argument_list|,
name|binaryFormat
argument_list|,
name|binary
argument_list|,
name|length
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramBinary
argument_list|)
argument_list|(
name|program
argument_list|,
name|binaryFormat
argument_list|,
name|binary
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramParameteri
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramParameteri
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramParameteri
argument_list|(
name|program
argument_list|,
name|pname
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramParameteri
argument_list|)
argument_list|(
name|program
argument_list|,
name|pname
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveReadBuffer
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveReadBuffer
parameter_list|(
name|GLenum
name|src
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ReadBuffer
argument_list|(
name|src
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ReadBuffer
argument_list|)
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveRenderbufferStorageMultisample
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveRenderbufferStorageMultisample
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|samples
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|RenderbufferStorageMultisample
argument_list|(
name|target
argument_list|,
name|samples
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
name|ResolveEXT
operator||
name|ResolveANGLE
operator||
name|ResolveNV
argument_list|,
name|RenderbufferStorageMultisample
argument_list|)
argument_list|(
name|target
argument_list|,
name|samples
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveResumeTransformFeedback
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveResumeTransformFeedback
parameter_list|()
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ResumeTransformFeedback
argument_list|()
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ResumeTransformFeedback
argument_list|)
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveSamplerParameterf
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveSamplerParameterf
parameter_list|(
name|GLuint
name|sampler
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLfloat
name|param
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|SamplerParameterf
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|SamplerParameterf
argument_list|)
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveSamplerParameterfv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveSamplerParameterfv
parameter_list|(
name|GLuint
name|sampler
parameter_list|,
name|GLenum
name|pname
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|param
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|SamplerParameterfv
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|SamplerParameterfv
argument_list|)
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveSamplerParameteri
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveSamplerParameteri
parameter_list|(
name|GLuint
name|sampler
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
name|param
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|SamplerParameteri
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|SamplerParameteri
argument_list|)
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveSamplerParameteriv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveSamplerParameteriv
parameter_list|(
name|GLuint
name|sampler
parameter_list|,
name|GLenum
name|pname
parameter_list|,
specifier|const
name|GLint
modifier|*
name|param
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|SamplerParameteriv
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|SamplerParameteriv
argument_list|)
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveTexImage3D
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveTexImage3D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|TexImage3D
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|border
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|TexImage3D
argument_list|)
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|border
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveTexStorage2D
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveTexStorage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|TexStorage2D
argument_list|(
name|target
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|TexStorage2D
argument_list|)
argument_list|(
name|target
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveTexStorage3D
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveTexStorage3D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|TexStorage3D
argument_list|(
name|target
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|TexStorage3D
argument_list|)
argument_list|(
name|target
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveTexSubImage3D
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveTexSubImage3D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|TexSubImage3D
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|TexSubImage3D
argument_list|)
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveTransformFeedbackVaryings
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveTransformFeedbackVaryings
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLchar
modifier|*
specifier|const
modifier|*
name|varyings
parameter_list|,
name|GLenum
name|bufferMode
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|TransformFeedbackVaryings
argument_list|(
name|program
argument_list|,
name|count
argument_list|,
name|varyings
argument_list|,
name|bufferMode
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|TransformFeedbackVaryings
argument_list|)
argument_list|(
name|program
argument_list|,
name|count
argument_list|,
name|varyings
argument_list|,
name|bufferMode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform1ui
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform1ui
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLuint
name|v0
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|Uniform1ui
argument_list|(
name|location
argument_list|,
name|v0
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform1ui
argument_list|)
argument_list|(
name|location
argument_list|,
name|v0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform1uiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform1uiv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|Uniform1uiv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform1uiv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform2ui
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform2ui
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLuint
name|v0
parameter_list|,
name|GLuint
name|v1
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|Uniform2ui
argument_list|(
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform2ui
argument_list|)
argument_list|(
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform2uiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform2uiv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|Uniform2uiv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform2uiv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform3ui
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform3ui
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLuint
name|v0
parameter_list|,
name|GLuint
name|v1
parameter_list|,
name|GLuint
name|v2
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|Uniform3ui
argument_list|(
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform3ui
argument_list|)
argument_list|(
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform3uiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform3uiv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|Uniform3uiv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform3uiv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform4ui
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform4ui
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLuint
name|v0
parameter_list|,
name|GLuint
name|v1
parameter_list|,
name|GLuint
name|v2
parameter_list|,
name|GLuint
name|v3
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|Uniform4ui
argument_list|(
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|,
name|v3
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform4ui
argument_list|)
argument_list|(
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|,
name|v3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniform4uiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniform4uiv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|Uniform4uiv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|Uniform4uiv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniformBlockBinding
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniformBlockBinding
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|uniformBlockIndex
parameter_list|,
name|GLuint
name|uniformBlockBinding
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|UniformBlockBinding
argument_list|(
name|program
argument_list|,
name|uniformBlockIndex
argument_list|,
name|uniformBlockBinding
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|UniformBlockBinding
argument_list|)
argument_list|(
name|program
argument_list|,
name|uniformBlockIndex
argument_list|,
name|uniformBlockBinding
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniformMatrix2x3fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniformMatrix2x3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|UniformMatrix2x3fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|UniformMatrix2x3fv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniformMatrix2x4fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniformMatrix2x4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|UniformMatrix2x4fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|UniformMatrix2x4fv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniformMatrix3x2fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniformMatrix3x2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|UniformMatrix3x2fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|UniformMatrix3x2fv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniformMatrix3x4fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniformMatrix3x4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|UniformMatrix3x4fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|UniformMatrix3x4fv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniformMatrix4x2fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniformMatrix4x2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|UniformMatrix4x2fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|UniformMatrix4x2fv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUniformMatrix4x3fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUniformMatrix4x3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|UniformMatrix4x3fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|UniformMatrix4x3fv
argument_list|)
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUnmapBuffer
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfResolveUnmapBuffer
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
return|return
name|qgles3Helper
argument_list|()
operator|->
name|UnmapBuffer
argument_list|(
name|target
argument_list|)
return|;
else|else
name|RESOLVE_FUNC
argument_list|(
name|GLboolean
argument_list|,
name|ResolveOES
argument_list|,
name|UnmapBuffer
argument_list|)
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttribDivisor
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttribDivisor
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLuint
name|divisor
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|VertexAttribDivisor
argument_list|(
name|index
argument_list|,
name|divisor
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttribDivisor
argument_list|)
argument_list|(
name|index
argument_list|,
name|divisor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttribI4i
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttribI4i
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLint
name|z
parameter_list|,
name|GLint
name|w
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|VertexAttribI4i
argument_list|(
name|index
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttribI4i
argument_list|)
argument_list|(
name|index
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttribI4iv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttribI4iv
parameter_list|(
name|GLuint
name|index
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|VertexAttribI4iv
argument_list|(
name|index
argument_list|,
name|v
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttribI4iv
argument_list|)
argument_list|(
name|index
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttribI4ui
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttribI4ui
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLuint
name|x
parameter_list|,
name|GLuint
name|y
parameter_list|,
name|GLuint
name|z
parameter_list|,
name|GLuint
name|w
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|VertexAttribI4ui
argument_list|(
name|index
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttribI4ui
argument_list|)
argument_list|(
name|index
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttribI4uiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttribI4uiv
parameter_list|(
name|GLuint
name|index
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|v
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|VertexAttribI4uiv
argument_list|(
name|index
argument_list|,
name|v
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttribI4uiv
argument_list|)
argument_list|(
name|index
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttribIPointer
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttribIPointer
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLint
name|size
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLsizei
name|stride
parameter_list|,
specifier|const
name|void
modifier|*
name|pointer
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|VertexAttribIPointer
argument_list|(
name|index
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|stride
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttribIPointer
argument_list|)
argument_list|(
name|index
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|stride
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveWaitSync
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveWaitSync
parameter_list|(
name|GLsync
name|sync
parameter_list|,
name|GLbitfield
name|flags
parameter_list|,
name|GLuint64
name|timeout
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|0
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|WaitSync
argument_list|(
name|sync
argument_list|,
name|flags
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|WaitSync
argument_list|)
argument_list|(
name|sync
argument_list|,
name|flags
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveActiveShaderProgram
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveActiveShaderProgram
parameter_list|(
name|GLuint
name|pipeline
parameter_list|,
name|GLuint
name|program
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ActiveShaderProgram
argument_list|(
name|pipeline
argument_list|,
name|program
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ActiveShaderProgram
argument_list|)
argument_list|(
name|pipeline
argument_list|,
name|program
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBindImageTexture
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBindImageTexture
parameter_list|(
name|GLuint
name|unit
parameter_list|,
name|GLuint
name|texture
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLboolean
name|layered
parameter_list|,
name|GLint
name|layer
parameter_list|,
name|GLenum
name|access
parameter_list|,
name|GLenum
name|format
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|BindImageTexture
argument_list|(
name|unit
argument_list|,
name|texture
argument_list|,
name|level
argument_list|,
name|layered
argument_list|,
name|layer
argument_list|,
name|access
argument_list|,
name|format
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|BindImageTexture
argument_list|)
argument_list|(
name|unit
argument_list|,
name|texture
argument_list|,
name|level
argument_list|,
name|layered
argument_list|,
name|layer
argument_list|,
name|access
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBindProgramPipeline
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBindProgramPipeline
parameter_list|(
name|GLuint
name|pipeline
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|BindProgramPipeline
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|BindProgramPipeline
argument_list|)
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveBindVertexBuffer
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveBindVertexBuffer
parameter_list|(
name|GLuint
name|bindingindex
parameter_list|,
name|GLuint
name|buffer
parameter_list|,
name|GLintptr
name|offset
parameter_list|,
name|GLsizei
name|stride
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|BindVertexBuffer
argument_list|(
name|bindingindex
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|stride
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|BindVertexBuffer
argument_list|)
argument_list|(
name|bindingindex
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|stride
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveCreateShaderProgramv
specifier|static
name|GLuint
name|QOPENGLF_APIENTRY
name|qopenglfResolveCreateShaderProgramv
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLchar
modifier|*
specifier|const
modifier|*
name|strings
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
return|return
name|qgles3Helper
argument_list|()
operator|->
name|CreateShaderProgramv
argument_list|(
name|type
argument_list|,
name|count
argument_list|,
name|strings
argument_list|)
return|;
else|else
name|RESOLVE_FUNC
argument_list|(
name|GLuint
argument_list|,
literal|0
argument_list|,
name|CreateShaderProgramv
argument_list|)
argument_list|(
name|type
argument_list|,
name|count
argument_list|,
name|strings
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDeleteProgramPipelines
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDeleteProgramPipelines
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|pipelines
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|DeleteProgramPipelines
argument_list|(
name|n
argument_list|,
name|pipelines
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DeleteProgramPipelines
argument_list|)
argument_list|(
name|n
argument_list|,
name|pipelines
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDispatchCompute
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDispatchCompute
parameter_list|(
name|GLuint
name|num_groups_x
parameter_list|,
name|GLuint
name|num_groups_y
parameter_list|,
name|GLuint
name|num_groups_z
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|DispatchCompute
argument_list|(
name|num_groups_x
argument_list|,
name|num_groups_y
argument_list|,
name|num_groups_z
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DispatchCompute
argument_list|)
argument_list|(
name|num_groups_x
argument_list|,
name|num_groups_y
argument_list|,
name|num_groups_z
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDispatchComputeIndirect
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDispatchComputeIndirect
parameter_list|(
name|GLintptr
name|indirect
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|DispatchComputeIndirect
argument_list|(
name|indirect
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DispatchComputeIndirect
argument_list|)
argument_list|(
name|indirect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDrawArraysIndirect
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDrawArraysIndirect
parameter_list|(
name|GLenum
name|mode
parameter_list|,
specifier|const
name|void
modifier|*
name|indirect
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|DrawArraysIndirect
argument_list|(
name|mode
argument_list|,
name|indirect
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DrawArraysIndirect
argument_list|)
argument_list|(
name|mode
argument_list|,
name|indirect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveDrawElementsIndirect
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveDrawElementsIndirect
parameter_list|(
name|GLenum
name|mode
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|void
modifier|*
name|indirect
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|DrawElementsIndirect
argument_list|(
name|mode
argument_list|,
name|type
argument_list|,
name|indirect
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|DrawElementsIndirect
argument_list|)
argument_list|(
name|mode
argument_list|,
name|type
argument_list|,
name|indirect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveFramebufferParameteri
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveFramebufferParameteri
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
name|param
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|FramebufferParameteri
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|FramebufferParameteri
argument_list|)
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGenProgramPipelines
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGenProgramPipelines
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|pipelines
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GenProgramPipelines
argument_list|(
name|n
argument_list|,
name|pipelines
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GenProgramPipelines
argument_list|)
argument_list|(
name|n
argument_list|,
name|pipelines
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetBooleani_v
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetBooleani_v
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLboolean
modifier|*
name|data
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetBooleani_v
argument_list|(
name|target
argument_list|,
name|index
argument_list|,
name|data
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetBooleani_v
argument_list|)
argument_list|(
name|target
argument_list|,
name|index
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetFramebufferParameteriv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetFramebufferParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetFramebufferParameteriv
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetFramebufferParameteriv
argument_list|)
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetMultisamplefv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetMultisamplefv
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLfloat
modifier|*
name|val
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetMultisamplefv
argument_list|(
name|pname
argument_list|,
name|index
argument_list|,
name|val
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetMultisamplefv
argument_list|)
argument_list|(
name|pname
argument_list|,
name|index
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetProgramInterfaceiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetProgramInterfaceiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLenum
name|programInterface
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetProgramInterfaceiv
argument_list|(
name|program
argument_list|,
name|programInterface
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetProgramInterfaceiv
argument_list|)
argument_list|(
name|program
argument_list|,
name|programInterface
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetProgramPipelineInfoLog
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetProgramPipelineInfoLog
parameter_list|(
name|GLuint
name|pipeline
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLchar
modifier|*
name|infoLog
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetProgramPipelineInfoLog
argument_list|(
name|pipeline
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|infoLog
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetProgramPipelineInfoLog
argument_list|)
argument_list|(
name|pipeline
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|infoLog
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetProgramPipelineiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetProgramPipelineiv
parameter_list|(
name|GLuint
name|pipeline
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetProgramPipelineiv
argument_list|(
name|pipeline
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetProgramPipelineiv
argument_list|)
argument_list|(
name|pipeline
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetProgramResourceIndex
specifier|static
name|GLuint
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetProgramResourceIndex
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLenum
name|programInterface
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|name
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
return|return
name|qgles3Helper
argument_list|()
operator|->
name|GetProgramResourceIndex
argument_list|(
name|program
argument_list|,
name|programInterface
argument_list|,
name|name
argument_list|)
return|;
else|else
name|RESOLVE_FUNC
argument_list|(
name|GLuint
argument_list|,
literal|0
argument_list|,
name|GetProgramResourceIndex
argument_list|)
argument_list|(
name|program
argument_list|,
name|programInterface
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetProgramResourceLocation
specifier|static
name|GLint
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetProgramResourceLocation
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLenum
name|programInterface
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|name
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
return|return
name|qgles3Helper
argument_list|()
operator|->
name|GetProgramResourceLocation
argument_list|(
name|program
argument_list|,
name|programInterface
argument_list|,
name|name
argument_list|)
return|;
else|else
name|RESOLVE_FUNC
argument_list|(
name|GLint
argument_list|,
literal|0
argument_list|,
name|GetProgramResourceLocation
argument_list|)
argument_list|(
name|program
argument_list|,
name|programInterface
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetProgramResourceName
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetProgramResourceName
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLenum
name|programInterface
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLchar
modifier|*
name|name
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetProgramResourceName
argument_list|(
name|program
argument_list|,
name|programInterface
argument_list|,
name|index
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|name
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetProgramResourceName
argument_list|)
argument_list|(
name|program
argument_list|,
name|programInterface
argument_list|,
name|index
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetProgramResourceiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetProgramResourceiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLenum
name|programInterface
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|propCount
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|props
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetProgramResourceiv
argument_list|(
name|program
argument_list|,
name|programInterface
argument_list|,
name|index
argument_list|,
name|propCount
argument_list|,
name|props
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetProgramResourceiv
argument_list|)
argument_list|(
name|program
argument_list|,
name|programInterface
argument_list|,
name|index
argument_list|,
name|propCount
argument_list|,
name|props
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetTexLevelParameterfv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetTexLevelParameterfv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetTexLevelParameterfv
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetTexLevelParameterfv
argument_list|)
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveGetTexLevelParameteriv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveGetTexLevelParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|GetTexLevelParameteriv
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|GetTexLevelParameteriv
argument_list|)
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveIsProgramPipeline
specifier|static
name|GLboolean
name|QOPENGLF_APIENTRY
name|qopenglfResolveIsProgramPipeline
parameter_list|(
name|GLuint
name|pipeline
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
return|return
name|qgles3Helper
argument_list|()
operator|->
name|IsProgramPipeline
argument_list|(
name|pipeline
argument_list|)
return|;
else|else
name|RESOLVE_FUNC
argument_list|(
name|GLboolean
argument_list|,
literal|0
argument_list|,
name|IsProgramPipeline
argument_list|)
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveMemoryBarrier
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveMemoryBarrier
parameter_list|(
name|GLbitfield
name|barriers
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|MemoryBarrierFunc
argument_list|(
name|barriers
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|MemoryBarrierFunc
argument_list|)
argument_list|(
name|barriers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveMemoryBarrierByRegion
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveMemoryBarrierByRegion
parameter_list|(
name|GLbitfield
name|barriers
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|MemoryBarrierByRegion
argument_list|(
name|barriers
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|MemoryBarrierByRegion
argument_list|)
argument_list|(
name|barriers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform1f
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform1f
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLfloat
name|v0
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform1f
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform1f
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform1fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform1fv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform1fv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform1fv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform1i
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform1i
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLint
name|v0
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform1i
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform1i
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform1iv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform1iv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform1iv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform1iv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform1ui
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform1ui
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLuint
name|v0
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform1ui
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform1ui
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform1uiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform1uiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform1uiv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform1uiv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform2f
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform2f
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLfloat
name|v0
parameter_list|,
name|GLfloat
name|v1
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform2f
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform2f
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform2fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform2fv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform2fv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform2fv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform2i
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform2i
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLint
name|v0
parameter_list|,
name|GLint
name|v1
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform2i
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform2i
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform2iv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform2iv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform2iv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform2iv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform2ui
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform2ui
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLuint
name|v0
parameter_list|,
name|GLuint
name|v1
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform2ui
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform2ui
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform2uiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform2uiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform2uiv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform2uiv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform3f
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform3f
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLfloat
name|v0
parameter_list|,
name|GLfloat
name|v1
parameter_list|,
name|GLfloat
name|v2
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform3f
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform3f
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform3fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform3fv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform3fv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform3fv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform3i
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform3i
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLint
name|v0
parameter_list|,
name|GLint
name|v1
parameter_list|,
name|GLint
name|v2
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform3i
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform3i
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform3iv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform3iv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform3iv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform3iv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform3ui
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform3ui
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLuint
name|v0
parameter_list|,
name|GLuint
name|v1
parameter_list|,
name|GLuint
name|v2
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform3ui
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform3ui
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform3uiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform3uiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform3uiv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform3uiv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform4f
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform4f
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLfloat
name|v0
parameter_list|,
name|GLfloat
name|v1
parameter_list|,
name|GLfloat
name|v2
parameter_list|,
name|GLfloat
name|v3
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform4f
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|,
name|v3
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform4f
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|,
name|v3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform4fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform4fv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform4fv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform4fv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform4i
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform4i
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLint
name|v0
parameter_list|,
name|GLint
name|v1
parameter_list|,
name|GLint
name|v2
parameter_list|,
name|GLint
name|v3
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform4i
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|,
name|v3
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform4i
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|,
name|v3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform4iv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform4iv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform4iv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform4iv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform4ui
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform4ui
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLuint
name|v0
parameter_list|,
name|GLuint
name|v1
parameter_list|,
name|GLuint
name|v2
parameter_list|,
name|GLuint
name|v3
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform4ui
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|,
name|v3
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform4ui
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|,
name|v3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniform4uiv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniform4uiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniform4uiv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniform4uiv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniformMatrix2fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniformMatrix2fv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniformMatrix2fv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniformMatrix2fv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniformMatrix2x3fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniformMatrix2x3fv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniformMatrix2x3fv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniformMatrix2x3fv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniformMatrix2x4fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniformMatrix2x4fv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniformMatrix2x4fv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniformMatrix2x4fv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniformMatrix3fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniformMatrix3fv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniformMatrix3fv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniformMatrix3fv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniformMatrix3x2fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniformMatrix3x2fv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniformMatrix3x2fv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniformMatrix3x2fv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniformMatrix3x4fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniformMatrix3x4fv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniformMatrix3x4fv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniformMatrix3x4fv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniformMatrix4fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniformMatrix4fv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniformMatrix4fv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniformMatrix4fv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniformMatrix4x2fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniformMatrix4x2fv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniformMatrix4x2fv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniformMatrix4x2fv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveProgramUniformMatrix4x3fv
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveProgramUniformMatrix4x3fv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ProgramUniformMatrix4x3fv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ProgramUniformMatrix4x3fv
argument_list|)
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveSampleMaski
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveSampleMaski
parameter_list|(
name|GLuint
name|maskNumber
parameter_list|,
name|GLbitfield
name|mask
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|SampleMaski
argument_list|(
name|maskNumber
argument_list|,
name|mask
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|SampleMaski
argument_list|)
argument_list|(
name|maskNumber
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveTexStorage2DMultisample
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveTexStorage2DMultisample
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|samples
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLboolean
name|fixedsamplelocations
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|TexStorage2DMultisample
argument_list|(
name|target
argument_list|,
name|samples
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|fixedsamplelocations
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|TexStorage2DMultisample
argument_list|)
argument_list|(
name|target
argument_list|,
name|samples
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|fixedsamplelocations
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveUseProgramStages
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveUseProgramStages
parameter_list|(
name|GLuint
name|pipeline
parameter_list|,
name|GLbitfield
name|stages
parameter_list|,
name|GLuint
name|program
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|UseProgramStages
argument_list|(
name|pipeline
argument_list|,
name|stages
argument_list|,
name|program
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|UseProgramStages
argument_list|)
argument_list|(
name|pipeline
argument_list|,
name|stages
argument_list|,
name|program
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveValidateProgramPipeline
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveValidateProgramPipeline
parameter_list|(
name|GLuint
name|pipeline
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|ValidateProgramPipeline
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|ValidateProgramPipeline
argument_list|)
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttribBinding
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttribBinding
parameter_list|(
name|GLuint
name|attribindex
parameter_list|,
name|GLuint
name|bindingindex
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|VertexAttribBinding
argument_list|(
name|attribindex
argument_list|,
name|bindingindex
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttribBinding
argument_list|)
argument_list|(
name|attribindex
argument_list|,
name|bindingindex
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttribFormat
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttribFormat
parameter_list|(
name|GLuint
name|attribindex
parameter_list|,
name|GLint
name|size
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLboolean
name|normalized
parameter_list|,
name|GLuint
name|relativeoffset
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|VertexAttribFormat
argument_list|(
name|attribindex
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|normalized
argument_list|,
name|relativeoffset
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttribFormat
argument_list|)
argument_list|(
name|attribindex
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|normalized
argument_list|,
name|relativeoffset
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexAttribIFormat
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexAttribIFormat
parameter_list|(
name|GLuint
name|attribindex
parameter_list|,
name|GLint
name|size
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLuint
name|relativeoffset
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|VertexAttribIFormat
argument_list|(
name|attribindex
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|relativeoffset
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexAttribIFormat
argument_list|)
argument_list|(
name|attribindex
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|relativeoffset
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qopenglfResolveVertexBindingDivisor
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qopenglfResolveVertexBindingDivisor
parameter_list|(
name|GLuint
name|bindingindex
parameter_list|,
name|GLuint
name|divisor
parameter_list|)
block|{
if|if
condition|(
name|isES3
argument_list|(
literal|1
argument_list|)
condition|)
name|qgles3Helper
argument_list|()
operator|->
name|VertexBindingDivisor
argument_list|(
name|bindingindex
argument_list|,
name|divisor
argument_list|)
expr_stmt|;
else|else
name|RESOLVE_FUNC_VOID
argument_list|(
literal|0
argument_list|,
name|VertexBindingDivisor
argument_list|)
argument_list|(
name|bindingindex
argument_list|,
name|divisor
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Constructs a default function resolver. The resolver cannot be used until     \l {QOpenGLFunctions::}{initializeOpenGLFunctions()} is called to specify     the context. */
end_comment
begin_constructor
DECL|function|QOpenGLExtraFunctions
name|QOpenGLExtraFunctions
operator|::
name|QOpenGLExtraFunctions
parameter_list|()
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a function resolver for context. If \a context is null, then     the resolver will be created for the current QOpenGLContext.      The context or another context in the group must be current.      An object constructed in this way can only be used with context and other     contexts that share with it. Use \l {QOpenGLFunctions::}     {initializeOpenGLFunctions()} to change the object's context association. */
end_comment
begin_constructor
DECL|function|QOpenGLExtraFunctions
name|QOpenGLExtraFunctions
operator|::
name|QOpenGLExtraFunctions
parameter_list|(
name|QOpenGLContext
modifier|*
name|context
parameter_list|)
member_init_list|:
name|QOpenGLFunctions
argument_list|(
name|context
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|QOpenGLExtraFunctionsPrivate
name|QOpenGLExtraFunctionsPrivate
operator|::
name|QOpenGLExtraFunctionsPrivate
parameter_list|(
name|QOpenGLContext
modifier|*
name|ctx
parameter_list|)
member_init_list|:
name|QOpenGLFunctionsPrivate
argument_list|(
name|ctx
argument_list|)
block|{
name|ReadBuffer
operator|=
name|qopenglfResolveReadBuffer
expr_stmt|;
name|DrawRangeElements
operator|=
name|qopenglfResolveDrawRangeElements
expr_stmt|;
name|TexImage3D
operator|=
name|qopenglfResolveTexImage3D
expr_stmt|;
name|TexSubImage3D
operator|=
name|qopenglfResolveTexSubImage3D
expr_stmt|;
name|CopyTexSubImage3D
operator|=
name|qopenglfResolveCopyTexSubImage3D
expr_stmt|;
name|CompressedTexImage3D
operator|=
name|qopenglfResolveCompressedTexImage3D
expr_stmt|;
name|CompressedTexSubImage3D
operator|=
name|qopenglfResolveCompressedTexSubImage3D
expr_stmt|;
name|GenQueries
operator|=
name|qopenglfResolveGenQueries
expr_stmt|;
name|DeleteQueries
operator|=
name|qopenglfResolveDeleteQueries
expr_stmt|;
name|IsQuery
operator|=
name|qopenglfResolveIsQuery
expr_stmt|;
name|BeginQuery
operator|=
name|qopenglfResolveBeginQuery
expr_stmt|;
name|EndQuery
operator|=
name|qopenglfResolveEndQuery
expr_stmt|;
name|GetQueryiv
operator|=
name|qopenglfResolveGetQueryiv
expr_stmt|;
name|GetQueryObjectuiv
operator|=
name|qopenglfResolveGetQueryObjectuiv
expr_stmt|;
name|UnmapBuffer
operator|=
name|qopenglfResolveUnmapBuffer
expr_stmt|;
name|GetBufferPointerv
operator|=
name|qopenglfResolveGetBufferPointerv
expr_stmt|;
name|DrawBuffers
operator|=
name|qopenglfResolveDrawBuffers
expr_stmt|;
name|UniformMatrix2x3fv
operator|=
name|qopenglfResolveUniformMatrix2x3fv
expr_stmt|;
name|UniformMatrix3x2fv
operator|=
name|qopenglfResolveUniformMatrix3x2fv
expr_stmt|;
name|UniformMatrix2x4fv
operator|=
name|qopenglfResolveUniformMatrix2x4fv
expr_stmt|;
name|UniformMatrix4x2fv
operator|=
name|qopenglfResolveUniformMatrix4x2fv
expr_stmt|;
name|UniformMatrix3x4fv
operator|=
name|qopenglfResolveUniformMatrix3x4fv
expr_stmt|;
name|UniformMatrix4x3fv
operator|=
name|qopenglfResolveUniformMatrix4x3fv
expr_stmt|;
name|BlitFramebuffer
operator|=
name|qopenglfResolveBlitFramebuffer
expr_stmt|;
name|RenderbufferStorageMultisample
operator|=
name|qopenglfResolveRenderbufferStorageMultisample
expr_stmt|;
name|FramebufferTextureLayer
operator|=
name|qopenglfResolveFramebufferTextureLayer
expr_stmt|;
name|MapBufferRange
operator|=
name|qopenglfResolveMapBufferRange
expr_stmt|;
name|FlushMappedBufferRange
operator|=
name|qopenglfResolveFlushMappedBufferRange
expr_stmt|;
name|BindVertexArray
operator|=
name|qopenglfResolveBindVertexArray
expr_stmt|;
name|DeleteVertexArrays
operator|=
name|qopenglfResolveDeleteVertexArrays
expr_stmt|;
name|GenVertexArrays
operator|=
name|qopenglfResolveGenVertexArrays
expr_stmt|;
name|IsVertexArray
operator|=
name|qopenglfResolveIsVertexArray
expr_stmt|;
name|GetIntegeri_v
operator|=
name|qopenglfResolveGetIntegeri_v
expr_stmt|;
name|BeginTransformFeedback
operator|=
name|qopenglfResolveBeginTransformFeedback
expr_stmt|;
name|EndTransformFeedback
operator|=
name|qopenglfResolveEndTransformFeedback
expr_stmt|;
name|BindBufferRange
operator|=
name|qopenglfResolveBindBufferRange
expr_stmt|;
name|BindBufferBase
operator|=
name|qopenglfResolveBindBufferBase
expr_stmt|;
name|TransformFeedbackVaryings
operator|=
name|qopenglfResolveTransformFeedbackVaryings
expr_stmt|;
name|GetTransformFeedbackVarying
operator|=
name|qopenglfResolveGetTransformFeedbackVarying
expr_stmt|;
name|VertexAttribIPointer
operator|=
name|qopenglfResolveVertexAttribIPointer
expr_stmt|;
name|GetVertexAttribIiv
operator|=
name|qopenglfResolveGetVertexAttribIiv
expr_stmt|;
name|GetVertexAttribIuiv
operator|=
name|qopenglfResolveGetVertexAttribIuiv
expr_stmt|;
name|VertexAttribI4i
operator|=
name|qopenglfResolveVertexAttribI4i
expr_stmt|;
name|VertexAttribI4ui
operator|=
name|qopenglfResolveVertexAttribI4ui
expr_stmt|;
name|VertexAttribI4iv
operator|=
name|qopenglfResolveVertexAttribI4iv
expr_stmt|;
name|VertexAttribI4uiv
operator|=
name|qopenglfResolveVertexAttribI4uiv
expr_stmt|;
name|GetUniformuiv
operator|=
name|qopenglfResolveGetUniformuiv
expr_stmt|;
name|GetFragDataLocation
operator|=
name|qopenglfResolveGetFragDataLocation
expr_stmt|;
name|Uniform1ui
operator|=
name|qopenglfResolveUniform1ui
expr_stmt|;
name|Uniform2ui
operator|=
name|qopenglfResolveUniform2ui
expr_stmt|;
name|Uniform3ui
operator|=
name|qopenglfResolveUniform3ui
expr_stmt|;
name|Uniform4ui
operator|=
name|qopenglfResolveUniform4ui
expr_stmt|;
name|Uniform1uiv
operator|=
name|qopenglfResolveUniform1uiv
expr_stmt|;
name|Uniform2uiv
operator|=
name|qopenglfResolveUniform2uiv
expr_stmt|;
name|Uniform3uiv
operator|=
name|qopenglfResolveUniform3uiv
expr_stmt|;
name|Uniform4uiv
operator|=
name|qopenglfResolveUniform4uiv
expr_stmt|;
name|ClearBufferiv
operator|=
name|qopenglfResolveClearBufferiv
expr_stmt|;
name|ClearBufferuiv
operator|=
name|qopenglfResolveClearBufferuiv
expr_stmt|;
name|ClearBufferfv
operator|=
name|qopenglfResolveClearBufferfv
expr_stmt|;
name|ClearBufferfi
operator|=
name|qopenglfResolveClearBufferfi
expr_stmt|;
name|GetStringi
operator|=
name|qopenglfResolveGetStringi
expr_stmt|;
name|CopyBufferSubData
operator|=
name|qopenglfResolveCopyBufferSubData
expr_stmt|;
name|GetUniformIndices
operator|=
name|qopenglfResolveGetUniformIndices
expr_stmt|;
name|GetActiveUniformsiv
operator|=
name|qopenglfResolveGetActiveUniformsiv
expr_stmt|;
name|GetUniformBlockIndex
operator|=
name|qopenglfResolveGetUniformBlockIndex
expr_stmt|;
name|GetActiveUniformBlockiv
operator|=
name|qopenglfResolveGetActiveUniformBlockiv
expr_stmt|;
name|GetActiveUniformBlockName
operator|=
name|qopenglfResolveGetActiveUniformBlockName
expr_stmt|;
name|UniformBlockBinding
operator|=
name|qopenglfResolveUniformBlockBinding
expr_stmt|;
name|DrawArraysInstanced
operator|=
name|qopenglfResolveDrawArraysInstanced
expr_stmt|;
name|DrawElementsInstanced
operator|=
name|qopenglfResolveDrawElementsInstanced
expr_stmt|;
name|FenceSync
operator|=
name|qopenglfResolveFenceSync
expr_stmt|;
name|IsSync
operator|=
name|qopenglfResolveIsSync
expr_stmt|;
name|DeleteSync
operator|=
name|qopenglfResolveDeleteSync
expr_stmt|;
name|ClientWaitSync
operator|=
name|qopenglfResolveClientWaitSync
expr_stmt|;
name|WaitSync
operator|=
name|qopenglfResolveWaitSync
expr_stmt|;
name|GetInteger64v
operator|=
name|qopenglfResolveGetInteger64v
expr_stmt|;
name|GetSynciv
operator|=
name|qopenglfResolveGetSynciv
expr_stmt|;
name|GetInteger64i_v
operator|=
name|qopenglfResolveGetInteger64i_v
expr_stmt|;
name|GetBufferParameteri64v
operator|=
name|qopenglfResolveGetBufferParameteri64v
expr_stmt|;
name|GenSamplers
operator|=
name|qopenglfResolveGenSamplers
expr_stmt|;
name|DeleteSamplers
operator|=
name|qopenglfResolveDeleteSamplers
expr_stmt|;
name|IsSampler
operator|=
name|qopenglfResolveIsSampler
expr_stmt|;
name|BindSampler
operator|=
name|qopenglfResolveBindSampler
expr_stmt|;
name|SamplerParameteri
operator|=
name|qopenglfResolveSamplerParameteri
expr_stmt|;
name|SamplerParameteriv
operator|=
name|qopenglfResolveSamplerParameteriv
expr_stmt|;
name|SamplerParameterf
operator|=
name|qopenglfResolveSamplerParameterf
expr_stmt|;
name|SamplerParameterfv
operator|=
name|qopenglfResolveSamplerParameterfv
expr_stmt|;
name|GetSamplerParameteriv
operator|=
name|qopenglfResolveGetSamplerParameteriv
expr_stmt|;
name|GetSamplerParameterfv
operator|=
name|qopenglfResolveGetSamplerParameterfv
expr_stmt|;
name|VertexAttribDivisor
operator|=
name|qopenglfResolveVertexAttribDivisor
expr_stmt|;
name|BindTransformFeedback
operator|=
name|qopenglfResolveBindTransformFeedback
expr_stmt|;
name|DeleteTransformFeedbacks
operator|=
name|qopenglfResolveDeleteTransformFeedbacks
expr_stmt|;
name|GenTransformFeedbacks
operator|=
name|qopenglfResolveGenTransformFeedbacks
expr_stmt|;
name|IsTransformFeedback
operator|=
name|qopenglfResolveIsTransformFeedback
expr_stmt|;
name|PauseTransformFeedback
operator|=
name|qopenglfResolvePauseTransformFeedback
expr_stmt|;
name|ResumeTransformFeedback
operator|=
name|qopenglfResolveResumeTransformFeedback
expr_stmt|;
name|GetProgramBinary
operator|=
name|qopenglfResolveGetProgramBinary
expr_stmt|;
name|ProgramBinary
operator|=
name|qopenglfResolveProgramBinary
expr_stmt|;
name|ProgramParameteri
operator|=
name|qopenglfResolveProgramParameteri
expr_stmt|;
name|InvalidateFramebuffer
operator|=
name|qopenglfResolveInvalidateFramebuffer
expr_stmt|;
name|InvalidateSubFramebuffer
operator|=
name|qopenglfResolveInvalidateSubFramebuffer
expr_stmt|;
name|TexStorage2D
operator|=
name|qopenglfResolveTexStorage2D
expr_stmt|;
name|TexStorage3D
operator|=
name|qopenglfResolveTexStorage3D
expr_stmt|;
name|GetInternalformativ
operator|=
name|qopenglfResolveGetInternalformativ
expr_stmt|;
name|DispatchCompute
operator|=
name|qopenglfResolveDispatchCompute
expr_stmt|;
name|DispatchComputeIndirect
operator|=
name|qopenglfResolveDispatchComputeIndirect
expr_stmt|;
name|DrawArraysIndirect
operator|=
name|qopenglfResolveDrawArraysIndirect
expr_stmt|;
name|DrawElementsIndirect
operator|=
name|qopenglfResolveDrawElementsIndirect
expr_stmt|;
name|FramebufferParameteri
operator|=
name|qopenglfResolveFramebufferParameteri
expr_stmt|;
name|GetFramebufferParameteriv
operator|=
name|qopenglfResolveGetFramebufferParameteriv
expr_stmt|;
name|GetProgramInterfaceiv
operator|=
name|qopenglfResolveGetProgramInterfaceiv
expr_stmt|;
name|GetProgramResourceIndex
operator|=
name|qopenglfResolveGetProgramResourceIndex
expr_stmt|;
name|GetProgramResourceName
operator|=
name|qopenglfResolveGetProgramResourceName
expr_stmt|;
name|GetProgramResourceiv
operator|=
name|qopenglfResolveGetProgramResourceiv
expr_stmt|;
name|GetProgramResourceLocation
operator|=
name|qopenglfResolveGetProgramResourceLocation
expr_stmt|;
name|UseProgramStages
operator|=
name|qopenglfResolveUseProgramStages
expr_stmt|;
name|ActiveShaderProgram
operator|=
name|qopenglfResolveActiveShaderProgram
expr_stmt|;
name|CreateShaderProgramv
operator|=
name|qopenglfResolveCreateShaderProgramv
expr_stmt|;
name|BindProgramPipeline
operator|=
name|qopenglfResolveBindProgramPipeline
expr_stmt|;
name|DeleteProgramPipelines
operator|=
name|qopenglfResolveDeleteProgramPipelines
expr_stmt|;
name|GenProgramPipelines
operator|=
name|qopenglfResolveGenProgramPipelines
expr_stmt|;
name|IsProgramPipeline
operator|=
name|qopenglfResolveIsProgramPipeline
expr_stmt|;
name|GetProgramPipelineiv
operator|=
name|qopenglfResolveGetProgramPipelineiv
expr_stmt|;
name|ProgramUniform1i
operator|=
name|qopenglfResolveProgramUniform1i
expr_stmt|;
name|ProgramUniform2i
operator|=
name|qopenglfResolveProgramUniform2i
expr_stmt|;
name|ProgramUniform3i
operator|=
name|qopenglfResolveProgramUniform3i
expr_stmt|;
name|ProgramUniform4i
operator|=
name|qopenglfResolveProgramUniform4i
expr_stmt|;
name|ProgramUniform1ui
operator|=
name|qopenglfResolveProgramUniform1ui
expr_stmt|;
name|ProgramUniform2ui
operator|=
name|qopenglfResolveProgramUniform2ui
expr_stmt|;
name|ProgramUniform3ui
operator|=
name|qopenglfResolveProgramUniform3ui
expr_stmt|;
name|ProgramUniform4ui
operator|=
name|qopenglfResolveProgramUniform4ui
expr_stmt|;
name|ProgramUniform1f
operator|=
name|qopenglfResolveProgramUniform1f
expr_stmt|;
name|ProgramUniform2f
operator|=
name|qopenglfResolveProgramUniform2f
expr_stmt|;
name|ProgramUniform3f
operator|=
name|qopenglfResolveProgramUniform3f
expr_stmt|;
name|ProgramUniform4f
operator|=
name|qopenglfResolveProgramUniform4f
expr_stmt|;
name|ProgramUniform1iv
operator|=
name|qopenglfResolveProgramUniform1iv
expr_stmt|;
name|ProgramUniform2iv
operator|=
name|qopenglfResolveProgramUniform2iv
expr_stmt|;
name|ProgramUniform3iv
operator|=
name|qopenglfResolveProgramUniform3iv
expr_stmt|;
name|ProgramUniform4iv
operator|=
name|qopenglfResolveProgramUniform4iv
expr_stmt|;
name|ProgramUniform1uiv
operator|=
name|qopenglfResolveProgramUniform1uiv
expr_stmt|;
name|ProgramUniform2uiv
operator|=
name|qopenglfResolveProgramUniform2uiv
expr_stmt|;
name|ProgramUniform3uiv
operator|=
name|qopenglfResolveProgramUniform3uiv
expr_stmt|;
name|ProgramUniform4uiv
operator|=
name|qopenglfResolveProgramUniform4uiv
expr_stmt|;
name|ProgramUniform1fv
operator|=
name|qopenglfResolveProgramUniform1fv
expr_stmt|;
name|ProgramUniform2fv
operator|=
name|qopenglfResolveProgramUniform2fv
expr_stmt|;
name|ProgramUniform3fv
operator|=
name|qopenglfResolveProgramUniform3fv
expr_stmt|;
name|ProgramUniform4fv
operator|=
name|qopenglfResolveProgramUniform4fv
expr_stmt|;
name|ProgramUniformMatrix2fv
operator|=
name|qopenglfResolveProgramUniformMatrix2fv
expr_stmt|;
name|ProgramUniformMatrix3fv
operator|=
name|qopenglfResolveProgramUniformMatrix3fv
expr_stmt|;
name|ProgramUniformMatrix4fv
operator|=
name|qopenglfResolveProgramUniformMatrix4fv
expr_stmt|;
name|ProgramUniformMatrix2x3fv
operator|=
name|qopenglfResolveProgramUniformMatrix2x3fv
expr_stmt|;
name|ProgramUniformMatrix3x2fv
operator|=
name|qopenglfResolveProgramUniformMatrix3x2fv
expr_stmt|;
name|ProgramUniformMatrix2x4fv
operator|=
name|qopenglfResolveProgramUniformMatrix2x4fv
expr_stmt|;
name|ProgramUniformMatrix4x2fv
operator|=
name|qopenglfResolveProgramUniformMatrix4x2fv
expr_stmt|;
name|ProgramUniformMatrix3x4fv
operator|=
name|qopenglfResolveProgramUniformMatrix3x4fv
expr_stmt|;
name|ProgramUniformMatrix4x3fv
operator|=
name|qopenglfResolveProgramUniformMatrix4x3fv
expr_stmt|;
name|ValidateProgramPipeline
operator|=
name|qopenglfResolveValidateProgramPipeline
expr_stmt|;
name|GetProgramPipelineInfoLog
operator|=
name|qopenglfResolveGetProgramPipelineInfoLog
expr_stmt|;
name|BindImageTexture
operator|=
name|qopenglfResolveBindImageTexture
expr_stmt|;
name|GetBooleani_v
operator|=
name|qopenglfResolveGetBooleani_v
expr_stmt|;
name|MemoryBarrierFunc
operator|=
name|qopenglfResolveMemoryBarrier
expr_stmt|;
name|MemoryBarrierByRegion
operator|=
name|qopenglfResolveMemoryBarrierByRegion
expr_stmt|;
name|TexStorage2DMultisample
operator|=
name|qopenglfResolveTexStorage2DMultisample
expr_stmt|;
name|GetMultisamplefv
operator|=
name|qopenglfResolveGetMultisamplefv
expr_stmt|;
name|SampleMaski
operator|=
name|qopenglfResolveSampleMaski
expr_stmt|;
name|GetTexLevelParameteriv
operator|=
name|qopenglfResolveGetTexLevelParameteriv
expr_stmt|;
name|GetTexLevelParameterfv
operator|=
name|qopenglfResolveGetTexLevelParameterfv
expr_stmt|;
name|BindVertexBuffer
operator|=
name|qopenglfResolveBindVertexBuffer
expr_stmt|;
name|VertexAttribFormat
operator|=
name|qopenglfResolveVertexAttribFormat
expr_stmt|;
name|VertexAttribIFormat
operator|=
name|qopenglfResolveVertexAttribIFormat
expr_stmt|;
name|VertexAttribBinding
operator|=
name|qopenglfResolveVertexAttribBinding
expr_stmt|;
name|VertexBindingDivisor
operator|=
name|qopenglfResolveVertexBindingDivisor
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QOpenGLExtensionsPrivate
name|QOpenGLExtensionsPrivate
operator|::
name|QOpenGLExtensionsPrivate
parameter_list|(
name|QOpenGLContext
modifier|*
name|ctx
parameter_list|)
member_init_list|:
name|QOpenGLExtraFunctionsPrivate
argument_list|(
name|ctx
argument_list|)
member_init_list|,
name|flushVendorChecked
argument_list|(
literal|false
argument_list|)
block|{
name|MapBuffer
operator|=
name|qopenglfResolveMapBuffer
expr_stmt|;
name|GetBufferSubData
operator|=
name|qopenglfResolveGetBufferSubData
expr_stmt|;
name|DiscardFramebuffer
operator|=
name|qopenglfResolveDiscardFramebuffer
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|gles3Helper
name|QOpenGLES3Helper
modifier|*
name|QOpenGLExtensions
operator|::
name|gles3Helper
parameter_list|()
block|{
return|return
name|qgles3Helper
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|flushShared
name|void
name|QOpenGLExtensions
operator|::
name|flushShared
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QOpenGLExtensions
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|flushVendorChecked
condition|)
block|{
name|d
operator|->
name|flushVendorChecked
operator|=
literal|true
expr_stmt|;
comment|// It is not quite clear if glFlush() is sufficient to synchronize access to
comment|// resources between sharing contexts in the same thread. On most platforms this
comment|// is enough (e.g. iOS explicitly documents it), while certain drivers only work
comment|// properly when doing glFinish().
name|d
operator|->
name|flushIsSufficientToSyncContexts
operator|=
literal|false
expr_stmt|;
comment|// default to false, not guaranteed by the spec
specifier|const
name|char
modifier|*
name|vendor
init|=
operator|(
specifier|const
name|char
operator|*
operator|)
name|glGetString
argument_list|(
name|GL_VENDOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|vendor
condition|)
block|{
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|flushEnough
index|[]
init|=
block|{
literal|"Apple"
block|,
literal|"ATI"
block|,
literal|"Intel"
block|,
literal|"NVIDIA"
block|}
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|flushEnough
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
specifier|const
name|char
operator|*
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|strstr
argument_list|(
name|vendor
argument_list|,
name|flushEnough
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|d
operator|->
name|flushIsSufficientToSyncContexts
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|d
operator|->
name|flushIsSufficientToSyncContexts
condition|)
name|glFlush
argument_list|()
expr_stmt|;
else|else
name|glFinish
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
