begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 KlarÃ¤lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Giuseppe D'Angelo<giuseppe.dangelo@kdab.com> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QOPENGLDEBUG_H
end_ifndef
begin_define
DECL|macro|QOPENGLDEBUG_H
define|#
directive|define
name|QOPENGLDEBUG_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
end_ifndef
begin_include
include|#
directive|include
file|<QtCore/qshareddata.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qflags.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvector.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmetatype.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qopenglcontext.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QOpenGLDebugLogger
name|class
name|QOpenGLDebugLogger
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QOpenGLDebugLoggerPrivate
name|class
name|QOpenGLDebugLoggerPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QOpenGLDebugMessagePrivate
name|class
name|QOpenGLDebugMessagePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QOpenGLDebugMessage
block|{
name|public
label|:
enum|enum
name|Source
block|{
name|InvalidSource
init|=
literal|0x00000000
block|,
name|APISource
init|=
literal|0x00000001
block|,
name|WindowSystemSource
init|=
literal|0x00000002
block|,
name|ShaderCompilerSource
init|=
literal|0x00000004
block|,
name|ThirdPartySource
init|=
literal|0x00000008
block|,
name|ApplicationSource
init|=
literal|0x00000010
block|,
name|OtherSource
init|=
literal|0x00000020
block|,
name|LastSource
init|=
name|OtherSource
block|,
comment|// private API
name|AnySource
init|=
literal|0xffffffff
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
name|Sources
argument_list|,
name|Source
argument_list|)
expr|enum
name|Type
block|{
name|InvalidType
operator|=
literal|0x00000000
block|,
name|ErrorType
operator|=
literal|0x00000001
block|,
name|DeprecatedBehaviorType
operator|=
literal|0x00000002
block|,
name|UndefinedBehaviorType
operator|=
literal|0x00000004
block|,
name|PortabilityType
operator|=
literal|0x00000008
block|,
name|PerformanceType
operator|=
literal|0x00000010
block|,
name|OtherType
operator|=
literal|0x00000020
block|,
name|MarkerType
operator|=
literal|0x00000040
block|,
name|GroupPushType
operator|=
literal|0x00000080
block|,
name|GroupPopType
operator|=
literal|0x00000100
block|,
name|LastType
operator|=
name|GroupPopType
block|,
comment|// private API
name|AnyType
operator|=
literal|0xffffffff
block|}
expr_stmt|;
name|Q_DECLARE_FLAGS
argument_list|(
name|Types
argument_list|,
name|Type
argument_list|)
expr|enum
name|Severity
block|{
name|InvalidSeverity
operator|=
literal|0x00000000
block|,
name|HighSeverity
operator|=
literal|0x00000001
block|,
name|MediumSeverity
operator|=
literal|0x00000002
block|,
name|LowSeverity
operator|=
literal|0x00000004
block|,
name|NotificationSeverity
operator|=
literal|0x00000008
block|,
name|LastSeverity
operator|=
name|NotificationSeverity
block|,
comment|// private API
name|AnySeverity
operator|=
literal|0xffffffff
block|}
expr_stmt|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|Severities
argument_list|,
argument|Severity
argument_list|)
name|QOpenGLDebugMessage
argument_list|()
expr_stmt|;
name|QOpenGLDebugMessage
argument_list|(
specifier|const
name|QOpenGLDebugMessage
operator|&
name|debugMessage
argument_list|)
expr_stmt|;
operator|~
name|QOpenGLDebugMessage
argument_list|()
expr_stmt|;
name|QOpenGLDebugMessage
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QOpenGLDebugMessage
operator|&
name|debugMessage
operator|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
specifier|inline
name|QOpenGLDebugMessage
modifier|&
name|operator
init|=
operator|(
name|QOpenGLDebugMessage
operator|&&
name|debugMessage
operator|)
block|{
name|d
operator|.
name|swap
argument_list|(
name|debugMessage
operator|.
name|d
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
endif|#
directive|endif
specifier|inline
name|void
name|swap
parameter_list|(
name|QOpenGLDebugMessage
modifier|&
name|debugMessage
parameter_list|)
block|{
name|d
operator|.
name|swap
argument_list|(
name|debugMessage
operator|.
name|d
argument_list|)
expr_stmt|;
block|}
name|Source
name|source
argument_list|()
specifier|const
expr_stmt|;
name|Type
name|type
argument_list|()
specifier|const
expr_stmt|;
name|Severity
name|severity
argument_list|()
specifier|const
expr_stmt|;
name|GLuint
name|id
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|message
argument_list|()
specifier|const
expr_stmt|;
specifier|static
name|QOpenGLDebugMessage
name|createApplicationMessage
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|GLuint
name|id
init|=
literal|0
parameter_list|,
name|Severity
name|severity
init|=
name|NotificationSeverity
parameter_list|,
name|Type
name|type
init|=
name|OtherType
parameter_list|)
function_decl|;
specifier|static
name|QOpenGLDebugMessage
name|createThirdPartyMessage
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|GLuint
name|id
init|=
literal|0
parameter_list|,
name|Severity
name|severity
init|=
name|NotificationSeverity
parameter_list|,
name|Type
name|type
init|=
name|OtherType
parameter_list|)
function_decl|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QOpenGLDebugMessage
operator|&
name|debugMessage
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QOpenGLDebugMessage
operator|&
name|debugMessage
operator|)
specifier|const
block|{
return|return
operator|!
name|operator
operator|==
operator|(
name|debugMessage
operator|)
return|;
block|}
name|private
label|:
name|friend
name|class
name|QOpenGLDebugLogger
decl_stmt|;
name|friend
name|class
name|QOpenGLDebugLoggerPrivate
decl_stmt|;
name|QSharedDataPointer
operator|<
name|QOpenGLDebugMessagePrivate
operator|>
name|d
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|Q_DECLARE_SHARED
argument_list|(
argument|QOpenGLDebugMessage
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QOpenGLDebugMessage::Sources
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QOpenGLDebugMessage::Types
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QOpenGLDebugMessage::Severities
argument_list|)
end_macro
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|Q_GUI_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
name|debug
operator|,
specifier|const
name|QOpenGLDebugMessage
operator|&
name|message
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|operator
name|Q_GUI_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
name|debug
operator|,
name|QOpenGLDebugMessage
operator|::
name|Source
name|source
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_GUI_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
name|debug
operator|,
name|QOpenGLDebugMessage
operator|::
name|Type
name|type
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_GUI_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
name|debug
operator|,
name|QOpenGLDebugMessage
operator|::
name|Severity
name|severity
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|QOpenGLDebugLoggerPrivate
name|class
name|QOpenGLDebugLoggerPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QOpenGLDebugLogger
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
argument|LoggingMode loggingMode READ loggingMode
argument_list|)
name|public
operator|:
expr|enum
name|LoggingMode
block|{
name|AsynchronousLogging
block|,
name|SynchronousLogging
block|}
block|;
name|Q_ENUM
argument_list|(
argument|LoggingMode
argument_list|)
name|explicit
name|QOpenGLDebugLogger
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QOpenGLDebugLogger
argument_list|()
block|;
name|bool
name|initialize
argument_list|()
block|;
name|bool
name|isLogging
argument_list|()
specifier|const
block|;
name|LoggingMode
name|loggingMode
argument_list|()
specifier|const
block|;
name|qint64
name|maximumMessageLength
argument_list|()
specifier|const
block|;
name|void
name|pushGroup
argument_list|(
argument|const QString&name
argument_list|,
argument|GLuint id =
literal|0
argument_list|,
argument|QOpenGLDebugMessage::Source source = QOpenGLDebugMessage::ApplicationSource
argument_list|)
block|;
name|void
name|popGroup
argument_list|()
block|;
name|void
name|enableMessages
argument_list|(
argument|QOpenGLDebugMessage::Sources sources = QOpenGLDebugMessage::AnySource
argument_list|,
argument|QOpenGLDebugMessage::Types types = QOpenGLDebugMessage::AnyType
argument_list|,
argument|QOpenGLDebugMessage::Severities severities = QOpenGLDebugMessage::AnySeverity
argument_list|)
block|;
name|void
name|enableMessages
argument_list|(
argument|const QVector<GLuint>&ids
argument_list|,
argument|QOpenGLDebugMessage::Sources sources = QOpenGLDebugMessage::AnySource
argument_list|,
argument|QOpenGLDebugMessage::Types types = QOpenGLDebugMessage::AnyType
argument_list|)
block|;
name|void
name|disableMessages
argument_list|(
argument|QOpenGLDebugMessage::Sources sources = QOpenGLDebugMessage::AnySource
argument_list|,
argument|QOpenGLDebugMessage::Types types = QOpenGLDebugMessage::AnyType
argument_list|,
argument|QOpenGLDebugMessage::Severities severities = QOpenGLDebugMessage::AnySeverity
argument_list|)
block|;
name|void
name|disableMessages
argument_list|(
argument|const QVector<GLuint>&ids
argument_list|,
argument|QOpenGLDebugMessage::Sources sources = QOpenGLDebugMessage::AnySource
argument_list|,
argument|QOpenGLDebugMessage::Types types = QOpenGLDebugMessage::AnyType
argument_list|)
block|;
name|QList
operator|<
name|QOpenGLDebugMessage
operator|>
name|loggedMessages
argument_list|()
specifier|const
block|;
name|public
name|Q_SLOTS
operator|:
name|void
name|logMessage
argument_list|(
specifier|const
name|QOpenGLDebugMessage
operator|&
name|debugMessage
argument_list|)
block|;
name|void
name|startLogging
argument_list|(
argument|LoggingMode loggingMode = AsynchronousLogging
argument_list|)
block|;
name|void
name|stopLogging
argument_list|()
block|;
name|Q_SIGNALS
operator|:
name|void
name|messageLogged
argument_list|(
specifier|const
name|QOpenGLDebugMessage
operator|&
name|debugMessage
argument_list|)
block|;
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
argument|QOpenGLDebugLogger
argument_list|)
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QOpenGLDebugLogger
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_contextAboutToBeDestroyed()
argument_list|)
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QT_END_NAMESPACE
name|Q_DECLARE_METATYPE
argument_list|(
name|QOpenGLDebugMessage
argument_list|)
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_OPENGL
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QOPENGLDEBUG_H
end_comment
end_unit
