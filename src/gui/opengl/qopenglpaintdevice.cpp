begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<private/qopenglpaintdevice_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qopenglcontext_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qopenglframebufferobject_p.h>
end_include
begin_include
include|#
directive|include
file|<qopenglfunctions.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QOpenGLPaintDevice
name|QOpenGLPaintDevice
operator|::
name|QOpenGLPaintDevice
parameter_list|()
member_init_list|:
name|m_thisFBO
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QOpenGLPaintDevice
name|QOpenGLPaintDevice
operator|::
name|~
name|QOpenGLPaintDevice
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|metric
name|int
name|QOpenGLPaintDevice
operator|::
name|metric
parameter_list|(
name|QPaintDevice
operator|::
name|PaintDeviceMetric
name|metric
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|metric
condition|)
block|{
case|case
name|PdmWidth
case|:
return|return
name|size
argument_list|()
operator|.
name|width
argument_list|()
return|;
case|case
name|PdmHeight
case|:
return|return
name|size
argument_list|()
operator|.
name|height
argument_list|()
return|;
case|case
name|PdmDepth
case|:
block|{
specifier|const
name|QSurfaceFormat
name|f
init|=
name|format
argument_list|()
decl_stmt|;
return|return
name|f
operator|.
name|redBufferSize
argument_list|()
operator|+
name|f
operator|.
name|greenBufferSize
argument_list|()
operator|+
name|f
operator|.
name|blueBufferSize
argument_list|()
operator|+
name|f
operator|.
name|alphaBufferSize
argument_list|()
return|;
block|}
default|default:
name|qWarning
argument_list|(
literal|"QOpenGLPaintDevice::metric() - metric %d not known"
argument_list|,
name|metric
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
end_function
begin_function
DECL|function|beginPaint
name|void
name|QOpenGLPaintDevice
operator|::
name|beginPaint
parameter_list|()
block|{
name|QOpenGLContext
modifier|*
name|ctx
init|=
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
comment|// Record the currently bound FBO so we can restore it again
comment|// in endPaint() and bind this device's FBO
comment|//
comment|// Note: m_thisFBO could be zero if the paint device is not
comment|// backed by an FBO (e.g. window back buffer).  But there could
comment|// be a previous FBO bound to the context which we need to
comment|// explicitly unbind.  Otherwise the painting will go into
comment|// the previous FBO instead of to the window.
name|m_previousFBO
operator|=
name|ctx
operator|->
name|d_func
argument_list|()
operator|->
name|current_fbo
expr_stmt|;
if|if
condition|(
name|m_previousFBO
operator|!=
name|m_thisFBO
condition|)
block|{
name|ctx
operator|->
name|d_func
argument_list|()
operator|->
name|current_fbo
operator|=
name|m_thisFBO
expr_stmt|;
name|QOpenGLFunctions
argument_list|(
name|ctx
argument_list|)
operator|.
name|glBindFramebuffer
argument_list|(
name|GL_FRAMEBUFFER
argument_list|,
name|m_thisFBO
argument_list|)
expr_stmt|;
block|}
comment|// Set the default fbo for the context to m_thisFBO so that
comment|// if some raw GL code between beginNativePainting() and
comment|// endNativePainting() calls QOpenGLFramebufferObject::release(),
comment|// painting will revert to the window surface's fbo.
name|ctx
operator|->
name|d_func
argument_list|()
operator|->
name|default_fbo
operator|=
name|m_thisFBO
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ensureActiveTarget
name|void
name|QOpenGLPaintDevice
operator|::
name|ensureActiveTarget
parameter_list|()
block|{
name|QOpenGLContext
modifier|*
name|ctx
init|=
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|->
name|d_func
argument_list|()
operator|->
name|current_fbo
operator|!=
name|m_thisFBO
condition|)
block|{
name|ctx
operator|->
name|d_func
argument_list|()
operator|->
name|current_fbo
operator|=
name|m_thisFBO
expr_stmt|;
name|QOpenGLFunctions
argument_list|(
name|ctx
argument_list|)
operator|.
name|glBindFramebuffer
argument_list|(
name|GL_FRAMEBUFFER
argument_list|,
name|m_thisFBO
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|->
name|d_func
argument_list|()
operator|->
name|default_fbo
operator|=
name|m_thisFBO
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endPaint
name|void
name|QOpenGLPaintDevice
operator|::
name|endPaint
parameter_list|()
block|{
comment|// Make sure the FBO bound at beginPaint is re-bound again here:
name|QOpenGLContext
modifier|*
name|ctx
init|=
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_previousFBO
operator|!=
name|ctx
operator|->
name|d_func
argument_list|()
operator|->
name|current_fbo
condition|)
block|{
name|ctx
operator|->
name|d_func
argument_list|()
operator|->
name|current_fbo
operator|=
name|m_previousFBO
expr_stmt|;
name|QOpenGLFunctions
argument_list|(
name|ctx
argument_list|)
operator|.
name|glBindFramebuffer
argument_list|(
name|GL_FRAMEBUFFER
argument_list|,
name|m_previousFBO
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|->
name|d_func
argument_list|()
operator|->
name|default_fbo
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isFlipped
name|bool
name|QOpenGLPaintDevice
operator|::
name|isFlipped
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|// returns the QOpenGLPaintDevice for the given QPaintDevice
end_comment
begin_function
DECL|function|getDevice
name|QOpenGLPaintDevice
modifier|*
name|QOpenGLPaintDevice
operator|::
name|getDevice
parameter_list|(
name|QPaintDevice
modifier|*
name|pd
parameter_list|)
block|{
name|QOpenGLPaintDevice
modifier|*
name|glpd
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|pd
operator|->
name|devType
argument_list|()
condition|)
block|{
case|case
name|QInternal
operator|::
name|FramebufferObject
case|:
name|glpd
operator|=
operator|&
operator|(
cast|static_cast
argument_list|<
name|QOpenGLFramebufferObject
operator|*
argument_list|>
argument_list|(
name|pd
argument_list|)
operator|->
name|d_func
argument_list|()
operator|->
name|glDevice
operator|)
expr_stmt|;
break|break;
case|case
name|QInternal
operator|::
name|Pixmap
case|:
block|{
name|qWarning
argument_list|(
literal|"Pixmap type not supported for GL rendering"
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
name|qWarning
argument_list|(
literal|"QOpenGLPaintDevice::getDevice() - Unknown device type %d"
argument_list|,
name|pd
operator|->
name|devType
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|glpd
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
