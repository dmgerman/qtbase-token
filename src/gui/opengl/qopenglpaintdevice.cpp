begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qopenglpaintdevice.h>
end_include
begin_include
include|#
directive|include
file|<qpaintengine.h>
end_include
begin_include
include|#
directive|include
file|<qthreadstorage.h>
end_include
begin_include
include|#
directive|include
file|<private/qobject_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qopenglcontext_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qopenglframebufferobject_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qopenglpaintengine_p.h>
end_include
begin_comment
comment|// for qt_defaultDpiX/Y
end_comment
begin_include
include|#
directive|include
file|<private/qfont_p.h>
end_include
begin_include
include|#
directive|include
file|<qopenglfunctions.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QOpenGLPaintDevice     \brief The QOpenGLPaintDevice class enables painting to an OpenGL context using QPainter.     \since 5.0      \ingroup painting-3D      When painting to a QOpenGLPaintDevice using QPainter, the state of     the current GL context will be altered by the paint engine to reflect     its needs.  Applications should not rely upon the GL state being reset     to its original conditions, particularly the current shader program,     GL viewport, texture units, and drawing modes. */
end_comment
begin_class
DECL|class|QOpenGLPaintDevicePrivate
class|class
name|QOpenGLPaintDevicePrivate
block|{
public|public:
name|QOpenGLPaintDevicePrivate
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
constructor_decl|;
DECL|member|size
name|QSize
name|size
decl_stmt|;
DECL|member|ctx
name|QOpenGLContext
modifier|*
name|ctx
decl_stmt|;
DECL|member|dpmx
name|qreal
name|dpmx
decl_stmt|;
DECL|member|dpmy
name|qreal
name|dpmy
decl_stmt|;
DECL|member|flipped
name|bool
name|flipped
decl_stmt|;
DECL|member|engine
name|QPaintEngine
modifier|*
name|engine
decl_stmt|;
name|void
name|init
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QOpenGLContext
modifier|*
name|ctx
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_comment
comment|/*!     Constructs a QOpenGLPaintDevice with the given \a size.      The QOpenGLPaintDevice is only valid for the current context.      \sa QOpenGLContext::currentContext() */
end_comment
begin_constructor
DECL|function|QOpenGLPaintDevice
name|QOpenGLPaintDevice
operator|::
name|QOpenGLPaintDevice
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QOpenGLPaintDevicePrivate
argument_list|(
name|size
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a QOpenGLPaintDevice with the given \a size and \a ctx.      The QOpenGLPaintDevice is only valid for the current context.      \sa QOpenGLContext::currentContext() */
end_comment
begin_constructor
DECL|function|QOpenGLPaintDevice
name|QOpenGLPaintDevice
operator|::
name|QOpenGLPaintDevice
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QOpenGLPaintDevicePrivate
argument_list|(
name|QSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QOpenGLPaintDevice
name|QOpenGLPaintDevice
operator|::
name|~
name|QOpenGLPaintDevice
parameter_list|()
block|{
operator|delete
name|d_ptr
operator|->
name|engine
expr_stmt|;
block|}
end_destructor
begin_constructor
DECL|function|QOpenGLPaintDevicePrivate
name|QOpenGLPaintDevicePrivate
operator|::
name|QOpenGLPaintDevicePrivate
parameter_list|(
specifier|const
name|QSize
modifier|&
name|sz
parameter_list|)
member_init_list|:
name|size
argument_list|(
name|sz
argument_list|)
member_init_list|,
name|ctx
argument_list|(
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
argument_list|)
member_init_list|,
name|dpmx
argument_list|(
name|qt_defaultDpiX
argument_list|()
operator|*
literal|100.
operator|/
literal|2.54
argument_list|)
member_init_list|,
name|dpmy
argument_list|(
name|qt_defaultDpiY
argument_list|()
operator|*
literal|100.
operator|/
literal|2.54
argument_list|)
member_init_list|,
name|flipped
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|engine
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_class
DECL|class|QOpenGLEngineThreadStorage
class|class
name|QOpenGLEngineThreadStorage
block|{
public|public:
DECL|function|engine
name|QPaintEngine
modifier|*
name|engine
parameter_list|()
block|{
name|QPaintEngine
modifier|*
modifier|&
name|localEngine
init|=
name|storage
operator|.
name|localData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|localEngine
condition|)
name|localEngine
operator|=
operator|new
name|QOpenGL2PaintEngineEx
expr_stmt|;
return|return
name|localEngine
return|;
block|}
private|private:
DECL|member|storage
name|QThreadStorage
argument_list|<
name|QPaintEngine
modifier|*
argument_list|>
name|storage
decl_stmt|;
block|}
class|;
end_class
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QOpenGLEngineThreadStorage
argument_list|,
argument|qt_opengl_engine
argument_list|)
end_macro
begin_function
DECL|function|paintEngine
name|QPaintEngine
modifier|*
name|QOpenGLPaintDevice
operator|::
name|paintEngine
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|d_ptr
operator|->
name|engine
condition|)
return|return
name|d_ptr
operator|->
name|engine
return|;
name|QPaintEngine
modifier|*
name|engine
init|=
name|qt_opengl_engine
argument_list|()
operator|->
name|engine
argument_list|()
decl_stmt|;
if|if
condition|(
name|engine
operator|->
name|isActive
argument_list|()
operator|&&
name|engine
operator|->
name|paintDevice
argument_list|()
operator|!=
name|this
condition|)
block|{
name|d_ptr
operator|->
name|engine
operator|=
operator|new
name|QOpenGL2PaintEngineEx
expr_stmt|;
return|return
name|d_ptr
operator|->
name|engine
return|;
block|}
return|return
name|engine
return|;
block|}
end_function
begin_function
DECL|function|context
name|QOpenGLContext
modifier|*
name|QOpenGLPaintDevice
operator|::
name|context
parameter_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|ctx
return|;
block|}
end_function
begin_function
DECL|function|size
name|QSize
name|QOpenGLPaintDevice
operator|::
name|size
parameter_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|size
return|;
block|}
end_function
begin_function
DECL|function|metric
name|int
name|QOpenGLPaintDevice
operator|::
name|metric
parameter_list|(
name|QPaintDevice
operator|::
name|PaintDeviceMetric
name|metric
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|metric
condition|)
block|{
case|case
name|PdmWidth
case|:
return|return
name|d_ptr
operator|->
name|size
operator|.
name|width
argument_list|()
return|;
case|case
name|PdmHeight
case|:
return|return
name|d_ptr
operator|->
name|size
operator|.
name|height
argument_list|()
return|;
case|case
name|PdmDepth
case|:
return|return
literal|32
return|;
case|case
name|PdmWidthMM
case|:
return|return
name|qRound
argument_list|(
name|d_ptr
operator|->
name|size
operator|.
name|width
argument_list|()
operator|*
literal|1000
operator|/
name|d_ptr
operator|->
name|dpmx
argument_list|)
return|;
case|case
name|PdmHeightMM
case|:
return|return
name|qRound
argument_list|(
name|d_ptr
operator|->
name|size
operator|.
name|height
argument_list|()
operator|*
literal|1000
operator|/
name|d_ptr
operator|->
name|dpmy
argument_list|)
return|;
case|case
name|PdmNumColors
case|:
return|return
literal|0
return|;
case|case
name|PdmDpiX
case|:
return|return
name|qRound
argument_list|(
name|d_ptr
operator|->
name|dpmx
operator|*
literal|0.0254
argument_list|)
return|;
case|case
name|PdmDpiY
case|:
return|return
name|qRound
argument_list|(
name|d_ptr
operator|->
name|dpmy
operator|*
literal|0.0254
argument_list|)
return|;
case|case
name|PdmPhysicalDpiX
case|:
return|return
name|qRound
argument_list|(
name|d_ptr
operator|->
name|dpmx
operator|*
literal|0.0254
argument_list|)
return|;
case|case
name|PdmPhysicalDpiY
case|:
return|return
name|qRound
argument_list|(
name|d_ptr
operator|->
name|dpmy
operator|*
literal|0.0254
argument_list|)
return|;
default|default:
name|qWarning
argument_list|(
literal|"QOpenGLPaintDevice::metric() - metric %d not known"
argument_list|,
name|metric
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
end_function
begin_function
DECL|function|dotsPerMeterX
name|qreal
name|QOpenGLPaintDevice
operator|::
name|dotsPerMeterX
parameter_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|dpmx
return|;
block|}
end_function
begin_function
DECL|function|dotsPerMeterY
name|qreal
name|QOpenGLPaintDevice
operator|::
name|dotsPerMeterY
parameter_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|dpmy
return|;
block|}
end_function
begin_function
DECL|function|setDotsPerMeterX
name|void
name|QOpenGLPaintDevice
operator|::
name|setDotsPerMeterX
parameter_list|(
name|qreal
name|dpmx
parameter_list|)
block|{
name|d_ptr
operator|->
name|dpmx
operator|=
name|dpmx
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setDotsPerMeterY
name|void
name|QOpenGLPaintDevice
operator|::
name|setDotsPerMeterY
parameter_list|(
name|qreal
name|dpmy
parameter_list|)
block|{
name|d_ptr
operator|->
name|dpmx
operator|=
name|dpmy
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Specifies whether painting should be flipped around the Y-axis or not. */
end_comment
begin_function
DECL|function|setPaintFlipped
name|void
name|QOpenGLPaintDevice
operator|::
name|setPaintFlipped
parameter_list|(
name|bool
name|flipped
parameter_list|)
block|{
name|d_ptr
operator|->
name|flipped
operator|=
name|flipped
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintFlipped
name|bool
name|QOpenGLPaintDevice
operator|::
name|paintFlipped
parameter_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|flipped
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
