begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qopengl.h"
end_include
begin_include
include|#
directive|include
file|"qopengl_p.h"
end_include
begin_include
include|#
directive|include
file|"qopenglcontext.h"
end_include
begin_include
include|#
directive|include
file|"qopenglfunctions.h"
end_include
begin_include
include|#
directive|include
file|"qoffscreensurface.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QJsonDocument>
end_include
begin_include
include|#
directive|include
file|<QtCore/QJsonValue>
end_include
begin_include
include|#
directive|include
file|<QtCore/QJsonObject>
end_include
begin_include
include|#
directive|include
file|<QtCore/QJsonArray>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTextStream>
end_include
begin_include
include|#
directive|include
file|<QtCore/QFile>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDir>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_3
argument_list|)
end_if
begin_typedef
DECL|typedef|qt_glGetStringi
typedef|typedef
specifier|const
name|GLubyte
modifier|*
function_decl|(
name|QOPENGLF_APIENTRYP
name|qt_glGetStringi
function_decl|)
parameter_list|(
name|GLenum
parameter_list|,
name|GLuint
parameter_list|)
function_decl|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|QOpenGLExtensionMatcher
name|QOpenGLExtensionMatcher
operator|::
name|QOpenGLExtensionMatcher
parameter_list|()
block|{
name|QOpenGLContext
modifier|*
name|ctx
init|=
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QOpenGLFunctions
modifier|*
name|funcs
init|=
name|ctx
operator|->
name|functions
argument_list|()
decl_stmt|;
specifier|const
name|char
modifier|*
name|extensionStr
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|ctx
operator|->
name|isOpenGLES
argument_list|()
operator|||
name|ctx
operator|->
name|format
argument_list|()
operator|.
name|majorVersion
argument_list|()
operator|<
literal|3
condition|)
name|extensionStr
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|funcs
operator|->
name|glGetString
argument_list|(
name|GL_EXTENSIONS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|extensionStr
condition|)
block|{
name|QByteArray
name|ba
argument_list|(
name|extensionStr
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|extensions
init|=
name|ba
operator|.
name|split
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|m_extensions
operator|=
name|extensions
operator|.
name|toSet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
ifdef|#
directive|ifdef
name|QT_OPENGL_3
comment|// clear error state
while|while
condition|(
name|funcs
operator|->
name|glGetError
argument_list|()
condition|)
block|{}
if|if
condition|(
name|ctx
condition|)
block|{
name|qt_glGetStringi
name|glGetStringi
init|=
operator|(
name|qt_glGetStringi
operator|)
name|ctx
operator|->
name|getProcAddress
argument_list|(
literal|"glGetStringi"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|glGetStringi
condition|)
return|return;
name|GLint
name|numExtensions
decl_stmt|;
name|funcs
operator|->
name|glGetIntegerv
argument_list|(
name|GL_NUM_EXTENSIONS
argument_list|,
operator|&
name|numExtensions
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numExtensions
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|char
modifier|*
name|str
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|glGetStringi
argument_list|(
name|GL_EXTENSIONS
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|m_extensions
operator|.
name|insert
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// QT_OPENGL_3
block|}
block|}
end_constructor
begin_comment
comment|/* Helpers to read out the list of features matching a device from  * a Chromium driver bug list. Note that not all keys are supported and  * some may behave differently: gl_vendor is a substring match instead of regex.  {   "entries": [  {       "id": 20,       "description": "Disable EXT_draw_buffers on GeForce GT 650M on Linux due to driver bugs",       "os": {         "type": "linux"       },       // Optional: "exceptions" list       "vendor_id": "0x10de",       "device_id": ["0x0fd5"],       "multi_gpu_category": "any",       "features": [         "disable_ext_draw_buffers"       ]     },    ....    } */
end_comment
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|d
parameter_list|,
specifier|const
name|QOpenGLConfig
operator|::
name|Gpu
modifier|&
name|g
parameter_list|)
block|{
name|QDebugStateSaver
name|s
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|d
operator|.
name|nospace
argument_list|()
expr_stmt|;
name|d
operator|<<
literal|"Gpu("
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|<<
literal|"vendor="
operator|<<
name|hex
operator|<<
name|showbase
operator|<<
name|g
operator|.
name|vendorId
operator|<<
literal|", device="
operator|<<
name|g
operator|.
name|deviceId
operator|<<
literal|"version="
operator|<<
name|g
operator|.
name|driverVersion
expr_stmt|;
block|}
else|else
block|{
name|d
operator|<<
literal|0
expr_stmt|;
block|}
name|d
operator|<<
literal|')'
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_enum
DECL|enum|Operator
DECL|enumerator|NotEqual
DECL|enumerator|LessThan
DECL|enumerator|LessEqualThan
DECL|enumerator|Equals
DECL|enumerator|GreaterThan
DECL|enumerator|GreaterEqualThan
enum|enum
name|Operator
block|{
name|NotEqual
block|,
name|LessThan
block|,
name|LessEqualThan
block|,
name|Equals
block|,
name|GreaterThan
block|,
name|GreaterEqualThan
block|}
enum|;
end_enum
begin_decl_stmt
DECL|variable|operators
specifier|static
specifier|const
name|char
modifier|*
name|operators
index|[]
init|=
block|{
literal|"!="
block|,
literal|"<"
block|,
literal|"<="
block|,
literal|"="
block|,
literal|">"
block|,
literal|">="
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|valueKey
specifier|static
specifier|inline
name|QString
name|valueKey
parameter_list|()
block|{
return|return
name|QStringLiteral
argument_list|(
literal|"value"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|opKey
specifier|static
specifier|inline
name|QString
name|opKey
parameter_list|()
block|{
return|return
name|QStringLiteral
argument_list|(
literal|"op"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|versionKey
specifier|static
specifier|inline
name|QString
name|versionKey
parameter_list|()
block|{
return|return
name|QStringLiteral
argument_list|(
literal|"version"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|typeKey
specifier|static
specifier|inline
name|QString
name|typeKey
parameter_list|()
block|{
return|return
name|QStringLiteral
argument_list|(
literal|"type"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|osKey
specifier|static
specifier|inline
name|QString
name|osKey
parameter_list|()
block|{
return|return
name|QStringLiteral
argument_list|(
literal|"os"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|vendorIdKey
specifier|static
specifier|inline
name|QString
name|vendorIdKey
parameter_list|()
block|{
return|return
name|QStringLiteral
argument_list|(
literal|"vendor_id"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|glVendorKey
specifier|static
specifier|inline
name|QString
name|glVendorKey
parameter_list|()
block|{
return|return
name|QStringLiteral
argument_list|(
literal|"gl_vendor"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|deviceIdKey
specifier|static
specifier|inline
name|QString
name|deviceIdKey
parameter_list|()
block|{
return|return
name|QStringLiteral
argument_list|(
literal|"device_id"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|driverVersionKey
specifier|static
specifier|inline
name|QString
name|driverVersionKey
parameter_list|()
block|{
return|return
name|QStringLiteral
argument_list|(
literal|"driver_version"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|featuresKey
specifier|static
specifier|inline
name|QString
name|featuresKey
parameter_list|()
block|{
return|return
name|QStringLiteral
argument_list|(
literal|"features"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|idKey
specifier|static
specifier|inline
name|QString
name|idKey
parameter_list|()
block|{
return|return
name|QStringLiteral
argument_list|(
literal|"id"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|descriptionKey
specifier|static
specifier|inline
name|QString
name|descriptionKey
parameter_list|()
block|{
return|return
name|QStringLiteral
argument_list|(
literal|"description"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|exceptionsKey
specifier|static
specifier|inline
name|QString
name|exceptionsKey
parameter_list|()
block|{
return|return
name|QStringLiteral
argument_list|(
literal|"exceptions"
argument_list|)
return|;
block|}
end_function
begin_namespace
namespace|namespace
block|{
comment|// VersionTerm describing a version term consisting of number and operator
comment|// found in "os", "driver_version", "gl_version".
DECL|struct|VersionTerm
struct|struct
name|VersionTerm
block|{
DECL|function|VersionTerm
name|VersionTerm
parameter_list|()
member_init_list|:
name|op
argument_list|(
name|NotEqual
argument_list|)
block|{}
specifier|static
name|VersionTerm
name|fromJson
parameter_list|(
specifier|const
name|QJsonValue
modifier|&
name|v
parameter_list|)
function_decl|;
DECL|function|isNull
name|bool
name|isNull
parameter_list|()
specifier|const
block|{
return|return
name|number
operator|.
name|isNull
argument_list|()
return|;
block|}
name|bool
name|matches
parameter_list|(
specifier|const
name|QVersionNumber
modifier|&
name|other
parameter_list|)
specifier|const
function_decl|;
DECL|member|number
name|QVersionNumber
name|number
decl_stmt|;
DECL|member|op
name|Operator
name|op
decl_stmt|;
block|}
struct|;
DECL|function|matches
name|bool
name|VersionTerm
operator|::
name|matches
parameter_list|(
specifier|const
name|QVersionNumber
modifier|&
name|other
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isNull
argument_list|()
operator|||
name|other
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"called with invalid parameters"
expr_stmt|;
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|NotEqual
case|:
return|return
name|other
operator|!=
name|number
return|;
case|case
name|LessThan
case|:
return|return
name|other
operator|<
name|number
return|;
case|case
name|LessEqualThan
case|:
return|return
name|other
operator|<=
name|number
return|;
case|case
name|Equals
case|:
return|return
name|other
operator|==
name|number
return|;
case|case
name|GreaterThan
case|:
return|return
name|other
operator|>
name|number
return|;
case|case
name|GreaterEqualThan
case|:
return|return
name|other
operator|>=
name|number
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|fromJson
name|VersionTerm
name|VersionTerm
operator|::
name|fromJson
parameter_list|(
specifier|const
name|QJsonValue
modifier|&
name|v
parameter_list|)
block|{
name|VersionTerm
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|v
operator|.
name|isObject
argument_list|()
condition|)
return|return
name|result
return|;
specifier|const
name|QJsonObject
name|o
init|=
name|v
operator|.
name|toObject
argument_list|()
decl_stmt|;
name|result
operator|.
name|number
operator|=
name|QVersionNumber
operator|::
name|fromString
argument_list|(
name|o
operator|.
name|value
argument_list|(
name|valueKey
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|opS
init|=
name|o
operator|.
name|value
argument_list|(
name|opKey
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|operators
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|operators
index|[
literal|0
index|]
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|opS
operator|==
name|QLatin1String
argument_list|(
name|operators
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|result
operator|.
name|op
operator|=
cast|static_cast
argument_list|<
name|Operator
argument_list|>
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
comment|// OS term consisting of name and optional version found in
comment|// under "os" in main array and in "exceptions" lists.
DECL|struct|OsTypeTerm
struct|struct
name|OsTypeTerm
block|{
specifier|static
name|OsTypeTerm
name|fromJson
parameter_list|(
specifier|const
name|QJsonValue
modifier|&
name|v
parameter_list|)
function_decl|;
specifier|static
name|QString
name|hostOs
parameter_list|()
function_decl|;
DECL|function|hostKernelVersion
specifier|static
name|QVersionNumber
name|hostKernelVersion
parameter_list|()
block|{
return|return
name|QVersionNumber
operator|::
name|fromString
argument_list|(
name|QSysInfo
operator|::
name|kernelVersion
argument_list|()
argument_list|)
return|;
block|}
DECL|function|isNull
name|bool
name|isNull
parameter_list|()
specifier|const
block|{
return|return
name|type
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|function|matches
name|bool
name|matches
parameter_list|(
specifier|const
name|QString
modifier|&
name|osName
parameter_list|,
specifier|const
name|QVersionNumber
modifier|&
name|kernelVersion
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isNull
argument_list|()
operator|||
name|osName
operator|.
name|isEmpty
argument_list|()
operator|||
name|kernelVersion
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"called with invalid parameters"
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|type
operator|!=
name|osName
condition|)
return|return
literal|false
return|;
return|return
name|versionTerm
operator|.
name|isNull
argument_list|()
operator|||
name|versionTerm
operator|.
name|matches
argument_list|(
name|kernelVersion
argument_list|)
return|;
block|}
DECL|member|type
name|QString
name|type
decl_stmt|;
DECL|member|versionTerm
name|VersionTerm
name|versionTerm
decl_stmt|;
block|}
struct|;
DECL|function|fromJson
name|OsTypeTerm
name|OsTypeTerm
operator|::
name|fromJson
parameter_list|(
specifier|const
name|QJsonValue
modifier|&
name|v
parameter_list|)
block|{
name|OsTypeTerm
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|v
operator|.
name|isObject
argument_list|()
condition|)
return|return
name|result
return|;
specifier|const
name|QJsonObject
name|o
init|=
name|v
operator|.
name|toObject
argument_list|()
decl_stmt|;
name|result
operator|.
name|type
operator|=
name|o
operator|.
name|value
argument_list|(
name|typeKey
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|result
operator|.
name|versionTerm
operator|=
name|VersionTerm
operator|::
name|fromJson
argument_list|(
name|o
operator|.
name|value
argument_list|(
name|versionKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|function|hostOs
name|QString
name|OsTypeTerm
operator|::
name|hostOs
parameter_list|()
block|{
comment|// Determine Host OS.
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
return|return
name|QStringLiteral
argument_list|(
literal|"win"
argument_list|)
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
return|return
name|QStringLiteral
argument_list|(
literal|"linux"
argument_list|)
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_OSX
argument_list|)
return|return
name|QStringLiteral
argument_list|(
literal|"macosx"
argument_list|)
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_ANDROID
argument_list|)
return|return
name|QStringLiteral
argument_list|(
literal|"android"
argument_list|)
return|;
else|#
directive|else
return|return
name|QString
argument_list|()
return|;
endif|#
directive|endif
block|}
block|}
end_namespace
begin_comment
comment|// anonymous namespace
end_comment
begin_typedef
DECL|typedef|JsonArrayConstIt
typedef|typedef
name|QJsonArray
operator|::
name|ConstIterator
name|JsonArrayConstIt
typedef|;
end_typedef
begin_function
DECL|function|contains
specifier|static
specifier|inline
name|bool
name|contains
parameter_list|(
specifier|const
name|QJsonArray
modifier|&
name|a
parameter_list|,
name|unsigned
name|needle
parameter_list|)
block|{
for|for
control|(
name|JsonArrayConstIt
name|it
init|=
name|a
operator|.
name|constBegin
argument_list|()
init|,
name|cend
init|=
name|a
operator|.
name|constEnd
argument_list|()
init|;
name|it
operator|!=
name|cend
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|needle
operator|==
name|it
operator|->
name|toString
argument_list|()
operator|.
name|toUInt
argument_list|(
name|Q_NULLPTR
argument_list|,
comment|/* base */
literal|0
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|msgSyntaxWarning
specifier|static
name|QString
name|msgSyntaxWarning
parameter_list|(
specifier|const
name|QJsonObject
modifier|&
name|object
parameter_list|,
specifier|const
name|QString
modifier|&
name|what
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
name|QTextStream
argument_list|(
operator|&
name|result
argument_list|)
operator|<<
literal|"Id "
operator|<<
name|object
operator|.
name|value
argument_list|(
name|idKey
argument_list|()
argument_list|)
operator|.
name|toInt
argument_list|()
operator|<<
literal|" (\""
operator|<<
name|object
operator|.
name|value
argument_list|(
name|descriptionKey
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
operator|<<
literal|"\"): "
operator|<<
name|what
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|// Check whether an entry matches. Called recursively for
end_comment
begin_comment
comment|// "exceptions" list.
end_comment
begin_function
DECL|function|matches
specifier|static
name|bool
name|matches
parameter_list|(
specifier|const
name|QJsonObject
modifier|&
name|object
parameter_list|,
specifier|const
name|QString
modifier|&
name|osName
parameter_list|,
specifier|const
name|QVersionNumber
modifier|&
name|kernelVersion
parameter_list|,
specifier|const
name|QOpenGLConfig
operator|::
name|Gpu
modifier|&
name|gpu
parameter_list|)
block|{
specifier|const
name|OsTypeTerm
name|os
init|=
name|OsTypeTerm
operator|::
name|fromJson
argument_list|(
name|object
operator|.
name|value
argument_list|(
name|osKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|os
operator|.
name|isNull
argument_list|()
operator|&&
operator|!
name|os
operator|.
name|matches
argument_list|(
name|osName
argument_list|,
name|kernelVersion
argument_list|)
condition|)
return|return
literal|false
return|;
specifier|const
name|QJsonValue
name|exceptionsV
init|=
name|object
operator|.
name|value
argument_list|(
name|exceptionsKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exceptionsV
operator|.
name|isArray
argument_list|()
condition|)
block|{
specifier|const
name|QJsonArray
name|exceptionsA
init|=
name|exceptionsV
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|JsonArrayConstIt
name|it
init|=
name|exceptionsA
operator|.
name|constBegin
argument_list|()
init|,
name|cend
init|=
name|exceptionsA
operator|.
name|constEnd
argument_list|()
init|;
name|it
operator|!=
name|cend
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|matches
argument_list|(
name|it
operator|->
name|toObject
argument_list|()
argument_list|,
name|osName
argument_list|,
name|kernelVersion
argument_list|,
name|gpu
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
block|}
specifier|const
name|QJsonValue
name|vendorV
init|=
name|object
operator|.
name|value
argument_list|(
name|vendorIdKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|vendorV
operator|.
name|isString
argument_list|()
condition|)
block|{
if|if
condition|(
name|gpu
operator|.
name|vendorId
operator|!=
name|vendorV
operator|.
name|toString
argument_list|()
operator|.
name|toUInt
argument_list|(
name|Q_NULLPTR
argument_list|,
comment|/* base */
literal|0
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
name|object
operator|.
name|contains
argument_list|(
name|glVendorKey
argument_list|()
argument_list|)
condition|)
block|{
specifier|const
name|QByteArray
name|glVendorV
init|=
name|object
operator|.
name|value
argument_list|(
name|glVendorKey
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|gpu
operator|.
name|glVendor
operator|.
name|contains
argument_list|(
name|glVendorV
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|gpu
operator|.
name|deviceId
condition|)
block|{
specifier|const
name|QJsonValue
name|deviceIdV
init|=
name|object
operator|.
name|value
argument_list|(
name|deviceIdKey
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|deviceIdV
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QJsonValue
operator|::
name|Array
case|:
if|if
condition|(
operator|!
name|contains
argument_list|(
name|deviceIdV
operator|.
name|toArray
argument_list|()
argument_list|,
name|gpu
operator|.
name|deviceId
argument_list|)
condition|)
return|return
literal|false
return|;
break|break;
case|case
name|QJsonValue
operator|::
name|Undefined
case|:
case|case
name|QJsonValue
operator|::
name|Null
case|:
break|break;
default|default:
name|qWarning
argument_list|()
operator|.
name|noquote
argument_list|()
operator|<<
name|msgSyntaxWarning
argument_list|(
name|object
argument_list|,
name|QLatin1String
argument_list|(
literal|"Device ID must be of type array."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|gpu
operator|.
name|driverVersion
operator|.
name|isNull
argument_list|()
condition|)
block|{
specifier|const
name|QJsonValue
name|driverVersionV
init|=
name|object
operator|.
name|value
argument_list|(
name|driverVersionKey
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|driverVersionV
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QJsonValue
operator|::
name|Object
case|:
if|if
condition|(
operator|!
name|VersionTerm
operator|::
name|fromJson
argument_list|(
name|driverVersionV
argument_list|)
operator|.
name|matches
argument_list|(
name|gpu
operator|.
name|driverVersion
argument_list|)
condition|)
return|return
literal|false
return|;
break|break;
case|case
name|QJsonValue
operator|::
name|Undefined
case|:
case|case
name|QJsonValue
operator|::
name|Null
case|:
break|break;
default|default:
name|qWarning
argument_list|()
operator|.
name|noquote
argument_list|()
operator|<<
name|msgSyntaxWarning
argument_list|(
name|object
argument_list|,
name|QLatin1String
argument_list|(
literal|"Driver version must be of type object."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|readGpuFeatures
specifier|static
name|bool
name|readGpuFeatures
parameter_list|(
specifier|const
name|QOpenGLConfig
operator|::
name|Gpu
modifier|&
name|gpu
parameter_list|,
specifier|const
name|QString
modifier|&
name|osName
parameter_list|,
specifier|const
name|QVersionNumber
modifier|&
name|kernelVersion
parameter_list|,
specifier|const
name|QJsonDocument
modifier|&
name|doc
parameter_list|,
name|QSet
argument_list|<
name|QString
argument_list|>
modifier|*
name|result
parameter_list|,
name|QString
modifier|*
name|errorMessage
parameter_list|)
block|{
name|result
operator|->
name|clear
argument_list|()
expr_stmt|;
name|errorMessage
operator|->
name|clear
argument_list|()
expr_stmt|;
specifier|const
name|QJsonValue
name|entriesV
init|=
name|doc
operator|.
name|object
argument_list|()
operator|.
name|value
argument_list|(
name|QStringLiteral
argument_list|(
literal|"entries"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|entriesV
operator|.
name|isArray
argument_list|()
condition|)
block|{
operator|*
name|errorMessage
operator|=
name|QLatin1String
argument_list|(
literal|"No entries read."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|QJsonArray
name|entriesA
init|=
name|entriesV
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|JsonArrayConstIt
name|eit
init|=
name|entriesA
operator|.
name|constBegin
argument_list|()
init|,
name|ecend
init|=
name|entriesA
operator|.
name|constEnd
argument_list|()
init|;
name|eit
operator|!=
name|ecend
condition|;
operator|++
name|eit
control|)
block|{
if|if
condition|(
name|eit
operator|->
name|isObject
argument_list|()
condition|)
block|{
specifier|const
name|QJsonObject
name|object
init|=
name|eit
operator|->
name|toObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|matches
argument_list|(
name|object
argument_list|,
name|osName
argument_list|,
name|kernelVersion
argument_list|,
name|gpu
argument_list|)
condition|)
block|{
specifier|const
name|QJsonValue
name|featuresListV
init|=
name|object
operator|.
name|value
argument_list|(
name|featuresKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|featuresListV
operator|.
name|isArray
argument_list|()
condition|)
block|{
specifier|const
name|QJsonArray
name|featuresListA
init|=
name|featuresListV
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|JsonArrayConstIt
name|fit
init|=
name|featuresListA
operator|.
name|constBegin
argument_list|()
init|,
name|fcend
init|=
name|featuresListA
operator|.
name|constEnd
argument_list|()
init|;
name|fit
operator|!=
name|fcend
condition|;
operator|++
name|fit
control|)
name|result
operator|->
name|insert
argument_list|(
name|fit
operator|->
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|readGpuFeatures
specifier|static
name|bool
name|readGpuFeatures
parameter_list|(
specifier|const
name|QOpenGLConfig
operator|::
name|Gpu
modifier|&
name|gpu
parameter_list|,
specifier|const
name|QString
modifier|&
name|osName
parameter_list|,
specifier|const
name|QVersionNumber
modifier|&
name|kernelVersion
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|jsonAsciiData
parameter_list|,
name|QSet
argument_list|<
name|QString
argument_list|>
modifier|*
name|result
parameter_list|,
name|QString
modifier|*
name|errorMessage
parameter_list|)
block|{
name|result
operator|->
name|clear
argument_list|()
expr_stmt|;
name|errorMessage
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QJsonParseError
name|error
decl_stmt|;
specifier|const
name|QJsonDocument
name|document
init|=
name|QJsonDocument
operator|::
name|fromJson
argument_list|(
name|jsonAsciiData
argument_list|,
operator|&
name|error
argument_list|)
decl_stmt|;
if|if
condition|(
name|document
operator|.
name|isNull
argument_list|()
condition|)
block|{
specifier|const
name|int
name|lineNumber
init|=
literal|1
operator|+
name|jsonAsciiData
operator|.
name|left
argument_list|(
name|error
operator|.
name|offset
argument_list|)
operator|.
name|count
argument_list|(
literal|'\n'
argument_list|)
decl_stmt|;
name|QTextStream
name|str
argument_list|(
name|errorMessage
argument_list|)
decl_stmt|;
name|str
operator|<<
literal|"Failed to parse data: \""
operator|<<
name|error
operator|.
name|errorString
argument_list|()
operator|<<
literal|"\" at line "
operator|<<
name|lineNumber
operator|<<
literal|" (offset: "
operator|<<
name|error
operator|.
name|offset
operator|<<
literal|")."
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|readGpuFeatures
argument_list|(
name|gpu
argument_list|,
name|osName
argument_list|,
name|kernelVersion
argument_list|,
name|document
argument_list|,
name|result
argument_list|,
name|errorMessage
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|readGpuFeatures
specifier|static
name|bool
name|readGpuFeatures
parameter_list|(
specifier|const
name|QOpenGLConfig
operator|::
name|Gpu
modifier|&
name|gpu
parameter_list|,
specifier|const
name|QString
modifier|&
name|osName
parameter_list|,
specifier|const
name|QVersionNumber
modifier|&
name|kernelVersion
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
name|QSet
argument_list|<
name|QString
argument_list|>
modifier|*
name|result
parameter_list|,
name|QString
modifier|*
name|errorMessage
parameter_list|)
block|{
name|result
operator|->
name|clear
argument_list|()
expr_stmt|;
name|errorMessage
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|QTextStream
name|str
argument_list|(
name|errorMessage
argument_list|)
decl_stmt|;
name|str
operator|<<
literal|"Cannot open \""
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|fileName
argument_list|)
operator|<<
literal|"\": "
operator|<<
name|file
operator|.
name|errorString
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|bool
name|success
init|=
name|readGpuFeatures
argument_list|(
name|gpu
argument_list|,
name|osName
argument_list|,
name|kernelVersion
argument_list|,
name|file
operator|.
name|readAll
argument_list|()
argument_list|,
name|result
argument_list|,
name|errorMessage
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|errorMessage
operator|->
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
literal|"Error reading \""
argument_list|)
operator|+
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|fileName
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"\": "
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
end_function
begin_function
DECL|function|gpuFeatures
name|QSet
argument_list|<
name|QString
argument_list|>
name|QOpenGLConfig
operator|::
name|gpuFeatures
parameter_list|(
specifier|const
name|QOpenGLConfig
operator|::
name|Gpu
modifier|&
name|gpu
parameter_list|,
specifier|const
name|QString
modifier|&
name|osName
parameter_list|,
specifier|const
name|QVersionNumber
modifier|&
name|kernelVersion
parameter_list|,
specifier|const
name|QJsonDocument
modifier|&
name|doc
parameter_list|)
block|{
name|QSet
argument_list|<
name|QString
argument_list|>
name|result
decl_stmt|;
name|QString
name|errorMessage
decl_stmt|;
if|if
condition|(
operator|!
name|readGpuFeatures
argument_list|(
name|gpu
argument_list|,
name|osName
argument_list|,
name|kernelVersion
argument_list|,
name|doc
argument_list|,
operator|&
name|result
argument_list|,
operator|&
name|errorMessage
argument_list|)
condition|)
name|qWarning
argument_list|()
operator|.
name|noquote
argument_list|()
operator|<<
name|errorMessage
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|gpuFeatures
name|QSet
argument_list|<
name|QString
argument_list|>
name|QOpenGLConfig
operator|::
name|gpuFeatures
parameter_list|(
specifier|const
name|QOpenGLConfig
operator|::
name|Gpu
modifier|&
name|gpu
parameter_list|,
specifier|const
name|QString
modifier|&
name|osName
parameter_list|,
specifier|const
name|QVersionNumber
modifier|&
name|kernelVersion
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|QSet
argument_list|<
name|QString
argument_list|>
name|result
decl_stmt|;
name|QString
name|errorMessage
decl_stmt|;
if|if
condition|(
operator|!
name|readGpuFeatures
argument_list|(
name|gpu
argument_list|,
name|osName
argument_list|,
name|kernelVersion
argument_list|,
name|fileName
argument_list|,
operator|&
name|result
argument_list|,
operator|&
name|errorMessage
argument_list|)
condition|)
name|qWarning
argument_list|()
operator|.
name|noquote
argument_list|()
operator|<<
name|errorMessage
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|gpuFeatures
name|QSet
argument_list|<
name|QString
argument_list|>
name|QOpenGLConfig
operator|::
name|gpuFeatures
parameter_list|(
specifier|const
name|Gpu
modifier|&
name|gpu
parameter_list|,
specifier|const
name|QJsonDocument
modifier|&
name|doc
parameter_list|)
block|{
return|return
name|gpuFeatures
argument_list|(
name|gpu
argument_list|,
name|OsTypeTerm
operator|::
name|hostOs
argument_list|()
argument_list|,
name|OsTypeTerm
operator|::
name|hostKernelVersion
argument_list|()
argument_list|,
name|doc
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|gpuFeatures
name|QSet
argument_list|<
name|QString
argument_list|>
name|QOpenGLConfig
operator|::
name|gpuFeatures
parameter_list|(
specifier|const
name|Gpu
modifier|&
name|gpu
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
return|return
name|gpuFeatures
argument_list|(
name|gpu
argument_list|,
name|OsTypeTerm
operator|::
name|hostOs
argument_list|()
argument_list|,
name|OsTypeTerm
operator|::
name|hostKernelVersion
argument_list|()
argument_list|,
name|fileName
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fromContext
name|QOpenGLConfig
operator|::
name|Gpu
name|QOpenGLConfig
operator|::
name|Gpu
operator|::
name|fromContext
parameter_list|()
block|{
name|QOpenGLContext
modifier|*
name|ctx
init|=
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QScopedPointer
argument_list|<
name|QOpenGLContext
argument_list|>
name|tmpContext
decl_stmt|;
name|QScopedPointer
argument_list|<
name|QOffscreenSurface
argument_list|>
name|tmpSurface
decl_stmt|;
if|if
condition|(
operator|!
name|ctx
condition|)
block|{
name|tmpContext
operator|.
name|reset
argument_list|(
operator|new
name|QOpenGLContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tmpContext
operator|->
name|create
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QOpenGLConfig::Gpu::fromContext: Failed to create temporary context"
argument_list|)
expr_stmt|;
return|return
name|QOpenGLConfig
operator|::
name|Gpu
argument_list|()
return|;
block|}
name|tmpSurface
operator|.
name|reset
argument_list|(
operator|new
name|QOffscreenSurface
argument_list|)
expr_stmt|;
name|tmpSurface
operator|->
name|setFormat
argument_list|(
name|tmpContext
operator|->
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|tmpSurface
operator|->
name|create
argument_list|()
expr_stmt|;
name|tmpContext
operator|->
name|makeCurrent
argument_list|(
name|tmpSurface
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QOpenGLConfig
operator|::
name|Gpu
name|gpu
decl_stmt|;
name|ctx
operator|=
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
expr_stmt|;
specifier|const
name|GLubyte
modifier|*
name|p
init|=
name|ctx
operator|->
name|functions
argument_list|()
operator|->
name|glGetString
argument_list|(
name|GL_VENDOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
condition|)
name|gpu
operator|.
name|glVendor
operator|=
name|QByteArray
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|gpu
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
