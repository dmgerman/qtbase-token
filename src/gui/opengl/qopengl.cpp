begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qopengl_p.h"
end_include
begin_include
include|#
directive|include
file|"qopenglcontext.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|QOpenGLExtensionMatcher
name|QOpenGLExtensionMatcher
operator|::
name|QOpenGLExtensionMatcher
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|)
block|{
name|init
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
end_function
begin_typedef
DECL|typedef|qt_glGetStringi
typedef|typedef
name|GLubyte
modifier|*
function_decl|(
modifier|*
name|qt_glGetStringi
function_decl|)
parameter_list|(
name|GLenum
parameter_list|,
name|GLuint
parameter_list|)
function_decl|;
end_typedef
begin_ifndef
ifndef|#
directive|ifndef
name|GL_NUM_EXTENSIONS
end_ifndef
begin_define
DECL|macro|GL_NUM_EXTENSIONS
define|#
directive|define
name|GL_NUM_EXTENSIONS
value|0x821D
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|QOpenGLExtensionMatcher
name|QOpenGLExtensionMatcher
operator|::
name|QOpenGLExtensionMatcher
parameter_list|()
block|{
specifier|const
name|char
modifier|*
name|extensionStr
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|glGetString
argument_list|(
name|GL_EXTENSIONS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|extensionStr
condition|)
block|{
name|init
argument_list|(
name|extensionStr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// clear error state
while|while
condition|(
name|glGetError
argument_list|()
condition|)
block|{}
name|QOpenGLContext
modifier|*
name|ctx
init|=
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
condition|)
block|{
name|qt_glGetStringi
name|glGetStringi
init|=
operator|(
name|qt_glGetStringi
operator|)
name|ctx
operator|->
name|getProcAddress
argument_list|(
literal|"glGetStringi"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|glGetStringi
condition|)
return|return;
name|GLint
name|numExtensions
decl_stmt|;
name|glGetIntegerv
argument_list|(
name|GL_NUM_EXTENSIONS
argument_list|,
operator|&
name|numExtensions
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numExtensions
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|char
modifier|*
name|str
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|glGetStringi
argument_list|(
name|GL_EXTENSIONS
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|m_offsets
operator|<<
name|m_extensions
operator|.
name|size
argument_list|()
expr_stmt|;
while|while
condition|(
operator|*
name|str
operator|!=
literal|0
condition|)
name|m_extensions
operator|.
name|append
argument_list|(
operator|*
name|str
operator|++
argument_list|)
expr_stmt|;
name|m_extensions
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_constructor
begin_function
DECL|function|init
name|void
name|QOpenGLExtensionMatcher
operator|::
name|init
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|)
block|{
name|m_extensions
operator|=
name|str
expr_stmt|;
comment|// make sure extension string ends with a space
if|if
condition|(
operator|!
name|m_extensions
operator|.
name|endsWith
argument_list|(
literal|' '
argument_list|)
condition|)
name|m_extensions
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|int
name|next
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|next
operator|=
name|m_extensions
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|,
name|index
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|m_offsets
operator|<<
name|index
expr_stmt|;
name|index
operator|=
name|next
operator|+
literal|1
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
