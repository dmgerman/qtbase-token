begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qopenglengineshadermanager_p.h"
end_include
begin_include
include|#
directive|include
file|"qopenglengineshadersource_p.h"
end_include
begin_include
include|#
directive|include
file|"qopenglpaintengine_p.h"
end_include
begin_include
include|#
directive|include
file|"qopenglshadercache_p.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qopenglcontext_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qthreadstorage.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_DEBUG
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QMetaEnum>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// #define QT_GL_SHARED_SHADER_DEBUG
end_comment
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QOpenGLEngineSharedShadersResource
class|class
name|QOpenGLEngineSharedShadersResource
super|:
specifier|public
name|QOpenGLSharedResource
block|{
public|public:
DECL|function|QOpenGLEngineSharedShadersResource
name|QOpenGLEngineSharedShadersResource
parameter_list|(
name|QOpenGLContext
modifier|*
name|ctx
parameter_list|)
member_init_list|:
name|QOpenGLSharedResource
argument_list|(
name|ctx
operator|->
name|shareGroup
argument_list|()
argument_list|)
member_init_list|,
name|m_shaders
argument_list|(
operator|new
name|QOpenGLEngineSharedShaders
argument_list|(
name|ctx
argument_list|)
argument_list|)
block|{     }
DECL|function|~QOpenGLEngineSharedShadersResource
name|~
name|QOpenGLEngineSharedShadersResource
parameter_list|()
block|{
operator|delete
name|m_shaders
expr_stmt|;
block|}
name|void
name|invalidateResource
parameter_list|()
name|Q_DECL_OVERRIDE
block|{
operator|delete
name|m_shaders
expr_stmt|;
name|m_shaders
operator|=
literal|0
expr_stmt|;
block|}
name|void
name|freeResource
parameter_list|(
name|QOpenGLContext
modifier|*
parameter_list|)
name|Q_DECL_OVERRIDE
block|{     }
DECL|function|shaders
name|QOpenGLEngineSharedShaders
modifier|*
name|shaders
parameter_list|()
specifier|const
block|{
return|return
name|m_shaders
return|;
block|}
private|private:
DECL|member|m_shaders
name|QOpenGLEngineSharedShaders
modifier|*
name|m_shaders
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QOpenGLShaderStorage
class|class
name|QOpenGLShaderStorage
block|{
public|public:
DECL|function|shadersForThread
name|QOpenGLEngineSharedShaders
modifier|*
name|shadersForThread
parameter_list|(
name|QOpenGLContext
modifier|*
name|context
parameter_list|)
block|{
name|QOpenGLMultiGroupSharedResource
modifier|*
modifier|&
name|shaders
init|=
name|m_storage
operator|.
name|localData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|shaders
condition|)
name|shaders
operator|=
operator|new
name|QOpenGLMultiGroupSharedResource
expr_stmt|;
name|QOpenGLEngineSharedShadersResource
modifier|*
name|resource
init|=
name|shaders
operator|->
name|value
argument_list|<
name|QOpenGLEngineSharedShadersResource
argument_list|>
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
name|resource
condition|?
name|resource
operator|->
name|shaders
argument_list|()
else|:
literal|0
return|;
block|}
private|private:
DECL|member|m_storage
name|QThreadStorage
argument_list|<
name|QOpenGLMultiGroupSharedResource
modifier|*
argument_list|>
name|m_storage
decl_stmt|;
block|}
class|;
end_class
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QOpenGLShaderStorage
argument_list|,
name|qt_shader_storage
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|shadersForContext
name|QOpenGLEngineSharedShaders
modifier|*
name|QOpenGLEngineSharedShaders
operator|::
name|shadersForContext
parameter_list|(
name|QOpenGLContext
modifier|*
name|context
parameter_list|)
block|{
return|return
name|qt_shader_storage
argument_list|()
operator|->
name|shadersForThread
argument_list|(
name|context
argument_list|)
return|;
block|}
end_function
begin_decl_stmt
DECL|member|qShaderSnippets
specifier|const
name|char
modifier|*
name|QOpenGLEngineSharedShaders
operator|::
name|qShaderSnippets
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QOpenGLEngineSharedShaders
name|QOpenGLEngineSharedShaders
operator|::
name|QOpenGLEngineSharedShaders
parameter_list|(
name|QOpenGLContext
modifier|*
name|context
parameter_list|)
member_init_list|:
name|blitShaderProg
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|simpleShaderProg
argument_list|(
literal|0
argument_list|)
block|{
comment|/*     Rather than having the shader source array statically initialised, it is initialised     here instead. This is to allow new shader names to be inserted or existing names moved     around without having to change the order of the glsl strings. It is hoped this will     make future hard-to-find runtime bugs more obvious and generally give more solid code. */
specifier|static
name|bool
name|snippetsPopulated
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|snippetsPopulated
condition|)
block|{
specifier|const
name|char
modifier|*
modifier|*
name|code
init|=
name|qShaderSnippets
decl_stmt|;
comment|// shortcut
name|code
index|[
name|MainVertexShader
index|]
operator|=
name|qopenglslMainVertexShader
expr_stmt|;
name|code
index|[
name|MainWithTexCoordsVertexShader
index|]
operator|=
name|qopenglslMainWithTexCoordsVertexShader
expr_stmt|;
name|code
index|[
name|MainWithTexCoordsAndOpacityVertexShader
index|]
operator|=
name|qopenglslMainWithTexCoordsAndOpacityVertexShader
expr_stmt|;
name|code
index|[
name|UntransformedPositionVertexShader
index|]
operator|=
name|qopenglslUntransformedPositionVertexShader
expr_stmt|;
name|code
index|[
name|PositionOnlyVertexShader
index|]
operator|=
name|qopenglslPositionOnlyVertexShader
expr_stmt|;
name|code
index|[
name|ComplexGeometryPositionOnlyVertexShader
index|]
operator|=
name|qopenglslComplexGeometryPositionOnlyVertexShader
expr_stmt|;
name|code
index|[
name|PositionWithPatternBrushVertexShader
index|]
operator|=
name|qopenglslPositionWithPatternBrushVertexShader
expr_stmt|;
name|code
index|[
name|PositionWithLinearGradientBrushVertexShader
index|]
operator|=
name|qopenglslPositionWithLinearGradientBrushVertexShader
expr_stmt|;
name|code
index|[
name|PositionWithConicalGradientBrushVertexShader
index|]
operator|=
name|qopenglslPositionWithConicalGradientBrushVertexShader
expr_stmt|;
name|code
index|[
name|PositionWithRadialGradientBrushVertexShader
index|]
operator|=
name|qopenglslPositionWithRadialGradientBrushVertexShader
expr_stmt|;
name|code
index|[
name|PositionWithTextureBrushVertexShader
index|]
operator|=
name|qopenglslPositionWithTextureBrushVertexShader
expr_stmt|;
name|code
index|[
name|AffinePositionWithPatternBrushVertexShader
index|]
operator|=
name|qopenglslAffinePositionWithPatternBrushVertexShader
expr_stmt|;
name|code
index|[
name|AffinePositionWithLinearGradientBrushVertexShader
index|]
operator|=
name|qopenglslAffinePositionWithLinearGradientBrushVertexShader
expr_stmt|;
name|code
index|[
name|AffinePositionWithConicalGradientBrushVertexShader
index|]
operator|=
name|qopenglslAffinePositionWithConicalGradientBrushVertexShader
expr_stmt|;
name|code
index|[
name|AffinePositionWithRadialGradientBrushVertexShader
index|]
operator|=
name|qopenglslAffinePositionWithRadialGradientBrushVertexShader
expr_stmt|;
name|code
index|[
name|AffinePositionWithTextureBrushVertexShader
index|]
operator|=
name|qopenglslAffinePositionWithTextureBrushVertexShader
expr_stmt|;
name|code
index|[
name|MainFragmentShader_CMO
index|]
operator|=
name|qopenglslMainFragmentShader_CMO
expr_stmt|;
name|code
index|[
name|MainFragmentShader_CM
index|]
operator|=
name|qopenglslMainFragmentShader_CM
expr_stmt|;
name|code
index|[
name|MainFragmentShader_MO
index|]
operator|=
name|qopenglslMainFragmentShader_MO
expr_stmt|;
name|code
index|[
name|MainFragmentShader_M
index|]
operator|=
name|qopenglslMainFragmentShader_M
expr_stmt|;
name|code
index|[
name|MainFragmentShader_CO
index|]
operator|=
name|qopenglslMainFragmentShader_CO
expr_stmt|;
name|code
index|[
name|MainFragmentShader_C
index|]
operator|=
name|qopenglslMainFragmentShader_C
expr_stmt|;
name|code
index|[
name|MainFragmentShader_O
index|]
operator|=
name|qopenglslMainFragmentShader_O
expr_stmt|;
name|code
index|[
name|MainFragmentShader
index|]
operator|=
name|qopenglslMainFragmentShader
expr_stmt|;
name|code
index|[
name|MainFragmentShader_ImageArrays
index|]
operator|=
name|qopenglslMainFragmentShader_ImageArrays
expr_stmt|;
name|code
index|[
name|ImageSrcFragmentShader
index|]
operator|=
name|qopenglslImageSrcFragmentShader
expr_stmt|;
name|code
index|[
name|ImageSrcWithPatternFragmentShader
index|]
operator|=
name|qopenglslImageSrcWithPatternFragmentShader
expr_stmt|;
name|code
index|[
name|NonPremultipliedImageSrcFragmentShader
index|]
operator|=
name|qopenglslNonPremultipliedImageSrcFragmentShader
expr_stmt|;
name|code
index|[
name|GrayscaleImageSrcFragmentShader
index|]
operator|=
name|qopenglslGrayscaleImageSrcFragmentShader
expr_stmt|;
name|code
index|[
name|AlphaImageSrcFragmentShader
index|]
operator|=
name|qopenglslAlphaImageSrcFragmentShader
expr_stmt|;
name|code
index|[
name|CustomImageSrcFragmentShader
index|]
operator|=
name|qopenglslCustomSrcFragmentShader
expr_stmt|;
comment|// Calls "customShader", which must be appended
name|code
index|[
name|SolidBrushSrcFragmentShader
index|]
operator|=
name|qopenglslSolidBrushSrcFragmentShader
expr_stmt|;
if|if
condition|(
name|context
operator|->
name|isOpenGLES
argument_list|()
condition|)
name|code
index|[
name|TextureBrushSrcFragmentShader
index|]
operator|=
name|qopenglslTextureBrushSrcFragmentShader_ES
expr_stmt|;
else|else
name|code
index|[
name|TextureBrushSrcFragmentShader
index|]
operator|=
name|qopenglslTextureBrushSrcFragmentShader_desktop
expr_stmt|;
name|code
index|[
name|TextureBrushSrcWithPatternFragmentShader
index|]
operator|=
name|qopenglslTextureBrushSrcWithPatternFragmentShader
expr_stmt|;
name|code
index|[
name|PatternBrushSrcFragmentShader
index|]
operator|=
name|qopenglslPatternBrushSrcFragmentShader
expr_stmt|;
name|code
index|[
name|LinearGradientBrushSrcFragmentShader
index|]
operator|=
name|qopenglslLinearGradientBrushSrcFragmentShader
expr_stmt|;
name|code
index|[
name|RadialGradientBrushSrcFragmentShader
index|]
operator|=
name|qopenglslRadialGradientBrushSrcFragmentShader
expr_stmt|;
name|code
index|[
name|ConicalGradientBrushSrcFragmentShader
index|]
operator|=
name|qopenglslConicalGradientBrushSrcFragmentShader
expr_stmt|;
name|code
index|[
name|ShockingPinkSrcFragmentShader
index|]
operator|=
name|qopenglslShockingPinkSrcFragmentShader
expr_stmt|;
name|code
index|[
name|NoMaskFragmentShader
index|]
operator|=
literal|""
expr_stmt|;
name|code
index|[
name|MaskFragmentShader
index|]
operator|=
name|qopenglslMaskFragmentShader
expr_stmt|;
name|code
index|[
name|RgbMaskFragmentShaderPass1
index|]
operator|=
name|qopenglslRgbMaskFragmentShaderPass1
expr_stmt|;
name|code
index|[
name|RgbMaskFragmentShaderPass2
index|]
operator|=
name|qopenglslRgbMaskFragmentShaderPass2
expr_stmt|;
name|code
index|[
name|RgbMaskWithGammaFragmentShader
index|]
operator|=
literal|""
expr_stmt|;
comment|//###
name|code
index|[
name|NoCompositionModeFragmentShader
index|]
operator|=
literal|""
expr_stmt|;
name|code
index|[
name|MultiplyCompositionModeFragmentShader
index|]
operator|=
literal|""
expr_stmt|;
comment|//###
name|code
index|[
name|ScreenCompositionModeFragmentShader
index|]
operator|=
literal|""
expr_stmt|;
comment|//###
name|code
index|[
name|OverlayCompositionModeFragmentShader
index|]
operator|=
literal|""
expr_stmt|;
comment|//###
name|code
index|[
name|DarkenCompositionModeFragmentShader
index|]
operator|=
literal|""
expr_stmt|;
comment|//###
name|code
index|[
name|LightenCompositionModeFragmentShader
index|]
operator|=
literal|""
expr_stmt|;
comment|//###
name|code
index|[
name|ColorDodgeCompositionModeFragmentShader
index|]
operator|=
literal|""
expr_stmt|;
comment|//###
name|code
index|[
name|ColorBurnCompositionModeFragmentShader
index|]
operator|=
literal|""
expr_stmt|;
comment|//###
name|code
index|[
name|HardLightCompositionModeFragmentShader
index|]
operator|=
literal|""
expr_stmt|;
comment|//###
name|code
index|[
name|SoftLightCompositionModeFragmentShader
index|]
operator|=
literal|""
expr_stmt|;
comment|//###
name|code
index|[
name|DifferenceCompositionModeFragmentShader
index|]
operator|=
literal|""
expr_stmt|;
comment|//###
name|code
index|[
name|ExclusionCompositionModeFragmentShader
index|]
operator|=
literal|""
expr_stmt|;
comment|//###
if|#
directive|if
name|defined
argument_list|(
name|QT_DEBUG
argument_list|)
comment|// Check that all the elements have been filled:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TotalSnippetCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|qShaderSnippets
index|[
name|i
index|]
operator|==
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"Shader snippet for %s (#%d) is missing!"
argument_list|,
name|snippetNameStr
argument_list|(
name|SnippetName
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
name|snippetsPopulated
operator|=
literal|true
expr_stmt|;
block|}
name|QOpenGLShader
modifier|*
name|fragShader
decl_stmt|;
name|QOpenGLShader
modifier|*
name|vertexShader
decl_stmt|;
name|QByteArray
name|vertexSource
decl_stmt|;
name|QByteArray
name|fragSource
decl_stmt|;
comment|// Compile up the simple shader:
name|vertexSource
operator|.
name|append
argument_list|(
name|qShaderSnippets
index|[
name|MainVertexShader
index|]
argument_list|)
expr_stmt|;
name|vertexSource
operator|.
name|append
argument_list|(
name|qShaderSnippets
index|[
name|PositionOnlyVertexShader
index|]
argument_list|)
expr_stmt|;
name|fragSource
operator|.
name|append
argument_list|(
name|qShaderSnippets
index|[
name|MainFragmentShader
index|]
argument_list|)
expr_stmt|;
name|fragSource
operator|.
name|append
argument_list|(
name|qShaderSnippets
index|[
name|ShockingPinkSrcFragmentShader
index|]
argument_list|)
expr_stmt|;
name|simpleShaderProg
operator|=
operator|new
name|QOpenGLShaderProgram
expr_stmt|;
name|CachedShader
name|simpleShaderCache
argument_list|(
name|fragSource
argument_list|,
name|vertexSource
argument_list|)
decl_stmt|;
name|bool
name|inCache
init|=
name|simpleShaderCache
operator|.
name|load
argument_list|(
name|simpleShaderProg
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|inCache
condition|)
block|{
name|vertexShader
operator|=
operator|new
name|QOpenGLShader
argument_list|(
name|QOpenGLShader
operator|::
name|Vertex
argument_list|)
expr_stmt|;
name|shaders
operator|.
name|append
argument_list|(
name|vertexShader
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|vertexShader
operator|->
name|compileSourceCode
argument_list|(
name|vertexSource
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"Vertex shader for simpleShaderProg (MainVertexShader& PositionOnlyVertexShader) failed to compile"
argument_list|)
expr_stmt|;
name|fragShader
operator|=
operator|new
name|QOpenGLShader
argument_list|(
name|QOpenGLShader
operator|::
name|Fragment
argument_list|)
expr_stmt|;
name|shaders
operator|.
name|append
argument_list|(
name|fragShader
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fragShader
operator|->
name|compileSourceCode
argument_list|(
name|fragSource
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"Fragment shader for simpleShaderProg (MainFragmentShader& ShockingPinkSrcFragmentShader) failed to compile"
argument_list|)
expr_stmt|;
name|simpleShaderProg
operator|->
name|addShader
argument_list|(
name|vertexShader
argument_list|)
expr_stmt|;
name|simpleShaderProg
operator|->
name|addShader
argument_list|(
name|fragShader
argument_list|)
expr_stmt|;
name|simpleShaderProg
operator|->
name|bindAttributeLocation
argument_list|(
literal|"vertexCoordsArray"
argument_list|,
name|QT_VERTEX_COORDS_ATTR
argument_list|)
expr_stmt|;
name|simpleShaderProg
operator|->
name|bindAttributeLocation
argument_list|(
literal|"pmvMatrix1"
argument_list|,
name|QT_PMV_MATRIX_1_ATTR
argument_list|)
expr_stmt|;
name|simpleShaderProg
operator|->
name|bindAttributeLocation
argument_list|(
literal|"pmvMatrix2"
argument_list|,
name|QT_PMV_MATRIX_2_ATTR
argument_list|)
expr_stmt|;
name|simpleShaderProg
operator|->
name|bindAttributeLocation
argument_list|(
literal|"pmvMatrix3"
argument_list|,
name|QT_PMV_MATRIX_3_ATTR
argument_list|)
expr_stmt|;
block|}
name|simpleShaderProg
operator|->
name|link
argument_list|()
expr_stmt|;
if|if
condition|(
name|simpleShaderProg
operator|->
name|isLinked
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|inCache
condition|)
name|simpleShaderCache
operator|.
name|store
argument_list|(
name|simpleShaderProg
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qCritical
argument_list|(
literal|"Errors linking simple shader: %s"
argument_list|,
name|qPrintable
argument_list|(
name|simpleShaderProg
operator|->
name|log
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Compile the blit shader:
name|vertexSource
operator|.
name|clear
argument_list|()
expr_stmt|;
name|vertexSource
operator|.
name|append
argument_list|(
name|qShaderSnippets
index|[
name|MainWithTexCoordsVertexShader
index|]
argument_list|)
expr_stmt|;
name|vertexSource
operator|.
name|append
argument_list|(
name|qShaderSnippets
index|[
name|UntransformedPositionVertexShader
index|]
argument_list|)
expr_stmt|;
name|fragSource
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fragSource
operator|.
name|append
argument_list|(
name|qShaderSnippets
index|[
name|MainFragmentShader
index|]
argument_list|)
expr_stmt|;
name|fragSource
operator|.
name|append
argument_list|(
name|qShaderSnippets
index|[
name|ImageSrcFragmentShader
index|]
argument_list|)
expr_stmt|;
name|blitShaderProg
operator|=
operator|new
name|QOpenGLShaderProgram
expr_stmt|;
name|CachedShader
name|blitShaderCache
argument_list|(
name|fragSource
argument_list|,
name|vertexSource
argument_list|)
decl_stmt|;
name|inCache
operator|=
name|blitShaderCache
operator|.
name|load
argument_list|(
name|blitShaderProg
argument_list|,
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|inCache
condition|)
block|{
name|vertexShader
operator|=
operator|new
name|QOpenGLShader
argument_list|(
name|QOpenGLShader
operator|::
name|Vertex
argument_list|)
expr_stmt|;
name|shaders
operator|.
name|append
argument_list|(
name|vertexShader
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|vertexShader
operator|->
name|compileSourceCode
argument_list|(
name|vertexSource
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"Vertex shader for blitShaderProg (MainWithTexCoordsVertexShader& UntransformedPositionVertexShader) failed to compile"
argument_list|)
expr_stmt|;
name|fragShader
operator|=
operator|new
name|QOpenGLShader
argument_list|(
name|QOpenGLShader
operator|::
name|Fragment
argument_list|)
expr_stmt|;
name|shaders
operator|.
name|append
argument_list|(
name|fragShader
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fragShader
operator|->
name|compileSourceCode
argument_list|(
name|fragSource
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"Fragment shader for blitShaderProg (MainFragmentShader& ImageSrcFragmentShader) failed to compile"
argument_list|)
expr_stmt|;
name|blitShaderProg
operator|->
name|addShader
argument_list|(
name|vertexShader
argument_list|)
expr_stmt|;
name|blitShaderProg
operator|->
name|addShader
argument_list|(
name|fragShader
argument_list|)
expr_stmt|;
name|blitShaderProg
operator|->
name|bindAttributeLocation
argument_list|(
literal|"textureCoordArray"
argument_list|,
name|QT_TEXTURE_COORDS_ATTR
argument_list|)
expr_stmt|;
name|blitShaderProg
operator|->
name|bindAttributeLocation
argument_list|(
literal|"vertexCoordsArray"
argument_list|,
name|QT_VERTEX_COORDS_ATTR
argument_list|)
expr_stmt|;
block|}
name|blitShaderProg
operator|->
name|link
argument_list|()
expr_stmt|;
if|if
condition|(
name|blitShaderProg
operator|->
name|isLinked
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|inCache
condition|)
name|blitShaderCache
operator|.
name|store
argument_list|(
name|blitShaderProg
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qCritical
argument_list|(
literal|"Errors linking blit shader: %s"
argument_list|,
name|qPrintable
argument_list|(
name|blitShaderProg
operator|->
name|log
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QT_GL_SHARED_SHADER_DEBUG
name|qDebug
argument_list|(
literal|" -> QOpenGLEngineSharedShaders() %p for thread %p."
argument_list|,
name|this
argument_list|,
name|QThread
operator|::
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QOpenGLEngineSharedShaders
name|QOpenGLEngineSharedShaders
operator|::
name|~
name|QOpenGLEngineSharedShaders
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_GL_SHARED_SHADER_DEBUG
name|qDebug
argument_list|(
literal|" -> ~QOpenGLEngineSharedShaders() %p for thread %p."
argument_list|,
name|this
argument_list|,
name|QThread
operator|::
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qDeleteAll
argument_list|(
name|shaders
argument_list|)
expr_stmt|;
name|shaders
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|cachedPrograms
argument_list|)
expr_stmt|;
name|cachedPrograms
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|blitShaderProg
condition|)
block|{
operator|delete
name|blitShaderProg
expr_stmt|;
name|blitShaderProg
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|simpleShaderProg
condition|)
block|{
operator|delete
name|simpleShaderProg
expr_stmt|;
name|simpleShaderProg
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_destructor
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_DEBUG
argument_list|)
end_if
begin_function
DECL|function|snippetNameStr
name|QByteArray
name|QOpenGLEngineSharedShaders
operator|::
name|snippetNameStr
parameter_list|(
name|SnippetName
name|name
parameter_list|)
block|{
name|QMetaEnum
name|m
init|=
name|staticMetaObject
operator|.
name|enumerator
argument_list|(
name|staticMetaObject
operator|.
name|indexOfEnumerator
argument_list|(
literal|"SnippetName"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|QByteArray
argument_list|(
name|m
operator|.
name|valueToKey
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// The address returned here will only be valid until next time this function is called.
end_comment
begin_comment
comment|// The program is return bound.
end_comment
begin_function
DECL|function|findProgramInCache
name|QOpenGLEngineShaderProg
modifier|*
name|QOpenGLEngineSharedShaders
operator|::
name|findProgramInCache
parameter_list|(
specifier|const
name|QOpenGLEngineShaderProg
modifier|&
name|prog
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cachedPrograms
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QOpenGLEngineShaderProg
modifier|*
name|cachedProg
init|=
name|cachedPrograms
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|*
name|cachedProg
operator|==
name|prog
condition|)
block|{
comment|// Move the program to the top of the list as a poor-man's cache algo
name|cachedPrograms
operator|.
name|move
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cachedProg
operator|->
name|program
operator|->
name|bind
argument_list|()
expr_stmt|;
return|return
name|cachedProg
return|;
block|}
block|}
name|QScopedPointer
argument_list|<
name|QOpenGLEngineShaderProg
argument_list|>
name|newProg
decl_stmt|;
do|do
block|{
name|QByteArray
name|fragSource
decl_stmt|;
comment|// Insert the custom stage before the srcPixel shader to work around an ATI driver bug
comment|// where you cannot forward declare a function that takes a sampler as argument.
if|if
condition|(
name|prog
operator|.
name|srcPixelFragShader
operator|==
name|CustomImageSrcFragmentShader
condition|)
name|fragSource
operator|.
name|append
argument_list|(
name|prog
operator|.
name|customStageSource
argument_list|)
expr_stmt|;
name|fragSource
operator|.
name|append
argument_list|(
name|qShaderSnippets
index|[
name|prog
operator|.
name|mainFragShader
index|]
argument_list|)
expr_stmt|;
name|fragSource
operator|.
name|append
argument_list|(
name|qShaderSnippets
index|[
name|prog
operator|.
name|srcPixelFragShader
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|prog
operator|.
name|compositionFragShader
condition|)
name|fragSource
operator|.
name|append
argument_list|(
name|qShaderSnippets
index|[
name|prog
operator|.
name|compositionFragShader
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|prog
operator|.
name|maskFragShader
condition|)
name|fragSource
operator|.
name|append
argument_list|(
name|qShaderSnippets
index|[
name|prog
operator|.
name|maskFragShader
index|]
argument_list|)
expr_stmt|;
name|QByteArray
name|vertexSource
decl_stmt|;
name|vertexSource
operator|.
name|append
argument_list|(
name|qShaderSnippets
index|[
name|prog
operator|.
name|mainVertexShader
index|]
argument_list|)
expr_stmt|;
name|vertexSource
operator|.
name|append
argument_list|(
name|qShaderSnippets
index|[
name|prog
operator|.
name|positionVertexShader
index|]
argument_list|)
expr_stmt|;
name|QScopedPointer
argument_list|<
name|QOpenGLShaderProgram
argument_list|>
name|shaderProgram
argument_list|(
operator|new
name|QOpenGLShaderProgram
argument_list|)
decl_stmt|;
name|CachedShader
name|shaderCache
argument_list|(
name|fragSource
argument_list|,
name|vertexSource
argument_list|)
decl_stmt|;
name|bool
name|inCache
init|=
name|shaderCache
operator|.
name|load
argument_list|(
name|shaderProgram
operator|.
name|data
argument_list|()
argument_list|,
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|inCache
condition|)
block|{
name|QScopedPointer
argument_list|<
name|QOpenGLShader
argument_list|>
name|fragShader
argument_list|(
operator|new
name|QOpenGLShader
argument_list|(
name|QOpenGLShader
operator|::
name|Fragment
argument_list|)
argument_list|)
decl_stmt|;
name|QByteArray
name|description
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_DEBUG
argument_list|)
comment|// Name the shader for easier debugging
name|description
operator|.
name|append
argument_list|(
literal|"Fragment shader: main="
argument_list|)
expr_stmt|;
name|description
operator|.
name|append
argument_list|(
name|snippetNameStr
argument_list|(
name|prog
operator|.
name|mainFragShader
argument_list|)
argument_list|)
expr_stmt|;
name|description
operator|.
name|append
argument_list|(
literal|", srcPixel="
argument_list|)
expr_stmt|;
name|description
operator|.
name|append
argument_list|(
name|snippetNameStr
argument_list|(
name|prog
operator|.
name|srcPixelFragShader
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|prog
operator|.
name|compositionFragShader
condition|)
block|{
name|description
operator|.
name|append
argument_list|(
literal|", composition="
argument_list|)
expr_stmt|;
name|description
operator|.
name|append
argument_list|(
name|snippetNameStr
argument_list|(
name|prog
operator|.
name|compositionFragShader
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prog
operator|.
name|maskFragShader
condition|)
block|{
name|description
operator|.
name|append
argument_list|(
literal|", mask="
argument_list|)
expr_stmt|;
name|description
operator|.
name|append
argument_list|(
name|snippetNameStr
argument_list|(
name|prog
operator|.
name|maskFragShader
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fragShader
operator|->
name|setObjectName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|description
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|fragShader
operator|->
name|compileSourceCode
argument_list|(
name|fragSource
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Warning:"
operator|<<
name|description
operator|<<
literal|"failed to compile!"
expr_stmt|;
break|break;
block|}
name|QScopedPointer
argument_list|<
name|QOpenGLShader
argument_list|>
name|vertexShader
argument_list|(
operator|new
name|QOpenGLShader
argument_list|(
name|QOpenGLShader
operator|::
name|Vertex
argument_list|)
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_DEBUG
argument_list|)
comment|// Name the shader for easier debugging
name|description
operator|.
name|clear
argument_list|()
expr_stmt|;
name|description
operator|.
name|append
argument_list|(
literal|"Vertex shader: main="
argument_list|)
expr_stmt|;
name|description
operator|.
name|append
argument_list|(
name|snippetNameStr
argument_list|(
name|prog
operator|.
name|mainVertexShader
argument_list|)
argument_list|)
expr_stmt|;
name|description
operator|.
name|append
argument_list|(
literal|", position="
argument_list|)
expr_stmt|;
name|description
operator|.
name|append
argument_list|(
name|snippetNameStr
argument_list|(
name|prog
operator|.
name|positionVertexShader
argument_list|)
argument_list|)
expr_stmt|;
name|vertexShader
operator|->
name|setObjectName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|description
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|vertexShader
operator|->
name|compileSourceCode
argument_list|(
name|vertexSource
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Warning:"
operator|<<
name|description
operator|<<
literal|"failed to compile!"
expr_stmt|;
break|break;
block|}
name|shaders
operator|.
name|append
argument_list|(
name|vertexShader
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|shaders
operator|.
name|append
argument_list|(
name|fragShader
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|shaderProgram
operator|->
name|addShader
argument_list|(
name|vertexShader
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
name|shaderProgram
operator|->
name|addShader
argument_list|(
name|fragShader
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
comment|// We have to bind the vertex attribute names before the program is linked:
name|shaderProgram
operator|->
name|bindAttributeLocation
argument_list|(
literal|"vertexCoordsArray"
argument_list|,
name|QT_VERTEX_COORDS_ATTR
argument_list|)
expr_stmt|;
if|if
condition|(
name|prog
operator|.
name|useTextureCoords
condition|)
name|shaderProgram
operator|->
name|bindAttributeLocation
argument_list|(
literal|"textureCoordArray"
argument_list|,
name|QT_TEXTURE_COORDS_ATTR
argument_list|)
expr_stmt|;
if|if
condition|(
name|prog
operator|.
name|useOpacityAttribute
condition|)
name|shaderProgram
operator|->
name|bindAttributeLocation
argument_list|(
literal|"opacityArray"
argument_list|,
name|QT_OPACITY_ATTR
argument_list|)
expr_stmt|;
if|if
condition|(
name|prog
operator|.
name|usePmvMatrixAttribute
condition|)
block|{
name|shaderProgram
operator|->
name|bindAttributeLocation
argument_list|(
literal|"pmvMatrix1"
argument_list|,
name|QT_PMV_MATRIX_1_ATTR
argument_list|)
expr_stmt|;
name|shaderProgram
operator|->
name|bindAttributeLocation
argument_list|(
literal|"pmvMatrix2"
argument_list|,
name|QT_PMV_MATRIX_2_ATTR
argument_list|)
expr_stmt|;
name|shaderProgram
operator|->
name|bindAttributeLocation
argument_list|(
literal|"pmvMatrix3"
argument_list|,
name|QT_PMV_MATRIX_3_ATTR
argument_list|)
expr_stmt|;
block|}
block|}
name|newProg
operator|.
name|reset
argument_list|(
operator|new
name|QOpenGLEngineShaderProg
argument_list|(
name|prog
argument_list|)
argument_list|)
expr_stmt|;
name|newProg
operator|->
name|program
operator|=
name|shaderProgram
operator|.
name|take
argument_list|()
expr_stmt|;
name|newProg
operator|->
name|program
operator|->
name|link
argument_list|()
expr_stmt|;
if|if
condition|(
name|newProg
operator|->
name|program
operator|->
name|isLinked
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|inCache
condition|)
name|shaderCache
operator|.
name|store
argument_list|(
name|newProg
operator|->
name|program
argument_list|,
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QLatin1String
name|none
argument_list|(
literal|"none"
argument_list|)
decl_stmt|;
name|QLatin1String
name|br
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|QString
name|error
decl_stmt|;
name|error
operator|=
name|QLatin1String
argument_list|(
literal|"Shader program failed to link,"
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_DEBUG
argument_list|)
name|error
operator|+=
name|QLatin1String
argument_list|(
literal|"\n  Shaders Used:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newProg
operator|->
name|program
operator|->
name|shaders
argument_list|()
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QOpenGLShader
modifier|*
name|shader
init|=
name|newProg
operator|->
name|program
operator|->
name|shaders
argument_list|()
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|error
operator|+=
name|QLatin1String
argument_list|(
literal|"    "
argument_list|)
operator|+
name|shader
operator|->
name|objectName
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|": \n"
argument_list|)
operator|+
name|QLatin1String
argument_list|(
name|shader
operator|->
name|sourceCode
argument_list|()
argument_list|)
operator|+
name|br
expr_stmt|;
block|}
endif|#
directive|endif
name|error
operator|+=
name|QLatin1String
argument_list|(
literal|"  Error Log:\n"
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"    "
argument_list|)
operator|+
name|newProg
operator|->
name|program
operator|->
name|log
argument_list|()
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
name|error
expr_stmt|;
break|break;
block|}
name|newProg
operator|->
name|program
operator|->
name|bind
argument_list|()
expr_stmt|;
if|if
condition|(
name|newProg
operator|->
name|maskFragShader
operator|!=
name|QOpenGLEngineSharedShaders
operator|::
name|NoMaskFragmentShader
condition|)
block|{
name|GLuint
name|location
init|=
name|newProg
operator|->
name|program
operator|->
name|uniformLocation
argument_list|(
literal|"maskTexture"
argument_list|)
decl_stmt|;
name|newProg
operator|->
name|program
operator|->
name|setUniformValue
argument_list|(
name|location
argument_list|,
name|QT_MASK_TEXTURE_UNIT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cachedPrograms
operator|.
name|count
argument_list|()
operator|>
literal|30
condition|)
block|{
comment|// The cache is full, so delete the last 5 programs in the list.
comment|// These programs will be least used, as a program us bumped to
comment|// the top of the list when it's used.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
operator|delete
name|cachedPrograms
operator|.
name|last
argument_list|()
expr_stmt|;
name|cachedPrograms
operator|.
name|removeLast
argument_list|()
expr_stmt|;
block|}
block|}
name|cachedPrograms
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|newProg
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
return|return
name|newProg
operator|.
name|take
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|cleanupCustomStage
name|void
name|QOpenGLEngineSharedShaders
operator|::
name|cleanupCustomStage
parameter_list|(
name|QOpenGLCustomShaderStage
modifier|*
name|stage
parameter_list|)
block|{
comment|// Remove any shader programs which has this as the custom shader src:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cachedPrograms
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QOpenGLEngineShaderProg
modifier|*
name|cachedProg
init|=
name|cachedPrograms
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|cachedProg
operator|->
name|customStageSource
operator|==
name|stage
operator|->
name|source
argument_list|()
condition|)
block|{
operator|delete
name|cachedProg
expr_stmt|;
name|cachedPrograms
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|i
operator|--
expr_stmt|;
block|}
block|}
block|}
end_function
begin_constructor
DECL|function|QOpenGLEngineShaderManager
name|QOpenGLEngineShaderManager
operator|::
name|QOpenGLEngineShaderManager
parameter_list|(
name|QOpenGLContext
modifier|*
name|context
parameter_list|)
member_init_list|:
name|ctx
argument_list|(
name|context
argument_list|)
member_init_list|,
name|shaderProgNeedsChanging
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|complexGeometry
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|srcPixelType
argument_list|(
name|Qt
operator|::
name|NoBrush
argument_list|)
member_init_list|,
name|opacityMode
argument_list|(
name|NoOpacity
argument_list|)
member_init_list|,
name|maskType
argument_list|(
name|NoMask
argument_list|)
member_init_list|,
name|compositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_SourceOver
argument_list|)
member_init_list|,
name|customSrcStage
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|currentShaderProg
argument_list|(
literal|0
argument_list|)
block|{
name|sharedShaders
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|shadersForContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QOpenGLEngineShaderManager
name|QOpenGLEngineShaderManager
operator|::
name|~
name|QOpenGLEngineShaderManager
parameter_list|()
block|{
comment|//###
name|removeCustomStage
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|getUniformLocation
name|GLuint
name|QOpenGLEngineShaderManager
operator|::
name|getUniformLocation
parameter_list|(
name|Uniform
name|id
parameter_list|)
block|{
if|if
condition|(
operator|!
name|currentShaderProg
condition|)
return|return
literal|0
return|;
name|QVector
argument_list|<
name|uint
argument_list|>
modifier|&
name|uniformLocations
init|=
name|currentShaderProg
operator|->
name|uniformLocations
decl_stmt|;
if|if
condition|(
name|uniformLocations
operator|.
name|isEmpty
argument_list|()
condition|)
name|uniformLocations
operator|.
name|fill
argument_list|(
name|GLuint
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|NumUniforms
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|char
modifier|*
name|uniformNames
index|[]
init|=
block|{
literal|"imageTexture"
block|,
literal|"patternColor"
block|,
literal|"globalOpacity"
block|,
literal|"depth"
block|,
literal|"maskTexture"
block|,
literal|"fragmentColor"
block|,
literal|"linearData"
block|,
literal|"angle"
block|,
literal|"halfViewportSize"
block|,
literal|"fmp"
block|,
literal|"fmp2_m_radius2"
block|,
literal|"inverse_2_fmp2_m_radius2"
block|,
literal|"sqrfr"
block|,
literal|"bradius"
block|,
literal|"invertedTextureSize"
block|,
literal|"brushTransform"
block|,
literal|"brushTexture"
block|,
literal|"matrix"
block|}
decl_stmt|;
if|if
condition|(
name|uniformLocations
operator|.
name|at
argument_list|(
name|id
argument_list|)
operator|==
name|GLuint
argument_list|(
operator|-
literal|1
argument_list|)
condition|)
name|uniformLocations
index|[
name|id
index|]
operator|=
name|currentShaderProg
operator|->
name|program
operator|->
name|uniformLocation
argument_list|(
name|uniformNames
index|[
name|id
index|]
argument_list|)
expr_stmt|;
return|return
name|uniformLocations
operator|.
name|at
argument_list|(
name|id
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|optimiseForBrushTransform
name|void
name|QOpenGLEngineShaderManager
operator|::
name|optimiseForBrushTransform
parameter_list|(
name|QTransform
operator|::
name|TransformationType
name|transformType
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|transformType
argument_list|)
expr_stmt|;
comment|// Currently ignored
block|}
end_function
begin_function
DECL|function|setDirty
name|void
name|QOpenGLEngineShaderManager
operator|::
name|setDirty
parameter_list|()
block|{
name|shaderProgNeedsChanging
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSrcPixelType
name|void
name|QOpenGLEngineShaderManager
operator|::
name|setSrcPixelType
parameter_list|(
name|Qt
operator|::
name|BrushStyle
name|style
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|style
operator|!=
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
if|if
condition|(
name|srcPixelType
operator|==
name|PixelSrcType
argument_list|(
name|style
argument_list|)
condition|)
return|return;
name|srcPixelType
operator|=
name|style
expr_stmt|;
name|shaderProgNeedsChanging
operator|=
literal|true
expr_stmt|;
comment|//###
block|}
end_function
begin_function
DECL|function|setSrcPixelType
name|void
name|QOpenGLEngineShaderManager
operator|::
name|setSrcPixelType
parameter_list|(
name|PixelSrcType
name|type
parameter_list|)
block|{
if|if
condition|(
name|srcPixelType
operator|==
name|type
condition|)
return|return;
name|srcPixelType
operator|=
name|type
expr_stmt|;
name|shaderProgNeedsChanging
operator|=
literal|true
expr_stmt|;
comment|//###
block|}
end_function
begin_function
DECL|function|setOpacityMode
name|void
name|QOpenGLEngineShaderManager
operator|::
name|setOpacityMode
parameter_list|(
name|OpacityMode
name|mode
parameter_list|)
block|{
if|if
condition|(
name|opacityMode
operator|==
name|mode
condition|)
return|return;
name|opacityMode
operator|=
name|mode
expr_stmt|;
name|shaderProgNeedsChanging
operator|=
literal|true
expr_stmt|;
comment|//###
block|}
end_function
begin_function
DECL|function|setMaskType
name|void
name|QOpenGLEngineShaderManager
operator|::
name|setMaskType
parameter_list|(
name|MaskType
name|type
parameter_list|)
block|{
if|if
condition|(
name|maskType
operator|==
name|type
condition|)
return|return;
name|maskType
operator|=
name|type
expr_stmt|;
name|shaderProgNeedsChanging
operator|=
literal|true
expr_stmt|;
comment|//###
block|}
end_function
begin_function
DECL|function|setCompositionMode
name|void
name|QOpenGLEngineShaderManager
operator|::
name|setCompositionMode
parameter_list|(
name|QPainter
operator|::
name|CompositionMode
name|mode
parameter_list|)
block|{
if|if
condition|(
name|compositionMode
operator|==
name|mode
condition|)
return|return;
name|compositionMode
operator|=
name|mode
expr_stmt|;
name|shaderProgNeedsChanging
operator|=
literal|true
expr_stmt|;
comment|//###
block|}
end_function
begin_function
DECL|function|setCustomStage
name|void
name|QOpenGLEngineShaderManager
operator|::
name|setCustomStage
parameter_list|(
name|QOpenGLCustomShaderStage
modifier|*
name|stage
parameter_list|)
block|{
if|if
condition|(
name|customSrcStage
condition|)
name|removeCustomStage
argument_list|()
expr_stmt|;
name|customSrcStage
operator|=
name|stage
expr_stmt|;
name|shaderProgNeedsChanging
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeCustomStage
name|void
name|QOpenGLEngineShaderManager
operator|::
name|removeCustomStage
parameter_list|()
block|{
if|if
condition|(
name|customSrcStage
condition|)
name|customSrcStage
operator|->
name|setInactive
argument_list|()
expr_stmt|;
name|customSrcStage
operator|=
literal|0
expr_stmt|;
name|shaderProgNeedsChanging
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|currentProgram
name|QOpenGLShaderProgram
modifier|*
name|QOpenGLEngineShaderManager
operator|::
name|currentProgram
parameter_list|()
block|{
if|if
condition|(
name|currentShaderProg
condition|)
return|return
name|currentShaderProg
operator|->
name|program
return|;
else|else
return|return
name|sharedShaders
operator|->
name|simpleProgram
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|useSimpleProgram
name|void
name|QOpenGLEngineShaderManager
operator|::
name|useSimpleProgram
parameter_list|()
block|{
name|sharedShaders
operator|->
name|simpleProgram
argument_list|()
operator|->
name|bind
argument_list|()
expr_stmt|;
name|QOpenGLContextPrivate
modifier|*
name|ctx_d
init|=
name|ctx
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|ctx_d
argument_list|)
expr_stmt|;
name|QOpenGL2PaintEngineEx
modifier|*
name|active_engine
init|=
cast|static_cast
argument_list|<
name|QOpenGL2PaintEngineEx
operator|*
argument_list|>
argument_list|(
name|ctx_d
operator|->
name|active_engine
argument_list|)
decl_stmt|;
name|active_engine
operator|->
name|d_func
argument_list|()
operator|->
name|setVertexAttribArrayEnabled
argument_list|(
name|QT_VERTEX_COORDS_ATTR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|active_engine
operator|->
name|d_func
argument_list|()
operator|->
name|setVertexAttribArrayEnabled
argument_list|(
name|QT_TEXTURE_COORDS_ATTR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|active_engine
operator|->
name|d_func
argument_list|()
operator|->
name|setVertexAttribArrayEnabled
argument_list|(
name|QT_OPACITY_ATTR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|shaderProgNeedsChanging
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|useBlitProgram
name|void
name|QOpenGLEngineShaderManager
operator|::
name|useBlitProgram
parameter_list|()
block|{
name|sharedShaders
operator|->
name|blitProgram
argument_list|()
operator|->
name|bind
argument_list|()
expr_stmt|;
name|QOpenGLContextPrivate
modifier|*
name|ctx_d
init|=
name|ctx
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|QOpenGL2PaintEngineEx
modifier|*
name|active_engine
init|=
cast|static_cast
argument_list|<
name|QOpenGL2PaintEngineEx
operator|*
argument_list|>
argument_list|(
name|ctx_d
operator|->
name|active_engine
argument_list|)
decl_stmt|;
name|active_engine
operator|->
name|d_func
argument_list|()
operator|->
name|setVertexAttribArrayEnabled
argument_list|(
name|QT_VERTEX_COORDS_ATTR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|active_engine
operator|->
name|d_func
argument_list|()
operator|->
name|setVertexAttribArrayEnabled
argument_list|(
name|QT_TEXTURE_COORDS_ATTR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|active_engine
operator|->
name|d_func
argument_list|()
operator|->
name|setVertexAttribArrayEnabled
argument_list|(
name|QT_OPACITY_ATTR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|shaderProgNeedsChanging
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|simpleProgram
name|QOpenGLShaderProgram
modifier|*
name|QOpenGLEngineShaderManager
operator|::
name|simpleProgram
parameter_list|()
block|{
return|return
name|sharedShaders
operator|->
name|simpleProgram
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|blitProgram
name|QOpenGLShaderProgram
modifier|*
name|QOpenGLEngineShaderManager
operator|::
name|blitProgram
parameter_list|()
block|{
return|return
name|sharedShaders
operator|->
name|blitProgram
argument_list|()
return|;
block|}
end_function
begin_comment
comment|// Select& use the correct shader program using the current state.
end_comment
begin_comment
comment|// Returns \c true if program needed changing.
end_comment
begin_function
DECL|function|useCorrectShaderProg
name|bool
name|QOpenGLEngineShaderManager
operator|::
name|useCorrectShaderProg
parameter_list|()
block|{
if|if
condition|(
operator|!
name|shaderProgNeedsChanging
condition|)
return|return
literal|false
return|;
name|bool
name|useCustomSrc
init|=
name|customSrcStage
operator|!=
literal|0
decl_stmt|;
if|if
condition|(
name|useCustomSrc
operator|&&
name|srcPixelType
operator|!=
name|QOpenGLEngineShaderManager
operator|::
name|ImageSrc
operator|&&
name|srcPixelType
operator|!=
name|Qt
operator|::
name|TexturePattern
condition|)
block|{
name|useCustomSrc
operator|=
literal|false
expr_stmt|;
name|qWarning
argument_list|(
literal|"QOpenGLEngineShaderManager - Ignoring custom shader stage for non image src"
argument_list|)
expr_stmt|;
block|}
name|QOpenGLEngineShaderProg
name|requiredProgram
decl_stmt|;
name|bool
name|texCoords
init|=
literal|false
decl_stmt|;
comment|// Choose vertex shader shader position function (which typically also sets
comment|// varyings) and the source pixel (srcPixel) fragment shader function:
name|requiredProgram
operator|.
name|positionVertexShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|InvalidSnippetName
expr_stmt|;
name|requiredProgram
operator|.
name|srcPixelFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|InvalidSnippetName
expr_stmt|;
name|bool
name|isAffine
init|=
name|brushTransform
operator|.
name|isAffine
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|srcPixelType
operator|>=
name|Qt
operator|::
name|Dense1Pattern
operator|)
operator|&&
operator|(
name|srcPixelType
operator|<=
name|Qt
operator|::
name|DiagCrossPattern
operator|)
condition|)
block|{
if|if
condition|(
name|isAffine
condition|)
name|requiredProgram
operator|.
name|positionVertexShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|AffinePositionWithPatternBrushVertexShader
expr_stmt|;
else|else
name|requiredProgram
operator|.
name|positionVertexShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|PositionWithPatternBrushVertexShader
expr_stmt|;
name|requiredProgram
operator|.
name|srcPixelFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|PatternBrushSrcFragmentShader
expr_stmt|;
block|}
else|else
switch|switch
condition|(
name|srcPixelType
condition|)
block|{
default|default:
case|case
name|Qt
operator|::
name|NoBrush
case|:
name|qFatal
argument_list|(
literal|"QOpenGLEngineShaderManager::useCorrectShaderProg() - Qt::NoBrush style is set"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QOpenGLEngineShaderManager
operator|::
name|ImageSrc
case|:
name|requiredProgram
operator|.
name|srcPixelFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|ImageSrcFragmentShader
expr_stmt|;
name|requiredProgram
operator|.
name|positionVertexShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|PositionOnlyVertexShader
expr_stmt|;
name|texCoords
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QOpenGLEngineShaderManager
operator|::
name|NonPremultipliedImageSrc
case|:
name|requiredProgram
operator|.
name|srcPixelFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|NonPremultipliedImageSrcFragmentShader
expr_stmt|;
name|requiredProgram
operator|.
name|positionVertexShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|PositionOnlyVertexShader
expr_stmt|;
name|texCoords
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QOpenGLEngineShaderManager
operator|::
name|GrayscaleImageSrc
case|:
name|requiredProgram
operator|.
name|srcPixelFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|GrayscaleImageSrcFragmentShader
expr_stmt|;
name|requiredProgram
operator|.
name|positionVertexShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|PositionOnlyVertexShader
expr_stmt|;
name|texCoords
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QOpenGLEngineShaderManager
operator|::
name|AlphaImageSrc
case|:
name|requiredProgram
operator|.
name|srcPixelFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|AlphaImageSrcFragmentShader
expr_stmt|;
name|requiredProgram
operator|.
name|positionVertexShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|PositionOnlyVertexShader
expr_stmt|;
name|texCoords
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QOpenGLEngineShaderManager
operator|::
name|PatternSrc
case|:
name|requiredProgram
operator|.
name|srcPixelFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|ImageSrcWithPatternFragmentShader
expr_stmt|;
name|requiredProgram
operator|.
name|positionVertexShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|PositionOnlyVertexShader
expr_stmt|;
name|texCoords
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QOpenGLEngineShaderManager
operator|::
name|TextureSrcWithPattern
case|:
name|requiredProgram
operator|.
name|srcPixelFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|TextureBrushSrcWithPatternFragmentShader
expr_stmt|;
name|requiredProgram
operator|.
name|positionVertexShader
operator|=
name|isAffine
condition|?
name|QOpenGLEngineSharedShaders
operator|::
name|AffinePositionWithTextureBrushVertexShader
else|:
name|QOpenGLEngineSharedShaders
operator|::
name|PositionWithTextureBrushVertexShader
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SolidPattern
case|:
name|requiredProgram
operator|.
name|srcPixelFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|SolidBrushSrcFragmentShader
expr_stmt|;
name|requiredProgram
operator|.
name|positionVertexShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|PositionOnlyVertexShader
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|LinearGradientPattern
case|:
name|requiredProgram
operator|.
name|srcPixelFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|LinearGradientBrushSrcFragmentShader
expr_stmt|;
name|requiredProgram
operator|.
name|positionVertexShader
operator|=
name|isAffine
condition|?
name|QOpenGLEngineSharedShaders
operator|::
name|AffinePositionWithLinearGradientBrushVertexShader
else|:
name|QOpenGLEngineSharedShaders
operator|::
name|PositionWithLinearGradientBrushVertexShader
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|ConicalGradientPattern
case|:
name|requiredProgram
operator|.
name|srcPixelFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|ConicalGradientBrushSrcFragmentShader
expr_stmt|;
name|requiredProgram
operator|.
name|positionVertexShader
operator|=
name|isAffine
condition|?
name|QOpenGLEngineSharedShaders
operator|::
name|AffinePositionWithConicalGradientBrushVertexShader
else|:
name|QOpenGLEngineSharedShaders
operator|::
name|PositionWithConicalGradientBrushVertexShader
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|RadialGradientPattern
case|:
name|requiredProgram
operator|.
name|srcPixelFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|RadialGradientBrushSrcFragmentShader
expr_stmt|;
name|requiredProgram
operator|.
name|positionVertexShader
operator|=
name|isAffine
condition|?
name|QOpenGLEngineSharedShaders
operator|::
name|AffinePositionWithRadialGradientBrushVertexShader
else|:
name|QOpenGLEngineSharedShaders
operator|::
name|PositionWithRadialGradientBrushVertexShader
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TexturePattern
case|:
name|requiredProgram
operator|.
name|srcPixelFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|TextureBrushSrcFragmentShader
expr_stmt|;
name|requiredProgram
operator|.
name|positionVertexShader
operator|=
name|isAffine
condition|?
name|QOpenGLEngineSharedShaders
operator|::
name|AffinePositionWithTextureBrushVertexShader
else|:
name|QOpenGLEngineSharedShaders
operator|::
name|PositionWithTextureBrushVertexShader
expr_stmt|;
break|break;
block|}
empty_stmt|;
if|if
condition|(
name|useCustomSrc
condition|)
block|{
name|requiredProgram
operator|.
name|srcPixelFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|CustomImageSrcFragmentShader
expr_stmt|;
name|requiredProgram
operator|.
name|customStageSource
operator|=
name|customSrcStage
operator|->
name|source
argument_list|()
expr_stmt|;
block|}
specifier|const
name|bool
name|hasCompose
init|=
name|compositionMode
operator|>
name|QPainter
operator|::
name|CompositionMode_Plus
decl_stmt|;
specifier|const
name|bool
name|hasMask
init|=
name|maskType
operator|!=
name|QOpenGLEngineShaderManager
operator|::
name|NoMask
decl_stmt|;
comment|// Choose fragment shader main function:
if|if
condition|(
name|opacityMode
operator|==
name|AttributeOpacity
condition|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|hasCompose
operator|&&
operator|!
name|hasMask
argument_list|)
expr_stmt|;
name|requiredProgram
operator|.
name|mainFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|MainFragmentShader_ImageArrays
expr_stmt|;
block|}
else|else
block|{
name|bool
name|useGlobalOpacity
init|=
operator|(
name|opacityMode
operator|==
name|UniformOpacity
operator|)
decl_stmt|;
if|if
condition|(
name|hasCompose
operator|&&
name|hasMask
operator|&&
name|useGlobalOpacity
condition|)
name|requiredProgram
operator|.
name|mainFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|MainFragmentShader_CMO
expr_stmt|;
if|if
condition|(
name|hasCompose
operator|&&
name|hasMask
operator|&&
operator|!
name|useGlobalOpacity
condition|)
name|requiredProgram
operator|.
name|mainFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|MainFragmentShader_CM
expr_stmt|;
if|if
condition|(
operator|!
name|hasCompose
operator|&&
name|hasMask
operator|&&
name|useGlobalOpacity
condition|)
name|requiredProgram
operator|.
name|mainFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|MainFragmentShader_MO
expr_stmt|;
if|if
condition|(
operator|!
name|hasCompose
operator|&&
name|hasMask
operator|&&
operator|!
name|useGlobalOpacity
condition|)
name|requiredProgram
operator|.
name|mainFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|MainFragmentShader_M
expr_stmt|;
if|if
condition|(
name|hasCompose
operator|&&
operator|!
name|hasMask
operator|&&
name|useGlobalOpacity
condition|)
name|requiredProgram
operator|.
name|mainFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|MainFragmentShader_CO
expr_stmt|;
if|if
condition|(
name|hasCompose
operator|&&
operator|!
name|hasMask
operator|&&
operator|!
name|useGlobalOpacity
condition|)
name|requiredProgram
operator|.
name|mainFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|MainFragmentShader_C
expr_stmt|;
if|if
condition|(
operator|!
name|hasCompose
operator|&&
operator|!
name|hasMask
operator|&&
name|useGlobalOpacity
condition|)
name|requiredProgram
operator|.
name|mainFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|MainFragmentShader_O
expr_stmt|;
if|if
condition|(
operator|!
name|hasCompose
operator|&&
operator|!
name|hasMask
operator|&&
operator|!
name|useGlobalOpacity
condition|)
name|requiredProgram
operator|.
name|mainFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|MainFragmentShader
expr_stmt|;
block|}
if|if
condition|(
name|hasMask
condition|)
block|{
if|if
condition|(
name|maskType
operator|==
name|PixelMask
condition|)
block|{
name|requiredProgram
operator|.
name|maskFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|MaskFragmentShader
expr_stmt|;
name|texCoords
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|maskType
operator|==
name|SubPixelMaskPass1
condition|)
block|{
name|requiredProgram
operator|.
name|maskFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|RgbMaskFragmentShaderPass1
expr_stmt|;
name|texCoords
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|maskType
operator|==
name|SubPixelMaskPass2
condition|)
block|{
name|requiredProgram
operator|.
name|maskFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|RgbMaskFragmentShaderPass2
expr_stmt|;
name|texCoords
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|maskType
operator|==
name|SubPixelWithGammaMask
condition|)
block|{
name|requiredProgram
operator|.
name|maskFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|RgbMaskWithGammaFragmentShader
expr_stmt|;
name|texCoords
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|qCritical
argument_list|(
literal|"QOpenGLEngineShaderManager::useCorrectShaderProg() - Unknown mask type"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|requiredProgram
operator|.
name|maskFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|NoMaskFragmentShader
expr_stmt|;
block|}
if|if
condition|(
name|hasCompose
condition|)
block|{
switch|switch
condition|(
name|compositionMode
condition|)
block|{
case|case
name|QPainter
operator|::
name|CompositionMode_Multiply
case|:
name|requiredProgram
operator|.
name|compositionFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|MultiplyCompositionModeFragmentShader
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Screen
case|:
name|requiredProgram
operator|.
name|compositionFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|ScreenCompositionModeFragmentShader
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Overlay
case|:
name|requiredProgram
operator|.
name|compositionFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|OverlayCompositionModeFragmentShader
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Darken
case|:
name|requiredProgram
operator|.
name|compositionFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|DarkenCompositionModeFragmentShader
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Lighten
case|:
name|requiredProgram
operator|.
name|compositionFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|LightenCompositionModeFragmentShader
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_ColorDodge
case|:
name|requiredProgram
operator|.
name|compositionFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|ColorDodgeCompositionModeFragmentShader
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_ColorBurn
case|:
name|requiredProgram
operator|.
name|compositionFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|ColorBurnCompositionModeFragmentShader
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_HardLight
case|:
name|requiredProgram
operator|.
name|compositionFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|HardLightCompositionModeFragmentShader
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_SoftLight
case|:
name|requiredProgram
operator|.
name|compositionFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|SoftLightCompositionModeFragmentShader
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Difference
case|:
name|requiredProgram
operator|.
name|compositionFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|DifferenceCompositionModeFragmentShader
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Exclusion
case|:
name|requiredProgram
operator|.
name|compositionFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|ExclusionCompositionModeFragmentShader
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"QOpenGLEngineShaderManager::useCorrectShaderProg() - Unsupported composition mode"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|requiredProgram
operator|.
name|compositionFragShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|NoCompositionModeFragmentShader
expr_stmt|;
block|}
comment|// Choose vertex shader main function
if|if
condition|(
name|opacityMode
operator|==
name|AttributeOpacity
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|texCoords
argument_list|)
expr_stmt|;
name|requiredProgram
operator|.
name|mainVertexShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|MainWithTexCoordsAndOpacityVertexShader
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|texCoords
condition|)
block|{
name|requiredProgram
operator|.
name|mainVertexShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|MainWithTexCoordsVertexShader
expr_stmt|;
block|}
else|else
block|{
name|requiredProgram
operator|.
name|mainVertexShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|MainVertexShader
expr_stmt|;
block|}
name|requiredProgram
operator|.
name|useTextureCoords
operator|=
name|texCoords
expr_stmt|;
name|requiredProgram
operator|.
name|useOpacityAttribute
operator|=
operator|(
name|opacityMode
operator|==
name|AttributeOpacity
operator|)
expr_stmt|;
if|if
condition|(
name|complexGeometry
operator|&&
name|srcPixelType
operator|==
name|Qt
operator|::
name|SolidPattern
condition|)
block|{
name|requiredProgram
operator|.
name|positionVertexShader
operator|=
name|QOpenGLEngineSharedShaders
operator|::
name|ComplexGeometryPositionOnlyVertexShader
expr_stmt|;
name|requiredProgram
operator|.
name|usePmvMatrixAttribute
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|requiredProgram
operator|.
name|usePmvMatrixAttribute
operator|=
literal|true
expr_stmt|;
comment|// Force complexGeometry off, since we currently don't support that mode for
comment|// non-solid brushes
name|complexGeometry
operator|=
literal|false
expr_stmt|;
block|}
comment|// At this point, requiredProgram is fully populated so try to find the program in the cache
name|currentShaderProg
operator|=
name|sharedShaders
operator|->
name|findProgramInCache
argument_list|(
name|requiredProgram
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentShaderProg
operator|&&
name|useCustomSrc
condition|)
block|{
name|customSrcStage
operator|->
name|setUniforms
argument_list|(
name|currentShaderProg
operator|->
name|program
argument_list|)
expr_stmt|;
block|}
comment|// Make sure all the vertex attribute arrays the program uses are enabled (and the ones it
comment|// doesn't use are disabled)
name|QOpenGLContextPrivate
modifier|*
name|ctx_d
init|=
name|ctx
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|QOpenGL2PaintEngineEx
modifier|*
name|active_engine
init|=
cast|static_cast
argument_list|<
name|QOpenGL2PaintEngineEx
operator|*
argument_list|>
argument_list|(
name|ctx_d
operator|->
name|active_engine
argument_list|)
decl_stmt|;
name|active_engine
operator|->
name|d_func
argument_list|()
operator|->
name|setVertexAttribArrayEnabled
argument_list|(
name|QT_VERTEX_COORDS_ATTR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|active_engine
operator|->
name|d_func
argument_list|()
operator|->
name|setVertexAttribArrayEnabled
argument_list|(
name|QT_TEXTURE_COORDS_ATTR
argument_list|,
name|currentShaderProg
operator|&&
name|currentShaderProg
operator|->
name|useTextureCoords
argument_list|)
expr_stmt|;
name|active_engine
operator|->
name|d_func
argument_list|()
operator|->
name|setVertexAttribArrayEnabled
argument_list|(
name|QT_OPACITY_ATTR
argument_list|,
name|currentShaderProg
operator|&&
name|currentShaderProg
operator|->
name|useOpacityAttribute
argument_list|)
expr_stmt|;
name|shaderProgNeedsChanging
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
