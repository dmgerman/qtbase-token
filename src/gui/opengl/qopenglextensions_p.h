begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QOPENGL_EXTENSIONS_P_H
end_ifndef
begin_define
DECL|macro|QOPENGL_EXTENSIONS_P_H
define|#
directive|define
name|QOPENGL_EXTENSIONS_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of the Qt OpenGL classes.  This header file may change from
end_comment
begin_comment
comment|// version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"qopenglextrafunctions.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QOpenGLExtensionsPrivate
name|class
name|QOpenGLExtensionsPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QOpenGLExtensions
range|:
name|public
name|QOpenGLExtraFunctions
block|{
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QOpenGLExtensions
argument_list|)
name|public
operator|:
name|QOpenGLExtensions
argument_list|()
block|;
name|QOpenGLExtensions
argument_list|(
name|QOpenGLContext
operator|*
name|context
argument_list|)
block|;
operator|~
name|QOpenGLExtensions
argument_list|()
block|{}
expr|enum
name|OpenGLExtension
block|{
name|TextureRectangle
operator|=
literal|0x00000001
block|,
name|GenerateMipmap
operator|=
literal|0x00000002
block|,
name|TextureCompression
operator|=
literal|0x00000004
block|,
name|MirroredRepeat
operator|=
literal|0x00000008
block|,
name|FramebufferMultisample
operator|=
literal|0x00000010
block|,
name|StencilTwoSide
operator|=
literal|0x00000020
block|,
name|StencilWrap
operator|=
literal|0x00000040
block|,
name|PackedDepthStencil
operator|=
literal|0x00000080
block|,
name|NVFloatBuffer
operator|=
literal|0x00000100
block|,
name|PixelBufferObject
operator|=
literal|0x00000200
block|,
name|FramebufferBlit
operator|=
literal|0x00000400
block|,
name|BGRATextureFormat
operator|=
literal|0x00000800
block|,
name|DDSTextureCompression
operator|=
literal|0x00001000
block|,
name|ETC1TextureCompression
operator|=
literal|0x00002000
block|,
name|PVRTCTextureCompression
operator|=
literal|0x00004000
block|,
name|ElementIndexUint
operator|=
literal|0x00008000
block|,
name|Depth24
operator|=
literal|0x00010000
block|,
name|SRGBFrameBuffer
operator|=
literal|0x00020000
block|,
name|MapBuffer
operator|=
literal|0x00040000
block|,
name|GeometryShaders
operator|=
literal|0x00080000
block|,
name|MapBufferRange
operator|=
literal|0x00100000
block|,
name|Sized8Formats
operator|=
literal|0x00200000
block|,
name|DiscardFramebuffer
operator|=
literal|0x00400000
block|,
name|Sized16Formats
operator|=
literal|0x00800000
block|}
block|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|OpenGLExtensions
argument_list|,
argument|OpenGLExtension
argument_list|)
name|OpenGLExtensions
name|openGLExtensions
argument_list|()
block|;
name|bool
name|hasOpenGLExtension
argument_list|(
argument|QOpenGLExtensions::OpenGLExtension extension
argument_list|)
specifier|const
block|;
name|GLvoid
operator|*
name|glMapBuffer
argument_list|(
argument|GLenum target
argument_list|,
argument|GLenum access
argument_list|)
block|;
name|void
name|glGetBufferSubData
argument_list|(
argument|GLenum target
argument_list|,
argument|qopengl_GLintptr offset
argument_list|,
argument|qopengl_GLsizeiptr size
argument_list|,
argument|GLvoid *data
argument_list|)
block|;
name|void
name|glDiscardFramebufferEXT
argument_list|(
argument|GLenum target
argument_list|,
argument|GLsizei numAttachments
argument_list|,
argument|const GLenum *attachments
argument_list|)
block|;
name|void
name|flushShared
argument_list|()
block|;
name|QOpenGLExtensionsPrivate
operator|*
name|d
argument_list|()
specifier|const
block|;
name|private
operator|:
specifier|static
name|bool
name|isInitialized
argument_list|(
argument|const QOpenGLFunctionsPrivate *d
argument_list|)
block|{
return|return
name|d
operator|!=
literal|0
return|;
block|}
expr|}
block|;
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QOpenGLExtensions::OpenGLExtensions
argument_list|)
name|class
name|QOpenGLExtensionsPrivate
operator|:
name|public
name|QOpenGLExtraFunctionsPrivate
block|{
name|public
operator|:
name|explicit
name|QOpenGLExtensionsPrivate
argument_list|(
name|QOpenGLContext
operator|*
name|ctx
argument_list|)
block|;
name|GLvoid
operator|*
operator|(
name|QOPENGLF_APIENTRYP
name|MapBuffer
operator|)
operator|(
name|GLenum
name|target
expr|,
name|GLenum
name|access
operator|)
block|;
name|void
argument_list|(
argument|QOPENGLF_APIENTRYP GetBufferSubData
argument_list|)
operator|(
name|GLenum
name|target
expr|,
name|qopengl_GLintptr
name|offset
expr|,
name|qopengl_GLsizeiptr
name|size
expr|,
name|GLvoid
operator|*
name|data
operator|)
block|;
name|void
argument_list|(
argument|QOPENGLF_APIENTRYP DiscardFramebuffer
argument_list|)
operator|(
name|GLenum
name|target
expr|,
name|GLsizei
name|numAttachments
expr|,
specifier|const
name|GLenum
operator|*
name|attachments
operator|)
block|;
name|bool
name|flushVendorChecked
block|;
name|bool
name|flushIsSufficientToSyncContexts
block|; }
block|;
DECL|function|d
specifier|inline
name|QOpenGLExtensionsPrivate
operator|*
name|QOpenGLExtensions
operator|::
name|d
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|QOpenGLExtensionsPrivate
operator|*
operator|>
operator|(
name|d_ptr
operator|)
return|;
block|}
DECL|function|glMapBuffer
specifier|inline
name|GLvoid
operator|*
name|QOpenGLExtensions
operator|::
name|glMapBuffer
argument_list|(
argument|GLenum target
argument_list|,
argument|GLenum access
argument_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLExtensions
argument_list|)
block|;
name|Q_ASSERT
argument_list|(
name|QOpenGLExtensions
operator|::
name|isInitialized
argument_list|(
name|d
argument_list|)
argument_list|)
block|;
name|GLvoid
operator|*
name|result
operator|=
name|d
operator|->
name|MapBuffer
argument_list|(
name|target
argument_list|,
name|access
argument_list|)
block|;
name|Q_OPENGL_FUNCTIONS_DEBUG
return|return
name|result
return|;
block|}
DECL|function|glGetBufferSubData
specifier|inline
name|void
name|QOpenGLExtensions
operator|::
name|glGetBufferSubData
argument_list|(
argument|GLenum target
argument_list|,
argument|qopengl_GLintptr offset
argument_list|,
argument|qopengl_GLsizeiptr size
argument_list|,
argument|GLvoid *data
argument_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLExtensions
argument_list|)
block|;
name|Q_ASSERT
argument_list|(
name|QOpenGLExtensions
operator|::
name|isInitialized
argument_list|(
name|d
argument_list|)
argument_list|)
block|;
name|d
operator|->
name|GetBufferSubData
argument_list|(
name|target
argument_list|,
name|offset
argument_list|,
name|size
argument_list|,
name|data
argument_list|)
block|;
name|Q_OPENGL_FUNCTIONS_DEBUG
block|}
DECL|function|glDiscardFramebufferEXT
specifier|inline
name|void
name|QOpenGLExtensions
operator|::
name|glDiscardFramebufferEXT
argument_list|(
argument|GLenum target
argument_list|,
argument|GLsizei numAttachments
argument_list|,
argument|const GLenum *attachments
argument_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLExtensions
argument_list|)
block|;
name|Q_ASSERT
argument_list|(
name|QOpenGLExtensions
operator|::
name|isInitialized
argument_list|(
name|d
argument_list|)
argument_list|)
block|;
name|d
operator|->
name|DiscardFramebuffer
argument_list|(
name|target
argument_list|,
name|numAttachments
argument_list|,
name|attachments
argument_list|)
block|;
name|Q_OPENGL_FUNCTIONS_DEBUG
block|}
name|QT_END_NAMESPACE
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QOPENGL_EXTENSIONS_P_H
end_comment
end_unit
