begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 KlarÃ¤lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Giuseppe D'Angelo<giuseppe.dangelo@kdab.com> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/private/qobject_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qopengl.h>
end_include
begin_include
include|#
directive|include
file|"qopengldebug.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QOpenGLDebugMessage     \brief The QOpenGLDebugMessage class wraps an OpenGL debug message.     \inmodule QtGui     \reentrant     \since 5.1     \ingroup shared     \ingroup painting-3D      Debug messages are usually created by the OpenGL server and then read by     OpenGL clients (either from the OpenGL internal debug log, or logged in real-time).     A debug message has a textual representation, a vendor-specific numeric id,     a source, a type and a severity.      It's also possible for applications or third-party libraries and toolkits     to create and insert messages in the debug log. In order to do so, you can use     the createApplicationMessage() or the createThirdPartyMessage() static functions.      \sa QOpenGLDebugLogger */
end_comment
begin_comment
comment|/*!     \class QOpenGLDebugLogger     \brief The QOpenGLDebugLogger enables logging of OpenGL debugging messages.     \inmodule QtGui     \since 5.1     \ingroup painting-3D      \tableofcontents      \section1 Introduction      OpenGL programming can be very error prone. Most of the time, a single     failing call to OpenGL can cause an entire portion of an application to     stop working, with nothing being drawn on the screen.      The only way to be sure that no errors are being returned from the OpenGL     implementation is checking with \c{glGetError} after each and every API     call. Moreover, OpenGL errors stack up, therefore glGetError should always     be used in a loop like this:      \code      GLenum error = GL_NO_ERROR;     do {         error = glGetError();         if (error != GL_NO_ERROR)             // handle the error     } while (error != GL_NO_ERROR);      \endcode      There are also many other information we are interested in (as application     developers), for instance performance issues, or warnings about using     deprecated APIs. Those kind of messages are not reported through the     ordinary OpenGL error reporting mechanisms.      QOpenGLDebugLogger aims at addressing these issues by providing access to     the \e{OpenGL debug log}. If your OpenGL implementation supports it (by     exposing the \c{GL_KHR_debug} extension), messages from the OpenGL server     will be either logged in an internal OpenGL log, or passed in "real-time"     to listeners as they're generated from OpenGL.      QOpenGLDebugLogger supports both these modes of operation. Refer to the     following sections to find out the differences between them.      \section1 Creating an OpenGL debug context      For efficiency reasons, OpenGL implementations are allowed not to create     any debug output at all, unless the OpenGL context is a debug context. In order     to create a debug context from Qt, you must set the QSurfaceFormat::DebugContext     format option on the QSurfaceFormat used to create the QOpenGLContext object:      \code      QSurfaceFormat format;     // asks for a OpenGL 3.2 debug context using the Core profile     format.setMajorVersion(3);     format.setMinorVersion(2);     format.setProfile(QSurfaceFormat::CoreProfile);     format.setOption(QSurfaceFormat::DebugContext);      QOpenGLContext *context = new QOpenGLContext;     context->setFormat(format);     context->create();      \endcode      Note that requesting a 3.2 OpenGL Core Profile is just for the example's     purposes; this class is not tied to any specific OpenGL or OpenGL ES     version, as it relies on the availability of the \c{GL_KHR_debug} extension     (see below).      \section1 Creating and initializing a QOpenGLDebugLogger      QOpenGLDebugLogger is a simple QObject-derived class. Just like all QObject     subclasses, you create an instance (and optionally specify a parent     object), and like the other OpenGL functions in Qt you \e{must} initialize     it before usage by calling initialize() whilst there is a current OpenGL context:      \code      QOpenGLContext *ctx = QOpenGLContext::currentContext();     QOpenGLDebugLogger *logger = new QOpenGLDebugLogger(this);      logger->initialize(); // initializes in the current context, i.e. ctx      \endcode      Note that the \c{GL_KHR_debug} extension \e{must} be available in the context     in order to access the messages logged by OpenGL. You can check the     presence of this extension by calling:      \code      ctx->hasExtension(QByteArrayLiteral("GL_KHR_debug"))      \endcode      where \c{ctx} is a valid QOpenGLContext. If the extension is not available,     initialize() will return false.      \section1 Reading the internal OpenGL debug log      OpenGL implementations keep an internal log of debug messages. Messages     stored in this log can be retrieved by using the loggedMessages() function:      \code      QList<QOpenGLDebugMessage> messages = logger->loggedMessages();     foreach (const QOpenGLDebugMessage&message, messages)         qDebug()<< message;      \endcode      The internal log has a limited size; when it fills up, older messages will     get discarded to make room for the new incoming messages. When you call     loggedMessages(), the internal log will be emptied as well.      If you want to be sure not to lose any debug message, you must use real-time     logging instead of calling this function. However, debug messages might     still be generated in the timespan between context creation and activation     of real-time logging (or, in general, when the real-time logging is disabled).      \section1 Real-time logging of messages      It is also possible to receive a stream of debug messages from the OpenGL     server \e{as they are generated} by the implementation. In order to do so,     you need to connect a suitable slot to the messageLogged() signal, and     start logging by calling startLogging():      \code      connect(logger,&QOpenGLDebugLogger::messageLogged, receiver,&LogHandler::handleLoggedMessage);     logger->startLogging();      \endcode      Similarly, logging can be disabled at any time by calling the stopLogging()     function.      Real-time logging can be either asynchronous or synchronous, depending on     the parameter passed to startLogging(). When logging in asynchronous mode     (the default, as it has a very small overhead), the OpenGL implementation     can generate messages at any time, and/or in an order which is different from the     order of the OpenGL commands which caused those messages to be logged.     The messages could also be generated from a thread that it's different from     the thread the context is currently bound to. This is because OpenGL     implementations are usually highly threaded and asynchronous, and therefore     no warranties are made about the relative order and the timings of the     debug messages.      On the other hand, logging in synchronous mode has a high overhead, but     the OpenGL implementation guarantees that all the messages caused by a     certain command are received in order, before the command returns,     and from the same thread the OpenGL context is bound to.      This means that when logging in synchronous mode you will be able to run     your OpenGL application in a debugger, put a breakpoint on a slot connected     to the messageLogged() signal, and see in the backtrace the exact call     that caused the logged message. This can be extremely useful to debug     an OpenGL problem. Note that if OpenGL rendering is happening in another     thread, you must force the signal/slot connection type to Qt::DirectConnection     in order to be able to see the actual backtrace.      Refer to the LoggingMode enum documentation for more information about     logging modes.      \note When real-time logging is enabled, debug messages will \e{not} be     inserted in the internal OpenGL debug log any more; messages already     present in the internal log will not be deleted, nor they will be emitted     through the messageLogged() signal. Since some messages might be generated     before real-time logging is started (and therefore be kept in the internal     OpenGL log), it is important to always check if it contains any message     after calling startLogging().      \section1 Inserting messages in the debug log      It is possible for applications and libraries to insert custom messages in     the debug log, for instance for marking a group of related OpenGL commands     and therefore being then able to identify eventual messages coming from them.      In order to do so, you can create a QOpenGLDebugMessage object by calling     \l{QOpenGLDebugMessage::}{createApplicationMessage()} or     \l{QOpenGLDebugMessage::}{createThirdPartyMessage()}, and then inserting it     into the log by calling logMessage():      \code      QOpenGLDebugMessage message =         QOpenGLDebugMessage::createApplicationMessage(QStringLiteral("Custom message"));      logger->logMessage(message);      \endcode      Note that OpenGL implementations have a vendor-specific limit to the length     of the messages that can be inserted in the debug log. You can retrieve     this length by calling the maximumMessageLength() method; messages longer     than the limit will automatically get truncated.      \section1 Controlling the debug output      QOpenGLDebugMessage is also able to apply filters to the debug messages, and     therefore limit the amount of messages logged. You can enable or disable     logging of messages by calling enableMessages() and disableMessages()     respectively. By default, all messages are logged.      It is possible to enable or disable messages by selecting them by:      \list     \li source, type and severity (and including all ids in the selection);     \li id, source and type (and including all severities in the selection).     \endlist      Note that the "enabled" status for a given message is a property of the     (id, source, type, severity) tuple; the message attributes \e{do not} form     a hierarchy of any kind. You should be careful about the order of the calls     to enableMessages() and disableMessages(), as it will change which     messages will are enabled / disabled.      It's not possible to filter by the message text itself; applications     have to do that on their own (in slots connected to the messageLogged()     signal, or after fetching the messages in the internal debug log     through loggedMessages()).      In order to simplify the management of the enabled / disabled statuses,     QOpenGLDebugMessage also supports the concept of \c{debug groups}. A debug     group contains the group of enabled / disabled configurations of debug     messages. Moreover, debug groups are organized in a stack: it is possible     to push and pop groups by calling pushGroup() and popGroup() respectively.     (When an OpenGL context is created, there is already a group in the stack).      The enableMessages() and disableMessages() functions will modify the     configuration in the current debug group, that is, the one at the top of     the debug groups stack.      When a new group is pushed onto the debug groups stack, it will inherit     the configuration of the group that was previously on the top of the stack.     Vice versa, popping a debug group will restore the configuration of     the debug group that becomes the new top.      Pushing (respectively popping) debug groups will also automatically generate     a debug message of type QOpenGLDebugMessage::GroupPushType (respectively     \l{QOpenGLDebugMessage::}{GroupPopType}).      \sa QOpenGLDebugMessage */
end_comment
begin_comment
comment|/*!     \enum QOpenGLDebugMessage::Source      The Source enum defines the source of the debug message.      \value InvalidSource         The source of the message is invalid; this is the source of a         default-constructed QOpenGLDebugMessage object.      \value APISource         The message was generated in response to OpenGL API calls.      \value WindowSystemSource         The message was generated by the window system.      \value ShaderCompilerSource         The message was generated by the shader compiler.      \value ThirdPartySource         The message was generated by a third party, for instance an OpenGL         framework a or debugging toolkit.      \value ApplicationSource         The message was generated by the application itself.      \value OtherSource         The message was generated by a source not included in this         enumeration.      \omitvalue LastSource      \value AnySource         This value corresponds to a mask of all possible message sources. */
end_comment
begin_comment
comment|/*!     \enum QOpenGLDebugMessage::Type      The Type enum defines the type of the debug message.      \value InvalidType         The type of the message is invalid; this is the type of a         default-constructed QOpenGLDebugMessage object.      \value ErrorType         The message represents an error.      \value DeprecatedBehaviorType         The message represents an usage of deprecated behavior.      \value UndefinedBehaviorType         The message represents an usage of undefined behavior.      \value PortabilityType         The message represents an usage of vendor-specific behavior,         that might pose portability concerns.      \value PerformanceType         The message represents a performance issue.      \value OtherType         The message represents a type not included in this         enumeration.      \value MarkerType         The message represents a marker in the debug log.      \value GroupPushType         The message represents a debug group push operation.      \value GroupPopType         The message represents a debug group pop operation.      \omitvalue LastType      \value AnyType         This value corresponds to a mask of all possible message types. */
end_comment
begin_comment
comment|/*!     \enum QOpenGLDebugMessage::Severity      The Severity enum defines the severity of the debug message.      \value InvalidSeverity         The severity of the message is invalid; this is the severity of a         default-constructed QOpenGLDebugMessage object.      \value HighSeverity         The message has a high severity.      \value MediumSeverity         The message has a medium severity.      \value LowSeverity         The message has a low severity.      \value NotificationSeverity         The message is a notification.      \omitvalue LastSeverity      \value AnySeverity         This value corresponds to a mask of all possible message severities. */
end_comment
begin_comment
comment|/*!     \property QOpenGLDebugLogger::loggingMode      \brief the logging mode passed to startLogging().      Note that logging must have been started or the value of this property     will be meaningless.      \sa startLogging(), isLogging() */
end_comment
begin_comment
comment|/*!     \enum QOpenGLDebugLogger::LoggingMode      The LoggingMode enum defines the logging mode of the logger object.      \value AsynchronousLogging         Messages from the OpenGL server are logged asynchronously. This means         that messages can be logged some time after the corresponding OpenGL         actions that caused them, and even be received in an out-of-order         fashion, depending on the OpenGL implementation. This mode has a very low         performance penalty, as OpenGL implementations are heavily threaded         and asynchronous by nature.      \value SynchronousLogging         Messages from the OpenGL server are logged synchronously and         sequentially. This has a severe performance hit, as OpenGL         implementations are very asynchronous by nature; but it's very useful         to debug OpenGL problems, as OpenGL guarantees that the messages         generated by a OpenGL command will be logged before the corresponding         command execution has returned. Therefore, you can install a breakpoint         on the messageLogged() signal and see in the backtrace which OpenGL         command caused it; the only caveat is that if you are using OpenGL from         multiple threads you may need to force direct connection when         connecting to the messageLogged() signal. */
end_comment
begin_comment
comment|// Under OSX (at least up to 10.8) we cannot include our copy of glext.h,
end_comment
begin_comment
comment|// but we use the system-wide one, which unfortunately lacks all the needed
end_comment
begin_comment
comment|// defines/typedefs. In order to make the code compile, we just add here
end_comment
begin_comment
comment|// the GL_KHR_debug defines.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|GL_KHR_debug
end_ifndef
begin_define
DECL|macro|GL_KHR_debug
define|#
directive|define
name|GL_KHR_debug
value|1
end_define
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_OUTPUT_SYNCHRONOUS
end_ifndef
begin_define
DECL|macro|GL_DEBUG_OUTPUT_SYNCHRONOUS
define|#
directive|define
name|GL_DEBUG_OUTPUT_SYNCHRONOUS
value|0x8242
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
end_ifndef
begin_define
DECL|macro|GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
define|#
directive|define
name|GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
value|0x8243
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_CALLBACK_FUNCTION
end_ifndef
begin_define
DECL|macro|GL_DEBUG_CALLBACK_FUNCTION
define|#
directive|define
name|GL_DEBUG_CALLBACK_FUNCTION
value|0x8244
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_CALLBACK_USER_PARAM
end_ifndef
begin_define
DECL|macro|GL_DEBUG_CALLBACK_USER_PARAM
define|#
directive|define
name|GL_DEBUG_CALLBACK_USER_PARAM
value|0x8245
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_SOURCE_API
end_ifndef
begin_define
DECL|macro|GL_DEBUG_SOURCE_API
define|#
directive|define
name|GL_DEBUG_SOURCE_API
value|0x8246
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_SOURCE_WINDOW_SYSTEM
end_ifndef
begin_define
DECL|macro|GL_DEBUG_SOURCE_WINDOW_SYSTEM
define|#
directive|define
name|GL_DEBUG_SOURCE_WINDOW_SYSTEM
value|0x8247
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_SOURCE_SHADER_COMPILER
end_ifndef
begin_define
DECL|macro|GL_DEBUG_SOURCE_SHADER_COMPILER
define|#
directive|define
name|GL_DEBUG_SOURCE_SHADER_COMPILER
value|0x8248
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_SOURCE_THIRD_PARTY
end_ifndef
begin_define
DECL|macro|GL_DEBUG_SOURCE_THIRD_PARTY
define|#
directive|define
name|GL_DEBUG_SOURCE_THIRD_PARTY
value|0x8249
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_SOURCE_APPLICATION
end_ifndef
begin_define
DECL|macro|GL_DEBUG_SOURCE_APPLICATION
define|#
directive|define
name|GL_DEBUG_SOURCE_APPLICATION
value|0x824A
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_SOURCE_OTHER
end_ifndef
begin_define
DECL|macro|GL_DEBUG_SOURCE_OTHER
define|#
directive|define
name|GL_DEBUG_SOURCE_OTHER
value|0x824B
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_TYPE_ERROR
end_ifndef
begin_define
DECL|macro|GL_DEBUG_TYPE_ERROR
define|#
directive|define
name|GL_DEBUG_TYPE_ERROR
value|0x824C
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
end_ifndef
begin_define
DECL|macro|GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
define|#
directive|define
name|GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
value|0x824D
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
end_ifndef
begin_define
DECL|macro|GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
define|#
directive|define
name|GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
value|0x824E
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_TYPE_PORTABILITY
end_ifndef
begin_define
DECL|macro|GL_DEBUG_TYPE_PORTABILITY
define|#
directive|define
name|GL_DEBUG_TYPE_PORTABILITY
value|0x824F
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_TYPE_PERFORMANCE
end_ifndef
begin_define
DECL|macro|GL_DEBUG_TYPE_PERFORMANCE
define|#
directive|define
name|GL_DEBUG_TYPE_PERFORMANCE
value|0x8250
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_TYPE_OTHER
end_ifndef
begin_define
DECL|macro|GL_DEBUG_TYPE_OTHER
define|#
directive|define
name|GL_DEBUG_TYPE_OTHER
value|0x8251
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_TYPE_MARKER
end_ifndef
begin_define
DECL|macro|GL_DEBUG_TYPE_MARKER
define|#
directive|define
name|GL_DEBUG_TYPE_MARKER
value|0x8268
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_TYPE_PUSH_GROUP
end_ifndef
begin_define
DECL|macro|GL_DEBUG_TYPE_PUSH_GROUP
define|#
directive|define
name|GL_DEBUG_TYPE_PUSH_GROUP
value|0x8269
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_TYPE_POP_GROUP
end_ifndef
begin_define
DECL|macro|GL_DEBUG_TYPE_POP_GROUP
define|#
directive|define
name|GL_DEBUG_TYPE_POP_GROUP
value|0x826A
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_SEVERITY_NOTIFICATION
end_ifndef
begin_define
DECL|macro|GL_DEBUG_SEVERITY_NOTIFICATION
define|#
directive|define
name|GL_DEBUG_SEVERITY_NOTIFICATION
value|0x826B
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_MAX_DEBUG_GROUP_STACK_DEPTH
end_ifndef
begin_define
DECL|macro|GL_MAX_DEBUG_GROUP_STACK_DEPTH
define|#
directive|define
name|GL_MAX_DEBUG_GROUP_STACK_DEPTH
value|0x826C
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_GROUP_STACK_DEPTH
end_ifndef
begin_define
DECL|macro|GL_DEBUG_GROUP_STACK_DEPTH
define|#
directive|define
name|GL_DEBUG_GROUP_STACK_DEPTH
value|0x826D
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_BUFFER
end_ifndef
begin_define
DECL|macro|GL_BUFFER
define|#
directive|define
name|GL_BUFFER
value|0x82E0
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_SHADER
end_ifndef
begin_define
DECL|macro|GL_SHADER
define|#
directive|define
name|GL_SHADER
value|0x82E1
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_PROGRAM
end_ifndef
begin_define
DECL|macro|GL_PROGRAM
define|#
directive|define
name|GL_PROGRAM
value|0x82E2
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_QUERY
end_ifndef
begin_define
DECL|macro|GL_QUERY
define|#
directive|define
name|GL_QUERY
value|0x82E3
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_PROGRAM_PIPELINE
end_ifndef
begin_define
DECL|macro|GL_PROGRAM_PIPELINE
define|#
directive|define
name|GL_PROGRAM_PIPELINE
value|0x82E4
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_SAMPLER
end_ifndef
begin_define
DECL|macro|GL_SAMPLER
define|#
directive|define
name|GL_SAMPLER
value|0x82E6
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DISPLAY_LIST
end_ifndef
begin_define
DECL|macro|GL_DISPLAY_LIST
define|#
directive|define
name|GL_DISPLAY_LIST
value|0x82E7
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_MAX_LABEL_LENGTH
end_ifndef
begin_define
DECL|macro|GL_MAX_LABEL_LENGTH
define|#
directive|define
name|GL_MAX_LABEL_LENGTH
value|0x82E8
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_MAX_DEBUG_MESSAGE_LENGTH
end_ifndef
begin_define
DECL|macro|GL_MAX_DEBUG_MESSAGE_LENGTH
define|#
directive|define
name|GL_MAX_DEBUG_MESSAGE_LENGTH
value|0x9143
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_MAX_DEBUG_LOGGED_MESSAGES
end_ifndef
begin_define
DECL|macro|GL_MAX_DEBUG_LOGGED_MESSAGES
define|#
directive|define
name|GL_MAX_DEBUG_LOGGED_MESSAGES
value|0x9144
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_LOGGED_MESSAGES
end_ifndef
begin_define
DECL|macro|GL_DEBUG_LOGGED_MESSAGES
define|#
directive|define
name|GL_DEBUG_LOGGED_MESSAGES
value|0x9145
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_SEVERITY_HIGH
end_ifndef
begin_define
DECL|macro|GL_DEBUG_SEVERITY_HIGH
define|#
directive|define
name|GL_DEBUG_SEVERITY_HIGH
value|0x9146
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_SEVERITY_MEDIUM
end_ifndef
begin_define
DECL|macro|GL_DEBUG_SEVERITY_MEDIUM
define|#
directive|define
name|GL_DEBUG_SEVERITY_MEDIUM
value|0x9147
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_SEVERITY_LOW
end_ifndef
begin_define
DECL|macro|GL_DEBUG_SEVERITY_LOW
define|#
directive|define
name|GL_DEBUG_SEVERITY_LOW
value|0x9148
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_DEBUG_OUTPUT
end_ifndef
begin_define
DECL|macro|GL_DEBUG_OUTPUT
define|#
directive|define
name|GL_DEBUG_OUTPUT
value|0x92E0
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_CONTEXT_FLAG_DEBUG_BIT
end_ifndef
begin_define
DECL|macro|GL_CONTEXT_FLAG_DEBUG_BIT
define|#
directive|define
name|GL_CONTEXT_FLAG_DEBUG_BIT
value|0x00000002
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_STACK_OVERFLOW
end_ifndef
begin_define
DECL|macro|GL_STACK_OVERFLOW
define|#
directive|define
name|GL_STACK_OVERFLOW
value|0x0503
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_STACK_UNDERFLOW
end_ifndef
begin_define
DECL|macro|GL_STACK_UNDERFLOW
define|#
directive|define
name|GL_STACK_UNDERFLOW
value|0x0504
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|GLDEBUGPROC
typedef|typedef
name|void
function_decl|(
name|QOPENGLF_APIENTRY
modifier|*
name|GLDEBUGPROC
function_decl|)
parameter_list|(
name|GLenum
name|source
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLuint
name|id
parameter_list|,
name|GLenum
name|severity
parameter_list|,
name|GLsizei
name|length
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|message
parameter_list|,
name|GLvoid
modifier|*
name|userParam
parameter_list|)
function_decl|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* GL_KHR_debug */
end_comment
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|qt_messageSourceFromGL
specifier|static
name|QOpenGLDebugMessage
operator|::
name|Source
name|qt_messageSourceFromGL
parameter_list|(
name|GLenum
name|source
parameter_list|)
block|{
switch|switch
condition|(
name|source
condition|)
block|{
case|case
name|GL_DEBUG_SOURCE_API
case|:
return|return
name|QOpenGLDebugMessage
operator|::
name|APISource
return|;
case|case
name|GL_DEBUG_SOURCE_WINDOW_SYSTEM
case|:
return|return
name|QOpenGLDebugMessage
operator|::
name|WindowSystemSource
return|;
case|case
name|GL_DEBUG_SOURCE_SHADER_COMPILER
case|:
return|return
name|QOpenGLDebugMessage
operator|::
name|ShaderCompilerSource
return|;
case|case
name|GL_DEBUG_SOURCE_THIRD_PARTY
case|:
return|return
name|QOpenGLDebugMessage
operator|::
name|ThirdPartySource
return|;
case|case
name|GL_DEBUG_SOURCE_APPLICATION
case|:
return|return
name|QOpenGLDebugMessage
operator|::
name|ApplicationSource
return|;
case|case
name|GL_DEBUG_SOURCE_OTHER
case|:
return|return
name|QOpenGLDebugMessage
operator|::
name|OtherSource
return|;
block|}
name|Q_ASSERT_X
argument_list|(
literal|false
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"Unknown message source from GL"
argument_list|)
expr_stmt|;
return|return
name|QOpenGLDebugMessage
operator|::
name|OtherSource
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|qt_messageSourceToGL
specifier|static
name|GLenum
name|qt_messageSourceToGL
parameter_list|(
name|QOpenGLDebugMessage
operator|::
name|Source
name|source
parameter_list|)
block|{
switch|switch
condition|(
name|source
condition|)
block|{
case|case
name|QOpenGLDebugMessage
operator|::
name|InvalidSource
case|:
break|break;
case|case
name|QOpenGLDebugMessage
operator|::
name|APISource
case|:
return|return
name|GL_DEBUG_SOURCE_API
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|WindowSystemSource
case|:
return|return
name|GL_DEBUG_SOURCE_WINDOW_SYSTEM
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|ShaderCompilerSource
case|:
return|return
name|GL_DEBUG_SOURCE_SHADER_COMPILER
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|ThirdPartySource
case|:
return|return
name|GL_DEBUG_SOURCE_THIRD_PARTY
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|ApplicationSource
case|:
return|return
name|GL_DEBUG_SOURCE_APPLICATION
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|OtherSource
case|:
return|return
name|GL_DEBUG_SOURCE_OTHER
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|AnySource
case|:
break|break;
block|}
name|Q_ASSERT_X
argument_list|(
literal|false
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"Invalid message source"
argument_list|)
expr_stmt|;
return|return
name|GL_DEBUG_SOURCE_OTHER
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|qt_messageSourceToString
specifier|static
name|QString
name|qt_messageSourceToString
parameter_list|(
name|QOpenGLDebugMessage
operator|::
name|Source
name|source
parameter_list|)
block|{
switch|switch
condition|(
name|source
condition|)
block|{
case|case
name|QOpenGLDebugMessage
operator|::
name|InvalidSource
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"InvalidSource"
argument_list|)
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|APISource
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"APISource"
argument_list|)
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|WindowSystemSource
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"WindowSystemSource"
argument_list|)
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|ShaderCompilerSource
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"ShaderCompilerSource"
argument_list|)
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|ThirdPartySource
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"ThirdPartySource"
argument_list|)
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|ApplicationSource
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"ApplicationSource"
argument_list|)
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|OtherSource
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"OtherSource"
argument_list|)
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|AnySource
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"AnySource"
argument_list|)
return|;
block|}
name|Q_ASSERT_X
argument_list|(
literal|false
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"Unknown message source"
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|qt_messageTypeFromGL
specifier|static
name|QOpenGLDebugMessage
operator|::
name|Type
name|qt_messageTypeFromGL
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_DEBUG_TYPE_ERROR
case|:
return|return
name|QOpenGLDebugMessage
operator|::
name|ErrorType
return|;
case|case
name|GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
case|:
return|return
name|QOpenGLDebugMessage
operator|::
name|DeprecatedBehaviorType
return|;
case|case
name|GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
case|:
return|return
name|QOpenGLDebugMessage
operator|::
name|UndefinedBehaviorType
return|;
case|case
name|GL_DEBUG_TYPE_PORTABILITY
case|:
return|return
name|QOpenGLDebugMessage
operator|::
name|PortabilityType
return|;
case|case
name|GL_DEBUG_TYPE_PERFORMANCE
case|:
return|return
name|QOpenGLDebugMessage
operator|::
name|PerformanceType
return|;
case|case
name|GL_DEBUG_TYPE_OTHER
case|:
return|return
name|QOpenGLDebugMessage
operator|::
name|OtherType
return|;
case|case
name|GL_DEBUG_TYPE_MARKER
case|:
return|return
name|QOpenGLDebugMessage
operator|::
name|MarkerType
return|;
case|case
name|GL_DEBUG_TYPE_PUSH_GROUP
case|:
return|return
name|QOpenGLDebugMessage
operator|::
name|GroupPushType
return|;
case|case
name|GL_DEBUG_TYPE_POP_GROUP
case|:
return|return
name|QOpenGLDebugMessage
operator|::
name|GroupPopType
return|;
block|}
name|Q_ASSERT_X
argument_list|(
literal|false
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"Unknown message type from GL"
argument_list|)
expr_stmt|;
return|return
name|QOpenGLDebugMessage
operator|::
name|OtherType
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|qt_messageTypeToGL
specifier|static
name|GLenum
name|qt_messageTypeToGL
parameter_list|(
name|QOpenGLDebugMessage
operator|::
name|Type
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QOpenGLDebugMessage
operator|::
name|InvalidType
case|:
break|break;
case|case
name|QOpenGLDebugMessage
operator|::
name|ErrorType
case|:
return|return
name|GL_DEBUG_TYPE_ERROR
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|DeprecatedBehaviorType
case|:
return|return
name|GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|UndefinedBehaviorType
case|:
return|return
name|GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|PortabilityType
case|:
return|return
name|GL_DEBUG_TYPE_PORTABILITY
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|PerformanceType
case|:
return|return
name|GL_DEBUG_TYPE_PERFORMANCE
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|OtherType
case|:
return|return
name|GL_DEBUG_TYPE_OTHER
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|MarkerType
case|:
return|return
name|GL_DEBUG_TYPE_MARKER
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|GroupPushType
case|:
return|return
name|GL_DEBUG_TYPE_PUSH_GROUP
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|GroupPopType
case|:
return|return
name|GL_DEBUG_TYPE_POP_GROUP
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|AnyType
case|:
break|break;
block|}
name|Q_ASSERT_X
argument_list|(
literal|false
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"Invalid message type"
argument_list|)
expr_stmt|;
return|return
name|GL_DEBUG_TYPE_OTHER
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|qt_messageTypeToString
specifier|static
name|QString
name|qt_messageTypeToString
parameter_list|(
name|QOpenGLDebugMessage
operator|::
name|Type
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QOpenGLDebugMessage
operator|::
name|InvalidType
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"InvalidType"
argument_list|)
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|ErrorType
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"ErrorType"
argument_list|)
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|DeprecatedBehaviorType
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"DeprecatedBehaviorType"
argument_list|)
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|UndefinedBehaviorType
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"UndefinedBehaviorType"
argument_list|)
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|PortabilityType
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"PortabilityType"
argument_list|)
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|PerformanceType
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"PerformanceType"
argument_list|)
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|OtherType
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"OtherType"
argument_list|)
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|MarkerType
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"MarkerType"
argument_list|)
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|GroupPushType
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"GroupPushType"
argument_list|)
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|GroupPopType
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"GroupPopType"
argument_list|)
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|AnyType
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"AnyType"
argument_list|)
return|;
block|}
name|Q_ASSERT_X
argument_list|(
literal|false
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"Unknown message type"
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|qt_messageSeverityFromGL
specifier|static
name|QOpenGLDebugMessage
operator|::
name|Severity
name|qt_messageSeverityFromGL
parameter_list|(
name|GLenum
name|severity
parameter_list|)
block|{
switch|switch
condition|(
name|severity
condition|)
block|{
case|case
name|GL_DEBUG_SEVERITY_HIGH
case|:
return|return
name|QOpenGLDebugMessage
operator|::
name|HighSeverity
return|;
case|case
name|GL_DEBUG_SEVERITY_MEDIUM
case|:
return|return
name|QOpenGLDebugMessage
operator|::
name|MediumSeverity
return|;
case|case
name|GL_DEBUG_SEVERITY_LOW
case|:
return|return
name|QOpenGLDebugMessage
operator|::
name|LowSeverity
return|;
case|case
name|GL_DEBUG_SEVERITY_NOTIFICATION
case|:
return|return
name|QOpenGLDebugMessage
operator|::
name|NotificationSeverity
return|;
block|}
name|Q_ASSERT_X
argument_list|(
literal|false
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"Unknown message severity from GL"
argument_list|)
expr_stmt|;
return|return
name|QOpenGLDebugMessage
operator|::
name|NotificationSeverity
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|qt_messageSeverityToGL
specifier|static
name|GLenum
name|qt_messageSeverityToGL
parameter_list|(
name|QOpenGLDebugMessage
operator|::
name|Severity
name|severity
parameter_list|)
block|{
switch|switch
condition|(
name|severity
condition|)
block|{
case|case
name|QOpenGLDebugMessage
operator|::
name|InvalidSeverity
case|:
break|break;
case|case
name|QOpenGLDebugMessage
operator|::
name|HighSeverity
case|:
return|return
name|GL_DEBUG_SEVERITY_HIGH
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|MediumSeverity
case|:
return|return
name|GL_DEBUG_SEVERITY_MEDIUM
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|LowSeverity
case|:
return|return
name|GL_DEBUG_SEVERITY_LOW
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|NotificationSeverity
case|:
return|return
name|GL_DEBUG_SEVERITY_NOTIFICATION
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|AnySeverity
case|:
break|break;
block|}
name|Q_ASSERT_X
argument_list|(
literal|false
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"Invalid message severity"
argument_list|)
expr_stmt|;
return|return
name|GL_DEBUG_SEVERITY_NOTIFICATION
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|qt_messageSeverityToString
specifier|static
name|QString
name|qt_messageSeverityToString
parameter_list|(
name|QOpenGLDebugMessage
operator|::
name|Severity
name|severity
parameter_list|)
block|{
switch|switch
condition|(
name|severity
condition|)
block|{
case|case
name|QOpenGLDebugMessage
operator|::
name|InvalidSeverity
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"InvalidSeverity"
argument_list|)
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|HighSeverity
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"HighSeverity"
argument_list|)
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|MediumSeverity
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"MediumSeverity"
argument_list|)
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|LowSeverity
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"LowSeverity"
argument_list|)
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|NotificationSeverity
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"NotificationSeverity"
argument_list|)
return|;
case|case
name|QOpenGLDebugMessage
operator|::
name|AnySeverity
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"AnySeverity"
argument_list|)
return|;
block|}
name|Q_ASSERT_X
argument_list|(
literal|false
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"Unknown message severity"
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_class
DECL|class|QOpenGLDebugMessagePrivate
class|class
name|QOpenGLDebugMessagePrivate
super|:
specifier|public
name|QSharedData
block|{
public|public:
name|QOpenGLDebugMessagePrivate
parameter_list|()
constructor_decl|;
DECL|member|message
name|QString
name|message
decl_stmt|;
DECL|member|id
name|GLuint
name|id
decl_stmt|;
DECL|member|source
name|QOpenGLDebugMessage
operator|::
name|Source
name|source
decl_stmt|;
DECL|member|type
name|QOpenGLDebugMessage
operator|::
name|Type
name|type
decl_stmt|;
DECL|member|severity
name|QOpenGLDebugMessage
operator|::
name|Severity
name|severity
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     \internal */
end_comment
begin_constructor
DECL|function|QOpenGLDebugMessagePrivate
name|QOpenGLDebugMessagePrivate
operator|::
name|QOpenGLDebugMessagePrivate
parameter_list|()
member_init_list|:
name|message
argument_list|()
member_init_list|,
name|id
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|source
argument_list|(
name|QOpenGLDebugMessage
operator|::
name|InvalidSource
argument_list|)
member_init_list|,
name|type
argument_list|(
name|QOpenGLDebugMessage
operator|::
name|InvalidType
argument_list|)
member_init_list|,
name|severity
argument_list|(
name|QOpenGLDebugMessage
operator|::
name|InvalidSeverity
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a debug message with an empty message string, id set to 0,     source set to InvalidSource, type set to InvalidType, and severity set to     InvalidSeverity.      \note This constructor should not be used to create a debug message;     instead, use the createApplicationMessage() or the createThirdPartyMessage()     static functions.      \sa createApplicationMessage(), createThirdPartyMessage() */
end_comment
begin_constructor
DECL|function|QOpenGLDebugMessage
name|QOpenGLDebugMessage
operator|::
name|QOpenGLDebugMessage
parameter_list|()
member_init_list|:
name|d
argument_list|(
operator|new
name|QOpenGLDebugMessagePrivate
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a debug message as a copy of \a debugMessage.      \sa operator=() */
end_comment
begin_constructor
DECL|function|QOpenGLDebugMessage
name|QOpenGLDebugMessage
operator|::
name|QOpenGLDebugMessage
parameter_list|(
specifier|const
name|QOpenGLDebugMessage
modifier|&
name|debugMessage
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|debugMessage
operator|.
name|d
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys this debug message. */
end_comment
begin_destructor
DECL|function|~QOpenGLDebugMessage
name|QOpenGLDebugMessage
operator|::
name|~
name|QOpenGLDebugMessage
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Assigns the message \a debugMessage to this object, and returns a reference     to the copy. */
end_comment
begin_function
DECL|function|operator =
name|QOpenGLDebugMessage
modifier|&
name|QOpenGLDebugMessage
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QOpenGLDebugMessage
modifier|&
name|debugMessage
parameter_list|)
block|{
name|d
operator|=
name|debugMessage
operator|.
name|d
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QOpenGLDebugMessage::swap(QOpenGLDebugMessage&debugMessage)      Swaps the message \a debugMessage with this message. This operation is very     fast and never fails. */
end_comment
begin_comment
comment|/*!     Returns the source of the debug message. */
end_comment
begin_function
DECL|function|source
name|QOpenGLDebugMessage
operator|::
name|Source
name|QOpenGLDebugMessage
operator|::
name|source
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|source
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the type of the debug message. */
end_comment
begin_function
DECL|function|type
name|QOpenGLDebugMessage
operator|::
name|Type
name|QOpenGLDebugMessage
operator|::
name|type
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|type
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the severity of the debug message. */
end_comment
begin_function
DECL|function|severity
name|QOpenGLDebugMessage
operator|::
name|Severity
name|QOpenGLDebugMessage
operator|::
name|severity
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|severity
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the id of the debug message. Ids are generally vendor-specific. */
end_comment
begin_function
DECL|function|id
name|GLuint
name|QOpenGLDebugMessage
operator|::
name|id
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|id
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the textual message contained by this debug message. */
end_comment
begin_function
DECL|function|message
name|QString
name|QOpenGLDebugMessage
operator|::
name|message
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|message
return|;
block|}
end_function
begin_comment
comment|/*!     Constructs and returns a debug message with \a text as its text, \a id     as id, \a severity as severity, and \a type as type. The message source     will be set to ApplicationSource.      \sa QOpenGLDebugLogger::logMessage(), createThirdPartyMessage() */
end_comment
begin_function
DECL|function|createApplicationMessage
name|QOpenGLDebugMessage
name|QOpenGLDebugMessage
operator|::
name|createApplicationMessage
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|GLuint
name|id
parameter_list|,
name|QOpenGLDebugMessage
operator|::
name|Severity
name|severity
parameter_list|,
name|QOpenGLDebugMessage
operator|::
name|Type
name|type
parameter_list|)
block|{
name|QOpenGLDebugMessage
name|m
decl_stmt|;
name|m
operator|.
name|d
operator|->
name|message
operator|=
name|text
expr_stmt|;
name|m
operator|.
name|d
operator|->
name|id
operator|=
name|id
expr_stmt|;
name|m
operator|.
name|d
operator|->
name|severity
operator|=
name|severity
expr_stmt|;
name|m
operator|.
name|d
operator|->
name|type
operator|=
name|type
expr_stmt|;
name|m
operator|.
name|d
operator|->
name|source
operator|=
name|ApplicationSource
expr_stmt|;
return|return
name|m
return|;
block|}
end_function
begin_comment
comment|/*!     Constructs and returns a debug message with \a text as its text, \a id     as id, \a severity as severity, and \a type as type. The message source     will be set to ThirdPartySource.      \sa QOpenGLDebugLogger::logMessage(), createApplicationMessage() */
end_comment
begin_function
DECL|function|createThirdPartyMessage
name|QOpenGLDebugMessage
name|QOpenGLDebugMessage
operator|::
name|createThirdPartyMessage
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|GLuint
name|id
parameter_list|,
name|QOpenGLDebugMessage
operator|::
name|Severity
name|severity
parameter_list|,
name|QOpenGLDebugMessage
operator|::
name|Type
name|type
parameter_list|)
block|{
name|QOpenGLDebugMessage
name|m
decl_stmt|;
name|m
operator|.
name|d
operator|->
name|message
operator|=
name|text
expr_stmt|;
name|m
operator|.
name|d
operator|->
name|id
operator|=
name|id
expr_stmt|;
name|m
operator|.
name|d
operator|->
name|severity
operator|=
name|severity
expr_stmt|;
name|m
operator|.
name|d
operator|->
name|type
operator|=
name|type
expr_stmt|;
name|m
operator|.
name|d
operator|->
name|source
operator|=
name|ThirdPartySource
expr_stmt|;
return|return
name|m
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if this debug message is equal to \a debugMessage, or false     otherwise. Two debugging messages are equal if they have the same textual     message, the same id, the same source, the same type and the same severity.      \sa operator!=() */
end_comment
begin_function
DECL|function|operator ==
name|bool
name|QOpenGLDebugMessage
operator|::
name|operator
name|==
parameter_list|(
specifier|const
name|QOpenGLDebugMessage
modifier|&
name|debugMessage
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|d
operator|==
name|debugMessage
operator|.
name|d
operator|)
operator|||
operator|(
name|d
operator|->
name|id
operator|==
name|debugMessage
operator|.
name|d
operator|->
name|id
operator|&&
name|d
operator|->
name|source
operator|==
name|debugMessage
operator|.
name|d
operator|->
name|source
operator|&&
name|d
operator|->
name|type
operator|==
name|debugMessage
operator|.
name|d
operator|->
name|type
operator|&&
name|d
operator|->
name|severity
operator|==
name|debugMessage
operator|.
name|d
operator|->
name|severity
operator|&&
name|d
operator|->
name|message
operator|==
name|debugMessage
operator|.
name|d
operator|->
name|message
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QOpenGLDebugMessage::operator!=(const QOpenGLDebugMessage&debugMessage) const      Returns \c true if this message is different from \a debugMessage, or false     otherwise.      \sa operator==() */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_comment
comment|/*!     \relates QOpenGLDebugMessage      Writes the source \a source into the debug object \a debug for debugging     purposes. */
end_comment
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|debug
parameter_list|,
name|QOpenGLDebugMessage
operator|::
name|Source
name|source
parameter_list|)
block|{
name|debug
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QOpenGLDebugMessage::Source("
operator|<<
name|qt_messageSourceToString
argument_list|(
name|source
argument_list|)
operator|<<
literal|")"
expr_stmt|;
return|return
name|debug
operator|.
name|space
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \relates QOpenGLDebugMessage      Writes the type \a type into the debug object \a debug for debugging     purposes. */
end_comment
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|debug
parameter_list|,
name|QOpenGLDebugMessage
operator|::
name|Type
name|type
parameter_list|)
block|{
name|debug
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QOpenGLDebugMessage::Type("
operator|<<
name|qt_messageTypeToString
argument_list|(
name|type
argument_list|)
operator|<<
literal|")"
expr_stmt|;
return|return
name|debug
operator|.
name|space
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \relates QOpenGLDebugMessage      Writes the severity \a severity into the debug object \a debug for debugging     purposes. */
end_comment
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|debug
parameter_list|,
name|QOpenGLDebugMessage
operator|::
name|Severity
name|severity
parameter_list|)
block|{
name|debug
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QOpenGLDebugMessage::Severity("
operator|<<
name|qt_messageSeverityToString
argument_list|(
name|severity
argument_list|)
operator|<<
literal|")"
expr_stmt|;
return|return
name|debug
operator|.
name|space
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \relates QOpenGLDebugMessage      Writes the message \a message into the debug object \a debug for debugging     purposes. */
end_comment
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|debug
parameter_list|,
specifier|const
name|QOpenGLDebugMessage
modifier|&
name|message
parameter_list|)
block|{
name|debug
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QOpenGLDebugMessage("
operator|<<
name|qt_messageSourceToString
argument_list|(
name|message
operator|.
name|source
argument_list|()
argument_list|)
operator|<<
literal|", "
operator|<<
name|message
operator|.
name|id
argument_list|()
operator|<<
literal|", "
operator|<<
name|message
operator|.
name|message
argument_list|()
operator|<<
literal|", "
operator|<<
name|qt_messageSeverityToString
argument_list|(
name|message
operator|.
name|severity
argument_list|()
argument_list|)
operator|<<
literal|", "
operator|<<
name|qt_messageTypeToString
argument_list|(
name|message
operator|.
name|type
argument_list|()
argument_list|)
operator|<<
literal|")"
expr_stmt|;
return|return
name|debug
operator|.
name|space
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DEBUG_STREAM
end_comment
begin_typedef
DECL|typedef|qt_glDebugMessageControl_t
typedef|typedef
name|void
function_decl|(
name|QOPENGLF_APIENTRYP
name|qt_glDebugMessageControl_t
function_decl|)
parameter_list|(
name|GLenum
name|source
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLenum
name|severity
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|ids
parameter_list|,
name|GLboolean
name|enabled
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|qt_glDebugMessageInsert_t
typedef|typedef
name|void
function_decl|(
name|QOPENGLF_APIENTRYP
name|qt_glDebugMessageInsert_t
function_decl|)
parameter_list|(
name|GLenum
name|source
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLuint
name|id
parameter_list|,
name|GLenum
name|severity
parameter_list|,
name|GLsizei
name|length
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|buf
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|qt_glDebugMessageCallback_t
typedef|typedef
name|void
function_decl|(
name|QOPENGLF_APIENTRYP
name|qt_glDebugMessageCallback_t
function_decl|)
parameter_list|(
name|GLDEBUGPROC
name|callback
parameter_list|,
specifier|const
name|void
modifier|*
name|userParam
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|qt_glGetDebugMessageLog_t
typedef|typedef
name|GLuint
function_decl|(
name|QOPENGLF_APIENTRYP
name|qt_glGetDebugMessageLog_t
function_decl|)
parameter_list|(
name|GLuint
name|count
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLenum
modifier|*
name|sources
parameter_list|,
name|GLenum
modifier|*
name|types
parameter_list|,
name|GLuint
modifier|*
name|ids
parameter_list|,
name|GLenum
modifier|*
name|severities
parameter_list|,
name|GLsizei
modifier|*
name|lengths
parameter_list|,
name|GLchar
modifier|*
name|messageLog
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|qt_glPushDebugGroup_t
typedef|typedef
name|void
function_decl|(
name|QOPENGLF_APIENTRYP
name|qt_glPushDebugGroup_t
function_decl|)
parameter_list|(
name|GLenum
name|source
parameter_list|,
name|GLuint
name|id
parameter_list|,
name|GLsizei
name|length
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|message
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|qt_glPopDebugGroup_t
typedef|typedef
name|void
function_decl|(
name|QOPENGLF_APIENTRYP
name|qt_glPopDebugGroup_t
function_decl|)
parameter_list|()
function_decl|;
end_typedef
begin_typedef
DECL|typedef|qt_glGetPointerv_t
typedef|typedef
name|void
function_decl|(
name|QOPENGLF_APIENTRYP
name|qt_glGetPointerv_t
function_decl|)
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLvoid
modifier|*
modifier|*
name|params
parameter_list|)
function_decl|;
end_typedef
begin_class
DECL|class|QOpenGLDebugLoggerPrivate
class|class
name|QOpenGLDebugLoggerPrivate
super|:
specifier|public
name|QObjectPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QOpenGLDebugLogger
parameter_list|)
specifier|public
private|:
name|QOpenGLDebugLoggerPrivate
parameter_list|()
constructor_decl|;
name|void
name|handleMessage
parameter_list|(
name|GLenum
name|source
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLuint
name|id
parameter_list|,
name|GLenum
name|severity
parameter_list|,
name|GLsizei
name|length
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|rawMessage
parameter_list|)
function_decl|;
name|void
name|controlDebugMessages
parameter_list|(
name|QOpenGLDebugMessage
operator|::
name|Sources
name|sources
parameter_list|,
name|QOpenGLDebugMessage
operator|::
name|Types
name|types
parameter_list|,
name|QOpenGLDebugMessage
operator|::
name|Severities
name|severities
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|GLuint
argument_list|>
modifier|&
name|ids
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|callerName
parameter_list|,
name|bool
name|enable
parameter_list|)
function_decl|;
name|void
name|_q_contextAboutToBeDestroyed
parameter_list|()
function_decl|;
DECL|member|glDebugMessageControl
name|qt_glDebugMessageControl_t
name|glDebugMessageControl
decl_stmt|;
DECL|member|glDebugMessageInsert
name|qt_glDebugMessageInsert_t
name|glDebugMessageInsert
decl_stmt|;
DECL|member|glDebugMessageCallback
name|qt_glDebugMessageCallback_t
name|glDebugMessageCallback
decl_stmt|;
DECL|member|glGetDebugMessageLog
name|qt_glGetDebugMessageLog_t
name|glGetDebugMessageLog
decl_stmt|;
DECL|member|glPushDebugGroup
name|qt_glPushDebugGroup_t
name|glPushDebugGroup
decl_stmt|;
DECL|member|glPopDebugGroup
name|qt_glPopDebugGroup_t
name|glPopDebugGroup
decl_stmt|;
DECL|member|glGetPointerv
name|qt_glGetPointerv_t
name|glGetPointerv
decl_stmt|;
DECL|member|oldDebugCallbackFunction
name|GLDEBUGPROC
name|oldDebugCallbackFunction
decl_stmt|;
DECL|member|oldDebugCallbackParameter
name|void
modifier|*
name|oldDebugCallbackParameter
decl_stmt|;
DECL|member|context
name|QOpenGLContext
modifier|*
name|context
decl_stmt|;
DECL|member|maxMessageLength
name|GLint
name|maxMessageLength
decl_stmt|;
DECL|member|loggingMode
name|QOpenGLDebugLogger
operator|::
name|LoggingMode
name|loggingMode
decl_stmt|;
name|bool
name|initialized
range|:
literal|1
decl_stmt|;
name|bool
name|isLogging
range|:
literal|1
decl_stmt|;
name|bool
name|debugWasEnabled
range|:
literal|1
decl_stmt|;
name|bool
name|syncDebugWasEnabled
range|:
literal|1
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     \internal */
end_comment
begin_constructor
DECL|function|QOpenGLDebugLoggerPrivate
name|QOpenGLDebugLoggerPrivate
operator|::
name|QOpenGLDebugLoggerPrivate
parameter_list|()
member_init_list|:
name|glDebugMessageControl
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|glDebugMessageInsert
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|glDebugMessageCallback
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|glGetDebugMessageLog
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|glPushDebugGroup
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|glPopDebugGroup
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|oldDebugCallbackFunction
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|context
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|maxMessageLength
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|loggingMode
argument_list|(
name|QOpenGLDebugLogger
operator|::
name|AsynchronousLogging
argument_list|)
member_init_list|,
name|initialized
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|isLogging
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|debugWasEnabled
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|syncDebugWasEnabled
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|handleMessage
name|void
name|QOpenGLDebugLoggerPrivate
operator|::
name|handleMessage
parameter_list|(
name|GLenum
name|source
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLuint
name|id
parameter_list|,
name|GLenum
name|severity
parameter_list|,
name|GLsizei
name|length
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|rawMessage
parameter_list|)
block|{
if|if
condition|(
name|oldDebugCallbackFunction
condition|)
name|oldDebugCallbackFunction
argument_list|(
name|source
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|severity
argument_list|,
name|length
argument_list|,
name|rawMessage
argument_list|,
name|oldDebugCallbackParameter
argument_list|)
expr_stmt|;
name|QOpenGLDebugMessage
name|message
decl_stmt|;
name|QOpenGLDebugMessagePrivate
modifier|*
name|messagePrivate
init|=
name|message
operator|.
name|d
operator|.
name|data
argument_list|()
decl_stmt|;
name|messagePrivate
operator|->
name|source
operator|=
name|qt_messageSourceFromGL
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|messagePrivate
operator|->
name|type
operator|=
name|qt_messageTypeFromGL
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|messagePrivate
operator|->
name|id
operator|=
name|id
expr_stmt|;
name|messagePrivate
operator|->
name|severity
operator|=
name|qt_messageSeverityFromGL
argument_list|(
name|severity
argument_list|)
expr_stmt|;
comment|// not passing the length to fromUtf8, as some bugged OpenGL drivers
comment|// do not handle the length correctly. Just rely on the message to be NUL terminated.
name|messagePrivate
operator|->
name|message
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|rawMessage
argument_list|)
expr_stmt|;
name|Q_Q
argument_list|(
name|QOpenGLDebugLogger
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|messageLogged
argument_list|(
name|message
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|controlDebugMessages
name|void
name|QOpenGLDebugLoggerPrivate
operator|::
name|controlDebugMessages
parameter_list|(
name|QOpenGLDebugMessage
operator|::
name|Sources
name|sources
parameter_list|,
name|QOpenGLDebugMessage
operator|::
name|Types
name|types
parameter_list|,
name|QOpenGLDebugMessage
operator|::
name|Severities
name|severities
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|GLuint
argument_list|>
modifier|&
name|ids
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|callerName
parameter_list|,
name|bool
name|enable
parameter_list|)
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
name|qWarning
argument_list|(
literal|"QOpenGLDebugLogger::%s(): object must be initialized before enabling/disabling messages"
argument_list|,
name|callerName
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|sources
operator|==
name|QOpenGLDebugMessage
operator|::
name|InvalidSource
condition|)
block|{
name|qWarning
argument_list|(
literal|"QOpenGLDebugLogger::%s(): invalid source specified"
argument_list|,
name|callerName
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|types
operator|==
name|QOpenGLDebugMessage
operator|::
name|InvalidType
condition|)
block|{
name|qWarning
argument_list|(
literal|"QOpenGLDebugLogger::%s(): invalid type specified"
argument_list|,
name|callerName
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|severities
operator|==
name|QOpenGLDebugMessage
operator|::
name|InvalidSeverity
condition|)
block|{
name|qWarning
argument_list|(
literal|"QOpenGLDebugLogger::%s(): invalid severity specified"
argument_list|,
name|callerName
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|QVarLengthArray
argument_list|<
name|GLenum
argument_list|,
literal|8
argument_list|>
name|glSources
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|GLenum
argument_list|,
literal|8
argument_list|>
name|glTypes
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|GLenum
argument_list|,
literal|8
argument_list|>
name|glSeverities
decl_stmt|;
if|if
condition|(
name|ids
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|severities
operator|==
name|QOpenGLDebugMessage
operator|::
name|AnySeverity
argument_list|)
expr_stmt|;
comment|// The GL_KHR_debug extension says:
comment|//
comment|//        - If<count> is greater than zero, then<ids> is an array of<count>
comment|//          message IDs for the specified combination of<source> and<type>. In
comment|//          this case, if<source> or<type> is DONT_CARE, or<severity> is not
comment|//          DONT_CARE, the error INVALID_OPERATION is generated. If<count> is
comment|//          zero, the value if<ids> is ignored.
comment|//
comment|// This means we can't convert AnySource or AnyType into DONT_CARE, but we have to roll
comment|// them into individual sources/types.
if|if
condition|(
name|sources
operator|==
name|QOpenGLDebugMessage
operator|::
name|AnySource
condition|)
block|{
name|sources
operator|=
name|QOpenGLDebugMessage
operator|::
name|InvalidSource
expr_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|QOpenGLDebugMessage
operator|::
name|LastSource
condition|;
name|i
operator|=
name|i
operator|<<
literal|1
control|)
name|sources
operator||=
name|QOpenGLDebugMessage
operator|::
name|Source
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|types
operator|==
name|QOpenGLDebugMessage
operator|::
name|AnyType
condition|)
block|{
name|types
operator|=
name|QOpenGLDebugMessage
operator|::
name|InvalidType
expr_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|QOpenGLDebugMessage
operator|::
name|LastType
condition|;
name|i
operator|=
name|i
operator|<<
literal|1
control|)
name|types
operator||=
name|QOpenGLDebugMessage
operator|::
name|Type
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
DECL|macro|CONVERT_TO_GL_DEBUG_MESSAGE_CONTROL_PARAMETERS
define|#
directive|define
name|CONVERT_TO_GL_DEBUG_MESSAGE_CONTROL_PARAMETERS
parameter_list|(
name|type
parameter_list|,
name|source
parameter_list|,
name|target
parameter_list|)
define|\
value|if (source == QOpenGLDebugMessage::Any ## type) { \         target<< GL_DONT_CARE; \     } else { \         for (uint i = 1; i<= QOpenGLDebugMessage::Last ## type; i = i<< 1) \             if (source.testFlag(QOpenGLDebugMessage:: type (i))) \                 target<< qt_message ## type ## ToGL (QOpenGLDebugMessage:: type (i)); \     }
name|CONVERT_TO_GL_DEBUG_MESSAGE_CONTROL_PARAMETERS
argument_list|(
argument|Source
argument_list|,
argument|sources
argument_list|,
argument|glSources
argument_list|)
name|CONVERT_TO_GL_DEBUG_MESSAGE_CONTROL_PARAMETERS
argument_list|(
argument|Type
argument_list|,
argument|types
argument_list|,
argument|glTypes
argument_list|)
name|CONVERT_TO_GL_DEBUG_MESSAGE_CONTROL_PARAMETERS
argument_list|(
argument|Severity
argument_list|,
argument|severities
argument_list|,
argument|glSeverities
argument_list|)
DECL|macro|CONVERT_TO_GL_DEBUG_MESSAGE_CONTROL_PARAMETERS
undef|#
directive|undef
name|CONVERT_TO_GL_DEBUG_MESSAGE_CONTROL_PARAMETERS
specifier|const
name|GLsizei
name|idCount
init|=
name|ids
operator|.
name|count
argument_list|()
decl_stmt|;
comment|// The GL_KHR_debug extension says that if idCount is 0, idPtr must be ignored.
comment|// Unfortunately, some bugged drivers do NOT ignore it, so pass NULL in case.
specifier|const
name|GLuint
modifier|*
specifier|const
name|idPtr
init|=
name|idCount
condition|?
name|ids
operator|.
name|constData
argument_list|()
else|:
literal|0
decl_stmt|;
foreach|foreach
control|(
name|GLenum
name|source
decl|,
name|glSources
control|)
foreach|foreach
control|(
name|GLenum
name|type
decl|,
name|glTypes
control|)
foreach|foreach
control|(
name|GLenum
name|severity
decl|,
name|glSeverities
control|)
name|glDebugMessageControl
argument_list|(
name|source
argument_list|,
name|type
argument_list|,
name|severity
argument_list|,
name|idCount
argument_list|,
name|idPtr
argument_list|,
name|GLboolean
argument_list|(
name|enable
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|_q_contextAboutToBeDestroyed
name|void
name|QOpenGLDebugLoggerPrivate
operator|::
name|_q_contextAboutToBeDestroyed
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QOpenGLDebugLogger
argument_list|)
expr_stmt|;
name|q
operator|->
name|stopLogging
argument_list|()
expr_stmt|;
name|initialized
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_extern
extern|extern
literal|"C"
block|{
DECL|function|qt_opengl_debug_callback
specifier|static
name|void
name|QOPENGLF_APIENTRY
name|qt_opengl_debug_callback
parameter_list|(
name|GLenum
name|source
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLuint
name|id
parameter_list|,
name|GLenum
name|severity
parameter_list|,
name|GLsizei
name|length
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|rawMessage
parameter_list|,
name|GLvoid
modifier|*
name|userParam
parameter_list|)
block|{
name|QOpenGLDebugLoggerPrivate
modifier|*
name|loggerPrivate
init|=
cast|static_cast
argument_list|<
name|QOpenGLDebugLoggerPrivate
operator|*
argument_list|>
argument_list|(
name|userParam
argument_list|)
decl_stmt|;
name|loggerPrivate
operator|->
name|handleMessage
argument_list|(
name|source
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|severity
argument_list|,
name|length
argument_list|,
name|rawMessage
argument_list|)
expr_stmt|;
block|}
block|}
end_extern
begin_comment
comment|/*!     Constructs a new logger object with the given \a parent.      \note The object must be initialized before logging can happen.      \sa initialize() */
end_comment
begin_constructor
DECL|function|QOpenGLDebugLogger
name|QOpenGLDebugLogger
operator|::
name|QOpenGLDebugLogger
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QOpenGLDebugLoggerPrivate
argument_list|,
name|parent
argument_list|)
block|{
comment|// QOpenGLDebugMessage is going to be mostly used as an argument
comment|// of a cross thread connection, therefore let's ease the life for the users
comment|// and register the type for them.
name|qRegisterMetaType
argument_list|<
name|QOpenGLDebugMessage
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the logger object. */
end_comment
begin_destructor
DECL|function|~QOpenGLDebugLogger
name|QOpenGLDebugLogger
operator|::
name|~
name|QOpenGLDebugLogger
parameter_list|()
block|{
name|stopLogging
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     Initializes the object in the current OpenGL context. The context must     support the \c{GL_KHR_debug} extension for the initialization to succeed.     The object must be initialized before any logging can happen.      It is safe to call this function multiple times from the same context.      This function can also be used to change the context of a previously     initialized object; note that in this case the object must not be logging     when you call this function.      Returns \c true if the logger is successfully initialized; false otherwise.      \sa QOpenGLContext */
end_comment
begin_function
DECL|function|initialize
name|bool
name|QOpenGLDebugLogger
operator|::
name|initialize
parameter_list|()
block|{
name|QOpenGLContext
modifier|*
name|context
init|=
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|context
condition|)
block|{
name|qWarning
argument_list|(
literal|"QOpenGLDebugLogger::initialize(): no current OpenGL context found."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|Q_D
argument_list|(
name|QOpenGLDebugLogger
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|context
operator|==
name|context
condition|)
block|{
comment|// context is non-NULL, d->context is non NULL only on successful initialization.
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|initialized
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|d
operator|->
name|isLogging
condition|)
block|{
name|qWarning
argument_list|(
literal|"QOpenGLDebugLogger::initialize(): cannot initialize the object while logging. Please stop the logging first."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|d
operator|->
name|context
condition|)
name|disconnect
argument_list|(
name|d
operator|->
name|context
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToBeDestroyed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_contextAboutToBeDestroyed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|initialized
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|context
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|context
operator|->
name|hasExtension
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"GL_KHR_debug"
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
name|d
operator|->
name|context
operator|=
name|context
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|context
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToBeDestroyed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_contextAboutToBeDestroyed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
DECL|macro|GET_DEBUG_PROC_ADDRESS
define|#
directive|define
name|GET_DEBUG_PROC_ADDRESS
parameter_list|(
name|procName
parameter_list|)
define|\
value|d->procName = reinterpret_cast< qt_ ## procName ## _t>( \         d->context->getProcAddress(QByteArrayLiteral( #procName )) \     );
name|GET_DEBUG_PROC_ADDRESS
argument_list|(
name|glDebugMessageControl
argument_list|)
expr_stmt|;
name|GET_DEBUG_PROC_ADDRESS
argument_list|(
name|glDebugMessageInsert
argument_list|)
expr_stmt|;
name|GET_DEBUG_PROC_ADDRESS
argument_list|(
name|glDebugMessageCallback
argument_list|)
expr_stmt|;
name|GET_DEBUG_PROC_ADDRESS
argument_list|(
name|glGetDebugMessageLog
argument_list|)
expr_stmt|;
name|GET_DEBUG_PROC_ADDRESS
argument_list|(
name|glPushDebugGroup
argument_list|)
expr_stmt|;
name|GET_DEBUG_PROC_ADDRESS
argument_list|(
name|glPopDebugGroup
argument_list|)
expr_stmt|;
name|GET_DEBUG_PROC_ADDRESS
argument_list|(
argument|glGetPointerv
argument_list|)
DECL|macro|GET_DEBUG_PROC_ADDRESS
undef|#
directive|undef
name|GET_DEBUG_PROC_ADDRESS
name|glGetIntegerv
argument_list|(
name|GL_MAX_DEBUG_MESSAGE_LENGTH
argument_list|,
operator|&
name|d
operator|->
name|maxMessageLength
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
if|if
condition|(
operator|!
name|d
operator|->
name|context
operator|->
name|format
argument_list|()
operator|.
name|testOption
argument_list|(
name|QSurfaceFormat
operator|::
name|DebugContext
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QOpenGLDebugLogger::initialize(): the current context is not a debug context:\n"
literal|"    this means that the GL may not generate any debug output at all.\n"
literal|"    To avoid this warning, try creating the context with the\n"
literal|"    QSurfaceFormat::DebugContext surface format option."
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_DEBUG
name|d
operator|->
name|initialized
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if this object is currently logging, false otherwise.      \sa startLogging() */
end_comment
begin_function
DECL|function|isLogging
name|bool
name|QOpenGLDebugLogger
operator|::
name|isLogging
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QOpenGLDebugLogger
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|isLogging
return|;
block|}
end_function
begin_comment
comment|/*!     Starts logging messages coming from the OpenGL server. When a new message     is received, the signal messageLogged() is emitted, carrying the logged     message as argument.      \a loggingMode specifies whether the logging must be asynchronous (the default)     or synchronous.      QOpenGLDebugLogger will record the values of \c{GL_DEBUG_OUTPUT} and     \c{GL_DEBUG_OUTPUT_SYNCHRONOUS} when logging is started, and set them back     when logging is stopped. Moreover, any user-defined OpenGL debug callback     installed when this function is invoked will be restored when logging is     stopped; QOpenGLDebugLogger will ensure that the pre-existing callback will     still be invoked when logging.      \note It's not possible to change the logging mode without stopping and     starting logging again. This might change in a future version of Qt.      \note The object must be initialized before logging can happen.      \sa stopLogging(), initialize() */
end_comment
begin_function
DECL|function|startLogging
name|void
name|QOpenGLDebugLogger
operator|::
name|startLogging
parameter_list|(
name|QOpenGLDebugLogger
operator|::
name|LoggingMode
name|loggingMode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLDebugLogger
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|initialized
condition|)
block|{
name|qWarning
argument_list|(
literal|"QOpenGLDebugLogger::startLogging(): object must be initialized before logging can start"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|isLogging
condition|)
block|{
name|qWarning
argument_list|(
literal|"QOpenGLDebugLogger::startLogging(): this object is already logging"
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|isLogging
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|loggingMode
operator|=
name|loggingMode
expr_stmt|;
name|d
operator|->
name|glGetPointerv
argument_list|(
name|GL_DEBUG_CALLBACK_FUNCTION
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|d
operator|->
name|oldDebugCallbackFunction
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|glGetPointerv
argument_list|(
name|GL_DEBUG_CALLBACK_USER_PARAM
argument_list|,
operator|&
name|d
operator|->
name|oldDebugCallbackParameter
argument_list|)
expr_stmt|;
name|d
operator|->
name|glDebugMessageCallback
argument_list|(
operator|&
name|qt_opengl_debug_callback
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|d
operator|->
name|debugWasEnabled
operator|=
name|glIsEnabled
argument_list|(
name|GL_DEBUG_OUTPUT
argument_list|)
expr_stmt|;
name|d
operator|->
name|syncDebugWasEnabled
operator|=
name|glIsEnabled
argument_list|(
name|GL_DEBUG_OUTPUT_SYNCHRONOUS
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|loggingMode
operator|==
name|SynchronousLogging
condition|)
name|glEnable
argument_list|(
name|GL_DEBUG_OUTPUT_SYNCHRONOUS
argument_list|)
expr_stmt|;
else|else
name|glDisable
argument_list|(
name|GL_DEBUG_OUTPUT_SYNCHRONOUS
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_DEBUG_OUTPUT
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the logging mode of the object.      \sa startLogging() */
end_comment
begin_function
DECL|function|loggingMode
name|QOpenGLDebugLogger
operator|::
name|LoggingMode
name|QOpenGLDebugLogger
operator|::
name|loggingMode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QOpenGLDebugLogger
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|loggingMode
return|;
block|}
end_function
begin_comment
comment|/*!     Stops logging messages from the OpenGL server.      \sa startLogging() */
end_comment
begin_function
DECL|function|stopLogging
name|void
name|QOpenGLDebugLogger
operator|::
name|stopLogging
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QOpenGLDebugLogger
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isLogging
condition|)
return|return;
name|d
operator|->
name|isLogging
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|glDebugMessageCallback
argument_list|(
name|d
operator|->
name|oldDebugCallbackFunction
argument_list|,
name|d
operator|->
name|oldDebugCallbackParameter
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|debugWasEnabled
condition|)
name|glDisable
argument_list|(
name|GL_DEBUG_OUTPUT
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|syncDebugWasEnabled
condition|)
name|glEnable
argument_list|(
name|GL_DEBUG_OUTPUT_SYNCHRONOUS
argument_list|)
expr_stmt|;
else|else
name|glDisable
argument_list|(
name|GL_DEBUG_OUTPUT_SYNCHRONOUS
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Inserts the message \a debugMessage into the OpenGL debug log. This provides     a way for applications or libraries to insert custom messages that can     ease the debugging of OpenGL applications.      \note \a debugMessage must have QOpenGLDebugMessage::ApplicationSource or     QOpenGLDebugMessage::ThirdPartySource as its source, and a valid     type and severity, otherwise it will not be inserted into the log.      \note The object must be initialized before logging can happen.      \sa initialize() */
end_comment
begin_function
DECL|function|logMessage
name|void
name|QOpenGLDebugLogger
operator|::
name|logMessage
parameter_list|(
specifier|const
name|QOpenGLDebugMessage
modifier|&
name|debugMessage
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLDebugLogger
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|initialized
condition|)
block|{
name|qWarning
argument_list|(
literal|"QOpenGLDebugLogger::logMessage(): object must be initialized before logging messages"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|debugMessage
operator|.
name|source
argument_list|()
operator|!=
name|QOpenGLDebugMessage
operator|::
name|ApplicationSource
operator|&&
name|debugMessage
operator|.
name|source
argument_list|()
operator|!=
name|QOpenGLDebugMessage
operator|::
name|ThirdPartySource
condition|)
block|{
name|qWarning
argument_list|(
literal|"QOpenGLDebugLogger::logMessage(): using a message source different from ApplicationSource\n"
literal|"    or ThirdPartySource is not supported by GL_KHR_debug. The message will not be logged."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|debugMessage
operator|.
name|type
argument_list|()
operator|==
name|QOpenGLDebugMessage
operator|::
name|InvalidType
operator|||
name|debugMessage
operator|.
name|type
argument_list|()
operator|==
name|QOpenGLDebugMessage
operator|::
name|AnyType
operator|||
name|debugMessage
operator|.
name|severity
argument_list|()
operator|==
name|QOpenGLDebugMessage
operator|::
name|InvalidSeverity
operator|||
name|debugMessage
operator|.
name|severity
argument_list|()
operator|==
name|QOpenGLDebugMessage
operator|::
name|AnySeverity
condition|)
block|{
name|qWarning
argument_list|(
literal|"QOpenGLDebugLogger::logMessage(): the message has a non-valid type and/or severity. The message will not be logged."
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|GLenum
name|source
init|=
name|qt_messageSourceToGL
argument_list|(
name|debugMessage
operator|.
name|source
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|GLenum
name|type
init|=
name|qt_messageTypeToGL
argument_list|(
name|debugMessage
operator|.
name|type
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|GLenum
name|severity
init|=
name|qt_messageSeverityToGL
argument_list|(
name|debugMessage
operator|.
name|severity
argument_list|()
argument_list|)
decl_stmt|;
name|QByteArray
name|rawMessage
init|=
name|debugMessage
operator|.
name|message
argument_list|()
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|rawMessage
operator|.
name|append
argument_list|(
literal|'\0'
argument_list|)
expr_stmt|;
if|if
condition|(
name|rawMessage
operator|.
name|length
argument_list|()
operator|>
name|d
operator|->
name|maxMessageLength
condition|)
block|{
name|qWarning
argument_list|(
literal|"QOpenGLDebugLogger::logMessage(): message too long, truncating it\n"
literal|"    (%d bytes long, but the GL accepts up to %d bytes)"
argument_list|,
name|rawMessage
operator|.
name|length
argument_list|()
argument_list|,
name|d
operator|->
name|maxMessageLength
argument_list|)
expr_stmt|;
name|rawMessage
operator|.
name|resize
argument_list|(
name|d
operator|->
name|maxMessageLength
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rawMessage
operator|.
name|append
argument_list|(
literal|'\0'
argument_list|)
expr_stmt|;
block|}
comment|// Don't pass rawMessage.length(), as unfortunately bugged
comment|// OpenGL drivers will eat the trailing NUL in the message. Just rely
comment|// on the message being NUL terminated.
name|d
operator|->
name|glDebugMessageInsert
argument_list|(
name|source
argument_list|,
name|type
argument_list|,
name|debugMessage
operator|.
name|id
argument_list|()
argument_list|,
name|severity
argument_list|,
operator|-
literal|1
argument_list|,
name|rawMessage
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Pushes a debug group with name \a name, id \a id, and source \a source onto     the debug groups stack. If the group is successfully pushed, OpenGL will     automatically log a message with message \a name, id \a id, source \a     source, type QOpenGLDebugMessage::GroupPushType and severity     QOpenGLDebugMessage::NotificationSeverity.      The newly pushed group will inherit the same filtering settings of the     group that was on the top of the stack; that is, the filtering will not be     changed by pushing a new group.      \note The \a source must either be QOpenGLDebugMessage::ApplicationSource or     QOpenGLDebugMessage::ThirdPartySource, otherwise the group will not be pushed.      \note The object must be initialized before managing debug groups.      \sa popGroup(), enableMessages(), disableMessages() */
end_comment
begin_function
DECL|function|pushGroup
name|void
name|QOpenGLDebugLogger
operator|::
name|pushGroup
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|GLuint
name|id
parameter_list|,
name|QOpenGLDebugMessage
operator|::
name|Source
name|source
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLDebugLogger
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|initialized
condition|)
block|{
name|qWarning
argument_list|(
literal|"QOpenGLDebugLogger::pushGroup(): object must be initialized before pushing a debug group"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|source
operator|!=
name|QOpenGLDebugMessage
operator|::
name|ApplicationSource
operator|&&
name|source
operator|!=
name|QOpenGLDebugMessage
operator|::
name|ThirdPartySource
condition|)
block|{
name|qWarning
argument_list|(
literal|"QOpenGLDebugLogger::pushGroup(): using a source different from ApplicationSource\n"
literal|"    or ThirdPartySource is not supported by GL_KHR_debug. The group will not be pushed."
argument_list|)
expr_stmt|;
return|return;
block|}
name|QByteArray
name|rawName
init|=
name|name
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|rawName
operator|.
name|append
argument_list|(
literal|'\0'
argument_list|)
expr_stmt|;
if|if
condition|(
name|rawName
operator|.
name|length
argument_list|()
operator|>
name|d
operator|->
name|maxMessageLength
condition|)
block|{
name|qWarning
argument_list|(
literal|"QOpenGLDebugLogger::pushGroup(): group name too long, truncating it\n"
literal|"    (%d bytes long, but the GL accepts up to %d bytes)"
argument_list|,
name|rawName
operator|.
name|length
argument_list|()
argument_list|,
name|d
operator|->
name|maxMessageLength
argument_list|)
expr_stmt|;
name|rawName
operator|.
name|resize
argument_list|(
name|d
operator|->
name|maxMessageLength
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rawName
operator|.
name|append
argument_list|(
literal|'\0'
argument_list|)
expr_stmt|;
block|}
comment|// Don't pass rawMessage.length(), as unfortunately bugged
comment|// OpenGL drivers will eat the trailing NUL in the name. Just rely
comment|// on the name being NUL terminated.
name|d
operator|->
name|glPushDebugGroup
argument_list|(
name|qt_messageSourceToGL
argument_list|(
name|source
argument_list|)
argument_list|,
name|id
argument_list|,
operator|-
literal|1
argument_list|,
name|rawName
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Pops the topmost debug group from the debug groups stack. If the group is     successfully popped, OpenGL will automatically log a message with message,     id and source matching those of the popped group, type     QOpenGLDebugMessage::GroupPopType and severity     QOpenGLDebugMessage::NotificationSeverity.      Popping a debug group will restore the message filtering settings of the     group that becomes the top of the debug groups stack.      \note The object must be initialized before managing debug groups.      \sa pushGroup() */
end_comment
begin_function
DECL|function|popGroup
name|void
name|QOpenGLDebugLogger
operator|::
name|popGroup
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QOpenGLDebugLogger
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|initialized
condition|)
block|{
name|qWarning
argument_list|(
literal|"QOpenGLDebugLogger::pushGroup(): object must be initialized before popping a debug group"
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|glPopDebugGroup
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Enables the logging of messages from the given \a sources, of the given \a     types and with the given \a severities and any message id.      The logging will be enabled in the current control group.      \sa disableMessages(), pushGroup(), popGroup() */
end_comment
begin_function
DECL|function|enableMessages
name|void
name|QOpenGLDebugLogger
operator|::
name|enableMessages
parameter_list|(
name|QOpenGLDebugMessage
operator|::
name|Sources
name|sources
parameter_list|,
name|QOpenGLDebugMessage
operator|::
name|Types
name|types
parameter_list|,
name|QOpenGLDebugMessage
operator|::
name|Severities
name|severities
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLDebugLogger
argument_list|)
expr_stmt|;
name|d
operator|->
name|controlDebugMessages
argument_list|(
name|sources
argument_list|,
name|types
argument_list|,
name|severities
argument_list|,
name|QVector
argument_list|<
name|GLuint
argument_list|>
argument_list|()
argument_list|,
name|QByteArrayLiteral
argument_list|(
literal|"enableMessages"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Enables the logging of messages with the given \a ids, from the given \a     sources and of the given \a types and any severity.      The logging will be enabled in the current control group.      \sa disableMessages(), pushGroup(), popGroup() */
end_comment
begin_function
DECL|function|enableMessages
name|void
name|QOpenGLDebugLogger
operator|::
name|enableMessages
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|GLuint
argument_list|>
modifier|&
name|ids
parameter_list|,
name|QOpenGLDebugMessage
operator|::
name|Sources
name|sources
parameter_list|,
name|QOpenGLDebugMessage
operator|::
name|Types
name|types
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLDebugLogger
argument_list|)
expr_stmt|;
name|d
operator|->
name|controlDebugMessages
argument_list|(
name|sources
argument_list|,
name|types
argument_list|,
name|QOpenGLDebugMessage
operator|::
name|AnySeverity
argument_list|,
name|ids
argument_list|,
name|QByteArrayLiteral
argument_list|(
literal|"enableMessages"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Disables the logging of messages with the given \a sources, of the given \a     types and with the given \a severities and any message id.      The logging will be disabled in the current control group.      \sa enableMessages(), pushGroup(), popGroup() */
end_comment
begin_function
DECL|function|disableMessages
name|void
name|QOpenGLDebugLogger
operator|::
name|disableMessages
parameter_list|(
name|QOpenGLDebugMessage
operator|::
name|Sources
name|sources
parameter_list|,
name|QOpenGLDebugMessage
operator|::
name|Types
name|types
parameter_list|,
name|QOpenGLDebugMessage
operator|::
name|Severities
name|severities
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLDebugLogger
argument_list|)
expr_stmt|;
name|d
operator|->
name|controlDebugMessages
argument_list|(
name|sources
argument_list|,
name|types
argument_list|,
name|severities
argument_list|,
name|QVector
argument_list|<
name|GLuint
argument_list|>
argument_list|()
argument_list|,
name|QByteArrayLiteral
argument_list|(
literal|"disableMessages"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Disables the logging of messages with the given \a ids, from the given \a     sources and of the given \a types and any severity.      The logging will be disabled in the current control group.      \sa enableMessages(), pushGroup(), popGroup() */
end_comment
begin_function
DECL|function|disableMessages
name|void
name|QOpenGLDebugLogger
operator|::
name|disableMessages
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|GLuint
argument_list|>
modifier|&
name|ids
parameter_list|,
name|QOpenGLDebugMessage
operator|::
name|Sources
name|sources
parameter_list|,
name|QOpenGLDebugMessage
operator|::
name|Types
name|types
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLDebugLogger
argument_list|)
expr_stmt|;
name|d
operator|->
name|controlDebugMessages
argument_list|(
name|sources
argument_list|,
name|types
argument_list|,
name|QOpenGLDebugMessage
operator|::
name|AnySeverity
argument_list|,
name|ids
argument_list|,
name|QByteArrayLiteral
argument_list|(
literal|"disableMessages"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Reads all the available messages in the OpenGL internal debug log and     returns them. Moreover, this function will clear the internal debug log,     so that subsequent invocations will not return messages that were     already returned.      \sa startLogging() */
end_comment
begin_function
DECL|function|loggedMessages
name|QList
argument_list|<
name|QOpenGLDebugMessage
argument_list|>
name|QOpenGLDebugLogger
operator|::
name|loggedMessages
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QOpenGLDebugLogger
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|initialized
condition|)
block|{
name|qWarning
argument_list|(
literal|"QOpenGLDebugLogger::loggedMessages(): object must be initialized before reading logged messages"
argument_list|)
expr_stmt|;
return|return
name|QList
argument_list|<
name|QOpenGLDebugMessage
argument_list|>
argument_list|()
return|;
block|}
specifier|static
specifier|const
name|GLuint
name|maxMessageCount
init|=
literal|128
decl_stmt|;
name|GLuint
name|messagesRead
decl_stmt|;
name|GLenum
name|messageSources
index|[
name|maxMessageCount
index|]
decl_stmt|;
name|GLenum
name|messageTypes
index|[
name|maxMessageCount
index|]
decl_stmt|;
name|GLuint
name|messageIds
index|[
name|maxMessageCount
index|]
decl_stmt|;
name|GLenum
name|messageSeverities
index|[
name|maxMessageCount
index|]
decl_stmt|;
name|GLsizei
name|messageLengths
index|[
name|maxMessageCount
index|]
decl_stmt|;
name|QByteArray
name|messagesBuffer
decl_stmt|;
name|messagesBuffer
operator|.
name|resize
argument_list|(
name|maxMessageCount
operator|*
name|d
operator|->
name|maxMessageLength
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QOpenGLDebugMessage
argument_list|>
name|messages
decl_stmt|;
do|do
block|{
name|messagesRead
operator|=
name|d
operator|->
name|glGetDebugMessageLog
argument_list|(
name|maxMessageCount
argument_list|,
name|GLsizei
argument_list|(
name|messagesBuffer
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|messageSources
argument_list|,
name|messageTypes
argument_list|,
name|messageIds
argument_list|,
name|messageSeverities
argument_list|,
name|messageLengths
argument_list|,
name|messagesBuffer
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|messagesBufferPtr
init|=
name|messagesBuffer
operator|.
name|constData
argument_list|()
decl_stmt|;
for|for
control|(
name|GLuint
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messagesRead
condition|;
operator|++
name|i
control|)
block|{
name|QOpenGLDebugMessage
name|message
decl_stmt|;
name|QOpenGLDebugMessagePrivate
modifier|*
name|messagePrivate
init|=
name|message
operator|.
name|d
operator|.
name|data
argument_list|()
decl_stmt|;
name|messagePrivate
operator|->
name|source
operator|=
name|qt_messageSourceFromGL
argument_list|(
name|messageSources
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|messagePrivate
operator|->
name|type
operator|=
name|qt_messageTypeFromGL
argument_list|(
name|messageTypes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|messagePrivate
operator|->
name|id
operator|=
name|messageIds
index|[
name|i
index|]
expr_stmt|;
name|messagePrivate
operator|->
name|severity
operator|=
name|qt_messageSeverityFromGL
argument_list|(
name|messageSeverities
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|messagePrivate
operator|->
name|message
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|messagesBufferPtr
argument_list|,
name|messageLengths
index|[
name|i
index|]
operator|-
literal|1
argument_list|)
expr_stmt|;
name|messagesBufferPtr
operator|+=
name|messageLengths
index|[
name|i
index|]
expr_stmt|;
name|messages
operator|<<
name|message
expr_stmt|;
block|}
block|}
do|while
condition|(
name|messagesRead
operator|==
name|maxMessageCount
condition|)
do|;
return|return
name|messages
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QOpenGLDebugLogger::messageLogged(const QOpenGLDebugMessage&debugMessage)      This signal is emitted when a debug message (wrapped by the \a debugMessage     argument) is logged from the OpenGL server.      Depending on the OpenGL implementation, this signal can be emitted     from other threads than the one(s) the receiver(s) lives in, and even     different from the thread the QOpenGLContext in which this object has     been initialized lives in. Moreover, the signal could be emitted from     multiple threads at the same time. This is normally not a problem,     as Qt will utilize a queued connection for cross-thread signal emissions,     but if you force the connection type to Direct then you must be aware of     the potential races in the slots connected to this signal.      If logging have been started in SynchronousLogging mode, OpenGL guarantees     that this signal will be emitted from the same thread the QOpenGLContext     has been bound to, and no concurrent invocations will ever happen.      \note Logging must have been started, or this signal will not be emitted.      \sa startLogging() */
end_comment
begin_comment
comment|/*!     Returns the maximum supported length, in bytes, for the text of the messages     passed to logMessage(). This is also the maximum length of a debug group     name, as pushing or popping groups will automatically log a message with     the debug group name as the message text.      If a message text is too long, it will be automatically truncated by     QOpenGLDebugLogger.      \note Message texts are encoded in UTF-8 when they get passed to OpenGL, so     their size in bytes does not usually match the amount of UTF-16 code units,     as returned f.i. by QString::length(). (It does if the message contains     7-bit ASCII only data, which is typical for debug messages.) */
end_comment
begin_function
DECL|function|maximumMessageLength
name|qint64
name|QOpenGLDebugLogger
operator|::
name|maximumMessageLength
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QOpenGLDebugLogger
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|initialized
condition|)
block|{
name|qWarning
argument_list|(
literal|"QOpenGLDebugLogger::maximumMessageLength(): object must be initialized before reading the maximum message length"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|d
operator|->
name|maxMessageLength
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qopengldebug.cpp"
end_include
end_unit
