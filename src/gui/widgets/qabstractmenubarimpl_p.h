begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QABSTRACTMENUBARIMPL_P_H
end_ifndef
begin_define
DECL|macro|QABSTRACTMENUBARIMPL_P_H
define|#
directive|define
name|QABSTRACTMENUBARIMPL_P_H
end_define
begin_include
include|#
directive|include
file|<qfactoryinterface.h>
end_include
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_include
include|#
directive|include
file|<qplugin.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
end_ifndef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QAction
name|class
name|QAction
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QActionEvent
name|class
name|QActionEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QEvent
name|class
name|QEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QMenuBar
name|class
name|QMenuBar
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QObject
name|class
name|QObject
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWidget
name|class
name|QWidget
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QAbstractMenuBarImpl
name|class
name|QAbstractMenuBarImpl
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QFactoryInterface
name|struct
name|QMenuBarImplFactoryInterface
range|:
name|public
name|QFactoryInterface
block|{
name|virtual
name|QAbstractMenuBarImpl
operator|*
name|createImpl
argument_list|()
operator|=
literal|0
block|; }
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|QMenuBarImplFactoryInterface_iid
define|#
directive|define
name|QMenuBarImplFactoryInterface_iid
value|"com.nokia.qt.QMenuBarImplFactoryInterface"
end_define
begin_macro
DECL|function|Q_DECLARE_INTERFACE
name|Q_DECLARE_INTERFACE
argument_list|(
argument|QMenuBarImplFactoryInterface
argument_list|,
argument|QMenuBarImplFactoryInterface_iid
argument_list|)
end_macro
begin_comment
comment|/**  * The platform-specific implementation of a menubar  */
end_comment
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QAbstractMenuBarImpl
block|{
name|public
label|:
name|virtual
operator|~
name|QAbstractMenuBarImpl
argument_list|()
expr_stmt|;
comment|// QMenuBarPrivate::init()
name|virtual
name|void
name|init
parameter_list|(
name|QMenuBar
modifier|*
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|actionEvent
parameter_list|(
name|QActionEvent
modifier|*
parameter_list|)
init|=
literal|0
function_decl|;
comment|// QMenuBar::handleReparent()
name|virtual
name|void
name|handleReparent
parameter_list|(
name|QWidget
modifier|*
name|oldParent
parameter_list|,
name|QWidget
modifier|*
name|newParent
parameter_list|,
name|QWidget
modifier|*
name|oldWindow
parameter_list|,
name|QWidget
modifier|*
name|newWindow
parameter_list|)
init|=
literal|0
function_decl|;
comment|// QMenuBarPrivate::updateGeometries()
comment|// QMenuBar::minimumSizeHint()
comment|// QMenuBar::sizeHint()
comment|// QMenuBar::heightForWidth()
name|virtual
name|bool
name|allowCornerWidgets
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|// QMenuBar::_q_internalShortcutActivated()
name|virtual
name|void
name|popupAction
parameter_list|(
name|QAction
modifier|*
parameter_list|)
init|=
literal|0
function_decl|;
comment|// QMenuBar::setNativeMenuBar()
name|virtual
name|void
name|setNativeMenuBar
parameter_list|(
name|bool
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|isNativeMenuBar
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|/**      * Return true if the native menubar is capable of listening to the      * shortcut keys. If false is returned, QMenuBar will trigger actions on      * shortcut itself.      */
name|virtual
name|bool
name|shortcutsHandledByNativeMenuBar
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|bool
name|menuBarEventFilter
parameter_list|(
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
init|=
literal|0
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_MENUBAR
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QABSTRACTMENUBARIMPL_P_H
end_comment
end_unit
