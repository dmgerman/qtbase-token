begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QCHECKBOX_H
end_ifndef
begin_define
DECL|macro|QCHECKBOX_H
define|#
directive|define
name|QCHECKBOX_H
end_define
begin_include
include|#
directive|include
file|<QtGui/qabstractbutton.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Gui
argument_list|)
name|class
name|QCheckBoxPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QStyleOptionButton
name|class
name|QStyleOptionButton
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QCheckBox
range|:
name|public
name|QAbstractButton
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
argument|bool tristate READ isTristate WRITE setTristate
argument_list|)
name|public
operator|:
name|explicit
name|QCheckBox
argument_list|(
name|QWidget
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|explicit
name|QCheckBox
argument_list|(
specifier|const
name|QString
operator|&
name|text
argument_list|,
name|QWidget
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|QSize
name|sizeHint
argument_list|()
specifier|const
block|;
name|QSize
name|minimumSizeHint
argument_list|()
specifier|const
block|;
name|void
name|setTristate
argument_list|(
argument|bool y = true
argument_list|)
block|;
name|bool
name|isTristate
argument_list|()
specifier|const
block|;
name|Qt
operator|::
name|CheckState
name|checkState
argument_list|()
specifier|const
block|;
name|void
name|setCheckState
argument_list|(
argument|Qt::CheckState state
argument_list|)
block|;
name|Q_SIGNALS
operator|:
name|void
name|stateChanged
argument_list|(
name|int
argument_list|)
block|;
name|protected
operator|:
name|bool
name|event
argument_list|(
name|QEvent
operator|*
name|e
argument_list|)
block|;
name|bool
name|hitButton
argument_list|(
argument|const QPoint&pos
argument_list|)
specifier|const
block|;
name|void
name|checkStateSet
argument_list|()
block|;
name|void
name|nextCheckState
argument_list|()
block|;
name|void
name|paintEvent
argument_list|(
name|QPaintEvent
operator|*
argument_list|)
block|;
name|void
name|mouseMoveEvent
argument_list|(
name|QMouseEvent
operator|*
argument_list|)
block|;
name|void
name|initStyleOption
argument_list|(
argument|QStyleOptionButton *option
argument_list|)
specifier|const
block|;
ifdef|#
directive|ifdef
name|QT3_SUPPORT
name|public
operator|:
expr|enum
name|ToggleState
block|{
name|Off
operator|=
name|Qt
operator|::
name|Unchecked
block|,
name|NoChange
operator|=
name|Qt
operator|::
name|PartiallyChecked
block|,
name|On
operator|=
name|Qt
operator|::
name|Checked
block|}
block|;
specifier|inline
name|QT3_SUPPORT
name|ToggleState
name|state
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|QCheckBox
operator|::
name|ToggleState
operator|>
operator|(
name|static_cast
operator|<
name|int
operator|>
operator|(
name|checkState
argument_list|()
operator|)
operator|)
return|;
block|}
specifier|inline
name|QT3_SUPPORT
name|void
name|setState
argument_list|(
argument|ToggleState state
argument_list|)
block|{
name|setCheckState
argument_list|(
name|static_cast
operator|<
name|Qt
operator|::
name|CheckState
operator|>
operator|(
name|static_cast
operator|<
name|int
operator|>
operator|(
name|state
operator|)
operator|)
argument_list|)
block|; }
specifier|inline
name|QT3_SUPPORT
name|void
name|setNoChange
argument_list|()
block|{
name|setCheckState
argument_list|(
name|Qt
operator|::
name|PartiallyChecked
argument_list|)
block|; }
name|QT3_SUPPORT_CONSTRUCTOR
name|QCheckBox
argument_list|(
name|QWidget
operator|*
name|parent
argument_list|,
specifier|const
name|char
operator|*
name|name
argument_list|)
block|;
name|QT3_SUPPORT_CONSTRUCTOR
name|QCheckBox
argument_list|(
specifier|const
name|QString
operator|&
name|text
argument_list|,
name|QWidget
operator|*
name|parent
argument_list|,
specifier|const
name|char
operator|*
name|name
argument_list|)
block|;
endif|#
directive|endif
name|private
operator|:
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QCheckBox
argument_list|)
name|Q_DISABLE_COPY
argument_list|(
argument|QCheckBox
argument_list|)
block|}
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QCHECKBOX_H
end_comment
end_unit
