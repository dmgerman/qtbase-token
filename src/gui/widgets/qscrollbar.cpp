begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qcursor.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qscrollbar.h"
end_include
begin_include
include|#
directive|include
file|"qstyle.h"
end_include
begin_include
include|#
directive|include
file|"qstyleoption.h"
end_include
begin_include
include|#
directive|include
file|"qmenu.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qelapsedtimer.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_include
include|#
directive|include
file|"qaccessible.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|"qabstractslider_p.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QScrollBar     \brief The QScrollBar widget provides a vertical or horizontal scroll bar.      \ingroup basicwidgets      A scroll bar is a control that enables the user to access parts of a     document that is larger than the widget used to display it. It provides     a visual indication of the user's current position within the document     and the amount of the document that is visible. Scroll bars are usually     equipped with other controls that enable more accurate navigation.     Qt displays scroll bars in a way that is appropriate for each platform.      If you need to provide a scrolling view onto another widget, it may be     more convenient to use the QScrollArea class because this provides a     viewport widget and scroll bars. QScrollBar is useful if you need to     implement similar functionality for specialized widgets using QAbstractScrollArea;     for example, if you decide to subclass QAbstractItemView.     For most other situations where a slider control is used to obtain a value     within a given range, the QSlider class may be more appropriate for your     needs.      \table     \row \o \image qscrollbar-picture.png     \o Scroll bars typically include four separate controls: a slider,     scroll arrows, and a page control.      \list     \o a. The slider provides a way to quickly go to any part of the     document, but does not support accurate navigation within large     documents.     \o b. The scroll arrows are push buttons which can be used to accurately     navigate to a particular place in a document. For a vertical scroll bar     connected to a text editor, these typically move the current position one     "line" up or down, and adjust the position of the slider by a small     amount. In editors and list boxes a "line" might mean one line of text;     in an image viewer it might mean 20 pixels.     \o c. The page control is the area over which the slider is dragged (the     scroll bar's background). Clicking here moves the scroll bar towards     the click by one "page". This value is usually the same as the length of     the slider.     \endlist     \endtable      Each scroll bar has a value that indicates how far the slider is from     the start of the scroll bar; this is obtained with value() and set     with setValue(). This value always lies within the range of values     defined for the scroll bar, from \l{QAbstractSlider::minimum()}{minimum()}     to \l{QAbstractSlider::minimum()}{maximum()} inclusive. The range of     acceptable values can be set with setMinimum() and setMaximum().     At the minimum value, the top edge of the slider (for a vertical scroll     bar) or left edge (for a horizontal scroll bar) will be at the top (or     left) end of the scroll bar. At the maximum value, the bottom (or right)     edge of the slider will be at the bottom (or right) end of the scroll bar.      The length of the slider is usually related to the value of the page step,     and typically represents the proportion of the document area shown in a     scrolling view. The page step is the amount that the value changes by     when the user presses the \key{Page Up} and \key{Page Down} keys, and is     set with setPageStep(). Smaller changes to the value defined by the     line step are made using the cursor keys, and this quantity is set with     \l{QAbstractSlider::}{setSingleStep()}.      Note that the range of values used is independent of the actual size     of the scroll bar widget. You do not need to take this into account when     you choose values for the range and the page step.      The range of values specified for the scroll bar are often determined     differently to those for a QSlider because the length of the slider     needs to be taken into account. If we have a document with 100 lines,     and we can only show 20 lines in a widget, we may wish to construct a     scroll bar with a page step of 20, a minimum value of 0, and a maximum     value of 80. This would give us a scroll bar with five "pages".      \table     \row \o \inlineimage qscrollbar-values.png     \o The relationship between a document length, the range of values used     in a scroll bar, and the page step is simple in many common situations.     The scroll bar's range of values is determined by subtracting a     chosen page step from some value representing the length of the document.     In such cases, the following equation is useful:     \e{document length} = maximum() - minimum() + pageStep().     \endtable      QScrollBar only provides integer ranges. Note that although     QScrollBar handles very large numbers, scroll bars on current     screens cannot usefully represent ranges above about 100,000 pixels.     Beyond that, it becomes difficult for the user to control the     slider using either the keyboard or the mouse, and the scroll     arrows will have limited use.      ScrollBar inherits a comprehensive set of signals from QAbstractSlider:     \list     \o \l{QAbstractSlider::valueChanged()}{valueChanged()} is emitted when the        scroll bar's value has changed. The tracking() determines whether this        signal is emitted during user interaction.     \o \l{QAbstractSlider::rangeChanged()}{rangeChanged()} is emitted when the        scroll bar's range of values has changed.     \o \l{QAbstractSlider::sliderPressed()}{sliderPressed()} is emitted when        the user starts to drag the slider.     \o \l{QAbstractSlider::sliderMoved()}{sliderMoved()} is emitted when the user        drags the slider.     \o \l{QAbstractSlider::sliderReleased()}{sliderReleased()} is emitted when        the user releases the slider.     \o \l{QAbstractSlider::actionTriggered()}{actionTriggered()} is emitted        when the scroll bar is changed by user interaction or via the        \l{QAbstractSlider::triggerAction()}{triggerAction()} function.     \endlist      A scroll bar can be controlled by the keyboard, but it has a     default focusPolicy() of Qt::NoFocus. Use setFocusPolicy() to     enable keyboard interaction with the scroll bar:     \list          \o Left/Right move a horizontal scroll bar by one single step.          \o Up/Down move a vertical scroll bar by one single step.          \o PageUp moves up one page.          \o PageDown moves down one page.          \o Home moves to the start (mininum).          \o End moves to the end (maximum).      \endlist      The slider itself can be controlled by using the     \l{QAbstractSlider::triggerAction()}{triggerAction()} function to simulate     user interaction with the scroll bar controls. This is useful if you have     many different widgets that use a common range of values.      Most GUI styles use the pageStep() value to calculate the size of the     slider.      \table 100%     \row \o \inlineimage macintosh-horizontalscrollbar.png Screenshot of a Macintosh style scroll bar          \o A scroll bar shown in the \l{Macintosh Style Widget Gallery}{Macintosh widget style}.     \row \o \inlineimage windowsxp-horizontalscrollbar.png Screenshot of a Windows XP style scroll bar          \o A scroll bar shown in the \l{Windows XP Style Widget Gallery}{Windows XP widget style}.     \row \o \inlineimage plastique-horizontalscrollbar.png Screenshot of a Plastique style scroll bar          \o A scroll bar shown in the \l{Plastique Style Widget Gallery}{Plastique widget style}.     \endtable      \sa QScrollArea, QSlider, QDial, QSpinBox, {fowler}{GUI Design Handbook: Scroll Bar}, {Sliders Example} */
end_comment
begin_class
DECL|class|QScrollBarPrivate
class|class
name|QScrollBarPrivate
super|:
specifier|public
name|QAbstractSliderPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QScrollBar
parameter_list|)
specifier|public
private|:
DECL|member|pressedControl
name|QStyle
operator|::
name|SubControl
name|pressedControl
decl_stmt|;
DECL|member|pointerOutsidePressedControl
name|bool
name|pointerOutsidePressedControl
decl_stmt|;
DECL|member|clickOffset
DECL|member|snapBackPosition
name|int
name|clickOffset
decl_stmt|,
name|snapBackPosition
decl_stmt|;
name|void
name|activateControl
parameter_list|(
name|uint
name|control
parameter_list|,
name|int
name|threshold
init|=
literal|500
parameter_list|)
function_decl|;
name|void
name|stopRepeatAction
parameter_list|()
function_decl|;
name|int
name|pixelPosToRangeValue
parameter_list|(
name|int
name|pos
parameter_list|)
specifier|const
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|bool
name|updateHoverControl
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
function_decl|;
name|QStyle
operator|::
name|SubControl
name|newHoverControl
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
function_decl|;
DECL|member|hoverControl
name|QStyle
operator|::
name|SubControl
name|hoverControl
decl_stmt|;
DECL|member|hoverRect
name|QRect
name|hoverRect
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|updateHoverControl
name|bool
name|QScrollBarPrivate
operator|::
name|updateHoverControl
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QScrollBar
argument_list|)
expr_stmt|;
name|QRect
name|lastHoverRect
init|=
name|hoverRect
decl_stmt|;
name|QStyle
operator|::
name|SubControl
name|lastHoverControl
init|=
name|hoverControl
decl_stmt|;
name|bool
name|doesHover
init|=
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Hover
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastHoverControl
operator|!=
name|newHoverControl
argument_list|(
name|pos
argument_list|)
operator|&&
name|doesHover
condition|)
block|{
name|q
operator|->
name|update
argument_list|(
name|lastHoverRect
argument_list|)
expr_stmt|;
name|q
operator|->
name|update
argument_list|(
name|hoverRect
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
operator|!
name|doesHover
return|;
block|}
end_function
begin_function
DECL|function|newHoverControl
name|QStyle
operator|::
name|SubControl
name|QScrollBarPrivate
operator|::
name|newHoverControl
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QScrollBar
argument_list|)
expr_stmt|;
name|QStyleOptionSlider
name|opt
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|opt
operator|.
name|subControls
operator|=
name|QStyle
operator|::
name|SC_All
expr_stmt|;
name|hoverControl
operator|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_ScrollBar
argument_list|,
operator|&
name|opt
argument_list|,
name|pos
argument_list|,
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|hoverControl
operator|==
name|QStyle
operator|::
name|SC_None
condition|)
name|hoverRect
operator|=
name|QRect
argument_list|()
expr_stmt|;
else|else
name|hoverRect
operator|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ScrollBar
argument_list|,
operator|&
name|opt
argument_list|,
name|hoverControl
argument_list|,
name|q
argument_list|)
expr_stmt|;
return|return
name|hoverControl
return|;
block|}
end_function
begin_function
DECL|function|activateControl
name|void
name|QScrollBarPrivate
operator|::
name|activateControl
parameter_list|(
name|uint
name|control
parameter_list|,
name|int
name|threshold
parameter_list|)
block|{
name|QAbstractSlider
operator|::
name|SliderAction
name|action
init|=
name|QAbstractSlider
operator|::
name|SliderNoAction
decl_stmt|;
switch|switch
condition|(
name|control
condition|)
block|{
case|case
name|QStyle
operator|::
name|SC_ScrollBarAddPage
case|:
name|action
operator|=
name|QAbstractSlider
operator|::
name|SliderPageStepAdd
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_ScrollBarSubPage
case|:
name|action
operator|=
name|QAbstractSlider
operator|::
name|SliderPageStepSub
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_ScrollBarAddLine
case|:
name|action
operator|=
name|QAbstractSlider
operator|::
name|SliderSingleStepAdd
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_ScrollBarSubLine
case|:
name|action
operator|=
name|QAbstractSlider
operator|::
name|SliderSingleStepSub
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_ScrollBarFirst
case|:
name|action
operator|=
name|QAbstractSlider
operator|::
name|SliderToMinimum
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_ScrollBarLast
case|:
name|action
operator|=
name|QAbstractSlider
operator|::
name|SliderToMaximum
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|action
condition|)
block|{
name|q_func
argument_list|()
operator|->
name|setRepeatAction
argument_list|(
name|action
argument_list|,
name|threshold
argument_list|)
expr_stmt|;
name|q_func
argument_list|()
operator|->
name|triggerAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|stopRepeatAction
name|void
name|QScrollBarPrivate
operator|::
name|stopRepeatAction
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QScrollBar
argument_list|)
expr_stmt|;
name|QStyle
operator|::
name|SubControl
name|tmp
init|=
name|pressedControl
decl_stmt|;
name|q
operator|->
name|setRepeatAction
argument_list|(
name|QAbstractSlider
operator|::
name|SliderNoAction
argument_list|)
expr_stmt|;
name|pressedControl
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
if|if
condition|(
name|tmp
operator|==
name|QStyle
operator|::
name|SC_ScrollBarSlider
condition|)
name|q
operator|->
name|setSliderDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QStyleOptionSlider
name|opt
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|q
operator|->
name|repaint
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ScrollBar
argument_list|,
operator|&
name|opt
argument_list|,
name|tmp
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Initialize \a option with the values from this QScrollBar. This method     is useful for subclasses when they need a QStyleOptionSlider, but don't want     to fill in all the information themselves.      \sa QStyleOption::initFrom() */
end_comment
begin_function
DECL|function|initStyleOption
name|void
name|QScrollBar
operator|::
name|initStyleOption
parameter_list|(
name|QStyleOptionSlider
modifier|*
name|option
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|option
condition|)
return|return;
name|Q_D
argument_list|(
specifier|const
name|QScrollBar
argument_list|)
expr_stmt|;
name|option
operator|->
name|initFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|option
operator|->
name|subControls
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|option
operator|->
name|activeSubControls
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|option
operator|->
name|orientation
operator|=
name|d
operator|->
name|orientation
expr_stmt|;
name|option
operator|->
name|minimum
operator|=
name|d
operator|->
name|minimum
expr_stmt|;
name|option
operator|->
name|maximum
operator|=
name|d
operator|->
name|maximum
expr_stmt|;
name|option
operator|->
name|sliderPosition
operator|=
name|d
operator|->
name|position
expr_stmt|;
name|option
operator|->
name|sliderValue
operator|=
name|d
operator|->
name|value
expr_stmt|;
name|option
operator|->
name|singleStep
operator|=
name|d
operator|->
name|singleStep
expr_stmt|;
name|option
operator|->
name|pageStep
operator|=
name|d
operator|->
name|pageStep
expr_stmt|;
name|option
operator|->
name|upsideDown
operator|=
name|d
operator|->
name|invertedAppearance
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Horizontal
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|HORIZONTAL
define|#
directive|define
name|HORIZONTAL
value|(d_func()->orientation == Qt::Horizontal)
end_define
begin_define
DECL|macro|VERTICAL
define|#
directive|define
name|VERTICAL
value|!HORIZONTAL
end_define
begin_comment
comment|/*!     Constructs a vertical scroll bar.      The \a parent argument is sent to the QWidget constructor.      The \l {QAbstractSlider::minimum} {minimum} defaults to 0, the     \l {QAbstractSlider::maximum} {maximum} to 99, with a     \l {QAbstractSlider::singleStep} {singleStep} size of 1 and a     \l {QAbstractSlider::pageStep} {pageStep} size of 10, and an     initial \l {QAbstractSlider::value} {value} of 0. */
end_comment
begin_constructor
DECL|function|QScrollBar
name|QScrollBar
operator|::
name|QScrollBar
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractSlider
argument_list|(
operator|*
operator|new
name|QScrollBarPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|d_func
argument_list|()
operator|->
name|orientation
operator|=
name|Qt
operator|::
name|Vertical
expr_stmt|;
name|d_func
argument_list|()
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a scroll bar with the given \a orientation.      The \a parent argument is passed to the QWidget constructor.      The \l {QAbstractSlider::minimum} {minimum} defaults to 0, the     \l {QAbstractSlider::maximum} {maximum} to 99, with a     \l {QAbstractSlider::singleStep} {singleStep} size of 1 and a     \l {QAbstractSlider::pageStep} {pageStep} size of 10, and an     initial \l {QAbstractSlider::value} {value} of 0. */
end_comment
begin_constructor
DECL|function|QScrollBar
name|QScrollBar
operator|::
name|QScrollBar
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractSlider
argument_list|(
operator|*
operator|new
name|QScrollBarPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|d_func
argument_list|()
operator|->
name|orientation
operator|=
name|orientation
expr_stmt|;
name|d_func
argument_list|()
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_ifdef
ifdef|#
directive|ifdef
name|QT3_SUPPORT
end_ifdef
begin_comment
comment|/*!     Use one of the constructors that doesn't take the \a name     argument and then use setObjectName() instead. */
end_comment
begin_constructor
DECL|function|QScrollBar
name|QScrollBar
operator|::
name|QScrollBar
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
member_init_list|:
name|QAbstractSlider
argument_list|(
operator|*
operator|new
name|QScrollBarPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|setObjectName
argument_list|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|d_func
argument_list|()
operator|->
name|orientation
operator|=
name|Qt
operator|::
name|Vertical
expr_stmt|;
name|d_func
argument_list|()
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Use one of the constructors that doesn't take the \a name     argument and then use setObjectName() instead. */
end_comment
begin_constructor
DECL|function|QScrollBar
name|QScrollBar
operator|::
name|QScrollBar
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
member_init_list|:
name|QAbstractSlider
argument_list|(
operator|*
operator|new
name|QScrollBarPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|setObjectName
argument_list|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|d_func
argument_list|()
operator|->
name|orientation
operator|=
name|orientation
expr_stmt|;
name|d_func
argument_list|()
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Use one of the constructors that doesn't take the \a name     argument and then use setObjectName() instead. */
end_comment
begin_constructor
DECL|function|QScrollBar
name|QScrollBar
operator|::
name|QScrollBar
parameter_list|(
name|int
name|minimum
parameter_list|,
name|int
name|maximum
parameter_list|,
name|int
name|lineStep
parameter_list|,
name|int
name|pageStep
parameter_list|,
name|int
name|value
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
member_init_list|:
name|QAbstractSlider
argument_list|(
operator|*
operator|new
name|QScrollBarPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QScrollBar
argument_list|)
expr_stmt|;
name|setObjectName
argument_list|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|minimum
operator|=
name|minimum
expr_stmt|;
name|d
operator|->
name|maximum
operator|=
name|maximum
expr_stmt|;
name|d
operator|->
name|singleStep
operator|=
name|lineStep
expr_stmt|;
name|d
operator|->
name|pageStep
operator|=
name|pageStep
expr_stmt|;
name|d
operator|->
name|value
operator|=
name|value
expr_stmt|;
name|d
operator|->
name|orientation
operator|=
name|orientation
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT3_SUPPORT
end_comment
begin_comment
comment|/*!     Destroys the scroll bar. */
end_comment
begin_destructor
DECL|function|~QScrollBar
name|QScrollBar
operator|::
name|~
name|QScrollBar
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|init
name|void
name|QScrollBarPrivate
operator|::
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QScrollBar
argument_list|)
expr_stmt|;
name|invertedControls
operator|=
literal|true
expr_stmt|;
name|pressedControl
operator|=
name|hoverControl
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|pointerOutsidePressedControl
operator|=
literal|false
expr_stmt|;
name|q
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
name|QSizePolicy
name|sp
argument_list|(
name|QSizePolicy
operator|::
name|Minimum
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|Slider
argument_list|)
decl_stmt|;
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
condition|)
name|sp
operator|.
name|transpose
argument_list|()
expr_stmt|;
name|q
operator|->
name|setSizePolicy
argument_list|(
name|sp
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_OwnSizePolicy
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OpaquePaintEvent
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CONTEXTMENU
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
if|if
condition|(
operator|!
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ScrollBar_ContextMenu
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
condition|)
block|{
name|q
operator|->
name|setContextMenuPolicy
argument_list|(
name|Qt
operator|::
name|PreventContextMenu
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
end_ifndef
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|contextMenuEvent
name|void
name|QScrollBar
operator|::
name|contextMenuEvent
parameter_list|(
name|QContextMenuEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ScrollBar_ContextMenu
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
condition|)
block|{
name|QAbstractSlider
operator|::
name|contextMenuEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return ;
block|}
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|bool
name|horiz
init|=
name|HORIZONTAL
decl_stmt|;
name|QPointer
argument_list|<
name|QMenu
argument_list|>
name|menu
init|=
operator|new
name|QMenu
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|actScrollHere
init|=
name|menu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"Scroll here"
argument_list|)
argument_list|)
decl_stmt|;
name|menu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|QAction
modifier|*
name|actScrollTop
init|=
name|menu
operator|->
name|addAction
argument_list|(
name|horiz
condition|?
name|tr
argument_list|(
literal|"Left edge"
argument_list|)
else|:
name|tr
argument_list|(
literal|"Top"
argument_list|)
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|actScrollBottom
init|=
name|menu
operator|->
name|addAction
argument_list|(
name|horiz
condition|?
name|tr
argument_list|(
literal|"Right edge"
argument_list|)
else|:
name|tr
argument_list|(
literal|"Bottom"
argument_list|)
argument_list|)
decl_stmt|;
name|menu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|QAction
modifier|*
name|actPageUp
init|=
name|menu
operator|->
name|addAction
argument_list|(
name|horiz
condition|?
name|tr
argument_list|(
literal|"Page left"
argument_list|)
else|:
name|tr
argument_list|(
literal|"Page up"
argument_list|)
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|actPageDn
init|=
name|menu
operator|->
name|addAction
argument_list|(
name|horiz
condition|?
name|tr
argument_list|(
literal|"Page right"
argument_list|)
else|:
name|tr
argument_list|(
literal|"Page down"
argument_list|)
argument_list|)
decl_stmt|;
name|menu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|QAction
modifier|*
name|actScrollUp
init|=
name|menu
operator|->
name|addAction
argument_list|(
name|horiz
condition|?
name|tr
argument_list|(
literal|"Scroll left"
argument_list|)
else|:
name|tr
argument_list|(
literal|"Scroll up"
argument_list|)
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|actScrollDn
init|=
name|menu
operator|->
name|addAction
argument_list|(
name|horiz
condition|?
name|tr
argument_list|(
literal|"Scroll right"
argument_list|)
else|:
name|tr
argument_list|(
literal|"Scroll down"
argument_list|)
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|actionSelected
init|=
name|menu
operator|->
name|exec
argument_list|(
name|event
operator|->
name|globalPos
argument_list|()
argument_list|)
decl_stmt|;
operator|delete
name|menu
expr_stmt|;
if|if
condition|(
name|actionSelected
operator|==
literal|0
condition|)
comment|/* do nothing */
empty_stmt|;
elseif|else
if|if
condition|(
name|actionSelected
operator|==
name|actScrollHere
condition|)
name|setValue
argument_list|(
name|d_func
argument_list|()
operator|->
name|pixelPosToRangeValue
argument_list|(
name|horiz
condition|?
name|event
operator|->
name|pos
argument_list|()
operator|.
name|x
argument_list|()
else|:
name|event
operator|->
name|pos
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|actionSelected
operator|==
name|actScrollTop
condition|)
name|triggerAction
argument_list|(
name|QAbstractSlider
operator|::
name|SliderToMinimum
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|actionSelected
operator|==
name|actScrollBottom
condition|)
name|triggerAction
argument_list|(
name|QAbstractSlider
operator|::
name|SliderToMaximum
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|actionSelected
operator|==
name|actPageUp
condition|)
name|triggerAction
argument_list|(
name|QAbstractSlider
operator|::
name|SliderPageStepSub
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|actionSelected
operator|==
name|actPageDn
condition|)
name|triggerAction
argument_list|(
name|QAbstractSlider
operator|::
name|SliderPageStepAdd
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|actionSelected
operator|==
name|actScrollUp
condition|)
name|triggerAction
argument_list|(
name|QAbstractSlider
operator|::
name|SliderSingleStepSub
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|actionSelected
operator|==
name|actScrollDn
condition|)
name|triggerAction
argument_list|(
name|QAbstractSlider
operator|::
name|SliderSingleStepAdd
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_MENU
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CONTEXTMENU
end_comment
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QScrollBar
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|ensurePolished
argument_list|()
expr_stmt|;
name|QStyleOptionSlider
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|int
name|scrollBarExtent
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ScrollBarExtent
argument_list|,
operator|&
name|opt
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|int
name|scrollBarSliderMin
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ScrollBarSliderMin
argument_list|,
operator|&
name|opt
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|QSize
name|size
decl_stmt|;
if|if
condition|(
name|opt
operator|.
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|size
operator|=
name|QSize
argument_list|(
name|scrollBarExtent
operator|*
literal|2
operator|+
name|scrollBarSliderMin
argument_list|,
name|scrollBarExtent
argument_list|)
expr_stmt|;
else|else
name|size
operator|=
name|QSize
argument_list|(
name|scrollBarExtent
argument_list|,
name|scrollBarExtent
operator|*
literal|2
operator|+
name|scrollBarSliderMin
argument_list|)
expr_stmt|;
return|return
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_ScrollBar
argument_list|,
operator|&
name|opt
argument_list|,
name|size
argument_list|,
name|this
argument_list|)
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!\reimp */
end_comment
begin_function
DECL|function|sliderChange
name|void
name|QScrollBar
operator|::
name|sliderChange
parameter_list|(
name|SliderChange
name|change
parameter_list|)
block|{
name|QAbstractSlider
operator|::
name|sliderChange
argument_list|(
name|change
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QScrollBar
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|HoverEnter
case|:
case|case
name|QEvent
operator|::
name|HoverLeave
case|:
case|case
name|QEvent
operator|::
name|HoverMove
case|:
if|if
condition|(
specifier|const
name|QHoverEvent
modifier|*
name|he
init|=
cast|static_cast
argument_list|<
specifier|const
name|QHoverEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
condition|)
name|d_func
argument_list|()
operator|->
name|updateHoverControl
argument_list|(
name|he
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
case|case
name|QEvent
operator|::
name|Wheel
case|:
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
comment|// override wheel event without adding virtual function override
name|QWheelEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
name|QWheelEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|int
name|delta
init|=
name|ev
operator|->
name|delta
argument_list|()
decl_stmt|;
comment|// scrollbar is a special case - in vertical mode it reaches minimum
comment|// value in the upper position, however QSlider's minimum value is on
comment|// the bottom. So we need to invert a value, but since the scrollbar is
comment|// inverted by default, we need to inverse the delta value for the
comment|// horizontal orientation.
if|if
condition|(
name|ev
operator|->
name|orientation
argument_list|()
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|delta
operator|=
operator|-
name|delta
expr_stmt|;
name|Q_D
argument_list|(
name|QScrollBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|scrollByDelta
argument_list|(
name|ev
operator|->
name|orientation
argument_list|()
argument_list|,
name|ev
operator|->
name|modifiers
argument_list|()
argument_list|,
name|delta
argument_list|)
condition|)
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
endif|#
directive|endif
default|default:
break|break;
block|}
return|return
name|QAbstractSlider
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|paintEvent
name|void
name|QScrollBar
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QScrollBar
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QStyleOptionSlider
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|opt
operator|.
name|subControls
operator|=
name|QStyle
operator|::
name|SC_All
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pressedControl
condition|)
block|{
name|opt
operator|.
name|activeSubControls
operator|=
operator|(
name|QStyle
operator|::
name|SubControl
operator|)
name|d
operator|->
name|pressedControl
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|pointerOutsidePressedControl
condition|)
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
block|}
else|else
block|{
name|opt
operator|.
name|activeSubControls
operator|=
operator|(
name|QStyle
operator|::
name|SubControl
operator|)
name|d
operator|->
name|hoverControl
expr_stmt|;
block|}
name|style
argument_list|()
operator|->
name|drawComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_ScrollBar
argument_list|,
operator|&
name|opt
argument_list|,
operator|&
name|p
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mousePressEvent
name|void
name|QScrollBar
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QScrollBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|repeatActionTimer
operator|.
name|isActive
argument_list|()
condition|)
name|d
operator|->
name|stopRepeatAction
argument_list|()
expr_stmt|;
name|bool
name|midButtonAbsPos
init|=
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ScrollBar_MiddleClickAbsolutePosition
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|QStyleOptionSlider
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|maximum
operator|==
name|d
operator|->
name|minimum
comment|// no range
operator|||
operator|(
name|e
operator|->
name|buttons
argument_list|()
operator|&
operator|(
name|~
name|e
operator|->
name|button
argument_list|()
operator|)
operator|)
comment|// another button was clicked before
operator|||
operator|!
operator|(
name|e
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
operator|||
operator|(
name|midButtonAbsPos
operator|&&
name|e
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|MidButton
operator|)
operator|)
condition|)
return|return;
name|d
operator|->
name|pressedControl
operator|=
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_ScrollBar
argument_list|,
operator|&
name|opt
argument_list|,
name|e
operator|->
name|pos
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|pointerOutsidePressedControl
operator|=
literal|false
expr_stmt|;
name|QRect
name|sr
init|=
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ScrollBar
argument_list|,
operator|&
name|opt
argument_list|,
name|QStyle
operator|::
name|SC_ScrollBarSlider
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|QPoint
name|click
init|=
name|e
operator|->
name|pos
argument_list|()
decl_stmt|;
name|QPoint
name|pressValue
init|=
name|click
operator|-
name|sr
operator|.
name|center
argument_list|()
operator|+
name|sr
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|d
operator|->
name|pressValue
operator|=
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|d
operator|->
name|pixelPosToRangeValue
argument_list|(
name|pressValue
operator|.
name|x
argument_list|()
argument_list|)
else|:
name|d
operator|->
name|pixelPosToRangeValue
argument_list|(
name|pressValue
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pressedControl
operator|==
name|QStyle
operator|::
name|SC_ScrollBarSlider
condition|)
block|{
name|d
operator|->
name|clickOffset
operator|=
name|HORIZONTAL
condition|?
operator|(
name|click
operator|.
name|x
argument_list|()
operator|-
name|sr
operator|.
name|x
argument_list|()
operator|)
else|:
operator|(
name|click
operator|.
name|y
argument_list|()
operator|-
name|sr
operator|.
name|y
argument_list|()
operator|)
expr_stmt|;
name|d
operator|->
name|snapBackPosition
operator|=
name|d
operator|->
name|position
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|d
operator|->
name|pressedControl
operator|==
name|QStyle
operator|::
name|SC_ScrollBarAddPage
operator|||
name|d
operator|->
name|pressedControl
operator|==
name|QStyle
operator|::
name|SC_ScrollBarSubPage
operator|)
operator|&&
operator|(
operator|(
name|midButtonAbsPos
operator|&&
name|e
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|MidButton
operator|)
operator|||
operator|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ScrollBar_LeftClickAbsolutePosition
argument_list|,
operator|&
name|opt
argument_list|,
name|this
argument_list|)
operator|&&
name|e
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
operator|)
operator|)
condition|)
block|{
name|int
name|sliderLength
init|=
name|HORIZONTAL
condition|?
name|sr
operator|.
name|width
argument_list|()
else|:
name|sr
operator|.
name|height
argument_list|()
decl_stmt|;
name|setSliderPosition
argument_list|(
name|d
operator|->
name|pixelPosToRangeValue
argument_list|(
operator|(
name|HORIZONTAL
condition|?
name|e
operator|->
name|pos
argument_list|()
operator|.
name|x
argument_list|()
else|:
name|e
operator|->
name|pos
argument_list|()
operator|.
name|y
argument_list|()
operator|)
operator|-
name|sliderLength
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|pressedControl
operator|=
name|QStyle
operator|::
name|SC_ScrollBarSlider
expr_stmt|;
name|d
operator|->
name|clickOffset
operator|=
name|sliderLength
operator|/
literal|2
expr_stmt|;
block|}
specifier|const
name|int
name|initialDelay
init|=
literal|500
decl_stmt|;
comment|// default threshold
name|d
operator|->
name|activateControl
argument_list|(
name|d
operator|->
name|pressedControl
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
name|QElapsedTimer
name|time
decl_stmt|;
name|time
operator|.
name|start
argument_list|()
expr_stmt|;
name|repaint
argument_list|(
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ScrollBar
argument_list|,
operator|&
name|opt
argument_list|,
name|d
operator|->
name|pressedControl
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|.
name|elapsed
argument_list|()
operator|>=
name|initialDelay
operator|&&
name|d
operator|->
name|repeatActionTimer
operator|.
name|isActive
argument_list|()
condition|)
block|{
comment|// It took more than 500ms (the initial timer delay) to process the repaint(), we
comment|// therefore need to restart the timer in case we have a pending mouse release event;
comment|// otherwise we'll get a timer event right before the release event,
comment|// causing the repeat action to be invoked twice on a single mouse click.
comment|// 50ms is the default repeat time (see activateControl/setRepeatAction).
name|d
operator|->
name|repeatActionTimer
operator|.
name|start
argument_list|(
literal|50
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|pressedControl
operator|==
name|QStyle
operator|::
name|SC_ScrollBarSlider
condition|)
name|setSliderDown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QScrollBar
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QScrollBar
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|pressedControl
condition|)
return|return;
if|if
condition|(
name|e
operator|->
name|buttons
argument_list|()
operator|&
operator|(
name|~
name|e
operator|->
name|button
argument_list|()
operator|)
condition|)
comment|// some other button is still pressed
return|return;
name|d
operator|->
name|stopRepeatAction
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mouseMoveEvent
name|void
name|QScrollBar
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QScrollBar
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|pressedControl
condition|)
return|return;
name|QStyleOptionSlider
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|e
operator|->
name|buttons
argument_list|()
operator|&
name|Qt
operator|::
name|LeftButton
operator|||
operator|(
operator|(
name|e
operator|->
name|buttons
argument_list|()
operator|&
name|Qt
operator|::
name|MidButton
operator|)
operator|&&
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ScrollBar_MiddleClickAbsolutePosition
argument_list|,
operator|&
name|opt
argument_list|,
name|this
argument_list|)
operator|)
operator|)
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|pressedControl
operator|==
name|QStyle
operator|::
name|SC_ScrollBarSlider
condition|)
block|{
name|QPoint
name|click
init|=
name|e
operator|->
name|pos
argument_list|()
decl_stmt|;
name|int
name|newPosition
init|=
name|d
operator|->
name|pixelPosToRangeValue
argument_list|(
operator|(
name|HORIZONTAL
condition|?
name|click
operator|.
name|x
argument_list|()
else|:
name|click
operator|.
name|y
argument_list|()
operator|)
operator|-
name|d
operator|->
name|clickOffset
argument_list|)
decl_stmt|;
name|int
name|m
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MaximumDragDistance
argument_list|,
operator|&
name|opt
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|>=
literal|0
condition|)
block|{
name|QRect
name|r
init|=
name|rect
argument_list|()
decl_stmt|;
name|r
operator|.
name|adjust
argument_list|(
operator|-
name|m
argument_list|,
operator|-
name|m
argument_list|,
name|m
argument_list|,
name|m
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|contains
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
name|newPosition
operator|=
name|d
operator|->
name|snapBackPosition
expr_stmt|;
block|}
name|setSliderPosition
argument_list|(
name|newPosition
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ScrollBar_ScrollWhenPointerLeavesControl
argument_list|,
operator|&
name|opt
argument_list|,
name|this
argument_list|)
condition|)
block|{
if|if
condition|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ScrollBar_RollBetweenButtons
argument_list|,
operator|&
name|opt
argument_list|,
name|this
argument_list|)
operator|&&
name|d
operator|->
name|pressedControl
operator|&
operator|(
name|QStyle
operator|::
name|SC_ScrollBarAddLine
operator||
name|QStyle
operator|::
name|SC_ScrollBarSubLine
operator|)
condition|)
block|{
name|QStyle
operator|::
name|SubControl
name|newSc
init|=
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_ScrollBar
argument_list|,
operator|&
name|opt
argument_list|,
name|e
operator|->
name|pos
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|newSc
operator|==
name|d
operator|->
name|pressedControl
operator|&&
operator|!
name|d
operator|->
name|pointerOutsidePressedControl
condition|)
return|return;
comment|// nothing to do
if|if
condition|(
name|newSc
operator|&
operator|(
name|QStyle
operator|::
name|SC_ScrollBarAddLine
operator||
name|QStyle
operator|::
name|SC_ScrollBarSubLine
operator|)
condition|)
block|{
name|d
operator|->
name|pointerOutsidePressedControl
operator|=
literal|false
expr_stmt|;
name|QRect
name|scRect
init|=
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ScrollBar
argument_list|,
operator|&
name|opt
argument_list|,
name|newSc
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|scRect
operator||=
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ScrollBar
argument_list|,
operator|&
name|opt
argument_list|,
name|d
operator|->
name|pressedControl
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|pressedControl
operator|=
name|newSc
expr_stmt|;
name|d
operator|->
name|activateControl
argument_list|(
name|d
operator|->
name|pressedControl
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|update
argument_list|(
name|scRect
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// stop scrolling when the mouse pointer leaves a control
comment|// similar to push buttons
name|QRect
name|pr
init|=
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ScrollBar
argument_list|,
operator|&
name|opt
argument_list|,
name|d
operator|->
name|pressedControl
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|.
name|contains
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
operator|==
name|d
operator|->
name|pointerOutsidePressedControl
condition|)
block|{
if|if
condition|(
operator|(
name|d
operator|->
name|pointerOutsidePressedControl
operator|=
operator|!
name|d
operator|->
name|pointerOutsidePressedControl
operator|)
condition|)
block|{
name|d
operator|->
name|pointerOutsidePressedControl
operator|=
literal|true
expr_stmt|;
name|setRepeatAction
argument_list|(
name|SliderNoAction
argument_list|)
expr_stmt|;
name|repaint
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|activateControl
argument_list|(
name|d
operator|->
name|pressedControl
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|pixelPosToRangeValue
name|int
name|QScrollBarPrivate
operator|::
name|pixelPosToRangeValue
parameter_list|(
name|int
name|pos
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QScrollBar
argument_list|)
expr_stmt|;
name|QStyleOptionSlider
name|opt
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|QRect
name|gr
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ScrollBar
argument_list|,
operator|&
name|opt
argument_list|,
name|QStyle
operator|::
name|SC_ScrollBarGroove
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|QRect
name|sr
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ScrollBar
argument_list|,
operator|&
name|opt
argument_list|,
name|QStyle
operator|::
name|SC_ScrollBarSlider
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|int
name|sliderMin
decl_stmt|,
name|sliderMax
decl_stmt|,
name|sliderLength
decl_stmt|;
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|sliderLength
operator|=
name|sr
operator|.
name|width
argument_list|()
expr_stmt|;
name|sliderMin
operator|=
name|gr
operator|.
name|x
argument_list|()
expr_stmt|;
name|sliderMax
operator|=
name|gr
operator|.
name|right
argument_list|()
operator|-
name|sliderLength
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|opt
operator|.
name|upsideDown
operator|=
operator|!
name|opt
operator|.
name|upsideDown
expr_stmt|;
block|}
else|else
block|{
name|sliderLength
operator|=
name|sr
operator|.
name|height
argument_list|()
expr_stmt|;
name|sliderMin
operator|=
name|gr
operator|.
name|y
argument_list|()
expr_stmt|;
name|sliderMax
operator|=
name|gr
operator|.
name|bottom
argument_list|()
operator|-
name|sliderLength
operator|+
literal|1
expr_stmt|;
block|}
return|return
name|QStyle
operator|::
name|sliderValueFromPosition
argument_list|(
name|minimum
argument_list|,
name|maximum
argument_list|,
name|pos
operator|-
name|sliderMin
argument_list|,
name|sliderMax
operator|-
name|sliderMin
argument_list|,
name|opt
operator|.
name|upsideDown
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|hideEvent
name|void
name|QScrollBar
operator|::
name|hideEvent
parameter_list|(
name|QHideEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QScrollBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pressedControl
condition|)
block|{
name|d
operator|->
name|pressedControl
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|setRepeatAction
argument_list|(
name|SliderNoAction
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \fn bool QScrollBar::draggingSlider()      Use isSliderDown() instead. */
end_comment
begin_comment
comment|/*! \internal     Returns the style option for scroll bar. */
end_comment
begin_function
DECL|function|qt_qscrollbarStyleOption
name|Q_GUI_EXPORT
name|QStyleOptionSlider
name|qt_qscrollbarStyleOption
parameter_list|(
name|QScrollBar
modifier|*
name|scrollbar
parameter_list|)
block|{
name|QStyleOptionSlider
name|opt
decl_stmt|;
name|scrollbar
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
return|return
name|opt
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SCROLLBAR
end_comment
end_unit
