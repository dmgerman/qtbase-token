begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the S60 port of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qmenu.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qstyle.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qwidgetaction.h"
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qmenu_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qmenubar_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qt_s60_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlibrary.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_S60
end_ifdef
begin_include
include|#
directive|include
file|<eikmenub.h>
end_include
begin_include
include|#
directive|include
file|<eikmenup.h>
end_include
begin_include
include|#
directive|include
file|<eikaufty.h>
end_include
begin_include
include|#
directive|include
file|<eikbtgpc.h>
end_include
begin_include
include|#
directive|include
file|<avkon.rsg>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_MENUBAR
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
end_if
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_typedef
DECL|typedef|MenuBarHash
typedef|typedef
name|QMultiHash
argument_list|<
name|QWidget
modifier|*
argument_list|,
name|QMenuBarPrivate
modifier|*
argument_list|>
name|MenuBarHash
typedef|;
end_typedef
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|MenuBarHash
argument_list|,
argument|menubars
argument_list|)
end_macro
begin_struct
DECL|struct|SymbianMenuItem
struct|struct
name|SymbianMenuItem
block|{
DECL|member|id
name|int
name|id
decl_stmt|;
DECL|member|menuItemData
name|CEikMenuPaneItem
operator|::
name|SData
name|menuItemData
decl_stmt|;
DECL|member|children
name|QList
argument_list|<
name|SymbianMenuItem
modifier|*
argument_list|>
name|children
decl_stmt|;
DECL|member|action
name|QAction
modifier|*
name|action
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_GLOBAL_STATIC_WITH_ARGS
argument_list|(
argument|QAction
argument_list|,
argument|contextAction
argument_list|,
argument|(
literal|0
argument|)
argument_list|)
end_macro
begin_decl_stmt
DECL|variable|symbianMenus
specifier|static
name|QList
argument_list|<
name|SymbianMenuItem
modifier|*
argument_list|>
name|symbianMenus
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|nativeMenuBars
specifier|static
name|QList
argument_list|<
name|QMenuBar
modifier|*
argument_list|>
name|nativeMenuBars
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_symbian_menu_static_cmd_id
specifier|static
name|uint
name|qt_symbian_menu_static_cmd_id
init|=
name|QT_SYMBIAN_FIRST_MENU_ITEM
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|widgetWithContextMenu
specifier|static
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|widgetWithContextMenu
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|contextMenuActionList
specifier|static
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|contextMenuActionList
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|actionMenu
specifier|static
name|QWidget
modifier|*
name|actionMenu
init|=
name|NULL
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|contexMenuCommand
specifier|static
name|int
name|contexMenuCommand
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|menuExists
name|bool
name|menuExists
parameter_list|()
block|{
name|QWidget
modifier|*
name|w
init|=
name|qApp
operator|->
name|activeWindow
argument_list|()
decl_stmt|;
name|QMenuBarPrivate
modifier|*
name|mb
init|=
name|menubars
argument_list|()
operator|->
name|value
argument_list|(
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|mb
operator|)
operator|&&
operator|!
name|menubars
argument_list|()
operator|->
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|hasContextMenu
specifier|static
name|bool
name|hasContextMenu
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
operator|!
name|widget
condition|)
return|return
literal|false
return|;
specifier|const
name|Qt
operator|::
name|ContextMenuPolicy
name|policy
init|=
name|widget
operator|->
name|contextMenuPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|policy
operator|!=
name|Qt
operator|::
name|NoContextMenu
operator|&&
name|policy
operator|!=
name|Qt
operator|::
name|PreventContextMenu
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|qt_symbian_find_menu
specifier|static
name|SymbianMenuItem
modifier|*
name|qt_symbian_find_menu
parameter_list|(
name|int
name|id
parameter_list|,
specifier|const
name|QList
argument_list|<
name|SymbianMenuItem
modifier|*
argument_list|>
modifier|&
name|parent
parameter_list|)
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|index
operator|<
name|parent
operator|.
name|count
argument_list|()
condition|)
block|{
name|SymbianMenuItem
modifier|*
name|temp
init|=
name|parent
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|temp
operator|->
name|menuItemData
operator|.
name|iCascadeId
operator|==
name|id
condition|)
return|return
name|temp
return|;
elseif|else
if|if
condition|(
name|temp
operator|->
name|menuItemData
operator|.
name|iCascadeId
operator|!=
literal|0
condition|)
block|{
name|SymbianMenuItem
modifier|*
name|result
init|=
name|qt_symbian_find_menu
argument_list|(
name|id
argument_list|,
name|temp
operator|->
name|children
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
return|return
name|result
return|;
block|}
name|index
operator|++
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qt_symbian_find_menu_item
specifier|static
name|SymbianMenuItem
modifier|*
name|qt_symbian_find_menu_item
parameter_list|(
name|int
name|id
parameter_list|,
specifier|const
name|QList
argument_list|<
name|SymbianMenuItem
modifier|*
argument_list|>
modifier|&
name|parent
parameter_list|)
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|index
operator|<
name|parent
operator|.
name|count
argument_list|()
condition|)
block|{
name|SymbianMenuItem
modifier|*
name|temp
init|=
name|parent
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|temp
operator|->
name|menuItemData
operator|.
name|iCascadeId
operator|!=
literal|0
condition|)
block|{
name|SymbianMenuItem
modifier|*
name|result
init|=
name|qt_symbian_find_menu_item
argument_list|(
name|id
argument_list|,
name|temp
operator|->
name|children
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
return|return
name|result
return|;
block|}
elseif|else
if|if
condition|(
name|temp
operator|->
name|menuItemData
operator|.
name|iCommandId
operator|==
name|id
condition|)
return|return
name|temp
return|;
name|index
operator|++
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qt_symbian_insert_action
specifier|static
name|void
name|qt_symbian_insert_action
parameter_list|(
name|QSymbianMenuAction
modifier|*
name|action
parameter_list|,
name|QList
argument_list|<
name|SymbianMenuItem
modifier|*
argument_list|>
modifier|*
name|parent
parameter_list|)
block|{
if|if
condition|(
name|action
operator|->
name|action
operator|->
name|isVisible
argument_list|()
condition|)
block|{
if|if
condition|(
name|action
operator|->
name|action
operator|->
name|isSeparator
argument_list|()
condition|)
return|return;
name|Q_ASSERT_X
argument_list|(
name|action
operator|->
name|command
operator|<=
name|QT_SYMBIAN_LAST_MENU_ITEM
argument_list|,
literal|"qt_symbian_insert_action"
argument_list|,
literal|"Too many menu actions"
argument_list|)
expr_stmt|;
specifier|const
name|int
name|underlineShortCut
init|=
name|QApplication
operator|::
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_UnderlineShortcut
argument_list|)
decl_stmt|;
name|QString
name|actionText
decl_stmt|;
if|if
condition|(
name|underlineShortCut
condition|)
name|actionText
operator|=
name|action
operator|->
name|action
operator|->
name|text
argument_list|()
operator|.
name|left
argument_list|(
name|CEikMenuPaneItem
operator|::
name|SData
operator|::
name|ENominalTextLength
argument_list|)
expr_stmt|;
else|else
name|actionText
operator|=
name|action
operator|->
name|action
operator|->
name|iconText
argument_list|()
operator|.
name|left
argument_list|(
name|CEikMenuPaneItem
operator|::
name|SData
operator|::
name|ENominalTextLength
argument_list|)
expr_stmt|;
name|TPtrC
name|menuItemText
init|=
name|qt_QString2TPtrC
argument_list|(
name|actionText
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|->
name|action
operator|->
name|menu
argument_list|()
condition|)
block|{
name|SymbianMenuItem
modifier|*
name|menuItem
init|=
operator|new
name|SymbianMenuItem
argument_list|()
decl_stmt|;
name|menuItem
operator|->
name|menuItemData
operator|.
name|iCascadeId
operator|=
name|action
operator|->
name|command
expr_stmt|;
name|menuItem
operator|->
name|menuItemData
operator|.
name|iCommandId
operator|=
name|action
operator|->
name|command
expr_stmt|;
name|menuItem
operator|->
name|menuItemData
operator|.
name|iFlags
operator|=
literal|0
expr_stmt|;
name|menuItem
operator|->
name|menuItemData
operator|.
name|iText
operator|=
name|menuItemText
expr_stmt|;
name|menuItem
operator|->
name|action
operator|=
name|action
operator|->
name|action
expr_stmt|;
if|if
condition|(
name|action
operator|->
name|action
operator|->
name|menu
argument_list|()
operator|->
name|actions
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
operator|!
name|action
operator|->
name|action
operator|->
name|isEnabled
argument_list|()
condition|)
name|menuItem
operator|->
name|menuItemData
operator|.
name|iFlags
operator||=
name|EEikMenuItemDimmed
expr_stmt|;
name|parent
operator|->
name|append
argument_list|(
name|menuItem
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|->
name|action
operator|->
name|menu
argument_list|()
operator|->
name|actions
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|c2
init|=
literal|0
init|;
name|c2
operator|<
name|action
operator|->
name|action
operator|->
name|menu
argument_list|()
operator|->
name|actions
argument_list|()
operator|.
name|size
argument_list|()
condition|;
operator|++
name|c2
control|)
block|{
name|QScopedPointer
argument_list|<
name|QSymbianMenuAction
argument_list|>
name|symbianAction2
argument_list|(
operator|new
name|QSymbianMenuAction
argument_list|)
decl_stmt|;
name|symbianAction2
operator|->
name|action
operator|=
name|action
operator|->
name|action
operator|->
name|menu
argument_list|()
operator|->
name|actions
argument_list|()
operator|.
name|at
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|QMenu
modifier|*
name|menu
init|=
name|symbianAction2
operator|->
name|action
operator|->
name|menu
argument_list|()
decl_stmt|;
name|symbianAction2
operator|->
name|command
operator|=
name|qt_symbian_menu_static_cmd_id
operator|++
expr_stmt|;
name|qt_symbian_insert_action
argument_list|(
name|symbianAction2
operator|.
name|data
argument_list|()
argument_list|,
operator|&
operator|(
name|menuItem
operator|->
name|children
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|SymbianMenuItem
modifier|*
name|menuItem
init|=
operator|new
name|SymbianMenuItem
argument_list|()
decl_stmt|;
name|menuItem
operator|->
name|menuItemData
operator|.
name|iCascadeId
operator|=
literal|0
expr_stmt|;
name|menuItem
operator|->
name|menuItemData
operator|.
name|iCommandId
operator|=
name|action
operator|->
name|command
expr_stmt|;
name|menuItem
operator|->
name|menuItemData
operator|.
name|iFlags
operator|=
literal|0
expr_stmt|;
name|menuItem
operator|->
name|menuItemData
operator|.
name|iText
operator|=
name|menuItemText
expr_stmt|;
name|menuItem
operator|->
name|action
operator|=
name|action
operator|->
name|action
expr_stmt|;
if|if
condition|(
operator|!
name|action
operator|->
name|action
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
name|menuItem
operator|->
name|menuItemData
operator|.
name|iFlags
operator|+=
name|EEikMenuItemDimmed
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|->
name|action
operator|->
name|isCheckable
argument_list|()
condition|)
block|{
if|if
condition|(
name|action
operator|->
name|action
operator|->
name|isChecked
argument_list|()
condition|)
name|menuItem
operator|->
name|menuItemData
operator|.
name|iFlags
operator|+=
name|EEikMenuItemCheckBox
operator||
name|EEikMenuItemSymbolOn
expr_stmt|;
else|else
name|menuItem
operator|->
name|menuItemData
operator|.
name|iFlags
operator|+=
name|EEikMenuItemCheckBox
expr_stmt|;
block|}
name|parent
operator|->
name|append
argument_list|(
name|menuItem
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|deleteAll
name|void
name|deleteAll
parameter_list|(
name|QList
argument_list|<
name|SymbianMenuItem
modifier|*
argument_list|>
modifier|*
name|items
parameter_list|)
block|{
while|while
condition|(
operator|!
name|items
operator|->
name|isEmpty
argument_list|()
condition|)
block|{
name|SymbianMenuItem
modifier|*
name|temp
init|=
name|items
operator|->
name|takeFirst
argument_list|()
decl_stmt|;
name|deleteAll
argument_list|(
operator|&
name|temp
operator|->
name|children
argument_list|)
expr_stmt|;
operator|delete
name|temp
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rebuildMenu
specifier|static
name|void
name|rebuildMenu
parameter_list|()
block|{
name|widgetWithContextMenu
operator|=
literal|0
expr_stmt|;
name|QMenuBarPrivate
modifier|*
name|mb
init|=
literal|0
decl_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|qApp
operator|->
name|activeWindow
argument_list|()
decl_stmt|;
name|QWidget
modifier|*
name|focusWidget
init|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|focusWidget
condition|)
block|{
if|if
condition|(
name|hasContextMenu
argument_list|(
name|focusWidget
argument_list|)
condition|)
name|widgetWithContextMenu
operator|=
name|focusWidget
expr_stmt|;
block|}
if|if
condition|(
name|w
condition|)
block|{
name|mb
operator|=
name|menubars
argument_list|()
operator|->
name|value
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|qt_symbian_menu_static_cmd_id
operator|=
name|QT_SYMBIAN_FIRST_MENU_ITEM
expr_stmt|;
name|deleteAll
argument_list|(
operator|&
name|symbianMenus
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mb
condition|)
return|return;
name|mb
operator|->
name|symbian_menubar
operator|->
name|rebuild
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_S60
end_ifdef
begin_function
DECL|function|qt_symbian_next_menu_from_action
name|void
name|qt_symbian_next_menu_from_action
parameter_list|(
name|QWidget
modifier|*
name|actionContainer
parameter_list|)
block|{
name|actionMenu
operator|=
name|actionContainer
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_symbian_show_toplevel
name|void
name|qt_symbian_show_toplevel
parameter_list|(
name|CEikMenuPane
modifier|*
name|menuPane
parameter_list|)
block|{
if|if
condition|(
name|actionMenu
condition|)
block|{
name|QMenuBarPrivate
modifier|*
name|mb
init|=
literal|0
decl_stmt|;
name|mb
operator|=
name|menubars
argument_list|()
operator|->
name|value
argument_list|(
name|actionMenu
argument_list|)
expr_stmt|;
name|qt_symbian_menu_static_cmd_id
operator|=
name|QT_SYMBIAN_FIRST_MENU_ITEM
expr_stmt|;
name|deleteAll
argument_list|(
operator|&
name|symbianMenus
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|mb
argument_list|)
expr_stmt|;
name|mb
operator|->
name|symbian_menubar
operator|->
name|rebuild
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|symbianMenus
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|QT_TRAP_THROWING
argument_list|(
name|menuPane
operator|->
name|AddMenuItemL
argument_list|(
name|symbianMenus
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|menuItemData
argument_list|)
argument_list|)
expr_stmt|;
name|actionMenu
operator|=
name|NULL
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|menuExists
argument_list|()
condition|)
return|return;
name|rebuildMenu
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|symbianMenus
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|QT_TRAP_THROWING
argument_list|(
name|menuPane
operator|->
name|AddMenuItemL
argument_list|(
name|symbianMenus
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|menuItemData
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_symbian_show_submenu
name|void
name|qt_symbian_show_submenu
parameter_list|(
name|CEikMenuPane
modifier|*
name|menuPane
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|SymbianMenuItem
modifier|*
name|menu
init|=
name|qt_symbian_find_menu
argument_list|(
name|id
argument_list|,
name|symbianMenus
argument_list|)
decl_stmt|;
if|if
condition|(
name|menu
condition|)
block|{
comment|// Normally first AddMenuItemL call for menuPane will create the item array.
comment|// However if we don't have any items, we still need the item array. Otherwise
comment|// menupane will crash. That's why we create item array here manually, and
comment|// AddMenuItemL will then use the existing array.
name|CEikMenuPane
operator|::
name|CItemArray
modifier|*
name|itemArray
init|=
operator|new
name|CEikMenuPane
operator|::
name|CItemArray
decl_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|itemArray
argument_list|)
expr_stmt|;
name|menuPane
operator|->
name|SetItemArray
argument_list|(
name|itemArray
argument_list|)
expr_stmt|;
name|menuPane
operator|->
name|SetItemArrayOwnedExternally
argument_list|(
name|EFalse
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|menu
operator|->
name|children
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|QT_TRAP_THROWING
argument_list|(
name|menuPane
operator|->
name|AddMenuItemL
argument_list|(
name|menu
operator|->
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|menuItemData
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_WS_S60
end_comment
begin_function
DECL|function|symbianCommands
name|int
name|QMenuBarPrivate
operator|::
name|symbianCommands
parameter_list|(
name|int
name|command
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|command
operator|==
name|contexMenuCommand
operator|&&
operator|!
name|widgetWithContextMenu
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QContextMenuEvent
modifier|*
name|event
init|=
operator|new
name|QContextMenuEvent
argument_list|(
name|QContextMenuEvent
operator|::
name|Keyboard
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|widgetWithContextMenu
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|1
expr_stmt|;
block|}
name|int
name|size
init|=
name|nativeMenuBars
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nativeMenuBars
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|SymbianMenuItem
modifier|*
name|menu
init|=
name|qt_symbian_find_menu_item
argument_list|(
name|command
argument_list|,
name|symbianMenus
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|menu
condition|)
continue|continue;
emit|emit
name|nativeMenuBars
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|triggered
argument_list|(
name|menu
operator|->
name|action
argument_list|)
emit|;
name|menu
operator|->
name|action
operator|->
name|activate
argument_list|(
name|QAction
operator|::
name|Trigger
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|symbianCreateMenuBar
name|void
name|QMenuBarPrivate
operator|::
name|symbianCreateMenuBar
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
condition|)
block|{
if|if
condition|(
name|parent
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|menubars
argument_list|()
operator|->
name|insert
argument_list|(
name|q
operator|->
name|window
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|symbian_menubar
operator|=
operator|new
name|QSymbianMenuBarPrivate
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|nativeMenuBars
operator|.
name|append
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|menubars
argument_list|()
operator|->
name|insert
argument_list|(
name|q
operator|->
name|parentWidget
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|symbian_menubar
operator|=
operator|new
name|QSymbianMenuBarPrivate
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|nativeMenuBars
operator|.
name|append
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|symbianDestroyMenuBar
name|void
name|QMenuBarPrivate
operator|::
name|symbianDestroyMenuBar
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|nativeMenuBars
operator|.
name|indexOf
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|nativeMenuBars
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|menubars
argument_list|()
operator|->
name|remove
argument_list|(
name|q
operator|->
name|window
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|menubars
argument_list|()
operator|->
name|remove
argument_list|(
name|q
operator|->
name|parentWidget
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|rebuildMenu
argument_list|()
expr_stmt|;
if|if
condition|(
name|symbian_menubar
condition|)
operator|delete
name|symbian_menubar
expr_stmt|;
name|symbian_menubar
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reparentMenuBar
name|void
name|QMenuBarPrivate
operator|::
name|reparentMenuBar
parameter_list|(
name|QWidget
modifier|*
name|oldParent
parameter_list|,
name|QWidget
modifier|*
name|newParent
parameter_list|)
block|{
if|if
condition|(
name|menubars
argument_list|()
operator|->
name|contains
argument_list|(
name|oldParent
argument_list|)
condition|)
block|{
name|QMenuBarPrivate
modifier|*
name|object
init|=
name|menubars
argument_list|()
operator|->
name|take
argument_list|(
name|oldParent
argument_list|)
decl_stmt|;
name|menubars
argument_list|()
operator|->
name|insert
argument_list|(
name|newParent
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|QSymbianMenuBarPrivate
name|QMenuBarPrivate
operator|::
name|QSymbianMenuBarPrivate
operator|::
name|QSymbianMenuBarPrivate
parameter_list|(
name|QMenuBarPrivate
modifier|*
name|menubar
parameter_list|)
block|{
name|d
operator|=
name|menubar
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QSymbianMenuBarPrivate
name|QMenuBarPrivate
operator|::
name|QSymbianMenuBarPrivate
operator|::
name|~
name|QSymbianMenuBarPrivate
parameter_list|()
block|{
name|qt_symbian_menu_static_cmd_id
operator|=
name|QT_SYMBIAN_FIRST_MENU_ITEM
expr_stmt|;
name|deleteAll
argument_list|(
operator|&
name|symbianMenus
argument_list|)
expr_stmt|;
name|symbianMenus
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|=
literal|0
expr_stmt|;
name|rebuild
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_constructor
DECL|function|QSymbianMenuPrivate
name|QMenuPrivate
operator|::
name|QSymbianMenuPrivate
operator|::
name|QSymbianMenuPrivate
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~QSymbianMenuPrivate
name|QMenuPrivate
operator|::
name|QSymbianMenuPrivate
operator|::
name|~
name|QSymbianMenuPrivate
parameter_list|()
block|{  }
end_destructor
begin_function
DECL|function|addAction
name|void
name|QMenuPrivate
operator|::
name|QSymbianMenuPrivate
operator|::
name|addAction
parameter_list|(
name|QAction
modifier|*
name|a
parameter_list|,
name|QSymbianMenuAction
modifier|*
name|before
parameter_list|)
block|{
name|QSymbianMenuAction
modifier|*
name|action
init|=
operator|new
name|QSymbianMenuAction
decl_stmt|;
name|action
operator|->
name|action
operator|=
name|a
expr_stmt|;
name|action
operator|->
name|command
operator|=
name|qt_symbian_menu_static_cmd_id
operator|++
expr_stmt|;
name|addAction
argument_list|(
name|action
argument_list|,
name|before
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addAction
name|void
name|QMenuPrivate
operator|::
name|QSymbianMenuPrivate
operator|::
name|addAction
parameter_list|(
name|QSymbianMenuAction
modifier|*
name|action
parameter_list|,
name|QSymbianMenuAction
modifier|*
name|before
parameter_list|)
block|{
if|if
condition|(
operator|!
name|action
condition|)
return|return;
name|int
name|before_index
init|=
name|actionItems
operator|.
name|indexOf
argument_list|(
name|before
argument_list|)
decl_stmt|;
if|if
condition|(
name|before_index
operator|<
literal|0
condition|)
block|{
name|before
operator|=
literal|0
expr_stmt|;
name|before_index
operator|=
name|actionItems
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|actionItems
operator|.
name|insert
argument_list|(
name|before_index
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|syncAction
name|void
name|QMenuPrivate
operator|::
name|QSymbianMenuPrivate
operator|::
name|syncAction
parameter_list|(
name|QSymbianMenuAction
modifier|*
parameter_list|)
block|{
name|rebuild
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeAction
name|void
name|QMenuPrivate
operator|::
name|QSymbianMenuPrivate
operator|::
name|removeAction
parameter_list|(
name|QSymbianMenuAction
modifier|*
name|action
parameter_list|)
block|{
name|actionItems
operator|.
name|removeAll
argument_list|(
name|action
argument_list|)
expr_stmt|;
operator|delete
name|action
expr_stmt|;
name|action
operator|=
literal|0
expr_stmt|;
name|rebuild
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rebuild
name|void
name|QMenuPrivate
operator|::
name|QSymbianMenuPrivate
operator|::
name|rebuild
parameter_list|(
name|bool
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|addAction
name|void
name|QMenuBarPrivate
operator|::
name|QSymbianMenuBarPrivate
operator|::
name|addAction
parameter_list|(
name|QAction
modifier|*
name|a
parameter_list|,
name|QAction
modifier|*
name|before
parameter_list|)
block|{
name|QSymbianMenuAction
modifier|*
name|action
init|=
operator|new
name|QSymbianMenuAction
decl_stmt|;
name|action
operator|->
name|action
operator|=
name|a
expr_stmt|;
name|action
operator|->
name|command
operator|=
name|qt_symbian_menu_static_cmd_id
operator|++
expr_stmt|;
name|addAction
argument_list|(
name|action
argument_list|,
name|findAction
argument_list|(
name|before
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addAction
name|void
name|QMenuBarPrivate
operator|::
name|QSymbianMenuBarPrivate
operator|::
name|addAction
parameter_list|(
name|QSymbianMenuAction
modifier|*
name|action
parameter_list|,
name|QSymbianMenuAction
modifier|*
name|before
parameter_list|)
block|{
if|if
condition|(
operator|!
name|action
condition|)
return|return;
name|int
name|before_index
init|=
name|actionItems
operator|.
name|indexOf
argument_list|(
name|before
argument_list|)
decl_stmt|;
if|if
condition|(
name|before_index
operator|<
literal|0
condition|)
block|{
name|before
operator|=
literal|0
expr_stmt|;
name|before_index
operator|=
name|actionItems
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|actionItems
operator|.
name|insert
argument_list|(
name|before_index
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|syncAction
name|void
name|QMenuBarPrivate
operator|::
name|QSymbianMenuBarPrivate
operator|::
name|syncAction
parameter_list|(
name|QSymbianMenuAction
modifier|*
parameter_list|)
block|{
name|rebuild
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeAction
name|void
name|QMenuBarPrivate
operator|::
name|QSymbianMenuBarPrivate
operator|::
name|removeAction
parameter_list|(
name|QSymbianMenuAction
modifier|*
name|action
parameter_list|)
block|{
name|actionItems
operator|.
name|removeAll
argument_list|(
name|action
argument_list|)
expr_stmt|;
operator|delete
name|action
expr_stmt|;
name|rebuild
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertNativeMenuItems
name|void
name|QMenuBarPrivate
operator|::
name|QSymbianMenuBarPrivate
operator|::
name|insertNativeMenuItems
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
modifier|&
name|actions
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QScopedPointer
argument_list|<
name|QSymbianMenuAction
argument_list|>
name|symbianActionTopLevel
argument_list|(
operator|new
name|QSymbianMenuAction
argument_list|)
decl_stmt|;
name|symbianActionTopLevel
operator|->
name|action
operator|=
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|symbianActionTopLevel
operator|->
name|parent
operator|=
literal|0
expr_stmt|;
name|symbianActionTopLevel
operator|->
name|command
operator|=
name|qt_symbian_menu_static_cmd_id
operator|++
expr_stmt|;
name|qt_symbian_insert_action
argument_list|(
name|symbianActionTopLevel
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|symbianMenus
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rebuild
name|void
name|QMenuBarPrivate
operator|::
name|QSymbianMenuBarPrivate
operator|::
name|rebuild
parameter_list|()
block|{
name|contexMenuCommand
operator|=
literal|0
expr_stmt|;
name|qt_symbian_menu_static_cmd_id
operator|=
name|QT_SYMBIAN_FIRST_MENU_ITEM
expr_stmt|;
name|deleteAll
argument_list|(
operator|&
name|symbianMenus
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
condition|)
name|insertNativeMenuItems
argument_list|(
name|d
operator|->
name|actions
argument_list|)
expr_stmt|;
name|contextMenuActionList
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|widgetWithContextMenu
condition|)
block|{
name|contexMenuCommand
operator|=
name|qt_symbian_menu_static_cmd_id
expr_stmt|;
comment|// Increased inside insertNativeMenuItems
name|contextAction
argument_list|()
operator|->
name|setText
argument_list|(
name|QMenuBar
operator|::
name|tr
argument_list|(
literal|"Actions"
argument_list|)
argument_list|)
expr_stmt|;
name|contextMenuActionList
operator|.
name|append
argument_list|(
name|contextAction
argument_list|()
argument_list|)
expr_stmt|;
name|insertNativeMenuItems
argument_list|(
name|contextMenuActionList
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_MENUBAR
end_comment
end_unit
