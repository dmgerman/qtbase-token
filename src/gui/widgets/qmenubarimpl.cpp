begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qmenubarimpl_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
end_ifndef
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qmenu.h"
end_include
begin_include
include|#
directive|include
file|"qmenubar.h"
end_include
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
DECL|function|~QMenuBarImpl
name|QMenuBarImpl
operator|::
name|~
name|QMenuBarImpl
operator|(
operator|)
block|{
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|macDestroyMenuBar
argument_list|()
block|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_WS_WINCE
if|if
condition|(
name|qt_wince_is_mobile
argument_list|()
condition|)
name|wceDestroyMenuBar
argument_list|()
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_WS_S60
name|symbianDestroyMenuBar
argument_list|()
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_macro
unit|}  void
DECL|function|init
name|QMenuBarImpl
end_macro
begin_expr_stmt
DECL|function|init
operator|::
name|init
operator|(
name|QMenuBar
operator|*
name|_menuBar
operator|)
block|{
name|nativeMenuBar
operator|=
operator|-
literal|1
block|;
name|menuBar
operator|=
name|_menuBar
block|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
name|adapter
operator|=
literal|0
block|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|macCreateMenuBar
argument_list|(
name|menuBar
operator|->
name|parentWidget
argument_list|()
argument_list|)
block|;
if|if
condition|(
name|adapter
condition|)
name|menuBar
operator|->
name|hide
argument_list|()
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WINCE
end_ifdef
begin_if
if|if
condition|(
name|qt_wince_is_mobile
argument_list|()
condition|)
block|{
name|wceCreateMenuBar
argument_list|(
name|menuBar
operator|->
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|adapter
condition|)
name|menuBar
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QApplication
operator|::
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_DontUseNativeMenuBar
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_if
begin_endif
endif|#
directive|endif
end_endif
begin_macro
unit|}  bool
DECL|function|allowSetVisible
name|QMenuBarImpl
end_macro
begin_expr_stmt
DECL|function|allowSetVisible
operator|::
name|allowSetVisible
operator|(
operator|)
specifier|const
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
comment|// FIXME: Port this to a setVisible() method
comment|/*     if (isNativeMenuBar()) {         if (!visible)             QWidget::setVisible(false);         return;     }     */
return|return
operator|!
name|isNativeMenuBar
argument_list|()
return|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_return
return|return
literal|true
return|;
end_return
begin_macro
unit|}  void
DECL|function|actionEvent
name|QMenuBarImpl
end_macro
begin_expr_stmt
DECL|function|actionEvent
operator|::
name|actionEvent
operator|(
name|QActionEvent
operator|*
name|e
operator|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
if|if
condition|(
name|adapter
condition|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ActionAdded
condition|)
name|adapter
operator|->
name|addAction
argument_list|(
name|e
operator|->
name|action
argument_list|()
argument_list|,
name|e
operator|->
name|before
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ActionRemoved
condition|)
name|adapter
operator|->
name|removeAction
argument_list|(
name|e
operator|->
name|action
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ActionChanged
condition|)
name|adapter
operator|->
name|syncAction
argument_list|(
name|e
operator|->
name|action
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|e
argument_list|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_macro
unit|}  void
DECL|function|handleReparent
name|QMenuBarImpl
end_macro
begin_expr_stmt
DECL|function|handleReparent
operator|::
name|handleReparent
operator|(
name|QWidget
operator|*
name|oldParent
operator|,
name|QWidget
operator|*
name|newParent
operator|,
name|QWidget
operator|*
name|oldWindow
operator|,
name|QWidget
operator|*
name|newWindow
operator|)
block|{
ifdef|#
directive|ifdef
name|Q_WS_X11
name|Q_UNUSED
argument_list|(
argument|oldParent
argument_list|)
name|Q_UNUSED
argument_list|(
argument|newParent
argument_list|)
name|Q_UNUSED
argument_list|(
argument|oldWindow
argument_list|)
name|Q_UNUSED
argument_list|(
argument|newWindow
argument_list|)
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_WS_MAC
if|if
condition|(
name|isNativeMenuBar
argument_list|()
operator|&&
operator|!
name|macWidgetHasNativeMenubar
argument_list|(
name|newParent
argument_list|)
condition|)
block|{
comment|// If the new parent got a native menubar from before, keep that
comment|// menubar rather than replace it with this one (because a parents
comment|// menubar has precedence over children menubars).
name|macDestroyMenuBar
argument_list|()
expr_stmt|;
name|macCreateMenuBar
argument_list|(
name|newParent
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WINCE
end_ifdef
begin_if
if|if
condition|(
name|qt_wince_is_mobile
argument_list|()
operator|&&
name|nativeMenuBarAdapter
argument_list|()
condition|)
name|adapter
operator|->
name|rebuild
argument_list|()
expr_stmt|;
end_if
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_S60
end_ifdef
begin_comment
comment|// Construct d->impl->nativeMenuBarAdapter() when this code path is entered first time
end_comment
begin_comment
comment|// and when newParent != NULL
end_comment
begin_if
if|if
condition|(
operator|!
name|adapter
condition|)
name|symbianCreateMenuBar
argument_list|(
name|newParent
argument_list|)
expr_stmt|;
end_if
begin_comment
comment|// Reparent and rebuild menubar when parent is changed
end_comment
begin_if
if|if
condition|(
name|adapter
condition|)
block|{
if|if
condition|(
name|oldParent
operator|!=
name|newParent
condition|)
name|reparentMenuBar
argument_list|(
name|oldParent
argument_list|,
name|newParent
argument_list|)
expr_stmt|;
name|menuBar
operator|->
name|hide
argument_list|()
expr_stmt|;
name|adapter
operator|->
name|rebuild
argument_list|()
expr_stmt|;
block|}
end_if
begin_ifdef
ifdef|#
directive|ifdef
name|QT_SOFTKEYS_ENABLED
end_ifdef
begin_comment
comment|// Constuct menuBarAction when this code path is entered first time
end_comment
begin_if
if|if
condition|(
operator|!
name|menuBarAction
condition|)
block|{
if|if
condition|(
name|newParent
condition|)
block|{
name|menuBarAction
operator|=
name|QSoftKeyManager
operator|::
name|createAction
argument_list|(
name|QSoftKeyManager
operator|::
name|MenuSoftKey
argument_list|,
name|newParent
argument_list|)
expr_stmt|;
name|newParent
operator|->
name|addAction
argument_list|(
name|menuBarAction
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// If reparenting i.e. we already have menuBarAction, remove it from old parent
comment|// and add for a new parent
if|if
condition|(
name|oldParent
condition|)
name|oldParent
operator|->
name|removeAction
argument_list|(
name|menuBarAction
argument_list|)
expr_stmt|;
if|if
condition|(
name|newParent
condition|)
name|newParent
operator|->
name|addAction
argument_list|(
name|menuBarAction
argument_list|)
expr_stmt|;
block|}
end_if
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_SOFTKEYS_ENABLED
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_WS_S60
end_comment
begin_macro
unit|}  bool
DECL|function|allowCornerWidgets
name|QMenuBarImpl
end_macro
begin_expr_stmt
DECL|function|allowCornerWidgets
operator|::
name|allowCornerWidgets
operator|(
operator|)
specifier|const
block|{
return|return
literal|true
return|;
block|}
end_expr_stmt
begin_function
DECL|function|popupAction
name|void
name|QMenuBarImpl
operator|::
name|popupAction
parameter_list|(
name|QAction
modifier|*
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|setNativeMenuBar
name|void
name|QMenuBarImpl
operator|::
name|setNativeMenuBar
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
if|if
condition|(
name|nativeMenuBar
operator|==
operator|-
literal|1
operator|||
operator|(
name|value
operator|!=
name|bool
argument_list|(
name|nativeMenuBar
argument_list|)
operator|)
condition|)
block|{
name|nativeMenuBar
operator|=
name|value
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_MAC
if|if
condition|(
operator|!
name|nativeMenuBar
condition|)
block|{
specifier|extern
name|void
name|qt_mac_clear_menubar
argument_list|()
decl_stmt|;
name|qt_mac_clear_menubar
argument_list|()
expr_stmt|;
name|macDestroyMenuBar
argument_list|()
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
modifier|&
name|menubarActions
init|=
name|actions
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|menubarActions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QAction
modifier|*
name|action
init|=
name|menubarActions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|QMenu
modifier|*
name|menu
init|=
name|action
operator|->
name|menu
argument_list|()
condition|)
block|{
operator|delete
name|menu
operator|->
name|d_func
argument_list|()
operator|->
name|mac_menu
expr_stmt|;
name|menu
operator|->
name|d_func
argument_list|()
operator|->
name|mac_menu
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|macCreateMenuBar
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|macUpdateMenuBar
argument_list|()
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|nativeMenuBar
operator|&&
name|parentWidget
argument_list|()
condition|)
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|isNativeMenuBar
name|bool
name|QMenuBarImpl
operator|::
name|isNativeMenuBar
parameter_list|()
specifier|const
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
if|if
condition|(
name|nativeMenuBar
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|!
name|QApplication
operator|::
name|instance
argument_list|()
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|AA_DontUseNativeMenuBar
argument_list|)
return|;
block|}
return|return
name|nativeMenuBar
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|shortcutsHandledByNativeMenuBar
name|bool
name|QMenuBarImpl
operator|::
name|shortcutsHandledByNativeMenuBar
parameter_list|()
specifier|const
block|{
ifdef|#
directive|ifdef
name|Q_WS_MAC
return|return
literal|true
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|menuBarEventFilter
name|bool
name|QMenuBarImpl
operator|::
name|menuBarEventFilter
parameter_list|(
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_MENUBAR
end_comment
end_unit
