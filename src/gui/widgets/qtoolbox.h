begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTOOLBOX_H
end_ifndef
begin_define
DECL|macro|QTOOLBOX_H
define|#
directive|define
name|QTOOLBOX_H
end_define
begin_include
include|#
directive|include
file|<QtGui/qframe.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qicon.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Gui
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_TOOLBOX
name|class
name|QToolBoxPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QToolBox
range|:
name|public
name|QFrame
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
argument|int currentIndex READ currentIndex WRITE setCurrentIndex NOTIFY currentChanged
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|int count READ count
argument_list|)
name|public
operator|:
name|explicit
name|QToolBox
argument_list|(
argument|QWidget *parent =
literal|0
argument_list|,
argument|Qt::WindowFlags f =
literal|0
argument_list|)
block|;
operator|~
name|QToolBox
argument_list|()
block|;
name|int
name|addItem
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|,
specifier|const
name|QString
operator|&
name|text
argument_list|)
block|;
name|int
name|addItem
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|,
specifier|const
name|QIcon
operator|&
name|icon
argument_list|,
specifier|const
name|QString
operator|&
name|text
argument_list|)
block|;
name|int
name|insertItem
argument_list|(
argument|int index
argument_list|,
argument|QWidget *widget
argument_list|,
argument|const QString&text
argument_list|)
block|;
name|int
name|insertItem
argument_list|(
argument|int index
argument_list|,
argument|QWidget *widget
argument_list|,
argument|const QIcon&icon
argument_list|,
argument|const QString&text
argument_list|)
block|;
name|void
name|removeItem
argument_list|(
argument|int index
argument_list|)
block|;
name|void
name|setItemEnabled
argument_list|(
argument|int index
argument_list|,
argument|bool enabled
argument_list|)
block|;
name|bool
name|isItemEnabled
argument_list|(
argument|int index
argument_list|)
specifier|const
block|;
name|void
name|setItemText
argument_list|(
argument|int index
argument_list|,
argument|const QString&text
argument_list|)
block|;
name|QString
name|itemText
argument_list|(
argument|int index
argument_list|)
specifier|const
block|;
name|void
name|setItemIcon
argument_list|(
argument|int index
argument_list|,
argument|const QIcon&icon
argument_list|)
block|;
name|QIcon
name|itemIcon
argument_list|(
argument|int index
argument_list|)
specifier|const
block|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
name|void
name|setItemToolTip
argument_list|(
argument|int index
argument_list|,
argument|const QString&toolTip
argument_list|)
block|;
name|QString
name|itemToolTip
argument_list|(
argument|int index
argument_list|)
specifier|const
block|;
endif|#
directive|endif
name|int
name|currentIndex
argument_list|()
specifier|const
block|;
name|QWidget
operator|*
name|currentWidget
argument_list|()
specifier|const
block|;
name|QWidget
operator|*
name|widget
argument_list|(
argument|int index
argument_list|)
specifier|const
block|;
name|int
name|indexOf
argument_list|(
argument|QWidget *widget
argument_list|)
specifier|const
block|;
name|int
name|count
argument_list|()
specifier|const
block|;
name|public
name|Q_SLOTS
operator|:
name|void
name|setCurrentIndex
argument_list|(
argument|int index
argument_list|)
block|;
name|void
name|setCurrentWidget
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|)
block|;
name|Q_SIGNALS
operator|:
name|void
name|currentChanged
argument_list|(
argument|int index
argument_list|)
block|;
name|protected
operator|:
name|bool
name|event
argument_list|(
name|QEvent
operator|*
name|e
argument_list|)
block|;
name|virtual
name|void
name|itemInserted
argument_list|(
argument|int index
argument_list|)
block|;
name|virtual
name|void
name|itemRemoved
argument_list|(
argument|int index
argument_list|)
block|;
name|void
name|showEvent
argument_list|(
name|QShowEvent
operator|*
name|e
argument_list|)
block|;
name|void
name|changeEvent
argument_list|(
name|QEvent
operator|*
argument_list|)
block|;
ifdef|#
directive|ifdef
name|QT3_SUPPORT
name|public
operator|:
name|QT3_SUPPORT_CONSTRUCTOR
name|QToolBox
argument_list|(
argument|QWidget *parent
argument_list|,
argument|const char *name
argument_list|,
argument|Qt::WindowFlags f =
literal|0
argument_list|)
block|;
specifier|inline
name|QT3_SUPPORT
name|void
name|setItemLabel
argument_list|(
argument|int index
argument_list|,
argument|const QString&text
argument_list|)
block|{
name|setItemText
argument_list|(
name|index
argument_list|,
name|text
argument_list|)
block|; }
specifier|inline
name|QT3_SUPPORT
name|QString
name|itemLabel
argument_list|(
argument|int index
argument_list|)
specifier|const
block|{
return|return
name|itemText
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|inline
name|QT3_SUPPORT
name|QWidget
operator|*
name|currentItem
argument_list|()
specifier|const
block|{
return|return
name|widget
argument_list|(
name|currentIndex
argument_list|()
argument_list|)
return|;
block|}
specifier|inline
name|QT3_SUPPORT
name|void
name|setCurrentItem
argument_list|(
argument|QWidget *item
argument_list|)
block|{
name|setCurrentIndex
argument_list|(
name|indexOf
argument_list|(
name|item
argument_list|)
argument_list|)
block|; }
specifier|inline
name|QT3_SUPPORT
name|void
name|setItemIconSet
argument_list|(
argument|int index
argument_list|,
argument|const QIcon&icon
argument_list|)
block|{
name|setItemIcon
argument_list|(
name|index
argument_list|,
name|icon
argument_list|)
block|; }
specifier|inline
name|QT3_SUPPORT
name|QIcon
name|itemIconSet
argument_list|(
argument|int index
argument_list|)
specifier|const
block|{
return|return
name|itemIcon
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|inline
name|QT3_SUPPORT
name|int
name|removeItem
argument_list|(
argument|QWidget *item
argument_list|)
block|{
name|int
name|i
operator|=
name|indexOf
argument_list|(
name|item
argument_list|)
block|;
name|removeItem
argument_list|(
name|i
argument_list|)
block|;
return|return
name|i
return|;
block|}
specifier|inline
name|QT3_SUPPORT
name|QWidget
operator|*
name|item
argument_list|(
argument|int index
argument_list|)
specifier|const
block|{
return|return
name|widget
argument_list|(
name|index
argument_list|)
return|;
block|}
name|QT3_SUPPORT
name|void
name|setMargin
argument_list|(
argument|int margin
argument_list|)
block|{
name|setContentsMargins
argument_list|(
name|margin
argument_list|,
name|margin
argument_list|,
name|margin
argument_list|,
name|margin
argument_list|)
block|; }
name|QT3_SUPPORT
name|int
name|margin
argument_list|()
specifier|const
block|{
name|int
name|margin
block|;
name|int
name|dummy
block|;
name|getContentsMargins
argument_list|(
operator|&
name|margin
argument_list|,
operator|&
name|dummy
argument_list|,
operator|&
name|dummy
argument_list|,
operator|&
name|dummy
argument_list|)
block|;
return|return
name|margin
return|;
block|}
endif|#
directive|endif
name|private
operator|:
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QToolBox
argument_list|)
name|Q_DISABLE_COPY
argument_list|(
argument|QToolBox
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_buttonClicked()
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_widgetDestroyed(QObject*)
argument_list|)
expr|}
block|;
DECL|function|addItem
specifier|inline
name|int
name|QToolBox
operator|::
name|addItem
argument_list|(
argument|QWidget *item
argument_list|,
argument|const QString&text
argument_list|)
block|{
return|return
name|insertItem
argument_list|(
operator|-
literal|1
argument_list|,
name|item
argument_list|,
name|QIcon
argument_list|()
argument_list|,
name|text
argument_list|)
return|;
block|}
DECL|function|addItem
specifier|inline
name|int
name|QToolBox
operator|::
name|addItem
argument_list|(
argument|QWidget *item
argument_list|,
argument|const QIcon&iconSet
argument_list|,
argument|const QString&text
argument_list|)
block|{
return|return
name|insertItem
argument_list|(
operator|-
literal|1
argument_list|,
name|item
argument_list|,
name|iconSet
argument_list|,
name|text
argument_list|)
return|;
block|}
DECL|function|insertItem
specifier|inline
name|int
name|QToolBox
operator|::
name|insertItem
argument_list|(
argument|int index
argument_list|,
argument|QWidget *item
argument_list|,
argument|const QString&text
argument_list|)
block|{
return|return
name|insertItem
argument_list|(
name|index
argument_list|,
name|item
argument_list|,
name|QIcon
argument_list|()
argument_list|,
name|text
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|// QT_NO_TOOLBOX
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QTOOLBOX_H
end_comment
end_unit
