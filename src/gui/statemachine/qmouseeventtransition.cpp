begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qmouseeventtransition.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STATEMACHINE
end_ifndef
begin_include
include|#
directive|include
file|"qbasicmouseeventtransition_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qstatemachine.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpainterpath.h>
end_include
begin_include
include|#
directive|include
file|<private/qeventtransition_p.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!   \class QMouseEventTransition    \brief The QMouseEventTransition class provides a transition for mouse events.    \since 4.6   \ingroup statemachine    QMouseEventTransition is part of \l{The State Machine Framework}.    \sa QState::addTransition() */
end_comment
begin_comment
comment|/*!     \property QMouseEventTransition::button      \brief the button that this mouse event transition is associated with */
end_comment
begin_comment
comment|/*!     \property QMouseEventTransition::modifierMask      \brief the keyboard modifier mask that this mouse event transition checks for */
end_comment
begin_class
DECL|class|QMouseEventTransitionPrivate
class|class
name|QMouseEventTransitionPrivate
super|:
specifier|public
name|QEventTransitionPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QMouseEventTransition
parameter_list|)
specifier|public
private|:
name|QMouseEventTransitionPrivate
parameter_list|()
constructor_decl|;
DECL|member|transition
name|QBasicMouseEventTransition
modifier|*
name|transition
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QMouseEventTransitionPrivate
name|QMouseEventTransitionPrivate
operator|::
name|QMouseEventTransitionPrivate
parameter_list|()
block|{ }
end_constructor
begin_comment
comment|/*!   Constructs a new mouse event transition with the given \a sourceState. */
end_comment
begin_constructor
DECL|function|QMouseEventTransition
name|QMouseEventTransition
operator|::
name|QMouseEventTransition
parameter_list|(
name|QState
modifier|*
name|sourceState
parameter_list|)
member_init_list|:
name|QEventTransition
argument_list|(
operator|*
operator|new
name|QMouseEventTransitionPrivate
argument_list|,
name|sourceState
argument_list|)
block|{
name|Q_D
argument_list|(
name|QMouseEventTransition
argument_list|)
expr_stmt|;
name|d
operator|->
name|transition
operator|=
operator|new
name|QBasicMouseEventTransition
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   Constructs a new mouse event transition for events of the given \a type for   the given \a object, with the given \a button and \a sourceState. */
end_comment
begin_constructor
DECL|function|QMouseEventTransition
name|QMouseEventTransition
operator|::
name|QMouseEventTransition
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|,
name|QEvent
operator|::
name|Type
name|type
parameter_list|,
name|Qt
operator|::
name|MouseButton
name|button
parameter_list|,
name|QState
modifier|*
name|sourceState
parameter_list|)
member_init_list|:
name|QEventTransition
argument_list|(
operator|*
operator|new
name|QMouseEventTransitionPrivate
argument_list|,
name|object
argument_list|,
name|type
argument_list|,
name|sourceState
argument_list|)
block|{
name|Q_D
argument_list|(
name|QMouseEventTransition
argument_list|)
expr_stmt|;
name|d
operator|->
name|transition
operator|=
operator|new
name|QBasicMouseEventTransition
argument_list|(
name|type
argument_list|,
name|button
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   Destroys this mouse event transition. */
end_comment
begin_destructor
DECL|function|~QMouseEventTransition
name|QMouseEventTransition
operator|::
name|~
name|QMouseEventTransition
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QMouseEventTransition
argument_list|)
expr_stmt|;
operator|delete
name|d
operator|->
name|transition
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!   Returns the button that this mouse event transition checks for. */
end_comment
begin_function
DECL|function|button
name|Qt
operator|::
name|MouseButton
name|QMouseEventTransition
operator|::
name|button
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMouseEventTransition
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|transition
operator|->
name|button
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the \a button that this mouse event transition will check for. */
end_comment
begin_function
DECL|function|setButton
name|void
name|QMouseEventTransition
operator|::
name|setButton
parameter_list|(
name|Qt
operator|::
name|MouseButton
name|button
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMouseEventTransition
argument_list|)
expr_stmt|;
name|d
operator|->
name|transition
operator|->
name|setButton
argument_list|(
name|button
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the keyboard modifier mask that this mouse event transition checks   for. */
end_comment
begin_function
DECL|function|modifierMask
name|Qt
operator|::
name|KeyboardModifiers
name|QMouseEventTransition
operator|::
name|modifierMask
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMouseEventTransition
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|transition
operator|->
name|modifierMask
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the keyboard modifier mask that this mouse event transition will   check for to \a modifierMask. */
end_comment
begin_function
DECL|function|setModifierMask
name|void
name|QMouseEventTransition
operator|::
name|setModifierMask
parameter_list|(
name|Qt
operator|::
name|KeyboardModifiers
name|modifierMask
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMouseEventTransition
argument_list|)
expr_stmt|;
name|d
operator|->
name|transition
operator|->
name|setModifierMask
argument_list|(
name|modifierMask
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the hit test path for this mouse event transition. */
end_comment
begin_function
DECL|function|hitTestPath
name|QPainterPath
name|QMouseEventTransition
operator|::
name|hitTestPath
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMouseEventTransition
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|transition
operator|->
name|hitTestPath
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the hit test path for this mouse event transition to \a path.   If a valid path has been set, the transition will only trigger if the mouse   event position (QMouseEvent::pos()) is inside the path.    \sa QPainterPath::contains() */
end_comment
begin_function
DECL|function|setHitTestPath
name|void
name|QMouseEventTransition
operator|::
name|setHitTestPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMouseEventTransition
argument_list|)
expr_stmt|;
name|d
operator|->
name|transition
operator|->
name|setHitTestPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|eventTest
name|bool
name|QMouseEventTransition
operator|::
name|eventTest
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QMouseEventTransition
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QEventTransition
operator|::
name|eventTest
argument_list|(
name|event
argument_list|)
condition|)
return|return
literal|false
return|;
name|QStateMachine
operator|::
name|WrappedEvent
modifier|*
name|we
init|=
cast|static_cast
argument_list|<
name|QStateMachine
operator|::
name|WrappedEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|d
operator|->
name|transition
operator|->
name|setEventType
argument_list|(
name|we
operator|->
name|event
argument_list|()
operator|->
name|type
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QAbstractTransitionPrivate
operator|::
name|get
argument_list|(
name|d
operator|->
name|transition
argument_list|)
operator|->
name|callEventTest
argument_list|(
name|we
operator|->
name|event
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|onTransition
name|void
name|QMouseEventTransition
operator|::
name|onTransition
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|QEventTransition
operator|::
name|onTransition
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_STATEMACHINE
end_comment
end_unit
