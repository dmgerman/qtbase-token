begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qcolormap.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|"qvarlengtharray.h"
end_include
begin_include
include|#
directive|include
file|"qx11info_x11.h"
end_include
begin_include
include|#
directive|include
file|<private/qt_x11_p.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QColormapPrivate
class|class
name|QColormapPrivate
block|{
public|public:
DECL|function|QColormapPrivate
name|QColormapPrivate
parameter_list|()
member_init_list|:
name|ref
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|mode
argument_list|(
name|QColormap
operator|::
name|Direct
argument_list|)
member_init_list|,
name|depth
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|colormap
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|defaultColormap
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|visual
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|defaultVisual
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|r_max
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|g_max
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|b_max
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|r_shift
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|g_shift
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|b_shift
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|ref
name|QAtomicInt
name|ref
decl_stmt|;
DECL|member|mode
name|QColormap
operator|::
name|Mode
name|mode
decl_stmt|;
DECL|member|depth
name|int
name|depth
decl_stmt|;
DECL|member|colormap
name|Colormap
name|colormap
decl_stmt|;
DECL|member|defaultColormap
name|bool
name|defaultColormap
decl_stmt|;
DECL|member|visual
name|Visual
modifier|*
name|visual
decl_stmt|;
DECL|member|defaultVisual
name|bool
name|defaultVisual
decl_stmt|;
DECL|member|r_max
name|int
name|r_max
decl_stmt|;
DECL|member|g_max
name|int
name|g_max
decl_stmt|;
DECL|member|b_max
name|int
name|b_max
decl_stmt|;
DECL|member|r_shift
name|uint
name|r_shift
decl_stmt|;
DECL|member|g_shift
name|uint
name|g_shift
decl_stmt|;
DECL|member|b_shift
name|uint
name|b_shift
decl_stmt|;
DECL|member|colors
name|QVector
argument_list|<
name|QColor
argument_list|>
name|colors
decl_stmt|;
DECL|member|pixels
name|QVector
argument_list|<
name|int
argument_list|>
name|pixels
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|right_align
specifier|static
name|uint
name|right_align
parameter_list|(
name|uint
name|v
parameter_list|)
block|{
while|while
condition|(
operator|!
operator|(
name|v
operator|&
literal|0x1
operator|)
condition|)
name|v
operator|>>=
literal|1
expr_stmt|;
return|return
name|v
return|;
block|}
end_function
begin_function
DECL|function|lowest_bit
specifier|static
name|int
name|lowest_bit
parameter_list|(
name|uint
name|v
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
name|uint
name|b
init|=
literal|1u
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
operator|(
operator|(
name|v
operator|&
name|b
operator|)
operator|==
literal|0u
operator|)
operator|&&
name|i
operator|<
literal|32
condition|;
operator|++
name|i
control|)
name|b
operator|<<=
literal|1u
expr_stmt|;
return|return
name|i
operator|==
literal|32
condition|?
operator|-
literal|1
else|:
name|i
return|;
block|}
end_function
begin_function
DECL|function|cube_root
specifier|static
name|int
name|cube_root
parameter_list|(
name|int
name|v
parameter_list|)
block|{
if|if
condition|(
name|v
operator|==
literal|1
condition|)
return|return
literal|1
return|;
comment|// brute force algorithm
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
specifier|const
name|int
name|b
init|=
name|i
operator|*
name|i
operator|*
name|i
decl_stmt|;
if|if
condition|(
name|b
operator|<=
name|v
condition|)
block|{
operator|++
name|i
expr_stmt|;
block|}
else|else
block|{
operator|--
name|i
expr_stmt|;
break|break;
block|}
block|}
return|return
name|i
return|;
block|}
end_function
begin_function
DECL|function|find_visual
specifier|static
name|Visual
modifier|*
name|find_visual
parameter_list|(
name|Display
modifier|*
name|display
parameter_list|,
name|int
name|screen
parameter_list|,
name|int
name|visual_class
parameter_list|,
name|int
name|visual_id
parameter_list|,
name|int
modifier|*
name|depth
parameter_list|,
name|bool
modifier|*
name|defaultVisual
parameter_list|)
block|{
name|XVisualInfo
modifier|*
name|vi
decl_stmt|,
name|rvi
decl_stmt|;
name|int
name|count
decl_stmt|;
name|uint
name|mask
init|=
name|VisualScreenMask
decl_stmt|;
name|rvi
operator|.
name|screen
operator|=
name|screen
expr_stmt|;
if|if
condition|(
name|visual_class
operator|!=
operator|-
literal|1
condition|)
block|{
name|rvi
operator|.
name|c_class
operator|=
name|visual_class
expr_stmt|;
name|mask
operator||=
name|VisualClassMask
expr_stmt|;
block|}
if|if
condition|(
name|visual_id
operator|!=
operator|-
literal|1
condition|)
block|{
name|rvi
operator|.
name|visualid
operator|=
name|visual_id
expr_stmt|;
name|mask
operator||=
name|VisualIDMask
expr_stmt|;
block|}
name|Visual
modifier|*
name|visual
init|=
name|DefaultVisual
argument_list|(
name|display
argument_list|,
name|screen
argument_list|)
decl_stmt|;
operator|*
name|defaultVisual
operator|=
literal|true
expr_stmt|;
operator|*
name|depth
operator|=
name|DefaultDepth
argument_list|(
name|display
argument_list|,
name|screen
argument_list|)
expr_stmt|;
name|vi
operator|=
name|XGetVisualInfo
argument_list|(
name|display
argument_list|,
name|mask
argument_list|,
operator|&
name|rvi
argument_list|,
operator|&
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|vi
condition|)
block|{
name|int
name|best
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|count
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
name|vi
index|[
name|x
index|]
operator|.
name|depth
operator|>
name|vi
index|[
name|best
index|]
operator|.
name|depth
condition|)
name|best
operator|=
name|x
expr_stmt|;
block|}
if|if
condition|(
name|best
operator|>=
literal|0
operator|&&
name|best
operator|<=
name|count
operator|&&
name|vi
index|[
name|best
index|]
operator|.
name|visualid
operator|!=
name|XVisualIDFromVisual
argument_list|(
name|visual
argument_list|)
condition|)
block|{
name|visual
operator|=
name|vi
index|[
name|best
index|]
operator|.
name|visual
expr_stmt|;
operator|*
name|defaultVisual
operator|=
operator|(
name|visual
operator|==
name|DefaultVisual
argument_list|(
name|display
argument_list|,
name|screen
argument_list|)
operator|)
expr_stmt|;
operator|*
name|depth
operator|=
name|vi
index|[
name|best
index|]
operator|.
name|depth
expr_stmt|;
block|}
block|}
if|if
condition|(
name|vi
condition|)
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|vi
argument_list|)
expr_stmt|;
return|return
name|visual
return|;
block|}
end_function
begin_function
DECL|function|query_colormap
specifier|static
name|void
name|query_colormap
parameter_list|(
name|QColormapPrivate
modifier|*
name|d
parameter_list|,
name|int
name|screen
parameter_list|)
block|{
name|Display
modifier|*
name|display
init|=
name|QX11Info
operator|::
name|display
argument_list|()
decl_stmt|;
comment|// query existing colormap
name|int
name|q_colors
init|=
operator|(
operator|(
operator|(
literal|1u
operator|<<
name|d
operator|->
name|depth
operator|)
operator|>
literal|256u
operator|)
condition|?
literal|256u
else|:
operator|(
literal|1u
operator|<<
name|d
operator|->
name|depth
operator|)
operator|)
decl_stmt|;
name|XColor
name|queried
index|[
literal|256
index|]
decl_stmt|;
name|memset
argument_list|(
name|queried
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|queried
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|q_colors
condition|;
operator|++
name|x
control|)
name|queried
index|[
name|x
index|]
operator|.
name|pixel
operator|=
name|x
expr_stmt|;
name|XQueryColors
argument_list|(
name|display
argument_list|,
name|d
operator|->
name|colormap
argument_list|,
name|queried
argument_list|,
name|q_colors
argument_list|)
expr_stmt|;
name|d
operator|->
name|colors
operator|.
name|resize
argument_list|(
name|q_colors
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|q_colors
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
name|queried
index|[
name|x
index|]
operator|.
name|red
operator|==
literal|0
operator|&&
name|queried
index|[
name|x
index|]
operator|.
name|green
operator|==
literal|0
operator|&&
name|queried
index|[
name|x
index|]
operator|.
name|blue
operator|==
literal|0
operator|&&
name|queried
index|[
name|x
index|]
operator|.
name|pixel
operator|!=
name|BlackPixel
argument_list|(
name|display
argument_list|,
name|screen
argument_list|)
condition|)
block|{
comment|// unallocated color cell, skip it
continue|continue;
block|}
name|d
operator|->
name|colors
index|[
name|x
index|]
operator|=
name|QColor
operator|::
name|fromRgbF
argument_list|(
name|queried
index|[
name|x
index|]
operator|.
name|red
operator|/
name|float
argument_list|(
name|USHRT_MAX
argument_list|)
argument_list|,
name|queried
index|[
name|x
index|]
operator|.
name|green
operator|/
name|float
argument_list|(
name|USHRT_MAX
argument_list|)
argument_list|,
name|queried
index|[
name|x
index|]
operator|.
name|blue
operator|/
name|float
argument_list|(
name|USHRT_MAX
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// for missing colors, find the closest color in the existing colormap
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|pixels
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|d
operator|->
name|pixels
operator|.
name|size
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
name|d
operator|->
name|pixels
operator|.
name|at
argument_list|(
name|x
argument_list|)
operator|!=
operator|-
literal|1
condition|)
continue|continue;
name|QRgb
name|rgb
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|mode
operator|==
name|QColormap
operator|::
name|Indexed
condition|)
block|{
specifier|const
name|int
name|r
init|=
operator|(
name|x
operator|/
operator|(
name|d
operator|->
name|g_max
operator|*
name|d
operator|->
name|b_max
operator|)
operator|)
operator|%
name|d
operator|->
name|r_max
decl_stmt|;
specifier|const
name|int
name|g
init|=
operator|(
name|x
operator|/
name|d
operator|->
name|b_max
operator|)
operator|%
name|d
operator|->
name|g_max
decl_stmt|;
specifier|const
name|int
name|b
init|=
name|x
operator|%
name|d
operator|->
name|b_max
decl_stmt|;
name|rgb
operator|=
name|qRgb
argument_list|(
operator|(
name|r
operator|*
literal|0xff
operator|+
operator|(
name|d
operator|->
name|r_max
operator|-
literal|1
operator|)
operator|/
literal|2
operator|)
operator|/
operator|(
name|d
operator|->
name|r_max
operator|-
literal|1
operator|)
argument_list|,
operator|(
name|g
operator|*
literal|0xff
operator|+
operator|(
name|d
operator|->
name|g_max
operator|-
literal|1
operator|)
operator|/
literal|2
operator|)
operator|/
operator|(
name|d
operator|->
name|g_max
operator|-
literal|1
operator|)
argument_list|,
operator|(
name|b
operator|*
literal|0xff
operator|+
operator|(
name|d
operator|->
name|b_max
operator|-
literal|1
operator|)
operator|/
literal|2
operator|)
operator|/
operator|(
name|d
operator|->
name|b_max
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rgb
operator|=
name|qRgb
argument_list|(
name|x
argument_list|,
name|x
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
comment|// find closest color
name|int
name|mindist
init|=
name|INT_MAX
decl_stmt|,
name|best
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|q_colors
condition|;
operator|++
name|y
control|)
block|{
name|int
name|r
init|=
name|qRed
argument_list|(
name|rgb
argument_list|)
operator|-
operator|(
name|queried
index|[
name|y
index|]
operator|.
name|red
operator|>>
literal|8
operator|)
decl_stmt|;
name|int
name|g
init|=
name|qGreen
argument_list|(
name|rgb
argument_list|)
operator|-
operator|(
name|queried
index|[
name|y
index|]
operator|.
name|green
operator|>>
literal|8
operator|)
decl_stmt|;
name|int
name|b
init|=
name|qBlue
argument_list|(
name|rgb
argument_list|)
operator|-
operator|(
name|queried
index|[
name|y
index|]
operator|.
name|blue
operator|>>
literal|8
operator|)
decl_stmt|;
name|int
name|dist
init|=
operator|(
name|r
operator|*
name|r
operator|)
operator|+
operator|(
name|g
operator|*
name|g
operator|)
operator|+
operator|(
name|b
operator|*
name|b
operator|)
decl_stmt|;
if|if
condition|(
name|dist
operator|<
name|mindist
condition|)
block|{
name|mindist
operator|=
name|dist
expr_stmt|;
name|best
operator|=
name|y
expr_stmt|;
block|}
block|}
name|Q_ASSERT
argument_list|(
name|best
operator|>=
literal|0
operator|&&
name|best
operator|<
name|q_colors
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|visual
operator|->
name|c_class
operator|&
literal|1
condition|)
block|{
name|XColor
name|xcolor
decl_stmt|;
name|xcolor
operator|.
name|red
operator|=
name|queried
index|[
name|best
index|]
operator|.
name|red
expr_stmt|;
name|xcolor
operator|.
name|green
operator|=
name|queried
index|[
name|best
index|]
operator|.
name|green
expr_stmt|;
name|xcolor
operator|.
name|blue
operator|=
name|queried
index|[
name|best
index|]
operator|.
name|blue
expr_stmt|;
name|xcolor
operator|.
name|pixel
operator|=
name|queried
index|[
name|best
index|]
operator|.
name|pixel
expr_stmt|;
if|if
condition|(
name|XAllocColor
argument_list|(
name|display
argument_list|,
name|d
operator|->
name|colormap
argument_list|,
operator|&
name|xcolor
argument_list|)
condition|)
block|{
name|d
operator|->
name|pixels
index|[
name|x
index|]
operator|=
name|xcolor
operator|.
name|pixel
expr_stmt|;
block|}
else|else
block|{
comment|// some weird stuff is going on...
name|d
operator|->
name|pixels
index|[
name|x
index|]
operator|=
operator|(
name|qGray
argument_list|(
name|rgb
argument_list|)
operator|<
literal|127
condition|?
name|BlackPixel
argument_list|(
name|display
argument_list|,
name|screen
argument_list|)
else|:
name|WhitePixel
argument_list|(
name|display
argument_list|,
name|screen
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|d
operator|->
name|pixels
index|[
name|x
index|]
operator|=
name|best
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|init_gray
specifier|static
name|void
name|init_gray
parameter_list|(
name|QColormapPrivate
modifier|*
name|d
parameter_list|,
name|int
name|screen
parameter_list|)
block|{
name|d
operator|->
name|pixels
operator|.
name|resize
argument_list|(
name|d
operator|->
name|r_max
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|g
init|=
literal|0
init|;
name|g
operator|<
name|d
operator|->
name|g_max
condition|;
operator|++
name|g
control|)
block|{
specifier|const
name|int
name|gray
init|=
operator|(
name|g
operator|*
literal|0xff
operator|+
operator|(
name|d
operator|->
name|r_max
operator|-
literal|1
operator|)
operator|/
literal|2
operator|)
operator|/
operator|(
name|d
operator|->
name|r_max
operator|-
literal|1
operator|)
decl_stmt|;
specifier|const
name|QRgb
name|rgb
init|=
name|qRgb
argument_list|(
name|gray
argument_list|,
name|gray
argument_list|,
name|gray
argument_list|)
decl_stmt|;
name|d
operator|->
name|pixels
index|[
name|g
index|]
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|visual
operator|->
name|c_class
operator|&
literal|1
condition|)
block|{
name|XColor
name|xcolor
decl_stmt|;
name|xcolor
operator|.
name|red
operator|=
name|qRed
argument_list|(
name|rgb
argument_list|)
operator|*
literal|0x101
expr_stmt|;
name|xcolor
operator|.
name|green
operator|=
name|qGreen
argument_list|(
name|rgb
argument_list|)
operator|*
literal|0x101
expr_stmt|;
name|xcolor
operator|.
name|blue
operator|=
name|qBlue
argument_list|(
name|rgb
argument_list|)
operator|*
literal|0x101
expr_stmt|;
name|xcolor
operator|.
name|pixel
operator|=
literal|0ul
expr_stmt|;
if|if
condition|(
name|XAllocColor
argument_list|(
name|QX11Info
operator|::
name|display
argument_list|()
argument_list|,
name|d
operator|->
name|colormap
argument_list|,
operator|&
name|xcolor
argument_list|)
condition|)
name|d
operator|->
name|pixels
index|[
name|g
index|]
operator|=
name|xcolor
operator|.
name|pixel
expr_stmt|;
block|}
block|}
name|query_colormap
argument_list|(
name|d
argument_list|,
name|screen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init_indexed
specifier|static
name|void
name|init_indexed
parameter_list|(
name|QColormapPrivate
modifier|*
name|d
parameter_list|,
name|int
name|screen
parameter_list|)
block|{
name|d
operator|->
name|pixels
operator|.
name|resize
argument_list|(
name|d
operator|->
name|r_max
operator|*
name|d
operator|->
name|g_max
operator|*
name|d
operator|->
name|b_max
argument_list|)
expr_stmt|;
comment|// create color cube
for|for
control|(
name|int
name|x
init|=
literal|0
init|,
name|r
init|=
literal|0
init|;
name|r
operator|<
name|d
operator|->
name|r_max
condition|;
operator|++
name|r
control|)
block|{
for|for
control|(
name|int
name|g
init|=
literal|0
init|;
name|g
operator|<
name|d
operator|->
name|g_max
condition|;
operator|++
name|g
control|)
block|{
for|for
control|(
name|int
name|b
init|=
literal|0
init|;
name|b
operator|<
name|d
operator|->
name|b_max
condition|;
operator|++
name|b
operator|,
operator|++
name|x
control|)
block|{
specifier|const
name|QRgb
name|rgb
init|=
name|qRgb
argument_list|(
operator|(
name|r
operator|*
literal|0xff
operator|+
operator|(
name|d
operator|->
name|r_max
operator|-
literal|1
operator|)
operator|/
literal|2
operator|)
operator|/
operator|(
name|d
operator|->
name|r_max
operator|-
literal|1
operator|)
argument_list|,
operator|(
name|g
operator|*
literal|0xff
operator|+
operator|(
name|d
operator|->
name|g_max
operator|-
literal|1
operator|)
operator|/
literal|2
operator|)
operator|/
operator|(
name|d
operator|->
name|g_max
operator|-
literal|1
operator|)
argument_list|,
operator|(
name|b
operator|*
literal|0xff
operator|+
operator|(
name|d
operator|->
name|b_max
operator|-
literal|1
operator|)
operator|/
literal|2
operator|)
operator|/
operator|(
name|d
operator|->
name|b_max
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
name|d
operator|->
name|pixels
index|[
name|x
index|]
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|visual
operator|->
name|c_class
operator|&
literal|1
condition|)
block|{
name|XColor
name|xcolor
decl_stmt|;
name|xcolor
operator|.
name|red
operator|=
name|qRed
argument_list|(
name|rgb
argument_list|)
operator|*
literal|0x101
expr_stmt|;
name|xcolor
operator|.
name|green
operator|=
name|qGreen
argument_list|(
name|rgb
argument_list|)
operator|*
literal|0x101
expr_stmt|;
name|xcolor
operator|.
name|blue
operator|=
name|qBlue
argument_list|(
name|rgb
argument_list|)
operator|*
literal|0x101
expr_stmt|;
name|xcolor
operator|.
name|pixel
operator|=
literal|0ul
expr_stmt|;
if|if
condition|(
name|XAllocColor
argument_list|(
name|QX11Info
operator|::
name|display
argument_list|()
argument_list|,
name|d
operator|->
name|colormap
argument_list|,
operator|&
name|xcolor
argument_list|)
condition|)
name|d
operator|->
name|pixels
index|[
name|x
index|]
operator|=
name|xcolor
operator|.
name|pixel
expr_stmt|;
block|}
block|}
block|}
block|}
name|query_colormap
argument_list|(
name|d
argument_list|,
name|screen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init_direct
specifier|static
name|void
name|init_direct
parameter_list|(
name|QColormapPrivate
modifier|*
name|d
parameter_list|,
name|bool
name|ownColormap
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|visual
operator|->
name|c_class
operator|!=
name|DirectColor
operator|||
operator|!
name|ownColormap
condition|)
return|return;
comment|// preallocate 768 on the stack, so that we don't have to malloc
comment|// for the common case (<= 24 bpp)
name|QVarLengthArray
argument_list|<
name|XColor
argument_list|,
literal|768
argument_list|>
name|colorTable
argument_list|(
name|d
operator|->
name|r_max
operator|+
name|d
operator|->
name|g_max
operator|+
name|d
operator|->
name|b_max
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|d
operator|->
name|r_max
condition|;
operator|++
name|r
control|)
block|{
name|colorTable
index|[
name|i
index|]
operator|.
name|red
operator|=
name|r
operator|<<
literal|8
operator||
name|r
expr_stmt|;
name|colorTable
index|[
name|i
index|]
operator|.
name|pixel
operator|=
name|r
operator|<<
name|d
operator|->
name|r_shift
expr_stmt|;
name|colorTable
index|[
name|i
index|]
operator|.
name|flags
operator|=
name|DoRed
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
for|for
control|(
name|int
name|g
init|=
literal|0
init|;
name|g
operator|<
name|d
operator|->
name|g_max
condition|;
operator|++
name|g
control|)
block|{
name|colorTable
index|[
name|i
index|]
operator|.
name|green
operator|=
name|g
operator|<<
literal|8
operator||
name|g
expr_stmt|;
name|colorTable
index|[
name|i
index|]
operator|.
name|pixel
operator|=
name|g
operator|<<
name|d
operator|->
name|g_shift
expr_stmt|;
name|colorTable
index|[
name|i
index|]
operator|.
name|flags
operator|=
name|DoGreen
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
for|for
control|(
name|int
name|b
init|=
literal|0
init|;
name|b
operator|<
name|d
operator|->
name|b_max
condition|;
operator|++
name|b
control|)
block|{
name|colorTable
index|[
name|i
index|]
operator|.
name|blue
operator|=
operator|(
name|b
operator|<<
literal|8
operator||
name|b
operator|)
expr_stmt|;
name|colorTable
index|[
name|i
index|]
operator|.
name|pixel
operator|=
name|b
operator|<<
name|d
operator|->
name|b_shift
expr_stmt|;
name|colorTable
index|[
name|i
index|]
operator|.
name|flags
operator|=
name|DoBlue
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|XStoreColors
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|d
operator|->
name|colormap
argument_list|,
name|colorTable
operator|.
name|data
argument_list|()
argument_list|,
name|colorTable
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|cmaps
specifier|static
name|QColormap
modifier|*
modifier|*
name|cmaps
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|initialize
name|void
name|QColormap
operator|::
name|initialize
parameter_list|()
block|{
name|Display
modifier|*
name|display
init|=
name|QX11Info
operator|::
name|display
argument_list|()
decl_stmt|;
specifier|const
name|int
name|screens
init|=
name|ScreenCount
argument_list|(
name|display
argument_list|)
decl_stmt|;
name|cmaps
operator|=
operator|new
name|QColormap
operator|*
index|[
name|screens
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|screens
condition|;
operator|++
name|i
control|)
block|{
name|cmaps
index|[
name|i
index|]
operator|=
operator|new
name|QColormap
expr_stmt|;
name|QColormapPrivate
modifier|*
specifier|const
name|d
init|=
name|cmaps
index|[
name|i
index|]
operator|->
name|d
decl_stmt|;
name|bool
name|use_stdcmap
init|=
literal|false
decl_stmt|;
name|int
name|color_count
init|=
name|X11
operator|->
name|color_count
decl_stmt|;
comment|// defaults
name|d
operator|->
name|depth
operator|=
name|DefaultDepth
argument_list|(
name|display
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|d
operator|->
name|colormap
operator|=
name|DefaultColormap
argument_list|(
name|display
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|d
operator|->
name|defaultColormap
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|visual
operator|=
name|DefaultVisual
argument_list|(
name|display
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|d
operator|->
name|defaultVisual
operator|=
literal|true
expr_stmt|;
name|Visual
modifier|*
name|argbVisual
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|X11
operator|->
name|visual
operator|&&
name|i
operator|==
name|DefaultScreen
argument_list|(
name|display
argument_list|)
condition|)
block|{
comment|// only use the outside colormap on the default screen
name|d
operator|->
name|visual
operator|=
name|find_visual
argument_list|(
name|display
argument_list|,
name|i
argument_list|,
name|X11
operator|->
name|visual
operator|->
name|c_class
argument_list|,
name|XVisualIDFromVisual
argument_list|(
name|X11
operator|->
name|visual
argument_list|)
argument_list|,
operator|&
name|d
operator|->
name|depth
argument_list|,
operator|&
name|d
operator|->
name|defaultVisual
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|X11
operator|->
name|visual_class
operator|!=
operator|-
literal|1
operator|&&
name|X11
operator|->
name|visual_class
operator|>=
literal|0
operator|&&
name|X11
operator|->
name|visual_class
operator|<
literal|6
operator|)
operator|||
operator|(
name|X11
operator|->
name|visual_id
operator|!=
operator|-
literal|1
operator|)
condition|)
block|{
comment|// look for a specific visual or type of visual
name|d
operator|->
name|visual
operator|=
name|find_visual
argument_list|(
name|display
argument_list|,
name|i
argument_list|,
name|X11
operator|->
name|visual_class
argument_list|,
name|X11
operator|->
name|visual_id
argument_list|,
operator|&
name|d
operator|->
name|depth
argument_list|,
operator|&
name|d
operator|->
name|defaultVisual
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QApplication
operator|::
name|colorSpec
argument_list|()
operator|==
name|QApplication
operator|::
name|ManyColor
condition|)
block|{
comment|// look for a TrueColor w/ a depth higher than 8bpp
name|d
operator|->
name|visual
operator|=
name|find_visual
argument_list|(
name|display
argument_list|,
name|i
argument_list|,
name|TrueColor
argument_list|,
operator|-
literal|1
argument_list|,
operator|&
name|d
operator|->
name|depth
argument_list|,
operator|&
name|d
operator|->
name|defaultVisual
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|depth
operator|<=
literal|8
condition|)
block|{
name|d
operator|->
name|visual
operator|=
name|DefaultVisual
argument_list|(
name|display
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|d
operator|->
name|defaultVisual
operator|=
literal|true
expr_stmt|;
name|color_count
operator|=
literal|216
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|X11
operator|->
name|custom_cmap
condition|)
block|{
name|XStandardColormap
modifier|*
name|stdcmap
init|=
literal|0
decl_stmt|;
name|int
name|ncmaps
init|=
literal|0
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
if|if
condition|(
name|X11
operator|->
name|use_xrender
condition|)
block|{
name|int
name|nvi
decl_stmt|;
name|XVisualInfo
name|templ
decl_stmt|;
name|templ
operator|.
name|screen
operator|=
name|i
expr_stmt|;
name|templ
operator|.
name|depth
operator|=
literal|32
expr_stmt|;
name|templ
operator|.
name|c_class
operator|=
name|TrueColor
expr_stmt|;
name|XVisualInfo
modifier|*
name|xvi
init|=
name|XGetVisualInfo
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|VisualScreenMask
operator||
name|VisualDepthMask
operator||
name|VisualClassMask
argument_list|,
operator|&
name|templ
argument_list|,
operator|&
name|nvi
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nvi
condition|;
operator|++
name|idx
control|)
block|{
name|XRenderPictFormat
modifier|*
name|format
init|=
name|XRenderFindVisualFormat
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|xvi
index|[
name|idx
index|]
operator|.
name|visual
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
operator|->
name|type
operator|==
name|PictTypeDirect
operator|&&
name|format
operator|->
name|direct
operator|.
name|alphaMask
condition|)
block|{
name|argbVisual
operator|=
name|xvi
index|[
name|idx
index|]
operator|.
name|visual
expr_stmt|;
break|break;
block|}
block|}
name|XFree
argument_list|(
name|xvi
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|XGetRGBColormaps
argument_list|(
name|display
argument_list|,
name|RootWindow
argument_list|(
name|display
argument_list|,
name|i
argument_list|)
argument_list|,
operator|&
name|stdcmap
argument_list|,
operator|&
name|ncmaps
argument_list|,
name|XA_RGB_DEFAULT_MAP
argument_list|)
condition|)
block|{
if|if
condition|(
name|stdcmap
condition|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|ncmaps
condition|;
operator|++
name|c
control|)
block|{
if|if
condition|(
operator|!
name|stdcmap
index|[
name|c
index|]
operator|.
name|red_max
operator|||
operator|!
name|stdcmap
index|[
name|c
index|]
operator|.
name|green_max
operator|||
operator|!
name|stdcmap
index|[
name|c
index|]
operator|.
name|blue_max
operator|||
operator|!
name|stdcmap
index|[
name|c
index|]
operator|.
name|red_mult
operator|||
operator|!
name|stdcmap
index|[
name|c
index|]
operator|.
name|green_mult
operator|||
operator|!
name|stdcmap
index|[
name|c
index|]
operator|.
name|blue_mult
condition|)
continue|continue;
comment|// invalid stdcmap
name|XVisualInfo
name|proto
decl_stmt|;
name|proto
operator|.
name|visualid
operator|=
name|stdcmap
index|[
name|c
index|]
operator|.
name|visualid
expr_stmt|;
name|proto
operator|.
name|screen
operator|=
name|i
expr_stmt|;
name|int
name|nvisuals
init|=
literal|0
decl_stmt|;
name|XVisualInfo
modifier|*
name|vi
init|=
name|XGetVisualInfo
argument_list|(
name|display
argument_list|,
name|VisualIDMask
operator||
name|VisualScreenMask
argument_list|,
operator|&
name|proto
argument_list|,
operator|&
name|nvisuals
argument_list|)
decl_stmt|;
if|if
condition|(
name|vi
condition|)
block|{
if|if
condition|(
name|nvisuals
operator|>
literal|0
condition|)
block|{
name|use_stdcmap
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|mode
operator|=
operator|(
operator|(
name|vi
index|[
literal|0
index|]
operator|.
name|visual
operator|->
name|c_class
operator|<
name|StaticColor
operator|)
condition|?
name|Gray
else|:
operator|(
operator|(
name|vi
index|[
literal|0
index|]
operator|.
name|visual
operator|->
name|c_class
operator|<
name|TrueColor
operator|)
condition|?
name|Indexed
else|:
name|Direct
operator|)
operator|)
expr_stmt|;
name|d
operator|->
name|depth
operator|=
name|vi
index|[
literal|0
index|]
operator|.
name|depth
expr_stmt|;
name|d
operator|->
name|colormap
operator|=
name|stdcmap
index|[
name|c
index|]
operator|.
name|colormap
expr_stmt|;
name|d
operator|->
name|defaultColormap
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|visual
operator|=
name|vi
index|[
literal|0
index|]
operator|.
name|visual
expr_stmt|;
name|d
operator|->
name|defaultVisual
operator|=
operator|(
name|d
operator|->
name|visual
operator|==
name|DefaultVisual
argument_list|(
name|display
argument_list|,
name|i
argument_list|)
operator|)
expr_stmt|;
name|d
operator|->
name|r_max
operator|=
name|stdcmap
index|[
name|c
index|]
operator|.
name|red_max
operator|+
literal|1
expr_stmt|;
name|d
operator|->
name|g_max
operator|=
name|stdcmap
index|[
name|c
index|]
operator|.
name|green_max
operator|+
literal|1
expr_stmt|;
name|d
operator|->
name|b_max
operator|=
name|stdcmap
index|[
name|c
index|]
operator|.
name|blue_max
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|mode
operator|==
name|Direct
condition|)
block|{
comment|// calculate offsets
name|d
operator|->
name|r_shift
operator|=
name|lowest_bit
argument_list|(
name|d
operator|->
name|visual
operator|->
name|red_mask
argument_list|)
expr_stmt|;
name|d
operator|->
name|g_shift
operator|=
name|lowest_bit
argument_list|(
name|d
operator|->
name|visual
operator|->
name|green_mask
argument_list|)
expr_stmt|;
name|d
operator|->
name|b_shift
operator|=
name|lowest_bit
argument_list|(
name|d
operator|->
name|visual
operator|->
name|blue_mask
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|r_shift
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|g_shift
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|b_shift
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|XFree
argument_list|(
name|vi
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|XFree
argument_list|(
name|stdcmap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|use_stdcmap
condition|)
block|{
switch|switch
condition|(
name|d
operator|->
name|visual
operator|->
name|c_class
condition|)
block|{
case|case
name|StaticGray
case|:
name|d
operator|->
name|mode
operator|=
name|Gray
expr_stmt|;
name|d
operator|->
name|r_max
operator|=
name|d
operator|->
name|g_max
operator|=
name|d
operator|->
name|b_max
operator|=
name|d
operator|->
name|visual
operator|->
name|map_entries
expr_stmt|;
break|break;
case|case
name|XGrayScale
case|:
name|d
operator|->
name|mode
operator|=
name|Gray
expr_stmt|;
comment|// follow precedent set in libXmu...
if|if
condition|(
name|color_count
operator|!=
literal|0
condition|)
name|d
operator|->
name|r_max
operator|=
name|d
operator|->
name|g_max
operator|=
name|d
operator|->
name|b_max
operator|=
name|color_count
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|visual
operator|->
name|map_entries
operator|>
literal|65000
condition|)
name|d
operator|->
name|r_max
operator|=
name|d
operator|->
name|g_max
operator|=
name|d
operator|->
name|b_max
operator|=
literal|4096
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|visual
operator|->
name|map_entries
operator|>
literal|4000
condition|)
name|d
operator|->
name|r_max
operator|=
name|d
operator|->
name|g_max
operator|=
name|d
operator|->
name|b_max
operator|=
literal|512
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|visual
operator|->
name|map_entries
operator|>
literal|250
condition|)
name|d
operator|->
name|r_max
operator|=
name|d
operator|->
name|g_max
operator|=
name|d
operator|->
name|b_max
operator|=
literal|12
expr_stmt|;
else|else
name|d
operator|->
name|r_max
operator|=
name|d
operator|->
name|g_max
operator|=
name|d
operator|->
name|b_max
operator|=
literal|4
expr_stmt|;
break|break;
case|case
name|StaticColor
case|:
name|d
operator|->
name|mode
operator|=
name|Indexed
expr_stmt|;
name|d
operator|->
name|r_max
operator|=
name|right_align
argument_list|(
name|d
operator|->
name|visual
operator|->
name|red_mask
argument_list|)
operator|+
literal|1
expr_stmt|;
name|d
operator|->
name|g_max
operator|=
name|right_align
argument_list|(
name|d
operator|->
name|visual
operator|->
name|green_mask
argument_list|)
operator|+
literal|1
expr_stmt|;
name|d
operator|->
name|b_max
operator|=
name|right_align
argument_list|(
name|d
operator|->
name|visual
operator|->
name|blue_mask
argument_list|)
operator|+
literal|1
expr_stmt|;
break|break;
case|case
name|PseudoColor
case|:
name|d
operator|->
name|mode
operator|=
name|Indexed
expr_stmt|;
comment|// follow precedent set in libXmu...
if|if
condition|(
name|color_count
operator|!=
literal|0
condition|)
name|d
operator|->
name|r_max
operator|=
name|d
operator|->
name|g_max
operator|=
name|d
operator|->
name|b_max
operator|=
name|cube_root
argument_list|(
name|color_count
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|visual
operator|->
name|map_entries
operator|>
literal|65000
condition|)
name|d
operator|->
name|r_max
operator|=
name|d
operator|->
name|g_max
operator|=
name|d
operator|->
name|b_max
operator|=
literal|27
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|visual
operator|->
name|map_entries
operator|>
literal|4000
condition|)
name|d
operator|->
name|r_max
operator|=
name|d
operator|->
name|g_max
operator|=
name|d
operator|->
name|b_max
operator|=
literal|12
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|visual
operator|->
name|map_entries
operator|>
literal|250
condition|)
name|d
operator|->
name|r_max
operator|=
name|d
operator|->
name|g_max
operator|=
name|d
operator|->
name|b_max
operator|=
name|cube_root
argument_list|(
name|d
operator|->
name|visual
operator|->
name|map_entries
operator|-
literal|125
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|r_max
operator|=
name|d
operator|->
name|g_max
operator|=
name|d
operator|->
name|b_max
operator|=
name|cube_root
argument_list|(
name|d
operator|->
name|visual
operator|->
name|map_entries
argument_list|)
expr_stmt|;
break|break;
case|case
name|TrueColor
case|:
case|case
name|DirectColor
case|:
name|d
operator|->
name|mode
operator|=
name|Direct
expr_stmt|;
name|d
operator|->
name|r_max
operator|=
name|right_align
argument_list|(
name|d
operator|->
name|visual
operator|->
name|red_mask
argument_list|)
operator|+
literal|1
expr_stmt|;
name|d
operator|->
name|g_max
operator|=
name|right_align
argument_list|(
name|d
operator|->
name|visual
operator|->
name|green_mask
argument_list|)
operator|+
literal|1
expr_stmt|;
name|d
operator|->
name|b_max
operator|=
name|right_align
argument_list|(
name|d
operator|->
name|visual
operator|->
name|blue_mask
argument_list|)
operator|+
literal|1
expr_stmt|;
name|d
operator|->
name|r_shift
operator|=
name|lowest_bit
argument_list|(
name|d
operator|->
name|visual
operator|->
name|red_mask
argument_list|)
expr_stmt|;
name|d
operator|->
name|g_shift
operator|=
name|lowest_bit
argument_list|(
name|d
operator|->
name|visual
operator|->
name|green_mask
argument_list|)
expr_stmt|;
name|d
operator|->
name|b_shift
operator|=
name|lowest_bit
argument_list|(
name|d
operator|->
name|visual
operator|->
name|blue_mask
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|bool
name|ownColormap
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|X11
operator|->
name|colormap
operator|&&
name|i
operator|==
name|DefaultScreen
argument_list|(
name|display
argument_list|)
condition|)
block|{
comment|// only use the outside colormap on the default screen
name|d
operator|->
name|colormap
operator|=
name|X11
operator|->
name|colormap
expr_stmt|;
name|d
operator|->
name|defaultColormap
operator|=
operator|(
name|d
operator|->
name|colormap
operator|==
name|DefaultColormap
argument_list|(
name|display
argument_list|,
name|i
argument_list|)
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|!
name|use_stdcmap
operator|&&
operator|(
operator|(
operator|(
name|d
operator|->
name|visual
operator|->
name|c_class
operator|&
literal|1
operator|)
operator|&&
name|X11
operator|->
name|custom_cmap
operator|)
operator|||
name|d
operator|->
name|visual
operator|!=
name|DefaultVisual
argument_list|(
name|display
argument_list|,
name|i
argument_list|)
operator|)
operator|)
operator|||
name|d
operator|->
name|visual
operator|->
name|c_class
operator|==
name|DirectColor
condition|)
block|{
comment|// allocate custom colormap (we always do this when using DirectColor visuals)
name|d
operator|->
name|colormap
operator|=
name|XCreateColormap
argument_list|(
name|display
argument_list|,
name|RootWindow
argument_list|(
name|display
argument_list|,
name|i
argument_list|)
argument_list|,
name|d
operator|->
name|visual
argument_list|,
name|d
operator|->
name|visual
operator|->
name|c_class
operator|==
name|DirectColor
condition|?
name|AllocAll
else|:
name|AllocNone
argument_list|)
expr_stmt|;
name|d
operator|->
name|defaultColormap
operator|=
literal|false
expr_stmt|;
name|ownColormap
operator|=
literal|true
expr_stmt|;
block|}
switch|switch
condition|(
name|d
operator|->
name|mode
condition|)
block|{
case|case
name|Gray
case|:
name|init_gray
argument_list|(
name|d
argument_list|,
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|Indexed
case|:
name|init_indexed
argument_list|(
name|d
argument_list|,
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|Direct
case|:
name|init_direct
argument_list|(
name|d
argument_list|,
name|ownColormap
argument_list|)
expr_stmt|;
break|break;
block|}
name|QX11InfoData
modifier|*
name|screen
init|=
name|X11
operator|->
name|screens
operator|+
name|i
decl_stmt|;
name|screen
operator|->
name|depth
operator|=
name|d
operator|->
name|depth
expr_stmt|;
name|screen
operator|->
name|visual
operator|=
name|d
operator|->
name|visual
expr_stmt|;
name|screen
operator|->
name|defaultVisual
operator|=
name|d
operator|->
name|defaultVisual
expr_stmt|;
name|screen
operator|->
name|colormap
operator|=
name|d
operator|->
name|colormap
expr_stmt|;
name|screen
operator|->
name|defaultColormap
operator|=
name|d
operator|->
name|defaultColormap
expr_stmt|;
name|screen
operator|->
name|cells
operator|=
name|screen
operator|->
name|visual
operator|->
name|map_entries
expr_stmt|;
if|if
condition|(
name|argbVisual
condition|)
block|{
name|X11
operator|->
name|argbVisuals
index|[
name|i
index|]
operator|=
name|argbVisual
expr_stmt|;
name|X11
operator|->
name|argbColormaps
index|[
name|i
index|]
operator|=
name|XCreateColormap
argument_list|(
name|display
argument_list|,
name|RootWindow
argument_list|(
name|display
argument_list|,
name|i
argument_list|)
argument_list|,
name|argbVisual
argument_list|,
name|AllocNone
argument_list|)
expr_stmt|;
block|}
comment|// ###
comment|// We assume that 8bpp == pseudocolor, but this is not
comment|// always the case (according to the X server), so we need
comment|// to make sure that our internal data is setup in a way
comment|// that is compatible with our assumptions
if|if
condition|(
name|screen
operator|->
name|visual
operator|->
name|c_class
operator|==
name|TrueColor
operator|&&
name|screen
operator|->
name|depth
operator|==
literal|8
operator|&&
name|screen
operator|->
name|cells
operator|==
literal|8
condition|)
name|screen
operator|->
name|cells
operator|=
literal|256
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|QColormap
operator|::
name|cleanup
parameter_list|()
block|{
name|Display
modifier|*
name|display
init|=
name|QX11Info
operator|::
name|display
argument_list|()
decl_stmt|;
specifier|const
name|int
name|screens
init|=
name|ScreenCount
argument_list|(
name|display
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|screens
condition|;
operator|++
name|i
control|)
operator|delete
name|cmaps
index|[
name|i
index|]
expr_stmt|;
operator|delete
index|[]
name|cmaps
expr_stmt|;
name|cmaps
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|instance
name|QColormap
name|QColormap
operator|::
name|instance
parameter_list|(
name|int
name|screen
parameter_list|)
block|{
if|if
condition|(
name|screen
operator|==
operator|-
literal|1
condition|)
name|screen
operator|=
name|QX11Info
operator|::
name|appScreen
argument_list|()
expr_stmt|;
return|return
operator|*
name|cmaps
index|[
name|screen
index|]
return|;
block|}
end_function
begin_comment
comment|/*! \internal     Constructs a new colormap. */
end_comment
begin_constructor
DECL|function|QColormap
name|QColormap
operator|::
name|QColormap
parameter_list|()
member_init_list|:
name|d
argument_list|(
operator|new
name|QColormapPrivate
argument_list|)
block|{}
end_constructor
begin_constructor
DECL|function|QColormap
name|QColormap
operator|::
name|QColormap
parameter_list|(
specifier|const
name|QColormap
modifier|&
name|colormap
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|colormap
operator|.
name|d
argument_list|)
block|{
name|d
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
end_constructor
begin_destructor
DECL|function|~QColormap
name|QColormap
operator|::
name|~
name|QColormap
parameter_list|()
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|defaultColormap
condition|)
name|XFreeColormap
argument_list|(
name|QX11Info
operator|::
name|display
argument_list|()
argument_list|,
name|d
operator|->
name|colormap
argument_list|)
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|mode
name|QColormap
operator|::
name|Mode
name|QColormap
operator|::
name|mode
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|mode
return|;
block|}
end_function
begin_function
DECL|function|depth
name|int
name|QColormap
operator|::
name|depth
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|depth
return|;
block|}
end_function
begin_function
DECL|function|size
name|int
name|QColormap
operator|::
name|size
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|d
operator|->
name|mode
operator|==
name|Gray
condition|?
name|d
operator|->
name|r_max
else|:
operator|(
name|d
operator|->
name|mode
operator|==
name|Indexed
condition|?
name|d
operator|->
name|r_max
operator|*
name|d
operator|->
name|g_max
operator|*
name|d
operator|->
name|b_max
else|:
operator|-
literal|1
operator|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|pixel
name|uint
name|QColormap
operator|::
name|pixel
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
specifier|const
block|{
specifier|const
name|QColor
name|c
init|=
name|color
operator|.
name|toRgb
argument_list|()
decl_stmt|;
specifier|const
name|uint
name|r
init|=
operator|(
name|c
operator|.
name|ct
operator|.
name|argb
operator|.
name|red
operator|*
name|d
operator|->
name|r_max
operator|)
operator|>>
literal|16
decl_stmt|;
specifier|const
name|uint
name|g
init|=
operator|(
name|c
operator|.
name|ct
operator|.
name|argb
operator|.
name|green
operator|*
name|d
operator|->
name|g_max
operator|)
operator|>>
literal|16
decl_stmt|;
specifier|const
name|uint
name|b
init|=
operator|(
name|c
operator|.
name|ct
operator|.
name|argb
operator|.
name|blue
operator|*
name|d
operator|->
name|b_max
operator|)
operator|>>
literal|16
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|mode
operator|!=
name|Direct
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|mode
operator|==
name|Gray
condition|)
return|return
name|d
operator|->
name|pixels
operator|.
name|at
argument_list|(
operator|(
name|r
operator|*
literal|30
operator|+
name|g
operator|*
literal|59
operator|+
name|b
operator|*
literal|11
operator|)
operator|/
literal|100
argument_list|)
return|;
return|return
name|d
operator|->
name|pixels
operator|.
name|at
argument_list|(
name|r
operator|*
name|d
operator|->
name|g_max
operator|*
name|d
operator|->
name|b_max
operator|+
name|g
operator|*
name|d
operator|->
name|b_max
operator|+
name|b
argument_list|)
return|;
block|}
return|return
operator|(
name|r
operator|<<
name|d
operator|->
name|r_shift
operator|)
operator|+
operator|(
name|g
operator|<<
name|d
operator|->
name|g_shift
operator|)
operator|+
operator|(
name|b
operator|<<
name|d
operator|->
name|b_shift
operator|)
return|;
block|}
end_function
begin_function
DECL|function|colorAt
specifier|const
name|QColor
name|QColormap
operator|::
name|colorAt
parameter_list|(
name|uint
name|pixel
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|mode
operator|!=
name|Direct
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|pixel
operator|<=
operator|(
name|uint
operator|)
name|d
operator|->
name|colors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|colors
operator|.
name|at
argument_list|(
name|pixel
argument_list|)
return|;
block|}
specifier|const
name|int
name|r
init|=
operator|(
operator|(
operator|(
name|pixel
operator|&
name|d
operator|->
name|visual
operator|->
name|red_mask
operator|)
operator|>>
name|d
operator|->
name|r_shift
operator|)
operator|<<
literal|8
operator|)
operator|/
name|d
operator|->
name|r_max
decl_stmt|;
specifier|const
name|int
name|g
init|=
operator|(
operator|(
operator|(
name|pixel
operator|&
name|d
operator|->
name|visual
operator|->
name|green_mask
operator|)
operator|>>
name|d
operator|->
name|g_shift
operator|)
operator|<<
literal|8
operator|)
operator|/
name|d
operator|->
name|g_max
decl_stmt|;
specifier|const
name|int
name|b
init|=
operator|(
operator|(
operator|(
name|pixel
operator|&
name|d
operator|->
name|visual
operator|->
name|blue_mask
operator|)
operator|>>
name|d
operator|->
name|b_shift
operator|)
operator|<<
literal|8
operator|)
operator|/
name|d
operator|->
name|b_max
decl_stmt|;
return|return
name|QColor
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|colormap
specifier|const
name|QVector
argument_list|<
name|QColor
argument_list|>
name|QColormap
operator|::
name|colormap
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|colors
return|;
block|}
end_function
begin_function
DECL|function|operator =
name|QColormap
modifier|&
name|QColormap
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QColormap
modifier|&
name|colormap
parameter_list|)
block|{
name|qAtomicAssign
argument_list|(
name|d
argument_list|,
name|colormap
operator|.
name|d
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
