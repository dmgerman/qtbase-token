begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qrawfont_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qsystemlibrary_p.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qfontenginedirectwrite_p.h"
end_include
begin_include
include|#
directive|include
file|<dwrite.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_RAWFONT
argument_list|)
end_if
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_namespace
namespace|namespace
block|{
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
struct|struct
DECL|struct|BigEndian
name|BigEndian
block|{
DECL|member|data
name|quint8
name|data
index|[
sizeof|sizeof
argument_list|(
name|T
argument_list|)
index|]
decl_stmt|;
DECL|function|operator T
name|operator
name|T
parameter_list|()
specifier|const
block|{
name|T
name|littleEndian
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|T
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|littleEndian
operator||=
name|data
index|[
name|i
index|]
operator|<<
operator|(
operator|(
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|-
name|i
operator|-
literal|1
operator|)
operator|*
literal|8
operator|)
expr_stmt|;
block|}
return|return
name|littleEndian
return|;
block|}
DECL|function|operator =
name|BigEndian
argument_list|<
name|T
argument_list|>
modifier|&
name|operator
name|=
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|T
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|t
operator|>>
operator|(
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|-
name|i
operator|-
literal|1
operator|)
operator|*
literal|8
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
block|}
struct|;
pragma|#
directive|pragma
name|pack
name|(
name|1
name|)
comment|// Common structure for all formats of the "name" table
DECL|struct|NameTable
struct|struct
name|NameTable
block|{
DECL|member|format
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|format
decl_stmt|;
DECL|member|count
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|count
decl_stmt|;
DECL|member|stringOffset
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|stringOffset
decl_stmt|;
block|}
struct|;
DECL|struct|NameRecord
struct|struct
name|NameRecord
block|{
DECL|member|platformID
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|platformID
decl_stmt|;
DECL|member|encodingID
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|encodingID
decl_stmt|;
DECL|member|languageID
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|languageID
decl_stmt|;
DECL|member|nameID
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|nameID
decl_stmt|;
DECL|member|length
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|length
decl_stmt|;
DECL|member|offset
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|offset
decl_stmt|;
block|}
struct|;
DECL|struct|OffsetSubTable
struct|struct
name|OffsetSubTable
block|{
DECL|member|scalerType
name|BigEndian
argument_list|<
name|quint32
argument_list|>
name|scalerType
decl_stmt|;
DECL|member|numTables
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|numTables
decl_stmt|;
DECL|member|searchRange
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|searchRange
decl_stmt|;
DECL|member|entrySelector
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|entrySelector
decl_stmt|;
DECL|member|rangeShift
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|rangeShift
decl_stmt|;
block|}
struct|;
DECL|struct|TableDirectory
struct|struct
name|TableDirectory
block|{
DECL|member|identifier
name|BigEndian
argument_list|<
name|quint32
argument_list|>
name|identifier
decl_stmt|;
DECL|member|checkSum
name|BigEndian
argument_list|<
name|quint32
argument_list|>
name|checkSum
decl_stmt|;
DECL|member|offset
name|BigEndian
argument_list|<
name|quint32
argument_list|>
name|offset
decl_stmt|;
DECL|member|length
name|BigEndian
argument_list|<
name|quint32
argument_list|>
name|length
decl_stmt|;
block|}
struct|;
DECL|struct|OS2Table
struct|struct
name|OS2Table
block|{
DECL|member|version
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|version
decl_stmt|;
DECL|member|avgCharWidth
name|BigEndian
argument_list|<
name|qint16
argument_list|>
name|avgCharWidth
decl_stmt|;
DECL|member|weightClass
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|weightClass
decl_stmt|;
DECL|member|widthClass
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|widthClass
decl_stmt|;
DECL|member|type
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|type
decl_stmt|;
DECL|member|subscriptXSize
name|BigEndian
argument_list|<
name|qint16
argument_list|>
name|subscriptXSize
decl_stmt|;
DECL|member|subscriptYSize
name|BigEndian
argument_list|<
name|qint16
argument_list|>
name|subscriptYSize
decl_stmt|;
DECL|member|subscriptXOffset
name|BigEndian
argument_list|<
name|qint16
argument_list|>
name|subscriptXOffset
decl_stmt|;
DECL|member|subscriptYOffset
name|BigEndian
argument_list|<
name|qint16
argument_list|>
name|subscriptYOffset
decl_stmt|;
DECL|member|superscriptXSize
name|BigEndian
argument_list|<
name|qint16
argument_list|>
name|superscriptXSize
decl_stmt|;
DECL|member|superscriptYSize
name|BigEndian
argument_list|<
name|qint16
argument_list|>
name|superscriptYSize
decl_stmt|;
DECL|member|superscriptXOffset
name|BigEndian
argument_list|<
name|qint16
argument_list|>
name|superscriptXOffset
decl_stmt|;
DECL|member|superscriptYOffset
name|BigEndian
argument_list|<
name|qint16
argument_list|>
name|superscriptYOffset
decl_stmt|;
DECL|member|strikeOutSize
name|BigEndian
argument_list|<
name|qint16
argument_list|>
name|strikeOutSize
decl_stmt|;
DECL|member|strikeOutPosition
name|BigEndian
argument_list|<
name|qint16
argument_list|>
name|strikeOutPosition
decl_stmt|;
DECL|member|familyClass
name|BigEndian
argument_list|<
name|qint16
argument_list|>
name|familyClass
decl_stmt|;
DECL|member|panose
name|quint8
name|panose
index|[
literal|10
index|]
decl_stmt|;
DECL|member|unicodeRanges
name|BigEndian
argument_list|<
name|quint32
argument_list|>
name|unicodeRanges
index|[
literal|4
index|]
decl_stmt|;
DECL|member|vendorID
name|quint8
name|vendorID
index|[
literal|4
index|]
decl_stmt|;
DECL|member|selection
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|selection
decl_stmt|;
DECL|member|firstCharIndex
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|firstCharIndex
decl_stmt|;
DECL|member|lastCharIndex
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|lastCharIndex
decl_stmt|;
DECL|member|typoAscender
name|BigEndian
argument_list|<
name|qint16
argument_list|>
name|typoAscender
decl_stmt|;
DECL|member|typoDescender
name|BigEndian
argument_list|<
name|qint16
argument_list|>
name|typoDescender
decl_stmt|;
DECL|member|typoLineGap
name|BigEndian
argument_list|<
name|qint16
argument_list|>
name|typoLineGap
decl_stmt|;
DECL|member|winAscent
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|winAscent
decl_stmt|;
DECL|member|winDescent
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|winDescent
decl_stmt|;
DECL|member|codepageRanges
name|BigEndian
argument_list|<
name|quint32
argument_list|>
name|codepageRanges
index|[
literal|2
index|]
decl_stmt|;
DECL|member|height
name|BigEndian
argument_list|<
name|qint16
argument_list|>
name|height
decl_stmt|;
DECL|member|capHeight
name|BigEndian
argument_list|<
name|qint16
argument_list|>
name|capHeight
decl_stmt|;
DECL|member|defaultChar
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|defaultChar
decl_stmt|;
DECL|member|breakChar
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|breakChar
decl_stmt|;
DECL|member|maxContext
name|BigEndian
argument_list|<
name|quint16
argument_list|>
name|maxContext
decl_stmt|;
block|}
struct|;
pragma|#
directive|pragma
name|pack
name|(
name|)
DECL|class|EmbeddedFont
class|class
name|EmbeddedFont
block|{
public|public:
name|EmbeddedFont
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|fontData
parameter_list|)
constructor_decl|;
name|QString
name|changeFamilyName
parameter_list|(
specifier|const
name|QString
modifier|&
name|newFamilyName
parameter_list|)
function_decl|;
DECL|function|data
name|QByteArray
name|data
parameter_list|()
specifier|const
block|{
return|return
name|m_fontData
return|;
block|}
name|TableDirectory
modifier|*
name|tableDirectoryEntry
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|tagName
parameter_list|)
function_decl|;
name|QString
name|familyName
parameter_list|(
name|TableDirectory
modifier|*
name|nameTableDirectory
init|=
literal|0
parameter_list|)
function_decl|;
private|private:
DECL|member|m_fontData
name|QByteArray
name|m_fontData
decl_stmt|;
block|}
class|;
DECL|function|EmbeddedFont
name|EmbeddedFont
operator|::
name|EmbeddedFont
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|fontData
parameter_list|)
member_init_list|:
name|m_fontData
argument_list|(
name|fontData
argument_list|)
block|{     }
DECL|function|tableDirectoryEntry
name|TableDirectory
modifier|*
name|EmbeddedFont
operator|::
name|tableDirectoryEntry
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|tagName
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|tagName
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
specifier|const
name|BigEndian
argument_list|<
name|quint32
argument_list|>
modifier|*
name|tagIdPtr
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|BigEndian
argument_list|<
name|quint32
argument_list|>
operator|*
argument_list|>
argument_list|(
name|tagName
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|quint32
name|tagId
init|=
operator|*
name|tagIdPtr
decl_stmt|;
name|OffsetSubTable
modifier|*
name|offsetSubTable
init|=
cast|reinterpret_cast
argument_list|<
name|OffsetSubTable
operator|*
argument_list|>
argument_list|(
name|m_fontData
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|TableDirectory
modifier|*
name|tableDirectory
init|=
cast|reinterpret_cast
argument_list|<
name|TableDirectory
operator|*
argument_list|>
argument_list|(
name|offsetSubTable
operator|+
literal|1
argument_list|)
decl_stmt|;
name|TableDirectory
modifier|*
name|nameTableDirectoryEntry
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|offsetSubTable
operator|->
name|numTables
condition|;
operator|++
name|i
operator|,
operator|++
name|tableDirectory
control|)
block|{
if|if
condition|(
name|tableDirectory
operator|->
name|identifier
operator|==
name|tagId
condition|)
block|{
name|nameTableDirectoryEntry
operator|=
name|tableDirectory
expr_stmt|;
break|break;
block|}
block|}
return|return
name|nameTableDirectoryEntry
return|;
block|}
DECL|function|familyName
name|QString
name|EmbeddedFont
operator|::
name|familyName
parameter_list|(
name|TableDirectory
modifier|*
name|nameTableDirectoryEntry
parameter_list|)
block|{
name|QString
name|name
decl_stmt|;
if|if
condition|(
name|nameTableDirectoryEntry
operator|==
literal|0
condition|)
name|nameTableDirectoryEntry
operator|=
name|tableDirectoryEntry
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
if|if
condition|(
name|nameTableDirectoryEntry
operator|!=
literal|0
condition|)
block|{
name|NameTable
modifier|*
name|nameTable
init|=
cast|reinterpret_cast
argument_list|<
name|NameTable
operator|*
argument_list|>
argument_list|(
name|m_fontData
operator|.
name|data
argument_list|()
operator|+
name|nameTableDirectoryEntry
operator|->
name|offset
argument_list|)
decl_stmt|;
name|NameRecord
modifier|*
name|nameRecord
init|=
cast|reinterpret_cast
argument_list|<
name|NameRecord
operator|*
argument_list|>
argument_list|(
name|nameTable
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nameTable
operator|->
name|count
condition|;
operator|++
name|i
operator|,
operator|++
name|nameRecord
control|)
block|{
if|if
condition|(
name|nameRecord
operator|->
name|nameID
operator|==
literal|1
operator|&&
name|nameRecord
operator|->
name|platformID
operator|==
literal|3
comment|// Windows
operator|&&
name|nameRecord
operator|->
name|languageID
operator|==
literal|0x0409
condition|)
block|{
comment|// US English
specifier|const
name|void
modifier|*
name|ptr
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint8
operator|*
argument_list|>
argument_list|(
name|nameTable
argument_list|)
operator|+
name|nameTable
operator|->
name|stringOffset
operator|+
name|nameRecord
operator|->
name|offset
decl_stmt|;
specifier|const
name|BigEndian
argument_list|<
name|quint16
argument_list|>
modifier|*
name|s
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|BigEndian
argument_list|<
name|quint16
argument_list|>
operator|*
argument_list|>
argument_list|(
name|ptr
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|nameRecord
operator|->
name|length
operator|/
sizeof|sizeof
argument_list|(
name|quint16
argument_list|)
condition|;
operator|++
name|j
control|)
name|name
operator|+=
name|QChar
argument_list|(
name|s
index|[
name|j
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|name
return|;
block|}
DECL|function|changeFamilyName
name|QString
name|EmbeddedFont
operator|::
name|changeFamilyName
parameter_list|(
specifier|const
name|QString
modifier|&
name|newFamilyName
parameter_list|)
block|{
name|TableDirectory
modifier|*
name|nameTableDirectoryEntry
init|=
name|tableDirectoryEntry
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameTableDirectoryEntry
operator|==
literal|0
condition|)
return|return
name|QString
argument_list|()
return|;
name|QString
name|oldFamilyName
init|=
name|familyName
argument_list|(
name|nameTableDirectoryEntry
argument_list|)
decl_stmt|;
comment|// Reserve size for name table header, five required name records and string
specifier|const
name|int
name|requiredRecordCount
init|=
literal|5
decl_stmt|;
name|quint16
name|nameIds
index|[
name|requiredRecordCount
index|]
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|6
block|}
decl_stmt|;
name|int
name|sizeOfHeader
init|=
sizeof|sizeof
argument_list|(
name|NameTable
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|NameRecord
argument_list|)
operator|*
name|requiredRecordCount
decl_stmt|;
name|int
name|newFamilyNameSize
init|=
name|newFamilyName
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|quint16
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|regularString
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Regular"
argument_list|)
decl_stmt|;
name|int
name|regularStringSize
init|=
name|regularString
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|quint16
argument_list|)
decl_stmt|;
comment|// Align table size of table to 32 bits (pad with 0)
name|int
name|fullSize
init|=
operator|(
operator|(
name|sizeOfHeader
operator|+
name|newFamilyNameSize
operator|+
name|regularStringSize
operator|)
operator|&
operator|~
literal|3
operator|)
operator|+
literal|4
decl_stmt|;
name|QByteArray
name|newNameTable
argument_list|(
name|fullSize
argument_list|,
name|char
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|NameTable
modifier|*
name|nameTable
init|=
cast|reinterpret_cast
argument_list|<
name|NameTable
operator|*
argument_list|>
argument_list|(
name|newNameTable
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|nameTable
operator|->
name|count
operator|=
name|requiredRecordCount
expr_stmt|;
name|nameTable
operator|->
name|stringOffset
operator|=
name|sizeOfHeader
expr_stmt|;
name|NameRecord
modifier|*
name|nameRecord
init|=
cast|reinterpret_cast
argument_list|<
name|NameRecord
operator|*
argument_list|>
argument_list|(
name|nameTable
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|requiredRecordCount
condition|;
operator|++
name|i
operator|,
name|nameRecord
operator|++
control|)
block|{
name|nameRecord
operator|->
name|nameID
operator|=
name|nameIds
index|[
name|i
index|]
expr_stmt|;
name|nameRecord
operator|->
name|encodingID
operator|=
literal|1
expr_stmt|;
name|nameRecord
operator|->
name|languageID
operator|=
literal|0x0409
expr_stmt|;
name|nameRecord
operator|->
name|platformID
operator|=
literal|3
expr_stmt|;
name|nameRecord
operator|->
name|length
operator|=
name|newFamilyNameSize
expr_stmt|;
comment|// Special case for sub-family
if|if
condition|(
name|nameIds
index|[
name|i
index|]
operator|==
literal|4
condition|)
block|{
name|nameRecord
operator|->
name|offset
operator|=
name|newFamilyNameSize
expr_stmt|;
name|nameRecord
operator|->
name|length
operator|=
name|regularStringSize
expr_stmt|;
block|}
block|}
comment|// nameRecord now points to string data
name|BigEndian
argument_list|<
name|quint16
argument_list|>
modifier|*
name|stringStorage
init|=
cast|reinterpret_cast
argument_list|<
name|BigEndian
argument_list|<
name|quint16
argument_list|>
operator|*
argument_list|>
argument_list|(
name|nameRecord
argument_list|)
decl_stmt|;
specifier|const
name|quint16
modifier|*
name|sourceString
init|=
name|newFamilyName
operator|.
name|utf16
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newFamilyName
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|stringStorage
index|[
name|i
index|]
operator|=
name|sourceString
index|[
name|i
index|]
expr_stmt|;
name|stringStorage
operator|+=
name|newFamilyName
operator|.
name|size
argument_list|()
expr_stmt|;
name|sourceString
operator|=
name|regularString
operator|.
name|utf16
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regularString
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|stringStorage
index|[
name|i
index|]
operator|=
name|sourceString
index|[
name|i
index|]
expr_stmt|;
block|}
name|quint32
modifier|*
name|p
init|=
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|newNameTable
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|quint32
modifier|*
name|tableEnd
init|=
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|newNameTable
operator|.
name|data
argument_list|()
operator|+
name|fullSize
argument_list|)
decl_stmt|;
name|quint32
name|checkSum
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|p
operator|<
name|tableEnd
condition|)
name|checkSum
operator|+=
operator|*
operator|(
name|p
operator|++
operator|)
expr_stmt|;
name|nameTableDirectoryEntry
operator|->
name|checkSum
operator|=
name|checkSum
expr_stmt|;
name|nameTableDirectoryEntry
operator|->
name|offset
operator|=
name|m_fontData
operator|.
name|size
argument_list|()
expr_stmt|;
name|nameTableDirectoryEntry
operator|->
name|length
operator|=
name|fullSize
expr_stmt|;
name|m_fontData
operator|.
name|append
argument_list|(
name|newNameTable
argument_list|)
expr_stmt|;
return|return
name|oldFamilyName
return|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
DECL|class|DirectWriteFontFileStream
class|class
name|DirectWriteFontFileStream
super|:
specifier|public
name|IDWriteFontFileStream
block|{
public|public:
DECL|function|DirectWriteFontFileStream
name|DirectWriteFontFileStream
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|fontData
parameter_list|)
member_init_list|:
name|m_fontData
argument_list|(
name|fontData
argument_list|)
member_init_list|,
name|m_referenceCount
argument_list|(
literal|0
argument_list|)
block|{         }
DECL|function|~DirectWriteFontFileStream
name|~
name|DirectWriteFontFileStream
parameter_list|()
block|{         }
name|HRESULT
name|STDMETHODCALLTYPE
name|QueryInterface
parameter_list|(
name|REFIID
name|iid
parameter_list|,
name|void
modifier|*
modifier|*
name|object
parameter_list|)
function_decl|;
name|ULONG
name|STDMETHODCALLTYPE
name|AddRef
parameter_list|()
function_decl|;
name|ULONG
name|STDMETHODCALLTYPE
name|Release
parameter_list|()
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|ReadFileFragment
parameter_list|(
specifier|const
name|void
modifier|*
modifier|*
name|fragmentStart
parameter_list|,
name|UINT64
name|fileOffset
parameter_list|,
name|UINT64
name|fragmentSize
parameter_list|,
name|OUT
name|void
modifier|*
modifier|*
name|fragmentContext
parameter_list|)
function_decl|;
name|void
name|STDMETHODCALLTYPE
name|ReleaseFileFragment
parameter_list|(
name|void
modifier|*
name|fragmentContext
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|GetFileSize
parameter_list|(
name|OUT
name|UINT64
modifier|*
name|fileSize
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|GetLastWriteTime
parameter_list|(
name|OUT
name|UINT64
modifier|*
name|lastWriteTime
parameter_list|)
function_decl|;
private|private:
DECL|member|m_fontData
name|QByteArray
name|m_fontData
decl_stmt|;
DECL|member|m_referenceCount
name|ULONG
name|m_referenceCount
decl_stmt|;
block|}
class|;
DECL|function|QueryInterface
name|HRESULT
name|STDMETHODCALLTYPE
name|DirectWriteFontFileStream
operator|::
name|QueryInterface
parameter_list|(
name|REFIID
name|iid
parameter_list|,
name|void
modifier|*
modifier|*
name|object
parameter_list|)
block|{
if|if
condition|(
name|iid
operator|==
name|IID_IUnknown
operator|||
name|iid
operator|==
name|__uuidof
argument_list|(
name|IDWriteFontFileStream
argument_list|)
condition|)
block|{
operator|*
name|object
operator|=
name|this
expr_stmt|;
name|AddRef
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
else|else
block|{
operator|*
name|object
operator|=
name|NULL
expr_stmt|;
return|return
name|E_NOINTERFACE
return|;
block|}
block|}
DECL|function|AddRef
name|ULONG
name|STDMETHODCALLTYPE
name|DirectWriteFontFileStream
operator|::
name|AddRef
parameter_list|()
block|{
return|return
name|InterlockedIncrement
argument_list|(
operator|&
name|m_referenceCount
argument_list|)
return|;
block|}
DECL|function|Release
name|ULONG
name|STDMETHODCALLTYPE
name|DirectWriteFontFileStream
operator|::
name|Release
parameter_list|()
block|{
name|ULONG
name|newCount
init|=
name|InterlockedDecrement
argument_list|(
operator|&
name|m_referenceCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCount
operator|==
literal|0
condition|)
operator|delete
name|this
expr_stmt|;
return|return
name|newCount
return|;
block|}
DECL|function|ReadFileFragment
name|HRESULT
name|STDMETHODCALLTYPE
name|DirectWriteFontFileStream
operator|::
name|ReadFileFragment
parameter_list|(
specifier|const
name|void
modifier|*
modifier|*
name|fragmentStart
parameter_list|,
name|UINT64
name|fileOffset
parameter_list|,
name|UINT64
name|fragmentSize
parameter_list|,
name|OUT
name|void
modifier|*
modifier|*
name|fragmentContext
parameter_list|)
block|{
operator|*
name|fragmentContext
operator|=
name|NULL
expr_stmt|;
if|if
condition|(
name|fragmentSize
operator|+
name|fileOffset
operator|<=
name|m_fontData
operator|.
name|size
argument_list|()
condition|)
block|{
operator|*
name|fragmentStart
operator|=
name|m_fontData
operator|.
name|data
argument_list|()
operator|+
name|fileOffset
expr_stmt|;
return|return
name|S_OK
return|;
block|}
else|else
block|{
operator|*
name|fragmentStart
operator|=
name|NULL
expr_stmt|;
return|return
name|E_FAIL
return|;
block|}
block|}
DECL|function|ReleaseFileFragment
name|void
name|STDMETHODCALLTYPE
name|DirectWriteFontFileStream
operator|::
name|ReleaseFileFragment
parameter_list|(
name|void
modifier|*
parameter_list|)
block|{     }
DECL|function|GetFileSize
name|HRESULT
name|STDMETHODCALLTYPE
name|DirectWriteFontFileStream
operator|::
name|GetFileSize
parameter_list|(
name|UINT64
modifier|*
name|fileSize
parameter_list|)
block|{
operator|*
name|fileSize
operator|=
name|m_fontData
operator|.
name|size
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
DECL|function|GetLastWriteTime
name|HRESULT
name|STDMETHODCALLTYPE
name|DirectWriteFontFileStream
operator|::
name|GetLastWriteTime
parameter_list|(
name|UINT64
modifier|*
name|lastWriteTime
parameter_list|)
block|{
operator|*
name|lastWriteTime
operator|=
literal|0
expr_stmt|;
return|return
name|E_NOTIMPL
return|;
block|}
DECL|class|DirectWriteFontFileLoader
class|class
name|DirectWriteFontFileLoader
super|:
specifier|public
name|IDWriteFontFileLoader
block|{
public|public:
DECL|function|DirectWriteFontFileLoader
name|DirectWriteFontFileLoader
parameter_list|()
member_init_list|:
name|m_referenceCount
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|~DirectWriteFontFileLoader
name|~
name|DirectWriteFontFileLoader
parameter_list|()
block|{         }
DECL|function|addKey
specifier|inline
name|void
name|addKey
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|fontData
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|m_fontDatas
operator|.
name|contains
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|m_fontDatas
operator|.
name|insert
argument_list|(
name|key
argument_list|,
name|fontData
argument_list|)
expr_stmt|;
block|}
DECL|function|removeKey
specifier|inline
name|void
name|removeKey
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|)
block|{
name|m_fontDatas
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|HRESULT
name|STDMETHODCALLTYPE
name|QueryInterface
parameter_list|(
name|REFIID
name|iid
parameter_list|,
name|void
modifier|*
modifier|*
name|object
parameter_list|)
function_decl|;
name|ULONG
name|STDMETHODCALLTYPE
name|AddRef
parameter_list|()
function_decl|;
name|ULONG
name|STDMETHODCALLTYPE
name|Release
parameter_list|()
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|CreateStreamFromKey
parameter_list|(
name|void
specifier|const
modifier|*
name|fontFileReferenceKey
parameter_list|,
name|UINT32
name|fontFileReferenceKeySize
parameter_list|,
name|OUT
name|IDWriteFontFileStream
modifier|*
modifier|*
name|fontFileStream
parameter_list|)
function_decl|;
private|private:
DECL|member|m_referenceCount
name|ULONG
name|m_referenceCount
decl_stmt|;
DECL|member|m_fontDatas
name|QHash
argument_list|<
specifier|const
name|void
modifier|*
argument_list|,
name|QByteArray
argument_list|>
name|m_fontDatas
decl_stmt|;
block|}
class|;
DECL|function|QueryInterface
name|HRESULT
name|STDMETHODCALLTYPE
name|DirectWriteFontFileLoader
operator|::
name|QueryInterface
parameter_list|(
specifier|const
name|IID
modifier|&
name|iid
parameter_list|,
name|void
modifier|*
modifier|*
name|object
parameter_list|)
block|{
if|if
condition|(
name|iid
operator|==
name|IID_IUnknown
operator|||
name|iid
operator|==
name|__uuidof
argument_list|(
name|IDWriteFontFileLoader
argument_list|)
condition|)
block|{
operator|*
name|object
operator|=
name|this
expr_stmt|;
name|AddRef
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
else|else
block|{
operator|*
name|object
operator|=
name|NULL
expr_stmt|;
return|return
name|E_NOINTERFACE
return|;
block|}
block|}
DECL|function|AddRef
name|ULONG
name|STDMETHODCALLTYPE
name|DirectWriteFontFileLoader
operator|::
name|AddRef
parameter_list|()
block|{
return|return
name|InterlockedIncrement
argument_list|(
operator|&
name|m_referenceCount
argument_list|)
return|;
block|}
DECL|function|Release
name|ULONG
name|STDMETHODCALLTYPE
name|DirectWriteFontFileLoader
operator|::
name|Release
parameter_list|()
block|{
name|ULONG
name|newCount
init|=
name|InterlockedDecrement
argument_list|(
operator|&
name|m_referenceCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCount
operator|==
literal|0
condition|)
operator|delete
name|this
expr_stmt|;
return|return
name|newCount
return|;
block|}
DECL|function|CreateStreamFromKey
name|HRESULT
name|STDMETHODCALLTYPE
name|DirectWriteFontFileLoader
operator|::
name|CreateStreamFromKey
parameter_list|(
name|void
specifier|const
modifier|*
name|fontFileReferenceKey
parameter_list|,
name|UINT32
name|fontFileReferenceKeySize
parameter_list|,
name|IDWriteFontFileStream
modifier|*
modifier|*
name|fontFileStream
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|fontFileReferenceKeySize
argument_list|)
expr_stmt|;
if|if
condition|(
name|fontFileReferenceKeySize
operator|!=
sizeof|sizeof
argument_list|(
specifier|const
name|void
operator|*
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"DirectWriteFontFileLoader::CreateStreamFromKey: Wrong key size"
argument_list|)
expr_stmt|;
return|return
name|E_FAIL
return|;
block|}
specifier|const
name|void
modifier|*
name|key
init|=
operator|*
cast|reinterpret_cast
argument_list|<
name|void
operator|*
specifier|const
operator|*
argument_list|>
argument_list|(
name|fontFileReferenceKey
argument_list|)
decl_stmt|;
operator|*
name|fontFileStream
operator|=
name|NULL
expr_stmt|;
if|if
condition|(
operator|!
name|m_fontDatas
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
return|return
name|E_FAIL
return|;
name|QByteArray
name|fontData
init|=
name|m_fontDatas
operator|.
name|value
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|DirectWriteFontFileStream
modifier|*
name|stream
init|=
operator|new
name|DirectWriteFontFileStream
argument_list|(
name|fontData
argument_list|)
decl_stmt|;
name|stream
operator|->
name|AddRef
argument_list|()
expr_stmt|;
operator|*
name|fontFileStream
operator|=
name|stream
expr_stmt|;
return|return
name|S_OK
return|;
block|}
DECL|class|CustomFontFileLoader
class|class
name|CustomFontFileLoader
block|{
public|public:
DECL|function|CustomFontFileLoader
name|CustomFontFileLoader
parameter_list|()
member_init_list|:
name|m_directWriteFactory
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_directWriteFontFileLoader
argument_list|(
literal|0
argument_list|)
block|{
name|HRESULT
name|hres
init|=
name|DWriteCreateFactory
argument_list|(
name|DWRITE_FACTORY_TYPE_SHARED
argument_list|,
name|__uuidof
argument_list|(
name|IDWriteFactory
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
name|IUnknown
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|m_directWriteFactory
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hres
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|hres
argument_list|,
literal|"CustomFontFileLoader::CustomFontFileLoader: "
literal|"DWriteCreateFactory failed."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_directWriteFontFileLoader
operator|=
operator|new
name|DirectWriteFontFileLoader
argument_list|()
expr_stmt|;
name|m_directWriteFactory
operator|->
name|RegisterFontFileLoader
argument_list|(
name|m_directWriteFontFileLoader
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|~CustomFontFileLoader
name|~
name|CustomFontFileLoader
parameter_list|()
block|{
if|if
condition|(
name|m_directWriteFactory
operator|!=
literal|0
operator|&&
name|m_directWriteFontFileLoader
operator|!=
literal|0
condition|)
name|m_directWriteFactory
operator|->
name|UnregisterFontFileLoader
argument_list|(
name|m_directWriteFontFileLoader
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_directWriteFactory
operator|!=
literal|0
condition|)
name|m_directWriteFactory
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
DECL|function|addKey
name|void
name|addKey
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|fontData
parameter_list|)
block|{
if|if
condition|(
name|m_directWriteFontFileLoader
operator|!=
literal|0
condition|)
name|m_directWriteFontFileLoader
operator|->
name|addKey
argument_list|(
name|key
argument_list|,
name|fontData
argument_list|)
expr_stmt|;
block|}
DECL|function|removeKey
name|void
name|removeKey
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|)
block|{
if|if
condition|(
name|m_directWriteFontFileLoader
operator|!=
literal|0
condition|)
name|m_directWriteFontFileLoader
operator|->
name|removeKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
DECL|function|loader
name|IDWriteFontFileLoader
modifier|*
name|loader
parameter_list|()
specifier|const
block|{
return|return
name|m_directWriteFontFileLoader
return|;
block|}
private|private:
DECL|member|m_directWriteFactory
name|IDWriteFactory
modifier|*
name|m_directWriteFactory
decl_stmt|;
DECL|member|m_directWriteFontFileLoader
name|DirectWriteFontFileLoader
modifier|*
name|m_directWriteFontFileLoader
decl_stmt|;
block|}
class|;
endif|#
directive|endif
block|}
end_namespace
begin_comment
comment|// Anonymous namespace
end_comment
begin_comment
comment|// From qfontdatabase_win.cpp
end_comment
begin_function_decl
specifier|extern
name|QFontEngine
modifier|*
name|qt_load_font_engine_win
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// From qfontdatabase.cpp
end_comment
begin_function_decl
specifier|extern
name|QFont
operator|::
name|Weight
name|weightFromInteger
parameter_list|(
name|int
name|weight
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|platformCleanUp
name|void
name|QRawFontPrivate
operator|::
name|platformCleanUp
parameter_list|()
block|{
if|if
condition|(
name|fontHandle
operator|!=
name|NULL
condition|)
block|{
if|if
condition|(
name|ptrRemoveFontMemResourceEx
operator|==
name|NULL
condition|)
block|{
name|void
modifier|*
name|func
init|=
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"gdi32"
argument_list|)
argument_list|,
literal|"RemoveFontMemResourceEx"
argument_list|)
decl_stmt|;
name|ptrRemoveFontMemResourceEx
operator|=
cast|reinterpret_cast
argument_list|<
name|QRawFontPrivate
operator|::
name|PtrRemoveFontMemResourceEx
argument_list|>
argument_list|(
name|func
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ptrRemoveFontMemResourceEx
operator|==
name|NULL
condition|)
block|{
name|qWarning
argument_list|(
literal|"QRawFont::platformCleanUp: Can't find RemoveFontMemResourceEx in gdi32"
argument_list|)
expr_stmt|;
name|fontHandle
operator|=
name|NULL
expr_stmt|;
block|}
else|else
block|{
name|ptrRemoveFontMemResourceEx
argument_list|(
name|fontHandle
argument_list|)
expr_stmt|;
name|fontHandle
operator|=
name|NULL
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|platformLoadFromData
name|void
name|QRawFontPrivate
operator|::
name|platformLoadFromData
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|_fontData
parameter_list|,
name|int
name|pixelSize
parameter_list|,
name|QFont
operator|::
name|HintingPreference
name|hintingPreference
parameter_list|)
block|{
name|QByteArray
name|fontData
argument_list|(
name|_fontData
argument_list|)
decl_stmt|;
name|EmbeddedFont
name|font
argument_list|(
name|fontData
argument_list|)
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
if|if
condition|(
name|hintingPreference
operator|==
name|QFont
operator|::
name|PreferDefaultHinting
operator|||
name|hintingPreference
operator|==
name|QFont
operator|::
name|PreferFullHinting
condition|)
endif|#
directive|endif
block|{
name|GUID
name|guid
decl_stmt|;
name|CoCreateGuid
argument_list|(
operator|&
name|guid
argument_list|)
expr_stmt|;
name|QString
name|uniqueFamilyName
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"f"
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|guid
operator|.
name|Data1
argument_list|,
literal|36
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|guid
operator|.
name|Data2
argument_list|,
literal|36
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|guid
operator|.
name|Data3
argument_list|,
literal|36
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
operator|*
cast|reinterpret_cast
argument_list|<
name|quint64
operator|*
argument_list|>
argument_list|(
name|guid
operator|.
name|Data4
argument_list|)
argument_list|,
literal|36
argument_list|)
decl_stmt|;
name|QString
name|actualFontName
init|=
name|font
operator|.
name|changeFamilyName
argument_list|(
name|uniqueFamilyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualFontName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QRawFont::platformLoadFromData: Can't change family name of font"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|ptrAddFontMemResourceEx
operator|==
name|NULL
operator|||
name|ptrRemoveFontMemResourceEx
operator|==
name|NULL
condition|)
block|{
name|void
modifier|*
name|func
init|=
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"gdi32"
argument_list|)
argument_list|,
literal|"RemoveFontMemResourceEx"
argument_list|)
decl_stmt|;
name|ptrRemoveFontMemResourceEx
operator|=
cast|reinterpret_cast
argument_list|<
name|QRawFontPrivate
operator|::
name|PtrRemoveFontMemResourceEx
argument_list|>
argument_list|(
name|func
argument_list|)
expr_stmt|;
name|func
operator|=
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"gdi32"
argument_list|)
argument_list|,
literal|"AddFontMemResourceEx"
argument_list|)
expr_stmt|;
name|ptrAddFontMemResourceEx
operator|=
cast|reinterpret_cast
argument_list|<
name|QRawFontPrivate
operator|::
name|PtrAddFontMemResourceEx
argument_list|>
argument_list|(
name|func
argument_list|)
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|fontHandle
operator|==
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|ptrAddFontMemResourceEx
operator|!=
name|NULL
operator|&&
name|ptrRemoveFontMemResourceEx
operator|!=
name|NULL
condition|)
block|{
name|DWORD
name|count
init|=
literal|0
decl_stmt|;
name|fontData
operator|=
name|font
operator|.
name|data
argument_list|()
expr_stmt|;
name|fontHandle
operator|=
name|ptrAddFontMemResourceEx
argument_list|(
name|fontData
operator|.
name|data
argument_list|()
argument_list|,
name|fontData
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|&
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
operator|&&
name|fontHandle
operator|!=
name|NULL
condition|)
block|{
name|ptrRemoveFontMemResourceEx
argument_list|(
name|fontHandle
argument_list|)
expr_stmt|;
name|fontHandle
operator|=
name|NULL
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fontHandle
operator|==
name|NULL
condition|)
block|{
name|qWarning
argument_list|(
literal|"QRawFont::platformLoadFromData: AddFontMemResourceEx failed"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QFontDef
name|request
decl_stmt|;
name|request
operator|.
name|family
operator|=
name|uniqueFamilyName
expr_stmt|;
name|request
operator|.
name|pixelSize
operator|=
name|pixelSize
expr_stmt|;
name|request
operator|.
name|styleStrategy
operator|=
name|QFont
operator|::
name|NoFontMerging
operator||
name|QFont
operator|::
name|PreferMatch
expr_stmt|;
name|request
operator|.
name|hintingPreference
operator|=
name|hintingPreference
expr_stmt|;
name|fontEngine
operator|=
name|qt_load_font_engine_win
argument_list|(
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|family
operator|!=
name|fontEngine
operator|->
name|fontDef
operator|.
name|family
condition|)
block|{
name|qWarning
argument_list|(
literal|"QRawFont::platformLoadFromData: Failed to load font. "
literal|"Got fallback instead: %s"
argument_list|,
name|qPrintable
argument_list|(
name|fontEngine
operator|->
name|fontDef
operator|.
name|family
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fontEngine
operator|->
name|cache_count
operator|==
literal|0
operator|&&
name|fontEngine
operator|->
name|ref
operator|==
literal|0
condition|)
operator|delete
name|fontEngine
expr_stmt|;
name|fontEngine
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|Q_ASSERT
argument_list|(
name|fontEngine
operator|->
name|cache_count
operator|==
literal|0
operator|&&
name|fontEngine
operator|->
name|ref
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Override the generated font name
cast|static_cast
argument_list|<
name|QFontEngineWin
operator|*
argument_list|>
argument_list|(
name|fontEngine
argument_list|)
operator|->
name|uniqueFamilyName
operator|=
name|uniqueFamilyName
expr_stmt|;
name|fontEngine
operator|->
name|fontDef
operator|.
name|family
operator|=
name|actualFontName
expr_stmt|;
name|fontEngine
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
block|}
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
else|else
block|{
name|CustomFontFileLoader
name|fontFileLoader
decl_stmt|;
name|fontFileLoader
operator|.
name|addKey
argument_list|(
name|this
argument_list|,
name|fontData
argument_list|)
expr_stmt|;
name|IDWriteFactory
modifier|*
name|factory
init|=
name|NULL
decl_stmt|;
name|HRESULT
name|hres
init|=
name|DWriteCreateFactory
argument_list|(
name|DWRITE_FACTORY_TYPE_SHARED
argument_list|,
name|__uuidof
argument_list|(
name|IDWriteFactory
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
name|IUnknown
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|factory
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hres
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|hres
argument_list|,
literal|"QRawFont::platformLoadFromData: DWriteCreateFactory failed"
argument_list|)
expr_stmt|;
return|return;
block|}
name|IDWriteFontFile
modifier|*
name|fontFile
init|=
name|NULL
decl_stmt|;
name|void
modifier|*
name|key
init|=
name|this
decl_stmt|;
name|hres
operator|=
name|factory
operator|->
name|CreateCustomFontFileReference
argument_list|(
operator|&
name|key
argument_list|,
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
argument_list|,
name|fontFileLoader
operator|.
name|loader
argument_list|()
argument_list|,
operator|&
name|fontFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hres
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|hres
argument_list|,
literal|"QRawFont::platformLoadFromData: "
literal|"CreateCustomFontFileReference failed"
argument_list|)
expr_stmt|;
name|factory
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return;
block|}
name|BOOL
name|isSupportedFontType
decl_stmt|;
name|DWRITE_FONT_FILE_TYPE
name|fontFileType
decl_stmt|;
name|DWRITE_FONT_FACE_TYPE
name|fontFaceType
decl_stmt|;
name|UINT32
name|numberOfFaces
decl_stmt|;
name|fontFile
operator|->
name|Analyze
argument_list|(
operator|&
name|isSupportedFontType
argument_list|,
operator|&
name|fontFileType
argument_list|,
operator|&
name|fontFaceType
argument_list|,
operator|&
name|numberOfFaces
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isSupportedFontType
condition|)
block|{
name|fontFile
operator|->
name|Release
argument_list|()
expr_stmt|;
name|factory
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return;
block|}
name|IDWriteFontFace
modifier|*
name|directWriteFontFace
init|=
name|NULL
decl_stmt|;
name|hres
operator|=
name|factory
operator|->
name|CreateFontFace
argument_list|(
name|fontFaceType
argument_list|,
literal|1
argument_list|,
operator|&
name|fontFile
argument_list|,
literal|0
argument_list|,
name|DWRITE_FONT_SIMULATIONS_NONE
argument_list|,
operator|&
name|directWriteFontFace
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hres
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|hres
argument_list|,
literal|"QRawFont::platformLoadFromData: CreateFontFace failed"
argument_list|)
expr_stmt|;
name|fontFile
operator|->
name|Release
argument_list|()
expr_stmt|;
name|factory
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return;
block|}
name|fontFile
operator|->
name|Release
argument_list|()
expr_stmt|;
name|fontEngine
operator|=
operator|new
name|QFontEngineDirectWrite
argument_list|(
name|factory
argument_list|,
name|directWriteFontFace
argument_list|,
name|pixelSize
argument_list|)
expr_stmt|;
comment|// Get font family from font data
name|fontEngine
operator|->
name|fontDef
operator|.
name|family
operator|=
name|font
operator|.
name|familyName
argument_list|()
expr_stmt|;
name|fontEngine
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|directWriteFontFace
operator|->
name|Release
argument_list|()
expr_stmt|;
name|factory
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
comment|// Get style and weight info
if|if
condition|(
name|fontEngine
operator|!=
literal|0
condition|)
block|{
name|TableDirectory
modifier|*
name|os2TableEntry
init|=
name|font
operator|.
name|tableDirectoryEntry
argument_list|(
literal|"OS/2"
argument_list|)
decl_stmt|;
if|if
condition|(
name|os2TableEntry
operator|!=
literal|0
condition|)
block|{
specifier|const
name|OS2Table
modifier|*
name|os2Table
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|OS2Table
operator|*
argument_list|>
argument_list|(
name|fontData
operator|.
name|constData
argument_list|()
operator|+
name|os2TableEntry
operator|->
name|offset
argument_list|)
decl_stmt|;
name|bool
name|italic
init|=
name|os2Table
operator|->
name|selection
operator|&
literal|1
decl_stmt|;
name|bool
name|oblique
init|=
name|os2Table
operator|->
name|selection
operator|&
literal|128
decl_stmt|;
if|if
condition|(
name|italic
condition|)
name|fontEngine
operator|->
name|fontDef
operator|.
name|style
operator|=
name|QFont
operator|::
name|StyleItalic
expr_stmt|;
elseif|else
if|if
condition|(
name|oblique
condition|)
name|fontEngine
operator|->
name|fontDef
operator|.
name|style
operator|=
name|QFont
operator|::
name|StyleOblique
expr_stmt|;
else|else
name|fontEngine
operator|->
name|fontDef
operator|.
name|style
operator|=
name|QFont
operator|::
name|StyleNormal
expr_stmt|;
name|fontEngine
operator|->
name|fontDef
operator|.
name|weight
operator|=
name|weightFromInteger
argument_list|(
name|os2Table
operator|->
name|weightClass
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_RAWFONT
end_comment
end_unit
