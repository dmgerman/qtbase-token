begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QProcess>
end_include
begin_include
include|#
directive|include
file|<QLibraryInfo>
end_include
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_include
include|#
directive|include
file|<io.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|quotePath
specifier|static
name|QString
name|quotePath
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
block|{
if|if
condition|(
operator|!
name|s
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\"'
argument_list|)
argument_list|)
operator|&&
name|s
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
condition|)
return|return
name|QLatin1Char
argument_list|(
literal|'\"'
argument_list|)
operator|+
name|s
operator|+
name|QLatin1Char
argument_list|(
literal|'\"'
argument_list|)
return|;
return|return
name|s
return|;
block|}
end_function
begin_function
DECL|function|runWithQtInEnvironment
specifier|static
name|bool
name|runWithQtInEnvironment
parameter_list|(
specifier|const
name|QString
modifier|&
name|cmd
parameter_list|)
block|{
name|QProcess
name|proc
decl_stmt|;
comment|// prepend the qt binary directory to the path
name|QStringList
name|env
init|=
name|QProcess
operator|::
name|systemEnvironment
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|env
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|var
init|=
name|env
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|setidx
init|=
name|var
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'='
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|setidx
operator|!=
operator|-
literal|1
condition|)
block|{
name|QString
name|varname
init|=
name|var
operator|.
name|left
argument_list|(
name|setidx
argument_list|)
operator|.
name|trimmed
argument_list|()
operator|.
name|toUpper
argument_list|()
decl_stmt|;
if|if
condition|(
name|varname
operator|==
name|QLatin1String
argument_list|(
literal|"PATH"
argument_list|)
condition|)
block|{
name|var
operator|=
name|var
operator|.
name|mid
argument_list|(
name|setidx
operator|+
literal|1
argument_list|)
expr_stmt|;
name|var
operator|=
name|QLatin1String
argument_list|(
literal|"PATH="
argument_list|)
operator|+
name|QLibraryInfo
operator|::
name|location
argument_list|(
name|QLibraryInfo
operator|::
name|BinariesPath
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
operator|+
name|var
expr_stmt|;
name|env
index|[
name|i
index|]
operator|=
name|var
expr_stmt|;
break|break;
block|}
block|}
block|}
name|proc
operator|.
name|setEnvironment
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|proc
operator|.
name|start
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|proc
operator|.
name|waitForFinished
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
operator|(
name|proc
operator|.
name|exitCode
argument_list|()
operator|==
literal|0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|attachTypeLibrary
specifier|static
name|bool
name|attachTypeLibrary
parameter_list|(
specifier|const
name|QString
modifier|&
name|applicationName
parameter_list|,
name|int
name|resource
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|,
name|QString
modifier|*
name|errorMessage
parameter_list|)
block|{
name|HANDLE
name|hExe
init|=
name|BeginUpdateResource
argument_list|(
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|applicationName
operator|.
name|utf16
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|hExe
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|errorMessage
condition|)
operator|*
name|errorMessage
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Failed to attach type library to binary %1 - could not open file."
argument_list|)
operator|.
name|arg
argument_list|(
name|applicationName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|UpdateResource
argument_list|(
name|hExe
argument_list|,
literal|L"TYPELIB"
argument_list|,
name|MAKEINTRESOURCE
argument_list|(
name|resource
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
name|data
operator|.
name|data
argument_list|()
argument_list|,
name|data
operator|.
name|count
argument_list|()
argument_list|)
condition|)
block|{
name|EndUpdateResource
argument_list|(
name|hExe
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|errorMessage
condition|)
operator|*
name|errorMessage
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Failed to attach type library to binary %1 - could not update file."
argument_list|)
operator|.
name|arg
argument_list|(
name|applicationName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|EndUpdateResource
argument_list|(
name|hExe
argument_list|,
literal|false
argument_list|)
condition|)
block|{
if|if
condition|(
name|errorMessage
condition|)
operator|*
name|errorMessage
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Failed to attach type library to binary %1 - could not write file."
argument_list|)
operator|.
name|arg
argument_list|(
name|applicationName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|errorMessage
condition|)
operator|*
name|errorMessage
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Type library attached to %1."
argument_list|)
operator|.
name|arg
argument_list|(
name|applicationName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|registerServer
specifier|static
name|bool
name|registerServer
parameter_list|(
specifier|const
name|QString
modifier|&
name|input
parameter_list|)
block|{
name|bool
name|ok
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|input
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|".exe"
argument_list|)
argument_list|)
condition|)
block|{
name|ok
operator|=
name|runWithQtInEnvironment
argument_list|(
name|quotePath
argument_list|(
name|input
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|" -regserver"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HMODULE
name|hdll
init|=
name|LoadLibrary
argument_list|(
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|input
operator|.
name|utf16
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hdll
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Couldn't load library file %s\n"
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|input
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
typedef|typedef
name|HRESULT
function_decl|(
name|__stdcall
modifier|*
name|RegServerProc
function_decl|)
parameter_list|()
function_decl|;
name|RegServerProc
name|DllRegisterServer
init|=
operator|(
name|RegServerProc
operator|)
name|GetProcAddress
argument_list|(
name|hdll
argument_list|,
literal|"DllRegisterServer"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|DllRegisterServer
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Library file %s doesn't appear to be a COM library\n"
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|input
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|ok
operator|=
name|DllRegisterServer
argument_list|()
operator|==
name|S_OK
expr_stmt|;
block|}
return|return
name|ok
return|;
block|}
end_function
begin_function
DECL|function|unregisterServer
specifier|static
name|bool
name|unregisterServer
parameter_list|(
specifier|const
name|QString
modifier|&
name|input
parameter_list|)
block|{
name|bool
name|ok
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|input
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|".exe"
argument_list|)
argument_list|)
condition|)
block|{
name|ok
operator|=
name|runWithQtInEnvironment
argument_list|(
name|quotePath
argument_list|(
name|input
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|" -unregserver"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HMODULE
name|hdll
init|=
name|LoadLibrary
argument_list|(
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|input
operator|.
name|utf16
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hdll
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Couldn't load library file %s\n"
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|input
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
typedef|typedef
name|HRESULT
function_decl|(
name|__stdcall
modifier|*
name|RegServerProc
function_decl|)
parameter_list|()
function_decl|;
name|RegServerProc
name|DllUnregisterServer
init|=
operator|(
name|RegServerProc
operator|)
name|GetProcAddress
argument_list|(
name|hdll
argument_list|,
literal|"DllUnregisterServer"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|DllUnregisterServer
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Library file %s doesn't appear to be a COM library\n"
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|input
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|ok
operator|=
name|DllUnregisterServer
argument_list|()
operator|==
name|S_OK
expr_stmt|;
block|}
return|return
name|ok
return|;
block|}
end_function
begin_function
DECL|function|dumpIdl
specifier|static
name|HRESULT
name|dumpIdl
parameter_list|(
specifier|const
name|QString
modifier|&
name|input
parameter_list|,
specifier|const
name|QString
modifier|&
name|idlfile
parameter_list|,
specifier|const
name|QString
modifier|&
name|version
parameter_list|)
block|{
name|HRESULT
name|res
init|=
name|E_FAIL
decl_stmt|;
if|if
condition|(
name|input
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|".exe"
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|runWithQtInEnvironment
argument_list|(
name|quotePath
argument_list|(
name|input
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|" -dumpidl "
argument_list|)
operator|+
name|idlfile
operator|+
name|QLatin1String
argument_list|(
literal|" -version "
argument_list|)
operator|+
name|version
argument_list|)
condition|)
name|res
operator|=
name|S_OK
expr_stmt|;
block|}
else|else
block|{
name|HMODULE
name|hdll
init|=
name|LoadLibrary
argument_list|(
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|input
operator|.
name|utf16
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hdll
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Couldn't load library file %s\n"
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|input
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|3
return|;
block|}
typedef|typedef
name|HRESULT
function_decl|(
name|__stdcall
modifier|*
name|DumpIDLProc
function_decl|)
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
name|DumpIDLProc
name|DumpIDL
init|=
operator|(
name|DumpIDLProc
operator|)
name|GetProcAddress
argument_list|(
name|hdll
argument_list|,
literal|"DumpIDL"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|DumpIDL
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Couldn't resolve 'DumpIDL' symbol in %s\n"
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|input
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|3
return|;
block|}
name|res
operator|=
name|DumpIDL
argument_list|(
name|idlfile
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|FreeLibrary
argument_list|(
name|hdll
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|slashify
specifier|static
name|void
name|slashify
parameter_list|(
name|QString
modifier|&
name|s
parameter_list|)
block|{
if|if
condition|(
operator|!
name|s
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
return|return;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
operator|(
name|int
operator|)
name|s
operator|.
name|length
argument_list|()
condition|)
block|{
if|if
condition|(
name|s
index|[
name|i
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
condition|)
name|s
index|[
name|i
index|]
operator|=
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|runIdc
name|int
name|runIdc
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QString
name|error
decl_stmt|;
name|QString
name|tlbfile
decl_stmt|;
name|QString
name|idlfile
decl_stmt|;
name|QString
name|input
decl_stmt|;
name|QString
name|version
init|=
name|QLatin1String
argument_list|(
literal|"1.0"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|argc
condition|)
block|{
name|QString
name|p
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|==
name|QLatin1String
argument_list|(
literal|"/idl"
argument_list|)
operator|||
name|p
operator|==
name|QLatin1String
argument_list|(
literal|"-idl"
argument_list|)
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|>
name|argc
condition|)
block|{
name|error
operator|=
name|QLatin1String
argument_list|(
literal|"Missing name for interface definition file!"
argument_list|)
expr_stmt|;
break|break;
block|}
name|idlfile
operator|=
name|QLatin1String
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|idlfile
operator|=
name|idlfile
operator|.
name|trimmed
argument_list|()
operator|.
name|toLower
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|==
name|QLatin1String
argument_list|(
literal|"/version"
argument_list|)
operator|||
name|p
operator|==
name|QLatin1String
argument_list|(
literal|"-version"
argument_list|)
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|>
name|argc
condition|)
name|version
operator|=
name|QLatin1String
argument_list|(
literal|"1.0"
argument_list|)
expr_stmt|;
else|else
name|version
operator|=
name|QLatin1String
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|==
name|QLatin1String
argument_list|(
literal|"/tlb"
argument_list|)
operator|||
name|p
operator|==
name|QLatin1String
argument_list|(
literal|"-tlb"
argument_list|)
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|>
name|argc
condition|)
block|{
name|error
operator|=
name|QLatin1String
argument_list|(
literal|"Missing name for type library file!"
argument_list|)
expr_stmt|;
break|break;
block|}
name|tlbfile
operator|=
name|QLatin1String
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|tlbfile
operator|=
name|tlbfile
operator|.
name|trimmed
argument_list|()
operator|.
name|toLower
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|==
name|QLatin1String
argument_list|(
literal|"/v"
argument_list|)
operator|||
name|p
operator|==
name|QLatin1String
argument_list|(
literal|"-v"
argument_list|)
condition|)
block|{
name|fprintf
argument_list|(
name|stdout
argument_list|,
literal|"Qt Interface Definition Compiler version 1.0\n"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|p
operator|==
name|QLatin1String
argument_list|(
literal|"/regserver"
argument_list|)
operator|||
name|p
operator|==
name|QLatin1String
argument_list|(
literal|"-regserver"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|registerServer
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Failed to register server!\n"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Server registered successfully!\n"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|p
operator|==
name|QLatin1String
argument_list|(
literal|"/unregserver"
argument_list|)
operator|||
name|p
operator|==
name|QLatin1String
argument_list|(
literal|"-unregserver"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|unregisterServer
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Failed to unregister server!\n"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Server unregistered successfully!\n"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|p
index|[
literal|0
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|||
name|p
index|[
literal|0
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
condition|)
block|{
name|error
operator|=
name|QLatin1String
argument_list|(
literal|"Unknown option \""
argument_list|)
operator|+
name|p
operator|+
name|QLatin1Char
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|input
operator|=
name|QLatin1String
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|input
operator|=
name|input
operator|.
name|trimmed
argument_list|()
operator|.
name|toLower
argument_list|()
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|error
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%s"
argument_list|,
name|error
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
return|return
literal|5
return|;
block|}
if|if
condition|(
name|input
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"No input file specified!\n"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
name|input
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|".exe"
argument_list|)
argument_list|)
operator|&&
name|tlbfile
operator|.
name|isEmpty
argument_list|()
operator|&&
name|idlfile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"No type output file specified!\n"
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
if|if
condition|(
name|input
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|".dll"
argument_list|)
argument_list|)
operator|&&
name|idlfile
operator|.
name|isEmpty
argument_list|()
operator|&&
name|tlbfile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"No interface definition file and no type library file specified!\n"
argument_list|)
expr_stmt|;
return|return
literal|3
return|;
block|}
name|slashify
argument_list|(
name|input
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tlbfile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|slashify
argument_list|(
name|tlbfile
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|tlbfile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Couldn't open %s for read\n"
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|tlbfile
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|4
return|;
block|}
name|QByteArray
name|data
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QString
name|error
decl_stmt|;
name|bool
name|ok
init|=
name|attachTypeLibrary
argument_list|(
name|input
argument_list|,
literal|1
argument_list|,
name|data
argument_list|,
operator|&
name|error
argument_list|)
decl_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%s"
argument_list|,
name|error
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|ok
condition|?
literal|0
else|:
literal|4
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|idlfile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|slashify
argument_list|(
name|idlfile
argument_list|)
expr_stmt|;
name|idlfile
operator|=
name|quotePath
argument_list|(
name|idlfile
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"\n\n%s\n\n"
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|idlfile
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|quotePath
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|HRESULT
name|res
init|=
name|dumpIdl
argument_list|(
name|input
argument_list|,
name|idlfile
argument_list|,
name|version
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|res
condition|)
block|{
case|case
name|S_OK
case|:
break|break;
case|case
name|E_FAIL
case|:
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"IDL generation failed trying to run program %s!\n"
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|input
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|res
return|;
case|case
operator|-
literal|1
case|:
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Couldn't open %s for writing!\n"
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|idlfile
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|res
return|;
case|case
literal|1
case|:
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Malformed appID value in %s!\n"
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|input
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|res
return|;
case|case
literal|2
case|:
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Malformed typeLibID value in %s!\n"
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|input
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|res
return|;
case|case
literal|3
case|:
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Class has no metaobject information (error in %s)!\n"
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|input
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|res
return|;
case|case
literal|4
case|:
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Malformed classID value in %s!\n"
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|input
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|res
return|;
case|case
literal|5
case|:
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Malformed interfaceID value in %s!\n"
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|input
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|res
return|;
case|case
literal|6
case|:
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Malformed eventsID value in %s!\n"
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|input
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|res
return|;
default|default:
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Unknown error writing IDL from %s\n"
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|input
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|7
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
name|QT_END_NAMESPACE
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
return|return
name|QT_PREPEND_NAMESPACE
argument_list|(
name|runIdc
argument_list|)
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
return|;
block|}
end_function
end_unit
