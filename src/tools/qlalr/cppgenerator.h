begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QLALR module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|CPPGENERATOR_H
end_ifndef
begin_define
DECL|macro|CPPGENERATOR_H
define|#
directive|define
name|CPPGENERATOR_H
end_define
begin_include
include|#
directive|include
file|"lalr.h"
end_include
begin_include
include|#
directive|include
file|"compress.h"
end_include
begin_decl_stmt
DECL|variable|Grammar
name|class
name|Grammar
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|Automaton
name|class
name|Automaton
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|Recognizer
name|class
name|Recognizer
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|CppGenerator
block|{
name|public
label|:
name|CppGenerator
argument_list|(
argument|const Recognizer&p
argument_list|,
argument|Grammar&grammar
argument_list|,
argument|Automaton&aut
argument_list|,
argument|bool verbose
argument_list|)
block|:
name|p
argument_list|(
name|p
argument_list|)
operator|,
name|grammar
argument_list|(
name|grammar
argument_list|)
operator|,
name|aut
argument_list|(
name|aut
argument_list|)
operator|,
name|verbose
argument_list|(
name|verbose
argument_list|)
operator|,
name|debug_info
argument_list|(
name|false
argument_list|)
operator|,
name|copyright
argument_list|(
argument|false
argument_list|)
block|{}
name|void
name|operator
argument_list|()
argument_list|()
expr_stmt|;
name|bool
name|debugInfo
argument_list|()
specifier|const
block|{
return|return
name|debug_info
return|;
block|}
name|void
name|setDebugInfo
parameter_list|(
name|bool
name|d
parameter_list|)
block|{
name|debug_info
operator|=
name|d
expr_stmt|;
block|}
name|void
name|setCopyright
parameter_list|(
name|bool
name|t
parameter_list|)
block|{
name|copyright
operator|=
name|t
expr_stmt|;
block|}
name|private
label|:
name|void
name|generateDecl
parameter_list|(
name|QTextStream
modifier|&
name|out
parameter_list|)
function_decl|;
name|void
name|generateImpl
parameter_list|(
name|QTextStream
modifier|&
name|out
parameter_list|)
function_decl|;
name|QString
name|debugInfoProt
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|copyrightHeader
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|privateCopyrightHeader
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
specifier|static
name|QString
name|startIncludeGuard
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
function_decl|;
specifier|static
name|QString
name|endIncludeGuard
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
function_decl|;
specifier|const
name|Recognizer
modifier|&
name|p
decl_stmt|;
name|Grammar
modifier|&
name|grammar
decl_stmt|;
name|Automaton
modifier|&
name|aut
decl_stmt|;
name|bool
name|verbose
decl_stmt|;
name|int
name|accept_state
decl_stmt|;
name|int
name|state_count
decl_stmt|;
name|int
name|terminal_count
decl_stmt|;
name|int
name|non_terminal_count
decl_stmt|;
name|bool
name|debug_info
decl_stmt|;
name|bool
name|copyright
decl_stmt|;
name|Compress
name|compressed_action
decl_stmt|;
name|Compress
name|compressed_goto
decl_stmt|;
name|QVector
operator|<
name|int
operator|>
name|count
expr_stmt|;
name|QVector
operator|<
name|int
operator|>
name|defgoto
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// CPPGENERATOR_H
end_comment
end_unit
