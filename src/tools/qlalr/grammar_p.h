begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of other Qt classes.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file was generated by qlalr - DO NOT EDIT!
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|GRAMMAR_P_H
end_ifndef
begin_define
DECL|macro|GRAMMAR_P_H
define|#
directive|define
name|GRAMMAR_P_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|grammar
block|{
name|public
label|:
enum|enum
name|VariousConstants
block|{
name|EOF_SYMBOL
init|=
literal|0
block|,
name|COLON
init|=
literal|16
block|,
name|DECL
init|=
literal|19
block|,
name|DECL_FILE
init|=
literal|3
block|,
name|ERROR
init|=
literal|21
block|,
name|EXPECT
init|=
literal|4
block|,
name|EXPECT_RR
init|=
literal|5
block|,
name|ID
init|=
literal|1
block|,
name|IMPL
init|=
literal|20
block|,
name|IMPL_FILE
init|=
literal|6
block|,
name|LEFT
init|=
literal|7
block|,
name|MERGED_OUTPUT
init|=
literal|8
block|,
name|NONASSOC
init|=
literal|9
block|,
name|OR
init|=
literal|17
block|,
name|PARSER
init|=
literal|10
block|,
name|PREC
init|=
literal|11
block|,
name|RIGHT
init|=
literal|12
block|,
name|SEMICOLON
init|=
literal|18
block|,
name|START
init|=
literal|13
block|,
name|STRING_LITERAL
init|=
literal|2
block|,
name|TOKEN
init|=
literal|14
block|,
name|TOKEN_PREFIX
init|=
literal|15
block|,
name|ACCEPT_STATE
init|=
literal|68
block|,
name|RULE_COUNT
init|=
literal|45
block|,
name|STATE_COUNT
init|=
literal|69
block|,
name|TERMINAL_COUNT
init|=
literal|22
block|,
name|NON_TERMINAL_COUNT
init|=
literal|24
block|,
name|GOTO_INDEX_OFFSET
init|=
literal|69
block|,
name|GOTO_INFO_OFFSET
init|=
literal|76
block|,
name|GOTO_CHECK_OFFSET
init|=
literal|76
block|}
enum|;
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|spell
index|[]
decl_stmt|;
specifier|static
specifier|const
name|short
name|lhs
index|[]
decl_stmt|;
specifier|static
specifier|const
name|short
name|rhs
index|[]
decl_stmt|;
specifier|static
specifier|const
name|short
name|goto_default
index|[]
decl_stmt|;
specifier|static
specifier|const
name|short
name|action_default
index|[]
decl_stmt|;
specifier|static
specifier|const
name|short
name|action_index
index|[]
decl_stmt|;
specifier|static
specifier|const
name|short
name|action_info
index|[]
decl_stmt|;
specifier|static
specifier|const
name|short
name|action_check
index|[]
decl_stmt|;
specifier|static
specifier|inline
name|int
name|nt_action
parameter_list|(
name|int
name|state
parameter_list|,
name|int
name|nt
parameter_list|)
block|{
specifier|const
name|int
name|yyn
init|=
name|action_index
index|[
name|GOTO_INDEX_OFFSET
operator|+
name|state
index|]
operator|+
name|nt
decl_stmt|;
if|if
condition|(
name|yyn
operator|<
literal|0
operator|||
name|action_check
index|[
name|GOTO_CHECK_OFFSET
operator|+
name|yyn
index|]
operator|!=
name|nt
condition|)
return|return
name|goto_default
index|[
name|nt
index|]
return|;
return|return
name|action_info
index|[
name|GOTO_INFO_OFFSET
operator|+
name|yyn
index|]
return|;
block|}
specifier|static
specifier|inline
name|int
name|t_action
parameter_list|(
name|int
name|state
parameter_list|,
name|int
name|token
parameter_list|)
block|{
specifier|const
name|int
name|yyn
init|=
name|action_index
index|[
name|state
index|]
operator|+
name|token
decl_stmt|;
if|if
condition|(
name|yyn
operator|<
literal|0
operator|||
name|action_check
index|[
name|yyn
index|]
operator|!=
name|token
condition|)
return|return
operator|-
name|action_default
index|[
name|state
index|]
return|;
return|return
name|action_info
index|[
name|yyn
index|]
return|;
block|}
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// GRAMMAR_P_H
end_comment
end_unit
