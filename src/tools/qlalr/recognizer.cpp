begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QLALR project on Qt Labs. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"recognizer.h"
end_include
begin_include
include|#
directive|include
file|<cstdlib>
end_include
begin_include
include|#
directive|include
file|<cstring>
end_include
begin_include
include|#
directive|include
file|<cctype>
end_include
begin_constructor
DECL|function|Recognizer
name|Recognizer
operator|::
name|Recognizer
parameter_list|(
name|Grammar
modifier|*
name|grammar
parameter_list|,
name|bool
name|no_lines
parameter_list|)
member_init_list|:
name|tos
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|stack_size
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|state_stack
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|_M_line
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|_M_action_line
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|_M_grammar
argument_list|(
name|grammar
argument_list|)
member_init_list|,
name|_M_no_lines
argument_list|(
name|no_lines
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~Recognizer
name|Recognizer
operator|::
name|~
name|Recognizer
parameter_list|()
block|{
if|if
condition|(
name|stack_size
condition|)
operator|::
name|free
argument_list|(
name|state_stack
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|reallocateStack
specifier|inline
name|void
name|Recognizer
operator|::
name|reallocateStack
parameter_list|()
block|{
if|if
condition|(
operator|!
name|stack_size
condition|)
name|stack_size
operator|=
literal|128
expr_stmt|;
else|else
name|stack_size
operator|<<=
literal|1
expr_stmt|;
name|sym_stack
operator|.
name|resize
argument_list|(
name|stack_size
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|state_stack
condition|)
name|state_stack
operator|=
cast|reinterpret_cast
argument_list|<
name|int
operator|*
argument_list|>
argument_list|(
operator|::
name|malloc
argument_list|(
name|stack_size
operator|*
sizeof|sizeof
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|state_stack
operator|=
cast|reinterpret_cast
argument_list|<
name|int
operator|*
argument_list|>
argument_list|(
operator|::
name|realloc
argument_list|(
name|state_stack
argument_list|,
name|stack_size
operator|*
sizeof|sizeof
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nextToken
name|int
name|Recognizer
operator|::
name|nextToken
parameter_list|()
block|{
name|QString
name|text
decl_stmt|;
name|Lagain
label|:
while|while
condition|(
name|ch
operator|.
name|isSpace
argument_list|()
condition|)
name|inp
argument_list|()
expr_stmt|;
if|if
condition|(
name|ch
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|EOF_SYMBOL
return|;
name|int
name|token
init|=
name|ch
operator|.
name|unicode
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|'"'
condition|)
block|{
name|inp
argument_list|()
expr_stmt|;
comment|// skip "
name|text
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|ch
operator|.
name|isNull
argument_list|()
operator|&&
name|ch
operator|!=
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
condition|)
block|{
if|if
condition|(
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
condition|)
block|{
name|text
operator|+=
name|ch
expr_stmt|;
name|inp
argument_list|()
expr_stmt|;
block|}
name|text
operator|+=
name|ch
expr_stmt|;
name|inp
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
condition|)
name|inp
argument_list|()
expr_stmt|;
else|else
name|qerr
operator|<<
name|_M_input_file
operator|<<
literal|":"
operator|<<
name|_M_line
operator|<<
literal|": Warning. Expected `\"'"
operator|<<
name|endl
expr_stmt|;
name|_M_current_value
operator|=
name|text
expr_stmt|;
return|return
operator|(
name|token
operator|=
name|STRING_LITERAL
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|.
name|isLetterOrNumber
argument_list|()
operator|||
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
condition|)
block|{
name|text
operator|.
name|clear
argument_list|()
expr_stmt|;
do|do
block|{
name|text
operator|+=
name|ch
expr_stmt|;
name|inp
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|ch
operator|.
name|isLetterOrNumber
argument_list|()
operator|||
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
operator|||
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
condition|)
do|;
name|_M_current_value
operator|=
name|text
expr_stmt|;
return|return
operator|(
name|token
operator|=
name|ID
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
literal|'%'
condition|)
block|{
name|text
operator|.
name|clear
argument_list|()
expr_stmt|;
do|do
block|{
name|inp
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|ch
operator|.
name|isSpace
argument_list|()
condition|)
do|;
do|do
block|{
name|text
operator|+=
name|ch
expr_stmt|;
name|inp
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|ch
operator|.
name|isLetterOrNumber
argument_list|()
operator|||
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
operator|||
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
condition|)
do|;
if|if
condition|(
name|text
operator|==
name|QLatin1String
argument_list|(
literal|"token_prefix"
argument_list|)
condition|)
return|return
operator|(
name|token
operator|=
name|TOKEN_PREFIX
operator|)
return|;
elseif|else
if|if
condition|(
name|text
operator|==
name|QLatin1String
argument_list|(
literal|"merged_output"
argument_list|)
condition|)
return|return
operator|(
name|token
operator|=
name|MERGED_OUTPUT
operator|)
return|;
elseif|else
if|if
condition|(
name|text
operator|==
name|QLatin1String
argument_list|(
literal|"token"
argument_list|)
condition|)
return|return
operator|(
name|token
operator|=
name|TOKEN
operator|)
return|;
elseif|else
if|if
condition|(
name|text
operator|==
name|QLatin1String
argument_list|(
literal|"start"
argument_list|)
condition|)
return|return
operator|(
name|token
operator|=
name|START
operator|)
return|;
elseif|else
if|if
condition|(
name|text
operator|==
name|QLatin1String
argument_list|(
literal|"parser"
argument_list|)
condition|)
return|return
operator|(
name|token
operator|=
name|PARSER
operator|)
return|;
elseif|else
if|if
condition|(
name|text
operator|==
name|QLatin1String
argument_list|(
literal|"decl"
argument_list|)
condition|)
return|return
operator|(
name|token
operator|=
name|DECL_FILE
operator|)
return|;
elseif|else
if|if
condition|(
name|text
operator|==
name|QLatin1String
argument_list|(
literal|"impl"
argument_list|)
condition|)
return|return
operator|(
name|token
operator|=
name|IMPL_FILE
operator|)
return|;
elseif|else
if|if
condition|(
name|text
operator|==
name|QLatin1String
argument_list|(
literal|"expect"
argument_list|)
condition|)
return|return
operator|(
name|token
operator|=
name|EXPECT
operator|)
return|;
elseif|else
if|if
condition|(
name|text
operator|==
name|QLatin1String
argument_list|(
literal|"expect-rr"
argument_list|)
condition|)
return|return
operator|(
name|token
operator|=
name|EXPECT_RR
operator|)
return|;
elseif|else
if|if
condition|(
name|text
operator|==
name|QLatin1String
argument_list|(
literal|"left"
argument_list|)
condition|)
return|return
operator|(
name|token
operator|=
name|LEFT
operator|)
return|;
elseif|else
if|if
condition|(
name|text
operator|==
name|QLatin1String
argument_list|(
literal|"right"
argument_list|)
condition|)
return|return
operator|(
name|token
operator|=
name|RIGHT
operator|)
return|;
elseif|else
if|if
condition|(
name|text
operator|==
name|QLatin1String
argument_list|(
literal|"nonassoc"
argument_list|)
condition|)
return|return
operator|(
name|token
operator|=
name|NONASSOC
operator|)
return|;
elseif|else
if|if
condition|(
name|text
operator|==
name|QLatin1String
argument_list|(
literal|"prec"
argument_list|)
condition|)
return|return
operator|(
name|token
operator|=
name|PREC
operator|)
return|;
else|else
block|{
name|qerr
operator|<<
name|_M_input_file
operator|<<
literal|":"
operator|<<
name|_M_line
operator|<<
literal|": Unknown keyword `"
operator|<<
name|text
operator|<<
literal|"'"
operator|<<
name|endl
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
return|return
operator|(
name|token
operator|=
name|ERROR
operator|)
return|;
block|}
block|}
name|inp
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|==
literal|'-'
operator|&&
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
condition|)
block|{
do|do
block|{
name|inp
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|ch
operator|.
name|isNull
argument_list|()
operator|&&
name|ch
operator|!=
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
condition|)
do|;
goto|goto
name|Lagain
goto|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
literal|':'
operator|&&
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
condition|)
block|{
name|inp
argument_list|()
expr_stmt|;
if|if
condition|(
name|ch
operator|!=
name|QLatin1Char
argument_list|(
literal|'='
argument_list|)
condition|)
return|return
operator|(
name|token
operator|=
name|ERROR
operator|)
return|;
name|inp
argument_list|()
expr_stmt|;
return|return
operator|(
name|token
operator|=
name|COLON
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
literal|'/'
operator|&&
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
condition|)
block|{
name|_M_action_line
operator|=
name|_M_line
expr_stmt|;
name|text
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|_M_no_lines
condition|)
name|text
operator|+=
name|QLatin1String
argument_list|(
literal|"\n#line "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|_M_action_line
argument_list|)
operator|+
literal|" \""
operator|+
name|_M_input_file
operator|+
literal|"\"\n"
expr_stmt|;
name|inp
argument_list|()
expr_stmt|;
comment|// skip ':'
forever|forever
block|{
while|while
condition|(
operator|!
name|ch
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|token
operator|=
name|ch
operator|.
name|unicode
argument_list|()
expr_stmt|;
name|inp
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|==
literal|':'
operator|&&
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
condition|)
break|break;
name|text
operator|+=
name|QLatin1Char
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ch
operator|!=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
condition|)
return|return
operator|(
name|token
operator|=
name|ERROR
operator|)
return|;
name|inp
argument_list|()
expr_stmt|;
if|if
condition|(
name|ch
operator|.
name|isNull
argument_list|()
operator|||
name|ch
operator|.
name|isSpace
argument_list|()
condition|)
block|{
name|_M_current_value
operator|=
name|text
expr_stmt|;
return|return
operator|(
name|token
operator|=
name|DECL
operator|)
return|;
block|}
else|else
name|text
operator|+=
name|QLatin1String
argument_list|(
literal|":/"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
literal|'/'
operator|&&
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
condition|)
block|{
name|_M_action_line
operator|=
name|_M_line
expr_stmt|;
name|text
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|_M_no_lines
condition|)
name|text
operator|+=
name|QLatin1String
argument_list|(
literal|"\n#line "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|_M_action_line
argument_list|)
operator|+
literal|" \""
operator|+
name|_M_input_file
operator|+
literal|"\"\n"
expr_stmt|;
name|inp
argument_list|()
expr_stmt|;
comment|// skip ':'
forever|forever
block|{
while|while
condition|(
operator|!
name|ch
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|token
operator|=
name|ch
operator|.
name|unicode
argument_list|()
expr_stmt|;
name|inp
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|==
literal|'.'
operator|&&
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
condition|)
break|break;
name|text
operator|+=
name|QLatin1Char
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ch
operator|!=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
condition|)
return|return
operator|(
name|token
operator|=
name|ERROR
operator|)
return|;
name|inp
argument_list|()
expr_stmt|;
if|if
condition|(
name|ch
operator|.
name|isNull
argument_list|()
operator|||
name|ch
operator|.
name|isSpace
argument_list|()
condition|)
block|{
name|_M_current_value
operator|=
name|text
expr_stmt|;
return|return
operator|(
name|token
operator|=
name|IMPL
operator|)
return|;
block|}
else|else
name|text
operator|+=
name|QLatin1String
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
switch|switch
condition|(
name|token
condition|)
block|{
case|case
literal|':'
case|:
return|return
operator|(
name|token
operator|=
name|COLON
operator|)
return|;
case|case
literal|';'
case|:
return|return
operator|(
name|token
operator|=
name|SEMICOLON
operator|)
return|;
case|case
literal|'|'
case|:
return|return
operator|(
name|token
operator|=
name|OR
operator|)
return|;
default|default:
break|break;
block|}
return|return
name|token
return|;
block|}
end_function
begin_function
DECL|function|parse
name|bool
name|Recognizer
operator|::
name|parse
parameter_list|(
specifier|const
name|QString
modifier|&
name|input_file
parameter_list|)
block|{
name|_M_input_file
operator|=
name|input_file
expr_stmt|;
name|QFile
name|file
argument_list|(
name|_M_input_file
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|qerr
operator|<<
literal|"qlalr: no input file\n"
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QString
name|_M_contents
init|=
name|QTextStream
argument_list|(
operator|&
name|file
argument_list|)
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|_M_firstChar
operator|=
name|_M_contents
operator|.
name|constBegin
argument_list|()
expr_stmt|;
name|_M_lastChar
operator|=
name|_M_contents
operator|.
name|constEnd
argument_list|()
expr_stmt|;
name|_M_currentChar
operator|=
name|_M_firstChar
expr_stmt|;
name|_M_line
operator|=
literal|1
expr_stmt|;
name|int
name|yytoken
init|=
operator|-
literal|1
decl_stmt|;
name|inp
argument_list|()
expr_stmt|;
name|reallocateStack
argument_list|()
expr_stmt|;
name|_M_current_rule
operator|=
name|_M_grammar
operator|->
name|rules
operator|.
name|end
argument_list|()
expr_stmt|;
name|_M_decls
operator|.
name|clear
argument_list|()
expr_stmt|;
name|_M_impls
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tos
operator|=
literal|0
expr_stmt|;
name|state_stack
index|[
operator|++
name|tos
index|]
operator|=
literal|0
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|yytoken
operator|==
operator|-
literal|1
operator|&&
operator|-
name|TERMINAL_COUNT
operator|!=
name|action_index
index|[
name|state_stack
index|[
name|tos
index|]
index|]
condition|)
name|yytoken
operator|=
name|nextToken
argument_list|()
expr_stmt|;
name|int
name|act
init|=
name|t_action
argument_list|(
name|state_stack
index|[
name|tos
index|]
argument_list|,
name|yytoken
argument_list|)
decl_stmt|;
if|if
condition|(
name|act
operator|==
name|ACCEPT_STATE
condition|)
return|return
literal|true
return|;
elseif|else
if|if
condition|(
name|act
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|++
name|tos
operator|==
name|stack_size
condition|)
name|reallocateStack
argument_list|()
expr_stmt|;
name|sym_stack
index|[
name|tos
index|]
operator|=
name|_M_current_value
expr_stmt|;
name|state_stack
index|[
name|tos
index|]
operator|=
name|act
expr_stmt|;
name|yytoken
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|act
operator|<
literal|0
condition|)
block|{
name|int
name|r
init|=
operator|-
name|act
operator|-
literal|1
decl_stmt|;
name|tos
operator|-=
name|rhs
index|[
name|r
index|]
expr_stmt|;
name|act
operator|=
name|state_stack
index|[
name|tos
operator|++
index|]
expr_stmt|;
switch|switch
condition|(
name|r
condition|)
block|{
case|case
literal|3
case|:
block|{
name|Name
name|name
init|=
name|_M_grammar
operator|->
name|intern
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|_M_grammar
operator|->
name|start
operator|=
name|name
expr_stmt|;
name|_M_grammar
operator|->
name|non_terminals
operator|.
name|insert
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
block|{
name|_M_grammar
operator|->
name|table_name
operator|=
name|sym
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
block|{
name|_M_grammar
operator|->
name|merged_output
operator|=
name|sym
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
block|{
name|_M_grammar
operator|->
name|decl_file_name
operator|=
name|sym
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
block|{
name|_M_grammar
operator|->
name|impl_file_name
operator|=
name|sym
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
block|{
name|_M_grammar
operator|->
name|expected_shift_reduce
operator|=
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|10
case|:
block|{
name|_M_grammar
operator|->
name|expected_reduce_reduce
operator|=
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|11
case|:
block|{
name|_M_grammar
operator|->
name|token_prefix
operator|=
name|sym
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|17
case|:
case|case
literal|18
case|:
block|{
name|Name
name|name
init|=
name|_M_grammar
operator|->
name|intern
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|_M_grammar
operator|->
name|terminals
operator|.
name|insert
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|_M_grammar
operator|->
name|spells
operator|.
name|insert
argument_list|(
name|name
argument_list|,
name|sym
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|19
case|:
block|{
name|_M_grammar
operator|->
name|current_assoc
operator|=
name|Grammar
operator|::
name|Left
expr_stmt|;
operator|++
name|_M_grammar
operator|->
name|current_prec
expr_stmt|;
block|}
break|break;
case|case
literal|20
case|:
block|{
name|_M_grammar
operator|->
name|current_assoc
operator|=
name|Grammar
operator|::
name|Right
expr_stmt|;
operator|++
name|_M_grammar
operator|->
name|current_prec
expr_stmt|;
block|}
break|break;
case|case
literal|21
case|:
block|{
name|_M_grammar
operator|->
name|current_assoc
operator|=
name|Grammar
operator|::
name|NonAssoc
expr_stmt|;
operator|++
name|_M_grammar
operator|->
name|current_prec
expr_stmt|;
block|}
break|break;
case|case
literal|25
case|:
block|{
name|Name
name|name
init|=
name|_M_grammar
operator|->
name|intern
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|_M_grammar
operator|->
name|terminals
operator|.
name|insert
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Grammar
operator|::
name|TokenInfo
name|info
decl_stmt|;
name|info
operator|.
name|prec
operator|=
name|_M_grammar
operator|->
name|current_prec
expr_stmt|;
name|info
operator|.
name|assoc
operator|=
name|_M_grammar
operator|->
name|current_assoc
expr_stmt|;
name|_M_grammar
operator|->
name|token_info
operator|.
name|insert
argument_list|(
name|name
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|26
case|:
block|{
name|_M_decls
operator|+=
name|expand
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|27
case|:
block|{
name|_M_impls
operator|+=
name|expand
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|34
case|:
block|{
name|_M_current_rule
operator|=
name|_M_grammar
operator|->
name|rules
operator|.
name|insert
argument_list|(
name|_M_grammar
operator|->
name|rules
operator|.
name|end
argument_list|()
argument_list|,
name|Rule
argument_list|()
argument_list|)
expr_stmt|;
name|_M_current_rule
operator|->
name|lhs
operator|=
name|_M_grammar
operator|->
name|intern
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|_M_grammar
operator|->
name|declared_lhs
operator|.
name|insert
argument_list|(
name|_M_current_rule
operator|->
name|lhs
argument_list|)
expr_stmt|;
if|if
condition|(
name|_M_grammar
operator|->
name|terminals
operator|.
name|find
argument_list|(
name|_M_current_rule
operator|->
name|lhs
argument_list|)
operator|!=
name|_M_grammar
operator|->
name|terminals
operator|.
name|end
argument_list|()
condition|)
block|{
name|qerr
operator|<<
name|_M_input_file
operator|<<
literal|":"
operator|<<
name|_M_line
operator|<<
literal|": Invalid non terminal `"
operator|<<
operator|*
name|_M_current_rule
operator|->
name|lhs
operator|<<
literal|"'"
operator|<<
name|endl
expr_stmt|;
return|return
literal|false
return|;
block|}
name|_M_grammar
operator|->
name|non_terminals
operator|.
name|insert
argument_list|(
name|_M_current_rule
operator|->
name|lhs
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|38
case|:
block|{
name|Name
name|lhs
init|=
name|_M_current_rule
operator|->
name|lhs
decl_stmt|;
name|_M_current_rule
operator|=
name|_M_grammar
operator|->
name|rules
operator|.
name|insert
argument_list|(
name|_M_grammar
operator|->
name|rules
operator|.
name|end
argument_list|()
argument_list|,
name|Rule
argument_list|()
argument_list|)
expr_stmt|;
name|_M_current_rule
operator|->
name|lhs
operator|=
name|lhs
expr_stmt|;
name|_M_grammar
operator|->
name|declared_lhs
operator|.
name|insert
argument_list|(
name|_M_current_rule
operator|->
name|lhs
argument_list|)
expr_stmt|;
if|if
condition|(
name|_M_grammar
operator|->
name|terminals
operator|.
name|find
argument_list|(
name|_M_current_rule
operator|->
name|lhs
argument_list|)
operator|!=
name|_M_grammar
operator|->
name|terminals
operator|.
name|end
argument_list|()
condition|)
block|{
name|qerr
operator|<<
name|_M_input_file
operator|<<
literal|":"
operator|<<
name|_M_line
operator|<<
literal|": Invalid non terminal `"
operator|<<
operator|*
name|_M_current_rule
operator|->
name|lhs
operator|<<
literal|"'"
operator|<<
name|endl
expr_stmt|;
return|return
literal|false
return|;
block|}
name|_M_grammar
operator|->
name|non_terminals
operator|.
name|insert
argument_list|(
name|_M_current_rule
operator|->
name|lhs
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|39
case|:
block|{
name|_M_current_rule
operator|->
name|prec
operator|=
name|_M_grammar
operator|->
name|names
operator|.
name|end
argument_list|()
expr_stmt|;
for|for
control|(
name|NameList
operator|::
name|iterator
name|it
init|=
name|_M_current_rule
operator|->
name|rhs
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|_M_current_rule
operator|->
name|rhs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|!
name|_M_grammar
operator|->
name|isTerminal
argument_list|(
operator|*
name|it
argument_list|)
condition|)
continue|continue;
name|_M_current_rule
operator|->
name|prec
operator|=
operator|*
name|it
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|40
case|:
block|{
name|Name
name|tok
init|=
name|_M_grammar
operator|->
name|intern
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|_M_grammar
operator|->
name|isTerminal
argument_list|(
name|tok
argument_list|)
condition|)
block|{
name|qerr
operator|<<
name|_M_input_file
operator|<<
literal|":"
operator|<<
name|_M_line
operator|<<
literal|": `"
operator|<<
operator|*
name|tok
operator|<<
literal|" is not a terminal symbol"
operator|<<
name|endl
expr_stmt|;
name|_M_current_rule
operator|->
name|prec
operator|=
name|_M_grammar
operator|->
name|names
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
else|else
name|_M_current_rule
operator|->
name|prec
operator|=
name|tok
expr_stmt|;
block|}
break|break;
case|case
literal|42
case|:
block|{
name|Name
name|name
init|=
name|_M_grammar
operator|->
name|intern
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|_M_grammar
operator|->
name|terminals
operator|.
name|find
argument_list|(
name|name
argument_list|)
operator|==
name|_M_grammar
operator|->
name|terminals
operator|.
name|end
argument_list|()
condition|)
name|_M_grammar
operator|->
name|non_terminals
operator|.
name|insert
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|_M_current_rule
operator|->
name|rhs
operator|.
name|push_back
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|43
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|=
name|QString
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
comment|// switch
name|state_stack
index|[
name|tos
index|]
operator|=
name|nt_action
argument_list|(
name|act
argument_list|,
name|lhs
index|[
name|r
index|]
operator|-
name|TERMINAL_COUNT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|qerr
operator|<<
name|_M_input_file
operator|<<
literal|":"
operator|<<
name|_M_line
operator|<<
literal|": Syntax error"
operator|<<
name|endl
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
end_unit
