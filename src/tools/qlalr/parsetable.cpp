begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the utils of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"parsetable.h"
end_include
begin_include
include|#
directive|include
file|"lalr.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qtextstream.h>
end_include
begin_constructor
DECL|function|ParseTable
name|ParseTable
operator|::
name|ParseTable
parameter_list|(
name|QTextStream
modifier|&
name|o
parameter_list|)
member_init_list|:
name|out
argument_list|(
name|o
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|operator ()
name|void
name|ParseTable
operator|::
name|operator
name|()
parameter_list|(
name|Automaton
modifier|*
name|aut
parameter_list|)
block|{
name|Grammar
modifier|*
name|g
init|=
name|aut
operator|->
name|_M_grammar
decl_stmt|;
name|int
name|rindex
init|=
literal|1
decl_stmt|;
for|for
control|(
name|RulePointer
name|rule
init|=
name|g
operator|->
name|rules
operator|.
name|begin
argument_list|()
init|;
name|rule
operator|!=
name|g
operator|->
name|rules
operator|.
name|end
argument_list|()
condition|;
operator|++
name|rule
control|)
name|out
operator|<<
name|rindex
operator|++
operator|<<
literal|")\t"
operator|<<
operator|*
name|rule
operator|<<
name|endl
expr_stmt|;
name|out
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StatePointer
name|state
init|=
name|aut
operator|->
name|states
operator|.
name|begin
argument_list|()
init|;
name|state
operator|!=
name|aut
operator|->
name|states
operator|.
name|end
argument_list|()
condition|;
operator|++
name|state
control|)
block|{
name|out
operator|<<
literal|"state "
operator|<<
name|index
operator|++
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
for|for
control|(
name|ItemPointer
name|item
init|=
name|state
operator|->
name|kernel
operator|.
name|begin
argument_list|()
init|;
name|item
operator|!=
name|state
operator|->
name|kernel
operator|.
name|end
argument_list|()
condition|;
operator|++
name|item
control|)
block|{
name|out
operator|<<
literal|" *  "
operator|<<
operator|*
name|item
expr_stmt|;
if|if
condition|(
name|item
operator|->
name|dot
operator|==
name|item
operator|->
name|end_rhs
argument_list|()
condition|)
name|out
operator|<<
literal|" "
operator|<<
name|aut
operator|->
name|lookaheads
index|[
name|item
index|]
expr_stmt|;
name|out
operator|<<
name|endl
expr_stmt|;
block|}
name|bool
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Bundle
operator|::
name|iterator
name|arrow
init|=
name|state
operator|->
name|bundle
operator|.
name|begin
argument_list|()
init|;
name|arrow
operator|!=
name|state
operator|->
name|bundle
operator|.
name|end
argument_list|()
condition|;
operator|++
name|arrow
control|)
block|{
if|if
condition|(
operator|!
name|g
operator|->
name|isTerminal
argument_list|(
name|arrow
operator|.
name|key
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|first
condition|)
name|out
operator|<<
name|endl
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|out
operator|<<
literal|"    "
operator|<<
operator|*
name|arrow
operator|.
name|key
argument_list|()
operator|<<
literal|" shift, and go to state "
operator|<<
name|std
operator|::
name|distance
argument_list|(
name|aut
operator|->
name|states
operator|.
name|begin
argument_list|()
argument_list|,
operator|*
name|arrow
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
name|first
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|ItemPointer
name|item
init|=
name|state
operator|->
name|closure
operator|.
name|begin
argument_list|()
init|;
name|item
operator|!=
name|state
operator|->
name|closure
operator|.
name|end
argument_list|()
condition|;
operator|++
name|item
control|)
block|{
if|if
condition|(
name|item
operator|->
name|dot
operator|!=
name|item
operator|->
name|end_rhs
argument_list|()
operator|||
name|item
operator|->
name|rule
operator|==
name|state
operator|->
name|defaultReduce
condition|)
continue|continue;
if|if
condition|(
name|first
condition|)
name|out
operator|<<
name|endl
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
foreach|foreach
control|(
name|Name
name|la
decl|,
name|aut
operator|->
name|lookaheads
operator|.
name|value
argument_list|(
name|item
argument_list|)
control|)
name|out
operator|<<
literal|"    "
operator|<<
operator|*
name|la
operator|<<
literal|" reduce using rule "
operator|<<
name|aut
operator|->
name|id
argument_list|(
name|item
operator|->
name|rule
argument_list|)
operator|<<
literal|" ("
operator|<<
operator|*
name|item
operator|->
name|rule
operator|->
name|lhs
operator|<<
literal|")"
operator|<<
name|endl
expr_stmt|;
block|}
name|first
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Bundle
operator|::
name|iterator
name|arrow
init|=
name|state
operator|->
name|bundle
operator|.
name|begin
argument_list|()
init|;
name|arrow
operator|!=
name|state
operator|->
name|bundle
operator|.
name|end
argument_list|()
condition|;
operator|++
name|arrow
control|)
block|{
if|if
condition|(
operator|!
name|g
operator|->
name|isNonTerminal
argument_list|(
name|arrow
operator|.
name|key
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|first
condition|)
name|out
operator|<<
name|endl
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|out
operator|<<
literal|"    "
operator|<<
operator|*
name|arrow
operator|.
name|key
argument_list|()
operator|<<
literal|" go to state "
operator|<<
name|std
operator|::
name|distance
argument_list|(
name|aut
operator|->
name|states
operator|.
name|begin
argument_list|()
argument_list|,
operator|*
name|arrow
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|->
name|defaultReduce
operator|!=
name|g
operator|->
name|rules
operator|.
name|end
argument_list|()
condition|)
block|{
name|out
operator|<<
name|endl
operator|<<
literal|"    $default reduce using rule "
operator|<<
name|aut
operator|->
name|id
argument_list|(
name|state
operator|->
name|defaultReduce
argument_list|)
operator|<<
literal|" ("
operator|<<
operator|*
name|state
operator|->
name|defaultReduce
operator|->
name|lhs
operator|<<
literal|")"
operator|<<
name|endl
expr_stmt|;
block|}
name|out
operator|<<
name|endl
expr_stmt|;
block|}
block|}
end_function
end_unit
