begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qtextstream.h>
end_include
begin_include
include|#
directive|include
file|<qset.h>
end_include
begin_include
include|#
directive|include
file|<qdbusmetatype.h>
end_include
begin_include
include|#
directive|include
file|<private/qdbusintrospection_p.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_define
DECL|macro|PROGRAMNAME
define|#
directive|define
name|PROGRAMNAME
value|"qdbusxml2cpp"
end_define
begin_define
DECL|macro|PROGRAMVERSION
define|#
directive|define
name|PROGRAMVERSION
value|"0.8"
end_define
begin_define
DECL|macro|PROGRAMCOPYRIGHT
define|#
directive|define
name|PROGRAMCOPYRIGHT
value|"Copyright (C) 2015 The Qt Company Ltd."
end_define
begin_define
DECL|macro|ANNOTATION_NO_WAIT
define|#
directive|define
name|ANNOTATION_NO_WAIT
value|"org.freedesktop.DBus.Method.NoReply"
end_define
begin_decl_stmt
DECL|variable|globalClassName
specifier|static
name|QString
name|globalClassName
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|parentClassName
specifier|static
name|QString
name|parentClassName
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|proxyFile
specifier|static
name|QString
name|proxyFile
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|adaptorFile
specifier|static
name|QString
name|adaptorFile
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|inputFile
specifier|static
name|QString
name|inputFile
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|skipNamespaces
specifier|static
name|bool
name|skipNamespaces
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|verbose
specifier|static
name|bool
name|verbose
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|includeMocs
specifier|static
name|bool
name|includeMocs
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|commandLine
specifier|static
name|QString
name|commandLine
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|includes
specifier|static
name|QStringList
name|includes
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|wantedInterfaces
specifier|static
name|QStringList
name|wantedInterfaces
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|help
specifier|static
specifier|const
name|char
name|help
index|[]
init|=
literal|"Usage: "
name|PROGRAMNAME
literal|" [options...] [xml-or-xml-file] [interfaces...]\n"
literal|"Produces the C++ code to implement the interfaces defined in the input file.\n"
literal|"\n"
literal|"Options:\n"
literal|"  -a<filename>    Write the adaptor code to<filename>\n"
literal|"  -c<classname>   Use<classname> as the class name for the generated classes\n"
literal|"  -h               Show this information\n"
literal|"  -i<filename>    Add #include to the output\n"
literal|"  -l<classname>   When generating an adaptor, use<classname> as the parent class\n"
literal|"  -m               Generate #include \"filename.moc\" statements in the .cpp files\n"
literal|"  -N               Don't use namespaces\n"
literal|"  -p<filename>    Write the proxy code to<filename>\n"
literal|"  -v               Be verbose.\n"
literal|"  -V               Show the program version and quit.\n"
literal|"\n"
literal|"If the file name given to the options -a and -p does not end in .cpp or .h, the\n"
literal|"program will automatically append the suffixes and produce both files.\n"
literal|"You can also use a colon (:) to separate the header name from the source file\n"
literal|"name, as in '-a filename_p.h:filename.cpp'.\n"
literal|"\n"
literal|"If you pass a dash (-) as the argument to either -p or -a, the output is written\n"
literal|"to the standard output\n"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|includeList
specifier|static
specifier|const
name|char
name|includeList
index|[]
init|=
literal|"#include<QtCore/QByteArray>\n"
literal|"#include<QtCore/QList>\n"
literal|"#include<QtCore/QMap>\n"
literal|"#include<QtCore/QString>\n"
literal|"#include<QtCore/QStringList>\n"
literal|"#include<QtCore/QVariant>\n"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|forwardDeclarations
specifier|static
specifier|const
name|char
name|forwardDeclarations
index|[]
init|=
literal|"QT_BEGIN_NAMESPACE\n"
literal|"class QByteArray;\n"
literal|"template<class T> class QList;\n"
literal|"template<class Key, class Value> class QMap;\n"
literal|"class QString;\n"
literal|"class QStringList;\n"
literal|"class QVariant;\n"
literal|"QT_END_NAMESPACE\n"
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|showHelp
specifier|static
name|void
name|showHelp
parameter_list|()
block|{
name|printf
argument_list|(
literal|"%s"
argument_list|,
name|help
argument_list|)
expr_stmt|;
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|showVersion
specifier|static
name|void
name|showVersion
parameter_list|()
block|{
name|printf
argument_list|(
literal|"%s version %s\n"
argument_list|,
name|PROGRAMNAME
argument_list|,
name|PROGRAMVERSION
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"D-Bus binding tool for Qt\n"
argument_list|)
expr_stmt|;
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nextArg
specifier|static
name|QString
name|nextArg
parameter_list|(
name|QStringList
modifier|&
name|args
parameter_list|,
name|int
name|i
parameter_list|,
name|char
name|opt
parameter_list|)
block|{
name|QString
name|arg
init|=
name|args
operator|.
name|value
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|arg
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|printf
argument_list|(
literal|"-%c needs at least one argument\n"
argument_list|,
name|opt
argument_list|)
expr_stmt|;
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|args
operator|.
name|takeAt
argument_list|(
name|i
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|parseCmdLine
specifier|static
name|void
name|parseCmdLine
parameter_list|(
name|QStringList
name|args
parameter_list|)
block|{
name|args
operator|.
name|takeFirst
argument_list|()
expr_stmt|;
name|commandLine
operator|=
name|QLatin1String
argument_list|(
name|PROGRAMNAME
literal|" "
argument_list|)
expr_stmt|;
name|commandLine
operator|+=
name|args
operator|.
name|join
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|args
operator|.
name|count
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|args
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
argument_list|)
condition|)
block|{
operator|++
name|i
expr_stmt|;
continue|continue;
block|}
name|QString
name|arg
init|=
name|args
operator|.
name|takeAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|char
name|c
init|=
literal|'\0'
decl_stmt|;
if|if
condition|(
name|arg
operator|.
name|length
argument_list|()
operator|==
literal|2
condition|)
name|c
operator|=
name|arg
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|arg
operator|==
name|QLatin1String
argument_list|(
literal|"--help"
argument_list|)
condition|)
name|c
operator|=
literal|'h'
expr_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'a'
case|:
name|adaptorFile
operator|=
name|nextArg
argument_list|(
name|args
argument_list|,
name|i
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'c'
case|:
name|globalClassName
operator|=
name|nextArg
argument_list|(
name|args
argument_list|,
name|i
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'v'
case|:
name|verbose
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|'i'
case|:
name|includes
operator|<<
name|nextArg
argument_list|(
name|args
argument_list|,
name|i
argument_list|,
literal|'i'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'l'
case|:
name|parentClassName
operator|=
name|nextArg
argument_list|(
name|args
argument_list|,
name|i
argument_list|,
literal|'l'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'m'
case|:
name|includeMocs
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|'N'
case|:
name|skipNamespaces
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|'?'
case|:
case|case
literal|'h'
case|:
name|showHelp
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'V'
case|:
name|showVersion
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'p'
case|:
name|proxyFile
operator|=
name|nextArg
argument_list|(
name|args
argument_list|,
name|i
argument_list|,
literal|'p'
argument_list|)
expr_stmt|;
break|break;
default|default:
name|printf
argument_list|(
literal|"unknown option: '%s'\n"
argument_list|,
name|qPrintable
argument_list|(
name|arg
argument_list|)
argument_list|)
expr_stmt|;
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
name|inputFile
operator|=
name|args
operator|.
name|takeFirst
argument_list|()
expr_stmt|;
name|wantedInterfaces
operator|<<
name|args
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readInput
specifier|static
name|QDBusIntrospection
operator|::
name|Interfaces
name|readInput
parameter_list|()
block|{
name|QFile
name|input
argument_list|(
name|inputFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputFile
operator|.
name|isEmpty
argument_list|()
operator|||
name|inputFile
operator|==
name|QLatin1String
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|input
operator|.
name|open
argument_list|(
name|stdin
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|input
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
block|}
name|QByteArray
name|data
init|=
name|input
operator|.
name|readAll
argument_list|()
decl_stmt|;
comment|// check if the input is already XML
name|data
operator|=
name|data
operator|.
name|trimmed
argument_list|()
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|startsWith
argument_list|(
literal|"<!DOCTYPE "
argument_list|)
operator|||
name|data
operator|.
name|startsWith
argument_list|(
literal|"<?xml"
argument_list|)
operator|||
name|data
operator|.
name|startsWith
argument_list|(
literal|"<node"
argument_list|)
operator|||
name|data
operator|.
name|startsWith
argument_list|(
literal|"<interface"
argument_list|)
condition|)
comment|// already XML
return|return
name|QDBusIntrospection
operator|::
name|parseInterfaces
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Cannot process input: '%s'. Stop.\n"
argument_list|,
name|qPrintable
argument_list|(
name|inputFile
argument_list|)
argument_list|)
expr_stmt|;
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanInterfaces
specifier|static
name|void
name|cleanInterfaces
parameter_list|(
name|QDBusIntrospection
operator|::
name|Interfaces
modifier|&
name|interfaces
parameter_list|)
block|{
if|if
condition|(
operator|!
name|wantedInterfaces
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QDBusIntrospection
operator|::
name|Interfaces
operator|::
name|Iterator
name|it
init|=
name|interfaces
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|interfaces
operator|.
name|end
argument_list|()
condition|)
if|if
condition|(
operator|!
name|wantedInterfaces
operator|.
name|contains
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
condition|)
name|it
operator|=
name|interfaces
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
else|else
operator|++
name|it
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// produce a header name from the file name
end_comment
begin_function
DECL|function|header
specifier|static
name|QString
name|header
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|QStringList
name|parts
init|=
name|name
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|retval
init|=
name|parts
operator|.
name|first
argument_list|()
decl_stmt|;
if|if
condition|(
name|retval
operator|.
name|isEmpty
argument_list|()
operator|||
name|retval
operator|==
name|QLatin1String
argument_list|(
literal|"-"
argument_list|)
condition|)
return|return
name|retval
return|;
if|if
condition|(
operator|!
name|retval
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|".h"
argument_list|)
argument_list|)
operator|&&
operator|!
name|retval
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|".cpp"
argument_list|)
argument_list|)
operator|&&
operator|!
name|retval
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|".cc"
argument_list|)
argument_list|)
condition|)
name|retval
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|".h"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|retval
return|;
block|}
end_function
begin_comment
comment|// produce a cpp name from the file name
end_comment
begin_function
DECL|function|cpp
specifier|static
name|QString
name|cpp
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|QStringList
name|parts
init|=
name|name
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|retval
init|=
name|parts
operator|.
name|last
argument_list|()
decl_stmt|;
if|if
condition|(
name|retval
operator|.
name|isEmpty
argument_list|()
operator|||
name|retval
operator|==
name|QLatin1String
argument_list|(
literal|"-"
argument_list|)
condition|)
return|return
name|retval
return|;
if|if
condition|(
operator|!
name|retval
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|".h"
argument_list|)
argument_list|)
operator|&&
operator|!
name|retval
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|".cpp"
argument_list|)
argument_list|)
operator|&&
operator|!
name|retval
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|".cc"
argument_list|)
argument_list|)
condition|)
name|retval
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|".cpp"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|retval
return|;
block|}
end_function
begin_comment
comment|// produce a moc name from the file name
end_comment
begin_function
DECL|function|moc
specifier|static
name|QString
name|moc
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|QString
name|retval
init|=
name|header
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|retval
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|retval
return|;
name|retval
operator|.
name|truncate
argument_list|(
name|retval
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// drop the h in .h
name|retval
operator|+=
name|QLatin1String
argument_list|(
literal|"moc"
argument_list|)
expr_stmt|;
return|return
name|retval
return|;
block|}
end_function
begin_function
DECL|function|writeHeader
specifier|static
name|QTextStream
modifier|&
name|writeHeader
parameter_list|(
name|QTextStream
modifier|&
name|ts
parameter_list|,
name|bool
name|changesWillBeLost
parameter_list|)
block|{
name|ts
operator|<<
literal|"/*"
operator|<<
name|endl
operator|<<
literal|" * This file was generated by "
name|PROGRAMNAME
literal|" version "
name|PROGRAMVERSION
operator|<<
name|endl
operator|<<
literal|" * Command line was: "
operator|<<
name|commandLine
operator|<<
name|endl
operator|<<
literal|" *"
operator|<<
name|endl
operator|<<
literal|" * "
name|PROGRAMNAME
literal|" is "
name|PROGRAMCOPYRIGHT
operator|<<
name|endl
operator|<<
literal|" *"
operator|<<
name|endl
operator|<<
literal|" * This is an auto-generated file."
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|changesWillBeLost
condition|)
name|ts
operator|<<
literal|" * Do not edit! All changes made to it will be lost."
operator|<<
name|endl
expr_stmt|;
else|else
name|ts
operator|<<
literal|" * This file may have been hand-edited. Look for HAND-EDIT comments"
operator|<<
name|endl
operator|<<
literal|" * before re-generating it."
operator|<<
name|endl
expr_stmt|;
name|ts
operator|<<
literal|" */"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
return|return
name|ts
return|;
block|}
end_function
begin_enum
DECL|enum|ClassType
DECL|enumerator|Proxy
DECL|enumerator|Adaptor
enum|enum
name|ClassType
block|{
name|Proxy
block|,
name|Adaptor
block|}
enum|;
end_enum
begin_function
DECL|function|classNameForInterface
specifier|static
name|QString
name|classNameForInterface
parameter_list|(
specifier|const
name|QString
modifier|&
name|interface
parameter_list|,
name|ClassType
name|classType
parameter_list|)
block|{
if|if
condition|(
operator|!
name|globalClassName
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|globalClassName
return|;
specifier|const
specifier|auto
name|parts
init|=
name|interface
operator|.
name|splitRef
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|retval
decl_stmt|;
if|if
condition|(
name|classType
operator|==
name|Proxy
condition|)
block|{
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|part
range|:
name|parts
control|)
name|retval
operator|+=
name|part
index|[
literal|0
index|]
operator|.
name|toUpper
argument_list|()
operator|+
name|part
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|retval
operator|+=
name|parts
operator|.
name|last
argument_list|()
index|[
literal|0
index|]
operator|.
name|toUpper
argument_list|()
operator|+
name|parts
operator|.
name|last
argument_list|()
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classType
operator|==
name|Proxy
condition|)
name|retval
operator|+=
name|QLatin1String
argument_list|(
literal|"Interface"
argument_list|)
expr_stmt|;
else|else
name|retval
operator|+=
name|QLatin1String
argument_list|(
literal|"Adaptor"
argument_list|)
expr_stmt|;
return|return
name|retval
return|;
block|}
end_function
begin_function
DECL|function|qtTypeName
specifier|static
name|QByteArray
name|qtTypeName
parameter_list|(
specifier|const
name|QString
modifier|&
name|signature
parameter_list|,
specifier|const
name|QDBusIntrospection
operator|::
name|Annotations
modifier|&
name|annotations
parameter_list|,
name|int
name|paramId
init|=
operator|-
literal|1
parameter_list|,
specifier|const
name|char
modifier|*
name|direction
init|=
literal|"Out"
parameter_list|)
block|{
name|int
name|type
init|=
name|QDBusMetaType
operator|::
name|signatureToType
argument_list|(
name|signature
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|QVariant
operator|::
name|Invalid
condition|)
block|{
name|QString
name|annotationName
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"org.qtproject.QtDBus.QtTypeName"
argument_list|)
decl_stmt|;
if|if
condition|(
name|paramId
operator|>=
literal|0
condition|)
name|annotationName
operator|+=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|".%1%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|direction
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|paramId
argument_list|)
expr_stmt|;
name|QString
name|qttype
init|=
name|annotations
operator|.
name|value
argument_list|(
name|annotationName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|qttype
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|qttype
operator|.
name|toLatin1
argument_list|()
return|;
name|QString
name|oldAnnotationName
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"com.trolltech.QtDBus.QtTypeName"
argument_list|)
decl_stmt|;
if|if
condition|(
name|paramId
operator|>=
literal|0
condition|)
name|oldAnnotationName
operator|+=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|".%1%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|direction
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|paramId
argument_list|)
expr_stmt|;
name|qttype
operator|=
name|annotations
operator|.
name|value
argument_list|(
name|oldAnnotationName
argument_list|)
expr_stmt|;
if|if
condition|(
name|qttype
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Got unknown type `%s'\n"
argument_list|,
name|qPrintable
argument_list|(
name|signature
argument_list|)
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"You should add<annotation name=\"%s\" value=\"<type>\"/> to the XML description\n"
argument_list|,
name|qPrintable
argument_list|(
name|annotationName
argument_list|)
argument_list|)
expr_stmt|;
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: deprecated annotation '%s' found; suggest updating to '%s'\n"
argument_list|,
name|qPrintable
argument_list|(
name|oldAnnotationName
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|annotationName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|qttype
operator|.
name|toLatin1
argument_list|()
return|;
block|}
return|return
name|QVariant
operator|::
name|typeToName
argument_list|(
name|QVariant
operator|::
name|Type
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|nonConstRefArg
specifier|static
name|QString
name|nonConstRefArg
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|arg
parameter_list|)
block|{
return|return
name|QLatin1String
argument_list|(
name|arg
operator|+
literal|"&"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|templateArg
specifier|static
name|QString
name|templateArg
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|arg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|arg
operator|.
name|endsWith
argument_list|(
literal|'>'
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
name|arg
argument_list|)
return|;
return|return
name|QLatin1String
argument_list|(
name|arg
operator|+
literal|' '
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|constRefArg
specifier|static
name|QString
name|constRefArg
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|arg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|arg
operator|.
name|startsWith
argument_list|(
literal|'Q'
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
name|arg
operator|+
literal|' '
argument_list|)
return|;
else|else
return|return
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"const %1&"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|arg
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|makeArgNames
specifier|static
name|QStringList
name|makeArgNames
parameter_list|(
specifier|const
name|QDBusIntrospection
operator|::
name|Arguments
modifier|&
name|inputArgs
parameter_list|,
specifier|const
name|QDBusIntrospection
operator|::
name|Arguments
modifier|&
name|outputArgs
init|=
name|QDBusIntrospection
operator|::
name|Arguments
argument_list|()
parameter_list|)
block|{
name|QStringList
name|retval
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputArgs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QDBusIntrospection
operator|::
name|Argument
modifier|&
name|arg
init|=
name|inputArgs
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QString
name|name
init|=
name|arg
operator|.
name|name
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
name|name
operator|=
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"in%1"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
name|name
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|retval
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
name|name
operator|+=
name|QLatin1String
argument_list|(
literal|"_"
argument_list|)
expr_stmt|;
name|retval
operator|<<
name|name
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputArgs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QDBusIntrospection
operator|::
name|Argument
modifier|&
name|arg
init|=
name|outputArgs
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QString
name|name
init|=
name|arg
operator|.
name|name
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
name|name
operator|=
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"out%1"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
name|name
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|retval
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
name|name
operator|+=
name|QLatin1String
argument_list|(
literal|"_"
argument_list|)
expr_stmt|;
name|retval
operator|<<
name|name
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
end_function
begin_function
DECL|function|writeArgList
specifier|static
name|void
name|writeArgList
parameter_list|(
name|QTextStream
modifier|&
name|ts
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|argNames
parameter_list|,
specifier|const
name|QDBusIntrospection
operator|::
name|Annotations
modifier|&
name|annotations
parameter_list|,
specifier|const
name|QDBusIntrospection
operator|::
name|Arguments
modifier|&
name|inputArgs
parameter_list|,
specifier|const
name|QDBusIntrospection
operator|::
name|Arguments
modifier|&
name|outputArgs
init|=
name|QDBusIntrospection
operator|::
name|Arguments
argument_list|()
parameter_list|)
block|{
comment|// input args:
name|bool
name|first
init|=
literal|true
decl_stmt|;
name|int
name|argPos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputArgs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QDBusIntrospection
operator|::
name|Argument
modifier|&
name|arg
init|=
name|inputArgs
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QString
name|type
init|=
name|constRefArg
argument_list|(
name|qtTypeName
argument_list|(
name|arg
operator|.
name|type
argument_list|,
name|annotations
argument_list|,
name|i
argument_list|,
literal|"In"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|ts
operator|<<
literal|", "
expr_stmt|;
name|ts
operator|<<
name|type
operator|<<
name|argNames
operator|.
name|at
argument_list|(
name|argPos
operator|++
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|argPos
operator|++
expr_stmt|;
comment|// output args
comment|// yes, starting from 1
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|outputArgs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QDBusIntrospection
operator|::
name|Argument
modifier|&
name|arg
init|=
name|outputArgs
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QString
name|name
init|=
name|arg
operator|.
name|name
decl_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|ts
operator|<<
literal|", "
expr_stmt|;
name|ts
operator|<<
name|nonConstRefArg
argument_list|(
name|qtTypeName
argument_list|(
name|arg
operator|.
name|type
argument_list|,
name|annotations
argument_list|,
name|i
argument_list|,
literal|"Out"
argument_list|)
argument_list|)
operator|<<
name|argNames
operator|.
name|at
argument_list|(
name|argPos
operator|++
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|propertyGetter
specifier|static
name|QString
name|propertyGetter
parameter_list|(
specifier|const
name|QDBusIntrospection
operator|::
name|Property
modifier|&
name|property
parameter_list|)
block|{
name|QString
name|getter
init|=
name|property
operator|.
name|annotations
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"org.qtproject.QtDBus.PropertyGetter"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|getter
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|getter
return|;
name|getter
operator|=
name|property
operator|.
name|annotations
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"com.trolltech.QtDBus.propertyGetter"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: deprecated annotation 'com.trolltech.QtDBus.propertyGetter' found;"
literal|" suggest updating to 'org.qtproject.QtDBus.PropertyGetter'\n"
argument_list|)
expr_stmt|;
return|return
name|getter
return|;
block|}
name|getter
operator|=
name|property
operator|.
name|name
expr_stmt|;
name|getter
index|[
literal|0
index|]
operator|=
name|getter
index|[
literal|0
index|]
operator|.
name|toLower
argument_list|()
expr_stmt|;
return|return
name|getter
return|;
block|}
end_function
begin_function
DECL|function|propertySetter
specifier|static
name|QString
name|propertySetter
parameter_list|(
specifier|const
name|QDBusIntrospection
operator|::
name|Property
modifier|&
name|property
parameter_list|)
block|{
name|QString
name|setter
init|=
name|property
operator|.
name|annotations
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"org.qtproject.QtDBus.PropertySetter"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|setter
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|setter
return|;
name|setter
operator|=
name|property
operator|.
name|annotations
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"com.trolltech.QtDBus.propertySetter"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|setter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: deprecated annotation 'com.trolltech.QtDBus.propertySetter' found;"
literal|" suggest updating to 'org.qtproject.QtDBus.PropertySetter'\n"
argument_list|)
expr_stmt|;
return|return
name|setter
return|;
block|}
name|setter
operator|=
name|QLatin1String
argument_list|(
literal|"set"
argument_list|)
operator|+
name|property
operator|.
name|name
expr_stmt|;
name|setter
index|[
literal|3
index|]
operator|=
name|setter
index|[
literal|3
index|]
operator|.
name|toUpper
argument_list|()
expr_stmt|;
return|return
name|setter
return|;
block|}
end_function
begin_function
DECL|function|methodName
specifier|static
name|QString
name|methodName
parameter_list|(
specifier|const
name|QDBusIntrospection
operator|::
name|Method
modifier|&
name|method
parameter_list|)
block|{
name|QString
name|name
init|=
name|method
operator|.
name|annotations
operator|.
name|value
argument_list|(
name|QStringLiteral
argument_list|(
literal|"org.qtproject.QtDBus.MethodName"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|name
return|;
return|return
name|method
operator|.
name|name
return|;
block|}
end_function
begin_function
DECL|function|stringify
specifier|static
name|QString
name|stringify
parameter_list|(
specifier|const
name|QString
modifier|&
name|data
parameter_list|)
block|{
name|QString
name|retval
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|retval
operator|+=
name|QLatin1Char
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|data
operator|.
name|length
argument_list|()
operator|&&
name|data
index|[
name|i
index|]
operator|!=
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
operator|&&
name|data
index|[
name|i
index|]
operator|!=
name|QLatin1Char
argument_list|(
literal|'\r'
argument_list|)
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|data
index|[
name|i
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|'\"'
argument_list|)
condition|)
name|retval
operator|+=
name|QLatin1String
argument_list|(
literal|"\\\""
argument_list|)
expr_stmt|;
else|else
name|retval
operator|+=
name|data
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|data
operator|.
name|length
argument_list|()
operator|&&
name|data
index|[
name|i
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|'\r'
argument_list|)
operator|&&
name|data
index|[
name|i
operator|+
literal|1
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
condition|)
name|i
operator|++
expr_stmt|;
name|retval
operator|+=
name|QLatin1String
argument_list|(
literal|"\\n\"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
end_function
begin_function
DECL|function|openFile
specifier|static
name|bool
name|openFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
name|QFile
modifier|&
name|file
parameter_list|)
block|{
if|if
condition|(
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|bool
name|isOk
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fileName
operator|==
name|QLatin1String
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|isOk
operator|=
name|file
operator|.
name|open
argument_list|(
name|stdout
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|.
name|setFileName
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|isOk
operator|=
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isOk
condition|)
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Unable to open '%s': %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|fileName
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|file
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|isOk
return|;
block|}
end_function
begin_function
DECL|function|writeProxy
specifier|static
name|void
name|writeProxy
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
specifier|const
name|QDBusIntrospection
operator|::
name|Interfaces
modifier|&
name|interfaces
parameter_list|)
block|{
comment|// open the file
name|QString
name|headerName
init|=
name|header
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QByteArray
name|headerData
decl_stmt|;
name|QTextStream
name|hs
argument_list|(
operator|&
name|headerData
argument_list|)
decl_stmt|;
name|QString
name|cppName
init|=
name|cpp
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QByteArray
name|cppData
decl_stmt|;
name|QTextStream
name|cs
argument_list|(
operator|&
name|cppData
argument_list|)
decl_stmt|;
comment|// write the header:
name|writeHeader
argument_list|(
name|hs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|cppName
operator|!=
name|headerName
condition|)
name|writeHeader
argument_list|(
name|cs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// include guards:
name|QString
name|includeGuard
decl_stmt|;
if|if
condition|(
operator|!
name|headerName
operator|.
name|isEmpty
argument_list|()
operator|&&
name|headerName
operator|!=
name|QLatin1String
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|includeGuard
operator|=
name|headerName
operator|.
name|toUpper
argument_list|()
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|includeGuard
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
condition|)
name|includeGuard
operator|=
name|includeGuard
operator|.
name|mid
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|includeGuard
operator|=
name|QLatin1String
argument_list|(
literal|"QDBUSXML2CPP_PROXY"
argument_list|)
expr_stmt|;
block|}
name|includeGuard
operator|=
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"%1"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|includeGuard
argument_list|)
expr_stmt|;
name|hs
operator|<<
literal|"#ifndef "
operator|<<
name|includeGuard
operator|<<
name|endl
operator|<<
literal|"#define "
operator|<<
name|includeGuard
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// include our stuff:
name|hs
operator|<<
literal|"#include<QtCore/QObject>"
operator|<<
name|endl
operator|<<
name|includeList
operator|<<
literal|"#include<QtDBus/QtDBus>"
operator|<<
name|endl
expr_stmt|;
for|for
control|(
specifier|const
name|QString
modifier|&
name|include
range|:
name|qAsConst
argument_list|(
name|includes
argument_list|)
control|)
block|{
name|hs
operator|<<
literal|"#include \""
operator|<<
name|include
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|headerName
operator|.
name|isEmpty
argument_list|()
condition|)
name|cs
operator|<<
literal|"#include \""
operator|<<
name|include
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
block|}
name|hs
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|cppName
operator|!=
name|headerName
condition|)
block|{
if|if
condition|(
operator|!
name|headerName
operator|.
name|isEmpty
argument_list|()
operator|&&
name|headerName
operator|!=
name|QLatin1String
argument_list|(
literal|"-"
argument_list|)
condition|)
name|cs
operator|<<
literal|"#include \""
operator|<<
name|headerName
operator|<<
literal|"\""
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
for|for
control|(
specifier|const
name|QDBusIntrospection
operator|::
name|Interface
modifier|*
name|interface
range|:
name|interfaces
control|)
block|{
name|QString
name|className
init|=
name|classNameForInterface
argument_list|(
name|interface
operator|->
name|name
argument_list|,
name|Proxy
argument_list|)
decl_stmt|;
comment|// comment:
name|hs
operator|<<
literal|"/*"
operator|<<
name|endl
operator|<<
literal|" * Proxy class for interface "
operator|<<
name|interface
operator|->
name|name
operator|<<
name|endl
operator|<<
literal|" */"
operator|<<
name|endl
expr_stmt|;
name|cs
operator|<<
literal|"/*"
operator|<<
name|endl
operator|<<
literal|" * Implementation of interface class "
operator|<<
name|className
operator|<<
name|endl
operator|<<
literal|" */"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// class header:
name|hs
operator|<<
literal|"class "
operator|<<
name|className
operator|<<
literal|": public QDBusAbstractInterface"
operator|<<
name|endl
operator|<<
literal|"{"
operator|<<
name|endl
operator|<<
literal|"    Q_OBJECT"
operator|<<
name|endl
expr_stmt|;
comment|// the interface name
name|hs
operator|<<
literal|"public:"
operator|<<
name|endl
operator|<<
literal|"    static inline const char *staticInterfaceName()"
operator|<<
name|endl
operator|<<
literal|"    { return \""
operator|<<
name|interface
operator|->
name|name
operator|<<
literal|"\"; }"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// constructors/destructors:
name|hs
operator|<<
literal|"public:"
operator|<<
name|endl
operator|<<
literal|"    "
operator|<<
name|className
operator|<<
literal|"(const QString&service, const QString&path, const QDBusConnection&connection, QObject *parent = 0);"
operator|<<
name|endl
operator|<<
name|endl
operator|<<
literal|"    ~"
operator|<<
name|className
operator|<<
literal|"();"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|cs
operator|<<
name|className
operator|<<
literal|"::"
operator|<<
name|className
operator|<<
literal|"(const QString&service, const QString&path, const QDBusConnection&connection, QObject *parent)"
operator|<<
name|endl
operator|<<
literal|"    : QDBusAbstractInterface(service, path, staticInterfaceName(), connection, parent)"
operator|<<
name|endl
operator|<<
literal|"{"
operator|<<
name|endl
operator|<<
literal|"}"
operator|<<
name|endl
operator|<<
name|endl
operator|<<
name|className
operator|<<
literal|"::~"
operator|<<
name|className
operator|<<
literal|"()"
operator|<<
name|endl
operator|<<
literal|"{"
operator|<<
name|endl
operator|<<
literal|"}"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// properties:
for|for
control|(
specifier|const
name|QDBusIntrospection
operator|::
name|Property
modifier|&
name|property
range|:
name|interface
operator|->
name|properties
control|)
block|{
name|QByteArray
name|type
init|=
name|qtTypeName
argument_list|(
name|property
operator|.
name|type
argument_list|,
name|property
operator|.
name|annotations
argument_list|)
decl_stmt|;
name|QString
name|templateType
init|=
name|templateArg
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|QString
name|constRefType
init|=
name|constRefArg
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|QString
name|getter
init|=
name|propertyGetter
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|QString
name|setter
init|=
name|propertySetter
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|hs
operator|<<
literal|"    Q_PROPERTY("
operator|<<
name|type
operator|<<
literal|" "
operator|<<
name|property
operator|.
name|name
expr_stmt|;
comment|// getter:
if|if
condition|(
name|property
operator|.
name|access
operator|!=
name|QDBusIntrospection
operator|::
name|Property
operator|::
name|Write
condition|)
comment|// it's readble
name|hs
operator|<<
literal|" READ "
operator|<<
name|getter
expr_stmt|;
comment|// setter
if|if
condition|(
name|property
operator|.
name|access
operator|!=
name|QDBusIntrospection
operator|::
name|Property
operator|::
name|Read
condition|)
comment|// it's writeable
name|hs
operator|<<
literal|" WRITE "
operator|<<
name|setter
expr_stmt|;
name|hs
operator|<<
literal|")"
operator|<<
name|endl
expr_stmt|;
comment|// getter:
if|if
condition|(
name|property
operator|.
name|access
operator|!=
name|QDBusIntrospection
operator|::
name|Property
operator|::
name|Write
condition|)
block|{
name|hs
operator|<<
literal|"    inline "
operator|<<
name|type
operator|<<
literal|" "
operator|<<
name|getter
operator|<<
literal|"() const"
operator|<<
name|endl
operator|<<
literal|"    { return qvariant_cast< "
operator|<<
name|type
operator|<<
literal|">(property(\""
operator|<<
name|property
operator|.
name|name
operator|<<
literal|"\")); }"
operator|<<
name|endl
expr_stmt|;
block|}
comment|// setter:
if|if
condition|(
name|property
operator|.
name|access
operator|!=
name|QDBusIntrospection
operator|::
name|Property
operator|::
name|Read
condition|)
block|{
name|hs
operator|<<
literal|"    inline void "
operator|<<
name|setter
operator|<<
literal|"("
operator|<<
name|constRefArg
argument_list|(
name|type
argument_list|)
operator|<<
literal|"value)"
operator|<<
name|endl
operator|<<
literal|"    { setProperty(\""
operator|<<
name|property
operator|.
name|name
operator|<<
literal|"\", QVariant::fromValue(value)); }"
operator|<<
name|endl
expr_stmt|;
block|}
name|hs
operator|<<
name|endl
expr_stmt|;
block|}
comment|// methods:
name|hs
operator|<<
literal|"public Q_SLOTS: // METHODS"
operator|<<
name|endl
expr_stmt|;
for|for
control|(
specifier|const
name|QDBusIntrospection
operator|::
name|Method
modifier|&
name|method
range|:
name|interface
operator|->
name|methods
control|)
block|{
name|bool
name|isDeprecated
init|=
name|method
operator|.
name|annotations
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"org.freedesktop.DBus.Deprecated"
argument_list|)
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
decl_stmt|;
name|bool
name|isNoReply
init|=
name|method
operator|.
name|annotations
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
name|ANNOTATION_NO_WAIT
argument_list|)
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNoReply
operator|&&
operator|!
name|method
operator|.
name|outputArgs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"warning: method %s in interface %s is marked 'no-reply' but has output arguments.\n"
argument_list|,
name|qPrintable
argument_list|(
name|method
operator|.
name|name
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|interface
operator|->
name|name
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|hs
operator|<<
literal|"    inline "
operator|<<
operator|(
name|isDeprecated
condition|?
literal|"Q_DECL_DEPRECATED "
else|:
literal|""
operator|)
expr_stmt|;
if|if
condition|(
name|isNoReply
condition|)
block|{
name|hs
operator|<<
literal|"Q_NOREPLY void "
expr_stmt|;
block|}
else|else
block|{
name|hs
operator|<<
literal|"QDBusPendingReply<"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|method
operator|.
name|outputArgs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|hs
operator|<<
operator|(
name|i
operator|>
literal|0
condition|?
literal|", "
else|:
literal|""
operator|)
operator|<<
name|templateArg
argument_list|(
name|qtTypeName
argument_list|(
name|method
operator|.
name|outputArgs
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
argument_list|,
name|method
operator|.
name|annotations
argument_list|,
name|i
argument_list|,
literal|"Out"
argument_list|)
argument_list|)
expr_stmt|;
name|hs
operator|<<
literal|"> "
expr_stmt|;
block|}
name|hs
operator|<<
name|methodName
argument_list|(
name|method
argument_list|)
operator|<<
literal|"("
expr_stmt|;
name|QStringList
name|argNames
init|=
name|makeArgNames
argument_list|(
name|method
operator|.
name|inputArgs
argument_list|)
decl_stmt|;
name|writeArgList
argument_list|(
name|hs
argument_list|,
name|argNames
argument_list|,
name|method
operator|.
name|annotations
argument_list|,
name|method
operator|.
name|inputArgs
argument_list|)
expr_stmt|;
name|hs
operator|<<
literal|")"
operator|<<
name|endl
operator|<<
literal|"    {"
operator|<<
name|endl
operator|<<
literal|"        QList<QVariant> argumentList;"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|method
operator|.
name|inputArgs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hs
operator|<<
literal|"        argumentList"
expr_stmt|;
for|for
control|(
name|int
name|argPos
init|=
literal|0
init|;
name|argPos
operator|<
name|method
operator|.
name|inputArgs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|argPos
control|)
name|hs
operator|<<
literal|"<< QVariant::fromValue("
operator|<<
name|argNames
operator|.
name|at
argument_list|(
name|argPos
argument_list|)
operator|<<
literal|')'
expr_stmt|;
name|hs
operator|<<
literal|";"
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|isNoReply
condition|)
name|hs
operator|<<
literal|"        callWithArgumentList(QDBus::NoBlock, "
operator|<<
literal|"QStringLiteral(\""
operator|<<
name|method
operator|.
name|name
operator|<<
literal|"\"), argumentList);"
operator|<<
name|endl
expr_stmt|;
else|else
name|hs
operator|<<
literal|"        return asyncCallWithArgumentList(QStringLiteral(\""
operator|<<
name|method
operator|.
name|name
operator|<<
literal|"\"), argumentList);"
operator|<<
name|endl
expr_stmt|;
comment|// close the function:
name|hs
operator|<<
literal|"    }"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|method
operator|.
name|outputArgs
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// generate the old-form QDBusReply methods with multiple incoming parameters
name|hs
operator|<<
literal|"    inline "
operator|<<
operator|(
name|isDeprecated
condition|?
literal|"Q_DECL_DEPRECATED "
else|:
literal|""
operator|)
operator|<<
literal|"QDBusReply<"
operator|<<
name|templateArg
argument_list|(
name|qtTypeName
argument_list|(
name|method
operator|.
name|outputArgs
operator|.
name|first
argument_list|()
operator|.
name|type
argument_list|,
name|method
operator|.
name|annotations
argument_list|,
literal|0
argument_list|,
literal|"Out"
argument_list|)
argument_list|)
operator|<<
literal|"> "
expr_stmt|;
name|hs
operator|<<
name|method
operator|.
name|name
operator|<<
literal|"("
expr_stmt|;
name|QStringList
name|argNames
init|=
name|makeArgNames
argument_list|(
name|method
operator|.
name|inputArgs
argument_list|,
name|method
operator|.
name|outputArgs
argument_list|)
decl_stmt|;
name|writeArgList
argument_list|(
name|hs
argument_list|,
name|argNames
argument_list|,
name|method
operator|.
name|annotations
argument_list|,
name|method
operator|.
name|inputArgs
argument_list|,
name|method
operator|.
name|outputArgs
argument_list|)
expr_stmt|;
name|hs
operator|<<
literal|")"
operator|<<
name|endl
operator|<<
literal|"    {"
operator|<<
name|endl
operator|<<
literal|"        QList<QVariant> argumentList;"
operator|<<
name|endl
expr_stmt|;
name|int
name|argPos
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|method
operator|.
name|inputArgs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hs
operator|<<
literal|"        argumentList"
expr_stmt|;
for|for
control|(
name|argPos
operator|=
literal|0
init|;
name|argPos
operator|<
name|method
operator|.
name|inputArgs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|argPos
control|)
name|hs
operator|<<
literal|"<< QVariant::fromValue("
operator|<<
name|argNames
operator|.
name|at
argument_list|(
name|argPos
argument_list|)
operator|<<
literal|')'
expr_stmt|;
name|hs
operator|<<
literal|";"
operator|<<
name|endl
expr_stmt|;
block|}
name|hs
operator|<<
literal|"        QDBusMessage reply = callWithArgumentList(QDBus::Block, "
operator|<<
literal|"QStringLiteral(\""
operator|<<
name|method
operator|.
name|name
operator|<<
literal|"\"), argumentList);"
operator|<<
name|endl
expr_stmt|;
name|argPos
operator|++
expr_stmt|;
name|hs
operator|<<
literal|"        if (reply.type() == QDBusMessage::ReplyMessage&& reply.arguments().count() == "
operator|<<
name|method
operator|.
name|outputArgs
operator|.
name|count
argument_list|()
operator|<<
literal|") {"
operator|<<
name|endl
expr_stmt|;
comment|// yes, starting from 1
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|method
operator|.
name|outputArgs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|hs
operator|<<
literal|"            "
operator|<<
name|argNames
operator|.
name|at
argument_list|(
name|argPos
operator|++
argument_list|)
operator|<<
literal|" = qdbus_cast<"
operator|<<
name|templateArg
argument_list|(
name|qtTypeName
argument_list|(
name|method
operator|.
name|outputArgs
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
argument_list|,
name|method
operator|.
name|annotations
argument_list|,
name|i
argument_list|,
literal|"Out"
argument_list|)
argument_list|)
operator|<<
literal|">(reply.arguments().at("
operator|<<
name|i
operator|<<
literal|"));"
operator|<<
name|endl
expr_stmt|;
name|hs
operator|<<
literal|"        }"
operator|<<
name|endl
operator|<<
literal|"        return reply;"
operator|<<
name|endl
operator|<<
literal|"    }"
operator|<<
name|endl
expr_stmt|;
block|}
name|hs
operator|<<
name|endl
expr_stmt|;
block|}
name|hs
operator|<<
literal|"Q_SIGNALS: // SIGNALS"
operator|<<
name|endl
expr_stmt|;
for|for
control|(
specifier|const
name|QDBusIntrospection
operator|::
name|Signal
modifier|&
name|signal
range|:
name|interface
operator|->
name|signals_
control|)
block|{
name|hs
operator|<<
literal|"    "
expr_stmt|;
if|if
condition|(
name|signal
operator|.
name|annotations
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"org.freedesktop.DBus.Deprecated"
argument_list|)
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
condition|)
name|hs
operator|<<
literal|"Q_DECL_DEPRECATED "
expr_stmt|;
name|hs
operator|<<
literal|"void "
operator|<<
name|signal
operator|.
name|name
operator|<<
literal|"("
expr_stmt|;
name|QStringList
name|argNames
init|=
name|makeArgNames
argument_list|(
name|signal
operator|.
name|outputArgs
argument_list|)
decl_stmt|;
name|writeArgList
argument_list|(
name|hs
argument_list|,
name|argNames
argument_list|,
name|signal
operator|.
name|annotations
argument_list|,
name|signal
operator|.
name|outputArgs
argument_list|)
expr_stmt|;
name|hs
operator|<<
literal|");"
operator|<<
name|endl
expr_stmt|;
comment|// finished for header
block|}
comment|// close the class:
name|hs
operator|<<
literal|"};"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|skipNamespaces
condition|)
block|{
name|QStringList
name|last
decl_stmt|;
name|QDBusIntrospection
operator|::
name|Interfaces
operator|::
name|ConstIterator
name|it
init|=
name|interfaces
operator|.
name|constBegin
argument_list|()
decl_stmt|;
do|do
block|{
name|QStringList
name|current
decl_stmt|;
name|QString
name|name
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|interfaces
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|current
operator|=
name|it
operator|->
name|constData
argument_list|()
operator|->
name|name
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
name|name
operator|=
name|current
operator|.
name|takeLast
argument_list|()
expr_stmt|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|current
operator|.
name|count
argument_list|()
operator|&&
name|i
operator|<
name|last
operator|.
name|count
argument_list|()
operator|&&
name|current
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|last
operator|.
name|at
argument_list|(
name|i
argument_list|)
condition|)
operator|++
name|i
expr_stmt|;
comment|// i parts matched
comment|// close last.arguments().count() - i namespaces:
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<
name|last
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
name|hs
operator|<<
name|QString
argument_list|(
operator|(
name|last
operator|.
name|count
argument_list|()
operator|-
name|j
operator|-
literal|1
operator|+
name|i
operator|)
operator|*
literal|2
argument_list|,
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|<<
literal|"}"
operator|<<
name|endl
expr_stmt|;
comment|// open current.arguments().count() - i namespaces
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<
name|current
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
name|hs
operator|<<
name|QString
argument_list|(
name|j
operator|*
literal|2
argument_list|,
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|<<
literal|"namespace "
operator|<<
name|current
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|<<
literal|" {"
operator|<<
name|endl
expr_stmt|;
comment|// add this class:
if|if
condition|(
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hs
operator|<<
name|QString
argument_list|(
name|current
operator|.
name|count
argument_list|()
operator|*
literal|2
argument_list|,
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|<<
literal|"typedef ::"
operator|<<
name|classNameForInterface
argument_list|(
name|it
operator|->
name|constData
argument_list|()
operator|->
name|name
argument_list|,
name|Proxy
argument_list|)
operator|<<
literal|" "
operator|<<
name|name
operator|<<
literal|";"
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|it
operator|==
name|interfaces
operator|.
name|constEnd
argument_list|()
condition|)
break|break;
operator|++
name|it
expr_stmt|;
name|last
operator|=
name|current
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
comment|// close the include guard
name|hs
operator|<<
literal|"#endif"
operator|<<
name|endl
expr_stmt|;
name|QString
name|mocName
init|=
name|moc
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeMocs
operator|&&
operator|!
name|mocName
operator|.
name|isEmpty
argument_list|()
condition|)
name|cs
operator|<<
name|endl
operator|<<
literal|"#include \""
operator|<<
name|mocName
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
name|cs
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hs
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QFile
name|file
decl_stmt|;
specifier|const
name|bool
name|headerOpen
init|=
name|openFile
argument_list|(
name|headerName
argument_list|,
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerOpen
condition|)
name|file
operator|.
name|write
argument_list|(
name|headerData
argument_list|)
expr_stmt|;
if|if
condition|(
name|headerName
operator|==
name|cppName
condition|)
block|{
if|if
condition|(
name|headerOpen
condition|)
name|file
operator|.
name|write
argument_list|(
name|cppData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QFile
name|cppFile
decl_stmt|;
if|if
condition|(
name|openFile
argument_list|(
name|cppName
argument_list|,
name|cppFile
argument_list|)
condition|)
name|cppFile
operator|.
name|write
argument_list|(
name|cppData
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeAdaptor
specifier|static
name|void
name|writeAdaptor
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
specifier|const
name|QDBusIntrospection
operator|::
name|Interfaces
modifier|&
name|interfaces
parameter_list|)
block|{
comment|// open the file
name|QString
name|headerName
init|=
name|header
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QByteArray
name|headerData
decl_stmt|;
name|QTextStream
name|hs
argument_list|(
operator|&
name|headerData
argument_list|)
decl_stmt|;
name|QString
name|cppName
init|=
name|cpp
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QByteArray
name|cppData
decl_stmt|;
name|QTextStream
name|cs
argument_list|(
operator|&
name|cppData
argument_list|)
decl_stmt|;
comment|// write the headers
name|writeHeader
argument_list|(
name|hs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|cppName
operator|!=
name|headerName
condition|)
name|writeHeader
argument_list|(
name|cs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// include guards:
name|QString
name|includeGuard
decl_stmt|;
if|if
condition|(
operator|!
name|headerName
operator|.
name|isEmpty
argument_list|()
operator|&&
name|headerName
operator|!=
name|QLatin1String
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|includeGuard
operator|=
name|headerName
operator|.
name|toUpper
argument_list|()
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|includeGuard
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
condition|)
name|includeGuard
operator|=
name|includeGuard
operator|.
name|mid
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|includeGuard
operator|=
name|QLatin1String
argument_list|(
literal|"QDBUSXML2CPP_ADAPTOR"
argument_list|)
expr_stmt|;
block|}
name|includeGuard
operator|=
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"%1"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|includeGuard
argument_list|)
expr_stmt|;
name|hs
operator|<<
literal|"#ifndef "
operator|<<
name|includeGuard
operator|<<
name|endl
operator|<<
literal|"#define "
operator|<<
name|includeGuard
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// include our stuff:
name|hs
operator|<<
literal|"#include<QtCore/QObject>"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|cppName
operator|==
name|headerName
condition|)
name|hs
operator|<<
literal|"#include<QtCore/QMetaObject>"
operator|<<
name|endl
operator|<<
literal|"#include<QtCore/QVariant>"
operator|<<
name|endl
expr_stmt|;
name|hs
operator|<<
literal|"#include<QtDBus/QtDBus>"
operator|<<
name|endl
expr_stmt|;
for|for
control|(
specifier|const
name|QString
modifier|&
name|include
range|:
name|qAsConst
argument_list|(
name|includes
argument_list|)
control|)
block|{
name|hs
operator|<<
literal|"#include \""
operator|<<
name|include
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|headerName
operator|.
name|isEmpty
argument_list|()
condition|)
name|cs
operator|<<
literal|"#include \""
operator|<<
name|include
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|cppName
operator|!=
name|headerName
condition|)
block|{
if|if
condition|(
operator|!
name|headerName
operator|.
name|isEmpty
argument_list|()
operator|&&
name|headerName
operator|!=
name|QLatin1String
argument_list|(
literal|"-"
argument_list|)
condition|)
name|cs
operator|<<
literal|"#include \""
operator|<<
name|headerName
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
name|cs
operator|<<
literal|"#include<QtCore/QMetaObject>"
operator|<<
name|endl
operator|<<
name|includeList
operator|<<
name|endl
expr_stmt|;
name|hs
operator|<<
name|forwardDeclarations
expr_stmt|;
block|}
else|else
block|{
name|hs
operator|<<
name|includeList
expr_stmt|;
block|}
name|hs
operator|<<
name|endl
expr_stmt|;
name|QString
name|parent
init|=
name|parentClassName
decl_stmt|;
if|if
condition|(
name|parentClassName
operator|.
name|isEmpty
argument_list|()
condition|)
name|parent
operator|=
name|QLatin1String
argument_list|(
literal|"QObject"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|const
name|QDBusIntrospection
operator|::
name|Interface
modifier|*
name|interface
range|:
name|interfaces
control|)
block|{
name|QString
name|className
init|=
name|classNameForInterface
argument_list|(
name|interface
operator|->
name|name
argument_list|,
name|Adaptor
argument_list|)
decl_stmt|;
comment|// comment:
name|hs
operator|<<
literal|"/*"
operator|<<
name|endl
operator|<<
literal|" * Adaptor class for interface "
operator|<<
name|interface
operator|->
name|name
operator|<<
name|endl
operator|<<
literal|" */"
operator|<<
name|endl
expr_stmt|;
name|cs
operator|<<
literal|"/*"
operator|<<
name|endl
operator|<<
literal|" * Implementation of adaptor class "
operator|<<
name|className
operator|<<
name|endl
operator|<<
literal|" */"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// class header:
name|hs
operator|<<
literal|"class "
operator|<<
name|className
operator|<<
literal|": public QDBusAbstractAdaptor"
operator|<<
name|endl
operator|<<
literal|"{"
operator|<<
name|endl
operator|<<
literal|"    Q_OBJECT"
operator|<<
name|endl
operator|<<
literal|"    Q_CLASSINFO(\"D-Bus Interface\", \""
operator|<<
name|interface
operator|->
name|name
operator|<<
literal|"\")"
operator|<<
name|endl
operator|<<
literal|"    Q_CLASSINFO(\"D-Bus Introspection\", \"\""
operator|<<
name|endl
operator|<<
name|stringify
argument_list|(
name|interface
operator|->
name|introspection
argument_list|)
operator|<<
literal|"        \"\")"
operator|<<
name|endl
operator|<<
literal|"public:"
operator|<<
name|endl
operator|<<
literal|"    "
operator|<<
name|className
operator|<<
literal|"("
operator|<<
name|parent
operator|<<
literal|" *parent);"
operator|<<
name|endl
operator|<<
literal|"    virtual ~"
operator|<<
name|className
operator|<<
literal|"();"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|parentClassName
operator|.
name|isEmpty
argument_list|()
condition|)
name|hs
operator|<<
literal|"    inline "
operator|<<
name|parent
operator|<<
literal|" *parent() const"
operator|<<
name|endl
operator|<<
literal|"    { return static_cast<"
operator|<<
name|parent
operator|<<
literal|" *>(QObject::parent()); }"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// constructor/destructor
name|cs
operator|<<
name|className
operator|<<
literal|"::"
operator|<<
name|className
operator|<<
literal|"("
operator|<<
name|parent
operator|<<
literal|" *parent)"
operator|<<
name|endl
operator|<<
literal|"    : QDBusAbstractAdaptor(parent)"
operator|<<
name|endl
operator|<<
literal|"{"
operator|<<
name|endl
operator|<<
literal|"    // constructor"
operator|<<
name|endl
operator|<<
literal|"    setAutoRelaySignals(true);"
operator|<<
name|endl
operator|<<
literal|"}"
operator|<<
name|endl
operator|<<
name|endl
operator|<<
name|className
operator|<<
literal|"::~"
operator|<<
name|className
operator|<<
literal|"()"
operator|<<
name|endl
operator|<<
literal|"{"
operator|<<
name|endl
operator|<<
literal|"    // destructor"
operator|<<
name|endl
operator|<<
literal|"}"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|hs
operator|<<
literal|"public: // PROPERTIES"
operator|<<
name|endl
expr_stmt|;
for|for
control|(
specifier|const
name|QDBusIntrospection
operator|::
name|Property
modifier|&
name|property
range|:
name|interface
operator|->
name|properties
control|)
block|{
name|QByteArray
name|type
init|=
name|qtTypeName
argument_list|(
name|property
operator|.
name|type
argument_list|,
name|property
operator|.
name|annotations
argument_list|)
decl_stmt|;
name|QString
name|constRefType
init|=
name|constRefArg
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|QString
name|getter
init|=
name|propertyGetter
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|QString
name|setter
init|=
name|propertySetter
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|hs
operator|<<
literal|"    Q_PROPERTY("
operator|<<
name|type
operator|<<
literal|" "
operator|<<
name|property
operator|.
name|name
expr_stmt|;
if|if
condition|(
name|property
operator|.
name|access
operator|!=
name|QDBusIntrospection
operator|::
name|Property
operator|::
name|Write
condition|)
name|hs
operator|<<
literal|" READ "
operator|<<
name|getter
expr_stmt|;
if|if
condition|(
name|property
operator|.
name|access
operator|!=
name|QDBusIntrospection
operator|::
name|Property
operator|::
name|Read
condition|)
name|hs
operator|<<
literal|" WRITE "
operator|<<
name|setter
expr_stmt|;
name|hs
operator|<<
literal|")"
operator|<<
name|endl
expr_stmt|;
comment|// getter:
if|if
condition|(
name|property
operator|.
name|access
operator|!=
name|QDBusIntrospection
operator|::
name|Property
operator|::
name|Write
condition|)
block|{
name|hs
operator|<<
literal|"    "
operator|<<
name|type
operator|<<
literal|" "
operator|<<
name|getter
operator|<<
literal|"() const;"
operator|<<
name|endl
expr_stmt|;
name|cs
operator|<<
name|type
operator|<<
literal|" "
operator|<<
name|className
operator|<<
literal|"::"
operator|<<
name|getter
operator|<<
literal|"() const"
operator|<<
name|endl
operator|<<
literal|"{"
operator|<<
name|endl
operator|<<
literal|"    // get the value of property "
operator|<<
name|property
operator|.
name|name
operator|<<
name|endl
operator|<<
literal|"    return qvariant_cast< "
operator|<<
name|type
operator|<<
literal|">(parent()->property(\""
operator|<<
name|property
operator|.
name|name
operator|<<
literal|"\"));"
operator|<<
name|endl
operator|<<
literal|"}"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
comment|// setter
if|if
condition|(
name|property
operator|.
name|access
operator|!=
name|QDBusIntrospection
operator|::
name|Property
operator|::
name|Read
condition|)
block|{
name|hs
operator|<<
literal|"    void "
operator|<<
name|setter
operator|<<
literal|"("
operator|<<
name|constRefType
operator|<<
literal|"value);"
operator|<<
name|endl
expr_stmt|;
name|cs
operator|<<
literal|"void "
operator|<<
name|className
operator|<<
literal|"::"
operator|<<
name|setter
operator|<<
literal|"("
operator|<<
name|constRefType
operator|<<
literal|"value)"
operator|<<
name|endl
operator|<<
literal|"{"
operator|<<
name|endl
operator|<<
literal|"    // set the value of property "
operator|<<
name|property
operator|.
name|name
operator|<<
name|endl
operator|<<
literal|"    parent()->setProperty(\""
operator|<<
name|property
operator|.
name|name
operator|<<
literal|"\", QVariant::fromValue(value"
expr_stmt|;
if|if
condition|(
name|constRefType
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"QDBusVariant"
argument_list|)
argument_list|)
condition|)
name|cs
operator|<<
literal|".variant()"
expr_stmt|;
name|cs
operator|<<
literal|"));"
operator|<<
name|endl
operator|<<
literal|"}"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
name|hs
operator|<<
name|endl
expr_stmt|;
block|}
name|hs
operator|<<
literal|"public Q_SLOTS: // METHODS"
operator|<<
name|endl
expr_stmt|;
for|for
control|(
specifier|const
name|QDBusIntrospection
operator|::
name|Method
modifier|&
name|method
range|:
name|interface
operator|->
name|methods
control|)
block|{
name|bool
name|isNoReply
init|=
name|method
operator|.
name|annotations
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
name|ANNOTATION_NO_WAIT
argument_list|)
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNoReply
operator|&&
operator|!
name|method
operator|.
name|outputArgs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"warning: method %s in interface %s is marked 'no-reply' but has output arguments.\n"
argument_list|,
name|qPrintable
argument_list|(
name|method
operator|.
name|name
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|interface
operator|->
name|name
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|hs
operator|<<
literal|"    "
expr_stmt|;
if|if
condition|(
name|method
operator|.
name|annotations
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"org.freedesktop.DBus.Deprecated"
argument_list|)
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
condition|)
name|hs
operator|<<
literal|"Q_DECL_DEPRECATED "
expr_stmt|;
name|QByteArray
name|returnType
decl_stmt|;
if|if
condition|(
name|isNoReply
condition|)
block|{
name|hs
operator|<<
literal|"Q_NOREPLY void "
expr_stmt|;
name|cs
operator|<<
literal|"void "
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|outputArgs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hs
operator|<<
literal|"void "
expr_stmt|;
name|cs
operator|<<
literal|"void "
expr_stmt|;
block|}
else|else
block|{
name|returnType
operator|=
name|qtTypeName
argument_list|(
name|method
operator|.
name|outputArgs
operator|.
name|first
argument_list|()
operator|.
name|type
argument_list|,
name|method
operator|.
name|annotations
argument_list|,
literal|0
argument_list|,
literal|"Out"
argument_list|)
expr_stmt|;
name|hs
operator|<<
name|returnType
operator|<<
literal|" "
expr_stmt|;
name|cs
operator|<<
name|returnType
operator|<<
literal|" "
expr_stmt|;
block|}
name|QString
name|name
init|=
name|methodName
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|hs
operator|<<
name|name
operator|<<
literal|"("
expr_stmt|;
name|cs
operator|<<
name|className
operator|<<
literal|"::"
operator|<<
name|name
operator|<<
literal|"("
expr_stmt|;
name|QStringList
name|argNames
init|=
name|makeArgNames
argument_list|(
name|method
operator|.
name|inputArgs
argument_list|,
name|method
operator|.
name|outputArgs
argument_list|)
decl_stmt|;
name|writeArgList
argument_list|(
name|hs
argument_list|,
name|argNames
argument_list|,
name|method
operator|.
name|annotations
argument_list|,
name|method
operator|.
name|inputArgs
argument_list|,
name|method
operator|.
name|outputArgs
argument_list|)
expr_stmt|;
name|writeArgList
argument_list|(
name|cs
argument_list|,
name|argNames
argument_list|,
name|method
operator|.
name|annotations
argument_list|,
name|method
operator|.
name|inputArgs
argument_list|,
name|method
operator|.
name|outputArgs
argument_list|)
expr_stmt|;
name|hs
operator|<<
literal|");"
operator|<<
name|endl
expr_stmt|;
comment|// finished for header
name|cs
operator|<<
literal|")"
operator|<<
name|endl
operator|<<
literal|"{"
operator|<<
name|endl
operator|<<
literal|"    // handle method call "
operator|<<
name|interface
operator|->
name|name
operator|<<
literal|"."
operator|<<
name|methodName
argument_list|(
name|method
argument_list|)
operator|<<
name|endl
expr_stmt|;
comment|// make the call
name|bool
name|usingInvokeMethod
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|parentClassName
operator|.
name|isEmpty
argument_list|()
operator|&&
name|method
operator|.
name|inputArgs
operator|.
name|count
argument_list|()
operator|<=
literal|10
operator|&&
name|method
operator|.
name|outputArgs
operator|.
name|count
argument_list|()
operator|<=
literal|1
condition|)
name|usingInvokeMethod
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|usingInvokeMethod
condition|)
block|{
comment|// we are using QMetaObject::invokeMethod
if|if
condition|(
operator|!
name|returnType
operator|.
name|isEmpty
argument_list|()
condition|)
name|cs
operator|<<
literal|"    "
operator|<<
name|returnType
operator|<<
literal|" "
operator|<<
name|argNames
operator|.
name|at
argument_list|(
name|method
operator|.
name|inputArgs
operator|.
name|count
argument_list|()
argument_list|)
operator|<<
literal|";"
operator|<<
name|endl
expr_stmt|;
specifier|static
specifier|const
name|char
name|invoke
index|[]
init|=
literal|"    QMetaObject::invokeMethod(parent(), \""
decl_stmt|;
name|cs
operator|<<
name|invoke
operator|<<
name|name
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|method
operator|.
name|outputArgs
operator|.
name|isEmpty
argument_list|()
condition|)
name|cs
operator|<<
literal|", Q_RETURN_ARG("
operator|<<
name|qtTypeName
argument_list|(
name|method
operator|.
name|outputArgs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|,
name|method
operator|.
name|annotations
argument_list|,
literal|0
argument_list|,
literal|"Out"
argument_list|)
operator|<<
literal|", "
operator|<<
name|argNames
operator|.
name|at
argument_list|(
name|method
operator|.
name|inputArgs
operator|.
name|count
argument_list|()
argument_list|)
operator|<<
literal|")"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|method
operator|.
name|inputArgs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|cs
operator|<<
literal|", Q_ARG("
operator|<<
name|qtTypeName
argument_list|(
name|method
operator|.
name|inputArgs
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
argument_list|,
name|method
operator|.
name|annotations
argument_list|,
name|i
argument_list|,
literal|"In"
argument_list|)
operator|<<
literal|", "
operator|<<
name|argNames
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|<<
literal|")"
expr_stmt|;
name|cs
operator|<<
literal|");"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|returnType
operator|.
name|isEmpty
argument_list|()
condition|)
name|cs
operator|<<
literal|"    return "
operator|<<
name|argNames
operator|.
name|at
argument_list|(
name|method
operator|.
name|inputArgs
operator|.
name|count
argument_list|()
argument_list|)
operator|<<
literal|";"
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|parentClassName
operator|.
name|isEmpty
argument_list|()
condition|)
name|cs
operator|<<
literal|"    //"
expr_stmt|;
else|else
name|cs
operator|<<
literal|"    "
expr_stmt|;
if|if
condition|(
operator|!
name|method
operator|.
name|outputArgs
operator|.
name|isEmpty
argument_list|()
condition|)
name|cs
operator|<<
literal|"return "
expr_stmt|;
if|if
condition|(
name|parentClassName
operator|.
name|isEmpty
argument_list|()
condition|)
name|cs
operator|<<
literal|"static_cast<YourObjectType *>(parent())->"
expr_stmt|;
else|else
name|cs
operator|<<
literal|"parent()->"
expr_stmt|;
name|cs
operator|<<
name|name
operator|<<
literal|"("
expr_stmt|;
name|int
name|argPos
init|=
literal|0
decl_stmt|;
name|bool
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|method
operator|.
name|inputArgs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|cs
operator|<<
operator|(
name|first
condition|?
literal|""
else|:
literal|", "
operator|)
operator|<<
name|argNames
operator|.
name|at
argument_list|(
name|argPos
operator|++
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
operator|++
name|argPos
expr_stmt|;
comment|// skip retval, if any
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|method
operator|.
name|outputArgs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|cs
operator|<<
operator|(
name|first
condition|?
literal|""
else|:
literal|", "
operator|)
operator|<<
name|argNames
operator|.
name|at
argument_list|(
name|argPos
operator|++
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|cs
operator|<<
literal|");"
operator|<<
name|endl
expr_stmt|;
block|}
name|cs
operator|<<
literal|"}"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
name|hs
operator|<<
literal|"Q_SIGNALS: // SIGNALS"
operator|<<
name|endl
expr_stmt|;
for|for
control|(
specifier|const
name|QDBusIntrospection
operator|::
name|Signal
modifier|&
name|signal
range|:
name|interface
operator|->
name|signals_
control|)
block|{
name|hs
operator|<<
literal|"    "
expr_stmt|;
if|if
condition|(
name|signal
operator|.
name|annotations
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"org.freedesktop.DBus.Deprecated"
argument_list|)
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
condition|)
name|hs
operator|<<
literal|"Q_DECL_DEPRECATED "
expr_stmt|;
name|hs
operator|<<
literal|"void "
operator|<<
name|signal
operator|.
name|name
operator|<<
literal|"("
expr_stmt|;
name|QStringList
name|argNames
init|=
name|makeArgNames
argument_list|(
name|signal
operator|.
name|outputArgs
argument_list|)
decl_stmt|;
name|writeArgList
argument_list|(
name|hs
argument_list|,
name|argNames
argument_list|,
name|signal
operator|.
name|annotations
argument_list|,
name|signal
operator|.
name|outputArgs
argument_list|)
expr_stmt|;
name|hs
operator|<<
literal|");"
operator|<<
name|endl
expr_stmt|;
comment|// finished for header
block|}
comment|// close the class:
name|hs
operator|<<
literal|"};"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
comment|// close the include guard
name|hs
operator|<<
literal|"#endif"
operator|<<
name|endl
expr_stmt|;
name|QString
name|mocName
init|=
name|moc
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeMocs
operator|&&
operator|!
name|mocName
operator|.
name|isEmpty
argument_list|()
condition|)
name|cs
operator|<<
name|endl
operator|<<
literal|"#include \""
operator|<<
name|mocName
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
name|cs
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hs
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QFile
name|file
decl_stmt|;
specifier|const
name|bool
name|headerOpen
init|=
name|openFile
argument_list|(
name|headerName
argument_list|,
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerOpen
condition|)
name|file
operator|.
name|write
argument_list|(
name|headerData
argument_list|)
expr_stmt|;
if|if
condition|(
name|headerName
operator|==
name|cppName
condition|)
block|{
if|if
condition|(
name|headerOpen
condition|)
name|file
operator|.
name|write
argument_list|(
name|cppData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QFile
name|cppFile
decl_stmt|;
if|if
condition|(
name|openFile
argument_list|(
name|cppName
argument_list|,
name|cppFile
argument_list|)
condition|)
name|cppFile
operator|.
name|write
argument_list|(
name|cppData
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QStringList
name|arguments
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argc
condition|;
operator|++
name|i
control|)
block|{
name|arguments
operator|.
name|append
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|parseCmdLine
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|QDBusIntrospection
operator|::
name|Interfaces
name|interfaces
init|=
name|readInput
argument_list|()
decl_stmt|;
name|cleanInterfaces
argument_list|(
name|interfaces
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|proxyFile
operator|.
name|isEmpty
argument_list|()
operator|||
name|adaptorFile
operator|.
name|isEmpty
argument_list|()
condition|)
name|writeProxy
argument_list|(
name|proxyFile
argument_list|,
name|interfaces
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|adaptorFile
operator|.
name|isEmpty
argument_list|()
condition|)
name|writeAdaptor
argument_list|(
name|adaptorFile
argument_list|,
name|interfaces
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
end_unit
