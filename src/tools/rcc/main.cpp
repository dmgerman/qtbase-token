begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<rcc.h>
end_include
begin_include
include|#
directive|include
file|"../../corelib/kernel/qcorecmdlineargs_p.h"
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QDir>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QFileInfo>
end_include
begin_include
include|#
directive|include
file|<QTextStream>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|showHelp
name|void
name|showHelp
parameter_list|(
specifier|const
name|QString
modifier|&
name|argv0
parameter_list|,
specifier|const
name|QString
modifier|&
name|error
parameter_list|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Qt resource compiler\n"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|error
operator|.
name|isEmpty
argument_list|()
condition|)
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%s: %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|argv0
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Usage: %s  [options]<inputs>\n\n"
literal|"Options:\n"
literal|"  -o file              write output to file rather than stdout\n"
literal|"  -name name           create an external initialization function with name\n"
literal|"  -threshold level     threshold to consider compressing files\n"
literal|"  -compress level      compress input files by level\n"
literal|"  -root path           prefix resource access path with root path\n"
literal|"  -no-compress         disable all compression\n"
literal|"  -binary              output a binary file for use as a dynamic resource\n"
literal|"  -namespace           turn off namespace macros\n"
literal|"  -project             Output a resource file containing all\n"
literal|"                       files from the current directory\n"
literal|"  -version             display version\n"
literal|"  -help                display this information\n"
argument_list|,
name|qPrintable
argument_list|(
name|argv0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dumpRecursive
name|void
name|dumpRecursive
parameter_list|(
specifier|const
name|QDir
modifier|&
name|dir
parameter_list|,
name|QTextStream
modifier|&
name|out
parameter_list|)
block|{
name|QFileInfoList
name|entries
init|=
name|dir
operator|.
name|entryInfoList
argument_list|(
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDotAndDotDot
operator||
name|QDir
operator|::
name|NoSymLinks
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QFileInfo
name|entry
decl|,
name|entries
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|dumpRecursive
argument_list|(
name|entry
operator|.
name|filePath
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|<<
name|QLatin1String
argument_list|(
literal|"<file>"
argument_list|)
operator|<<
name|entry
operator|.
name|filePath
argument_list|()
operator|<<
name|QLatin1String
argument_list|(
literal|"</file>\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|createProject
name|int
name|createProject
parameter_list|(
specifier|const
name|QString
modifier|&
name|outFileName
parameter_list|)
block|{
name|QDir
name|currentDir
init|=
name|QDir
operator|::
name|current
argument_list|()
decl_stmt|;
name|QString
name|currentDirName
init|=
name|currentDir
operator|.
name|dirName
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentDirName
operator|.
name|isEmpty
argument_list|()
condition|)
name|currentDirName
operator|=
name|QLatin1String
argument_list|(
literal|"root"
argument_list|)
expr_stmt|;
name|QFile
name|file
decl_stmt|;
name|bool
name|isOk
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|outFileName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|isOk
operator|=
name|file
operator|.
name|open
argument_list|(
name|stdout
argument_list|,
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|.
name|setFileName
argument_list|(
name|outFileName
argument_list|)
expr_stmt|;
name|isOk
operator|=
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isOk
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Unable to open %s: %s\n"
argument_list|,
name|outFileName
operator|.
name|isEmpty
argument_list|()
condition|?
name|qPrintable
argument_list|(
name|outFileName
argument_list|)
else|:
literal|"standard output"
argument_list|,
name|qPrintable
argument_list|(
name|file
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|QTextStream
name|out
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|out
operator|<<
name|QLatin1String
argument_list|(
literal|"<!DOCTYPE RCC><RCC version=\"1.0\">\n"
literal|"<qresource>\n"
argument_list|)
expr_stmt|;
comment|// use "." as dir to get relative file pathes
name|dumpRecursive
argument_list|(
name|QDir
argument_list|(
name|QLatin1String
argument_list|(
literal|"."
argument_list|)
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|<<
name|QLatin1String
argument_list|(
literal|"</qresource>\n"
literal|"</RCC>\n"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|runRcc
name|int
name|runRcc
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QString
name|outFilename
decl_stmt|;
name|bool
name|helpRequested
init|=
literal|false
decl_stmt|;
name|bool
name|list
init|=
literal|false
decl_stmt|;
name|bool
name|projectRequested
init|=
literal|false
decl_stmt|;
name|QStringList
name|filenamesIn
decl_stmt|;
name|QStringList
name|args
init|=
name|qCmdLineArgs
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|RCCResourceLibrary
name|library
decl_stmt|;
comment|//parse options
name|QString
name|errorMsg
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|args
operator|.
name|count
argument_list|()
operator|&&
name|errorMsg
operator|.
name|isEmpty
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|args
index|[
name|i
index|]
index|[
literal|0
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
condition|)
block|{
comment|// option
name|QString
name|opt
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"-o"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|i
operator|<
name|argc
operator|-
literal|1
operator|)
condition|)
block|{
name|errorMsg
operator|=
name|QLatin1String
argument_list|(
literal|"Missing output name"
argument_list|)
expr_stmt|;
break|break;
block|}
name|outFilename
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"-name"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|i
operator|<
name|argc
operator|-
literal|1
operator|)
condition|)
block|{
name|errorMsg
operator|=
name|QLatin1String
argument_list|(
literal|"Missing target name"
argument_list|)
expr_stmt|;
break|break;
block|}
name|library
operator|.
name|setInitName
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"-root"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|i
operator|<
name|argc
operator|-
literal|1
operator|)
condition|)
block|{
name|errorMsg
operator|=
name|QLatin1String
argument_list|(
literal|"Missing root path"
argument_list|)
expr_stmt|;
break|break;
block|}
name|library
operator|.
name|setResourceRoot
argument_list|(
name|QDir
operator|::
name|cleanPath
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|library
operator|.
name|resourceRoot
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|library
operator|.
name|resourceRoot
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|!=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
condition|)
name|errorMsg
operator|=
name|QLatin1String
argument_list|(
literal|"Root must start with a /"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"-compress"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|i
operator|<
name|argc
operator|-
literal|1
operator|)
condition|)
block|{
name|errorMsg
operator|=
name|QLatin1String
argument_list|(
literal|"Missing compression level"
argument_list|)
expr_stmt|;
break|break;
block|}
name|library
operator|.
name|setCompressLevel
argument_list|(
name|args
index|[
operator|++
name|i
index|]
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"-threshold"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|i
operator|<
name|argc
operator|-
literal|1
operator|)
condition|)
block|{
name|errorMsg
operator|=
name|QLatin1String
argument_list|(
literal|"Missing compression threshold"
argument_list|)
expr_stmt|;
break|break;
block|}
name|library
operator|.
name|setCompressThreshold
argument_list|(
name|args
index|[
operator|++
name|i
index|]
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"-binary"
argument_list|)
condition|)
block|{
name|library
operator|.
name|setFormat
argument_list|(
name|RCCResourceLibrary
operator|::
name|Binary
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"-namespace"
argument_list|)
condition|)
block|{
name|library
operator|.
name|setUseNameSpace
argument_list|(
operator|!
name|library
operator|.
name|useNameSpace
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"-verbose"
argument_list|)
condition|)
block|{
name|library
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"-list"
argument_list|)
condition|)
block|{
name|list
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"-version"
argument_list|)
operator|||
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"-v"
argument_list|)
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Qt Resource Compiler version %s\n"
argument_list|,
name|QT_VERSION_STR
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"-help"
argument_list|)
operator|||
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"-h"
argument_list|)
condition|)
block|{
name|helpRequested
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"-no-compress"
argument_list|)
condition|)
block|{
name|library
operator|.
name|setCompressLevel
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"-project"
argument_list|)
condition|)
block|{
name|projectRequested
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|errorMsg
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Unknown option: '%1'"
argument_list|)
operator|.
name|arg
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: File does not exist '%s'"
argument_list|,
name|qPrintable
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|filenamesIn
operator|.
name|append
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|projectRequested
operator|&&
operator|!
name|helpRequested
condition|)
block|{
return|return
name|createProject
argument_list|(
name|outFilename
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|filenamesIn
operator|.
name|size
argument_list|()
operator|||
operator|!
name|errorMsg
operator|.
name|isEmpty
argument_list|()
operator|||
name|helpRequested
condition|)
block|{
name|showHelp
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|,
name|errorMsg
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|QFile
name|errorDevice
decl_stmt|;
name|errorDevice
operator|.
name|open
argument_list|(
name|stderr
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
expr_stmt|;
if|if
condition|(
name|library
operator|.
name|verbose
argument_list|()
condition|)
name|errorDevice
operator|.
name|write
argument_list|(
literal|"Qt resource compiler\n"
argument_list|)
expr_stmt|;
name|library
operator|.
name|setInputFiles
argument_list|(
name|filenamesIn
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|library
operator|.
name|readFiles
argument_list|(
name|list
argument_list|,
name|errorDevice
argument_list|)
condition|)
return|return
literal|1
return|;
comment|// open output
name|QFile
name|out
decl_stmt|;
name|QIODevice
operator|::
name|OpenMode
name|mode
init|=
name|QIODevice
operator|::
name|WriteOnly
decl_stmt|;
if|if
condition|(
name|library
operator|.
name|format
argument_list|()
operator|==
name|RCCResourceLibrary
operator|::
name|C_Code
condition|)
name|mode
operator||=
name|QIODevice
operator|::
name|Text
expr_stmt|;
if|if
condition|(
name|outFilename
operator|.
name|isEmpty
argument_list|()
operator|||
name|outFilename
operator|==
name|QLatin1String
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
comment|// using this overload close() only flushes.
name|out
operator|.
name|open
argument_list|(
name|stdout
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|setFileName
argument_list|(
name|outFilename
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|out
operator|.
name|open
argument_list|(
name|mode
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|msg
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"Unable to open %1 for writing: %2\n"
argument_list|)
operator|.
name|arg
argument_list|(
name|outFilename
argument_list|)
operator|.
name|arg
argument_list|(
name|out
operator|.
name|errorString
argument_list|()
argument_list|)
decl_stmt|;
name|errorDevice
operator|.
name|write
argument_list|(
name|msg
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
comment|// do the task
if|if
condition|(
name|list
condition|)
block|{
specifier|const
name|QStringList
name|data
init|=
name|library
operator|.
name|dataFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|qPrintable
argument_list|(
name|QDir
operator|::
name|cleanPath
argument_list|(
name|data
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
return|return
name|library
operator|.
name|output
argument_list|(
name|out
argument_list|,
name|errorDevice
argument_list|)
condition|?
literal|0
else|:
literal|1
return|;
block|}
end_function
begin_function
name|QT_END_NAMESPACE
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
return|return
name|QT_PREPEND_NAMESPACE
argument_list|(
name|runRcc
argument_list|)
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
return|;
block|}
end_function
end_unit
