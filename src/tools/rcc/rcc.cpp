begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"rcc.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QByteArray>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDateTime>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDir>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDirIterator>
end_include
begin_include
include|#
directive|include
file|<QtCore/QFile>
end_include
begin_include
include|#
directive|include
file|<QtCore/QIODevice>
end_include
begin_include
include|#
directive|include
file|<QtCore/QLocale>
end_include
begin_include
include|#
directive|include
file|<QtCore/QStack>
end_include
begin_include
include|#
directive|include
file|<QtCore/QXmlStreamReader>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|enum
type|{
DECL|enumerator|CONSTANT_USENAMESPACE
name|CONSTANT_USENAMESPACE
init|=
literal|1
decl_stmt|,
DECL|enumerator|CONSTANT_COMPRESSLEVEL_DEFAULT
name|CONSTANT_COMPRESSLEVEL_DEFAULT
init|=
operator|-
literal|1
decl_stmt|,
DECL|enumerator|CONSTANT_COMPRESSTHRESHOLD_DEFAULT
name|CONSTANT_COMPRESSTHRESHOLD_DEFAULT
init|=
literal|70
end_decl_stmt
begin_define
DECL|macro|writeString
unit|};
define|#
directive|define
name|writeString
parameter_list|(
name|s
parameter_list|)
value|write(s, sizeof(s))
end_define
begin_function
DECL|function|write
name|void
name|RCCResourceLibrary
operator|::
name|write
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|int
name|len
parameter_list|)
block|{
operator|--
name|len
expr_stmt|;
comment|// trailing \0 on string literals...
name|int
name|n
init|=
name|m_out
operator|.
name|size
argument_list|()
decl_stmt|;
name|m_out
operator|.
name|resize
argument_list|(
name|n
operator|+
name|len
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|m_out
operator|.
name|data
argument_list|()
operator|+
name|n
argument_list|,
name|str
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeByteArray
name|void
name|RCCResourceLibrary
operator|::
name|writeByteArray
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|other
parameter_list|)
block|{
name|m_out
operator|.
name|append
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|msgOpenReadFailed
specifier|static
specifier|inline
name|QString
name|msgOpenReadFailed
parameter_list|(
specifier|const
name|QString
modifier|&
name|fname
parameter_list|,
specifier|const
name|QString
modifier|&
name|why
parameter_list|)
block|{
return|return
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"Unable to open %1 for reading: %2\n"
argument_list|)
operator|.
name|arg
argument_list|(
name|fname
argument_list|)
operator|.
name|arg
argument_list|(
name|why
argument_list|)
return|;
block|}
end_function
begin_comment
comment|///////////////////////////////////////////////////////////
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// RCCFileInfo
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|///////////////////////////////////////////////////////////
end_comment
begin_class
DECL|class|RCCFileInfo
class|class
name|RCCFileInfo
block|{
public|public:
DECL|enum|Flags
enum|enum
name|Flags
block|{
DECL|enumerator|NoFlags
name|NoFlags
init|=
literal|0x00
block|,
DECL|enumerator|Compressed
name|Compressed
init|=
literal|0x01
block|,
DECL|enumerator|Directory
name|Directory
init|=
literal|0x02
block|}
enum|;
name|RCCFileInfo
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
init|=
name|QString
argument_list|()
parameter_list|,
specifier|const
name|QFileInfo
modifier|&
name|fileInfo
init|=
name|QFileInfo
argument_list|()
parameter_list|,
name|QLocale
operator|::
name|Language
name|language
init|=
name|QLocale
operator|::
name|C
parameter_list|,
name|QLocale
operator|::
name|Country
name|country
init|=
name|QLocale
operator|::
name|AnyCountry
parameter_list|,
name|uint
name|flags
init|=
name|NoFlags
parameter_list|,
name|int
name|compressLevel
init|=
name|CONSTANT_COMPRESSLEVEL_DEFAULT
parameter_list|,
name|int
name|compressThreshold
init|=
name|CONSTANT_COMPRESSTHRESHOLD_DEFAULT
parameter_list|)
constructor_decl|;
name|~
name|RCCFileInfo
parameter_list|()
destructor_decl|;
name|QString
name|resourceName
parameter_list|()
specifier|const
function_decl|;
public|public:
name|qint64
name|writeDataBlob
parameter_list|(
name|RCCResourceLibrary
modifier|&
name|lib
parameter_list|,
name|qint64
name|offset
parameter_list|,
name|QString
modifier|*
name|errorMessage
parameter_list|)
function_decl|;
name|qint64
name|writeDataName
parameter_list|(
name|RCCResourceLibrary
modifier|&
parameter_list|,
name|qint64
name|offset
parameter_list|)
function_decl|;
name|void
name|writeDataInfo
parameter_list|(
name|RCCResourceLibrary
modifier|&
name|lib
parameter_list|)
function_decl|;
DECL|member|m_flags
name|int
name|m_flags
decl_stmt|;
DECL|member|m_name
name|QString
name|m_name
decl_stmt|;
DECL|member|m_language
name|QLocale
operator|::
name|Language
name|m_language
decl_stmt|;
DECL|member|m_country
name|QLocale
operator|::
name|Country
name|m_country
decl_stmt|;
DECL|member|m_fileInfo
name|QFileInfo
name|m_fileInfo
decl_stmt|;
DECL|member|m_parent
name|RCCFileInfo
modifier|*
name|m_parent
decl_stmt|;
DECL|member|m_children
name|QHash
argument_list|<
name|QString
argument_list|,
name|RCCFileInfo
modifier|*
argument_list|>
name|m_children
decl_stmt|;
DECL|member|m_compressLevel
name|int
name|m_compressLevel
decl_stmt|;
DECL|member|m_compressThreshold
name|int
name|m_compressThreshold
decl_stmt|;
DECL|member|m_nameOffset
name|qint64
name|m_nameOffset
decl_stmt|;
DECL|member|m_dataOffset
name|qint64
name|m_dataOffset
decl_stmt|;
DECL|member|m_childOffset
name|qint64
name|m_childOffset
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|RCCFileInfo
name|RCCFileInfo
operator|::
name|RCCFileInfo
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QFileInfo
modifier|&
name|fileInfo
parameter_list|,
name|QLocale
operator|::
name|Language
name|language
parameter_list|,
name|QLocale
operator|::
name|Country
name|country
parameter_list|,
name|uint
name|flags
parameter_list|,
name|int
name|compressLevel
parameter_list|,
name|int
name|compressThreshold
parameter_list|)
block|{
name|m_name
operator|=
name|name
expr_stmt|;
name|m_fileInfo
operator|=
name|fileInfo
expr_stmt|;
name|m_language
operator|=
name|language
expr_stmt|;
name|m_country
operator|=
name|country
expr_stmt|;
name|m_flags
operator|=
name|flags
expr_stmt|;
name|m_parent
operator|=
literal|0
expr_stmt|;
name|m_nameOffset
operator|=
literal|0
expr_stmt|;
name|m_dataOffset
operator|=
literal|0
expr_stmt|;
name|m_childOffset
operator|=
literal|0
expr_stmt|;
name|m_compressLevel
operator|=
name|compressLevel
expr_stmt|;
name|m_compressThreshold
operator|=
name|compressThreshold
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~RCCFileInfo
name|RCCFileInfo
operator|::
name|~
name|RCCFileInfo
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_children
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|resourceName
name|QString
name|RCCFileInfo
operator|::
name|resourceName
parameter_list|()
specifier|const
block|{
name|QString
name|resource
init|=
name|m_name
decl_stmt|;
for|for
control|(
name|RCCFileInfo
modifier|*
name|p
init|=
name|m_parent
init|;
name|p
condition|;
name|p
operator|=
name|p
operator|->
name|m_parent
control|)
name|resource
operator|=
name|resource
operator|.
name|prepend
argument_list|(
name|p
operator|->
name|m_name
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
operator|+
name|resource
return|;
block|}
end_function
begin_function
DECL|function|writeDataInfo
name|void
name|RCCFileInfo
operator|::
name|writeDataInfo
parameter_list|(
name|RCCResourceLibrary
modifier|&
name|lib
parameter_list|)
block|{
specifier|const
name|bool
name|text
init|=
operator|(
name|lib
operator|.
name|m_format
operator|==
name|RCCResourceLibrary
operator|::
name|C_Code
operator|)
decl_stmt|;
comment|//some info
if|if
condition|(
name|text
condition|)
block|{
if|if
condition|(
name|m_language
operator|!=
name|QLocale
operator|::
name|C
condition|)
block|{
name|lib
operator|.
name|writeString
argument_list|(
literal|"  // "
argument_list|)
expr_stmt|;
name|lib
operator|.
name|writeByteArray
argument_list|(
name|resourceName
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
name|lib
operator|.
name|writeString
argument_list|(
literal|" ["
argument_list|)
expr_stmt|;
name|lib
operator|.
name|writeByteArray
argument_list|(
name|QByteArray
operator|::
name|number
argument_list|(
name|m_country
argument_list|)
argument_list|)
expr_stmt|;
name|lib
operator|.
name|writeString
argument_list|(
literal|"::"
argument_list|)
expr_stmt|;
name|lib
operator|.
name|writeByteArray
argument_list|(
name|QByteArray
operator|::
name|number
argument_list|(
name|m_language
argument_list|)
argument_list|)
expr_stmt|;
name|lib
operator|.
name|writeString
argument_list|(
literal|"[\n  "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lib
operator|.
name|writeString
argument_list|(
literal|"  // "
argument_list|)
expr_stmt|;
name|lib
operator|.
name|writeByteArray
argument_list|(
name|resourceName
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
name|lib
operator|.
name|writeString
argument_list|(
literal|"\n  "
argument_list|)
expr_stmt|;
block|}
block|}
comment|//pointer data
if|if
condition|(
name|m_flags
operator|&
name|RCCFileInfo
operator|::
name|Directory
condition|)
block|{
comment|// name offset
name|lib
operator|.
name|writeNumber4
argument_list|(
name|m_nameOffset
argument_list|)
expr_stmt|;
comment|// flags
name|lib
operator|.
name|writeNumber2
argument_list|(
name|m_flags
argument_list|)
expr_stmt|;
comment|// child count
name|lib
operator|.
name|writeNumber4
argument_list|(
name|m_children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// first child offset
name|lib
operator|.
name|writeNumber4
argument_list|(
name|m_childOffset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// name offset
name|lib
operator|.
name|writeNumber4
argument_list|(
name|m_nameOffset
argument_list|)
expr_stmt|;
comment|// flags
name|lib
operator|.
name|writeNumber2
argument_list|(
name|m_flags
argument_list|)
expr_stmt|;
comment|// locale
name|lib
operator|.
name|writeNumber2
argument_list|(
name|m_country
argument_list|)
expr_stmt|;
name|lib
operator|.
name|writeNumber2
argument_list|(
name|m_language
argument_list|)
expr_stmt|;
comment|//data offset
name|lib
operator|.
name|writeNumber4
argument_list|(
name|m_dataOffset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|text
condition|)
name|lib
operator|.
name|writeChar
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeDataBlob
name|qint64
name|RCCFileInfo
operator|::
name|writeDataBlob
parameter_list|(
name|RCCResourceLibrary
modifier|&
name|lib
parameter_list|,
name|qint64
name|offset
parameter_list|,
name|QString
modifier|*
name|errorMessage
parameter_list|)
block|{
specifier|const
name|bool
name|text
init|=
operator|(
name|lib
operator|.
name|m_format
operator|==
name|RCCResourceLibrary
operator|::
name|C_Code
operator|)
decl_stmt|;
comment|//capture the offset
name|m_dataOffset
operator|=
name|offset
expr_stmt|;
comment|//find the data to be written
name|QFile
name|file
argument_list|(
name|m_fileInfo
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
operator|*
name|errorMessage
operator|=
name|msgOpenReadFailed
argument_list|(
name|m_fileInfo
operator|.
name|absoluteFilePath
argument_list|()
argument_list|,
name|file
operator|.
name|errorString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|QByteArray
name|data
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_COMPRESS
comment|// Check if compression is useful for this file
if|if
condition|(
name|m_compressLevel
operator|!=
literal|0
operator|&&
name|data
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|QByteArray
name|compressed
init|=
name|qCompress
argument_list|(
cast|reinterpret_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|data
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|,
name|m_compressLevel
argument_list|)
decl_stmt|;
name|int
name|compressRatio
init|=
name|int
argument_list|(
literal|100.0
operator|*
operator|(
name|data
operator|.
name|size
argument_list|()
operator|-
name|compressed
operator|.
name|size
argument_list|()
operator|)
operator|/
name|data
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|compressRatio
operator|>=
name|m_compressThreshold
condition|)
block|{
name|data
operator|=
name|compressed
expr_stmt|;
name|m_flags
operator||=
name|Compressed
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_COMPRESS
comment|// some info
if|if
condition|(
name|text
condition|)
block|{
name|lib
operator|.
name|writeString
argument_list|(
literal|"  // "
argument_list|)
expr_stmt|;
name|lib
operator|.
name|writeByteArray
argument_list|(
name|m_fileInfo
operator|.
name|absoluteFilePath
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
name|lib
operator|.
name|writeString
argument_list|(
literal|"\n  "
argument_list|)
expr_stmt|;
block|}
comment|// write the length
name|lib
operator|.
name|writeNumber4
argument_list|(
name|data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
condition|)
name|lib
operator|.
name|writeString
argument_list|(
literal|"\n  "
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|4
expr_stmt|;
comment|// write the payload
specifier|const
name|char
modifier|*
name|p
init|=
name|data
operator|.
name|constData
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|data
operator|.
name|size
argument_list|()
init|,
name|j
init|=
literal|0
init|;
operator|--
name|i
operator|>=
literal|0
condition|;
operator|--
name|j
control|)
block|{
name|lib
operator|.
name|writeHex
argument_list|(
operator|*
name|p
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|==
literal|0
condition|)
block|{
name|lib
operator|.
name|writeString
argument_list|(
literal|"\n  "
argument_list|)
expr_stmt|;
name|j
operator|=
literal|16
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
name|data
operator|.
name|size
argument_list|()
init|;
operator|--
name|i
operator|>=
literal|0
condition|;
control|)
name|lib
operator|.
name|writeChar
argument_list|(
operator|*
name|p
operator|++
argument_list|)
expr_stmt|;
block|}
name|offset
operator|+=
name|data
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// done
if|if
condition|(
name|text
condition|)
name|lib
operator|.
name|writeString
argument_list|(
literal|"\n  "
argument_list|)
expr_stmt|;
return|return
name|offset
return|;
block|}
end_function
begin_function
DECL|function|writeDataName
name|qint64
name|RCCFileInfo
operator|::
name|writeDataName
parameter_list|(
name|RCCResourceLibrary
modifier|&
name|lib
parameter_list|,
name|qint64
name|offset
parameter_list|)
block|{
specifier|const
name|bool
name|text
init|=
operator|(
name|lib
operator|.
name|m_format
operator|==
name|RCCResourceLibrary
operator|::
name|C_Code
operator|)
decl_stmt|;
comment|// capture the offset
name|m_nameOffset
operator|=
name|offset
expr_stmt|;
comment|// some info
if|if
condition|(
name|text
condition|)
block|{
name|lib
operator|.
name|writeString
argument_list|(
literal|"  // "
argument_list|)
expr_stmt|;
name|lib
operator|.
name|writeByteArray
argument_list|(
name|m_name
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
name|lib
operator|.
name|writeString
argument_list|(
literal|"\n  "
argument_list|)
expr_stmt|;
block|}
comment|// write the length
name|lib
operator|.
name|writeNumber2
argument_list|(
name|m_name
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
condition|)
name|lib
operator|.
name|writeString
argument_list|(
literal|"\n  "
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|2
expr_stmt|;
comment|// write the hash
name|lib
operator|.
name|writeNumber4
argument_list|(
name|qHash
argument_list|(
name|m_name
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
condition|)
name|lib
operator|.
name|writeString
argument_list|(
literal|"\n  "
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|4
expr_stmt|;
comment|// write the m_name
specifier|const
name|QChar
modifier|*
name|unicode
init|=
name|m_name
operator|.
name|unicode
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_name
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|lib
operator|.
name|writeNumber2
argument_list|(
name|unicode
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|&&
name|i
operator|%
literal|16
operator|==
literal|0
condition|)
name|lib
operator|.
name|writeString
argument_list|(
literal|"\n  "
argument_list|)
expr_stmt|;
block|}
name|offset
operator|+=
name|m_name
operator|.
name|length
argument_list|()
operator|*
literal|2
expr_stmt|;
comment|// done
if|if
condition|(
name|text
condition|)
name|lib
operator|.
name|writeString
argument_list|(
literal|"\n  "
argument_list|)
expr_stmt|;
return|return
name|offset
return|;
block|}
end_function
begin_comment
comment|///////////////////////////////////////////////////////////
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// RCCResourceLibrary
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|///////////////////////////////////////////////////////////
end_comment
begin_constructor
DECL|function|Strings
name|RCCResourceLibrary
operator|::
name|Strings
operator|::
name|Strings
parameter_list|()
member_init_list|:
name|TAG_RCC
argument_list|(
name|QLatin1String
argument_list|(
literal|"RCC"
argument_list|)
argument_list|)
member_init_list|,
name|TAG_RESOURCE
argument_list|(
name|QLatin1String
argument_list|(
literal|"qresource"
argument_list|)
argument_list|)
member_init_list|,
name|TAG_FILE
argument_list|(
name|QLatin1String
argument_list|(
literal|"file"
argument_list|)
argument_list|)
member_init_list|,
name|ATTRIBUTE_LANG
argument_list|(
name|QLatin1String
argument_list|(
literal|"lang"
argument_list|)
argument_list|)
member_init_list|,
name|ATTRIBUTE_PREFIX
argument_list|(
name|QLatin1String
argument_list|(
literal|"prefix"
argument_list|)
argument_list|)
member_init_list|,
name|ATTRIBUTE_ALIAS
argument_list|(
name|QLatin1String
argument_list|(
literal|"alias"
argument_list|)
argument_list|)
member_init_list|,
name|ATTRIBUTE_THRESHOLD
argument_list|(
name|QLatin1String
argument_list|(
literal|"threshold"
argument_list|)
argument_list|)
member_init_list|,
name|ATTRIBUTE_COMPRESS
argument_list|(
name|QLatin1String
argument_list|(
literal|"compress"
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|RCCResourceLibrary
name|RCCResourceLibrary
operator|::
name|RCCResourceLibrary
parameter_list|()
member_init_list|:
name|m_root
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_format
argument_list|(
name|C_Code
argument_list|)
member_init_list|,
name|m_verbose
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_compressLevel
argument_list|(
name|CONSTANT_COMPRESSLEVEL_DEFAULT
argument_list|)
member_init_list|,
name|m_compressThreshold
argument_list|(
name|CONSTANT_COMPRESSTHRESHOLD_DEFAULT
argument_list|)
member_init_list|,
name|m_treeOffset
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_namesOffset
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_dataOffset
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_useNameSpace
argument_list|(
name|CONSTANT_USENAMESPACE
argument_list|)
member_init_list|,
name|m_errorDevice
argument_list|(
literal|0
argument_list|)
block|{
name|m_out
operator|.
name|reserve
argument_list|(
literal|30
operator|*
literal|1000
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~RCCResourceLibrary
name|RCCResourceLibrary
operator|::
name|~
name|RCCResourceLibrary
parameter_list|()
block|{
operator|delete
name|m_root
expr_stmt|;
block|}
end_destructor
begin_enum
DECL|enum|RCCXmlTag
enum|enum
name|RCCXmlTag
block|{
DECL|enumerator|RccTag
name|RccTag
block|,
DECL|enumerator|ResourceTag
name|ResourceTag
block|,
DECL|enumerator|FileTag
name|FileTag
block|}
enum|;
end_enum
begin_function
DECL|function|interpretResourceFile
name|bool
name|RCCResourceLibrary
operator|::
name|interpretResourceFile
parameter_list|(
name|QIODevice
modifier|*
name|inputDevice
parameter_list|,
specifier|const
name|QString
modifier|&
name|fname
parameter_list|,
name|QString
name|currentPath
parameter_list|,
name|bool
name|ignoreErrors
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|m_errorDevice
argument_list|)
expr_stmt|;
specifier|const
name|QChar
name|slash
init|=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|currentPath
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|currentPath
operator|.
name|endsWith
argument_list|(
name|slash
argument_list|)
condition|)
name|currentPath
operator|+=
name|slash
expr_stmt|;
name|QXmlStreamReader
name|reader
argument_list|(
name|inputDevice
argument_list|)
decl_stmt|;
name|QStack
argument_list|<
name|RCCXmlTag
argument_list|>
name|tokens
decl_stmt|;
name|QString
name|prefix
decl_stmt|;
name|QLocale
operator|::
name|Language
name|language
init|=
name|QLocale
operator|::
name|c
argument_list|()
operator|.
name|language
argument_list|()
decl_stmt|;
name|QLocale
operator|::
name|Country
name|country
init|=
name|QLocale
operator|::
name|c
argument_list|()
operator|.
name|country
argument_list|()
decl_stmt|;
name|QString
name|alias
decl_stmt|;
name|int
name|compressLevel
init|=
name|m_compressLevel
decl_stmt|;
name|int
name|compressThreshold
init|=
name|m_compressThreshold
decl_stmt|;
while|while
condition|(
operator|!
name|reader
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QXmlStreamReader
operator|::
name|TokenType
name|t
init|=
name|reader
operator|.
name|readNext
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
if|if
condition|(
name|reader
operator|.
name|name
argument_list|()
operator|==
name|m_strings
operator|.
name|TAG_RCC
condition|)
block|{
if|if
condition|(
operator|!
name|tokens
operator|.
name|isEmpty
argument_list|()
condition|)
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"expected<RCC> tag"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|tokens
operator|.
name|push
argument_list|(
name|RccTag
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|reader
operator|.
name|name
argument_list|()
operator|==
name|m_strings
operator|.
name|TAG_RESOURCE
condition|)
block|{
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
operator|||
name|tokens
operator|.
name|top
argument_list|()
operator|!=
name|RccTag
condition|)
block|{
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"unexpected<RESOURCE> tag"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tokens
operator|.
name|push
argument_list|(
name|ResourceTag
argument_list|)
expr_stmt|;
name|QXmlStreamAttributes
name|attributes
init|=
name|reader
operator|.
name|attributes
argument_list|()
decl_stmt|;
name|language
operator|=
name|QLocale
operator|::
name|c
argument_list|()
operator|.
name|language
argument_list|()
expr_stmt|;
name|country
operator|=
name|QLocale
operator|::
name|c
argument_list|()
operator|.
name|country
argument_list|()
expr_stmt|;
if|if
condition|(
name|attributes
operator|.
name|hasAttribute
argument_list|(
name|m_strings
operator|.
name|ATTRIBUTE_LANG
argument_list|)
condition|)
block|{
name|QString
name|attribute
init|=
name|attributes
operator|.
name|value
argument_list|(
name|m_strings
operator|.
name|ATTRIBUTE_LANG
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QLocale
name|lang
init|=
name|QLocale
argument_list|(
name|attribute
argument_list|)
decl_stmt|;
name|language
operator|=
name|lang
operator|.
name|language
argument_list|()
expr_stmt|;
if|if
condition|(
literal|2
operator|==
name|attribute
operator|.
name|length
argument_list|()
condition|)
block|{
comment|// Language only
name|country
operator|=
name|QLocale
operator|::
name|AnyCountry
expr_stmt|;
block|}
else|else
block|{
name|country
operator|=
name|lang
operator|.
name|country
argument_list|()
expr_stmt|;
block|}
block|}
name|prefix
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|attributes
operator|.
name|hasAttribute
argument_list|(
name|m_strings
operator|.
name|ATTRIBUTE_PREFIX
argument_list|)
condition|)
name|prefix
operator|=
name|attributes
operator|.
name|value
argument_list|(
name|m_strings
operator|.
name|ATTRIBUTE_PREFIX
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|prefix
operator|.
name|startsWith
argument_list|(
name|slash
argument_list|)
condition|)
name|prefix
operator|.
name|prepend
argument_list|(
name|slash
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|prefix
operator|.
name|endsWith
argument_list|(
name|slash
argument_list|)
condition|)
name|prefix
operator|+=
name|slash
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|reader
operator|.
name|name
argument_list|()
operator|==
name|m_strings
operator|.
name|TAG_FILE
condition|)
block|{
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
operator|||
name|tokens
operator|.
name|top
argument_list|()
operator|!=
name|ResourceTag
condition|)
block|{
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"unexpected<FILE> tag"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tokens
operator|.
name|push
argument_list|(
name|FileTag
argument_list|)
expr_stmt|;
name|QXmlStreamAttributes
name|attributes
init|=
name|reader
operator|.
name|attributes
argument_list|()
decl_stmt|;
name|alias
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|attributes
operator|.
name|hasAttribute
argument_list|(
name|m_strings
operator|.
name|ATTRIBUTE_ALIAS
argument_list|)
condition|)
name|alias
operator|=
name|attributes
operator|.
name|value
argument_list|(
name|m_strings
operator|.
name|ATTRIBUTE_ALIAS
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|compressLevel
operator|=
name|m_compressLevel
expr_stmt|;
if|if
condition|(
name|attributes
operator|.
name|hasAttribute
argument_list|(
name|m_strings
operator|.
name|ATTRIBUTE_COMPRESS
argument_list|)
condition|)
name|compressLevel
operator|=
name|attributes
operator|.
name|value
argument_list|(
name|m_strings
operator|.
name|ATTRIBUTE_COMPRESS
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|compressThreshold
operator|=
name|m_compressThreshold
expr_stmt|;
if|if
condition|(
name|attributes
operator|.
name|hasAttribute
argument_list|(
name|m_strings
operator|.
name|ATTRIBUTE_THRESHOLD
argument_list|)
condition|)
name|compressThreshold
operator|=
name|attributes
operator|.
name|value
argument_list|(
name|m_strings
operator|.
name|ATTRIBUTE_THRESHOLD
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|toInt
argument_list|()
expr_stmt|;
comment|// Special case for -no-compress. Overrides all other settings.
if|if
condition|(
name|m_compressLevel
operator|==
operator|-
literal|2
condition|)
name|compressLevel
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
name|reader
operator|.
name|raiseError
argument_list|(
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"unexpected tag: %1"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
if|if
condition|(
name|reader
operator|.
name|name
argument_list|()
operator|==
name|m_strings
operator|.
name|TAG_RCC
condition|)
block|{
if|if
condition|(
operator|!
name|tokens
operator|.
name|isEmpty
argument_list|()
operator|&&
name|tokens
operator|.
name|top
argument_list|()
operator|==
name|RccTag
condition|)
name|tokens
operator|.
name|pop
argument_list|()
expr_stmt|;
else|else
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"unexpected closing tag"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|reader
operator|.
name|name
argument_list|()
operator|==
name|m_strings
operator|.
name|TAG_RESOURCE
condition|)
block|{
if|if
condition|(
operator|!
name|tokens
operator|.
name|isEmpty
argument_list|()
operator|&&
name|tokens
operator|.
name|top
argument_list|()
operator|==
name|ResourceTag
condition|)
name|tokens
operator|.
name|pop
argument_list|()
expr_stmt|;
else|else
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"unexpected closing tag"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|reader
operator|.
name|name
argument_list|()
operator|==
name|m_strings
operator|.
name|TAG_FILE
condition|)
block|{
if|if
condition|(
operator|!
name|tokens
operator|.
name|isEmpty
argument_list|()
operator|&&
name|tokens
operator|.
name|top
argument_list|()
operator|==
name|FileTag
condition|)
name|tokens
operator|.
name|pop
argument_list|()
expr_stmt|;
else|else
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"unexpected closing tag"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
break|break;
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
operator|||
name|tokens
operator|.
name|top
argument_list|()
operator|!=
name|FileTag
condition|)
block|{
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"unexpected text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QString
name|fileName
init|=
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|msg
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"RCC: Warning: Null node in XML of '%1'\n"
argument_list|)
operator|.
name|arg
argument_list|(
name|fname
argument_list|)
decl_stmt|;
name|m_errorDevice
operator|->
name|write
argument_list|(
name|msg
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|alias
operator|.
name|isNull
argument_list|()
condition|)
name|alias
operator|=
name|fileName
expr_stmt|;
name|alias
operator|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|alias
argument_list|)
expr_stmt|;
while|while
condition|(
name|alias
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"../"
argument_list|)
argument_list|)
condition|)
name|alias
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|alias
operator|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|m_resourceRoot
argument_list|)
operator|+
name|prefix
operator|+
name|alias
expr_stmt|;
name|QString
name|absFileName
init|=
name|fileName
decl_stmt|;
if|if
condition|(
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|absFileName
argument_list|)
condition|)
name|absFileName
operator|.
name|prepend
argument_list|(
name|currentPath
argument_list|)
expr_stmt|;
name|QFileInfo
name|file
argument_list|(
name|absFileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|m_failedResources
operator|.
name|push_back
argument_list|(
name|absFileName
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|msg
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"RCC: Error in '%1': Cannot find file '%2'\n"
argument_list|)
operator|.
name|arg
argument_list|(
name|fname
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|m_errorDevice
operator|->
name|write
argument_list|(
name|msg
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ignoreErrors
condition|)
continue|continue;
else|else
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
specifier|const
name|bool
name|arc
init|=
name|addFile
argument_list|(
name|alias
argument_list|,
name|RCCFileInfo
argument_list|(
name|alias
operator|.
name|section
argument_list|(
name|slash
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|file
argument_list|,
name|language
argument_list|,
name|country
argument_list|,
name|RCCFileInfo
operator|::
name|NoFlags
argument_list|,
name|compressLevel
argument_list|,
name|compressThreshold
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|arc
condition|)
name|m_failedResources
operator|.
name|push_back
argument_list|(
name|absFileName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QDir
name|dir
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|dir
operator|.
name|setPath
argument_list|(
name|file
operator|.
name|filePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|.
name|setPath
argument_list|(
name|file
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setNameFilters
argument_list|(
name|QStringList
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|alias
operator|.
name|endsWith
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
condition|)
name|alias
operator|=
name|alias
operator|.
name|left
argument_list|(
name|alias
operator|.
name|length
argument_list|()
operator|-
name|file
operator|.
name|fileName
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|alias
operator|.
name|endsWith
argument_list|(
name|slash
argument_list|)
condition|)
name|alias
operator|+=
name|slash
expr_stmt|;
name|QDirIterator
name|it
argument_list|(
name|dir
argument_list|,
name|QDirIterator
operator|::
name|FollowSymlinks
operator||
name|QDirIterator
operator|::
name|Subdirectories
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|QFileInfo
name|child
argument_list|(
name|it
operator|.
name|fileInfo
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|fileName
argument_list|()
operator|!=
name|QLatin1String
argument_list|(
literal|"."
argument_list|)
operator|&&
name|child
operator|.
name|fileName
argument_list|()
operator|!=
name|QLatin1String
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
specifier|const
name|bool
name|arc
init|=
name|addFile
argument_list|(
name|alias
operator|+
name|child
operator|.
name|fileName
argument_list|()
argument_list|,
name|RCCFileInfo
argument_list|(
name|child
operator|.
name|fileName
argument_list|()
argument_list|,
name|child
argument_list|,
name|language
argument_list|,
name|country
argument_list|,
name|RCCFileInfo
operator|::
name|NoFlags
argument_list|,
name|compressLevel
argument_list|,
name|compressThreshold
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|arc
condition|)
name|m_failedResources
operator|.
name|push_back
argument_list|(
name|child
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
break|break;
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|reader
operator|.
name|hasError
argument_list|()
condition|)
block|{
if|if
condition|(
name|ignoreErrors
condition|)
return|return
literal|true
return|;
name|int
name|errorLine
init|=
name|reader
operator|.
name|lineNumber
argument_list|()
decl_stmt|;
name|int
name|errorColumn
init|=
name|reader
operator|.
name|columnNumber
argument_list|()
decl_stmt|;
name|QString
name|errorMessage
init|=
name|reader
operator|.
name|errorString
argument_list|()
decl_stmt|;
name|QString
name|msg
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"RCC Parse Error: '%1' Line: %2 Column: %3 [%4]\n"
argument_list|)
operator|.
name|arg
argument_list|(
name|fname
argument_list|)
operator|.
name|arg
argument_list|(
name|errorLine
argument_list|)
operator|.
name|arg
argument_list|(
name|errorColumn
argument_list|)
operator|.
name|arg
argument_list|(
name|errorMessage
argument_list|)
decl_stmt|;
name|m_errorDevice
operator|->
name|write
argument_list|(
name|msg
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|m_root
operator|==
literal|0
condition|)
block|{
specifier|const
name|QString
name|msg
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"RCC: Warning: No resources in '%1'.\n"
argument_list|)
operator|.
name|arg
argument_list|(
name|fname
argument_list|)
decl_stmt|;
name|m_errorDevice
operator|->
name|write
argument_list|(
name|msg
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ignoreErrors
operator|&&
name|m_format
operator|==
name|Binary
condition|)
block|{
comment|// create dummy entry, otherwise loading qith QResource will crash
name|m_root
operator|=
operator|new
name|RCCFileInfo
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QFileInfo
argument_list|()
argument_list|,
name|QLocale
operator|::
name|C
argument_list|,
name|QLocale
operator|::
name|AnyCountry
argument_list|,
name|RCCFileInfo
operator|::
name|Directory
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|addFile
name|bool
name|RCCResourceLibrary
operator|::
name|addFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|alias
parameter_list|,
specifier|const
name|RCCFileInfo
modifier|&
name|file
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|m_errorDevice
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|m_fileInfo
operator|.
name|size
argument_list|()
operator|>
literal|0xffffffff
condition|)
block|{
specifier|const
name|QString
name|msg
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"File too big: %1\n"
argument_list|)
operator|.
name|arg
argument_list|(
name|file
operator|.
name|m_fileInfo
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
decl_stmt|;
name|m_errorDevice
operator|->
name|write
argument_list|(
name|msg
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|m_root
condition|)
name|m_root
operator|=
operator|new
name|RCCFileInfo
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QFileInfo
argument_list|()
argument_list|,
name|QLocale
operator|::
name|C
argument_list|,
name|QLocale
operator|::
name|AnyCountry
argument_list|,
name|RCCFileInfo
operator|::
name|Directory
argument_list|)
expr_stmt|;
name|RCCFileInfo
modifier|*
name|parent
init|=
name|m_root
decl_stmt|;
specifier|const
name|QStringList
name|nodes
init|=
name|alias
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|nodes
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|node
init|=
name|nodes
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|parent
operator|->
name|m_children
operator|.
name|contains
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|RCCFileInfo
modifier|*
name|s
init|=
operator|new
name|RCCFileInfo
argument_list|(
name|node
argument_list|,
name|QFileInfo
argument_list|()
argument_list|,
name|QLocale
operator|::
name|C
argument_list|,
name|QLocale
operator|::
name|AnyCountry
argument_list|,
name|RCCFileInfo
operator|::
name|Directory
argument_list|)
decl_stmt|;
name|s
operator|->
name|m_parent
operator|=
name|parent
expr_stmt|;
name|parent
operator|->
name|m_children
operator|.
name|insert
argument_list|(
name|node
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|parent
operator|=
name|s
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|=
name|parent
operator|->
name|m_children
index|[
name|node
index|]
expr_stmt|;
block|}
block|}
specifier|const
name|QString
name|filename
init|=
name|nodes
operator|.
name|at
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|RCCFileInfo
modifier|*
name|s
init|=
operator|new
name|RCCFileInfo
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|s
operator|->
name|m_parent
operator|=
name|parent
expr_stmt|;
if|if
condition|(
name|parent
operator|->
name|m_children
operator|.
name|contains
argument_list|(
name|filename
argument_list|)
condition|)
block|{
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|fileName
decl|,
name|m_fileNames
control|)
name|qWarning
argument_list|(
literal|"%s: Warning: potential duplicate alias detected: '%s'"
argument_list|,
name|qPrintable
argument_list|(
name|fileName
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|parent
operator|->
name|m_children
operator|.
name|insertMulti
argument_list|(
name|filename
argument_list|,
name|s
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|reset
name|void
name|RCCResourceLibrary
operator|::
name|reset
parameter_list|()
block|{
if|if
condition|(
name|m_root
condition|)
block|{
operator|delete
name|m_root
expr_stmt|;
name|m_root
operator|=
literal|0
expr_stmt|;
block|}
name|m_errorDevice
operator|=
literal|0
expr_stmt|;
name|m_failedResources
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readFiles
name|bool
name|RCCResourceLibrary
operator|::
name|readFiles
parameter_list|(
name|bool
name|ignoreErrors
parameter_list|,
name|QIODevice
modifier|&
name|errorDevice
parameter_list|)
block|{
name|reset
argument_list|()
expr_stmt|;
name|m_errorDevice
operator|=
operator|&
name|errorDevice
expr_stmt|;
comment|//read in data
if|if
condition|(
name|m_verbose
condition|)
block|{
specifier|const
name|QString
name|msg
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"Processing %1 files [%2]\n"
argument_list|)
operator|.
name|arg
argument_list|(
name|m_fileNames
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|ignoreErrors
argument_list|)
argument_list|)
decl_stmt|;
name|m_errorDevice
operator|->
name|write
argument_list|(
name|msg
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_fileNames
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFile
name|fileIn
decl_stmt|;
name|QString
name|fname
init|=
name|m_fileNames
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QString
name|pwd
decl_stmt|;
if|if
condition|(
name|fname
operator|==
name|QLatin1String
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|fname
operator|=
name|QLatin1String
argument_list|(
literal|"(stdin)"
argument_list|)
expr_stmt|;
name|pwd
operator|=
name|QDir
operator|::
name|currentPath
argument_list|()
expr_stmt|;
name|fileIn
operator|.
name|setFileName
argument_list|(
name|fname
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fileIn
operator|.
name|open
argument_list|(
name|stdin
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|m_errorDevice
operator|->
name|write
argument_list|(
name|msgOpenReadFailed
argument_list|(
name|fname
argument_list|,
name|fileIn
operator|.
name|errorString
argument_list|()
argument_list|)
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|pwd
operator|=
name|QFileInfo
argument_list|(
name|fname
argument_list|)
operator|.
name|path
argument_list|()
expr_stmt|;
name|fileIn
operator|.
name|setFileName
argument_list|(
name|fname
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fileIn
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|m_errorDevice
operator|->
name|write
argument_list|(
name|msgOpenReadFailed
argument_list|(
name|fname
argument_list|,
name|fileIn
operator|.
name|errorString
argument_list|()
argument_list|)
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|m_verbose
condition|)
block|{
specifier|const
name|QString
name|msg
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"Interpreting %1\n"
argument_list|)
operator|.
name|arg
argument_list|(
name|fname
argument_list|)
decl_stmt|;
name|m_errorDevice
operator|->
name|write
argument_list|(
name|msg
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|interpretResourceFile
argument_list|(
operator|&
name|fileIn
argument_list|,
name|fname
argument_list|,
name|pwd
argument_list|,
name|ignoreErrors
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|dataFiles
name|QStringList
name|RCCResourceLibrary
operator|::
name|dataFiles
parameter_list|()
specifier|const
block|{
name|QStringList
name|ret
decl_stmt|;
name|QStack
argument_list|<
name|RCCFileInfo
modifier|*
argument_list|>
name|pending
decl_stmt|;
if|if
condition|(
operator|!
name|m_root
condition|)
return|return
name|ret
return|;
name|pending
operator|.
name|push
argument_list|(
name|m_root
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|pending
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RCCFileInfo
modifier|*
name|file
init|=
name|pending
operator|.
name|pop
argument_list|()
decl_stmt|;
for|for
control|(
name|QHash
argument_list|<
name|QString
argument_list|,
name|RCCFileInfo
operator|*
argument_list|>
operator|::
name|iterator
name|it
init|=
name|file
operator|->
name|m_children
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|file
operator|->
name|m_children
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|RCCFileInfo
modifier|*
name|child
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|->
name|m_flags
operator|&
name|RCCFileInfo
operator|::
name|Directory
condition|)
name|pending
operator|.
name|push
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|child
operator|->
name|m_fileInfo
operator|.
name|filePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|// Determine map of resource identifier (':/newPrefix/images/p1.png') to file via recursion
end_comment
begin_function
DECL|function|resourceDataFileMapRecursion
specifier|static
name|void
name|resourceDataFileMapRecursion
parameter_list|(
specifier|const
name|RCCFileInfo
modifier|*
name|m_root
parameter_list|,
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
name|RCCResourceLibrary
operator|::
name|ResourceDataFileMap
modifier|&
name|m
parameter_list|)
block|{
typedef|typedef
name|QHash
argument_list|<
name|QString
argument_list|,
name|RCCFileInfo
modifier|*
argument_list|>
operator|::
name|const_iterator
name|ChildConstIterator
typedef|;
specifier|const
name|QChar
name|slash
init|=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
specifier|const
name|ChildConstIterator
name|cend
init|=
name|m_root
operator|->
name|m_children
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
name|ChildConstIterator
name|it
init|=
name|m_root
operator|->
name|m_children
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|cend
condition|;
operator|++
name|it
control|)
block|{
specifier|const
name|RCCFileInfo
modifier|*
name|child
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
name|QString
name|childName
init|=
name|path
decl_stmt|;
name|childName
operator|+=
name|slash
expr_stmt|;
name|childName
operator|+=
name|child
operator|->
name|m_name
expr_stmt|;
if|if
condition|(
name|child
operator|->
name|m_flags
operator|&
name|RCCFileInfo
operator|::
name|Directory
condition|)
block|{
name|resourceDataFileMapRecursion
argument_list|(
name|child
argument_list|,
name|childName
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|.
name|insert
argument_list|(
name|childName
argument_list|,
name|child
operator|->
name|m_fileInfo
operator|.
name|filePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|resourceDataFileMap
name|RCCResourceLibrary
operator|::
name|ResourceDataFileMap
name|RCCResourceLibrary
operator|::
name|resourceDataFileMap
parameter_list|()
specifier|const
block|{
name|ResourceDataFileMap
name|rc
decl_stmt|;
if|if
condition|(
name|m_root
condition|)
name|resourceDataFileMapRecursion
argument_list|(
name|m_root
argument_list|,
name|QString
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
argument_list|,
name|rc
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
end_function
begin_function
DECL|function|output
name|bool
name|RCCResourceLibrary
operator|::
name|output
parameter_list|(
name|QIODevice
modifier|&
name|outDevice
parameter_list|,
name|QIODevice
modifier|&
name|errorDevice
parameter_list|)
block|{
name|m_errorDevice
operator|=
operator|&
name|errorDevice
expr_stmt|;
comment|//write out
if|if
condition|(
name|m_verbose
condition|)
name|m_errorDevice
operator|->
name|write
argument_list|(
literal|"Outputting code\n"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|writeHeader
argument_list|()
condition|)
block|{
name|m_errorDevice
operator|->
name|write
argument_list|(
literal|"Could not write header\n"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|m_root
condition|)
block|{
if|if
condition|(
operator|!
name|writeDataBlobs
argument_list|()
condition|)
block|{
name|m_errorDevice
operator|->
name|write
argument_list|(
literal|"Could not write data blobs.\n"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|writeDataNames
argument_list|()
condition|)
block|{
name|m_errorDevice
operator|->
name|write
argument_list|(
literal|"Could not write file names\n"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|writeDataStructure
argument_list|()
condition|)
block|{
name|m_errorDevice
operator|->
name|write
argument_list|(
literal|"Could not write data tree\n"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
operator|!
name|writeInitializer
argument_list|()
condition|)
block|{
name|m_errorDevice
operator|->
name|write
argument_list|(
literal|"Could not write footer\n"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|outDevice
operator|.
name|write
argument_list|(
name|m_out
operator|.
name|constData
argument_list|()
argument_list|,
name|m_out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|writeHex
name|void
name|RCCResourceLibrary
operator|::
name|writeHex
parameter_list|(
name|quint8
name|tmp
parameter_list|)
block|{
specifier|const
name|char
name|digits
index|[]
init|=
literal|"0123456789abcdef"
decl_stmt|;
name|writeChar
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
name|writeChar
argument_list|(
literal|'x'
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmp
operator|<
literal|16
condition|)
block|{
name|writeChar
argument_list|(
name|digits
index|[
name|tmp
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeChar
argument_list|(
name|digits
index|[
name|tmp
operator|>>
literal|4
index|]
argument_list|)
expr_stmt|;
name|writeChar
argument_list|(
name|digits
index|[
name|tmp
operator|&
literal|0xf
index|]
argument_list|)
expr_stmt|;
block|}
name|writeChar
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeNumber2
name|void
name|RCCResourceLibrary
operator|::
name|writeNumber2
parameter_list|(
name|quint16
name|number
parameter_list|)
block|{
if|if
condition|(
name|m_format
operator|==
name|RCCResourceLibrary
operator|::
name|Binary
condition|)
block|{
name|writeChar
argument_list|(
name|number
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|writeChar
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeHex
argument_list|(
name|number
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|writeHex
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeNumber4
name|void
name|RCCResourceLibrary
operator|::
name|writeNumber4
parameter_list|(
name|quint32
name|number
parameter_list|)
block|{
if|if
condition|(
name|m_format
operator|==
name|RCCResourceLibrary
operator|::
name|Binary
condition|)
block|{
name|writeChar
argument_list|(
name|number
operator|>>
literal|24
argument_list|)
expr_stmt|;
name|writeChar
argument_list|(
name|number
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|writeChar
argument_list|(
name|number
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|writeChar
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeHex
argument_list|(
name|number
operator|>>
literal|24
argument_list|)
expr_stmt|;
name|writeHex
argument_list|(
name|number
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|writeHex
argument_list|(
name|number
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|writeHex
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeHeader
name|bool
name|RCCResourceLibrary
operator|::
name|writeHeader
parameter_list|()
block|{
if|if
condition|(
name|m_format
operator|==
name|C_Code
condition|)
block|{
name|writeString
argument_list|(
literal|"/****************************************************************************\n"
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
literal|"** Resource object code\n"
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
literal|"**\n"
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
literal|"** Created: "
argument_list|)
expr_stmt|;
name|writeByteArray
argument_list|(
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
literal|"\n**      by: The Resource Compiler for Qt version "
argument_list|)
expr_stmt|;
name|writeByteArray
argument_list|(
name|QT_VERSION_STR
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
literal|"\n**\n"
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
literal|"** WARNING! All changes made in this file will be lost!\n"
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
literal|"*****************************************************************************/\n\n"
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
literal|"#include<QtCore/qglobal.h>\n\n"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_format
operator|==
name|Binary
condition|)
block|{
name|writeString
argument_list|(
literal|"qres"
argument_list|)
expr_stmt|;
name|writeNumber4
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|writeNumber4
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|writeNumber4
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|writeNumber4
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|writeDataBlobs
name|bool
name|RCCResourceLibrary
operator|::
name|writeDataBlobs
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|m_errorDevice
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_format
operator|==
name|C_Code
condition|)
name|writeString
argument_list|(
literal|"static const unsigned char qt_resource_data[] = {\n"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|m_format
operator|==
name|Binary
condition|)
name|m_dataOffset
operator|=
name|m_out
operator|.
name|size
argument_list|()
expr_stmt|;
name|QStack
argument_list|<
name|RCCFileInfo
modifier|*
argument_list|>
name|pending
decl_stmt|;
if|if
condition|(
operator|!
name|m_root
condition|)
return|return
literal|false
return|;
name|pending
operator|.
name|push
argument_list|(
name|m_root
argument_list|)
expr_stmt|;
name|qint64
name|offset
init|=
literal|0
decl_stmt|;
name|QString
name|errorMessage
decl_stmt|;
while|while
condition|(
operator|!
name|pending
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RCCFileInfo
modifier|*
name|file
init|=
name|pending
operator|.
name|pop
argument_list|()
decl_stmt|;
for|for
control|(
name|QHash
argument_list|<
name|QString
argument_list|,
name|RCCFileInfo
operator|*
argument_list|>
operator|::
name|iterator
name|it
init|=
name|file
operator|->
name|m_children
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|file
operator|->
name|m_children
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|RCCFileInfo
modifier|*
name|child
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|->
name|m_flags
operator|&
name|RCCFileInfo
operator|::
name|Directory
condition|)
name|pending
operator|.
name|push
argument_list|(
name|child
argument_list|)
expr_stmt|;
else|else
block|{
name|offset
operator|=
name|child
operator|->
name|writeDataBlob
argument_list|(
operator|*
name|this
argument_list|,
name|offset
argument_list|,
operator|&
name|errorMessage
argument_list|)
expr_stmt|;
if|if
condition|(
name|offset
operator|==
literal|0
condition|)
name|m_errorDevice
operator|->
name|write
argument_list|(
name|errorMessage
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|m_format
operator|==
name|C_Code
condition|)
name|writeString
argument_list|(
literal|"\n};\n\n"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|writeDataNames
name|bool
name|RCCResourceLibrary
operator|::
name|writeDataNames
parameter_list|()
block|{
if|if
condition|(
name|m_format
operator|==
name|C_Code
condition|)
name|writeString
argument_list|(
literal|"static const unsigned char qt_resource_name[] = {\n"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|m_format
operator|==
name|Binary
condition|)
name|m_namesOffset
operator|=
name|m_out
operator|.
name|size
argument_list|()
expr_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|names
decl_stmt|;
name|QStack
argument_list|<
name|RCCFileInfo
modifier|*
argument_list|>
name|pending
decl_stmt|;
if|if
condition|(
operator|!
name|m_root
condition|)
return|return
literal|false
return|;
name|pending
operator|.
name|push
argument_list|(
name|m_root
argument_list|)
expr_stmt|;
name|qint64
name|offset
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|pending
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RCCFileInfo
modifier|*
name|file
init|=
name|pending
operator|.
name|pop
argument_list|()
decl_stmt|;
for|for
control|(
name|QHash
argument_list|<
name|QString
argument_list|,
name|RCCFileInfo
operator|*
argument_list|>
operator|::
name|iterator
name|it
init|=
name|file
operator|->
name|m_children
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|file
operator|->
name|m_children
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|RCCFileInfo
modifier|*
name|child
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|->
name|m_flags
operator|&
name|RCCFileInfo
operator|::
name|Directory
condition|)
name|pending
operator|.
name|push
argument_list|(
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|names
operator|.
name|contains
argument_list|(
name|child
operator|->
name|m_name
argument_list|)
condition|)
block|{
name|child
operator|->
name|m_nameOffset
operator|=
name|names
operator|.
name|value
argument_list|(
name|child
operator|->
name|m_name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|names
operator|.
name|insert
argument_list|(
name|child
operator|->
name|m_name
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|offset
operator|=
name|child
operator|->
name|writeDataName
argument_list|(
operator|*
name|this
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|m_format
operator|==
name|C_Code
condition|)
name|writeString
argument_list|(
literal|"\n};\n\n"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|qt_rcc_compare_hash
specifier|static
name|bool
name|qt_rcc_compare_hash
parameter_list|(
specifier|const
name|RCCFileInfo
modifier|*
name|left
parameter_list|,
specifier|const
name|RCCFileInfo
modifier|*
name|right
parameter_list|)
block|{
return|return
name|qHash
argument_list|(
name|left
operator|->
name|m_name
argument_list|)
operator|<
name|qHash
argument_list|(
name|right
operator|->
name|m_name
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|writeDataStructure
name|bool
name|RCCResourceLibrary
operator|::
name|writeDataStructure
parameter_list|()
block|{
if|if
condition|(
name|m_format
operator|==
name|C_Code
condition|)
name|writeString
argument_list|(
literal|"static const unsigned char qt_resource_struct[] = {\n"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|m_format
operator|==
name|Binary
condition|)
name|m_treeOffset
operator|=
name|m_out
operator|.
name|size
argument_list|()
expr_stmt|;
name|QStack
argument_list|<
name|RCCFileInfo
modifier|*
argument_list|>
name|pending
decl_stmt|;
if|if
condition|(
operator|!
name|m_root
condition|)
return|return
literal|false
return|;
comment|//calculate the child offsets (flat)
name|pending
operator|.
name|push
argument_list|(
name|m_root
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
literal|1
decl_stmt|;
while|while
condition|(
operator|!
name|pending
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RCCFileInfo
modifier|*
name|file
init|=
name|pending
operator|.
name|pop
argument_list|()
decl_stmt|;
name|file
operator|->
name|m_childOffset
operator|=
name|offset
expr_stmt|;
comment|//sort by hash value for binary lookup
name|QList
argument_list|<
name|RCCFileInfo
modifier|*
argument_list|>
name|m_children
init|=
name|file
operator|->
name|m_children
operator|.
name|values
argument_list|()
decl_stmt|;
name|qSort
argument_list|(
name|m_children
operator|.
name|begin
argument_list|()
argument_list|,
name|m_children
operator|.
name|end
argument_list|()
argument_list|,
name|qt_rcc_compare_hash
argument_list|)
expr_stmt|;
comment|//write out the actual data now
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|RCCFileInfo
modifier|*
name|child
init|=
name|m_children
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
operator|++
name|offset
expr_stmt|;
if|if
condition|(
name|child
operator|->
name|m_flags
operator|&
name|RCCFileInfo
operator|::
name|Directory
condition|)
name|pending
operator|.
name|push
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
comment|//write out the structure (ie iterate again!)
name|pending
operator|.
name|push
argument_list|(
name|m_root
argument_list|)
expr_stmt|;
name|m_root
operator|->
name|writeDataInfo
argument_list|(
operator|*
name|this
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|pending
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RCCFileInfo
modifier|*
name|file
init|=
name|pending
operator|.
name|pop
argument_list|()
decl_stmt|;
comment|//sort by hash value for binary lookup
name|QList
argument_list|<
name|RCCFileInfo
modifier|*
argument_list|>
name|m_children
init|=
name|file
operator|->
name|m_children
operator|.
name|values
argument_list|()
decl_stmt|;
name|qSort
argument_list|(
name|m_children
operator|.
name|begin
argument_list|()
argument_list|,
name|m_children
operator|.
name|end
argument_list|()
argument_list|,
name|qt_rcc_compare_hash
argument_list|)
expr_stmt|;
comment|//write out the actual data now
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|RCCFileInfo
modifier|*
name|child
init|=
name|m_children
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|child
operator|->
name|writeDataInfo
argument_list|(
operator|*
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|->
name|m_flags
operator|&
name|RCCFileInfo
operator|::
name|Directory
condition|)
name|pending
operator|.
name|push
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|m_format
operator|==
name|C_Code
condition|)
name|writeString
argument_list|(
literal|"\n};\n\n"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|writeMangleNamespaceFunction
name|void
name|RCCResourceLibrary
operator|::
name|writeMangleNamespaceFunction
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|name
parameter_list|)
block|{
if|if
condition|(
name|m_useNameSpace
condition|)
block|{
name|writeString
argument_list|(
literal|"QT_MANGLE_NAMESPACE("
argument_list|)
expr_stmt|;
name|writeByteArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|writeChar
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeByteArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeAddNamespaceFunction
name|void
name|RCCResourceLibrary
operator|::
name|writeAddNamespaceFunction
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|name
parameter_list|)
block|{
if|if
condition|(
name|m_useNameSpace
condition|)
block|{
name|writeString
argument_list|(
literal|"QT_PREPEND_NAMESPACE("
argument_list|)
expr_stmt|;
name|writeByteArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|writeChar
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeByteArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeInitializer
name|bool
name|RCCResourceLibrary
operator|::
name|writeInitializer
parameter_list|()
block|{
if|if
condition|(
name|m_format
operator|==
name|C_Code
condition|)
block|{
comment|//write("\nQT_BEGIN_NAMESPACE\n");
name|QString
name|initName
init|=
name|m_initName
decl_stmt|;
if|if
condition|(
operator|!
name|initName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|initName
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
name|initName
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
name|QLatin1String
argument_list|(
literal|"[^a-zA-Z0-9_]"
argument_list|)
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"_"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//init
if|if
condition|(
name|m_useNameSpace
condition|)
name|writeString
argument_list|(
literal|"QT_BEGIN_NAMESPACE\n\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_root
condition|)
block|{
name|writeString
argument_list|(
literal|"extern Q_CORE_EXPORT bool qRegisterResourceData\n    "
literal|"(int, const unsigned char *, "
literal|"const unsigned char *, const unsigned char *);\n\n"
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
literal|"extern Q_CORE_EXPORT bool qUnregisterResourceData\n    "
literal|"(int, const unsigned char *, "
literal|"const unsigned char *, const unsigned char *);\n\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_useNameSpace
condition|)
name|writeString
argument_list|(
literal|"QT_END_NAMESPACE\n\n\n"
argument_list|)
expr_stmt|;
name|QString
name|initResources
init|=
name|QLatin1String
argument_list|(
literal|"qInitResources"
argument_list|)
decl_stmt|;
name|initResources
operator|+=
name|initName
expr_stmt|;
name|writeString
argument_list|(
literal|"int "
argument_list|)
expr_stmt|;
name|writeMangleNamespaceFunction
argument_list|(
name|initResources
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
literal|"()\n{\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_root
condition|)
block|{
name|writeString
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
name|writeAddNamespaceFunction
argument_list|(
literal|"qRegisterResourceData"
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
literal|"\n        (0x01, qt_resource_struct, "
literal|"qt_resource_name, qt_resource_data);\n"
argument_list|)
expr_stmt|;
block|}
name|writeString
argument_list|(
literal|"    return 1;\n"
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
literal|"}\n\n"
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
literal|"Q_CONSTRUCTOR_FUNCTION("
argument_list|)
expr_stmt|;
name|writeMangleNamespaceFunction
argument_list|(
name|initResources
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
literal|")\n\n"
argument_list|)
expr_stmt|;
comment|//cleanup
name|QString
name|cleanResources
init|=
name|QLatin1String
argument_list|(
literal|"qCleanupResources"
argument_list|)
decl_stmt|;
name|cleanResources
operator|+=
name|initName
expr_stmt|;
name|writeString
argument_list|(
literal|"int "
argument_list|)
expr_stmt|;
name|writeMangleNamespaceFunction
argument_list|(
name|cleanResources
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
literal|"()\n{\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_root
condition|)
block|{
name|writeString
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
name|writeAddNamespaceFunction
argument_list|(
literal|"qUnregisterResourceData"
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
literal|"\n       (0x01, qt_resource_struct, "
literal|"qt_resource_name, qt_resource_data);\n"
argument_list|)
expr_stmt|;
block|}
name|writeString
argument_list|(
literal|"    return 1;\n"
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
literal|"}\n\n"
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
literal|"Q_DESTRUCTOR_FUNCTION("
argument_list|)
expr_stmt|;
name|writeMangleNamespaceFunction
argument_list|(
name|cleanResources
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
literal|")\n\n"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_format
operator|==
name|Binary
condition|)
block|{
name|int
name|i
init|=
literal|4
decl_stmt|;
name|char
modifier|*
name|p
init|=
name|m_out
operator|.
name|data
argument_list|()
decl_stmt|;
name|p
index|[
name|i
operator|++
index|]
operator|=
literal|0
expr_stmt|;
comment|// 0x01
name|p
index|[
name|i
operator|++
index|]
operator|=
literal|0
expr_stmt|;
name|p
index|[
name|i
operator|++
index|]
operator|=
literal|0
expr_stmt|;
name|p
index|[
name|i
operator|++
index|]
operator|=
literal|1
expr_stmt|;
name|p
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|m_treeOffset
operator|>>
literal|24
operator|)
operator|&
literal|0xff
expr_stmt|;
name|p
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|m_treeOffset
operator|>>
literal|16
operator|)
operator|&
literal|0xff
expr_stmt|;
name|p
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|m_treeOffset
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
name|p
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|m_treeOffset
operator|>>
literal|0
operator|)
operator|&
literal|0xff
expr_stmt|;
name|p
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|m_dataOffset
operator|>>
literal|24
operator|)
operator|&
literal|0xff
expr_stmt|;
name|p
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|m_dataOffset
operator|>>
literal|16
operator|)
operator|&
literal|0xff
expr_stmt|;
name|p
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|m_dataOffset
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
name|p
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|m_dataOffset
operator|>>
literal|0
operator|)
operator|&
literal|0xff
expr_stmt|;
name|p
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|m_namesOffset
operator|>>
literal|24
operator|)
operator|&
literal|0xff
expr_stmt|;
name|p
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|m_namesOffset
operator|>>
literal|16
operator|)
operator|&
literal|0xff
expr_stmt|;
name|p
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|m_namesOffset
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
name|p
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|m_namesOffset
operator|>>
literal|0
operator|)
operator|&
literal|0xff
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
