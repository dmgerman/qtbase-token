begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QByteArray>
end_include
begin_include
include|#
directive|include
file|<QString>
end_include
begin_include
include|#
directive|include
file|<QVarLengthArray>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QProcess>
end_include
begin_include
include|#
directive|include
file|<QMetaObject>
end_include
begin_include
include|#
directive|include
file|<QList>
end_include
begin_include
include|#
directive|include
file|<QRegExp>
end_include
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QLibraryInfo>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|"qdbusconnection.h"
end_include
begin_comment
comment|// for the Export* flags
end_comment
begin_comment
comment|// copied from dbus-protocol.h:
end_comment
begin_decl_stmt
DECL|variable|docTypeHeader
specifier|static
specifier|const
name|char
name|docTypeHeader
index|[]
init|=
literal|"<!DOCTYPE node PUBLIC \"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN\" "
literal|"\"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd\">\n"
decl_stmt|;
end_decl_stmt
begin_comment
comment|// in qdbusxmlgenerator.cpp
end_comment
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|Q_DBUS_EXPORT
name|QString
name|qDBusGenerateMetaObjectXml
parameter_list|(
name|QString
name|interface
parameter_list|,
specifier|const
name|QMetaObject
modifier|*
name|mo
parameter_list|,
specifier|const
name|QMetaObject
modifier|*
name|base
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|QT_END_NAMESPACE
DECL|macro|PROGRAMNAME
define|#
directive|define
name|PROGRAMNAME
value|"qdbuscpp2xml"
DECL|macro|PROGRAMVERSION
define|#
directive|define
name|PROGRAMVERSION
value|"0.1"
DECL|macro|PROGRAMCOPYRIGHT
define|#
directive|define
name|PROGRAMCOPYRIGHT
value|"Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies)."
DECL|variable|outputFile
specifier|static
name|QString
name|outputFile
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|flags
specifier|static
name|int
name|flags
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|help
specifier|static
specifier|const
name|char
name|help
index|[]
init|=
literal|"Usage: "
name|PROGRAMNAME
literal|" [options...] [files...]\n"
literal|"Parses the C++ source or header file containing a QObject-derived class and\n"
literal|"produces the D-Bus Introspection XML."
literal|"\n"
literal|"Options:\n"
literal|"  -p|-s|-m       Only parse scriptable Properties, Signals and Methods (slots)\n"
literal|"  -P|-S|-M       Parse all Properties, Signals and Methods (slots)\n"
literal|"  -a             Output all scriptable contents (equivalent to -psm)\n"
literal|"  -A             Output all contents (equivalent to -PSM)\n"
literal|"  -o<filename>  Write the output to file<filename>\n"
literal|"  -h             Show this information\n"
literal|"  -V             Show the program version and quit.\n"
literal|"\n"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|MocParser
class|class
name|MocParser
block|{
name|void
name|parseError
parameter_list|()
function_decl|;
name|QByteArray
name|readLine
parameter_list|()
function_decl|;
name|void
name|loadIntData
parameter_list|(
name|uint
modifier|*
modifier|&
name|data
parameter_list|)
function_decl|;
name|void
name|loadStringData
parameter_list|(
name|char
modifier|*
modifier|&
name|stringdata
parameter_list|)
function_decl|;
DECL|member|input
name|QIODevice
modifier|*
name|input
decl_stmt|;
DECL|member|filename
specifier|const
name|char
modifier|*
name|filename
decl_stmt|;
DECL|member|lineNumber
name|int
name|lineNumber
decl_stmt|;
public|public:
name|~
name|MocParser
parameter_list|()
destructor_decl|;
name|void
name|parse
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
name|QIODevice
modifier|*
name|input
parameter_list|,
name|int
name|lineNumber
init|=
literal|0
parameter_list|)
function_decl|;
DECL|member|objects
name|QList
argument_list|<
name|QMetaObject
argument_list|>
name|objects
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|parseError
name|void
name|MocParser
operator|::
name|parseError
parameter_list|()
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
name|PROGRAMNAME
literal|": error parsing input file '%s' line %d \n"
argument_list|,
name|filename
argument_list|,
name|lineNumber
argument_list|)
expr_stmt|;
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readLine
name|QByteArray
name|MocParser
operator|::
name|readLine
parameter_list|()
block|{
operator|++
name|lineNumber
expr_stmt|;
return|return
name|input
operator|->
name|readLine
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|loadIntData
name|void
name|MocParser
operator|::
name|loadIntData
parameter_list|(
name|uint
modifier|*
modifier|&
name|data
parameter_list|)
block|{
name|data
operator|=
literal|0
expr_stmt|;
comment|// initialise
name|QVarLengthArray
argument_list|<
name|uint
argument_list|>
name|array
decl_stmt|;
name|QRegExp
name|rx
argument_list|(
name|QLatin1String
argument_list|(
literal|"(\\d+|0x[0-9abcdef]+)"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|input
operator|->
name|atEnd
argument_list|()
condition|)
block|{
name|QString
name|line
init|=
name|QLatin1String
argument_list|(
name|readLine
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|line
operator|.
name|indexOf
argument_list|(
name|QLatin1String
argument_list|(
literal|"//"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
condition|)
name|line
operator|.
name|truncate
argument_list|(
name|pos
argument_list|)
expr_stmt|;
comment|// drop comments
if|if
condition|(
name|line
operator|==
name|QLatin1String
argument_list|(
literal|"};\n"
argument_list|)
condition|)
block|{
comment|// end of data
name|data
operator|=
operator|new
name|uint
index|[
name|array
operator|.
name|count
argument_list|()
index|]
expr_stmt|;
name|memcpy
argument_list|(
name|data
argument_list|,
name|array
operator|.
name|data
argument_list|()
argument_list|,
name|array
operator|.
name|count
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|data
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|pos
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|pos
operator|=
name|rx
operator|.
name|indexIn
argument_list|(
name|line
argument_list|,
name|pos
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|QString
name|num
init|=
name|rx
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|num
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"0x"
argument_list|)
argument_list|)
condition|)
name|array
operator|.
name|append
argument_list|(
name|num
operator|.
name|mid
argument_list|(
literal|2
argument_list|)
operator|.
name|toUInt
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|array
operator|.
name|append
argument_list|(
name|num
operator|.
name|toUInt
argument_list|()
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|rx
operator|.
name|matchedLength
argument_list|()
expr_stmt|;
block|}
block|}
name|parseError
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|loadStringData
name|void
name|MocParser
operator|::
name|loadStringData
parameter_list|(
name|char
modifier|*
modifier|&
name|stringdata
parameter_list|)
block|{
name|stringdata
operator|=
literal|0
expr_stmt|;
name|QVarLengthArray
argument_list|<
name|char
argument_list|,
literal|1024
argument_list|>
name|array
decl_stmt|;
while|while
condition|(
operator|!
name|input
operator|->
name|atEnd
argument_list|()
condition|)
block|{
name|QByteArray
name|line
init|=
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|"};\n"
condition|)
block|{
comment|// end of data
name|stringdata
operator|=
operator|new
name|char
index|[
name|array
operator|.
name|count
argument_list|()
index|]
expr_stmt|;
name|memcpy
argument_list|(
name|stringdata
argument_list|,
name|array
operator|.
name|data
argument_list|()
argument_list|,
name|array
operator|.
name|count
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|stringdata
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|start
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|'"'
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|==
operator|-
literal|1
condition|)
name|parseError
argument_list|()
expr_stmt|;
name|int
name|len
init|=
name|line
operator|.
name|length
argument_list|()
operator|-
literal|1
decl_stmt|;
name|line
operator|.
name|truncate
argument_list|(
name|len
argument_list|)
expr_stmt|;
comment|// drop ending \n
if|if
condition|(
name|line
operator|.
name|at
argument_list|(
name|len
operator|-
literal|1
argument_list|)
operator|!=
literal|'"'
condition|)
name|parseError
argument_list|()
expr_stmt|;
operator|--
name|len
expr_stmt|;
operator|++
name|start
expr_stmt|;
for|for
control|(
init|;
name|start
operator|<
name|len
condition|;
operator|++
name|start
control|)
if|if
condition|(
name|line
operator|.
name|at
argument_list|(
name|start
argument_list|)
operator|==
literal|'\\'
condition|)
block|{
comment|// parse escaped sequence
operator|++
name|start
expr_stmt|;
if|if
condition|(
name|start
operator|==
name|len
condition|)
name|parseError
argument_list|()
expr_stmt|;
name|QChar
name|c
argument_list|(
name|QLatin1Char
argument_list|(
name|line
operator|.
name|at
argument_list|(
name|start
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isDigit
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|c
operator|.
name|toLatin1
argument_list|()
condition|)
block|{
case|case
literal|'a'
case|:
name|array
operator|.
name|append
argument_list|(
literal|'\a'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'b'
case|:
name|array
operator|.
name|append
argument_list|(
literal|'\b'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'f'
case|:
name|array
operator|.
name|append
argument_list|(
literal|'\f'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'n'
case|:
name|array
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'r'
case|:
name|array
operator|.
name|append
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'t'
case|:
name|array
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'v'
case|:
name|array
operator|.
name|append
argument_list|(
literal|'\v'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\\'
case|:
case|case
literal|'?'
case|:
case|case
literal|'\''
case|:
case|case
literal|'"'
case|:
name|array
operator|.
name|append
argument_list|(
name|c
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'x'
case|:
if|if
condition|(
name|start
operator|+
literal|2
operator|<=
name|len
condition|)
name|parseError
argument_list|()
expr_stmt|;
name|array
operator|.
name|append
argument_list|(
name|char
argument_list|(
name|line
operator|.
name|mid
argument_list|(
name|start
operator|+
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|toInt
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|array
operator|.
name|append
argument_list|(
name|c
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
name|PROGRAMNAME
literal|": warning: invalid escape sequence '\\%c' found in input"
argument_list|,
name|c
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// octal
name|QRegExp
name|octal
argument_list|(
name|QLatin1String
argument_list|(
literal|"([0-7]+)"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|octal
operator|.
name|indexIn
argument_list|(
name|QLatin1String
argument_list|(
name|line
argument_list|)
argument_list|,
name|start
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|parseError
argument_list|()
expr_stmt|;
name|array
operator|.
name|append
argument_list|(
name|char
argument_list|(
name|octal
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|array
operator|.
name|append
argument_list|(
name|line
operator|.
name|at
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|parseError
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parse
name|void
name|MocParser
operator|::
name|parse
parameter_list|(
specifier|const
name|char
modifier|*
name|fname
parameter_list|,
name|QIODevice
modifier|*
name|io
parameter_list|,
name|int
name|lineNum
parameter_list|)
block|{
name|filename
operator|=
name|fname
expr_stmt|;
name|input
operator|=
name|io
expr_stmt|;
name|lineNumber
operator|=
name|lineNum
expr_stmt|;
while|while
condition|(
operator|!
name|input
operator|->
name|atEnd
argument_list|()
condition|)
block|{
name|QByteArray
name|line
init|=
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"static const uint qt_meta_data_"
argument_list|)
condition|)
block|{
comment|// start of new class data
name|uint
modifier|*
name|data
decl_stmt|;
name|loadIntData
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// find the start of the string data
do|do
block|{
name|line
operator|=
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|input
operator|->
name|atEnd
argument_list|()
condition|)
name|parseError
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|line
operator|.
name|startsWith
argument_list|(
literal|"static const char qt_meta_stringdata_"
argument_list|)
condition|)
do|;
name|char
modifier|*
name|stringdata
decl_stmt|;
name|loadStringData
argument_list|(
name|stringdata
argument_list|)
expr_stmt|;
name|QMetaObject
name|mo
decl_stmt|;
name|mo
operator|.
name|d
operator|.
name|superdata
operator|=
operator|&
name|QObject
operator|::
name|staticMetaObject
expr_stmt|;
name|mo
operator|.
name|d
operator|.
name|stringdata
operator|=
name|stringdata
expr_stmt|;
name|mo
operator|.
name|d
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|mo
operator|.
name|d
operator|.
name|extradata
operator|=
literal|0
expr_stmt|;
name|objects
operator|.
name|append
argument_list|(
name|mo
argument_list|)
expr_stmt|;
block|}
block|}
name|fname
operator|=
literal|0
expr_stmt|;
name|input
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~MocParser
name|MocParser
operator|::
name|~
name|MocParser
parameter_list|()
block|{
foreach|foreach
control|(
name|QMetaObject
name|mo
decl|,
name|objects
control|)
block|{
operator|delete
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|mo
operator|.
name|d
operator|.
name|stringdata
argument_list|)
expr_stmt|;
operator|delete
cast|const_cast
argument_list|<
name|uint
operator|*
argument_list|>
argument_list|(
name|mo
operator|.
name|d
operator|.
name|data
argument_list|)
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|showHelp
specifier|static
name|void
name|showHelp
parameter_list|()
block|{
name|printf
argument_list|(
literal|"%s"
argument_list|,
name|help
argument_list|)
expr_stmt|;
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|showVersion
specifier|static
name|void
name|showVersion
parameter_list|()
block|{
name|printf
argument_list|(
literal|"%s version %s\n"
argument_list|,
name|PROGRAMNAME
argument_list|,
name|PROGRAMVERSION
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"D-Bus QObject-to-XML converter\n"
argument_list|)
expr_stmt|;
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parseCmdLine
specifier|static
name|void
name|parseCmdLine
parameter_list|(
name|QStringList
modifier|&
name|arguments
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|arguments
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|arg
init|=
name|arguments
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|arg
operator|==
name|QLatin1String
argument_list|(
literal|"--help"
argument_list|)
condition|)
name|showHelp
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|arg
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
argument_list|)
condition|)
continue|continue;
name|char
name|c
init|=
name|arg
operator|.
name|count
argument_list|()
operator|==
literal|2
condition|?
name|arg
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toLatin1
argument_list|()
else|:
name|char
argument_list|(
literal|0
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'P'
case|:
name|flags
operator||=
name|QDBusConnection
operator|::
name|ExportNonScriptableProperties
expr_stmt|;
comment|// fall through
case|case
literal|'p'
case|:
name|flags
operator||=
name|QDBusConnection
operator|::
name|ExportScriptableProperties
expr_stmt|;
break|break;
case|case
literal|'S'
case|:
name|flags
operator||=
name|QDBusConnection
operator|::
name|ExportNonScriptableSignals
expr_stmt|;
comment|// fall through
case|case
literal|'s'
case|:
name|flags
operator||=
name|QDBusConnection
operator|::
name|ExportScriptableSignals
expr_stmt|;
break|break;
case|case
literal|'M'
case|:
name|flags
operator||=
name|QDBusConnection
operator|::
name|ExportNonScriptableSlots
expr_stmt|;
comment|// fall through
case|case
literal|'m'
case|:
name|flags
operator||=
name|QDBusConnection
operator|::
name|ExportScriptableSlots
expr_stmt|;
break|break;
case|case
literal|'A'
case|:
name|flags
operator||=
name|QDBusConnection
operator|::
name|ExportNonScriptableContents
expr_stmt|;
comment|// fall through
case|case
literal|'a'
case|:
name|flags
operator||=
name|QDBusConnection
operator|::
name|ExportScriptableContents
expr_stmt|;
break|break;
case|case
literal|'o'
case|:
if|if
condition|(
name|arguments
operator|.
name|count
argument_list|()
operator|<
name|i
operator|+
literal|2
operator|||
name|arguments
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
argument_list|)
condition|)
block|{
name|printf
argument_list|(
literal|"-o expects a filename\n"
argument_list|)
expr_stmt|;
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|outputFile
operator|=
name|arguments
operator|.
name|takeAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'h'
case|:
case|case
literal|'?'
case|:
name|showHelp
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'V'
case|:
name|showVersion
argument_list|()
expr_stmt|;
break|break;
default|default:
name|printf
argument_list|(
literal|"unknown option: \"%s\"\n"
argument_list|,
name|qPrintable
argument_list|(
name|arg
argument_list|)
argument_list|)
expr_stmt|;
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|flags
operator|==
literal|0
condition|)
name|flags
operator|=
name|QDBusConnection
operator|::
name|ExportScriptableContents
operator||
name|QDBusConnection
operator|::
name|ExportNonScriptableContents
expr_stmt|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QStringList
name|args
init|=
name|app
operator|.
name|arguments
argument_list|()
decl_stmt|;
name|MocParser
name|parser
decl_stmt|;
name|parseCmdLine
argument_list|(
name|args
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|args
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|arg
init|=
name|args
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
argument_list|)
condition|)
continue|continue;
name|QFile
name|f
argument_list|(
name|arg
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
name|PROGRAMNAME
literal|": could not open '%s': %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|arg
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|f
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|f
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|QByteArray
name|line
init|=
name|f
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
literal|"Meta object code from reading C++ file"
argument_list|)
condition|)
comment|// this is a moc-generated file
name|parser
operator|.
name|parse
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|,
operator|&
name|f
argument_list|,
literal|3
argument_list|)
expr_stmt|;
else|else
block|{
comment|// run moc on this file
name|QProcess
name|proc
decl_stmt|;
name|proc
operator|.
name|start
argument_list|(
name|QLibraryInfo
operator|::
name|location
argument_list|(
name|QLibraryInfo
operator|::
name|BinariesPath
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"/moc"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QFile
operator|::
name|decodeName
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|proc
operator|.
name|waitForStarted
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
name|PROGRAMNAME
literal|": could not execute moc! Aborting.\n"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|proc
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|proc
operator|.
name|waitForFinished
argument_list|()
operator|||
name|proc
operator|.
name|exitStatus
argument_list|()
operator|!=
name|QProcess
operator|::
name|NormalExit
operator|||
name|proc
operator|.
name|exitCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// output the moc errors:
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%s"
argument_list|,
name|proc
operator|.
name|readAllStandardError
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
name|PROGRAMNAME
literal|": exit code %d from moc. Aborting\n"
argument_list|,
name|proc
operator|.
name|exitCode
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%s"
argument_list|,
name|proc
operator|.
name|readAllStandardError
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|,
operator|&
name|proc
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|QFile
name|output
decl_stmt|;
if|if
condition|(
name|outputFile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|output
operator|.
name|open
argument_list|(
name|stdout
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
operator|.
name|setFileName
argument_list|(
name|outputFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|output
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
name|PROGRAMNAME
literal|": could not open output file '%s': %s"
argument_list|,
name|qPrintable
argument_list|(
name|outputFile
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|output
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
name|output
operator|.
name|write
argument_list|(
name|docTypeHeader
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
literal|"<node>\n"
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QMetaObject
name|mo
decl|,
name|parser
operator|.
name|objects
control|)
block|{
name|QString
name|xml
init|=
name|qDBusGenerateMetaObjectXml
argument_list|(
name|QString
argument_list|()
argument_list|,
operator|&
name|mo
argument_list|,
operator|&
name|QObject
operator|::
name|staticMetaObject
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|output
operator|.
name|write
argument_list|(
name|xml
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|write
argument_list|(
literal|"</node>\n"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
end_unit
