begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*   node.h */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|NODE_H
end_ifndef
begin_define
DECL|macro|NODE_H
define|#
directive|define
name|NODE_H
end_define
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qmap.h>
end_include
begin_include
include|#
directive|include
file|<qpair.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|"codechunk.h"
end_include
begin_include
include|#
directive|include
file|"doc.h"
end_include
begin_include
include|#
directive|include
file|"location.h"
end_include
begin_include
include|#
directive|include
file|"text.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|Node
name|class
name|Node
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ClassNode
name|class
name|ClassNode
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|InnerNode
name|class
name|InnerNode
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ClassNode
name|class
name|ClassNode
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ExampleNode
name|class
name|ExampleNode
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QmlClassNode
name|class
name|QmlClassNode
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|Tree
name|class
name|Tree
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|QString
DECL|typedef|NodeMap
typedef|typedef
name|QMap
operator|<
name|QString
operator|,
specifier|const
name|Node
operator|*
operator|>
name|NodeMap
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QString
DECL|typedef|NodeMultiMap
typedef|typedef
name|QMultiMap
operator|<
name|QString
operator|,
name|Node
operator|*
operator|>
name|NodeMultiMap
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QString
DECL|typedef|ExampleNodeMap
typedef|typedef
name|QMultiMap
operator|<
name|QString
operator|,
specifier|const
name|ExampleNode
operator|*
operator|>
name|ExampleNodeMap
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QString
DECL|typedef|ImportList
typedef|typedef
name|QList
operator|<
name|QPair
operator|<
name|QString
operator|,
name|QString
operator|>
expr|>
name|ImportList
expr_stmt|;
end_typedef
begin_decl_stmt
name|class
name|Node
block|{
name|public
label|:
enum|enum
name|Type
block|{
name|Namespace
block|,
name|Class
block|,
name|Fake
block|,
name|Enum
block|,
name|Typedef
block|,
name|Function
block|,
name|Property
block|,
name|Variable
block|,
name|QmlProperty
block|,
name|QmlSignal
block|,
name|QmlSignalHandler
block|,
name|QmlMethod
block|,
name|LastType
block|}
enum|;
enum|enum
name|SubType
block|{
name|NoSubType
block|,
name|Example
block|,
name|HeaderFile
block|,
name|File
block|,
name|Image
block|,
name|Group
block|,
name|Module
block|,
name|Page
block|,
name|ExternalPage
block|,
name|QmlClass
block|,
name|QmlPropertyGroup
block|,
name|QmlBasicType
block|,
name|QmlModule
block|,
name|DitaMap
block|,
name|Collision
block|,
name|LastSubtype
block|}
enum|;
enum|enum
name|Access
block|{
name|Public
block|,
name|Protected
block|,
name|Private
block|}
enum|;
enum|enum
name|Status
block|{
name|Compat
block|,
name|Obsolete
block|,
name|Deprecated
block|,
name|Preliminary
block|,
name|Commendable
block|,
name|Main
block|,
name|Internal
block|}
enum|;
comment|// don't reorder this enum
enum|enum
name|ThreadSafeness
block|{
name|UnspecifiedSafeness
block|,
name|NonReentrant
block|,
name|Reentrant
block|,
name|ThreadSafe
block|}
enum|;
enum|enum
name|LinkType
block|{
name|StartLink
block|,
name|NextLink
block|,
name|PreviousLink
block|,
name|ContentsLink
block|,
name|IndexLink
block|,
name|InheritsLink
comment|/*,         GlossaryLink,         CopyrightLink,         ChapterLink,         SectionLink,         SubsectionLink,         AppendixLink */
block|}
enum|;
enum|enum
name|PageType
block|{
name|NoPageType
block|,
name|ApiPage
block|,
name|ArticlePage
block|,
name|ExamplePage
block|,
name|HowToPage
block|,
name|OverviewPage
block|,
name|TutorialPage
block|,
name|FAQPage
block|,
name|DitaMapPage
block|,
name|OnBeyondZebra
block|}
enum|;
enum|enum
name|FlagValue
block|{
name|FlagValueDefault
init|=
operator|-
literal|1
block|,
name|FlagValueFalse
init|=
literal|0
block|,
name|FlagValueTrue
init|=
literal|1
block|}
enum|;
name|virtual
operator|~
name|Node
argument_list|()
expr_stmt|;
name|void
name|setAccess
parameter_list|(
name|Access
name|access
parameter_list|)
block|{
name|access_
operator|=
name|access
expr_stmt|;
block|}
name|void
name|setLocation
parameter_list|(
specifier|const
name|Location
modifier|&
name|location
parameter_list|)
block|{
name|loc
operator|=
name|location
expr_stmt|;
block|}
name|void
name|setDoc
parameter_list|(
specifier|const
name|Doc
modifier|&
name|doc
parameter_list|,
name|bool
name|replace
init|=
name|false
parameter_list|)
function_decl|;
name|void
name|setStatus
parameter_list|(
name|Status
name|status
parameter_list|)
block|{
name|status_
operator|=
name|status
expr_stmt|;
block|}
name|void
name|setThreadSafeness
parameter_list|(
name|ThreadSafeness
name|safeness
parameter_list|)
block|{
name|safeness_
operator|=
name|safeness
expr_stmt|;
block|}
name|void
name|setSince
parameter_list|(
specifier|const
name|QString
modifier|&
name|since
parameter_list|)
function_decl|;
name|void
name|setRelates
parameter_list|(
name|InnerNode
modifier|*
name|pseudoParent
parameter_list|)
function_decl|;
name|void
name|setModuleName
parameter_list|(
specifier|const
name|QString
modifier|&
name|module
parameter_list|)
block|{
name|mod
operator|=
name|module
expr_stmt|;
block|}
name|void
name|setLink
parameter_list|(
name|LinkType
name|linkType
parameter_list|,
specifier|const
name|QString
modifier|&
name|link
parameter_list|,
specifier|const
name|QString
modifier|&
name|desc
parameter_list|)
function_decl|;
name|void
name|setUrl
parameter_list|(
specifier|const
name|QString
modifier|&
name|url
parameter_list|)
function_decl|;
name|void
name|setTemplateStuff
parameter_list|(
specifier|const
name|QString
modifier|&
name|templateStuff
parameter_list|)
block|{
name|templateStuff_
operator|=
name|templateStuff
expr_stmt|;
block|}
name|void
name|setPageType
parameter_list|(
name|PageType
name|t
parameter_list|)
block|{
name|pageType_
operator|=
name|t
expr_stmt|;
block|}
name|void
name|setPageType
parameter_list|(
specifier|const
name|QString
modifier|&
name|t
parameter_list|)
function_decl|;
name|void
name|setParent
parameter_list|(
name|InnerNode
modifier|*
name|n
parameter_list|)
block|{
name|parent_
operator|=
name|n
expr_stmt|;
block|}
name|void
name|setIndexNodeFlag
parameter_list|()
block|{
name|indexNodeFlag_
operator|=
name|true
expr_stmt|;
block|}
name|virtual
name|void
name|setOutputFileName
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
block|{ }
name|virtual
name|bool
name|isInnerNode
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|bool
name|isLeaf
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|isReimp
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|isFunction
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|isQmlNode
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|isQtQuickNode
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|isAbstract
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|isQmlPropertyGroup
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|isCollisionNode
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|void
name|setAbstract
parameter_list|(
name|bool
parameter_list|)
block|{ }
name|virtual
name|QString
name|title
argument_list|()
specifier|const
block|{
return|return
name|QString
argument_list|()
return|;
block|}
name|bool
name|isInternal
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isIndexNode
argument_list|()
specifier|const
block|{
return|return
name|indexNodeFlag_
return|;
block|}
name|Type
name|type
argument_list|()
specifier|const
block|{
return|return
name|nodeType_
return|;
block|}
name|virtual
name|SubType
name|subType
argument_list|()
specifier|const
block|{
return|return
name|NoSubType
return|;
block|}
name|InnerNode
operator|*
name|parent
argument_list|()
specifier|const
block|{
return|return
name|parent_
return|;
block|}
name|InnerNode
operator|*
name|relates
argument_list|()
specifier|const
block|{
return|return
name|relatesTo_
return|;
block|}
specifier|const
name|QString
operator|&
name|name
argument_list|()
specifier|const
block|{
return|return
name|name_
return|;
block|}
name|QMap
operator|<
name|LinkType
operator|,
name|QPair
operator|<
name|QString
operator|,
name|QString
operator|>
expr|>
name|links
argument_list|()
specifier|const
block|{
return|return
name|linkMap
return|;
block|}
name|QString
name|moduleName
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|url
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QString
name|nameForLists
argument_list|()
specifier|const
block|{
return|return
name|name_
return|;
block|}
name|virtual
name|QString
name|outputFileName
argument_list|()
specifier|const
block|{
return|return
name|QString
argument_list|()
return|;
block|}
name|virtual
name|void
name|addGroupMember
parameter_list|(
name|Node
modifier|*
parameter_list|)
block|{ }
name|virtual
name|void
name|addQmlModuleMember
parameter_list|(
name|Node
modifier|*
parameter_list|)
block|{ }
name|Access
name|access
argument_list|()
specifier|const
block|{
return|return
name|access_
return|;
block|}
name|QString
name|accessString
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|Location
operator|&
name|location
argument_list|()
specifier|const
block|{
return|return
name|loc
return|;
block|}
specifier|const
name|Doc
operator|&
name|doc
argument_list|()
specifier|const
block|{
return|return
name|d
return|;
block|}
name|Status
name|status
argument_list|()
specifier|const
block|{
return|return
name|status_
return|;
block|}
name|Status
name|inheritedStatus
argument_list|()
specifier|const
expr_stmt|;
name|ThreadSafeness
name|threadSafeness
argument_list|()
specifier|const
expr_stmt|;
name|ThreadSafeness
name|inheritedThreadSafeness
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|since
argument_list|()
specifier|const
block|{
return|return
name|sinc
return|;
block|}
name|QString
name|templateStuff
argument_list|()
specifier|const
block|{
return|return
name|templateStuff_
return|;
block|}
name|PageType
name|pageType
argument_list|()
specifier|const
block|{
return|return
name|pageType_
return|;
block|}
name|QString
name|pageTypeString
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|nodeTypeString
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|nodeSubtypeString
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|void
name|addPageKeywords
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
block|{ }
name|void
name|clearRelated
parameter_list|()
block|{
name|relatesTo_
operator|=
literal|0
expr_stmt|;
block|}
name|virtual
name|QString
name|fileBase
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|guid
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|ditaXmlHref
parameter_list|()
function_decl|;
name|QString
name|extractClassName
argument_list|(
specifier|const
name|QString
operator|&
name|string
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|QString
name|qmlModuleName
argument_list|()
specifier|const
block|{
return|return
name|qmlModuleName_
return|;
block|}
name|virtual
name|QString
name|qmlModuleVersion
argument_list|()
specifier|const
block|{
return|return
name|qmlModuleVersion_
return|;
block|}
name|virtual
name|QString
name|qmlModuleIdentifier
argument_list|()
specifier|const
block|{
return|return
name|qmlModuleName_
operator|+
name|qmlModuleVersion_
return|;
block|}
name|virtual
name|void
name|setQmlModuleName
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
name|virtual
name|ClassNode
modifier|*
name|classNode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|void
name|clearCurrentChild
parameter_list|()
block|{ }
name|virtual
specifier|const
name|ImportList
operator|*
name|importList
argument_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|void
name|setImportList
parameter_list|(
specifier|const
name|ImportList
modifier|&
parameter_list|)
block|{ }
name|virtual
specifier|const
name|Node
modifier|*
name|applyModuleIdentifier
argument_list|(
specifier|const
name|Node
operator|*
argument_list|)
decl|const
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|QString
name|idNumber
parameter_list|()
block|{
return|return
literal|"0"
return|;
block|}
name|QmlClassNode
modifier|*
name|qmlClassNode
parameter_list|()
function_decl|;
name|ClassNode
modifier|*
name|declarativeCppNode
parameter_list|()
function_decl|;
specifier|const
name|QString
operator|&
name|outputSubdirectory
argument_list|()
specifier|const
block|{
return|return
name|outSubDir_
return|;
block|}
name|QString
name|fullDocumentName
argument_list|()
specifier|const
expr_stmt|;
specifier|static
name|QString
name|cleanId
parameter_list|(
name|QString
name|str
parameter_list|)
function_decl|;
name|QString
name|idForNode
argument_list|()
specifier|const
expr_stmt|;
specifier|static
name|FlagValue
name|toFlagValue
parameter_list|(
name|bool
name|b
parameter_list|)
function_decl|;
specifier|static
name|bool
name|fromFlagValue
parameter_list|(
name|FlagValue
name|fv
parameter_list|,
name|bool
name|defaultValue
parameter_list|)
function_decl|;
specifier|static
name|QString
name|pageTypeString
parameter_list|(
name|unsigned
name|t
parameter_list|)
function_decl|;
specifier|static
name|QString
name|nodeTypeString
parameter_list|(
name|unsigned
name|t
parameter_list|)
function_decl|;
specifier|static
name|QString
name|nodeSubtypeString
parameter_list|(
name|unsigned
name|t
parameter_list|)
function_decl|;
specifier|static
name|int
name|incPropertyGroupCount
parameter_list|()
function_decl|;
specifier|static
name|void
name|clearPropertyGroupCount
parameter_list|()
function_decl|;
name|protected
label|:
name|Node
argument_list|(
argument|Type type
argument_list|,
argument|InnerNode* parent
argument_list|,
argument|const QString& name
argument_list|)
empty_stmt|;
name|private
label|:
name|Type
name|nodeType_
decl_stmt|;
name|Access
name|access_
decl_stmt|;
name|ThreadSafeness
name|safeness_
decl_stmt|;
name|PageType
name|pageType_
decl_stmt|;
name|Status
name|status_
decl_stmt|;
name|bool
name|indexNodeFlag_
decl_stmt|;
if|#
directive|if
literal|0
comment|//ifdef Q_WS_WIN
comment|//else
block|Type nodeType_ : 4;     Access access_ : 2;     ThreadSafeness safeness_ : 2;     PageType pageType_ : 4;     Status status_ : 3;
endif|#
directive|endif
name|InnerNode
modifier|*
name|parent_
decl_stmt|;
name|InnerNode
modifier|*
name|relatesTo_
decl_stmt|;
name|QString
name|name_
decl_stmt|;
name|Location
name|loc
decl_stmt|;
name|Doc
name|d
decl_stmt|;
name|QMap
operator|<
name|LinkType
operator|,
name|QPair
operator|<
name|QString
operator|,
name|QString
operator|>
expr|>
name|linkMap
expr_stmt|;
name|QString
name|mod
decl_stmt|;
name|QString
name|url_
decl_stmt|;
name|QString
name|sinc
decl_stmt|;
name|QString
name|templateStuff_
decl_stmt|;
name|mutable
name|QString
name|uuid
decl_stmt|;
name|QString
name|outSubDir_
decl_stmt|;
name|QString
name|qmlModuleName_
decl_stmt|;
name|QString
name|qmlModuleVersion_
decl_stmt|;
specifier|static
name|QStringMap
name|operators_
decl_stmt|;
specifier|static
name|int
name|propertyGroupCount_
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
DECL|variable|FunctionNode
name|class
name|FunctionNode
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|EnumNode
name|class
name|EnumNode
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|NameCollisionNode
name|class
name|NameCollisionNode
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|NodeList
typedef|typedef
name|QList
operator|<
name|Node
operator|*
operator|>
name|NodeList
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QString
DECL|typedef|NodeMap
typedef|typedef
name|QMap
operator|<
name|QString
operator|,
specifier|const
name|Node
operator|*
operator|>
name|NodeMap
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QString
DECL|typedef|NodeMultiMap
typedef|typedef
name|QMultiMap
operator|<
name|QString
operator|,
name|Node
operator|*
operator|>
name|NodeMultiMap
expr_stmt|;
end_typedef
begin_decl_stmt
name|class
name|InnerNode
range|:
name|public
name|Node
block|{
name|public
operator|:
name|virtual
operator|~
name|InnerNode
argument_list|()
block|;
name|Node
operator|*
name|findChildNodeByName
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|Node
operator|*
name|findChildNodeByName
argument_list|(
argument|const QString& name
argument_list|,
argument|bool qml
argument_list|)
block|;
name|Node
operator|*
name|findChildNodeByNameAndType
argument_list|(
argument|const QString& name
argument_list|,
argument|Type type
argument_list|)
block|;
name|void
name|findNodes
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|,
name|QList
operator|<
name|Node
operator|*
operator|>
operator|&
name|n
argument_list|)
block|;
name|FunctionNode
operator|*
name|findFunctionNode
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|FunctionNode
operator|*
name|findFunctionNode
argument_list|(
specifier|const
name|FunctionNode
operator|*
name|clone
argument_list|)
block|;
name|void
name|addInclude
argument_list|(
specifier|const
name|QString
operator|&
name|include
argument_list|)
block|;
name|void
name|setIncludes
argument_list|(
specifier|const
name|QStringList
operator|&
name|includes
argument_list|)
block|;
name|void
name|setOverload
argument_list|(
argument|const FunctionNode* func
argument_list|,
argument|bool overlode
argument_list|)
block|;
name|void
name|normalizeOverloads
argument_list|()
block|;
name|void
name|makeUndocumentedChildrenInternal
argument_list|()
block|;
name|void
name|clearCurrentChildPointers
argument_list|()
block|;
name|void
name|deleteChildren
argument_list|()
block|;
name|void
name|removeFromRelated
argument_list|()
block|;
name|virtual
name|bool
name|isInnerNode
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|isLeaf
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
specifier|const
name|Node
operator|*
name|findChildNodeByName
argument_list|(
argument|const QString& name
argument_list|)
specifier|const
block|;
specifier|const
name|Node
operator|*
name|findChildNodeByName
argument_list|(
argument|const QString& name
argument_list|,
argument|bool qml
argument_list|)
specifier|const
block|;
specifier|const
name|Node
operator|*
name|findChildNodeByNameAndType
argument_list|(
argument|const QString& name
argument_list|,
argument|Type type
argument_list|)
specifier|const
block|;
specifier|const
name|FunctionNode
operator|*
name|findFunctionNode
argument_list|(
argument|const QString& name
argument_list|)
specifier|const
block|;
specifier|const
name|FunctionNode
operator|*
name|findFunctionNode
argument_list|(
argument|const FunctionNode* clone
argument_list|)
specifier|const
block|;
specifier|const
name|EnumNode
operator|*
name|findEnumNodeForValue
argument_list|(
argument|const QString&enumValue
argument_list|)
specifier|const
block|;
specifier|const
name|NodeList
operator|&
name|childNodes
argument_list|()
specifier|const
block|{
return|return
name|children
return|;
block|}
specifier|const
name|NodeList
operator|&
name|relatedNodes
argument_list|()
specifier|const
block|{
return|return
name|related_
return|;
block|}
name|int
name|count
argument_list|()
specifier|const
block|{
return|return
name|children
operator|.
name|size
argument_list|()
return|;
block|}
name|int
name|overloadNumber
argument_list|(
argument|const FunctionNode* func
argument_list|)
specifier|const
block|;
name|int
name|numOverloads
argument_list|(
argument|const QString& funcName
argument_list|)
specifier|const
block|;
name|NodeList
name|overloads
argument_list|(
argument|const QString&funcName
argument_list|)
specifier|const
block|;
specifier|const
name|QStringList
operator|&
name|includes
argument_list|()
specifier|const
block|{
return|return
name|inc
return|;
block|}
name|QStringList
name|primaryKeys
argument_list|()
block|;
name|QStringList
name|secondaryKeys
argument_list|()
block|;
specifier|const
name|QStringList
operator|&
name|pageKeywords
argument_list|()
specifier|const
block|{
return|return
name|pageKeywds
return|;
block|}
name|virtual
name|void
name|addPageKeywords
argument_list|(
argument|const QString& t
argument_list|)
block|{
name|pageKeywds
operator|<<
name|t
block|; }
name|virtual
name|void
name|setCurrentChild
argument_list|()
block|{ }
name|virtual
name|void
name|setCurrentChild
argument_list|(
argument|InnerNode*
argument_list|)
block|{ }
name|virtual
name|void
name|setOutputFileName
argument_list|(
argument|const QString& f
argument_list|)
block|{
name|outputFileName_
operator|=
name|f
block|; }
name|virtual
name|QString
name|outputFileName
argument_list|()
specifier|const
block|{
return|return
name|outputFileName_
return|;
block|}
name|protected
operator|:
name|InnerNode
argument_list|(
argument|Type type
argument_list|,
argument|InnerNode* parent
argument_list|,
argument|const QString& name
argument_list|)
block|;
name|private
operator|:
name|friend
name|class
name|Node
block|;
name|friend
name|class
name|NameCollisionNode
block|;
specifier|static
name|bool
name|isSameSignature
argument_list|(
specifier|const
name|FunctionNode
operator|*
name|f1
argument_list|,
specifier|const
name|FunctionNode
operator|*
name|f2
argument_list|)
block|;
name|void
name|addChild
argument_list|(
name|Node
operator|*
name|child
argument_list|)
block|;
name|void
name|removeRelated
argument_list|(
name|Node
operator|*
name|pseudoChild
argument_list|)
block|;
name|void
name|removeChild
argument_list|(
name|Node
operator|*
name|child
argument_list|)
block|;
name|QString
name|outputFileName_
block|;
name|QStringList
name|pageKeywds
block|;
name|QStringList
name|inc
block|;
name|NodeList
name|children
block|;
name|NodeList
name|enumChildren
block|;
name|NodeList
name|related_
block|;
name|QMap
operator|<
name|QString
block|,
name|Node
operator|*
operator|>
name|childMap
block|;
name|QMap
operator|<
name|QString
block|,
name|Node
operator|*
operator|>
name|primaryFunctionMap
block|;
name|QMap
operator|<
name|QString
block|,
name|NodeList
operator|>
name|secondaryFunctionMap
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|LeafNode
range|:
name|public
name|Node
block|{
name|public
operator|:
name|LeafNode
argument_list|()
block|;
name|virtual
operator|~
name|LeafNode
argument_list|()
block|{ }
name|virtual
name|bool
name|isInnerNode
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|isLeaf
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|protected
operator|:
name|LeafNode
argument_list|(
argument|Type type
argument_list|,
argument|InnerNode* parent
argument_list|,
argument|const QString& name
argument_list|)
block|;
name|LeafNode
argument_list|(
argument|InnerNode* parent
argument_list|,
argument|Type type
argument_list|,
argument|const QString& name
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|NamespaceNode
range|:
name|public
name|InnerNode
block|{
name|public
operator|:
name|NamespaceNode
argument_list|(
name|InnerNode
operator|*
name|parent
argument_list|,
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|virtual
operator|~
name|NamespaceNode
argument_list|()
block|{ }
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ClassNode
name|class
name|ClassNode
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|RelatedClass
struct|struct
name|RelatedClass
block|{
DECL|function|RelatedClass
name|RelatedClass
argument_list|()
block|{ }
DECL|function|RelatedClass
name|RelatedClass
argument_list|(
argument|Node::Access access0
argument_list|,
argument|ClassNode* node0
argument_list|,
argument|const QString& dataTypeWithTemplateArgs0 =
literal|""
argument_list|)
block|:
name|access
argument_list|(
name|access0
argument_list|)
operator|,
name|node
argument_list|(
name|node0
argument_list|)
operator|,
name|dataTypeWithTemplateArgs
argument_list|(
argument|dataTypeWithTemplateArgs0
argument_list|)
block|{ }
name|QString
name|accessString
argument_list|()
specifier|const
expr_stmt|;
DECL|member|access
name|Node
operator|::
name|Access
name|access
expr_stmt|;
DECL|member|node
name|ClassNode
modifier|*
name|node
decl_stmt|;
DECL|member|dataTypeWithTemplateArgs
name|QString
name|dataTypeWithTemplateArgs
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|PropertyNode
name|class
name|PropertyNode
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|ClassNode
range|:
name|public
name|InnerNode
block|{
name|public
operator|:
name|ClassNode
argument_list|(
name|InnerNode
operator|*
name|parent
argument_list|,
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|virtual
operator|~
name|ClassNode
argument_list|()
block|{ }
name|void
name|addBaseClass
argument_list|(
argument|Access access
argument_list|,
argument|ClassNode* node
argument_list|,
argument|const QString&dataTypeWithTemplateArgs =
literal|""
argument_list|)
block|;
name|void
name|fixBaseClasses
argument_list|()
block|;
specifier|const
name|QList
operator|<
name|RelatedClass
operator|>
operator|&
name|baseClasses
argument_list|()
specifier|const
block|{
return|return
name|bases
return|;
block|}
specifier|const
name|QList
operator|<
name|RelatedClass
operator|>
operator|&
name|derivedClasses
argument_list|()
specifier|const
block|{
return|return
name|derived
return|;
block|}
specifier|const
name|QList
operator|<
name|RelatedClass
operator|>
operator|&
name|ignoredBaseClasses
argument_list|()
specifier|const
block|{
return|return
name|ignoredBases
return|;
block|}
name|bool
name|hideFromMainList
argument_list|()
specifier|const
block|{
return|return
name|hidden
return|;
block|}
name|void
name|setHideFromMainList
argument_list|(
argument|bool value
argument_list|)
block|{
name|hidden
operator|=
name|value
block|; }
name|QString
name|serviceName
argument_list|()
specifier|const
block|{
return|return
name|sname
return|;
block|}
name|void
name|setServiceName
argument_list|(
argument|const QString& value
argument_list|)
block|{
name|sname
operator|=
name|value
block|; }
name|QmlClassNode
operator|*
name|qmlElement
argument_list|()
block|{
return|return
name|qmlelement
return|;
block|}
name|void
name|setQmlElement
argument_list|(
argument|QmlClassNode* qcn
argument_list|)
block|{
name|qmlelement
operator|=
name|qcn
block|; }
name|virtual
name|bool
name|isAbstract
argument_list|()
specifier|const
block|{
return|return
name|abstract
return|;
block|}
name|virtual
name|void
name|setAbstract
argument_list|(
argument|bool b
argument_list|)
block|{
name|abstract
operator|=
name|b
block|; }
name|PropertyNode
operator|*
name|findPropertyNode
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|QmlClassNode
operator|*
name|findQmlBaseNode
argument_list|()
block|;
name|private
operator|:
name|QList
operator|<
name|RelatedClass
operator|>
name|bases
block|;
name|QList
operator|<
name|RelatedClass
operator|>
name|derived
block|;
name|QList
operator|<
name|RelatedClass
operator|>
name|ignoredBases
block|;
name|bool
name|hidden
block|;
name|bool
name|abstract
block|;
name|QString
name|sname
block|;
name|QmlClassNode
operator|*
name|qmlelement
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|FakeNode
range|:
name|public
name|InnerNode
block|{
name|public
operator|:
name|FakeNode
argument_list|(
argument|InnerNode* parent
argument_list|,
argument|const QString& name
argument_list|,
argument|SubType subType
argument_list|,
argument|PageType ptype
argument_list|)
block|;
name|virtual
operator|~
name|FakeNode
argument_list|()
block|{ }
name|void
name|setTitle
argument_list|(
argument|const QString&title
argument_list|)
block|{
name|title_
operator|=
name|title
block|; }
name|void
name|setSubTitle
argument_list|(
argument|const QString&subTitle
argument_list|)
block|{
name|subtitle_
operator|=
name|subTitle
block|; }
name|virtual
name|void
name|addGroupMember
argument_list|(
argument|Node* node
argument_list|)
block|{
name|nodeList
operator|.
name|append
argument_list|(
name|node
argument_list|)
block|; }
name|virtual
name|void
name|addQmlModuleMember
argument_list|(
argument|Node* node
argument_list|)
block|{
name|nodeList
operator|.
name|append
argument_list|(
name|node
argument_list|)
block|; }
name|SubType
name|subType
argument_list|()
specifier|const
block|{
return|return
name|nodeSubtype_
return|;
block|}
name|virtual
name|QString
name|title
argument_list|()
specifier|const
block|;
name|virtual
name|QString
name|fullTitle
argument_list|()
specifier|const
block|;
name|virtual
name|QString
name|subTitle
argument_list|()
specifier|const
block|;
name|virtual
name|QString
name|imageFileName
argument_list|()
specifier|const
block|{
return|return
name|QString
argument_list|()
return|;
block|}
specifier|const
name|NodeList
operator|&
name|groupMembers
argument_list|()
specifier|const
block|{
return|return
name|nodeList
return|;
block|}
specifier|const
name|NodeList
operator|&
name|qmlModuleMembers
argument_list|()
specifier|const
block|{
return|return
name|nodeList
return|;
block|}
name|virtual
name|QString
name|nameForLists
argument_list|()
specifier|const
block|{
return|return
name|title
argument_list|()
return|;
block|}
name|virtual
name|void
name|setImageFileName
argument_list|(
argument|const QString&
argument_list|)
block|{ }
name|virtual
name|bool
name|isQmlPropertyGroup
argument_list|()
specifier|const
block|{
return|return
operator|(
name|nodeSubtype_
operator|==
name|QmlPropertyGroup
operator|)
return|;
block|}
name|protected
operator|:
name|SubType
name|nodeSubtype_
block|;
name|QString
name|title_
block|;
name|QString
name|subtitle_
block|;
name|NodeList
name|nodeList
block|;
comment|// used for groups and QML modules.
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|NameCollisionNode
range|:
name|public
name|FakeNode
block|{
name|public
operator|:
name|NameCollisionNode
argument_list|(
name|InnerNode
operator|*
name|child
argument_list|)
block|;
operator|~
name|NameCollisionNode
argument_list|()
block|;
specifier|const
name|InnerNode
operator|*
name|currentChild
argument_list|()
specifier|const
block|{
return|return
name|current
return|;
block|}
name|virtual
name|void
name|setCurrentChild
argument_list|(
argument|InnerNode* child
argument_list|)
block|{
name|current
operator|=
name|child
block|; }
name|virtual
name|void
name|clearCurrentChild
argument_list|()
block|{
name|current
operator|=
literal|0
block|; }
name|virtual
name|bool
name|isQmlNode
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|isCollisionNode
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
specifier|const
name|Node
operator|*
name|applyModuleIdentifier
argument_list|(
argument|const Node* origin
argument_list|)
specifier|const
block|;
name|InnerNode
operator|*
name|findAny
argument_list|(
argument|Node::Type t
argument_list|,
argument|Node::SubType st
argument_list|)
block|;
name|void
name|addCollision
argument_list|(
name|InnerNode
operator|*
name|child
argument_list|)
block|;
specifier|const
name|QMap
operator|<
name|QString
block|,
name|QString
operator|>
operator|&
name|linkTargets
argument_list|()
specifier|const
block|{
return|return
name|targets
return|;
block|}
name|void
name|addLinkTarget
argument_list|(
argument|const QString& t
argument_list|,
argument|const QString& v
argument_list|)
block|{
name|targets
operator|.
name|insert
argument_list|(
name|t
argument_list|,
name|v
argument_list|)
block|; }
name|private
operator|:
name|InnerNode
operator|*
name|current
block|;
name|QMap
operator|<
name|QString
block|,
name|QString
operator|>
name|targets
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|ExampleNode
range|:
name|public
name|FakeNode
block|{
name|public
operator|:
name|ExampleNode
argument_list|(
name|InnerNode
operator|*
name|parent
argument_list|,
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|virtual
operator|~
name|ExampleNode
argument_list|()
block|{ }
name|virtual
name|QString
name|imageFileName
argument_list|()
specifier|const
block|{
return|return
name|imageFileName_
return|;
block|}
name|virtual
name|void
name|setImageFileName
argument_list|(
argument|const QString& ifn
argument_list|)
block|{
name|imageFileName_
operator|=
name|ifn
block|; }
specifier|static
name|void
name|terminate
argument_list|()
block|{
name|exampleNodeMap
operator|.
name|clear
argument_list|()
block|; }
name|public
operator|:
specifier|static
name|ExampleNodeMap
name|exampleNodeMap
block|;
name|private
operator|:
name|QString
name|imageFileName_
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QmlClassNode
range|:
name|public
name|FakeNode
block|{
name|public
operator|:
name|QmlClassNode
argument_list|(
name|InnerNode
operator|*
name|parent
argument_list|,
specifier|const
name|QString
operator|&
name|name
argument_list|,
name|ClassNode
operator|*
name|cn
argument_list|)
block|;
name|virtual
operator|~
name|QmlClassNode
argument_list|()
block|;
name|virtual
name|bool
name|isQmlNode
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|isQtQuickNode
argument_list|()
specifier|const
block|{
return|return
operator|(
name|qmlModuleName
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"QtQuick"
argument_list|)
operator|)
return|;
block|}
name|virtual
name|ClassNode
operator|*
name|classNode
argument_list|()
block|{
return|return
name|cnode_
return|;
block|}
name|virtual
name|QString
name|fileBase
argument_list|()
specifier|const
block|;
name|virtual
name|void
name|setCurrentChild
argument_list|()
block|;
name|virtual
name|void
name|clearCurrentChild
argument_list|()
block|;
name|virtual
specifier|const
name|ImportList
operator|*
name|importList
argument_list|()
specifier|const
block|{
return|return
operator|&
name|importList_
return|;
block|}
name|virtual
name|void
name|setImportList
argument_list|(
argument|const ImportList& il
argument_list|)
block|{
name|importList_
operator|=
name|il
block|; }
name|virtual
name|bool
name|isAbstract
argument_list|()
specifier|const
block|{
return|return
name|abstract
return|;
block|}
name|virtual
name|void
name|setAbstract
argument_list|(
argument|bool b
argument_list|)
block|{
name|abstract
operator|=
name|b
block|; }
specifier|const
name|FakeNode
operator|*
name|qmlBase
argument_list|()
specifier|const
block|{
return|return
name|base_
return|;
block|}
name|void
name|resolveInheritance
argument_list|(
name|Tree
operator|*
name|tree
argument_list|)
block|;
specifier|static
name|void
name|addInheritedBy
argument_list|(
specifier|const
name|QString
operator|&
name|base
argument_list|,
name|Node
operator|*
name|sub
argument_list|)
block|;
specifier|static
name|void
name|subclasses
argument_list|(
specifier|const
name|QString
operator|&
name|base
argument_list|,
name|NodeList
operator|&
name|subs
argument_list|)
block|;
specifier|static
name|void
name|terminate
argument_list|()
block|;
name|public
operator|:
specifier|static
name|bool
name|qmlOnly
block|;
specifier|static
name|QMultiMap
operator|<
name|QString
block|,
name|Node
operator|*
operator|>
name|inheritedBy
block|;
specifier|static
name|QMap
operator|<
name|QString
block|,
name|QmlClassNode
operator|*
operator|>
name|moduleMap
block|;
name|private
operator|:
name|bool
name|abstract
block|;
name|ClassNode
operator|*
name|cnode_
block|;
name|FakeNode
operator|*
name|base_
block|;
name|ImportList
name|importList_
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QmlBasicTypeNode
range|:
name|public
name|FakeNode
block|{
name|public
operator|:
name|QmlBasicTypeNode
argument_list|(
name|InnerNode
operator|*
name|parent
argument_list|,
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|virtual
operator|~
name|QmlBasicTypeNode
argument_list|()
block|{ }
name|virtual
name|bool
name|isQmlNode
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
expr|}
block|;
name|class
name|QmlPropGroupNode
operator|:
name|public
name|FakeNode
block|{
name|public
operator|:
name|QmlPropGroupNode
argument_list|(
name|QmlClassNode
operator|*
name|parent
argument_list|,
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|virtual
operator|~
name|QmlPropGroupNode
argument_list|()
block|{ }
name|virtual
name|bool
name|isQmlNode
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|isQtQuickNode
argument_list|()
specifier|const
block|{
return|return
name|parent
argument_list|()
operator|->
name|isQtQuickNode
argument_list|()
return|;
block|}
name|virtual
name|QString
name|qmlModuleName
argument_list|()
specifier|const
block|{
return|return
name|parent
argument_list|()
operator|->
name|qmlModuleName
argument_list|()
return|;
block|}
name|virtual
name|QString
name|qmlModuleVersion
argument_list|()
specifier|const
block|{
return|return
name|parent
argument_list|()
operator|->
name|qmlModuleVersion
argument_list|()
return|;
block|}
name|virtual
name|QString
name|qmlModuleIdentifier
argument_list|()
specifier|const
block|{
return|return
name|parent
argument_list|()
operator|->
name|qmlModuleIdentifier
argument_list|()
return|;
block|}
name|virtual
name|QString
name|idNumber
argument_list|()
block|;
specifier|const
name|QString
operator|&
name|element
argument_list|()
specifier|const
block|{
return|return
name|parent
argument_list|()
operator|->
name|name
argument_list|()
return|;
block|}
name|private
operator|:
name|int
name|idNumber_
block|; }
block|;
DECL|variable|QmlPropertyNode
name|class
name|QmlPropertyNode
block|;
name|class
name|QmlPropertyNode
operator|:
name|public
name|LeafNode
block|{
name|public
operator|:
name|QmlPropertyNode
argument_list|(
argument|QmlClassNode *parent
argument_list|,
argument|const QString& name
argument_list|,
argument|const QString& type
argument_list|,
argument|bool attached
argument_list|)
block|;
name|QmlPropertyNode
argument_list|(
argument|QmlPropGroupNode* parent
argument_list|,
argument|const QString& name
argument_list|,
argument|const QString& type
argument_list|,
argument|bool attached
argument_list|)
block|;
name|QmlPropertyNode
argument_list|(
argument|QmlPropertyNode* parent
argument_list|,
argument|const QString& name
argument_list|,
argument|const QString& type
argument_list|,
argument|bool attached
argument_list|)
block|;
name|virtual
operator|~
name|QmlPropertyNode
argument_list|()
block|{ }
name|void
name|setDataType
argument_list|(
argument|const QString& dataType
argument_list|)
block|{
name|type_
operator|=
name|dataType
block|; }
name|void
name|setStored
argument_list|(
argument|bool stored
argument_list|)
block|{
name|stored_
operator|=
name|toFlagValue
argument_list|(
name|stored
argument_list|)
block|; }
name|void
name|setDesignable
argument_list|(
argument|bool designable
argument_list|)
block|{
name|designable_
operator|=
name|toFlagValue
argument_list|(
name|designable
argument_list|)
block|; }
name|void
name|setReadOnly
argument_list|(
argument|bool ro
argument_list|)
block|{
name|readOnly_
operator|=
name|toFlagValue
argument_list|(
name|ro
argument_list|)
block|; }
name|void
name|setDefault
argument_list|()
block|{
name|isdefault_
operator|=
name|true
block|; }
specifier|const
name|QString
operator|&
name|dataType
argument_list|()
specifier|const
block|{
return|return
name|type_
return|;
block|}
name|QString
name|qualifiedDataType
argument_list|()
specifier|const
block|{
return|return
name|type_
return|;
block|}
name|bool
name|isReadOnlySet
argument_list|()
specifier|const
block|{
return|return
operator|(
name|readOnly_
operator|!=
name|FlagValueDefault
operator|)
return|;
block|}
name|bool
name|isDefault
argument_list|()
specifier|const
block|{
return|return
name|isdefault_
return|;
block|}
name|bool
name|isStored
argument_list|()
specifier|const
block|{
return|return
name|fromFlagValue
argument_list|(
name|stored_
argument_list|,
name|true
argument_list|)
return|;
block|}
name|bool
name|isDesignable
argument_list|()
specifier|const
block|{
return|return
name|fromFlagValue
argument_list|(
name|designable_
argument_list|,
name|false
argument_list|)
return|;
block|}
name|bool
name|isWritable
argument_list|(
name|Tree
operator|*
name|tree
argument_list|)
block|;
name|bool
name|isAttached
argument_list|()
specifier|const
block|{
return|return
name|attached_
return|;
block|}
name|bool
name|isReadOnly
argument_list|()
specifier|const
block|{
return|return
name|fromFlagValue
argument_list|(
name|readOnly_
argument_list|,
name|false
argument_list|)
return|;
block|}
name|virtual
name|bool
name|isQmlNode
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|isQtQuickNode
argument_list|()
specifier|const
block|{
return|return
name|parent
argument_list|()
operator|->
name|isQtQuickNode
argument_list|()
return|;
block|}
name|virtual
name|QString
name|qmlModuleName
argument_list|()
specifier|const
block|{
return|return
name|parent
argument_list|()
operator|->
name|qmlModuleName
argument_list|()
return|;
block|}
name|virtual
name|QString
name|qmlModuleVersion
argument_list|()
specifier|const
block|{
return|return
name|parent
argument_list|()
operator|->
name|qmlModuleVersion
argument_list|()
return|;
block|}
name|virtual
name|QString
name|qmlModuleIdentifier
argument_list|()
specifier|const
block|{
return|return
name|parent
argument_list|()
operator|->
name|qmlModuleIdentifier
argument_list|()
return|;
block|}
name|PropertyNode
operator|*
name|correspondingProperty
argument_list|(
name|Tree
operator|*
name|tree
argument_list|)
block|;
specifier|const
name|QString
operator|&
name|element
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|QmlPropGroupNode
operator|*
operator|>
operator|(
name|parent
argument_list|()
operator|)
operator|->
name|element
argument_list|()
return|;
block|}
name|void
name|appendQmlPropNode
argument_list|(
argument|QmlPropertyNode* p
argument_list|)
block|{
name|qmlPropNodes_
operator|.
name|append
argument_list|(
name|p
argument_list|)
block|; }
specifier|const
name|NodeList
operator|&
name|qmlPropNodes
argument_list|()
specifier|const
block|{
return|return
name|qmlPropNodes_
return|;
block|}
name|private
operator|:
name|QString
name|type_
block|;
name|FlagValue
name|stored_
block|;
name|FlagValue
name|designable_
block|;
name|bool
name|isdefault_
block|;
name|bool
name|attached_
block|;
name|FlagValue
name|readOnly_
block|;
name|NodeList
name|qmlPropNodes_
block|; }
block|;
name|class
name|EnumItem
block|{
name|public
operator|:
name|EnumItem
argument_list|()
block|{ }
name|EnumItem
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|,
specifier|const
name|QString
operator|&
name|value
argument_list|)
operator|:
name|nam
argument_list|(
name|name
argument_list|)
block|,
name|val
argument_list|(
argument|value
argument_list|)
block|{ }
name|EnumItem
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|,
specifier|const
name|QString
operator|&
name|value
argument_list|,
specifier|const
name|Text
operator|&
name|txt
argument_list|)
operator|:
name|nam
argument_list|(
name|name
argument_list|)
block|,
name|val
argument_list|(
name|value
argument_list|)
block|,
name|txt
argument_list|(
argument|txt
argument_list|)
block|{ }
specifier|const
name|QString
operator|&
name|name
argument_list|()
specifier|const
block|{
return|return
name|nam
return|;
block|}
specifier|const
name|QString
operator|&
name|value
argument_list|()
specifier|const
block|{
return|return
name|val
return|;
block|}
specifier|const
name|Text
operator|&
name|text
argument_list|()
specifier|const
block|{
return|return
name|txt
return|;
block|}
name|private
operator|:
name|QString
name|nam
block|;
name|QString
name|val
block|;
name|Text
name|txt
block|; }
block|;
DECL|variable|TypedefNode
name|class
name|TypedefNode
block|;
name|class
name|EnumNode
operator|:
name|public
name|LeafNode
block|{
name|public
operator|:
name|EnumNode
argument_list|(
name|InnerNode
operator|*
name|parent
argument_list|,
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|virtual
operator|~
name|EnumNode
argument_list|()
block|{ }
name|void
name|addItem
argument_list|(
specifier|const
name|EnumItem
operator|&
name|item
argument_list|)
block|;
name|void
name|setFlagsType
argument_list|(
name|TypedefNode
operator|*
name|typedeff
argument_list|)
block|;
name|bool
name|hasItem
argument_list|(
argument|const QString&name
argument_list|)
specifier|const
block|{
return|return
name|names
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|const
name|QList
operator|<
name|EnumItem
operator|>
operator|&
name|items
argument_list|()
specifier|const
block|{
return|return
name|itms
return|;
block|}
name|Access
name|itemAccess
argument_list|(
argument|const QString& name
argument_list|)
specifier|const
block|;
specifier|const
name|TypedefNode
operator|*
name|flagsType
argument_list|()
specifier|const
block|{
return|return
name|ft
return|;
block|}
name|QString
name|itemValue
argument_list|(
argument|const QString&name
argument_list|)
specifier|const
block|;
name|private
operator|:
name|QList
operator|<
name|EnumItem
operator|>
name|itms
block|;
name|QSet
operator|<
name|QString
operator|>
name|names
block|;
specifier|const
name|TypedefNode
operator|*
name|ft
block|; }
block|;
name|class
name|TypedefNode
operator|:
name|public
name|LeafNode
block|{
name|public
operator|:
name|TypedefNode
argument_list|(
name|InnerNode
operator|*
name|parent
argument_list|,
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|virtual
operator|~
name|TypedefNode
argument_list|()
block|{ }
specifier|const
name|EnumNode
operator|*
name|associatedEnum
argument_list|()
specifier|const
block|{
return|return
name|ae
return|;
block|}
name|private
operator|:
name|void
name|setAssociatedEnum
argument_list|(
specifier|const
name|EnumNode
operator|*
name|enume
argument_list|)
block|;
name|friend
name|class
name|EnumNode
block|;
specifier|const
name|EnumNode
operator|*
name|ae
block|; }
block|;
DECL|function|setFlagsType
specifier|inline
name|void
name|EnumNode
operator|::
name|setFlagsType
argument_list|(
argument|TypedefNode* typedeff
argument_list|)
block|{
name|ft
operator|=
name|typedeff
block|;
name|typedeff
operator|->
name|setAssociatedEnum
argument_list|(
name|this
argument_list|)
block|; }
name|class
name|Parameter
block|{
name|public
operator|:
name|Parameter
argument_list|()
block|{}
name|Parameter
argument_list|(
specifier|const
name|QString
operator|&
name|leftType
argument_list|,
specifier|const
name|QString
operator|&
name|rightType
operator|=
literal|""
argument_list|,
specifier|const
name|QString
operator|&
name|name
operator|=
literal|""
argument_list|,
specifier|const
name|QString
operator|&
name|defaultValue
operator|=
literal|""
argument_list|)
block|;
name|Parameter
argument_list|(
specifier|const
name|Parameter
operator|&
name|p
argument_list|)
block|;
name|Parameter
operator|&
name|operator
operator|=
operator|(
specifier|const
name|Parameter
operator|&
name|p
operator|)
block|;
name|void
name|setName
argument_list|(
argument|const QString& name
argument_list|)
block|{
name|nam
operator|=
name|name
block|; }
name|bool
name|hasType
argument_list|()
specifier|const
block|{
return|return
name|lef
operator|.
name|length
argument_list|()
operator|+
name|rig
operator|.
name|length
argument_list|()
operator|>
literal|0
return|;
block|}
specifier|const
name|QString
operator|&
name|leftType
argument_list|()
specifier|const
block|{
return|return
name|lef
return|;
block|}
specifier|const
name|QString
operator|&
name|rightType
argument_list|()
specifier|const
block|{
return|return
name|rig
return|;
block|}
specifier|const
name|QString
operator|&
name|name
argument_list|()
specifier|const
block|{
return|return
name|nam
return|;
block|}
specifier|const
name|QString
operator|&
name|defaultValue
argument_list|()
specifier|const
block|{
return|return
name|def
return|;
block|}
name|QString
name|reconstruct
argument_list|(
argument|bool value = false
argument_list|)
specifier|const
block|;
name|private
operator|:
name|QString
name|lef
block|;
name|QString
name|rig
block|;
name|QString
name|nam
block|;
name|QString
name|def
block|; }
block|;
DECL|variable|PropertyNode
name|class
name|PropertyNode
block|;
name|class
name|FunctionNode
operator|:
name|public
name|LeafNode
block|{
name|public
operator|:
expr|enum
name|Metaness
block|{
name|Plain
block|,
name|Signal
block|,
name|Slot
block|,
name|Ctor
block|,
name|Dtor
block|,
name|MacroWithParams
block|,
name|MacroWithoutParams
block|,
name|Native
block|}
block|;     enum
name|Virtualness
block|{
name|NonVirtual
block|,
name|ImpureVirtual
block|,
name|PureVirtual
block|}
block|;
name|FunctionNode
argument_list|(
name|InnerNode
operator|*
name|parent
argument_list|,
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|FunctionNode
argument_list|(
argument|Type type
argument_list|,
argument|InnerNode* parent
argument_list|,
argument|const QString&name
argument_list|,
argument|bool attached
argument_list|)
block|;
name|virtual
operator|~
name|FunctionNode
argument_list|()
block|{ }
name|void
name|setReturnType
argument_list|(
argument|const QString& returnType
argument_list|)
block|{
name|rt
operator|=
name|returnType
block|; }
name|void
name|setParentPath
argument_list|(
argument|const QStringList& parentPath
argument_list|)
block|{
name|pp
operator|=
name|parentPath
block|; }
name|void
name|setMetaness
argument_list|(
argument|Metaness metaness
argument_list|)
block|{
name|met
operator|=
name|metaness
block|; }
name|void
name|setVirtualness
argument_list|(
argument|Virtualness virtualness
argument_list|)
block|;
name|void
name|setConst
argument_list|(
argument|bool conste
argument_list|)
block|{
name|con
operator|=
name|conste
block|; }
name|void
name|setStatic
argument_list|(
argument|bool statique
argument_list|)
block|{
name|sta
operator|=
name|statique
block|; }
name|void
name|setOverload
argument_list|(
argument|bool overlode
argument_list|)
block|;
name|void
name|setReimp
argument_list|(
argument|bool r
argument_list|)
block|;
name|void
name|addParameter
argument_list|(
specifier|const
name|Parameter
operator|&
name|parameter
argument_list|)
block|;
specifier|inline
name|void
name|setParameters
argument_list|(
specifier|const
name|QList
operator|<
name|Parameter
operator|>
operator|&
name|parameters
argument_list|)
block|;
name|void
name|borrowParameterNames
argument_list|(
specifier|const
name|FunctionNode
operator|*
name|source
argument_list|)
block|;
name|void
name|setReimplementedFrom
argument_list|(
name|FunctionNode
operator|*
name|from
argument_list|)
block|;
specifier|const
name|QString
operator|&
name|returnType
argument_list|()
specifier|const
block|{
return|return
name|rt
return|;
block|}
name|Metaness
name|metaness
argument_list|()
specifier|const
block|{
return|return
name|met
return|;
block|}
name|bool
name|isMacro
argument_list|()
specifier|const
block|{
return|return
name|met
operator|==
name|MacroWithParams
operator|||
name|met
operator|==
name|MacroWithoutParams
return|;
block|}
name|Virtualness
name|virtualness
argument_list|()
specifier|const
block|{
return|return
name|vir
return|;
block|}
name|bool
name|isConst
argument_list|()
specifier|const
block|{
return|return
name|con
return|;
block|}
name|bool
name|isStatic
argument_list|()
specifier|const
block|{
return|return
name|sta
return|;
block|}
name|bool
name|isOverload
argument_list|()
specifier|const
block|{
return|return
name|ove
return|;
block|}
name|bool
name|isReimp
argument_list|()
specifier|const
block|{
return|return
name|reimp
return|;
block|}
name|bool
name|isFunction
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|int
name|overloadNumber
argument_list|()
specifier|const
block|;
name|int
name|numOverloads
argument_list|()
specifier|const
block|;
specifier|const
name|QList
operator|<
name|Parameter
operator|>
operator|&
name|parameters
argument_list|()
specifier|const
block|{
return|return
name|params
return|;
block|}
name|QStringList
name|parameterNames
argument_list|()
specifier|const
block|;
name|QString
name|rawParameters
argument_list|(
argument|bool names = false
argument_list|,
argument|bool values = false
argument_list|)
specifier|const
block|;
specifier|const
name|FunctionNode
operator|*
name|reimplementedFrom
argument_list|()
specifier|const
block|{
return|return
name|rf
return|;
block|}
specifier|const
name|QList
operator|<
name|FunctionNode
operator|*
operator|>
operator|&
name|reimplementedBy
argument_list|()
specifier|const
block|{
return|return
name|rb
return|;
block|}
specifier|const
name|PropertyNode
operator|*
name|associatedProperty
argument_list|()
specifier|const
block|{
return|return
name|ap
return|;
block|}
specifier|const
name|QStringList
operator|&
name|parentPath
argument_list|()
specifier|const
block|{
return|return
name|pp
return|;
block|}
name|QStringList
name|reconstructParams
argument_list|(
argument|bool values = false
argument_list|)
specifier|const
block|;
name|QString
name|signature
argument_list|(
argument|bool values = false
argument_list|)
specifier|const
block|;
specifier|const
name|QString
operator|&
name|element
argument_list|()
specifier|const
block|{
return|return
name|parent
argument_list|()
operator|->
name|name
argument_list|()
return|;
block|}
name|bool
name|isAttached
argument_list|()
specifier|const
block|{
return|return
name|attached_
return|;
block|}
name|virtual
name|bool
name|isQmlNode
argument_list|()
specifier|const
block|{
return|return
operator|(
operator|(
name|type
argument_list|()
operator|==
name|QmlSignal
operator|)
operator|||
operator|(
name|type
argument_list|()
operator|==
name|QmlMethod
operator|)
operator|||
operator|(
name|type
argument_list|()
operator|==
name|QmlSignalHandler
operator|)
operator|)
return|;
block|}
name|virtual
name|bool
name|isQtQuickNode
argument_list|()
specifier|const
block|{
return|return
name|parent
argument_list|()
operator|->
name|isQtQuickNode
argument_list|()
return|;
block|}
name|virtual
name|QString
name|qmlModuleName
argument_list|()
specifier|const
block|{
return|return
name|parent
argument_list|()
operator|->
name|qmlModuleName
argument_list|()
return|;
block|}
name|virtual
name|QString
name|qmlModuleVersion
argument_list|()
specifier|const
block|{
return|return
name|parent
argument_list|()
operator|->
name|qmlModuleVersion
argument_list|()
return|;
block|}
name|virtual
name|QString
name|qmlModuleIdentifier
argument_list|()
specifier|const
block|{
return|return
name|parent
argument_list|()
operator|->
name|qmlModuleIdentifier
argument_list|()
return|;
block|}
name|void
name|debug
argument_list|()
specifier|const
block|;
name|private
operator|:
name|void
name|setAssociatedProperty
argument_list|(
name|PropertyNode
operator|*
name|property
argument_list|)
block|;
name|friend
name|class
name|InnerNode
block|;
name|friend
name|class
name|PropertyNode
block|;
name|QString
name|rt
block|;
name|QStringList
name|pp
block|;
ifdef|#
directive|ifdef
name|Q_WS_WIN
name|Metaness
name|met
block|;
name|Virtualness
name|vir
block|;
else|#
directive|else
name|Metaness
name|met
operator|:
literal|4
block|;
name|Virtualness
name|vir
operator|:
literal|2
block|;
endif|#
directive|endif
name|bool
name|con
operator|:
literal|1
block|;
name|bool
name|sta
operator|:
literal|1
block|;
name|bool
name|ove
operator|:
literal|1
block|;
name|bool
name|reimp
operator|:
literal|1
block|;
name|bool
name|attached_
operator|:
literal|1
block|;
name|QList
operator|<
name|Parameter
operator|>
name|params
block|;
specifier|const
name|FunctionNode
operator|*
name|rf
block|;
specifier|const
name|PropertyNode
operator|*
name|ap
block|;
name|QList
operator|<
name|FunctionNode
operator|*
operator|>
name|rb
block|; }
block|;
name|class
name|PropertyNode
operator|:
name|public
name|LeafNode
block|{
name|public
operator|:
expr|enum
name|FunctionRole
block|{
name|Getter
block|,
name|Setter
block|,
name|Resetter
block|,
name|Notifier
block|}
block|;     enum
block|{
name|NumFunctionRoles
operator|=
name|Notifier
operator|+
literal|1
block|}
block|;
name|PropertyNode
argument_list|(
name|InnerNode
operator|*
name|parent
argument_list|,
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|virtual
operator|~
name|PropertyNode
argument_list|()
block|{ }
name|void
name|setDataType
argument_list|(
argument|const QString& dataType
argument_list|)
block|{
name|type_
operator|=
name|dataType
block|; }
name|void
name|addFunction
argument_list|(
argument|FunctionNode* function
argument_list|,
argument|FunctionRole role
argument_list|)
block|;
name|void
name|addSignal
argument_list|(
argument|FunctionNode* function
argument_list|,
argument|FunctionRole role
argument_list|)
block|;
name|void
name|setStored
argument_list|(
argument|bool stored
argument_list|)
block|{
name|stored_
operator|=
name|toFlagValue
argument_list|(
name|stored
argument_list|)
block|; }
name|void
name|setDesignable
argument_list|(
argument|bool designable
argument_list|)
block|{
name|designable_
operator|=
name|toFlagValue
argument_list|(
name|designable
argument_list|)
block|; }
name|void
name|setScriptable
argument_list|(
argument|bool scriptable
argument_list|)
block|{
name|scriptable_
operator|=
name|toFlagValue
argument_list|(
name|scriptable
argument_list|)
block|; }
name|void
name|setWritable
argument_list|(
argument|bool writable
argument_list|)
block|{
name|writable_
operator|=
name|toFlagValue
argument_list|(
name|writable
argument_list|)
block|; }
name|void
name|setUser
argument_list|(
argument|bool user
argument_list|)
block|{
name|user_
operator|=
name|toFlagValue
argument_list|(
name|user
argument_list|)
block|; }
name|void
name|setOverriddenFrom
argument_list|(
specifier|const
name|PropertyNode
operator|*
name|baseProperty
argument_list|)
block|;
name|void
name|setRuntimeDesFunc
argument_list|(
argument|const QString& rdf
argument_list|)
block|{
name|runtimeDesFunc
operator|=
name|rdf
block|; }
name|void
name|setRuntimeScrFunc
argument_list|(
argument|const QString& scrf
argument_list|)
block|{
name|runtimeScrFunc
operator|=
name|scrf
block|; }
name|void
name|setConstant
argument_list|()
block|{
name|cst
operator|=
name|true
block|; }
name|void
name|setFinal
argument_list|()
block|{
name|fnl
operator|=
name|true
block|; }
name|void
name|setRevision
argument_list|(
argument|int revision
argument_list|)
block|{
name|rev
operator|=
name|revision
block|; }
specifier|const
name|QString
operator|&
name|dataType
argument_list|()
specifier|const
block|{
return|return
name|type_
return|;
block|}
name|QString
name|qualifiedDataType
argument_list|()
specifier|const
block|;
name|NodeList
name|functions
argument_list|()
specifier|const
block|;
name|NodeList
name|functions
argument_list|(
argument|FunctionRole role
argument_list|)
specifier|const
block|{
return|return
name|funcs
index|[
operator|(
name|int
operator|)
name|role
index|]
return|;
block|}
name|NodeList
name|getters
argument_list|()
specifier|const
block|{
return|return
name|functions
argument_list|(
name|Getter
argument_list|)
return|;
block|}
name|NodeList
name|setters
argument_list|()
specifier|const
block|{
return|return
name|functions
argument_list|(
name|Setter
argument_list|)
return|;
block|}
name|NodeList
name|resetters
argument_list|()
specifier|const
block|{
return|return
name|functions
argument_list|(
name|Resetter
argument_list|)
return|;
block|}
name|NodeList
name|notifiers
argument_list|()
specifier|const
block|{
return|return
name|functions
argument_list|(
name|Notifier
argument_list|)
return|;
block|}
name|bool
name|isStored
argument_list|()
specifier|const
block|{
return|return
name|fromFlagValue
argument_list|(
name|stored_
argument_list|,
name|storedDefault
argument_list|()
argument_list|)
return|;
block|}
name|bool
name|isDesignable
argument_list|()
specifier|const
block|{
return|return
name|fromFlagValue
argument_list|(
name|designable_
argument_list|,
name|designableDefault
argument_list|()
argument_list|)
return|;
block|}
name|bool
name|isScriptable
argument_list|()
specifier|const
block|{
return|return
name|fromFlagValue
argument_list|(
name|scriptable_
argument_list|,
name|scriptableDefault
argument_list|()
argument_list|)
return|;
block|}
specifier|const
name|QString
operator|&
name|runtimeDesignabilityFunction
argument_list|()
specifier|const
block|{
return|return
name|runtimeDesFunc
return|;
block|}
specifier|const
name|QString
operator|&
name|runtimeScriptabilityFunction
argument_list|()
specifier|const
block|{
return|return
name|runtimeScrFunc
return|;
block|}
name|bool
name|isWritable
argument_list|()
specifier|const
block|{
return|return
name|fromFlagValue
argument_list|(
name|writable_
argument_list|,
name|writableDefault
argument_list|()
argument_list|)
return|;
block|}
name|bool
name|isUser
argument_list|()
specifier|const
block|{
return|return
name|fromFlagValue
argument_list|(
name|user_
argument_list|,
name|userDefault
argument_list|()
argument_list|)
return|;
block|}
name|bool
name|isConstant
argument_list|()
specifier|const
block|{
return|return
name|cst
return|;
block|}
name|bool
name|isFinal
argument_list|()
specifier|const
block|{
return|return
name|fnl
return|;
block|}
specifier|const
name|PropertyNode
operator|*
name|overriddenFrom
argument_list|()
specifier|const
block|{
return|return
name|overrides
return|;
block|}
name|bool
name|storedDefault
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|bool
name|userDefault
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|bool
name|designableDefault
argument_list|()
specifier|const
block|{
return|return
operator|!
name|setters
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
name|bool
name|scriptableDefault
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|bool
name|writableDefault
argument_list|()
specifier|const
block|{
return|return
operator|!
name|setters
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
name|private
operator|:
name|QString
name|type_
block|;
name|QString
name|runtimeDesFunc
block|;
name|QString
name|runtimeScrFunc
block|;
name|NodeList
name|funcs
index|[
name|NumFunctionRoles
index|]
block|;
name|FlagValue
name|stored_
block|;
name|FlagValue
name|designable_
block|;
name|FlagValue
name|scriptable_
block|;
name|FlagValue
name|writable_
block|;
name|FlagValue
name|user_
block|;
name|bool
name|cst
block|;
name|bool
name|fnl
block|;
name|int
name|rev
block|;
specifier|const
name|PropertyNode
operator|*
name|overrides
block|; }
block|;
specifier|inline
name|void
name|FunctionNode
operator|::
name|setParameters
argument_list|(
argument|const QList<Parameter>&parameters
argument_list|)
block|{
name|params
operator|=
name|parameters
block|; }
DECL|function|addFunction
specifier|inline
name|void
name|PropertyNode
operator|::
name|addFunction
argument_list|(
argument|FunctionNode* function
argument_list|,
argument|FunctionRole role
argument_list|)
block|{
name|funcs
index|[
operator|(
name|int
operator|)
name|role
index|]
operator|.
name|append
argument_list|(
name|function
argument_list|)
block|;
name|function
operator|->
name|setAssociatedProperty
argument_list|(
name|this
argument_list|)
block|; }
DECL|function|addSignal
specifier|inline
name|void
name|PropertyNode
operator|::
name|addSignal
argument_list|(
argument|FunctionNode* function
argument_list|,
argument|FunctionRole role
argument_list|)
block|{
name|funcs
index|[
operator|(
name|int
operator|)
name|role
index|]
operator|.
name|append
argument_list|(
name|function
argument_list|)
block|;
name|function
operator|->
name|setAssociatedProperty
argument_list|(
name|this
argument_list|)
block|; }
DECL|function|functions
specifier|inline
name|NodeList
name|PropertyNode
operator|::
name|functions
argument_list|()
specifier|const
block|{
name|NodeList
name|list
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumFunctionRoles
condition|;
operator|++
name|i
control|)
name|list
operator|+=
name|funcs
index|[
name|i
index|]
expr_stmt|;
return|return
name|list
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|class
name|VariableNode
range|:
name|public
name|LeafNode
block|{
name|public
operator|:
name|VariableNode
argument_list|(
name|InnerNode
operator|*
name|parent
argument_list|,
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|virtual
operator|~
name|VariableNode
argument_list|()
block|{ }
name|void
name|setLeftType
argument_list|(
argument|const QString&leftType
argument_list|)
block|{
name|lt
operator|=
name|leftType
block|; }
name|void
name|setRightType
argument_list|(
argument|const QString&rightType
argument_list|)
block|{
name|rt
operator|=
name|rightType
block|; }
name|void
name|setStatic
argument_list|(
argument|bool statique
argument_list|)
block|{
name|sta
operator|=
name|statique
block|; }
specifier|const
name|QString
operator|&
name|leftType
argument_list|()
specifier|const
block|{
return|return
name|lt
return|;
block|}
specifier|const
name|QString
operator|&
name|rightType
argument_list|()
specifier|const
block|{
return|return
name|rt
return|;
block|}
name|QString
name|dataType
argument_list|()
specifier|const
block|{
return|return
name|lt
operator|+
name|rt
return|;
block|}
name|bool
name|isStatic
argument_list|()
specifier|const
block|{
return|return
name|sta
return|;
block|}
name|private
operator|:
name|QString
name|lt
block|;
name|QString
name|rt
block|;
name|bool
name|sta
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|function|VariableNode
specifier|inline
name|VariableNode
operator|::
name|VariableNode
argument_list|(
name|InnerNode
operator|*
name|parent
argument_list|,
specifier|const
name|QString
operator|&
name|name
argument_list|)
operator|:
name|LeafNode
argument_list|(
name|Variable
argument_list|,
name|parent
argument_list|,
name|name
argument_list|)
operator|,
name|sta
argument_list|(
argument|false
argument_list|)
block|{
comment|// nothing.
block|}
name|class
name|DitaMapNode
operator|:
name|public
name|FakeNode
block|{
name|public
operator|:
name|DitaMapNode
argument_list|(
name|InnerNode
operator|*
name|parent
argument_list|,
specifier|const
name|QString
operator|&
name|name
argument_list|)
operator|:
name|FakeNode
argument_list|(
argument|parent
argument_list|,
argument|name
argument_list|,
argument|Node::Page
argument_list|,
argument|Node::DitaMapPage
argument_list|)
block|{ }
name|virtual
operator|~
name|DitaMapNode
argument_list|()
block|{ }
specifier|const
name|DitaRefList
operator|&
name|map
argument_list|()
specifier|const
block|{
return|return
name|doc
argument_list|()
operator|.
name|ditamap
argument_list|()
return|;
block|}
end_expr_stmt
begin_macro
unit|};
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
