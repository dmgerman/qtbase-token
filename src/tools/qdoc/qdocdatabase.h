begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QDOCDATABASE_H
end_ifndef
begin_define
DECL|macro|QDOCDATABASE_H
define|#
directive|define
name|QDOCDATABASE_H
end_define
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|<qmap.h>
end_include
begin_include
include|#
directive|include
file|"tree.h"
end_include
begin_include
include|#
directive|include
file|"config.h"
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_typedef
DECL|typedef|QString
DECL|typedef|DocNodeMap
typedef|typedef
name|QMap
operator|<
name|QString
operator|,
name|DocNode
operator|*
operator|>
name|DocNodeMap
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QString
DECL|typedef|QmlTypeMap
typedef|typedef
name|QMap
operator|<
name|QString
operator|,
name|QmlClassNode
operator|*
operator|>
name|QmlTypeMap
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QString
DECL|typedef|NodeMapMap
typedef|typedef
name|QMap
operator|<
name|QString
operator|,
name|NodeMap
operator|>
name|NodeMapMap
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QString
DECL|typedef|NodeMultiMapMap
typedef|typedef
name|QMap
operator|<
name|QString
operator|,
name|NodeMultiMap
operator|>
name|NodeMultiMapMap
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QString
DECL|typedef|QDocMultiMap
typedef|typedef
name|QMultiMap
operator|<
name|QString
operator|,
name|Node
operator|*
operator|>
name|QDocMultiMap
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|Text
DECL|typedef|TextToNodeMap
typedef|typedef
name|QMap
operator|<
name|Text
operator|,
specifier|const
name|Node
operator|*
operator|>
name|TextToNodeMap
expr_stmt|;
end_typedef
begin_decl_stmt
DECL|variable|Atom
name|class
name|Atom
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|Generator
name|class
name|Generator
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDocDatabase
name|class
name|QDocDatabase
decl_stmt|;
end_decl_stmt
begin_enum
DECL|enum|FindFlag
enum|enum
name|FindFlag
block|{
DECL|enumerator|SearchBaseClasses
name|SearchBaseClasses
init|=
literal|0x1
block|,
DECL|enumerator|SearchEnumValues
name|SearchEnumValues
init|=
literal|0x2
block|,
DECL|enumerator|NonFunction
name|NonFunction
init|=
literal|0x4
block|}
enum|;
end_enum
begin_decl_stmt
name|class
name|QDocForest
block|{
name|public
label|:
name|friend
name|class
name|QDocDatabase
decl_stmt|;
name|QDocForest
argument_list|(
name|QDocDatabase
operator|*
name|qdb
argument_list|)
operator|:
name|qdb_
argument_list|(
name|qdb
argument_list|)
operator|,
name|primaryTree_
argument_list|(
literal|0
argument_list|)
operator|,
name|currentIndex_
argument_list|(
literal|0
argument_list|)
block|{ }
operator|~
name|QDocForest
argument_list|()
expr_stmt|;
name|NamespaceNode
modifier|*
name|firstRoot
parameter_list|()
function_decl|;
name|NamespaceNode
modifier|*
name|nextRoot
parameter_list|()
function_decl|;
name|Tree
modifier|*
name|firstTree
parameter_list|()
function_decl|;
name|Tree
modifier|*
name|nextTree
parameter_list|()
function_decl|;
name|Tree
modifier|*
name|primaryTree
parameter_list|()
block|{
return|return
name|primaryTree_
return|;
block|}
name|NamespaceNode
modifier|*
name|primaryTreeRoot
parameter_list|()
block|{
return|return
operator|(
name|primaryTree_
condition|?
name|primaryTree_
operator|->
name|root
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
name|bool
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
name|searchOrder_
operator|.
name|isEmpty
argument_list|()
return|;
block|}
name|bool
name|done
argument_list|()
specifier|const
block|{
return|return
operator|(
name|currentIndex_
operator|>=
name|searchOrder_
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
specifier|const
name|QVector
operator|<
name|Tree
operator|*
operator|>
operator|&
name|searchOrder
argument_list|()
expr_stmt|;
name|void
name|setSearchOrder
parameter_list|()
function_decl|;
specifier|const
name|Node
modifier|*
name|findNode
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|path
parameter_list|,
specifier|const
name|Node
modifier|*
name|relative
parameter_list|,
name|int
name|findFlags
parameter_list|)
block|{
name|foreach
argument_list|(
argument|Tree* t
argument_list|,
argument|searchOrder_
argument_list|)
block|{
specifier|const
name|Node
modifier|*
name|n
init|=
name|t
operator|->
name|findNode
argument_list|(
name|path
argument_list|,
name|relative
argument_list|,
name|findFlags
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
condition|)
block|{
return|return
name|n
return|;
block|}
name|relative
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|Config
operator|::
name|debug_
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"FAILED SEARCH 1"
operator|<<
name|path
expr_stmt|;
return|return
literal|0
return|;
block|}
name|Node
modifier|*
name|findNodeByNameAndType
argument_list|(
specifier|const
name|QStringList
operator|&
name|path
argument_list|,
name|Node
operator|::
name|Type
name|type
argument_list|,
name|Node
operator|::
name|SubType
name|subtype
argument_list|,
name|bool
name|acceptCollision
operator|=
name|false
argument_list|)
block|{
name|foreach
argument_list|(
argument|Tree* t
argument_list|,
argument|searchOrder_
argument_list|)
block|{
name|Node
modifier|*
name|n
init|=
name|t
operator|->
name|findNodeByNameAndType
argument_list|(
name|path
argument_list|,
name|type
argument_list|,
name|subtype
argument_list|,
name|acceptCollision
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
condition|)
block|{
return|return
name|n
return|;
block|}
block|}
if|if
condition|(
name|Config
operator|::
name|debug_
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"FAILED SEARCH 2"
operator|<<
name|path
operator|<<
name|type
operator|<<
name|subtype
expr_stmt|;
return|return
literal|0
return|;
block|}
name|ClassNode
modifier|*
name|findClassNode
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|path
parameter_list|)
block|{
name|foreach
argument_list|(
argument|Tree* t
argument_list|,
argument|searchOrder_
argument_list|)
block|{
name|ClassNode
modifier|*
name|n
init|=
name|t
operator|->
name|findClassNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
condition|)
block|{
return|return
name|n
return|;
block|}
block|}
if|if
condition|(
name|Config
operator|::
name|debug_
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"FAILED SEARCH 3"
operator|<<
name|path
expr_stmt|;
return|return
literal|0
return|;
block|}
name|InnerNode
modifier|*
name|findRelatesNode
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|path
parameter_list|)
block|{
name|foreach
argument_list|(
argument|Tree* t
argument_list|,
argument|searchOrder_
argument_list|)
block|{
name|InnerNode
modifier|*
name|n
init|=
name|t
operator|->
name|findRelatesNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
condition|)
block|{
return|return
name|n
return|;
block|}
block|}
if|if
condition|(
name|Config
operator|::
name|debug_
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"FAILED SEARCH 4"
operator|<<
name|path
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|const
name|Node
modifier|*
name|resolveTarget
parameter_list|(
specifier|const
name|QString
modifier|&
name|target
parameter_list|,
specifier|const
name|Node
modifier|*
name|relative
parameter_list|)
block|{
specifier|const
name|Node
modifier|*
name|r
init|=
name|relative
decl_stmt|;
name|foreach
argument_list|(
argument|Tree* t
argument_list|,
argument|searchOrder_
argument_list|)
block|{
specifier|const
name|Node
modifier|*
name|n
init|=
name|resolveTargetHelper
argument_list|(
name|target
argument_list|,
name|relative
argument_list|,
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
condition|)
block|{
return|return
name|n
return|;
block|}
name|relative
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|Config
operator|::
name|debug_
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"FAILED SEARCH 6"
operator|<<
name|target
operator|<<
name|r
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|const
name|Node
modifier|*
name|resolveType
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|path
parameter_list|,
specifier|const
name|Node
modifier|*
name|relative
parameter_list|)
block|{
name|foreach
argument_list|(
argument|Tree* t
argument_list|,
argument|searchOrder_
argument_list|)
block|{
specifier|const
name|Node
modifier|*
name|n
init|=
name|resolveTypeHelper
argument_list|(
name|path
argument_list|,
name|relative
argument_list|,
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
condition|)
block|{
return|return
name|n
return|;
block|}
name|relative
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|Config
operator|::
name|debug_
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"FAILED SEARCH 5"
operator|<<
name|path
expr_stmt|;
return|return
literal|0
return|;
block|}
name|QString
name|findTarget
argument_list|(
specifier|const
name|QString
operator|&
name|target
argument_list|,
specifier|const
name|Node
operator|*
name|node
argument_list|)
decl|const
block|{
name|foreach
argument_list|(
argument|Tree* t
argument_list|,
argument|searchOrder_
argument_list|)
block|{
name|QString
name|ref
init|=
name|t
operator|->
name|findTarget
argument_list|(
name|target
argument_list|,
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ref
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ref
return|;
block|}
block|}
if|if
condition|(
name|Config
operator|::
name|debug_
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"FAILED SEARCH 7"
operator|<<
name|target
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
specifier|const
name|Node
modifier|*
name|findUnambiguousTarget
parameter_list|(
specifier|const
name|QString
modifier|&
name|target
parameter_list|,
name|QString
modifier|&
name|ref
parameter_list|,
specifier|const
name|Node
modifier|*
name|relative
parameter_list|)
block|{
name|foreach
argument_list|(
argument|Tree* t
argument_list|,
argument|searchOrder_
argument_list|)
block|{
specifier|const
name|Node
modifier|*
name|n
init|=
name|t
operator|->
name|findUnambiguousTarget
argument_list|(
name|target
argument_list|,
name|ref
argument_list|,
name|relative
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
condition|)
block|{
return|return
name|n
return|;
block|}
block|}
if|if
condition|(
name|Config
operator|::
name|debug_
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"FAILED SEARCH 8"
operator|<<
name|target
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|const
name|DocNode
modifier|*
name|findDocNodeByTitle
argument_list|(
specifier|const
name|QString
operator|&
name|title
argument_list|,
specifier|const
name|Node
operator|*
name|relative
argument_list|)
decl|const
block|{
name|foreach
argument_list|(
argument|Tree* t
argument_list|,
argument|searchOrder_
argument_list|)
block|{
specifier|const
name|DocNode
modifier|*
name|n
init|=
name|t
operator|->
name|findDocNodeByTitle
argument_list|(
name|title
argument_list|,
name|relative
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
condition|)
block|{
return|return
name|n
return|;
block|}
block|}
if|if
condition|(
name|Config
operator|::
name|debug_
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"FAILED SEARCH 9"
operator|<<
name|title
expr_stmt|;
return|return
literal|0
return|;
block|}
name|private
label|:
name|void
name|newPrimaryTree
parameter_list|(
specifier|const
name|QString
modifier|&
name|module
parameter_list|)
function_decl|;
name|NamespaceNode
modifier|*
name|newIndexTree
parameter_list|(
specifier|const
name|QString
modifier|&
name|module
parameter_list|)
function_decl|;
specifier|const
name|Node
modifier|*
name|resolveTargetHelper
parameter_list|(
specifier|const
name|QString
modifier|&
name|target
parameter_list|,
specifier|const
name|Node
modifier|*
name|relative
parameter_list|,
name|Tree
modifier|*
name|t
parameter_list|)
function_decl|;
specifier|const
name|Node
modifier|*
name|resolveTypeHelper
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|path
parameter_list|,
specifier|const
name|Node
modifier|*
name|relative
parameter_list|,
name|Tree
modifier|*
name|t
parameter_list|)
function_decl|;
name|private
label|:
name|QDocDatabase
modifier|*
name|qdb_
decl_stmt|;
name|Tree
modifier|*
name|primaryTree_
decl_stmt|;
name|int
name|currentIndex_
decl_stmt|;
name|QMap
operator|<
name|QString
operator|,
name|Tree
operator|*
operator|>
name|forest_
expr_stmt|;
name|QVector
operator|<
name|Tree
operator|*
operator|>
name|searchOrder_
expr_stmt|;
name|QVector
operator|<
name|QString
operator|>
name|moduleNames_
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|QDocDatabase
block|{
name|Q_DECLARE_TR_FUNCTIONS
argument_list|(
argument|QDoc::QDocDatabase
argument_list|)
name|public
label|:
specifier|static
name|QDocDatabase
modifier|*
name|qdocDB
parameter_list|()
function_decl|;
specifier|static
name|void
name|destroyQdocDB
parameter_list|()
function_decl|;
operator|~
name|QDocDatabase
argument_list|()
expr_stmt|;
specifier|const
name|DocNodeMap
operator|&
name|groups
argument_list|()
specifier|const
block|{
return|return
name|groups_
return|;
block|}
comment|//const DocNodeMap& modules() const { return modules_; } // not used
comment|//const DocNodeMap& qmlModules() const { return qmlModules_; } // not used
name|DocNode
modifier|*
name|getGroup
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
function_decl|;
name|DocNode
modifier|*
name|findGroup
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
function_decl|;
name|DocNode
modifier|*
name|findModule
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
function_decl|;
name|QmlModuleNode
modifier|*
name|findQmlModule
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
function_decl|;
name|DocNode
modifier|*
name|addGroup
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
function_decl|;
name|DocNode
modifier|*
name|addModule
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
function_decl|;
name|QmlModuleNode
modifier|*
name|addQmlModule
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
function_decl|;
name|DocNode
modifier|*
name|addToGroup
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|Node
modifier|*
name|node
parameter_list|)
function_decl|;
name|DocNode
modifier|*
name|addToModule
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|Node
modifier|*
name|node
parameter_list|)
function_decl|;
name|void
name|addToQmlModule
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|Node
modifier|*
name|node
parameter_list|)
function_decl|;
name|QmlClassNode
modifier|*
name|findQmlType
parameter_list|(
specifier|const
name|QString
modifier|&
name|qmid
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
function_decl|;
name|QmlClassNode
modifier|*
name|findQmlType
argument_list|(
specifier|const
name|ImportRec
operator|&
name|import
argument_list|,
specifier|const
name|QString
operator|&
name|name
argument_list|)
decl|const
decl_stmt|;
name|void
name|findAllClasses
parameter_list|(
name|InnerNode
modifier|*
name|node
parameter_list|)
function_decl|;
name|void
name|findAllFunctions
parameter_list|(
name|InnerNode
modifier|*
name|node
parameter_list|)
function_decl|;
name|void
name|findAllLegaleseTexts
parameter_list|(
name|InnerNode
modifier|*
name|node
parameter_list|)
function_decl|;
name|void
name|findAllNamespaces
parameter_list|(
name|InnerNode
modifier|*
name|node
parameter_list|)
function_decl|;
name|void
name|findAllObsoleteThings
parameter_list|(
name|InnerNode
modifier|*
name|node
parameter_list|)
function_decl|;
name|void
name|findAllSince
parameter_list|(
name|InnerNode
modifier|*
name|node
parameter_list|)
function_decl|;
name|void
name|buildCollections
parameter_list|()
function_decl|;
comment|// special collection access functions
name|NodeMap
modifier|&
name|getCppClasses
parameter_list|()
block|{
return|return
name|nonCompatClasses_
return|;
block|}
name|NodeMap
modifier|&
name|getMainClasses
parameter_list|()
block|{
return|return
name|mainClasses_
return|;
block|}
name|NodeMap
modifier|&
name|getCompatibilityClasses
parameter_list|()
block|{
return|return
name|compatClasses_
return|;
block|}
name|NodeMap
modifier|&
name|getObsoleteClasses
parameter_list|()
block|{
return|return
name|obsoleteClasses_
return|;
block|}
name|NodeMap
modifier|&
name|getClassesWithObsoleteMembers
parameter_list|()
block|{
return|return
name|classesWithObsoleteMembers_
return|;
block|}
name|NodeMap
modifier|&
name|getObsoleteQmlTypes
parameter_list|()
block|{
return|return
name|obsoleteQmlTypes_
return|;
block|}
name|NodeMap
modifier|&
name|getQmlTypesWithObsoleteMembers
parameter_list|()
block|{
return|return
name|qmlTypesWithObsoleteMembers_
return|;
block|}
name|NodeMap
modifier|&
name|getNamespaces
parameter_list|()
block|{
return|return
name|namespaceIndex_
return|;
block|}
name|NodeMap
modifier|&
name|getServiceClasses
parameter_list|()
block|{
return|return
name|serviceClasses_
return|;
block|}
name|NodeMap
modifier|&
name|getQmlTypes
parameter_list|()
block|{
return|return
name|qmlClasses_
return|;
block|}
name|NodeMapMap
modifier|&
name|getFunctionIndex
parameter_list|()
block|{
return|return
name|funcIndex_
return|;
block|}
name|TextToNodeMap
modifier|&
name|getLegaleseTexts
parameter_list|()
block|{
return|return
name|legaleseTexts_
return|;
block|}
specifier|const
name|NodeMap
modifier|&
name|getClassMap
argument_list|(
specifier|const
name|QString
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|NodeMap
modifier|&
name|getQmlTypeMap
argument_list|(
specifier|const
name|QString
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|NodeMultiMap
modifier|&
name|getSinceMap
argument_list|(
specifier|const
name|QString
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
comment|/* convenience functions        Many of these will be either eliminated or replaced.     */
name|void
name|resolveInheritance
parameter_list|()
block|{
name|primaryTree
argument_list|()
operator|->
name|resolveInheritance
argument_list|()
expr_stmt|;
block|}
name|void
name|resolveQmlInheritance
parameter_list|(
name|InnerNode
modifier|*
name|root
parameter_list|)
function_decl|;
name|void
name|resolveIssues
parameter_list|()
function_decl|;
name|void
name|fixInheritance
parameter_list|()
block|{
name|primaryTree
argument_list|()
operator|->
name|fixInheritance
argument_list|()
expr_stmt|;
block|}
name|void
name|resolveProperties
parameter_list|()
block|{
name|primaryTree
argument_list|()
operator|->
name|resolveProperties
argument_list|()
expr_stmt|;
block|}
name|void
name|resolveTargets
parameter_list|()
block|{
name|primaryTree
argument_list|()
operator|->
name|resolveTargets
argument_list|(
name|primaryTreeRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|insertTarget
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|,
name|TargetRec
operator|::
name|Type
name|type
argument_list|,
name|Node
operator|*
name|node
argument_list|,
name|int
name|priority
argument_list|)
block|{
name|primaryTree
argument_list|()
operator|->
name|insertTarget
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|node
argument_list|,
name|priority
argument_list|)
expr_stmt|;
block|}
comment|/*******************************************************************       The functions declared below are called for the current tree only.     ********************************************************************/
name|FunctionNode
modifier|*
name|findFunctionNode
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|parentPath
parameter_list|,
specifier|const
name|FunctionNode
modifier|*
name|clone
parameter_list|)
block|{
return|return
name|primaryTree
argument_list|()
operator|->
name|findFunctionNode
argument_list|(
name|parentPath
argument_list|,
name|clone
argument_list|)
return|;
block|}
name|FunctionNode
modifier|*
name|findNodeInOpenNamespace
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|parentPath
parameter_list|,
specifier|const
name|FunctionNode
modifier|*
name|clone
parameter_list|)
function_decl|;
name|Node
modifier|*
name|findNodeInOpenNamespace
argument_list|(
name|QStringList
operator|&
name|path
argument_list|,
name|Node
operator|::
name|Type
name|type
argument_list|,
name|Node
operator|::
name|SubType
name|subtype
argument_list|)
decl_stmt|;
name|NameCollisionNode
modifier|*
name|findCollisionNode
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
return|return
name|primaryTree
argument_list|()
operator|->
name|findCollisionNode
argument_list|(
name|name
argument_list|)
return|;
block|}
name|NameCollisionNode
modifier|*
name|checkForCollision
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
return|return
name|primaryTree
argument_list|()
operator|->
name|checkForCollision
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/*******************************************************************/
comment|/*******************************************************************       The functions declared below are called for all trees.     ********************************************************************/
name|ClassNode
modifier|*
name|findClassNode
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|path
parameter_list|)
block|{
return|return
name|forest_
operator|.
name|findClassNode
argument_list|(
name|path
argument_list|)
return|;
block|}
name|InnerNode
modifier|*
name|findRelatesNode
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|path
parameter_list|)
block|{
return|return
name|forest_
operator|.
name|findRelatesNode
argument_list|(
name|path
argument_list|)
return|;
block|}
name|QString
name|findTarget
argument_list|(
specifier|const
name|QString
operator|&
name|target
argument_list|,
specifier|const
name|Node
operator|*
name|node
argument_list|)
decl|const
block|{
return|return
name|forest_
operator|.
name|findTarget
argument_list|(
name|target
argument_list|,
name|node
argument_list|)
return|;
block|}
specifier|const
name|Node
modifier|*
name|resolveTarget
parameter_list|(
specifier|const
name|QString
modifier|&
name|target
parameter_list|,
specifier|const
name|Node
modifier|*
name|relative
parameter_list|)
block|{
return|return
name|forest_
operator|.
name|resolveTarget
argument_list|(
name|target
argument_list|,
name|relative
argument_list|)
return|;
block|}
specifier|const
name|Node
modifier|*
name|resolveType
parameter_list|(
specifier|const
name|QString
modifier|&
name|type
parameter_list|,
specifier|const
name|Node
modifier|*
name|relative
parameter_list|)
function_decl|;
specifier|const
name|Node
modifier|*
name|findNodeForTarget
parameter_list|(
specifier|const
name|QString
modifier|&
name|target
parameter_list|,
specifier|const
name|Node
modifier|*
name|relative
parameter_list|)
function_decl|;
specifier|const
name|DocNode
modifier|*
name|findDocNodeByTitle
argument_list|(
specifier|const
name|QString
operator|&
name|title
argument_list|,
specifier|const
name|Node
operator|*
name|relative
operator|=
literal|0
argument_list|)
decl|const
block|{
return|return
name|forest_
operator|.
name|findDocNodeByTitle
argument_list|(
name|title
argument_list|,
name|relative
argument_list|)
return|;
block|}
specifier|const
name|Node
modifier|*
name|findUnambiguousTarget
parameter_list|(
specifier|const
name|QString
modifier|&
name|target
parameter_list|,
name|QString
modifier|&
name|ref
parameter_list|,
specifier|const
name|Node
modifier|*
name|relative
parameter_list|)
block|{
return|return
name|forest_
operator|.
name|findUnambiguousTarget
argument_list|(
name|target
argument_list|,
name|ref
argument_list|,
name|relative
argument_list|)
return|;
block|}
name|Node
modifier|*
name|findNodeByNameAndType
argument_list|(
specifier|const
name|QStringList
operator|&
name|path
argument_list|,
name|Node
operator|::
name|Type
name|type
argument_list|,
name|Node
operator|::
name|SubType
name|subtype
argument_list|)
block|{
return|return
name|forest_
operator|.
name|findNodeByNameAndType
argument_list|(
name|path
argument_list|,
name|type
argument_list|,
name|subtype
argument_list|,
name|false
argument_list|)
return|;
block|}
comment|/*******************************************************************/
name|void
name|addPropertyFunction
argument_list|(
name|PropertyNode
operator|*
name|property
argument_list|,
specifier|const
name|QString
operator|&
name|funcName
argument_list|,
name|PropertyNode
operator|::
name|FunctionRole
name|funcRole
argument_list|)
block|{
name|primaryTree
argument_list|()
operator|->
name|addPropertyFunction
argument_list|(
name|property
argument_list|,
name|funcName
argument_list|,
name|funcRole
argument_list|)
expr_stmt|;
block|}
name|void
name|setVersion
parameter_list|(
specifier|const
name|QString
modifier|&
name|v
parameter_list|)
block|{
name|version_
operator|=
name|v
expr_stmt|;
block|}
name|QString
name|version
argument_list|()
specifier|const
block|{
return|return
name|version_
return|;
block|}
name|void
name|generateTagFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|Generator
modifier|*
name|g
parameter_list|)
function_decl|;
name|void
name|readIndexes
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|indexFiles
parameter_list|)
function_decl|;
name|void
name|generateIndex
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
specifier|const
name|QString
modifier|&
name|url
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
name|Generator
modifier|*
name|g
parameter_list|,
name|bool
name|generateInternalNodes
init|=
name|false
parameter_list|)
function_decl|;
name|void
name|clearOpenNamespaces
parameter_list|()
block|{
name|openNamespaces_
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|void
name|insertOpenNamespace
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
name|openNamespaces_
operator|.
name|insert
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|void
name|setShowInternal
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|showInternal_
operator|=
name|value
expr_stmt|;
block|}
comment|// Try to make this function private.
name|QDocForest
modifier|&
name|forest
parameter_list|()
block|{
return|return
name|forest_
return|;
block|}
name|NamespaceNode
modifier|*
name|primaryTreeRoot
parameter_list|()
block|{
return|return
name|forest_
operator|.
name|primaryTreeRoot
argument_list|()
return|;
block|}
name|void
name|newPrimaryTree
parameter_list|(
specifier|const
name|QString
modifier|&
name|module
parameter_list|)
block|{
name|forest_
operator|.
name|newPrimaryTree
argument_list|(
name|module
argument_list|)
expr_stmt|;
block|}
name|NamespaceNode
modifier|*
name|newIndexTree
parameter_list|(
specifier|const
name|QString
modifier|&
name|module
parameter_list|)
block|{
return|return
name|forest_
operator|.
name|newIndexTree
argument_list|(
name|module
argument_list|)
return|;
block|}
specifier|const
name|QVector
operator|<
name|Tree
operator|*
operator|>
operator|&
name|searchOrder
argument_list|()
block|{
return|return
name|forest_
operator|.
name|searchOrder
argument_list|()
return|;
block|}
name|void
name|setSearchOrder
parameter_list|()
block|{
name|forest_
operator|.
name|setSearchOrder
argument_list|()
expr_stmt|;
block|}
comment|/* debugging functions */
name|void
name|printModules
argument_list|()
specifier|const
expr_stmt|;
name|void
name|printQmlModules
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|friend
name|class
name|QDocIndexFiles
decl_stmt|;
name|friend
name|class
name|QDocTagFiles
decl_stmt|;
specifier|const
name|Node
modifier|*
name|findNode
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|path
parameter_list|,
specifier|const
name|Node
modifier|*
name|relative
parameter_list|,
name|int
name|findFlags
parameter_list|)
block|{
return|return
name|forest_
operator|.
name|findNode
argument_list|(
name|path
argument_list|,
name|relative
argument_list|,
name|findFlags
argument_list|)
return|;
block|}
name|void
name|processForest
argument_list|(
name|void
argument_list|(
name|QDocDatabase
operator|::
operator|*
argument_list|)
argument_list|(
name|InnerNode
operator|*
argument_list|)
argument_list|)
decl_stmt|;
specifier|static
name|void
name|initializeDB
parameter_list|()
function_decl|;
name|private
label|:
name|QDocDatabase
argument_list|()
expr_stmt|;
name|QDocDatabase
argument_list|(
name|QDocDatabase
specifier|const
operator|&
argument_list|)
operator|:
name|showInternal_
argument_list|(
name|false
argument_list|)
operator|,
name|forest_
argument_list|(
argument|this
argument_list|)
block|{ }
name|QDocDatabase
operator|&
name|operator
operator|=
operator|(
name|QDocDatabase
specifier|const
operator|&
operator|)
expr_stmt|;
name|Tree
modifier|*
name|primaryTree
parameter_list|()
block|{
return|return
name|forest_
operator|.
name|primaryTree
argument_list|()
return|;
block|}
name|private
label|:
specifier|static
name|QDocDatabase
modifier|*
name|qdocDB_
decl_stmt|;
specifier|static
name|NodeMap
name|typeNodeMap_
decl_stmt|;
name|bool
name|showInternal_
decl_stmt|;
name|QString
name|version_
decl_stmt|;
name|QDocMultiMap
name|masterMap_
decl_stmt|;
name|QDocForest
name|forest_
decl_stmt|;
name|DocNodeMap
name|groups_
decl_stmt|;
name|DocNodeMap
name|modules_
decl_stmt|;
name|DocNodeMap
name|qmlModules_
decl_stmt|;
name|QmlTypeMap
name|qmlTypeMap_
decl_stmt|;
name|NodeMap
name|nonCompatClasses_
decl_stmt|;
name|NodeMap
name|mainClasses_
decl_stmt|;
name|NodeMap
name|compatClasses_
decl_stmt|;
name|NodeMap
name|obsoleteClasses_
decl_stmt|;
name|NodeMap
name|classesWithObsoleteMembers_
decl_stmt|;
name|NodeMap
name|obsoleteQmlTypes_
decl_stmt|;
name|NodeMap
name|qmlTypesWithObsoleteMembers_
decl_stmt|;
name|NodeMap
name|namespaceIndex_
decl_stmt|;
name|NodeMap
name|serviceClasses_
decl_stmt|;
name|NodeMap
name|qmlClasses_
decl_stmt|;
name|NodeMapMap
name|newClassMaps_
decl_stmt|;
name|NodeMapMap
name|newQmlTypeMaps_
decl_stmt|;
name|NodeMultiMapMap
name|newSinceMaps_
decl_stmt|;
name|NodeMapMap
name|funcIndex_
decl_stmt|;
name|TextToNodeMap
name|legaleseTexts_
decl_stmt|;
name|QSet
operator|<
name|QString
operator|>
name|openNamespaces_
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
