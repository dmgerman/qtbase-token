begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QMLVISITOR_H
end_ifndef
begin_define
DECL|macro|QMLVISITOR_H
define|#
directive|define
name|QMLVISITOR_H
end_define
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|"qqmljsastvisitor_p.h"
end_include
begin_include
include|#
directive|include
file|"node.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_struct
DECL|struct|QmlPropArgs
struct|struct
name|QmlPropArgs
block|{
DECL|member|type_
name|QString
name|type_
decl_stmt|;
DECL|member|module_
name|QString
name|module_
decl_stmt|;
DECL|member|component_
name|QString
name|component_
decl_stmt|;
DECL|member|name_
name|QString
name|name_
decl_stmt|;
DECL|function|clear
name|void
name|clear
parameter_list|()
block|{
name|type_
operator|.
name|clear
argument_list|()
expr_stmt|;
name|module_
operator|.
name|clear
argument_list|()
expr_stmt|;
name|component_
operator|.
name|clear
argument_list|()
expr_stmt|;
name|name_
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_decl_stmt
name|class
name|QmlDocVisitor
range|:
name|public
name|QQmlJS
operator|::
name|AST
operator|::
name|Visitor
block|{
name|Q_DECLARE_TR_FUNCTIONS
argument_list|(
argument|QDoc::QmlDocVisitor
argument_list|)
name|public
operator|:
name|QmlDocVisitor
argument_list|(
specifier|const
name|QString
operator|&
name|filePath
argument_list|,
specifier|const
name|QString
operator|&
name|code
argument_list|,
name|QQmlJS
operator|::
name|Engine
operator|*
name|engine
argument_list|,
specifier|const
name|QSet
operator|<
name|QString
operator|>
operator|&
name|commands
argument_list|,
specifier|const
name|QSet
operator|<
name|QString
operator|>
operator|&
name|topics
argument_list|)
block|;
name|virtual
operator|~
name|QmlDocVisitor
argument_list|()
block|;
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::UiImport *import
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|endVisit
argument_list|(
argument|QQmlJS::AST::UiImport *definition
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::UiObjectDefinition *definition
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|endVisit
argument_list|(
argument|QQmlJS::AST::UiObjectDefinition *definition
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::UiPublicMember *member
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|endVisit
argument_list|(
argument|QQmlJS::AST::UiPublicMember *definition
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::UiObjectBinding *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|void
name|endVisit
argument_list|(
argument|QQmlJS::AST::UiObjectBinding *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|void
name|endVisit
argument_list|(
argument|QQmlJS::AST::UiArrayBinding *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::UiArrayBinding *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::IdentifierPropertyName *idproperty
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::FunctionDeclaration *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|endVisit
argument_list|(
argument|QQmlJS::AST::FunctionDeclaration *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::UiScriptBinding *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|endVisit
argument_list|(
argument|QQmlJS::AST::UiScriptBinding *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::UiQualifiedId *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|endVisit
argument_list|(
argument|QQmlJS::AST::UiQualifiedId *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|private
operator|:
name|QString
name|getFullyQualifiedId
argument_list|(
name|QQmlJS
operator|::
name|AST
operator|::
name|UiQualifiedId
operator|*
name|id
argument_list|)
block|;
name|QQmlJS
operator|::
name|AST
operator|::
name|SourceLocation
name|precedingComment
argument_list|(
argument|quint32 offset
argument_list|)
specifier|const
block|;
name|bool
name|applyDocumentation
argument_list|(
argument|QQmlJS::AST::SourceLocation location
argument_list|,
argument|Node *node
argument_list|)
block|;
name|void
name|applyMetacommands
argument_list|(
argument|QQmlJS::AST::SourceLocation location
argument_list|,
argument|Node* node
argument_list|,
argument|Doc& doc
argument_list|)
block|;
name|bool
name|splitQmlPropertyArg
argument_list|(
specifier|const
name|Doc
operator|&
name|doc
argument_list|,
specifier|const
name|QString
operator|&
name|arg
argument_list|,
name|QmlPropArgs
operator|&
name|qpa
argument_list|)
block|;
name|QQmlJS
operator|::
name|Engine
operator|*
name|engine
block|;
name|quint32
name|lastEndOffset
block|;
name|quint32
name|nestingLevel
block|;
name|QString
name|filePath_
block|;
name|QString
name|name
block|;
name|QString
name|document
block|;
name|ImportList
name|importList
block|;
name|QSet
operator|<
name|QString
operator|>
name|commands_
block|;
name|QSet
operator|<
name|QString
operator|>
name|topics_
block|;
name|QSet
operator|<
name|quint32
operator|>
name|usedComments
block|;
name|InnerNode
operator|*
name|current
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
