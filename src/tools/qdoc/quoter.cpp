begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|"quoter.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|replaceMultipleNewlines
specifier|static
name|void
name|replaceMultipleNewlines
parameter_list|(
name|QString
modifier|&
name|s
parameter_list|)
block|{
specifier|const
name|int
name|n
init|=
name|s
operator|.
name|size
argument_list|()
decl_stmt|;
name|bool
name|slurping
init|=
literal|false
decl_stmt|;
name|int
name|j
init|=
operator|-
literal|1
decl_stmt|;
specifier|const
name|QChar
name|newLine
init|=
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
decl_stmt|;
name|QChar
modifier|*
name|d
init|=
name|s
operator|.
name|data
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QChar
name|c
init|=
name|d
index|[
name|i
index|]
decl_stmt|;
name|bool
name|hit
init|=
operator|(
name|c
operator|==
name|newLine
operator|)
decl_stmt|;
if|if
condition|(
name|slurping
operator|&&
name|hit
condition|)
continue|continue;
name|d
index|[
operator|++
name|j
index|]
operator|=
name|c
expr_stmt|;
name|slurping
operator|=
name|hit
expr_stmt|;
block|}
name|s
operator|.
name|resize
argument_list|(
operator|++
name|j
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// This is equivalent to  line.split( QRegExp("\n(?!\n|$)") ) but much faster
end_comment
begin_function
DECL|function|splitLines
name|QStringList
name|Quoter
operator|::
name|splitLines
parameter_list|(
specifier|const
name|QString
modifier|&
name|line
parameter_list|)
block|{
name|QStringList
name|result
decl_stmt|;
name|int
name|i
init|=
name|line
operator|.
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|j
init|=
name|i
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|j
operator|>=
literal|0
operator|&&
name|line
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
condition|)
operator|--
name|j
expr_stmt|;
while|while
condition|(
name|j
operator|>=
literal|0
operator|&&
name|line
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|!=
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
condition|)
operator|--
name|j
expr_stmt|;
name|result
operator|.
name|prepend
argument_list|(
name|line
operator|.
name|mid
argument_list|(
name|j
operator|+
literal|1
argument_list|,
name|i
operator|-
name|j
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|<
literal|0
condition|)
break|break;
name|i
operator|=
name|j
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*   Transforms 'int x = 3 + 4' into 'int x=3+4'. A white space is kept   between 'int' and 'x' because it is meaningful in C++. */
end_comment
begin_function
DECL|function|trimWhiteSpace
specifier|static
name|void
name|trimWhiteSpace
parameter_list|(
name|QString
modifier|&
name|str
parameter_list|)
block|{
enum|enum
block|{
name|Normal
block|,
name|MetAlnum
block|,
name|MetSpace
block|}
name|state
init|=
name|Normal
enum|;
specifier|const
name|int
name|n
init|=
name|str
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|j
init|=
operator|-
literal|1
decl_stmt|;
name|QChar
modifier|*
name|d
init|=
name|str
operator|.
name|data
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QChar
name|c
init|=
name|d
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|isLetterOrNumber
argument_list|()
condition|)
block|{
if|if
condition|(
name|state
operator|==
name|Normal
condition|)
block|{
name|state
operator|=
name|MetAlnum
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|state
operator|==
name|MetSpace
condition|)
name|str
index|[
operator|++
name|j
index|]
operator|=
name|c
expr_stmt|;
name|state
operator|=
name|Normal
expr_stmt|;
block|}
name|str
index|[
operator|++
name|j
index|]
operator|=
name|c
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|isSpace
argument_list|()
condition|)
block|{
if|if
condition|(
name|state
operator|==
name|MetAlnum
condition|)
name|state
operator|=
name|MetSpace
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|Normal
expr_stmt|;
name|str
index|[
operator|++
name|j
index|]
operator|=
name|c
expr_stmt|;
block|}
block|}
name|str
operator|.
name|resize
argument_list|(
operator|++
name|j
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|Quoter
name|Quoter
operator|::
name|Quoter
parameter_list|()
member_init_list|:
name|silent
argument_list|(
literal|false
argument_list|)
block|{
comment|/* We're going to hard code these delimiters:         * C++, Qt, Qt Script, Java:           //! [<id>]         * .pro, .py files:           #! [<id>]         * .html, .qrc, .ui, .xq, .xml .dita files:<!-- [<id>] -->     */
name|commentHash
index|[
literal|"pro"
index|]
operator|=
literal|"#!"
expr_stmt|;
name|commentHash
index|[
literal|"py"
index|]
operator|=
literal|"#!"
expr_stmt|;
name|commentHash
index|[
literal|"html"
index|]
operator|=
literal|"<!--"
expr_stmt|;
name|commentHash
index|[
literal|"qrc"
index|]
operator|=
literal|"<!--"
expr_stmt|;
name|commentHash
index|[
literal|"ui"
index|]
operator|=
literal|"<!--"
expr_stmt|;
name|commentHash
index|[
literal|"xml"
index|]
operator|=
literal|"<!--"
expr_stmt|;
name|commentHash
index|[
literal|"dita"
index|]
operator|=
literal|"<!--"
expr_stmt|;
name|commentHash
index|[
literal|"xq"
index|]
operator|=
literal|"<!--"
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|reset
name|void
name|Quoter
operator|::
name|reset
parameter_list|()
block|{
name|silent
operator|=
literal|false
expr_stmt|;
name|plainLines
operator|.
name|clear
argument_list|()
expr_stmt|;
name|markedLines
operator|.
name|clear
argument_list|()
expr_stmt|;
name|codeLocation
operator|=
name|Location
operator|::
name|null
expr_stmt|;
block|}
end_function
begin_function
DECL|function|quoteFromFile
name|void
name|Quoter
operator|::
name|quoteFromFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|userFriendlyFilePath
parameter_list|,
specifier|const
name|QString
modifier|&
name|plainCode
parameter_list|,
specifier|const
name|QString
modifier|&
name|markedCode
parameter_list|)
block|{
name|silent
operator|=
literal|false
expr_stmt|;
comment|/*       Split the source code into logical lines. Empty lines are       treated specially. Before:     p->alpha();    p->beta();     p->gamma();      p->delta();        After:     p->alpha();    p->beta();\n    p->gamma();\n\n    p->delta();        Newlines are preserved because they affect codeLocation.     */
name|codeLocation
operator|=
name|Location
argument_list|(
name|userFriendlyFilePath
argument_list|)
expr_stmt|;
name|plainLines
operator|=
name|splitLines
argument_list|(
name|plainCode
argument_list|)
expr_stmt|;
name|markedLines
operator|=
name|splitLines
argument_list|(
name|markedCode
argument_list|)
expr_stmt|;
if|if
condition|(
name|markedLines
operator|.
name|count
argument_list|()
operator|!=
name|plainLines
operator|.
name|count
argument_list|()
condition|)
block|{
name|codeLocation
operator|.
name|warning
argument_list|(
name|tr
argument_list|(
literal|"Something is wrong with qdoc's handling of marked code"
argument_list|)
argument_list|)
expr_stmt|;
name|markedLines
operator|=
name|plainLines
expr_stmt|;
block|}
comment|/*       Squeeze blanks (cat -s).     */
name|QStringList
operator|::
name|Iterator
name|m
init|=
name|markedLines
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|m
operator|!=
name|markedLines
operator|.
name|end
argument_list|()
condition|)
block|{
name|replaceMultipleNewlines
argument_list|(
operator|*
name|m
argument_list|)
expr_stmt|;
operator|++
name|m
expr_stmt|;
block|}
name|codeLocation
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|quoteLine
name|QString
name|Quoter
operator|::
name|quoteLine
parameter_list|(
specifier|const
name|Location
modifier|&
name|docLocation
parameter_list|,
specifier|const
name|QString
modifier|&
name|command
parameter_list|,
specifier|const
name|QString
modifier|&
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|plainLines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|failedAtEnd
argument_list|(
name|docLocation
argument_list|,
name|command
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
if|if
condition|(
name|pattern
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|docLocation
operator|.
name|warning
argument_list|(
name|tr
argument_list|(
literal|"Missing pattern after '\\%1'"
argument_list|)
operator|.
name|arg
argument_list|(
name|command
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
if|if
condition|(
name|match
argument_list|(
name|docLocation
argument_list|,
name|pattern
argument_list|,
name|plainLines
operator|.
name|first
argument_list|()
argument_list|)
condition|)
return|return
name|getLine
argument_list|()
return|;
if|if
condition|(
operator|!
name|silent
condition|)
block|{
name|docLocation
operator|.
name|warning
argument_list|(
name|tr
argument_list|(
literal|"Command '\\%1' failed"
argument_list|)
operator|.
name|arg
argument_list|(
name|command
argument_list|)
argument_list|)
expr_stmt|;
name|codeLocation
operator|.
name|warning
argument_list|(
name|tr
argument_list|(
literal|"Pattern '%1' didn't match here"
argument_list|)
operator|.
name|arg
argument_list|(
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
name|silent
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|quoteSnippet
name|QString
name|Quoter
operator|::
name|quoteSnippet
parameter_list|(
specifier|const
name|Location
modifier|&
name|docLocation
parameter_list|,
specifier|const
name|QString
modifier|&
name|identifier
parameter_list|)
block|{
name|QString
name|comment
init|=
name|commentForCode
argument_list|()
decl_stmt|;
name|QString
name|delimiter
init|=
name|comment
operator|+
name|QString
argument_list|(
literal|" [%1]"
argument_list|)
operator|.
name|arg
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
name|QString
name|t
decl_stmt|;
name|int
name|indent
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|plainLines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|match
argument_list|(
name|docLocation
argument_list|,
name|delimiter
argument_list|,
name|plainLines
operator|.
name|first
argument_list|()
argument_list|)
condition|)
block|{
name|QString
name|startLine
init|=
name|getLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|indent
operator|<
name|startLine
operator|.
name|length
argument_list|()
operator|&&
name|startLine
index|[
name|indent
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
condition|)
name|indent
operator|++
expr_stmt|;
break|break;
block|}
name|getLine
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|plainLines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|line
init|=
name|plainLines
operator|.
name|first
argument_list|()
decl_stmt|;
if|if
condition|(
name|match
argument_list|(
name|docLocation
argument_list|,
name|delimiter
argument_list|,
name|line
argument_list|)
condition|)
block|{
name|QString
name|lastLine
init|=
name|getLine
argument_list|(
name|indent
argument_list|)
decl_stmt|;
name|int
name|dIndex
init|=
name|lastLine
operator|.
name|indexOf
argument_list|(
name|delimiter
argument_list|)
decl_stmt|;
if|if
condition|(
name|dIndex
operator|>
literal|0
condition|)
block|{
comment|// The delimiter might be preceded on the line by other
comment|// delimeters, so look for the first comment on the line.
name|QString
name|leading
init|=
name|lastLine
operator|.
name|left
argument_list|(
name|dIndex
argument_list|)
decl_stmt|;
name|dIndex
operator|=
name|leading
operator|.
name|indexOf
argument_list|(
name|comment
argument_list|)
expr_stmt|;
if|if
condition|(
name|dIndex
operator|!=
operator|-
literal|1
condition|)
name|leading
operator|=
name|leading
operator|.
name|left
argument_list|(
name|dIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|leading
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"<@comment>"
argument_list|)
argument_list|)
condition|)
name|leading
operator|.
name|chop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|leading
operator|.
name|trimmed
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|+=
name|leading
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
name|t
operator|+=
name|removeSpecialLines
argument_list|(
name|line
argument_list|,
name|comment
argument_list|,
name|indent
argument_list|)
expr_stmt|;
block|}
name|failedAtEnd
argument_list|(
name|docLocation
argument_list|,
name|QString
argument_list|(
literal|"snippet (%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|delimiter
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
end_function
begin_function
DECL|function|quoteTo
name|QString
name|Quoter
operator|::
name|quoteTo
parameter_list|(
specifier|const
name|Location
modifier|&
name|docLocation
parameter_list|,
specifier|const
name|QString
modifier|&
name|command
parameter_list|,
specifier|const
name|QString
modifier|&
name|pattern
parameter_list|)
block|{
name|QString
name|t
decl_stmt|;
name|QString
name|comment
init|=
name|commentForCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
while|while
condition|(
operator|!
name|plainLines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|line
init|=
name|plainLines
operator|.
name|first
argument_list|()
decl_stmt|;
name|t
operator|+=
name|removeSpecialLines
argument_list|(
name|line
argument_list|,
name|comment
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
operator|!
name|plainLines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|match
argument_list|(
name|docLocation
argument_list|,
name|pattern
argument_list|,
name|plainLines
operator|.
name|first
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|t
return|;
block|}
name|t
operator|+=
name|getLine
argument_list|()
expr_stmt|;
block|}
name|failedAtEnd
argument_list|(
name|docLocation
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
end_function
begin_function
DECL|function|quoteUntil
name|QString
name|Quoter
operator|::
name|quoteUntil
parameter_list|(
specifier|const
name|Location
modifier|&
name|docLocation
parameter_list|,
specifier|const
name|QString
modifier|&
name|command
parameter_list|,
specifier|const
name|QString
modifier|&
name|pattern
parameter_list|)
block|{
name|QString
name|t
init|=
name|quoteTo
argument_list|(
name|docLocation
argument_list|,
name|command
argument_list|,
name|pattern
argument_list|)
decl_stmt|;
name|t
operator|+=
name|getLine
argument_list|()
expr_stmt|;
return|return
name|t
return|;
block|}
end_function
begin_function
DECL|function|getLine
name|QString
name|Quoter
operator|::
name|getLine
parameter_list|(
name|int
name|unindent
parameter_list|)
block|{
if|if
condition|(
name|plainLines
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
name|plainLines
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
name|QString
name|t
init|=
name|markedLines
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|unindent
operator|&&
name|i
operator|<
name|t
operator|.
name|length
argument_list|()
operator|&&
name|t
index|[
name|i
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
condition|)
name|i
operator|++
expr_stmt|;
name|t
operator|=
name|t
operator|.
name|mid
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|t
operator|+=
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|codeLocation
operator|.
name|advanceLines
argument_list|(
name|t
operator|.
name|count
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
end_function
begin_function
DECL|function|match
name|bool
name|Quoter
operator|::
name|match
parameter_list|(
specifier|const
name|Location
modifier|&
name|docLocation
parameter_list|,
specifier|const
name|QString
modifier|&
name|pattern0
parameter_list|,
specifier|const
name|QString
modifier|&
name|line
parameter_list|)
block|{
name|QString
name|str
init|=
name|line
decl_stmt|;
while|while
condition|(
name|str
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
condition|)
name|str
operator|.
name|truncate
argument_list|(
name|str
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QString
name|pattern
init|=
name|pattern0
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
operator|&&
name|pattern
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
operator|&&
name|pattern
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|)
block|{
name|QRegExp
name|rx
argument_list|(
name|pattern
operator|.
name|mid
argument_list|(
literal|1
argument_list|,
name|pattern
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|silent
operator|&&
operator|!
name|rx
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|docLocation
operator|.
name|warning
argument_list|(
name|tr
argument_list|(
literal|"Invalid regular expression '%1'"
argument_list|)
operator|.
name|arg
argument_list|(
name|rx
operator|.
name|pattern
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|silent
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|str
operator|.
name|indexOf
argument_list|(
name|rx
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
name|trimWhiteSpace
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|trimWhiteSpace
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
return|return
name|str
operator|.
name|indexOf
argument_list|(
name|pattern
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|failedAtEnd
name|void
name|Quoter
operator|::
name|failedAtEnd
parameter_list|(
specifier|const
name|Location
modifier|&
name|docLocation
parameter_list|,
specifier|const
name|QString
modifier|&
name|command
parameter_list|)
block|{
if|if
condition|(
operator|!
name|silent
operator|&&
operator|!
name|command
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|codeLocation
operator|.
name|filePath
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|docLocation
operator|.
name|warning
argument_list|(
name|tr
argument_list|(
literal|"Unexpected '\\%1'"
argument_list|)
operator|.
name|arg
argument_list|(
name|command
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docLocation
operator|.
name|warning
argument_list|(
name|tr
argument_list|(
literal|"Command '\\%1' failed at end of file '%2'"
argument_list|)
operator|.
name|arg
argument_list|(
name|command
argument_list|)
operator|.
name|arg
argument_list|(
name|codeLocation
operator|.
name|filePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|silent
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|commentForCode
name|QString
name|Quoter
operator|::
name|commentForCode
parameter_list|()
specifier|const
block|{
name|QString
name|suffix
init|=
name|QFileInfo
argument_list|(
name|codeLocation
operator|.
name|fileName
argument_list|()
argument_list|)
operator|.
name|suffix
argument_list|()
decl_stmt|;
return|return
name|commentHash
operator|.
name|value
argument_list|(
name|suffix
argument_list|,
literal|"//!"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|removeSpecialLines
name|QString
name|Quoter
operator|::
name|removeSpecialLines
parameter_list|(
specifier|const
name|QString
modifier|&
name|line
parameter_list|,
specifier|const
name|QString
modifier|&
name|comment
parameter_list|,
name|int
name|unindent
parameter_list|)
block|{
name|QString
name|t
decl_stmt|;
comment|// Remove special macros to support Qt namespacing.
name|QString
name|trimmed
init|=
name|line
operator|.
name|trimmed
argument_list|()
decl_stmt|;
if|if
condition|(
name|trimmed
operator|.
name|startsWith
argument_list|(
literal|"QT_BEGIN_NAMESPACE"
argument_list|)
condition|)
block|{
name|getLine
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|trimmed
operator|.
name|startsWith
argument_list|(
literal|"QT_END_NAMESPACE"
argument_list|)
condition|)
block|{
name|getLine
argument_list|()
expr_stmt|;
name|t
operator|+=
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|trimmed
operator|.
name|startsWith
argument_list|(
name|comment
argument_list|)
condition|)
block|{
comment|// Ordinary code
name|t
operator|+=
name|getLine
argument_list|(
name|unindent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Comments
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
condition|)
name|t
operator|+=
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|getLine
argument_list|()
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
