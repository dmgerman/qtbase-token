begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|"codemarker.h"
end_include
begin_include
include|#
directive|include
file|"codeparser.h"
end_include
begin_include
include|#
directive|include
file|"config.h"
end_include
begin_include
include|#
directive|include
file|"cppcodemarker.h"
end_include
begin_include
include|#
directive|include
file|"cppcodeparser.h"
end_include
begin_include
include|#
directive|include
file|"doc.h"
end_include
begin_include
include|#
directive|include
file|"htmlgenerator.h"
end_include
begin_include
include|#
directive|include
file|"location.h"
end_include
begin_include
include|#
directive|include
file|"plaincodemarker.h"
end_include
begin_include
include|#
directive|include
file|"puredocparser.h"
end_include
begin_include
include|#
directive|include
file|"tokenizer.h"
end_include
begin_include
include|#
directive|include
file|"tree.h"
end_include
begin_include
include|#
directive|include
file|"qdocdatabase.h"
end_include
begin_include
include|#
directive|include
file|"jscodemarker.h"
end_include
begin_include
include|#
directive|include
file|"qmlcodemarker.h"
end_include
begin_include
include|#
directive|include
file|"qmlcodeparser.h"
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|"qtranslator.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
end_ifndef
begin_include
include|#
directive|include
file|"qcoreapplication.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qcommandlineoption.h"
end_include
begin_include
include|#
directive|include
file|"qcommandlineparser.h"
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|creationTimeBefore
name|bool
name|creationTimeBefore
parameter_list|(
specifier|const
name|QFileInfo
modifier|&
name|fi1
parameter_list|,
specifier|const
name|QFileInfo
modifier|&
name|fi2
parameter_list|)
block|{
return|return
name|fi1
operator|.
name|lastModified
argument_list|()
operator|<
name|fi2
operator|.
name|lastModified
argument_list|()
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|highlighting
specifier|static
name|bool
name|highlighting
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|showInternal
specifier|static
name|bool
name|showInternal
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|singleExec
specifier|static
name|bool
name|singleExec
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|writeQaPages
specifier|static
name|bool
name|writeQaPages
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|redirectDocumentationToDevNull
specifier|static
name|bool
name|redirectDocumentationToDevNull
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|noLinkErrors
specifier|static
name|bool
name|noLinkErrors
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|autolinkErrors
specifier|static
name|bool
name|autolinkErrors
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|obsoleteLinks
specifier|static
name|bool
name|obsoleteLinks
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|defines
specifier|static
name|QStringList
name|defines
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|dependModules
specifier|static
name|QStringList
name|dependModules
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|indexDirs
specifier|static
name|QStringList
name|indexDirs
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|currentDir
specifier|static
name|QString
name|currentDir
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|prevCurrentDir
specifier|static
name|QString
name|prevCurrentDir
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|defaults
specifier|static
name|QHash
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|defaults
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TRANSLATION
end_ifndef
begin_typedef
DECL|typedef|Translator
typedef|typedef
name|QPair
argument_list|<
name|QString
argument_list|,
name|QTranslator
modifier|*
argument_list|>
name|Translator
typedef|;
end_typedef
begin_decl_stmt
DECL|variable|translators
specifier|static
name|QList
argument_list|<
name|Translator
argument_list|>
name|translators
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!   Read some XML indexes containing definitions from other   documentation sets. \a config contains a variable that   lists directories where index files can bge found. It also   contains the \c depends variable, which lists the modules   that the current module depends on. */
end_comment
begin_function
DECL|function|loadIndexFiles
specifier|static
name|void
name|loadIndexFiles
parameter_list|(
name|Config
modifier|&
name|config
parameter_list|)
block|{
name|QDocDatabase
modifier|*
name|qdb
init|=
name|QDocDatabase
operator|::
name|qdocDB
argument_list|()
decl_stmt|;
name|QStringList
name|indexFiles
decl_stmt|;
name|QStringList
name|configIndexes
init|=
name|config
operator|.
name|getStringList
argument_list|(
name|CONFIG_INDEXES
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|index
decl|,
name|configIndexes
control|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|exists
argument_list|()
operator|&&
name|fi
operator|.
name|isFile
argument_list|()
condition|)
name|indexFiles
operator|<<
name|index
expr_stmt|;
else|else
name|Location
operator|::
name|null
operator|.
name|warning
argument_list|(
name|QString
argument_list|(
literal|"Index file not found: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dependModules
operator|+=
name|config
operator|.
name|getStringList
argument_list|(
name|CONFIG_DEPENDS
argument_list|)
expr_stmt|;
name|dependModules
operator|.
name|removeDuplicates
argument_list|()
expr_stmt|;
name|bool
name|noOutputSubdirs
init|=
literal|false
decl_stmt|;
name|QString
name|singleOutputSubdir
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|getBool
argument_list|(
name|QString
argument_list|(
literal|"HTML.nosubdirs"
argument_list|)
argument_list|)
condition|)
block|{
name|noOutputSubdirs
operator|=
literal|true
expr_stmt|;
name|singleOutputSubdir
operator|=
name|config
operator|.
name|getString
argument_list|(
literal|"HTML.outputsubdir"
argument_list|)
expr_stmt|;
if|if
condition|(
name|singleOutputSubdir
operator|.
name|isEmpty
argument_list|()
condition|)
name|singleOutputSubdir
operator|=
literal|"html"
expr_stmt|;
block|}
if|if
condition|(
name|dependModules
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|indexDirs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexDirs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|indexDirs
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|prefix
argument_list|(
name|QDir
argument_list|(
name|currentDir
argument_list|)
operator|.
name|relativeFilePath
argument_list|(
name|prevCurrentDir
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
name|indexDirs
index|[
name|i
index|]
operator|.
name|prepend
argument_list|(
name|prefix
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*               Add all subdirectories of the indexdirs as dependModules,               when an asterisk is used in the 'depends' list.             */
if|if
condition|(
name|dependModules
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|dependModules
operator|.
name|removeOne
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexDirs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QDir
name|scanDir
init|=
name|QDir
argument_list|(
name|indexDirs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|scanDir
operator|.
name|setFilter
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
expr_stmt|;
name|QFileInfoList
name|dirList
init|=
name|scanDir
operator|.
name|entryInfoList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|dirList
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|dirList
index|[
name|j
index|]
operator|.
name|fileName
argument_list|()
operator|.
name|toLower
argument_list|()
operator|!=
name|config
operator|.
name|getString
argument_list|(
name|CONFIG_PROJECT
argument_list|)
operator|.
name|toLower
argument_list|()
condition|)
name|dependModules
operator|.
name|append
argument_list|(
name|dirList
index|[
name|j
index|]
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dependModules
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|indexToAdd
decl_stmt|;
name|QList
argument_list|<
name|QFileInfo
argument_list|>
name|foundIndices
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|indexDirs
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|QString
name|fileToLookFor
init|=
name|indexDirs
index|[
name|j
index|]
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|noOutputSubdirs
condition|)
name|fileToLookFor
operator|+=
name|singleOutputSubdir
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
else|else
name|fileToLookFor
operator|+=
name|dependModules
index|[
name|i
index|]
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|fileToLookFor
operator|+=
name|dependModules
index|[
name|i
index|]
operator|+
name|QLatin1String
argument_list|(
literal|".index"
argument_list|)
expr_stmt|;
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|fileToLookFor
argument_list|)
condition|)
block|{
name|QFileInfo
name|tempFileInfo
argument_list|(
name|fileToLookFor
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|foundIndices
operator|.
name|contains
argument_list|(
name|tempFileInfo
argument_list|)
condition|)
name|foundIndices
operator|.
name|append
argument_list|(
name|tempFileInfo
argument_list|)
expr_stmt|;
block|}
block|}
name|std
operator|::
name|sort
argument_list|(
name|foundIndices
operator|.
name|begin
argument_list|()
argument_list|,
name|foundIndices
operator|.
name|end
argument_list|()
argument_list|,
name|creationTimeBefore
argument_list|)
expr_stmt|;
if|if
condition|(
name|foundIndices
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|/*                         QDoc should always use the last entry in the multimap when there are                         multiple index files for a module, since the last modified file has the                         highest UNIX timestamp.                     */
name|QStringList
name|indexPaths
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|foundIndices
operator|.
name|size
argument_list|()
condition|;
name|k
operator|++
control|)
name|indexPaths
operator|<<
name|foundIndices
index|[
name|k
index|]
operator|.
name|absoluteFilePath
argument_list|()
expr_stmt|;
name|Location
operator|::
name|null
operator|.
name|warning
argument_list|(
name|QString
argument_list|(
literal|"Multiple index files found for dependency \"%1\":\n%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|dependModules
index|[
name|i
index|]
argument_list|,
name|indexPaths
operator|.
name|join
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Location
operator|::
name|null
operator|.
name|warning
argument_list|(
name|QString
argument_list|(
literal|"Using %1 as index file for dependency \"%2\""
argument_list|)
operator|.
name|arg
argument_list|(
name|foundIndices
index|[
name|foundIndices
operator|.
name|size
argument_list|()
operator|-
literal|1
index|]
operator|.
name|absoluteFilePath
argument_list|()
argument_list|,
name|dependModules
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|indexToAdd
operator|=
name|foundIndices
index|[
name|foundIndices
operator|.
name|size
argument_list|()
operator|-
literal|1
index|]
operator|.
name|absoluteFilePath
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|foundIndices
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|indexToAdd
operator|=
name|foundIndices
index|[
literal|0
index|]
operator|.
name|absoluteFilePath
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|indexToAdd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|indexFiles
operator|.
name|contains
argument_list|(
name|indexToAdd
argument_list|)
condition|)
name|indexFiles
operator|<<
name|indexToAdd
expr_stmt|;
block|}
else|else
block|{
name|Location
operator|::
name|null
operator|.
name|warning
argument_list|(
name|QString
argument_list|(
literal|"\"%1\" Cannot locate index file for dependency \"%2\""
argument_list|)
operator|.
name|arg
argument_list|(
name|config
operator|.
name|getString
argument_list|(
name|CONFIG_PROJECT
argument_list|)
argument_list|,
name|dependModules
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|Location
operator|::
name|null
operator|.
name|warning
argument_list|(
name|QLatin1String
argument_list|(
literal|"Dependent modules specified, but no index directories were set. There will probably be errors for missing links."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|qdb
operator|->
name|readIndexes
argument_list|(
name|indexFiles
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Processes the qdoc config file \a fileName. This is the   controller for all of qdoc.  */
end_comment
begin_function
DECL|function|processQdocconfFile
specifier|static
name|void
name|processQdocconfFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
comment|/*       The Config instance represents the configuration data for qdoc.       All the other classes are initialized with the config. Below, we       initialize the configuration with some default values.        I don't think the call to translate() does anything here. For one       thing, the translators haven't been installed at this point. And       I doubt any translator would translate QDoc anyway. But I left it       here because it does no harm.      */
name|Config
name|config
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QDoc"
argument_list|,
literal|"qdoc"
argument_list|)
argument_list|)
decl_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
operator|::
name|iterator
name|iter
decl_stmt|;
for|for
control|(
name|iter
operator|=
name|defaults
operator|.
name|begin
argument_list|()
init|;
name|iter
operator|!=
name|defaults
operator|.
name|end
argument_list|()
condition|;
operator|++
name|iter
control|)
name|config
operator|.
name|setStringList
argument_list|(
name|iter
operator|.
name|key
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|iter
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setStringList
argument_list|(
name|CONFIG_SYNTAXHIGHLIGHTING
argument_list|,
name|QStringList
argument_list|(
name|highlighting
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|setStringList
argument_list|(
name|CONFIG_SHOWINTERNAL
argument_list|,
name|QStringList
argument_list|(
name|showInternal
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|setStringList
argument_list|(
name|CONFIG_SINGLEEXEC
argument_list|,
name|QStringList
argument_list|(
name|singleExec
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|setStringList
argument_list|(
name|CONFIG_WRITEQAPAGES
argument_list|,
name|QStringList
argument_list|(
name|writeQaPages
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|setStringList
argument_list|(
name|CONFIG_REDIRECTDOCUMENTATIONTODEVNULL
argument_list|,
name|QStringList
argument_list|(
name|redirectDocumentationToDevNull
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|setStringList
argument_list|(
name|CONFIG_NOLINKERRORS
argument_list|,
name|QStringList
argument_list|(
name|noLinkErrors
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|setStringList
argument_list|(
name|CONFIG_AUTOLINKERRORS
argument_list|,
name|QStringList
argument_list|(
name|autolinkErrors
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|setStringList
argument_list|(
name|CONFIG_OBSOLETELINKS
argument_list|,
name|QStringList
argument_list|(
name|obsoleteLinks
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|prevCurrentDir
operator|=
name|QDir
operator|::
name|currentPath
argument_list|()
expr_stmt|;
comment|/*       With the default configuration values in place, load       the qdoc configuration file. Note that the configuration       file may include other configuration files.        The Location class keeps track of the current location       in the file being processed, mainly for error reporting       purposes.      */
name|Location
operator|::
name|initialize
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|config
operator|.
name|load
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|QString
name|project
init|=
name|config
operator|.
name|getString
argument_list|(
name|CONFIG_PROJECT
argument_list|)
decl_stmt|;
comment|//qDebug()<< "Start project:"<< project;
comment|/*       Add the defines to the configuration variables.      */
name|QStringList
name|defs
init|=
name|defines
operator|+
name|config
operator|.
name|getStringList
argument_list|(
name|CONFIG_DEFINES
argument_list|)
decl_stmt|;
name|config
operator|.
name|setStringList
argument_list|(
name|CONFIG_DEFINES
argument_list|,
name|defs
argument_list|)
expr_stmt|;
name|Location
operator|::
name|terminate
argument_list|()
expr_stmt|;
name|currentDir
operator|=
name|QFileInfo
argument_list|(
name|fileName
argument_list|)
operator|.
name|path
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|currentDir
operator|.
name|isEmpty
argument_list|()
condition|)
name|QDir
operator|::
name|setCurrent
argument_list|(
name|currentDir
argument_list|)
expr_stmt|;
name|QString
name|phase
init|=
literal|" in -"
decl_stmt|;
if|if
condition|(
name|Generator
operator|::
name|singleExec
argument_list|()
condition|)
name|phase
operator|+=
literal|"single exec mode, "
expr_stmt|;
else|else
name|phase
operator|+=
literal|"separate exec mode, "
expr_stmt|;
if|if
condition|(
name|Generator
operator|::
name|preparing
argument_list|()
condition|)
name|phase
operator|+=
literal|"prepare phase "
expr_stmt|;
elseif|else
if|if
condition|(
name|Generator
operator|::
name|generating
argument_list|()
condition|)
name|phase
operator|+=
literal|"generate phase "
expr_stmt|;
name|QString
name|msg
init|=
literal|"Running qdoc for "
operator|+
name|config
operator|.
name|getString
argument_list|(
name|CONFIG_PROJECT
argument_list|)
operator|+
name|phase
decl_stmt|;
name|Location
operator|::
name|logToStdErr
argument_list|(
name|msg
argument_list|)
expr_stmt|;
comment|/*       Initialize all the classes and data structures with the       qdoc configuration. This is safe to do for each qdocconf       file processed, because all the data structures created       are either cleared after they have been used, or they       are cleared in the terminate() functions below.      */
name|Location
operator|::
name|initialize
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Tokenizer
operator|::
name|initialize
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Doc
operator|::
name|initialize
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|CodeMarker
operator|::
name|initialize
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|CodeParser
operator|::
name|initialize
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Generator
operator|::
name|initialize
argument_list|(
name|config
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TRANSLATION
comment|/*       Load the language translators, if the configuration specifies any,       but only if they haven't already been loaded. This works in both       -prepare/-generate mode and -singleexec mode.      */
name|QStringList
name|fileNames
init|=
name|config
operator|.
name|getStringList
argument_list|(
name|CONFIG_TRANSLATORS
argument_list|)
decl_stmt|;
name|QStringList
operator|::
name|ConstIterator
name|fn
init|=
name|fileNames
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|fn
operator|!=
name|fileNames
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|bool
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|translators
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|translators
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|translators
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|first
operator|==
operator|*
name|fn
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|QTranslator
modifier|*
name|translator
init|=
operator|new
name|QTranslator
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|translator
operator|->
name|load
argument_list|(
operator|*
name|fn
argument_list|)
condition|)
block|{
name|config
operator|.
name|lastLocation
argument_list|()
operator|.
name|error
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QDoc"
argument_list|,
literal|"Cannot load translator '%1'"
argument_list|)
operator|.
name|arg
argument_list|(
operator|*
name|fn
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|installTranslator
argument_list|(
name|translator
argument_list|)
expr_stmt|;
name|translators
operator|.
name|append
argument_list|(
name|Translator
argument_list|(
operator|*
name|fn
argument_list|,
name|translator
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
operator|++
name|fn
expr_stmt|;
block|}
endif|#
directive|endif
comment|//QSet<QString> outputLanguages = config.getStringSet(CONFIG_OUTPUTLANGUAGES);
comment|/*       Get the source language (Cpp) from the configuration       and the location in the configuration file where the       source language was set.      */
name|QString
name|lang
init|=
name|config
operator|.
name|getString
argument_list|(
name|CONFIG_LANGUAGE
argument_list|)
decl_stmt|;
name|Location
name|langLocation
init|=
name|config
operator|.
name|lastLocation
argument_list|()
decl_stmt|;
comment|/*       Initialize the qdoc database, where all the parsed source files       will be stored. The database includes a tree of nodes, which gets       built as the source files are parsed. The documentation output is       generated by traversing that tree.        Note: qdocDB() allocates a new instance only if no instance exists.       So it is safe to call qdocDB() any time.      */
name|QDocDatabase
modifier|*
name|qdb
init|=
name|QDocDatabase
operator|::
name|qdocDB
argument_list|()
decl_stmt|;
name|qdb
operator|->
name|setVersion
argument_list|(
name|config
operator|.
name|getString
argument_list|(
name|CONFIG_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|qdb
operator|->
name|setShowInternal
argument_list|(
name|config
operator|.
name|getBool
argument_list|(
name|CONFIG_SHOWINTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|qdb
operator|->
name|setSingleExec
argument_list|(
name|config
operator|.
name|getBool
argument_list|(
name|CONFIG_SINGLEEXEC
argument_list|)
argument_list|)
expr_stmt|;
comment|/*       By default, the only output format is HTML.      */
name|QSet
argument_list|<
name|QString
argument_list|>
name|outputFormats
init|=
name|config
operator|.
name|getOutputFormats
argument_list|()
decl_stmt|;
name|Location
name|outputFormatsLocation
init|=
name|config
operator|.
name|lastLocation
argument_list|()
decl_stmt|;
name|qdb
operator|->
name|clearSearchOrder
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|Generator
operator|::
name|singleExec
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|Generator
operator|::
name|preparing
argument_list|()
condition|)
block|{
name|Generator
operator|::
name|debug
argument_list|(
literal|"  loading index files"
argument_list|)
expr_stmt|;
name|loadIndexFiles
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Generator
operator|::
name|debug
argument_list|(
literal|"  done loading index files"
argument_list|)
expr_stmt|;
block|}
name|qdb
operator|->
name|newPrimaryTree
argument_list|(
name|project
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Generator
operator|::
name|preparing
argument_list|()
condition|)
name|qdb
operator|->
name|newPrimaryTree
argument_list|(
name|project
argument_list|)
expr_stmt|;
else|else
name|qdb
operator|->
name|setPrimaryTree
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|dependModules
operator|=
name|config
operator|.
name|getStringList
argument_list|(
name|CONFIG_DEPENDS
argument_list|)
expr_stmt|;
name|dependModules
operator|.
name|removeDuplicates
argument_list|()
expr_stmt|;
name|qdb
operator|->
name|setSearchOrder
argument_list|(
name|dependModules
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|excludedDirs
decl_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|excludedFiles
decl_stmt|;
name|QStringList
name|excludedDirsList
decl_stmt|;
name|QStringList
name|excludedFilesList
decl_stmt|;
if|if
condition|(
operator|!
name|Generator
operator|::
name|singleExec
argument_list|()
operator|||
operator|!
name|Generator
operator|::
name|generating
argument_list|()
condition|)
block|{
name|QStringList
name|headerList
decl_stmt|;
name|QStringList
name|sourceList
decl_stmt|;
name|Generator
operator|::
name|debug
argument_list|(
literal|"Reading excludedirs"
argument_list|)
expr_stmt|;
name|excludedDirsList
operator|=
name|config
operator|.
name|getCanonicalPathList
argument_list|(
name|CONFIG_EXCLUDEDIRS
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|excludeDir
decl|,
name|excludedDirsList
control|)
block|{
name|QString
name|p
init|=
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|excludeDir
argument_list|)
decl_stmt|;
name|QDir
name|tmp
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|exists
argument_list|()
condition|)
name|excludedDirs
operator|.
name|insert
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|Generator
operator|::
name|debug
argument_list|(
literal|"Reading excludefiles"
argument_list|)
expr_stmt|;
name|excludedFilesList
operator|=
name|config
operator|.
name|getCanonicalPathList
argument_list|(
name|CONFIG_EXCLUDEFILES
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|excludeFile
decl|,
name|excludedFilesList
control|)
block|{
name|QString
name|p
init|=
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|excludeFile
argument_list|)
decl_stmt|;
name|excludedFiles
operator|.
name|insert
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|Generator
operator|::
name|debug
argument_list|(
literal|"Reading headerdirs"
argument_list|)
expr_stmt|;
name|headerList
operator|=
name|config
operator|.
name|getAllFiles
argument_list|(
name|CONFIG_HEADERS
argument_list|,
name|CONFIG_HEADERDIRS
argument_list|,
name|excludedDirs
argument_list|,
name|excludedFiles
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|headers
decl_stmt|;
name|QMultiMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|headerFileNames
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|headerList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|headerList
index|[
name|i
index|]
operator|.
name|contains
argument_list|(
name|QString
argument_list|(
literal|"doc/snippets"
argument_list|)
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|headers
operator|.
name|contains
argument_list|(
name|headerList
index|[
name|i
index|]
argument_list|)
condition|)
continue|continue;
name|headers
operator|.
name|insert
argument_list|(
name|headerList
index|[
name|i
index|]
argument_list|,
name|headerList
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QString
name|t
init|=
name|headerList
index|[
name|i
index|]
operator|.
name|mid
argument_list|(
name|headerList
index|[
name|i
index|]
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|headerFileNames
operator|.
name|insert
argument_list|(
name|t
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|Generator
operator|::
name|debug
argument_list|(
literal|"Reading sourcedirs"
argument_list|)
expr_stmt|;
name|sourceList
operator|=
name|config
operator|.
name|getAllFiles
argument_list|(
name|CONFIG_SOURCES
argument_list|,
name|CONFIG_SOURCEDIRS
argument_list|,
name|excludedDirs
argument_list|,
name|excludedFiles
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|sources
decl_stmt|;
name|QMultiMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|sourceFileNames
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|sourceList
index|[
name|i
index|]
operator|.
name|contains
argument_list|(
name|QString
argument_list|(
literal|"doc/snippets"
argument_list|)
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|sources
operator|.
name|contains
argument_list|(
name|sourceList
index|[
name|i
index|]
argument_list|)
condition|)
continue|continue;
name|sources
operator|.
name|insert
argument_list|(
name|sourceList
index|[
name|i
index|]
argument_list|,
name|sourceList
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QString
name|t
init|=
name|sourceList
index|[
name|i
index|]
operator|.
name|mid
argument_list|(
name|sourceList
index|[
name|i
index|]
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|sourceFileNames
operator|.
name|insert
argument_list|(
name|t
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|/*           Find all the qdoc files in the example dirs, and add           them to the source files to be parsed.         */
name|Generator
operator|::
name|debug
argument_list|(
literal|"Reading exampledirs"
argument_list|)
expr_stmt|;
name|QStringList
name|exampleQdocList
init|=
name|config
operator|.
name|getExampleQdocFiles
argument_list|(
name|excludedDirs
argument_list|,
name|excludedFiles
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exampleQdocList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|sources
operator|.
name|contains
argument_list|(
name|exampleQdocList
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|sources
operator|.
name|insert
argument_list|(
name|exampleQdocList
index|[
name|i
index|]
argument_list|,
name|exampleQdocList
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QString
name|t
init|=
name|exampleQdocList
index|[
name|i
index|]
operator|.
name|mid
argument_list|(
name|exampleQdocList
index|[
name|i
index|]
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|sourceFileNames
operator|.
name|insert
argument_list|(
name|t
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|Generator
operator|::
name|debug
argument_list|(
literal|"Adding doc/image dirs found in exampledirs to imagedirs"
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|exampleImageDirs
decl_stmt|;
name|QStringList
name|exampleImageList
init|=
name|config
operator|.
name|getExampleImageFiles
argument_list|(
name|excludedDirs
argument_list|,
name|excludedFiles
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exampleImageList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|exampleImageList
index|[
name|i
index|]
operator|.
name|contains
argument_list|(
literal|"doc/images"
argument_list|)
condition|)
block|{
name|QString
name|t
init|=
name|exampleImageList
index|[
name|i
index|]
operator|.
name|left
argument_list|(
name|exampleImageList
index|[
name|i
index|]
operator|.
name|lastIndexOf
argument_list|(
literal|"doc/images"
argument_list|)
operator|+
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|exampleImageDirs
operator|.
name|contains
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|exampleImageDirs
operator|.
name|insert
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Generator
operator|::
name|augmentImageDirs
argument_list|(
name|exampleImageDirs
argument_list|)
expr_stmt|;
comment|/*           Parse each header file in the set using the appropriate parser and add it           to the big tree.         */
name|QSet
argument_list|<
name|CodeParser
modifier|*
argument_list|>
name|usedParsers
decl_stmt|;
name|Generator
operator|::
name|debug
argument_list|(
literal|"Parsing header files"
argument_list|)
expr_stmt|;
name|int
name|parsed
init|=
literal|0
decl_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
operator|::
name|ConstIterator
name|h
init|=
name|headers
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|h
operator|!=
name|headers
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|CodeParser
modifier|*
name|codeParser
init|=
name|CodeParser
operator|::
name|parserForHeaderFile
argument_list|(
name|h
operator|.
name|key
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|codeParser
condition|)
block|{
operator|++
name|parsed
expr_stmt|;
name|Generator
operator|::
name|debug
argument_list|(
name|QString
argument_list|(
literal|"Parsing "
operator|+
name|h
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|codeParser
operator|->
name|parseHeaderFile
argument_list|(
name|config
operator|.
name|location
argument_list|()
argument_list|,
name|h
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
name|usedParsers
operator|.
name|insert
argument_list|(
name|codeParser
argument_list|)
expr_stmt|;
block|}
operator|++
name|h
expr_stmt|;
block|}
foreach|foreach
control|(
name|CodeParser
modifier|*
name|codeParser
decl|,
name|usedParsers
control|)
name|codeParser
operator|->
name|doneParsingHeaderFiles
argument_list|()
expr_stmt|;
name|usedParsers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qdb
operator|->
name|resolveInheritance
argument_list|()
expr_stmt|;
comment|/*           Parse each source text file in the set using the appropriate parser and           add it to the big tree.         */
name|parsed
operator|=
literal|0
expr_stmt|;
name|Generator
operator|::
name|debug
argument_list|(
literal|"Parsing source files"
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
operator|::
name|ConstIterator
name|s
init|=
name|sources
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|s
operator|!=
name|sources
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|CodeParser
modifier|*
name|codeParser
init|=
name|CodeParser
operator|::
name|parserForSourceFile
argument_list|(
name|s
operator|.
name|key
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|codeParser
condition|)
block|{
operator|++
name|parsed
expr_stmt|;
name|Generator
operator|::
name|debug
argument_list|(
name|QString
argument_list|(
literal|"Parsing "
operator|+
name|s
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|codeParser
operator|->
name|parseSourceFile
argument_list|(
name|config
operator|.
name|location
argument_list|()
argument_list|,
name|s
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
name|usedParsers
operator|.
name|insert
argument_list|(
name|codeParser
argument_list|)
expr_stmt|;
block|}
operator|++
name|s
expr_stmt|;
block|}
name|Generator
operator|::
name|debug
argument_list|(
name|QString
argument_list|(
literal|"Parsing done."
argument_list|)
argument_list|)
expr_stmt|;
comment|/*           Currently these doneParsingSourceFiles() calls do nothing.          */
foreach|foreach
control|(
name|CodeParser
modifier|*
name|codeParser
decl|,
name|usedParsers
control|)
name|codeParser
operator|->
name|doneParsingSourceFiles
argument_list|()
expr_stmt|;
comment|/*           Now the primary tree has been built from all the header and           source files. Resolve all the class names, function names,           targets, URLs, links, and other stuff that needs resolving.         */
name|Generator
operator|::
name|debug
argument_list|(
literal|"Resolving stuff prior to generating docs"
argument_list|)
expr_stmt|;
name|qdb
operator|->
name|resolveIssues
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Generator
operator|::
name|debug
argument_list|(
literal|"Reading excludedirs"
argument_list|)
expr_stmt|;
name|excludedDirsList
operator|=
name|config
operator|.
name|getCanonicalPathList
argument_list|(
name|CONFIG_EXCLUDEDIRS
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|excludeDir
decl|,
name|excludedDirsList
control|)
block|{
name|QString
name|p
init|=
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|excludeDir
argument_list|)
decl_stmt|;
name|QDir
name|tmp
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|exists
argument_list|()
condition|)
name|excludedDirs
operator|.
name|insert
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|Generator
operator|::
name|debug
argument_list|(
literal|"Reading excludefiles"
argument_list|)
expr_stmt|;
name|excludedFilesList
operator|=
name|config
operator|.
name|getCanonicalPathList
argument_list|(
name|CONFIG_EXCLUDEFILES
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|excludeFile
decl|,
name|excludedFilesList
control|)
block|{
name|QString
name|p
init|=
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|excludeFile
argument_list|)
decl_stmt|;
name|excludedFiles
operator|.
name|insert
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|Generator
operator|::
name|debug
argument_list|(
literal|"Adding doc/image dirs found in exampledirs to imagedirs"
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|exampleImageDirs
decl_stmt|;
name|QStringList
name|exampleImageList
init|=
name|config
operator|.
name|getExampleImageFiles
argument_list|(
name|excludedDirs
argument_list|,
name|excludedFiles
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exampleImageList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|exampleImageList
index|[
name|i
index|]
operator|.
name|contains
argument_list|(
literal|"doc/images"
argument_list|)
condition|)
block|{
name|QString
name|t
init|=
name|exampleImageList
index|[
name|i
index|]
operator|.
name|left
argument_list|(
name|exampleImageList
index|[
name|i
index|]
operator|.
name|lastIndexOf
argument_list|(
literal|"doc/images"
argument_list|)
operator|+
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|exampleImageDirs
operator|.
name|contains
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|exampleImageDirs
operator|.
name|insert
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Generator
operator|::
name|augmentImageDirs
argument_list|(
name|exampleImageDirs
argument_list|)
expr_stmt|;
name|qdb
operator|->
name|resolveStuff
argument_list|()
expr_stmt|;
block|}
comment|/*       The primary tree is built and all the stuff that needed       resolving has been resolved. Now traverse the tree and       generate the documentation output. More than one output       format can be requested. The tree is traversed for each       one.      */
name|Generator
operator|::
name|debug
argument_list|(
literal|"Generating docs"
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
operator|::
name|ConstIterator
name|of
init|=
name|outputFormats
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|of
operator|!=
name|outputFormats
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|Generator
modifier|*
name|generator
init|=
name|Generator
operator|::
name|generatorForFormat
argument_list|(
operator|*
name|of
argument_list|)
decl_stmt|;
if|if
condition|(
name|generator
operator|==
literal|0
condition|)
name|outputFormatsLocation
operator|.
name|fatal
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QDoc"
argument_list|,
literal|"Unknown output format '%1'"
argument_list|)
operator|.
name|arg
argument_list|(
operator|*
name|of
argument_list|)
argument_list|)
expr_stmt|;
name|generator
operator|->
name|generateDocs
argument_list|()
expr_stmt|;
operator|++
name|of
expr_stmt|;
block|}
if|#
directive|if
literal|0
block|if (Generator::generating()&& Generator::writeQaPages())         qdb->printLinkCounts(project);
endif|#
directive|endif
name|qdb
operator|->
name|clearLinkCounts
argument_list|()
expr_stmt|;
name|Generator
operator|::
name|debug
argument_list|(
literal|"Terminating qdoc classes"
argument_list|)
expr_stmt|;
if|if
condition|(
name|Generator
operator|::
name|debugging
argument_list|()
condition|)
name|Generator
operator|::
name|stopDebugging
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|QDocDatabase
operator|::
name|qdocDB
argument_list|()
operator|->
name|setVersion
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|Generator
operator|::
name|terminate
argument_list|()
expr_stmt|;
name|CodeParser
operator|::
name|terminate
argument_list|()
expr_stmt|;
name|CodeMarker
operator|::
name|terminate
argument_list|()
expr_stmt|;
name|Doc
operator|::
name|terminate
argument_list|()
expr_stmt|;
name|Tokenizer
operator|::
name|terminate
argument_list|()
expr_stmt|;
name|Location
operator|::
name|terminate
argument_list|()
expr_stmt|;
name|QDir
operator|::
name|setCurrent
argument_list|(
name|prevCurrentDir
argument_list|)
expr_stmt|;
name|Generator
operator|::
name|debug
argument_list|(
literal|"qdoc classes terminated"
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
specifier|extern
name|Q_CORE_EXPORT
name|QBasicAtomicInt
name|qt_qhash_seed
decl_stmt|;
end_decl_stmt
begin_function
name|QT_END_NAMESPACE
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QT_USE_NAMESPACE
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
name|qt_qhash_seed
operator|.
name|testAndSetRelaxed
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// set the hash seed to 0 if it wasn't set yet
endif|#
directive|endif
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|app
operator|.
name|setApplicationVersion
argument_list|(
name|QStringLiteral
argument_list|(
name|QT_VERSION_STR
argument_list|)
argument_list|)
expr_stmt|;
comment|/*       Create code parsers for the languages to be parsed,       and create a tree for C++.      */
name|CppCodeParser
name|cppParser
decl_stmt|;
name|QmlCodeParser
name|qmlParser
decl_stmt|;
name|PureDocParser
name|docParser
decl_stmt|;
comment|/*       Create code markers for plain text, C++,       javascript, and QML.      */
name|PlainCodeMarker
name|plainMarker
decl_stmt|;
name|CppCodeMarker
name|cppMarker
decl_stmt|;
name|JsCodeMarker
name|jsMarker
decl_stmt|;
name|QmlCodeMarker
name|qmlMarker
decl_stmt|;
name|HtmlGenerator
name|htmlGenerator
decl_stmt|;
name|QCommandLineParser
name|parser
decl_stmt|;
name|parser
operator|.
name|setApplicationDescription
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"qdoc"
argument_list|,
literal|"Qt documentation generator"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addHelpOption
argument_list|()
expr_stmt|;
name|parser
operator|.
name|addVersionOption
argument_list|()
expr_stmt|;
name|parser
operator|.
name|setSingleDashWordOptionMode
argument_list|(
name|QCommandLineParser
operator|::
name|ParseAsLongOptions
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addPositionalArgument
argument_list|(
literal|"file1.qdocconf ..."
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"qdoc"
argument_list|,
literal|"Input files"
argument_list|)
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|defineOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"D"
argument_list|)
argument_list|)
decl_stmt|;
name|defineOption
operator|.
name|setDescription
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"qdoc"
argument_list|,
literal|"Define the argument as a macro while parsing sources"
argument_list|)
argument_list|)
expr_stmt|;
name|defineOption
operator|.
name|setValueName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"macro[=def]"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|defineOption
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|dependsOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"depends"
argument_list|)
argument_list|)
decl_stmt|;
name|dependsOption
operator|.
name|setDescription
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"qdoc"
argument_list|,
literal|"Specify dependent modules"
argument_list|)
argument_list|)
expr_stmt|;
name|dependsOption
operator|.
name|setValueName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"module"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|dependsOption
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|highlightingOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"highlighting"
argument_list|)
argument_list|)
decl_stmt|;
name|highlightingOption
operator|.
name|setDescription
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"qdoc"
argument_list|,
literal|"Turn on syntax highlighting (makes qdoc run slower)"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|highlightingOption
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|showInternalOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"showinternal"
argument_list|)
argument_list|)
decl_stmt|;
name|showInternalOption
operator|.
name|setDescription
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"qdoc"
argument_list|,
literal|"Include content marked internal"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|showInternalOption
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|redirectDocumentationToDevNullOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"redirect-documentation-to-dev-null"
argument_list|)
argument_list|)
decl_stmt|;
name|redirectDocumentationToDevNullOption
operator|.
name|setDescription
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"qdoc"
argument_list|,
literal|"Save all documentation content to /dev/null. Useful if someone is interested in qdoc errors only."
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|redirectDocumentationToDevNullOption
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|noExamplesOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"no-examples"
argument_list|)
argument_list|)
decl_stmt|;
name|noExamplesOption
operator|.
name|setDescription
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"qdoc"
argument_list|,
literal|"Do not generate documentation for examples"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|noExamplesOption
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|indexDirOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"indexdir"
argument_list|)
argument_list|)
decl_stmt|;
name|indexDirOption
operator|.
name|setDescription
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"qdoc"
argument_list|,
literal|"Specify a directory where QDoc should search for index files to load"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDirOption
operator|.
name|setValueName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"dir"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|indexDirOption
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|installDirOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"installdir"
argument_list|)
argument_list|)
decl_stmt|;
name|installDirOption
operator|.
name|setDescription
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"qdoc"
argument_list|,
literal|"Specify the directory where the output will be after running \"make install\""
argument_list|)
argument_list|)
expr_stmt|;
name|installDirOption
operator|.
name|setValueName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"dir"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|installDirOption
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|obsoleteLinksOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"obsoletelinks"
argument_list|)
argument_list|)
decl_stmt|;
name|obsoleteLinksOption
operator|.
name|setDescription
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"qdoc"
argument_list|,
literal|"Report links from obsolete items to non-obsolete items"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|obsoleteLinksOption
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|outputDirOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"outputdir"
argument_list|)
argument_list|)
decl_stmt|;
name|outputDirOption
operator|.
name|setDescription
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"qdoc"
argument_list|,
literal|"Specify output directory, overrides setting in qdocconf file"
argument_list|)
argument_list|)
expr_stmt|;
name|outputDirOption
operator|.
name|setValueName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"dir"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|outputDirOption
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|outputFormatOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"outputformat"
argument_list|)
argument_list|)
decl_stmt|;
name|outputFormatOption
operator|.
name|setDescription
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"qdoc"
argument_list|,
literal|"Specify output format, overrides setting in qdocconf file"
argument_list|)
argument_list|)
expr_stmt|;
name|outputFormatOption
operator|.
name|setValueName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"format"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|outputFormatOption
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|noLinkErrorsOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"no-link-errors"
argument_list|)
argument_list|)
decl_stmt|;
name|noLinkErrorsOption
operator|.
name|setDescription
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"qdoc"
argument_list|,
literal|"Do not print link errors (i.e. missing targets)"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|noLinkErrorsOption
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|autoLinkErrorsOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"autolink-errors"
argument_list|)
argument_list|)
decl_stmt|;
name|autoLinkErrorsOption
operator|.
name|setDescription
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"qdoc"
argument_list|,
literal|"Show errors when automatic linking fails"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|autoLinkErrorsOption
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|debugOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"debug"
argument_list|)
argument_list|)
decl_stmt|;
name|debugOption
operator|.
name|setDescription
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"qdoc"
argument_list|,
literal|"Enable debug output"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|debugOption
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|prepareOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"prepare"
argument_list|)
argument_list|)
decl_stmt|;
name|prepareOption
operator|.
name|setDescription
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"qdoc"
argument_list|,
literal|"Run qdoc only to generate an index file, not the docs"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|prepareOption
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|generateOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"generate"
argument_list|)
argument_list|)
decl_stmt|;
name|generateOption
operator|.
name|setDescription
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"qdoc"
argument_list|,
literal|"Run qdoc to read the index files and generate the docs"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|generateOption
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|logProgressOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"log-progress"
argument_list|)
argument_list|)
decl_stmt|;
name|logProgressOption
operator|.
name|setDescription
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"qdoc"
argument_list|,
literal|"Log progress on stderr."
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|logProgressOption
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|singleExecOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"single-exec"
argument_list|)
argument_list|)
decl_stmt|;
name|singleExecOption
operator|.
name|setDescription
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"qdoc"
argument_list|,
literal|"Run qdoc once over all the qdoc conf files."
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|singleExecOption
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|writeQaPagesOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"write-qa-pages"
argument_list|)
argument_list|)
decl_stmt|;
name|writeQaPagesOption
operator|.
name|setDescription
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"qdoc"
argument_list|,
literal|"Write QA pages."
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|writeQaPagesOption
argument_list|)
expr_stmt|;
name|parser
operator|.
name|process
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|defines
operator|+=
name|parser
operator|.
name|values
argument_list|(
name|defineOption
argument_list|)
expr_stmt|;
name|dependModules
operator|+=
name|parser
operator|.
name|values
argument_list|(
name|dependsOption
argument_list|)
expr_stmt|;
name|highlighting
operator|=
name|parser
operator|.
name|isSet
argument_list|(
name|highlightingOption
argument_list|)
expr_stmt|;
name|showInternal
operator|=
name|parser
operator|.
name|isSet
argument_list|(
name|showInternalOption
argument_list|)
expr_stmt|;
name|singleExec
operator|=
name|parser
operator|.
name|isSet
argument_list|(
name|singleExecOption
argument_list|)
expr_stmt|;
name|writeQaPages
operator|=
name|parser
operator|.
name|isSet
argument_list|(
name|writeQaPagesOption
argument_list|)
expr_stmt|;
name|redirectDocumentationToDevNull
operator|=
name|parser
operator|.
name|isSet
argument_list|(
name|redirectDocumentationToDevNullOption
argument_list|)
expr_stmt|;
name|Config
operator|::
name|generateExamples
operator|=
operator|!
name|parser
operator|.
name|isSet
argument_list|(
name|noExamplesOption
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|indexDir
decl|,
name|parser
operator|.
name|values
argument_list|(
name|indexDirOption
argument_list|)
control|)
block|{
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|indexDir
argument_list|)
condition|)
name|indexDirs
operator|+=
name|indexDir
expr_stmt|;
else|else
name|qDebug
argument_list|()
operator|<<
literal|"Cannot find index directory"
operator|<<
name|indexDir
expr_stmt|;
block|}
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|installDirOption
argument_list|)
condition|)
name|Config
operator|::
name|installDir
operator|=
name|parser
operator|.
name|value
argument_list|(
name|installDirOption
argument_list|)
expr_stmt|;
name|obsoleteLinks
operator|=
name|parser
operator|.
name|isSet
argument_list|(
name|obsoleteLinksOption
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|outputDirOption
argument_list|)
condition|)
name|Config
operator|::
name|overrideOutputDir
operator|=
name|parser
operator|.
name|value
argument_list|(
name|outputDirOption
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|format
decl|,
name|parser
operator|.
name|values
argument_list|(
name|outputFormatOption
argument_list|)
control|)
name|Config
operator|::
name|overrideOutputFormats
operator|.
name|insert
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|noLinkErrors
operator|=
name|parser
operator|.
name|isSet
argument_list|(
name|noLinkErrorsOption
argument_list|)
expr_stmt|;
name|autolinkErrors
operator|=
name|parser
operator|.
name|isSet
argument_list|(
name|autoLinkErrorsOption
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|debugOption
argument_list|)
condition|)
name|Generator
operator|::
name|startDebugging
argument_list|(
name|QString
argument_list|(
literal|"command line"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|prepareOption
argument_list|)
condition|)
name|Generator
operator|::
name|setQDocPass
argument_list|(
name|Generator
operator|::
name|Prepare
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|generateOption
argument_list|)
condition|)
name|Generator
operator|::
name|setQDocPass
argument_list|(
name|Generator
operator|::
name|Generate
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|singleExecOption
argument_list|)
condition|)
name|Generator
operator|::
name|setSingleExec
argument_list|()
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|writeQaPagesOption
argument_list|)
condition|)
name|Generator
operator|::
name|setWriteQaPages
argument_list|()
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|logProgressOption
argument_list|)
condition|)
name|Location
operator|::
name|startLoggingProgress
argument_list|()
expr_stmt|;
comment|/*       The default indent for code is 0.       The default value for false is 0.       The default supported file extensions are cpp, h, qdoc and qml.       The default language is c++.       The default output format is html.       The default tab size is 8.       And those are all the default values for configuration variables.      */
if|if
condition|(
name|defaults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|defaults
operator|.
name|insert
argument_list|(
name|CONFIG_CODEINDENT
argument_list|,
name|QLatin1String
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|insert
argument_list|(
name|CONFIG_FALSEHOODS
argument_list|,
name|QLatin1String
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|insert
argument_list|(
name|CONFIG_FILEEXTENSIONS
argument_list|,
name|QLatin1String
argument_list|(
literal|"*.cpp *.h *.qdoc *.qml"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|insert
argument_list|(
name|CONFIG_LANGUAGE
argument_list|,
name|QLatin1String
argument_list|(
literal|"Cpp"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|insert
argument_list|(
name|CONFIG_OUTPUTFORMATS
argument_list|,
name|QLatin1String
argument_list|(
literal|"HTML"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|insert
argument_list|(
name|CONFIG_TABSIZE
argument_list|,
name|QLatin1String
argument_list|(
literal|"8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QStringList
name|qdocFiles
init|=
name|parser
operator|.
name|positionalArguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|qdocFiles
operator|.
name|isEmpty
argument_list|()
condition|)
name|parser
operator|.
name|showHelp
argument_list|()
expr_stmt|;
if|if
condition|(
name|singleExec
condition|)
name|qdocFiles
operator|=
name|Config
operator|::
name|loadMaster
argument_list|(
name|qdocFiles
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|/*       Main loop is now modified to handle single exec mode.      */
if|if
condition|(
name|Generator
operator|::
name|singleExec
argument_list|()
condition|)
name|Generator
operator|::
name|setQDocPass
argument_list|(
name|Generator
operator|::
name|Prepare
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|qf
decl|,
name|qdocFiles
control|)
block|{
name|dependModules
operator|.
name|clear
argument_list|()
expr_stmt|;
name|processQdocconfFile
argument_list|(
name|qf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Generator
operator|::
name|singleExec
argument_list|()
condition|)
block|{
name|Generator
operator|::
name|setQDocPass
argument_list|(
name|Generator
operator|::
name|Generate
argument_list|)
expr_stmt|;
name|QDocDatabase
modifier|*
name|qdb
init|=
name|QDocDatabase
operator|::
name|qdocDB
argument_list|()
decl_stmt|;
name|qdb
operator|->
name|processForest
argument_list|()
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|qf
decl|,
name|qdocFiles
control|)
block|{
name|dependModules
operator|.
name|clear
argument_list|()
expr_stmt|;
name|processQdocconfFile
argument_list|(
name|qf
argument_list|)
expr_stmt|;
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_TRANSLATION
if|if
condition|(
operator|!
name|translators
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|translators
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
operator|delete
name|translators
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
expr_stmt|;
block|}
block|}
name|translators
operator|.
name|clear
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QmlTypeNode
operator|::
name|terminate
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_SHUTDOWN_CRASH
name|qDebug
argument_list|()
operator|<<
literal|"main(): Delete qdoc database"
expr_stmt|;
endif|#
directive|endif
name|QDocDatabase
operator|::
name|destroyQdocDB
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_SHUTDOWN_CRASH
name|qDebug
argument_list|()
operator|<<
literal|"main(): qdoc database deleted"
expr_stmt|;
endif|#
directive|endif
return|return
name|EXIT_SUCCESS
return|;
block|}
end_function
end_unit
