begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*   openedlist.cpp */
end_comment
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_include
include|#
directive|include
file|"atom.h"
end_include
begin_include
include|#
directive|include
file|"openedlist.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|roman
specifier|static
specifier|const
name|char
name|roman
index|[]
init|=
literal|"m\2d\5c\2l\5x\2v\5i"
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|OpenedList
name|OpenedList
operator|::
name|OpenedList
parameter_list|(
name|Style
name|style
parameter_list|)
member_init_list|:
name|sty
argument_list|(
name|style
argument_list|)
member_init_list|,
name|ini
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|nex
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|OpenedList
name|OpenedList
operator|::
name|OpenedList
parameter_list|(
specifier|const
name|Location
modifier|&
name|location
parameter_list|,
specifier|const
name|QString
modifier|&
name|hint
parameter_list|)
member_init_list|:
name|sty
argument_list|(
name|Bullet
argument_list|)
member_init_list|,
name|ini
argument_list|(
literal|1
argument_list|)
block|{
name|QRegExp
name|hintSyntax
argument_list|(
literal|"(\\W*)([0-9]+|[A-Z]+|[a-z]+)(\\W*)"
argument_list|)
decl_stmt|;
if|if
condition|(
name|hintSyntax
operator|.
name|exactMatch
argument_list|(
name|hint
argument_list|)
condition|)
block|{
name|bool
name|ok
decl_stmt|;
name|int
name|asNumeric
init|=
name|hint
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
name|int
name|asRoman
init|=
name|fromRoman
argument_list|(
name|hintSyntax
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|asAlpha
init|=
name|fromAlpha
argument_list|(
name|hintSyntax
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
name|sty
operator|=
name|Numeric
expr_stmt|;
name|ini
operator|=
name|asNumeric
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|asRoman
operator|>
literal|0
operator|&&
name|asRoman
operator|!=
literal|100
operator|&&
name|asRoman
operator|!=
literal|500
condition|)
block|{
name|sty
operator|=
operator|(
name|hint
operator|==
name|hint
operator|.
name|toLower
argument_list|()
operator|)
condition|?
name|LowerRoman
else|:
name|UpperRoman
expr_stmt|;
name|ini
operator|=
name|asRoman
expr_stmt|;
block|}
else|else
block|{
name|sty
operator|=
operator|(
name|hint
operator|==
name|hint
operator|.
name|toLower
argument_list|()
operator|)
condition|?
name|LowerAlpha
else|:
name|UpperAlpha
expr_stmt|;
name|ini
operator|=
name|asAlpha
expr_stmt|;
block|}
name|pref
operator|=
name|hintSyntax
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|suff
operator|=
name|hintSyntax
operator|.
name|cap
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|hint
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|location
operator|.
name|warning
argument_list|(
name|tr
argument_list|(
literal|"Unrecognized list style '%1'"
argument_list|)
operator|.
name|arg
argument_list|(
name|hint
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|nex
operator|=
name|ini
operator|-
literal|1
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|styleString
name|QString
name|OpenedList
operator|::
name|styleString
parameter_list|()
specifier|const
block|{
switch|switch
condition|(
name|style
argument_list|()
condition|)
block|{
case|case
name|Bullet
case|:
default|default:
return|return
name|ATOM_LIST_BULLET
return|;
case|case
name|Tag
case|:
return|return
name|ATOM_LIST_TAG
return|;
case|case
name|Value
case|:
return|return
name|ATOM_LIST_VALUE
return|;
case|case
name|Numeric
case|:
return|return
name|ATOM_LIST_NUMERIC
return|;
case|case
name|UpperAlpha
case|:
return|return
name|ATOM_LIST_UPPERALPHA
return|;
case|case
name|LowerAlpha
case|:
return|return
name|ATOM_LIST_LOWERALPHA
return|;
case|case
name|UpperRoman
case|:
return|return
name|ATOM_LIST_UPPERROMAN
return|;
case|case
name|LowerRoman
case|:
return|return
name|ATOM_LIST_LOWERROMAN
return|;
block|}
block|}
end_function
begin_function
DECL|function|numberString
name|QString
name|OpenedList
operator|::
name|numberString
parameter_list|()
specifier|const
block|{
return|return
name|QString
operator|::
name|number
argument_list|(
name|number
argument_list|()
argument_list|)
return|;
comment|/*     switch ( style() ) {     case Numeric:  return QString::number( number() );     case UpperAlpha:  return toAlpha( number() ).toUpper();     case LowerAlpha:  return toAlpha( number() );     case UpperRoman:  return toRoman( number() ).toUpper();     case LowerRoman:  return toRoman( number() );     case Bullet:     default:  return "*";     }*/
block|}
end_function
begin_function
DECL|function|toAlpha
name|QString
name|OpenedList
operator|::
name|toAlpha
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|QString
name|str
decl_stmt|;
while|while
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|n
operator|--
expr_stmt|;
name|str
operator|.
name|prepend
argument_list|(
operator|(
name|n
operator|%
literal|26
operator|)
operator|+
literal|'a'
argument_list|)
expr_stmt|;
name|n
operator|/=
literal|26
expr_stmt|;
block|}
return|return
name|str
return|;
block|}
end_function
begin_function
DECL|function|fromAlpha
name|int
name|OpenedList
operator|::
name|fromAlpha
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
name|int
name|u
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|str
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|u
operator|=
name|str
index|[
name|i
index|]
operator|.
name|toLower
argument_list|()
operator|.
name|unicode
argument_list|()
expr_stmt|;
if|if
condition|(
name|u
operator|>=
literal|'a'
operator|&&
name|u
operator|<=
literal|'z'
condition|)
block|{
name|n
operator|*=
literal|26
expr_stmt|;
name|n
operator|+=
name|u
operator|-
literal|'a'
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
return|return
name|n
return|;
block|}
end_function
begin_function
DECL|function|toRoman
name|QString
name|OpenedList
operator|::
name|toRoman
parameter_list|(
name|int
name|n
parameter_list|)
block|{
comment|/*       See p. 30 of Donald E. Knuth's "TeX: The Program".     */
name|QString
name|str
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
name|int
name|k
decl_stmt|;
name|int
name|u
decl_stmt|;
name|int
name|v
init|=
literal|1000
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
while|while
condition|(
name|n
operator|>=
name|v
condition|)
block|{
name|str
operator|+=
name|roman
index|[
name|j
index|]
expr_stmt|;
name|n
operator|-=
name|v
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|<=
literal|0
condition|)
break|break;
name|k
operator|=
name|j
operator|+
literal|2
expr_stmt|;
name|u
operator|=
name|v
operator|/
name|roman
index|[
name|k
operator|-
literal|1
index|]
expr_stmt|;
if|if
condition|(
name|roman
index|[
name|k
operator|-
literal|1
index|]
operator|==
literal|2
condition|)
block|{
name|k
operator|+=
literal|2
expr_stmt|;
name|u
operator|/=
literal|5
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|+
name|u
operator|>=
name|v
condition|)
block|{
name|str
operator|+=
name|roman
index|[
name|k
index|]
expr_stmt|;
name|n
operator|+=
name|u
expr_stmt|;
block|}
else|else
block|{
name|j
operator|+=
literal|2
expr_stmt|;
name|v
operator|/=
name|roman
index|[
name|j
operator|-
literal|1
index|]
expr_stmt|;
block|}
block|}
return|return
name|str
return|;
block|}
end_function
begin_function
DECL|function|fromRoman
name|int
name|OpenedList
operator|::
name|fromRoman
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
name|int
name|j
decl_stmt|;
name|int
name|u
decl_stmt|;
name|int
name|v
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|str
operator|.
name|length
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|j
operator|=
literal|0
expr_stmt|;
name|u
operator|=
literal|1000
expr_stmt|;
while|while
condition|(
name|roman
index|[
name|j
index|]
operator|!=
literal|'i'
operator|&&
name|roman
index|[
name|j
index|]
operator|!=
name|str
index|[
name|i
index|]
operator|.
name|toLower
argument_list|()
condition|)
block|{
name|j
operator|+=
literal|2
expr_stmt|;
name|u
operator|/=
name|roman
index|[
name|j
operator|-
literal|1
index|]
expr_stmt|;
block|}
if|if
condition|(
name|u
operator|<
name|v
condition|)
block|{
name|n
operator|-=
name|u
expr_stmt|;
block|}
else|else
block|{
name|n
operator|+=
name|u
expr_stmt|;
block|}
name|v
operator|=
name|u
expr_stmt|;
block|}
if|if
condition|(
name|str
operator|.
name|toLower
argument_list|()
operator|==
name|toRoman
argument_list|(
name|n
argument_list|)
condition|)
block|{
return|return
name|n
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
