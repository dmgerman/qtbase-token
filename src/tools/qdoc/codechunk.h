begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*   codechunk.h */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|CODECHUNK_H
end_ifndef
begin_define
DECL|macro|CODECHUNK_H
define|#
directive|define
name|CODECHUNK_H
end_define
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// ### get rid of that class
comment|/*   The CodeChunk class represents a tiny piece of C++ code.    The class provides conversion between a list of lexemes and a string.  It adds   spaces at the right place for consistent style.  The tiny pieces of code it   represents are data types, enum values, and default parameter values.    Apart from the piece of code itself, there are two bits of metainformation   stored in CodeChunk: the base and the hotspot.  The base is the part of the   piece that may be a hypertext link.  The base of        QMap<QString, QString>    is QMap.    The hotspot is the place the variable name should be inserted in the case of a   variable (or parameter) declaration.  The base of        char * []    is between '*' and '[]'. */
name|class
name|CodeChunk
block|{
name|public
label|:
name|CodeChunk
argument_list|()
expr_stmt|;
name|CodeChunk
argument_list|(
specifier|const
name|QString
operator|&
name|str
argument_list|)
expr_stmt|;
name|void
name|append
parameter_list|(
specifier|const
name|QString
modifier|&
name|lexeme
parameter_list|)
function_decl|;
name|void
name|appendHotspot
parameter_list|()
function_decl|;
name|bool
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
name|s
operator|.
name|isEmpty
argument_list|()
return|;
block|}
name|QString
name|toString
argument_list|()
specifier|const
expr_stmt|;
name|QStringList
name|toPath
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|left
argument_list|()
specifier|const
block|{
return|return
name|s
operator|.
name|left
argument_list|(
name|hotspot
operator|==
operator|-
literal|1
operator|?
name|s
operator|.
name|length
argument_list|()
operator|:
name|hotspot
argument_list|)
return|;
block|}
name|QString
name|right
argument_list|()
specifier|const
block|{
return|return
name|s
operator|.
name|mid
argument_list|(
name|hotspot
operator|==
operator|-
literal|1
operator|?
name|s
operator|.
name|length
argument_list|()
operator|:
name|hotspot
argument_list|)
return|;
block|}
name|private
label|:
name|QString
name|s
decl_stmt|;
name|int
name|hotspot
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|CodeChunk
operator|&
name|c
operator|,
specifier|const
name|CodeChunk
operator|&
name|d
operator|)
block|{
return|return
name|c
operator|.
name|toString
argument_list|()
operator|==
name|d
operator|.
name|toString
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|CodeChunk
operator|&
name|c
operator|,
specifier|const
name|CodeChunk
operator|&
name|d
operator|)
block|{
return|return
operator|!
operator|(
name|c
operator|==
name|d
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|CodeChunk
operator|&
name|c
operator|,
specifier|const
name|CodeChunk
operator|&
name|d
operator|)
block|{
return|return
name|c
operator|.
name|toString
argument_list|()
operator|<
name|d
operator|.
name|toString
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|CodeChunk
operator|&
name|c
operator|,
specifier|const
name|CodeChunk
operator|&
name|d
operator|)
block|{
return|return
name|d
operator|<
name|c
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|CodeChunk
operator|&
name|c
operator|,
specifier|const
name|CodeChunk
operator|&
name|d
operator|)
block|{
return|return
operator|!
operator|(
name|c
operator|>
name|d
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|CodeChunk
operator|&
name|c
operator|,
specifier|const
name|CodeChunk
operator|&
name|d
operator|)
block|{
return|return
operator|!
operator|(
name|c
operator|<
name|d
operator|)
return|;
block|}
end_expr_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
