begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtQml module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QQMLJSKEYWORDS_P_H
end_ifndef
begin_define
DECL|macro|QQMLJSKEYWORDS_P_H
define|#
directive|define
name|QQMLJSKEYWORDS_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"qqmljslexer_p.h"
end_include
begin_decl_stmt
name|QT_QML_BEGIN_NAMESPACE
name|namespace
name|QQmlJS
block|{
specifier|static
specifier|inline
name|int
name|classify2
parameter_list|(
specifier|const
name|QChar
modifier|*
name|s
parameter_list|,
name|bool
name|qmlMode
parameter_list|)
block|{
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'s'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|Lexer
operator|::
name|T_AS
else|:
name|Lexer
operator|::
name|T_IDENTIFIER
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'d'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_DO
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'i'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'f'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_IF
return|;
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_IN
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|qmlMode
operator|&&
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|Lexer
operator|::
name|T_ON
else|:
name|Lexer
operator|::
name|T_IDENTIFIER
return|;
block|}
block|}
return|return
name|Lexer
operator|::
name|T_IDENTIFIER
return|;
block|}
specifier|static
specifier|inline
name|int
name|classify3
parameter_list|(
specifier|const
name|QChar
modifier|*
name|s
parameter_list|,
name|bool
name|qmlMode
parameter_list|)
block|{
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'f'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_FOR
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'g'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_GET
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'i'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_INT
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_IDENTIFIER
argument_list|)
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'w'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_NEW
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'s'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_SET
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'y'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_TRY
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'v'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_VAR
return|;
block|}
block|}
block|}
return|return
name|Lexer
operator|::
name|T_IDENTIFIER
return|;
block|}
specifier|static
specifier|inline
name|int
name|classify4
parameter_list|(
specifier|const
name|QChar
modifier|*
name|s
parameter_list|,
name|bool
name|qmlMode
parameter_list|)
block|{
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'b'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'y'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_BYTE
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_IDENTIFIER
argument_list|)
return|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'c'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'s'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_CASE
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'h'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_CHAR
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_IDENTIFIER
argument_list|)
return|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'l'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'s'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_ELSE
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'u'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'m'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_ENUM
return|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'g'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_GOTO
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_IDENTIFIER
argument_list|)
return|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'l'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'g'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_LONG
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_IDENTIFIER
argument_list|)
return|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'u'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'l'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'l'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_NULL
return|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'h'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'i'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'s'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_THIS
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'u'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_TRUE
return|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'v'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'i'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'d'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_VOID
return|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'w'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'i'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'h'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_WITH
return|;
block|}
block|}
block|}
block|}
return|return
name|Lexer
operator|::
name|T_IDENTIFIER
return|;
block|}
specifier|static
specifier|inline
name|int
name|classify5
parameter_list|(
specifier|const
name|QChar
modifier|*
name|s
parameter_list|,
name|bool
name|qmlMode
parameter_list|)
block|{
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'b'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'k'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_BREAK
return|;
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'c'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'c'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'h'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_CATCH
return|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'l'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'s'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'s'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_CLASS
return|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'s'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_CONST
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_RESERVED_WORD
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'f'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'l'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'s'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_FALSE
return|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'i'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'l'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_FINAL
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_IDENTIFIER
argument_list|)
return|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'l'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_FLOAT
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_IDENTIFIER
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'s'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'h'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_SHORT
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_IDENTIFIER
argument_list|)
return|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'u'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'p'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_SUPER
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_RESERVED_WORD
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'h'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'w'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_THROW
return|;
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'w'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'h'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'i'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'l'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_WHILE
return|;
block|}
block|}
block|}
block|}
block|}
return|return
name|Lexer
operator|::
name|T_IDENTIFIER
return|;
block|}
specifier|static
specifier|inline
name|int
name|classify6
parameter_list|(
specifier|const
name|QChar
modifier|*
name|s
parameter_list|,
name|bool
name|qmlMode
parameter_list|)
block|{
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'d'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'l'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_DELETE
return|;
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'u'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'b'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'l'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_DOUBLE
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_IDENTIFIER
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'x'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'p'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_EXPORT
return|;
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'i'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'m'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'p'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_IMPORT
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_RESERVED_WORD
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'i'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'v'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_NATIVE
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_IDENTIFIER
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'p'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'u'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'b'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'l'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'i'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'c'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|Lexer
operator|::
name|T_PUBLIC
else|:
name|Lexer
operator|::
name|T_IDENTIFIER
return|;
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'g'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'m'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|Lexer
operator|::
name|T_PRAGMA
else|:
name|Lexer
operator|::
name|T_IDENTIFIER
return|;
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'u'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_RETURN
return|;
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'s'
condition|)
block|{
if|if
condition|(
name|qmlMode
operator|&&
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'i'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'g'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'l'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_SIGNAL
return|;
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'i'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'c'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_STATIC
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_IDENTIFIER
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'w'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'i'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'c'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'h'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_SWITCH
return|;
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'h'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'w'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'s'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_THROWS
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_IDENTIFIER
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'y'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'p'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'f'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_TYPEOF
return|;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|Lexer
operator|::
name|T_IDENTIFIER
return|;
block|}
specifier|static
specifier|inline
name|int
name|classify7
parameter_list|(
specifier|const
name|QChar
modifier|*
name|s
parameter_list|,
name|bool
name|qmlMode
parameter_list|)
block|{
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'b'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'l'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|6
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_BOOLEAN
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_IDENTIFIER
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'d'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'f'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'u'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'l'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|6
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_DEFAULT
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'x'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'d'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|6
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'s'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_EXTENDS
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'f'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'i'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'l'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'l'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|6
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'y'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_FINALLY
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'p'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'c'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'k'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'g'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|6
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_PACKAGE
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_IDENTIFIER
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'i'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'v'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|6
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_PRIVATE
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_IDENTIFIER
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|Lexer
operator|::
name|T_IDENTIFIER
return|;
block|}
specifier|static
specifier|inline
name|int
name|classify8
parameter_list|(
specifier|const
name|QChar
modifier|*
name|s
parameter_list|,
name|bool
name|qmlMode
parameter_list|)
block|{
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'b'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'s'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|6
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'c'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|7
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_ABSTRACT
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_IDENTIFIER
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'c'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'i'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|6
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'u'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|7
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_CONTINUE
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'d'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'b'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'u'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'g'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'g'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|6
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|7
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_DEBUGGER
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'f'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'u'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'c'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'i'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|6
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|7
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_FUNCTION
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|qmlMode
operator|&&
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'p'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'p'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|6
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|7
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'y'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|Lexer
operator|::
name|T_PROPERTY
else|:
name|Lexer
operator|::
name|T_IDENTIFIER
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|qmlMode
operator|&&
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'d'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|6
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'l'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|7
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'y'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_READONLY
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'v'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'l'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'i'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|6
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'l'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|7
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_VOLATILE
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_IDENTIFIER
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|Lexer
operator|::
name|T_IDENTIFIER
return|;
block|}
specifier|static
specifier|inline
name|int
name|classify9
parameter_list|(
specifier|const
name|QChar
modifier|*
name|s
parameter_list|,
name|bool
name|qmlMode
parameter_list|)
block|{
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'i'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'f'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|6
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|7
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'c'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|8
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_INTERFACE
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_IDENTIFIER
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'p'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'c'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|6
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|7
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|8
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'d'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_PROTECTED
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_IDENTIFIER
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'s'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'i'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|6
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|7
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|8
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_TRANSIENT
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_IDENTIFIER
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|Lexer
operator|::
name|T_IDENTIFIER
return|;
block|}
specifier|static
specifier|inline
name|int
name|classify10
parameter_list|(
specifier|const
name|QChar
modifier|*
name|s
parameter_list|,
name|bool
name|qmlMode
parameter_list|)
block|{
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'i'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'m'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'p'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'l'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'m'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|6
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|7
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|8
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|9
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'s'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_IMPLEMENTS
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_IDENTIFIER
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'s'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'t'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|6
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'c'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|7
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|8
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|9
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'f'
condition|)
block|{
return|return
name|Lexer
operator|::
name|T_INSTANCEOF
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|Lexer
operator|::
name|T_IDENTIFIER
return|;
block|}
specifier|static
specifier|inline
name|int
name|classify12
parameter_list|(
specifier|const
name|QChar
modifier|*
name|s
parameter_list|,
name|bool
name|qmlMode
parameter_list|)
block|{
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'s'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'y'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|3
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'c'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|4
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'h'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|5
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'r'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|6
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|7
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'n'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|8
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'i'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|9
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'z'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|10
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'e'
condition|)
block|{
if|if
condition|(
name|s
index|[
literal|11
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|'d'
condition|)
block|{
return|return
name|qmlMode
condition|?
name|int
argument_list|(
name|Lexer
operator|::
name|T_SYNCHRONIZED
argument_list|)
else|:
name|int
argument_list|(
name|Lexer
operator|::
name|T_IDENTIFIER
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|Lexer
operator|::
name|T_IDENTIFIER
return|;
block|}
name|int
name|Lexer
operator|::
name|classify
argument_list|(
argument|const QChar *s
argument_list|,
argument|int n
argument_list|,
argument|bool qmlMode
argument_list|)
block|{
switch|switch
condition|(
name|n
condition|)
block|{
case|case
literal|2
case|:
return|return
name|classify2
argument_list|(
name|s
argument_list|,
name|qmlMode
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|classify3
argument_list|(
name|s
argument_list|,
name|qmlMode
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|classify4
argument_list|(
name|s
argument_list|,
name|qmlMode
argument_list|)
return|;
case|case
literal|5
case|:
return|return
name|classify5
argument_list|(
name|s
argument_list|,
name|qmlMode
argument_list|)
return|;
case|case
literal|6
case|:
return|return
name|classify6
argument_list|(
name|s
argument_list|,
name|qmlMode
argument_list|)
return|;
case|case
literal|7
case|:
return|return
name|classify7
argument_list|(
name|s
argument_list|,
name|qmlMode
argument_list|)
return|;
case|case
literal|8
case|:
return|return
name|classify8
argument_list|(
name|s
argument_list|,
name|qmlMode
argument_list|)
return|;
case|case
literal|9
case|:
return|return
name|classify9
argument_list|(
name|s
argument_list|,
name|qmlMode
argument_list|)
return|;
case|case
literal|10
case|:
return|return
name|classify10
argument_list|(
name|s
argument_list|,
name|qmlMode
argument_list|)
return|;
case|case
literal|12
case|:
return|return
name|classify12
argument_list|(
name|s
argument_list|,
name|qmlMode
argument_list|)
return|;
default|default:
return|return
name|Lexer
operator|::
name|T_IDENTIFIER
return|;
block|}
comment|// switch
block|}
block|}
end_decl_stmt
begin_comment
comment|// namespace QQmlJS
end_comment
begin_macro
name|QT_QML_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QQMLJSKEYWORDS_P_H
end_comment
end_unit
