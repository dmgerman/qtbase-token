begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtQml module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qqmljsengine_p.h"
end_include
begin_include
include|#
directive|include
file|"qqmljslexer_p.h"
end_include
begin_include
include|#
directive|include
file|"qqmljsast_p.h"
end_include
begin_include
include|#
directive|include
file|"qqmljsmemorypool_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_include
include|#
directive|include
file|"qqmljsparser_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qvarlengtharray.h>
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is automatically generated from qqmljs.g.
end_comment
begin_comment
comment|// Changes should be made to that file, not here. Any change to this file will
end_comment
begin_comment
comment|// be lost!
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// To regenerate this file, run:
end_comment
begin_comment
comment|//    qlalr --no-debug --no-lines --qt qqmljs.g
end_comment
begin_comment
comment|//
end_comment
begin_using
using|using
namespace|namespace
name|QQmlJS
namespace|;
end_using
begin_function
name|QT_QML_BEGIN_NAMESPACE
DECL|function|reallocateStack
name|void
name|Parser
operator|::
name|reallocateStack
parameter_list|()
block|{
if|if
condition|(
operator|!
name|stack_size
condition|)
name|stack_size
operator|=
literal|128
expr_stmt|;
else|else
name|stack_size
operator|<<=
literal|1
expr_stmt|;
name|sym_stack
operator|=
cast|reinterpret_cast
argument_list|<
name|Value
operator|*
argument_list|>
argument_list|(
name|realloc
argument_list|(
name|sym_stack
argument_list|,
name|stack_size
operator|*
sizeof|sizeof
argument_list|(
name|Value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|state_stack
operator|=
cast|reinterpret_cast
argument_list|<
name|int
operator|*
argument_list|>
argument_list|(
name|realloc
argument_list|(
name|state_stack
argument_list|,
name|stack_size
operator|*
sizeof|sizeof
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|location_stack
operator|=
cast|reinterpret_cast
argument_list|<
name|AST
operator|::
name|SourceLocation
operator|*
argument_list|>
argument_list|(
name|realloc
argument_list|(
name|location_stack
argument_list|,
name|stack_size
operator|*
sizeof|sizeof
argument_list|(
name|AST
operator|::
name|SourceLocation
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|string_stack
operator|=
cast|reinterpret_cast
argument_list|<
name|QStringRef
operator|*
argument_list|>
argument_list|(
name|realloc
argument_list|(
name|string_stack
argument_list|,
name|stack_size
operator|*
sizeof|sizeof
argument_list|(
name|QStringRef
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|Parser
name|Parser
operator|::
name|Parser
parameter_list|(
name|Engine
modifier|*
name|engine
parameter_list|)
member_init_list|:
name|driver
argument_list|(
name|engine
argument_list|)
member_init_list|,
name|pool
argument_list|(
name|engine
operator|->
name|pool
argument_list|()
argument_list|)
member_init_list|,
name|tos
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|stack_size
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sym_stack
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|state_stack
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|location_stack
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|string_stack
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|program
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|first_token
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|last_token
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~Parser
name|Parser
operator|::
name|~
name|Parser
parameter_list|()
block|{
if|if
condition|(
name|stack_size
condition|)
block|{
name|free
argument_list|(
name|sym_stack
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|state_stack
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|location_stack
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|string_stack
argument_list|)
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|location
specifier|static
specifier|inline
name|AST
operator|::
name|SourceLocation
name|location
parameter_list|(
name|Lexer
modifier|*
name|lexer
parameter_list|)
block|{
name|AST
operator|::
name|SourceLocation
name|loc
decl_stmt|;
name|loc
operator|.
name|offset
operator|=
name|lexer
operator|->
name|tokenOffset
argument_list|()
expr_stmt|;
name|loc
operator|.
name|length
operator|=
name|lexer
operator|->
name|tokenLength
argument_list|()
expr_stmt|;
name|loc
operator|.
name|startLine
operator|=
name|lexer
operator|->
name|tokenStartLine
argument_list|()
expr_stmt|;
name|loc
operator|.
name|startColumn
operator|=
name|lexer
operator|->
name|tokenStartColumn
argument_list|()
expr_stmt|;
return|return
name|loc
return|;
block|}
end_function
begin_function
DECL|function|reparseAsQualifiedId
name|AST
operator|::
name|UiQualifiedId
modifier|*
name|Parser
operator|::
name|reparseAsQualifiedId
parameter_list|(
name|AST
operator|::
name|ExpressionNode
modifier|*
name|expr
parameter_list|)
block|{
name|QVarLengthArray
argument_list|<
name|QStringRef
argument_list|,
literal|4
argument_list|>
name|nameIds
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|AST
operator|::
name|SourceLocation
argument_list|,
literal|4
argument_list|>
name|locations
decl_stmt|;
name|AST
operator|::
name|ExpressionNode
modifier|*
name|it
init|=
name|expr
decl_stmt|;
while|while
condition|(
name|AST
operator|::
name|FieldMemberExpression
modifier|*
name|m
init|=
name|AST
operator|::
name|cast
argument_list|<
name|AST
operator|::
name|FieldMemberExpression
operator|*
argument_list|>
argument_list|(
name|it
argument_list|)
condition|)
block|{
name|nameIds
operator|.
name|append
argument_list|(
name|m
operator|->
name|name
argument_list|)
expr_stmt|;
name|locations
operator|.
name|append
argument_list|(
name|m
operator|->
name|identifierToken
argument_list|)
expr_stmt|;
name|it
operator|=
name|m
operator|->
name|base
expr_stmt|;
block|}
if|if
condition|(
name|AST
operator|::
name|IdentifierExpression
modifier|*
name|idExpr
init|=
name|AST
operator|::
name|cast
argument_list|<
name|AST
operator|::
name|IdentifierExpression
operator|*
argument_list|>
argument_list|(
name|it
argument_list|)
condition|)
block|{
name|AST
operator|::
name|UiQualifiedId
modifier|*
name|q
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiQualifiedId
argument_list|(
name|idExpr
operator|->
name|name
argument_list|)
decl_stmt|;
name|q
operator|->
name|identifierToken
operator|=
name|idExpr
operator|->
name|identifierToken
expr_stmt|;
name|AST
operator|::
name|UiQualifiedId
modifier|*
name|currentId
init|=
name|q
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|nameIds
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|!=
operator|-
literal|1
condition|;
operator|--
name|i
control|)
block|{
name|currentId
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiQualifiedId
argument_list|(
name|currentId
argument_list|,
name|nameIds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|currentId
operator|->
name|identifierToken
operator|=
name|locations
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|currentId
operator|->
name|finish
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|reparseAsQualifiedPragmaId
name|AST
operator|::
name|UiQualifiedPragmaId
modifier|*
name|Parser
operator|::
name|reparseAsQualifiedPragmaId
parameter_list|(
name|AST
operator|::
name|ExpressionNode
modifier|*
name|expr
parameter_list|)
block|{
if|if
condition|(
name|AST
operator|::
name|IdentifierExpression
modifier|*
name|idExpr
init|=
name|AST
operator|::
name|cast
argument_list|<
name|AST
operator|::
name|IdentifierExpression
operator|*
argument_list|>
argument_list|(
name|expr
argument_list|)
condition|)
block|{
name|AST
operator|::
name|UiQualifiedPragmaId
modifier|*
name|q
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiQualifiedPragmaId
argument_list|(
name|idExpr
operator|->
name|name
argument_list|)
decl_stmt|;
name|q
operator|->
name|identifierToken
operator|=
name|idExpr
operator|->
name|identifierToken
expr_stmt|;
return|return
name|q
operator|->
name|finish
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|parse
name|bool
name|Parser
operator|::
name|parse
parameter_list|(
name|int
name|startToken
parameter_list|)
block|{
name|Lexer
modifier|*
name|lexer
init|=
name|driver
operator|->
name|lexer
argument_list|()
decl_stmt|;
name|bool
name|hadErrors
init|=
literal|false
decl_stmt|;
name|int
name|yytoken
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|action
init|=
literal|0
decl_stmt|;
name|token_buffer
index|[
literal|0
index|]
operator|.
name|token
operator|=
name|startToken
expr_stmt|;
name|first_token
operator|=
operator|&
name|token_buffer
index|[
literal|0
index|]
expr_stmt|;
name|last_token
operator|=
operator|&
name|token_buffer
index|[
literal|1
index|]
expr_stmt|;
name|tos
operator|=
operator|-
literal|1
expr_stmt|;
name|program
operator|=
literal|0
expr_stmt|;
do|do
block|{
if|if
condition|(
operator|++
name|tos
operator|==
name|stack_size
condition|)
name|reallocateStack
argument_list|()
expr_stmt|;
name|state_stack
index|[
name|tos
index|]
operator|=
name|action
expr_stmt|;
name|_Lcheck_token
label|:
if|if
condition|(
name|yytoken
operator|==
operator|-
literal|1
operator|&&
operator|-
name|TERMINAL_COUNT
operator|!=
name|action_index
index|[
name|action
index|]
condition|)
block|{
name|yyprevlloc
operator|=
name|yylloc
expr_stmt|;
if|if
condition|(
name|first_token
operator|==
name|last_token
condition|)
block|{
name|yytoken
operator|=
name|lexer
operator|->
name|lex
argument_list|()
expr_stmt|;
name|yylval
operator|=
name|lexer
operator|->
name|tokenValue
argument_list|()
expr_stmt|;
name|yytokenspell
operator|=
name|lexer
operator|->
name|tokenSpell
argument_list|()
expr_stmt|;
name|yylloc
operator|=
name|location
argument_list|(
name|lexer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|yytoken
operator|=
name|first_token
operator|->
name|token
expr_stmt|;
name|yylval
operator|=
name|first_token
operator|->
name|dval
expr_stmt|;
name|yytokenspell
operator|=
name|first_token
operator|->
name|spell
expr_stmt|;
name|yylloc
operator|=
name|first_token
operator|->
name|loc
expr_stmt|;
operator|++
name|first_token
expr_stmt|;
block|}
block|}
name|action
operator|=
name|t_action
argument_list|(
name|action
argument_list|,
name|yytoken
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|action
operator|!=
name|ACCEPT_STATE
condition|)
block|{
name|yytoken
operator|=
operator|-
literal|1
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|dval
operator|=
name|yylval
expr_stmt|;
name|stringRef
argument_list|(
literal|1
argument_list|)
operator|=
name|yytokenspell
expr_stmt|;
name|loc
argument_list|(
literal|1
argument_list|)
operator|=
name|yylloc
expr_stmt|;
block|}
else|else
block|{
operator|--
name|tos
expr_stmt|;
return|return
operator|!
name|hadErrors
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|action
operator|<
literal|0
condition|)
block|{
specifier|const
name|int
name|r
init|=
operator|-
name|action
operator|-
literal|1
decl_stmt|;
name|tos
operator|-=
name|rhs
index|[
name|r
index|]
expr_stmt|;
switch|switch
condition|(
name|r
condition|)
block|{
case|case
literal|0
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Node
expr_stmt|;
name|program
operator|=
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Node
expr_stmt|;
name|program
operator|=
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Node
expr_stmt|;
name|program
operator|=
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Node
expr_stmt|;
name|program
operator|=
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Node
expr_stmt|;
name|program
operator|=
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Node
expr_stmt|;
name|program
operator|=
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiProgram
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiProgram
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiHeaderItemList
argument_list|,
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|UiObjectMemberList
operator|->
name|finish
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiHeaderItemList
operator|->
name|finish
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiHeaderItemList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiPragma
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|10
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiHeaderItemList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiImport
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|11
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiHeaderItemList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiHeaderItemList
argument_list|,
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|UiPragma
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|12
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiHeaderItemList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiHeaderItemList
argument_list|,
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|UiImport
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|16
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiPragma
operator|->
name|semicolonToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|18
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiImport
operator|->
name|semicolonToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|20
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiImport
operator|->
name|versionToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiImport
operator|->
name|semicolonToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|22
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiImport
operator|->
name|versionToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiImport
operator|->
name|asToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiImport
operator|->
name|importIdToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiImport
operator|->
name|importId
operator|=
name|stringRef
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiImport
operator|->
name|semicolonToken
operator|=
name|loc
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|24
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiImport
operator|->
name|asToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiImport
operator|->
name|importIdToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiImport
operator|->
name|importId
operator|=
name|stringRef
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiImport
operator|->
name|semicolonToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|25
case|:
block|{
name|AST
operator|::
name|UiPragma
modifier|*
name|node
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|AST
operator|::
name|UiQualifiedPragmaId
modifier|*
name|qualifiedId
init|=
name|reparseAsQualifiedPragmaId
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Expression
argument_list|)
condition|)
block|{
name|node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiPragma
argument_list|(
name|qualifiedId
argument_list|)
expr_stmt|;
block|}
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
if|if
condition|(
name|node
condition|)
block|{
name|node
operator|->
name|pragmaToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|diagnostic_messages
operator|.
name|append
argument_list|(
name|DiagnosticMessage
argument_list|(
name|DiagnosticMessage
operator|::
name|Error
argument_list|,
name|loc
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Expected a qualified name id"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// ### remove me
block|}
block|}
break|break;
case|case
literal|26
case|:
block|{
name|AST
operator|::
name|UiImport
modifier|*
name|node
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|AST
operator|::
name|StringLiteral
modifier|*
name|importIdLiteral
init|=
name|AST
operator|::
name|cast
argument_list|<
name|AST
operator|::
name|StringLiteral
operator|*
argument_list|>
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Expression
argument_list|)
condition|)
block|{
name|node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiImport
argument_list|(
name|importIdLiteral
operator|->
name|value
argument_list|)
expr_stmt|;
name|node
operator|->
name|fileNameToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|AST
operator|::
name|UiQualifiedId
modifier|*
name|qualifiedId
init|=
name|reparseAsQualifiedId
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Expression
argument_list|)
condition|)
block|{
name|node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiImport
argument_list|(
name|qualifiedId
argument_list|)
expr_stmt|;
name|node
operator|->
name|fileNameToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
if|if
condition|(
name|node
condition|)
block|{
name|node
operator|->
name|importToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|diagnostic_messages
operator|.
name|append
argument_list|(
name|DiagnosticMessage
argument_list|(
name|DiagnosticMessage
operator|::
name|Error
argument_list|,
name|loc
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Expected a qualified name id or a string literal"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// ### remove me
block|}
block|}
break|break;
case|case
literal|27
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
literal|0
expr_stmt|;
block|}
break|break;
case|case
literal|28
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiObjectMemberList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiObjectMember
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|29
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiObjectMemberList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiObjectMember
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|30
case|:
block|{
name|AST
operator|::
name|UiObjectMemberList
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiObjectMemberList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiObjectMemberList
argument_list|,
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|UiObjectMember
argument_list|)
decl_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|31
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiArrayMemberList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiObjectMember
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|32
case|:
block|{
name|AST
operator|::
name|UiArrayMemberList
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiArrayMemberList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiArrayMemberList
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|UiObjectMember
argument_list|)
decl_stmt|;
name|node
operator|->
name|commaToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|33
case|:
block|{
name|AST
operator|::
name|UiObjectInitializer
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiObjectInitializer
argument_list|(
operator|(
name|AST
operator|::
name|UiObjectMemberList
operator|*
operator|)
literal|0
argument_list|)
decl_stmt|;
name|node
operator|->
name|lbraceToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|rbraceToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|34
case|:
block|{
name|AST
operator|::
name|UiObjectInitializer
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiObjectInitializer
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|UiObjectMemberList
operator|->
name|finish
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|->
name|lbraceToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|rbraceToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|35
case|:
block|{
name|AST
operator|::
name|UiObjectDefinition
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiObjectDefinition
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiQualifiedId
argument_list|,
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|UiObjectInitializer
argument_list|)
decl_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|37
case|:
block|{
name|AST
operator|::
name|UiArrayBinding
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiArrayBinding
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiQualifiedId
argument_list|,
name|sym
argument_list|(
literal|4
argument_list|)
operator|.
name|UiArrayMemberList
operator|->
name|finish
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|->
name|colonToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|lbracketToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|node
operator|->
name|rbracketToken
operator|=
name|loc
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|38
case|:
block|{
name|AST
operator|::
name|UiObjectBinding
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiObjectBinding
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiQualifiedId
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|UiQualifiedId
argument_list|,
name|sym
argument_list|(
literal|4
argument_list|)
operator|.
name|UiObjectInitializer
argument_list|)
decl_stmt|;
name|node
operator|->
name|colonToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|39
case|:
block|{
name|AST
operator|::
name|UiObjectBinding
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiObjectBinding
argument_list|(
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|UiQualifiedId
argument_list|,
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiQualifiedId
argument_list|,
name|sym
argument_list|(
literal|4
argument_list|)
operator|.
name|UiObjectInitializer
argument_list|)
decl_stmt|;
name|node
operator|->
name|colonToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|hasOnToken
operator|=
literal|true
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|47
case|:
block|{
name|AST
operator|::
name|UiScriptBinding
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiScriptBinding
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiQualifiedId
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Statement
argument_list|)
decl_stmt|;
name|node
operator|->
name|colonToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|51
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
literal|0
expr_stmt|;
block|}
break|break;
case|case
literal|52
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiParameterList
operator|->
name|finish
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|53
case|:
block|{
name|AST
operator|::
name|UiParameterList
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiParameterList
argument_list|(
name|stringRef
argument_list|(
literal|1
argument_list|)
argument_list|,
name|stringRef
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|->
name|propertyTypeToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|54
case|:
block|{
name|AST
operator|::
name|UiParameterList
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiParameterList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiParameterList
argument_list|,
name|stringRef
argument_list|(
literal|3
argument_list|)
argument_list|,
name|stringRef
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|->
name|propertyTypeToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|node
operator|->
name|commaToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|56
case|:
block|{
name|AST
operator|::
name|UiPublicMember
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiPublicMember
argument_list|(
name|QStringRef
argument_list|()
argument_list|,
name|stringRef
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|->
name|type
operator|=
name|AST
operator|::
name|UiPublicMember
operator|::
name|Signal
expr_stmt|;
name|node
operator|->
name|propertyToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|typeToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|parameters
operator|=
name|sym
argument_list|(
literal|4
argument_list|)
operator|.
name|UiParameterList
expr_stmt|;
name|node
operator|->
name|semicolonToken
operator|=
name|loc
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|58
case|:
block|{
name|AST
operator|::
name|UiPublicMember
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiPublicMember
argument_list|(
name|QStringRef
argument_list|()
argument_list|,
name|stringRef
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|->
name|type
operator|=
name|AST
operator|::
name|UiPublicMember
operator|::
name|Signal
expr_stmt|;
name|node
operator|->
name|propertyToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|typeToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|semicolonToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|60
case|:
block|{
name|AST
operator|::
name|UiPublicMember
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiPublicMember
argument_list|(
name|stringRef
argument_list|(
literal|4
argument_list|)
argument_list|,
name|stringRef
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|->
name|typeModifier
operator|=
name|stringRef
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|propertyToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|typeModifierToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|typeToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|node
operator|->
name|semicolonToken
operator|=
name|loc
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|62
case|:
block|{
name|AST
operator|::
name|UiPublicMember
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiPublicMember
argument_list|(
name|stringRef
argument_list|(
literal|2
argument_list|)
argument_list|,
name|stringRef
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|->
name|propertyToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|typeToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|node
operator|->
name|semicolonToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|64
case|:
block|{
name|AST
operator|::
name|UiPublicMember
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiPublicMember
argument_list|(
name|stringRef
argument_list|(
literal|3
argument_list|)
argument_list|,
name|stringRef
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|->
name|isDefaultMember
operator|=
literal|true
expr_stmt|;
name|node
operator|->
name|defaultToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|propertyToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|typeToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|node
operator|->
name|semicolonToken
operator|=
name|loc
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|65
case|:
block|{
name|AST
operator|::
name|UiPublicMember
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiPublicMember
argument_list|(
name|stringRef
argument_list|(
literal|2
argument_list|)
argument_list|,
name|stringRef
argument_list|(
literal|3
argument_list|)
argument_list|,
name|sym
argument_list|(
literal|5
argument_list|)
operator|.
name|Statement
argument_list|)
decl_stmt|;
name|node
operator|->
name|propertyToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|typeToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|node
operator|->
name|colonToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|66
case|:
block|{
name|AST
operator|::
name|UiPublicMember
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiPublicMember
argument_list|(
name|stringRef
argument_list|(
literal|3
argument_list|)
argument_list|,
name|stringRef
argument_list|(
literal|4
argument_list|)
argument_list|,
name|sym
argument_list|(
literal|6
argument_list|)
operator|.
name|Statement
argument_list|)
decl_stmt|;
name|node
operator|->
name|isReadonlyMember
operator|=
literal|true
expr_stmt|;
name|node
operator|->
name|readonlyToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|propertyToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|typeToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|node
operator|->
name|colonToken
operator|=
name|loc
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|67
case|:
block|{
name|AST
operator|::
name|UiPublicMember
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiPublicMember
argument_list|(
name|stringRef
argument_list|(
literal|3
argument_list|)
argument_list|,
name|stringRef
argument_list|(
literal|4
argument_list|)
argument_list|,
name|sym
argument_list|(
literal|6
argument_list|)
operator|.
name|Statement
argument_list|)
decl_stmt|;
name|node
operator|->
name|isDefaultMember
operator|=
literal|true
expr_stmt|;
name|node
operator|->
name|defaultToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|propertyToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|typeToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|node
operator|->
name|colonToken
operator|=
name|loc
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|68
case|:
block|{
name|AST
operator|::
name|UiPublicMember
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiPublicMember
argument_list|(
name|stringRef
argument_list|(
literal|4
argument_list|)
argument_list|,
name|stringRef
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|->
name|typeModifier
operator|=
name|stringRef
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|propertyToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|typeModifierToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|typeToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|node
operator|->
name|semicolonToken
operator|=
name|loc
argument_list|(
literal|7
argument_list|)
expr_stmt|;
comment|// insert a fake ';' before ':'
name|AST
operator|::
name|UiQualifiedId
modifier|*
name|propertyName
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiQualifiedId
argument_list|(
name|stringRef
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
name|propertyName
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|propertyName
operator|->
name|next
operator|=
literal|0
expr_stmt|;
name|AST
operator|::
name|UiArrayBinding
modifier|*
name|binding
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiArrayBinding
argument_list|(
name|propertyName
argument_list|,
name|sym
argument_list|(
literal|9
argument_list|)
operator|.
name|UiArrayMemberList
operator|->
name|finish
argument_list|()
argument_list|)
decl_stmt|;
name|binding
operator|->
name|colonToken
operator|=
name|loc
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|binding
operator|->
name|lbracketToken
operator|=
name|loc
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|binding
operator|->
name|rbracketToken
operator|=
name|loc
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|node
operator|->
name|binding
operator|=
name|binding
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|69
case|:
block|{
name|AST
operator|::
name|UiPublicMember
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiPublicMember
argument_list|(
name|stringRef
argument_list|(
literal|2
argument_list|)
argument_list|,
name|stringRef
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|->
name|propertyToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|typeToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|node
operator|->
name|semicolonToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// insert a fake ';' before ':'
name|AST
operator|::
name|UiQualifiedId
modifier|*
name|propertyName
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiQualifiedId
argument_list|(
name|stringRef
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|propertyName
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|propertyName
operator|->
name|next
operator|=
literal|0
expr_stmt|;
name|AST
operator|::
name|UiObjectBinding
modifier|*
name|binding
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiObjectBinding
argument_list|(
name|propertyName
argument_list|,
name|sym
argument_list|(
literal|5
argument_list|)
operator|.
name|UiQualifiedId
argument_list|,
name|sym
argument_list|(
literal|6
argument_list|)
operator|.
name|UiObjectInitializer
argument_list|)
decl_stmt|;
name|binding
operator|->
name|colonToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|node
operator|->
name|binding
operator|=
name|binding
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|70
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiSourceElement
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|71
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UiSourceElement
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|79
case|:
block|{
name|AST
operator|::
name|ThisExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ThisExpression
argument_list|()
decl_stmt|;
name|node
operator|->
name|thisToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|80
case|:
block|{
name|AST
operator|::
name|IdentifierExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|IdentifierExpression
argument_list|(
name|stringRef
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|81
case|:
block|{
name|AST
operator|::
name|NullExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|NullExpression
argument_list|()
decl_stmt|;
name|node
operator|->
name|nullToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|82
case|:
block|{
name|AST
operator|::
name|TrueLiteral
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|TrueLiteral
argument_list|()
decl_stmt|;
name|node
operator|->
name|trueToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|83
case|:
block|{
name|AST
operator|::
name|FalseLiteral
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|FalseLiteral
argument_list|()
decl_stmt|;
name|node
operator|->
name|falseToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|84
case|:
block|{
name|AST
operator|::
name|NumericLiteral
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|NumericLiteral
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|dval
argument_list|)
decl_stmt|;
name|node
operator|->
name|literalToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|85
case|:
case|case
literal|86
case|:
block|{
name|AST
operator|::
name|StringLiteral
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|StringLiteral
argument_list|(
name|stringRef
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|->
name|literalToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|87
case|:
block|{
name|bool
name|rx
init|=
name|lexer
operator|->
name|scanRegExp
argument_list|(
name|Lexer
operator|::
name|NoPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rx
condition|)
block|{
name|diagnostic_messages
operator|.
name|append
argument_list|(
name|DiagnosticMessage
argument_list|(
name|DiagnosticMessage
operator|::
name|Error
argument_list|,
name|location
argument_list|(
name|lexer
argument_list|)
argument_list|,
name|lexer
operator|->
name|errorMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// ### remove me
block|}
name|loc
argument_list|(
literal|1
argument_list|)
operator|.
name|length
operator|=
name|lexer
operator|->
name|tokenLength
argument_list|()
expr_stmt|;
name|yylloc
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// adjust the location of the current token
name|AST
operator|::
name|RegExpLiteral
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|RegExpLiteral
argument_list|(
name|driver
operator|->
name|newStringRef
argument_list|(
name|lexer
operator|->
name|regExpPattern
argument_list|()
argument_list|)
argument_list|,
name|lexer
operator|->
name|regExpFlags
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|->
name|literalToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|88
case|:
block|{
name|bool
name|rx
init|=
name|lexer
operator|->
name|scanRegExp
argument_list|(
name|Lexer
operator|::
name|EqualPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rx
condition|)
block|{
name|diagnostic_messages
operator|.
name|append
argument_list|(
name|DiagnosticMessage
argument_list|(
name|DiagnosticMessage
operator|::
name|Error
argument_list|,
name|location
argument_list|(
name|lexer
argument_list|)
argument_list|,
name|lexer
operator|->
name|errorMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|loc
argument_list|(
literal|1
argument_list|)
operator|.
name|length
operator|=
name|lexer
operator|->
name|tokenLength
argument_list|()
expr_stmt|;
name|yylloc
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// adjust the location of the current token
name|AST
operator|::
name|RegExpLiteral
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|RegExpLiteral
argument_list|(
name|driver
operator|->
name|newStringRef
argument_list|(
name|lexer
operator|->
name|regExpPattern
argument_list|()
argument_list|)
argument_list|,
name|lexer
operator|->
name|regExpFlags
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|->
name|literalToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|89
case|:
block|{
name|AST
operator|::
name|ArrayLiteral
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ArrayLiteral
argument_list|(
operator|(
name|AST
operator|::
name|Elision
operator|*
operator|)
literal|0
argument_list|)
decl_stmt|;
name|node
operator|->
name|lbracketToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|rbracketToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|90
case|:
block|{
name|AST
operator|::
name|ArrayLiteral
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ArrayLiteral
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Elision
operator|->
name|finish
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|->
name|lbracketToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|rbracketToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|91
case|:
block|{
name|AST
operator|::
name|ArrayLiteral
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ArrayLiteral
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|ElementList
operator|->
name|finish
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|->
name|lbracketToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|rbracketToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|92
case|:
block|{
name|AST
operator|::
name|ArrayLiteral
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ArrayLiteral
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|ElementList
operator|->
name|finish
argument_list|()
argument_list|,
operator|(
name|AST
operator|::
name|Elision
operator|*
operator|)
literal|0
argument_list|)
decl_stmt|;
name|node
operator|->
name|lbracketToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|commaToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|node
operator|->
name|rbracketToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|93
case|:
block|{
name|AST
operator|::
name|ArrayLiteral
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ArrayLiteral
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|ElementList
operator|->
name|finish
argument_list|()
argument_list|,
name|sym
argument_list|(
literal|4
argument_list|)
operator|.
name|Elision
operator|->
name|finish
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|->
name|lbracketToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|commaToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|node
operator|->
name|rbracketToken
operator|=
name|loc
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|94
case|:
block|{
name|AST
operator|::
name|ObjectLiteral
modifier|*
name|node
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Node
condition|)
name|node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ObjectLiteral
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|PropertyAssignmentList
operator|->
name|finish
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ObjectLiteral
argument_list|()
expr_stmt|;
name|node
operator|->
name|lbraceToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|rbraceToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|95
case|:
block|{
name|AST
operator|::
name|ObjectLiteral
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ObjectLiteral
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|PropertyAssignmentList
operator|->
name|finish
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|->
name|lbraceToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|rbraceToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|96
case|:
block|{
name|AST
operator|::
name|NestedExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|NestedExpression
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|lparenToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|rparenToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|97
case|:
block|{
if|if
condition|(
name|AST
operator|::
name|ArrayMemberExpression
modifier|*
name|mem
init|=
name|AST
operator|::
name|cast
argument_list|<
name|AST
operator|::
name|ArrayMemberExpression
operator|*
argument_list|>
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|)
condition|)
block|{
name|diagnostic_messages
operator|.
name|append
argument_list|(
name|DiagnosticMessage
argument_list|(
name|DiagnosticMessage
operator|::
name|Warning
argument_list|,
name|mem
operator|->
name|lbracketToken
argument_list|,
name|QLatin1String
argument_list|(
literal|"Ignored annotation"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
operator|=
name|mem
operator|->
name|base
expr_stmt|;
block|}
if|if
condition|(
name|AST
operator|::
name|UiQualifiedId
modifier|*
name|qualifiedId
init|=
name|reparseAsQualifiedId
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|)
condition|)
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiQualifiedId
operator|=
name|qualifiedId
expr_stmt|;
block|}
else|else
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|UiQualifiedId
operator|=
literal|0
expr_stmt|;
name|diagnostic_messages
operator|.
name|append
argument_list|(
name|DiagnosticMessage
argument_list|(
name|DiagnosticMessage
operator|::
name|Error
argument_list|,
name|loc
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Expected a qualified name id"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// ### recover
block|}
block|}
break|break;
case|case
literal|98
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ElementList
argument_list|(
operator|(
name|AST
operator|::
name|Elision
operator|*
operator|)
literal|0
argument_list|,
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|99
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ElementList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Elision
operator|->
name|finish
argument_list|()
argument_list|,
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Expression
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|100
case|:
block|{
name|AST
operator|::
name|ElementList
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ElementList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|ElementList
argument_list|,
operator|(
name|AST
operator|::
name|Elision
operator|*
operator|)
literal|0
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|commaToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|101
case|:
block|{
name|AST
operator|::
name|ElementList
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ElementList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|ElementList
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Elision
operator|->
name|finish
argument_list|()
argument_list|,
name|sym
argument_list|(
literal|4
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|commaToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|102
case|:
block|{
name|AST
operator|::
name|Elision
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|Elision
argument_list|()
decl_stmt|;
name|node
operator|->
name|commaToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|103
case|:
block|{
name|AST
operator|::
name|Elision
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|Elision
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Elision
argument_list|)
decl_stmt|;
name|node
operator|->
name|commaToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|104
case|:
block|{
name|AST
operator|::
name|PropertyNameAndValue
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|PropertyNameAndValue
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|PropertyName
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|colonToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|105
case|:
block|{
name|AST
operator|::
name|PropertyGetterSetter
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|PropertyGetterSetter
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|PropertyName
argument_list|,
name|sym
argument_list|(
literal|6
argument_list|)
operator|.
name|FunctionBody
argument_list|)
decl_stmt|;
name|node
operator|->
name|getSetToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|lparenToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|node
operator|->
name|rparenToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|node
operator|->
name|lbraceToken
operator|=
name|loc
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|node
operator|->
name|rbraceToken
operator|=
name|loc
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|106
case|:
block|{
name|AST
operator|::
name|PropertyGetterSetter
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|PropertyGetterSetter
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|PropertyName
argument_list|,
name|sym
argument_list|(
literal|4
argument_list|)
operator|.
name|FormalParameterList
argument_list|,
name|sym
argument_list|(
literal|7
argument_list|)
operator|.
name|FunctionBody
argument_list|)
decl_stmt|;
name|node
operator|->
name|getSetToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|lparenToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|node
operator|->
name|rparenToken
operator|=
name|loc
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|node
operator|->
name|lbraceToken
operator|=
name|loc
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|node
operator|->
name|rbraceToken
operator|=
name|loc
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|107
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|PropertyAssignmentList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|PropertyAssignment
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|108
case|:
block|{
name|AST
operator|::
name|PropertyAssignmentList
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|PropertyAssignmentList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|PropertyAssignmentList
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|PropertyAssignment
argument_list|)
decl_stmt|;
name|node
operator|->
name|commaToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|109
case|:
block|{
name|AST
operator|::
name|IdentifierPropertyName
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|IdentifierPropertyName
argument_list|(
name|stringRef
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|->
name|propertyNameToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|110
case|:
block|{
name|AST
operator|::
name|StringLiteralPropertyName
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|StringLiteralPropertyName
argument_list|(
name|stringRef
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|->
name|propertyNameToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|111
case|:
block|{
name|AST
operator|::
name|NumericLiteralPropertyName
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|NumericLiteralPropertyName
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|dval
argument_list|)
decl_stmt|;
name|node
operator|->
name|propertyNameToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|112
case|:
block|{
name|AST
operator|::
name|IdentifierPropertyName
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|IdentifierPropertyName
argument_list|(
name|stringRef
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|->
name|propertyNameToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|148
case|:
block|{
name|AST
operator|::
name|ArrayMemberExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ArrayMemberExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|lbracketToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|rbracketToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|149
case|:
block|{
name|AST
operator|::
name|FieldMemberExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|FieldMemberExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|stringRef
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|->
name|dotToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|150
case|:
block|{
name|AST
operator|::
name|NewMemberExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|NewMemberExpression
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|4
argument_list|)
operator|.
name|ArgumentList
argument_list|)
decl_stmt|;
name|node
operator|->
name|newToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|lparenToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|node
operator|->
name|rparenToken
operator|=
name|loc
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|152
case|:
block|{
name|AST
operator|::
name|NewExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|NewExpression
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|newToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|153
case|:
block|{
name|AST
operator|::
name|CallExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|CallExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|ArgumentList
argument_list|)
decl_stmt|;
name|node
operator|->
name|lparenToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|rparenToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|154
case|:
block|{
name|AST
operator|::
name|CallExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|CallExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|ArgumentList
argument_list|)
decl_stmt|;
name|node
operator|->
name|lparenToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|rparenToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|155
case|:
block|{
name|AST
operator|::
name|ArrayMemberExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ArrayMemberExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|lbracketToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|rbracketToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|156
case|:
block|{
name|AST
operator|::
name|FieldMemberExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|FieldMemberExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|stringRef
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|->
name|dotToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|157
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
literal|0
expr_stmt|;
block|}
break|break;
case|case
literal|158
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|ArgumentList
operator|->
name|finish
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|159
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ArgumentList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|160
case|:
block|{
name|AST
operator|::
name|ArgumentList
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ArgumentList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|ArgumentList
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|commaToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|164
case|:
block|{
name|AST
operator|::
name|PostIncrementExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|PostIncrementExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|incrementToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|165
case|:
block|{
name|AST
operator|::
name|PostDecrementExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|PostDecrementExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|decrementToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|167
case|:
block|{
name|AST
operator|::
name|DeleteExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|DeleteExpression
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|deleteToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|168
case|:
block|{
name|AST
operator|::
name|VoidExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|VoidExpression
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|voidToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|169
case|:
block|{
name|AST
operator|::
name|TypeOfExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|TypeOfExpression
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|typeofToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|170
case|:
block|{
name|AST
operator|::
name|PreIncrementExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|PreIncrementExpression
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|incrementToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|171
case|:
block|{
name|AST
operator|::
name|PreDecrementExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|PreDecrementExpression
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|decrementToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|172
case|:
block|{
name|AST
operator|::
name|UnaryPlusExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UnaryPlusExpression
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|plusToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|173
case|:
block|{
name|AST
operator|::
name|UnaryMinusExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|UnaryMinusExpression
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|minusToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|174
case|:
block|{
name|AST
operator|::
name|TildeExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|TildeExpression
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|tildeToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|175
case|:
block|{
name|AST
operator|::
name|NotExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|NotExpression
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|notToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|177
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|Mul
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|178
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|Div
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|179
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|Mod
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|181
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|Add
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|182
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|Sub
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|184
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|LShift
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|185
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|RShift
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|186
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|URShift
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|188
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|Lt
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|189
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|Gt
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|190
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|Le
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|191
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|Ge
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|192
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|InstanceOf
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|193
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|In
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|195
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|Lt
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|196
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|Gt
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|197
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|Le
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|198
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|Ge
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|199
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|InstanceOf
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|201
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|Equal
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|202
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|NotEqual
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|203
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|StrictEqual
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|204
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|StrictNotEqual
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|206
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|Equal
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|207
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|NotEqual
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|208
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|StrictEqual
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|209
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|StrictNotEqual
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|211
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|BitAnd
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|213
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|BitAnd
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|215
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|BitXor
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|217
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|BitXor
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|219
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|BitOr
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|221
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|BitOr
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|223
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|And
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|225
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|And
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|227
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|Or
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|229
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|QSOperator
operator|::
name|Or
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|231
case|:
block|{
name|AST
operator|::
name|ConditionalExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ConditionalExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|5
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|questionToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|colonToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|233
case|:
block|{
name|AST
operator|::
name|ConditionalExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ConditionalExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|5
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|questionToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|colonToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|235
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|ival
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|237
case|:
block|{
name|AST
operator|::
name|BinaryExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BinaryExpression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|ival
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|operatorToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|238
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|ival
operator|=
name|QSOperator
operator|::
name|Assign
expr_stmt|;
block|}
break|break;
case|case
literal|239
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|ival
operator|=
name|QSOperator
operator|::
name|InplaceMul
expr_stmt|;
block|}
break|break;
case|case
literal|240
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|ival
operator|=
name|QSOperator
operator|::
name|InplaceDiv
expr_stmt|;
block|}
break|break;
case|case
literal|241
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|ival
operator|=
name|QSOperator
operator|::
name|InplaceMod
expr_stmt|;
block|}
break|break;
case|case
literal|242
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|ival
operator|=
name|QSOperator
operator|::
name|InplaceAdd
expr_stmt|;
block|}
break|break;
case|case
literal|243
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|ival
operator|=
name|QSOperator
operator|::
name|InplaceSub
expr_stmt|;
block|}
break|break;
case|case
literal|244
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|ival
operator|=
name|QSOperator
operator|::
name|InplaceLeftShift
expr_stmt|;
block|}
break|break;
case|case
literal|245
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|ival
operator|=
name|QSOperator
operator|::
name|InplaceRightShift
expr_stmt|;
block|}
break|break;
case|case
literal|246
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|ival
operator|=
name|QSOperator
operator|::
name|InplaceURightShift
expr_stmt|;
block|}
break|break;
case|case
literal|247
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|ival
operator|=
name|QSOperator
operator|::
name|InplaceAnd
expr_stmt|;
block|}
break|break;
case|case
literal|248
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|ival
operator|=
name|QSOperator
operator|::
name|InplaceXor
expr_stmt|;
block|}
break|break;
case|case
literal|249
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|ival
operator|=
name|QSOperator
operator|::
name|InplaceOr
expr_stmt|;
block|}
break|break;
case|case
literal|251
case|:
block|{
name|AST
operator|::
name|Expression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|Expression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|commaToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|252
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
literal|0
expr_stmt|;
block|}
break|break;
case|case
literal|255
case|:
block|{
name|AST
operator|::
name|Expression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|Expression
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|commaToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|256
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
literal|0
expr_stmt|;
block|}
break|break;
case|case
literal|273
case|:
block|{
name|AST
operator|::
name|Block
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|Block
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|StatementList
argument_list|)
decl_stmt|;
name|node
operator|->
name|lbraceToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|rbraceToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|274
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|StatementList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Statement
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|275
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|StatementList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|StatementList
argument_list|,
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Statement
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|276
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
literal|0
expr_stmt|;
block|}
break|break;
case|case
literal|277
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|StatementList
operator|->
name|finish
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|279
case|:
block|{
name|AST
operator|::
name|VariableStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|VariableStatement
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|VariableDeclarationList
operator|->
name|finish
argument_list|(
comment|/*readOnly=*/
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|ival
operator|==
name|T_CONST
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|->
name|declarationKindToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|semicolonToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|280
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|ival
operator|=
name|T_CONST
expr_stmt|;
block|}
break|break;
case|case
literal|281
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|ival
operator|=
name|T_VAR
expr_stmt|;
block|}
break|break;
case|case
literal|282
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|VariableDeclarationList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|VariableDeclaration
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|283
case|:
block|{
name|AST
operator|::
name|VariableDeclarationList
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|VariableDeclarationList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|VariableDeclarationList
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|VariableDeclaration
argument_list|)
decl_stmt|;
name|node
operator|->
name|commaToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|284
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|VariableDeclarationList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|VariableDeclaration
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|285
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|VariableDeclarationList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|VariableDeclarationList
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|VariableDeclaration
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|286
case|:
block|{
name|AST
operator|::
name|VariableDeclaration
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|VariableDeclaration
argument_list|(
name|stringRef
argument_list|(
literal|1
argument_list|)
argument_list|,
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|287
case|:
block|{
name|AST
operator|::
name|VariableDeclaration
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|VariableDeclaration
argument_list|(
name|stringRef
argument_list|(
literal|1
argument_list|)
argument_list|,
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|288
case|:
block|{
comment|// ### TODO: AST for initializer
name|sym
argument_list|(
literal|1
argument_list|)
operator|=
name|sym
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|289
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
literal|0
expr_stmt|;
block|}
break|break;
case|case
literal|291
case|:
block|{
comment|// ### TODO: AST for initializer
name|sym
argument_list|(
literal|1
argument_list|)
operator|=
name|sym
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|292
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
literal|0
expr_stmt|;
block|}
break|break;
case|case
literal|294
case|:
block|{
name|AST
operator|::
name|EmptyStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|EmptyStatement
argument_list|()
decl_stmt|;
name|node
operator|->
name|semicolonToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|296
case|:
block|{
name|AST
operator|::
name|ExpressionStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ExpressionStatement
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|semicolonToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|297
case|:
block|{
name|AST
operator|::
name|IfStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|IfStatement
argument_list|(
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|5
argument_list|)
operator|.
name|Statement
argument_list|,
name|sym
argument_list|(
literal|7
argument_list|)
operator|.
name|Statement
argument_list|)
decl_stmt|;
name|node
operator|->
name|ifToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|lparenToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|rparenToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|node
operator|->
name|elseToken
operator|=
name|loc
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|298
case|:
block|{
name|AST
operator|::
name|IfStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|IfStatement
argument_list|(
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|5
argument_list|)
operator|.
name|Statement
argument_list|)
decl_stmt|;
name|node
operator|->
name|ifToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|lparenToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|rparenToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|301
case|:
block|{
name|AST
operator|::
name|DoWhileStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|DoWhileStatement
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Statement
argument_list|,
name|sym
argument_list|(
literal|5
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|doToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|whileToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|node
operator|->
name|lparenToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|node
operator|->
name|rparenToken
operator|=
name|loc
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|node
operator|->
name|semicolonToken
operator|=
name|loc
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|302
case|:
block|{
name|AST
operator|::
name|WhileStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|WhileStatement
argument_list|(
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|5
argument_list|)
operator|.
name|Statement
argument_list|)
decl_stmt|;
name|node
operator|->
name|whileToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|lparenToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|rparenToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|303
case|:
block|{
name|AST
operator|::
name|ForStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ForStatement
argument_list|(
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|5
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|7
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|9
argument_list|)
operator|.
name|Statement
argument_list|)
decl_stmt|;
name|node
operator|->
name|forToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|lparenToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|firstSemicolonToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|node
operator|->
name|secondSemicolonToken
operator|=
name|loc
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|node
operator|->
name|rparenToken
operator|=
name|loc
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|304
case|:
block|{
name|AST
operator|::
name|LocalForStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|LocalForStatement
argument_list|(
name|sym
argument_list|(
literal|4
argument_list|)
operator|.
name|VariableDeclarationList
operator|->
name|finish
argument_list|(
comment|/*readOnly=*/
literal|false
argument_list|)
argument_list|,
name|sym
argument_list|(
literal|6
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|8
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|10
argument_list|)
operator|.
name|Statement
argument_list|)
decl_stmt|;
name|node
operator|->
name|forToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|lparenToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|varToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|node
operator|->
name|firstSemicolonToken
operator|=
name|loc
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|node
operator|->
name|secondSemicolonToken
operator|=
name|loc
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|node
operator|->
name|rparenToken
operator|=
name|loc
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|305
case|:
block|{
name|AST
operator|::
name|ForEachStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ForEachStatement
argument_list|(
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|5
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|7
argument_list|)
operator|.
name|Statement
argument_list|)
decl_stmt|;
name|node
operator|->
name|forToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|lparenToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|inToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|node
operator|->
name|rparenToken
operator|=
name|loc
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|306
case|:
block|{
name|AST
operator|::
name|LocalForEachStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|LocalForEachStatement
argument_list|(
name|sym
argument_list|(
literal|4
argument_list|)
operator|.
name|VariableDeclaration
argument_list|,
name|sym
argument_list|(
literal|6
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|8
argument_list|)
operator|.
name|Statement
argument_list|)
decl_stmt|;
name|node
operator|->
name|forToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|lparenToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|varToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|node
operator|->
name|inToken
operator|=
name|loc
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|node
operator|->
name|rparenToken
operator|=
name|loc
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|308
case|:
block|{
name|AST
operator|::
name|ContinueStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ContinueStatement
argument_list|()
decl_stmt|;
name|node
operator|->
name|continueToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|semicolonToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|310
case|:
block|{
name|AST
operator|::
name|ContinueStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ContinueStatement
argument_list|(
name|stringRef
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|->
name|continueToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|semicolonToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|312
case|:
block|{
name|AST
operator|::
name|BreakStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BreakStatement
argument_list|(
name|QStringRef
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|->
name|breakToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|semicolonToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|314
case|:
block|{
name|AST
operator|::
name|BreakStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|BreakStatement
argument_list|(
name|stringRef
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|->
name|breakToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|semicolonToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|316
case|:
block|{
name|AST
operator|::
name|ReturnStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ReturnStatement
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|returnToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|semicolonToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|317
case|:
block|{
name|AST
operator|::
name|WithStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|WithStatement
argument_list|(
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|5
argument_list|)
operator|.
name|Statement
argument_list|)
decl_stmt|;
name|node
operator|->
name|withToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|lparenToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|rparenToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|318
case|:
block|{
name|AST
operator|::
name|SwitchStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|SwitchStatement
argument_list|(
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|5
argument_list|)
operator|.
name|CaseBlock
argument_list|)
decl_stmt|;
name|node
operator|->
name|switchToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|lparenToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|rparenToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|319
case|:
block|{
name|AST
operator|::
name|CaseBlock
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|CaseBlock
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|CaseClauses
argument_list|)
decl_stmt|;
name|node
operator|->
name|lbraceToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|rbraceToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|320
case|:
block|{
name|AST
operator|::
name|CaseBlock
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|CaseBlock
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|CaseClauses
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|DefaultClause
argument_list|,
name|sym
argument_list|(
literal|4
argument_list|)
operator|.
name|CaseClauses
argument_list|)
decl_stmt|;
name|node
operator|->
name|lbraceToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|rbraceToken
operator|=
name|loc
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|321
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|CaseClauses
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|CaseClause
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|322
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|CaseClauses
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|CaseClauses
argument_list|,
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|CaseClause
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|323
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
literal|0
expr_stmt|;
block|}
break|break;
case|case
literal|324
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|CaseClauses
operator|->
name|finish
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|325
case|:
block|{
name|AST
operator|::
name|CaseClause
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|CaseClause
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Expression
argument_list|,
name|sym
argument_list|(
literal|4
argument_list|)
operator|.
name|StatementList
argument_list|)
decl_stmt|;
name|node
operator|->
name|caseToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|colonToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|326
case|:
block|{
name|AST
operator|::
name|DefaultClause
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|DefaultClause
argument_list|(
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|StatementList
argument_list|)
decl_stmt|;
name|node
operator|->
name|defaultToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|colonToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|327
case|:
block|{
name|AST
operator|::
name|LabelledStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|LabelledStatement
argument_list|(
name|stringRef
argument_list|(
literal|1
argument_list|)
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Statement
argument_list|)
decl_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|colonToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|329
case|:
block|{
name|AST
operator|::
name|ThrowStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|ThrowStatement
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Expression
argument_list|)
decl_stmt|;
name|node
operator|->
name|throwToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|semicolonToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|330
case|:
block|{
name|AST
operator|::
name|TryStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|TryStatement
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Statement
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Catch
argument_list|)
decl_stmt|;
name|node
operator|->
name|tryToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|331
case|:
block|{
name|AST
operator|::
name|TryStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|TryStatement
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Statement
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Finally
argument_list|)
decl_stmt|;
name|node
operator|->
name|tryToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|332
case|:
block|{
name|AST
operator|::
name|TryStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|TryStatement
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Statement
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|Catch
argument_list|,
name|sym
argument_list|(
literal|4
argument_list|)
operator|.
name|Finally
argument_list|)
decl_stmt|;
name|node
operator|->
name|tryToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|333
case|:
block|{
name|AST
operator|::
name|Catch
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|Catch
argument_list|(
name|stringRef
argument_list|(
literal|3
argument_list|)
argument_list|,
name|sym
argument_list|(
literal|5
argument_list|)
operator|.
name|Block
argument_list|)
decl_stmt|;
name|node
operator|->
name|catchToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|lparenToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|node
operator|->
name|rparenToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|334
case|:
block|{
name|AST
operator|::
name|Finally
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|Finally
argument_list|(
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|Block
argument_list|)
decl_stmt|;
name|node
operator|->
name|finallyToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|336
case|:
block|{
name|AST
operator|::
name|DebuggerStatement
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|DebuggerStatement
argument_list|()
decl_stmt|;
name|node
operator|->
name|debuggerToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|semicolonToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|338
case|:
block|{
name|AST
operator|::
name|FunctionDeclaration
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|FunctionDeclaration
argument_list|(
name|stringRef
argument_list|(
literal|2
argument_list|)
argument_list|,
name|sym
argument_list|(
literal|4
argument_list|)
operator|.
name|FormalParameterList
argument_list|,
name|sym
argument_list|(
literal|7
argument_list|)
operator|.
name|FunctionBody
argument_list|)
decl_stmt|;
name|node
operator|->
name|functionToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|lparenToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|node
operator|->
name|rparenToken
operator|=
name|loc
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|node
operator|->
name|lbraceToken
operator|=
name|loc
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|node
operator|->
name|rbraceToken
operator|=
name|loc
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|339
case|:
block|{
name|AST
operator|::
name|FunctionExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|FunctionExpression
argument_list|(
name|stringRef
argument_list|(
literal|2
argument_list|)
argument_list|,
name|sym
argument_list|(
literal|4
argument_list|)
operator|.
name|FormalParameterList
argument_list|,
name|sym
argument_list|(
literal|7
argument_list|)
operator|.
name|FunctionBody
argument_list|)
decl_stmt|;
name|node
operator|->
name|functionToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|stringRef
argument_list|(
literal|2
argument_list|)
operator|.
name|isNull
argument_list|()
condition|)
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|lparenToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|node
operator|->
name|rparenToken
operator|=
name|loc
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|node
operator|->
name|lbraceToken
operator|=
name|loc
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|node
operator|->
name|rbraceToken
operator|=
name|loc
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|340
case|:
block|{
name|AST
operator|::
name|FunctionExpression
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|FunctionExpression
argument_list|(
name|QStringRef
argument_list|()
argument_list|,
name|sym
argument_list|(
literal|3
argument_list|)
operator|.
name|FormalParameterList
argument_list|,
name|sym
argument_list|(
literal|6
argument_list|)
operator|.
name|FunctionBody
argument_list|)
decl_stmt|;
name|node
operator|->
name|functionToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|node
operator|->
name|lparenToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|rparenToken
operator|=
name|loc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|node
operator|->
name|lbraceToken
operator|=
name|loc
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|node
operator|->
name|rbraceToken
operator|=
name|loc
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|341
case|:
block|{
name|AST
operator|::
name|FormalParameterList
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|FormalParameterList
argument_list|(
name|stringRef
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|342
case|:
block|{
name|AST
operator|::
name|FormalParameterList
modifier|*
name|node
init|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|FormalParameterList
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|FormalParameterList
argument_list|,
name|stringRef
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|->
name|commaToken
operator|=
name|loc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|node
operator|->
name|identifierToken
operator|=
name|loc
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|node
expr_stmt|;
block|}
break|break;
case|case
literal|343
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
literal|0
expr_stmt|;
block|}
break|break;
case|case
literal|344
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|FormalParameterList
operator|->
name|finish
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|345
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
literal|0
expr_stmt|;
block|}
break|break;
case|case
literal|347
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|FunctionBody
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|SourceElements
operator|->
name|finish
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|349
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|Program
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|SourceElements
operator|->
name|finish
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|350
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|SourceElements
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|SourceElement
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|351
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|SourceElements
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|SourceElements
argument_list|,
name|sym
argument_list|(
literal|2
argument_list|)
operator|.
name|SourceElement
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|352
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|StatementSourceElement
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Statement
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|353
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
operator|new
operator|(
name|pool
operator|)
name|AST
operator|::
name|FunctionSourceElement
argument_list|(
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|FunctionDeclaration
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|354
case|:
block|{
name|sym
argument_list|(
literal|1
argument_list|)
operator|.
name|Node
operator|=
literal|0
expr_stmt|;
block|}
break|break;
block|}
comment|// switch
name|action
operator|=
name|nt_action
argument_list|(
name|state_stack
index|[
name|tos
index|]
argument_list|,
name|lhs
index|[
name|r
index|]
operator|-
name|TERMINAL_COUNT
argument_list|)
expr_stmt|;
block|}
comment|// if
block|}
do|while
condition|(
name|action
operator|!=
literal|0
condition|)
do|;
if|if
condition|(
name|first_token
operator|==
name|last_token
condition|)
block|{
specifier|const
name|int
name|errorState
init|=
name|state_stack
index|[
name|tos
index|]
decl_stmt|;
comment|// automatic insertion of `;'
if|if
condition|(
name|yytoken
operator|!=
operator|-
literal|1
operator|&&
operator|(
operator|(
name|t_action
argument_list|(
name|errorState
argument_list|,
name|T_AUTOMATIC_SEMICOLON
argument_list|)
operator|&&
name|lexer
operator|->
name|canInsertAutomaticSemicolon
argument_list|(
name|yytoken
argument_list|)
operator|)
operator|||
name|t_action
argument_list|(
name|errorState
argument_list|,
name|T_COMPATIBILITY_SEMICOLON
argument_list|)
operator|)
condition|)
block|{
name|SavedToken
modifier|&
name|tk
init|=
name|token_buffer
index|[
literal|0
index|]
decl_stmt|;
name|tk
operator|.
name|token
operator|=
name|yytoken
expr_stmt|;
name|tk
operator|.
name|dval
operator|=
name|yylval
expr_stmt|;
name|tk
operator|.
name|spell
operator|=
name|yytokenspell
expr_stmt|;
name|tk
operator|.
name|loc
operator|=
name|yylloc
expr_stmt|;
name|yylloc
operator|=
name|yyprevlloc
expr_stmt|;
name|yylloc
operator|.
name|offset
operator|+=
name|yylloc
operator|.
name|length
expr_stmt|;
name|yylloc
operator|.
name|startColumn
operator|+=
name|yylloc
operator|.
name|length
expr_stmt|;
name|yylloc
operator|.
name|length
operator|=
literal|0
expr_stmt|;
comment|//const QString msg = qApp->translate("QQmlParser", "Missing `;'");
comment|//diagnostic_messages.append(DiagnosticMessage(DiagnosticMessage::Warning, yylloc, msg));
name|first_token
operator|=
operator|&
name|token_buffer
index|[
literal|0
index|]
expr_stmt|;
name|last_token
operator|=
operator|&
name|token_buffer
index|[
literal|1
index|]
expr_stmt|;
name|yytoken
operator|=
name|T_SEMICOLON
expr_stmt|;
name|yylval
operator|=
literal|0
expr_stmt|;
name|action
operator|=
name|errorState
expr_stmt|;
goto|goto
name|_Lcheck_token
goto|;
block|}
name|hadErrors
operator|=
literal|true
expr_stmt|;
name|token_buffer
index|[
literal|0
index|]
operator|.
name|token
operator|=
name|yytoken
expr_stmt|;
name|token_buffer
index|[
literal|0
index|]
operator|.
name|dval
operator|=
name|yylval
expr_stmt|;
name|token_buffer
index|[
literal|0
index|]
operator|.
name|spell
operator|=
name|yytokenspell
expr_stmt|;
name|token_buffer
index|[
literal|0
index|]
operator|.
name|loc
operator|=
name|yylloc
expr_stmt|;
name|token_buffer
index|[
literal|1
index|]
operator|.
name|token
operator|=
name|yytoken
operator|=
name|lexer
operator|->
name|lex
argument_list|()
expr_stmt|;
name|token_buffer
index|[
literal|1
index|]
operator|.
name|dval
operator|=
name|yylval
operator|=
name|lexer
operator|->
name|tokenValue
argument_list|()
expr_stmt|;
name|token_buffer
index|[
literal|1
index|]
operator|.
name|spell
operator|=
name|yytokenspell
operator|=
name|lexer
operator|->
name|tokenSpell
argument_list|()
expr_stmt|;
name|token_buffer
index|[
literal|1
index|]
operator|.
name|loc
operator|=
name|yylloc
operator|=
name|location
argument_list|(
name|lexer
argument_list|)
expr_stmt|;
if|if
condition|(
name|t_action
argument_list|(
name|errorState
argument_list|,
name|yytoken
argument_list|)
condition|)
block|{
name|QString
name|msg
decl_stmt|;
name|int
name|token
init|=
name|token_buffer
index|[
literal|0
index|]
operator|.
name|token
decl_stmt|;
if|if
condition|(
name|token
operator|<
literal|0
operator|||
name|token
operator|>=
name|TERMINAL_COUNT
condition|)
name|msg
operator|=
name|qApp
operator|->
name|translate
argument_list|(
literal|"QQmlParser"
argument_list|,
literal|"Syntax error"
argument_list|)
expr_stmt|;
else|else
name|msg
operator|=
name|qApp
operator|->
name|translate
argument_list|(
literal|"QQmlParser"
argument_list|,
literal|"Unexpected token `%1'"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|spell
index|[
name|token
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|diagnostic_messages
operator|.
name|append
argument_list|(
name|DiagnosticMessage
argument_list|(
name|DiagnosticMessage
operator|::
name|Error
argument_list|,
name|token_buffer
index|[
literal|0
index|]
operator|.
name|loc
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|=
name|errorState
expr_stmt|;
goto|goto
name|_Lcheck_token
goto|;
block|}
specifier|static
name|int
name|tokens
index|[]
init|=
block|{
name|T_PLUS
block|,
name|T_EQ
block|,
name|T_COMMA
block|,
name|T_COLON
block|,
name|T_SEMICOLON
block|,
name|T_RPAREN
block|,
name|T_RBRACKET
block|,
name|T_RBRACE
block|,
name|T_NUMERIC_LITERAL
block|,
name|T_IDENTIFIER
block|,
name|T_LPAREN
block|,
name|T_LBRACKET
block|,
name|T_LBRACE
block|,
name|EOF_SYMBOL
block|}
decl_stmt|;
for|for
control|(
name|int
modifier|*
name|tk
init|=
name|tokens
init|;
operator|*
name|tk
operator|!=
name|EOF_SYMBOL
condition|;
operator|++
name|tk
control|)
block|{
name|int
name|a
init|=
name|t_action
argument_list|(
name|errorState
argument_list|,
operator|*
name|tk
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|>
literal|0
operator|&&
name|t_action
argument_list|(
name|a
argument_list|,
name|yytoken
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|msg
init|=
name|qApp
operator|->
name|translate
argument_list|(
literal|"QQmlParser"
argument_list|,
literal|"Expected token `%1'"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|spell
index|[
operator|*
name|tk
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|diagnostic_messages
operator|.
name|append
argument_list|(
name|DiagnosticMessage
argument_list|(
name|DiagnosticMessage
operator|::
name|Error
argument_list|,
name|token_buffer
index|[
literal|0
index|]
operator|.
name|loc
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|yytoken
operator|=
operator|*
name|tk
expr_stmt|;
name|yylval
operator|=
literal|0
expr_stmt|;
name|yylloc
operator|=
name|token_buffer
index|[
literal|0
index|]
operator|.
name|loc
expr_stmt|;
name|yylloc
operator|.
name|length
operator|=
literal|0
expr_stmt|;
name|first_token
operator|=
operator|&
name|token_buffer
index|[
literal|0
index|]
expr_stmt|;
name|last_token
operator|=
operator|&
name|token_buffer
index|[
literal|2
index|]
expr_stmt|;
name|action
operator|=
name|errorState
expr_stmt|;
goto|goto
name|_Lcheck_token
goto|;
block|}
block|}
for|for
control|(
name|int
name|tk
init|=
literal|1
init|;
name|tk
operator|<
name|TERMINAL_COUNT
condition|;
operator|++
name|tk
control|)
block|{
if|if
condition|(
name|tk
operator|==
name|T_AUTOMATIC_SEMICOLON
operator|||
name|tk
operator|==
name|T_FEED_UI_PROGRAM
operator|||
name|tk
operator|==
name|T_FEED_JS_STATEMENT
operator|||
name|tk
operator|==
name|T_FEED_JS_EXPRESSION
operator|||
name|tk
operator|==
name|T_FEED_JS_SOURCE_ELEMENT
condition|)
continue|continue;
name|int
name|a
init|=
name|t_action
argument_list|(
name|errorState
argument_list|,
name|tk
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|>
literal|0
operator|&&
name|t_action
argument_list|(
name|a
argument_list|,
name|yytoken
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|msg
init|=
name|qApp
operator|->
name|translate
argument_list|(
literal|"QQmlParser"
argument_list|,
literal|"Expected token `%1'"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|spell
index|[
name|tk
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|diagnostic_messages
operator|.
name|append
argument_list|(
name|DiagnosticMessage
argument_list|(
name|DiagnosticMessage
operator|::
name|Error
argument_list|,
name|token_buffer
index|[
literal|0
index|]
operator|.
name|loc
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|yytoken
operator|=
name|tk
expr_stmt|;
name|yylval
operator|=
literal|0
expr_stmt|;
name|yylloc
operator|=
name|token_buffer
index|[
literal|0
index|]
operator|.
name|loc
expr_stmt|;
name|yylloc
operator|.
name|length
operator|=
literal|0
expr_stmt|;
name|action
operator|=
name|errorState
expr_stmt|;
goto|goto
name|_Lcheck_token
goto|;
block|}
block|}
specifier|const
name|QString
name|msg
init|=
name|qApp
operator|->
name|translate
argument_list|(
literal|"QQmlParser"
argument_list|,
literal|"Syntax error"
argument_list|)
decl_stmt|;
name|diagnostic_messages
operator|.
name|append
argument_list|(
name|DiagnosticMessage
argument_list|(
name|DiagnosticMessage
operator|::
name|Error
argument_list|,
name|token_buffer
index|[
literal|0
index|]
operator|.
name|loc
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_macro
name|QT_QML_END_NAMESPACE
end_macro
end_unit
