begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtQml module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QQMLJSAST_P_H
end_ifndef
begin_define
DECL|macro|QQMLJSAST_P_H
define|#
directive|define
name|QQMLJSAST_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"qqmljsastvisitor_p.h"
end_include
begin_include
include|#
directive|include
file|"qqmljsglobal_p.h"
end_include
begin_include
include|#
directive|include
file|"qqmljsmemorypool_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_decl_stmt
name|QT_QML_BEGIN_NAMESPACE
DECL|macro|QQMLJS_DECLARE_AST_NODE
define|#
directive|define
name|QQMLJS_DECLARE_AST_NODE
parameter_list|(
name|name
parameter_list|)
define|\
value|enum { K = Kind_##name };
name|namespace
name|QSOperator
comment|// ### rename
block|{
enum|enum
name|Op
block|{
name|Add
block|,
name|And
block|,
name|InplaceAnd
block|,
name|Assign
block|,
name|BitAnd
block|,
name|BitOr
block|,
name|BitXor
block|,
name|InplaceSub
block|,
name|Div
block|,
name|InplaceDiv
block|,
name|Equal
block|,
name|Ge
block|,
name|Gt
block|,
name|In
block|,
name|InplaceAdd
block|,
name|InstanceOf
block|,
name|Le
block|,
name|LShift
block|,
name|InplaceLeftShift
block|,
name|Lt
block|,
name|Mod
block|,
name|InplaceMod
block|,
name|Mul
block|,
name|InplaceMul
block|,
name|NotEqual
block|,
name|Or
block|,
name|InplaceOr
block|,
name|RShift
block|,
name|InplaceRightShift
block|,
name|StrictEqual
block|,
name|StrictNotEqual
block|,
name|Sub
block|,
name|URShift
block|,
name|InplaceURightShift
block|,
name|InplaceXor
block|}
enum|;
block|}
end_decl_stmt
begin_comment
comment|// namespace QSOperator
end_comment
begin_decl_stmt
name|namespace
name|QQmlJS
block|{
name|namespace
name|AST
block|{
name|template
operator|<
name|typename
name|_T1
operator|,
name|typename
name|_T2
operator|>
name|_T1
name|cast
argument_list|(
argument|_T2 *ast
argument_list|)
block|{
if|if
condition|(
name|ast
operator|&&
name|ast
operator|->
name|kind
operator|==
name|static_cast
operator|<
name|_T1
operator|>
operator|(
literal|0
operator|)
operator|->
name|K
condition|)
return|return
name|static_cast
operator|<
name|_T1
operator|>
operator|(
name|ast
operator|)
return|;
return|return
literal|0
return|;
block|}
name|class
name|QML_PARSER_EXPORT
name|Node
range|:
name|public
name|Managed
block|{
name|public
operator|:
expr|enum
name|Kind
block|{
name|Kind_Undefined
block|,
name|Kind_ArgumentList
block|,
name|Kind_ArrayLiteral
block|,
name|Kind_ArrayMemberExpression
block|,
name|Kind_BinaryExpression
block|,
name|Kind_Block
block|,
name|Kind_BreakStatement
block|,
name|Kind_CallExpression
block|,
name|Kind_CaseBlock
block|,
name|Kind_CaseClause
block|,
name|Kind_CaseClauses
block|,
name|Kind_Catch
block|,
name|Kind_ConditionalExpression
block|,
name|Kind_ContinueStatement
block|,
name|Kind_DebuggerStatement
block|,
name|Kind_DefaultClause
block|,
name|Kind_DeleteExpression
block|,
name|Kind_DoWhileStatement
block|,
name|Kind_ElementList
block|,
name|Kind_Elision
block|,
name|Kind_EmptyStatement
block|,
name|Kind_Expression
block|,
name|Kind_ExpressionStatement
block|,
name|Kind_FalseLiteral
block|,
name|Kind_FieldMemberExpression
block|,
name|Kind_Finally
block|,
name|Kind_ForEachStatement
block|,
name|Kind_ForStatement
block|,
name|Kind_FormalParameterList
block|,
name|Kind_FunctionBody
block|,
name|Kind_FunctionDeclaration
block|,
name|Kind_FunctionExpression
block|,
name|Kind_FunctionSourceElement
block|,
name|Kind_IdentifierExpression
block|,
name|Kind_IdentifierPropertyName
block|,
name|Kind_IfStatement
block|,
name|Kind_LabelledStatement
block|,
name|Kind_LocalForEachStatement
block|,
name|Kind_LocalForStatement
block|,
name|Kind_NewExpression
block|,
name|Kind_NewMemberExpression
block|,
name|Kind_NotExpression
block|,
name|Kind_NullExpression
block|,
name|Kind_NumericLiteral
block|,
name|Kind_NumericLiteralPropertyName
block|,
name|Kind_ObjectLiteral
block|,
name|Kind_PostDecrementExpression
block|,
name|Kind_PostIncrementExpression
block|,
name|Kind_PreDecrementExpression
block|,
name|Kind_PreIncrementExpression
block|,
name|Kind_Program
block|,
name|Kind_PropertyAssignmentList
block|,
name|Kind_PropertyGetterSetter
block|,
name|Kind_PropertyName
block|,
name|Kind_PropertyNameAndValue
block|,
name|Kind_RegExpLiteral
block|,
name|Kind_ReturnStatement
block|,
name|Kind_SourceElement
block|,
name|Kind_SourceElements
block|,
name|Kind_StatementList
block|,
name|Kind_StatementSourceElement
block|,
name|Kind_StringLiteral
block|,
name|Kind_StringLiteralPropertyName
block|,
name|Kind_SwitchStatement
block|,
name|Kind_ThisExpression
block|,
name|Kind_ThrowStatement
block|,
name|Kind_TildeExpression
block|,
name|Kind_TrueLiteral
block|,
name|Kind_TryStatement
block|,
name|Kind_TypeOfExpression
block|,
name|Kind_UnaryMinusExpression
block|,
name|Kind_UnaryPlusExpression
block|,
name|Kind_VariableDeclaration
block|,
name|Kind_VariableDeclarationList
block|,
name|Kind_VariableStatement
block|,
name|Kind_VoidExpression
block|,
name|Kind_WhileStatement
block|,
name|Kind_WithStatement
block|,
name|Kind_NestedExpression
block|,
name|Kind_UiArrayBinding
block|,
name|Kind_UiImport
block|,
name|Kind_UiObjectBinding
block|,
name|Kind_UiObjectDefinition
block|,
name|Kind_UiObjectInitializer
block|,
name|Kind_UiObjectMemberList
block|,
name|Kind_UiArrayMemberList
block|,
name|Kind_UiPragma
block|,
name|Kind_UiProgram
block|,
name|Kind_UiParameterList
block|,
name|Kind_UiPublicMember
block|,
name|Kind_UiQualifiedId
block|,
name|Kind_UiQualifiedPragmaId
block|,
name|Kind_UiScriptBinding
block|,
name|Kind_UiSourceElement
block|,
name|Kind_UiHeaderItemList
block|}
block|;
specifier|inline
name|Node
argument_list|()
operator|:
name|kind
argument_list|(
argument|Kind_Undefined
argument_list|)
block|{}
comment|// NOTE: node destructors are never called,
comment|//       instead we block free the memory
comment|//       (see the NodePool class)
name|virtual
operator|~
name|Node
argument_list|()
block|{}
name|virtual
name|ExpressionNode
operator|*
name|expressionCast
argument_list|()
block|;
name|virtual
name|BinaryExpression
operator|*
name|binaryExpressionCast
argument_list|()
block|;
name|virtual
name|Statement
operator|*
name|statementCast
argument_list|()
block|;
name|virtual
name|UiObjectMember
operator|*
name|uiObjectMemberCast
argument_list|()
block|;
name|void
name|accept
argument_list|(
name|Visitor
operator|*
name|visitor
argument_list|)
block|;
specifier|static
name|void
name|accept
argument_list|(
name|Node
operator|*
name|node
argument_list|,
name|Visitor
operator|*
name|visitor
argument_list|)
block|;
specifier|inline
specifier|static
name|void
name|acceptChild
argument_list|(
argument|Node *node
argument_list|,
argument|Visitor *visitor
argument_list|)
block|{
return|return
name|accept
argument_list|(
name|node
argument_list|,
name|visitor
argument_list|)
return|;
block|}
comment|// ### remove
name|virtual
name|void
name|accept0
argument_list|(
name|Visitor
operator|*
name|visitor
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
operator|=
literal|0
block|;
comment|// attributes
name|int
name|kind
block|; }
decl_stmt|;
name|class
name|QML_PARSER_EXPORT
name|ExpressionNode
range|:
name|public
name|Node
block|{
name|public
operator|:
name|ExpressionNode
argument_list|()
block|{}
name|virtual
name|ExpressionNode
operator|*
name|expressionCast
argument_list|()
name|Q_DECL_OVERRIDE
block|; }
decl_stmt|;
name|class
name|QML_PARSER_EXPORT
name|Statement
range|:
name|public
name|Node
block|{
name|public
operator|:
name|Statement
argument_list|()
block|{}
name|virtual
name|Statement
operator|*
name|statementCast
argument_list|()
name|Q_DECL_OVERRIDE
block|; }
decl_stmt|;
name|class
name|QML_PARSER_EXPORT
name|NestedExpression
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|NestedExpression
argument_list|)
name|NestedExpression
argument_list|(
name|ExpressionNode
operator|*
name|expression
argument_list|)
operator|:
name|expression
argument_list|(
argument|expression
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|lparenToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|rparenToken
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|expression
block|;
name|SourceLocation
name|lparenToken
block|;
name|SourceLocation
name|rparenToken
block|; }
decl_stmt|;
name|class
name|QML_PARSER_EXPORT
name|ThisExpression
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|ThisExpression
argument_list|)
name|ThisExpression
argument_list|()
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|thisToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|thisToken
return|;
block|}
comment|// attributes
name|SourceLocation
name|thisToken
block|; }
decl_stmt|;
name|class
name|QML_PARSER_EXPORT
name|IdentifierExpression
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|IdentifierExpression
argument_list|)
name|IdentifierExpression
argument_list|(
specifier|const
name|QStringRef
operator|&
name|n
argument_list|)
operator|:
name|name
argument_list|(
argument|n
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|identifierToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|identifierToken
return|;
block|}
comment|// attributes
name|QStringRef
name|name
block|;
name|SourceLocation
name|identifierToken
block|; }
decl_stmt|;
name|class
name|QML_PARSER_EXPORT
name|NullExpression
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|NullExpression
argument_list|)
name|NullExpression
argument_list|()
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|nullToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|nullToken
return|;
block|}
comment|// attributes
name|SourceLocation
name|nullToken
block|; }
decl_stmt|;
name|class
name|QML_PARSER_EXPORT
name|TrueLiteral
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|TrueLiteral
argument_list|)
name|TrueLiteral
argument_list|()
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|trueToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|trueToken
return|;
block|}
comment|// attributes
name|SourceLocation
name|trueToken
block|; }
decl_stmt|;
name|class
name|QML_PARSER_EXPORT
name|FalseLiteral
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|FalseLiteral
argument_list|)
name|FalseLiteral
argument_list|()
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|falseToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|falseToken
return|;
block|}
comment|// attributes
name|SourceLocation
name|falseToken
block|; }
decl_stmt|;
name|class
name|QML_PARSER_EXPORT
name|NumericLiteral
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|NumericLiteral
argument_list|)
name|NumericLiteral
argument_list|(
argument|double v
argument_list|)
operator|:
name|value
argument_list|(
argument|v
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|literalToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|literalToken
return|;
block|}
comment|// attributes:
name|double
name|value
block|;
name|SourceLocation
name|literalToken
block|; }
decl_stmt|;
name|class
name|QML_PARSER_EXPORT
name|StringLiteral
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|StringLiteral
argument_list|)
name|StringLiteral
argument_list|(
specifier|const
name|QStringRef
operator|&
name|v
argument_list|)
operator|:
name|value
argument_list|(
argument|v
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|literalToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|literalToken
return|;
block|}
comment|// attributes:
name|QStringRef
name|value
block|;
name|SourceLocation
name|literalToken
block|; }
decl_stmt|;
name|class
name|QML_PARSER_EXPORT
name|RegExpLiteral
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|RegExpLiteral
argument_list|)
name|RegExpLiteral
argument_list|(
argument|const QStringRef&p
argument_list|,
argument|int f
argument_list|)
operator|:
name|pattern
argument_list|(
name|p
argument_list|)
block|,
name|flags
argument_list|(
argument|f
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|literalToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|literalToken
return|;
block|}
comment|// attributes:
name|QStringRef
name|pattern
block|;
name|int
name|flags
block|;
name|SourceLocation
name|literalToken
block|; }
decl_stmt|;
name|class
name|QML_PARSER_EXPORT
name|ArrayLiteral
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|ArrayLiteral
argument_list|)
name|ArrayLiteral
argument_list|(
name|Elision
operator|*
name|e
argument_list|)
operator|:
name|elements
argument_list|(
literal|0
argument_list|)
block|,
name|elision
argument_list|(
argument|e
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|ArrayLiteral
argument_list|(
name|ElementList
operator|*
name|elts
argument_list|)
operator|:
name|elements
argument_list|(
name|elts
argument_list|)
block|,
name|elision
argument_list|(
literal|0
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|ArrayLiteral
argument_list|(
name|ElementList
operator|*
name|elts
argument_list|,
name|Elision
operator|*
name|e
argument_list|)
operator|:
name|elements
argument_list|(
name|elts
argument_list|)
block|,
name|elision
argument_list|(
argument|e
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|lbracketToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|rbracketToken
return|;
block|}
comment|// attributes
name|ElementList
operator|*
name|elements
block|;
name|Elision
operator|*
name|elision
block|;
name|SourceLocation
name|lbracketToken
block|;
name|SourceLocation
name|commaToken
block|;
name|SourceLocation
name|rbracketToken
block|; }
decl_stmt|;
name|class
name|QML_PARSER_EXPORT
name|ObjectLiteral
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|ObjectLiteral
argument_list|)
name|ObjectLiteral
argument_list|()
operator|:
name|properties
argument_list|(
literal|0
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|ObjectLiteral
argument_list|(
name|PropertyAssignmentList
operator|*
name|plist
argument_list|)
operator|:
name|properties
argument_list|(
argument|plist
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|lbraceToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|rbraceToken
return|;
block|}
comment|// attributes
name|PropertyAssignmentList
operator|*
name|properties
block|;
name|SourceLocation
name|lbraceToken
block|;
name|SourceLocation
name|rbraceToken
block|; }
decl_stmt|;
name|class
name|QML_PARSER_EXPORT
name|Elision
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|Elision
argument_list|)
name|Elision
argument_list|()
operator|:
name|next
argument_list|(
argument|this
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|Elision
argument_list|(
argument|Elision *previous
argument_list|)
block|{
name|kind
operator|=
name|K
block|;
name|next
operator|=
name|previous
operator|->
name|next
block|;
name|previous
operator|->
name|next
operator|=
name|this
block|;     }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|commaToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|next
operator|?
name|next
operator|->
name|lastSourceLocation
argument_list|()
operator|:
name|commaToken
return|;
block|}
specifier|inline
name|Elision
operator|*
name|finish
argument_list|()
block|{
name|Elision
operator|*
name|front
operator|=
name|next
block|;
name|next
operator|=
literal|0
block|;
return|return
name|front
return|;
block|}
comment|// attributes
name|Elision
operator|*
name|next
block|;
name|SourceLocation
name|commaToken
block|; }
decl_stmt|;
name|class
name|QML_PARSER_EXPORT
name|ElementList
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|ElementList
argument_list|)
name|ElementList
argument_list|(
name|Elision
operator|*
name|e
argument_list|,
name|ExpressionNode
operator|*
name|expr
argument_list|)
operator|:
name|elision
argument_list|(
name|e
argument_list|)
block|,
name|expression
argument_list|(
name|expr
argument_list|)
block|,
name|next
argument_list|(
argument|this
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|ElementList
argument_list|(
name|ElementList
operator|*
name|previous
argument_list|,
name|Elision
operator|*
name|e
argument_list|,
name|ExpressionNode
operator|*
name|expr
argument_list|)
operator|:
name|elision
argument_list|(
name|e
argument_list|)
block|,
name|expression
argument_list|(
argument|expr
argument_list|)
block|{
name|kind
operator|=
name|K
block|;
name|next
operator|=
name|previous
operator|->
name|next
block|;
name|previous
operator|->
name|next
operator|=
name|this
block|;     }
specifier|inline
name|ElementList
operator|*
name|finish
argument_list|()
block|{
name|ElementList
operator|*
name|front
operator|=
name|next
block|;
name|next
operator|=
literal|0
block|;
return|return
name|front
return|;
block|}
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
name|elision
condition|)
return|return
name|elision
operator|->
name|firstSourceLocation
argument_list|()
return|;
return|return
name|expression
operator|->
name|firstSourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
name|next
condition|)
return|return
name|next
operator|->
name|lastSourceLocation
argument_list|()
return|;
return|return
name|expression
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
end_decl_stmt
begin_comment
comment|// attributes
end_comment
begin_decl_stmt
name|Elision
modifier|*
name|elision
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|ExpressionNode
modifier|*
name|expression
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|ElementList
modifier|*
name|next
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|SourceLocation
name|commaToken
decl_stmt|;
end_decl_stmt
begin_decl_stmt
unit|};
name|class
name|QML_PARSER_EXPORT
name|PropertyName
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|PropertyName
argument_list|)
name|PropertyName
argument_list|()
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|propertyNameToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|propertyNameToken
return|;
block|}
comment|// attributes
name|SourceLocation
name|propertyNameToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|PropertyAssignment
range|:
name|public
name|Node
block|{
name|public
operator|:
name|PropertyAssignment
argument_list|()
block|{}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|PropertyAssignmentList
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|PropertyAssignmentList
argument_list|)
name|PropertyAssignmentList
argument_list|(
name|PropertyAssignment
operator|*
name|assignment
argument_list|)
operator|:
name|assignment
argument_list|(
name|assignment
argument_list|)
block|,
name|next
argument_list|(
argument|this
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|PropertyAssignmentList
argument_list|(
name|PropertyAssignmentList
operator|*
name|previous
argument_list|,
name|PropertyAssignment
operator|*
name|assignment
argument_list|)
operator|:
name|assignment
argument_list|(
argument|assignment
argument_list|)
block|{
name|kind
operator|=
name|K
block|;
name|next
operator|=
name|previous
operator|->
name|next
block|;
name|previous
operator|->
name|next
operator|=
name|this
block|;     }
specifier|inline
name|PropertyAssignmentList
operator|*
name|finish
argument_list|()
block|{
name|PropertyAssignmentList
operator|*
name|front
operator|=
name|next
block|;
name|next
operator|=
literal|0
block|;
return|return
name|front
return|;
block|}
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|assignment
operator|->
name|firstSourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|next
operator|?
name|next
operator|->
name|lastSourceLocation
argument_list|()
operator|:
name|assignment
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|PropertyAssignment
operator|*
name|assignment
block|;
name|PropertyAssignmentList
operator|*
name|next
block|;
name|SourceLocation
name|commaToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|PropertyNameAndValue
range|:
name|public
name|PropertyAssignment
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|PropertyNameAndValue
argument_list|)
name|PropertyNameAndValue
argument_list|(
name|PropertyName
operator|*
name|n
argument_list|,
name|ExpressionNode
operator|*
name|v
argument_list|)
operator|:
name|name
argument_list|(
name|n
argument_list|)
block|,
name|value
argument_list|(
argument|v
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|name
operator|->
name|firstSourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|value
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|PropertyName
operator|*
name|name
block|;
name|SourceLocation
name|colonToken
block|;
name|ExpressionNode
operator|*
name|value
block|;
name|SourceLocation
name|commaToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|PropertyGetterSetter
range|:
name|public
name|PropertyAssignment
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
name|PropertyGetterSetter
argument_list|)
expr|enum
name|Type
block|{
name|Getter
block|,
name|Setter
block|}
block|;
name|PropertyGetterSetter
argument_list|(
name|PropertyName
operator|*
name|n
argument_list|,
name|FunctionBody
operator|*
name|b
argument_list|)
operator|:
name|type
argument_list|(
name|Getter
argument_list|)
block|,
name|name
argument_list|(
name|n
argument_list|)
block|,
name|formals
argument_list|(
literal|0
argument_list|)
block|,
name|functionBody
argument_list|(
argument|b
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|PropertyGetterSetter
argument_list|(
name|PropertyName
operator|*
name|n
argument_list|,
name|FormalParameterList
operator|*
name|f
argument_list|,
name|FunctionBody
operator|*
name|b
argument_list|)
operator|:
name|type
argument_list|(
name|Setter
argument_list|)
block|,
name|name
argument_list|(
name|n
argument_list|)
block|,
name|formals
argument_list|(
name|f
argument_list|)
block|,
name|functionBody
argument_list|(
argument|b
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|getSetToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|rbraceToken
return|;
block|}
comment|// attributes
name|Type
name|type
block|;
name|SourceLocation
name|getSetToken
block|;
name|PropertyName
operator|*
name|name
block|;
name|SourceLocation
name|lparenToken
block|;
name|FormalParameterList
operator|*
name|formals
block|;
name|SourceLocation
name|rparenToken
block|;
name|SourceLocation
name|lbraceToken
block|;
name|FunctionBody
operator|*
name|functionBody
block|;
name|SourceLocation
name|rbraceToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|IdentifierPropertyName
range|:
name|public
name|PropertyName
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|IdentifierPropertyName
argument_list|)
name|IdentifierPropertyName
argument_list|(
specifier|const
name|QStringRef
operator|&
name|n
argument_list|)
operator|:
name|id
argument_list|(
argument|n
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
comment|// attributes
name|QStringRef
name|id
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|StringLiteralPropertyName
range|:
name|public
name|PropertyName
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|StringLiteralPropertyName
argument_list|)
name|StringLiteralPropertyName
argument_list|(
specifier|const
name|QStringRef
operator|&
name|n
argument_list|)
operator|:
name|id
argument_list|(
argument|n
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
comment|// attributes
name|QStringRef
name|id
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|NumericLiteralPropertyName
range|:
name|public
name|PropertyName
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|NumericLiteralPropertyName
argument_list|)
name|NumericLiteralPropertyName
argument_list|(
argument|double n
argument_list|)
operator|:
name|id
argument_list|(
argument|n
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
comment|// attributes
name|double
name|id
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|ArrayMemberExpression
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|ArrayMemberExpression
argument_list|)
name|ArrayMemberExpression
argument_list|(
name|ExpressionNode
operator|*
name|b
argument_list|,
name|ExpressionNode
operator|*
name|e
argument_list|)
operator|:
name|base
argument_list|(
name|b
argument_list|)
block|,
name|expression
argument_list|(
argument|e
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|base
operator|->
name|firstSourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|rbracketToken
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|base
block|;
name|ExpressionNode
operator|*
name|expression
block|;
name|SourceLocation
name|lbracketToken
block|;
name|SourceLocation
name|rbracketToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|FieldMemberExpression
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|FieldMemberExpression
argument_list|)
name|FieldMemberExpression
argument_list|(
name|ExpressionNode
operator|*
name|b
argument_list|,
specifier|const
name|QStringRef
operator|&
name|n
argument_list|)
operator|:
name|base
argument_list|(
name|b
argument_list|)
block|,
name|name
argument_list|(
argument|n
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|base
operator|->
name|firstSourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|identifierToken
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|base
block|;
name|QStringRef
name|name
block|;
name|SourceLocation
name|dotToken
block|;
name|SourceLocation
name|identifierToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|NewMemberExpression
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|NewMemberExpression
argument_list|)
name|NewMemberExpression
argument_list|(
name|ExpressionNode
operator|*
name|b
argument_list|,
name|ArgumentList
operator|*
name|a
argument_list|)
operator|:
name|base
argument_list|(
name|b
argument_list|)
block|,
name|arguments
argument_list|(
argument|a
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|newToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|rparenToken
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|base
block|;
name|ArgumentList
operator|*
name|arguments
block|;
name|SourceLocation
name|newToken
block|;
name|SourceLocation
name|lparenToken
block|;
name|SourceLocation
name|rparenToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|NewExpression
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|NewExpression
argument_list|)
name|NewExpression
argument_list|(
name|ExpressionNode
operator|*
name|e
argument_list|)
operator|:
name|expression
argument_list|(
argument|e
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|newToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|expression
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|expression
block|;
name|SourceLocation
name|newToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|CallExpression
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|CallExpression
argument_list|)
name|CallExpression
argument_list|(
name|ExpressionNode
operator|*
name|b
argument_list|,
name|ArgumentList
operator|*
name|a
argument_list|)
operator|:
name|base
argument_list|(
name|b
argument_list|)
block|,
name|arguments
argument_list|(
argument|a
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|base
operator|->
name|firstSourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|rparenToken
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|base
block|;
name|ArgumentList
operator|*
name|arguments
block|;
name|SourceLocation
name|lparenToken
block|;
name|SourceLocation
name|rparenToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|ArgumentList
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|ArgumentList
argument_list|)
name|ArgumentList
argument_list|(
name|ExpressionNode
operator|*
name|e
argument_list|)
operator|:
name|expression
argument_list|(
name|e
argument_list|)
block|,
name|next
argument_list|(
argument|this
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|ArgumentList
argument_list|(
name|ArgumentList
operator|*
name|previous
argument_list|,
name|ExpressionNode
operator|*
name|e
argument_list|)
operator|:
name|expression
argument_list|(
argument|e
argument_list|)
block|{
name|kind
operator|=
name|K
block|;
name|next
operator|=
name|previous
operator|->
name|next
block|;
name|previous
operator|->
name|next
operator|=
name|this
block|;     }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|expression
operator|->
name|firstSourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
name|next
condition|)
return|return
name|next
operator|->
name|lastSourceLocation
argument_list|()
return|;
return|return
name|expression
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
end_decl_stmt
begin_function
specifier|inline
name|ArgumentList
modifier|*
name|finish
parameter_list|()
block|{
name|ArgumentList
modifier|*
name|front
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|0
expr_stmt|;
return|return
name|front
return|;
block|}
end_function
begin_comment
comment|// attributes
end_comment
begin_decl_stmt
name|ExpressionNode
modifier|*
name|expression
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|ArgumentList
modifier|*
name|next
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|SourceLocation
name|commaToken
decl_stmt|;
end_decl_stmt
begin_decl_stmt
unit|};
name|class
name|QML_PARSER_EXPORT
name|PostIncrementExpression
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|PostIncrementExpression
argument_list|)
name|PostIncrementExpression
argument_list|(
name|ExpressionNode
operator|*
name|b
argument_list|)
operator|:
name|base
argument_list|(
argument|b
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|base
operator|->
name|firstSourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|incrementToken
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|base
block|;
name|SourceLocation
name|incrementToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|PostDecrementExpression
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|PostDecrementExpression
argument_list|)
name|PostDecrementExpression
argument_list|(
name|ExpressionNode
operator|*
name|b
argument_list|)
operator|:
name|base
argument_list|(
argument|b
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|base
operator|->
name|firstSourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|decrementToken
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|base
block|;
name|SourceLocation
name|decrementToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|DeleteExpression
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|DeleteExpression
argument_list|)
name|DeleteExpression
argument_list|(
name|ExpressionNode
operator|*
name|e
argument_list|)
operator|:
name|expression
argument_list|(
argument|e
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|deleteToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|expression
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|expression
block|;
name|SourceLocation
name|deleteToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|VoidExpression
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|VoidExpression
argument_list|)
name|VoidExpression
argument_list|(
name|ExpressionNode
operator|*
name|e
argument_list|)
operator|:
name|expression
argument_list|(
argument|e
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|voidToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|expression
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|expression
block|;
name|SourceLocation
name|voidToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|TypeOfExpression
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|TypeOfExpression
argument_list|)
name|TypeOfExpression
argument_list|(
name|ExpressionNode
operator|*
name|e
argument_list|)
operator|:
name|expression
argument_list|(
argument|e
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|typeofToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|expression
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|expression
block|;
name|SourceLocation
name|typeofToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|PreIncrementExpression
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|PreIncrementExpression
argument_list|)
name|PreIncrementExpression
argument_list|(
name|ExpressionNode
operator|*
name|e
argument_list|)
operator|:
name|expression
argument_list|(
argument|e
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|incrementToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|expression
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|expression
block|;
name|SourceLocation
name|incrementToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|PreDecrementExpression
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|PreDecrementExpression
argument_list|)
name|PreDecrementExpression
argument_list|(
name|ExpressionNode
operator|*
name|e
argument_list|)
operator|:
name|expression
argument_list|(
argument|e
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|decrementToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|expression
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|expression
block|;
name|SourceLocation
name|decrementToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|UnaryPlusExpression
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|UnaryPlusExpression
argument_list|)
name|UnaryPlusExpression
argument_list|(
name|ExpressionNode
operator|*
name|e
argument_list|)
operator|:
name|expression
argument_list|(
argument|e
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|plusToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|expression
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|expression
block|;
name|SourceLocation
name|plusToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|UnaryMinusExpression
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|UnaryMinusExpression
argument_list|)
name|UnaryMinusExpression
argument_list|(
name|ExpressionNode
operator|*
name|e
argument_list|)
operator|:
name|expression
argument_list|(
argument|e
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|minusToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|expression
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|expression
block|;
name|SourceLocation
name|minusToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|TildeExpression
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|TildeExpression
argument_list|)
name|TildeExpression
argument_list|(
name|ExpressionNode
operator|*
name|e
argument_list|)
operator|:
name|expression
argument_list|(
argument|e
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|tildeToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|expression
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|expression
block|;
name|SourceLocation
name|tildeToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|NotExpression
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|NotExpression
argument_list|)
name|NotExpression
argument_list|(
name|ExpressionNode
operator|*
name|e
argument_list|)
operator|:
name|expression
argument_list|(
argument|e
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|notToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|expression
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|expression
block|;
name|SourceLocation
name|notToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|BinaryExpression
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|BinaryExpression
argument_list|)
name|BinaryExpression
argument_list|(
argument|ExpressionNode *l
argument_list|,
argument|int o
argument_list|,
argument|ExpressionNode *r
argument_list|)
operator|:
name|left
argument_list|(
name|l
argument_list|)
block|,
name|op
argument_list|(
name|o
argument_list|)
block|,
name|right
argument_list|(
argument|r
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|BinaryExpression
operator|*
name|binaryExpressionCast
argument_list|()
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|left
operator|->
name|firstSourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|right
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|left
block|;
name|int
name|op
block|;
name|ExpressionNode
operator|*
name|right
block|;
name|SourceLocation
name|operatorToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|ConditionalExpression
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|ConditionalExpression
argument_list|)
name|ConditionalExpression
argument_list|(
name|ExpressionNode
operator|*
name|e
argument_list|,
name|ExpressionNode
operator|*
name|t
argument_list|,
name|ExpressionNode
operator|*
name|f
argument_list|)
operator|:
name|expression
argument_list|(
name|e
argument_list|)
block|,
name|ok
argument_list|(
name|t
argument_list|)
block|,
name|ko
argument_list|(
argument|f
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|expression
operator|->
name|firstSourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|ko
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|expression
block|;
name|ExpressionNode
operator|*
name|ok
block|;
name|ExpressionNode
operator|*
name|ko
block|;
name|SourceLocation
name|questionToken
block|;
name|SourceLocation
name|colonToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|Expression
range|:
name|public
name|ExpressionNode
comment|// ### rename
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|Expression
argument_list|)
name|Expression
argument_list|(
name|ExpressionNode
operator|*
name|l
argument_list|,
name|ExpressionNode
operator|*
name|r
argument_list|)
operator|:
name|left
argument_list|(
name|l
argument_list|)
block|,
name|right
argument_list|(
argument|r
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|left
operator|->
name|firstSourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|right
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|left
block|;
name|ExpressionNode
operator|*
name|right
block|;
name|SourceLocation
name|commaToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|Block
range|:
name|public
name|Statement
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|Block
argument_list|)
name|Block
argument_list|(
name|StatementList
operator|*
name|slist
argument_list|)
operator|:
name|statements
argument_list|(
argument|slist
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|lbraceToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|rbraceToken
return|;
block|}
comment|// attributes
name|StatementList
operator|*
name|statements
block|;
name|SourceLocation
name|lbraceToken
block|;
name|SourceLocation
name|rbraceToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|StatementList
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|StatementList
argument_list|)
name|StatementList
argument_list|(
name|Statement
operator|*
name|stmt
argument_list|)
operator|:
name|statement
argument_list|(
name|stmt
argument_list|)
block|,
name|next
argument_list|(
argument|this
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|StatementList
argument_list|(
name|StatementList
operator|*
name|previous
argument_list|,
name|Statement
operator|*
name|stmt
argument_list|)
operator|:
name|statement
argument_list|(
argument|stmt
argument_list|)
block|{
name|kind
operator|=
name|K
block|;
name|next
operator|=
name|previous
operator|->
name|next
block|;
name|previous
operator|->
name|next
operator|=
name|this
block|;     }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|statement
operator|->
name|firstSourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|next
operator|?
name|next
operator|->
name|lastSourceLocation
argument_list|()
operator|:
name|statement
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
specifier|inline
name|StatementList
operator|*
name|finish
argument_list|()
block|{
name|StatementList
operator|*
name|front
operator|=
name|next
block|;
name|next
operator|=
literal|0
block|;
return|return
name|front
return|;
block|}
comment|// attributes
name|Statement
operator|*
name|statement
block|;
name|StatementList
operator|*
name|next
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|VariableStatement
range|:
name|public
name|Statement
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|VariableStatement
argument_list|)
name|VariableStatement
argument_list|(
name|VariableDeclarationList
operator|*
name|vlist
argument_list|)
operator|:
name|declarations
argument_list|(
argument|vlist
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|declarationKindToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|semicolonToken
return|;
block|}
comment|// attributes
name|VariableDeclarationList
operator|*
name|declarations
block|;
name|SourceLocation
name|declarationKindToken
block|;
name|SourceLocation
name|semicolonToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|VariableDeclaration
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|VariableDeclaration
argument_list|)
name|VariableDeclaration
argument_list|(
specifier|const
name|QStringRef
operator|&
name|n
argument_list|,
name|ExpressionNode
operator|*
name|e
argument_list|)
operator|:
name|name
argument_list|(
name|n
argument_list|)
block|,
name|expression
argument_list|(
name|e
argument_list|)
block|,
name|readOnly
argument_list|(
argument|false
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|identifierToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|expression
operator|?
name|expression
operator|->
name|lastSourceLocation
argument_list|()
operator|:
name|identifierToken
return|;
block|}
comment|// attributes
name|QStringRef
name|name
block|;
name|ExpressionNode
operator|*
name|expression
block|;
name|bool
name|readOnly
block|;
name|SourceLocation
name|identifierToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|VariableDeclarationList
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|VariableDeclarationList
argument_list|)
name|VariableDeclarationList
argument_list|(
name|VariableDeclaration
operator|*
name|decl
argument_list|)
operator|:
name|declaration
argument_list|(
name|decl
argument_list|)
block|,
name|next
argument_list|(
argument|this
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|VariableDeclarationList
argument_list|(
name|VariableDeclarationList
operator|*
name|previous
argument_list|,
name|VariableDeclaration
operator|*
name|decl
argument_list|)
operator|:
name|declaration
argument_list|(
argument|decl
argument_list|)
block|{
name|kind
operator|=
name|K
block|;
name|next
operator|=
name|previous
operator|->
name|next
block|;
name|previous
operator|->
name|next
operator|=
name|this
block|;     }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|declaration
operator|->
name|firstSourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
name|next
condition|)
return|return
name|next
operator|->
name|lastSourceLocation
argument_list|()
return|;
return|return
name|declaration
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
end_decl_stmt
begin_function
specifier|inline
name|VariableDeclarationList
modifier|*
name|finish
parameter_list|(
name|bool
name|readOnly
parameter_list|)
block|{
name|VariableDeclarationList
modifier|*
name|front
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|readOnly
condition|)
block|{
name|VariableDeclarationList
modifier|*
name|vdl
decl_stmt|;
for|for
control|(
name|vdl
operator|=
name|front
init|;
name|vdl
operator|!=
literal|0
condition|;
name|vdl
operator|=
name|vdl
operator|->
name|next
control|)
name|vdl
operator|->
name|declaration
operator|->
name|readOnly
operator|=
name|true
expr_stmt|;
block|}
return|return
name|front
return|;
block|}
end_function
begin_comment
comment|// attributes
end_comment
begin_decl_stmt
name|VariableDeclaration
modifier|*
name|declaration
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|VariableDeclarationList
modifier|*
name|next
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|SourceLocation
name|commaToken
decl_stmt|;
end_decl_stmt
begin_decl_stmt
unit|};
name|class
name|QML_PARSER_EXPORT
name|EmptyStatement
range|:
name|public
name|Statement
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|EmptyStatement
argument_list|)
name|EmptyStatement
argument_list|()
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|semicolonToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|semicolonToken
return|;
block|}
comment|// attributes
name|SourceLocation
name|semicolonToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|ExpressionStatement
range|:
name|public
name|Statement
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|ExpressionStatement
argument_list|)
name|ExpressionStatement
argument_list|(
name|ExpressionNode
operator|*
name|e
argument_list|)
operator|:
name|expression
argument_list|(
argument|e
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|expression
operator|->
name|firstSourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|semicolonToken
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|expression
block|;
name|SourceLocation
name|semicolonToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|IfStatement
range|:
name|public
name|Statement
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|IfStatement
argument_list|)
name|IfStatement
argument_list|(
name|ExpressionNode
operator|*
name|e
argument_list|,
name|Statement
operator|*
name|t
argument_list|,
name|Statement
operator|*
name|f
operator|=
literal|0
argument_list|)
operator|:
name|expression
argument_list|(
name|e
argument_list|)
block|,
name|ok
argument_list|(
name|t
argument_list|)
block|,
name|ko
argument_list|(
argument|f
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|ifToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
name|ko
condition|)
return|return
name|ko
operator|->
name|lastSourceLocation
argument_list|()
return|;
return|return
name|ok
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
end_decl_stmt
begin_comment
comment|// attributes
end_comment
begin_decl_stmt
name|ExpressionNode
modifier|*
name|expression
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Statement
modifier|*
name|ok
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Statement
modifier|*
name|ko
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|SourceLocation
name|ifToken
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|SourceLocation
name|lparenToken
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|SourceLocation
name|rparenToken
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|SourceLocation
name|elseToken
decl_stmt|;
end_decl_stmt
begin_decl_stmt
unit|};
name|class
name|QML_PARSER_EXPORT
name|DoWhileStatement
range|:
name|public
name|Statement
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|DoWhileStatement
argument_list|)
name|DoWhileStatement
argument_list|(
name|Statement
operator|*
name|stmt
argument_list|,
name|ExpressionNode
operator|*
name|e
argument_list|)
operator|:
name|statement
argument_list|(
name|stmt
argument_list|)
block|,
name|expression
argument_list|(
argument|e
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|doToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|semicolonToken
return|;
block|}
comment|// attributes
name|Statement
operator|*
name|statement
block|;
name|ExpressionNode
operator|*
name|expression
block|;
name|SourceLocation
name|doToken
block|;
name|SourceLocation
name|whileToken
block|;
name|SourceLocation
name|lparenToken
block|;
name|SourceLocation
name|rparenToken
block|;
name|SourceLocation
name|semicolonToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|WhileStatement
range|:
name|public
name|Statement
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|WhileStatement
argument_list|)
name|WhileStatement
argument_list|(
name|ExpressionNode
operator|*
name|e
argument_list|,
name|Statement
operator|*
name|stmt
argument_list|)
operator|:
name|expression
argument_list|(
name|e
argument_list|)
block|,
name|statement
argument_list|(
argument|stmt
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|whileToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|statement
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|expression
block|;
name|Statement
operator|*
name|statement
block|;
name|SourceLocation
name|whileToken
block|;
name|SourceLocation
name|lparenToken
block|;
name|SourceLocation
name|rparenToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|ForStatement
range|:
name|public
name|Statement
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|ForStatement
argument_list|)
name|ForStatement
argument_list|(
name|ExpressionNode
operator|*
name|i
argument_list|,
name|ExpressionNode
operator|*
name|c
argument_list|,
name|ExpressionNode
operator|*
name|e
argument_list|,
name|Statement
operator|*
name|stmt
argument_list|)
operator|:
name|initialiser
argument_list|(
name|i
argument_list|)
block|,
name|condition
argument_list|(
name|c
argument_list|)
block|,
name|expression
argument_list|(
name|e
argument_list|)
block|,
name|statement
argument_list|(
argument|stmt
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|forToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|statement
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|initialiser
block|;
name|ExpressionNode
operator|*
name|condition
block|;
name|ExpressionNode
operator|*
name|expression
block|;
name|Statement
operator|*
name|statement
block|;
name|SourceLocation
name|forToken
block|;
name|SourceLocation
name|lparenToken
block|;
name|SourceLocation
name|firstSemicolonToken
block|;
name|SourceLocation
name|secondSemicolonToken
block|;
name|SourceLocation
name|rparenToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|LocalForStatement
range|:
name|public
name|Statement
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|LocalForStatement
argument_list|)
name|LocalForStatement
argument_list|(
name|VariableDeclarationList
operator|*
name|vlist
argument_list|,
name|ExpressionNode
operator|*
name|c
argument_list|,
name|ExpressionNode
operator|*
name|e
argument_list|,
name|Statement
operator|*
name|stmt
argument_list|)
operator|:
name|declarations
argument_list|(
name|vlist
argument_list|)
block|,
name|condition
argument_list|(
name|c
argument_list|)
block|,
name|expression
argument_list|(
name|e
argument_list|)
block|,
name|statement
argument_list|(
argument|stmt
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|forToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|statement
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|VariableDeclarationList
operator|*
name|declarations
block|;
name|ExpressionNode
operator|*
name|condition
block|;
name|ExpressionNode
operator|*
name|expression
block|;
name|Statement
operator|*
name|statement
block|;
name|SourceLocation
name|forToken
block|;
name|SourceLocation
name|lparenToken
block|;
name|SourceLocation
name|varToken
block|;
name|SourceLocation
name|firstSemicolonToken
block|;
name|SourceLocation
name|secondSemicolonToken
block|;
name|SourceLocation
name|rparenToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|ForEachStatement
range|:
name|public
name|Statement
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|ForEachStatement
argument_list|)
name|ForEachStatement
argument_list|(
name|ExpressionNode
operator|*
name|i
argument_list|,
name|ExpressionNode
operator|*
name|e
argument_list|,
name|Statement
operator|*
name|stmt
argument_list|)
operator|:
name|initialiser
argument_list|(
name|i
argument_list|)
block|,
name|expression
argument_list|(
name|e
argument_list|)
block|,
name|statement
argument_list|(
argument|stmt
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|forToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|statement
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|initialiser
block|;
name|ExpressionNode
operator|*
name|expression
block|;
name|Statement
operator|*
name|statement
block|;
name|SourceLocation
name|forToken
block|;
name|SourceLocation
name|lparenToken
block|;
name|SourceLocation
name|inToken
block|;
name|SourceLocation
name|rparenToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|LocalForEachStatement
range|:
name|public
name|Statement
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|LocalForEachStatement
argument_list|)
name|LocalForEachStatement
argument_list|(
name|VariableDeclaration
operator|*
name|v
argument_list|,
name|ExpressionNode
operator|*
name|e
argument_list|,
name|Statement
operator|*
name|stmt
argument_list|)
operator|:
name|declaration
argument_list|(
name|v
argument_list|)
block|,
name|expression
argument_list|(
name|e
argument_list|)
block|,
name|statement
argument_list|(
argument|stmt
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|forToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|statement
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|VariableDeclaration
operator|*
name|declaration
block|;
name|ExpressionNode
operator|*
name|expression
block|;
name|Statement
operator|*
name|statement
block|;
name|SourceLocation
name|forToken
block|;
name|SourceLocation
name|lparenToken
block|;
name|SourceLocation
name|varToken
block|;
name|SourceLocation
name|inToken
block|;
name|SourceLocation
name|rparenToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|ContinueStatement
range|:
name|public
name|Statement
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|ContinueStatement
argument_list|)
name|ContinueStatement
argument_list|(
specifier|const
name|QStringRef
operator|&
name|l
operator|=
name|QStringRef
argument_list|()
argument_list|)
operator|:
name|label
argument_list|(
argument|l
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|continueToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|semicolonToken
return|;
block|}
comment|// attributes
name|QStringRef
name|label
block|;
name|SourceLocation
name|continueToken
block|;
name|SourceLocation
name|identifierToken
block|;
name|SourceLocation
name|semicolonToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|BreakStatement
range|:
name|public
name|Statement
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|BreakStatement
argument_list|)
name|BreakStatement
argument_list|(
specifier|const
name|QStringRef
operator|&
name|l
argument_list|)
operator|:
name|label
argument_list|(
argument|l
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|breakToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|semicolonToken
return|;
block|}
comment|// attributes
name|QStringRef
name|label
block|;
name|SourceLocation
name|breakToken
block|;
name|SourceLocation
name|identifierToken
block|;
name|SourceLocation
name|semicolonToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|ReturnStatement
range|:
name|public
name|Statement
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|ReturnStatement
argument_list|)
name|ReturnStatement
argument_list|(
name|ExpressionNode
operator|*
name|e
argument_list|)
operator|:
name|expression
argument_list|(
argument|e
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|returnToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|semicolonToken
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|expression
block|;
name|SourceLocation
name|returnToken
block|;
name|SourceLocation
name|semicolonToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|WithStatement
range|:
name|public
name|Statement
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|WithStatement
argument_list|)
name|WithStatement
argument_list|(
name|ExpressionNode
operator|*
name|e
argument_list|,
name|Statement
operator|*
name|stmt
argument_list|)
operator|:
name|expression
argument_list|(
name|e
argument_list|)
block|,
name|statement
argument_list|(
argument|stmt
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|withToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|statement
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|expression
block|;
name|Statement
operator|*
name|statement
block|;
name|SourceLocation
name|withToken
block|;
name|SourceLocation
name|lparenToken
block|;
name|SourceLocation
name|rparenToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|CaseBlock
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|CaseBlock
argument_list|)
name|CaseBlock
argument_list|(
name|CaseClauses
operator|*
name|c
argument_list|,
name|DefaultClause
operator|*
name|d
operator|=
literal|0
argument_list|,
name|CaseClauses
operator|*
name|r
operator|=
literal|0
argument_list|)
operator|:
name|clauses
argument_list|(
name|c
argument_list|)
block|,
name|defaultClause
argument_list|(
name|d
argument_list|)
block|,
name|moreClauses
argument_list|(
argument|r
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|lbraceToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|rbraceToken
return|;
block|}
comment|// attributes
name|CaseClauses
operator|*
name|clauses
block|;
name|DefaultClause
operator|*
name|defaultClause
block|;
name|CaseClauses
operator|*
name|moreClauses
block|;
name|SourceLocation
name|lbraceToken
block|;
name|SourceLocation
name|rbraceToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|SwitchStatement
range|:
name|public
name|Statement
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|SwitchStatement
argument_list|)
name|SwitchStatement
argument_list|(
name|ExpressionNode
operator|*
name|e
argument_list|,
name|CaseBlock
operator|*
name|b
argument_list|)
operator|:
name|expression
argument_list|(
name|e
argument_list|)
block|,
name|block
argument_list|(
argument|b
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|switchToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|block
operator|->
name|rbraceToken
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|expression
block|;
name|CaseBlock
operator|*
name|block
block|;
name|SourceLocation
name|switchToken
block|;
name|SourceLocation
name|lparenToken
block|;
name|SourceLocation
name|rparenToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|CaseClause
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|CaseClause
argument_list|)
name|CaseClause
argument_list|(
name|ExpressionNode
operator|*
name|e
argument_list|,
name|StatementList
operator|*
name|slist
argument_list|)
operator|:
name|expression
argument_list|(
name|e
argument_list|)
block|,
name|statements
argument_list|(
argument|slist
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|caseToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|statements
operator|?
name|statements
operator|->
name|lastSourceLocation
argument_list|()
operator|:
name|colonToken
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|expression
block|;
name|StatementList
operator|*
name|statements
block|;
name|SourceLocation
name|caseToken
block|;
name|SourceLocation
name|colonToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|CaseClauses
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|CaseClauses
argument_list|)
name|CaseClauses
argument_list|(
name|CaseClause
operator|*
name|c
argument_list|)
operator|:
name|clause
argument_list|(
name|c
argument_list|)
block|,
name|next
argument_list|(
argument|this
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|CaseClauses
argument_list|(
name|CaseClauses
operator|*
name|previous
argument_list|,
name|CaseClause
operator|*
name|c
argument_list|)
operator|:
name|clause
argument_list|(
argument|c
argument_list|)
block|{
name|kind
operator|=
name|K
block|;
name|next
operator|=
name|previous
operator|->
name|next
block|;
name|previous
operator|->
name|next
operator|=
name|this
block|;     }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|clause
operator|->
name|firstSourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|next
operator|?
name|next
operator|->
name|lastSourceLocation
argument_list|()
operator|:
name|clause
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
specifier|inline
name|CaseClauses
operator|*
name|finish
argument_list|()
block|{
name|CaseClauses
operator|*
name|front
operator|=
name|next
block|;
name|next
operator|=
literal|0
block|;
return|return
name|front
return|;
block|}
comment|//attributes
name|CaseClause
operator|*
name|clause
block|;
name|CaseClauses
operator|*
name|next
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|DefaultClause
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|DefaultClause
argument_list|)
name|DefaultClause
argument_list|(
name|StatementList
operator|*
name|slist
argument_list|)
operator|:
name|statements
argument_list|(
argument|slist
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|defaultToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|statements
operator|?
name|statements
operator|->
name|lastSourceLocation
argument_list|()
operator|:
name|colonToken
return|;
block|}
comment|// attributes
name|StatementList
operator|*
name|statements
block|;
name|SourceLocation
name|defaultToken
block|;
name|SourceLocation
name|colonToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|LabelledStatement
range|:
name|public
name|Statement
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|LabelledStatement
argument_list|)
name|LabelledStatement
argument_list|(
specifier|const
name|QStringRef
operator|&
name|l
argument_list|,
name|Statement
operator|*
name|stmt
argument_list|)
operator|:
name|label
argument_list|(
name|l
argument_list|)
block|,
name|statement
argument_list|(
argument|stmt
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|identifierToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|statement
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|QStringRef
name|label
block|;
name|Statement
operator|*
name|statement
block|;
name|SourceLocation
name|identifierToken
block|;
name|SourceLocation
name|colonToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|ThrowStatement
range|:
name|public
name|Statement
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|ThrowStatement
argument_list|)
name|ThrowStatement
argument_list|(
name|ExpressionNode
operator|*
name|e
argument_list|)
operator|:
name|expression
argument_list|(
argument|e
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|throwToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|semicolonToken
return|;
block|}
comment|// attributes
name|ExpressionNode
operator|*
name|expression
block|;
name|SourceLocation
name|throwToken
block|;
name|SourceLocation
name|semicolonToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|Catch
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|Catch
argument_list|)
name|Catch
argument_list|(
specifier|const
name|QStringRef
operator|&
name|n
argument_list|,
name|Block
operator|*
name|stmt
argument_list|)
operator|:
name|name
argument_list|(
name|n
argument_list|)
block|,
name|statement
argument_list|(
argument|stmt
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|catchToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|statement
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|QStringRef
name|name
block|;
name|Block
operator|*
name|statement
block|;
name|SourceLocation
name|catchToken
block|;
name|SourceLocation
name|lparenToken
block|;
name|SourceLocation
name|identifierToken
block|;
name|SourceLocation
name|rparenToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|Finally
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|Finally
argument_list|)
name|Finally
argument_list|(
name|Block
operator|*
name|stmt
argument_list|)
operator|:
name|statement
argument_list|(
argument|stmt
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|finallyToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|statement
operator|?
name|statement
operator|->
name|lastSourceLocation
argument_list|()
operator|:
name|finallyToken
return|;
block|}
comment|// attributes
name|Block
operator|*
name|statement
block|;
name|SourceLocation
name|finallyToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|TryStatement
range|:
name|public
name|Statement
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|TryStatement
argument_list|)
name|TryStatement
argument_list|(
name|Statement
operator|*
name|stmt
argument_list|,
name|Catch
operator|*
name|c
argument_list|,
name|Finally
operator|*
name|f
argument_list|)
operator|:
name|statement
argument_list|(
name|stmt
argument_list|)
block|,
name|catchExpression
argument_list|(
name|c
argument_list|)
block|,
name|finallyExpression
argument_list|(
argument|f
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|TryStatement
argument_list|(
name|Statement
operator|*
name|stmt
argument_list|,
name|Finally
operator|*
name|f
argument_list|)
operator|:
name|statement
argument_list|(
name|stmt
argument_list|)
block|,
name|catchExpression
argument_list|(
literal|0
argument_list|)
block|,
name|finallyExpression
argument_list|(
argument|f
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|TryStatement
argument_list|(
name|Statement
operator|*
name|stmt
argument_list|,
name|Catch
operator|*
name|c
argument_list|)
operator|:
name|statement
argument_list|(
name|stmt
argument_list|)
block|,
name|catchExpression
argument_list|(
name|c
argument_list|)
block|,
name|finallyExpression
argument_list|(
literal|0
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|tryToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
name|finallyExpression
condition|)
return|return
name|finallyExpression
operator|->
name|statement
operator|->
name|rbraceToken
return|;
elseif|else
if|if
condition|(
name|catchExpression
condition|)
return|return
name|catchExpression
operator|->
name|statement
operator|->
name|rbraceToken
return|;
return|return
name|statement
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
end_decl_stmt
begin_comment
comment|// attributes
end_comment
begin_decl_stmt
name|Statement
modifier|*
name|statement
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Catch
modifier|*
name|catchExpression
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Finally
modifier|*
name|finallyExpression
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|SourceLocation
name|tryToken
decl_stmt|;
end_decl_stmt
begin_decl_stmt
unit|};
name|class
name|QML_PARSER_EXPORT
name|FunctionExpression
range|:
name|public
name|ExpressionNode
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|FunctionExpression
argument_list|)
name|FunctionExpression
argument_list|(
specifier|const
name|QStringRef
operator|&
name|n
argument_list|,
name|FormalParameterList
operator|*
name|f
argument_list|,
name|FunctionBody
operator|*
name|b
argument_list|)
operator|:
name|name
argument_list|(
name|n
argument_list|)
block|,
name|formals
argument_list|(
name|f
argument_list|)
block|,
name|body
argument_list|(
argument|b
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|functionToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|rbraceToken
return|;
block|}
comment|// attributes
name|QStringRef
name|name
block|;
name|FormalParameterList
operator|*
name|formals
block|;
name|FunctionBody
operator|*
name|body
block|;
name|SourceLocation
name|functionToken
block|;
name|SourceLocation
name|identifierToken
block|;
name|SourceLocation
name|lparenToken
block|;
name|SourceLocation
name|rparenToken
block|;
name|SourceLocation
name|lbraceToken
block|;
name|SourceLocation
name|rbraceToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|FunctionDeclaration
range|:
name|public
name|FunctionExpression
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|FunctionDeclaration
argument_list|)
name|FunctionDeclaration
argument_list|(
specifier|const
name|QStringRef
operator|&
name|n
argument_list|,
name|FormalParameterList
operator|*
name|f
argument_list|,
name|FunctionBody
operator|*
name|b
argument_list|)
operator|:
name|FunctionExpression
argument_list|(
argument|n
argument_list|,
argument|f
argument_list|,
argument|b
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|FormalParameterList
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|FormalParameterList
argument_list|)
name|FormalParameterList
argument_list|(
specifier|const
name|QStringRef
operator|&
name|n
argument_list|)
operator|:
name|name
argument_list|(
name|n
argument_list|)
block|,
name|next
argument_list|(
argument|this
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|FormalParameterList
argument_list|(
name|FormalParameterList
operator|*
name|previous
argument_list|,
specifier|const
name|QStringRef
operator|&
name|n
argument_list|)
operator|:
name|name
argument_list|(
argument|n
argument_list|)
block|{
name|kind
operator|=
name|K
block|;
name|next
operator|=
name|previous
operator|->
name|next
block|;
name|previous
operator|->
name|next
operator|=
name|this
block|;     }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|identifierToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|next
operator|?
name|next
operator|->
name|lastSourceLocation
argument_list|()
operator|:
name|identifierToken
return|;
block|}
specifier|inline
name|FormalParameterList
operator|*
name|finish
argument_list|()
block|{
name|FormalParameterList
operator|*
name|front
operator|=
name|next
block|;
name|next
operator|=
literal|0
block|;
return|return
name|front
return|;
block|}
comment|// attributes
name|QStringRef
name|name
block|;
name|FormalParameterList
operator|*
name|next
block|;
name|SourceLocation
name|commaToken
block|;
name|SourceLocation
name|identifierToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|SourceElement
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|SourceElement
argument_list|)
specifier|inline
name|SourceElement
argument_list|()
block|{
name|kind
operator|=
name|K
block|; }
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|SourceElements
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|SourceElements
argument_list|)
name|SourceElements
argument_list|(
name|SourceElement
operator|*
name|elt
argument_list|)
operator|:
name|element
argument_list|(
name|elt
argument_list|)
block|,
name|next
argument_list|(
argument|this
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|SourceElements
argument_list|(
name|SourceElements
operator|*
name|previous
argument_list|,
name|SourceElement
operator|*
name|elt
argument_list|)
operator|:
name|element
argument_list|(
argument|elt
argument_list|)
block|{
name|kind
operator|=
name|K
block|;
name|next
operator|=
name|previous
operator|->
name|next
block|;
name|previous
operator|->
name|next
operator|=
name|this
block|;     }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|element
operator|->
name|firstSourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|next
operator|?
name|next
operator|->
name|lastSourceLocation
argument_list|()
operator|:
name|element
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
specifier|inline
name|SourceElements
operator|*
name|finish
argument_list|()
block|{
name|SourceElements
operator|*
name|front
operator|=
name|next
block|;
name|next
operator|=
literal|0
block|;
return|return
name|front
return|;
block|}
comment|// attributes
name|SourceElement
operator|*
name|element
block|;
name|SourceElements
operator|*
name|next
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|FunctionBody
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|FunctionBody
argument_list|)
name|FunctionBody
argument_list|(
name|SourceElements
operator|*
name|elts
argument_list|)
operator|:
name|elements
argument_list|(
argument|elts
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|elements
operator|?
name|elements
operator|->
name|firstSourceLocation
argument_list|()
operator|:
name|SourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|elements
condition|?
name|elements
operator|->
name|lastSourceLocation
argument_list|()
else|:
name|SourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|SourceElements
operator|*
name|elements
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|Program
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|Program
argument_list|)
name|Program
argument_list|(
name|SourceElements
operator|*
name|elts
argument_list|)
operator|:
name|elements
argument_list|(
argument|elts
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|elements
operator|?
name|elements
operator|->
name|firstSourceLocation
argument_list|()
operator|:
name|SourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|elements
condition|?
name|elements
operator|->
name|lastSourceLocation
argument_list|()
else|:
name|SourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|SourceElements
operator|*
name|elements
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|FunctionSourceElement
range|:
name|public
name|SourceElement
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|FunctionSourceElement
argument_list|)
name|FunctionSourceElement
argument_list|(
name|FunctionDeclaration
operator|*
name|f
argument_list|)
operator|:
name|declaration
argument_list|(
argument|f
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|declaration
operator|->
name|firstSourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|declaration
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|FunctionDeclaration
operator|*
name|declaration
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|StatementSourceElement
range|:
name|public
name|SourceElement
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|StatementSourceElement
argument_list|)
name|StatementSourceElement
argument_list|(
name|Statement
operator|*
name|stmt
argument_list|)
operator|:
name|statement
argument_list|(
argument|stmt
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|statement
operator|->
name|firstSourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|statement
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|Statement
operator|*
name|statement
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|DebuggerStatement
range|:
name|public
name|Statement
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|DebuggerStatement
argument_list|)
name|DebuggerStatement
argument_list|()
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|debuggerToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|semicolonToken
return|;
block|}
comment|// attributes
name|SourceLocation
name|debuggerToken
block|;
name|SourceLocation
name|semicolonToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|UiQualifiedId
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|UiQualifiedId
argument_list|)
name|UiQualifiedId
argument_list|(
specifier|const
name|QStringRef
operator|&
name|name
argument_list|)
operator|:
name|next
argument_list|(
name|this
argument_list|)
block|,
name|name
argument_list|(
argument|name
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|UiQualifiedId
argument_list|(
name|UiQualifiedId
operator|*
name|previous
argument_list|,
specifier|const
name|QStringRef
operator|&
name|name
argument_list|)
operator|:
name|name
argument_list|(
argument|name
argument_list|)
block|{
name|kind
operator|=
name|K
block|;
name|next
operator|=
name|previous
operator|->
name|next
block|;
name|previous
operator|->
name|next
operator|=
name|this
block|;     }
name|UiQualifiedId
operator|*
name|finish
argument_list|()
block|{
name|UiQualifiedId
operator|*
name|head
operator|=
name|next
block|;
name|next
operator|=
literal|0
block|;
return|return
name|head
return|;
block|}
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|identifierToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|next
operator|?
name|next
operator|->
name|lastSourceLocation
argument_list|()
operator|:
name|identifierToken
return|;
block|}
comment|// attributes
name|UiQualifiedId
operator|*
name|next
block|;
name|QStringRef
name|name
block|;
name|SourceLocation
name|identifierToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|UiImport
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|UiImport
argument_list|)
name|UiImport
argument_list|(
specifier|const
name|QStringRef
operator|&
name|fileName
argument_list|)
operator|:
name|fileName
argument_list|(
name|fileName
argument_list|)
block|,
name|importUri
argument_list|(
literal|0
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|UiImport
argument_list|(
name|UiQualifiedId
operator|*
name|uri
argument_list|)
operator|:
name|importUri
argument_list|(
argument|uri
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|importToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|semicolonToken
return|;
block|}
comment|// attributes
name|QStringRef
name|fileName
block|;
name|UiQualifiedId
operator|*
name|importUri
block|;
name|QStringRef
name|importId
block|;
name|SourceLocation
name|importToken
block|;
name|SourceLocation
name|fileNameToken
block|;
name|SourceLocation
name|versionToken
block|;
name|SourceLocation
name|asToken
block|;
name|SourceLocation
name|importIdToken
block|;
name|SourceLocation
name|semicolonToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|UiObjectMember
range|:
name|public
name|Node
block|{
name|public
operator|:
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
operator|=
literal|0
block|;
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
operator|=
literal|0
block|;
name|virtual
name|UiObjectMember
operator|*
name|uiObjectMemberCast
argument_list|()
name|Q_DECL_OVERRIDE
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|UiObjectMemberList
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|UiObjectMemberList
argument_list|)
name|UiObjectMemberList
argument_list|(
name|UiObjectMember
operator|*
name|member
argument_list|)
operator|:
name|next
argument_list|(
name|this
argument_list|)
block|,
name|member
argument_list|(
argument|member
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|UiObjectMemberList
argument_list|(
name|UiObjectMemberList
operator|*
name|previous
argument_list|,
name|UiObjectMember
operator|*
name|member
argument_list|)
operator|:
name|member
argument_list|(
argument|member
argument_list|)
block|{
name|kind
operator|=
name|K
block|;
name|next
operator|=
name|previous
operator|->
name|next
block|;
name|previous
operator|->
name|next
operator|=
name|this
block|;     }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|member
operator|->
name|firstSourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|next
operator|?
name|next
operator|->
name|lastSourceLocation
argument_list|()
operator|:
name|member
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
name|UiObjectMemberList
operator|*
name|finish
argument_list|()
block|{
name|UiObjectMemberList
operator|*
name|head
operator|=
name|next
block|;
name|next
operator|=
literal|0
block|;
return|return
name|head
return|;
block|}
comment|// attributes
name|UiObjectMemberList
operator|*
name|next
block|;
name|UiObjectMember
operator|*
name|member
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|UiQualifiedPragmaId
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|UiQualifiedPragmaId
argument_list|)
name|UiQualifiedPragmaId
argument_list|(
specifier|const
name|QStringRef
operator|&
name|name
argument_list|)
operator|:
name|next
argument_list|(
name|this
argument_list|)
block|,
name|name
argument_list|(
argument|name
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|UiQualifiedPragmaId
argument_list|(
name|UiQualifiedPragmaId
operator|*
name|previous
argument_list|,
specifier|const
name|QStringRef
operator|&
name|name
argument_list|)
operator|:
name|name
argument_list|(
argument|name
argument_list|)
block|{
name|kind
operator|=
name|K
block|;
name|next
operator|=
name|previous
operator|->
name|next
block|;
name|previous
operator|->
name|next
operator|=
name|this
block|;     }
name|UiQualifiedPragmaId
operator|*
name|finish
argument_list|()
block|{
name|UiQualifiedPragmaId
operator|*
name|head
operator|=
name|next
block|;
name|next
operator|=
literal|0
block|;
return|return
name|head
return|;
block|}
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|identifierToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|next
operator|?
name|next
operator|->
name|lastSourceLocation
argument_list|()
operator|:
name|identifierToken
return|;
block|}
comment|// attributes
name|UiQualifiedPragmaId
operator|*
name|next
block|;
name|QStringRef
name|name
block|;
name|SourceLocation
name|identifierToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|UiPragma
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|UiPragma
argument_list|)
name|UiPragma
argument_list|(
name|UiQualifiedPragmaId
operator|*
name|type
argument_list|)
operator|:
name|pragmaType
argument_list|(
argument|type
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|pragmaToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|semicolonToken
return|;
block|}
comment|// attributes
name|UiQualifiedPragmaId
operator|*
name|pragmaType
block|;
name|SourceLocation
name|pragmaToken
block|;
name|SourceLocation
name|semicolonToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|UiHeaderItemList
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|UiHeaderItemList
argument_list|)
name|UiHeaderItemList
argument_list|(
name|UiImport
operator|*
name|import
argument_list|)
operator|:
name|headerItem
argument_list|(
name|import
argument_list|)
block|,
name|next
argument_list|(
argument|this
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|UiHeaderItemList
argument_list|(
name|UiPragma
operator|*
name|pragma
argument_list|)
operator|:
name|headerItem
argument_list|(
name|pragma
argument_list|)
block|,
name|next
argument_list|(
argument|this
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|UiHeaderItemList
argument_list|(
name|UiHeaderItemList
operator|*
name|previous
argument_list|,
name|UiImport
operator|*
name|import
argument_list|)
operator|:
name|headerItem
argument_list|(
argument|import
argument_list|)
block|{
name|kind
operator|=
name|K
block|;
name|next
operator|=
name|previous
operator|->
name|next
block|;
name|previous
operator|->
name|next
operator|=
name|this
block|;     }
name|UiHeaderItemList
argument_list|(
name|UiHeaderItemList
operator|*
name|previous
argument_list|,
name|UiPragma
operator|*
name|pragma
argument_list|)
operator|:
name|headerItem
argument_list|(
argument|pragma
argument_list|)
block|{
name|kind
operator|=
name|K
block|;
name|next
operator|=
name|previous
operator|->
name|next
block|;
name|previous
operator|->
name|next
operator|=
name|this
block|;     }
name|UiHeaderItemList
operator|*
name|finish
argument_list|()
block|{
name|UiHeaderItemList
operator|*
name|head
operator|=
name|next
block|;
name|next
operator|=
literal|0
block|;
return|return
name|head
return|;
block|}
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|headerItem
operator|->
name|firstSourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|next
operator|?
name|next
operator|->
name|lastSourceLocation
argument_list|()
operator|:
name|headerItem
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
comment|// attributes
name|Node
operator|*
name|headerItem
block|;
name|UiHeaderItemList
operator|*
name|next
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|UiProgram
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|UiProgram
argument_list|)
name|UiProgram
argument_list|(
name|UiHeaderItemList
operator|*
name|headers
argument_list|,
name|UiObjectMemberList
operator|*
name|members
argument_list|)
operator|:
name|headers
argument_list|(
name|headers
argument_list|)
block|,
name|members
argument_list|(
argument|members
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
name|headers
condition|)
return|return
name|headers
operator|->
name|firstSourceLocation
argument_list|()
return|;
elseif|else
if|if
condition|(
name|members
condition|)
return|return
name|members
operator|->
name|firstSourceLocation
argument_list|()
return|;
return|return
name|SourceLocation
argument_list|()
return|;
block|}
end_decl_stmt
begin_expr_stmt
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
name|members
condition|)
return|return
name|members
operator|->
name|lastSourceLocation
argument_list|()
return|;
elseif|else
if|if
condition|(
name|headers
condition|)
return|return
name|headers
operator|->
name|lastSourceLocation
argument_list|()
return|;
end_expr_stmt
begin_return
return|return
name|SourceLocation
argument_list|()
return|;
end_return
begin_comment
unit|}
comment|// attributes
end_comment
begin_expr_stmt
unit|UiHeaderItemList
operator|*
name|headers
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|UiObjectMemberList
modifier|*
name|members
decl_stmt|;
end_decl_stmt
begin_decl_stmt
unit|};
name|class
name|QML_PARSER_EXPORT
name|UiArrayMemberList
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|UiArrayMemberList
argument_list|)
name|UiArrayMemberList
argument_list|(
name|UiObjectMember
operator|*
name|member
argument_list|)
operator|:
name|next
argument_list|(
name|this
argument_list|)
block|,
name|member
argument_list|(
argument|member
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|UiArrayMemberList
argument_list|(
name|UiArrayMemberList
operator|*
name|previous
argument_list|,
name|UiObjectMember
operator|*
name|member
argument_list|)
operator|:
name|member
argument_list|(
argument|member
argument_list|)
block|{
name|kind
operator|=
name|K
block|;
name|next
operator|=
name|previous
operator|->
name|next
block|;
name|previous
operator|->
name|next
operator|=
name|this
block|;     }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|member
operator|->
name|firstSourceLocation
argument_list|()
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|next
operator|?
name|next
operator|->
name|lastSourceLocation
argument_list|()
operator|:
name|member
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
name|UiArrayMemberList
operator|*
name|finish
argument_list|()
block|{
name|UiArrayMemberList
operator|*
name|head
operator|=
name|next
block|;
name|next
operator|=
literal|0
block|;
return|return
name|head
return|;
block|}
comment|// attributes
name|UiArrayMemberList
operator|*
name|next
block|;
name|UiObjectMember
operator|*
name|member
block|;
name|SourceLocation
name|commaToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|UiObjectInitializer
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|UiObjectInitializer
argument_list|)
name|UiObjectInitializer
argument_list|(
name|UiObjectMemberList
operator|*
name|members
argument_list|)
operator|:
name|members
argument_list|(
argument|members
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|lbraceToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|rbraceToken
return|;
block|}
comment|// attributes
name|SourceLocation
name|lbraceToken
block|;
name|UiObjectMemberList
operator|*
name|members
block|;
name|SourceLocation
name|rbraceToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|UiParameterList
range|:
name|public
name|Node
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|UiParameterList
argument_list|)
name|UiParameterList
argument_list|(
specifier|const
name|QStringRef
operator|&
name|t
argument_list|,
specifier|const
name|QStringRef
operator|&
name|n
argument_list|)
operator|:
name|type
argument_list|(
name|t
argument_list|)
block|,
name|name
argument_list|(
name|n
argument_list|)
block|,
name|next
argument_list|(
argument|this
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|UiParameterList
argument_list|(
name|UiParameterList
operator|*
name|previous
argument_list|,
specifier|const
name|QStringRef
operator|&
name|t
argument_list|,
specifier|const
name|QStringRef
operator|&
name|n
argument_list|)
operator|:
name|type
argument_list|(
name|t
argument_list|)
block|,
name|name
argument_list|(
argument|n
argument_list|)
block|{
name|kind
operator|=
name|K
block|;
name|next
operator|=
name|previous
operator|->
name|next
block|;
name|previous
operator|->
name|next
operator|=
name|this
block|;     }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|propertyTypeToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|next
operator|?
name|next
operator|->
name|lastSourceLocation
argument_list|()
operator|:
name|identifierToken
return|;
block|}
specifier|inline
name|UiParameterList
operator|*
name|finish
argument_list|()
block|{
name|UiParameterList
operator|*
name|front
operator|=
name|next
block|;
name|next
operator|=
literal|0
block|;
return|return
name|front
return|;
block|}
comment|// attributes
name|QStringRef
name|type
block|;
name|QStringRef
name|name
block|;
name|UiParameterList
operator|*
name|next
block|;
name|SourceLocation
name|commaToken
block|;
name|SourceLocation
name|propertyTypeToken
block|;
name|SourceLocation
name|identifierToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|UiPublicMember
range|:
name|public
name|UiObjectMember
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|UiPublicMember
argument_list|)
name|UiPublicMember
argument_list|(
specifier|const
name|QStringRef
operator|&
name|memberType
argument_list|,
specifier|const
name|QStringRef
operator|&
name|name
argument_list|)
operator|:
name|type
argument_list|(
name|Property
argument_list|)
block|,
name|memberType
argument_list|(
name|memberType
argument_list|)
block|,
name|name
argument_list|(
name|name
argument_list|)
block|,
name|statement
argument_list|(
literal|0
argument_list|)
block|,
name|binding
argument_list|(
literal|0
argument_list|)
block|,
name|isDefaultMember
argument_list|(
name|false
argument_list|)
block|,
name|isReadonlyMember
argument_list|(
name|false
argument_list|)
block|,
name|parameters
argument_list|(
literal|0
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|UiPublicMember
argument_list|(
specifier|const
name|QStringRef
operator|&
name|memberType
argument_list|,
specifier|const
name|QStringRef
operator|&
name|name
argument_list|,
name|Statement
operator|*
name|statement
argument_list|)
operator|:
name|type
argument_list|(
name|Property
argument_list|)
block|,
name|memberType
argument_list|(
name|memberType
argument_list|)
block|,
name|name
argument_list|(
name|name
argument_list|)
block|,
name|statement
argument_list|(
name|statement
argument_list|)
block|,
name|binding
argument_list|(
literal|0
argument_list|)
block|,
name|isDefaultMember
argument_list|(
name|false
argument_list|)
block|,
name|isReadonlyMember
argument_list|(
name|false
argument_list|)
block|,
name|parameters
argument_list|(
literal|0
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
name|defaultToken
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|defaultToken
return|;
elseif|else
if|if
condition|(
name|readonlyToken
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|readonlyToken
return|;
return|return
name|propertyToken
return|;
block|}
end_decl_stmt
begin_expr_stmt
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
name|binding
condition|)
return|return
name|binding
operator|->
name|lastSourceLocation
argument_list|()
return|;
end_expr_stmt
begin_if
if|if
condition|(
name|statement
condition|)
return|return
name|statement
operator|->
name|lastSourceLocation
argument_list|()
return|;
end_if
begin_return
return|return
name|semicolonToken
return|;
end_return
begin_comment
unit|}
comment|// attributes
end_comment
begin_block
unit|enum
block|{
name|Signal
operator|,
name|Property
block|}
end_block
begin_expr_stmt
name|type
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QStringRef
name|typeModifier
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QStringRef
name|memberType
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QStringRef
name|name
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Statement
modifier|*
name|statement
decl_stmt|;
end_decl_stmt
begin_comment
comment|// initialized with a JS expression
end_comment
begin_decl_stmt
name|UiObjectMember
modifier|*
name|binding
decl_stmt|;
end_decl_stmt
begin_comment
comment|// initialized with a QML object or array.
end_comment
begin_decl_stmt
name|bool
name|isDefaultMember
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|isReadonlyMember
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|UiParameterList
modifier|*
name|parameters
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|SourceLocation
name|defaultToken
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|SourceLocation
name|readonlyToken
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|SourceLocation
name|propertyToken
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|SourceLocation
name|typeModifierToken
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|SourceLocation
name|typeToken
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|SourceLocation
name|identifierToken
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|SourceLocation
name|colonToken
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|SourceLocation
name|semicolonToken
decl_stmt|;
end_decl_stmt
begin_decl_stmt
unit|};
name|class
name|QML_PARSER_EXPORT
name|UiObjectDefinition
range|:
name|public
name|UiObjectMember
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|UiObjectDefinition
argument_list|)
name|UiObjectDefinition
argument_list|(
name|UiQualifiedId
operator|*
name|qualifiedTypeNameId
argument_list|,
name|UiObjectInitializer
operator|*
name|initializer
argument_list|)
operator|:
name|qualifiedTypeNameId
argument_list|(
name|qualifiedTypeNameId
argument_list|)
block|,
name|initializer
argument_list|(
argument|initializer
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|qualifiedTypeNameId
operator|->
name|identifierToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|initializer
operator|->
name|rbraceToken
return|;
block|}
comment|// attributes
name|UiQualifiedId
operator|*
name|qualifiedTypeNameId
block|;
name|UiObjectInitializer
operator|*
name|initializer
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|UiSourceElement
range|:
name|public
name|UiObjectMember
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|UiSourceElement
argument_list|)
name|UiSourceElement
argument_list|(
name|Node
operator|*
name|sourceElement
argument_list|)
operator|:
name|sourceElement
argument_list|(
argument|sourceElement
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
name|FunctionDeclaration
modifier|*
name|funDecl
init|=
name|cast
operator|<
name|FunctionDeclaration
operator|*
operator|>
operator|(
name|sourceElement
operator|)
condition|)
return|return
name|funDecl
operator|->
name|firstSourceLocation
argument_list|()
return|;
elseif|else
if|if
condition|(
name|VariableStatement
modifier|*
name|varStmt
init|=
name|cast
operator|<
name|VariableStatement
operator|*
operator|>
operator|(
name|sourceElement
operator|)
condition|)
return|return
name|varStmt
operator|->
name|firstSourceLocation
argument_list|()
return|;
return|return
name|SourceLocation
argument_list|()
return|;
block|}
end_decl_stmt
begin_expr_stmt
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
name|FunctionDeclaration
modifier|*
name|funDecl
init|=
name|cast
operator|<
name|FunctionDeclaration
operator|*
operator|>
operator|(
name|sourceElement
operator|)
condition|)
return|return
name|funDecl
operator|->
name|lastSourceLocation
argument_list|()
return|;
elseif|else
if|if
condition|(
name|VariableStatement
modifier|*
name|varStmt
init|=
name|cast
operator|<
name|VariableStatement
operator|*
operator|>
operator|(
name|sourceElement
operator|)
condition|)
return|return
name|varStmt
operator|->
name|lastSourceLocation
argument_list|()
return|;
end_expr_stmt
begin_return
return|return
name|SourceLocation
argument_list|()
return|;
end_return
begin_decl_stmt
unit|}      virtual
name|void
name|accept0
argument_list|(
name|Visitor
operator|*
name|visitor
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
end_decl_stmt
begin_comment
comment|// attributes
end_comment
begin_decl_stmt
name|Node
modifier|*
name|sourceElement
decl_stmt|;
end_decl_stmt
begin_decl_stmt
unit|};
name|class
name|QML_PARSER_EXPORT
name|UiObjectBinding
range|:
name|public
name|UiObjectMember
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|UiObjectBinding
argument_list|)
name|UiObjectBinding
argument_list|(
name|UiQualifiedId
operator|*
name|qualifiedId
argument_list|,
name|UiQualifiedId
operator|*
name|qualifiedTypeNameId
argument_list|,
name|UiObjectInitializer
operator|*
name|initializer
argument_list|)
operator|:
name|qualifiedId
argument_list|(
name|qualifiedId
argument_list|)
block|,
name|qualifiedTypeNameId
argument_list|(
name|qualifiedTypeNameId
argument_list|)
block|,
name|initializer
argument_list|(
name|initializer
argument_list|)
block|,
name|hasOnToken
argument_list|(
argument|false
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
name|hasOnToken
operator|&&
name|qualifiedTypeNameId
condition|)
return|return
name|qualifiedTypeNameId
operator|->
name|identifierToken
return|;
return|return
name|qualifiedId
operator|->
name|identifierToken
return|;
block|}
end_decl_stmt
begin_expr_stmt
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|initializer
operator|->
name|rbraceToken
return|;
block|}
end_expr_stmt
begin_decl_stmt
name|virtual
name|void
name|accept0
argument_list|(
name|Visitor
operator|*
name|visitor
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
end_decl_stmt
begin_comment
comment|// attributes
end_comment
begin_decl_stmt
name|UiQualifiedId
modifier|*
name|qualifiedId
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|UiQualifiedId
modifier|*
name|qualifiedTypeNameId
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|UiObjectInitializer
modifier|*
name|initializer
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|SourceLocation
name|colonToken
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|hasOnToken
decl_stmt|;
end_decl_stmt
begin_decl_stmt
unit|};
name|class
name|QML_PARSER_EXPORT
name|UiScriptBinding
range|:
name|public
name|UiObjectMember
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|UiScriptBinding
argument_list|)
name|UiScriptBinding
argument_list|(
name|UiQualifiedId
operator|*
name|qualifiedId
argument_list|,
name|Statement
operator|*
name|statement
argument_list|)
operator|:
name|qualifiedId
argument_list|(
name|qualifiedId
argument_list|)
block|,
name|statement
argument_list|(
argument|statement
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|qualifiedId
operator|->
name|identifierToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|statement
operator|->
name|lastSourceLocation
argument_list|()
return|;
block|}
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
comment|// attributes
name|UiQualifiedId
operator|*
name|qualifiedId
block|;
name|Statement
operator|*
name|statement
block|;
name|SourceLocation
name|colonToken
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QML_PARSER_EXPORT
name|UiArrayBinding
range|:
name|public
name|UiObjectMember
block|{
name|public
operator|:
name|QQMLJS_DECLARE_AST_NODE
argument_list|(
argument|UiArrayBinding
argument_list|)
name|UiArrayBinding
argument_list|(
name|UiQualifiedId
operator|*
name|qualifiedId
argument_list|,
name|UiArrayMemberList
operator|*
name|members
argument_list|)
operator|:
name|qualifiedId
argument_list|(
name|qualifiedId
argument_list|)
block|,
name|members
argument_list|(
argument|members
argument_list|)
block|{
name|kind
operator|=
name|K
block|; }
name|virtual
name|SourceLocation
name|firstSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|qualifiedId
operator|->
name|identifierToken
return|;
block|}
name|virtual
name|SourceLocation
name|lastSourceLocation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|rbracketToken
return|;
block|}
name|virtual
name|void
name|accept0
argument_list|(
argument|Visitor *visitor
argument_list|)
name|Q_DECL_OVERRIDE
block|;
comment|// attributes
name|UiQualifiedId
operator|*
name|qualifiedId
block|;
name|UiArrayMemberList
operator|*
name|members
block|;
name|SourceLocation
name|colonToken
block|;
name|SourceLocation
name|lbracketToken
block|;
name|SourceLocation
name|rbracketToken
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
unit|} }
comment|// namespace AST
end_comment
begin_macro
name|QT_QML_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
