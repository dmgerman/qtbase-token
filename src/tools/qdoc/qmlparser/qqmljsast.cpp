begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtQml module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qqmljsast_p.h"
end_include
begin_include
include|#
directive|include
file|"qqmljsastvisitor_p.h"
end_include
begin_macro
name|QT_QML_BEGIN_NAMESPACE
end_macro
begin_namespace
DECL|namespace|QQmlJS
DECL|namespace|AST
namespace|namespace
name|QQmlJS
block|{
namespace|namespace
name|AST
block|{
DECL|function|accept
name|void
name|Node
operator|::
name|accept
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|preVisit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept0
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|postVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept
name|void
name|Node
operator|::
name|accept
parameter_list|(
name|Node
modifier|*
name|node
parameter_list|,
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|node
condition|)
name|node
operator|->
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
DECL|function|expressionCast
name|ExpressionNode
modifier|*
name|Node
operator|::
name|expressionCast
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|function|binaryExpressionCast
name|BinaryExpression
modifier|*
name|Node
operator|::
name|binaryExpressionCast
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|function|statementCast
name|Statement
modifier|*
name|Node
operator|::
name|statementCast
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|function|uiObjectMemberCast
name|UiObjectMember
modifier|*
name|Node
operator|::
name|uiObjectMemberCast
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|function|expressionCast
name|ExpressionNode
modifier|*
name|ExpressionNode
operator|::
name|expressionCast
parameter_list|()
block|{
return|return
name|this
return|;
block|}
DECL|function|binaryExpressionCast
name|BinaryExpression
modifier|*
name|BinaryExpression
operator|::
name|binaryExpressionCast
parameter_list|()
block|{
return|return
name|this
return|;
block|}
DECL|function|statementCast
name|Statement
modifier|*
name|Statement
operator|::
name|statementCast
parameter_list|()
block|{
return|return
name|this
return|;
block|}
DECL|function|uiObjectMemberCast
name|UiObjectMember
modifier|*
name|UiObjectMember
operator|::
name|uiObjectMemberCast
parameter_list|()
block|{
return|return
name|this
return|;
block|}
DECL|function|accept0
name|void
name|NestedExpression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|ThisExpression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{     }
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|IdentifierExpression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{     }
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|NullExpression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{     }
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|TrueLiteral
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{     }
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|FalseLiteral
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{     }
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|StringLiteral
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{     }
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|NumericLiteral
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{     }
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|RegExpLiteral
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{     }
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|ArrayLiteral
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|elements
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|elision
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|ObjectLiteral
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|properties
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|ElementList
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
for|for
control|(
name|ElementList
modifier|*
name|it
init|=
name|this
init|;
name|it
condition|;
name|it
operator|=
name|it
operator|->
name|next
control|)
block|{
name|accept
argument_list|(
name|it
operator|->
name|elision
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|it
operator|->
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|Elision
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
comment|// ###
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|PropertyNameAndValueList
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
for|for
control|(
name|PropertyNameAndValueList
modifier|*
name|it
init|=
name|this
init|;
name|it
condition|;
name|it
operator|=
name|it
operator|->
name|next
control|)
block|{
name|accept
argument_list|(
name|it
operator|->
name|name
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|it
operator|->
name|value
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|IdentifierPropertyName
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{     }
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|StringLiteralPropertyName
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{     }
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|NumericLiteralPropertyName
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{     }
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|ArrayMemberExpression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|base
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|FieldMemberExpression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|base
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|NewMemberExpression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|base
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|arguments
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|NewExpression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|CallExpression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|base
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|arguments
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|ArgumentList
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
for|for
control|(
name|ArgumentList
modifier|*
name|it
init|=
name|this
init|;
name|it
condition|;
name|it
operator|=
name|it
operator|->
name|next
control|)
block|{
name|accept
argument_list|(
name|it
operator|->
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|PostIncrementExpression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|base
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|PostDecrementExpression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|base
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|DeleteExpression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|VoidExpression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|TypeOfExpression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|PreIncrementExpression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|PreDecrementExpression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|UnaryPlusExpression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|UnaryMinusExpression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|TildeExpression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|NotExpression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|BinaryExpression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|left
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|right
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|ConditionalExpression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|ok
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|ko
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|Expression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|left
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|right
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|Block
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|statements
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|StatementList
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
for|for
control|(
name|StatementList
modifier|*
name|it
init|=
name|this
init|;
name|it
condition|;
name|it
operator|=
name|it
operator|->
name|next
control|)
block|{
name|accept
argument_list|(
name|it
operator|->
name|statement
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|VariableStatement
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|declarations
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|VariableDeclarationList
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
for|for
control|(
name|VariableDeclarationList
modifier|*
name|it
init|=
name|this
init|;
name|it
condition|;
name|it
operator|=
name|it
operator|->
name|next
control|)
block|{
name|accept
argument_list|(
name|it
operator|->
name|declaration
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|VariableDeclaration
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|EmptyStatement
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{     }
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|ExpressionStatement
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|IfStatement
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|ok
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|ko
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|DoWhileStatement
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|statement
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|WhileStatement
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|statement
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|ForStatement
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|initialiser
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|condition
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|statement
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|LocalForStatement
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|declarations
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|condition
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|statement
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|ForEachStatement
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|initialiser
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|statement
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|LocalForEachStatement
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|declaration
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|statement
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|ContinueStatement
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{     }
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|BreakStatement
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{     }
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|ReturnStatement
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|WithStatement
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|statement
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|SwitchStatement
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|block
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|CaseBlock
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|clauses
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|defaultClause
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|moreClauses
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|CaseClauses
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
for|for
control|(
name|CaseClauses
modifier|*
name|it
init|=
name|this
init|;
name|it
condition|;
name|it
operator|=
name|it
operator|->
name|next
control|)
block|{
name|accept
argument_list|(
name|it
operator|->
name|clause
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|CaseClause
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|statements
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|DefaultClause
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|statements
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|LabelledStatement
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|statement
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|ThrowStatement
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|expression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|TryStatement
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|statement
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|catchExpression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|finallyExpression
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|Catch
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|statement
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|Finally
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|statement
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|FunctionDeclaration
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|formals
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|body
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|FunctionExpression
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|formals
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|body
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|FormalParameterList
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
comment|// ###
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|FunctionBody
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|elements
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|Program
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|elements
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|SourceElements
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
for|for
control|(
name|SourceElements
modifier|*
name|it
init|=
name|this
init|;
name|it
condition|;
name|it
operator|=
name|it
operator|->
name|next
control|)
block|{
name|accept
argument_list|(
name|it
operator|->
name|element
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|FunctionSourceElement
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|declaration
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|StatementSourceElement
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|statement
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|DebuggerStatement
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{     }
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|UiProgram
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|imports
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|members
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|UiPublicMember
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|statement
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|binding
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|UiObjectDefinition
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|qualifiedTypeNameId
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|initializer
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|UiObjectInitializer
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|members
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|UiObjectBinding
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|qualifiedId
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|qualifiedTypeNameId
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|initializer
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|UiScriptBinding
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|qualifiedId
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|statement
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|UiArrayBinding
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|qualifiedId
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|members
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|UiObjectMemberList
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
for|for
control|(
name|UiObjectMemberList
modifier|*
name|it
init|=
name|this
init|;
name|it
condition|;
name|it
operator|=
name|it
operator|->
name|next
control|)
name|accept
argument_list|(
name|it
operator|->
name|member
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|UiArrayMemberList
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
for|for
control|(
name|UiArrayMemberList
modifier|*
name|it
init|=
name|this
init|;
name|it
condition|;
name|it
operator|=
name|it
operator|->
name|next
control|)
name|accept
argument_list|(
name|it
operator|->
name|member
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|UiQualifiedId
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{     }
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|UiImport
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|importUri
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|UiImportList
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|import
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|accept
argument_list|(
name|next
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|accept0
name|void
name|UiSourceElement
operator|::
name|accept0
parameter_list|(
name|Visitor
modifier|*
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|->
name|visit
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|accept
argument_list|(
name|sourceElement
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|->
name|endVisit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_namespace
begin_comment
comment|// namespace QQmlJS::AST
end_comment
begin_macro
name|QT_QML_END_NAMESPACE
end_macro
end_unit
