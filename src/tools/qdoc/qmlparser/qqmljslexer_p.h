begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtQml module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QQMLJSLEXER_P_H
end_ifndef
begin_define
DECL|macro|QQMLJSLEXER_P_H
define|#
directive|define
name|QQMLJSLEXER_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"qqmljsglobal_p.h"
end_include
begin_include
include|#
directive|include
file|"qqmljsgrammar_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_decl_stmt
name|QT_QML_BEGIN_NAMESPACE
name|namespace
name|QQmlJS
block|{
name|class
name|Engine
decl_stmt|;
name|class
name|QML_PARSER_EXPORT
name|Directives
block|{
name|public
label|:
name|virtual
operator|~
name|Directives
argument_list|()
block|{}
name|virtual
name|void
name|pragmaLibrary
argument_list|()
block|{     }
name|virtual
name|void
name|importFile
argument_list|(
argument|const QString&jsfile
argument_list|,
argument|const QString&module
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
name|jsfile
argument_list|)
block|;
name|Q_UNUSED
argument_list|(
name|module
argument_list|)
block|;     }
name|virtual
name|void
name|importModule
argument_list|(
argument|const QString&uri
argument_list|,
argument|const QString&version
argument_list|,
argument|const QString&module
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
name|uri
argument_list|)
block|;
name|Q_UNUSED
argument_list|(
name|version
argument_list|)
block|;
name|Q_UNUSED
argument_list|(
name|module
argument_list|)
block|;     }
block|}
empty_stmt|;
name|class
name|QML_PARSER_EXPORT
name|Lexer
range|:
name|public
name|QQmlJSGrammar
block|{
name|public
operator|:
expr|enum
block|{
name|T_ABSTRACT
operator|=
name|T_RESERVED_WORD
block|,
name|T_BOOLEAN
operator|=
name|T_RESERVED_WORD
block|,
name|T_BYTE
operator|=
name|T_RESERVED_WORD
block|,
name|T_CHAR
operator|=
name|T_RESERVED_WORD
block|,
name|T_CLASS
operator|=
name|T_RESERVED_WORD
block|,
name|T_DOUBLE
operator|=
name|T_RESERVED_WORD
block|,
name|T_ENUM
operator|=
name|T_RESERVED_WORD
block|,
name|T_EXPORT
operator|=
name|T_RESERVED_WORD
block|,
name|T_EXTENDS
operator|=
name|T_RESERVED_WORD
block|,
name|T_FINAL
operator|=
name|T_RESERVED_WORD
block|,
name|T_FLOAT
operator|=
name|T_RESERVED_WORD
block|,
name|T_GOTO
operator|=
name|T_RESERVED_WORD
block|,
name|T_IMPLEMENTS
operator|=
name|T_RESERVED_WORD
block|,
name|T_INT
operator|=
name|T_RESERVED_WORD
block|,
name|T_INTERFACE
operator|=
name|T_RESERVED_WORD
block|,
name|T_LONG
operator|=
name|T_RESERVED_WORD
block|,
name|T_NATIVE
operator|=
name|T_RESERVED_WORD
block|,
name|T_PACKAGE
operator|=
name|T_RESERVED_WORD
block|,
name|T_PRIVATE
operator|=
name|T_RESERVED_WORD
block|,
name|T_PROTECTED
operator|=
name|T_RESERVED_WORD
block|,
name|T_SHORT
operator|=
name|T_RESERVED_WORD
block|,
name|T_STATIC
operator|=
name|T_RESERVED_WORD
block|,
name|T_SUPER
operator|=
name|T_RESERVED_WORD
block|,
name|T_SYNCHRONIZED
operator|=
name|T_RESERVED_WORD
block|,
name|T_THROWS
operator|=
name|T_RESERVED_WORD
block|,
name|T_TRANSIENT
operator|=
name|T_RESERVED_WORD
block|,
name|T_VOLATILE
operator|=
name|T_RESERVED_WORD
block|}
block|;      enum
name|Error
block|{
name|NoError
block|,
name|IllegalCharacter
block|,
name|IllegalHexNumber
block|,
name|UnclosedStringLiteral
block|,
name|IllegalEscapeSequence
block|,
name|IllegalUnicodeEscapeSequence
block|,
name|UnclosedComment
block|,
name|IllegalExponentIndicator
block|,
name|IllegalIdentifier
block|,
name|IllegalHexadecimalEscapeSequence
block|}
block|;      enum
name|RegExpBodyPrefix
block|{
name|NoPrefix
block|,
name|EqualPrefix
block|}
block|;      enum
name|RegExpFlag
block|{
name|RegExp_Global
operator|=
literal|0x01
block|,
name|RegExp_IgnoreCase
operator|=
literal|0x02
block|,
name|RegExp_Multiline
operator|=
literal|0x04
block|}
block|;
name|public
operator|:
name|Lexer
argument_list|(
name|Engine
operator|*
name|engine
argument_list|)
block|;
name|bool
name|qmlMode
argument_list|()
specifier|const
block|;
name|QString
name|code
argument_list|()
specifier|const
block|;
name|void
name|setCode
argument_list|(
argument|const QString&code
argument_list|,
argument|int lineno
argument_list|,
argument|bool qmlMode = true
argument_list|)
block|;
name|int
name|lex
argument_list|()
block|;
name|bool
name|scanRegExp
argument_list|(
argument|RegExpBodyPrefix prefix = NoPrefix
argument_list|)
block|;
name|bool
name|scanDirectives
argument_list|(
name|Directives
operator|*
name|directives
argument_list|)
block|;
name|int
name|regExpFlags
argument_list|()
specifier|const
block|{
return|return
name|_patternFlags
return|;
block|}
name|QString
name|regExpPattern
argument_list|()
specifier|const
block|{
return|return
name|_tokenText
return|;
block|}
name|int
name|tokenKind
argument_list|()
specifier|const
block|{
return|return
name|_tokenKind
return|;
block|}
name|int
name|tokenOffset
argument_list|()
specifier|const
block|{
return|return
name|_tokenStartPtr
operator|-
name|_code
operator|.
name|unicode
argument_list|()
return|;
block|}
name|int
name|tokenLength
argument_list|()
specifier|const
block|{
return|return
name|_tokenLength
return|;
block|}
name|int
name|tokenStartLine
argument_list|()
specifier|const
block|{
return|return
name|_tokenLine
return|;
block|}
name|int
name|tokenStartColumn
argument_list|()
specifier|const
block|{
return|return
name|_tokenStartPtr
operator|-
name|_tokenLinePtr
operator|+
literal|1
return|;
block|}
name|int
name|tokenEndLine
argument_list|()
specifier|const
block|;
name|int
name|tokenEndColumn
argument_list|()
specifier|const
block|;
specifier|inline
name|QStringRef
name|tokenSpell
argument_list|()
specifier|const
block|{
return|return
name|_tokenSpell
return|;
block|}
name|double
name|tokenValue
argument_list|()
specifier|const
block|{
return|return
name|_tokenValue
return|;
block|}
name|QString
name|tokenText
argument_list|()
specifier|const
block|;
name|Error
name|errorCode
argument_list|()
specifier|const
block|;
name|QString
name|errorMessage
argument_list|()
specifier|const
block|;
name|bool
name|prevTerminator
argument_list|()
specifier|const
block|;
name|bool
name|followsClosingBrace
argument_list|()
specifier|const
block|;
name|bool
name|canInsertAutomaticSemicolon
argument_list|(
argument|int token
argument_list|)
specifier|const
block|;      enum
name|ParenthesesState
block|{
name|IgnoreParentheses
block|,
name|CountParentheses
block|,
name|BalancedParentheses
block|}
block|;
name|protected
operator|:
name|int
name|classify
argument_list|(
argument|const QChar *s
argument_list|,
argument|int n
argument_list|,
argument|bool qmlMode
argument_list|)
block|;
name|private
operator|:
specifier|inline
name|void
name|scanChar
argument_list|()
block|;
name|int
name|scanToken
argument_list|()
block|;
name|int
name|scanNumber
argument_list|(
argument|QChar ch
argument_list|)
block|;
name|bool
name|isLineTerminator
argument_list|()
specifier|const
block|;
name|unsigned
name|isLineTerminatorSequence
argument_list|()
specifier|const
block|;
specifier|static
name|bool
name|isIdentLetter
argument_list|(
argument|QChar c
argument_list|)
block|;
specifier|static
name|bool
name|isDecimalDigit
argument_list|(
argument|ushort c
argument_list|)
block|;
specifier|static
name|bool
name|isHexDigit
argument_list|(
argument|QChar c
argument_list|)
block|;
specifier|static
name|bool
name|isOctalDigit
argument_list|(
argument|ushort c
argument_list|)
block|;
specifier|static
name|bool
name|isUnicodeEscapeSequence
argument_list|(
specifier|const
name|QChar
operator|*
name|chars
argument_list|)
block|;
name|void
name|syncProhibitAutomaticSemicolon
argument_list|()
block|;
name|QChar
name|decodeUnicodeEscapeCharacter
argument_list|(
name|bool
operator|*
name|ok
argument_list|)
block|;
name|QChar
name|decodeHexEscapeCharacter
argument_list|(
name|bool
operator|*
name|ok
argument_list|)
block|;
name|private
operator|:
name|Engine
operator|*
name|_engine
block|;
name|QString
name|_code
block|;
name|QString
name|_tokenText
block|;
name|QString
name|_errorMessage
block|;
name|QStringRef
name|_tokenSpell
block|;
specifier|const
name|QChar
operator|*
name|_codePtr
block|;
specifier|const
name|QChar
operator|*
name|_endPtr
block|;
specifier|const
name|QChar
operator|*
name|_lastLinePtr
block|;
specifier|const
name|QChar
operator|*
name|_tokenLinePtr
block|;
specifier|const
name|QChar
operator|*
name|_tokenStartPtr
block|;
name|QChar
name|_char
block|;
name|Error
name|_errorCode
block|;
name|int
name|_currentLineNumber
block|;
name|double
name|_tokenValue
block|;
comment|// parentheses state
name|ParenthesesState
name|_parenthesesState
block|;
name|int
name|_parenthesesCount
block|;
name|int
name|_stackToken
block|;
name|int
name|_patternFlags
block|;
name|int
name|_tokenKind
block|;
name|int
name|_tokenLength
block|;
name|int
name|_tokenLine
block|;
name|bool
name|_validTokenText
block|;
name|bool
name|_prohibitAutomaticSemicolon
block|;
name|bool
name|_restrictedKeyword
block|;
name|bool
name|_terminator
block|;
name|bool
name|_followsClosingBrace
block|;
name|bool
name|_delimited
block|;
name|bool
name|_qmlMode
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_comment
comment|// end of namespace QQmlJS
end_comment
begin_macro
name|QT_QML_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LEXER_H
end_comment
end_unit
