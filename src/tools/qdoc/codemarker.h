begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*   codemarker.h */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|CODEMARKER_H
end_ifndef
begin_define
DECL|macro|CODEMARKER_H
define|#
directive|define
name|CODEMARKER_H
end_define
begin_include
include|#
directive|include
file|<qpair.h>
end_include
begin_include
include|#
directive|include
file|"atom.h"
end_include
begin_include
include|#
directive|include
file|"node.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|Config
name|class
name|Config
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|Tree
name|class
name|Tree
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|Section
struct|struct
name|Section
block|{
DECL|member|name
name|QString
name|name
decl_stmt|;
DECL|member|divClass
name|QString
name|divClass
decl_stmt|;
DECL|member|singularMember
name|QString
name|singularMember
decl_stmt|;
DECL|member|pluralMember
name|QString
name|pluralMember
decl_stmt|;
DECL|member|keys
name|QStringList
name|keys
decl_stmt|;
DECL|member|members
name|NodeList
name|members
decl_stmt|;
DECL|member|reimpMembers
name|NodeList
name|reimpMembers
decl_stmt|;
DECL|member|InnerNode
DECL|member|inherited
name|QList
operator|<
name|QPair
operator|<
name|InnerNode
operator|*
operator|,
name|int
operator|>
expr|>
name|inherited
expr_stmt|;
DECL|function|Section
name|Section
argument_list|()
block|{ }
DECL|function|Section
name|Section
argument_list|(
specifier|const
name|QString
operator|&
name|name0
argument_list|,
specifier|const
name|QString
operator|&
name|divClass0
argument_list|,
specifier|const
name|QString
operator|&
name|singularMember0
argument_list|,
specifier|const
name|QString
operator|&
name|pluralMember0
argument_list|)
operator|:
name|name
argument_list|(
name|name0
argument_list|)
operator|,
name|divClass
argument_list|(
name|divClass0
argument_list|)
operator|,
name|singularMember
argument_list|(
name|singularMember0
argument_list|)
operator|,
name|pluralMember
argument_list|(
argument|pluralMember0
argument_list|)
block|{ }
DECL|function|appendMember
name|void
name|appendMember
argument_list|(
argument|Node* node
argument_list|)
block|{
name|members
operator|.
name|append
argument_list|(
name|node
argument_list|)
block|; }
DECL|function|appendReimpMember
name|void
name|appendReimpMember
argument_list|(
argument|Node* node
argument_list|)
block|{
name|reimpMembers
operator|.
name|append
argument_list|(
name|node
argument_list|)
block|; }
block|}
struct|;
end_struct
begin_struct
DECL|struct|FastSection
struct|struct
name|FastSection
block|{
DECL|member|parent_
specifier|const
name|InnerNode
modifier|*
name|parent_
decl_stmt|;
DECL|member|name
name|QString
name|name
decl_stmt|;
DECL|member|divClass
name|QString
name|divClass
decl_stmt|;
DECL|member|singularMember
name|QString
name|singularMember
decl_stmt|;
DECL|member|pluralMember
name|QString
name|pluralMember
decl_stmt|;
DECL|member|QString
DECL|member|memberMap
name|QMap
operator|<
name|QString
operator|,
name|Node
operator|*
operator|>
name|memberMap
expr_stmt|;
DECL|member|QString
DECL|member|reimpMemberMap
name|QMap
operator|<
name|QString
operator|,
name|Node
operator|*
operator|>
name|reimpMemberMap
expr_stmt|;
DECL|member|InnerNode
DECL|member|inherited
name|QList
operator|<
name|QPair
operator|<
name|InnerNode
operator|*
operator|,
name|int
operator|>
expr|>
name|inherited
expr_stmt|;
DECL|function|FastSection
name|FastSection
argument_list|(
specifier|const
name|InnerNode
operator|*
name|parent
argument_list|,
specifier|const
name|QString
operator|&
name|name0
argument_list|,
specifier|const
name|QString
operator|&
name|divClass0
argument_list|,
specifier|const
name|QString
operator|&
name|singularMember0
argument_list|,
specifier|const
name|QString
operator|&
name|pluralMember0
argument_list|)
operator|:
name|parent_
argument_list|(
name|parent
argument_list|)
operator|,
name|name
argument_list|(
name|name0
argument_list|)
operator|,
name|divClass
argument_list|(
name|divClass0
argument_list|)
operator|,
name|singularMember
argument_list|(
name|singularMember0
argument_list|)
operator|,
name|pluralMember
argument_list|(
argument|pluralMember0
argument_list|)
block|{ }
DECL|function|isEmpty
name|bool
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
operator|(
name|memberMap
operator|.
name|isEmpty
argument_list|()
operator|&&
name|inherited
operator|.
name|isEmpty
argument_list|()
operator|&&
name|reimpMemberMap
operator|.
name|isEmpty
argument_list|()
operator|)
return|;
block|}
block|}
struct|;
end_struct
begin_decl_stmt
name|class
name|CodeMarker
block|{
name|public
label|:
enum|enum
name|SynopsisStyle
block|{
name|Summary
block|,
name|Detailed
block|,
name|Subpage
block|,
name|Accessors
block|}
enum|;
enum|enum
name|Status
block|{
name|Compat
block|,
name|Obsolete
block|,
name|Okay
block|}
enum|;
name|CodeMarker
argument_list|()
expr_stmt|;
name|virtual
operator|~
name|CodeMarker
argument_list|()
expr_stmt|;
name|virtual
name|void
name|initializeMarker
parameter_list|(
specifier|const
name|Config
modifier|&
name|config
parameter_list|)
function_decl|;
name|virtual
name|void
name|terminateMarker
parameter_list|()
function_decl|;
name|virtual
name|bool
name|recognizeCode
parameter_list|(
specifier|const
name|QString
modifier|&
name|code
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|recognizeExtension
parameter_list|(
specifier|const
name|QString
modifier|&
name|ext
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|recognizeLanguage
parameter_list|(
specifier|const
name|QString
modifier|&
name|lang
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|Atom
operator|::
name|Type
name|atomType
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|QString
name|markedUpCode
parameter_list|(
specifier|const
name|QString
modifier|&
name|code
parameter_list|,
specifier|const
name|Node
modifier|*
name|relative
parameter_list|,
specifier|const
name|Location
modifier|&
name|location
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QString
name|markedUpSynopsis
parameter_list|(
specifier|const
name|Node
modifier|*
name|node
parameter_list|,
specifier|const
name|Node
modifier|*
name|relative
parameter_list|,
name|SynopsisStyle
name|style
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QString
name|markedUpQmlItem
parameter_list|(
specifier|const
name|Node
modifier|*
parameter_list|,
name|bool
parameter_list|)
block|{
return|return
name|QString
argument_list|()
return|;
block|}
name|virtual
name|QString
name|markedUpName
parameter_list|(
specifier|const
name|Node
modifier|*
name|node
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QString
name|markedUpFullName
parameter_list|(
specifier|const
name|Node
modifier|*
name|node
parameter_list|,
specifier|const
name|Node
modifier|*
name|relative
init|=
literal|0
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QString
name|markedUpEnumValue
parameter_list|(
specifier|const
name|QString
modifier|&
name|enumValue
parameter_list|,
specifier|const
name|Node
modifier|*
name|relative
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QString
name|markedUpIncludes
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|includes
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QString
name|functionBeginRegExp
parameter_list|(
specifier|const
name|QString
modifier|&
name|funcName
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QString
name|functionEndRegExp
parameter_list|(
specifier|const
name|QString
modifier|&
name|funcName
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QList
operator|<
name|Section
operator|>
name|sections
argument_list|(
argument|const InnerNode *inner
argument_list|,
argument|SynopsisStyle style
argument_list|,
argument|Status status
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|QList
operator|<
name|Section
operator|>
name|qmlSections
argument_list|(
argument|const QmlClassNode* qmlClassNode
argument_list|,
argument|SynopsisStyle style
argument_list|)
expr_stmt|;
name|virtual
name|QStringList
name|macRefsForNode
parameter_list|(
name|Node
modifier|*
name|node
parameter_list|)
function_decl|;
specifier|static
name|void
name|initialize
parameter_list|(
specifier|const
name|Config
modifier|&
name|config
parameter_list|)
function_decl|;
specifier|static
name|void
name|terminate
parameter_list|()
function_decl|;
specifier|static
name|CodeMarker
modifier|*
name|markerForCode
parameter_list|(
specifier|const
name|QString
modifier|&
name|code
parameter_list|)
function_decl|;
specifier|static
name|CodeMarker
modifier|*
name|markerForFileName
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
function_decl|;
specifier|static
name|CodeMarker
modifier|*
name|markerForLanguage
parameter_list|(
specifier|const
name|QString
modifier|&
name|lang
parameter_list|)
function_decl|;
specifier|static
specifier|const
name|Node
modifier|*
name|nodeForString
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|)
function_decl|;
specifier|static
name|QString
name|stringForNode
parameter_list|(
specifier|const
name|Node
modifier|*
name|node
parameter_list|)
function_decl|;
name|QString
name|typified
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|)
function_decl|;
name|protected
label|:
name|virtual
name|QString
name|sortName
parameter_list|(
specifier|const
name|Node
modifier|*
name|node
parameter_list|,
specifier|const
name|QString
modifier|*
name|name
init|=
literal|0
parameter_list|)
function_decl|;
name|QString
name|protect
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|)
function_decl|;
name|QString
name|taggedNode
parameter_list|(
specifier|const
name|Node
modifier|*
name|node
parameter_list|)
function_decl|;
name|QString
name|taggedQmlNode
parameter_list|(
specifier|const
name|Node
modifier|*
name|node
parameter_list|)
function_decl|;
name|QString
name|linkTag
parameter_list|(
specifier|const
name|Node
modifier|*
name|node
parameter_list|,
specifier|const
name|QString
modifier|&
name|body
parameter_list|)
function_decl|;
name|void
name|insert
parameter_list|(
name|FastSection
modifier|&
name|fastSection
parameter_list|,
name|Node
modifier|*
name|node
parameter_list|,
name|SynopsisStyle
name|style
parameter_list|,
name|Status
name|status
parameter_list|)
function_decl|;
name|void
name|insert
parameter_list|(
name|FastSection
modifier|&
name|fastSection
parameter_list|,
name|Node
modifier|*
name|node
parameter_list|,
name|SynopsisStyle
name|style
parameter_list|,
name|bool
name|includeClassName
init|=
name|false
parameter_list|)
function_decl|;
name|bool
name|insertReimpFunc
parameter_list|(
name|FastSection
modifier|&
name|fs
parameter_list|,
name|Node
modifier|*
name|node
parameter_list|,
name|Status
name|status
parameter_list|)
function_decl|;
name|void
name|append
argument_list|(
name|QList
operator|<
name|Section
operator|>
operator|&
name|sectionList
argument_list|,
specifier|const
name|FastSection
operator|&
name|fastSection
argument_list|,
name|bool
name|includeKeys
operator|=
name|false
argument_list|)
decl_stmt|;
name|private
label|:
name|QString
name|macName
parameter_list|(
specifier|const
name|Node
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
init|=
name|QString
argument_list|()
parameter_list|)
function_decl|;
specifier|static
name|QString
name|defaultLang
decl_stmt|;
specifier|static
name|QList
operator|<
name|CodeMarker
operator|*
operator|>
name|markers
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
