begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|CPPCODEPARSER_H
end_ifndef
begin_define
DECL|macro|CPPCODEPARSER_H
define|#
directive|define
name|CPPCODEPARSER_H
end_define
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_include
include|#
directive|include
file|"codeparser.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|ClassNode
name|class
name|ClassNode
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|CodeChunk
name|class
name|CodeChunk
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|CppCodeParserPrivate
name|class
name|CppCodeParserPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|FunctionNode
name|class
name|FunctionNode
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|Aggregate
name|class
name|Aggregate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|Tokenizer
name|class
name|Tokenizer
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|CppCodeParser
range|:
name|public
name|CodeParser
block|{
name|Q_DECLARE_TR_FUNCTIONS
argument_list|(
argument|QDoc::CppCodeParser
argument_list|)
block|struct
name|ParsedParameter
block|{
name|bool
name|qPrivateSignal_
block|;
name|QString
name|dataType_
block|;
name|QString
name|name_
block|;
name|QString
name|defaultValue_
block|;
name|ParsedParameter
argument_list|()
operator|:
name|qPrivateSignal_
argument_list|(
argument|false
argument_list|)
block|{ }
block|}
block|;
typedef|typedef
name|QList
operator|<
name|ParsedParameter
operator|>
name|ParsedParameterList
expr_stmt|;
block|struct
name|ExtraFuncData
block|{
name|Aggregate
operator|*
name|root
block|;
comment|// Used as the parent.
name|Node
operator|::
name|NodeType
name|type
block|;
comment|// The node type: Function, etc.
name|bool
name|isAttached
block|;
comment|// If true, the method is attached.
name|bool
name|isMacro
block|;
comment|// If true, we are parsing a macro signature.
name|ExtraFuncData
argument_list|()
operator|:
name|root
argument_list|(
literal|0
argument_list|)
block|,
name|type
argument_list|(
name|Node
operator|::
name|Function
argument_list|)
block|,
name|isAttached
argument_list|(
name|false
argument_list|)
block|,
name|isMacro
argument_list|(
argument|false
argument_list|)
block|{ }
name|ExtraFuncData
argument_list|(
argument|Aggregate* r
argument_list|,
argument|Node::NodeType t
argument_list|,
argument|bool a
argument_list|)
operator|:
name|root
argument_list|(
name|r
argument_list|)
block|,
name|type
argument_list|(
name|t
argument_list|)
block|,
name|isAttached
argument_list|(
name|a
argument_list|)
block|,
name|isMacro
argument_list|(
argument|false
argument_list|)
block|{ }
block|}
decl_stmt|;
end_decl_stmt
begin_label
name|public
label|:
end_label
begin_expr_stmt
name|CppCodeParser
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
operator|~
name|CppCodeParser
argument_list|()
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|virtual
name|void
name|initializeParser
argument_list|(
specifier|const
name|Config
operator|&
name|config
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|virtual
name|void
name|terminateParser
argument_list|()
name|Q_DECL_OVERRIDE
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|virtual
name|QString
name|language
argument_list|()
name|Q_DECL_OVERRIDE
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|virtual
name|QStringList
name|headerFileNameFilter
argument_list|()
name|Q_DECL_OVERRIDE
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|virtual
name|QStringList
name|sourceFileNameFilter
argument_list|()
name|Q_DECL_OVERRIDE
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|virtual
name|void
name|parseHeaderFile
argument_list|(
specifier|const
name|Location
operator|&
name|location
argument_list|,
specifier|const
name|QString
operator|&
name|filePath
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|virtual
name|void
name|parseSourceFile
argument_list|(
specifier|const
name|Location
operator|&
name|location
argument_list|,
specifier|const
name|QString
operator|&
name|filePath
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|virtual
name|void
name|doneParsingHeaderFiles
argument_list|()
name|Q_DECL_OVERRIDE
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|virtual
name|void
name|doneParsingSourceFiles
argument_list|()
name|Q_DECL_OVERRIDE
expr_stmt|;
end_expr_stmt
begin_label
name|protected
label|:
end_label
begin_expr_stmt
specifier|const
name|QSet
operator|<
name|QString
operator|>
operator|&
name|topicCommands
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|const
name|QSet
operator|<
name|QString
operator|>
operator|&
name|otherMetaCommands
argument_list|()
expr_stmt|;
end_expr_stmt
begin_function_decl
name|virtual
name|Node
modifier|*
name|processTopicCommand
parameter_list|(
specifier|const
name|Doc
modifier|&
name|doc
parameter_list|,
specifier|const
name|QString
modifier|&
name|command
parameter_list|,
specifier|const
name|ArgLocPair
modifier|&
name|arg
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|processQmlProperties
parameter_list|(
specifier|const
name|Doc
modifier|&
name|doc
parameter_list|,
name|NodeList
modifier|&
name|nodes
parameter_list|,
name|DocList
modifier|&
name|docs
parameter_list|,
name|bool
name|jsProps
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|splitQmlPropertyGroupArg
parameter_list|(
specifier|const
name|QString
modifier|&
name|arg
parameter_list|,
name|QString
modifier|&
name|module
parameter_list|,
name|QString
modifier|&
name|element
parameter_list|,
name|QString
modifier|&
name|name
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|splitQmlPropertyArg
parameter_list|(
specifier|const
name|QString
modifier|&
name|arg
parameter_list|,
name|QString
modifier|&
name|type
parameter_list|,
name|QString
modifier|&
name|module
parameter_list|,
name|QString
modifier|&
name|element
parameter_list|,
name|QString
modifier|&
name|name
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|splitQmlMethodArg
parameter_list|(
specifier|const
name|QString
modifier|&
name|arg
parameter_list|,
name|QString
modifier|&
name|type
parameter_list|,
name|QString
modifier|&
name|module
parameter_list|,
name|QString
modifier|&
name|element
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|virtual
name|void
name|processOtherMetaCommand
parameter_list|(
specifier|const
name|Doc
modifier|&
name|doc
parameter_list|,
specifier|const
name|QString
modifier|&
name|command
parameter_list|,
specifier|const
name|ArgLocPair
modifier|&
name|argLocPair
parameter_list|,
name|Node
modifier|*
name|node
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|processOtherMetaCommands
parameter_list|(
specifier|const
name|Doc
modifier|&
name|doc
parameter_list|,
name|Node
modifier|*
name|node
parameter_list|)
function_decl|;
end_function_decl
begin_label
name|protected
label|:
end_label
begin_function_decl
name|void
name|reset
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|readToken
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|Location
modifier|&
name|location
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|QString
name|previousLexeme
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|QString
name|lexeme
parameter_list|()
function_decl|;
end_function_decl
begin_label
name|private
label|:
end_label
begin_function_decl
name|bool
name|match
parameter_list|(
name|int
name|target
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|skipTo
parameter_list|(
name|int
name|target
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|matchCompat
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|matchModuleQualifier
parameter_list|(
name|QString
modifier|&
name|name
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|matchTemplateAngles
parameter_list|(
name|CodeChunk
modifier|*
name|type
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|matchTemplateHeader
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|matchDataType
parameter_list|(
name|CodeChunk
modifier|*
name|type
parameter_list|,
name|QString
modifier|*
name|var
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|matchParameter
parameter_list|(
name|ParsedParameterList
modifier|&
name|pplist
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|matchFunctionDecl
parameter_list|(
name|Aggregate
modifier|*
name|parent
parameter_list|,
name|QStringList
modifier|*
name|parentPathPtr
parameter_list|,
name|FunctionNode
modifier|*
modifier|*
name|funcPtr
parameter_list|,
specifier|const
name|QString
modifier|&
name|templateStuff
parameter_list|,
name|ExtraFuncData
modifier|&
name|extra
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|matchBaseSpecifier
parameter_list|(
name|ClassNode
modifier|*
name|classe
parameter_list|,
name|bool
name|isClass
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|matchBaseList
parameter_list|(
name|ClassNode
modifier|*
name|classe
parameter_list|,
name|bool
name|isClass
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|matchClassDecl
parameter_list|(
name|Aggregate
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|templateStuff
init|=
name|QString
argument_list|()
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|matchNamespaceDecl
parameter_list|(
name|Aggregate
modifier|*
name|parent
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|matchUsingDecl
parameter_list|(
name|Aggregate
modifier|*
name|parent
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|matchEnumItem
parameter_list|(
name|Aggregate
modifier|*
name|parent
parameter_list|,
name|EnumNode
modifier|*
name|enume
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|matchEnumDecl
parameter_list|(
name|Aggregate
modifier|*
name|parent
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|matchTypedefDecl
parameter_list|(
name|Aggregate
modifier|*
name|parent
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|matchProperty
parameter_list|(
name|Aggregate
modifier|*
name|parent
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|matchDeclList
parameter_list|(
name|Aggregate
modifier|*
name|parent
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|matchDocsAndStuff
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|makeFunctionNode
parameter_list|(
specifier|const
name|QString
modifier|&
name|synopsis
parameter_list|,
name|QStringList
modifier|*
name|parentPathPtr
parameter_list|,
name|FunctionNode
modifier|*
modifier|*
name|funcPtr
parameter_list|,
name|ExtraFuncData
modifier|&
name|params
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|FunctionNode
modifier|*
name|makeFunctionNode
argument_list|(
specifier|const
name|Doc
operator|&
name|doc
argument_list|,
specifier|const
name|QString
operator|&
name|sig
argument_list|,
name|Aggregate
operator|*
name|parent
argument_list|,
name|Node
operator|::
name|NodeType
name|type
argument_list|,
name|bool
name|attached
argument_list|,
name|QString
name|qdoctag
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|parseQiteratorDotH
parameter_list|(
specifier|const
name|Location
modifier|&
name|location
parameter_list|,
specifier|const
name|QString
modifier|&
name|filePath
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|instantiateIteratorMacro
parameter_list|(
specifier|const
name|QString
modifier|&
name|container
parameter_list|,
specifier|const
name|QString
modifier|&
name|includeFile
parameter_list|,
specifier|const
name|QString
modifier|&
name|macroDef
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|createExampleFileNodes
parameter_list|(
name|DocumentNode
modifier|*
name|dn
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|matchFunctionModifier
parameter_list|()
function_decl|;
end_function_decl
begin_label
name|protected
label|:
end_label
begin_expr_stmt
name|QMap
operator|<
name|QString
operator|,
name|Node
operator|::
name|NodeType
operator|>
name|nodeTypeMap
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|Tokenizer
modifier|*
name|tokenizer
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|tok
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|Node
operator|::
name|Access
name|access
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|FunctionNode
operator|::
name|Metaness
name|metaness_
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QString
name|physicalModuleName
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QStringList
name|lastPath_
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QRegExp
name|varComment
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QRegExp
name|sep
decl_stmt|;
end_decl_stmt
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|QString
name|sequentialIteratorDefinition
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|mutableSequentialIteratorDefinition
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|associativeIteratorDefinition
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|mutableAssociativeIteratorDefinition
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QMap
operator|<
name|QString
operator|,
name|QString
operator|>
name|sequentialIteratorClasses
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QMap
operator|<
name|QString
operator|,
name|QString
operator|>
name|mutableSequentialIteratorClasses
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QMap
operator|<
name|QString
operator|,
name|QString
operator|>
name|associativeIteratorClasses
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QMap
operator|<
name|QString
operator|,
name|QString
operator|>
name|mutableAssociativeIteratorClasses
expr_stmt|;
end_expr_stmt
begin_decl_stmt
specifier|static
name|QStringList
name|exampleFiles
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QStringList
name|exampleDirs
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|exampleNameFilter
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|exampleImageFilter
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|COMMAND_ABSTRACT
unit|};
define|#
directive|define
name|COMMAND_ABSTRACT
value|Doc::alias("abstract")
end_define
begin_define
DECL|macro|COMMAND_CLASS
define|#
directive|define
name|COMMAND_CLASS
value|Doc::alias("class")
end_define
begin_define
DECL|macro|COMMAND_CONTENTSPAGE
define|#
directive|define
name|COMMAND_CONTENTSPAGE
value|Doc::alias("contentspage")
end_define
begin_define
DECL|macro|COMMAND_DITAMAP
define|#
directive|define
name|COMMAND_DITAMAP
value|Doc::alias("ditamap")
end_define
begin_define
DECL|macro|COMMAND_ENUM
define|#
directive|define
name|COMMAND_ENUM
value|Doc::alias("enum")
end_define
begin_define
DECL|macro|COMMAND_EXAMPLE
define|#
directive|define
name|COMMAND_EXAMPLE
value|Doc::alias("example")
end_define
begin_define
DECL|macro|COMMAND_EXTERNALPAGE
define|#
directive|define
name|COMMAND_EXTERNALPAGE
value|Doc::alias("externalpage")
end_define
begin_define
DECL|macro|COMMAND_FILE
define|#
directive|define
name|COMMAND_FILE
value|Doc::alias("file")
end_define
begin_define
DECL|macro|COMMAND_FN
define|#
directive|define
name|COMMAND_FN
value|Doc::alias("fn")
end_define
begin_define
DECL|macro|COMMAND_GROUP
define|#
directive|define
name|COMMAND_GROUP
value|Doc::alias("group")
end_define
begin_define
DECL|macro|COMMAND_HEADERFILE
define|#
directive|define
name|COMMAND_HEADERFILE
value|Doc::alias("headerfile")
end_define
begin_define
DECL|macro|COMMAND_INDEXPAGE
define|#
directive|define
name|COMMAND_INDEXPAGE
value|Doc::alias("indexpage")
end_define
begin_define
DECL|macro|COMMAND_INHEADERFILE
define|#
directive|define
name|COMMAND_INHEADERFILE
value|Doc::alias("inheaderfile")
end_define
begin_define
DECL|macro|COMMAND_MACRO
define|#
directive|define
name|COMMAND_MACRO
value|Doc::alias("macro")
end_define
begin_define
DECL|macro|COMMAND_MODULE
define|#
directive|define
name|COMMAND_MODULE
value|Doc::alias("module")
end_define
begin_define
DECL|macro|COMMAND_NAMESPACE
define|#
directive|define
name|COMMAND_NAMESPACE
value|Doc::alias("namespace")
end_define
begin_define
DECL|macro|COMMAND_OVERLOAD
define|#
directive|define
name|COMMAND_OVERLOAD
value|Doc::alias("overload")
end_define
begin_define
DECL|macro|COMMAND_NEXTPAGE
define|#
directive|define
name|COMMAND_NEXTPAGE
value|Doc::alias("nextpage")
end_define
begin_define
DECL|macro|COMMAND_PAGE
define|#
directive|define
name|COMMAND_PAGE
value|Doc::alias("page")
end_define
begin_define
DECL|macro|COMMAND_PREVIOUSPAGE
define|#
directive|define
name|COMMAND_PREVIOUSPAGE
value|Doc::alias("previouspage")
end_define
begin_define
DECL|macro|COMMAND_PROPERTY
define|#
directive|define
name|COMMAND_PROPERTY
value|Doc::alias("property")
end_define
begin_define
DECL|macro|COMMAND_REIMP
define|#
directive|define
name|COMMAND_REIMP
value|Doc::alias("reimp")
end_define
begin_define
DECL|macro|COMMAND_RELATES
define|#
directive|define
name|COMMAND_RELATES
value|Doc::alias("relates")
end_define
begin_define
DECL|macro|COMMAND_STARTPAGE
define|#
directive|define
name|COMMAND_STARTPAGE
value|Doc::alias("startpage")
end_define
begin_define
DECL|macro|COMMAND_TYPEDEF
define|#
directive|define
name|COMMAND_TYPEDEF
value|Doc::alias("typedef")
end_define
begin_define
DECL|macro|COMMAND_VARIABLE
define|#
directive|define
name|COMMAND_VARIABLE
value|Doc::alias("variable")
end_define
begin_define
DECL|macro|COMMAND_QMLABSTRACT
define|#
directive|define
name|COMMAND_QMLABSTRACT
value|Doc::alias("qmlabstract")
end_define
begin_define
DECL|macro|COMMAND_QMLTYPE
define|#
directive|define
name|COMMAND_QMLTYPE
value|Doc::alias("qmltype")
end_define
begin_define
DECL|macro|COMMAND_QMLPROPERTY
define|#
directive|define
name|COMMAND_QMLPROPERTY
value|Doc::alias("qmlproperty")
end_define
begin_define
DECL|macro|COMMAND_QMLPROPERTYGROUP
define|#
directive|define
name|COMMAND_QMLPROPERTYGROUP
value|Doc::alias("qmlpropertygroup")
end_define
begin_define
DECL|macro|COMMAND_QMLATTACHEDPROPERTY
define|#
directive|define
name|COMMAND_QMLATTACHEDPROPERTY
value|Doc::alias("qmlattachedproperty")
end_define
begin_define
DECL|macro|COMMAND_QMLINHERITS
define|#
directive|define
name|COMMAND_QMLINHERITS
value|Doc::alias("inherits")
end_define
begin_define
DECL|macro|COMMAND_QMLINSTANTIATES
define|#
directive|define
name|COMMAND_QMLINSTANTIATES
value|Doc::alias("instantiates")
end_define
begin_define
DECL|macro|COMMAND_QMLSIGNAL
define|#
directive|define
name|COMMAND_QMLSIGNAL
value|Doc::alias("qmlsignal")
end_define
begin_define
DECL|macro|COMMAND_QMLATTACHEDSIGNAL
define|#
directive|define
name|COMMAND_QMLATTACHEDSIGNAL
value|Doc::alias("qmlattachedsignal")
end_define
begin_define
DECL|macro|COMMAND_QMLMETHOD
define|#
directive|define
name|COMMAND_QMLMETHOD
value|Doc::alias("qmlmethod")
end_define
begin_define
DECL|macro|COMMAND_QMLATTACHEDMETHOD
define|#
directive|define
name|COMMAND_QMLATTACHEDMETHOD
value|Doc::alias("qmlattachedmethod")
end_define
begin_define
DECL|macro|COMMAND_QMLDEFAULT
define|#
directive|define
name|COMMAND_QMLDEFAULT
value|Doc::alias("default")
end_define
begin_define
DECL|macro|COMMAND_QMLREADONLY
define|#
directive|define
name|COMMAND_QMLREADONLY
value|Doc::alias("readonly")
end_define
begin_define
DECL|macro|COMMAND_QMLBASICTYPE
define|#
directive|define
name|COMMAND_QMLBASICTYPE
value|Doc::alias("qmlbasictype")
end_define
begin_define
DECL|macro|COMMAND_QMLMODULE
define|#
directive|define
name|COMMAND_QMLMODULE
value|Doc::alias("qmlmodule")
end_define
begin_define
DECL|macro|COMMAND_AUDIENCE
define|#
directive|define
name|COMMAND_AUDIENCE
value|Doc::alias("audience")
end_define
begin_define
DECL|macro|COMMAND_CATEGORY
define|#
directive|define
name|COMMAND_CATEGORY
value|Doc::alias("category")
end_define
begin_define
DECL|macro|COMMAND_PRODNAME
define|#
directive|define
name|COMMAND_PRODNAME
value|Doc::alias("prodname")
end_define
begin_define
DECL|macro|COMMAND_COMPONENT
define|#
directive|define
name|COMMAND_COMPONENT
value|Doc::alias("component")
end_define
begin_define
DECL|macro|COMMAND_AUTHOR
define|#
directive|define
name|COMMAND_AUTHOR
value|Doc::alias("author")
end_define
begin_define
DECL|macro|COMMAND_PUBLISHER
define|#
directive|define
name|COMMAND_PUBLISHER
value|Doc::alias("publisher")
end_define
begin_define
DECL|macro|COMMAND_COPYRYEAR
define|#
directive|define
name|COMMAND_COPYRYEAR
value|Doc::alias("copyryear")
end_define
begin_define
DECL|macro|COMMAND_COPYRHOLDER
define|#
directive|define
name|COMMAND_COPYRHOLDER
value|Doc::alias("copyrholder")
end_define
begin_define
DECL|macro|COMMAND_PERMISSIONS
define|#
directive|define
name|COMMAND_PERMISSIONS
value|Doc::alias("permissions")
end_define
begin_define
DECL|macro|COMMAND_LIFECYCLEVERSION
define|#
directive|define
name|COMMAND_LIFECYCLEVERSION
value|Doc::alias("lifecycleversion")
end_define
begin_define
DECL|macro|COMMAND_LIFECYCLEWSTATUS
define|#
directive|define
name|COMMAND_LIFECYCLEWSTATUS
value|Doc::alias("lifecyclestatus")
end_define
begin_define
DECL|macro|COMMAND_LICENSEYEAR
define|#
directive|define
name|COMMAND_LICENSEYEAR
value|Doc::alias("licenseyear")
end_define
begin_define
DECL|macro|COMMAND_LICENSENAME
define|#
directive|define
name|COMMAND_LICENSENAME
value|Doc::alias("licensename")
end_define
begin_define
DECL|macro|COMMAND_LICENSEDESCRIPTION
define|#
directive|define
name|COMMAND_LICENSEDESCRIPTION
value|Doc::alias("licensedescription")
end_define
begin_define
DECL|macro|COMMAND_RELEASEDATE
define|#
directive|define
name|COMMAND_RELEASEDATE
value|Doc::alias("releasedate")
end_define
begin_define
DECL|macro|COMMAND_QTVARIABLE
define|#
directive|define
name|COMMAND_QTVARIABLE
value|Doc::alias("qtvariable")
end_define
begin_comment
comment|// Some of these are not used currenmtly, but they are included now for completeness.
end_comment
begin_define
DECL|macro|COMMAND_JSTYPE
define|#
directive|define
name|COMMAND_JSTYPE
value|Doc::alias("jstype")
end_define
begin_define
DECL|macro|COMMAND_JSPROPERTY
define|#
directive|define
name|COMMAND_JSPROPERTY
value|Doc::alias("jsproperty")
end_define
begin_define
DECL|macro|COMMAND_JSPROPERTYGROUP
define|#
directive|define
name|COMMAND_JSPROPERTYGROUP
value|Doc::alias("jspropertygroup")
end_define
begin_define
DECL|macro|COMMAND_JSATTACHEDPROPERTY
define|#
directive|define
name|COMMAND_JSATTACHEDPROPERTY
value|Doc::alias("jsattachedproperty")
end_define
begin_define
DECL|macro|COMMAND_JSSIGNAL
define|#
directive|define
name|COMMAND_JSSIGNAL
value|Doc::alias("jssignal")
end_define
begin_define
DECL|macro|COMMAND_JSATTACHEDSIGNAL
define|#
directive|define
name|COMMAND_JSATTACHEDSIGNAL
value|Doc::alias("jsattachedsignal")
end_define
begin_define
DECL|macro|COMMAND_JSMETHOD
define|#
directive|define
name|COMMAND_JSMETHOD
value|Doc::alias("jsmethod")
end_define
begin_define
DECL|macro|COMMAND_JSATTACHEDMETHOD
define|#
directive|define
name|COMMAND_JSATTACHEDMETHOD
value|Doc::alias("jsattachedmethod")
end_define
begin_define
DECL|macro|COMMAND_JSBASICTYPE
define|#
directive|define
name|COMMAND_JSBASICTYPE
value|Doc::alias("jsbasictype")
end_define
begin_define
DECL|macro|COMMAND_JSMODULE
define|#
directive|define
name|COMMAND_JSMODULE
value|Doc::alias("jsmodule")
end_define
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
