begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QMLMARKUPVISITOR_H
end_ifndef
begin_define
DECL|macro|QMLMARKUPVISITOR_H
define|#
directive|define
name|QMLMARKUPVISITOR_H
end_define
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|"qqmljsastvisitor_p.h"
end_include
begin_include
include|#
directive|include
file|"node.h"
end_include
begin_include
include|#
directive|include
file|"tree.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|QmlMarkupVisitor
range|:
name|public
name|QQmlJS
operator|::
name|AST
operator|::
name|Visitor
block|{
name|public
operator|:
expr|enum
name|ExtraType
block|{
name|Comment
block|,
name|Pragma
block|}
block|;
name|QmlMarkupVisitor
argument_list|(
specifier|const
name|QString
operator|&
name|code
argument_list|,
specifier|const
name|QVector
operator|<
name|QQmlJS
operator|::
name|AST
operator|::
name|SourceLocation
operator|>
operator|&
name|pragmas
argument_list|,
name|QQmlJS
operator|::
name|Engine
operator|*
name|engine
argument_list|)
block|;
name|virtual
operator|~
name|QmlMarkupVisitor
argument_list|()
block|;
name|QString
name|markedUpCode
argument_list|()
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::UiImport *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|void
name|endVisit
argument_list|(
argument|QQmlJS::AST::UiImport *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::UiPublicMember *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::UiObjectDefinition *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::UiObjectInitializer *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|void
name|endVisit
argument_list|(
argument|QQmlJS::AST::UiObjectInitializer *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::UiObjectBinding *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::UiScriptBinding *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::UiArrayBinding *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::UiArrayMemberList *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::UiQualifiedId *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::ThisExpression *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::IdentifierExpression *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::NullExpression *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::TrueLiteral *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::FalseLiteral *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::NumericLiteral *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::StringLiteral *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::RegExpLiteral *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::ArrayLiteral *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::ObjectLiteral *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|void
name|endVisit
argument_list|(
argument|QQmlJS::AST::ObjectLiteral *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::ElementList *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::Elision *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::PropertyNameAndValue *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::ArrayMemberExpression *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::FieldMemberExpression *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::NewMemberExpression *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::NewExpression *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::ArgumentList *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::PostIncrementExpression *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::PostDecrementExpression *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::DeleteExpression *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::VoidExpression *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::TypeOfExpression *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::PreIncrementExpression *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::PreDecrementExpression *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::UnaryPlusExpression *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::UnaryMinusExpression *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::TildeExpression *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::NotExpression *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::BinaryExpression *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::ConditionalExpression *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::Expression *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::Block *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|void
name|endVisit
argument_list|(
argument|QQmlJS::AST::Block *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::VariableStatement *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::VariableDeclarationList *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::VariableDeclaration *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::EmptyStatement *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::ExpressionStatement *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::IfStatement *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::DoWhileStatement *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::WhileStatement *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::ForStatement *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::LocalForStatement *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::ForEachStatement *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::LocalForEachStatement *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::ContinueStatement *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::BreakStatement *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::ReturnStatement *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::WithStatement *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::CaseBlock *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|void
name|endVisit
argument_list|(
argument|QQmlJS::AST::CaseBlock *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::SwitchStatement *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::CaseClause *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::DefaultClause *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::LabelledStatement *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::ThrowStatement *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::TryStatement *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::Catch *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::Finally *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::FunctionDeclaration *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::FunctionExpression *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::FormalParameterList *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|visit
argument_list|(
argument|QQmlJS::AST::DebuggerStatement *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|protected
operator|:
name|QString
name|protect
argument_list|(
specifier|const
name|QString
operator|&
name|string
argument_list|)
block|;
name|private
operator|:
typedef|typedef
name|QHash
operator|<
name|QString
operator|,
name|QString
operator|>
name|StringHash
expr_stmt|;
name|void
name|addExtra
argument_list|(
argument|quint32 start
argument_list|,
argument|quint32 finish
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|void
name|addMarkedUpToken
argument_list|(
name|QQmlJS
operator|::
name|AST
operator|::
name|SourceLocation
operator|&
name|location
argument_list|,
specifier|const
name|QString
operator|&
name|text
argument_list|,
specifier|const
name|StringHash
operator|&
name|attributes
operator|=
name|StringHash
argument_list|()
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|void
name|addVerbatim
argument_list|(
name|QQmlJS
operator|::
name|AST
operator|::
name|SourceLocation
name|first
argument_list|,
name|QQmlJS
operator|::
name|AST
operator|::
name|SourceLocation
name|last
operator|=
name|QQmlJS
operator|::
name|AST
operator|::
name|SourceLocation
argument_list|()
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|sourceText
argument_list|(
name|QQmlJS
operator|::
name|AST
operator|::
name|SourceLocation
operator|&
name|location
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QQmlJS
operator|::
name|Engine
operator|*
name|engine
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QList
operator|<
name|ExtraType
operator|>
name|extraTypes
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QVector
operator|<
name|QQmlJS
operator|::
name|AST
operator|::
name|SourceLocation
operator|>
name|extraLocations
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QString
name|source
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|output
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|cursor
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|extraIndex
decl_stmt|;
end_decl_stmt
begin_macro
unit|};
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
