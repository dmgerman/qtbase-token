begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*   tokenizer.h */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|TOKENIZER_H
end_ifndef
begin_define
DECL|macro|TOKENIZER_H
define|#
directive|define
name|TOKENIZER_H
end_define
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qstack.h>
end_include
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|"location.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|/*   Here come the C++ tokens we support.  The first part contains   all-purpose tokens; then come keywords.    If you add a keyword, make sure to modify the keyword array in   tokenizer.cpp as well, and possibly adjust Tok_FirstKeyword and   Tok_LastKeyword. */
DECL|enumerator|Tok_Eoi
DECL|enumerator|Tok_Ampersand
DECL|enumerator|Tok_Aster
DECL|enumerator|Tok_Caret
DECL|enumerator|Tok_LeftParen
name|enum
type|{
name|Tok_Eoi
decl_stmt|,
name|Tok_Ampersand
decl_stmt|,
name|Tok_Aster
decl_stmt|,
name|Tok_Caret
decl_stmt|,
name|Tok_LeftParen
decl_stmt|,
DECL|enumerator|Tok_RightParen
DECL|enumerator|Tok_LeftParenAster
DECL|enumerator|Tok_Equal
DECL|enumerator|Tok_LeftBrace
name|Tok_RightParen
decl_stmt|,
name|Tok_LeftParenAster
decl_stmt|,
name|Tok_Equal
decl_stmt|,
name|Tok_LeftBrace
decl_stmt|,
DECL|enumerator|Tok_RightBrace
DECL|enumerator|Tok_Semicolon
DECL|enumerator|Tok_Colon
DECL|enumerator|Tok_LeftAngle
name|Tok_RightBrace
decl_stmt|,
name|Tok_Semicolon
decl_stmt|,
name|Tok_Colon
decl_stmt|,
name|Tok_LeftAngle
decl_stmt|,
DECL|enumerator|Tok_RightAngle
DECL|enumerator|Tok_Comma
DECL|enumerator|Tok_Ellipsis
DECL|enumerator|Tok_Gulbrandsen
name|Tok_RightAngle
decl_stmt|,
name|Tok_Comma
decl_stmt|,
name|Tok_Ellipsis
decl_stmt|,
name|Tok_Gulbrandsen
decl_stmt|,
DECL|enumerator|Tok_LeftBracket
DECL|enumerator|Tok_RightBracket
DECL|enumerator|Tok_Tilde
DECL|enumerator|Tok_SomeOperator
name|Tok_LeftBracket
decl_stmt|,
name|Tok_RightBracket
decl_stmt|,
name|Tok_Tilde
decl_stmt|,
name|Tok_SomeOperator
decl_stmt|,
DECL|enumerator|Tok_Number
DECL|enumerator|Tok_String
DECL|enumerator|Tok_Doc
DECL|enumerator|Tok_Comment
DECL|enumerator|Tok_Ident
DECL|enumerator|Tok_At
name|Tok_Number
decl_stmt|,
name|Tok_String
decl_stmt|,
name|Tok_Doc
decl_stmt|,
name|Tok_Comment
decl_stmt|,
name|Tok_Ident
decl_stmt|,
name|Tok_At
decl_stmt|,
DECL|enumerator|Tok_char
DECL|enumerator|Tok_class
DECL|enumerator|Tok_const
DECL|enumerator|Tok_double
DECL|enumerator|Tok_enum
name|Tok_char
decl_stmt|,
name|Tok_class
decl_stmt|,
name|Tok_const
decl_stmt|,
name|Tok_double
decl_stmt|,
name|Tok_enum
decl_stmt|,
DECL|enumerator|Tok_explicit
DECL|enumerator|Tok_friend
DECL|enumerator|Tok_inline
DECL|enumerator|Tok_int
DECL|enumerator|Tok_long
name|Tok_explicit
decl_stmt|,
name|Tok_friend
decl_stmt|,
name|Tok_inline
decl_stmt|,
name|Tok_int
decl_stmt|,
name|Tok_long
decl_stmt|,
DECL|enumerator|Tok_namespace
DECL|enumerator|Tok_operator
DECL|enumerator|Tok_private
DECL|enumerator|Tok_protected
name|Tok_namespace
decl_stmt|,
name|Tok_operator
decl_stmt|,
name|Tok_private
decl_stmt|,
name|Tok_protected
decl_stmt|,
DECL|enumerator|Tok_public
DECL|enumerator|Tok_short
DECL|enumerator|Tok_signals
DECL|enumerator|Tok_signed
DECL|enumerator|Tok_slots
name|Tok_public
decl_stmt|,
name|Tok_short
decl_stmt|,
name|Tok_signals
decl_stmt|,
name|Tok_signed
decl_stmt|,
name|Tok_slots
decl_stmt|,
DECL|enumerator|Tok_static
DECL|enumerator|Tok_struct
DECL|enumerator|Tok_template
DECL|enumerator|Tok_typedef
name|Tok_static
decl_stmt|,
name|Tok_struct
decl_stmt|,
name|Tok_template
decl_stmt|,
name|Tok_typedef
decl_stmt|,
DECL|enumerator|Tok_typename
DECL|enumerator|Tok_union
DECL|enumerator|Tok_unsigned
DECL|enumerator|Tok_using
DECL|enumerator|Tok_virtual
name|Tok_typename
decl_stmt|,
name|Tok_union
decl_stmt|,
name|Tok_unsigned
decl_stmt|,
name|Tok_using
decl_stmt|,
name|Tok_virtual
decl_stmt|,
DECL|enumerator|Tok_void
DECL|enumerator|Tok_volatile
DECL|enumerator|Tok_int64
DECL|enumerator|Tok_Q_OBJECT
DECL|enumerator|Tok_Q_OVERRIDE
name|Tok_void
decl_stmt|,
name|Tok_volatile
decl_stmt|,
name|Tok_int64
decl_stmt|,
name|Tok_Q_OBJECT
decl_stmt|,
name|Tok_Q_OVERRIDE
decl_stmt|,
DECL|enumerator|Tok_Q_PROPERTY
DECL|enumerator|Tok_Q_PRIVATE_PROPERTY
DECL|enumerator|Tok_Q_DECLARE_SEQUENTIAL_ITERATOR
name|Tok_Q_PROPERTY
decl_stmt|,
name|Tok_Q_PRIVATE_PROPERTY
decl_stmt|,
name|Tok_Q_DECLARE_SEQUENTIAL_ITERATOR
decl_stmt|,
DECL|enumerator|Tok_Q_DECLARE_MUTABLE_SEQUENTIAL_ITERATOR
name|Tok_Q_DECLARE_MUTABLE_SEQUENTIAL_ITERATOR
decl_stmt|,
DECL|enumerator|Tok_Q_DECLARE_ASSOCIATIVE_ITERATOR
name|Tok_Q_DECLARE_ASSOCIATIVE_ITERATOR
decl_stmt|,
DECL|enumerator|Tok_Q_DECLARE_MUTABLE_ASSOCIATIVE_ITERATOR
name|Tok_Q_DECLARE_MUTABLE_ASSOCIATIVE_ITERATOR
decl_stmt|,
DECL|enumerator|Tok_Q_DECLARE_FLAGS
DECL|enumerator|Tok_Q_SIGNALS
DECL|enumerator|Tok_Q_SLOTS
DECL|enumerator|Tok_QT_COMPAT
name|Tok_Q_DECLARE_FLAGS
decl_stmt|,
name|Tok_Q_SIGNALS
decl_stmt|,
name|Tok_Q_SLOTS
decl_stmt|,
name|Tok_QT_COMPAT
decl_stmt|,
DECL|enumerator|Tok_QT_COMPAT_CONSTRUCTOR
DECL|enumerator|Tok_QT_DEPRECATED
DECL|enumerator|Tok_QT_MOC_COMPAT
name|Tok_QT_COMPAT_CONSTRUCTOR
decl_stmt|,
name|Tok_QT_DEPRECATED
decl_stmt|,
name|Tok_QT_MOC_COMPAT
decl_stmt|,
DECL|enumerator|Tok_QT_MODULE
DECL|enumerator|Tok_QT3_SUPPORT
DECL|enumerator|Tok_QT3_SUPPORT_CONSTRUCTOR
name|Tok_QT_MODULE
decl_stmt|,
name|Tok_QT3_SUPPORT
decl_stmt|,
name|Tok_QT3_SUPPORT_CONSTRUCTOR
decl_stmt|,
DECL|enumerator|Tok_QT3_MOC_SUPPORT
DECL|enumerator|Tok_QDOC_PROPERTY
name|Tok_QT3_MOC_SUPPORT
decl_stmt|,
name|Tok_QDOC_PROPERTY
decl_stmt|,
DECL|enumerator|Tok_FirstKeyword
DECL|enumerator|Tok_LastKeyword
name|Tok_FirstKeyword
init|=
name|Tok_char
decl_stmt|,
name|Tok_LastKeyword
init|=
name|Tok_QDOC_PROPERTY
end_decl_stmt
begin_comment
unit|};
comment|/*   The Tokenizer class implements lexical analysis of C++ source   files.    Not every operator or keyword of C++ is recognized; only those   that are interesting to us. Some Qt keywords or macros are also   recognized. */
end_comment
begin_decl_stmt
name|class
name|Tokenizer
block|{
name|public
label|:
name|Tokenizer
argument_list|(
specifier|const
name|Location
operator|&
name|loc
argument_list|,
specifier|const
name|QByteArray
operator|&
name|in
argument_list|)
expr_stmt|;
name|Tokenizer
argument_list|(
specifier|const
name|Location
operator|&
name|loc
argument_list|,
name|QFile
operator|&
name|file
argument_list|)
expr_stmt|;
operator|~
name|Tokenizer
argument_list|()
expr_stmt|;
name|int
name|getToken
parameter_list|()
function_decl|;
name|void
name|setParsingFnOrMacro
parameter_list|(
name|bool
name|macro
parameter_list|)
block|{
name|parsingMacro
operator|=
name|macro
expr_stmt|;
block|}
name|bool
name|parsingFnOrMacro
argument_list|()
specifier|const
block|{
return|return
name|parsingMacro
return|;
block|}
specifier|const
name|Location
operator|&
name|location
argument_list|()
specifier|const
block|{
return|return
name|yyTokLoc
return|;
block|}
name|QString
name|previousLexeme
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|lexeme
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|version
argument_list|()
specifier|const
block|{
return|return
name|yyVersion
return|;
block|}
name|int
name|braceDepth
argument_list|()
specifier|const
block|{
return|return
name|yyBraceDepth
return|;
block|}
name|int
name|parenDepth
argument_list|()
specifier|const
block|{
return|return
name|yyParenDepth
return|;
block|}
name|int
name|bracketDepth
argument_list|()
specifier|const
block|{
return|return
name|yyBracketDepth
return|;
block|}
specifier|static
name|void
name|initialize
parameter_list|(
specifier|const
name|Config
modifier|&
name|config
parameter_list|)
function_decl|;
specifier|static
name|void
name|terminate
parameter_list|()
function_decl|;
specifier|static
name|bool
name|isTrue
parameter_list|(
specifier|const
name|QString
modifier|&
name|condition
parameter_list|)
function_decl|;
name|private
label|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|start
parameter_list|(
specifier|const
name|Location
modifier|&
name|loc
parameter_list|)
function_decl|;
comment|/*       This limit on the length of a lexeme seems fairly high, but a       doc comment can be arbitrarily long. The previous 65,536 limit       was reached by Mark Summerfield.     */
enum|enum
block|{
name|yyLexBufSize
init|=
literal|524288
block|}
enum|;
name|int
name|getch
parameter_list|()
block|{
return|return
name|yyPos
operator|==
name|yyIn
operator|.
name|size
argument_list|()
condition|?
name|EOF
else|:
name|yyIn
index|[
name|yyPos
operator|++
index|]
return|;
block|}
specifier|inline
name|int
name|getChar
parameter_list|()
block|{
if|if
condition|(
name|yyCh
operator|==
name|EOF
condition|)
return|return
name|EOF
return|;
if|if
condition|(
name|yyLexLen
operator|<
name|yyLexBufSize
operator|-
literal|1
condition|)
block|{
name|yyLex
index|[
name|yyLexLen
operator|++
index|]
operator|=
operator|(
name|char
operator|)
name|yyCh
expr_stmt|;
name|yyLex
index|[
name|yyLexLen
index|]
operator|=
literal|'\0'
expr_stmt|;
block|}
name|yyCurLoc
operator|.
name|advance
argument_list|(
name|yyCh
argument_list|)
expr_stmt|;
name|int
name|ch
init|=
name|getch
argument_list|()
decl_stmt|;
if|if
condition|(
name|ch
operator|==
name|EOF
condition|)
return|return
name|EOF
return|;
comment|// cast explicitly to make sure the value of ch
comment|// is in range [0..255] to avoid assert messages
comment|// when using debug CRT that checks its input.
return|return
name|int
argument_list|(
name|uint
argument_list|(
name|uchar
argument_list|(
name|ch
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
name|int
name|getTokenAfterPreprocessor
parameter_list|()
function_decl|;
name|void
name|pushSkipping
parameter_list|(
name|bool
name|skip
parameter_list|)
function_decl|;
name|bool
name|popSkipping
parameter_list|()
function_decl|;
name|Location
name|yyTokLoc
decl_stmt|;
name|Location
name|yyCurLoc
decl_stmt|;
name|char
modifier|*
name|yyLexBuf1
decl_stmt|;
name|char
modifier|*
name|yyLexBuf2
decl_stmt|;
name|char
modifier|*
name|yyPrevLex
decl_stmt|;
name|char
modifier|*
name|yyLex
decl_stmt|;
name|size_t
name|yyLexLen
decl_stmt|;
name|QStack
operator|<
name|bool
operator|>
name|yyPreprocessorSkipping
expr_stmt|;
name|int
name|yyNumPreprocessorSkipping
decl_stmt|;
name|int
name|yyBraceDepth
decl_stmt|;
name|int
name|yyParenDepth
decl_stmt|;
name|int
name|yyBracketDepth
decl_stmt|;
name|int
name|yyCh
decl_stmt|;
name|QString
name|yyVersion
decl_stmt|;
name|bool
name|parsingMacro
decl_stmt|;
name|protected
label|:
name|QByteArray
name|yyIn
decl_stmt|;
name|int
name|yyPos
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
