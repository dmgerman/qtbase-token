begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*   atom.h */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|ATOM_H
end_ifndef
begin_define
DECL|macro|ATOM_H
define|#
directive|define
name|ATOM_H
end_define
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_define
DECL|macro|QDOC_QML
define|#
directive|define
name|QDOC_QML
end_define
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|Atom
block|{
name|public
label|:
enum|enum
name|Type
block|{
name|AbstractLeft
block|,
name|AbstractRight
block|,
name|AnnotatedList
block|,
name|AutoLink
block|,
name|BaseName
block|,
name|BriefLeft
block|,
name|BriefRight
block|,
name|C
block|,
name|CaptionLeft
block|,
name|CaptionRight
block|,
name|Code
block|,
name|CodeBad
block|,
name|CodeNew
block|,
name|CodeOld
block|,
name|CodeQuoteArgument
block|,
name|CodeQuoteCommand
block|,
name|DivLeft
block|,
name|DivRight
block|,
name|EndQmlText
block|,
name|FootnoteLeft
block|,
name|FootnoteRight
block|,
name|FormatElse
block|,
name|FormatEndif
block|,
name|FormatIf
block|,
name|FormattingLeft
block|,
name|FormattingRight
block|,
name|GeneratedList
block|,
name|GuidLink
block|,
name|Image
block|,
name|ImageText
block|,
name|ImportantLeft
block|,
name|ImportantRight
block|,
name|InlineImage
block|,
name|JavaScript
block|,
name|EndJavaScript
block|,
name|LegaleseLeft
block|,
name|LegaleseRight
block|,
name|LineBreak
block|,
name|Link
block|,
name|LinkNode
block|,
name|ListLeft
block|,
name|ListItemNumber
block|,
name|ListTagLeft
block|,
name|ListTagRight
block|,
name|ListItemLeft
block|,
name|ListItemRight
block|,
name|ListRight
block|,
name|Nop
block|,
name|NoteLeft
block|,
name|NoteRight
block|,
name|ParaLeft
block|,
name|ParaRight
block|,
name|Qml
block|,
name|QmlText
block|,
name|QuotationLeft
block|,
name|QuotationRight
block|,
name|RawString
block|,
name|SectionLeft
block|,
name|SectionRight
block|,
name|SectionHeadingLeft
block|,
name|SectionHeadingRight
block|,
name|SidebarLeft
block|,
name|SidebarRight
block|,
name|SinceList
block|,
name|SnippetCommand
block|,
name|SnippetIdentifier
block|,
name|SnippetLocation
block|,
name|String
block|,
name|TableLeft
block|,
name|TableRight
block|,
name|TableHeaderLeft
block|,
name|TableHeaderRight
block|,
name|TableRowLeft
block|,
name|TableRowRight
block|,
name|TableItemLeft
block|,
name|TableItemRight
block|,
name|TableOfContents
block|,
name|Target
block|,
name|UnhandledFormat
block|,
name|UnknownCommand
block|,
name|Last
init|=
name|UnknownCommand
block|}
enum|;
name|Atom
argument_list|(
argument|Type type
argument_list|,
argument|const QString& string =
literal|""
argument_list|)
block|:
name|next_
argument_list|(
literal|0
argument_list|)
operator|,
name|type_
argument_list|(
argument|type
argument_list|)
block|{
name|strs
operator|<<
name|string
block|;     }
name|Atom
argument_list|(
argument|Type type
argument_list|,
argument|const QString& p1
argument_list|,
argument|const QString& p2
argument_list|)
operator|:
name|next_
argument_list|(
literal|0
argument_list|)
operator|,
name|type_
argument_list|(
argument|type
argument_list|)
block|{
name|strs
operator|<<
name|p1
block|;
if|if
condition|(
operator|!
name|p2
operator|.
name|isEmpty
argument_list|()
condition|)
name|strs
operator|<<
name|p2
expr_stmt|;
block|}
name|Atom
argument_list|(
argument|Atom* previous
argument_list|,
argument|Type type
argument_list|,
argument|const QString& string =
literal|""
argument_list|)
block|:
name|next_
argument_list|(
name|previous
operator|->
name|next_
argument_list|)
operator|,
name|type_
argument_list|(
argument|type
argument_list|)
block|{
name|strs
operator|<<
name|string
block|;
name|previous
operator|->
name|next_
operator|=
name|this
block|;     }
name|Atom
argument_list|(
argument|Atom* previous
argument_list|,
argument|Type type
argument_list|,
argument|const QString& p1
argument_list|,
argument|const QString& p2
argument_list|)
operator|:
name|next_
argument_list|(
name|previous
operator|->
name|next_
argument_list|)
operator|,
name|type_
argument_list|(
argument|type
argument_list|)
block|{
name|strs
operator|<<
name|p1
block|;
if|if
condition|(
operator|!
name|p2
operator|.
name|isEmpty
argument_list|()
condition|)
name|strs
operator|<<
name|p2
expr_stmt|;
name|previous
operator|->
name|next_
operator|=
name|this
expr_stmt|;
block|}
end_decl_stmt
begin_function
name|void
name|appendChar
parameter_list|(
name|QChar
name|ch
parameter_list|)
block|{
name|strs
index|[
literal|0
index|]
operator|+=
name|ch
expr_stmt|;
block|}
end_function
begin_function
name|void
name|appendString
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|)
block|{
name|strs
index|[
literal|0
index|]
operator|+=
name|string
expr_stmt|;
block|}
end_function
begin_function
name|void
name|chopString
parameter_list|()
block|{
name|strs
index|[
literal|0
index|]
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|setString
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|)
block|{
name|strs
index|[
literal|0
index|]
operator|=
name|string
expr_stmt|;
block|}
end_function
begin_function
name|Atom
modifier|*
name|next
parameter_list|()
block|{
return|return
name|next_
return|;
block|}
end_function
begin_function
name|void
name|setNext
parameter_list|(
name|Atom
modifier|*
name|newNext
parameter_list|)
block|{
name|next_
operator|=
name|newNext
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|const
name|Atom
operator|*
name|next
argument_list|()
specifier|const
block|{
return|return
name|next_
return|;
block|}
end_expr_stmt
begin_decl_stmt
specifier|const
name|Atom
modifier|*
name|next
argument_list|(
name|Type
name|t
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|const
name|Atom
modifier|*
name|next
argument_list|(
name|Type
name|t
argument_list|,
specifier|const
name|QString
operator|&
name|s
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|Type
name|type
argument_list|()
specifier|const
block|{
return|return
name|type_
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QString
name|typeString
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|const
name|QString
operator|&
name|string
argument_list|()
specifier|const
block|{
return|return
name|strs
index|[
literal|0
index|]
return|;
block|}
end_expr_stmt
begin_decl_stmt
specifier|const
name|QString
modifier|&
name|string
argument_list|(
name|int
name|i
argument_list|)
decl|const
block|{
return|return
name|strs
index|[
name|i
index|]
return|;
block|}
end_decl_stmt
begin_expr_stmt
name|int
name|count
argument_list|()
specifier|const
block|{
return|return
name|strs
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|void
name|dump
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
specifier|static
name|QLatin1String
name|BOLD_
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QLatin1String
name|INDEX_
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QLatin1String
name|ITALIC_
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QLatin1String
name|LINK_
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QLatin1String
name|PARAMETER_
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QLatin1String
name|SPAN_
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QLatin1String
name|SUBSCRIPT_
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QLatin1String
name|SUPERSCRIPT_
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QLatin1String
name|TELETYPE_
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QLatin1String
name|UNDERLINE_
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QLatin1String
name|BULLET_
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QLatin1String
name|TAG_
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QLatin1String
name|VALUE_
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QLatin1String
name|LOWERALPHA_
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QLatin1String
name|LOWERROMAN_
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QLatin1String
name|NUMERIC_
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QLatin1String
name|UPPERALPHA_
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QLatin1String
name|UPPERROMAN_
decl_stmt|;
end_decl_stmt
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|Atom
modifier|*
name|next_
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Type
name|type_
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QStringList
name|strs
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|ATOM_FORMATTING_BOLD
unit|};
define|#
directive|define
name|ATOM_FORMATTING_BOLD
value|"bold"
end_define
begin_define
DECL|macro|ATOM_FORMATTING_INDEX
define|#
directive|define
name|ATOM_FORMATTING_INDEX
value|"index"
end_define
begin_define
DECL|macro|ATOM_FORMATTING_ITALIC
define|#
directive|define
name|ATOM_FORMATTING_ITALIC
value|"italic"
end_define
begin_define
DECL|macro|ATOM_FORMATTING_LINK
define|#
directive|define
name|ATOM_FORMATTING_LINK
value|"link"
end_define
begin_define
DECL|macro|ATOM_FORMATTING_PARAMETER
define|#
directive|define
name|ATOM_FORMATTING_PARAMETER
value|"parameter"
end_define
begin_define
DECL|macro|ATOM_FORMATTING_SPAN
define|#
directive|define
name|ATOM_FORMATTING_SPAN
value|"span "
end_define
begin_define
DECL|macro|ATOM_FORMATTING_SUBSCRIPT
define|#
directive|define
name|ATOM_FORMATTING_SUBSCRIPT
value|"subscript"
end_define
begin_define
DECL|macro|ATOM_FORMATTING_SUPERSCRIPT
define|#
directive|define
name|ATOM_FORMATTING_SUPERSCRIPT
value|"superscript"
end_define
begin_define
DECL|macro|ATOM_FORMATTING_TELETYPE
define|#
directive|define
name|ATOM_FORMATTING_TELETYPE
value|"teletype"
end_define
begin_define
DECL|macro|ATOM_FORMATTING_UNDERLINE
define|#
directive|define
name|ATOM_FORMATTING_UNDERLINE
value|"underline"
end_define
begin_define
DECL|macro|ATOM_LIST_BULLET
define|#
directive|define
name|ATOM_LIST_BULLET
value|"bullet"
end_define
begin_define
DECL|macro|ATOM_LIST_TAG
define|#
directive|define
name|ATOM_LIST_TAG
value|"tag"
end_define
begin_define
DECL|macro|ATOM_LIST_VALUE
define|#
directive|define
name|ATOM_LIST_VALUE
value|"value"
end_define
begin_define
DECL|macro|ATOM_LIST_LOWERALPHA
define|#
directive|define
name|ATOM_LIST_LOWERALPHA
value|"loweralpha"
end_define
begin_define
DECL|macro|ATOM_LIST_LOWERROMAN
define|#
directive|define
name|ATOM_LIST_LOWERROMAN
value|"lowerroman"
end_define
begin_define
DECL|macro|ATOM_LIST_NUMERIC
define|#
directive|define
name|ATOM_LIST_NUMERIC
value|"numeric"
end_define
begin_define
DECL|macro|ATOM_LIST_UPPERALPHA
define|#
directive|define
name|ATOM_LIST_UPPERALPHA
value|"upperalpha"
end_define
begin_define
DECL|macro|ATOM_LIST_UPPERROMAN
define|#
directive|define
name|ATOM_LIST_UPPERROMAN
value|"upperroman"
end_define
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
