begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*   jscodemarker.cpp */
end_comment
begin_include
include|#
directive|include
file|"qqmljsast_p.h"
end_include
begin_include
include|#
directive|include
file|"qqmljsengine_p.h"
end_include
begin_include
include|#
directive|include
file|"qqmljslexer_p.h"
end_include
begin_include
include|#
directive|include
file|"qqmljsparser_p.h"
end_include
begin_include
include|#
directive|include
file|"atom.h"
end_include
begin_include
include|#
directive|include
file|"node.h"
end_include
begin_include
include|#
directive|include
file|"jscodemarker.h"
end_include
begin_include
include|#
directive|include
file|"qmlmarkupvisitor.h"
end_include
begin_include
include|#
directive|include
file|"text.h"
end_include
begin_include
include|#
directive|include
file|"tree.h"
end_include
begin_include
include|#
directive|include
file|"generator.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|JsCodeMarker
name|JsCodeMarker
operator|::
name|JsCodeMarker
parameter_list|()
block|{ }
end_function
begin_destructor
DECL|function|~JsCodeMarker
name|JsCodeMarker
operator|::
name|~
name|JsCodeMarker
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!   Returns \c true if the \a code is recognized by the parser.  */
end_comment
begin_function
DECL|function|recognizeCode
name|bool
name|JsCodeMarker
operator|::
name|recognizeCode
parameter_list|(
specifier|const
name|QString
modifier|&
name|code
parameter_list|)
block|{
name|QQmlJS
operator|::
name|Engine
name|engine
decl_stmt|;
name|QQmlJS
operator|::
name|Lexer
name|lexer
argument_list|(
operator|&
name|engine
argument_list|)
decl_stmt|;
name|QQmlJS
operator|::
name|Parser
name|parser
argument_list|(
operator|&
name|engine
argument_list|)
decl_stmt|;
name|QString
name|newCode
init|=
name|code
decl_stmt|;
name|QVector
argument_list|<
name|QQmlJS
operator|::
name|AST
operator|::
name|SourceLocation
argument_list|>
name|pragmas
init|=
name|extractPragmas
argument_list|(
name|newCode
argument_list|)
decl_stmt|;
name|lexer
operator|.
name|setCode
argument_list|(
name|newCode
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|parser
operator|.
name|parseProgram
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Returns \c true if \a ext is any of a list of file extensions   for the QML language.  */
end_comment
begin_function
DECL|function|recognizeExtension
name|bool
name|JsCodeMarker
operator|::
name|recognizeExtension
parameter_list|(
specifier|const
name|QString
modifier|&
name|ext
parameter_list|)
block|{
return|return
name|ext
operator|==
literal|"js"
operator|||
name|ext
operator|==
literal|"json"
return|;
block|}
end_function
begin_comment
comment|/*!   Returns \c true if the \a language is recognized. We recognize JavaScript,   ECMAScript and JSON.  */
end_comment
begin_function
DECL|function|recognizeLanguage
name|bool
name|JsCodeMarker
operator|::
name|recognizeLanguage
parameter_list|(
specifier|const
name|QString
modifier|&
name|language
parameter_list|)
block|{
return|return
name|language
operator|==
literal|"JavaScript"
operator|||
name|language
operator|==
literal|"ECMAScript"
operator|||
name|language
operator|==
literal|"JSON"
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the type of atom used to represent JavaScript code in the documentation. */
end_comment
begin_function
DECL|function|atomType
name|Atom
operator|::
name|AtomType
name|JsCodeMarker
operator|::
name|atomType
parameter_list|()
specifier|const
block|{
return|return
name|Atom
operator|::
name|JavaScript
return|;
block|}
end_function
begin_function
DECL|function|markedUpCode
name|QString
name|JsCodeMarker
operator|::
name|markedUpCode
parameter_list|(
specifier|const
name|QString
modifier|&
name|code
parameter_list|,
specifier|const
name|Node
modifier|*
name|relative
parameter_list|,
specifier|const
name|Location
modifier|&
name|location
parameter_list|)
block|{
return|return
name|addMarkUp
argument_list|(
name|code
argument_list|,
name|relative
argument_list|,
name|location
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|addMarkUp
name|QString
name|JsCodeMarker
operator|::
name|addMarkUp
parameter_list|(
specifier|const
name|QString
modifier|&
name|code
parameter_list|,
specifier|const
name|Node
modifier|*
comment|/* relative */
parameter_list|,
specifier|const
name|Location
modifier|&
name|location
parameter_list|)
block|{
name|QQmlJS
operator|::
name|Engine
name|engine
decl_stmt|;
name|QQmlJS
operator|::
name|Lexer
name|lexer
argument_list|(
operator|&
name|engine
argument_list|)
decl_stmt|;
name|QString
name|newCode
init|=
name|code
decl_stmt|;
name|QVector
argument_list|<
name|QQmlJS
operator|::
name|AST
operator|::
name|SourceLocation
argument_list|>
name|pragmas
init|=
name|extractPragmas
argument_list|(
name|newCode
argument_list|)
decl_stmt|;
name|lexer
operator|.
name|setCode
argument_list|(
name|newCode
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QQmlJS
operator|::
name|Parser
name|parser
argument_list|(
operator|&
name|engine
argument_list|)
decl_stmt|;
name|QString
name|output
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|parseProgram
argument_list|()
condition|)
block|{
name|QQmlJS
operator|::
name|AST
operator|::
name|Node
modifier|*
name|ast
init|=
name|parser
operator|.
name|rootNode
argument_list|()
decl_stmt|;
comment|// Pass the unmodified code to the visitor so that pragmas and other
comment|// unhandled source text can be output.
name|QmlMarkupVisitor
name|visitor
argument_list|(
name|code
argument_list|,
name|pragmas
argument_list|,
operator|&
name|engine
argument_list|)
decl_stmt|;
name|QQmlJS
operator|::
name|AST
operator|::
name|Node
operator|::
name|accept
argument_list|(
name|ast
argument_list|,
operator|&
name|visitor
argument_list|)
expr_stmt|;
name|output
operator|=
name|visitor
operator|.
name|markedUpCode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|location
operator|.
name|warning
argument_list|(
name|location
operator|.
name|fileName
argument_list|()
operator|+
name|tr
argument_list|(
literal|"Unable to parse JavaScript: \"%1\" at line %2, column %3"
argument_list|)
operator|.
name|arg
argument_list|(
name|parser
operator|.
name|errorMessage
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|parser
operator|.
name|errorLineNumber
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|parser
operator|.
name|errorColumnNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|=
name|protect
argument_list|(
name|code
argument_list|)
expr_stmt|;
block|}
return|return
name|output
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
