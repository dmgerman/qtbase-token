begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*   qmlcodeparser.cpp */
end_comment
begin_include
include|#
directive|include
file|"qqmljsast_p.h"
end_include
begin_include
include|#
directive|include
file|"qqmljsastvisitor_p.h"
end_include
begin_include
include|#
directive|include
file|"qmlcodeparser.h"
end_include
begin_include
include|#
directive|include
file|"node.h"
end_include
begin_include
include|#
directive|include
file|"config.h"
end_include
begin_include
include|#
directive|include
file|"qmlvisitor.h"
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|macro|COMMAND_STARTPAGE
define|#
directive|define
name|COMMAND_STARTPAGE
value|Doc::alias("startpage")
DECL|macro|COMMAND_VARIABLE
define|#
directive|define
name|COMMAND_VARIABLE
value|Doc::alias("variable")
DECL|macro|COMMAND_DEPRECATED
define|#
directive|define
name|COMMAND_DEPRECATED
value|Doc::alias("deprecated")
DECL|macro|COMMAND_INGROUP
define|#
directive|define
name|COMMAND_INGROUP
value|Doc::alias("ingroup")
DECL|macro|COMMAND_INTERNAL
define|#
directive|define
name|COMMAND_INTERNAL
value|Doc::alias("internal")
DECL|macro|COMMAND_OBSOLETE
define|#
directive|define
name|COMMAND_OBSOLETE
value|Doc::alias("obsolete")
DECL|macro|COMMAND_PAGEKEYWORDS
define|#
directive|define
name|COMMAND_PAGEKEYWORDS
value|Doc::alias("pagekeywords")
DECL|macro|COMMAND_PRELIMINARY
define|#
directive|define
name|COMMAND_PRELIMINARY
value|Doc::alias("preliminary")
DECL|macro|COMMAND_SINCE
define|#
directive|define
name|COMMAND_SINCE
value|Doc::alias("since")
DECL|macro|COMMAND_QMLABSTRACT
define|#
directive|define
name|COMMAND_QMLABSTRACT
value|Doc::alias("qmlabstract")
DECL|macro|COMMAND_QMLCLASS
define|#
directive|define
name|COMMAND_QMLCLASS
value|Doc::alias("qmlclass")
DECL|macro|COMMAND_QMLTYPE
define|#
directive|define
name|COMMAND_QMLTYPE
value|Doc::alias("qmltype")
DECL|macro|COMMAND_QMLMODULE
define|#
directive|define
name|COMMAND_QMLMODULE
value|Doc::alias("qmlmodule")
DECL|macro|COMMAND_QMLPROPERTY
define|#
directive|define
name|COMMAND_QMLPROPERTY
value|Doc::alias("qmlproperty")
DECL|macro|COMMAND_QMLATTACHEDPROPERTY
define|#
directive|define
name|COMMAND_QMLATTACHEDPROPERTY
value|Doc::alias("qmlattachedproperty")
DECL|macro|COMMAND_QMLINHERITS
define|#
directive|define
name|COMMAND_QMLINHERITS
value|Doc::alias("inherits")
DECL|macro|COMMAND_QMLINSTANTIATES
define|#
directive|define
name|COMMAND_QMLINSTANTIATES
value|Doc::alias("instantiates")
DECL|macro|COMMAND_INQMLMODULE
define|#
directive|define
name|COMMAND_INQMLMODULE
value|Doc::alias("inqmlmodule")
DECL|macro|COMMAND_QMLSIGNAL
define|#
directive|define
name|COMMAND_QMLSIGNAL
value|Doc::alias("qmlsignal")
DECL|macro|COMMAND_QMLATTACHEDSIGNAL
define|#
directive|define
name|COMMAND_QMLATTACHEDSIGNAL
value|Doc::alias("qmlattachedsignal")
DECL|macro|COMMAND_QMLMETHOD
define|#
directive|define
name|COMMAND_QMLMETHOD
value|Doc::alias("qmlmethod")
DECL|macro|COMMAND_QMLATTACHEDMETHOD
define|#
directive|define
name|COMMAND_QMLATTACHEDMETHOD
value|Doc::alias("qmlattachedmethod")
DECL|macro|COMMAND_QMLDEFAULT
define|#
directive|define
name|COMMAND_QMLDEFAULT
value|Doc::alias("default")
DECL|macro|COMMAND_QMLREADONLY
define|#
directive|define
name|COMMAND_QMLREADONLY
value|Doc::alias("readonly")
DECL|macro|COMMAND_QMLBASICTYPE
define|#
directive|define
name|COMMAND_QMLBASICTYPE
value|Doc::alias("qmlbasictype")
DECL|macro|COMMAND_QMLMODULE
define|#
directive|define
name|COMMAND_QMLMODULE
value|Doc::alias("qmlmodule")
comment|/*!   Constructs the QML code parser.  */
DECL|function|QmlCodeParser
name|QmlCodeParser
operator|::
name|QmlCodeParser
parameter_list|()
block|{ }
end_function
begin_comment
comment|/*!   Destroys the QML code parser.  */
end_comment
begin_destructor
DECL|function|~QmlCodeParser
name|QmlCodeParser
operator|::
name|~
name|QmlCodeParser
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!   Initializes the code parser base class. The \a config argument   is passed to the initialization functions in the base class.    Also creates a lexer and parser from QQmlJS.  */
end_comment
begin_function
DECL|function|initializeParser
name|void
name|QmlCodeParser
operator|::
name|initializeParser
parameter_list|(
specifier|const
name|Config
modifier|&
name|config
parameter_list|)
block|{
name|CodeParser
operator|::
name|initializeParser
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|lexer
operator|=
operator|new
name|QQmlJS
operator|::
name|Lexer
argument_list|(
operator|&
name|engine
argument_list|)
expr_stmt|;
name|parser
operator|=
operator|new
name|QQmlJS
operator|::
name|Parser
argument_list|(
operator|&
name|engine
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Terminates the QML code parser. Deletes the lexer and parser   created by the constructor.  */
end_comment
begin_function
DECL|function|terminateParser
name|void
name|QmlCodeParser
operator|::
name|terminateParser
parameter_list|()
block|{
operator|delete
name|lexer
expr_stmt|;
operator|delete
name|parser
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns "QML".  */
end_comment
begin_function
DECL|function|language
name|QString
name|QmlCodeParser
operator|::
name|language
parameter_list|()
block|{
return|return
literal|"QML"
return|;
block|}
end_function
begin_comment
comment|/*!   Returns a string list containing "*.qml". This is the only   file type parsed by the QMLN parser.  */
end_comment
begin_function
DECL|function|sourceFileNameFilter
name|QStringList
name|QmlCodeParser
operator|::
name|sourceFileNameFilter
parameter_list|()
block|{
return|return
name|QStringList
argument_list|()
operator|<<
literal|"*.qml"
return|;
block|}
end_function
begin_comment
comment|/*!   Parses the source file at \a filePath and inserts the contents   into the database. The \a location is used for error reporting.    If it can't open the file at \a filePath, it reports an error   and returns without doing anything.  */
end_comment
begin_function
DECL|function|parseSourceFile
name|void
name|QmlCodeParser
operator|::
name|parseSourceFile
parameter_list|(
specifier|const
name|Location
modifier|&
name|location
parameter_list|,
specifier|const
name|QString
modifier|&
name|filePath
parameter_list|)
block|{
name|QFile
name|in
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|currentFile_
operator|=
name|filePath
expr_stmt|;
if|if
condition|(
operator|!
name|in
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|location
operator|.
name|error
argument_list|(
name|tr
argument_list|(
literal|"Cannot open QML file '%1'"
argument_list|)
operator|.
name|arg
argument_list|(
name|filePath
argument_list|)
argument_list|)
expr_stmt|;
name|currentFile_
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return;
block|}
name|createOutputSubdirectory
argument_list|(
name|location
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|QString
name|document
init|=
name|in
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|Location
name|fileLocation
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|QString
name|newCode
init|=
name|document
decl_stmt|;
name|extractPragmas
argument_list|(
name|newCode
argument_list|)
expr_stmt|;
name|lexer
operator|->
name|setCode
argument_list|(
name|newCode
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|topicCommandsAllowed
init|=
name|topicCommands
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|otherMetacommandsAllowed
init|=
name|otherMetaCommands
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|metacommandsAllowed
init|=
name|topicCommandsAllowed
operator|+
name|otherMetacommandsAllowed
decl_stmt|;
if|if
condition|(
name|parser
operator|->
name|parse
argument_list|()
condition|)
block|{
name|QQmlJS
operator|::
name|AST
operator|::
name|UiProgram
modifier|*
name|ast
init|=
name|parser
operator|->
name|ast
argument_list|()
decl_stmt|;
name|QmlDocVisitor
name|visitor
argument_list|(
name|filePath
argument_list|,
name|newCode
argument_list|,
operator|&
name|engine
argument_list|,
name|metacommandsAllowed
argument_list|,
name|topicCommandsAllowed
argument_list|)
decl_stmt|;
name|QQmlJS
operator|::
name|AST
operator|::
name|Node
operator|::
name|accept
argument_list|(
name|ast
argument_list|,
operator|&
name|visitor
argument_list|)
expr_stmt|;
block|}
foreach|foreach
control|(
specifier|const
name|QQmlJS
operator|::
name|DiagnosticMessage
modifier|&
name|msg
decl|,
name|parser
operator|->
name|diagnosticMessages
argument_list|()
control|)
block|{
name|qDebug
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|qPrintable
argument_list|(
name|filePath
argument_list|)
operator|<<
literal|':'
operator|<<
name|msg
operator|.
name|loc
operator|.
name|startLine
operator|<<
literal|": QML syntax error at col "
operator|<<
name|msg
operator|.
name|loc
operator|.
name|startColumn
operator|<<
literal|": "
operator|<<
name|qPrintable
argument_list|(
name|msg
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
name|currentFile_
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Performs cleanup after qdoc is done parsing all the QML files.   Currently, no cleanup is required.  */
end_comment
begin_function
DECL|function|doneParsingSourceFiles
name|void
name|QmlCodeParser
operator|::
name|doneParsingSourceFiles
parameter_list|()
block|{ }
end_function
begin_comment
comment|/*!   Returns the set of strings representing the topic commands.  */
end_comment
begin_function
DECL|function|topicCommands
name|QSet
argument_list|<
name|QString
argument_list|>
name|QmlCodeParser
operator|::
name|topicCommands
parameter_list|()
block|{
return|return
name|QSet
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
name|COMMAND_VARIABLE
operator|<<
name|COMMAND_QMLCLASS
operator|<<
name|COMMAND_QMLTYPE
operator|<<
name|COMMAND_QMLPROPERTY
operator|<<
name|COMMAND_QMLATTACHEDPROPERTY
operator|<<
name|COMMAND_QMLSIGNAL
operator|<<
name|COMMAND_QMLATTACHEDSIGNAL
operator|<<
name|COMMAND_QMLMETHOD
operator|<<
name|COMMAND_QMLATTACHEDMETHOD
operator|<<
name|COMMAND_QMLBASICTYPE
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the set of strings representing the common metacommands   plus some other metacommands.  */
end_comment
begin_function
DECL|function|otherMetaCommands
name|QSet
argument_list|<
name|QString
argument_list|>
name|QmlCodeParser
operator|::
name|otherMetaCommands
parameter_list|()
block|{
return|return
name|commonMetaCommands
argument_list|()
operator|<<
name|COMMAND_STARTPAGE
operator|<<
name|COMMAND_QMLINHERITS
operator|<<
name|COMMAND_QMLDEFAULT
operator|<<
name|COMMAND_QMLREADONLY
operator|<<
name|COMMAND_DEPRECATED
operator|<<
name|COMMAND_INGROUP
operator|<<
name|COMMAND_INTERNAL
operator|<<
name|COMMAND_OBSOLETE
operator|<<
name|COMMAND_PRELIMINARY
operator|<<
name|COMMAND_SINCE
operator|<<
name|COMMAND_QMLABSTRACT
operator|<<
name|COMMAND_INQMLMODULE
return|;
block|}
end_function
begin_comment
comment|/*!   Copy and paste from src/declarative/qml/qdeclarativescriptparser.cpp.   This function blanks out the section of the \a str beginning at \a idx   and running for \a n characters. */
end_comment
begin_function
DECL|function|replaceWithSpace
specifier|static
name|void
name|replaceWithSpace
parameter_list|(
name|QString
modifier|&
name|str
parameter_list|,
name|int
name|idx
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|QChar
modifier|*
name|data
init|=
name|str
operator|.
name|data
argument_list|()
operator|+
name|idx
decl_stmt|;
specifier|const
name|QChar
name|space
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|n
condition|;
operator|++
name|ii
control|)
operator|*
name|data
operator|++
operator|=
name|space
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Copy& paste from src/declarative/qml/qdeclarativescriptparser.cpp,   then modified to return no values.    Searches for ".pragma<value>" declarations within \a script.   Currently supported pragmas are: library */
end_comment
begin_function
DECL|function|extractPragmas
name|void
name|QmlCodeParser
operator|::
name|extractPragmas
parameter_list|(
name|QString
modifier|&
name|script
parameter_list|)
block|{
specifier|const
name|QString
name|pragma
argument_list|(
name|QLatin1String
argument_list|(
literal|"pragma"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|library
argument_list|(
name|QLatin1String
argument_list|(
literal|"library"
argument_list|)
argument_list|)
decl_stmt|;
name|QQmlJS
operator|::
name|Lexer
name|l
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|l
operator|.
name|setCode
argument_list|(
name|script
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|token
init|=
name|l
operator|.
name|lex
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|token
operator|!=
name|QQmlJSGrammar
operator|::
name|T_DOT
condition|)
return|return;
name|int
name|startOffset
init|=
name|l
operator|.
name|tokenOffset
argument_list|()
decl_stmt|;
name|int
name|startLine
init|=
name|l
operator|.
name|tokenStartLine
argument_list|()
decl_stmt|;
name|token
operator|=
name|l
operator|.
name|lex
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|!=
name|QQmlJSGrammar
operator|::
name|T_IDENTIFIER
operator|||
name|l
operator|.
name|tokenStartLine
argument_list|()
operator|!=
name|startLine
operator|||
name|script
operator|.
name|mid
argument_list|(
name|l
operator|.
name|tokenOffset
argument_list|()
argument_list|,
name|l
operator|.
name|tokenLength
argument_list|()
argument_list|)
operator|!=
name|pragma
condition|)
return|return;
name|token
operator|=
name|l
operator|.
name|lex
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|!=
name|QQmlJSGrammar
operator|::
name|T_IDENTIFIER
operator|||
name|l
operator|.
name|tokenStartLine
argument_list|()
operator|!=
name|startLine
condition|)
return|return;
name|QString
name|pragmaValue
init|=
name|script
operator|.
name|mid
argument_list|(
name|l
operator|.
name|tokenOffset
argument_list|()
argument_list|,
name|l
operator|.
name|tokenLength
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|endOffset
init|=
name|l
operator|.
name|tokenLength
argument_list|()
operator|+
name|l
operator|.
name|tokenOffset
argument_list|()
decl_stmt|;
name|token
operator|=
name|l
operator|.
name|lex
argument_list|()
expr_stmt|;
if|if
condition|(
name|l
operator|.
name|tokenStartLine
argument_list|()
operator|==
name|startLine
condition|)
return|return;
if|if
condition|(
name|pragmaValue
operator|==
name|QLatin1String
argument_list|(
literal|"library"
argument_list|)
condition|)
name|replaceWithSpace
argument_list|(
name|script
argument_list|,
name|startOffset
argument_list|,
name|endOffset
operator|-
name|startOffset
argument_list|)
expr_stmt|;
else|else
return|return;
block|}
return|return;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
