begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*   pagegenerator.h */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PAGEGENERATOR_H
end_ifndef
begin_define
DECL|macro|PAGEGENERATOR_H
define|#
directive|define
name|PAGEGENERATOR_H
end_define
begin_include
include|#
directive|include
file|<QStack>
end_include
begin_include
include|#
directive|include
file|<qtextstream.h>
end_include
begin_include
include|#
directive|include
file|"generator.h"
end_include
begin_include
include|#
directive|include
file|"location.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QTextCodec
name|class
name|QTextCodec
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ClassNode
name|class
name|ClassNode
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|InnerNode
name|class
name|InnerNode
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|NamespaceNode
name|class
name|NamespaceNode
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|NameCollisionNode
name|class
name|NameCollisionNode
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|PageGenerator
range|:
name|public
name|Generator
block|{
name|public
operator|:
name|PageGenerator
argument_list|()
block|;
operator|~
name|PageGenerator
argument_list|()
block|;
name|virtual
name|void
name|generateTree
argument_list|(
specifier|const
name|Tree
operator|*
name|tree
argument_list|)
block|;
name|virtual
name|void
name|generateDisambiguationPages
argument_list|()
block|{ }
name|protected
operator|:
name|virtual
name|QString
name|fileBase
argument_list|(
argument|const Node* node
argument_list|)
specifier|const
block|;
name|virtual
name|QString
name|fileExtension
argument_list|(
argument|const Node* node
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|QString
name|fileName
argument_list|(
argument|const Node* node
argument_list|)
specifier|const
block|;
name|QString
name|outFileName
argument_list|()
block|;
name|virtual
name|void
name|beginSubPage
argument_list|(
specifier|const
name|InnerNode
operator|*
name|node
argument_list|,
specifier|const
name|QString
operator|&
name|fileName
argument_list|)
block|;
name|virtual
name|void
name|endSubPage
argument_list|()
block|;
name|virtual
name|void
name|generateInnerNode
argument_list|(
specifier|const
name|InnerNode
operator|*
name|node
argument_list|)
block|;
name|QTextStream
operator|&
name|out
argument_list|()
block|;
name|QString
name|naturalLanguage
block|;
name|QString
name|outputEncoding
block|;
name|QTextCodec
operator|*
name|outputCodec
block|;
name|bool
name|parseArg
argument_list|(
argument|const QString& src
argument_list|,
argument|const QString& tag
argument_list|,
argument|int* pos
argument_list|,
argument|int n
argument_list|,
argument|QStringRef* contents
argument_list|,
argument|QStringRef* par1 =
literal|0
argument_list|,
argument|bool debug = false
argument_list|)
block|;
name|protected
operator|:
name|QStack
operator|<
name|QTextStream
operator|*
operator|>
name|outStreamStack
block|;
name|QList
operator|<
name|NameCollisionNode
operator|*
operator|>
name|collisionNodes
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
