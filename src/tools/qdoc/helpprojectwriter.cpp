begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QHash>
end_include
begin_include
include|#
directive|include
file|<QMap>
end_include
begin_include
include|#
directive|include
file|"atom.h"
end_include
begin_include
include|#
directive|include
file|"helpprojectwriter.h"
end_include
begin_include
include|#
directive|include
file|"htmlgenerator.h"
end_include
begin_include
include|#
directive|include
file|"config.h"
end_include
begin_include
include|#
directive|include
file|"node.h"
end_include
begin_include
include|#
directive|include
file|"tree.h"
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|HelpProjectWriter
name|HelpProjectWriter
operator|::
name|HelpProjectWriter
parameter_list|(
specifier|const
name|Config
modifier|&
name|config
parameter_list|,
specifier|const
name|QString
modifier|&
name|defaultFileName
parameter_list|)
block|{
comment|// The output directory should already have been checked by the calling
comment|// generator.
name|outputDir
operator|=
name|config
operator|.
name|getOutputDir
argument_list|()
expr_stmt|;
name|QStringList
name|names
init|=
name|config
operator|.
name|getStringList
argument_list|(
name|CONFIG_QHP
operator|+
name|Config
operator|::
name|dot
operator|+
literal|"projects"
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|projectName
decl|,
name|names
control|)
block|{
name|HelpProject
name|project
decl_stmt|;
name|project
operator|.
name|name
operator|=
name|projectName
expr_stmt|;
name|QString
name|prefix
init|=
name|CONFIG_QHP
operator|+
name|Config
operator|::
name|dot
operator|+
name|projectName
operator|+
name|Config
operator|::
name|dot
decl_stmt|;
name|project
operator|.
name|helpNamespace
operator|=
name|config
operator|.
name|getString
argument_list|(
name|prefix
operator|+
literal|"namespace"
argument_list|)
expr_stmt|;
name|project
operator|.
name|virtualFolder
operator|=
name|config
operator|.
name|getString
argument_list|(
name|prefix
operator|+
literal|"virtualFolder"
argument_list|)
expr_stmt|;
name|project
operator|.
name|fileName
operator|=
name|config
operator|.
name|getString
argument_list|(
name|prefix
operator|+
literal|"file"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|.
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
name|project
operator|.
name|fileName
operator|=
name|defaultFileName
expr_stmt|;
name|project
operator|.
name|extraFiles
operator|=
name|config
operator|.
name|getStringSet
argument_list|(
name|prefix
operator|+
literal|"extraFiles"
argument_list|)
expr_stmt|;
name|project
operator|.
name|indexTitle
operator|=
name|config
operator|.
name|getString
argument_list|(
name|prefix
operator|+
literal|"indexTitle"
argument_list|)
expr_stmt|;
name|project
operator|.
name|indexRoot
operator|=
name|config
operator|.
name|getString
argument_list|(
name|prefix
operator|+
literal|"indexRoot"
argument_list|)
expr_stmt|;
name|project
operator|.
name|filterAttributes
operator|=
name|config
operator|.
name|getStringList
argument_list|(
name|prefix
operator|+
literal|"filterAttributes"
argument_list|)
operator|.
name|toSet
argument_list|()
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|customFilterNames
init|=
name|config
operator|.
name|subVars
argument_list|(
name|prefix
operator|+
literal|"customFilters"
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|filterName
decl|,
name|customFilterNames
control|)
block|{
name|QString
name|name
init|=
name|config
operator|.
name|getString
argument_list|(
name|prefix
operator|+
literal|"customFilters"
operator|+
name|Config
operator|::
name|dot
operator|+
name|filterName
operator|+
name|Config
operator|::
name|dot
operator|+
literal|"name"
argument_list|)
decl_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|filters
init|=
name|config
operator|.
name|getStringList
argument_list|(
name|prefix
operator|+
literal|"customFilters"
operator|+
name|Config
operator|::
name|dot
operator|+
name|filterName
operator|+
name|Config
operator|::
name|dot
operator|+
literal|"filterAttributes"
argument_list|)
operator|.
name|toSet
argument_list|()
decl_stmt|;
name|project
operator|.
name|customFilters
index|[
name|name
index|]
operator|=
name|filters
expr_stmt|;
block|}
comment|//customFilters = config.defs.
foreach|foreach
control|(
name|QString
name|name
decl|,
name|config
operator|.
name|getStringSet
argument_list|(
name|prefix
operator|+
literal|"excluded"
argument_list|)
control|)
name|project
operator|.
name|excluded
operator|.
name|insert
argument_list|(
name|name
operator|.
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|name
decl|,
name|config
operator|.
name|getStringList
argument_list|(
name|prefix
operator|+
literal|"subprojects"
argument_list|)
control|)
block|{
name|SubProject
name|subproject
decl_stmt|;
name|QString
name|subprefix
init|=
name|prefix
operator|+
literal|"subprojects"
operator|+
name|Config
operator|::
name|dot
operator|+
name|name
operator|+
name|Config
operator|::
name|dot
decl_stmt|;
name|subproject
operator|.
name|title
operator|=
name|config
operator|.
name|getString
argument_list|(
name|subprefix
operator|+
literal|"title"
argument_list|)
expr_stmt|;
name|subproject
operator|.
name|indexTitle
operator|=
name|config
operator|.
name|getString
argument_list|(
name|subprefix
operator|+
literal|"indexTitle"
argument_list|)
expr_stmt|;
name|subproject
operator|.
name|sortPages
operator|=
name|config
operator|.
name|getBool
argument_list|(
name|subprefix
operator|+
literal|"sortPages"
argument_list|)
expr_stmt|;
name|subproject
operator|.
name|type
operator|=
name|config
operator|.
name|getString
argument_list|(
name|subprefix
operator|+
literal|"type"
argument_list|)
expr_stmt|;
name|readSelectors
argument_list|(
name|subproject
argument_list|,
name|config
operator|.
name|getStringList
argument_list|(
name|subprefix
operator|+
literal|"selectors"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|.
name|subprojects
index|[
name|name
index|]
operator|=
name|subproject
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|.
name|subprojects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SubProject
name|subproject
decl_stmt|;
name|readSelectors
argument_list|(
name|subproject
argument_list|,
name|config
operator|.
name|getStringList
argument_list|(
name|prefix
operator|+
literal|"selectors"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|.
name|subprojects
index|[
literal|""
index|]
operator|=
name|subproject
expr_stmt|;
block|}
name|projects
operator|.
name|append
argument_list|(
name|project
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|readSelectors
name|void
name|HelpProjectWriter
operator|::
name|readSelectors
parameter_list|(
name|SubProject
modifier|&
name|subproject
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|selectors
parameter_list|)
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|Node
operator|::
name|Type
argument_list|>
name|typeHash
decl_stmt|;
name|typeHash
index|[
literal|"namespace"
index|]
operator|=
name|Node
operator|::
name|Namespace
expr_stmt|;
name|typeHash
index|[
literal|"class"
index|]
operator|=
name|Node
operator|::
name|Class
expr_stmt|;
name|typeHash
index|[
literal|"fake"
index|]
operator|=
name|Node
operator|::
name|Fake
expr_stmt|;
name|typeHash
index|[
literal|"enum"
index|]
operator|=
name|Node
operator|::
name|Enum
expr_stmt|;
name|typeHash
index|[
literal|"typedef"
index|]
operator|=
name|Node
operator|::
name|Typedef
expr_stmt|;
name|typeHash
index|[
literal|"function"
index|]
operator|=
name|Node
operator|::
name|Function
expr_stmt|;
name|typeHash
index|[
literal|"property"
index|]
operator|=
name|Node
operator|::
name|Property
expr_stmt|;
name|typeHash
index|[
literal|"variable"
index|]
operator|=
name|Node
operator|::
name|Variable
expr_stmt|;
name|typeHash
index|[
literal|"qmlproperty"
index|]
operator|=
name|Node
operator|::
name|QmlProperty
expr_stmt|;
name|typeHash
index|[
literal|"qmlsignal"
index|]
operator|=
name|Node
operator|::
name|QmlSignal
expr_stmt|;
name|typeHash
index|[
literal|"qmlsignalhandler"
index|]
operator|=
name|Node
operator|::
name|QmlSignalHandler
expr_stmt|;
name|typeHash
index|[
literal|"qmlmethod"
index|]
operator|=
name|Node
operator|::
name|QmlMethod
expr_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|Node
operator|::
name|SubType
argument_list|>
name|subTypeHash
decl_stmt|;
name|subTypeHash
index|[
literal|"example"
index|]
operator|=
name|Node
operator|::
name|Example
expr_stmt|;
name|subTypeHash
index|[
literal|"headerfile"
index|]
operator|=
name|Node
operator|::
name|HeaderFile
expr_stmt|;
name|subTypeHash
index|[
literal|"file"
index|]
operator|=
name|Node
operator|::
name|File
expr_stmt|;
name|subTypeHash
index|[
literal|"group"
index|]
operator|=
name|Node
operator|::
name|Group
expr_stmt|;
name|subTypeHash
index|[
literal|"module"
index|]
operator|=
name|Node
operator|::
name|Module
expr_stmt|;
name|subTypeHash
index|[
literal|"page"
index|]
operator|=
name|Node
operator|::
name|Page
expr_stmt|;
name|subTypeHash
index|[
literal|"externalpage"
index|]
operator|=
name|Node
operator|::
name|ExternalPage
expr_stmt|;
name|subTypeHash
index|[
literal|"qmlclass"
index|]
operator|=
name|Node
operator|::
name|QmlClass
expr_stmt|;
name|subTypeHash
index|[
literal|"qmlpropertygroup"
index|]
operator|=
name|Node
operator|::
name|QmlPropertyGroup
expr_stmt|;
name|subTypeHash
index|[
literal|"qmlbasictype"
index|]
operator|=
name|Node
operator|::
name|QmlBasicType
expr_stmt|;
name|QSet
argument_list|<
name|Node
operator|::
name|SubType
argument_list|>
name|allSubTypes
init|=
name|QSet
argument_list|<
name|Node
operator|::
name|SubType
argument_list|>
operator|::
name|fromList
argument_list|(
name|subTypeHash
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|selector
decl|,
name|selectors
control|)
block|{
name|QStringList
name|pieces
init|=
name|selector
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pieces
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|QString
name|lower
init|=
name|selector
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeHash
operator|.
name|contains
argument_list|(
name|lower
argument_list|)
condition|)
name|subproject
operator|.
name|selectors
index|[
name|typeHash
index|[
name|lower
index|]
index|]
operator|=
name|allSubTypes
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pieces
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|QString
name|lower
init|=
name|pieces
index|[
literal|0
index|]
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|pieces
operator|=
name|pieces
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|typeHash
operator|.
name|contains
argument_list|(
name|lower
argument_list|)
condition|)
block|{
name|QSet
argument_list|<
name|Node
operator|::
name|SubType
argument_list|>
name|subTypes
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pieces
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|lower
init|=
name|pieces
index|[
name|i
index|]
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|subTypeHash
operator|.
name|contains
argument_list|(
name|lower
argument_list|)
condition|)
name|subTypes
operator|.
name|insert
argument_list|(
name|subTypeHash
index|[
name|lower
index|]
argument_list|)
expr_stmt|;
block|}
name|subproject
operator|.
name|selectors
index|[
name|typeHash
index|[
name|lower
index|]
index|]
operator|=
name|subTypes
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|addExtraFile
name|void
name|HelpProjectWriter
operator|::
name|addExtraFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|projects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|projects
index|[
name|i
index|]
operator|.
name|extraFiles
operator|.
name|insert
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addExtraFiles
name|void
name|HelpProjectWriter
operator|::
name|addExtraFiles
parameter_list|(
specifier|const
name|QSet
argument_list|<
name|QString
argument_list|>
modifier|&
name|files
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|projects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|projects
index|[
name|i
index|]
operator|.
name|extraFiles
operator|.
name|unite
argument_list|(
name|files
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Returns a list of strings describing the keyword details for a given node.      The first string is the human-readable name to be shown in Assistant.     The second string is a unique identifier.     The third string is the location of the documentation for the keyword. */
end_comment
begin_function
DECL|function|keywordDetails
name|QStringList
name|HelpProjectWriter
operator|::
name|keywordDetails
parameter_list|(
specifier|const
name|Node
modifier|*
name|node
parameter_list|)
specifier|const
block|{
name|QStringList
name|details
decl_stmt|;
if|if
condition|(
name|node
operator|->
name|type
argument_list|()
operator|==
name|Node
operator|::
name|QmlProperty
condition|)
block|{
comment|// "name"
name|details
operator|<<
name|node
operator|->
name|name
argument_list|()
expr_stmt|;
comment|// "id"
name|details
operator|<<
name|node
operator|->
name|parent
argument_list|()
operator|->
name|parent
argument_list|()
operator|->
name|name
argument_list|()
operator|+
literal|"::"
operator|+
name|node
operator|->
name|name
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|->
name|parent
argument_list|()
operator|&&
operator|!
name|node
operator|->
name|parent
argument_list|()
operator|->
name|name
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// "name"
if|if
condition|(
name|node
operator|->
name|type
argument_list|()
operator|==
name|Node
operator|::
name|Enum
operator|||
name|node
operator|->
name|type
argument_list|()
operator|==
name|Node
operator|::
name|Typedef
condition|)
name|details
operator|<<
name|node
operator|->
name|parent
argument_list|()
operator|->
name|name
argument_list|()
operator|+
literal|"::"
operator|+
name|node
operator|->
name|name
argument_list|()
expr_stmt|;
else|else
name|details
operator|<<
name|node
operator|->
name|name
argument_list|()
expr_stmt|;
comment|// "id"
name|details
operator|<<
name|node
operator|->
name|parent
argument_list|()
operator|->
name|name
argument_list|()
operator|+
literal|"::"
operator|+
name|node
operator|->
name|name
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|->
name|type
argument_list|()
operator|==
name|Node
operator|::
name|Fake
condition|)
block|{
specifier|const
name|FakeNode
modifier|*
name|fake
init|=
cast|static_cast
argument_list|<
specifier|const
name|FakeNode
operator|*
argument_list|>
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|fake
operator|->
name|subType
argument_list|()
operator|==
name|Node
operator|::
name|QmlClass
condition|)
block|{
name|details
operator|<<
operator|(
name|QmlClassNode
operator|::
name|qmlOnly
condition|?
name|fake
operator|->
name|name
argument_list|()
else|:
name|fake
operator|->
name|fullTitle
argument_list|()
operator|)
expr_stmt|;
name|details
operator|<<
literal|"QML."
operator|+
name|fake
operator|->
name|name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|details
operator|<<
name|fake
operator|->
name|fullTitle
argument_list|()
expr_stmt|;
name|details
operator|<<
name|fake
operator|->
name|fullTitle
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|details
operator|<<
name|node
operator|->
name|name
argument_list|()
expr_stmt|;
name|details
operator|<<
name|node
operator|->
name|name
argument_list|()
expr_stmt|;
block|}
name|details
operator|<<
name|Generator
operator|::
name|fullDocumentLocation
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|details
return|;
block|}
end_function
begin_function
DECL|function|generateSection
name|bool
name|HelpProjectWriter
operator|::
name|generateSection
parameter_list|(
name|HelpProject
modifier|&
name|project
parameter_list|,
name|QXmlStreamWriter
modifier|&
comment|/* writer */
parameter_list|,
specifier|const
name|Node
modifier|*
name|node
parameter_list|)
block|{
if|if
condition|(
operator|!
name|node
operator|->
name|url
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|node
operator|->
name|access
argument_list|()
operator|==
name|Node
operator|::
name|Private
operator|||
name|node
operator|->
name|status
argument_list|()
operator|==
name|Node
operator|::
name|Internal
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|node
operator|->
name|name
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
name|QString
name|docPath
init|=
name|node
operator|->
name|doc
argument_list|()
operator|.
name|location
argument_list|()
operator|.
name|filePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|docPath
operator|.
name|isEmpty
argument_list|()
operator|&&
name|project
operator|.
name|excluded
operator|.
name|contains
argument_list|(
name|docPath
argument_list|)
condition|)
return|return
literal|false
return|;
name|QString
name|objName
decl_stmt|;
if|if
condition|(
name|node
operator|->
name|type
argument_list|()
operator|==
name|Node
operator|::
name|Fake
condition|)
block|{
specifier|const
name|FakeNode
modifier|*
name|fake
init|=
cast|static_cast
argument_list|<
specifier|const
name|FakeNode
operator|*
argument_list|>
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|objName
operator|=
name|fake
operator|->
name|fullTitle
argument_list|()
expr_stmt|;
block|}
else|else
name|objName
operator|=
name|node
operator|->
name|fullDocumentName
argument_list|()
expr_stmt|;
comment|// Only add nodes to the set for each subproject if they match a selector.
comment|// Those that match will be listed in the table of contents.
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|name
decl|,
name|project
operator|.
name|subprojects
operator|.
name|keys
argument_list|()
control|)
block|{
name|SubProject
name|subproject
init|=
name|project
operator|.
name|subprojects
index|[
name|name
index|]
decl_stmt|;
comment|// No selectors: accept all nodes.
if|if
condition|(
name|subproject
operator|.
name|selectors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|project
operator|.
name|subprojects
index|[
name|name
index|]
operator|.
name|nodes
index|[
name|objName
index|]
operator|=
name|node
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subproject
operator|.
name|selectors
operator|.
name|contains
argument_list|(
name|node
operator|->
name|type
argument_list|()
argument_list|)
condition|)
block|{
comment|// Accept only the node types in the selectors hash.
if|if
condition|(
name|node
operator|->
name|type
argument_list|()
operator|!=
name|Node
operator|::
name|Fake
condition|)
name|project
operator|.
name|subprojects
index|[
name|name
index|]
operator|.
name|nodes
index|[
name|objName
index|]
operator|=
name|node
expr_stmt|;
else|else
block|{
comment|// Accept only fake nodes with subtypes contained in the selector's
comment|// mask.
specifier|const
name|FakeNode
modifier|*
name|fakeNode
init|=
cast|static_cast
argument_list|<
specifier|const
name|FakeNode
operator|*
argument_list|>
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|subproject
operator|.
name|selectors
index|[
name|node
operator|->
name|type
argument_list|()
index|]
operator|.
name|contains
argument_list|(
name|fakeNode
operator|->
name|subType
argument_list|()
argument_list|)
operator|&&
name|fakeNode
operator|->
name|subType
argument_list|()
operator|!=
name|Node
operator|::
name|ExternalPage
operator|&&
operator|!
name|fakeNode
operator|->
name|fullTitle
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|project
operator|.
name|subprojects
index|[
name|name
index|]
operator|.
name|nodes
index|[
name|objName
index|]
operator|=
name|node
expr_stmt|;
block|}
block|}
block|}
block|}
switch|switch
condition|(
name|node
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|Node
operator|::
name|Class
case|:
name|project
operator|.
name|keywords
operator|.
name|append
argument_list|(
name|keywordDetails
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|.
name|files
operator|.
name|insert
argument_list|(
name|Generator
operator|::
name|fullDocumentLocation
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|::
name|Namespace
case|:
name|project
operator|.
name|keywords
operator|.
name|append
argument_list|(
name|keywordDetails
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|.
name|files
operator|.
name|insert
argument_list|(
name|Generator
operator|::
name|fullDocumentLocation
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|::
name|Enum
case|:
name|project
operator|.
name|keywords
operator|.
name|append
argument_list|(
name|keywordDetails
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|{
specifier|const
name|EnumNode
modifier|*
name|enumNode
init|=
cast|static_cast
argument_list|<
specifier|const
name|EnumNode
operator|*
argument_list|>
argument_list|(
name|node
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|EnumItem
modifier|&
name|item
decl|,
name|enumNode
operator|->
name|items
argument_list|()
control|)
block|{
name|QStringList
name|details
decl_stmt|;
if|if
condition|(
name|enumNode
operator|->
name|itemAccess
argument_list|(
name|item
operator|.
name|name
argument_list|()
argument_list|)
operator|==
name|Node
operator|::
name|Private
condition|)
continue|continue;
if|if
condition|(
operator|!
name|node
operator|->
name|parent
argument_list|()
operator|->
name|name
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|details
operator|<<
name|node
operator|->
name|parent
argument_list|()
operator|->
name|name
argument_list|()
operator|+
literal|"::"
operator|+
name|item
operator|.
name|name
argument_list|()
expr_stmt|;
comment|// "name"
name|details
operator|<<
name|node
operator|->
name|parent
argument_list|()
operator|->
name|name
argument_list|()
operator|+
literal|"::"
operator|+
name|item
operator|.
name|name
argument_list|()
expr_stmt|;
comment|// "id"
block|}
else|else
block|{
name|details
operator|<<
name|item
operator|.
name|name
argument_list|()
expr_stmt|;
comment|// "name"
name|details
operator|<<
name|item
operator|.
name|name
argument_list|()
expr_stmt|;
comment|// "id"
block|}
name|details
operator|<<
name|Generator
operator|::
name|fullDocumentLocation
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|project
operator|.
name|keywords
operator|.
name|append
argument_list|(
name|details
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|Node
operator|::
name|Property
case|:
case|case
name|Node
operator|::
name|QmlProperty
case|:
case|case
name|Node
operator|::
name|QmlSignal
case|:
case|case
name|Node
operator|::
name|QmlSignalHandler
case|:
case|case
name|Node
operator|::
name|QmlMethod
case|:
name|project
operator|.
name|keywords
operator|.
name|append
argument_list|(
name|keywordDetails
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|::
name|Function
case|:
block|{
specifier|const
name|FunctionNode
modifier|*
name|funcNode
init|=
cast|static_cast
argument_list|<
specifier|const
name|FunctionNode
operator|*
argument_list|>
argument_list|(
name|node
argument_list|)
decl_stmt|;
comment|// Only insert keywords for non-constructors. Constructors are covered
comment|// by the classes themselves.
if|if
condition|(
name|funcNode
operator|->
name|metaness
argument_list|()
operator|!=
name|FunctionNode
operator|::
name|Ctor
condition|)
name|project
operator|.
name|keywords
operator|.
name|append
argument_list|(
name|keywordDetails
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
comment|// Insert member status flags into the entries for the parent
comment|// node of the function, or the node it is related to.
comment|// Since parent nodes should have already been inserted into
comment|// the set of files, we only need to ensure that related nodes
comment|// are inserted.
if|if
condition|(
name|node
operator|->
name|relates
argument_list|()
condition|)
block|{
name|project
operator|.
name|memberStatus
index|[
name|node
operator|->
name|relates
argument_list|()
index|]
operator|.
name|insert
argument_list|(
name|node
operator|->
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|project
operator|.
name|files
operator|.
name|insert
argument_list|(
name|Generator
operator|::
name|fullDocumentLocation
argument_list|(
name|node
operator|->
name|relates
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|->
name|parent
argument_list|()
condition|)
name|project
operator|.
name|memberStatus
index|[
name|node
operator|->
name|parent
argument_list|()
index|]
operator|.
name|insert
argument_list|(
name|node
operator|->
name|status
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Node
operator|::
name|Typedef
case|:
block|{
specifier|const
name|TypedefNode
modifier|*
name|typedefNode
init|=
cast|static_cast
argument_list|<
specifier|const
name|TypedefNode
operator|*
argument_list|>
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|QStringList
name|typedefDetails
init|=
name|keywordDetails
argument_list|(
name|node
argument_list|)
decl_stmt|;
specifier|const
name|EnumNode
modifier|*
name|enumNode
init|=
name|typedefNode
operator|->
name|associatedEnum
argument_list|()
decl_stmt|;
comment|// Use the location of any associated enum node in preference
comment|// to that of the typedef.
if|if
condition|(
name|enumNode
condition|)
name|typedefDetails
index|[
literal|2
index|]
operator|=
name|Generator
operator|::
name|fullDocumentLocation
argument_list|(
name|enumNode
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|project
operator|.
name|keywords
operator|.
name|append
argument_list|(
name|typedefDetails
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Node
operator|::
name|Variable
case|:
block|{
name|QString
name|location
init|=
name|Generator
operator|::
name|fullDocumentLocation
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|project
operator|.
name|files
operator|.
name|insert
argument_list|(
name|location
operator|.
name|left
argument_list|(
name|location
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'#'
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|.
name|keywords
operator|.
name|append
argument_list|(
name|keywordDetails
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
comment|// Fake nodes (such as manual pages) contain subtypes, titles and other
comment|// attributes.
case|case
name|Node
operator|::
name|Fake
case|:
block|{
specifier|const
name|FakeNode
modifier|*
name|fakeNode
init|=
cast|static_cast
argument_list|<
specifier|const
name|FakeNode
operator|*
argument_list|>
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|fakeNode
operator|->
name|subType
argument_list|()
operator|!=
name|Node
operator|::
name|ExternalPage
operator|&&
operator|!
name|fakeNode
operator|->
name|fullTitle
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|fakeNode
operator|->
name|subType
argument_list|()
operator|!=
name|Node
operator|::
name|File
condition|)
block|{
if|if
condition|(
name|fakeNode
operator|->
name|doc
argument_list|()
operator|.
name|hasKeywords
argument_list|()
condition|)
block|{
foreach|foreach
control|(
specifier|const
name|Atom
modifier|*
name|keyword
decl|,
name|fakeNode
operator|->
name|doc
argument_list|()
operator|.
name|keywords
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|keyword
operator|->
name|string
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStringList
name|details
decl_stmt|;
name|details
operator|<<
name|keyword
operator|->
name|string
argument_list|()
operator|<<
name|keyword
operator|->
name|string
argument_list|()
operator|<<
name|Generator
operator|::
name|fullDocumentLocation
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'#'
argument_list|)
operator|+
name|Doc
operator|::
name|canonicalTitle
argument_list|(
name|keyword
operator|->
name|string
argument_list|()
argument_list|)
expr_stmt|;
name|project
operator|.
name|keywords
operator|.
name|append
argument_list|(
name|details
argument_list|)
expr_stmt|;
block|}
else|else
name|fakeNode
operator|->
name|doc
argument_list|()
operator|.
name|location
argument_list|()
operator|.
name|warning
argument_list|(
name|tr
argument_list|(
literal|"Bad keyword in %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|Generator
operator|::
name|fullDocumentLocation
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|project
operator|.
name|keywords
operator|.
name|append
argument_list|(
name|keywordDetails
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*                 if (fakeNode->doc().hasTableOfContents()) {                     foreach (const Atom *item, fakeNode->doc().tableOfContents()) {                         QString title = Text::sectionHeading(item).toString();                         if (!title.isEmpty()) {                             QStringList details;                             details<< title<< title<< HtmlGenerator::fullDocumentLocation(node,true) +                                     QLatin1Char('#') + Doc::canonicalTitle(title);                             project.keywords.append(details);                         } else                             fakeNode->doc().location().warning(                              tr("Bad contents item in %1").arg(HtmlGenerator::fullDocumentLocation(node,true)));                     }                 } */
name|project
operator|.
name|files
operator|.
name|insert
argument_list|(
name|Generator
operator|::
name|fullDocumentLocation
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
empty_stmt|;
block|}
comment|// Add all images referenced in the page to the set of files to include.
specifier|const
name|Atom
modifier|*
name|atom
init|=
name|node
operator|->
name|doc
argument_list|()
operator|.
name|body
argument_list|()
operator|.
name|firstAtom
argument_list|()
decl_stmt|;
while|while
condition|(
name|atom
condition|)
block|{
if|if
condition|(
name|atom
operator|->
name|type
argument_list|()
operator|==
name|Atom
operator|::
name|Image
operator|||
name|atom
operator|->
name|type
argument_list|()
operator|==
name|Atom
operator|::
name|InlineImage
condition|)
block|{
comment|// Images are all placed within a single directory regardless of
comment|// whether the source images are in a nested directory structure.
name|QStringList
name|pieces
init|=
name|atom
operator|->
name|string
argument_list|()
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
decl_stmt|;
name|project
operator|.
name|files
operator|.
name|insert
argument_list|(
literal|"images/"
operator|+
name|pieces
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|atom
operator|=
name|atom
operator|->
name|next
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|generateSections
name|void
name|HelpProjectWriter
operator|::
name|generateSections
parameter_list|(
name|HelpProject
modifier|&
name|project
parameter_list|,
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|Node
modifier|*
name|node
parameter_list|)
block|{
if|if
condition|(
operator|!
name|generateSection
argument_list|(
name|project
argument_list|,
name|writer
argument_list|,
name|node
argument_list|)
condition|)
return|return;
if|if
condition|(
name|node
operator|->
name|isInnerNode
argument_list|()
condition|)
block|{
specifier|const
name|InnerNode
modifier|*
name|inner
init|=
cast|static_cast
argument_list|<
specifier|const
name|InnerNode
operator|*
argument_list|>
argument_list|(
name|node
argument_list|)
decl_stmt|;
comment|// Ensure that we don't visit nodes more than once.
name|QMap
argument_list|<
name|QString
argument_list|,
specifier|const
name|Node
modifier|*
argument_list|>
name|childMap
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|Node
modifier|*
name|node
decl|,
name|inner
operator|->
name|childNodes
argument_list|()
control|)
block|{
if|if
condition|(
name|node
operator|->
name|access
argument_list|()
operator|==
name|Node
operator|::
name|Private
condition|)
continue|continue;
if|if
condition|(
name|node
operator|->
name|type
argument_list|()
operator|==
name|Node
operator|::
name|Fake
condition|)
block|{
comment|/*                   Don't visit QML property group nodes,                   but visit their children, which are all                   QML property nodes.                  */
if|if
condition|(
name|node
operator|->
name|subType
argument_list|()
operator|==
name|Node
operator|::
name|QmlPropertyGroup
condition|)
block|{
specifier|const
name|InnerNode
modifier|*
name|inner
init|=
cast|static_cast
argument_list|<
specifier|const
name|InnerNode
operator|*
argument_list|>
argument_list|(
name|node
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|Node
modifier|*
name|n
decl|,
name|inner
operator|->
name|childNodes
argument_list|()
control|)
block|{
if|if
condition|(
name|n
operator|->
name|access
argument_list|()
operator|==
name|Node
operator|::
name|Private
condition|)
continue|continue;
name|childMap
index|[
name|n
operator|->
name|fullDocumentName
argument_list|()
index|]
operator|=
name|n
expr_stmt|;
block|}
block|}
else|else
name|childMap
index|[
cast|static_cast
argument_list|<
specifier|const
name|FakeNode
operator|*
argument_list|>
argument_list|(
name|node
argument_list|)
operator|->
name|fullTitle
argument_list|()
index|]
operator|=
name|node
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|node
operator|->
name|type
argument_list|()
operator|==
name|Node
operator|::
name|Function
condition|)
block|{
specifier|const
name|FunctionNode
modifier|*
name|funcNode
init|=
cast|static_cast
argument_list|<
specifier|const
name|FunctionNode
operator|*
argument_list|>
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|funcNode
operator|->
name|isOverload
argument_list|()
condition|)
continue|continue;
block|}
name|childMap
index|[
name|node
operator|->
name|fullDocumentName
argument_list|()
index|]
operator|=
name|node
expr_stmt|;
block|}
block|}
foreach|foreach
control|(
specifier|const
name|Node
modifier|*
name|child
decl|,
name|childMap
control|)
name|generateSections
argument_list|(
name|project
argument_list|,
name|writer
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|generate
name|void
name|HelpProjectWriter
operator|::
name|generate
parameter_list|(
specifier|const
name|Tree
modifier|*
name|tre
parameter_list|)
block|{
name|this
operator|->
name|tree
operator|=
name|tre
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|projects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|generateProject
argument_list|(
name|projects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeNode
name|void
name|HelpProjectWriter
operator|::
name|writeNode
parameter_list|(
name|HelpProject
modifier|&
name|project
parameter_list|,
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|Node
modifier|*
name|node
parameter_list|)
block|{
name|QString
name|href
init|=
name|Generator
operator|::
name|fullDocumentLocation
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QString
name|objName
init|=
name|node
operator|->
name|name
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|node
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|Node
operator|::
name|Class
case|:
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"section"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"ref"
argument_list|,
name|href
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|->
name|parent
argument_list|()
operator|&&
operator|!
name|node
operator|->
name|parent
argument_list|()
operator|->
name|name
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"title"
argument_list|,
name|tr
argument_list|(
literal|"%1::%2 Class Reference"
argument_list|)
operator|.
name|arg
argument_list|(
name|node
operator|->
name|parent
argument_list|()
operator|->
name|name
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|objName
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"title"
argument_list|,
name|tr
argument_list|(
literal|"%1 Class Reference"
argument_list|)
operator|.
name|arg
argument_list|(
name|objName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Write subsections for all members, obsolete members and Qt 3
comment|// members.
if|if
condition|(
operator|!
name|project
operator|.
name|memberStatus
index|[
name|node
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|membersPath
init|=
name|href
operator|.
name|left
argument_list|(
name|href
operator|.
name|size
argument_list|()
operator|-
literal|5
argument_list|)
operator|+
literal|"-members.html"
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"section"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"ref"
argument_list|,
name|membersPath
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"title"
argument_list|,
name|tr
argument_list|(
literal|"List of all members"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// section
name|project
operator|.
name|files
operator|.
name|insert
argument_list|(
name|membersPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|.
name|memberStatus
index|[
name|node
index|]
operator|.
name|contains
argument_list|(
name|Node
operator|::
name|Compat
argument_list|)
condition|)
block|{
name|QString
name|compatPath
init|=
name|href
operator|.
name|left
argument_list|(
name|href
operator|.
name|size
argument_list|()
operator|-
literal|5
argument_list|)
operator|+
literal|"-compat.html"
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"section"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"ref"
argument_list|,
name|compatPath
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"title"
argument_list|,
name|tr
argument_list|(
literal|"Compatibility members"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// section
name|project
operator|.
name|files
operator|.
name|insert
argument_list|(
name|compatPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|.
name|memberStatus
index|[
name|node
index|]
operator|.
name|contains
argument_list|(
name|Node
operator|::
name|Obsolete
argument_list|)
condition|)
block|{
name|QString
name|obsoletePath
init|=
name|href
operator|.
name|left
argument_list|(
name|href
operator|.
name|size
argument_list|()
operator|-
literal|5
argument_list|)
operator|+
literal|"-obsolete.html"
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"section"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"ref"
argument_list|,
name|obsoletePath
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"title"
argument_list|,
name|tr
argument_list|(
literal|"Obsolete members"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// section
name|project
operator|.
name|files
operator|.
name|insert
argument_list|(
name|obsoletePath
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// section
break|break;
case|case
name|Node
operator|::
name|Namespace
case|:
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"section"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"ref"
argument_list|,
name|href
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"title"
argument_list|,
name|objName
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// section
break|break;
case|case
name|Node
operator|::
name|Fake
case|:
block|{
comment|// Fake nodes (such as manual pages) contain subtypes, titles and other
comment|// attributes.
specifier|const
name|FakeNode
modifier|*
name|fakeNode
init|=
cast|static_cast
argument_list|<
specifier|const
name|FakeNode
operator|*
argument_list|>
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"section"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"ref"
argument_list|,
name|href
argument_list|)
expr_stmt|;
if|if
condition|(
name|fakeNode
operator|->
name|subType
argument_list|()
operator|==
name|Node
operator|::
name|QmlClass
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"title"
argument_list|,
name|tr
argument_list|(
literal|"%1 Type Reference"
argument_list|)
operator|.
name|arg
argument_list|(
name|fakeNode
operator|->
name|fullTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"title"
argument_list|,
name|fakeNode
operator|->
name|fullTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|fakeNode
operator|->
name|subType
argument_list|()
operator|==
name|Node
operator|::
name|HeaderFile
operator|)
operator|||
operator|(
name|fakeNode
operator|->
name|subType
argument_list|()
operator|==
name|Node
operator|::
name|QmlClass
operator|)
condition|)
block|{
comment|// Write subsections for all members, obsolete members and Qt 3
comment|// members.
if|if
condition|(
operator|!
name|project
operator|.
name|memberStatus
index|[
name|node
index|]
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|fakeNode
operator|->
name|subType
argument_list|()
operator|==
name|Node
operator|::
name|QmlClass
operator|)
condition|)
block|{
name|QString
name|membersPath
init|=
name|href
operator|.
name|left
argument_list|(
name|href
operator|.
name|size
argument_list|()
operator|-
literal|5
argument_list|)
operator|+
literal|"-members.html"
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"section"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"ref"
argument_list|,
name|membersPath
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"title"
argument_list|,
name|tr
argument_list|(
literal|"List of all members"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// section
name|project
operator|.
name|files
operator|.
name|insert
argument_list|(
name|membersPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|.
name|memberStatus
index|[
name|node
index|]
operator|.
name|contains
argument_list|(
name|Node
operator|::
name|Compat
argument_list|)
condition|)
block|{
name|QString
name|compatPath
init|=
name|href
operator|.
name|left
argument_list|(
name|href
operator|.
name|size
argument_list|()
operator|-
literal|5
argument_list|)
operator|+
literal|"-compat.html"
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"section"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"ref"
argument_list|,
name|compatPath
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"title"
argument_list|,
name|tr
argument_list|(
literal|"Compatibility members"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// section
name|project
operator|.
name|files
operator|.
name|insert
argument_list|(
name|compatPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|.
name|memberStatus
index|[
name|node
index|]
operator|.
name|contains
argument_list|(
name|Node
operator|::
name|Obsolete
argument_list|)
condition|)
block|{
name|QString
name|obsoletePath
init|=
name|href
operator|.
name|left
argument_list|(
name|href
operator|.
name|size
argument_list|()
operator|-
literal|5
argument_list|)
operator|+
literal|"-obsolete.html"
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"section"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"ref"
argument_list|,
name|obsoletePath
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"title"
argument_list|,
name|tr
argument_list|(
literal|"Obsolete members"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// section
name|project
operator|.
name|files
operator|.
name|insert
argument_list|(
name|obsoletePath
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// section
block|}
break|break;
default|default:
empty_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|generateProject
name|void
name|HelpProjectWriter
operator|::
name|generateProject
parameter_list|(
name|HelpProject
modifier|&
name|project
parameter_list|)
block|{
specifier|const
name|Node
modifier|*
name|rootNode
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|.
name|indexRoot
operator|.
name|isEmpty
argument_list|()
condition|)
name|rootNode
operator|=
name|tree
operator|->
name|findFakeNodeByTitle
argument_list|(
name|project
operator|.
name|indexRoot
argument_list|)
expr_stmt|;
else|else
name|rootNode
operator|=
name|tree
operator|->
name|root
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|rootNode
condition|)
return|return;
name|project
operator|.
name|files
operator|.
name|clear
argument_list|()
expr_stmt|;
name|project
operator|.
name|keywords
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QFile
name|file
argument_list|(
name|outputDir
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|project
operator|.
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
condition|)
return|return;
name|QXmlStreamWriter
name|writer
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setAutoFormatting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartDocument
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"QtHelpProject"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"version"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
comment|// Write metaData, virtualFolder and namespace elements.
name|writer
operator|.
name|writeTextElement
argument_list|(
literal|"namespace"
argument_list|,
name|project
operator|.
name|helpNamespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeTextElement
argument_list|(
literal|"virtualFolder"
argument_list|,
name|project
operator|.
name|virtualFolder
argument_list|)
expr_stmt|;
comment|// Write customFilter elements.
name|QHash
argument_list|<
name|QString
argument_list|,
name|QSet
argument_list|<
name|QString
argument_list|>
argument_list|>
operator|::
name|ConstIterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|project
operator|.
name|customFilters
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|project
operator|.
name|customFilters
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"customFilter"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"name"
argument_list|,
name|it
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|filter
decl|,
name|it
operator|.
name|value
argument_list|()
control|)
name|writer
operator|.
name|writeTextElement
argument_list|(
literal|"filterAttribute"
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// customFilter
block|}
comment|// Start the filterSection.
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"filterSection"
argument_list|)
expr_stmt|;
comment|// Write filterAttribute elements.
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|filterName
decl|,
name|project
operator|.
name|filterAttributes
control|)
name|writer
operator|.
name|writeTextElement
argument_list|(
literal|"filterAttribute"
argument_list|,
name|filterName
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"toc"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"section"
argument_list|)
expr_stmt|;
specifier|const
name|Node
modifier|*
name|node
init|=
name|tree
operator|->
name|findFakeNodeByTitle
argument_list|(
name|project
operator|.
name|indexTitle
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|0
condition|)
name|node
operator|=
name|tree
operator|->
name|findNode
argument_list|(
name|QStringList
argument_list|(
literal|"index.html"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|indexPath
decl_stmt|;
if|if
condition|(
name|node
condition|)
name|indexPath
operator|=
name|Generator
operator|::
name|fullDocumentLocation
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|else
name|indexPath
operator|=
literal|"index.html"
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"ref"
argument_list|,
name|indexPath
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"title"
argument_list|,
name|project
operator|.
name|indexTitle
argument_list|)
expr_stmt|;
name|project
operator|.
name|files
operator|.
name|insert
argument_list|(
name|Generator
operator|::
name|fullDocumentLocation
argument_list|(
name|rootNode
argument_list|)
argument_list|)
expr_stmt|;
name|generateSections
argument_list|(
name|project
argument_list|,
name|writer
argument_list|,
name|rootNode
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|name
decl|,
name|project
operator|.
name|subprojects
operator|.
name|keys
argument_list|()
control|)
block|{
name|SubProject
name|subproject
init|=
name|project
operator|.
name|subprojects
index|[
name|name
index|]
decl_stmt|;
if|if
condition|(
name|subproject
operator|.
name|type
operator|==
name|QLatin1String
argument_list|(
literal|"manual"
argument_list|)
condition|)
block|{
specifier|const
name|FakeNode
modifier|*
name|indexPage
init|=
name|tree
operator|->
name|findFakeNodeByTitle
argument_list|(
name|subproject
operator|.
name|indexTitle
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexPage
condition|)
block|{
name|Text
name|indexBody
init|=
name|indexPage
operator|->
name|doc
argument_list|()
operator|.
name|body
argument_list|()
decl_stmt|;
specifier|const
name|Atom
modifier|*
name|atom
init|=
name|indexBody
operator|.
name|firstAtom
argument_list|()
decl_stmt|;
name|QStack
argument_list|<
name|int
argument_list|>
name|sectionStack
decl_stmt|;
name|bool
name|inItem
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|atom
condition|)
block|{
switch|switch
condition|(
name|atom
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|Atom
operator|::
name|ListLeft
case|:
name|sectionStack
operator|.
name|push
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|Atom
operator|::
name|ListRight
case|:
if|if
condition|(
name|sectionStack
operator|.
name|pop
argument_list|()
operator|>
literal|0
condition|)
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// section
break|break;
case|case
name|Atom
operator|::
name|ListItemLeft
case|:
name|inItem
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Atom
operator|::
name|ListItemRight
case|:
name|inItem
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|Atom
operator|::
name|Link
case|:
if|if
condition|(
name|inItem
condition|)
block|{
if|if
condition|(
name|sectionStack
operator|.
name|top
argument_list|()
operator|>
literal|0
condition|)
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// section
specifier|const
name|FakeNode
modifier|*
name|page
init|=
name|tree
operator|->
name|findFakeNodeByTitle
argument_list|(
name|atom
operator|->
name|string
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"section"
argument_list|)
expr_stmt|;
name|QString
name|indexPath
init|=
name|Generator
operator|::
name|fullDocumentLocation
argument_list|(
name|page
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"ref"
argument_list|,
name|indexPath
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"title"
argument_list|,
name|atom
operator|->
name|string
argument_list|()
argument_list|)
expr_stmt|;
name|project
operator|.
name|files
operator|.
name|insert
argument_list|(
name|indexPath
argument_list|)
expr_stmt|;
name|sectionStack
operator|.
name|top
argument_list|()
operator|+=
literal|1
expr_stmt|;
block|}
break|break;
default|default:
empty_stmt|;
block|}
if|if
condition|(
name|atom
operator|==
name|indexBody
operator|.
name|lastAtom
argument_list|()
condition|)
break|break;
name|atom
operator|=
name|atom
operator|->
name|next
argument_list|()
expr_stmt|;
block|}
block|}
else|else
name|rootNode
operator|->
name|doc
argument_list|()
operator|.
name|location
argument_list|()
operator|.
name|warning
argument_list|(
name|tr
argument_list|(
literal|"Failed to find index: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|subproject
operator|.
name|indexTitle
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"section"
argument_list|)
expr_stmt|;
name|QString
name|indexPath
init|=
name|Generator
operator|::
name|fullDocumentLocation
argument_list|(
name|tree
operator|->
name|findFakeNodeByTitle
argument_list|(
name|subproject
operator|.
name|indexTitle
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"ref"
argument_list|,
name|indexPath
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"title"
argument_list|,
name|subproject
operator|.
name|title
argument_list|)
expr_stmt|;
name|project
operator|.
name|files
operator|.
name|insert
argument_list|(
name|indexPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|subproject
operator|.
name|sortPages
condition|)
block|{
name|QStringList
name|titles
init|=
name|subproject
operator|.
name|nodes
operator|.
name|keys
argument_list|()
decl_stmt|;
name|titles
operator|.
name|sort
argument_list|()
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|title
decl|,
name|titles
control|)
block|{
name|writeNode
argument_list|(
name|project
argument_list|,
name|writer
argument_list|,
name|subproject
operator|.
name|nodes
index|[
name|title
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Find a contents node and navigate from there, using the NextLink values.
name|QSet
argument_list|<
name|QString
argument_list|>
name|visited
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|Node
modifier|*
name|node
decl|,
name|subproject
operator|.
name|nodes
control|)
block|{
name|QString
name|nextTitle
init|=
name|node
operator|->
name|links
argument_list|()
operator|.
name|value
argument_list|(
name|Node
operator|::
name|NextLink
argument_list|)
operator|.
name|first
decl_stmt|;
if|if
condition|(
operator|!
name|nextTitle
operator|.
name|isEmpty
argument_list|()
operator|&&
name|node
operator|->
name|links
argument_list|()
operator|.
name|value
argument_list|(
name|Node
operator|::
name|ContentsLink
argument_list|)
operator|.
name|first
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|FakeNode
modifier|*
name|nextPage
init|=
cast|const_cast
argument_list|<
name|FakeNode
operator|*
argument_list|>
argument_list|(
name|tree
operator|->
name|findFakeNodeByTitle
argument_list|(
name|nextTitle
argument_list|)
argument_list|)
decl_stmt|;
comment|// Write the contents node.
name|writeNode
argument_list|(
name|project
argument_list|,
name|writer
argument_list|,
name|node
argument_list|)
expr_stmt|;
while|while
condition|(
name|nextPage
condition|)
block|{
name|writeNode
argument_list|(
name|project
argument_list|,
name|writer
argument_list|,
name|nextPage
argument_list|)
expr_stmt|;
name|nextTitle
operator|=
name|nextPage
operator|->
name|links
argument_list|()
operator|.
name|value
argument_list|(
name|Node
operator|::
name|NextLink
argument_list|)
operator|.
name|first
expr_stmt|;
if|if
condition|(
name|nextTitle
operator|.
name|isEmpty
argument_list|()
operator|||
name|visited
operator|.
name|contains
argument_list|(
name|nextTitle
argument_list|)
condition|)
break|break;
name|nextPage
operator|=
cast|const_cast
argument_list|<
name|FakeNode
operator|*
argument_list|>
argument_list|(
name|tree
operator|->
name|findFakeNodeByTitle
argument_list|(
name|nextTitle
argument_list|)
argument_list|)
expr_stmt|;
name|visited
operator|.
name|insert
argument_list|(
name|nextTitle
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// section
block|}
block|}
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// section
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// toc
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"keywords"
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QStringList
modifier|&
name|details
decl|,
name|project
operator|.
name|keywords
control|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"keyword"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"name"
argument_list|,
name|details
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"id"
argument_list|,
name|details
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"ref"
argument_list|,
name|details
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|//keyword
block|}
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// keywords
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"files"
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|usedFile
decl|,
name|project
operator|.
name|files
control|)
block|{
if|if
condition|(
operator|!
name|usedFile
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeTextElement
argument_list|(
literal|"file"
argument_list|,
name|usedFile
argument_list|)
expr_stmt|;
block|}
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|usedFile
decl|,
name|project
operator|.
name|extraFiles
control|)
name|writer
operator|.
name|writeTextElement
argument_list|(
literal|"file"
argument_list|,
name|usedFile
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// files
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// filterSection
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// QtHelpProject
name|writer
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
