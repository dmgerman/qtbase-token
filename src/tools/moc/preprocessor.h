begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PREPROCESSOR_H
end_ifndef
begin_define
DECL|macro|PREPROCESSOR_H
define|#
directive|define
name|PREPROCESSOR_H
end_define
begin_include
include|#
directive|include
file|"parser.h"
end_include
begin_include
include|#
directive|include
file|<qlist.h>
end_include
begin_include
include|#
directive|include
file|<qset.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_struct
DECL|struct|Macro
struct|struct
name|Macro
block|{
DECL|function|Macro
name|Macro
argument_list|()
operator|:
name|isFunction
argument_list|(
name|false
argument_list|)
operator|,
name|isVariadic
argument_list|(
argument|false
argument_list|)
block|{}
DECL|member|isFunction
name|bool
name|isFunction
expr_stmt|;
DECL|member|isVariadic
name|bool
name|isVariadic
decl_stmt|;
DECL|member|arguments
name|Symbols
name|arguments
decl_stmt|;
DECL|member|symbols
name|Symbols
name|symbols
decl_stmt|;
block|}
struct|;
end_struct
begin_ifdef
ifdef|#
directive|ifdef
name|USE_LEXEM_STORE
end_ifdef
begin_typedef
DECL|typedef|MacroName
typedef|typedef
name|QByteArray
name|MacroName
typedef|;
end_typedef
begin_else
else|#
directive|else
end_else
begin_typedef
DECL|typedef|MacroName
typedef|typedef
name|SubArray
name|MacroName
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|MacroName
DECL|typedef|Macros
typedef|typedef
name|QHash
operator|<
name|MacroName
operator|,
name|Macro
operator|>
name|Macros
expr_stmt|;
end_typedef
begin_decl_stmt
DECL|variable|QIODevice
name|class
name|QIODevice
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Preprocessor
range|:
name|public
name|Parser
block|{
name|public
operator|:
name|Preprocessor
argument_list|()
block|{}
specifier|static
name|bool
name|preprocessOnly
block|;
name|QList
operator|<
name|QByteArray
operator|>
name|frameworks
block|;
name|QSet
operator|<
name|QByteArray
operator|>
name|preprocessedIncludes
block|;
name|Macros
name|macros
block|;
name|Symbols
name|preprocessed
argument_list|(
specifier|const
name|QByteArray
operator|&
name|filename
argument_list|,
name|FILE
operator|*
name|file
argument_list|)
block|;
name|Symbols
name|preprocessed
argument_list|(
specifier|const
name|QByteArray
operator|&
name|filename
argument_list|,
name|QIODevice
operator|*
name|device
argument_list|)
block|;
name|void
name|parseDefineArguments
argument_list|(
name|Macro
operator|*
name|m
argument_list|)
block|;
name|void
name|skipUntilEndif
argument_list|()
block|;
name|bool
name|skipBranch
argument_list|()
block|;
name|void
name|substituteUntilNewline
argument_list|(
name|Symbols
operator|&
name|substituted
argument_list|)
block|;
specifier|static
name|Symbols
name|macroExpandIdentifier
argument_list|(
argument|Preprocessor *that
argument_list|,
argument|SymbolStack&symbols
argument_list|,
argument|int lineNum
argument_list|,
argument|QByteArray *macroName
argument_list|)
block|;
specifier|static
name|Symbols
name|macroExpand
argument_list|(
argument|Preprocessor *that
argument_list|,
argument|Symbols&toExpand
argument_list|,
argument|int&index
argument_list|,
argument|int lineNum
argument_list|,
argument|bool one
argument_list|,
argument|const QSet<QByteArray>&excludeSymbols = QSet<QByteArray>()
argument_list|)
block|;
name|int
name|evaluateCondition
argument_list|()
block|;
name|private
operator|:
name|void
name|until
argument_list|(
name|Token
argument_list|)
block|;
name|void
name|preprocess
argument_list|(
specifier|const
name|QByteArray
operator|&
name|filename
argument_list|,
name|Symbols
operator|&
name|preprocessed
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// PREPROCESSOR_H
end_comment
end_unit
