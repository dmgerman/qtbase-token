begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PREPROCESSOR_H
end_ifndef
begin_define
DECL|macro|PREPROCESSOR_H
define|#
directive|define
name|PREPROCESSOR_H
end_define
begin_include
include|#
directive|include
file|"parser.h"
end_include
begin_include
include|#
directive|include
file|<qlist.h>
end_include
begin_include
include|#
directive|include
file|<qset.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_struct
DECL|struct|Macro
struct|struct
name|Macro
block|{
DECL|member|symbols
name|Symbols
name|symbols
decl_stmt|;
block|}
struct|;
end_struct
begin_ifdef
ifdef|#
directive|ifdef
name|USE_LEXEM_STORE
end_ifdef
begin_typedef
DECL|typedef|MacroName
typedef|typedef
name|QByteArray
name|MacroName
typedef|;
end_typedef
begin_else
else|#
directive|else
end_else
begin_typedef
DECL|typedef|MacroName
typedef|typedef
name|SubArray
name|MacroName
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|MacroName
DECL|typedef|Macros
typedef|typedef
name|QHash
operator|<
name|MacroName
operator|,
name|Macro
operator|>
name|Macros
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|MacroSafeSet
typedef|typedef
name|QVector
operator|<
name|MacroName
operator|>
name|MacroSafeSet
expr_stmt|;
end_typedef
begin_decl_stmt
DECL|variable|QIODevice
name|class
name|QIODevice
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Preprocessor
range|:
name|public
name|Parser
block|{
name|public
operator|:
name|Preprocessor
argument_list|()
block|{}
specifier|static
name|bool
name|preprocessOnly
block|;
name|QList
operator|<
name|QByteArray
operator|>
name|frameworks
block|;
name|QSet
operator|<
name|QByteArray
operator|>
name|preprocessedIncludes
block|;
name|Macros
name|macros
block|;
name|Symbols
name|preprocessed
argument_list|(
specifier|const
name|QByteArray
operator|&
name|filename
argument_list|,
name|FILE
operator|*
name|file
argument_list|)
block|;
name|Symbols
name|preprocessed
argument_list|(
specifier|const
name|QByteArray
operator|&
name|filename
argument_list|,
name|QIODevice
operator|*
name|device
argument_list|)
block|;
name|void
name|skipUntilEndif
argument_list|()
block|;
name|bool
name|skipBranch
argument_list|()
block|;
name|void
name|substituteMacro
argument_list|(
argument|const MacroName&macro
argument_list|,
argument|Symbols&substituted
argument_list|,
argument|MacroSafeSet safeset = MacroSafeSet()
argument_list|)
block|;
name|void
name|substituteUntilNewline
argument_list|(
argument|Symbols&substituted
argument_list|,
argument|MacroSafeSet safeset = MacroSafeSet()
argument_list|)
block|;
name|int
name|evaluateCondition
argument_list|()
block|;
name|private
operator|:
name|void
name|until
argument_list|(
name|Token
argument_list|)
block|;
name|void
name|preprocess
argument_list|(
specifier|const
name|QByteArray
operator|&
name|filename
argument_list|,
name|Symbols
operator|&
name|preprocessed
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// PREPROCESSOR_H
end_comment
end_unit
