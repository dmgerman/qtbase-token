begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"token.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_MOC
argument_list|)
DECL|function|tokenTypeName
specifier|const
name|char
modifier|*
name|tokenTypeName
parameter_list|(
name|Token
name|t
parameter_list|)
block|{
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|NOTOKEN
case|:
return|return
literal|"NOTOKEN"
return|;
case|case
name|IDENTIFIER
case|:
return|return
literal|"IDENTIFIER"
return|;
case|case
name|INTEGER_LITERAL
case|:
return|return
literal|"INTEGER_LITERAL"
return|;
case|case
name|CHARACTER_LITERAL
case|:
return|return
literal|"CHARACTER_LITERAL"
return|;
case|case
name|STRING_LITERAL
case|:
return|return
literal|"STRING_LITERAL"
return|;
case|case
name|BOOLEAN_LITERAL
case|:
return|return
literal|"BOOLEAN_LITERAL"
return|;
case|case
name|HEADER_NAME
case|:
return|return
literal|"HEADER_NAME"
return|;
case|case
name|LANGLE
case|:
return|return
literal|"LANGLE"
return|;
case|case
name|RANGLE
case|:
return|return
literal|"RANGLE"
return|;
case|case
name|LPAREN
case|:
return|return
literal|"LPAREN"
return|;
case|case
name|RPAREN
case|:
return|return
literal|"RPAREN"
return|;
case|case
name|ELIPSIS
case|:
return|return
literal|"ELIPSIS"
return|;
case|case
name|LBRACK
case|:
return|return
literal|"LBRACK"
return|;
case|case
name|RBRACK
case|:
return|return
literal|"RBRACK"
return|;
case|case
name|LBRACE
case|:
return|return
literal|"LBRACE"
return|;
case|case
name|RBRACE
case|:
return|return
literal|"RBRACE"
return|;
case|case
name|EQ
case|:
return|return
literal|"EQ"
return|;
case|case
name|SCOPE
case|:
return|return
literal|"SCOPE"
return|;
case|case
name|SEMIC
case|:
return|return
literal|"SEMIC"
return|;
case|case
name|COLON
case|:
return|return
literal|"COLON"
return|;
case|case
name|DOTSTAR
case|:
return|return
literal|"DOTSTAR"
return|;
case|case
name|QUESTION
case|:
return|return
literal|"QUESTION"
return|;
case|case
name|DOT
case|:
return|return
literal|"DOT"
return|;
case|case
name|DYNAMIC_CAST
case|:
return|return
literal|"DYNAMIC_CAST"
return|;
case|case
name|STATIC_CAST
case|:
return|return
literal|"STATIC_CAST"
return|;
case|case
name|REINTERPRET_CAST
case|:
return|return
literal|"REINTERPRET_CAST"
return|;
case|case
name|CONST_CAST
case|:
return|return
literal|"CONST_CAST"
return|;
case|case
name|TYPEID
case|:
return|return
literal|"TYPEID"
return|;
case|case
name|THIS
case|:
return|return
literal|"THIS"
return|;
case|case
name|TEMPLATE
case|:
return|return
literal|"TEMPLATE"
return|;
case|case
name|THROW
case|:
return|return
literal|"THROW"
return|;
case|case
name|TRY
case|:
return|return
literal|"TRY"
return|;
case|case
name|CATCH
case|:
return|return
literal|"CATCH"
return|;
case|case
name|TYPEDEF
case|:
return|return
literal|"TYPEDEF"
return|;
case|case
name|FRIEND
case|:
return|return
literal|"FRIEND"
return|;
case|case
name|CLASS
case|:
return|return
literal|"CLASS"
return|;
case|case
name|NAMESPACE
case|:
return|return
literal|"NAMESPACE"
return|;
case|case
name|ENUM
case|:
return|return
literal|"ENUM"
return|;
case|case
name|STRUCT
case|:
return|return
literal|"STRUCT"
return|;
case|case
name|UNION
case|:
return|return
literal|"UNION"
return|;
case|case
name|VIRTUAL
case|:
return|return
literal|"VIRTUAL"
return|;
case|case
name|PRIVATE
case|:
return|return
literal|"PRIVATE"
return|;
case|case
name|PROTECTED
case|:
return|return
literal|"PROTECTED"
return|;
case|case
name|PUBLIC
case|:
return|return
literal|"PUBLIC"
return|;
case|case
name|EXPORT
case|:
return|return
literal|"EXPORT"
return|;
case|case
name|AUTO
case|:
return|return
literal|"AUTO"
return|;
case|case
name|REGISTER
case|:
return|return
literal|"REGISTER"
return|;
case|case
name|EXTERN
case|:
return|return
literal|"EXTERN"
return|;
case|case
name|MUTABLE
case|:
return|return
literal|"MUTABLE"
return|;
case|case
name|ASM
case|:
return|return
literal|"ASM"
return|;
case|case
name|USING
case|:
return|return
literal|"USING"
return|;
case|case
name|INLINE
case|:
return|return
literal|"INLINE"
return|;
case|case
name|EXPLICIT
case|:
return|return
literal|"EXPLICIT"
return|;
case|case
name|STATIC
case|:
return|return
literal|"STATIC"
return|;
case|case
name|CONST
case|:
return|return
literal|"CONST"
return|;
case|case
name|VOLATILE
case|:
return|return
literal|"VOLATILE"
return|;
case|case
name|OPERATOR
case|:
return|return
literal|"OPERATOR"
return|;
case|case
name|SIZEOF
case|:
return|return
literal|"SIZEOF"
return|;
case|case
name|NEW
case|:
return|return
literal|"NEW"
return|;
case|case
name|DELETE
case|:
return|return
literal|"DELETE"
return|;
case|case
name|PLUS
case|:
return|return
literal|"PLUS"
return|;
case|case
name|MINUS
case|:
return|return
literal|"MINUS"
return|;
case|case
name|STAR
case|:
return|return
literal|"STAR"
return|;
case|case
name|SLASH
case|:
return|return
literal|"SLASH"
return|;
case|case
name|PERCENT
case|:
return|return
literal|"PERCENT"
return|;
case|case
name|HAT
case|:
return|return
literal|"HAT"
return|;
case|case
name|AND
case|:
return|return
literal|"AND"
return|;
case|case
name|OR
case|:
return|return
literal|"OR"
return|;
case|case
name|TILDE
case|:
return|return
literal|"TILDE"
return|;
case|case
name|NOT
case|:
return|return
literal|"NOT"
return|;
case|case
name|PLUS_EQ
case|:
return|return
literal|"PLUS_EQ"
return|;
case|case
name|MINUS_EQ
case|:
return|return
literal|"MINUS_EQ"
return|;
case|case
name|STAR_EQ
case|:
return|return
literal|"STAR_EQ"
return|;
case|case
name|SLASH_EQ
case|:
return|return
literal|"SLASH_EQ"
return|;
case|case
name|PERCENT_EQ
case|:
return|return
literal|"PERCENT_EQ"
return|;
case|case
name|HAT_EQ
case|:
return|return
literal|"HAT_EQ"
return|;
case|case
name|AND_EQ
case|:
return|return
literal|"AND_EQ"
return|;
case|case
name|OR_EQ
case|:
return|return
literal|"OR_EQ"
return|;
case|case
name|LTLT
case|:
return|return
literal|"LTLT"
return|;
case|case
name|GTGT
case|:
return|return
literal|"GTGT"
return|;
case|case
name|GTGT_EQ
case|:
return|return
literal|"GTGT_EQ"
return|;
case|case
name|LTLT_EQ
case|:
return|return
literal|"LTLT_EQ"
return|;
case|case
name|EQEQ
case|:
return|return
literal|"EQEQ"
return|;
case|case
name|NE
case|:
return|return
literal|"NE"
return|;
case|case
name|LE
case|:
return|return
literal|"LE"
return|;
case|case
name|GE
case|:
return|return
literal|"GE"
return|;
case|case
name|ANDAND
case|:
return|return
literal|"ANDAND"
return|;
case|case
name|OROR
case|:
return|return
literal|"OROR"
return|;
case|case
name|INCR
case|:
return|return
literal|"INCR"
return|;
case|case
name|DECR
case|:
return|return
literal|"DECR"
return|;
case|case
name|COMMA
case|:
return|return
literal|"COMMA"
return|;
case|case
name|ARROW_STAR
case|:
return|return
literal|"ARROW_STAR"
return|;
case|case
name|ARROW
case|:
return|return
literal|"ARROW"
return|;
case|case
name|CHAR
case|:
return|return
literal|"CHAR"
return|;
case|case
name|WCHAR
case|:
return|return
literal|"WCHAR"
return|;
case|case
name|BOOL
case|:
return|return
literal|"BOOL"
return|;
case|case
name|SHORT
case|:
return|return
literal|"SHORT"
return|;
case|case
name|INT
case|:
return|return
literal|"INT"
return|;
case|case
name|LONG
case|:
return|return
literal|"LONG"
return|;
case|case
name|SIGNED
case|:
return|return
literal|"SIGNED"
return|;
case|case
name|UNSIGNED
case|:
return|return
literal|"UNSIGNED"
return|;
case|case
name|FLOAT
case|:
return|return
literal|"FLOAT"
return|;
case|case
name|DOUBLE
case|:
return|return
literal|"DOUBLE"
return|;
case|case
name|VOID
case|:
return|return
literal|"VOID"
return|;
case|case
name|CASE
case|:
return|return
literal|"CASE"
return|;
case|case
name|DEFAULT
case|:
return|return
literal|"DEFAULT"
return|;
case|case
name|IF
case|:
return|return
literal|"IF"
return|;
case|case
name|ELSE
case|:
return|return
literal|"ELSE"
return|;
case|case
name|SWITCH
case|:
return|return
literal|"SWITCH"
return|;
case|case
name|WHILE
case|:
return|return
literal|"WHILE"
return|;
case|case
name|DO
case|:
return|return
literal|"DO"
return|;
case|case
name|FOR
case|:
return|return
literal|"FOR"
return|;
case|case
name|BREAK
case|:
return|return
literal|"BREAK"
return|;
case|case
name|CONTINUE
case|:
return|return
literal|"CONTINUE"
return|;
case|case
name|GOTO
case|:
return|return
literal|"GOTO"
return|;
case|case
name|SIGNALS
case|:
return|return
literal|"SIGNALS"
return|;
case|case
name|SLOTS
case|:
return|return
literal|"SLOTS"
return|;
case|case
name|RETURN
case|:
return|return
literal|"RETURN"
return|;
case|case
name|Q_OBJECT_TOKEN
case|:
return|return
literal|"Q_OBJECT_TOKEN"
return|;
case|case
name|Q_GADGET_TOKEN
case|:
return|return
literal|"Q_GADGET_TOKEN"
return|;
case|case
name|Q_PROPERTY_TOKEN
case|:
return|return
literal|"Q_PROPERTY_TOKEN"
return|;
case|case
name|Q_ENUMS_TOKEN
case|:
return|return
literal|"Q_ENUMS_TOKEN"
return|;
case|case
name|Q_FLAGS_TOKEN
case|:
return|return
literal|"Q_FLAGS_TOKEN"
return|;
case|case
name|Q_DECLARE_FLAGS_TOKEN
case|:
return|return
literal|"Q_DECLARE_FLAGS_TOKEN"
return|;
case|case
name|Q_DECLARE_INTERFACE_TOKEN
case|:
return|return
literal|"Q_DECLARE_INTERFACE_TOKEN"
return|;
case|case
name|Q_CLASSINFO_TOKEN
case|:
return|return
literal|"Q_CLASSINFO_TOKEN"
return|;
case|case
name|Q_INTERFACES_TOKEN
case|:
return|return
literal|"Q_INTERFACES_TOKEN"
return|;
case|case
name|Q_SIGNALS_TOKEN
case|:
return|return
literal|"Q_SIGNALS_TOKEN"
return|;
case|case
name|Q_SLOTS_TOKEN
case|:
return|return
literal|"Q_SLOTS_TOKEN"
return|;
case|case
name|Q_SIGNAL_TOKEN
case|:
return|return
literal|"Q_SIGNAL_TOKEN"
return|;
case|case
name|Q_SLOT_TOKEN
case|:
return|return
literal|"Q_SLOT_TOKEN"
return|;
case|case
name|Q_PRIVATE_SLOT_TOKEN
case|:
return|return
literal|"Q_PRIVATE_SLOT_TOKEN"
return|;
case|case
name|Q_PRIVATE_PROPERTY_TOKEN
case|:
return|return
literal|"Q_PRIVATE_PROPERTY_TOKEN"
return|;
case|case
name|Q_REVISION_TOKEN
case|:
return|return
literal|"Q_REVISION_TOKEN"
return|;
case|case
name|SPECIAL_TREATMENT_MARK
case|:
return|return
literal|"SPECIAL_TREATMENT_MARK"
return|;
case|case
name|MOC_INCLUDE_BEGIN
case|:
return|return
literal|"MOC_INCLUDE_BEGIN"
return|;
case|case
name|MOC_INCLUDE_END
case|:
return|return
literal|"MOC_INCLUDE_END"
return|;
case|case
name|CPP_COMMENT
case|:
return|return
literal|"CPP_COMMENT"
return|;
case|case
name|C_COMMENT
case|:
return|return
literal|"C_COMMENT"
return|;
case|case
name|FLOATING_LITERAL
case|:
return|return
literal|"FLOATING_LITERAL"
return|;
case|case
name|HASH
case|:
return|return
literal|"HASH"
return|;
case|case
name|QUOTE
case|:
return|return
literal|"QUOTE"
return|;
case|case
name|SINGLEQUOTE
case|:
return|return
literal|"SINGLEQUOTE"
return|;
case|case
name|DIGIT
case|:
return|return
literal|"DIGIT"
return|;
case|case
name|CHARACTER
case|:
return|return
literal|"CHARACTER"
return|;
case|case
name|NEWLINE
case|:
return|return
literal|"NEWLINE"
return|;
case|case
name|WHITESPACE
case|:
return|return
literal|"WHITESPACE"
return|;
case|case
name|BACKSLASH
case|:
return|return
literal|"BACKSLASH"
return|;
case|case
name|INCOMPLETE
case|:
return|return
literal|"INCOMPLETE"
return|;
case|case
name|PP_DEFINE
case|:
return|return
literal|"PP_DEFINE"
return|;
case|case
name|PP_UNDEF
case|:
return|return
literal|"PP_UNDEF"
return|;
case|case
name|PP_IF
case|:
return|return
literal|"PP_IF"
return|;
case|case
name|PP_IFDEF
case|:
return|return
literal|"PP_IFDEF"
return|;
case|case
name|PP_IFNDEF
case|:
return|return
literal|"PP_IFNDEF"
return|;
case|case
name|PP_ELIF
case|:
return|return
literal|"PP_ELIF"
return|;
case|case
name|PP_ELSE
case|:
return|return
literal|"PP_ELSE"
return|;
case|case
name|PP_ENDIF
case|:
return|return
literal|"PP_ENDIF"
return|;
case|case
name|PP_INCLUDE
case|:
return|return
literal|"PP_INCLUDE"
return|;
case|case
name|PP_HASHHASH
case|:
return|return
literal|"PP_HASHHASH"
return|;
case|case
name|PP_HASH
case|:
return|return
literal|"PP_HASH"
return|;
case|case
name|PP_DEFINED
case|:
return|return
literal|"PP_DEFINED"
return|;
case|case
name|PP_INCOMPLETE
case|:
return|return
literal|"PP_INCOMPLETE"
return|;
case|case
name|PP_MOC_TRUE
case|:
return|return
literal|"PP_MOC_TRUE"
return|;
case|case
name|PP_MOC_FALSE
case|:
return|return
literal|"PP_MOC_FALSE"
return|;
case|case
name|Q_DECLARE_METATYPE_TOKEN
case|:
return|return
literal|"Q_DECLARE_METATYPE_TOKEN"
return|;
case|case
name|Q_MOC_COMPAT_TOKEN
case|:
return|return
literal|"Q_MOC_COMPAT_TOKEN"
return|;
case|case
name|Q_QT3_SUPPORT_TOKEN
case|:
return|return
literal|"Q_QT3_SUPPORT_TOKEN"
return|;
case|case
name|Q_INVOKABLE_TOKEN
case|:
return|return
literal|"Q_INVOKABLE_TOKEN"
return|;
case|case
name|Q_SCRIPTABLE_TOKEN
case|:
return|return
literal|"Q_SCRIPTABLE_TOKEN"
return|;
block|}
return|return
literal|""
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
