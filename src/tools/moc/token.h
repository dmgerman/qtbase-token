begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|TOKEN_H
end_ifndef
begin_define
DECL|macro|TOKEN_H
define|#
directive|define
name|TOKEN_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|enum|Token
name|enum
name|Token
block|{
DECL|enumerator|NOTOKEN
name|NOTOKEN
operator|,
DECL|enumerator|IDENTIFIER
name|IDENTIFIER
operator|,
DECL|enumerator|INTEGER_LITERAL
name|INTEGER_LITERAL
operator|,
DECL|enumerator|CHARACTER_LITERAL
name|CHARACTER_LITERAL
operator|,
DECL|enumerator|STRING_LITERAL
name|STRING_LITERAL
operator|,
DECL|enumerator|BOOLEAN_LITERAL
name|BOOLEAN_LITERAL
operator|,
DECL|enumerator|HEADER_NAME
name|HEADER_NAME
operator|,
DECL|enumerator|LANGLE
name|LANGLE
operator|,
DECL|enumerator|RANGLE
name|RANGLE
operator|,
DECL|enumerator|LPAREN
name|LPAREN
operator|,
DECL|enumerator|RPAREN
name|RPAREN
operator|,
DECL|enumerator|ELIPSIS
name|ELIPSIS
operator|,
DECL|enumerator|LBRACK
name|LBRACK
operator|,
DECL|enumerator|RBRACK
name|RBRACK
operator|,
DECL|enumerator|LBRACE
name|LBRACE
operator|,
DECL|enumerator|RBRACE
name|RBRACE
operator|,
DECL|enumerator|EQ
name|EQ
operator|,
DECL|enumerator|SCOPE
name|SCOPE
operator|,
DECL|enumerator|SEMIC
name|SEMIC
operator|,
DECL|enumerator|COLON
name|COLON
operator|,
DECL|enumerator|DOTSTAR
name|DOTSTAR
operator|,
DECL|enumerator|QUESTION
name|QUESTION
operator|,
DECL|enumerator|DOT
name|DOT
operator|,
DECL|enumerator|DYNAMIC_CAST
name|DYNAMIC_CAST
operator|,
DECL|enumerator|STATIC_CAST
name|STATIC_CAST
operator|,
DECL|enumerator|REINTERPRET_CAST
name|REINTERPRET_CAST
operator|,
DECL|enumerator|CONST_CAST
name|CONST_CAST
operator|,
DECL|enumerator|TYPEID
name|TYPEID
operator|,
DECL|enumerator|THIS
name|THIS
operator|,
DECL|enumerator|TEMPLATE
name|TEMPLATE
operator|,
DECL|enumerator|THROW
name|THROW
operator|,
DECL|enumerator|TRY
name|TRY
operator|,
DECL|enumerator|CATCH
name|CATCH
operator|,
DECL|enumerator|TYPEDEF
name|TYPEDEF
operator|,
DECL|enumerator|FRIEND
name|FRIEND
operator|,
DECL|enumerator|CLASS
name|CLASS
operator|,
DECL|enumerator|NAMESPACE
name|NAMESPACE
operator|,
DECL|enumerator|ENUM
name|ENUM
operator|,
DECL|enumerator|STRUCT
name|STRUCT
operator|,
DECL|enumerator|UNION
name|UNION
operator|,
DECL|enumerator|VIRTUAL
name|VIRTUAL
operator|,
DECL|enumerator|PRIVATE
name|PRIVATE
operator|,
DECL|enumerator|PROTECTED
name|PROTECTED
operator|,
DECL|enumerator|PUBLIC
name|PUBLIC
operator|,
DECL|enumerator|EXPORT
name|EXPORT
operator|,
DECL|enumerator|AUTO
name|AUTO
operator|,
DECL|enumerator|REGISTER
name|REGISTER
operator|,
DECL|enumerator|EXTERN
name|EXTERN
operator|,
DECL|enumerator|MUTABLE
name|MUTABLE
operator|,
DECL|enumerator|ASM
name|ASM
operator|,
DECL|enumerator|USING
name|USING
operator|,
DECL|enumerator|INLINE
name|INLINE
operator|,
DECL|enumerator|EXPLICIT
name|EXPLICIT
operator|,
DECL|enumerator|STATIC
name|STATIC
operator|,
DECL|enumerator|CONST
name|CONST
operator|,
DECL|enumerator|VOLATILE
name|VOLATILE
operator|,
DECL|enumerator|OPERATOR
name|OPERATOR
operator|,
DECL|enumerator|SIZEOF
name|SIZEOF
operator|,
DECL|enumerator|NEW
name|NEW
operator|,
DECL|enumerator|DELETE
name|DELETE
operator|,
DECL|enumerator|PLUS
name|PLUS
operator|,
DECL|enumerator|MINUS
name|MINUS
operator|,
DECL|enumerator|STAR
name|STAR
operator|,
DECL|enumerator|SLASH
name|SLASH
operator|,
DECL|enumerator|PERCENT
name|PERCENT
operator|,
DECL|enumerator|HAT
name|HAT
operator|,
DECL|enumerator|AND
name|AND
operator|,
DECL|enumerator|OR
name|OR
operator|,
DECL|enumerator|TILDE
name|TILDE
operator|,
DECL|enumerator|NOT
name|NOT
operator|,
DECL|enumerator|PLUS_EQ
name|PLUS_EQ
operator|,
DECL|enumerator|MINUS_EQ
name|MINUS_EQ
operator|,
DECL|enumerator|STAR_EQ
name|STAR_EQ
operator|,
DECL|enumerator|SLASH_EQ
name|SLASH_EQ
operator|,
DECL|enumerator|PERCENT_EQ
name|PERCENT_EQ
operator|,
DECL|enumerator|HAT_EQ
name|HAT_EQ
operator|,
DECL|enumerator|AND_EQ
name|AND_EQ
operator|,
DECL|enumerator|OR_EQ
name|OR_EQ
operator|,
DECL|enumerator|LTLT
name|LTLT
operator|,
DECL|enumerator|GTGT
name|GTGT
operator|,
DECL|enumerator|GTGT_EQ
name|GTGT_EQ
operator|,
DECL|enumerator|LTLT_EQ
name|LTLT_EQ
operator|,
DECL|enumerator|EQEQ
name|EQEQ
operator|,
DECL|enumerator|NE
name|NE
operator|,
DECL|enumerator|LE
name|LE
operator|,
DECL|enumerator|GE
name|GE
operator|,
DECL|enumerator|ANDAND
name|ANDAND
operator|,
DECL|enumerator|OROR
name|OROR
operator|,
DECL|enumerator|INCR
name|INCR
operator|,
DECL|enumerator|DECR
name|DECR
operator|,
DECL|enumerator|COMMA
name|COMMA
operator|,
DECL|enumerator|ARROW_STAR
name|ARROW_STAR
operator|,
DECL|enumerator|ARROW
name|ARROW
operator|,
DECL|enumerator|CHAR
name|CHAR
operator|,
DECL|enumerator|WCHAR
name|WCHAR
operator|,
DECL|enumerator|BOOL
name|BOOL
operator|,
DECL|enumerator|SHORT
name|SHORT
operator|,
DECL|enumerator|INT
name|INT
operator|,
DECL|enumerator|LONG
name|LONG
operator|,
DECL|enumerator|SIGNED
name|SIGNED
operator|,
DECL|enumerator|UNSIGNED
name|UNSIGNED
operator|,
DECL|enumerator|FLOAT
name|FLOAT
operator|,
DECL|enumerator|DOUBLE
name|DOUBLE
operator|,
DECL|enumerator|VOID
name|VOID
operator|,
DECL|enumerator|CASE
name|CASE
operator|,
DECL|enumerator|DEFAULT
name|DEFAULT
operator|,
DECL|enumerator|IF
name|IF
operator|,
DECL|enumerator|ELSE
name|ELSE
operator|,
DECL|enumerator|SWITCH
name|SWITCH
operator|,
DECL|enumerator|WHILE
name|WHILE
operator|,
DECL|enumerator|DO
name|DO
operator|,
DECL|enumerator|FOR
name|FOR
operator|,
DECL|enumerator|BREAK
name|BREAK
operator|,
DECL|enumerator|CONTINUE
name|CONTINUE
operator|,
DECL|enumerator|GOTO
name|GOTO
operator|,
DECL|enumerator|SIGNALS
name|SIGNALS
operator|,
DECL|enumerator|SLOTS
name|SLOTS
operator|,
DECL|enumerator|RETURN
name|RETURN
operator|,
DECL|enumerator|Q_META_TOKEN_BEGIN
name|Q_META_TOKEN_BEGIN
operator|,
DECL|enumerator|Q_OBJECT_TOKEN
name|Q_OBJECT_TOKEN
operator|=
name|Q_META_TOKEN_BEGIN
operator|,
DECL|enumerator|Q_GADGET_TOKEN
name|Q_GADGET_TOKEN
operator|,
DECL|enumerator|Q_PROPERTY_TOKEN
name|Q_PROPERTY_TOKEN
operator|,
DECL|enumerator|Q_ENUMS_TOKEN
name|Q_ENUMS_TOKEN
operator|,
DECL|enumerator|Q_FLAGS_TOKEN
name|Q_FLAGS_TOKEN
operator|,
DECL|enumerator|Q_DECLARE_FLAGS_TOKEN
name|Q_DECLARE_FLAGS_TOKEN
operator|,
DECL|enumerator|Q_DECLARE_INTERFACE_TOKEN
name|Q_DECLARE_INTERFACE_TOKEN
operator|,
DECL|enumerator|Q_DECLARE_METATYPE_TOKEN
name|Q_DECLARE_METATYPE_TOKEN
operator|,
DECL|enumerator|Q_CLASSINFO_TOKEN
name|Q_CLASSINFO_TOKEN
operator|,
DECL|enumerator|Q_INTERFACES_TOKEN
name|Q_INTERFACES_TOKEN
operator|,
DECL|enumerator|Q_SIGNALS_TOKEN
name|Q_SIGNALS_TOKEN
operator|,
DECL|enumerator|Q_SLOTS_TOKEN
name|Q_SLOTS_TOKEN
operator|,
DECL|enumerator|Q_SIGNAL_TOKEN
name|Q_SIGNAL_TOKEN
operator|,
DECL|enumerator|Q_SLOT_TOKEN
name|Q_SLOT_TOKEN
operator|,
DECL|enumerator|Q_PRIVATE_SLOT_TOKEN
name|Q_PRIVATE_SLOT_TOKEN
operator|,
DECL|enumerator|Q_MOC_COMPAT_TOKEN
name|Q_MOC_COMPAT_TOKEN
operator|,
DECL|enumerator|Q_INVOKABLE_TOKEN
name|Q_INVOKABLE_TOKEN
operator|,
DECL|enumerator|Q_SCRIPTABLE_TOKEN
name|Q_SCRIPTABLE_TOKEN
operator|,
DECL|enumerator|Q_PRIVATE_PROPERTY_TOKEN
name|Q_PRIVATE_PROPERTY_TOKEN
operator|,
DECL|enumerator|Q_REVISION_TOKEN
name|Q_REVISION_TOKEN
operator|,
DECL|enumerator|Q_META_TOKEN_END
name|Q_META_TOKEN_END
operator|,
DECL|enumerator|SPECIAL_TREATMENT_MARK
name|SPECIAL_TREATMENT_MARK
operator|=
name|Q_META_TOKEN_END
operator|,
DECL|enumerator|MOC_INCLUDE_BEGIN
name|MOC_INCLUDE_BEGIN
operator|,
DECL|enumerator|MOC_INCLUDE_END
name|MOC_INCLUDE_END
operator|,
DECL|enumerator|CPP_COMMENT
name|CPP_COMMENT
operator|,
DECL|enumerator|C_COMMENT
name|C_COMMENT
operator|,
DECL|enumerator|FLOATING_LITERAL
name|FLOATING_LITERAL
operator|,
DECL|enumerator|HASH
name|HASH
operator|,
DECL|enumerator|QUOTE
name|QUOTE
operator|,
DECL|enumerator|SINGLEQUOTE
name|SINGLEQUOTE
operator|,
DECL|enumerator|LANGLE_SCOPE
name|LANGLE_SCOPE
operator|,
DECL|enumerator|DIGIT
name|DIGIT
operator|,
DECL|enumerator|CHARACTER
name|CHARACTER
operator|,
DECL|enumerator|NEWLINE
name|NEWLINE
operator|,
DECL|enumerator|WHITESPACE
name|WHITESPACE
operator|,
DECL|enumerator|BACKSLASH
name|BACKSLASH
operator|,
DECL|enumerator|INCOMPLETE
name|INCOMPLETE
operator|,
DECL|enumerator|PP_DEFINE
name|PP_DEFINE
operator|,
DECL|enumerator|PP_UNDEF
name|PP_UNDEF
operator|,
DECL|enumerator|PP_IF
name|PP_IF
operator|,
DECL|enumerator|PP_IFDEF
name|PP_IFDEF
operator|,
DECL|enumerator|PP_IFNDEF
name|PP_IFNDEF
operator|,
DECL|enumerator|PP_ELIF
name|PP_ELIF
operator|,
DECL|enumerator|PP_ELSE
name|PP_ELSE
operator|,
DECL|enumerator|PP_ENDIF
name|PP_ENDIF
operator|,
DECL|enumerator|PP_INCLUDE
name|PP_INCLUDE
operator|,
DECL|enumerator|PP_HASHHASH
name|PP_HASHHASH
operator|,
DECL|enumerator|PP_HASH
name|PP_HASH
operator|,
DECL|enumerator|PP_DEFINED
name|PP_DEFINED
operator|,
DECL|enumerator|PP_INCOMPLETE
name|PP_INCOMPLETE
operator|,
DECL|enumerator|PP_MOC_TRUE
name|PP_MOC_TRUE
operator|,
DECL|enumerator|PP_MOC_FALSE
name|PP_MOC_FALSE
operator|,
DECL|enumerator|PP_NOTOKEN
name|PP_NOTOKEN
operator|=
name|NOTOKEN
operator|,
DECL|enumerator|PP_IDENTIFIER
name|PP_IDENTIFIER
operator|=
name|IDENTIFIER
operator|,
DECL|enumerator|PP_INTEGER_LITERAL
name|PP_INTEGER_LITERAL
operator|=
name|INTEGER_LITERAL
operator|,
DECL|enumerator|PP_CHARACTER_LITERAL
name|PP_CHARACTER_LITERAL
operator|=
name|CHARACTER_LITERAL
operator|,
DECL|enumerator|PP_STRING_LITERAL
name|PP_STRING_LITERAL
operator|=
name|STRING_LITERAL
operator|,
DECL|enumerator|PP_LANGLE
name|PP_LANGLE
operator|=
name|LANGLE
operator|,
DECL|enumerator|PP_RANGLE
name|PP_RANGLE
operator|=
name|RANGLE
operator|,
DECL|enumerator|PP_LPAREN
name|PP_LPAREN
operator|=
name|LPAREN
operator|,
DECL|enumerator|PP_RPAREN
name|PP_RPAREN
operator|=
name|RPAREN
operator|,
DECL|enumerator|PP_COMMA
name|PP_COMMA
operator|=
name|COMMA
operator|,
DECL|enumerator|PP_PLUS
name|PP_PLUS
operator|=
name|PLUS
operator|,
DECL|enumerator|PP_MINUS
name|PP_MINUS
operator|=
name|MINUS
operator|,
DECL|enumerator|PP_STAR
name|PP_STAR
operator|=
name|STAR
operator|,
DECL|enumerator|PP_SLASH
name|PP_SLASH
operator|=
name|SLASH
operator|,
DECL|enumerator|PP_PERCENT
name|PP_PERCENT
operator|=
name|PERCENT
operator|,
DECL|enumerator|PP_HAT
name|PP_HAT
operator|=
name|HAT
operator|,
DECL|enumerator|PP_AND
name|PP_AND
operator|=
name|AND
operator|,
DECL|enumerator|PP_OR
name|PP_OR
operator|=
name|OR
operator|,
DECL|enumerator|PP_TILDE
name|PP_TILDE
operator|=
name|TILDE
operator|,
DECL|enumerator|PP_NOT
name|PP_NOT
operator|=
name|NOT
operator|,
DECL|enumerator|PP_LTLT
name|PP_LTLT
operator|=
name|LTLT
operator|,
DECL|enumerator|PP_GTGT
name|PP_GTGT
operator|=
name|GTGT
operator|,
DECL|enumerator|PP_EQEQ
name|PP_EQEQ
operator|=
name|EQEQ
operator|,
DECL|enumerator|PP_NE
name|PP_NE
operator|=
name|NE
operator|,
DECL|enumerator|PP_LE
name|PP_LE
operator|=
name|LE
operator|,
DECL|enumerator|PP_GE
name|PP_GE
operator|=
name|GE
operator|,
DECL|enumerator|PP_ANDAND
name|PP_ANDAND
operator|=
name|ANDAND
operator|,
DECL|enumerator|PP_OROR
name|PP_OROR
operator|=
name|OROR
operator|,
DECL|enumerator|PP_QUESTION
name|PP_QUESTION
operator|=
name|QUESTION
operator|,
DECL|enumerator|PP_COLON
name|PP_COLON
operator|=
name|COLON
operator|,
DECL|enumerator|PP_FLOATING_LITERAL
name|PP_FLOATING_LITERAL
operator|=
name|FLOATING_LITERAL
operator|,
DECL|enumerator|PP_QUOTE
name|PP_QUOTE
operator|=
name|QUOTE
operator|,
DECL|enumerator|PP_SINGLEQUOTE
name|PP_SINGLEQUOTE
operator|=
name|SINGLEQUOTE
operator|,
DECL|enumerator|PP_DIGIT
name|PP_DIGIT
operator|=
name|DIGIT
operator|,
DECL|enumerator|PP_CHARACTER
name|PP_CHARACTER
operator|=
name|CHARACTER
operator|,
DECL|enumerator|PP_WHITESPACE
name|PP_WHITESPACE
operator|=
name|WHITESPACE
operator|,
DECL|enumerator|PP_NEWLINE
name|PP_NEWLINE
operator|=
name|NEWLINE
operator|,
DECL|enumerator|PP_CPP_COMMENT
name|PP_CPP_COMMENT
operator|=
name|CPP_COMMENT
operator|,
DECL|enumerator|PP_C_COMMENT
name|PP_C_COMMENT
operator|=
name|C_COMMENT
operator|,
DECL|enumerator|PP_BACKSLASH
name|PP_BACKSLASH
operator|=
name|BACKSLASH
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|// for debugging only
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_MOC
argument_list|)
end_if
begin_function_decl
specifier|const
name|char
modifier|*
name|tokenTypeName
parameter_list|(
name|Token
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|PP_Token
typedef|typedef
name|Token
name|PP_Token
typedef|;
end_typedef
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// TOKEN_H
end_comment
end_unit
