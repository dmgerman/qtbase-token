begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"cppwriteiconinitialization.h"
end_include
begin_include
include|#
directive|include
file|"cppwriteicondata.h"
end_include
begin_include
include|#
directive|include
file|"driver.h"
end_include
begin_include
include|#
directive|include
file|"ui4.h"
end_include
begin_include
include|#
directive|include
file|"utils.h"
end_include
begin_include
include|#
directive|include
file|"uic.h"
end_include
begin_include
include|#
directive|include
file|<qtextstream.h>
end_include
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_namespace
DECL|namespace|CPP
namespace|namespace
name|CPP
block|{
DECL|function|WriteIconInitialization
name|WriteIconInitialization
operator|::
name|WriteIconInitialization
parameter_list|(
name|Uic
modifier|*
name|uic
parameter_list|)
member_init_list|:
name|driver
argument_list|(
name|uic
operator|->
name|driver
argument_list|()
argument_list|)
member_init_list|,
name|output
argument_list|(
name|uic
operator|->
name|output
argument_list|()
argument_list|)
member_init_list|,
name|option
argument_list|(
name|uic
operator|->
name|option
argument_list|()
argument_list|)
block|{
name|this
operator|->
name|uic
operator|=
name|uic
expr_stmt|;
block|}
DECL|function|acceptUI
name|void
name|WriteIconInitialization
operator|::
name|acceptUI
parameter_list|(
name|DomUI
modifier|*
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|->
name|elementImages
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|QString
name|className
init|=
name|node
operator|->
name|elementClass
argument_list|()
operator|+
name|option
operator|.
name|postfix
decl_stmt|;
name|output
operator|<<
name|option
operator|.
name|indent
operator|<<
literal|"static QPixmap "
operator|<<
name|iconFromDataFunction
argument_list|()
operator|<<
literal|"(IconID id)\n"
operator|<<
name|option
operator|.
name|indent
operator|<<
literal|"{\n"
expr_stmt|;
name|WriteIconData
argument_list|(
name|uic
argument_list|)
operator|.
name|acceptUI
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|output
operator|<<
name|option
operator|.
name|indent
operator|<<
literal|"switch (id) {\n"
expr_stmt|;
name|TreeWalker
operator|::
name|acceptUI
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|output
operator|<<
name|option
operator|.
name|indent
operator|<<
name|option
operator|.
name|indent
operator|<<
literal|"default: return QPixmap();\n"
expr_stmt|;
name|output
operator|<<
name|option
operator|.
name|indent
operator|<<
literal|"} // switch\n"
operator|<<
name|option
operator|.
name|indent
operator|<<
literal|"} // icon\n\n"
expr_stmt|;
block|}
DECL|function|iconFromDataFunction
name|QString
name|WriteIconInitialization
operator|::
name|iconFromDataFunction
parameter_list|()
block|{
return|return
name|QLatin1String
argument_list|(
literal|"qt_get_icon"
argument_list|)
return|;
block|}
DECL|function|acceptImages
name|void
name|WriteIconInitialization
operator|::
name|acceptImages
parameter_list|(
name|DomImages
modifier|*
name|images
parameter_list|)
block|{
name|TreeWalker
operator|::
name|acceptImages
argument_list|(
name|images
argument_list|)
expr_stmt|;
block|}
DECL|function|acceptImage
name|void
name|WriteIconInitialization
operator|::
name|acceptImage
parameter_list|(
name|DomImage
modifier|*
name|image
parameter_list|)
block|{
name|QString
name|img
init|=
name|image
operator|->
name|attributeName
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"_data"
argument_list|)
decl_stmt|;
name|QString
name|data
init|=
name|image
operator|->
name|elementData
argument_list|()
operator|->
name|text
argument_list|()
decl_stmt|;
name|QString
name|fmt
init|=
name|image
operator|->
name|elementData
argument_list|()
operator|->
name|attributeFormat
argument_list|()
decl_stmt|;
name|QString
name|imageId
init|=
name|image
operator|->
name|attributeName
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"_ID"
argument_list|)
decl_stmt|;
name|QString
name|imageData
init|=
name|image
operator|->
name|attributeName
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"_data"
argument_list|)
decl_stmt|;
name|QString
name|ind
init|=
name|option
operator|.
name|indent
operator|+
name|option
operator|.
name|indent
decl_stmt|;
name|output
operator|<<
name|ind
operator|<<
literal|"case "
operator|<<
name|imageId
operator|<<
literal|": "
expr_stmt|;
if|if
condition|(
name|fmt
operator|==
name|QLatin1String
argument_list|(
literal|"XPM.GZ"
argument_list|)
condition|)
block|{
name|output
operator|<<
literal|"return "
operator|<<
literal|"QPixmap((const char**)"
operator|<<
name|imageData
operator|<<
literal|");\n"
expr_stmt|;
block|}
else|else
block|{
name|output
operator|<<
literal|" { QImage img; img.loadFromData("
operator|<<
name|imageData
operator|<<
literal|", sizeof("
operator|<<
name|imageData
operator|<<
literal|"), "
operator|<<
name|fixString
argument_list|(
name|fmt
argument_list|,
name|ind
argument_list|)
operator|<<
literal|"); return QPixmap::fromImage(img); }\n"
expr_stmt|;
block|}
block|}
block|}
end_namespace
begin_comment
comment|// namespace CPP
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
