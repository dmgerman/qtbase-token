begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"cppwriteinitialization.h"
end_include
begin_include
include|#
directive|include
file|"cppwriteiconinitialization.h"
end_include
begin_include
include|#
directive|include
file|"driver.h"
end_include
begin_include
include|#
directive|include
file|"ui4.h"
end_include
begin_include
include|#
directive|include
file|"utils.h"
end_include
begin_include
include|#
directive|include
file|"uic.h"
end_include
begin_include
include|#
directive|include
file|"databaseinfo.h"
end_include
begin_include
include|#
directive|include
file|"globaldefs.h"
end_include
begin_include
include|#
directive|include
file|<qtextstream.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_include
include|#
directive|include
file|<ctype.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_namespace
namespace|namespace
block|{
comment|// Fixup an enumeration name from class Qt.
comment|// They are currently stored as "BottomToolBarArea" instead of "Qt::BottomToolBarArea".
comment|// due to MO issues. This might be fixed in the future.
DECL|function|fixQtEnumerationName
name|void
name|fixQtEnumerationName
parameter_list|(
name|QString
modifier|&
name|name
parameter_list|)
block|{
specifier|static
specifier|const
name|QLatin1String
name|prefix
argument_list|(
literal|"Qt::"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|indexOf
argument_list|(
name|prefix
argument_list|)
operator|!=
literal|0
condition|)
name|name
operator|.
name|prepend
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|// figure out the toolbar area of a DOM attrib list.
comment|// By legacy, it is stored as an integer. As of 4.3.0, it is the enumeration value.
DECL|function|toolBarAreaStringFromDOMAttributes
name|QString
name|toolBarAreaStringFromDOMAttributes
parameter_list|(
specifier|const
name|CPP
operator|::
name|WriteInitialization
operator|::
name|DomPropertyMap
modifier|&
name|attributes
parameter_list|)
block|{
specifier|const
name|DomProperty
modifier|*
name|pstyle
init|=
name|attributes
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"toolBarArea"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pstyle
condition|)
return|return
name|QString
argument_list|()
return|;
switch|switch
condition|(
name|pstyle
operator|->
name|kind
argument_list|()
condition|)
block|{
case|case
name|DomProperty
operator|::
name|Number
case|:
block|{
name|QString
name|area
init|=
name|QLatin1String
argument_list|(
literal|"static_cast<Qt::ToolBarArea>("
argument_list|)
decl_stmt|;
name|area
operator|+=
name|QString
operator|::
name|number
argument_list|(
name|pstyle
operator|->
name|elementNumber
argument_list|()
argument_list|)
expr_stmt|;
name|area
operator|+=
name|QLatin1String
argument_list|(
literal|"), "
argument_list|)
expr_stmt|;
return|return
name|area
return|;
block|}
case|case
name|DomProperty
operator|::
name|Enum
case|:
block|{
name|QString
name|area
init|=
name|pstyle
operator|->
name|elementEnum
argument_list|()
decl_stmt|;
name|fixQtEnumerationName
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|area
operator|+=
name|QLatin1String
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
return|return
name|area
return|;
block|}
default|default:
break|break;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
comment|// Write a statement to create a spacer item.
DECL|function|writeSpacerItem
name|void
name|writeSpacerItem
parameter_list|(
specifier|const
name|DomSpacer
modifier|*
name|node
parameter_list|,
name|QTextStream
modifier|&
name|output
parameter_list|)
block|{
specifier|const
name|QHash
argument_list|<
name|QString
argument_list|,
name|DomProperty
modifier|*
argument_list|>
name|properties
init|=
name|propertyMap
argument_list|(
name|node
operator|->
name|elementProperty
argument_list|()
argument_list|)
decl_stmt|;
name|output
operator|<<
literal|"new QSpacerItem("
expr_stmt|;
if|if
condition|(
name|properties
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"sizeHint"
argument_list|)
argument_list|)
condition|)
block|{
specifier|const
name|DomSize
modifier|*
name|sizeHint
init|=
name|properties
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"sizeHint"
argument_list|)
argument_list|)
operator|->
name|elementSize
argument_list|()
decl_stmt|;
name|output
operator|<<
name|sizeHint
operator|->
name|elementWidth
argument_list|()
operator|<<
literal|", "
operator|<<
name|sizeHint
operator|->
name|elementHeight
argument_list|()
operator|<<
literal|", "
expr_stmt|;
block|}
comment|// size type
name|QString
name|sizeType
init|=
name|properties
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"sizeType"
argument_list|)
argument_list|)
condition|?
name|properties
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"sizeType"
argument_list|)
argument_list|)
operator|->
name|elementEnum
argument_list|()
else|:
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Expanding"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sizeType
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"QSizePolicy::"
argument_list|)
argument_list|)
condition|)
name|sizeType
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
literal|"QSizePolicy::"
argument_list|)
argument_list|)
expr_stmt|;
comment|// orientation
name|bool
name|isVspacer
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|properties
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"orientation"
argument_list|)
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|orientation
init|=
name|properties
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"orientation"
argument_list|)
argument_list|)
operator|->
name|elementEnum
argument_list|()
decl_stmt|;
if|if
condition|(
name|orientation
operator|==
name|QLatin1String
argument_list|(
literal|"Qt::Vertical"
argument_list|)
operator|||
name|orientation
operator|==
name|QLatin1String
argument_list|(
literal|"Vertical"
argument_list|)
condition|)
name|isVspacer
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isVspacer
condition|)
name|output
operator|<<
literal|"QSizePolicy::Minimum, "
operator|<<
name|sizeType
operator|<<
literal|')'
expr_stmt|;
else|else
name|output
operator|<<
name|sizeType
operator|<<
literal|", QSizePolicy::Minimum)"
expr_stmt|;
block|}
comment|// Helper for implementing comparison functions for integers.
DECL|function|compareInt
name|int
name|compareInt
parameter_list|(
name|int
name|i1
parameter_list|,
name|int
name|i2
parameter_list|)
block|{
if|if
condition|(
name|i1
operator|<
name|i2
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|i1
operator|>
name|i2
condition|)
return|return
literal|1
return|;
return|return
literal|0
return|;
block|}
comment|// Write object->setFoo(x);
template|template
parameter_list|<
name|class
name|Value
parameter_list|>
DECL|function|writeSetter
name|void
name|writeSetter
parameter_list|(
specifier|const
name|QString
modifier|&
name|indent
parameter_list|,
specifier|const
name|QString
modifier|&
name|varName
parameter_list|,
specifier|const
name|QString
modifier|&
name|setter
parameter_list|,
name|Value
name|v
parameter_list|,
name|QTextStream
modifier|&
name|str
parameter_list|)
block|{
name|str
operator|<<
name|indent
operator|<<
name|varName
operator|<<
literal|"->"
operator|<<
name|setter
operator|<<
literal|'('
operator|<<
name|v
operator|<<
literal|");\n"
expr_stmt|;
block|}
DECL|function|writeSetupUIScriptVariableDeclarations
name|void
name|writeSetupUIScriptVariableDeclarations
parameter_list|(
specifier|const
name|QString
modifier|&
name|indent
parameter_list|,
name|QTextStream
modifier|&
name|str
parameter_list|)
block|{
name|str
operator|<<
name|indent
operator|<<
literal|"ScriptContext scriptContext;\n"
operator|<<
name|indent
operator|<<
literal|"QWidgetList childWidgets;\n"
expr_stmt|;
block|}
DECL|function|iconHasStatePixmaps
specifier|static
specifier|inline
name|bool
name|iconHasStatePixmaps
parameter_list|(
specifier|const
name|DomResourceIcon
modifier|*
name|i
parameter_list|)
block|{
return|return
name|i
operator|->
name|hasElementNormalOff
argument_list|()
operator|||
name|i
operator|->
name|hasElementNormalOn
argument_list|()
operator|||
name|i
operator|->
name|hasElementDisabledOff
argument_list|()
operator|||
name|i
operator|->
name|hasElementDisabledOn
argument_list|()
operator|||
name|i
operator|->
name|hasElementActiveOff
argument_list|()
operator|||
name|i
operator|->
name|hasElementActiveOn
argument_list|()
operator|||
name|i
operator|->
name|hasElementSelectedOff
argument_list|()
operator|||
name|i
operator|->
name|hasElementSelectedOn
argument_list|()
return|;
block|}
DECL|function|isIconFormat44
specifier|static
specifier|inline
name|bool
name|isIconFormat44
parameter_list|(
specifier|const
name|DomResourceIcon
modifier|*
name|i
parameter_list|)
block|{
return|return
name|iconHasStatePixmaps
argument_list|(
name|i
argument_list|)
operator|||
operator|!
name|i
operator|->
name|attributeTheme
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|// Check on properties. Filter out empty legacy pixmap/icon properties
comment|// as Designer pre 4.4 used to remove missing resource references.
comment|// This can no longer be handled by the code as we have 'setIcon(QIcon())' as well as 'QIcon icon'
DECL|function|checkProperty
specifier|static
name|bool
name|checkProperty
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
specifier|const
name|DomProperty
modifier|*
name|p
parameter_list|)
block|{
switch|switch
condition|(
name|p
operator|->
name|kind
argument_list|()
condition|)
block|{
case|case
name|DomProperty
operator|::
name|IconSet
case|:
if|if
condition|(
specifier|const
name|DomResourceIcon
modifier|*
name|dri
init|=
name|p
operator|->
name|elementIconSet
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|isIconFormat44
argument_list|(
name|dri
argument_list|)
condition|)
block|{
if|if
condition|(
name|dri
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|msg
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"%1: Warning: An invalid icon property '%2' was encountered."
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
operator|.
name|arg
argument_list|(
name|p
operator|->
name|attributeName
argument_list|()
argument_list|)
decl_stmt|;
name|qWarning
argument_list|(
literal|"%s"
argument_list|,
name|qPrintable
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
break|break;
case|case
name|DomProperty
operator|::
name|Pixmap
case|:
if|if
condition|(
specifier|const
name|DomResourcePixmap
modifier|*
name|drp
init|=
name|p
operator|->
name|elementPixmap
argument_list|()
condition|)
if|if
condition|(
name|drp
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|msg
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"%1: Warning: An invalid pixmap property '%2' was encountered."
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
operator|.
name|arg
argument_list|(
name|p
operator|->
name|attributeName
argument_list|()
argument_list|)
decl_stmt|;
name|qWarning
argument_list|(
literal|"%s"
argument_list|,
name|qPrintable
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
default|default:
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|function|openIfndef
specifier|inline
name|void
name|openIfndef
parameter_list|(
name|QTextStream
modifier|&
name|str
parameter_list|,
specifier|const
name|QString
modifier|&
name|symbol
parameter_list|)
block|{
if|if
condition|(
operator|!
name|symbol
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|<<
name|QLatin1String
argument_list|(
literal|"#ifndef "
argument_list|)
operator|<<
name|symbol
operator|<<
name|endl
expr_stmt|;
block|}
DECL|function|closeIfndef
specifier|inline
name|void
name|closeIfndef
parameter_list|(
name|QTextStream
modifier|&
name|str
parameter_list|,
specifier|const
name|QString
modifier|&
name|symbol
parameter_list|)
block|{
if|if
condition|(
operator|!
name|symbol
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|<<
name|QLatin1String
argument_list|(
literal|"#endif // "
argument_list|)
operator|<<
name|symbol
operator|<<
name|endl
expr_stmt|;
block|}
DECL|member|accessibilityDefineC
specifier|const
name|char
modifier|*
name|accessibilityDefineC
init|=
literal|"QT_NO_ACCESSIBILITY"
decl_stmt|;
DECL|member|toolTipDefineC
specifier|const
name|char
modifier|*
name|toolTipDefineC
init|=
literal|"QT_NO_TOOLTIP"
decl_stmt|;
DECL|member|whatsThisDefineC
specifier|const
name|char
modifier|*
name|whatsThisDefineC
init|=
literal|"QT_NO_WHATSTHIS"
decl_stmt|;
DECL|member|statusTipDefineC
specifier|const
name|char
modifier|*
name|statusTipDefineC
init|=
literal|"QT_NO_STATUSTIP"
decl_stmt|;
DECL|member|shortcutDefineC
specifier|const
name|char
modifier|*
name|shortcutDefineC
init|=
literal|"QT_NO_SHORTCUT"
decl_stmt|;
block|}
end_namespace
begin_namespace
DECL|namespace|CPP
namespace|namespace
name|CPP
block|{
DECL|function|FontHandle
name|FontHandle
operator|::
name|FontHandle
parameter_list|(
specifier|const
name|DomFont
modifier|*
name|domFont
parameter_list|)
member_init_list|:
name|m_domFont
argument_list|(
name|domFont
argument_list|)
block|{ }
DECL|function|compare
name|int
name|FontHandle
operator|::
name|compare
parameter_list|(
specifier|const
name|FontHandle
modifier|&
name|rhs
parameter_list|)
specifier|const
block|{
specifier|const
name|QString
name|family
init|=
name|m_domFont
operator|->
name|hasElementFamily
argument_list|()
condition|?
name|m_domFont
operator|->
name|elementFamily
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|rhsFamily
init|=
name|rhs
operator|.
name|m_domFont
operator|->
name|hasElementFamily
argument_list|()
condition|?
name|rhs
operator|.
name|m_domFont
operator|->
name|elementFamily
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|frc
init|=
name|family
operator|.
name|compare
argument_list|(
name|rhsFamily
argument_list|)
condition|)
return|return
name|frc
return|;
specifier|const
name|int
name|pointSize
init|=
name|m_domFont
operator|->
name|hasElementPointSize
argument_list|()
condition|?
name|m_domFont
operator|->
name|elementPointSize
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
specifier|const
name|int
name|rhsPointSize
init|=
name|rhs
operator|.
name|m_domFont
operator|->
name|hasElementPointSize
argument_list|()
condition|?
name|rhs
operator|.
name|m_domFont
operator|->
name|elementPointSize
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|crc
init|=
name|compareInt
argument_list|(
name|pointSize
argument_list|,
name|rhsPointSize
argument_list|)
condition|)
return|return
name|crc
return|;
specifier|const
name|int
name|bold
init|=
name|m_domFont
operator|->
name|hasElementBold
argument_list|()
condition|?
operator|(
name|m_domFont
operator|->
name|elementBold
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
else|:
operator|-
literal|1
decl_stmt|;
specifier|const
name|int
name|rhsBold
init|=
name|rhs
operator|.
name|m_domFont
operator|->
name|hasElementBold
argument_list|()
condition|?
operator|(
name|rhs
operator|.
name|m_domFont
operator|->
name|elementBold
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|crc
init|=
name|compareInt
argument_list|(
name|bold
argument_list|,
name|rhsBold
argument_list|)
condition|)
return|return
name|crc
return|;
specifier|const
name|int
name|italic
init|=
name|m_domFont
operator|->
name|hasElementItalic
argument_list|()
condition|?
operator|(
name|m_domFont
operator|->
name|elementItalic
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
else|:
operator|-
literal|1
decl_stmt|;
specifier|const
name|int
name|rhsItalic
init|=
name|rhs
operator|.
name|m_domFont
operator|->
name|hasElementItalic
argument_list|()
condition|?
operator|(
name|rhs
operator|.
name|m_domFont
operator|->
name|elementItalic
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|crc
init|=
name|compareInt
argument_list|(
name|italic
argument_list|,
name|rhsItalic
argument_list|)
condition|)
return|return
name|crc
return|;
specifier|const
name|int
name|underline
init|=
name|m_domFont
operator|->
name|hasElementUnderline
argument_list|()
condition|?
operator|(
name|m_domFont
operator|->
name|elementUnderline
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
else|:
operator|-
literal|1
decl_stmt|;
specifier|const
name|int
name|rhsUnderline
init|=
name|rhs
operator|.
name|m_domFont
operator|->
name|hasElementUnderline
argument_list|()
condition|?
operator|(
name|rhs
operator|.
name|m_domFont
operator|->
name|elementUnderline
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|crc
init|=
name|compareInt
argument_list|(
name|underline
argument_list|,
name|rhsUnderline
argument_list|)
condition|)
return|return
name|crc
return|;
specifier|const
name|int
name|weight
init|=
name|m_domFont
operator|->
name|hasElementWeight
argument_list|()
condition|?
name|m_domFont
operator|->
name|elementWeight
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
specifier|const
name|int
name|rhsWeight
init|=
name|rhs
operator|.
name|m_domFont
operator|->
name|hasElementWeight
argument_list|()
condition|?
name|rhs
operator|.
name|m_domFont
operator|->
name|elementWeight
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|crc
init|=
name|compareInt
argument_list|(
name|weight
argument_list|,
name|rhsWeight
argument_list|)
condition|)
return|return
name|crc
return|;
specifier|const
name|int
name|strikeOut
init|=
name|m_domFont
operator|->
name|hasElementStrikeOut
argument_list|()
condition|?
operator|(
name|m_domFont
operator|->
name|elementStrikeOut
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
else|:
operator|-
literal|1
decl_stmt|;
specifier|const
name|int
name|rhsStrikeOut
init|=
name|rhs
operator|.
name|m_domFont
operator|->
name|hasElementStrikeOut
argument_list|()
condition|?
operator|(
name|rhs
operator|.
name|m_domFont
operator|->
name|elementStrikeOut
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|crc
init|=
name|compareInt
argument_list|(
name|strikeOut
argument_list|,
name|rhsStrikeOut
argument_list|)
condition|)
return|return
name|crc
return|;
specifier|const
name|int
name|kerning
init|=
name|m_domFont
operator|->
name|hasElementKerning
argument_list|()
condition|?
operator|(
name|m_domFont
operator|->
name|elementKerning
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
else|:
operator|-
literal|1
decl_stmt|;
specifier|const
name|int
name|rhsKerning
init|=
name|rhs
operator|.
name|m_domFont
operator|->
name|hasElementKerning
argument_list|()
condition|?
operator|(
name|rhs
operator|.
name|m_domFont
operator|->
name|elementKerning
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|crc
init|=
name|compareInt
argument_list|(
name|kerning
argument_list|,
name|rhsKerning
argument_list|)
condition|)
return|return
name|crc
return|;
specifier|const
name|int
name|antialiasing
init|=
name|m_domFont
operator|->
name|hasElementAntialiasing
argument_list|()
condition|?
operator|(
name|m_domFont
operator|->
name|elementAntialiasing
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
else|:
operator|-
literal|1
decl_stmt|;
specifier|const
name|int
name|rhsAntialiasing
init|=
name|rhs
operator|.
name|m_domFont
operator|->
name|hasElementAntialiasing
argument_list|()
condition|?
operator|(
name|rhs
operator|.
name|m_domFont
operator|->
name|elementAntialiasing
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|crc
init|=
name|compareInt
argument_list|(
name|antialiasing
argument_list|,
name|rhsAntialiasing
argument_list|)
condition|)
return|return
name|crc
return|;
specifier|const
name|QString
name|styleStrategy
init|=
name|m_domFont
operator|->
name|hasElementStyleStrategy
argument_list|()
condition|?
name|m_domFont
operator|->
name|elementStyleStrategy
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|rhsStyleStrategy
init|=
name|rhs
operator|.
name|m_domFont
operator|->
name|hasElementStyleStrategy
argument_list|()
condition|?
name|rhs
operator|.
name|m_domFont
operator|->
name|elementStyleStrategy
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|src
init|=
name|styleStrategy
operator|.
name|compare
argument_list|(
name|rhsStyleStrategy
argument_list|)
condition|)
return|return
name|src
return|;
return|return
literal|0
return|;
block|}
DECL|function|IconHandle
name|IconHandle
operator|::
name|IconHandle
parameter_list|(
specifier|const
name|DomResourceIcon
modifier|*
name|domIcon
parameter_list|)
member_init_list|:
name|m_domIcon
argument_list|(
name|domIcon
argument_list|)
block|{ }
DECL|function|compare
name|int
name|IconHandle
operator|::
name|compare
parameter_list|(
specifier|const
name|IconHandle
modifier|&
name|rhs
parameter_list|)
specifier|const
block|{
if|if
condition|(
specifier|const
name|int
name|comp
init|=
name|m_domIcon
operator|->
name|attributeTheme
argument_list|()
operator|.
name|compare
argument_list|(
name|rhs
operator|.
name|m_domIcon
operator|->
name|attributeTheme
argument_list|()
argument_list|)
condition|)
return|return
name|comp
return|;
specifier|const
name|QString
name|normalOff
init|=
name|m_domIcon
operator|->
name|hasElementNormalOff
argument_list|()
condition|?
name|m_domIcon
operator|->
name|elementNormalOff
argument_list|()
operator|->
name|text
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|rhsNormalOff
init|=
name|rhs
operator|.
name|m_domIcon
operator|->
name|hasElementNormalOff
argument_list|()
condition|?
name|rhs
operator|.
name|m_domIcon
operator|->
name|elementNormalOff
argument_list|()
operator|->
name|text
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|comp
init|=
name|normalOff
operator|.
name|compare
argument_list|(
name|rhsNormalOff
argument_list|)
condition|)
return|return
name|comp
return|;
specifier|const
name|QString
name|normalOn
init|=
name|m_domIcon
operator|->
name|hasElementNormalOn
argument_list|()
condition|?
name|m_domIcon
operator|->
name|elementNormalOn
argument_list|()
operator|->
name|text
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|rhsNormalOn
init|=
name|rhs
operator|.
name|m_domIcon
operator|->
name|hasElementNormalOn
argument_list|()
condition|?
name|rhs
operator|.
name|m_domIcon
operator|->
name|elementNormalOn
argument_list|()
operator|->
name|text
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|comp
init|=
name|normalOn
operator|.
name|compare
argument_list|(
name|rhsNormalOn
argument_list|)
condition|)
return|return
name|comp
return|;
specifier|const
name|QString
name|disabledOff
init|=
name|m_domIcon
operator|->
name|hasElementDisabledOff
argument_list|()
condition|?
name|m_domIcon
operator|->
name|elementDisabledOff
argument_list|()
operator|->
name|text
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|rhsDisabledOff
init|=
name|rhs
operator|.
name|m_domIcon
operator|->
name|hasElementDisabledOff
argument_list|()
condition|?
name|rhs
operator|.
name|m_domIcon
operator|->
name|elementDisabledOff
argument_list|()
operator|->
name|text
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|comp
init|=
name|disabledOff
operator|.
name|compare
argument_list|(
name|rhsDisabledOff
argument_list|)
condition|)
return|return
name|comp
return|;
specifier|const
name|QString
name|disabledOn
init|=
name|m_domIcon
operator|->
name|hasElementDisabledOn
argument_list|()
condition|?
name|m_domIcon
operator|->
name|elementDisabledOn
argument_list|()
operator|->
name|text
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|rhsDisabledOn
init|=
name|rhs
operator|.
name|m_domIcon
operator|->
name|hasElementDisabledOn
argument_list|()
condition|?
name|rhs
operator|.
name|m_domIcon
operator|->
name|elementDisabledOn
argument_list|()
operator|->
name|text
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|comp
init|=
name|disabledOn
operator|.
name|compare
argument_list|(
name|rhsDisabledOn
argument_list|)
condition|)
return|return
name|comp
return|;
specifier|const
name|QString
name|activeOff
init|=
name|m_domIcon
operator|->
name|hasElementActiveOff
argument_list|()
condition|?
name|m_domIcon
operator|->
name|elementActiveOff
argument_list|()
operator|->
name|text
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|rhsActiveOff
init|=
name|rhs
operator|.
name|m_domIcon
operator|->
name|hasElementActiveOff
argument_list|()
condition|?
name|rhs
operator|.
name|m_domIcon
operator|->
name|elementActiveOff
argument_list|()
operator|->
name|text
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|comp
init|=
name|activeOff
operator|.
name|compare
argument_list|(
name|rhsActiveOff
argument_list|)
condition|)
return|return
name|comp
return|;
specifier|const
name|QString
name|activeOn
init|=
name|m_domIcon
operator|->
name|hasElementActiveOn
argument_list|()
condition|?
name|m_domIcon
operator|->
name|elementActiveOn
argument_list|()
operator|->
name|text
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|rhsActiveOn
init|=
name|rhs
operator|.
name|m_domIcon
operator|->
name|hasElementActiveOn
argument_list|()
condition|?
name|rhs
operator|.
name|m_domIcon
operator|->
name|elementActiveOn
argument_list|()
operator|->
name|text
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|comp
init|=
name|activeOn
operator|.
name|compare
argument_list|(
name|rhsActiveOn
argument_list|)
condition|)
return|return
name|comp
return|;
specifier|const
name|QString
name|selectedOff
init|=
name|m_domIcon
operator|->
name|hasElementSelectedOff
argument_list|()
condition|?
name|m_domIcon
operator|->
name|elementSelectedOff
argument_list|()
operator|->
name|text
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|rhsSelectedOff
init|=
name|rhs
operator|.
name|m_domIcon
operator|->
name|hasElementSelectedOff
argument_list|()
condition|?
name|rhs
operator|.
name|m_domIcon
operator|->
name|elementSelectedOff
argument_list|()
operator|->
name|text
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|comp
init|=
name|selectedOff
operator|.
name|compare
argument_list|(
name|rhsSelectedOff
argument_list|)
condition|)
return|return
name|comp
return|;
specifier|const
name|QString
name|selectedOn
init|=
name|m_domIcon
operator|->
name|hasElementSelectedOn
argument_list|()
condition|?
name|m_domIcon
operator|->
name|elementSelectedOn
argument_list|()
operator|->
name|text
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|rhsSelectedOn
init|=
name|rhs
operator|.
name|m_domIcon
operator|->
name|hasElementSelectedOn
argument_list|()
condition|?
name|rhs
operator|.
name|m_domIcon
operator|->
name|elementSelectedOn
argument_list|()
operator|->
name|text
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|comp
init|=
name|selectedOn
operator|.
name|compare
argument_list|(
name|rhsSelectedOn
argument_list|)
condition|)
return|return
name|comp
return|;
comment|// Pre 4.4 Legacy
if|if
condition|(
specifier|const
name|int
name|comp
init|=
name|m_domIcon
operator|->
name|text
argument_list|()
operator|.
name|compare
argument_list|(
name|rhs
operator|.
name|m_domIcon
operator|->
name|text
argument_list|()
argument_list|)
condition|)
return|return
name|comp
return|;
return|return
literal|0
return|;
block|}
DECL|function|SizePolicyHandle
name|SizePolicyHandle
operator|::
name|SizePolicyHandle
parameter_list|(
specifier|const
name|DomSizePolicy
modifier|*
name|domSizePolicy
parameter_list|)
member_init_list|:
name|m_domSizePolicy
argument_list|(
name|domSizePolicy
argument_list|)
block|{ }
DECL|function|compare
name|int
name|SizePolicyHandle
operator|::
name|compare
parameter_list|(
specifier|const
name|SizePolicyHandle
modifier|&
name|rhs
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|hSizeType
init|=
name|m_domSizePolicy
operator|->
name|hasElementHSizeType
argument_list|()
condition|?
name|m_domSizePolicy
operator|->
name|elementHSizeType
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
specifier|const
name|int
name|rhsHSizeType
init|=
name|rhs
operator|.
name|m_domSizePolicy
operator|->
name|hasElementHSizeType
argument_list|()
condition|?
name|rhs
operator|.
name|m_domSizePolicy
operator|->
name|elementHSizeType
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|crc
init|=
name|compareInt
argument_list|(
name|hSizeType
argument_list|,
name|rhsHSizeType
argument_list|)
condition|)
return|return
name|crc
return|;
specifier|const
name|int
name|vSizeType
init|=
name|m_domSizePolicy
operator|->
name|hasElementVSizeType
argument_list|()
condition|?
name|m_domSizePolicy
operator|->
name|elementVSizeType
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
specifier|const
name|int
name|rhsVSizeType
init|=
name|rhs
operator|.
name|m_domSizePolicy
operator|->
name|hasElementVSizeType
argument_list|()
condition|?
name|rhs
operator|.
name|m_domSizePolicy
operator|->
name|elementVSizeType
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|crc
init|=
name|compareInt
argument_list|(
name|vSizeType
argument_list|,
name|rhsVSizeType
argument_list|)
condition|)
return|return
name|crc
return|;
specifier|const
name|int
name|hStretch
init|=
name|m_domSizePolicy
operator|->
name|hasElementHorStretch
argument_list|()
condition|?
name|m_domSizePolicy
operator|->
name|elementHorStretch
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
specifier|const
name|int
name|rhsHStretch
init|=
name|rhs
operator|.
name|m_domSizePolicy
operator|->
name|hasElementHorStretch
argument_list|()
condition|?
name|rhs
operator|.
name|m_domSizePolicy
operator|->
name|elementHorStretch
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|crc
init|=
name|compareInt
argument_list|(
name|hStretch
argument_list|,
name|rhsHStretch
argument_list|)
condition|)
return|return
name|crc
return|;
specifier|const
name|int
name|vStretch
init|=
name|m_domSizePolicy
operator|->
name|hasElementVerStretch
argument_list|()
condition|?
name|m_domSizePolicy
operator|->
name|elementVerStretch
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
specifier|const
name|int
name|rhsVStretch
init|=
name|rhs
operator|.
name|m_domSizePolicy
operator|->
name|hasElementVerStretch
argument_list|()
condition|?
name|rhs
operator|.
name|m_domSizePolicy
operator|->
name|elementVerStretch
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|crc
init|=
name|compareInt
argument_list|(
name|vStretch
argument_list|,
name|rhsVStretch
argument_list|)
condition|)
return|return
name|crc
return|;
specifier|const
name|QString
name|attributeHSizeType
init|=
name|m_domSizePolicy
operator|->
name|hasAttributeHSizeType
argument_list|()
condition|?
name|m_domSizePolicy
operator|->
name|attributeHSizeType
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|rhsAttributeHSizeType
init|=
name|rhs
operator|.
name|m_domSizePolicy
operator|->
name|hasAttributeHSizeType
argument_list|()
condition|?
name|rhs
operator|.
name|m_domSizePolicy
operator|->
name|attributeHSizeType
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|hrc
init|=
name|attributeHSizeType
operator|.
name|compare
argument_list|(
name|rhsAttributeHSizeType
argument_list|)
condition|)
return|return
name|hrc
return|;
specifier|const
name|QString
name|attributeVSizeType
init|=
name|m_domSizePolicy
operator|->
name|hasAttributeVSizeType
argument_list|()
condition|?
name|m_domSizePolicy
operator|->
name|attributeVSizeType
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|rhsAttributeVSizeType
init|=
name|rhs
operator|.
name|m_domSizePolicy
operator|->
name|hasAttributeVSizeType
argument_list|()
condition|?
name|rhs
operator|.
name|m_domSizePolicy
operator|->
name|attributeVSizeType
argument_list|()
else|:
name|QString
argument_list|()
decl_stmt|;
return|return
name|attributeVSizeType
operator|.
name|compare
argument_list|(
name|rhsAttributeVSizeType
argument_list|)
return|;
block|}
comment|// ---  WriteInitialization: LayoutDefaultHandler
DECL|function|LayoutDefaultHandler
name|WriteInitialization
operator|::
name|LayoutDefaultHandler
operator|::
name|LayoutDefaultHandler
parameter_list|()
block|{
name|std
operator|::
name|fill_n
argument_list|(
name|m_state
argument_list|,
name|int
argument_list|(
name|NumProperties
argument_list|)
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|std
operator|::
name|fill_n
argument_list|(
name|m_defaultValues
argument_list|,
name|int
argument_list|(
name|NumProperties
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|function|acceptLayoutDefault
name|void
name|WriteInitialization
operator|::
name|LayoutDefaultHandler
operator|::
name|acceptLayoutDefault
parameter_list|(
name|DomLayoutDefault
modifier|*
name|node
parameter_list|)
block|{
if|if
condition|(
operator|!
name|node
condition|)
return|return;
if|if
condition|(
name|node
operator|->
name|hasAttributeMargin
argument_list|()
condition|)
block|{
name|m_state
index|[
name|Margin
index|]
operator||=
name|HasDefaultValue
expr_stmt|;
name|m_defaultValues
index|[
name|Margin
index|]
operator|=
name|node
operator|->
name|attributeMargin
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|->
name|hasAttributeSpacing
argument_list|()
condition|)
block|{
name|m_state
index|[
name|Spacing
index|]
operator||=
name|HasDefaultValue
expr_stmt|;
name|m_defaultValues
index|[
name|Spacing
index|]
operator|=
name|node
operator|->
name|attributeSpacing
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|acceptLayoutFunction
name|void
name|WriteInitialization
operator|::
name|LayoutDefaultHandler
operator|::
name|acceptLayoutFunction
parameter_list|(
name|DomLayoutFunction
modifier|*
name|node
parameter_list|)
block|{
if|if
condition|(
operator|!
name|node
condition|)
return|return;
if|if
condition|(
name|node
operator|->
name|hasAttributeMargin
argument_list|()
condition|)
block|{
name|m_state
index|[
name|Margin
index|]
operator||=
name|HasDefaultFunction
expr_stmt|;
name|m_functions
index|[
name|Margin
index|]
operator|=
name|node
operator|->
name|attributeMargin
argument_list|()
expr_stmt|;
name|m_functions
index|[
name|Margin
index|]
operator|+=
name|QLatin1String
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|->
name|hasAttributeSpacing
argument_list|()
condition|)
block|{
name|m_state
index|[
name|Spacing
index|]
operator||=
name|HasDefaultFunction
expr_stmt|;
name|m_functions
index|[
name|Spacing
index|]
operator|=
name|node
operator|->
name|attributeSpacing
argument_list|()
expr_stmt|;
name|m_functions
index|[
name|Spacing
index|]
operator|+=
name|QLatin1String
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|writeContentsMargins
specifier|static
specifier|inline
name|void
name|writeContentsMargins
parameter_list|(
specifier|const
name|QString
modifier|&
name|indent
parameter_list|,
specifier|const
name|QString
modifier|&
name|objectName
parameter_list|,
name|int
name|value
parameter_list|,
name|QTextStream
modifier|&
name|str
parameter_list|)
block|{
name|QString
name|contentsMargins
decl_stmt|;
name|QTextStream
argument_list|(
operator|&
name|contentsMargins
argument_list|)
operator|<<
name|value
operator|<<
literal|", "
operator|<<
name|value
operator|<<
literal|", "
operator|<<
name|value
operator|<<
literal|", "
operator|<<
name|value
expr_stmt|;
name|writeSetter
argument_list|(
name|indent
argument_list|,
name|objectName
argument_list|,
name|QLatin1String
argument_list|(
literal|"setContentsMargins"
argument_list|)
argument_list|,
name|contentsMargins
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
DECL|function|writeProperty
name|void
name|WriteInitialization
operator|::
name|LayoutDefaultHandler
operator|::
name|writeProperty
parameter_list|(
name|int
name|p
parameter_list|,
specifier|const
name|QString
modifier|&
name|indent
parameter_list|,
specifier|const
name|QString
modifier|&
name|objectName
parameter_list|,
specifier|const
name|DomPropertyMap
modifier|&
name|properties
parameter_list|,
specifier|const
name|QString
modifier|&
name|propertyName
parameter_list|,
specifier|const
name|QString
modifier|&
name|setter
parameter_list|,
name|int
name|defaultStyleValue
parameter_list|,
name|bool
name|suppressDefault
parameter_list|,
name|QTextStream
modifier|&
name|str
parameter_list|)
specifier|const
block|{
comment|// User value
specifier|const
name|DomPropertyMap
operator|::
name|const_iterator
name|mit
init|=
name|properties
operator|.
name|constFind
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|found
init|=
name|mit
operator|!=
name|properties
operator|.
name|constEnd
argument_list|()
decl_stmt|;
if|if
condition|(
name|found
condition|)
block|{
specifier|const
name|int
name|value
init|=
name|mit
operator|.
name|value
argument_list|()
operator|->
name|elementNumber
argument_list|()
decl_stmt|;
comment|// Emulate the pre 4.3 behaviour: The value form default value was only used to determine
comment|// the default value, layout properties were always written
specifier|const
name|bool
name|useLayoutFunctionPre43
init|=
operator|!
name|suppressDefault
operator|&&
operator|(
name|m_state
index|[
name|p
index|]
operator|==
operator|(
name|HasDefaultFunction
operator||
name|HasDefaultValue
operator|)
operator|)
operator|&&
name|value
operator|==
name|m_defaultValues
index|[
name|p
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|useLayoutFunctionPre43
condition|)
block|{
name|bool
name|ifndefMac
init|=
operator|(
operator|!
operator|(
name|m_state
index|[
name|p
index|]
operator|&
operator|(
name|HasDefaultFunction
operator||
name|HasDefaultValue
operator|)
operator|)
operator|&&
name|value
operator|==
name|defaultStyleValue
operator|)
decl_stmt|;
if|if
condition|(
name|ifndefMac
condition|)
name|str
operator|<<
literal|"#ifndef Q_OS_MAC\n"
expr_stmt|;
if|if
condition|(
name|p
operator|==
name|Margin
condition|)
block|{
comment|// Use setContentsMargins for numeric values
name|writeContentsMargins
argument_list|(
name|indent
argument_list|,
name|objectName
argument_list|,
name|value
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeSetter
argument_list|(
name|indent
argument_list|,
name|objectName
argument_list|,
name|setter
argument_list|,
name|value
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ifndefMac
condition|)
name|str
operator|<<
literal|"#endif\n"
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|suppressDefault
condition|)
return|return;
comment|// get default.
if|if
condition|(
name|m_state
index|[
name|p
index|]
operator|&
name|HasDefaultFunction
condition|)
block|{
comment|// Do not use setContentsMargins to avoid repetitive evaluations.
name|writeSetter
argument_list|(
name|indent
argument_list|,
name|objectName
argument_list|,
name|setter
argument_list|,
name|m_functions
index|[
name|p
index|]
argument_list|,
name|str
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|m_state
index|[
name|p
index|]
operator|&
name|HasDefaultValue
condition|)
block|{
if|if
condition|(
name|p
operator|==
name|Margin
condition|)
block|{
comment|// Use setContentsMargins for numeric values
name|writeContentsMargins
argument_list|(
name|indent
argument_list|,
name|objectName
argument_list|,
name|m_defaultValues
index|[
name|p
index|]
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeSetter
argument_list|(
name|indent
argument_list|,
name|objectName
argument_list|,
name|setter
argument_list|,
name|m_defaultValues
index|[
name|p
index|]
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
DECL|function|writeProperties
name|void
name|WriteInitialization
operator|::
name|LayoutDefaultHandler
operator|::
name|writeProperties
parameter_list|(
specifier|const
name|QString
modifier|&
name|indent
parameter_list|,
specifier|const
name|QString
modifier|&
name|varName
parameter_list|,
specifier|const
name|DomPropertyMap
modifier|&
name|properties
parameter_list|,
name|int
name|marginType
parameter_list|,
name|bool
name|suppressMarginDefault
parameter_list|,
name|QTextStream
modifier|&
name|str
parameter_list|)
specifier|const
block|{
comment|// Write out properties and ignore the ones found in
comment|// subsequent writing of the property list.
name|int
name|defaultSpacing
init|=
name|marginType
operator|==
name|WriteInitialization
operator|::
name|Use43UiFile
condition|?
operator|-
literal|1
else|:
literal|6
decl_stmt|;
name|writeProperty
argument_list|(
name|Spacing
argument_list|,
name|indent
argument_list|,
name|varName
argument_list|,
name|properties
argument_list|,
name|QLatin1String
argument_list|(
literal|"spacing"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"setSpacing"
argument_list|)
argument_list|,
name|defaultSpacing
argument_list|,
literal|false
argument_list|,
name|str
argument_list|)
expr_stmt|;
comment|// We use 9 as TopLevelMargin, since Designer seem to always use 9.
specifier|static
specifier|const
name|int
name|layoutmargins
index|[
literal|4
index|]
init|=
block|{
operator|-
literal|1
block|,
literal|9
block|,
literal|9
block|,
literal|0
block|}
decl_stmt|;
name|writeProperty
argument_list|(
name|Margin
argument_list|,
name|indent
argument_list|,
name|varName
argument_list|,
name|properties
argument_list|,
name|QLatin1String
argument_list|(
literal|"margin"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"setMargin"
argument_list|)
argument_list|,
name|layoutmargins
index|[
name|marginType
index|]
argument_list|,
name|suppressMarginDefault
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
template|template
parameter_list|<
name|class
name|DomElement
parameter_list|>
comment|// (DomString, DomStringList)
DECL|function|needsTranslation
specifier|static
name|bool
name|needsTranslation
parameter_list|(
specifier|const
name|DomElement
modifier|*
name|element
parameter_list|)
block|{
if|if
condition|(
operator|!
name|element
condition|)
return|return
literal|false
return|;
return|return
operator|!
name|element
operator|->
name|hasAttributeNotr
argument_list|()
operator|||
operator|!
name|toBool
argument_list|(
name|element
operator|->
name|attributeNotr
argument_list|()
argument_list|)
return|;
block|}
comment|// ---  WriteInitialization
DECL|function|WriteInitialization
name|WriteInitialization
operator|::
name|WriteInitialization
parameter_list|(
name|Uic
modifier|*
name|uic
parameter_list|,
name|bool
name|activateScripts
parameter_list|)
member_init_list|:
name|m_uic
argument_list|(
name|uic
argument_list|)
member_init_list|,
name|m_driver
argument_list|(
name|uic
operator|->
name|driver
argument_list|()
argument_list|)
member_init_list|,
name|m_output
argument_list|(
name|uic
operator|->
name|output
argument_list|()
argument_list|)
member_init_list|,
name|m_option
argument_list|(
name|uic
operator|->
name|option
argument_list|()
argument_list|)
member_init_list|,
name|m_indent
argument_list|(
name|m_option
operator|.
name|indent
operator|+
name|m_option
operator|.
name|indent
argument_list|)
member_init_list|,
name|m_dindent
argument_list|(
name|m_indent
operator|+
name|m_option
operator|.
name|indent
argument_list|)
member_init_list|,
name|m_stdsetdef
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|m_layoutMarginType
argument_list|(
name|TopLevelMargin
argument_list|)
member_init_list|,
name|m_mainFormUsedInRetranslateUi
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_delayedOut
argument_list|(
operator|&
name|m_delayedInitialization
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
member_init_list|,
name|m_refreshOut
argument_list|(
operator|&
name|m_refreshInitialization
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
member_init_list|,
name|m_actionOut
argument_list|(
operator|&
name|m_delayedActionInitialization
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
member_init_list|,
name|m_activateScripts
argument_list|(
name|activateScripts
argument_list|)
member_init_list|,
name|m_layoutWidget
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_firstThemeIcon
argument_list|(
literal|true
argument_list|)
block|{ }
DECL|function|acceptUI
name|void
name|WriteInitialization
operator|::
name|acceptUI
parameter_list|(
name|DomUI
modifier|*
name|node
parameter_list|)
block|{
name|m_registeredImages
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_actionGroupChain
operator|.
name|push
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|m_widgetChain
operator|.
name|push
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|m_layoutChain
operator|.
name|push
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|acceptLayoutDefault
argument_list|(
name|node
operator|->
name|elementLayoutDefault
argument_list|()
argument_list|)
expr_stmt|;
name|acceptLayoutFunction
argument_list|(
name|node
operator|->
name|elementLayoutFunction
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|->
name|elementCustomWidgets
argument_list|()
condition|)
name|TreeWalker
operator|::
name|acceptCustomWidgets
argument_list|(
name|node
operator|->
name|elementCustomWidgets
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|->
name|elementImages
argument_list|()
condition|)
name|TreeWalker
operator|::
name|acceptImages
argument_list|(
name|node
operator|->
name|elementImages
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_option
operator|.
name|generateImplemetation
condition|)
name|m_output
operator|<<
literal|"#include<"
operator|<<
name|m_driver
operator|->
name|headerFileName
argument_list|()
operator|<<
literal|">\n\n"
expr_stmt|;
name|m_stdsetdef
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|node
operator|->
name|hasAttributeStdSetDef
argument_list|()
condition|)
name|m_stdsetdef
operator|=
name|node
operator|->
name|attributeStdSetDef
argument_list|()
expr_stmt|;
specifier|const
name|QString
name|className
init|=
name|node
operator|->
name|elementClass
argument_list|()
operator|+
name|m_option
operator|.
name|postfix
decl_stmt|;
name|m_generatedClass
operator|=
name|className
expr_stmt|;
specifier|const
name|QString
name|varName
init|=
name|m_driver
operator|->
name|findOrInsertWidget
argument_list|(
name|node
operator|->
name|elementWidget
argument_list|()
argument_list|)
decl_stmt|;
name|m_mainFormVarName
operator|=
name|varName
expr_stmt|;
name|m_registeredWidgets
operator|.
name|insert
argument_list|(
name|varName
argument_list|,
name|node
operator|->
name|elementWidget
argument_list|()
argument_list|)
expr_stmt|;
comment|// register the main widget
specifier|const
name|QString
name|widgetClassName
init|=
name|node
operator|->
name|elementWidget
argument_list|()
operator|->
name|attributeClass
argument_list|()
decl_stmt|;
name|m_output
operator|<<
name|m_option
operator|.
name|indent
operator|<<
literal|"void "
operator|<<
literal|"setupUi("
operator|<<
name|widgetClassName
operator|<<
literal|" *"
operator|<<
name|varName
operator|<<
literal|")\n"
operator|<<
name|m_option
operator|.
name|indent
operator|<<
literal|"{\n"
expr_stmt|;
if|if
condition|(
name|m_activateScripts
condition|)
name|writeSetupUIScriptVariableDeclarations
argument_list|(
name|m_indent
argument_list|,
name|m_output
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|connections
init|=
name|m_uic
operator|->
name|databaseInfo
argument_list|()
operator|->
name|connections
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connections
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|connection
init|=
name|connections
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|connection
operator|==
name|QLatin1String
argument_list|(
literal|"(default)"
argument_list|)
condition|)
continue|continue;
specifier|const
name|QString
name|varConn
init|=
name|connection
operator|+
name|QLatin1String
argument_list|(
literal|"Connection"
argument_list|)
decl_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
name|varConn
operator|<<
literal|" = QSqlDatabase::database("
operator|<<
name|writeString
argument_list|(
name|connection
argument_list|,
name|m_dindent
argument_list|)
operator|<<
literal|");\n"
expr_stmt|;
block|}
name|acceptWidget
argument_list|(
name|node
operator|->
name|elementWidget
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_buddies
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|openIfndef
argument_list|(
name|m_output
argument_list|,
name|QLatin1String
argument_list|(
name|shortcutDefineC
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_buddies
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|Buddy
modifier|&
name|b
init|=
name|m_buddies
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m_registeredWidgets
operator|.
name|contains
argument_list|(
name|b
operator|.
name|objName
argument_list|)
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%s: Warning: Buddy assignment: '%s' is not a valid widget.\n"
argument_list|,
name|qPrintable
argument_list|(
name|m_option
operator|.
name|messagePrefix
argument_list|()
argument_list|)
argument_list|,
name|b
operator|.
name|objName
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
operator|!
name|m_registeredWidgets
operator|.
name|contains
argument_list|(
name|b
operator|.
name|buddy
argument_list|)
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%s: Warning: Buddy assignment: '%s' is not a valid widget.\n"
argument_list|,
name|qPrintable
argument_list|(
name|m_option
operator|.
name|messagePrefix
argument_list|()
argument_list|)
argument_list|,
name|b
operator|.
name|buddy
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|m_output
operator|<<
name|m_indent
operator|<<
name|b
operator|.
name|objName
operator|<<
literal|"->setBuddy("
operator|<<
name|b
operator|.
name|buddy
operator|<<
literal|");\n"
expr_stmt|;
block|}
if|if
condition|(
name|m_buddies
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|closeIfndef
argument_list|(
name|m_output
argument_list|,
name|QLatin1String
argument_list|(
name|shortcutDefineC
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|->
name|elementTabStops
argument_list|()
condition|)
name|acceptTabStops
argument_list|(
name|node
operator|->
name|elementTabStops
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_delayedActionInitialization
operator|.
name|size
argument_list|()
condition|)
name|m_output
operator|<<
literal|"\n"
operator|<<
name|m_delayedActionInitialization
expr_stmt|;
name|m_output
operator|<<
literal|"\n"
operator|<<
name|m_indent
operator|<<
literal|"retranslateUi("
operator|<<
name|varName
operator|<<
literal|");\n"
expr_stmt|;
if|if
condition|(
name|node
operator|->
name|elementConnections
argument_list|()
condition|)
name|acceptConnections
argument_list|(
name|node
operator|->
name|elementConnections
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_delayedInitialization
operator|.
name|isEmpty
argument_list|()
condition|)
name|m_output
operator|<<
literal|"\n"
operator|<<
name|m_delayedInitialization
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
name|m_option
operator|.
name|autoConnection
condition|)
name|m_output
operator|<<
literal|"\n"
operator|<<
name|m_indent
operator|<<
literal|"QMetaObject::connectSlotsByName("
operator|<<
name|varName
operator|<<
literal|");\n"
expr_stmt|;
name|m_output
operator|<<
name|m_option
operator|.
name|indent
operator|<<
literal|"} // setupUi\n\n"
expr_stmt|;
if|if
condition|(
operator|!
name|m_mainFormUsedInRetranslateUi
condition|)
block|{
name|m_refreshInitialization
operator|+=
name|m_indent
expr_stmt|;
name|m_refreshInitialization
operator|+=
name|QLatin1String
argument_list|(
literal|"Q_UNUSED("
argument_list|)
expr_stmt|;
name|m_refreshInitialization
operator|+=
name|varName
expr_stmt|;
name|m_refreshInitialization
operator|+=
name|QLatin1String
argument_list|(
literal|");\n"
argument_list|)
expr_stmt|;
block|}
name|m_output
operator|<<
name|m_option
operator|.
name|indent
operator|<<
literal|"void "
operator|<<
literal|"retranslateUi("
operator|<<
name|widgetClassName
operator|<<
literal|" *"
operator|<<
name|varName
operator|<<
literal|")\n"
operator|<<
name|m_option
operator|.
name|indent
operator|<<
literal|"{\n"
operator|<<
name|m_refreshInitialization
operator|<<
name|m_option
operator|.
name|indent
operator|<<
literal|"} // retranslateUi\n\n"
expr_stmt|;
name|m_layoutChain
operator|.
name|pop
argument_list|()
expr_stmt|;
name|m_widgetChain
operator|.
name|pop
argument_list|()
expr_stmt|;
name|m_actionGroupChain
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
DECL|function|addWizardPage
name|void
name|WriteInitialization
operator|::
name|addWizardPage
parameter_list|(
specifier|const
name|QString
modifier|&
name|pageVarName
parameter_list|,
specifier|const
name|DomWidget
modifier|*
name|page
parameter_list|,
specifier|const
name|QString
modifier|&
name|parentWidget
parameter_list|)
block|{
comment|/* If the node has a (free-format) string "pageId" attribute (which could      * an integer or an enumeration value), use setPage(), else addPage(). */
name|QString
name|id
decl_stmt|;
specifier|const
name|DomPropertyList
name|attributes
init|=
name|page
operator|->
name|elementAttribute
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attributes
operator|.
name|empty
argument_list|()
condition|)
block|{
specifier|const
name|DomPropertyList
operator|::
name|const_iterator
name|acend
init|=
name|attributes
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
name|DomPropertyList
operator|::
name|const_iterator
name|it
init|=
name|attributes
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|acend
condition|;
operator|++
name|it
control|)
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|->
name|attributeName
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"pageId"
argument_list|)
condition|)
block|{
if|if
condition|(
specifier|const
name|DomString
modifier|*
name|ds
init|=
operator|(
operator|*
name|it
operator|)
operator|->
name|elementString
argument_list|()
condition|)
name|id
operator|=
name|ds
operator|->
name|text
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|parentWidget
operator|<<
literal|"->addPage("
operator|<<
name|pageVarName
operator|<<
literal|");\n"
expr_stmt|;
block|}
else|else
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|parentWidget
operator|<<
literal|"->setPage("
operator|<<
name|id
operator|<<
literal|", "
operator|<<
name|pageVarName
operator|<<
literal|");\n"
expr_stmt|;
block|}
block|}
DECL|function|acceptWidget
name|void
name|WriteInitialization
operator|::
name|acceptWidget
parameter_list|(
name|DomWidget
modifier|*
name|node
parameter_list|)
block|{
name|m_layoutMarginType
operator|=
name|m_widgetChain
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|?
name|TopLevelMargin
else|:
name|ChildMargin
expr_stmt|;
specifier|const
name|QString
name|className
init|=
name|node
operator|->
name|attributeClass
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|varName
init|=
name|m_driver
operator|->
name|findOrInsertWidget
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|m_registeredWidgets
operator|.
name|insert
argument_list|(
name|varName
argument_list|,
name|node
argument_list|)
expr_stmt|;
comment|// register the current widget
name|QString
name|parentWidget
decl_stmt|,
name|parentClass
decl_stmt|;
if|if
condition|(
name|m_widgetChain
operator|.
name|top
argument_list|()
condition|)
block|{
name|parentWidget
operator|=
name|m_driver
operator|->
name|findOrInsertWidget
argument_list|(
name|m_widgetChain
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|parentClass
operator|=
name|m_widgetChain
operator|.
name|top
argument_list|()
operator|->
name|attributeClass
argument_list|()
expr_stmt|;
block|}
specifier|const
name|QString
name|savedParentWidget
init|=
name|parentWidget
decl_stmt|;
if|if
condition|(
name|m_uic
operator|->
name|isContainer
argument_list|(
name|parentClass
argument_list|)
condition|)
name|parentWidget
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_widgetChain
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
name|m_output
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
literal|" = new "
operator|<<
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|realClassName
argument_list|(
name|className
argument_list|)
operator|<<
literal|'('
operator|<<
name|parentWidget
operator|<<
literal|");\n"
expr_stmt|;
name|parentWidget
operator|=
name|savedParentWidget
expr_stmt|;
if|if
condition|(
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QComboBox"
argument_list|)
argument_list|)
condition|)
block|{
name|initializeComboBox
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QListWidget"
argument_list|)
argument_list|)
condition|)
block|{
name|initializeListWidget
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QTreeWidget"
argument_list|)
argument_list|)
condition|)
block|{
name|initializeTreeWidget
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QTableWidget"
argument_list|)
argument_list|)
condition|)
block|{
name|initializeTableWidget
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_uic
operator|->
name|isButton
argument_list|(
name|className
argument_list|)
condition|)
name|addButtonGroup
argument_list|(
name|node
argument_list|,
name|varName
argument_list|)
expr_stmt|;
name|writeProperties
argument_list|(
name|varName
argument_list|,
name|className
argument_list|,
name|node
operator|->
name|elementProperty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QMenu"
argument_list|)
argument_list|)
operator|&&
name|parentWidget
operator|.
name|size
argument_list|()
condition|)
block|{
name|initializeMenu
argument_list|(
name|node
argument_list|,
name|parentWidget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|->
name|elementLayout
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|m_layoutChain
operator|.
name|push
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|m_layoutWidget
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|className
operator|==
name|QLatin1String
argument_list|(
literal|"QWidget"
argument_list|)
operator|&&
operator|!
name|node
operator|->
name|hasAttributeNative
argument_list|()
condition|)
block|{
if|if
condition|(
specifier|const
name|DomWidget
modifier|*
name|parentWidget
init|=
name|m_widgetChain
operator|.
name|top
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|parentClass
init|=
name|parentWidget
operator|->
name|attributeClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentClass
operator|!=
name|QLatin1String
argument_list|(
literal|"QMainWindow"
argument_list|)
operator|&&
operator|!
name|m_uic
operator|->
name|isCustomWidgetContainer
argument_list|(
name|parentClass
argument_list|)
operator|&&
operator|!
name|m_uic
operator|->
name|isContainer
argument_list|(
name|parentClass
argument_list|)
condition|)
name|m_layoutWidget
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|m_widgetChain
operator|.
name|push
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|m_layoutChain
operator|.
name|push
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|TreeWalker
operator|::
name|acceptWidget
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|m_layoutChain
operator|.
name|pop
argument_list|()
expr_stmt|;
name|m_widgetChain
operator|.
name|pop
argument_list|()
expr_stmt|;
name|m_layoutWidget
operator|=
literal|false
expr_stmt|;
specifier|const
name|DomPropertyMap
name|attributes
init|=
name|propertyMap
argument_list|(
name|node
operator|->
name|elementAttribute
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|pageDefaultString
init|=
name|QLatin1String
argument_list|(
literal|"Page"
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|parentClass
argument_list|,
name|QLatin1String
argument_list|(
literal|"QMainWindow"
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QMenuBar"
argument_list|)
argument_list|)
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|parentWidget
operator|<<
literal|"->setMenuBar("
operator|<<
name|varName
operator|<<
literal|");\n"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QToolBar"
argument_list|)
argument_list|)
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|parentWidget
operator|<<
literal|"->addToolBar("
operator|<<
name|toolBarAreaStringFromDOMAttributes
argument_list|(
name|attributes
argument_list|)
operator|<<
name|varName
operator|<<
literal|");\n"
expr_stmt|;
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|pbreak
init|=
name|attributes
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"toolBarBreak"
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|pbreak
operator|->
name|elementBool
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|parentWidget
operator|<<
literal|"->insertToolBarBreak("
operator|<<
name|varName
operator|<<
literal|");\n"
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QDockWidget"
argument_list|)
argument_list|)
condition|)
block|{
name|QString
name|area
decl_stmt|;
if|if
condition|(
name|DomProperty
modifier|*
name|pstyle
init|=
name|attributes
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"dockWidgetArea"
argument_list|)
argument_list|)
condition|)
block|{
name|area
operator|+=
name|QLatin1String
argument_list|(
literal|"static_cast<Qt::DockWidgetArea>("
argument_list|)
expr_stmt|;
name|area
operator|+=
name|QString
operator|::
name|number
argument_list|(
name|pstyle
operator|->
name|elementNumber
argument_list|()
argument_list|)
expr_stmt|;
name|area
operator|+=
name|QLatin1String
argument_list|(
literal|"), "
argument_list|)
expr_stmt|;
block|}
name|m_output
operator|<<
name|m_indent
operator|<<
name|parentWidget
operator|<<
literal|"->addDockWidget("
operator|<<
name|area
operator|<<
name|varName
operator|<<
literal|");\n"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QStatusBar"
argument_list|)
argument_list|)
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|parentWidget
operator|<<
literal|"->setStatusBar("
operator|<<
name|varName
operator|<<
literal|");\n"
expr_stmt|;
block|}
else|else
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|parentWidget
operator|<<
literal|"->setCentralWidget("
operator|<<
name|varName
operator|<<
literal|");\n"
expr_stmt|;
block|}
block|}
comment|// Check for addPageMethod of a custom plugin first
specifier|const
name|QString
name|addPageMethod
init|=
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|customWidgetAddPageMethod
argument_list|(
name|parentClass
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|addPageMethod
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|parentWidget
operator|<<
literal|"->"
operator|<<
name|addPageMethod
operator|<<
literal|'('
operator|<<
name|varName
operator|<<
literal|");\n"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|parentClass
argument_list|,
name|QLatin1String
argument_list|(
literal|"QStackedWidget"
argument_list|)
argument_list|)
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|parentWidget
operator|<<
literal|"->addWidget("
operator|<<
name|varName
operator|<<
literal|");\n"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|parentClass
argument_list|,
name|QLatin1String
argument_list|(
literal|"QToolBar"
argument_list|)
argument_list|)
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|parentWidget
operator|<<
literal|"->addWidget("
operator|<<
name|varName
operator|<<
literal|");\n"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|parentClass
argument_list|,
name|QLatin1String
argument_list|(
literal|"QDockWidget"
argument_list|)
argument_list|)
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|parentWidget
operator|<<
literal|"->setWidget("
operator|<<
name|varName
operator|<<
literal|");\n"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|parentClass
argument_list|,
name|QLatin1String
argument_list|(
literal|"QScrollArea"
argument_list|)
argument_list|)
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|parentWidget
operator|<<
literal|"->setWidget("
operator|<<
name|varName
operator|<<
literal|");\n"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|parentClass
argument_list|,
name|QLatin1String
argument_list|(
literal|"QSplitter"
argument_list|)
argument_list|)
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|parentWidget
operator|<<
literal|"->addWidget("
operator|<<
name|varName
operator|<<
literal|");\n"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|parentClass
argument_list|,
name|QLatin1String
argument_list|(
literal|"QMdiArea"
argument_list|)
argument_list|)
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|parentWidget
operator|<<
literal|"->addSubWindow("
operator|<<
name|varName
operator|<<
literal|");\n"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|parentClass
argument_list|,
name|QLatin1String
argument_list|(
literal|"QWizard"
argument_list|)
argument_list|)
condition|)
block|{
name|addWizardPage
argument_list|(
name|varName
argument_list|,
name|node
argument_list|,
name|parentWidget
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|parentClass
argument_list|,
name|QLatin1String
argument_list|(
literal|"QToolBox"
argument_list|)
argument_list|)
condition|)
block|{
name|QString
name|icon
decl_stmt|;
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|picon
init|=
name|attributes
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"icon"
argument_list|)
argument_list|)
condition|)
block|{
name|icon
operator|+=
name|QLatin1String
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|icon
operator|+=
name|iconCall
argument_list|(
name|picon
argument_list|)
expr_stmt|;
block|}
specifier|const
name|DomProperty
modifier|*
name|plabel
init|=
name|attributes
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"label"
argument_list|)
argument_list|)
decl_stmt|;
name|DomString
modifier|*
name|plabelString
init|=
name|plabel
condition|?
name|plabel
operator|->
name|elementString
argument_list|()
else|:
literal|0
decl_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
name|parentWidget
operator|<<
literal|"->addItem("
operator|<<
name|varName
operator|<<
name|icon
operator|<<
literal|", "
operator|<<
name|noTrCall
argument_list|(
name|plabelString
argument_list|,
name|pageDefaultString
argument_list|)
operator|<<
literal|");\n"
expr_stmt|;
name|autoTrOutput
argument_list|(
name|plabelString
argument_list|,
name|pageDefaultString
argument_list|)
operator|<<
name|m_indent
operator|<<
name|parentWidget
operator|<<
literal|"->setItemText("
operator|<<
name|parentWidget
operator|<<
literal|"->indexOf("
operator|<<
name|varName
operator|<<
literal|"), "
operator|<<
name|autoTrCall
argument_list|(
name|plabelString
argument_list|,
name|pageDefaultString
argument_list|)
operator|<<
literal|");\n"
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
if|if
condition|(
name|DomProperty
modifier|*
name|ptoolTip
init|=
name|attributes
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"toolTip"
argument_list|)
argument_list|)
condition|)
block|{
name|autoTrOutput
argument_list|(
name|ptoolTip
operator|->
name|elementString
argument_list|()
argument_list|)
operator|<<
name|m_indent
operator|<<
name|parentWidget
operator|<<
literal|"->setItemToolTip("
operator|<<
name|parentWidget
operator|<<
literal|"->indexOf("
operator|<<
name|varName
operator|<<
literal|"), "
operator|<<
name|autoTrCall
argument_list|(
name|ptoolTip
operator|->
name|elementString
argument_list|()
argument_list|)
operator|<<
literal|");\n"
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_TOOLTIP
block|}
elseif|else
if|if
condition|(
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|parentClass
argument_list|,
name|QLatin1String
argument_list|(
literal|"QTabWidget"
argument_list|)
argument_list|)
condition|)
block|{
name|QString
name|icon
decl_stmt|;
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|picon
init|=
name|attributes
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"icon"
argument_list|)
argument_list|)
condition|)
block|{
name|icon
operator|+=
name|QLatin1String
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|icon
operator|+=
name|iconCall
argument_list|(
name|picon
argument_list|)
expr_stmt|;
block|}
specifier|const
name|DomProperty
modifier|*
name|ptitle
init|=
name|attributes
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"title"
argument_list|)
argument_list|)
decl_stmt|;
name|DomString
modifier|*
name|ptitleString
init|=
name|ptitle
condition|?
name|ptitle
operator|->
name|elementString
argument_list|()
else|:
literal|0
decl_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
name|parentWidget
operator|<<
literal|"->addTab("
operator|<<
name|varName
operator|<<
name|icon
operator|<<
literal|", "
operator|<<
literal|"QString());\n"
expr_stmt|;
name|autoTrOutput
argument_list|(
name|ptitleString
argument_list|,
name|pageDefaultString
argument_list|)
operator|<<
name|m_indent
operator|<<
name|parentWidget
operator|<<
literal|"->setTabText("
operator|<<
name|parentWidget
operator|<<
literal|"->indexOf("
operator|<<
name|varName
operator|<<
literal|"), "
operator|<<
name|autoTrCall
argument_list|(
name|ptitleString
argument_list|,
name|pageDefaultString
argument_list|)
operator|<<
literal|");\n"
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|ptoolTip
init|=
name|attributes
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"toolTip"
argument_list|)
argument_list|)
condition|)
block|{
name|autoTrOutput
argument_list|(
name|ptoolTip
operator|->
name|elementString
argument_list|()
argument_list|)
operator|<<
name|m_indent
operator|<<
name|parentWidget
operator|<<
literal|"->setTabToolTip("
operator|<<
name|parentWidget
operator|<<
literal|"->indexOf("
operator|<<
name|varName
operator|<<
literal|"), "
operator|<<
name|autoTrCall
argument_list|(
name|ptoolTip
operator|->
name|elementString
argument_list|()
argument_list|)
operator|<<
literal|");\n"
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_TOOLTIP
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|pwhatsThis
init|=
name|attributes
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"whatsThis"
argument_list|)
argument_list|)
condition|)
block|{
name|autoTrOutput
argument_list|(
name|pwhatsThis
operator|->
name|elementString
argument_list|()
argument_list|)
operator|<<
name|m_indent
operator|<<
name|parentWidget
operator|<<
literal|"->setTabWhatsThis("
operator|<<
name|parentWidget
operator|<<
literal|"->indexOf("
operator|<<
name|varName
operator|<<
literal|"), "
operator|<<
name|autoTrCall
argument_list|(
name|pwhatsThis
operator|->
name|elementString
argument_list|()
argument_list|)
operator|<<
literal|");\n"
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_WHATSTHIS
block|}
comment|//
comment|// Special handling for qtableview/qtreeview fake header attributes
comment|//
specifier|static
name|QStringList
name|realPropertyNames
init|=
operator|(
name|QStringList
argument_list|()
operator|<<
name|QLatin1String
argument_list|(
literal|"visible"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"cascadingSectionResizes"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"defaultSectionSize"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"highlightSections"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"minimumSectionSize"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"showSortIndicator"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"stretchLastSection"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QTreeView"
argument_list|)
argument_list|)
operator|||
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QTreeWidget"
argument_list|)
argument_list|)
condition|)
block|{
name|DomPropertyList
name|headerProperties
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|realPropertyName
decl|,
name|realPropertyNames
control|)
block|{
specifier|const
name|QString
name|upperPropertyName
init|=
name|realPropertyName
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|+
name|realPropertyName
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|fakePropertyName
init|=
name|QLatin1String
argument_list|(
literal|"header"
argument_list|)
operator|+
name|upperPropertyName
decl_stmt|;
if|if
condition|(
name|DomProperty
modifier|*
name|fakeProperty
init|=
name|attributes
operator|.
name|value
argument_list|(
name|fakePropertyName
argument_list|)
condition|)
block|{
name|fakeProperty
operator|->
name|setAttributeName
argument_list|(
name|realPropertyName
argument_list|)
expr_stmt|;
name|headerProperties
operator|<<
name|fakeProperty
expr_stmt|;
block|}
block|}
name|writeProperties
argument_list|(
name|varName
operator|+
name|QLatin1String
argument_list|(
literal|"->header()"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"QHeaderView"
argument_list|)
argument_list|,
name|headerProperties
argument_list|,
name|WritePropertyIgnoreObjectName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QTableView"
argument_list|)
argument_list|)
operator|||
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QTableWidget"
argument_list|)
argument_list|)
condition|)
block|{
specifier|static
name|QStringList
name|headerPrefixes
init|=
operator|(
name|QStringList
argument_list|()
operator|<<
name|QLatin1String
argument_list|(
literal|"horizontalHeader"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"verticalHeader"
argument_list|)
operator|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|headerPrefix
decl|,
name|headerPrefixes
control|)
block|{
name|DomPropertyList
name|headerProperties
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|realPropertyName
decl|,
name|realPropertyNames
control|)
block|{
specifier|const
name|QString
name|upperPropertyName
init|=
name|realPropertyName
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|+
name|realPropertyName
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|fakePropertyName
init|=
name|headerPrefix
operator|+
name|upperPropertyName
decl_stmt|;
if|if
condition|(
name|DomProperty
modifier|*
name|fakeProperty
init|=
name|attributes
operator|.
name|value
argument_list|(
name|fakePropertyName
argument_list|)
condition|)
block|{
name|fakeProperty
operator|->
name|setAttributeName
argument_list|(
name|realPropertyName
argument_list|)
expr_stmt|;
name|headerProperties
operator|<<
name|fakeProperty
expr_stmt|;
block|}
block|}
name|writeProperties
argument_list|(
name|varName
operator|+
name|QLatin1String
argument_list|(
literal|"->"
argument_list|)
operator|+
name|headerPrefix
operator|+
name|QLatin1String
argument_list|(
literal|"()"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"QHeaderView"
argument_list|)
argument_list|,
name|headerProperties
argument_list|,
name|WritePropertyIgnoreObjectName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|node
operator|->
name|elementLayout
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|m_layoutChain
operator|.
name|pop
argument_list|()
expr_stmt|;
specifier|const
name|QStringList
name|zOrder
init|=
name|node
operator|->
name|elementZOrder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|zOrder
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|name
init|=
name|zOrder
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m_registeredWidgets
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%s: Warning: Z-order assignment: '%s' is not a valid widget.\n"
argument_list|,
name|qPrintable
argument_list|(
name|m_option
operator|.
name|messagePrefix
argument_list|()
argument_list|)
argument_list|,
name|name
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|m_output
operator|<<
name|m_indent
operator|<<
name|name
operator|<<
literal|"->raise();\n"
expr_stmt|;
block|}
block|}
DECL|function|addButtonGroup
name|void
name|WriteInitialization
operator|::
name|addButtonGroup
parameter_list|(
specifier|const
name|DomWidget
modifier|*
name|buttonNode
parameter_list|,
specifier|const
name|QString
modifier|&
name|varName
parameter_list|)
block|{
specifier|const
name|DomPropertyMap
name|attributes
init|=
name|propertyMap
argument_list|(
name|buttonNode
operator|->
name|elementAttribute
argument_list|()
argument_list|)
decl_stmt|;
comment|// Look up the button group name as specified in the attribute and find the uniquified name
specifier|const
name|DomProperty
modifier|*
name|prop
init|=
name|attributes
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"buttonGroup"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|prop
condition|)
return|return;
specifier|const
name|QString
name|attributeName
init|=
name|toString
argument_list|(
name|prop
operator|->
name|elementString
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|DomButtonGroup
modifier|*
name|group
init|=
name|m_driver
operator|->
name|findButtonGroup
argument_list|(
name|attributeName
argument_list|)
decl_stmt|;
comment|// Legacy feature: Create missing groups on the fly as the UIC button group feature
comment|// was present before the actual Designer support (4.5)
specifier|const
name|bool
name|createGroupOnTheFly
init|=
name|group
operator|==
literal|0
decl_stmt|;
if|if
condition|(
name|createGroupOnTheFly
condition|)
block|{
name|DomButtonGroup
modifier|*
name|newGroup
init|=
operator|new
name|DomButtonGroup
decl_stmt|;
name|newGroup
operator|->
name|setAttributeName
argument_list|(
name|attributeName
argument_list|)
expr_stmt|;
name|group
operator|=
name|newGroup
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%s: Warning: Creating button group `%s'\n"
argument_list|,
name|qPrintable
argument_list|(
name|m_option
operator|.
name|messagePrefix
argument_list|()
argument_list|)
argument_list|,
name|attributeName
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QString
name|groupName
init|=
name|m_driver
operator|->
name|findOrInsertButtonGroup
argument_list|(
name|group
argument_list|)
decl_stmt|;
comment|// Create on demand
if|if
condition|(
operator|!
name|m_buttonGroups
operator|.
name|contains
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|className
init|=
name|QLatin1String
argument_list|(
literal|"QButtonGroup"
argument_list|)
decl_stmt|;
name|m_output
operator|<<
name|m_indent
expr_stmt|;
if|if
condition|(
name|createGroupOnTheFly
condition|)
name|m_output
operator|<<
name|className
operator|<<
literal|" *"
expr_stmt|;
name|m_output
operator|<<
name|groupName
operator|<<
literal|" = new "
operator|<<
name|className
operator|<<
literal|'('
operator|<<
name|m_mainFormVarName
operator|<<
literal|");\n"
expr_stmt|;
name|m_buttonGroups
operator|.
name|insert
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
name|writeProperties
argument_list|(
name|groupName
argument_list|,
name|className
argument_list|,
name|group
operator|->
name|elementProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|m_output
operator|<<
name|m_indent
operator|<<
name|groupName
operator|<<
literal|"->addButton("
operator|<<
name|varName
operator|<<
literal|");\n"
expr_stmt|;
block|}
DECL|function|acceptLayout
name|void
name|WriteInitialization
operator|::
name|acceptLayout
parameter_list|(
name|DomLayout
modifier|*
name|node
parameter_list|)
block|{
specifier|const
name|QString
name|className
init|=
name|node
operator|->
name|attributeClass
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|varName
init|=
name|m_driver
operator|->
name|findOrInsertLayout
argument_list|(
name|node
argument_list|)
decl_stmt|;
specifier|const
name|DomPropertyMap
name|properties
init|=
name|propertyMap
argument_list|(
name|node
operator|->
name|elementProperty
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|oldLayoutProperties
init|=
name|properties
operator|.
name|constFind
argument_list|(
name|QLatin1String
argument_list|(
literal|"margin"
argument_list|)
argument_list|)
operator|!=
name|properties
operator|.
name|constEnd
argument_list|()
decl_stmt|;
name|bool
name|isGroupBox
init|=
literal|false
decl_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
literal|" = new "
operator|<<
name|className
operator|<<
literal|'('
expr_stmt|;
if|if
condition|(
operator|!
name|m_layoutChain
operator|.
name|top
argument_list|()
operator|&&
operator|!
name|isGroupBox
condition|)
name|m_output
operator|<<
name|m_driver
operator|->
name|findOrInsertWidget
argument_list|(
name|m_widgetChain
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|m_output
operator|<<
literal|");\n"
expr_stmt|;
comment|// Suppress margin on a read child layout
specifier|const
name|bool
name|suppressMarginDefault
init|=
name|m_layoutChain
operator|.
name|top
argument_list|()
decl_stmt|;
name|int
name|marginType
init|=
name|Use43UiFile
decl_stmt|;
if|if
condition|(
name|oldLayoutProperties
condition|)
name|marginType
operator|=
name|m_layoutMarginType
expr_stmt|;
name|m_LayoutDefaultHandler
operator|.
name|writeProperties
argument_list|(
name|m_indent
argument_list|,
name|varName
argument_list|,
name|properties
argument_list|,
name|marginType
argument_list|,
name|suppressMarginDefault
argument_list|,
name|m_output
argument_list|)
expr_stmt|;
name|m_layoutMarginType
operator|=
name|SubLayoutMargin
expr_stmt|;
name|DomPropertyList
name|propList
init|=
name|node
operator|->
name|elementProperty
argument_list|()
decl_stmt|;
name|DomPropertyList
name|newPropList
decl_stmt|;
if|if
condition|(
name|m_layoutWidget
condition|)
block|{
name|bool
name|left
decl_stmt|,
name|top
decl_stmt|,
name|right
decl_stmt|,
name|bottom
decl_stmt|;
name|left
operator|=
name|top
operator|=
name|right
operator|=
name|bottom
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|DomProperty
modifier|*
name|p
init|=
name|propList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|propertyName
init|=
name|p
operator|->
name|attributeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"leftMargin"
argument_list|)
operator|&&
name|p
operator|->
name|kind
argument_list|()
operator|==
name|DomProperty
operator|::
name|Number
condition|)
name|left
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"topMargin"
argument_list|)
operator|&&
name|p
operator|->
name|kind
argument_list|()
operator|==
name|DomProperty
operator|::
name|Number
condition|)
name|top
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"rightMargin"
argument_list|)
operator|&&
name|p
operator|->
name|kind
argument_list|()
operator|==
name|DomProperty
operator|::
name|Number
condition|)
name|right
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"bottomMargin"
argument_list|)
operator|&&
name|p
operator|->
name|kind
argument_list|()
operator|==
name|DomProperty
operator|::
name|Number
condition|)
name|bottom
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|left
condition|)
block|{
name|DomProperty
modifier|*
name|p
init|=
operator|new
name|DomProperty
argument_list|()
decl_stmt|;
name|p
operator|->
name|setAttributeName
argument_list|(
name|QLatin1String
argument_list|(
literal|"leftMargin"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|setElementNumber
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|newPropList
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|top
condition|)
block|{
name|DomProperty
modifier|*
name|p
init|=
operator|new
name|DomProperty
argument_list|()
decl_stmt|;
name|p
operator|->
name|setAttributeName
argument_list|(
name|QLatin1String
argument_list|(
literal|"topMargin"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|setElementNumber
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|newPropList
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|right
condition|)
block|{
name|DomProperty
modifier|*
name|p
init|=
operator|new
name|DomProperty
argument_list|()
decl_stmt|;
name|p
operator|->
name|setAttributeName
argument_list|(
name|QLatin1String
argument_list|(
literal|"rightMargin"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|setElementNumber
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|newPropList
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|bottom
condition|)
block|{
name|DomProperty
modifier|*
name|p
init|=
operator|new
name|DomProperty
argument_list|()
decl_stmt|;
name|p
operator|->
name|setAttributeName
argument_list|(
name|QLatin1String
argument_list|(
literal|"bottomMargin"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|setElementNumber
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|newPropList
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|m_layoutWidget
operator|=
literal|false
expr_stmt|;
block|}
name|propList
operator|.
name|append
argument_list|(
name|newPropList
argument_list|)
expr_stmt|;
name|writeProperties
argument_list|(
name|varName
argument_list|,
name|className
argument_list|,
name|propList
argument_list|,
name|WritePropertyIgnoreMargin
operator||
name|WritePropertyIgnoreSpacing
argument_list|)
expr_stmt|;
comment|// Clean up again:
name|propList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|newPropList
argument_list|)
expr_stmt|;
name|newPropList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_layoutChain
operator|.
name|push
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|TreeWalker
operator|::
name|acceptLayout
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|m_layoutChain
operator|.
name|pop
argument_list|()
expr_stmt|;
comment|// Stretch? (Unless we are compiling for UIC3)
specifier|const
name|QString
name|numberNull
init|=
name|QString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|)
decl_stmt|;
name|writePropertyList
argument_list|(
name|varName
argument_list|,
name|QLatin1String
argument_list|(
literal|"setStretch"
argument_list|)
argument_list|,
name|node
operator|->
name|attributeStretch
argument_list|()
argument_list|,
name|numberNull
argument_list|)
expr_stmt|;
name|writePropertyList
argument_list|(
name|varName
argument_list|,
name|QLatin1String
argument_list|(
literal|"setRowStretch"
argument_list|)
argument_list|,
name|node
operator|->
name|attributeRowStretch
argument_list|()
argument_list|,
name|numberNull
argument_list|)
expr_stmt|;
name|writePropertyList
argument_list|(
name|varName
argument_list|,
name|QLatin1String
argument_list|(
literal|"setColumnStretch"
argument_list|)
argument_list|,
name|node
operator|->
name|attributeColumnStretch
argument_list|()
argument_list|,
name|numberNull
argument_list|)
expr_stmt|;
name|writePropertyList
argument_list|(
name|varName
argument_list|,
name|QLatin1String
argument_list|(
literal|"setColumnMinimumWidth"
argument_list|)
argument_list|,
name|node
operator|->
name|attributeColumnMinimumWidth
argument_list|()
argument_list|,
name|numberNull
argument_list|)
expr_stmt|;
name|writePropertyList
argument_list|(
name|varName
argument_list|,
name|QLatin1String
argument_list|(
literal|"setRowMinimumHeight"
argument_list|)
argument_list|,
name|node
operator|->
name|attributeRowMinimumHeight
argument_list|()
argument_list|,
name|numberNull
argument_list|)
expr_stmt|;
block|}
comment|// Apply a comma-separated list of values using a function "setSomething(int idx, value)"
DECL|function|writePropertyList
name|void
name|WriteInitialization
operator|::
name|writePropertyList
parameter_list|(
specifier|const
name|QString
modifier|&
name|varName
parameter_list|,
specifier|const
name|QString
modifier|&
name|setFunction
parameter_list|,
specifier|const
name|QString
modifier|&
name|value
parameter_list|,
specifier|const
name|QString
modifier|&
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
specifier|const
name|QStringList
name|list
init|=
name|value
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|int
name|count
init|=
name|list
operator|.
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|!=
name|defaultValue
condition|)
name|m_output
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
literal|"->"
operator|<<
name|setFunction
operator|<<
literal|'('
operator|<<
name|i
operator|<<
literal|", "
operator|<<
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|<<
literal|");\n"
expr_stmt|;
block|}
DECL|function|acceptSpacer
name|void
name|WriteInitialization
operator|::
name|acceptSpacer
parameter_list|(
name|DomSpacer
modifier|*
name|node
parameter_list|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|m_driver
operator|->
name|findOrInsertSpacer
argument_list|(
name|node
argument_list|)
operator|<<
literal|" = "
expr_stmt|;
name|writeSpacerItem
argument_list|(
name|node
argument_list|,
name|m_output
argument_list|)
expr_stmt|;
name|m_output
operator|<<
literal|";\n"
expr_stmt|;
block|}
DECL|function|formLayoutRole
specifier|static
specifier|inline
name|QString
name|formLayoutRole
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|colspan
parameter_list|)
block|{
if|if
condition|(
name|colspan
operator|>
literal|1
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"QFormLayout::SpanningRole"
argument_list|)
return|;
return|return
name|column
operator|==
literal|0
condition|?
name|QLatin1String
argument_list|(
literal|"QFormLayout::LabelRole"
argument_list|)
else|:
name|QLatin1String
argument_list|(
literal|"QFormLayout::FieldRole"
argument_list|)
return|;
block|}
DECL|function|acceptLayoutItem
name|void
name|WriteInitialization
operator|::
name|acceptLayoutItem
parameter_list|(
name|DomLayoutItem
modifier|*
name|node
parameter_list|)
block|{
name|TreeWalker
operator|::
name|acceptLayoutItem
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|DomLayout
modifier|*
name|layout
init|=
name|m_layoutChain
operator|.
name|top
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|layout
condition|)
return|return;
specifier|const
name|QString
name|layoutName
init|=
name|m_driver
operator|->
name|findOrInsertLayout
argument_list|(
name|layout
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|itemName
init|=
name|m_driver
operator|->
name|findOrInsertLayoutItem
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|QString
name|addArgs
decl_stmt|;
name|QString
name|methodPrefix
init|=
name|QLatin1String
argument_list|(
literal|"add"
argument_list|)
decl_stmt|;
comment|//Consistent API-design galore!
if|if
condition|(
name|layout
operator|->
name|attributeClass
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"QGridLayout"
argument_list|)
condition|)
block|{
specifier|const
name|int
name|row
init|=
name|node
operator|->
name|attributeRow
argument_list|()
decl_stmt|;
specifier|const
name|int
name|col
init|=
name|node
operator|->
name|attributeColumn
argument_list|()
decl_stmt|;
specifier|const
name|int
name|rowSpan
init|=
name|node
operator|->
name|hasAttributeRowSpan
argument_list|()
condition|?
name|node
operator|->
name|attributeRowSpan
argument_list|()
else|:
literal|1
decl_stmt|;
specifier|const
name|int
name|colSpan
init|=
name|node
operator|->
name|hasAttributeColSpan
argument_list|()
condition|?
name|node
operator|->
name|attributeColSpan
argument_list|()
else|:
literal|1
decl_stmt|;
name|addArgs
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1, %2, %3, %4, %5"
argument_list|)
operator|.
name|arg
argument_list|(
name|itemName
argument_list|)
operator|.
name|arg
argument_list|(
name|row
argument_list|)
operator|.
name|arg
argument_list|(
name|col
argument_list|)
operator|.
name|arg
argument_list|(
name|rowSpan
argument_list|)
operator|.
name|arg
argument_list|(
name|colSpan
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|node
operator|->
name|attributeAlignment
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|addArgs
operator|+=
name|QLatin1String
argument_list|(
literal|", "
argument_list|)
operator|+
name|node
operator|->
name|attributeAlignment
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|layout
operator|->
name|attributeClass
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"QFormLayout"
argument_list|)
condition|)
block|{
name|methodPrefix
operator|=
name|QLatin1String
argument_list|(
literal|"set"
argument_list|)
expr_stmt|;
specifier|const
name|int
name|row
init|=
name|node
operator|->
name|attributeRow
argument_list|()
decl_stmt|;
specifier|const
name|int
name|colSpan
init|=
name|node
operator|->
name|hasAttributeColSpan
argument_list|()
condition|?
name|node
operator|->
name|attributeColSpan
argument_list|()
else|:
literal|1
decl_stmt|;
specifier|const
name|QString
name|role
init|=
name|formLayoutRole
argument_list|(
name|node
operator|->
name|attributeColumn
argument_list|()
argument_list|,
name|colSpan
argument_list|)
decl_stmt|;
name|addArgs
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1, %2, %3"
argument_list|)
operator|.
name|arg
argument_list|(
name|row
argument_list|)
operator|.
name|arg
argument_list|(
name|role
argument_list|)
operator|.
name|arg
argument_list|(
name|itemName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addArgs
operator|=
name|itemName
expr_stmt|;
if|if
condition|(
name|layout
operator|->
name|attributeClass
argument_list|()
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"Box"
argument_list|)
argument_list|)
operator|&&
operator|!
name|node
operator|->
name|attributeAlignment
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|addArgs
operator|+=
name|QLatin1String
argument_list|(
literal|", 0, "
argument_list|)
operator|+
name|node
operator|->
name|attributeAlignment
argument_list|()
expr_stmt|;
block|}
block|}
comment|// figure out "add" method
name|m_output
operator|<<
literal|"\n"
operator|<<
name|m_indent
operator|<<
name|layoutName
operator|<<
literal|"->"
expr_stmt|;
switch|switch
condition|(
name|node
operator|->
name|kind
argument_list|()
condition|)
block|{
case|case
name|DomLayoutItem
operator|::
name|Widget
case|:
name|m_output
operator|<<
name|methodPrefix
operator|<<
literal|"Widget("
operator|<<
name|addArgs
expr_stmt|;
break|break;
case|case
name|DomLayoutItem
operator|::
name|Layout
case|:
name|m_output
operator|<<
name|methodPrefix
operator|<<
literal|"Layout("
operator|<<
name|addArgs
expr_stmt|;
break|break;
case|case
name|DomLayoutItem
operator|::
name|Spacer
case|:
name|m_output
operator|<<
name|methodPrefix
operator|<<
literal|"Item("
operator|<<
name|addArgs
expr_stmt|;
break|break;
case|case
name|DomLayoutItem
operator|::
name|Unknown
case|:
name|Q_ASSERT
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
block|}
name|m_output
operator|<<
literal|");\n\n"
expr_stmt|;
block|}
DECL|function|acceptActionGroup
name|void
name|WriteInitialization
operator|::
name|acceptActionGroup
parameter_list|(
name|DomActionGroup
modifier|*
name|node
parameter_list|)
block|{
specifier|const
name|QString
name|actionName
init|=
name|m_driver
operator|->
name|findOrInsertActionGroup
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|QString
name|varName
init|=
name|m_driver
operator|->
name|findOrInsertWidget
argument_list|(
name|m_widgetChain
operator|.
name|top
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_actionGroupChain
operator|.
name|top
argument_list|()
condition|)
name|varName
operator|=
name|m_driver
operator|->
name|findOrInsertActionGroup
argument_list|(
name|m_actionGroupChain
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
name|actionName
operator|<<
literal|" = new QActionGroup("
operator|<<
name|varName
operator|<<
literal|");\n"
expr_stmt|;
name|writeProperties
argument_list|(
name|actionName
argument_list|,
name|QLatin1String
argument_list|(
literal|"QActionGroup"
argument_list|)
argument_list|,
name|node
operator|->
name|elementProperty
argument_list|()
argument_list|)
expr_stmt|;
name|m_actionGroupChain
operator|.
name|push
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|TreeWalker
operator|::
name|acceptActionGroup
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|m_actionGroupChain
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
DECL|function|acceptAction
name|void
name|WriteInitialization
operator|::
name|acceptAction
parameter_list|(
name|DomAction
modifier|*
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|->
name|hasAttributeMenu
argument_list|()
condition|)
return|return;
specifier|const
name|QString
name|actionName
init|=
name|m_driver
operator|->
name|findOrInsertAction
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|m_registeredActions
operator|.
name|insert
argument_list|(
name|actionName
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|QString
name|varName
init|=
name|m_driver
operator|->
name|findOrInsertWidget
argument_list|(
name|m_widgetChain
operator|.
name|top
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_actionGroupChain
operator|.
name|top
argument_list|()
condition|)
name|varName
operator|=
name|m_driver
operator|->
name|findOrInsertActionGroup
argument_list|(
name|m_actionGroupChain
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
name|actionName
operator|<<
literal|" = new QAction("
operator|<<
name|varName
operator|<<
literal|");\n"
expr_stmt|;
name|writeProperties
argument_list|(
name|actionName
argument_list|,
name|QLatin1String
argument_list|(
literal|"QAction"
argument_list|)
argument_list|,
name|node
operator|->
name|elementProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|acceptActionRef
name|void
name|WriteInitialization
operator|::
name|acceptActionRef
parameter_list|(
name|DomActionRef
modifier|*
name|node
parameter_list|)
block|{
name|QString
name|actionName
init|=
name|node
operator|->
name|attributeName
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|isSeparator
init|=
name|actionName
operator|==
name|QLatin1String
argument_list|(
literal|"separator"
argument_list|)
decl_stmt|;
name|bool
name|isMenu
init|=
literal|false
decl_stmt|;
name|QString
name|varName
init|=
name|m_driver
operator|->
name|findOrInsertWidget
argument_list|(
name|m_widgetChain
operator|.
name|top
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|actionName
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|m_widgetChain
operator|.
name|top
argument_list|()
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|m_driver
operator|->
name|actionGroupByName
argument_list|(
name|actionName
argument_list|)
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
specifier|const
name|DomWidget
modifier|*
name|w
init|=
name|m_driver
operator|->
name|widgetByName
argument_list|(
name|actionName
argument_list|)
condition|)
block|{
name|isMenu
operator|=
name|m_uic
operator|->
name|isMenu
argument_list|(
name|w
operator|->
name|attributeClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|m_driver
operator|->
name|actionByName
argument_list|(
name|actionName
argument_list|)
operator|||
name|isSeparator
operator|)
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%s: Warning: action `%s' not declared\n"
argument_list|,
name|qPrintable
argument_list|(
name|m_option
operator|.
name|messagePrefix
argument_list|()
argument_list|)
argument_list|,
name|actionName
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|m_widgetChain
operator|.
name|top
argument_list|()
operator|&&
name|isSeparator
condition|)
block|{
comment|// separator is always reserved!
name|m_actionOut
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
literal|"->addSeparator();\n"
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isMenu
condition|)
name|actionName
operator|+=
name|QLatin1String
argument_list|(
literal|"->menuAction()"
argument_list|)
expr_stmt|;
name|m_actionOut
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
literal|"->addAction("
operator|<<
name|actionName
operator|<<
literal|");\n"
expr_stmt|;
block|}
DECL|function|writeStringListProperty
name|QString
name|WriteInitialization
operator|::
name|writeStringListProperty
parameter_list|(
specifier|const
name|DomStringList
modifier|*
name|list
parameter_list|)
specifier|const
block|{
name|QString
name|propertyValue
decl_stmt|;
name|QTextStream
name|str
argument_list|(
operator|&
name|propertyValue
argument_list|)
decl_stmt|;
name|str
operator|<<
literal|"QStringList()"
expr_stmt|;
specifier|const
name|QStringList
name|values
init|=
name|list
operator|->
name|elementString
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|propertyValue
return|;
if|if
condition|(
name|needsTranslation
argument_list|(
name|list
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|comment
init|=
name|list
operator|->
name|attributeComment
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|str
operator|<<
literal|'\n'
operator|<<
name|m_indent
operator|<<
literal|"<< "
operator|<<
name|trCall
argument_list|(
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|comment
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|str
operator|<<
literal|"<< "
operator|<<
name|writeString
argument_list|(
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|m_dindent
argument_list|)
expr_stmt|;
block|}
return|return
name|propertyValue
return|;
block|}
DECL|function|writeProperties
name|void
name|WriteInitialization
operator|::
name|writeProperties
parameter_list|(
specifier|const
name|QString
modifier|&
name|varName
parameter_list|,
specifier|const
name|QString
modifier|&
name|className
parameter_list|,
specifier|const
name|DomPropertyList
modifier|&
name|lst
parameter_list|,
name|unsigned
name|flags
parameter_list|)
block|{
specifier|const
name|bool
name|isTopLevel
init|=
name|m_widgetChain
operator|.
name|count
argument_list|()
operator|==
literal|1
decl_stmt|;
if|if
condition|(
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QAxWidget"
argument_list|)
argument_list|)
condition|)
block|{
name|DomPropertyMap
name|properties
init|=
name|propertyMap
argument_list|(
name|lst
argument_list|)
decl_stmt|;
if|if
condition|(
name|properties
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"control"
argument_list|)
argument_list|)
condition|)
block|{
name|DomProperty
modifier|*
name|p
init|=
name|properties
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"control"
argument_list|)
argument_list|)
decl_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
literal|"->setControl("
operator|<<
name|writeString
argument_list|(
name|toString
argument_list|(
name|p
operator|->
name|elementString
argument_list|()
argument_list|)
argument_list|,
name|m_dindent
argument_list|)
operator|<<
literal|");\n"
expr_stmt|;
block|}
block|}
name|QString
name|indent
decl_stmt|;
if|if
condition|(
operator|!
name|m_widgetChain
operator|.
name|top
argument_list|()
condition|)
block|{
name|indent
operator|=
name|m_option
operator|.
name|indent
expr_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
literal|"if ("
operator|<<
name|varName
operator|<<
literal|"->objectName().isEmpty())\n"
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|WritePropertyIgnoreObjectName
operator|)
condition|)
name|m_output
operator|<<
name|m_indent
operator|<<
name|indent
operator|<<
name|varName
operator|<<
literal|"->setObjectName("
operator|<<
name|writeString
argument_list|(
name|varName
argument_list|,
name|m_dindent
argument_list|)
operator|<<
literal|");\n"
expr_stmt|;
name|int
name|leftMargin
decl_stmt|,
name|topMargin
decl_stmt|,
name|rightMargin
decl_stmt|,
name|bottomMargin
decl_stmt|;
name|leftMargin
operator|=
name|topMargin
operator|=
name|rightMargin
operator|=
name|bottomMargin
operator|=
operator|-
literal|1
expr_stmt|;
name|bool
name|frameShadowEncountered
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lst
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|DomProperty
modifier|*
name|p
init|=
name|lst
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkProperty
argument_list|(
name|m_option
operator|.
name|inputFile
argument_list|,
name|p
argument_list|)
condition|)
continue|continue;
name|QString
name|propertyName
init|=
name|p
operator|->
name|attributeName
argument_list|()
decl_stmt|;
name|QString
name|propertyValue
decl_stmt|;
name|bool
name|delayProperty
init|=
literal|false
decl_stmt|;
comment|// special case for the property `geometry': Do not use position
if|if
condition|(
name|isTopLevel
operator|&&
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"geometry"
argument_list|)
operator|&&
name|p
operator|->
name|elementRect
argument_list|()
condition|)
block|{
specifier|const
name|DomRect
modifier|*
name|r
init|=
name|p
operator|->
name|elementRect
argument_list|()
decl_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
literal|"->resize("
operator|<<
name|r
operator|->
name|elementWidth
argument_list|()
operator|<<
literal|", "
operator|<<
name|r
operator|->
name|elementHeight
argument_list|()
operator|<<
literal|");\n"
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"currentRow"
argument_list|)
comment|// QListWidget::currentRow
operator|&&
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QListWidget"
argument_list|)
argument_list|)
condition|)
block|{
name|m_delayedOut
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
literal|"->setCurrentRow("
operator|<<
name|p
operator|->
name|elementNumber
argument_list|()
operator|<<
literal|");\n"
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"currentIndex"
argument_list|)
comment|// set currentIndex later
operator|&&
operator|(
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QComboBox"
argument_list|)
argument_list|)
operator|||
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QStackedWidget"
argument_list|)
argument_list|)
operator|||
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QTabWidget"
argument_list|)
argument_list|)
operator|||
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QToolBox"
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|m_delayedOut
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
literal|"->setCurrentIndex("
operator|<<
name|p
operator|->
name|elementNumber
argument_list|()
operator|<<
literal|");\n"
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"tabSpacing"
argument_list|)
operator|&&
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QToolBox"
argument_list|)
argument_list|)
condition|)
block|{
name|m_delayedOut
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
literal|"->layout()->setSpacing("
operator|<<
name|p
operator|->
name|elementNumber
argument_list|()
operator|<<
literal|");\n"
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"control"
argument_list|)
comment|// ActiveQt support
operator|&&
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QAxWidget"
argument_list|)
argument_list|)
condition|)
block|{
comment|// already done ;)
continue|continue;
block|}
elseif|else
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"default"
argument_list|)
operator|&&
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QPushButton"
argument_list|)
argument_list|)
condition|)
block|{
comment|// QTBUG-44406: Setting of QPushButton::default needs to be delayed until the parent is set
name|delayProperty
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"database"
argument_list|)
operator|&&
name|p
operator|->
name|elementStringList
argument_list|()
condition|)
block|{
comment|// Sql support
continue|continue;
block|}
elseif|else
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"frameworkCode"
argument_list|)
operator|&&
name|p
operator|->
name|kind
argument_list|()
operator|==
name|DomProperty
operator|::
name|Bool
condition|)
block|{
comment|// Sql support
continue|continue;
block|}
elseif|else
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"orientation"
argument_list|)
operator|&&
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"Line"
argument_list|)
argument_list|)
condition|)
block|{
comment|// Line support
name|QString
name|shape
init|=
name|QLatin1String
argument_list|(
literal|"QFrame::HLine"
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|->
name|elementEnum
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"Qt::Vertical"
argument_list|)
condition|)
name|shape
operator|=
name|QLatin1String
argument_list|(
literal|"QFrame::VLine"
argument_list|)
expr_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
literal|"->setFrameShape("
operator|<<
name|shape
operator|<<
literal|");\n"
expr_stmt|;
comment|// QFrame Default is 'Plain'. Make the line 'Sunken' unless otherwise specified
if|if
condition|(
operator|!
name|frameShadowEncountered
condition|)
name|m_output
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
literal|"->setFrameShadow(QFrame::Sunken);\n"
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
operator|(
name|flags
operator|&
name|WritePropertyIgnoreMargin
operator|)
operator|&&
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"margin"
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
operator|(
name|flags
operator|&
name|WritePropertyIgnoreSpacing
operator|)
operator|&&
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"spacing"
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"leftMargin"
argument_list|)
operator|&&
name|p
operator|->
name|kind
argument_list|()
operator|==
name|DomProperty
operator|::
name|Number
condition|)
block|{
name|leftMargin
operator|=
name|p
operator|->
name|elementNumber
argument_list|()
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"topMargin"
argument_list|)
operator|&&
name|p
operator|->
name|kind
argument_list|()
operator|==
name|DomProperty
operator|::
name|Number
condition|)
block|{
name|topMargin
operator|=
name|p
operator|->
name|elementNumber
argument_list|()
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"rightMargin"
argument_list|)
operator|&&
name|p
operator|->
name|kind
argument_list|()
operator|==
name|DomProperty
operator|::
name|Number
condition|)
block|{
name|rightMargin
operator|=
name|p
operator|->
name|elementNumber
argument_list|()
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"bottomMargin"
argument_list|)
operator|&&
name|p
operator|->
name|kind
argument_list|()
operator|==
name|DomProperty
operator|::
name|Number
condition|)
block|{
name|bottomMargin
operator|=
name|p
operator|->
name|elementNumber
argument_list|()
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"numDigits"
argument_list|)
comment|// Deprecated in Qt 4, removed in Qt 5.
operator|&&
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QLCDNumber"
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Widget '%s': Deprecated property QLCDNumber::numDigits encountered. It has been replaced by QLCDNumber::digitCount."
argument_list|,
name|qPrintable
argument_list|(
name|varName
argument_list|)
argument_list|)
expr_stmt|;
name|propertyName
operator|=
name|QLatin1String
argument_list|(
literal|"digitCount"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"frameShadow"
argument_list|)
condition|)
name|frameShadowEncountered
operator|=
literal|true
expr_stmt|;
name|bool
name|stdset
init|=
name|m_stdsetdef
decl_stmt|;
if|if
condition|(
name|p
operator|->
name|hasAttributeStdset
argument_list|()
condition|)
name|stdset
operator|=
name|p
operator|->
name|attributeStdset
argument_list|()
expr_stmt|;
name|QString
name|setFunction
decl_stmt|;
if|if
condition|(
name|stdset
condition|)
block|{
name|setFunction
operator|=
name|QLatin1String
argument_list|(
literal|"->set"
argument_list|)
expr_stmt|;
name|setFunction
operator|+=
name|propertyName
operator|.
name|left
argument_list|(
literal|1
argument_list|)
operator|.
name|toUpper
argument_list|()
expr_stmt|;
name|setFunction
operator|+=
name|propertyName
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|setFunction
operator|+=
name|QLatin1Char
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setFunction
operator|=
name|QLatin1String
argument_list|(
literal|"->setProperty(\""
argument_list|)
expr_stmt|;
name|setFunction
operator|+=
name|propertyName
expr_stmt|;
name|setFunction
operator|+=
name|QLatin1String
argument_list|(
literal|"\", QVariant"
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|->
name|kind
argument_list|()
operator|==
name|DomProperty
operator|::
name|Enum
condition|)
name|setFunction
operator|+=
name|QLatin1String
argument_list|(
literal|"::fromValue"
argument_list|)
expr_stmt|;
name|setFunction
operator|+=
name|QLatin1Char
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
block|}
name|QString
name|varNewName
init|=
name|varName
decl_stmt|;
switch|switch
condition|(
name|p
operator|->
name|kind
argument_list|()
condition|)
block|{
case|case
name|DomProperty
operator|::
name|Bool
case|:
block|{
name|propertyValue
operator|=
name|p
operator|->
name|elementBool
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|DomProperty
operator|::
name|Color
case|:
name|propertyValue
operator|=
name|domColor2QString
argument_list|(
name|p
operator|->
name|elementColor
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DomProperty
operator|::
name|Cstring
case|:
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"buddy"
argument_list|)
operator|&&
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|className
argument_list|,
name|QLatin1String
argument_list|(
literal|"QLabel"
argument_list|)
argument_list|)
condition|)
block|{
name|Buddy
name|buddy
init|=
block|{
name|varName
block|,
name|p
operator|->
name|elementCstring
argument_list|()
block|}
decl_stmt|;
name|m_buddies
operator|.
name|append
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|buddy
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|stdset
condition|)
name|propertyValue
operator|=
name|fixString
argument_list|(
name|p
operator|->
name|elementCstring
argument_list|()
argument_list|,
name|m_dindent
argument_list|)
expr_stmt|;
else|else
block|{
name|propertyValue
operator|=
name|QLatin1String
argument_list|(
literal|"QByteArray("
argument_list|)
expr_stmt|;
name|propertyValue
operator|+=
name|fixString
argument_list|(
name|p
operator|->
name|elementCstring
argument_list|()
argument_list|,
name|m_dindent
argument_list|)
expr_stmt|;
name|propertyValue
operator|+=
name|QLatin1Char
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DomProperty
operator|::
name|Cursor
case|:
name|propertyValue
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QCursor(static_cast<Qt::CursorShape>(%1))"
argument_list|)
operator|.
name|arg
argument_list|(
name|p
operator|->
name|elementCursor
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DomProperty
operator|::
name|CursorShape
case|:
if|if
condition|(
name|p
operator|->
name|hasAttributeStdset
argument_list|()
operator|&&
operator|!
name|p
operator|->
name|attributeStdset
argument_list|()
condition|)
name|varNewName
operator|+=
name|QLatin1String
argument_list|(
literal|"->viewport()"
argument_list|)
expr_stmt|;
name|propertyValue
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QCursor(Qt::%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|p
operator|->
name|elementCursorShape
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DomProperty
operator|::
name|Enum
case|:
name|propertyValue
operator|=
name|p
operator|->
name|elementEnum
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|propertyValue
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"::"
argument_list|)
argument_list|)
condition|)
block|{
name|QString
name|scope
init|=
name|className
decl_stmt|;
name|scope
operator|+=
name|QLatin1String
argument_list|(
literal|"::"
argument_list|)
expr_stmt|;
name|propertyValue
operator|.
name|prepend
argument_list|(
name|scope
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DomProperty
operator|::
name|Set
case|:
name|propertyValue
operator|=
name|p
operator|->
name|elementSet
argument_list|()
expr_stmt|;
break|break;
case|case
name|DomProperty
operator|::
name|Font
case|:
name|propertyValue
operator|=
name|writeFontProperties
argument_list|(
name|p
operator|->
name|elementFont
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DomProperty
operator|::
name|IconSet
case|:
name|propertyValue
operator|=
name|writeIconProperties
argument_list|(
name|p
operator|->
name|elementIconSet
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DomProperty
operator|::
name|Pixmap
case|:
name|propertyValue
operator|=
name|pixCall
argument_list|(
name|p
argument_list|)
expr_stmt|;
break|break;
case|case
name|DomProperty
operator|::
name|Palette
case|:
block|{
specifier|const
name|DomPalette
modifier|*
name|pal
init|=
name|p
operator|->
name|elementPalette
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|paletteName
init|=
name|m_driver
operator|->
name|unique
argument_list|(
name|QLatin1String
argument_list|(
literal|"palette"
argument_list|)
argument_list|)
decl_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
literal|"QPalette "
operator|<<
name|paletteName
operator|<<
literal|";\n"
expr_stmt|;
name|writeColorGroup
argument_list|(
name|pal
operator|->
name|elementActive
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"QPalette::Active"
argument_list|)
argument_list|,
name|paletteName
argument_list|)
expr_stmt|;
name|writeColorGroup
argument_list|(
name|pal
operator|->
name|elementInactive
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"QPalette::Inactive"
argument_list|)
argument_list|,
name|paletteName
argument_list|)
expr_stmt|;
name|writeColorGroup
argument_list|(
name|pal
operator|->
name|elementDisabled
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"QPalette::Disabled"
argument_list|)
argument_list|,
name|paletteName
argument_list|)
expr_stmt|;
name|propertyValue
operator|=
name|paletteName
expr_stmt|;
break|break;
block|}
case|case
name|DomProperty
operator|::
name|Point
case|:
block|{
specifier|const
name|DomPoint
modifier|*
name|po
init|=
name|p
operator|->
name|elementPoint
argument_list|()
decl_stmt|;
name|propertyValue
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QPoint(%1, %2)"
argument_list|)
operator|.
name|arg
argument_list|(
name|po
operator|->
name|elementX
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|po
operator|->
name|elementY
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DomProperty
operator|::
name|PointF
case|:
block|{
specifier|const
name|DomPointF
modifier|*
name|pof
init|=
name|p
operator|->
name|elementPointF
argument_list|()
decl_stmt|;
name|propertyValue
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QPointF(%1, %2)"
argument_list|)
operator|.
name|arg
argument_list|(
name|pof
operator|->
name|elementX
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|pof
operator|->
name|elementY
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DomProperty
operator|::
name|Rect
case|:
block|{
specifier|const
name|DomRect
modifier|*
name|r
init|=
name|p
operator|->
name|elementRect
argument_list|()
decl_stmt|;
name|propertyValue
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QRect(%1, %2, %3, %4)"
argument_list|)
operator|.
name|arg
argument_list|(
name|r
operator|->
name|elementX
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|r
operator|->
name|elementY
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|r
operator|->
name|elementWidth
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|r
operator|->
name|elementHeight
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DomProperty
operator|::
name|RectF
case|:
block|{
specifier|const
name|DomRectF
modifier|*
name|rf
init|=
name|p
operator|->
name|elementRectF
argument_list|()
decl_stmt|;
name|propertyValue
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QRectF(%1, %2, %3, %4)"
argument_list|)
operator|.
name|arg
argument_list|(
name|rf
operator|->
name|elementX
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|rf
operator|->
name|elementY
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|rf
operator|->
name|elementWidth
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|rf
operator|->
name|elementHeight
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DomProperty
operator|::
name|Locale
case|:
block|{
specifier|const
name|DomLocale
modifier|*
name|locale
init|=
name|p
operator|->
name|elementLocale
argument_list|()
decl_stmt|;
name|propertyValue
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QLocale(QLocale::%1, QLocale::%2)"
argument_list|)
operator|.
name|arg
argument_list|(
name|locale
operator|->
name|attributeLanguage
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|locale
operator|->
name|attributeCountry
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DomProperty
operator|::
name|SizePolicy
case|:
block|{
specifier|const
name|QString
name|spName
init|=
name|writeSizePolicy
argument_list|(
name|p
operator|->
name|elementSizePolicy
argument_list|()
argument_list|)
decl_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
name|spName
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|".setHeightForWidth(%1->sizePolicy().hasHeightForWidth());\n"
argument_list|)
operator|.
name|arg
argument_list|(
name|varName
argument_list|)
expr_stmt|;
name|propertyValue
operator|=
name|spName
expr_stmt|;
break|break;
block|}
case|case
name|DomProperty
operator|::
name|Size
case|:
block|{
specifier|const
name|DomSize
modifier|*
name|s
init|=
name|p
operator|->
name|elementSize
argument_list|()
decl_stmt|;
name|propertyValue
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QSize(%1, %2)"
argument_list|)
operator|.
name|arg
argument_list|(
name|s
operator|->
name|elementWidth
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|s
operator|->
name|elementHeight
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DomProperty
operator|::
name|SizeF
case|:
block|{
specifier|const
name|DomSizeF
modifier|*
name|sf
init|=
name|p
operator|->
name|elementSizeF
argument_list|()
decl_stmt|;
name|propertyValue
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QSizeF(%1, %2)"
argument_list|)
operator|.
name|arg
argument_list|(
name|sf
operator|->
name|elementWidth
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|sf
operator|->
name|elementHeight
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DomProperty
operator|::
name|String
case|:
block|{
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"objectName"
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|v
init|=
name|p
operator|->
name|elementString
argument_list|()
operator|->
name|text
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
name|varName
condition|)
break|break;
comment|// ### qWarning("Deprecated: the property `objectName' is different from the variable name");
block|}
name|propertyValue
operator|=
name|autoTrCall
argument_list|(
name|p
operator|->
name|elementString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DomProperty
operator|::
name|Number
case|:
name|propertyValue
operator|=
name|QString
operator|::
name|number
argument_list|(
name|p
operator|->
name|elementNumber
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DomProperty
operator|::
name|UInt
case|:
name|propertyValue
operator|=
name|QString
operator|::
name|number
argument_list|(
name|p
operator|->
name|elementUInt
argument_list|()
argument_list|)
expr_stmt|;
name|propertyValue
operator|+=
name|QLatin1Char
argument_list|(
literal|'u'
argument_list|)
expr_stmt|;
break|break;
case|case
name|DomProperty
operator|::
name|LongLong
case|:
name|propertyValue
operator|=
name|QLatin1String
argument_list|(
literal|"Q_INT64_C("
argument_list|)
expr_stmt|;
name|propertyValue
operator|+=
name|QString
operator|::
name|number
argument_list|(
name|p
operator|->
name|elementLongLong
argument_list|()
argument_list|)
expr_stmt|;
name|propertyValue
operator|+=
name|QLatin1Char
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
empty_stmt|;
break|break;
case|case
name|DomProperty
operator|::
name|ULongLong
case|:
name|propertyValue
operator|=
name|QLatin1String
argument_list|(
literal|"Q_UINT64_C("
argument_list|)
expr_stmt|;
name|propertyValue
operator|+=
name|QString
operator|::
name|number
argument_list|(
name|p
operator|->
name|elementULongLong
argument_list|()
argument_list|)
expr_stmt|;
name|propertyValue
operator|+=
name|QLatin1Char
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
break|break;
case|case
name|DomProperty
operator|::
name|Float
case|:
name|propertyValue
operator|=
name|QString
operator|::
name|number
argument_list|(
name|p
operator|->
name|elementFloat
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DomProperty
operator|::
name|Double
case|:
name|propertyValue
operator|=
name|QString
operator|::
name|number
argument_list|(
name|p
operator|->
name|elementDouble
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DomProperty
operator|::
name|Char
case|:
block|{
specifier|const
name|DomChar
modifier|*
name|c
init|=
name|p
operator|->
name|elementChar
argument_list|()
decl_stmt|;
name|propertyValue
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QChar(%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|c
operator|->
name|elementUnicode
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DomProperty
operator|::
name|Date
case|:
block|{
specifier|const
name|DomDate
modifier|*
name|d
init|=
name|p
operator|->
name|elementDate
argument_list|()
decl_stmt|;
name|propertyValue
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QDate(%1, %2, %3)"
argument_list|)
operator|.
name|arg
argument_list|(
name|d
operator|->
name|elementYear
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|d
operator|->
name|elementMonth
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|d
operator|->
name|elementDay
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DomProperty
operator|::
name|Time
case|:
block|{
specifier|const
name|DomTime
modifier|*
name|t
init|=
name|p
operator|->
name|elementTime
argument_list|()
decl_stmt|;
name|propertyValue
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QTime(%1, %2, %3)"
argument_list|)
operator|.
name|arg
argument_list|(
name|t
operator|->
name|elementHour
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|t
operator|->
name|elementMinute
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|t
operator|->
name|elementSecond
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DomProperty
operator|::
name|DateTime
case|:
block|{
specifier|const
name|DomDateTime
modifier|*
name|dt
init|=
name|p
operator|->
name|elementDateTime
argument_list|()
decl_stmt|;
name|propertyValue
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QDateTime(QDate(%1, %2, %3), QTime(%4, %5, %6))"
argument_list|)
operator|.
name|arg
argument_list|(
name|dt
operator|->
name|elementYear
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|dt
operator|->
name|elementMonth
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|dt
operator|->
name|elementDay
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|dt
operator|->
name|elementHour
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|dt
operator|->
name|elementMinute
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|dt
operator|->
name|elementSecond
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DomProperty
operator|::
name|StringList
case|:
name|propertyValue
operator|=
name|writeStringListProperty
argument_list|(
name|p
operator|->
name|elementStringList
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DomProperty
operator|::
name|Url
case|:
block|{
specifier|const
name|DomUrl
modifier|*
name|u
init|=
name|p
operator|->
name|elementUrl
argument_list|()
decl_stmt|;
name|propertyValue
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QUrl(%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|writeString
argument_list|(
name|u
operator|->
name|elementString
argument_list|()
operator|->
name|text
argument_list|()
argument_list|,
name|m_dindent
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DomProperty
operator|::
name|Brush
case|:
name|propertyValue
operator|=
name|writeBrushInitialization
argument_list|(
name|p
operator|->
name|elementBrush
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DomProperty
operator|::
name|Unknown
case|:
break|break;
block|}
if|if
condition|(
name|propertyValue
operator|.
name|size
argument_list|()
condition|)
block|{
specifier|const
name|char
modifier|*
name|defineC
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"toolTip"
argument_list|)
condition|)
name|defineC
operator|=
name|toolTipDefineC
expr_stmt|;
elseif|else
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"whatsThis"
argument_list|)
condition|)
name|defineC
operator|=
name|whatsThisDefineC
expr_stmt|;
elseif|else
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"statusTip"
argument_list|)
condition|)
name|defineC
operator|=
name|statusTipDefineC
expr_stmt|;
elseif|else
if|if
condition|(
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"accessibleName"
argument_list|)
operator|||
name|propertyName
operator|==
name|QLatin1String
argument_list|(
literal|"accessibleDescription"
argument_list|)
condition|)
name|defineC
operator|=
name|accessibilityDefineC
expr_stmt|;
name|QTextStream
modifier|&
name|o
init|=
name|delayProperty
condition|?
name|m_delayedOut
else|:
name|autoTrOutput
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|defineC
condition|)
name|openIfndef
argument_list|(
name|o
argument_list|,
name|QLatin1String
argument_list|(
name|defineC
argument_list|)
argument_list|)
expr_stmt|;
name|o
operator|<<
name|m_indent
operator|<<
name|varNewName
operator|<<
name|setFunction
operator|<<
name|propertyValue
expr_stmt|;
if|if
condition|(
operator|!
name|stdset
condition|)
name|o
operator|<<
literal|')'
expr_stmt|;
name|o
operator|<<
literal|");\n"
expr_stmt|;
if|if
condition|(
name|defineC
condition|)
name|closeIfndef
argument_list|(
name|o
argument_list|,
name|QLatin1String
argument_list|(
name|defineC
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|varName
operator|==
name|m_mainFormVarName
operator|&&
operator|&
name|o
operator|==
operator|&
name|m_refreshOut
condition|)
block|{
comment|// this is the only place (currently) where we output mainForm name to the retranslateUi().
comment|// Other places output merely instances of a certain class (which cannot be main form, e.g. QListWidget).
name|m_mainFormUsedInRetranslateUi
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|leftMargin
operator|!=
operator|-
literal|1
operator|||
name|topMargin
operator|!=
operator|-
literal|1
operator|||
name|rightMargin
operator|!=
operator|-
literal|1
operator|||
name|bottomMargin
operator|!=
operator|-
literal|1
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
name|QLatin1String
argument_list|(
literal|"->setContentsMargins("
argument_list|)
operator|<<
name|leftMargin
operator|<<
name|QLatin1String
argument_list|(
literal|", "
argument_list|)
operator|<<
name|topMargin
operator|<<
name|QLatin1String
argument_list|(
literal|", "
argument_list|)
operator|<<
name|rightMargin
operator|<<
name|QLatin1String
argument_list|(
literal|", "
argument_list|)
operator|<<
name|bottomMargin
operator|<<
name|QLatin1String
argument_list|(
literal|");\n"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|writeSizePolicy
name|QString
name|WriteInitialization
operator|::
name|writeSizePolicy
parameter_list|(
specifier|const
name|DomSizePolicy
modifier|*
name|sp
parameter_list|)
block|{
comment|// check cache
specifier|const
name|SizePolicyHandle
name|sizePolicyHandle
argument_list|(
name|sp
argument_list|)
decl_stmt|;
specifier|const
name|SizePolicyNameMap
operator|::
name|const_iterator
name|it
init|=
name|m_sizePolicyNameMap
operator|.
name|constFind
argument_list|(
name|sizePolicyHandle
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_sizePolicyNameMap
operator|.
name|constEnd
argument_list|()
condition|)
block|{
return|return
name|it
operator|.
name|value
argument_list|()
return|;
block|}
comment|// insert with new name
specifier|const
name|QString
name|spName
init|=
name|m_driver
operator|->
name|unique
argument_list|(
name|QLatin1String
argument_list|(
literal|"sizePolicy"
argument_list|)
argument_list|)
decl_stmt|;
name|m_sizePolicyNameMap
operator|.
name|insert
argument_list|(
name|sizePolicyHandle
argument_list|,
name|spName
argument_list|)
expr_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
literal|"QSizePolicy "
operator|<<
name|spName
expr_stmt|;
do|do
block|{
if|if
condition|(
name|sp
operator|->
name|hasElementHSizeType
argument_list|()
operator|&&
name|sp
operator|->
name|hasElementVSizeType
argument_list|()
condition|)
block|{
name|m_output
operator|<<
literal|"(static_cast<QSizePolicy::Policy>("
operator|<<
name|sp
operator|->
name|elementHSizeType
argument_list|()
operator|<<
literal|"), static_cast<QSizePolicy::Policy>("
operator|<<
name|sp
operator|->
name|elementVSizeType
argument_list|()
operator|<<
literal|"));\n"
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|sp
operator|->
name|hasAttributeHSizeType
argument_list|()
operator|&&
name|sp
operator|->
name|hasAttributeVSizeType
argument_list|()
condition|)
block|{
name|m_output
operator|<<
literal|"(QSizePolicy::"
operator|<<
name|sp
operator|->
name|attributeHSizeType
argument_list|()
operator|<<
literal|", QSizePolicy::"
operator|<<
name|sp
operator|->
name|attributeVSizeType
argument_list|()
operator|<<
literal|");\n"
expr_stmt|;
break|break;
block|}
name|m_output
operator|<<
literal|";\n"
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|m_output
operator|<<
name|m_indent
operator|<<
name|spName
operator|<<
literal|".setHorizontalStretch("
operator|<<
name|sp
operator|->
name|elementHorStretch
argument_list|()
operator|<<
literal|");\n"
expr_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
name|spName
operator|<<
literal|".setVerticalStretch("
operator|<<
name|sp
operator|->
name|elementVerStretch
argument_list|()
operator|<<
literal|");\n"
expr_stmt|;
return|return
name|spName
return|;
block|}
comment|// Check for a font with the given properties in the FontPropertiesNameMap
comment|// or create a new one. Returns the name.
DECL|function|writeFontProperties
name|QString
name|WriteInitialization
operator|::
name|writeFontProperties
parameter_list|(
specifier|const
name|DomFont
modifier|*
name|f
parameter_list|)
block|{
comment|// check cache
specifier|const
name|FontHandle
name|fontHandle
argument_list|(
name|f
argument_list|)
decl_stmt|;
specifier|const
name|FontPropertiesNameMap
operator|::
name|const_iterator
name|it
init|=
name|m_fontPropertiesNameMap
operator|.
name|constFind
argument_list|(
name|fontHandle
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_fontPropertiesNameMap
operator|.
name|constEnd
argument_list|()
condition|)
block|{
return|return
name|it
operator|.
name|value
argument_list|()
return|;
block|}
comment|// insert with new name
specifier|const
name|QString
name|fontName
init|=
name|m_driver
operator|->
name|unique
argument_list|(
name|QLatin1String
argument_list|(
literal|"font"
argument_list|)
argument_list|)
decl_stmt|;
name|m_fontPropertiesNameMap
operator|.
name|insert
argument_list|(
name|FontHandle
argument_list|(
name|f
argument_list|)
argument_list|,
name|fontName
argument_list|)
expr_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
literal|"QFont "
operator|<<
name|fontName
operator|<<
literal|";\n"
expr_stmt|;
if|if
condition|(
name|f
operator|->
name|hasElementFamily
argument_list|()
operator|&&
operator|!
name|f
operator|->
name|elementFamily
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|fontName
operator|<<
literal|".setFamily("
operator|<<
name|writeString
argument_list|(
name|f
operator|->
name|elementFamily
argument_list|()
argument_list|,
name|m_dindent
argument_list|)
operator|<<
literal|");\n"
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|->
name|hasElementPointSize
argument_list|()
operator|&&
name|f
operator|->
name|elementPointSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|fontName
operator|<<
literal|".setPointSize("
operator|<<
name|f
operator|->
name|elementPointSize
argument_list|()
operator|<<
literal|");\n"
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|->
name|hasElementBold
argument_list|()
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|fontName
operator|<<
literal|".setBold("
operator|<<
operator|(
name|f
operator|->
name|elementBold
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
operator|)
operator|<<
literal|");\n"
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|->
name|hasElementItalic
argument_list|()
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|fontName
operator|<<
literal|".setItalic("
operator|<<
operator|(
name|f
operator|->
name|elementItalic
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
operator|)
operator|<<
literal|");\n"
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|->
name|hasElementUnderline
argument_list|()
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|fontName
operator|<<
literal|".setUnderline("
operator|<<
operator|(
name|f
operator|->
name|elementUnderline
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
operator|)
operator|<<
literal|");\n"
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|->
name|hasElementWeight
argument_list|()
operator|&&
name|f
operator|->
name|elementWeight
argument_list|()
operator|>
literal|0
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|fontName
operator|<<
literal|".setWeight("
operator|<<
name|f
operator|->
name|elementWeight
argument_list|()
operator|<<
literal|");"
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|->
name|hasElementStrikeOut
argument_list|()
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|fontName
operator|<<
literal|".setStrikeOut("
operator|<<
operator|(
name|f
operator|->
name|elementStrikeOut
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
operator|)
operator|<<
literal|");\n"
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|->
name|hasElementKerning
argument_list|()
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|fontName
operator|<<
literal|".setKerning("
operator|<<
operator|(
name|f
operator|->
name|elementKerning
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
operator|)
operator|<<
literal|");\n"
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|->
name|hasElementAntialiasing
argument_list|()
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|fontName
operator|<<
literal|".setStyleStrategy("
operator|<<
operator|(
name|f
operator|->
name|elementAntialiasing
argument_list|()
condition|?
literal|"QFont::PreferDefault"
else|:
literal|"QFont::NoAntialias"
operator|)
operator|<<
literal|");\n"
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|->
name|hasElementStyleStrategy
argument_list|()
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|fontName
operator|<<
literal|".setStyleStrategy(QFont::"
operator|<<
name|f
operator|->
name|elementStyleStrategy
argument_list|()
operator|<<
literal|");\n"
expr_stmt|;
block|}
return|return
name|fontName
return|;
block|}
comment|// Post 4.4 write resource icon
DECL|function|writeResourceIcon
specifier|static
name|void
name|writeResourceIcon
parameter_list|(
name|QTextStream
modifier|&
name|output
parameter_list|,
specifier|const
name|QString
modifier|&
name|iconName
parameter_list|,
specifier|const
name|QString
modifier|&
name|indent
parameter_list|,
specifier|const
name|DomResourceIcon
modifier|*
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|->
name|hasElementNormalOff
argument_list|()
condition|)
name|output
operator|<<
name|indent
operator|<<
name|iconName
operator|<<
literal|".addFile("
operator|<<
name|writeString
argument_list|(
name|i
operator|->
name|elementNormalOff
argument_list|()
operator|->
name|text
argument_list|()
argument_list|,
name|indent
argument_list|)
operator|<<
literal|", QSize(), QIcon::Normal, QIcon::Off);\n"
expr_stmt|;
if|if
condition|(
name|i
operator|->
name|hasElementNormalOn
argument_list|()
condition|)
name|output
operator|<<
name|indent
operator|<<
name|iconName
operator|<<
literal|".addFile("
operator|<<
name|writeString
argument_list|(
name|i
operator|->
name|elementNormalOn
argument_list|()
operator|->
name|text
argument_list|()
argument_list|,
name|indent
argument_list|)
operator|<<
literal|", QSize(), QIcon::Normal, QIcon::On);\n"
expr_stmt|;
if|if
condition|(
name|i
operator|->
name|hasElementDisabledOff
argument_list|()
condition|)
name|output
operator|<<
name|indent
operator|<<
name|iconName
operator|<<
literal|".addFile("
operator|<<
name|writeString
argument_list|(
name|i
operator|->
name|elementDisabledOff
argument_list|()
operator|->
name|text
argument_list|()
argument_list|,
name|indent
argument_list|)
operator|<<
literal|", QSize(), QIcon::Disabled, QIcon::Off);\n"
expr_stmt|;
if|if
condition|(
name|i
operator|->
name|hasElementDisabledOn
argument_list|()
condition|)
name|output
operator|<<
name|indent
operator|<<
name|iconName
operator|<<
literal|".addFile("
operator|<<
name|writeString
argument_list|(
name|i
operator|->
name|elementDisabledOn
argument_list|()
operator|->
name|text
argument_list|()
argument_list|,
name|indent
argument_list|)
operator|<<
literal|", QSize(), QIcon::Disabled, QIcon::On);\n"
expr_stmt|;
if|if
condition|(
name|i
operator|->
name|hasElementActiveOff
argument_list|()
condition|)
name|output
operator|<<
name|indent
operator|<<
name|iconName
operator|<<
literal|".addFile("
operator|<<
name|writeString
argument_list|(
name|i
operator|->
name|elementActiveOff
argument_list|()
operator|->
name|text
argument_list|()
argument_list|,
name|indent
argument_list|)
operator|<<
literal|", QSize(), QIcon::Active, QIcon::Off);\n"
expr_stmt|;
if|if
condition|(
name|i
operator|->
name|hasElementActiveOn
argument_list|()
condition|)
name|output
operator|<<
name|indent
operator|<<
name|iconName
operator|<<
literal|".addFile("
operator|<<
name|writeString
argument_list|(
name|i
operator|->
name|elementActiveOn
argument_list|()
operator|->
name|text
argument_list|()
argument_list|,
name|indent
argument_list|)
operator|<<
literal|", QSize(), QIcon::Active, QIcon::On);\n"
expr_stmt|;
if|if
condition|(
name|i
operator|->
name|hasElementSelectedOff
argument_list|()
condition|)
name|output
operator|<<
name|indent
operator|<<
name|iconName
operator|<<
literal|".addFile("
operator|<<
name|writeString
argument_list|(
name|i
operator|->
name|elementSelectedOff
argument_list|()
operator|->
name|text
argument_list|()
argument_list|,
name|indent
argument_list|)
operator|<<
literal|", QSize(), QIcon::Selected, QIcon::Off);\n"
expr_stmt|;
if|if
condition|(
name|i
operator|->
name|hasElementSelectedOn
argument_list|()
condition|)
name|output
operator|<<
name|indent
operator|<<
name|iconName
operator|<<
literal|".addFile("
operator|<<
name|writeString
argument_list|(
name|i
operator|->
name|elementSelectedOn
argument_list|()
operator|->
name|text
argument_list|()
argument_list|,
name|indent
argument_list|)
operator|<<
literal|", QSize(), QIcon::Selected, QIcon::On);\n"
expr_stmt|;
block|}
DECL|function|writeIconProperties
name|QString
name|WriteInitialization
operator|::
name|writeIconProperties
parameter_list|(
specifier|const
name|DomResourceIcon
modifier|*
name|i
parameter_list|)
block|{
comment|// check cache
specifier|const
name|IconHandle
name|iconHandle
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|IconPropertiesNameMap
operator|::
name|const_iterator
name|it
init|=
name|m_iconPropertiesNameMap
operator|.
name|constFind
argument_list|(
name|iconHandle
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_iconPropertiesNameMap
operator|.
name|constEnd
argument_list|()
condition|)
block|{
return|return
name|it
operator|.
name|value
argument_list|()
return|;
block|}
comment|// insert with new name
specifier|const
name|QString
name|iconName
init|=
name|m_driver
operator|->
name|unique
argument_list|(
name|QLatin1String
argument_list|(
literal|"icon"
argument_list|)
argument_list|)
decl_stmt|;
name|m_iconPropertiesNameMap
operator|.
name|insert
argument_list|(
name|IconHandle
argument_list|(
name|i
argument_list|)
argument_list|,
name|iconName
argument_list|)
expr_stmt|;
if|if
condition|(
name|isIconFormat44
argument_list|(
name|i
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|->
name|attributeTheme
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// No theme: Write resource icon as is
name|m_output
operator|<<
name|m_indent
operator|<<
literal|"QIcon "
operator|<<
name|iconName
operator|<<
literal|";\n"
expr_stmt|;
name|writeResourceIcon
argument_list|(
name|m_output
argument_list|,
name|iconName
argument_list|,
name|m_indent
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Theme: Generate code to check the theme and default to resource
specifier|const
name|QString
name|themeIconName
init|=
name|writeString
argument_list|(
name|i
operator|->
name|attributeTheme
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|iconHasStatePixmaps
argument_list|(
name|i
argument_list|)
condition|)
block|{
comment|// Theme + default state pixmaps:
comment|// Generate code to check the theme and default to state pixmaps
name|m_output
operator|<<
name|m_indent
operator|<<
literal|"QIcon "
operator|<<
name|iconName
operator|<<
literal|";\n"
expr_stmt|;
specifier|const
name|char
name|themeNameStringVariableC
index|[]
init|=
literal|"iconThemeName"
decl_stmt|;
comment|// Store theme name in a variable
name|m_output
operator|<<
name|m_indent
expr_stmt|;
if|if
condition|(
name|m_firstThemeIcon
condition|)
block|{
comment|// Declare variable string
name|m_output
operator|<<
literal|"QString "
expr_stmt|;
name|m_firstThemeIcon
operator|=
literal|false
expr_stmt|;
block|}
name|m_output
operator|<<
name|themeNameStringVariableC
operator|<<
literal|" = "
operator|<<
name|themeIconName
operator|<<
literal|";\n"
expr_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
literal|"if (QIcon::hasThemeIcon("
operator|<<
name|themeNameStringVariableC
operator|<<
literal|")) {\n"
operator|<<
name|m_dindent
operator|<<
name|iconName
operator|<<
literal|" = QIcon::fromTheme("
operator|<<
name|themeNameStringVariableC
operator|<<
literal|");\n"
operator|<<
name|m_indent
operator|<<
literal|"} else {\n"
expr_stmt|;
name|writeResourceIcon
argument_list|(
name|m_output
argument_list|,
name|iconName
argument_list|,
name|m_dindent
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
literal|"}\n"
expr_stmt|;
block|}
else|else
block|{
comment|// Theme, but no state pixmaps: Construct from theme directly.
name|m_output
operator|<<
name|m_indent
operator|<<
literal|"QIcon "
operator|<<
name|iconName
operator|<<
literal|"(QIcon::fromTheme("
operator|<<
name|themeIconName
operator|<<
literal|"));\n"
expr_stmt|;
block|}
comment|// Theme, but not state
block|}
comment|//>= 4.4
block|}
else|else
block|{
comment|// pre-4.4 legacy
name|m_output
operator|<<
name|m_indent
operator|<<
literal|"const QIcon "
operator|<<
name|iconName
operator|<<
literal|" = "
operator|<<
name|pixCall
argument_list|(
name|QLatin1String
argument_list|(
literal|"QIcon"
argument_list|)
argument_list|,
name|i
operator|->
name|text
argument_list|()
argument_list|)
operator|<<
literal|";\n"
expr_stmt|;
block|}
return|return
name|iconName
return|;
block|}
DECL|function|domColor2QString
name|QString
name|WriteInitialization
operator|::
name|domColor2QString
parameter_list|(
specifier|const
name|DomColor
modifier|*
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|->
name|hasAttributeAlpha
argument_list|()
condition|)
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QColor(%1, %2, %3, %4)"
argument_list|)
operator|.
name|arg
argument_list|(
name|c
operator|->
name|elementRed
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|c
operator|->
name|elementGreen
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|c
operator|->
name|elementBlue
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|c
operator|->
name|attributeAlpha
argument_list|()
argument_list|)
return|;
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QColor(%1, %2, %3)"
argument_list|)
operator|.
name|arg
argument_list|(
name|c
operator|->
name|elementRed
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|c
operator|->
name|elementGreen
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|c
operator|->
name|elementBlue
argument_list|()
argument_list|)
return|;
block|}
DECL|function|writeColorGroup
name|void
name|WriteInitialization
operator|::
name|writeColorGroup
parameter_list|(
name|DomColorGroup
modifier|*
name|colorGroup
parameter_list|,
specifier|const
name|QString
modifier|&
name|group
parameter_list|,
specifier|const
name|QString
modifier|&
name|paletteName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|colorGroup
condition|)
return|return;
comment|// old format
specifier|const
name|QList
argument_list|<
name|DomColor
modifier|*
argument_list|>
name|colors
init|=
name|colorGroup
operator|->
name|elementColor
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|colors
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|DomColor
modifier|*
name|color
init|=
name|colors
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
name|paletteName
operator|<<
literal|".setColor("
operator|<<
name|group
operator|<<
literal|", "
operator|<<
literal|"static_cast<QPalette::ColorRole>("
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
operator|<<
literal|')'
operator|<<
literal|", "
operator|<<
name|domColor2QString
argument_list|(
name|color
argument_list|)
operator|<<
literal|");\n"
expr_stmt|;
block|}
comment|// new format
specifier|const
name|QList
argument_list|<
name|DomColorRole
modifier|*
argument_list|>
name|colorRoles
init|=
name|colorGroup
operator|->
name|elementColorRole
argument_list|()
decl_stmt|;
name|QListIterator
argument_list|<
name|DomColorRole
modifier|*
argument_list|>
name|itRole
argument_list|(
name|colorRoles
argument_list|)
decl_stmt|;
while|while
condition|(
name|itRole
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|const
name|DomColorRole
modifier|*
name|colorRole
init|=
name|itRole
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|colorRole
operator|->
name|hasAttributeRole
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|brushName
init|=
name|writeBrushInitialization
argument_list|(
name|colorRole
operator|->
name|elementBrush
argument_list|()
argument_list|)
decl_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
name|paletteName
operator|<<
literal|".setBrush("
operator|<<
name|group
operator|<<
literal|", "
operator|<<
literal|"QPalette::"
operator|<<
name|colorRole
operator|->
name|attributeRole
argument_list|()
operator|<<
literal|", "
operator|<<
name|brushName
operator|<<
literal|");\n"
expr_stmt|;
block|}
block|}
block|}
comment|// Write initialization for brush unless it is found in the cache. Returns the name to use
comment|// in an expression.
DECL|function|writeBrushInitialization
name|QString
name|WriteInitialization
operator|::
name|writeBrushInitialization
parameter_list|(
specifier|const
name|DomBrush
modifier|*
name|brush
parameter_list|)
block|{
comment|// Simple solid, colored  brushes are cached
specifier|const
name|bool
name|solidColoredBrush
init|=
operator|!
name|brush
operator|->
name|hasAttributeBrushStyle
argument_list|()
operator|||
name|brush
operator|->
name|attributeBrushStyle
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SolidPattern"
argument_list|)
decl_stmt|;
name|uint
name|rgb
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|solidColoredBrush
condition|)
block|{
if|if
condition|(
specifier|const
name|DomColor
modifier|*
name|color
init|=
name|brush
operator|->
name|elementColor
argument_list|()
condition|)
block|{
name|rgb
operator|=
operator|(
operator|(
name|color
operator|->
name|elementRed
argument_list|()
operator|&
literal|0xFF
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|color
operator|->
name|elementGreen
argument_list|()
operator|&
literal|0xFF
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|color
operator|->
name|elementBlue
argument_list|()
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
name|color
operator|->
name|attributeAlpha
argument_list|()
operator|&
literal|0xFF
operator|)
operator|)
expr_stmt|;
specifier|const
name|ColorBrushHash
operator|::
name|const_iterator
name|cit
init|=
name|m_colorBrushHash
operator|.
name|constFind
argument_list|(
name|rgb
argument_list|)
decl_stmt|;
if|if
condition|(
name|cit
operator|!=
name|m_colorBrushHash
operator|.
name|constEnd
argument_list|()
condition|)
return|return
name|cit
operator|.
name|value
argument_list|()
return|;
block|}
block|}
comment|// Create and enter into cache if simple
specifier|const
name|QString
name|brushName
init|=
name|m_driver
operator|->
name|unique
argument_list|(
name|QLatin1String
argument_list|(
literal|"brush"
argument_list|)
argument_list|)
decl_stmt|;
name|writeBrush
argument_list|(
name|brush
argument_list|,
name|brushName
argument_list|)
expr_stmt|;
if|if
condition|(
name|solidColoredBrush
condition|)
name|m_colorBrushHash
operator|.
name|insert
argument_list|(
name|rgb
argument_list|,
name|brushName
argument_list|)
expr_stmt|;
return|return
name|brushName
return|;
block|}
DECL|function|writeBrush
name|void
name|WriteInitialization
operator|::
name|writeBrush
parameter_list|(
specifier|const
name|DomBrush
modifier|*
name|brush
parameter_list|,
specifier|const
name|QString
modifier|&
name|brushName
parameter_list|)
block|{
name|QString
name|style
init|=
name|QLatin1String
argument_list|(
literal|"SolidPattern"
argument_list|)
decl_stmt|;
if|if
condition|(
name|brush
operator|->
name|hasAttributeBrushStyle
argument_list|()
condition|)
name|style
operator|=
name|brush
operator|->
name|attributeBrushStyle
argument_list|()
expr_stmt|;
if|if
condition|(
name|style
operator|==
name|QLatin1String
argument_list|(
literal|"LinearGradientPattern"
argument_list|)
operator|||
name|style
operator|==
name|QLatin1String
argument_list|(
literal|"RadialGradientPattern"
argument_list|)
operator|||
name|style
operator|==
name|QLatin1String
argument_list|(
literal|"ConicalGradientPattern"
argument_list|)
condition|)
block|{
specifier|const
name|DomGradient
modifier|*
name|gradient
init|=
name|brush
operator|->
name|elementGradient
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|gradientType
init|=
name|gradient
operator|->
name|attributeType
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|gradientName
init|=
name|m_driver
operator|->
name|unique
argument_list|(
name|QLatin1String
argument_list|(
literal|"gradient"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|gradientType
operator|==
name|QLatin1String
argument_list|(
literal|"LinearGradient"
argument_list|)
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
literal|"QLinearGradient "
operator|<<
name|gradientName
operator|<<
literal|'('
operator|<<
name|gradient
operator|->
name|attributeStartX
argument_list|()
operator|<<
literal|", "
operator|<<
name|gradient
operator|->
name|attributeStartY
argument_list|()
operator|<<
literal|", "
operator|<<
name|gradient
operator|->
name|attributeEndX
argument_list|()
operator|<<
literal|", "
operator|<<
name|gradient
operator|->
name|attributeEndY
argument_list|()
operator|<<
literal|");\n"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|gradientType
operator|==
name|QLatin1String
argument_list|(
literal|"RadialGradient"
argument_list|)
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
literal|"QRadialGradient "
operator|<<
name|gradientName
operator|<<
literal|'('
operator|<<
name|gradient
operator|->
name|attributeCentralX
argument_list|()
operator|<<
literal|", "
operator|<<
name|gradient
operator|->
name|attributeCentralY
argument_list|()
operator|<<
literal|", "
operator|<<
name|gradient
operator|->
name|attributeRadius
argument_list|()
operator|<<
literal|", "
operator|<<
name|gradient
operator|->
name|attributeFocalX
argument_list|()
operator|<<
literal|", "
operator|<<
name|gradient
operator|->
name|attributeFocalY
argument_list|()
operator|<<
literal|");\n"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|gradientType
operator|==
name|QLatin1String
argument_list|(
literal|"ConicalGradient"
argument_list|)
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
literal|"QConicalGradient "
operator|<<
name|gradientName
operator|<<
literal|'('
operator|<<
name|gradient
operator|->
name|attributeCentralX
argument_list|()
operator|<<
literal|", "
operator|<<
name|gradient
operator|->
name|attributeCentralY
argument_list|()
operator|<<
literal|", "
operator|<<
name|gradient
operator|->
name|attributeAngle
argument_list|()
operator|<<
literal|");\n"
expr_stmt|;
block|}
name|m_output
operator|<<
name|m_indent
operator|<<
name|gradientName
operator|<<
literal|".setSpread(QGradient::"
operator|<<
name|gradient
operator|->
name|attributeSpread
argument_list|()
operator|<<
literal|");\n"
expr_stmt|;
if|if
condition|(
name|gradient
operator|->
name|hasAttributeCoordinateMode
argument_list|()
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|gradientName
operator|<<
literal|".setCoordinateMode(QGradient::"
operator|<<
name|gradient
operator|->
name|attributeCoordinateMode
argument_list|()
operator|<<
literal|");\n"
expr_stmt|;
block|}
specifier|const
name|QList
argument_list|<
name|DomGradientStop
modifier|*
argument_list|>
name|stops
init|=
name|gradient
operator|->
name|elementGradientStop
argument_list|()
decl_stmt|;
name|QListIterator
argument_list|<
name|DomGradientStop
modifier|*
argument_list|>
name|it
argument_list|(
name|stops
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|const
name|DomGradientStop
modifier|*
name|stop
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|const
name|DomColor
modifier|*
name|color
init|=
name|stop
operator|->
name|elementColor
argument_list|()
decl_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
name|gradientName
operator|<<
literal|".setColorAt("
operator|<<
name|stop
operator|->
name|attributePosition
argument_list|()
operator|<<
literal|", "
operator|<<
name|domColor2QString
argument_list|(
name|color
argument_list|)
operator|<<
literal|");\n"
expr_stmt|;
block|}
name|m_output
operator|<<
name|m_indent
operator|<<
literal|"QBrush "
operator|<<
name|brushName
operator|<<
literal|'('
operator|<<
name|gradientName
operator|<<
literal|");\n"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|style
operator|==
name|QLatin1String
argument_list|(
literal|"TexturePattern"
argument_list|)
condition|)
block|{
specifier|const
name|DomProperty
modifier|*
name|property
init|=
name|brush
operator|->
name|elementTexture
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|iconValue
init|=
name|iconCall
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
literal|"QBrush "
operator|<<
name|brushName
operator|<<
literal|" = QBrush("
operator|<<
name|iconValue
operator|<<
literal|");\n"
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|DomColor
modifier|*
name|color
init|=
name|brush
operator|->
name|elementColor
argument_list|()
decl_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
literal|"QBrush "
operator|<<
name|brushName
operator|<<
literal|'('
operator|<<
name|domColor2QString
argument_list|(
name|color
argument_list|)
operator|<<
literal|");\n"
expr_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
name|brushName
operator|<<
literal|".setStyle("
operator|<<
literal|"Qt::"
operator|<<
name|style
operator|<<
literal|");\n"
expr_stmt|;
block|}
block|}
DECL|function|acceptCustomWidget
name|void
name|WriteInitialization
operator|::
name|acceptCustomWidget
parameter_list|(
name|DomCustomWidget
modifier|*
name|node
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
DECL|function|acceptCustomWidgets
name|void
name|WriteInitialization
operator|::
name|acceptCustomWidgets
parameter_list|(
name|DomCustomWidgets
modifier|*
name|node
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
DECL|function|acceptTabStops
name|void
name|WriteInitialization
operator|::
name|acceptTabStops
parameter_list|(
name|DomTabStops
modifier|*
name|tabStops
parameter_list|)
block|{
name|QString
name|lastName
decl_stmt|;
specifier|const
name|QStringList
name|l
init|=
name|tabStops
operator|->
name|elementTabStop
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|name
init|=
name|l
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m_registeredWidgets
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%s: Warning: Tab-stop assignment: '%s' is not a valid widget.\n"
argument_list|,
name|qPrintable
argument_list|(
name|m_option
operator|.
name|messagePrefix
argument_list|()
argument_list|)
argument_list|,
name|name
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|lastName
operator|=
name|name
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
operator|||
name|lastName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|m_output
operator|<<
name|m_indent
operator|<<
literal|"QWidget::setTabOrder("
operator|<<
name|lastName
operator|<<
literal|", "
operator|<<
name|name
operator|<<
literal|");\n"
expr_stmt|;
name|lastName
operator|=
name|name
expr_stmt|;
block|}
block|}
DECL|function|iconCall
name|QString
name|WriteInitialization
operator|::
name|iconCall
parameter_list|(
specifier|const
name|DomProperty
modifier|*
name|icon
parameter_list|)
block|{
if|if
condition|(
name|icon
operator|->
name|kind
argument_list|()
operator|==
name|DomProperty
operator|::
name|IconSet
condition|)
return|return
name|writeIconProperties
argument_list|(
name|icon
operator|->
name|elementIconSet
argument_list|()
argument_list|)
return|;
return|return
name|pixCall
argument_list|(
name|icon
argument_list|)
return|;
block|}
DECL|function|pixCall
name|QString
name|WriteInitialization
operator|::
name|pixCall
parameter_list|(
specifier|const
name|DomProperty
modifier|*
name|p
parameter_list|)
specifier|const
block|{
name|QString
name|type
decl_stmt|,
name|s
decl_stmt|;
switch|switch
condition|(
name|p
operator|->
name|kind
argument_list|()
condition|)
block|{
case|case
name|DomProperty
operator|::
name|IconSet
case|:
name|type
operator|=
name|QLatin1String
argument_list|(
literal|"QIcon"
argument_list|)
expr_stmt|;
name|s
operator|=
name|p
operator|->
name|elementIconSet
argument_list|()
operator|->
name|text
argument_list|()
expr_stmt|;
break|break;
case|case
name|DomProperty
operator|::
name|Pixmap
case|:
name|type
operator|=
name|QLatin1String
argument_list|(
literal|"QPixmap"
argument_list|)
expr_stmt|;
name|s
operator|=
name|p
operator|->
name|elementPixmap
argument_list|()
operator|->
name|text
argument_list|()
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"%s: Warning: Unknown icon format encountered. The ui-file was generated with a too-recent version of Designer."
argument_list|,
name|qPrintable
argument_list|(
name|m_option
operator|.
name|messagePrefix
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QLatin1String
argument_list|(
literal|"QIcon()"
argument_list|)
return|;
break|break;
block|}
return|return
name|pixCall
argument_list|(
name|type
argument_list|,
name|s
argument_list|)
return|;
block|}
DECL|function|pixCall
name|QString
name|WriteInitialization
operator|::
name|pixCall
parameter_list|(
specifier|const
name|QString
modifier|&
name|t
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
specifier|const
block|{
name|QString
name|type
init|=
name|t
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|type
operator|+=
name|QLatin1String
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
return|return
name|type
return|;
block|}
if|if
condition|(
specifier|const
name|DomImage
modifier|*
name|image
init|=
name|findImage
argument_list|(
name|text
argument_list|)
condition|)
block|{
if|if
condition|(
name|m_option
operator|.
name|extractImages
condition|)
block|{
specifier|const
name|QString
name|format
init|=
name|image
operator|->
name|elementData
argument_list|()
operator|->
name|attributeFormat
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|extension
init|=
name|format
operator|.
name|left
argument_list|(
name|format
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|QString
name|rc
init|=
name|QLatin1String
argument_list|(
literal|"QPixmap(QString::fromUtf8(\":/"
argument_list|)
decl_stmt|;
name|rc
operator|+=
name|m_generatedClass
expr_stmt|;
name|rc
operator|+=
name|QLatin1String
argument_list|(
literal|"/images/"
argument_list|)
expr_stmt|;
name|rc
operator|+=
name|text
expr_stmt|;
name|rc
operator|+=
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|rc
operator|+=
name|extension
expr_stmt|;
name|rc
operator|+=
name|QLatin1String
argument_list|(
literal|"\"))"
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
name|QString
name|rc
init|=
name|WriteIconInitialization
operator|::
name|iconFromDataFunction
argument_list|()
decl_stmt|;
name|rc
operator|+=
name|QLatin1Char
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|rc
operator|+=
name|text
expr_stmt|;
name|rc
operator|+=
name|QLatin1String
argument_list|(
literal|"_ID)"
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
name|QString
name|pixFunc
init|=
name|m_uic
operator|->
name|pixmapFunction
argument_list|()
decl_stmt|;
if|if
condition|(
name|pixFunc
operator|.
name|isEmpty
argument_list|()
condition|)
name|pixFunc
operator|=
name|QLatin1String
argument_list|(
literal|"QString::fromUtf8"
argument_list|)
expr_stmt|;
name|type
operator|+=
name|QLatin1Char
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|type
operator|+=
name|pixFunc
expr_stmt|;
name|type
operator|+=
name|QLatin1Char
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|type
operator|+=
name|fixString
argument_list|(
name|text
argument_list|,
name|m_dindent
argument_list|)
expr_stmt|;
name|type
operator|+=
name|QLatin1String
argument_list|(
literal|"))"
argument_list|)
expr_stmt|;
return|return
name|type
return|;
block|}
DECL|function|initializeComboBox
name|void
name|WriteInitialization
operator|::
name|initializeComboBox
parameter_list|(
name|DomWidget
modifier|*
name|w
parameter_list|)
block|{
specifier|const
name|QString
name|varName
init|=
name|m_driver
operator|->
name|findOrInsertWidget
argument_list|(
name|w
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|className
init|=
name|w
operator|->
name|attributeClass
argument_list|()
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|DomItem
modifier|*
argument_list|>
name|items
init|=
name|w
operator|->
name|elementItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|items
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
comment|// If possible use qcombobox's addItems() which is much faster then a bunch of addItem() calls
name|bool
name|makeStringListCall
init|=
literal|true
decl_stmt|;
name|bool
name|translatable
init|=
literal|false
decl_stmt|;
name|QStringList
name|list
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|DomItem
modifier|*
name|item
init|=
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|DomPropertyMap
name|properties
init|=
name|propertyMap
argument_list|(
name|item
operator|->
name|elementProperty
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|DomProperty
modifier|*
name|text
init|=
name|properties
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"text"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|DomProperty
modifier|*
name|pixmap
init|=
name|properties
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"icon"
argument_list|)
argument_list|)
decl_stmt|;
name|bool
name|needsTr
init|=
name|needsTranslation
argument_list|(
name|text
operator|->
name|elementString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pixmap
operator|!=
literal|0
operator|||
operator|(
name|i
operator|>
literal|0
operator|&&
name|translatable
operator|!=
name|needsTr
operator|)
condition|)
block|{
name|makeStringListCall
operator|=
literal|false
expr_stmt|;
break|break;
block|}
name|translatable
operator|=
name|needsTr
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
name|autoTrCall
argument_list|(
name|text
operator|->
name|elementString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// fix me here
block|}
if|if
condition|(
name|makeStringListCall
condition|)
block|{
name|QTextStream
modifier|&
name|o
init|=
name|translatable
condition|?
name|m_refreshOut
else|:
name|m_output
decl_stmt|;
if|if
condition|(
name|translatable
condition|)
name|o
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
literal|"->clear();\n"
expr_stmt|;
name|o
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
literal|"->insertItems(0, QStringList()"
operator|<<
literal|'\n'
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|o
operator|<<
name|m_indent
operator|<<
literal|"<< "
operator|<<
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|<<
literal|"\n"
expr_stmt|;
name|o
operator|<<
name|m_indent
operator|<<
literal|");\n"
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|DomItem
modifier|*
name|item
init|=
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|DomPropertyMap
name|properties
init|=
name|propertyMap
argument_list|(
name|item
operator|->
name|elementProperty
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|DomProperty
modifier|*
name|text
init|=
name|properties
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"text"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|DomProperty
modifier|*
name|icon
init|=
name|properties
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"icon"
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|iconValue
decl_stmt|;
if|if
condition|(
name|icon
condition|)
name|iconValue
operator|=
name|iconCall
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
literal|"->addItem("
expr_stmt|;
if|if
condition|(
name|icon
condition|)
name|m_output
operator|<<
name|iconValue
operator|<<
literal|", "
expr_stmt|;
if|if
condition|(
name|needsTranslation
argument_list|(
name|text
operator|->
name|elementString
argument_list|()
argument_list|)
condition|)
block|{
name|m_output
operator|<<
literal|"QString());\n"
expr_stmt|;
name|m_refreshOut
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
literal|"->setItemText("
operator|<<
name|i
operator|<<
literal|", "
operator|<<
name|trCall
argument_list|(
name|text
operator|->
name|elementString
argument_list|()
argument_list|)
operator|<<
literal|");\n"
expr_stmt|;
block|}
else|else
block|{
name|m_output
operator|<<
name|noTrCall
argument_list|(
name|text
operator|->
name|elementString
argument_list|()
argument_list|)
operator|<<
literal|");\n"
expr_stmt|;
block|}
block|}
name|m_refreshOut
operator|<<
literal|"\n"
expr_stmt|;
block|}
block|}
DECL|function|disableSorting
name|QString
name|WriteInitialization
operator|::
name|disableSorting
parameter_list|(
name|DomWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|QString
modifier|&
name|varName
parameter_list|)
block|{
comment|// turn off sortingEnabled to force programmatic item order (setItem())
name|QString
name|tempName
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|elementItem
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tempName
operator|=
name|m_driver
operator|->
name|unique
argument_list|(
name|QLatin1String
argument_list|(
literal|"__sortingEnabled"
argument_list|)
argument_list|)
expr_stmt|;
name|m_refreshOut
operator|<<
literal|"\n"
expr_stmt|;
name|m_refreshOut
operator|<<
name|m_indent
operator|<<
literal|"const bool "
operator|<<
name|tempName
operator|<<
literal|" = "
operator|<<
name|varName
operator|<<
literal|"->isSortingEnabled();\n"
expr_stmt|;
name|m_refreshOut
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
literal|"->setSortingEnabled(false);\n"
expr_stmt|;
block|}
return|return
name|tempName
return|;
block|}
DECL|function|enableSorting
name|void
name|WriteInitialization
operator|::
name|enableSorting
parameter_list|(
name|DomWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|QString
modifier|&
name|varName
parameter_list|,
specifier|const
name|QString
modifier|&
name|tempName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|w
operator|->
name|elementItem
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|m_refreshOut
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
literal|"->setSortingEnabled("
operator|<<
name|tempName
operator|<<
literal|");\n\n"
expr_stmt|;
block|}
block|}
comment|/*  * Initializers are just strings containing the function call and need to be prepended  * the line indentation and the object they are supposed to initialize.  * String initializers come with a preprocessor conditional (ifdef), so the code  * compiles with QT_NO_xxx. A null pointer means no conditional. String initializers  * are written to the retranslateUi() function, others to setupUi().  */
comment|/*!     Create non-string inititializer.     \param value the value to initialize the attribute with. May be empty, in which case         the initializer is omitted.     See above for other parameters. */
DECL|function|addInitializer
name|void
name|WriteInitialization
operator|::
name|addInitializer
parameter_list|(
name|Item
modifier|*
name|item
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QString
modifier|&
name|value
parameter_list|,
specifier|const
name|QString
modifier|&
name|directive
parameter_list|,
name|bool
name|translatable
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
name|item
operator|->
name|addSetter
argument_list|(
name|QLatin1String
argument_list|(
literal|"->set"
argument_list|)
operator|+
name|name
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|+
name|name
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'('
argument_list|)
operator|+
operator|(
name|column
operator|<
literal|0
condition|?
name|QString
argument_list|()
else|:
name|QString
operator|::
name|number
argument_list|(
name|column
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|", "
argument_list|)
operator|)
operator|+
name|value
operator|+
name|QLatin1String
argument_list|(
literal|");"
argument_list|)
argument_list|,
name|directive
argument_list|,
name|translatable
argument_list|)
expr_stmt|;
block|}
comment|/*!     Create string inititializer.     \param initializers in/out list of inializers     \param properties map property name -> property to extract data from     \param name the property to extract     \param col the item column to generate the initializer for. This is relevant for         tree widgets only. If it is -1, no column index will be generated.     \param ifdef preprocessor symbol for disabling compilation of this initializer */
DECL|function|addStringInitializer
name|void
name|WriteInitialization
operator|::
name|addStringInitializer
parameter_list|(
name|Item
modifier|*
name|item
parameter_list|,
specifier|const
name|DomPropertyMap
modifier|&
name|properties
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QString
modifier|&
name|directive
parameter_list|)
specifier|const
block|{
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|p
init|=
name|properties
operator|.
name|value
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|DomString
modifier|*
name|str
init|=
name|p
operator|->
name|elementString
argument_list|()
decl_stmt|;
name|QString
name|text
init|=
name|toString
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|bool
name|translatable
init|=
name|needsTranslation
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|QString
name|value
init|=
name|autoTrCall
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|addInitializer
argument_list|(
name|item
argument_list|,
name|name
argument_list|,
name|column
argument_list|,
name|value
argument_list|,
name|directive
argument_list|,
name|translatable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|addBrushInitializer
name|void
name|WriteInitialization
operator|::
name|addBrushInitializer
parameter_list|(
name|Item
modifier|*
name|item
parameter_list|,
specifier|const
name|DomPropertyMap
modifier|&
name|properties
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|int
name|column
parameter_list|)
block|{
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|p
init|=
name|properties
operator|.
name|value
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|->
name|elementBrush
argument_list|()
condition|)
name|addInitializer
argument_list|(
name|item
argument_list|,
name|name
argument_list|,
name|column
argument_list|,
name|writeBrushInitialization
argument_list|(
name|p
operator|->
name|elementBrush
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|p
operator|->
name|elementColor
argument_list|()
condition|)
name|addInitializer
argument_list|(
name|item
argument_list|,
name|name
argument_list|,
name|column
argument_list|,
name|domColor2QString
argument_list|(
name|p
operator|->
name|elementColor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*!     Create inititializer for a flag value in the Qt namespace.     If the named property is not in the map, the initializer is omitted. */
DECL|function|addQtFlagsInitializer
name|void
name|WriteInitialization
operator|::
name|addQtFlagsInitializer
parameter_list|(
name|Item
modifier|*
name|item
parameter_list|,
specifier|const
name|DomPropertyMap
modifier|&
name|properties
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
block|{
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|p
init|=
name|properties
operator|.
name|value
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|QString
name|v
init|=
name|p
operator|->
name|elementSet
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|v
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|v
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'|'
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"|Qt::"
argument_list|)
argument_list|)
expr_stmt|;
name|addInitializer
argument_list|(
name|item
argument_list|,
name|name
argument_list|,
name|column
argument_list|,
name|QLatin1String
argument_list|(
literal|"Qt::"
argument_list|)
operator|+
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*!     Create inititializer for an enum value in the Qt namespace.     If the named property is not in the map, the initializer is omitted. */
DECL|function|addQtEnumInitializer
name|void
name|WriteInitialization
operator|::
name|addQtEnumInitializer
parameter_list|(
name|Item
modifier|*
name|item
parameter_list|,
specifier|const
name|DomPropertyMap
modifier|&
name|properties
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
block|{
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|p
init|=
name|properties
operator|.
name|value
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|QString
name|v
init|=
name|p
operator|->
name|elementEnum
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|v
operator|.
name|isEmpty
argument_list|()
condition|)
name|addInitializer
argument_list|(
name|item
argument_list|,
name|name
argument_list|,
name|column
argument_list|,
name|QLatin1String
argument_list|(
literal|"Qt::"
argument_list|)
operator|+
name|v
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*!     Create inititializers for all common properties that may be bound to a column. */
DECL|function|addCommonInitializers
name|void
name|WriteInitialization
operator|::
name|addCommonInitializers
parameter_list|(
name|Item
modifier|*
name|item
parameter_list|,
specifier|const
name|DomPropertyMap
modifier|&
name|properties
parameter_list|,
name|int
name|column
parameter_list|)
block|{
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|icon
init|=
name|properties
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"icon"
argument_list|)
argument_list|)
condition|)
name|addInitializer
argument_list|(
name|item
argument_list|,
name|QLatin1String
argument_list|(
literal|"icon"
argument_list|)
argument_list|,
name|column
argument_list|,
name|iconCall
argument_list|(
name|icon
argument_list|)
argument_list|)
expr_stmt|;
name|addBrushInitializer
argument_list|(
name|item
argument_list|,
name|properties
argument_list|,
name|QLatin1String
argument_list|(
literal|"foreground"
argument_list|)
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|addBrushInitializer
argument_list|(
name|item
argument_list|,
name|properties
argument_list|,
name|QLatin1String
argument_list|(
literal|"background"
argument_list|)
argument_list|,
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|font
init|=
name|properties
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"font"
argument_list|)
argument_list|)
condition|)
name|addInitializer
argument_list|(
name|item
argument_list|,
name|QLatin1String
argument_list|(
literal|"font"
argument_list|)
argument_list|,
name|column
argument_list|,
name|writeFontProperties
argument_list|(
name|font
operator|->
name|elementFont
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addQtFlagsInitializer
argument_list|(
name|item
argument_list|,
name|properties
argument_list|,
name|QLatin1String
argument_list|(
literal|"textAlignment"
argument_list|)
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|addQtEnumInitializer
argument_list|(
name|item
argument_list|,
name|properties
argument_list|,
name|QLatin1String
argument_list|(
literal|"checkState"
argument_list|)
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|addStringInitializer
argument_list|(
name|item
argument_list|,
name|properties
argument_list|,
name|QLatin1String
argument_list|(
literal|"text"
argument_list|)
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|addStringInitializer
argument_list|(
name|item
argument_list|,
name|properties
argument_list|,
name|QLatin1String
argument_list|(
literal|"toolTip"
argument_list|)
argument_list|,
name|column
argument_list|,
name|QLatin1String
argument_list|(
name|toolTipDefineC
argument_list|)
argument_list|)
expr_stmt|;
name|addStringInitializer
argument_list|(
name|item
argument_list|,
name|properties
argument_list|,
name|QLatin1String
argument_list|(
literal|"whatsThis"
argument_list|)
argument_list|,
name|column
argument_list|,
name|QLatin1String
argument_list|(
name|whatsThisDefineC
argument_list|)
argument_list|)
expr_stmt|;
name|addStringInitializer
argument_list|(
name|item
argument_list|,
name|properties
argument_list|,
name|QLatin1String
argument_list|(
literal|"statusTip"
argument_list|)
argument_list|,
name|column
argument_list|,
name|QLatin1String
argument_list|(
name|statusTipDefineC
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|initializeListWidget
name|void
name|WriteInitialization
operator|::
name|initializeListWidget
parameter_list|(
name|DomWidget
modifier|*
name|w
parameter_list|)
block|{
specifier|const
name|QString
name|varName
init|=
name|m_driver
operator|->
name|findOrInsertWidget
argument_list|(
name|w
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|className
init|=
name|w
operator|->
name|attributeClass
argument_list|()
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|DomItem
modifier|*
argument_list|>
name|items
init|=
name|w
operator|->
name|elementItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|items
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QString
name|tempName
init|=
name|disableSorting
argument_list|(
name|w
argument_list|,
name|varName
argument_list|)
decl_stmt|;
comment|// items
comment|// TODO: the generated code should be data-driven to reduce its size
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|DomItem
modifier|*
name|domItem
init|=
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|DomPropertyMap
name|properties
init|=
name|propertyMap
argument_list|(
name|domItem
operator|->
name|elementProperty
argument_list|()
argument_list|)
decl_stmt|;
name|Item
name|item
argument_list|(
name|QLatin1String
argument_list|(
literal|"QListWidgetItem"
argument_list|)
argument_list|,
name|m_indent
argument_list|,
name|m_output
argument_list|,
name|m_refreshOut
argument_list|,
name|m_driver
argument_list|)
decl_stmt|;
name|addQtFlagsInitializer
argument_list|(
operator|&
name|item
argument_list|,
name|properties
argument_list|,
name|QLatin1String
argument_list|(
literal|"flags"
argument_list|)
argument_list|)
expr_stmt|;
name|addCommonInitializers
argument_list|(
operator|&
name|item
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|item
operator|.
name|writeSetupUi
argument_list|(
name|varName
argument_list|)
expr_stmt|;
name|item
operator|.
name|writeRetranslateUi
argument_list|(
name|varName
operator|+
name|QLatin1String
argument_list|(
literal|"->item("
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|')'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|enableSorting
argument_list|(
name|w
argument_list|,
name|varName
argument_list|,
name|tempName
argument_list|)
expr_stmt|;
block|}
DECL|function|initializeTreeWidget
name|void
name|WriteInitialization
operator|::
name|initializeTreeWidget
parameter_list|(
name|DomWidget
modifier|*
name|w
parameter_list|)
block|{
specifier|const
name|QString
name|varName
init|=
name|m_driver
operator|->
name|findOrInsertWidget
argument_list|(
name|w
argument_list|)
decl_stmt|;
comment|// columns
name|Item
name|item
argument_list|(
name|QLatin1String
argument_list|(
literal|"QTreeWidgetItem"
argument_list|)
argument_list|,
name|m_indent
argument_list|,
name|m_output
argument_list|,
name|m_refreshOut
argument_list|,
name|m_driver
argument_list|)
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|DomColumn
modifier|*
argument_list|>
name|columns
init|=
name|w
operator|->
name|elementColumn
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|DomColumn
modifier|*
name|column
init|=
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|DomPropertyMap
name|properties
init|=
name|propertyMap
argument_list|(
name|column
operator|->
name|elementProperty
argument_list|()
argument_list|)
decl_stmt|;
name|addCommonInitializers
argument_list|(
operator|&
name|item
argument_list|,
name|properties
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|p
init|=
name|properties
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"text"
argument_list|)
argument_list|)
condition|)
block|{
name|DomString
modifier|*
name|str
init|=
name|p
operator|->
name|elementString
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
operator|&&
name|str
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|m_output
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
literal|"->headerItem()->setText("
operator|<<
name|i
operator|<<
literal|", QString());\n"
expr_stmt|;
block|}
block|}
specifier|const
name|QString
name|itemName
init|=
name|item
operator|.
name|writeSetupUi
argument_list|(
name|QString
argument_list|()
argument_list|,
name|Item
operator|::
name|DontConstruct
argument_list|)
decl_stmt|;
name|item
operator|.
name|writeRetranslateUi
argument_list|(
name|varName
operator|+
name|QLatin1String
argument_list|(
literal|"->headerItem()"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|itemName
operator|.
name|isNull
argument_list|()
condition|)
name|m_output
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
literal|"->setHeaderItem("
operator|<<
name|itemName
operator|<<
literal|");\n"
expr_stmt|;
if|if
condition|(
name|w
operator|->
name|elementItem
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|QString
name|tempName
init|=
name|disableSorting
argument_list|(
name|w
argument_list|,
name|varName
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|Item
modifier|*
argument_list|>
name|items
init|=
name|initializeTreeWidgetItems
argument_list|(
name|w
operator|->
name|elementItem
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Item
modifier|*
name|itm
init|=
name|items
index|[
name|i
index|]
decl_stmt|;
name|itm
operator|->
name|writeSetupUi
argument_list|(
name|varName
argument_list|)
expr_stmt|;
name|itm
operator|->
name|writeRetranslateUi
argument_list|(
name|varName
operator|+
name|QLatin1String
argument_list|(
literal|"->topLevelItem("
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|')'
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|itm
expr_stmt|;
block|}
name|enableSorting
argument_list|(
name|w
argument_list|,
name|varName
argument_list|,
name|tempName
argument_list|)
expr_stmt|;
block|}
comment|/*!     Create and write out initializers for tree widget items.     This function makes sure that only needed items are fetched (subject to preprocessor     conditionals), that each item is fetched from its parent widget/item exactly once     and that no temporary variables are created for items that are needed only once. As     fetches are built top-down from the root, but determining how often and under which     conditions an item is needed needs to be done bottom-up, the whole process makes     two passes, storing the intermediate result in a recursive StringInitializerListMap. */
DECL|function|initializeTreeWidgetItems
name|QList
argument_list|<
name|WriteInitialization
operator|::
name|Item
operator|*
argument_list|>
name|WriteInitialization
operator|::
name|initializeTreeWidgetItems
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomItem
modifier|*
argument_list|>
modifier|&
name|domItems
parameter_list|)
block|{
comment|// items
name|QList
argument_list|<
name|Item
modifier|*
argument_list|>
name|items
decl_stmt|;
specifier|const
name|int
name|numDomItems
init|=
name|domItems
operator|.
name|size
argument_list|()
decl_stmt|;
name|items
operator|.
name|reserve
argument_list|(
name|numDomItems
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDomItems
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|DomItem
modifier|*
name|domItem
init|=
name|domItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Item
modifier|*
name|item
init|=
operator|new
name|Item
argument_list|(
name|QLatin1String
argument_list|(
literal|"QTreeWidgetItem"
argument_list|)
argument_list|,
name|m_indent
argument_list|,
name|m_output
argument_list|,
name|m_refreshOut
argument_list|,
name|m_driver
argument_list|)
decl_stmt|;
name|items
operator|<<
name|item
expr_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|DomProperty
modifier|*
argument_list|>
name|map
decl_stmt|;
name|int
name|col
init|=
operator|-
literal|1
decl_stmt|;
specifier|const
name|DomPropertyList
name|properties
init|=
name|domItem
operator|->
name|elementProperty
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|properties
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|DomProperty
modifier|*
name|p
init|=
name|properties
operator|.
name|at
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|->
name|attributeName
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"text"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addCommonInitializers
argument_list|(
name|item
argument_list|,
name|map
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|col
operator|++
expr_stmt|;
block|}
name|map
operator|.
name|insert
argument_list|(
name|p
operator|->
name|attributeName
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|addCommonInitializers
argument_list|(
name|item
argument_list|,
name|map
argument_list|,
name|col
argument_list|)
expr_stmt|;
comment|// AbstractFromBuilder saves flags last, so they always end up in the last column's map.
name|addQtFlagsInitializer
argument_list|(
name|item
argument_list|,
name|map
argument_list|,
name|QLatin1String
argument_list|(
literal|"flags"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|Item
modifier|*
argument_list|>
name|subItems
init|=
name|initializeTreeWidgetItems
argument_list|(
name|domItem
operator|->
name|elementItem
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Item
modifier|*
name|subItem
range|:
name|subItems
control|)
name|item
operator|->
name|addChild
argument_list|(
name|subItem
argument_list|)
expr_stmt|;
block|}
return|return
name|items
return|;
block|}
DECL|function|initializeTableWidget
name|void
name|WriteInitialization
operator|::
name|initializeTableWidget
parameter_list|(
name|DomWidget
modifier|*
name|w
parameter_list|)
block|{
specifier|const
name|QString
name|varName
init|=
name|m_driver
operator|->
name|findOrInsertWidget
argument_list|(
name|w
argument_list|)
decl_stmt|;
comment|// columns
specifier|const
name|QList
argument_list|<
name|DomColumn
modifier|*
argument_list|>
name|columns
init|=
name|w
operator|->
name|elementColumn
argument_list|()
decl_stmt|;
if|if
condition|(
name|columns
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
literal|"if ("
operator|<<
name|varName
operator|<<
literal|"->columnCount()< "
operator|<<
name|columns
operator|.
name|size
argument_list|()
operator|<<
literal|")\n"
operator|<<
name|m_dindent
operator|<<
name|varName
operator|<<
literal|"->setColumnCount("
operator|<<
name|columns
operator|.
name|size
argument_list|()
operator|<<
literal|");\n"
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|DomColumn
modifier|*
name|column
init|=
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|column
operator|->
name|elementProperty
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|DomPropertyMap
name|properties
init|=
name|propertyMap
argument_list|(
name|column
operator|->
name|elementProperty
argument_list|()
argument_list|)
decl_stmt|;
name|Item
name|item
argument_list|(
name|QLatin1String
argument_list|(
literal|"QTableWidgetItem"
argument_list|)
argument_list|,
name|m_indent
argument_list|,
name|m_output
argument_list|,
name|m_refreshOut
argument_list|,
name|m_driver
argument_list|)
decl_stmt|;
name|addCommonInitializers
argument_list|(
operator|&
name|item
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|QString
name|itemName
init|=
name|item
operator|.
name|writeSetupUi
argument_list|(
name|QString
argument_list|()
argument_list|,
name|Item
operator|::
name|ConstructItemAndVariable
argument_list|)
decl_stmt|;
name|item
operator|.
name|writeRetranslateUi
argument_list|(
name|varName
operator|+
name|QLatin1String
argument_list|(
literal|"->horizontalHeaderItem("
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|')'
argument_list|)
argument_list|)
expr_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
literal|"->setHorizontalHeaderItem("
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
operator|<<
literal|", "
operator|<<
name|itemName
operator|<<
literal|");\n"
expr_stmt|;
block|}
block|}
comment|// rows
specifier|const
name|QList
argument_list|<
name|DomRow
modifier|*
argument_list|>
name|rows
init|=
name|w
operator|->
name|elementRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|rows
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
literal|"if ("
operator|<<
name|varName
operator|<<
literal|"->rowCount()< "
operator|<<
name|rows
operator|.
name|size
argument_list|()
operator|<<
literal|")\n"
operator|<<
name|m_dindent
operator|<<
name|varName
operator|<<
literal|"->setRowCount("
operator|<<
name|rows
operator|.
name|size
argument_list|()
operator|<<
literal|");\n"
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|DomRow
modifier|*
name|row
init|=
name|rows
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|row
operator|->
name|elementProperty
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|DomPropertyMap
name|properties
init|=
name|propertyMap
argument_list|(
name|row
operator|->
name|elementProperty
argument_list|()
argument_list|)
decl_stmt|;
name|Item
name|item
argument_list|(
name|QLatin1String
argument_list|(
literal|"QTableWidgetItem"
argument_list|)
argument_list|,
name|m_indent
argument_list|,
name|m_output
argument_list|,
name|m_refreshOut
argument_list|,
name|m_driver
argument_list|)
decl_stmt|;
name|addCommonInitializers
argument_list|(
operator|&
name|item
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|QString
name|itemName
init|=
name|item
operator|.
name|writeSetupUi
argument_list|(
name|QString
argument_list|()
argument_list|,
name|Item
operator|::
name|ConstructItemAndVariable
argument_list|)
decl_stmt|;
name|item
operator|.
name|writeRetranslateUi
argument_list|(
name|varName
operator|+
name|QLatin1String
argument_list|(
literal|"->verticalHeaderItem("
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|')'
argument_list|)
argument_list|)
expr_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
literal|"->setVerticalHeaderItem("
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
operator|<<
literal|", "
operator|<<
name|itemName
operator|<<
literal|");\n"
expr_stmt|;
block|}
block|}
comment|// items
name|QString
name|tempName
init|=
name|disableSorting
argument_list|(
name|w
argument_list|,
name|varName
argument_list|)
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|DomItem
modifier|*
argument_list|>
name|items
init|=
name|w
operator|->
name|elementItem
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|DomItem
modifier|*
name|cell
init|=
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|->
name|hasAttributeRow
argument_list|()
operator|&&
name|cell
operator|->
name|hasAttributeColumn
argument_list|()
operator|&&
operator|!
name|cell
operator|->
name|elementProperty
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|int
name|r
init|=
name|cell
operator|->
name|attributeRow
argument_list|()
decl_stmt|;
specifier|const
name|int
name|c
init|=
name|cell
operator|->
name|attributeColumn
argument_list|()
decl_stmt|;
specifier|const
name|DomPropertyMap
name|properties
init|=
name|propertyMap
argument_list|(
name|cell
operator|->
name|elementProperty
argument_list|()
argument_list|)
decl_stmt|;
name|Item
name|item
argument_list|(
name|QLatin1String
argument_list|(
literal|"QTableWidgetItem"
argument_list|)
argument_list|,
name|m_indent
argument_list|,
name|m_output
argument_list|,
name|m_refreshOut
argument_list|,
name|m_driver
argument_list|)
decl_stmt|;
name|addQtFlagsInitializer
argument_list|(
operator|&
name|item
argument_list|,
name|properties
argument_list|,
name|QLatin1String
argument_list|(
literal|"flags"
argument_list|)
argument_list|)
expr_stmt|;
name|addCommonInitializers
argument_list|(
operator|&
name|item
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|QString
name|itemName
init|=
name|item
operator|.
name|writeSetupUi
argument_list|(
name|QString
argument_list|()
argument_list|,
name|Item
operator|::
name|ConstructItemAndVariable
argument_list|)
decl_stmt|;
name|item
operator|.
name|writeRetranslateUi
argument_list|(
name|varName
operator|+
name|QLatin1String
argument_list|(
literal|"->item("
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|r
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|", "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|c
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|')'
argument_list|)
argument_list|)
expr_stmt|;
name|m_output
operator|<<
name|m_indent
operator|<<
name|varName
operator|<<
literal|"->setItem("
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|r
argument_list|)
operator|<<
literal|", "
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|c
argument_list|)
operator|<<
literal|", "
operator|<<
name|itemName
operator|<<
literal|");\n"
expr_stmt|;
block|}
block|}
name|enableSorting
argument_list|(
name|w
argument_list|,
name|varName
argument_list|,
name|tempName
argument_list|)
expr_stmt|;
block|}
DECL|function|trCall
name|QString
name|WriteInitialization
operator|::
name|trCall
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
specifier|const
name|QString
modifier|&
name|commentHint
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"QString()"
argument_list|)
return|;
name|QString
name|result
decl_stmt|;
specifier|const
name|QString
name|comment
init|=
name|commentHint
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|)
else|:
name|fixString
argument_list|(
name|commentHint
argument_list|,
name|m_dindent
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_option
operator|.
name|translateFunction
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|m_option
operator|.
name|idBased
condition|)
block|{
name|result
operator|=
name|QLatin1String
argument_list|(
literal|"qtTrId("
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|QLatin1String
argument_list|(
literal|"QApplication::translate(\""
argument_list|)
expr_stmt|;
name|result
operator|+=
name|m_generatedClass
expr_stmt|;
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|m_option
operator|.
name|translateFunction
expr_stmt|;
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
block|}
name|result
operator|+=
name|fixString
argument_list|(
name|str
argument_list|,
name|m_dindent
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_option
operator|.
name|idBased
condition|)
block|{
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|result
operator|+=
name|comment
expr_stmt|;
block|}
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|function|initializeMenu
name|void
name|WriteInitialization
operator|::
name|initializeMenu
parameter_list|(
name|DomWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|QString
modifier|&
comment|/*parentWidget*/
parameter_list|)
block|{
specifier|const
name|QString
name|menuName
init|=
name|m_driver
operator|->
name|findOrInsertWidget
argument_list|(
name|w
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|menuAction
init|=
name|menuName
operator|+
name|QLatin1String
argument_list|(
literal|"Action"
argument_list|)
decl_stmt|;
specifier|const
name|DomAction
modifier|*
name|action
init|=
name|m_driver
operator|->
name|actionByName
argument_list|(
name|menuAction
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|&&
name|action
operator|->
name|hasAttributeMenu
argument_list|()
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
name|menuAction
operator|<<
literal|" = "
operator|<<
name|menuName
operator|<<
literal|"->menuAction();\n"
expr_stmt|;
block|}
block|}
DECL|function|trCall
name|QString
name|WriteInitialization
operator|::
name|trCall
parameter_list|(
name|DomString
modifier|*
name|str
parameter_list|,
specifier|const
name|QString
modifier|&
name|defaultString
parameter_list|)
specifier|const
block|{
name|QString
name|value
init|=
name|defaultString
decl_stmt|;
name|QString
name|comment
decl_stmt|;
if|if
condition|(
name|str
condition|)
block|{
name|value
operator|=
name|toString
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|comment
operator|=
name|str
operator|->
name|attributeComment
argument_list|()
expr_stmt|;
block|}
return|return
name|trCall
argument_list|(
name|value
argument_list|,
name|comment
argument_list|)
return|;
block|}
DECL|function|noTrCall
name|QString
name|WriteInitialization
operator|::
name|noTrCall
parameter_list|(
name|DomString
modifier|*
name|str
parameter_list|,
specifier|const
name|QString
modifier|&
name|defaultString
parameter_list|)
specifier|const
block|{
name|QString
name|value
init|=
name|defaultString
decl_stmt|;
if|if
condition|(
operator|!
name|str
operator|&&
name|defaultString
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
if|if
condition|(
name|str
condition|)
name|value
operator|=
name|str
operator|->
name|text
argument_list|()
expr_stmt|;
return|return
name|writeString
argument_list|(
name|value
argument_list|,
name|m_dindent
argument_list|)
return|;
block|}
DECL|function|autoTrCall
name|QString
name|WriteInitialization
operator|::
name|autoTrCall
parameter_list|(
name|DomString
modifier|*
name|str
parameter_list|,
specifier|const
name|QString
modifier|&
name|defaultString
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|(
operator|!
name|str
operator|&&
operator|!
name|defaultString
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
name|needsTranslation
argument_list|(
name|str
argument_list|)
condition|)
return|return
name|trCall
argument_list|(
name|str
argument_list|,
name|defaultString
argument_list|)
return|;
return|return
name|noTrCall
argument_list|(
name|str
argument_list|,
name|defaultString
argument_list|)
return|;
block|}
DECL|function|autoTrOutput
name|QTextStream
modifier|&
name|WriteInitialization
operator|::
name|autoTrOutput
parameter_list|(
specifier|const
name|DomProperty
modifier|*
name|property
parameter_list|)
block|{
if|if
condition|(
specifier|const
name|DomString
modifier|*
name|str
init|=
name|property
operator|->
name|elementString
argument_list|()
condition|)
return|return
name|autoTrOutput
argument_list|(
name|str
argument_list|)
return|;
if|if
condition|(
specifier|const
name|DomStringList
modifier|*
name|list
init|=
name|property
operator|->
name|elementStringList
argument_list|()
condition|)
if|if
condition|(
name|needsTranslation
argument_list|(
name|list
argument_list|)
condition|)
return|return
name|m_refreshOut
return|;
return|return
name|m_output
return|;
block|}
DECL|function|autoTrOutput
name|QTextStream
modifier|&
name|WriteInitialization
operator|::
name|autoTrOutput
parameter_list|(
specifier|const
name|DomString
modifier|*
name|str
parameter_list|,
specifier|const
name|QString
modifier|&
name|defaultString
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|!
name|str
operator|&&
operator|!
name|defaultString
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
name|needsTranslation
argument_list|(
name|str
argument_list|)
condition|)
return|return
name|m_refreshOut
return|;
return|return
name|m_output
return|;
block|}
DECL|function|isValidObject
name|bool
name|WriteInitialization
operator|::
name|isValidObject
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
specifier|const
block|{
return|return
name|m_registeredWidgets
operator|.
name|contains
argument_list|(
name|name
argument_list|)
operator|||
name|m_registeredActions
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|function|findDeclaration
name|QString
name|WriteInitialization
operator|::
name|findDeclaration
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
specifier|const
name|QString
name|normalized
init|=
name|Driver
operator|::
name|normalizedName
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|DomWidget
modifier|*
name|widget
init|=
name|m_driver
operator|->
name|widgetByName
argument_list|(
name|normalized
argument_list|)
condition|)
return|return
name|m_driver
operator|->
name|findOrInsertWidget
argument_list|(
name|widget
argument_list|)
return|;
if|if
condition|(
name|DomAction
modifier|*
name|action
init|=
name|m_driver
operator|->
name|actionByName
argument_list|(
name|normalized
argument_list|)
condition|)
return|return
name|m_driver
operator|->
name|findOrInsertAction
argument_list|(
name|action
argument_list|)
return|;
if|if
condition|(
specifier|const
name|DomButtonGroup
modifier|*
name|group
init|=
name|m_driver
operator|->
name|findButtonGroup
argument_list|(
name|normalized
argument_list|)
condition|)
return|return
name|m_driver
operator|->
name|findOrInsertButtonGroup
argument_list|(
name|group
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
DECL|function|acceptConnection
name|void
name|WriteInitialization
operator|::
name|acceptConnection
parameter_list|(
name|DomConnection
modifier|*
name|connection
parameter_list|)
block|{
specifier|const
name|QString
name|sender
init|=
name|findDeclaration
argument_list|(
name|connection
operator|->
name|elementSender
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|receiver
init|=
name|findDeclaration
argument_list|(
name|connection
operator|->
name|elementReceiver
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sender
operator|.
name|isEmpty
argument_list|()
operator|||
name|receiver
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|m_output
operator|<<
name|m_indent
operator|<<
literal|"QObject::connect("
operator|<<
name|sender
operator|<<
literal|", "
operator|<<
literal|"SIGNAL("
operator|<<
name|connection
operator|->
name|elementSignal
argument_list|()
operator|<<
literal|')'
operator|<<
literal|", "
operator|<<
name|receiver
operator|<<
literal|", "
operator|<<
literal|"SLOT("
operator|<<
name|connection
operator|->
name|elementSlot
argument_list|()
operator|<<
literal|')'
operator|<<
literal|");\n"
expr_stmt|;
block|}
DECL|function|findImage
name|DomImage
modifier|*
name|WriteInitialization
operator|::
name|findImage
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
specifier|const
block|{
return|return
name|m_registeredImages
operator|.
name|value
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|function|findWidget
name|DomWidget
modifier|*
name|WriteInitialization
operator|::
name|findWidget
parameter_list|(
name|QLatin1String
name|widgetClass
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|m_widgetChain
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|DomWidget
modifier|*
name|widget
init|=
name|m_widgetChain
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|widget
operator|&&
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|extends
argument_list|(
name|widget
operator|->
name|attributeClass
argument_list|()
argument_list|,
name|widgetClass
argument_list|)
condition|)
return|return
name|widget
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|acceptImage
name|void
name|WriteInitialization
operator|::
name|acceptImage
parameter_list|(
name|DomImage
modifier|*
name|image
parameter_list|)
block|{
if|if
condition|(
operator|!
name|image
operator|->
name|hasAttributeName
argument_list|()
condition|)
return|return;
name|m_registeredImages
operator|.
name|insert
argument_list|(
name|image
operator|->
name|attributeName
argument_list|()
argument_list|,
name|image
argument_list|)
expr_stmt|;
block|}
DECL|function|acceptWidgetScripts
name|void
name|WriteInitialization
operator|::
name|acceptWidgetScripts
parameter_list|(
specifier|const
name|DomScripts
modifier|&
name|widgetScripts
parameter_list|,
name|DomWidget
modifier|*
name|node
parameter_list|,
specifier|const
name|DomWidgets
modifier|&
name|childWidgets
parameter_list|)
block|{
comment|// Add the per-class custom scripts to the per-widget ones.
name|DomScripts
name|scripts
argument_list|(
name|widgetScripts
argument_list|)
decl_stmt|;
if|if
condition|(
name|DomScript
modifier|*
name|customWidgetScript
init|=
name|m_uic
operator|->
name|customWidgetsInfo
argument_list|()
operator|->
name|customWidgetScript
argument_list|(
name|node
operator|->
name|attributeClass
argument_list|()
argument_list|)
condition|)
name|scripts
operator|.
name|push_front
argument_list|(
name|customWidgetScript
argument_list|)
expr_stmt|;
if|if
condition|(
name|scripts
operator|.
name|empty
argument_list|()
condition|)
return|return;
comment|// concatenate script snippets
name|QString
name|script
decl_stmt|;
for|for
control|(
specifier|const
name|DomScript
modifier|*
name|domScript
range|:
name|qAsConst
argument_list|(
name|scripts
argument_list|)
control|)
block|{
specifier|const
name|QString
name|snippet
init|=
name|domScript
operator|->
name|text
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|snippet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|script
operator|+=
name|snippet
operator|.
name|trimmed
argument_list|()
expr_stmt|;
name|script
operator|+=
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|script
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
comment|// Build the list of children and insert call
name|m_output
operator|<<
name|m_indent
operator|<<
literal|"childWidgets.clear();\n"
expr_stmt|;
if|if
condition|(
operator|!
name|childWidgets
operator|.
name|empty
argument_list|()
condition|)
block|{
name|m_output
operator|<<
name|m_indent
operator|<<
literal|"childWidgets"
expr_stmt|;
for|for
control|(
name|DomWidget
modifier|*
name|child
range|:
name|childWidgets
control|)
name|m_output
operator|<<
literal|"<< "
operator|<<
name|m_driver
operator|->
name|findOrInsertWidget
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|m_output
operator|<<
literal|";\n"
expr_stmt|;
block|}
name|m_output
operator|<<
name|m_indent
operator|<<
literal|"scriptContext.run("
operator|<<
name|writeString
argument_list|(
name|script
argument_list|,
name|m_dindent
argument_list|)
operator|<<
literal|", "
operator|<<
name|m_driver
operator|->
name|findOrInsertWidget
argument_list|(
name|node
argument_list|)
operator|<<
literal|", childWidgets);\n"
expr_stmt|;
block|}
DECL|function|generateMultiDirectiveBegin
specifier|static
name|void
name|generateMultiDirectiveBegin
parameter_list|(
name|QTextStream
modifier|&
name|outputStream
parameter_list|,
specifier|const
name|QSet
argument_list|<
name|QString
argument_list|>
modifier|&
name|directives
parameter_list|)
block|{
if|if
condition|(
name|directives
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|directives
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|outputStream
operator|<<
literal|"#ifndef "
operator|<<
operator|*
name|directives
operator|.
name|cbegin
argument_list|()
operator|<<
name|endl
expr_stmt|;
return|return;
block|}
name|auto
name|list
init|=
name|directives
operator|.
name|toList
argument_list|()
decl_stmt|;
comment|// sort (always generate in the same order):
name|std
operator|::
name|sort
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|outputStream
operator|<<
literal|"#if !defined("
operator|<<
name|list
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|") || !defined("
argument_list|)
argument_list|)
operator|<<
literal|')'
operator|<<
name|endl
expr_stmt|;
block|}
DECL|function|generateMultiDirectiveEnd
specifier|static
name|void
name|generateMultiDirectiveEnd
parameter_list|(
name|QTextStream
modifier|&
name|outputStream
parameter_list|,
specifier|const
name|QSet
argument_list|<
name|QString
argument_list|>
modifier|&
name|directives
parameter_list|)
block|{
if|if
condition|(
name|directives
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|outputStream
operator|<<
literal|"#endif"
operator|<<
name|endl
expr_stmt|;
block|}
DECL|function|Item
name|WriteInitialization
operator|::
name|Item
operator|::
name|Item
parameter_list|(
specifier|const
name|QString
modifier|&
name|itemClassName
parameter_list|,
specifier|const
name|QString
modifier|&
name|indent
parameter_list|,
name|QTextStream
modifier|&
name|setupUiStream
parameter_list|,
name|QTextStream
modifier|&
name|retranslateUiStream
parameter_list|,
name|Driver
modifier|*
name|driver
parameter_list|)
member_init_list|:
name|m_parent
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_itemClassName
argument_list|(
name|itemClassName
argument_list|)
member_init_list|,
name|m_indent
argument_list|(
name|indent
argument_list|)
member_init_list|,
name|m_setupUiStream
argument_list|(
name|setupUiStream
argument_list|)
member_init_list|,
name|m_retranslateUiStream
argument_list|(
name|retranslateUiStream
argument_list|)
member_init_list|,
name|m_driver
argument_list|(
name|driver
argument_list|)
block|{  }
DECL|function|~Item
name|WriteInitialization
operator|::
name|Item
operator|::
name|~
name|Item
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_children
argument_list|)
expr_stmt|;
block|}
DECL|function|writeSetupUi
name|QString
name|WriteInitialization
operator|::
name|Item
operator|::
name|writeSetupUi
parameter_list|(
specifier|const
name|QString
modifier|&
name|parent
parameter_list|,
name|Item
operator|::
name|EmptyItemPolicy
name|emptyItemPolicy
parameter_list|)
block|{
if|if
condition|(
name|emptyItemPolicy
operator|==
name|Item
operator|::
name|DontConstruct
operator|&&
name|m_setupUiData
operator|.
name|policy
operator|==
name|ItemData
operator|::
name|DontGenerate
condition|)
return|return
name|QString
argument_list|()
return|;
name|bool
name|generateMultiDirective
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|emptyItemPolicy
operator|==
name|Item
operator|::
name|ConstructItemOnly
operator|&&
name|m_children
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|m_setupUiData
operator|.
name|policy
operator|==
name|ItemData
operator|::
name|DontGenerate
condition|)
block|{
name|m_setupUiStream
operator|<<
name|m_indent
operator|<<
literal|"new "
operator|<<
name|m_itemClassName
operator|<<
literal|'('
operator|<<
name|parent
operator|<<
literal|");\n"
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|m_setupUiData
operator|.
name|policy
operator|==
name|ItemData
operator|::
name|GenerateWithMultiDirective
condition|)
block|{
name|generateMultiDirective
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|generateMultiDirective
condition|)
name|generateMultiDirectiveBegin
argument_list|(
name|m_setupUiStream
argument_list|,
name|m_setupUiData
operator|.
name|directives
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|uniqueName
init|=
name|m_driver
operator|->
name|unique
argument_list|(
name|QLatin1String
argument_list|(
literal|"__"
argument_list|)
operator|+
name|m_itemClassName
operator|.
name|toLower
argument_list|()
argument_list|)
decl_stmt|;
name|m_setupUiStream
operator|<<
name|m_indent
operator|<<
name|m_itemClassName
operator|<<
literal|" *"
operator|<<
name|uniqueName
operator|<<
literal|" = new "
operator|<<
name|m_itemClassName
operator|<<
literal|'('
operator|<<
name|parent
operator|<<
literal|");\n"
expr_stmt|;
if|if
condition|(
name|generateMultiDirective
condition|)
block|{
name|m_setupUiStream
operator|<<
literal|"#else\n"
expr_stmt|;
name|m_setupUiStream
operator|<<
name|m_indent
operator|<<
literal|"new "
operator|<<
name|m_itemClassName
operator|<<
literal|'('
operator|<<
name|parent
operator|<<
literal|");\n"
expr_stmt|;
name|generateMultiDirectiveEnd
argument_list|(
name|m_setupUiStream
argument_list|,
name|m_setupUiData
operator|.
name|directives
argument_list|)
expr_stmt|;
block|}
name|QMultiMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|m_setupUiData
operator|.
name|setters
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|m_setupUiData
operator|.
name|setters
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|openIfndef
argument_list|(
name|m_setupUiStream
argument_list|,
name|it
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
name|m_setupUiStream
operator|<<
name|m_indent
operator|<<
name|uniqueName
operator|<<
name|it
operator|.
name|value
argument_list|()
operator|<<
name|endl
expr_stmt|;
name|closeIfndef
argument_list|(
name|m_setupUiStream
argument_list|,
name|it
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
for|for
control|(
name|Item
modifier|*
name|child
range|:
name|qAsConst
argument_list|(
name|m_children
argument_list|)
control|)
name|child
operator|->
name|writeSetupUi
argument_list|(
name|uniqueName
argument_list|)
expr_stmt|;
return|return
name|uniqueName
return|;
block|}
DECL|function|writeRetranslateUi
name|void
name|WriteInitialization
operator|::
name|Item
operator|::
name|writeRetranslateUi
parameter_list|(
specifier|const
name|QString
modifier|&
name|parentPath
parameter_list|)
block|{
if|if
condition|(
name|m_retranslateUiData
operator|.
name|policy
operator|==
name|ItemData
operator|::
name|DontGenerate
condition|)
return|return;
if|if
condition|(
name|m_retranslateUiData
operator|.
name|policy
operator|==
name|ItemData
operator|::
name|GenerateWithMultiDirective
condition|)
name|generateMultiDirectiveBegin
argument_list|(
name|m_retranslateUiStream
argument_list|,
name|m_retranslateUiData
operator|.
name|directives
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|uniqueName
init|=
name|m_driver
operator|->
name|unique
argument_list|(
name|QLatin1String
argument_list|(
literal|"___"
argument_list|)
operator|+
name|m_itemClassName
operator|.
name|toLower
argument_list|()
argument_list|)
decl_stmt|;
name|m_retranslateUiStream
operator|<<
name|m_indent
operator|<<
name|m_itemClassName
operator|<<
literal|" *"
operator|<<
name|uniqueName
operator|<<
literal|" = "
operator|<<
name|parentPath
operator|<<
literal|";\n"
expr_stmt|;
if|if
condition|(
name|m_retranslateUiData
operator|.
name|policy
operator|==
name|ItemData
operator|::
name|GenerateWithMultiDirective
condition|)
name|generateMultiDirectiveEnd
argument_list|(
name|m_retranslateUiStream
argument_list|,
name|m_retranslateUiData
operator|.
name|directives
argument_list|)
expr_stmt|;
name|QString
name|oldDirective
decl_stmt|;
name|QMultiMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|m_retranslateUiData
operator|.
name|setters
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|m_retranslateUiData
operator|.
name|setters
operator|.
name|constEnd
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|newDirective
init|=
name|it
operator|.
name|key
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldDirective
operator|!=
name|newDirective
condition|)
block|{
name|closeIfndef
argument_list|(
name|m_retranslateUiStream
argument_list|,
name|oldDirective
argument_list|)
expr_stmt|;
name|openIfndef
argument_list|(
name|m_retranslateUiStream
argument_list|,
name|newDirective
argument_list|)
expr_stmt|;
name|oldDirective
operator|=
name|newDirective
expr_stmt|;
block|}
name|m_retranslateUiStream
operator|<<
name|m_indent
operator|<<
name|uniqueName
operator|<<
name|it
operator|.
name|value
argument_list|()
operator|<<
name|endl
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
name|closeIfndef
argument_list|(
name|m_retranslateUiStream
argument_list|,
name|oldDirective
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_children
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|m_children
index|[
name|i
index|]
operator|->
name|writeRetranslateUi
argument_list|(
name|uniqueName
operator|+
name|QLatin1String
argument_list|(
literal|"->child("
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|')'
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|addSetter
name|void
name|WriteInitialization
operator|::
name|Item
operator|::
name|addSetter
parameter_list|(
specifier|const
name|QString
modifier|&
name|setter
parameter_list|,
specifier|const
name|QString
modifier|&
name|directive
parameter_list|,
name|bool
name|translatable
parameter_list|)
block|{
specifier|const
name|ItemData
operator|::
name|TemporaryVariableGeneratorPolicy
name|newPolicy
init|=
name|directive
operator|.
name|isNull
argument_list|()
condition|?
name|ItemData
operator|::
name|Generate
else|:
name|ItemData
operator|::
name|GenerateWithMultiDirective
decl_stmt|;
if|if
condition|(
name|translatable
condition|)
block|{
name|m_retranslateUiData
operator|.
name|setters
operator|.
name|insert
argument_list|(
name|directive
argument_list|,
name|setter
argument_list|)
expr_stmt|;
if|if
condition|(
name|ItemData
operator|::
name|GenerateWithMultiDirective
operator|==
name|newPolicy
condition|)
name|m_retranslateUiData
operator|.
name|directives
operator|<<
name|directive
expr_stmt|;
if|if
condition|(
name|m_retranslateUiData
operator|.
name|policy
operator|<
name|newPolicy
condition|)
name|m_retranslateUiData
operator|.
name|policy
operator|=
name|newPolicy
expr_stmt|;
block|}
else|else
block|{
name|m_setupUiData
operator|.
name|setters
operator|.
name|insert
argument_list|(
name|directive
argument_list|,
name|setter
argument_list|)
expr_stmt|;
if|if
condition|(
name|ItemData
operator|::
name|GenerateWithMultiDirective
operator|==
name|newPolicy
condition|)
name|m_setupUiData
operator|.
name|directives
operator|<<
name|directive
expr_stmt|;
if|if
condition|(
name|m_setupUiData
operator|.
name|policy
operator|<
name|newPolicy
condition|)
name|m_setupUiData
operator|.
name|policy
operator|=
name|newPolicy
expr_stmt|;
block|}
block|}
DECL|function|addChild
name|void
name|WriteInitialization
operator|::
name|Item
operator|::
name|addChild
parameter_list|(
name|Item
modifier|*
name|child
parameter_list|)
block|{
name|m_children
operator|<<
name|child
expr_stmt|;
name|child
operator|->
name|m_parent
operator|=
name|this
expr_stmt|;
name|Item
modifier|*
name|c
init|=
name|child
decl_stmt|;
name|Item
modifier|*
name|p
init|=
name|this
decl_stmt|;
while|while
condition|(
name|p
condition|)
block|{
name|p
operator|->
name|m_setupUiData
operator|.
name|directives
operator||=
name|c
operator|->
name|m_setupUiData
operator|.
name|directives
expr_stmt|;
name|p
operator|->
name|m_retranslateUiData
operator|.
name|directives
operator||=
name|c
operator|->
name|m_retranslateUiData
operator|.
name|directives
expr_stmt|;
if|if
condition|(
name|p
operator|->
name|m_setupUiData
operator|.
name|policy
operator|<
name|c
operator|->
name|m_setupUiData
operator|.
name|policy
condition|)
name|p
operator|->
name|m_setupUiData
operator|.
name|policy
operator|=
name|c
operator|->
name|m_setupUiData
operator|.
name|policy
expr_stmt|;
if|if
condition|(
name|p
operator|->
name|m_retranslateUiData
operator|.
name|policy
operator|<
name|c
operator|->
name|m_retranslateUiData
operator|.
name|policy
condition|)
name|p
operator|->
name|m_retranslateUiData
operator|.
name|policy
operator|=
name|c
operator|->
name|m_retranslateUiData
operator|.
name|policy
expr_stmt|;
name|c
operator|=
name|p
expr_stmt|;
name|p
operator|=
name|p
operator|->
name|m_parent
expr_stmt|;
block|}
block|}
block|}
end_namespace
begin_comment
comment|// namespace CPP
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
