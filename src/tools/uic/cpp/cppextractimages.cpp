begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"cppextractimages.h"
end_include
begin_include
include|#
directive|include
file|"cppwriteicondata.h"
end_include
begin_include
include|#
directive|include
file|"driver.h"
end_include
begin_include
include|#
directive|include
file|"ui4.h"
end_include
begin_include
include|#
directive|include
file|"utils.h"
end_include
begin_include
include|#
directive|include
file|"uic.h"
end_include
begin_include
include|#
directive|include
file|<qdatastream.h>
end_include
begin_include
include|#
directive|include
file|<qtextstream.h>
end_include
begin_include
include|#
directive|include
file|<qtextcodec.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_namespace
DECL|namespace|CPP
namespace|namespace
name|CPP
block|{
DECL|function|ExtractImages
name|ExtractImages
operator|::
name|ExtractImages
parameter_list|(
specifier|const
name|Option
modifier|&
name|opt
parameter_list|)
member_init_list|:
name|m_output
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_option
argument_list|(
name|opt
argument_list|)
block|{ }
DECL|function|acceptUI
name|void
name|ExtractImages
operator|::
name|acceptUI
parameter_list|(
name|DomUI
modifier|*
name|node
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_option
operator|.
name|extractImages
condition|)
return|return;
if|if
condition|(
name|node
operator|->
name|elementImages
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|QString
name|className
init|=
name|node
operator|->
name|elementClass
argument_list|()
operator|+
name|m_option
operator|.
name|postfix
decl_stmt|;
name|QFile
name|f
decl_stmt|;
if|if
condition|(
name|m_option
operator|.
name|qrcOutputFile
operator|.
name|size
argument_list|()
condition|)
block|{
name|f
operator|.
name|setFileName
argument_list|(
name|m_option
operator|.
name|qrcOutputFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%s: Error: Could not create resource file\n"
argument_list|,
name|qPrintable
argument_list|(
name|m_option
operator|.
name|messagePrefix
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|QFileInfo
name|fi
argument_list|(
name|m_option
operator|.
name|qrcOutputFile
argument_list|)
decl_stmt|;
name|QDir
name|dir
init|=
name|fi
operator|.
name|absoluteDir
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|(
name|QLatin1String
argument_list|(
literal|"images"
argument_list|)
argument_list|)
operator|&&
operator|!
name|dir
operator|.
name|mkdir
argument_list|(
name|QLatin1String
argument_list|(
literal|"images"
argument_list|)
argument_list|)
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%s: Error: Could not create image dir\n"
argument_list|,
name|qPrintable
argument_list|(
name|m_option
operator|.
name|messagePrefix
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|dir
operator|.
name|cd
argument_list|(
name|QLatin1String
argument_list|(
literal|"images"
argument_list|)
argument_list|)
expr_stmt|;
name|m_imagesDir
operator|=
name|dir
expr_stmt|;
name|m_output
operator|=
operator|new
name|QTextStream
argument_list|(
operator|&
name|f
argument_list|)
expr_stmt|;
name|m_output
operator|->
name|setCodec
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
modifier|&
name|out
init|=
operator|*
name|m_output
decl_stmt|;
name|out
operator|<<
literal|"<RCC>\n"
expr_stmt|;
name|out
operator|<<
literal|"<qresource prefix=\"/"
operator|<<
name|className
operator|<<
literal|"\">\n"
expr_stmt|;
name|TreeWalker
operator|::
name|acceptUI
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|out
operator|<<
literal|"</qresource>\n"
expr_stmt|;
name|out
operator|<<
literal|"</RCC>\n"
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
operator|delete
name|m_output
expr_stmt|;
name|m_output
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|function|acceptImages
name|void
name|ExtractImages
operator|::
name|acceptImages
parameter_list|(
name|DomImages
modifier|*
name|images
parameter_list|)
block|{
name|TreeWalker
operator|::
name|acceptImages
argument_list|(
name|images
argument_list|)
expr_stmt|;
block|}
DECL|function|acceptImage
name|void
name|ExtractImages
operator|::
name|acceptImage
parameter_list|(
name|DomImage
modifier|*
name|image
parameter_list|)
block|{
name|QString
name|format
init|=
name|image
operator|->
name|elementData
argument_list|()
operator|->
name|attributeFormat
argument_list|()
decl_stmt|;
name|QString
name|extension
init|=
name|format
operator|.
name|left
argument_list|(
name|format
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|QString
name|fname
init|=
name|m_imagesDir
operator|.
name|absoluteFilePath
argument_list|(
name|image
operator|->
name|attributeName
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|+
name|extension
argument_list|)
decl_stmt|;
operator|*
name|m_output
operator|<<
literal|"<file>images/"
operator|<<
name|image
operator|->
name|attributeName
argument_list|()
operator|<<
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|+
name|extension
operator|<<
literal|"</file>\n"
expr_stmt|;
name|QFile
name|f
decl_stmt|;
name|f
operator|.
name|setFileName
argument_list|(
name|fname
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|isXPM_GZ
init|=
name|format
operator|==
name|QLatin1String
argument_list|(
literal|"XPM.GZ"
argument_list|)
decl_stmt|;
name|QIODevice
operator|::
name|OpenMode
name|openMode
init|=
name|QIODevice
operator|::
name|WriteOnly
decl_stmt|;
if|if
condition|(
name|isXPM_GZ
condition|)
name|openMode
operator||=
name|QIODevice
operator|::
name|Text
expr_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|open
argument_list|(
name|openMode
argument_list|)
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%s: Error: Could not create image file %s: %s"
argument_list|,
name|qPrintable
argument_list|(
name|m_option
operator|.
name|messagePrefix
argument_list|()
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|fname
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|f
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isXPM_GZ
condition|)
block|{
name|QTextStream
modifier|*
name|imageOut
init|=
operator|new
name|QTextStream
argument_list|(
operator|&
name|f
argument_list|)
decl_stmt|;
name|imageOut
operator|->
name|setCodec
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|CPP
operator|::
name|WriteIconData
operator|::
name|writeImage
argument_list|(
operator|*
name|imageOut
argument_list|,
name|QString
argument_list|()
argument_list|,
name|m_option
operator|.
name|limitXPM_LineLength
argument_list|,
name|image
argument_list|)
expr_stmt|;
operator|delete
name|imageOut
expr_stmt|;
block|}
else|else
block|{
name|CPP
operator|::
name|WriteIconData
operator|::
name|writeImage
argument_list|(
name|f
argument_list|,
name|image
argument_list|)
expr_stmt|;
block|}
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_namespace
begin_comment
comment|// namespace CPP
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
