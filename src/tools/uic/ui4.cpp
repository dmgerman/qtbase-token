begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT!
end_comment
begin_include
include|#
directive|include
file|"ui4.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_ifdef
ifdef|#
directive|ifdef
name|QFORMINTERNAL_NAMESPACE
end_ifdef
begin_using
using|using
namespace|namespace
name|QFormInternal
namespace|;
end_using
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/******************************************************************************* ** Implementations */
end_comment
begin_function
DECL|function|clear
name|void
name|DomUI
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
operator|delete
name|m_widget
expr_stmt|;
operator|delete
name|m_layoutDefault
expr_stmt|;
operator|delete
name|m_layoutFunction
expr_stmt|;
operator|delete
name|m_customWidgets
expr_stmt|;
operator|delete
name|m_tabStops
expr_stmt|;
operator|delete
name|m_images
expr_stmt|;
operator|delete
name|m_includes
expr_stmt|;
operator|delete
name|m_resources
expr_stmt|;
operator|delete
name|m_connections
expr_stmt|;
operator|delete
name|m_designerdata
expr_stmt|;
operator|delete
name|m_slots
expr_stmt|;
operator|delete
name|m_buttonGroups
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_version
operator|=
literal|false
expr_stmt|;
name|m_has_attr_language
operator|=
literal|false
expr_stmt|;
name|m_has_attr_displayname
operator|=
literal|false
expr_stmt|;
name|m_has_attr_stdsetdef
operator|=
literal|false
expr_stmt|;
name|m_attr_stdsetdef
operator|=
literal|0
expr_stmt|;
name|m_has_attr_stdSetDef
operator|=
literal|false
expr_stmt|;
name|m_attr_stdSetDef
operator|=
literal|0
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_widget
operator|=
literal|0
expr_stmt|;
name|m_layoutDefault
operator|=
literal|0
expr_stmt|;
name|m_layoutFunction
operator|=
literal|0
expr_stmt|;
name|m_customWidgets
operator|=
literal|0
expr_stmt|;
name|m_tabStops
operator|=
literal|0
expr_stmt|;
name|m_images
operator|=
literal|0
expr_stmt|;
name|m_includes
operator|=
literal|0
expr_stmt|;
name|m_resources
operator|=
literal|0
expr_stmt|;
name|m_connections
operator|=
literal|0
expr_stmt|;
name|m_designerdata
operator|=
literal|0
expr_stmt|;
name|m_slots
operator|=
literal|0
expr_stmt|;
name|m_buttonGroups
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomUI
name|DomUI
operator|::
name|DomUI
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_version
operator|=
literal|false
expr_stmt|;
name|m_has_attr_language
operator|=
literal|false
expr_stmt|;
name|m_has_attr_displayname
operator|=
literal|false
expr_stmt|;
name|m_has_attr_stdsetdef
operator|=
literal|false
expr_stmt|;
name|m_attr_stdsetdef
operator|=
literal|0
expr_stmt|;
name|m_has_attr_stdSetDef
operator|=
literal|false
expr_stmt|;
name|m_attr_stdSetDef
operator|=
literal|0
expr_stmt|;
name|m_widget
operator|=
literal|0
expr_stmt|;
name|m_layoutDefault
operator|=
literal|0
expr_stmt|;
name|m_layoutFunction
operator|=
literal|0
expr_stmt|;
name|m_customWidgets
operator|=
literal|0
expr_stmt|;
name|m_tabStops
operator|=
literal|0
expr_stmt|;
name|m_images
operator|=
literal|0
expr_stmt|;
name|m_includes
operator|=
literal|0
expr_stmt|;
name|m_resources
operator|=
literal|0
expr_stmt|;
name|m_connections
operator|=
literal|0
expr_stmt|;
name|m_designerdata
operator|=
literal|0
expr_stmt|;
name|m_slots
operator|=
literal|0
expr_stmt|;
name|m_buttonGroups
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomUI
name|DomUI
operator|::
name|~
name|DomUI
parameter_list|()
block|{
operator|delete
name|m_widget
expr_stmt|;
operator|delete
name|m_layoutDefault
expr_stmt|;
operator|delete
name|m_layoutFunction
expr_stmt|;
operator|delete
name|m_customWidgets
expr_stmt|;
operator|delete
name|m_tabStops
expr_stmt|;
operator|delete
name|m_images
expr_stmt|;
operator|delete
name|m_includes
expr_stmt|;
operator|delete
name|m_resources
expr_stmt|;
operator|delete
name|m_connections
expr_stmt|;
operator|delete
name|m_designerdata
expr_stmt|;
operator|delete
name|m_slots
expr_stmt|;
operator|delete
name|m_buttonGroups
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomUI
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"version"
argument_list|)
condition|)
block|{
name|setAttributeVersion
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"language"
argument_list|)
condition|)
block|{
name|setAttributeLanguage
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"displayname"
argument_list|)
condition|)
block|{
name|setAttributeDisplayname
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"stdsetdef"
argument_list|)
condition|)
block|{
name|setAttributeStdsetdef
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"stdSetDef"
argument_list|)
condition|)
block|{
name|setAttributeStdSetDef
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"author"
argument_list|)
condition|)
block|{
name|setElementAuthor
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"comment"
argument_list|)
condition|)
block|{
name|setElementComment
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"exportmacro"
argument_list|)
condition|)
block|{
name|setElementExportMacro
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"class"
argument_list|)
condition|)
block|{
name|setElementClass
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"widget"
argument_list|)
condition|)
block|{
name|DomWidget
modifier|*
name|v
init|=
operator|new
name|DomWidget
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementWidget
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"layoutdefault"
argument_list|)
condition|)
block|{
name|DomLayoutDefault
modifier|*
name|v
init|=
operator|new
name|DomLayoutDefault
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementLayoutDefault
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"layoutfunction"
argument_list|)
condition|)
block|{
name|DomLayoutFunction
modifier|*
name|v
init|=
operator|new
name|DomLayoutFunction
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementLayoutFunction
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"pixmapfunction"
argument_list|)
condition|)
block|{
name|setElementPixmapFunction
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"customwidgets"
argument_list|)
condition|)
block|{
name|DomCustomWidgets
modifier|*
name|v
init|=
operator|new
name|DomCustomWidgets
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementCustomWidgets
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"tabstops"
argument_list|)
condition|)
block|{
name|DomTabStops
modifier|*
name|v
init|=
operator|new
name|DomTabStops
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementTabStops
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"images"
argument_list|)
condition|)
block|{
name|DomImages
modifier|*
name|v
init|=
operator|new
name|DomImages
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementImages
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"includes"
argument_list|)
condition|)
block|{
name|DomIncludes
modifier|*
name|v
init|=
operator|new
name|DomIncludes
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementIncludes
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"resources"
argument_list|)
condition|)
block|{
name|DomResources
modifier|*
name|v
init|=
operator|new
name|DomResources
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementResources
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"connections"
argument_list|)
condition|)
block|{
name|DomConnections
modifier|*
name|v
init|=
operator|new
name|DomConnections
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementConnections
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"designerdata"
argument_list|)
condition|)
block|{
name|DomDesignerData
modifier|*
name|v
init|=
operator|new
name|DomDesignerData
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementDesignerdata
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"slots"
argument_list|)
condition|)
block|{
name|DomSlots
modifier|*
name|v
init|=
operator|new
name|DomSlots
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementSlots
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"buttongroups"
argument_list|)
condition|)
block|{
name|DomButtonGroups
modifier|*
name|v
init|=
operator|new
name|DomButtonGroups
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementButtonGroups
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomUI
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"ui"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeVersion
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"version"
argument_list|)
argument_list|,
name|attributeVersion
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeLanguage
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"language"
argument_list|)
argument_list|,
name|attributeLanguage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeDisplayname
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"displayname"
argument_list|)
argument_list|,
name|attributeDisplayname
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeStdsetdef
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"stdsetdef"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributeStdsetdef
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeStdSetDef
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"stdsetdef"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributeStdSetDef
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|Author
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"author"
argument_list|)
argument_list|,
name|m_author
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Comment
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"comment"
argument_list|)
argument_list|,
name|m_comment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|ExportMacro
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"exportmacro"
argument_list|)
argument_list|,
name|m_exportMacro
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Class
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"class"
argument_list|)
argument_list|,
name|m_class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Widget
condition|)
block|{
name|m_widget
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"widget"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|LayoutDefault
condition|)
block|{
name|m_layoutDefault
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"layoutdefault"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|LayoutFunction
condition|)
block|{
name|m_layoutFunction
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"layoutfunction"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|PixmapFunction
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"pixmapfunction"
argument_list|)
argument_list|,
name|m_pixmapFunction
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|CustomWidgets
condition|)
block|{
name|m_customWidgets
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"customwidgets"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|TabStops
condition|)
block|{
name|m_tabStops
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"tabstops"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Images
condition|)
block|{
name|m_images
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"images"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Includes
condition|)
block|{
name|m_includes
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"includes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Resources
condition|)
block|{
name|m_resources
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"resources"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Connections
condition|)
block|{
name|m_connections
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"connections"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Designerdata
condition|)
block|{
name|m_designerdata
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"designerdata"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Slots
condition|)
block|{
name|m_slots
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"slots"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|ButtonGroups
condition|)
block|{
name|m_buttonGroups
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"buttongroups"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementAuthor
name|void
name|DomUI
operator|::
name|setElementAuthor
parameter_list|(
specifier|const
name|QString
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Author
expr_stmt|;
name|m_author
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementComment
name|void
name|DomUI
operator|::
name|setElementComment
parameter_list|(
specifier|const
name|QString
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Comment
expr_stmt|;
name|m_comment
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementExportMacro
name|void
name|DomUI
operator|::
name|setElementExportMacro
parameter_list|(
specifier|const
name|QString
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|ExportMacro
expr_stmt|;
name|m_exportMacro
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementClass
name|void
name|DomUI
operator|::
name|setElementClass
parameter_list|(
specifier|const
name|QString
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Class
expr_stmt|;
name|m_class
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementWidget
name|DomWidget
modifier|*
name|DomUI
operator|::
name|takeElementWidget
parameter_list|()
block|{
name|DomWidget
modifier|*
name|a
init|=
name|m_widget
decl_stmt|;
name|m_widget
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|Widget
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementWidget
name|void
name|DomUI
operator|::
name|setElementWidget
parameter_list|(
name|DomWidget
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_widget
expr_stmt|;
name|m_children
operator||=
name|Widget
expr_stmt|;
name|m_widget
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementLayoutDefault
name|DomLayoutDefault
modifier|*
name|DomUI
operator|::
name|takeElementLayoutDefault
parameter_list|()
block|{
name|DomLayoutDefault
modifier|*
name|a
init|=
name|m_layoutDefault
decl_stmt|;
name|m_layoutDefault
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|LayoutDefault
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementLayoutDefault
name|void
name|DomUI
operator|::
name|setElementLayoutDefault
parameter_list|(
name|DomLayoutDefault
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_layoutDefault
expr_stmt|;
name|m_children
operator||=
name|LayoutDefault
expr_stmt|;
name|m_layoutDefault
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementLayoutFunction
name|DomLayoutFunction
modifier|*
name|DomUI
operator|::
name|takeElementLayoutFunction
parameter_list|()
block|{
name|DomLayoutFunction
modifier|*
name|a
init|=
name|m_layoutFunction
decl_stmt|;
name|m_layoutFunction
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|LayoutFunction
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementLayoutFunction
name|void
name|DomUI
operator|::
name|setElementLayoutFunction
parameter_list|(
name|DomLayoutFunction
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_layoutFunction
expr_stmt|;
name|m_children
operator||=
name|LayoutFunction
expr_stmt|;
name|m_layoutFunction
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementPixmapFunction
name|void
name|DomUI
operator|::
name|setElementPixmapFunction
parameter_list|(
specifier|const
name|QString
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|PixmapFunction
expr_stmt|;
name|m_pixmapFunction
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementCustomWidgets
name|DomCustomWidgets
modifier|*
name|DomUI
operator|::
name|takeElementCustomWidgets
parameter_list|()
block|{
name|DomCustomWidgets
modifier|*
name|a
init|=
name|m_customWidgets
decl_stmt|;
name|m_customWidgets
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|CustomWidgets
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementCustomWidgets
name|void
name|DomUI
operator|::
name|setElementCustomWidgets
parameter_list|(
name|DomCustomWidgets
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_customWidgets
expr_stmt|;
name|m_children
operator||=
name|CustomWidgets
expr_stmt|;
name|m_customWidgets
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementTabStops
name|DomTabStops
modifier|*
name|DomUI
operator|::
name|takeElementTabStops
parameter_list|()
block|{
name|DomTabStops
modifier|*
name|a
init|=
name|m_tabStops
decl_stmt|;
name|m_tabStops
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|TabStops
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementTabStops
name|void
name|DomUI
operator|::
name|setElementTabStops
parameter_list|(
name|DomTabStops
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_tabStops
expr_stmt|;
name|m_children
operator||=
name|TabStops
expr_stmt|;
name|m_tabStops
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementImages
name|DomImages
modifier|*
name|DomUI
operator|::
name|takeElementImages
parameter_list|()
block|{
name|DomImages
modifier|*
name|a
init|=
name|m_images
decl_stmt|;
name|m_images
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|Images
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementImages
name|void
name|DomUI
operator|::
name|setElementImages
parameter_list|(
name|DomImages
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_images
expr_stmt|;
name|m_children
operator||=
name|Images
expr_stmt|;
name|m_images
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementIncludes
name|DomIncludes
modifier|*
name|DomUI
operator|::
name|takeElementIncludes
parameter_list|()
block|{
name|DomIncludes
modifier|*
name|a
init|=
name|m_includes
decl_stmt|;
name|m_includes
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|Includes
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementIncludes
name|void
name|DomUI
operator|::
name|setElementIncludes
parameter_list|(
name|DomIncludes
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_includes
expr_stmt|;
name|m_children
operator||=
name|Includes
expr_stmt|;
name|m_includes
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementResources
name|DomResources
modifier|*
name|DomUI
operator|::
name|takeElementResources
parameter_list|()
block|{
name|DomResources
modifier|*
name|a
init|=
name|m_resources
decl_stmt|;
name|m_resources
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|Resources
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementResources
name|void
name|DomUI
operator|::
name|setElementResources
parameter_list|(
name|DomResources
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_resources
expr_stmt|;
name|m_children
operator||=
name|Resources
expr_stmt|;
name|m_resources
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementConnections
name|DomConnections
modifier|*
name|DomUI
operator|::
name|takeElementConnections
parameter_list|()
block|{
name|DomConnections
modifier|*
name|a
init|=
name|m_connections
decl_stmt|;
name|m_connections
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|Connections
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementConnections
name|void
name|DomUI
operator|::
name|setElementConnections
parameter_list|(
name|DomConnections
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_connections
expr_stmt|;
name|m_children
operator||=
name|Connections
expr_stmt|;
name|m_connections
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementDesignerdata
name|DomDesignerData
modifier|*
name|DomUI
operator|::
name|takeElementDesignerdata
parameter_list|()
block|{
name|DomDesignerData
modifier|*
name|a
init|=
name|m_designerdata
decl_stmt|;
name|m_designerdata
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|Designerdata
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementDesignerdata
name|void
name|DomUI
operator|::
name|setElementDesignerdata
parameter_list|(
name|DomDesignerData
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_designerdata
expr_stmt|;
name|m_children
operator||=
name|Designerdata
expr_stmt|;
name|m_designerdata
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementSlots
name|DomSlots
modifier|*
name|DomUI
operator|::
name|takeElementSlots
parameter_list|()
block|{
name|DomSlots
modifier|*
name|a
init|=
name|m_slots
decl_stmt|;
name|m_slots
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|Slots
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementSlots
name|void
name|DomUI
operator|::
name|setElementSlots
parameter_list|(
name|DomSlots
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_slots
expr_stmt|;
name|m_children
operator||=
name|Slots
expr_stmt|;
name|m_slots
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementButtonGroups
name|DomButtonGroups
modifier|*
name|DomUI
operator|::
name|takeElementButtonGroups
parameter_list|()
block|{
name|DomButtonGroups
modifier|*
name|a
init|=
name|m_buttonGroups
decl_stmt|;
name|m_buttonGroups
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|ButtonGroups
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementButtonGroups
name|void
name|DomUI
operator|::
name|setElementButtonGroups
parameter_list|(
name|DomButtonGroups
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_buttonGroups
expr_stmt|;
name|m_children
operator||=
name|ButtonGroups
expr_stmt|;
name|m_buttonGroups
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementAuthor
name|void
name|DomUI
operator|::
name|clearElementAuthor
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Author
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementComment
name|void
name|DomUI
operator|::
name|clearElementComment
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Comment
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementExportMacro
name|void
name|DomUI
operator|::
name|clearElementExportMacro
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|ExportMacro
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementClass
name|void
name|DomUI
operator|::
name|clearElementClass
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Class
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementWidget
name|void
name|DomUI
operator|::
name|clearElementWidget
parameter_list|()
block|{
operator|delete
name|m_widget
expr_stmt|;
name|m_widget
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|Widget
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementLayoutDefault
name|void
name|DomUI
operator|::
name|clearElementLayoutDefault
parameter_list|()
block|{
operator|delete
name|m_layoutDefault
expr_stmt|;
name|m_layoutDefault
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|LayoutDefault
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementLayoutFunction
name|void
name|DomUI
operator|::
name|clearElementLayoutFunction
parameter_list|()
block|{
operator|delete
name|m_layoutFunction
expr_stmt|;
name|m_layoutFunction
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|LayoutFunction
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementPixmapFunction
name|void
name|DomUI
operator|::
name|clearElementPixmapFunction
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|PixmapFunction
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementCustomWidgets
name|void
name|DomUI
operator|::
name|clearElementCustomWidgets
parameter_list|()
block|{
operator|delete
name|m_customWidgets
expr_stmt|;
name|m_customWidgets
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|CustomWidgets
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementTabStops
name|void
name|DomUI
operator|::
name|clearElementTabStops
parameter_list|()
block|{
operator|delete
name|m_tabStops
expr_stmt|;
name|m_tabStops
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|TabStops
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementImages
name|void
name|DomUI
operator|::
name|clearElementImages
parameter_list|()
block|{
operator|delete
name|m_images
expr_stmt|;
name|m_images
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|Images
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementIncludes
name|void
name|DomUI
operator|::
name|clearElementIncludes
parameter_list|()
block|{
operator|delete
name|m_includes
expr_stmt|;
name|m_includes
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|Includes
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementResources
name|void
name|DomUI
operator|::
name|clearElementResources
parameter_list|()
block|{
operator|delete
name|m_resources
expr_stmt|;
name|m_resources
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|Resources
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementConnections
name|void
name|DomUI
operator|::
name|clearElementConnections
parameter_list|()
block|{
operator|delete
name|m_connections
expr_stmt|;
name|m_connections
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|Connections
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementDesignerdata
name|void
name|DomUI
operator|::
name|clearElementDesignerdata
parameter_list|()
block|{
operator|delete
name|m_designerdata
expr_stmt|;
name|m_designerdata
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|Designerdata
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementSlots
name|void
name|DomUI
operator|::
name|clearElementSlots
parameter_list|()
block|{
operator|delete
name|m_slots
expr_stmt|;
name|m_slots
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|Slots
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementButtonGroups
name|void
name|DomUI
operator|::
name|clearElementButtonGroups
parameter_list|()
block|{
operator|delete
name|m_buttonGroups
expr_stmt|;
name|m_buttonGroups
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|ButtonGroups
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomIncludes
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|qDeleteAll
argument_list|(
name|m_include
argument_list|)
expr_stmt|;
name|m_include
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomIncludes
name|DomIncludes
operator|::
name|DomIncludes
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomIncludes
name|DomIncludes
operator|::
name|~
name|DomIncludes
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_include
argument_list|)
expr_stmt|;
name|m_include
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomIncludes
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"include"
argument_list|)
condition|)
block|{
name|DomInclude
modifier|*
name|v
init|=
operator|new
name|DomInclude
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_include
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomIncludes
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"includes"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_include
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomInclude
modifier|*
name|v
init|=
name|m_include
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"include"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementInclude
name|void
name|DomIncludes
operator|::
name|setElementInclude
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomInclude
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Include
expr_stmt|;
name|m_include
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomInclude
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_location
operator|=
literal|false
expr_stmt|;
name|m_has_attr_impldecl
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomInclude
name|DomInclude
operator|::
name|DomInclude
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_location
operator|=
literal|false
expr_stmt|;
name|m_has_attr_impldecl
operator|=
literal|false
expr_stmt|;
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomInclude
name|DomInclude
operator|::
name|~
name|DomInclude
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomInclude
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"location"
argument_list|)
condition|)
block|{
name|setAttributeLocation
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"impldecl"
argument_list|)
condition|)
block|{
name|setAttributeImpldecl
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomInclude
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"include"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeLocation
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"location"
argument_list|)
argument_list|,
name|attributeLocation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeImpldecl
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"impldecl"
argument_list|)
argument_list|,
name|attributeImpldecl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomResources
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|qDeleteAll
argument_list|(
name|m_include
argument_list|)
expr_stmt|;
name|m_include
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomResources
name|DomResources
operator|::
name|DomResources
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomResources
name|DomResources
operator|::
name|~
name|DomResources
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_include
argument_list|)
expr_stmt|;
name|m_include
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomResources
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
name|setAttributeName
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"include"
argument_list|)
condition|)
block|{
name|DomResource
modifier|*
name|v
init|=
operator|new
name|DomResource
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_include
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomResources
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"resources"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeName
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|attributeName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_include
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomResource
modifier|*
name|v
init|=
name|m_include
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"include"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementInclude
name|void
name|DomResources
operator|::
name|setElementInclude
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomResource
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Include
expr_stmt|;
name|m_include
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomResource
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_location
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomResource
name|DomResource
operator|::
name|DomResource
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_location
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomResource
name|DomResource
operator|::
name|~
name|DomResource
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomResource
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"location"
argument_list|)
condition|)
block|{
name|setAttributeLocation
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomResource
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"resource"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeLocation
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"location"
argument_list|)
argument_list|,
name|attributeLocation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomActionGroup
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|qDeleteAll
argument_list|(
name|m_action
argument_list|)
expr_stmt|;
name|m_action
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_actionGroup
argument_list|)
expr_stmt|;
name|m_actionGroup
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_attribute
argument_list|)
expr_stmt|;
name|m_attribute
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomActionGroup
name|DomActionGroup
operator|::
name|DomActionGroup
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomActionGroup
name|DomActionGroup
operator|::
name|~
name|DomActionGroup
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_action
argument_list|)
expr_stmt|;
name|m_action
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_actionGroup
argument_list|)
expr_stmt|;
name|m_actionGroup
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_attribute
argument_list|)
expr_stmt|;
name|m_attribute
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomActionGroup
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
name|setAttributeName
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"action"
argument_list|)
condition|)
block|{
name|DomAction
modifier|*
name|v
init|=
operator|new
name|DomAction
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_action
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"actiongroup"
argument_list|)
condition|)
block|{
name|DomActionGroup
modifier|*
name|v
init|=
operator|new
name|DomActionGroup
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_actionGroup
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"property"
argument_list|)
condition|)
block|{
name|DomProperty
modifier|*
name|v
init|=
operator|new
name|DomProperty
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"attribute"
argument_list|)
condition|)
block|{
name|DomProperty
modifier|*
name|v
init|=
operator|new
name|DomProperty
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_attribute
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomActionGroup
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"actiongroup"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeName
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|attributeName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_action
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomAction
modifier|*
name|v
init|=
name|m_action
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"action"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_actionGroup
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomActionGroup
modifier|*
name|v
init|=
name|m_actionGroup
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"actiongroup"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_property
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomProperty
modifier|*
name|v
init|=
name|m_property
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"property"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_attribute
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomProperty
modifier|*
name|v
init|=
name|m_attribute
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"attribute"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementAction
name|void
name|DomActionGroup
operator|::
name|setElementAction
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomAction
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Action
expr_stmt|;
name|m_action
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementActionGroup
name|void
name|DomActionGroup
operator|::
name|setElementActionGroup
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomActionGroup
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|ActionGroup
expr_stmt|;
name|m_actionGroup
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementProperty
name|void
name|DomActionGroup
operator|::
name|setElementProperty
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Property
expr_stmt|;
name|m_property
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementAttribute
name|void
name|DomActionGroup
operator|::
name|setElementAttribute
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Attribute
expr_stmt|;
name|m_attribute
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomAction
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_attribute
argument_list|)
expr_stmt|;
name|m_attribute
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
name|m_has_attr_menu
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomAction
name|DomAction
operator|::
name|DomAction
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
name|m_has_attr_menu
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomAction
name|DomAction
operator|::
name|~
name|DomAction
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_attribute
argument_list|)
expr_stmt|;
name|m_attribute
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomAction
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
name|setAttributeName
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"menu"
argument_list|)
condition|)
block|{
name|setAttributeMenu
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"property"
argument_list|)
condition|)
block|{
name|DomProperty
modifier|*
name|v
init|=
operator|new
name|DomProperty
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"attribute"
argument_list|)
condition|)
block|{
name|DomProperty
modifier|*
name|v
init|=
operator|new
name|DomProperty
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_attribute
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomAction
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"action"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeName
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|attributeName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeMenu
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"menu"
argument_list|)
argument_list|,
name|attributeMenu
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_property
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomProperty
modifier|*
name|v
init|=
name|m_property
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"property"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_attribute
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomProperty
modifier|*
name|v
init|=
name|m_attribute
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"attribute"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementProperty
name|void
name|DomAction
operator|::
name|setElementProperty
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Property
expr_stmt|;
name|m_property
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementAttribute
name|void
name|DomAction
operator|::
name|setElementAttribute
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Attribute
expr_stmt|;
name|m_attribute
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomActionRef
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomActionRef
name|DomActionRef
operator|::
name|DomActionRef
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomActionRef
name|DomActionRef
operator|::
name|~
name|DomActionRef
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomActionRef
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
name|setAttributeName
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomActionRef
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"actionref"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeName
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|attributeName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomButtonGroup
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_attribute
argument_list|)
expr_stmt|;
name|m_attribute
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomButtonGroup
name|DomButtonGroup
operator|::
name|DomButtonGroup
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomButtonGroup
name|DomButtonGroup
operator|::
name|~
name|DomButtonGroup
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_attribute
argument_list|)
expr_stmt|;
name|m_attribute
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomButtonGroup
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
name|setAttributeName
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"property"
argument_list|)
condition|)
block|{
name|DomProperty
modifier|*
name|v
init|=
operator|new
name|DomProperty
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"attribute"
argument_list|)
condition|)
block|{
name|DomProperty
modifier|*
name|v
init|=
operator|new
name|DomProperty
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_attribute
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomButtonGroup
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"buttongroup"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeName
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|attributeName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_property
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomProperty
modifier|*
name|v
init|=
name|m_property
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"property"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_attribute
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomProperty
modifier|*
name|v
init|=
name|m_attribute
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"attribute"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementProperty
name|void
name|DomButtonGroup
operator|::
name|setElementProperty
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Property
expr_stmt|;
name|m_property
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementAttribute
name|void
name|DomButtonGroup
operator|::
name|setElementAttribute
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Attribute
expr_stmt|;
name|m_attribute
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomButtonGroups
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|qDeleteAll
argument_list|(
name|m_buttonGroup
argument_list|)
expr_stmt|;
name|m_buttonGroup
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomButtonGroups
name|DomButtonGroups
operator|::
name|DomButtonGroups
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomButtonGroups
name|DomButtonGroups
operator|::
name|~
name|DomButtonGroups
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_buttonGroup
argument_list|)
expr_stmt|;
name|m_buttonGroup
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomButtonGroups
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"buttongroup"
argument_list|)
condition|)
block|{
name|DomButtonGroup
modifier|*
name|v
init|=
operator|new
name|DomButtonGroup
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_buttonGroup
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomButtonGroups
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"buttongroups"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_buttonGroup
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomButtonGroup
modifier|*
name|v
init|=
name|m_buttonGroup
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"buttongroup"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementButtonGroup
name|void
name|DomButtonGroups
operator|::
name|setElementButtonGroup
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomButtonGroup
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|ButtonGroup
expr_stmt|;
name|m_buttonGroup
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomImages
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|qDeleteAll
argument_list|(
name|m_image
argument_list|)
expr_stmt|;
name|m_image
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomImages
name|DomImages
operator|::
name|DomImages
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomImages
name|DomImages
operator|::
name|~
name|DomImages
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_image
argument_list|)
expr_stmt|;
name|m_image
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomImages
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"image"
argument_list|)
condition|)
block|{
name|DomImage
modifier|*
name|v
init|=
operator|new
name|DomImage
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_image
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomImages
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"images"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_image
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomImage
modifier|*
name|v
init|=
name|m_image
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"image"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementImage
name|void
name|DomImages
operator|::
name|setElementImage
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomImage
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Image
expr_stmt|;
name|m_image
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomImage
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
operator|delete
name|m_data
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_data
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomImage
name|DomImage
operator|::
name|DomImage
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
name|m_data
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomImage
name|DomImage
operator|::
name|~
name|DomImage
parameter_list|()
block|{
operator|delete
name|m_data
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomImage
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
name|setAttributeName
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"data"
argument_list|)
condition|)
block|{
name|DomImageData
modifier|*
name|v
init|=
operator|new
name|DomImageData
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementData
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomImage
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"image"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeName
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|attributeName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|Data
condition|)
block|{
name|m_data
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"data"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementData
name|DomImageData
modifier|*
name|DomImage
operator|::
name|takeElementData
parameter_list|()
block|{
name|DomImageData
modifier|*
name|a
init|=
name|m_data
decl_stmt|;
name|m_data
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|Data
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementData
name|void
name|DomImage
operator|::
name|setElementData
parameter_list|(
name|DomImageData
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_data
expr_stmt|;
name|m_children
operator||=
name|Data
expr_stmt|;
name|m_data
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementData
name|void
name|DomImage
operator|::
name|clearElementData
parameter_list|()
block|{
operator|delete
name|m_data
expr_stmt|;
name|m_data
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|Data
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomImageData
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_format
operator|=
literal|false
expr_stmt|;
name|m_has_attr_length
operator|=
literal|false
expr_stmt|;
name|m_attr_length
operator|=
literal|0
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomImageData
name|DomImageData
operator|::
name|DomImageData
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_format
operator|=
literal|false
expr_stmt|;
name|m_has_attr_length
operator|=
literal|false
expr_stmt|;
name|m_attr_length
operator|=
literal|0
expr_stmt|;
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomImageData
name|DomImageData
operator|::
name|~
name|DomImageData
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomImageData
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"format"
argument_list|)
condition|)
block|{
name|setAttributeFormat
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"length"
argument_list|)
condition|)
block|{
name|setAttributeLength
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomImageData
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"imagedata"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeFormat
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"format"
argument_list|)
argument_list|,
name|attributeFormat
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeLength
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"length"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributeLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomCustomWidgets
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|qDeleteAll
argument_list|(
name|m_customWidget
argument_list|)
expr_stmt|;
name|m_customWidget
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomCustomWidgets
name|DomCustomWidgets
operator|::
name|DomCustomWidgets
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomCustomWidgets
name|DomCustomWidgets
operator|::
name|~
name|DomCustomWidgets
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_customWidget
argument_list|)
expr_stmt|;
name|m_customWidget
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomCustomWidgets
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"customwidget"
argument_list|)
condition|)
block|{
name|DomCustomWidget
modifier|*
name|v
init|=
operator|new
name|DomCustomWidget
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_customWidget
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomCustomWidgets
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"customwidgets"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_customWidget
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomCustomWidget
modifier|*
name|v
init|=
name|m_customWidget
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"customwidget"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementCustomWidget
name|void
name|DomCustomWidgets
operator|::
name|setElementCustomWidget
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomCustomWidget
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|CustomWidget
expr_stmt|;
name|m_customWidget
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomHeader
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_location
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomHeader
name|DomHeader
operator|::
name|DomHeader
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_location
operator|=
literal|false
expr_stmt|;
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomHeader
name|DomHeader
operator|::
name|~
name|DomHeader
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomHeader
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"location"
argument_list|)
condition|)
block|{
name|setAttributeLocation
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomHeader
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"header"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeLocation
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"location"
argument_list|)
argument_list|,
name|attributeLocation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomCustomWidget
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
operator|delete
name|m_header
expr_stmt|;
operator|delete
name|m_sizeHint
expr_stmt|;
operator|delete
name|m_sizePolicy
expr_stmt|;
operator|delete
name|m_script
expr_stmt|;
operator|delete
name|m_properties
expr_stmt|;
operator|delete
name|m_slots
expr_stmt|;
operator|delete
name|m_propertyspecifications
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_header
operator|=
literal|0
expr_stmt|;
name|m_sizeHint
operator|=
literal|0
expr_stmt|;
name|m_container
operator|=
literal|0
expr_stmt|;
name|m_sizePolicy
operator|=
literal|0
expr_stmt|;
name|m_script
operator|=
literal|0
expr_stmt|;
name|m_properties
operator|=
literal|0
expr_stmt|;
name|m_slots
operator|=
literal|0
expr_stmt|;
name|m_propertyspecifications
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomCustomWidget
name|DomCustomWidget
operator|::
name|DomCustomWidget
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_header
operator|=
literal|0
expr_stmt|;
name|m_sizeHint
operator|=
literal|0
expr_stmt|;
name|m_container
operator|=
literal|0
expr_stmt|;
name|m_sizePolicy
operator|=
literal|0
expr_stmt|;
name|m_script
operator|=
literal|0
expr_stmt|;
name|m_properties
operator|=
literal|0
expr_stmt|;
name|m_slots
operator|=
literal|0
expr_stmt|;
name|m_propertyspecifications
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomCustomWidget
name|DomCustomWidget
operator|::
name|~
name|DomCustomWidget
parameter_list|()
block|{
operator|delete
name|m_header
expr_stmt|;
operator|delete
name|m_sizeHint
expr_stmt|;
operator|delete
name|m_sizePolicy
expr_stmt|;
operator|delete
name|m_script
expr_stmt|;
operator|delete
name|m_properties
expr_stmt|;
operator|delete
name|m_slots
expr_stmt|;
operator|delete
name|m_propertyspecifications
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomCustomWidget
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"class"
argument_list|)
condition|)
block|{
name|setElementClass
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"extends"
argument_list|)
condition|)
block|{
name|setElementExtends
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"header"
argument_list|)
condition|)
block|{
name|DomHeader
modifier|*
name|v
init|=
operator|new
name|DomHeader
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementHeader
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"sizehint"
argument_list|)
condition|)
block|{
name|DomSize
modifier|*
name|v
init|=
operator|new
name|DomSize
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementSizeHint
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"addpagemethod"
argument_list|)
condition|)
block|{
name|setElementAddPageMethod
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"container"
argument_list|)
condition|)
block|{
name|setElementContainer
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"sizepolicy"
argument_list|)
condition|)
block|{
name|DomSizePolicyData
modifier|*
name|v
init|=
operator|new
name|DomSizePolicyData
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementSizePolicy
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"pixmap"
argument_list|)
condition|)
block|{
name|setElementPixmap
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"script"
argument_list|)
condition|)
block|{
name|DomScript
modifier|*
name|v
init|=
operator|new
name|DomScript
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementScript
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"properties"
argument_list|)
condition|)
block|{
name|DomProperties
modifier|*
name|v
init|=
operator|new
name|DomProperties
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementProperties
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"slots"
argument_list|)
condition|)
block|{
name|DomSlots
modifier|*
name|v
init|=
operator|new
name|DomSlots
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementSlots
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"propertyspecifications"
argument_list|)
condition|)
block|{
name|DomPropertySpecifications
modifier|*
name|v
init|=
operator|new
name|DomPropertySpecifications
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementPropertyspecifications
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomCustomWidget
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"customwidget"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|Class
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"class"
argument_list|)
argument_list|,
name|m_class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Extends
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"extends"
argument_list|)
argument_list|,
name|m_extends
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Header
condition|)
block|{
name|m_header
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"header"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|SizeHint
condition|)
block|{
name|m_sizeHint
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"sizehint"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|AddPageMethod
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"addpagemethod"
argument_list|)
argument_list|,
name|m_addPageMethod
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Container
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"container"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_container
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|SizePolicy
condition|)
block|{
name|m_sizePolicy
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"sizepolicy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Pixmap
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"pixmap"
argument_list|)
argument_list|,
name|m_pixmap
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Script
condition|)
block|{
name|m_script
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"script"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Properties
condition|)
block|{
name|m_properties
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"properties"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Slots
condition|)
block|{
name|m_slots
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"slots"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Propertyspecifications
condition|)
block|{
name|m_propertyspecifications
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"propertyspecifications"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementClass
name|void
name|DomCustomWidget
operator|::
name|setElementClass
parameter_list|(
specifier|const
name|QString
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Class
expr_stmt|;
name|m_class
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementExtends
name|void
name|DomCustomWidget
operator|::
name|setElementExtends
parameter_list|(
specifier|const
name|QString
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Extends
expr_stmt|;
name|m_extends
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementHeader
name|DomHeader
modifier|*
name|DomCustomWidget
operator|::
name|takeElementHeader
parameter_list|()
block|{
name|DomHeader
modifier|*
name|a
init|=
name|m_header
decl_stmt|;
name|m_header
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|Header
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementHeader
name|void
name|DomCustomWidget
operator|::
name|setElementHeader
parameter_list|(
name|DomHeader
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_header
expr_stmt|;
name|m_children
operator||=
name|Header
expr_stmt|;
name|m_header
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementSizeHint
name|DomSize
modifier|*
name|DomCustomWidget
operator|::
name|takeElementSizeHint
parameter_list|()
block|{
name|DomSize
modifier|*
name|a
init|=
name|m_sizeHint
decl_stmt|;
name|m_sizeHint
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|SizeHint
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementSizeHint
name|void
name|DomCustomWidget
operator|::
name|setElementSizeHint
parameter_list|(
name|DomSize
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_sizeHint
expr_stmt|;
name|m_children
operator||=
name|SizeHint
expr_stmt|;
name|m_sizeHint
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementAddPageMethod
name|void
name|DomCustomWidget
operator|::
name|setElementAddPageMethod
parameter_list|(
specifier|const
name|QString
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|AddPageMethod
expr_stmt|;
name|m_addPageMethod
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementContainer
name|void
name|DomCustomWidget
operator|::
name|setElementContainer
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Container
expr_stmt|;
name|m_container
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementSizePolicy
name|DomSizePolicyData
modifier|*
name|DomCustomWidget
operator|::
name|takeElementSizePolicy
parameter_list|()
block|{
name|DomSizePolicyData
modifier|*
name|a
init|=
name|m_sizePolicy
decl_stmt|;
name|m_sizePolicy
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|SizePolicy
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementSizePolicy
name|void
name|DomCustomWidget
operator|::
name|setElementSizePolicy
parameter_list|(
name|DomSizePolicyData
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_sizePolicy
expr_stmt|;
name|m_children
operator||=
name|SizePolicy
expr_stmt|;
name|m_sizePolicy
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementPixmap
name|void
name|DomCustomWidget
operator|::
name|setElementPixmap
parameter_list|(
specifier|const
name|QString
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Pixmap
expr_stmt|;
name|m_pixmap
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementScript
name|DomScript
modifier|*
name|DomCustomWidget
operator|::
name|takeElementScript
parameter_list|()
block|{
name|DomScript
modifier|*
name|a
init|=
name|m_script
decl_stmt|;
name|m_script
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|Script
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementScript
name|void
name|DomCustomWidget
operator|::
name|setElementScript
parameter_list|(
name|DomScript
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_script
expr_stmt|;
name|m_children
operator||=
name|Script
expr_stmt|;
name|m_script
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementProperties
name|DomProperties
modifier|*
name|DomCustomWidget
operator|::
name|takeElementProperties
parameter_list|()
block|{
name|DomProperties
modifier|*
name|a
init|=
name|m_properties
decl_stmt|;
name|m_properties
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|Properties
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementProperties
name|void
name|DomCustomWidget
operator|::
name|setElementProperties
parameter_list|(
name|DomProperties
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_properties
expr_stmt|;
name|m_children
operator||=
name|Properties
expr_stmt|;
name|m_properties
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementSlots
name|DomSlots
modifier|*
name|DomCustomWidget
operator|::
name|takeElementSlots
parameter_list|()
block|{
name|DomSlots
modifier|*
name|a
init|=
name|m_slots
decl_stmt|;
name|m_slots
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|Slots
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementSlots
name|void
name|DomCustomWidget
operator|::
name|setElementSlots
parameter_list|(
name|DomSlots
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_slots
expr_stmt|;
name|m_children
operator||=
name|Slots
expr_stmt|;
name|m_slots
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementPropertyspecifications
name|DomPropertySpecifications
modifier|*
name|DomCustomWidget
operator|::
name|takeElementPropertyspecifications
parameter_list|()
block|{
name|DomPropertySpecifications
modifier|*
name|a
init|=
name|m_propertyspecifications
decl_stmt|;
name|m_propertyspecifications
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|Propertyspecifications
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementPropertyspecifications
name|void
name|DomCustomWidget
operator|::
name|setElementPropertyspecifications
parameter_list|(
name|DomPropertySpecifications
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_propertyspecifications
expr_stmt|;
name|m_children
operator||=
name|Propertyspecifications
expr_stmt|;
name|m_propertyspecifications
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementClass
name|void
name|DomCustomWidget
operator|::
name|clearElementClass
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Class
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementExtends
name|void
name|DomCustomWidget
operator|::
name|clearElementExtends
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Extends
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementHeader
name|void
name|DomCustomWidget
operator|::
name|clearElementHeader
parameter_list|()
block|{
operator|delete
name|m_header
expr_stmt|;
name|m_header
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|Header
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementSizeHint
name|void
name|DomCustomWidget
operator|::
name|clearElementSizeHint
parameter_list|()
block|{
operator|delete
name|m_sizeHint
expr_stmt|;
name|m_sizeHint
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|SizeHint
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementAddPageMethod
name|void
name|DomCustomWidget
operator|::
name|clearElementAddPageMethod
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|AddPageMethod
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementContainer
name|void
name|DomCustomWidget
operator|::
name|clearElementContainer
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Container
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementSizePolicy
name|void
name|DomCustomWidget
operator|::
name|clearElementSizePolicy
parameter_list|()
block|{
operator|delete
name|m_sizePolicy
expr_stmt|;
name|m_sizePolicy
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|SizePolicy
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementPixmap
name|void
name|DomCustomWidget
operator|::
name|clearElementPixmap
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Pixmap
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementScript
name|void
name|DomCustomWidget
operator|::
name|clearElementScript
parameter_list|()
block|{
operator|delete
name|m_script
expr_stmt|;
name|m_script
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|Script
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementProperties
name|void
name|DomCustomWidget
operator|::
name|clearElementProperties
parameter_list|()
block|{
operator|delete
name|m_properties
expr_stmt|;
name|m_properties
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|Properties
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementSlots
name|void
name|DomCustomWidget
operator|::
name|clearElementSlots
parameter_list|()
block|{
operator|delete
name|m_slots
expr_stmt|;
name|m_slots
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|Slots
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementPropertyspecifications
name|void
name|DomCustomWidget
operator|::
name|clearElementPropertyspecifications
parameter_list|()
block|{
operator|delete
name|m_propertyspecifications
expr_stmt|;
name|m_propertyspecifications
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|Propertyspecifications
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomProperties
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomProperties
name|DomProperties
operator|::
name|DomProperties
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomProperties
name|DomProperties
operator|::
name|~
name|DomProperties
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomProperties
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"property"
argument_list|)
condition|)
block|{
name|DomPropertyData
modifier|*
name|v
init|=
operator|new
name|DomPropertyData
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomProperties
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"properties"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_property
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomPropertyData
modifier|*
name|v
init|=
name|m_property
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"property"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementProperty
name|void
name|DomProperties
operator|::
name|setElementProperty
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomPropertyData
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Property
expr_stmt|;
name|m_property
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomPropertyData
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_type
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomPropertyData
name|DomPropertyData
operator|::
name|DomPropertyData
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_type
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomPropertyData
name|DomPropertyData
operator|::
name|~
name|DomPropertyData
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomPropertyData
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
name|setAttributeType
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomPropertyData
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"propertydata"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeType
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|attributeType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomSizePolicyData
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_horData
operator|=
literal|0
expr_stmt|;
name|m_verData
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomSizePolicyData
name|DomSizePolicyData
operator|::
name|DomSizePolicyData
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_horData
operator|=
literal|0
expr_stmt|;
name|m_verData
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomSizePolicyData
name|DomSizePolicyData
operator|::
name|~
name|DomSizePolicyData
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomSizePolicyData
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"hordata"
argument_list|)
condition|)
block|{
name|setElementHorData
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"verdata"
argument_list|)
condition|)
block|{
name|setElementVerData
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomSizePolicyData
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"sizepolicydata"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|HorData
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"hordata"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_horData
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|VerData
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"verdata"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_verData
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementHorData
name|void
name|DomSizePolicyData
operator|::
name|setElementHorData
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|HorData
expr_stmt|;
name|m_horData
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementVerData
name|void
name|DomSizePolicyData
operator|::
name|setElementVerData
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|VerData
expr_stmt|;
name|m_verData
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementHorData
name|void
name|DomSizePolicyData
operator|::
name|clearElementHorData
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|HorData
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementVerData
name|void
name|DomSizePolicyData
operator|::
name|clearElementVerData
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|VerData
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomLayoutDefault
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_spacing
operator|=
literal|false
expr_stmt|;
name|m_attr_spacing
operator|=
literal|0
expr_stmt|;
name|m_has_attr_margin
operator|=
literal|false
expr_stmt|;
name|m_attr_margin
operator|=
literal|0
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomLayoutDefault
name|DomLayoutDefault
operator|::
name|DomLayoutDefault
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_spacing
operator|=
literal|false
expr_stmt|;
name|m_attr_spacing
operator|=
literal|0
expr_stmt|;
name|m_has_attr_margin
operator|=
literal|false
expr_stmt|;
name|m_attr_margin
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomLayoutDefault
name|DomLayoutDefault
operator|::
name|~
name|DomLayoutDefault
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomLayoutDefault
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"spacing"
argument_list|)
condition|)
block|{
name|setAttributeSpacing
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"margin"
argument_list|)
condition|)
block|{
name|setAttributeMargin
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomLayoutDefault
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"layoutdefault"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeSpacing
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"spacing"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributeSpacing
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeMargin
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"margin"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributeMargin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomLayoutFunction
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_spacing
operator|=
literal|false
expr_stmt|;
name|m_has_attr_margin
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomLayoutFunction
name|DomLayoutFunction
operator|::
name|DomLayoutFunction
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_spacing
operator|=
literal|false
expr_stmt|;
name|m_has_attr_margin
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomLayoutFunction
name|DomLayoutFunction
operator|::
name|~
name|DomLayoutFunction
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomLayoutFunction
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"spacing"
argument_list|)
condition|)
block|{
name|setAttributeSpacing
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"margin"
argument_list|)
condition|)
block|{
name|setAttributeMargin
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomLayoutFunction
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"layoutfunction"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeSpacing
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"spacing"
argument_list|)
argument_list|,
name|attributeSpacing
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeMargin
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"margin"
argument_list|)
argument_list|,
name|attributeMargin
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomTabStops
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|m_tabStop
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomTabStops
name|DomTabStops
operator|::
name|DomTabStops
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomTabStops
name|DomTabStops
operator|::
name|~
name|DomTabStops
parameter_list|()
block|{
name|m_tabStop
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomTabStops
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"tabstop"
argument_list|)
condition|)
block|{
name|m_tabStop
operator|.
name|append
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomTabStops
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"tabstops"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_tabStop
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|v
init|=
name|m_tabStop
index|[
name|i
index|]
decl_stmt|;
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"tabstop"
argument_list|)
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementTabStop
name|void
name|DomTabStops
operator|::
name|setElementTabStop
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|TabStop
expr_stmt|;
name|m_tabStop
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomLayout
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_attribute
argument_list|)
expr_stmt|;
name|m_attribute
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_item
argument_list|)
expr_stmt|;
name|m_item
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_class
operator|=
literal|false
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
name|m_has_attr_stretch
operator|=
literal|false
expr_stmt|;
name|m_has_attr_rowStretch
operator|=
literal|false
expr_stmt|;
name|m_has_attr_columnStretch
operator|=
literal|false
expr_stmt|;
name|m_has_attr_rowMinimumHeight
operator|=
literal|false
expr_stmt|;
name|m_has_attr_columnMinimumWidth
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomLayout
name|DomLayout
operator|::
name|DomLayout
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_class
operator|=
literal|false
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
name|m_has_attr_stretch
operator|=
literal|false
expr_stmt|;
name|m_has_attr_rowStretch
operator|=
literal|false
expr_stmt|;
name|m_has_attr_columnStretch
operator|=
literal|false
expr_stmt|;
name|m_has_attr_rowMinimumHeight
operator|=
literal|false
expr_stmt|;
name|m_has_attr_columnMinimumWidth
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomLayout
name|DomLayout
operator|::
name|~
name|DomLayout
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_attribute
argument_list|)
expr_stmt|;
name|m_attribute
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_item
argument_list|)
expr_stmt|;
name|m_item
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomLayout
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"class"
argument_list|)
condition|)
block|{
name|setAttributeClass
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
name|setAttributeName
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"stretch"
argument_list|)
condition|)
block|{
name|setAttributeStretch
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"rowstretch"
argument_list|)
condition|)
block|{
name|setAttributeRowStretch
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"columnstretch"
argument_list|)
condition|)
block|{
name|setAttributeColumnStretch
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"rowminimumheight"
argument_list|)
condition|)
block|{
name|setAttributeRowMinimumHeight
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"columnminimumwidth"
argument_list|)
condition|)
block|{
name|setAttributeColumnMinimumWidth
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"property"
argument_list|)
condition|)
block|{
name|DomProperty
modifier|*
name|v
init|=
operator|new
name|DomProperty
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"attribute"
argument_list|)
condition|)
block|{
name|DomProperty
modifier|*
name|v
init|=
operator|new
name|DomProperty
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_attribute
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"item"
argument_list|)
condition|)
block|{
name|DomLayoutItem
modifier|*
name|v
init|=
operator|new
name|DomLayoutItem
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_item
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomLayout
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"layout"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeClass
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"class"
argument_list|)
argument_list|,
name|attributeClass
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeName
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|attributeName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeStretch
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"stretch"
argument_list|)
argument_list|,
name|attributeStretch
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeRowStretch
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"rowstretch"
argument_list|)
argument_list|,
name|attributeRowStretch
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeColumnStretch
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"columnstretch"
argument_list|)
argument_list|,
name|attributeColumnStretch
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeRowMinimumHeight
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"rowminimumheight"
argument_list|)
argument_list|,
name|attributeRowMinimumHeight
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeColumnMinimumWidth
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"columnminimumwidth"
argument_list|)
argument_list|,
name|attributeColumnMinimumWidth
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_property
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomProperty
modifier|*
name|v
init|=
name|m_property
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"property"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_attribute
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomProperty
modifier|*
name|v
init|=
name|m_attribute
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"attribute"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_item
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomLayoutItem
modifier|*
name|v
init|=
name|m_item
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"item"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementProperty
name|void
name|DomLayout
operator|::
name|setElementProperty
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Property
expr_stmt|;
name|m_property
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementAttribute
name|void
name|DomLayout
operator|::
name|setElementAttribute
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Attribute
expr_stmt|;
name|m_attribute
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementItem
name|void
name|DomLayout
operator|::
name|setElementItem
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomLayoutItem
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Item
expr_stmt|;
name|m_item
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomLayoutItem
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
operator|delete
name|m_widget
expr_stmt|;
operator|delete
name|m_layout
expr_stmt|;
operator|delete
name|m_spacer
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_row
operator|=
literal|false
expr_stmt|;
name|m_attr_row
operator|=
literal|0
expr_stmt|;
name|m_has_attr_column
operator|=
literal|false
expr_stmt|;
name|m_attr_column
operator|=
literal|0
expr_stmt|;
name|m_has_attr_rowSpan
operator|=
literal|false
expr_stmt|;
name|m_attr_rowSpan
operator|=
literal|0
expr_stmt|;
name|m_has_attr_colSpan
operator|=
literal|false
expr_stmt|;
name|m_attr_colSpan
operator|=
literal|0
expr_stmt|;
name|m_has_attr_alignment
operator|=
literal|false
expr_stmt|;
block|}
name|m_kind
operator|=
name|Unknown
expr_stmt|;
name|m_widget
operator|=
literal|0
expr_stmt|;
name|m_layout
operator|=
literal|0
expr_stmt|;
name|m_spacer
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomLayoutItem
name|DomLayoutItem
operator|::
name|DomLayoutItem
parameter_list|()
block|{
name|m_kind
operator|=
name|Unknown
expr_stmt|;
name|m_has_attr_row
operator|=
literal|false
expr_stmt|;
name|m_attr_row
operator|=
literal|0
expr_stmt|;
name|m_has_attr_column
operator|=
literal|false
expr_stmt|;
name|m_attr_column
operator|=
literal|0
expr_stmt|;
name|m_has_attr_rowSpan
operator|=
literal|false
expr_stmt|;
name|m_attr_rowSpan
operator|=
literal|0
expr_stmt|;
name|m_has_attr_colSpan
operator|=
literal|false
expr_stmt|;
name|m_attr_colSpan
operator|=
literal|0
expr_stmt|;
name|m_has_attr_alignment
operator|=
literal|false
expr_stmt|;
name|m_widget
operator|=
literal|0
expr_stmt|;
name|m_layout
operator|=
literal|0
expr_stmt|;
name|m_spacer
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomLayoutItem
name|DomLayoutItem
operator|::
name|~
name|DomLayoutItem
parameter_list|()
block|{
operator|delete
name|m_widget
expr_stmt|;
operator|delete
name|m_layout
expr_stmt|;
operator|delete
name|m_spacer
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomLayoutItem
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"row"
argument_list|)
condition|)
block|{
name|setAttributeRow
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"column"
argument_list|)
condition|)
block|{
name|setAttributeColumn
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"rowspan"
argument_list|)
condition|)
block|{
name|setAttributeRowSpan
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"colspan"
argument_list|)
condition|)
block|{
name|setAttributeColSpan
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"alignment"
argument_list|)
condition|)
block|{
name|setAttributeAlignment
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"widget"
argument_list|)
condition|)
block|{
name|DomWidget
modifier|*
name|v
init|=
operator|new
name|DomWidget
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementWidget
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"layout"
argument_list|)
condition|)
block|{
name|DomLayout
modifier|*
name|v
init|=
operator|new
name|DomLayout
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementLayout
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"spacer"
argument_list|)
condition|)
block|{
name|DomSpacer
modifier|*
name|v
init|=
operator|new
name|DomSpacer
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementSpacer
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomLayoutItem
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"layoutitem"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeRow
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributeRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeColumn
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"column"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributeColumn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeRowSpan
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"rowspan"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributeRowSpan
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeColSpan
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"colspan"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributeColSpan
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeAlignment
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"alignment"
argument_list|)
argument_list|,
name|attributeAlignment
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|kind
argument_list|()
condition|)
block|{
case|case
name|Widget
case|:
block|{
name|DomWidget
modifier|*
name|v
init|=
name|elementWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"widget"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Layout
case|:
block|{
name|DomLayout
modifier|*
name|v
init|=
name|elementLayout
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"layout"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Spacer
case|:
block|{
name|DomSpacer
modifier|*
name|v
init|=
name|elementSpacer
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"spacer"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
break|break;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementWidget
name|DomWidget
modifier|*
name|DomLayoutItem
operator|::
name|takeElementWidget
parameter_list|()
block|{
name|DomWidget
modifier|*
name|a
init|=
name|m_widget
decl_stmt|;
name|m_widget
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementWidget
name|void
name|DomLayoutItem
operator|::
name|setElementWidget
parameter_list|(
name|DomWidget
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Widget
expr_stmt|;
name|m_widget
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementLayout
name|DomLayout
modifier|*
name|DomLayoutItem
operator|::
name|takeElementLayout
parameter_list|()
block|{
name|DomLayout
modifier|*
name|a
init|=
name|m_layout
decl_stmt|;
name|m_layout
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementLayout
name|void
name|DomLayoutItem
operator|::
name|setElementLayout
parameter_list|(
name|DomLayout
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Layout
expr_stmt|;
name|m_layout
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementSpacer
name|DomSpacer
modifier|*
name|DomLayoutItem
operator|::
name|takeElementSpacer
parameter_list|()
block|{
name|DomSpacer
modifier|*
name|a
init|=
name|m_spacer
decl_stmt|;
name|m_spacer
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementSpacer
name|void
name|DomLayoutItem
operator|::
name|setElementSpacer
parameter_list|(
name|DomSpacer
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Spacer
expr_stmt|;
name|m_spacer
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomRow
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomRow
name|DomRow
operator|::
name|DomRow
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomRow
name|DomRow
operator|::
name|~
name|DomRow
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomRow
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"property"
argument_list|)
condition|)
block|{
name|DomProperty
modifier|*
name|v
init|=
operator|new
name|DomProperty
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomRow
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"row"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_property
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomProperty
modifier|*
name|v
init|=
name|m_property
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"property"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementProperty
name|void
name|DomRow
operator|::
name|setElementProperty
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Property
expr_stmt|;
name|m_property
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomColumn
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomColumn
name|DomColumn
operator|::
name|DomColumn
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomColumn
name|DomColumn
operator|::
name|~
name|DomColumn
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomColumn
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"property"
argument_list|)
condition|)
block|{
name|DomProperty
modifier|*
name|v
init|=
operator|new
name|DomProperty
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomColumn
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"column"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_property
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomProperty
modifier|*
name|v
init|=
name|m_property
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"property"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementProperty
name|void
name|DomColumn
operator|::
name|setElementProperty
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Property
expr_stmt|;
name|m_property
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomItem
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_item
argument_list|)
expr_stmt|;
name|m_item
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_row
operator|=
literal|false
expr_stmt|;
name|m_attr_row
operator|=
literal|0
expr_stmt|;
name|m_has_attr_column
operator|=
literal|false
expr_stmt|;
name|m_attr_column
operator|=
literal|0
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomItem
name|DomItem
operator|::
name|DomItem
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_row
operator|=
literal|false
expr_stmt|;
name|m_attr_row
operator|=
literal|0
expr_stmt|;
name|m_has_attr_column
operator|=
literal|false
expr_stmt|;
name|m_attr_column
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomItem
name|DomItem
operator|::
name|~
name|DomItem
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_item
argument_list|)
expr_stmt|;
name|m_item
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomItem
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"row"
argument_list|)
condition|)
block|{
name|setAttributeRow
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"column"
argument_list|)
condition|)
block|{
name|setAttributeColumn
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"property"
argument_list|)
condition|)
block|{
name|DomProperty
modifier|*
name|v
init|=
operator|new
name|DomProperty
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"item"
argument_list|)
condition|)
block|{
name|DomItem
modifier|*
name|v
init|=
operator|new
name|DomItem
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_item
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomItem
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"item"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeRow
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributeRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeColumn
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"column"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributeColumn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_property
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomProperty
modifier|*
name|v
init|=
name|m_property
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"property"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_item
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomItem
modifier|*
name|v
init|=
name|m_item
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"item"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementProperty
name|void
name|DomItem
operator|::
name|setElementProperty
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Property
expr_stmt|;
name|m_property
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementItem
name|void
name|DomItem
operator|::
name|setElementItem
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomItem
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Item
expr_stmt|;
name|m_item
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomWidget
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|m_class
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_script
argument_list|)
expr_stmt|;
name|m_script
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_widgetData
argument_list|)
expr_stmt|;
name|m_widgetData
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_attribute
argument_list|)
expr_stmt|;
name|m_attribute
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_row
argument_list|)
expr_stmt|;
name|m_row
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_column
argument_list|)
expr_stmt|;
name|m_column
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_item
argument_list|)
expr_stmt|;
name|m_item
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_layout
argument_list|)
expr_stmt|;
name|m_layout
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_widget
argument_list|)
expr_stmt|;
name|m_widget
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_action
argument_list|)
expr_stmt|;
name|m_action
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_actionGroup
argument_list|)
expr_stmt|;
name|m_actionGroup
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_addAction
argument_list|)
expr_stmt|;
name|m_addAction
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_zOrder
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_class
operator|=
literal|false
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
name|m_has_attr_native
operator|=
literal|false
expr_stmt|;
name|m_attr_native
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomWidget
name|DomWidget
operator|::
name|DomWidget
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_class
operator|=
literal|false
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
name|m_has_attr_native
operator|=
literal|false
expr_stmt|;
name|m_attr_native
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomWidget
name|DomWidget
operator|::
name|~
name|DomWidget
parameter_list|()
block|{
name|m_class
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_script
argument_list|)
expr_stmt|;
name|m_script
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_widgetData
argument_list|)
expr_stmt|;
name|m_widgetData
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_attribute
argument_list|)
expr_stmt|;
name|m_attribute
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_row
argument_list|)
expr_stmt|;
name|m_row
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_column
argument_list|)
expr_stmt|;
name|m_column
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_item
argument_list|)
expr_stmt|;
name|m_item
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_layout
argument_list|)
expr_stmt|;
name|m_layout
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_widget
argument_list|)
expr_stmt|;
name|m_widget
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_action
argument_list|)
expr_stmt|;
name|m_action
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_actionGroup
argument_list|)
expr_stmt|;
name|m_actionGroup
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_addAction
argument_list|)
expr_stmt|;
name|m_addAction
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_zOrder
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomWidget
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"class"
argument_list|)
condition|)
block|{
name|setAttributeClass
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
name|setAttributeName
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"native"
argument_list|)
condition|)
block|{
name|setAttributeNative
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"class"
argument_list|)
condition|)
block|{
name|m_class
operator|.
name|append
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"property"
argument_list|)
condition|)
block|{
name|DomProperty
modifier|*
name|v
init|=
operator|new
name|DomProperty
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"script"
argument_list|)
condition|)
block|{
name|DomScript
modifier|*
name|v
init|=
operator|new
name|DomScript
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_script
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"widgetdata"
argument_list|)
condition|)
block|{
name|DomWidgetData
modifier|*
name|v
init|=
operator|new
name|DomWidgetData
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_widgetData
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"attribute"
argument_list|)
condition|)
block|{
name|DomProperty
modifier|*
name|v
init|=
operator|new
name|DomProperty
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_attribute
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"row"
argument_list|)
condition|)
block|{
name|DomRow
modifier|*
name|v
init|=
operator|new
name|DomRow
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_row
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"column"
argument_list|)
condition|)
block|{
name|DomColumn
modifier|*
name|v
init|=
operator|new
name|DomColumn
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_column
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"item"
argument_list|)
condition|)
block|{
name|DomItem
modifier|*
name|v
init|=
operator|new
name|DomItem
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_item
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"layout"
argument_list|)
condition|)
block|{
name|DomLayout
modifier|*
name|v
init|=
operator|new
name|DomLayout
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_layout
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"widget"
argument_list|)
condition|)
block|{
name|DomWidget
modifier|*
name|v
init|=
operator|new
name|DomWidget
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_widget
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"action"
argument_list|)
condition|)
block|{
name|DomAction
modifier|*
name|v
init|=
operator|new
name|DomAction
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_action
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"actiongroup"
argument_list|)
condition|)
block|{
name|DomActionGroup
modifier|*
name|v
init|=
operator|new
name|DomActionGroup
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_actionGroup
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"addaction"
argument_list|)
condition|)
block|{
name|DomActionRef
modifier|*
name|v
init|=
operator|new
name|DomActionRef
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_addAction
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"zorder"
argument_list|)
condition|)
block|{
name|m_zOrder
operator|.
name|append
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomWidget
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"widget"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeClass
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"class"
argument_list|)
argument_list|,
name|attributeClass
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeName
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|attributeName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeNative
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"native"
argument_list|)
argument_list|,
operator|(
name|attributeNative
argument_list|()
condition|?
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
else|:
name|QLatin1String
argument_list|(
literal|"false"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_class
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|v
init|=
name|m_class
index|[
name|i
index|]
decl_stmt|;
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"class"
argument_list|)
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_property
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomProperty
modifier|*
name|v
init|=
name|m_property
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"property"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_script
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomScript
modifier|*
name|v
init|=
name|m_script
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"script"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_widgetData
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomWidgetData
modifier|*
name|v
init|=
name|m_widgetData
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"widgetdata"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_attribute
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomProperty
modifier|*
name|v
init|=
name|m_attribute
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"attribute"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_row
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomRow
modifier|*
name|v
init|=
name|m_row
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"row"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_column
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomColumn
modifier|*
name|v
init|=
name|m_column
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"column"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_item
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomItem
modifier|*
name|v
init|=
name|m_item
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"item"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_layout
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomLayout
modifier|*
name|v
init|=
name|m_layout
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"layout"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_widget
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomWidget
modifier|*
name|v
init|=
name|m_widget
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"widget"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_action
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomAction
modifier|*
name|v
init|=
name|m_action
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"action"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_actionGroup
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomActionGroup
modifier|*
name|v
init|=
name|m_actionGroup
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"actiongroup"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_addAction
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomActionRef
modifier|*
name|v
init|=
name|m_addAction
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"addaction"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_zOrder
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|v
init|=
name|m_zOrder
index|[
name|i
index|]
decl_stmt|;
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"zorder"
argument_list|)
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementClass
name|void
name|DomWidget
operator|::
name|setElementClass
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Class
expr_stmt|;
name|m_class
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementProperty
name|void
name|DomWidget
operator|::
name|setElementProperty
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Property
expr_stmt|;
name|m_property
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementScript
name|void
name|DomWidget
operator|::
name|setElementScript
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomScript
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Script
expr_stmt|;
name|m_script
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementWidgetData
name|void
name|DomWidget
operator|::
name|setElementWidgetData
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomWidgetData
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|WidgetData
expr_stmt|;
name|m_widgetData
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementAttribute
name|void
name|DomWidget
operator|::
name|setElementAttribute
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Attribute
expr_stmt|;
name|m_attribute
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementRow
name|void
name|DomWidget
operator|::
name|setElementRow
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomRow
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Row
expr_stmt|;
name|m_row
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementColumn
name|void
name|DomWidget
operator|::
name|setElementColumn
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomColumn
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Column
expr_stmt|;
name|m_column
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementItem
name|void
name|DomWidget
operator|::
name|setElementItem
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomItem
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Item
expr_stmt|;
name|m_item
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementLayout
name|void
name|DomWidget
operator|::
name|setElementLayout
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomLayout
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Layout
expr_stmt|;
name|m_layout
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementWidget
name|void
name|DomWidget
operator|::
name|setElementWidget
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomWidget
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Widget
expr_stmt|;
name|m_widget
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementAction
name|void
name|DomWidget
operator|::
name|setElementAction
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomAction
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Action
expr_stmt|;
name|m_action
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementActionGroup
name|void
name|DomWidget
operator|::
name|setElementActionGroup
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomActionGroup
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|ActionGroup
expr_stmt|;
name|m_actionGroup
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementAddAction
name|void
name|DomWidget
operator|::
name|setElementAddAction
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomActionRef
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|AddAction
expr_stmt|;
name|m_addAction
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementZOrder
name|void
name|DomWidget
operator|::
name|setElementZOrder
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|ZOrder
expr_stmt|;
name|m_zOrder
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomSpacer
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomSpacer
name|DomSpacer
operator|::
name|DomSpacer
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomSpacer
name|DomSpacer
operator|::
name|~
name|DomSpacer
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomSpacer
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
name|setAttributeName
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"property"
argument_list|)
condition|)
block|{
name|DomProperty
modifier|*
name|v
init|=
operator|new
name|DomProperty
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomSpacer
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"spacer"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeName
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|attributeName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_property
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomProperty
modifier|*
name|v
init|=
name|m_property
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"property"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementProperty
name|void
name|DomSpacer
operator|::
name|setElementProperty
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Property
expr_stmt|;
name|m_property
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomColor
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_alpha
operator|=
literal|false
expr_stmt|;
name|m_attr_alpha
operator|=
literal|0
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_red
operator|=
literal|0
expr_stmt|;
name|m_green
operator|=
literal|0
expr_stmt|;
name|m_blue
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomColor
name|DomColor
operator|::
name|DomColor
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_alpha
operator|=
literal|false
expr_stmt|;
name|m_attr_alpha
operator|=
literal|0
expr_stmt|;
name|m_red
operator|=
literal|0
expr_stmt|;
name|m_green
operator|=
literal|0
expr_stmt|;
name|m_blue
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomColor
name|DomColor
operator|::
name|~
name|DomColor
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomColor
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"alpha"
argument_list|)
condition|)
block|{
name|setAttributeAlpha
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"red"
argument_list|)
condition|)
block|{
name|setElementRed
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"green"
argument_list|)
condition|)
block|{
name|setElementGreen
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"blue"
argument_list|)
condition|)
block|{
name|setElementBlue
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomColor
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"color"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeAlpha
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"alpha"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributeAlpha
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|Red
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"red"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_red
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Green
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"green"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_green
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Blue
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"blue"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_blue
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementRed
name|void
name|DomColor
operator|::
name|setElementRed
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Red
expr_stmt|;
name|m_red
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementGreen
name|void
name|DomColor
operator|::
name|setElementGreen
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Green
expr_stmt|;
name|m_green
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementBlue
name|void
name|DomColor
operator|::
name|setElementBlue
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Blue
expr_stmt|;
name|m_blue
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementRed
name|void
name|DomColor
operator|::
name|clearElementRed
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Red
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementGreen
name|void
name|DomColor
operator|::
name|clearElementGreen
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Green
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementBlue
name|void
name|DomColor
operator|::
name|clearElementBlue
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Blue
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomGradientStop
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
operator|delete
name|m_color
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_position
operator|=
literal|false
expr_stmt|;
name|m_attr_position
operator|=
literal|0.0
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_color
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomGradientStop
name|DomGradientStop
operator|::
name|DomGradientStop
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_position
operator|=
literal|false
expr_stmt|;
name|m_attr_position
operator|=
literal|0.0
expr_stmt|;
name|m_color
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomGradientStop
name|DomGradientStop
operator|::
name|~
name|DomGradientStop
parameter_list|()
block|{
operator|delete
name|m_color
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomGradientStop
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"position"
argument_list|)
condition|)
block|{
name|setAttributePosition
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"color"
argument_list|)
condition|)
block|{
name|DomColor
modifier|*
name|v
init|=
operator|new
name|DomColor
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementColor
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomGradientStop
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"gradientstop"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributePosition
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"position"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributePosition
argument_list|()
argument_list|,
literal|'f'
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|Color
condition|)
block|{
name|m_color
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"color"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementColor
name|DomColor
modifier|*
name|DomGradientStop
operator|::
name|takeElementColor
parameter_list|()
block|{
name|DomColor
modifier|*
name|a
init|=
name|m_color
decl_stmt|;
name|m_color
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|Color
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementColor
name|void
name|DomGradientStop
operator|::
name|setElementColor
parameter_list|(
name|DomColor
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_color
expr_stmt|;
name|m_children
operator||=
name|Color
expr_stmt|;
name|m_color
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementColor
name|void
name|DomGradientStop
operator|::
name|clearElementColor
parameter_list|()
block|{
operator|delete
name|m_color
expr_stmt|;
name|m_color
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|Color
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomGradient
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|qDeleteAll
argument_list|(
name|m_gradientStop
argument_list|)
expr_stmt|;
name|m_gradientStop
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_startX
operator|=
literal|false
expr_stmt|;
name|m_attr_startX
operator|=
literal|0.0
expr_stmt|;
name|m_has_attr_startY
operator|=
literal|false
expr_stmt|;
name|m_attr_startY
operator|=
literal|0.0
expr_stmt|;
name|m_has_attr_endX
operator|=
literal|false
expr_stmt|;
name|m_attr_endX
operator|=
literal|0.0
expr_stmt|;
name|m_has_attr_endY
operator|=
literal|false
expr_stmt|;
name|m_attr_endY
operator|=
literal|0.0
expr_stmt|;
name|m_has_attr_centralX
operator|=
literal|false
expr_stmt|;
name|m_attr_centralX
operator|=
literal|0.0
expr_stmt|;
name|m_has_attr_centralY
operator|=
literal|false
expr_stmt|;
name|m_attr_centralY
operator|=
literal|0.0
expr_stmt|;
name|m_has_attr_focalX
operator|=
literal|false
expr_stmt|;
name|m_attr_focalX
operator|=
literal|0.0
expr_stmt|;
name|m_has_attr_focalY
operator|=
literal|false
expr_stmt|;
name|m_attr_focalY
operator|=
literal|0.0
expr_stmt|;
name|m_has_attr_radius
operator|=
literal|false
expr_stmt|;
name|m_attr_radius
operator|=
literal|0.0
expr_stmt|;
name|m_has_attr_angle
operator|=
literal|false
expr_stmt|;
name|m_attr_angle
operator|=
literal|0.0
expr_stmt|;
name|m_has_attr_type
operator|=
literal|false
expr_stmt|;
name|m_has_attr_spread
operator|=
literal|false
expr_stmt|;
name|m_has_attr_coordinateMode
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomGradient
name|DomGradient
operator|::
name|DomGradient
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_startX
operator|=
literal|false
expr_stmt|;
name|m_attr_startX
operator|=
literal|0.0
expr_stmt|;
name|m_has_attr_startY
operator|=
literal|false
expr_stmt|;
name|m_attr_startY
operator|=
literal|0.0
expr_stmt|;
name|m_has_attr_endX
operator|=
literal|false
expr_stmt|;
name|m_attr_endX
operator|=
literal|0.0
expr_stmt|;
name|m_has_attr_endY
operator|=
literal|false
expr_stmt|;
name|m_attr_endY
operator|=
literal|0.0
expr_stmt|;
name|m_has_attr_centralX
operator|=
literal|false
expr_stmt|;
name|m_attr_centralX
operator|=
literal|0.0
expr_stmt|;
name|m_has_attr_centralY
operator|=
literal|false
expr_stmt|;
name|m_attr_centralY
operator|=
literal|0.0
expr_stmt|;
name|m_has_attr_focalX
operator|=
literal|false
expr_stmt|;
name|m_attr_focalX
operator|=
literal|0.0
expr_stmt|;
name|m_has_attr_focalY
operator|=
literal|false
expr_stmt|;
name|m_attr_focalY
operator|=
literal|0.0
expr_stmt|;
name|m_has_attr_radius
operator|=
literal|false
expr_stmt|;
name|m_attr_radius
operator|=
literal|0.0
expr_stmt|;
name|m_has_attr_angle
operator|=
literal|false
expr_stmt|;
name|m_attr_angle
operator|=
literal|0.0
expr_stmt|;
name|m_has_attr_type
operator|=
literal|false
expr_stmt|;
name|m_has_attr_spread
operator|=
literal|false
expr_stmt|;
name|m_has_attr_coordinateMode
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomGradient
name|DomGradient
operator|::
name|~
name|DomGradient
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_gradientStop
argument_list|)
expr_stmt|;
name|m_gradientStop
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomGradient
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"startx"
argument_list|)
condition|)
block|{
name|setAttributeStartX
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"starty"
argument_list|)
condition|)
block|{
name|setAttributeStartY
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"endx"
argument_list|)
condition|)
block|{
name|setAttributeEndX
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"endy"
argument_list|)
condition|)
block|{
name|setAttributeEndY
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"centralx"
argument_list|)
condition|)
block|{
name|setAttributeCentralX
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"centraly"
argument_list|)
condition|)
block|{
name|setAttributeCentralY
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"focalx"
argument_list|)
condition|)
block|{
name|setAttributeFocalX
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"focaly"
argument_list|)
condition|)
block|{
name|setAttributeFocalY
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"radius"
argument_list|)
condition|)
block|{
name|setAttributeRadius
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"angle"
argument_list|)
condition|)
block|{
name|setAttributeAngle
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
name|setAttributeType
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"spread"
argument_list|)
condition|)
block|{
name|setAttributeSpread
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"coordinatemode"
argument_list|)
condition|)
block|{
name|setAttributeCoordinateMode
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"gradientstop"
argument_list|)
condition|)
block|{
name|DomGradientStop
modifier|*
name|v
init|=
operator|new
name|DomGradientStop
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_gradientStop
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomGradient
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"gradient"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeStartX
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"startx"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributeStartX
argument_list|()
argument_list|,
literal|'f'
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeStartY
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"starty"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributeStartY
argument_list|()
argument_list|,
literal|'f'
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeEndX
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"endx"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributeEndX
argument_list|()
argument_list|,
literal|'f'
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeEndY
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"endy"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributeEndY
argument_list|()
argument_list|,
literal|'f'
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeCentralX
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"centralx"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributeCentralX
argument_list|()
argument_list|,
literal|'f'
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeCentralY
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"centraly"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributeCentralY
argument_list|()
argument_list|,
literal|'f'
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeFocalX
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"focalx"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributeFocalX
argument_list|()
argument_list|,
literal|'f'
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeFocalY
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"focaly"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributeFocalY
argument_list|()
argument_list|,
literal|'f'
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeRadius
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"radius"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributeRadius
argument_list|()
argument_list|,
literal|'f'
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeAngle
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"angle"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributeAngle
argument_list|()
argument_list|,
literal|'f'
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeType
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|attributeType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeSpread
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"spread"
argument_list|)
argument_list|,
name|attributeSpread
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeCoordinateMode
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"coordinatemode"
argument_list|)
argument_list|,
name|attributeCoordinateMode
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_gradientStop
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomGradientStop
modifier|*
name|v
init|=
name|m_gradientStop
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"gradientstop"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementGradientStop
name|void
name|DomGradient
operator|::
name|setElementGradientStop
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomGradientStop
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|GradientStop
expr_stmt|;
name|m_gradientStop
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomBrush
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
operator|delete
name|m_color
expr_stmt|;
operator|delete
name|m_texture
expr_stmt|;
operator|delete
name|m_gradient
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_brushStyle
operator|=
literal|false
expr_stmt|;
block|}
name|m_kind
operator|=
name|Unknown
expr_stmt|;
name|m_color
operator|=
literal|0
expr_stmt|;
name|m_texture
operator|=
literal|0
expr_stmt|;
name|m_gradient
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomBrush
name|DomBrush
operator|::
name|DomBrush
parameter_list|()
block|{
name|m_kind
operator|=
name|Unknown
expr_stmt|;
name|m_has_attr_brushStyle
operator|=
literal|false
expr_stmt|;
name|m_color
operator|=
literal|0
expr_stmt|;
name|m_texture
operator|=
literal|0
expr_stmt|;
name|m_gradient
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomBrush
name|DomBrush
operator|::
name|~
name|DomBrush
parameter_list|()
block|{
operator|delete
name|m_color
expr_stmt|;
operator|delete
name|m_texture
expr_stmt|;
operator|delete
name|m_gradient
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomBrush
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"brushstyle"
argument_list|)
condition|)
block|{
name|setAttributeBrushStyle
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"color"
argument_list|)
condition|)
block|{
name|DomColor
modifier|*
name|v
init|=
operator|new
name|DomColor
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementColor
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"texture"
argument_list|)
condition|)
block|{
name|DomProperty
modifier|*
name|v
init|=
operator|new
name|DomProperty
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementTexture
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"gradient"
argument_list|)
condition|)
block|{
name|DomGradient
modifier|*
name|v
init|=
operator|new
name|DomGradient
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementGradient
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomBrush
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"brush"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeBrushStyle
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"brushstyle"
argument_list|)
argument_list|,
name|attributeBrushStyle
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|kind
argument_list|()
condition|)
block|{
case|case
name|Color
case|:
block|{
name|DomColor
modifier|*
name|v
init|=
name|elementColor
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"color"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Texture
case|:
block|{
name|DomProperty
modifier|*
name|v
init|=
name|elementTexture
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"texture"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Gradient
case|:
block|{
name|DomGradient
modifier|*
name|v
init|=
name|elementGradient
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"gradient"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
break|break;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementColor
name|DomColor
modifier|*
name|DomBrush
operator|::
name|takeElementColor
parameter_list|()
block|{
name|DomColor
modifier|*
name|a
init|=
name|m_color
decl_stmt|;
name|m_color
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementColor
name|void
name|DomBrush
operator|::
name|setElementColor
parameter_list|(
name|DomColor
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Color
expr_stmt|;
name|m_color
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementTexture
name|DomProperty
modifier|*
name|DomBrush
operator|::
name|takeElementTexture
parameter_list|()
block|{
name|DomProperty
modifier|*
name|a
init|=
name|m_texture
decl_stmt|;
name|m_texture
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementTexture
name|void
name|DomBrush
operator|::
name|setElementTexture
parameter_list|(
name|DomProperty
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Texture
expr_stmt|;
name|m_texture
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementGradient
name|DomGradient
modifier|*
name|DomBrush
operator|::
name|takeElementGradient
parameter_list|()
block|{
name|DomGradient
modifier|*
name|a
init|=
name|m_gradient
decl_stmt|;
name|m_gradient
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementGradient
name|void
name|DomBrush
operator|::
name|setElementGradient
parameter_list|(
name|DomGradient
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Gradient
expr_stmt|;
name|m_gradient
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomColorRole
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
operator|delete
name|m_brush
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_role
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_brush
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomColorRole
name|DomColorRole
operator|::
name|DomColorRole
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_role
operator|=
literal|false
expr_stmt|;
name|m_brush
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomColorRole
name|DomColorRole
operator|::
name|~
name|DomColorRole
parameter_list|()
block|{
operator|delete
name|m_brush
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomColorRole
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"role"
argument_list|)
condition|)
block|{
name|setAttributeRole
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"brush"
argument_list|)
condition|)
block|{
name|DomBrush
modifier|*
name|v
init|=
operator|new
name|DomBrush
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementBrush
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomColorRole
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"colorrole"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeRole
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"role"
argument_list|)
argument_list|,
name|attributeRole
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|Brush
condition|)
block|{
name|m_brush
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"brush"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementBrush
name|DomBrush
modifier|*
name|DomColorRole
operator|::
name|takeElementBrush
parameter_list|()
block|{
name|DomBrush
modifier|*
name|a
init|=
name|m_brush
decl_stmt|;
name|m_brush
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|Brush
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementBrush
name|void
name|DomColorRole
operator|::
name|setElementBrush
parameter_list|(
name|DomBrush
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_brush
expr_stmt|;
name|m_children
operator||=
name|Brush
expr_stmt|;
name|m_brush
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementBrush
name|void
name|DomColorRole
operator|::
name|clearElementBrush
parameter_list|()
block|{
operator|delete
name|m_brush
expr_stmt|;
name|m_brush
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|Brush
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomColorGroup
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|qDeleteAll
argument_list|(
name|m_colorRole
argument_list|)
expr_stmt|;
name|m_colorRole
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_color
argument_list|)
expr_stmt|;
name|m_color
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomColorGroup
name|DomColorGroup
operator|::
name|DomColorGroup
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomColorGroup
name|DomColorGroup
operator|::
name|~
name|DomColorGroup
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_colorRole
argument_list|)
expr_stmt|;
name|m_colorRole
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_color
argument_list|)
expr_stmt|;
name|m_color
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomColorGroup
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"colorrole"
argument_list|)
condition|)
block|{
name|DomColorRole
modifier|*
name|v
init|=
operator|new
name|DomColorRole
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_colorRole
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"color"
argument_list|)
condition|)
block|{
name|DomColor
modifier|*
name|v
init|=
operator|new
name|DomColor
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_color
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomColorGroup
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"colorgroup"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_colorRole
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomColorRole
modifier|*
name|v
init|=
name|m_colorRole
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"colorrole"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_color
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomColor
modifier|*
name|v
init|=
name|m_color
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"color"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementColorRole
name|void
name|DomColorGroup
operator|::
name|setElementColorRole
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomColorRole
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|ColorRole
expr_stmt|;
name|m_colorRole
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementColor
name|void
name|DomColorGroup
operator|::
name|setElementColor
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomColor
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Color
expr_stmt|;
name|m_color
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomPalette
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
operator|delete
name|m_active
expr_stmt|;
operator|delete
name|m_inactive
expr_stmt|;
operator|delete
name|m_disabled
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_active
operator|=
literal|0
expr_stmt|;
name|m_inactive
operator|=
literal|0
expr_stmt|;
name|m_disabled
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomPalette
name|DomPalette
operator|::
name|DomPalette
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_active
operator|=
literal|0
expr_stmt|;
name|m_inactive
operator|=
literal|0
expr_stmt|;
name|m_disabled
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomPalette
name|DomPalette
operator|::
name|~
name|DomPalette
parameter_list|()
block|{
operator|delete
name|m_active
expr_stmt|;
operator|delete
name|m_inactive
expr_stmt|;
operator|delete
name|m_disabled
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomPalette
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"active"
argument_list|)
condition|)
block|{
name|DomColorGroup
modifier|*
name|v
init|=
operator|new
name|DomColorGroup
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementActive
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"inactive"
argument_list|)
condition|)
block|{
name|DomColorGroup
modifier|*
name|v
init|=
operator|new
name|DomColorGroup
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementInactive
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"disabled"
argument_list|)
condition|)
block|{
name|DomColorGroup
modifier|*
name|v
init|=
operator|new
name|DomColorGroup
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementDisabled
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomPalette
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"palette"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|Active
condition|)
block|{
name|m_active
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"active"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Inactive
condition|)
block|{
name|m_inactive
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"inactive"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Disabled
condition|)
block|{
name|m_disabled
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"disabled"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementActive
name|DomColorGroup
modifier|*
name|DomPalette
operator|::
name|takeElementActive
parameter_list|()
block|{
name|DomColorGroup
modifier|*
name|a
init|=
name|m_active
decl_stmt|;
name|m_active
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|Active
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementActive
name|void
name|DomPalette
operator|::
name|setElementActive
parameter_list|(
name|DomColorGroup
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_active
expr_stmt|;
name|m_children
operator||=
name|Active
expr_stmt|;
name|m_active
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementInactive
name|DomColorGroup
modifier|*
name|DomPalette
operator|::
name|takeElementInactive
parameter_list|()
block|{
name|DomColorGroup
modifier|*
name|a
init|=
name|m_inactive
decl_stmt|;
name|m_inactive
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|Inactive
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementInactive
name|void
name|DomPalette
operator|::
name|setElementInactive
parameter_list|(
name|DomColorGroup
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_inactive
expr_stmt|;
name|m_children
operator||=
name|Inactive
expr_stmt|;
name|m_inactive
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementDisabled
name|DomColorGroup
modifier|*
name|DomPalette
operator|::
name|takeElementDisabled
parameter_list|()
block|{
name|DomColorGroup
modifier|*
name|a
init|=
name|m_disabled
decl_stmt|;
name|m_disabled
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|Disabled
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementDisabled
name|void
name|DomPalette
operator|::
name|setElementDisabled
parameter_list|(
name|DomColorGroup
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_disabled
expr_stmt|;
name|m_children
operator||=
name|Disabled
expr_stmt|;
name|m_disabled
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementActive
name|void
name|DomPalette
operator|::
name|clearElementActive
parameter_list|()
block|{
operator|delete
name|m_active
expr_stmt|;
name|m_active
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|Active
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementInactive
name|void
name|DomPalette
operator|::
name|clearElementInactive
parameter_list|()
block|{
operator|delete
name|m_inactive
expr_stmt|;
name|m_inactive
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|Inactive
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementDisabled
name|void
name|DomPalette
operator|::
name|clearElementDisabled
parameter_list|()
block|{
operator|delete
name|m_disabled
expr_stmt|;
name|m_disabled
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|Disabled
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomFont
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_pointSize
operator|=
literal|0
expr_stmt|;
name|m_weight
operator|=
literal|0
expr_stmt|;
name|m_italic
operator|=
literal|false
expr_stmt|;
name|m_bold
operator|=
literal|false
expr_stmt|;
name|m_underline
operator|=
literal|false
expr_stmt|;
name|m_strikeOut
operator|=
literal|false
expr_stmt|;
name|m_antialiasing
operator|=
literal|false
expr_stmt|;
name|m_kerning
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomFont
name|DomFont
operator|::
name|DomFont
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_pointSize
operator|=
literal|0
expr_stmt|;
name|m_weight
operator|=
literal|0
expr_stmt|;
name|m_italic
operator|=
literal|false
expr_stmt|;
name|m_bold
operator|=
literal|false
expr_stmt|;
name|m_underline
operator|=
literal|false
expr_stmt|;
name|m_strikeOut
operator|=
literal|false
expr_stmt|;
name|m_antialiasing
operator|=
literal|false
expr_stmt|;
name|m_kerning
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomFont
name|DomFont
operator|::
name|~
name|DomFont
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomFont
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"family"
argument_list|)
condition|)
block|{
name|setElementFamily
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"pointsize"
argument_list|)
condition|)
block|{
name|setElementPointSize
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"weight"
argument_list|)
condition|)
block|{
name|setElementWeight
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"italic"
argument_list|)
condition|)
block|{
name|setElementItalic
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"bold"
argument_list|)
condition|)
block|{
name|setElementBold
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"underline"
argument_list|)
condition|)
block|{
name|setElementUnderline
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"strikeout"
argument_list|)
condition|)
block|{
name|setElementStrikeOut
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"antialiasing"
argument_list|)
condition|)
block|{
name|setElementAntialiasing
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"stylestrategy"
argument_list|)
condition|)
block|{
name|setElementStyleStrategy
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"kerning"
argument_list|)
condition|)
block|{
name|setElementKerning
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomFont
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"font"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|Family
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"family"
argument_list|)
argument_list|,
name|m_family
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|PointSize
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"pointsize"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_pointSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Weight
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"weight"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_weight
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Italic
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"italic"
argument_list|)
argument_list|,
operator|(
name|m_italic
condition|?
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
else|:
name|QLatin1String
argument_list|(
literal|"false"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Bold
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"bold"
argument_list|)
argument_list|,
operator|(
name|m_bold
condition|?
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
else|:
name|QLatin1String
argument_list|(
literal|"false"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Underline
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"underline"
argument_list|)
argument_list|,
operator|(
name|m_underline
condition|?
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
else|:
name|QLatin1String
argument_list|(
literal|"false"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|StrikeOut
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"strikeout"
argument_list|)
argument_list|,
operator|(
name|m_strikeOut
condition|?
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
else|:
name|QLatin1String
argument_list|(
literal|"false"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Antialiasing
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"antialiasing"
argument_list|)
argument_list|,
operator|(
name|m_antialiasing
condition|?
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
else|:
name|QLatin1String
argument_list|(
literal|"false"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|StyleStrategy
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"stylestrategy"
argument_list|)
argument_list|,
name|m_styleStrategy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Kerning
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"kerning"
argument_list|)
argument_list|,
operator|(
name|m_kerning
condition|?
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
else|:
name|QLatin1String
argument_list|(
literal|"false"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementFamily
name|void
name|DomFont
operator|::
name|setElementFamily
parameter_list|(
specifier|const
name|QString
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Family
expr_stmt|;
name|m_family
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementPointSize
name|void
name|DomFont
operator|::
name|setElementPointSize
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|PointSize
expr_stmt|;
name|m_pointSize
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementWeight
name|void
name|DomFont
operator|::
name|setElementWeight
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Weight
expr_stmt|;
name|m_weight
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementItalic
name|void
name|DomFont
operator|::
name|setElementItalic
parameter_list|(
name|bool
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Italic
expr_stmt|;
name|m_italic
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementBold
name|void
name|DomFont
operator|::
name|setElementBold
parameter_list|(
name|bool
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Bold
expr_stmt|;
name|m_bold
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementUnderline
name|void
name|DomFont
operator|::
name|setElementUnderline
parameter_list|(
name|bool
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Underline
expr_stmt|;
name|m_underline
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementStrikeOut
name|void
name|DomFont
operator|::
name|setElementStrikeOut
parameter_list|(
name|bool
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|StrikeOut
expr_stmt|;
name|m_strikeOut
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementAntialiasing
name|void
name|DomFont
operator|::
name|setElementAntialiasing
parameter_list|(
name|bool
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Antialiasing
expr_stmt|;
name|m_antialiasing
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementStyleStrategy
name|void
name|DomFont
operator|::
name|setElementStyleStrategy
parameter_list|(
specifier|const
name|QString
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|StyleStrategy
expr_stmt|;
name|m_styleStrategy
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementKerning
name|void
name|DomFont
operator|::
name|setElementKerning
parameter_list|(
name|bool
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Kerning
expr_stmt|;
name|m_kerning
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementFamily
name|void
name|DomFont
operator|::
name|clearElementFamily
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Family
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementPointSize
name|void
name|DomFont
operator|::
name|clearElementPointSize
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|PointSize
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementWeight
name|void
name|DomFont
operator|::
name|clearElementWeight
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Weight
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementItalic
name|void
name|DomFont
operator|::
name|clearElementItalic
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Italic
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementBold
name|void
name|DomFont
operator|::
name|clearElementBold
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Bold
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementUnderline
name|void
name|DomFont
operator|::
name|clearElementUnderline
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Underline
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementStrikeOut
name|void
name|DomFont
operator|::
name|clearElementStrikeOut
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|StrikeOut
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementAntialiasing
name|void
name|DomFont
operator|::
name|clearElementAntialiasing
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Antialiasing
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementStyleStrategy
name|void
name|DomFont
operator|::
name|clearElementStyleStrategy
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|StyleStrategy
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementKerning
name|void
name|DomFont
operator|::
name|clearElementKerning
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Kerning
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomPoint
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_x
operator|=
literal|0
expr_stmt|;
name|m_y
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomPoint
name|DomPoint
operator|::
name|DomPoint
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_x
operator|=
literal|0
expr_stmt|;
name|m_y
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomPoint
name|DomPoint
operator|::
name|~
name|DomPoint
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomPoint
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"x"
argument_list|)
condition|)
block|{
name|setElementX
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"y"
argument_list|)
condition|)
block|{
name|setElementY
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomPoint
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"point"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|X
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_x
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Y
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'y'
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_y
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementX
name|void
name|DomPoint
operator|::
name|setElementX
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|X
expr_stmt|;
name|m_x
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementY
name|void
name|DomPoint
operator|::
name|setElementY
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Y
expr_stmt|;
name|m_y
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementX
name|void
name|DomPoint
operator|::
name|clearElementX
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|X
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementY
name|void
name|DomPoint
operator|::
name|clearElementY
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Y
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomRect
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_x
operator|=
literal|0
expr_stmt|;
name|m_y
operator|=
literal|0
expr_stmt|;
name|m_width
operator|=
literal|0
expr_stmt|;
name|m_height
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomRect
name|DomRect
operator|::
name|DomRect
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_x
operator|=
literal|0
expr_stmt|;
name|m_y
operator|=
literal|0
expr_stmt|;
name|m_width
operator|=
literal|0
expr_stmt|;
name|m_height
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomRect
name|DomRect
operator|::
name|~
name|DomRect
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomRect
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"x"
argument_list|)
condition|)
block|{
name|setElementX
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"y"
argument_list|)
condition|)
block|{
name|setElementY
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"width"
argument_list|)
condition|)
block|{
name|setElementWidth
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"height"
argument_list|)
condition|)
block|{
name|setElementHeight
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomRect
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"rect"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|X
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_x
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Y
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'y'
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_y
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Width
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"width"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_width
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Height
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"height"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_height
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementX
name|void
name|DomRect
operator|::
name|setElementX
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|X
expr_stmt|;
name|m_x
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementY
name|void
name|DomRect
operator|::
name|setElementY
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Y
expr_stmt|;
name|m_y
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementWidth
name|void
name|DomRect
operator|::
name|setElementWidth
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Width
expr_stmt|;
name|m_width
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementHeight
name|void
name|DomRect
operator|::
name|setElementHeight
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Height
expr_stmt|;
name|m_height
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementX
name|void
name|DomRect
operator|::
name|clearElementX
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|X
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementY
name|void
name|DomRect
operator|::
name|clearElementY
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Y
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementWidth
name|void
name|DomRect
operator|::
name|clearElementWidth
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Width
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementHeight
name|void
name|DomRect
operator|::
name|clearElementHeight
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Height
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomLocale
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_language
operator|=
literal|false
expr_stmt|;
name|m_has_attr_country
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomLocale
name|DomLocale
operator|::
name|DomLocale
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_language
operator|=
literal|false
expr_stmt|;
name|m_has_attr_country
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomLocale
name|DomLocale
operator|::
name|~
name|DomLocale
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomLocale
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"language"
argument_list|)
condition|)
block|{
name|setAttributeLanguage
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"country"
argument_list|)
condition|)
block|{
name|setAttributeCountry
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomLocale
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"locale"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeLanguage
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"language"
argument_list|)
argument_list|,
name|attributeLanguage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeCountry
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"country"
argument_list|)
argument_list|,
name|attributeCountry
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomSizePolicy
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_hSizeType
operator|=
literal|false
expr_stmt|;
name|m_has_attr_vSizeType
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_hSizeType
operator|=
literal|0
expr_stmt|;
name|m_vSizeType
operator|=
literal|0
expr_stmt|;
name|m_horStretch
operator|=
literal|0
expr_stmt|;
name|m_verStretch
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomSizePolicy
name|DomSizePolicy
operator|::
name|DomSizePolicy
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_hSizeType
operator|=
literal|false
expr_stmt|;
name|m_has_attr_vSizeType
operator|=
literal|false
expr_stmt|;
name|m_hSizeType
operator|=
literal|0
expr_stmt|;
name|m_vSizeType
operator|=
literal|0
expr_stmt|;
name|m_horStretch
operator|=
literal|0
expr_stmt|;
name|m_verStretch
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomSizePolicy
name|DomSizePolicy
operator|::
name|~
name|DomSizePolicy
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomSizePolicy
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"hsizetype"
argument_list|)
condition|)
block|{
name|setAttributeHSizeType
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"vsizetype"
argument_list|)
condition|)
block|{
name|setAttributeVSizeType
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"hsizetype"
argument_list|)
condition|)
block|{
name|setElementHSizeType
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"vsizetype"
argument_list|)
condition|)
block|{
name|setElementVSizeType
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"horstretch"
argument_list|)
condition|)
block|{
name|setElementHorStretch
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"verstretch"
argument_list|)
condition|)
block|{
name|setElementVerStretch
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomSizePolicy
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"sizepolicy"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeHSizeType
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"hsizetype"
argument_list|)
argument_list|,
name|attributeHSizeType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeVSizeType
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"vsizetype"
argument_list|)
argument_list|,
name|attributeVSizeType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|HSizeType
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"hsizetype"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_hSizeType
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|VSizeType
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"vsizetype"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_vSizeType
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|HorStretch
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"horstretch"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_horStretch
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|VerStretch
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"verstretch"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_verStretch
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementHSizeType
name|void
name|DomSizePolicy
operator|::
name|setElementHSizeType
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|HSizeType
expr_stmt|;
name|m_hSizeType
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementVSizeType
name|void
name|DomSizePolicy
operator|::
name|setElementVSizeType
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|VSizeType
expr_stmt|;
name|m_vSizeType
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementHorStretch
name|void
name|DomSizePolicy
operator|::
name|setElementHorStretch
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|HorStretch
expr_stmt|;
name|m_horStretch
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementVerStretch
name|void
name|DomSizePolicy
operator|::
name|setElementVerStretch
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|VerStretch
expr_stmt|;
name|m_verStretch
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementHSizeType
name|void
name|DomSizePolicy
operator|::
name|clearElementHSizeType
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|HSizeType
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementVSizeType
name|void
name|DomSizePolicy
operator|::
name|clearElementVSizeType
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|VSizeType
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementHorStretch
name|void
name|DomSizePolicy
operator|::
name|clearElementHorStretch
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|HorStretch
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementVerStretch
name|void
name|DomSizePolicy
operator|::
name|clearElementVerStretch
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|VerStretch
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomSize
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_width
operator|=
literal|0
expr_stmt|;
name|m_height
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomSize
name|DomSize
operator|::
name|DomSize
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_width
operator|=
literal|0
expr_stmt|;
name|m_height
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomSize
name|DomSize
operator|::
name|~
name|DomSize
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomSize
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"width"
argument_list|)
condition|)
block|{
name|setElementWidth
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"height"
argument_list|)
condition|)
block|{
name|setElementHeight
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomSize
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"size"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|Width
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"width"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_width
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Height
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"height"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_height
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementWidth
name|void
name|DomSize
operator|::
name|setElementWidth
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Width
expr_stmt|;
name|m_width
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementHeight
name|void
name|DomSize
operator|::
name|setElementHeight
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Height
expr_stmt|;
name|m_height
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementWidth
name|void
name|DomSize
operator|::
name|clearElementWidth
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Width
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementHeight
name|void
name|DomSize
operator|::
name|clearElementHeight
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Height
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomDate
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_year
operator|=
literal|0
expr_stmt|;
name|m_month
operator|=
literal|0
expr_stmt|;
name|m_day
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomDate
name|DomDate
operator|::
name|DomDate
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_year
operator|=
literal|0
expr_stmt|;
name|m_month
operator|=
literal|0
expr_stmt|;
name|m_day
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomDate
name|DomDate
operator|::
name|~
name|DomDate
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomDate
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"year"
argument_list|)
condition|)
block|{
name|setElementYear
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"month"
argument_list|)
condition|)
block|{
name|setElementMonth
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"day"
argument_list|)
condition|)
block|{
name|setElementDay
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomDate
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"date"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|Year
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"year"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_year
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Month
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"month"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_month
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Day
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"day"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_day
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementYear
name|void
name|DomDate
operator|::
name|setElementYear
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Year
expr_stmt|;
name|m_year
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementMonth
name|void
name|DomDate
operator|::
name|setElementMonth
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Month
expr_stmt|;
name|m_month
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementDay
name|void
name|DomDate
operator|::
name|setElementDay
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Day
expr_stmt|;
name|m_day
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementYear
name|void
name|DomDate
operator|::
name|clearElementYear
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Year
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementMonth
name|void
name|DomDate
operator|::
name|clearElementMonth
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Month
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementDay
name|void
name|DomDate
operator|::
name|clearElementDay
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Day
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomTime
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_hour
operator|=
literal|0
expr_stmt|;
name|m_minute
operator|=
literal|0
expr_stmt|;
name|m_second
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomTime
name|DomTime
operator|::
name|DomTime
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_hour
operator|=
literal|0
expr_stmt|;
name|m_minute
operator|=
literal|0
expr_stmt|;
name|m_second
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomTime
name|DomTime
operator|::
name|~
name|DomTime
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomTime
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"hour"
argument_list|)
condition|)
block|{
name|setElementHour
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"minute"
argument_list|)
condition|)
block|{
name|setElementMinute
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"second"
argument_list|)
condition|)
block|{
name|setElementSecond
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomTime
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"time"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|Hour
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"hour"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_hour
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Minute
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"minute"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_minute
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Second
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"second"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_second
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementHour
name|void
name|DomTime
operator|::
name|setElementHour
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Hour
expr_stmt|;
name|m_hour
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementMinute
name|void
name|DomTime
operator|::
name|setElementMinute
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Minute
expr_stmt|;
name|m_minute
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementSecond
name|void
name|DomTime
operator|::
name|setElementSecond
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Second
expr_stmt|;
name|m_second
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementHour
name|void
name|DomTime
operator|::
name|clearElementHour
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Hour
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementMinute
name|void
name|DomTime
operator|::
name|clearElementMinute
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Minute
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementSecond
name|void
name|DomTime
operator|::
name|clearElementSecond
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Second
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomDateTime
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_hour
operator|=
literal|0
expr_stmt|;
name|m_minute
operator|=
literal|0
expr_stmt|;
name|m_second
operator|=
literal|0
expr_stmt|;
name|m_year
operator|=
literal|0
expr_stmt|;
name|m_month
operator|=
literal|0
expr_stmt|;
name|m_day
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomDateTime
name|DomDateTime
operator|::
name|DomDateTime
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_hour
operator|=
literal|0
expr_stmt|;
name|m_minute
operator|=
literal|0
expr_stmt|;
name|m_second
operator|=
literal|0
expr_stmt|;
name|m_year
operator|=
literal|0
expr_stmt|;
name|m_month
operator|=
literal|0
expr_stmt|;
name|m_day
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomDateTime
name|DomDateTime
operator|::
name|~
name|DomDateTime
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomDateTime
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"hour"
argument_list|)
condition|)
block|{
name|setElementHour
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"minute"
argument_list|)
condition|)
block|{
name|setElementMinute
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"second"
argument_list|)
condition|)
block|{
name|setElementSecond
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"year"
argument_list|)
condition|)
block|{
name|setElementYear
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"month"
argument_list|)
condition|)
block|{
name|setElementMonth
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"day"
argument_list|)
condition|)
block|{
name|setElementDay
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomDateTime
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"datetime"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|Hour
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"hour"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_hour
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Minute
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"minute"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_minute
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Second
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"second"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_second
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Year
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"year"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_year
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Month
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"month"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_month
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Day
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"day"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_day
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementHour
name|void
name|DomDateTime
operator|::
name|setElementHour
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Hour
expr_stmt|;
name|m_hour
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementMinute
name|void
name|DomDateTime
operator|::
name|setElementMinute
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Minute
expr_stmt|;
name|m_minute
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementSecond
name|void
name|DomDateTime
operator|::
name|setElementSecond
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Second
expr_stmt|;
name|m_second
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementYear
name|void
name|DomDateTime
operator|::
name|setElementYear
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Year
expr_stmt|;
name|m_year
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementMonth
name|void
name|DomDateTime
operator|::
name|setElementMonth
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Month
expr_stmt|;
name|m_month
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementDay
name|void
name|DomDateTime
operator|::
name|setElementDay
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Day
expr_stmt|;
name|m_day
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementHour
name|void
name|DomDateTime
operator|::
name|clearElementHour
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Hour
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementMinute
name|void
name|DomDateTime
operator|::
name|clearElementMinute
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Minute
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementSecond
name|void
name|DomDateTime
operator|::
name|clearElementSecond
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Second
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementYear
name|void
name|DomDateTime
operator|::
name|clearElementYear
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Year
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementMonth
name|void
name|DomDateTime
operator|::
name|clearElementMonth
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Month
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementDay
name|void
name|DomDateTime
operator|::
name|clearElementDay
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Day
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomStringList
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|m_string
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_notr
operator|=
literal|false
expr_stmt|;
name|m_has_attr_comment
operator|=
literal|false
expr_stmt|;
name|m_has_attr_extraComment
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomStringList
name|DomStringList
operator|::
name|DomStringList
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_notr
operator|=
literal|false
expr_stmt|;
name|m_has_attr_comment
operator|=
literal|false
expr_stmt|;
name|m_has_attr_extraComment
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomStringList
name|DomStringList
operator|::
name|~
name|DomStringList
parameter_list|()
block|{
name|m_string
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomStringList
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"notr"
argument_list|)
condition|)
block|{
name|setAttributeNotr
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"comment"
argument_list|)
condition|)
block|{
name|setAttributeComment
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"extracomment"
argument_list|)
condition|)
block|{
name|setAttributeExtraComment
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"string"
argument_list|)
condition|)
block|{
name|m_string
operator|.
name|append
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomStringList
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"stringlist"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeNotr
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"notr"
argument_list|)
argument_list|,
name|attributeNotr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeComment
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"comment"
argument_list|)
argument_list|,
name|attributeComment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeExtraComment
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"extracomment"
argument_list|)
argument_list|,
name|attributeExtraComment
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_string
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|v
init|=
name|m_string
index|[
name|i
index|]
decl_stmt|;
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"string"
argument_list|)
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementString
name|void
name|DomStringList
operator|::
name|setElementString
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|String
expr_stmt|;
name|m_string
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomResourcePixmap
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_resource
operator|=
literal|false
expr_stmt|;
name|m_has_attr_alias
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomResourcePixmap
name|DomResourcePixmap
operator|::
name|DomResourcePixmap
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_resource
operator|=
literal|false
expr_stmt|;
name|m_has_attr_alias
operator|=
literal|false
expr_stmt|;
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomResourcePixmap
name|DomResourcePixmap
operator|::
name|~
name|DomResourcePixmap
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomResourcePixmap
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"resource"
argument_list|)
condition|)
block|{
name|setAttributeResource
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"alias"
argument_list|)
condition|)
block|{
name|setAttributeAlias
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomResourcePixmap
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"resourcepixmap"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeResource
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"resource"
argument_list|)
argument_list|,
name|attributeResource
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeAlias
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"alias"
argument_list|)
argument_list|,
name|attributeAlias
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomResourceIcon
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
operator|delete
name|m_normalOff
expr_stmt|;
operator|delete
name|m_normalOn
expr_stmt|;
operator|delete
name|m_disabledOff
expr_stmt|;
operator|delete
name|m_disabledOn
expr_stmt|;
operator|delete
name|m_activeOff
expr_stmt|;
operator|delete
name|m_activeOn
expr_stmt|;
operator|delete
name|m_selectedOff
expr_stmt|;
operator|delete
name|m_selectedOn
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_theme
operator|=
literal|false
expr_stmt|;
name|m_has_attr_resource
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_normalOff
operator|=
literal|0
expr_stmt|;
name|m_normalOn
operator|=
literal|0
expr_stmt|;
name|m_disabledOff
operator|=
literal|0
expr_stmt|;
name|m_disabledOn
operator|=
literal|0
expr_stmt|;
name|m_activeOff
operator|=
literal|0
expr_stmt|;
name|m_activeOn
operator|=
literal|0
expr_stmt|;
name|m_selectedOff
operator|=
literal|0
expr_stmt|;
name|m_selectedOn
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomResourceIcon
name|DomResourceIcon
operator|::
name|DomResourceIcon
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_theme
operator|=
literal|false
expr_stmt|;
name|m_has_attr_resource
operator|=
literal|false
expr_stmt|;
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_normalOff
operator|=
literal|0
expr_stmt|;
name|m_normalOn
operator|=
literal|0
expr_stmt|;
name|m_disabledOff
operator|=
literal|0
expr_stmt|;
name|m_disabledOn
operator|=
literal|0
expr_stmt|;
name|m_activeOff
operator|=
literal|0
expr_stmt|;
name|m_activeOn
operator|=
literal|0
expr_stmt|;
name|m_selectedOff
operator|=
literal|0
expr_stmt|;
name|m_selectedOn
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomResourceIcon
name|DomResourceIcon
operator|::
name|~
name|DomResourceIcon
parameter_list|()
block|{
operator|delete
name|m_normalOff
expr_stmt|;
operator|delete
name|m_normalOn
expr_stmt|;
operator|delete
name|m_disabledOff
expr_stmt|;
operator|delete
name|m_disabledOn
expr_stmt|;
operator|delete
name|m_activeOff
expr_stmt|;
operator|delete
name|m_activeOn
expr_stmt|;
operator|delete
name|m_selectedOff
expr_stmt|;
operator|delete
name|m_selectedOn
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomResourceIcon
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"theme"
argument_list|)
condition|)
block|{
name|setAttributeTheme
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"resource"
argument_list|)
condition|)
block|{
name|setAttributeResource
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"normaloff"
argument_list|)
condition|)
block|{
name|DomResourcePixmap
modifier|*
name|v
init|=
operator|new
name|DomResourcePixmap
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementNormalOff
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"normalon"
argument_list|)
condition|)
block|{
name|DomResourcePixmap
modifier|*
name|v
init|=
operator|new
name|DomResourcePixmap
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementNormalOn
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"disabledoff"
argument_list|)
condition|)
block|{
name|DomResourcePixmap
modifier|*
name|v
init|=
operator|new
name|DomResourcePixmap
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementDisabledOff
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"disabledon"
argument_list|)
condition|)
block|{
name|DomResourcePixmap
modifier|*
name|v
init|=
operator|new
name|DomResourcePixmap
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementDisabledOn
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"activeoff"
argument_list|)
condition|)
block|{
name|DomResourcePixmap
modifier|*
name|v
init|=
operator|new
name|DomResourcePixmap
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementActiveOff
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"activeon"
argument_list|)
condition|)
block|{
name|DomResourcePixmap
modifier|*
name|v
init|=
operator|new
name|DomResourcePixmap
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementActiveOn
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"selectedoff"
argument_list|)
condition|)
block|{
name|DomResourcePixmap
modifier|*
name|v
init|=
operator|new
name|DomResourcePixmap
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementSelectedOff
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"selectedon"
argument_list|)
condition|)
block|{
name|DomResourcePixmap
modifier|*
name|v
init|=
operator|new
name|DomResourcePixmap
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementSelectedOn
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomResourceIcon
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"resourceicon"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeTheme
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"theme"
argument_list|)
argument_list|,
name|attributeTheme
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeResource
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"resource"
argument_list|)
argument_list|,
name|attributeResource
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|NormalOff
condition|)
block|{
name|m_normalOff
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"normaloff"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|NormalOn
condition|)
block|{
name|m_normalOn
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"normalon"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|DisabledOff
condition|)
block|{
name|m_disabledOff
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"disabledoff"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|DisabledOn
condition|)
block|{
name|m_disabledOn
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"disabledon"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|ActiveOff
condition|)
block|{
name|m_activeOff
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"activeoff"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|ActiveOn
condition|)
block|{
name|m_activeOn
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"activeon"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|SelectedOff
condition|)
block|{
name|m_selectedOff
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"selectedoff"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|SelectedOn
condition|)
block|{
name|m_selectedOn
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"selectedon"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementNormalOff
name|DomResourcePixmap
modifier|*
name|DomResourceIcon
operator|::
name|takeElementNormalOff
parameter_list|()
block|{
name|DomResourcePixmap
modifier|*
name|a
init|=
name|m_normalOff
decl_stmt|;
name|m_normalOff
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|NormalOff
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementNormalOff
name|void
name|DomResourceIcon
operator|::
name|setElementNormalOff
parameter_list|(
name|DomResourcePixmap
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_normalOff
expr_stmt|;
name|m_children
operator||=
name|NormalOff
expr_stmt|;
name|m_normalOff
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementNormalOn
name|DomResourcePixmap
modifier|*
name|DomResourceIcon
operator|::
name|takeElementNormalOn
parameter_list|()
block|{
name|DomResourcePixmap
modifier|*
name|a
init|=
name|m_normalOn
decl_stmt|;
name|m_normalOn
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|NormalOn
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementNormalOn
name|void
name|DomResourceIcon
operator|::
name|setElementNormalOn
parameter_list|(
name|DomResourcePixmap
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_normalOn
expr_stmt|;
name|m_children
operator||=
name|NormalOn
expr_stmt|;
name|m_normalOn
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementDisabledOff
name|DomResourcePixmap
modifier|*
name|DomResourceIcon
operator|::
name|takeElementDisabledOff
parameter_list|()
block|{
name|DomResourcePixmap
modifier|*
name|a
init|=
name|m_disabledOff
decl_stmt|;
name|m_disabledOff
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|DisabledOff
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementDisabledOff
name|void
name|DomResourceIcon
operator|::
name|setElementDisabledOff
parameter_list|(
name|DomResourcePixmap
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_disabledOff
expr_stmt|;
name|m_children
operator||=
name|DisabledOff
expr_stmt|;
name|m_disabledOff
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementDisabledOn
name|DomResourcePixmap
modifier|*
name|DomResourceIcon
operator|::
name|takeElementDisabledOn
parameter_list|()
block|{
name|DomResourcePixmap
modifier|*
name|a
init|=
name|m_disabledOn
decl_stmt|;
name|m_disabledOn
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|DisabledOn
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementDisabledOn
name|void
name|DomResourceIcon
operator|::
name|setElementDisabledOn
parameter_list|(
name|DomResourcePixmap
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_disabledOn
expr_stmt|;
name|m_children
operator||=
name|DisabledOn
expr_stmt|;
name|m_disabledOn
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementActiveOff
name|DomResourcePixmap
modifier|*
name|DomResourceIcon
operator|::
name|takeElementActiveOff
parameter_list|()
block|{
name|DomResourcePixmap
modifier|*
name|a
init|=
name|m_activeOff
decl_stmt|;
name|m_activeOff
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|ActiveOff
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementActiveOff
name|void
name|DomResourceIcon
operator|::
name|setElementActiveOff
parameter_list|(
name|DomResourcePixmap
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_activeOff
expr_stmt|;
name|m_children
operator||=
name|ActiveOff
expr_stmt|;
name|m_activeOff
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementActiveOn
name|DomResourcePixmap
modifier|*
name|DomResourceIcon
operator|::
name|takeElementActiveOn
parameter_list|()
block|{
name|DomResourcePixmap
modifier|*
name|a
init|=
name|m_activeOn
decl_stmt|;
name|m_activeOn
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|ActiveOn
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementActiveOn
name|void
name|DomResourceIcon
operator|::
name|setElementActiveOn
parameter_list|(
name|DomResourcePixmap
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_activeOn
expr_stmt|;
name|m_children
operator||=
name|ActiveOn
expr_stmt|;
name|m_activeOn
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementSelectedOff
name|DomResourcePixmap
modifier|*
name|DomResourceIcon
operator|::
name|takeElementSelectedOff
parameter_list|()
block|{
name|DomResourcePixmap
modifier|*
name|a
init|=
name|m_selectedOff
decl_stmt|;
name|m_selectedOff
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|SelectedOff
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementSelectedOff
name|void
name|DomResourceIcon
operator|::
name|setElementSelectedOff
parameter_list|(
name|DomResourcePixmap
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_selectedOff
expr_stmt|;
name|m_children
operator||=
name|SelectedOff
expr_stmt|;
name|m_selectedOff
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementSelectedOn
name|DomResourcePixmap
modifier|*
name|DomResourceIcon
operator|::
name|takeElementSelectedOn
parameter_list|()
block|{
name|DomResourcePixmap
modifier|*
name|a
init|=
name|m_selectedOn
decl_stmt|;
name|m_selectedOn
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|SelectedOn
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementSelectedOn
name|void
name|DomResourceIcon
operator|::
name|setElementSelectedOn
parameter_list|(
name|DomResourcePixmap
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_selectedOn
expr_stmt|;
name|m_children
operator||=
name|SelectedOn
expr_stmt|;
name|m_selectedOn
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementNormalOff
name|void
name|DomResourceIcon
operator|::
name|clearElementNormalOff
parameter_list|()
block|{
operator|delete
name|m_normalOff
expr_stmt|;
name|m_normalOff
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|NormalOff
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementNormalOn
name|void
name|DomResourceIcon
operator|::
name|clearElementNormalOn
parameter_list|()
block|{
operator|delete
name|m_normalOn
expr_stmt|;
name|m_normalOn
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|NormalOn
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementDisabledOff
name|void
name|DomResourceIcon
operator|::
name|clearElementDisabledOff
parameter_list|()
block|{
operator|delete
name|m_disabledOff
expr_stmt|;
name|m_disabledOff
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|DisabledOff
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementDisabledOn
name|void
name|DomResourceIcon
operator|::
name|clearElementDisabledOn
parameter_list|()
block|{
operator|delete
name|m_disabledOn
expr_stmt|;
name|m_disabledOn
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|DisabledOn
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementActiveOff
name|void
name|DomResourceIcon
operator|::
name|clearElementActiveOff
parameter_list|()
block|{
operator|delete
name|m_activeOff
expr_stmt|;
name|m_activeOff
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|ActiveOff
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementActiveOn
name|void
name|DomResourceIcon
operator|::
name|clearElementActiveOn
parameter_list|()
block|{
operator|delete
name|m_activeOn
expr_stmt|;
name|m_activeOn
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|ActiveOn
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementSelectedOff
name|void
name|DomResourceIcon
operator|::
name|clearElementSelectedOff
parameter_list|()
block|{
operator|delete
name|m_selectedOff
expr_stmt|;
name|m_selectedOff
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|SelectedOff
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementSelectedOn
name|void
name|DomResourceIcon
operator|::
name|clearElementSelectedOn
parameter_list|()
block|{
operator|delete
name|m_selectedOn
expr_stmt|;
name|m_selectedOn
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|SelectedOn
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomString
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_notr
operator|=
literal|false
expr_stmt|;
name|m_has_attr_comment
operator|=
literal|false
expr_stmt|;
name|m_has_attr_extraComment
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomString
name|DomString
operator|::
name|DomString
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_notr
operator|=
literal|false
expr_stmt|;
name|m_has_attr_comment
operator|=
literal|false
expr_stmt|;
name|m_has_attr_extraComment
operator|=
literal|false
expr_stmt|;
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomString
name|DomString
operator|::
name|~
name|DomString
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomString
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"notr"
argument_list|)
condition|)
block|{
name|setAttributeNotr
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"comment"
argument_list|)
condition|)
block|{
name|setAttributeComment
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"extracomment"
argument_list|)
condition|)
block|{
name|setAttributeExtraComment
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomString
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"string"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeNotr
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"notr"
argument_list|)
argument_list|,
name|attributeNotr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeComment
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"comment"
argument_list|)
argument_list|,
name|attributeComment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeExtraComment
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"extracomment"
argument_list|)
argument_list|,
name|attributeExtraComment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomPointF
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_x
operator|=
literal|0
expr_stmt|;
name|m_y
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomPointF
name|DomPointF
operator|::
name|DomPointF
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_x
operator|=
literal|0
expr_stmt|;
name|m_y
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomPointF
name|DomPointF
operator|::
name|~
name|DomPointF
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomPointF
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"x"
argument_list|)
condition|)
block|{
name|setElementX
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"y"
argument_list|)
condition|)
block|{
name|setElementY
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomPointF
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"pointf"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|X
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_x
argument_list|,
literal|'f'
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Y
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'y'
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_y
argument_list|,
literal|'f'
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementX
name|void
name|DomPointF
operator|::
name|setElementX
parameter_list|(
name|double
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|X
expr_stmt|;
name|m_x
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementY
name|void
name|DomPointF
operator|::
name|setElementY
parameter_list|(
name|double
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Y
expr_stmt|;
name|m_y
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementX
name|void
name|DomPointF
operator|::
name|clearElementX
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|X
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementY
name|void
name|DomPointF
operator|::
name|clearElementY
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Y
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomRectF
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_x
operator|=
literal|0
expr_stmt|;
name|m_y
operator|=
literal|0
expr_stmt|;
name|m_width
operator|=
literal|0
expr_stmt|;
name|m_height
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomRectF
name|DomRectF
operator|::
name|DomRectF
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_x
operator|=
literal|0
expr_stmt|;
name|m_y
operator|=
literal|0
expr_stmt|;
name|m_width
operator|=
literal|0
expr_stmt|;
name|m_height
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomRectF
name|DomRectF
operator|::
name|~
name|DomRectF
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomRectF
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"x"
argument_list|)
condition|)
block|{
name|setElementX
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"y"
argument_list|)
condition|)
block|{
name|setElementY
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"width"
argument_list|)
condition|)
block|{
name|setElementWidth
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"height"
argument_list|)
condition|)
block|{
name|setElementHeight
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomRectF
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"rectf"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|X
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_x
argument_list|,
literal|'f'
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Y
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'y'
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_y
argument_list|,
literal|'f'
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Width
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"width"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_width
argument_list|,
literal|'f'
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Height
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"height"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_height
argument_list|,
literal|'f'
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementX
name|void
name|DomRectF
operator|::
name|setElementX
parameter_list|(
name|double
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|X
expr_stmt|;
name|m_x
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementY
name|void
name|DomRectF
operator|::
name|setElementY
parameter_list|(
name|double
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Y
expr_stmt|;
name|m_y
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementWidth
name|void
name|DomRectF
operator|::
name|setElementWidth
parameter_list|(
name|double
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Width
expr_stmt|;
name|m_width
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementHeight
name|void
name|DomRectF
operator|::
name|setElementHeight
parameter_list|(
name|double
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Height
expr_stmt|;
name|m_height
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementX
name|void
name|DomRectF
operator|::
name|clearElementX
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|X
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementY
name|void
name|DomRectF
operator|::
name|clearElementY
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Y
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementWidth
name|void
name|DomRectF
operator|::
name|clearElementWidth
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Width
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementHeight
name|void
name|DomRectF
operator|::
name|clearElementHeight
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Height
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomSizeF
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_width
operator|=
literal|0
expr_stmt|;
name|m_height
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomSizeF
name|DomSizeF
operator|::
name|DomSizeF
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_width
operator|=
literal|0
expr_stmt|;
name|m_height
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomSizeF
name|DomSizeF
operator|::
name|~
name|DomSizeF
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomSizeF
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"width"
argument_list|)
condition|)
block|{
name|setElementWidth
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"height"
argument_list|)
condition|)
block|{
name|setElementHeight
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomSizeF
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"sizef"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|Width
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"width"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_width
argument_list|,
literal|'f'
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Height
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"height"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_height
argument_list|,
literal|'f'
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementWidth
name|void
name|DomSizeF
operator|::
name|setElementWidth
parameter_list|(
name|double
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Width
expr_stmt|;
name|m_width
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementHeight
name|void
name|DomSizeF
operator|::
name|setElementHeight
parameter_list|(
name|double
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Height
expr_stmt|;
name|m_height
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementWidth
name|void
name|DomSizeF
operator|::
name|clearElementWidth
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Width
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementHeight
name|void
name|DomSizeF
operator|::
name|clearElementHeight
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Height
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomChar
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_unicode
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomChar
name|DomChar
operator|::
name|DomChar
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_unicode
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomChar
name|DomChar
operator|::
name|~
name|DomChar
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomChar
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"unicode"
argument_list|)
condition|)
block|{
name|setElementUnicode
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomChar
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"char"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|Unicode
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"unicode"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_unicode
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementUnicode
name|void
name|DomChar
operator|::
name|setElementUnicode
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Unicode
expr_stmt|;
name|m_unicode
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementUnicode
name|void
name|DomChar
operator|::
name|clearElementUnicode
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Unicode
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomUrl
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
operator|delete
name|m_string
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_string
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomUrl
name|DomUrl
operator|::
name|DomUrl
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_string
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomUrl
name|DomUrl
operator|::
name|~
name|DomUrl
parameter_list|()
block|{
operator|delete
name|m_string
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomUrl
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"string"
argument_list|)
condition|)
block|{
name|DomString
modifier|*
name|v
init|=
operator|new
name|DomString
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementString
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomUrl
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"url"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|String
condition|)
block|{
name|m_string
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"string"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementString
name|DomString
modifier|*
name|DomUrl
operator|::
name|takeElementString
parameter_list|()
block|{
name|DomString
modifier|*
name|a
init|=
name|m_string
decl_stmt|;
name|m_string
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|String
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementString
name|void
name|DomUrl
operator|::
name|setElementString
parameter_list|(
name|DomString
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_string
expr_stmt|;
name|m_children
operator||=
name|String
expr_stmt|;
name|m_string
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementString
name|void
name|DomUrl
operator|::
name|clearElementString
parameter_list|()
block|{
operator|delete
name|m_string
expr_stmt|;
name|m_string
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|String
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomProperty
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
operator|delete
name|m_color
expr_stmt|;
operator|delete
name|m_font
expr_stmt|;
operator|delete
name|m_iconSet
expr_stmt|;
operator|delete
name|m_pixmap
expr_stmt|;
operator|delete
name|m_palette
expr_stmt|;
operator|delete
name|m_point
expr_stmt|;
operator|delete
name|m_rect
expr_stmt|;
operator|delete
name|m_locale
expr_stmt|;
operator|delete
name|m_sizePolicy
expr_stmt|;
operator|delete
name|m_size
expr_stmt|;
operator|delete
name|m_string
expr_stmt|;
operator|delete
name|m_stringList
expr_stmt|;
operator|delete
name|m_date
expr_stmt|;
operator|delete
name|m_time
expr_stmt|;
operator|delete
name|m_dateTime
expr_stmt|;
operator|delete
name|m_pointF
expr_stmt|;
operator|delete
name|m_rectF
expr_stmt|;
operator|delete
name|m_sizeF
expr_stmt|;
operator|delete
name|m_char
expr_stmt|;
operator|delete
name|m_url
expr_stmt|;
operator|delete
name|m_brush
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
name|m_has_attr_stdset
operator|=
literal|false
expr_stmt|;
name|m_attr_stdset
operator|=
literal|0
expr_stmt|;
block|}
name|m_kind
operator|=
name|Unknown
expr_stmt|;
name|m_color
operator|=
literal|0
expr_stmt|;
name|m_cursor
operator|=
literal|0
expr_stmt|;
name|m_font
operator|=
literal|0
expr_stmt|;
name|m_iconSet
operator|=
literal|0
expr_stmt|;
name|m_pixmap
operator|=
literal|0
expr_stmt|;
name|m_palette
operator|=
literal|0
expr_stmt|;
name|m_point
operator|=
literal|0
expr_stmt|;
name|m_rect
operator|=
literal|0
expr_stmt|;
name|m_locale
operator|=
literal|0
expr_stmt|;
name|m_sizePolicy
operator|=
literal|0
expr_stmt|;
name|m_size
operator|=
literal|0
expr_stmt|;
name|m_string
operator|=
literal|0
expr_stmt|;
name|m_stringList
operator|=
literal|0
expr_stmt|;
name|m_number
operator|=
literal|0
expr_stmt|;
name|m_float
operator|=
literal|0.0
expr_stmt|;
name|m_double
operator|=
literal|0
expr_stmt|;
name|m_date
operator|=
literal|0
expr_stmt|;
name|m_time
operator|=
literal|0
expr_stmt|;
name|m_dateTime
operator|=
literal|0
expr_stmt|;
name|m_pointF
operator|=
literal|0
expr_stmt|;
name|m_rectF
operator|=
literal|0
expr_stmt|;
name|m_sizeF
operator|=
literal|0
expr_stmt|;
name|m_longLong
operator|=
literal|0
expr_stmt|;
name|m_char
operator|=
literal|0
expr_stmt|;
name|m_url
operator|=
literal|0
expr_stmt|;
name|m_UInt
operator|=
literal|0
expr_stmt|;
name|m_uLongLong
operator|=
literal|0
expr_stmt|;
name|m_brush
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomProperty
name|DomProperty
operator|::
name|DomProperty
parameter_list|()
block|{
name|m_kind
operator|=
name|Unknown
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
name|m_has_attr_stdset
operator|=
literal|false
expr_stmt|;
name|m_attr_stdset
operator|=
literal|0
expr_stmt|;
name|m_color
operator|=
literal|0
expr_stmt|;
name|m_cursor
operator|=
literal|0
expr_stmt|;
name|m_font
operator|=
literal|0
expr_stmt|;
name|m_iconSet
operator|=
literal|0
expr_stmt|;
name|m_pixmap
operator|=
literal|0
expr_stmt|;
name|m_palette
operator|=
literal|0
expr_stmt|;
name|m_point
operator|=
literal|0
expr_stmt|;
name|m_rect
operator|=
literal|0
expr_stmt|;
name|m_locale
operator|=
literal|0
expr_stmt|;
name|m_sizePolicy
operator|=
literal|0
expr_stmt|;
name|m_size
operator|=
literal|0
expr_stmt|;
name|m_string
operator|=
literal|0
expr_stmt|;
name|m_stringList
operator|=
literal|0
expr_stmt|;
name|m_number
operator|=
literal|0
expr_stmt|;
name|m_float
operator|=
literal|0.0
expr_stmt|;
name|m_double
operator|=
literal|0
expr_stmt|;
name|m_date
operator|=
literal|0
expr_stmt|;
name|m_time
operator|=
literal|0
expr_stmt|;
name|m_dateTime
operator|=
literal|0
expr_stmt|;
name|m_pointF
operator|=
literal|0
expr_stmt|;
name|m_rectF
operator|=
literal|0
expr_stmt|;
name|m_sizeF
operator|=
literal|0
expr_stmt|;
name|m_longLong
operator|=
literal|0
expr_stmt|;
name|m_char
operator|=
literal|0
expr_stmt|;
name|m_url
operator|=
literal|0
expr_stmt|;
name|m_UInt
operator|=
literal|0
expr_stmt|;
name|m_uLongLong
operator|=
literal|0
expr_stmt|;
name|m_brush
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomProperty
name|DomProperty
operator|::
name|~
name|DomProperty
parameter_list|()
block|{
operator|delete
name|m_color
expr_stmt|;
operator|delete
name|m_font
expr_stmt|;
operator|delete
name|m_iconSet
expr_stmt|;
operator|delete
name|m_pixmap
expr_stmt|;
operator|delete
name|m_palette
expr_stmt|;
operator|delete
name|m_point
expr_stmt|;
operator|delete
name|m_rect
expr_stmt|;
operator|delete
name|m_locale
expr_stmt|;
operator|delete
name|m_sizePolicy
expr_stmt|;
operator|delete
name|m_size
expr_stmt|;
operator|delete
name|m_string
expr_stmt|;
operator|delete
name|m_stringList
expr_stmt|;
operator|delete
name|m_date
expr_stmt|;
operator|delete
name|m_time
expr_stmt|;
operator|delete
name|m_dateTime
expr_stmt|;
operator|delete
name|m_pointF
expr_stmt|;
operator|delete
name|m_rectF
expr_stmt|;
operator|delete
name|m_sizeF
expr_stmt|;
operator|delete
name|m_char
expr_stmt|;
operator|delete
name|m_url
expr_stmt|;
operator|delete
name|m_brush
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomProperty
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
name|setAttributeName
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"stdset"
argument_list|)
condition|)
block|{
name|setAttributeStdset
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"bool"
argument_list|)
condition|)
block|{
name|setElementBool
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"color"
argument_list|)
condition|)
block|{
name|DomColor
modifier|*
name|v
init|=
operator|new
name|DomColor
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementColor
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"cstring"
argument_list|)
condition|)
block|{
name|setElementCstring
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"cursor"
argument_list|)
condition|)
block|{
name|setElementCursor
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"cursorshape"
argument_list|)
condition|)
block|{
name|setElementCursorShape
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"enum"
argument_list|)
condition|)
block|{
name|setElementEnum
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"font"
argument_list|)
condition|)
block|{
name|DomFont
modifier|*
name|v
init|=
operator|new
name|DomFont
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementFont
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"iconset"
argument_list|)
condition|)
block|{
name|DomResourceIcon
modifier|*
name|v
init|=
operator|new
name|DomResourceIcon
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementIconSet
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"pixmap"
argument_list|)
condition|)
block|{
name|DomResourcePixmap
modifier|*
name|v
init|=
operator|new
name|DomResourcePixmap
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementPixmap
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"palette"
argument_list|)
condition|)
block|{
name|DomPalette
modifier|*
name|v
init|=
operator|new
name|DomPalette
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementPalette
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"point"
argument_list|)
condition|)
block|{
name|DomPoint
modifier|*
name|v
init|=
operator|new
name|DomPoint
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementPoint
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"rect"
argument_list|)
condition|)
block|{
name|DomRect
modifier|*
name|v
init|=
operator|new
name|DomRect
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementRect
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"set"
argument_list|)
condition|)
block|{
name|setElementSet
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"locale"
argument_list|)
condition|)
block|{
name|DomLocale
modifier|*
name|v
init|=
operator|new
name|DomLocale
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementLocale
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"sizepolicy"
argument_list|)
condition|)
block|{
name|DomSizePolicy
modifier|*
name|v
init|=
operator|new
name|DomSizePolicy
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementSizePolicy
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"size"
argument_list|)
condition|)
block|{
name|DomSize
modifier|*
name|v
init|=
operator|new
name|DomSize
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementSize
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"string"
argument_list|)
condition|)
block|{
name|DomString
modifier|*
name|v
init|=
operator|new
name|DomString
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementString
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"stringlist"
argument_list|)
condition|)
block|{
name|DomStringList
modifier|*
name|v
init|=
operator|new
name|DomStringList
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementStringList
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"number"
argument_list|)
condition|)
block|{
name|setElementNumber
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"float"
argument_list|)
condition|)
block|{
name|setElementFloat
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toFloat
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"double"
argument_list|)
condition|)
block|{
name|setElementDouble
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"date"
argument_list|)
condition|)
block|{
name|DomDate
modifier|*
name|v
init|=
operator|new
name|DomDate
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementDate
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"time"
argument_list|)
condition|)
block|{
name|DomTime
modifier|*
name|v
init|=
operator|new
name|DomTime
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementTime
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"datetime"
argument_list|)
condition|)
block|{
name|DomDateTime
modifier|*
name|v
init|=
operator|new
name|DomDateTime
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementDateTime
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"pointf"
argument_list|)
condition|)
block|{
name|DomPointF
modifier|*
name|v
init|=
operator|new
name|DomPointF
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementPointF
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"rectf"
argument_list|)
condition|)
block|{
name|DomRectF
modifier|*
name|v
init|=
operator|new
name|DomRectF
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementRectF
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"sizef"
argument_list|)
condition|)
block|{
name|DomSizeF
modifier|*
name|v
init|=
operator|new
name|DomSizeF
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementSizeF
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"longlong"
argument_list|)
condition|)
block|{
name|setElementLongLong
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toLongLong
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"char"
argument_list|)
condition|)
block|{
name|DomChar
modifier|*
name|v
init|=
operator|new
name|DomChar
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementChar
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"url"
argument_list|)
condition|)
block|{
name|DomUrl
modifier|*
name|v
init|=
operator|new
name|DomUrl
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementUrl
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"uint"
argument_list|)
condition|)
block|{
name|setElementUInt
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toUInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"ulonglong"
argument_list|)
condition|)
block|{
name|setElementULongLong
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toULongLong
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"brush"
argument_list|)
condition|)
block|{
name|DomBrush
modifier|*
name|v
init|=
operator|new
name|DomBrush
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementBrush
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomProperty
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"property"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeName
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|attributeName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeStdset
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"stdset"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|attributeStdset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|kind
argument_list|()
condition|)
block|{
case|case
name|Bool
case|:
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"bool"
argument_list|)
argument_list|,
name|elementBool
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Color
case|:
block|{
name|DomColor
modifier|*
name|v
init|=
name|elementColor
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"color"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Cstring
case|:
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"cstring"
argument_list|)
argument_list|,
name|elementCstring
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Cursor
case|:
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"cursor"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|elementCursor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|CursorShape
case|:
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"cursorShape"
argument_list|)
argument_list|,
name|elementCursorShape
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Enum
case|:
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"enum"
argument_list|)
argument_list|,
name|elementEnum
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Font
case|:
block|{
name|DomFont
modifier|*
name|v
init|=
name|elementFont
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"font"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|IconSet
case|:
block|{
name|DomResourceIcon
modifier|*
name|v
init|=
name|elementIconSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"iconset"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Pixmap
case|:
block|{
name|DomResourcePixmap
modifier|*
name|v
init|=
name|elementPixmap
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"pixmap"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Palette
case|:
block|{
name|DomPalette
modifier|*
name|v
init|=
name|elementPalette
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"palette"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Point
case|:
block|{
name|DomPoint
modifier|*
name|v
init|=
name|elementPoint
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"point"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Rect
case|:
block|{
name|DomRect
modifier|*
name|v
init|=
name|elementRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"rect"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Set
case|:
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"set"
argument_list|)
argument_list|,
name|elementSet
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Locale
case|:
block|{
name|DomLocale
modifier|*
name|v
init|=
name|elementLocale
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"locale"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|SizePolicy
case|:
block|{
name|DomSizePolicy
modifier|*
name|v
init|=
name|elementSizePolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"sizepolicy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Size
case|:
block|{
name|DomSize
modifier|*
name|v
init|=
name|elementSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"size"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|String
case|:
block|{
name|DomString
modifier|*
name|v
init|=
name|elementString
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"string"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|StringList
case|:
block|{
name|DomStringList
modifier|*
name|v
init|=
name|elementStringList
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"stringlist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Number
case|:
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"number"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|elementNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Float
case|:
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"float"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|elementFloat
argument_list|()
argument_list|,
literal|'f'
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Double
case|:
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"double"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|elementDouble
argument_list|()
argument_list|,
literal|'f'
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Date
case|:
block|{
name|DomDate
modifier|*
name|v
init|=
name|elementDate
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"date"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Time
case|:
block|{
name|DomTime
modifier|*
name|v
init|=
name|elementTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"time"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|DateTime
case|:
block|{
name|DomDateTime
modifier|*
name|v
init|=
name|elementDateTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"datetime"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|PointF
case|:
block|{
name|DomPointF
modifier|*
name|v
init|=
name|elementPointF
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"pointf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|RectF
case|:
block|{
name|DomRectF
modifier|*
name|v
init|=
name|elementRectF
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"rectf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|SizeF
case|:
block|{
name|DomSizeF
modifier|*
name|v
init|=
name|elementSizeF
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"sizef"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LongLong
case|:
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"longLong"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|elementLongLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Char
case|:
block|{
name|DomChar
modifier|*
name|v
init|=
name|elementChar
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"char"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Url
case|:
block|{
name|DomUrl
modifier|*
name|v
init|=
name|elementUrl
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|UInt
case|:
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"UInt"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|elementUInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ULongLong
case|:
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"uLongLong"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|elementULongLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Brush
case|:
block|{
name|DomBrush
modifier|*
name|v
init|=
name|elementBrush
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"brush"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
break|break;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementBool
name|void
name|DomProperty
operator|::
name|setElementBool
parameter_list|(
specifier|const
name|QString
modifier|&
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Bool
expr_stmt|;
name|m_bool
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementColor
name|DomColor
modifier|*
name|DomProperty
operator|::
name|takeElementColor
parameter_list|()
block|{
name|DomColor
modifier|*
name|a
init|=
name|m_color
decl_stmt|;
name|m_color
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementColor
name|void
name|DomProperty
operator|::
name|setElementColor
parameter_list|(
name|DomColor
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Color
expr_stmt|;
name|m_color
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementCstring
name|void
name|DomProperty
operator|::
name|setElementCstring
parameter_list|(
specifier|const
name|QString
modifier|&
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Cstring
expr_stmt|;
name|m_cstring
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementCursor
name|void
name|DomProperty
operator|::
name|setElementCursor
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Cursor
expr_stmt|;
name|m_cursor
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementCursorShape
name|void
name|DomProperty
operator|::
name|setElementCursorShape
parameter_list|(
specifier|const
name|QString
modifier|&
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|CursorShape
expr_stmt|;
name|m_cursorShape
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementEnum
name|void
name|DomProperty
operator|::
name|setElementEnum
parameter_list|(
specifier|const
name|QString
modifier|&
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Enum
expr_stmt|;
name|m_enum
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementFont
name|DomFont
modifier|*
name|DomProperty
operator|::
name|takeElementFont
parameter_list|()
block|{
name|DomFont
modifier|*
name|a
init|=
name|m_font
decl_stmt|;
name|m_font
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementFont
name|void
name|DomProperty
operator|::
name|setElementFont
parameter_list|(
name|DomFont
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Font
expr_stmt|;
name|m_font
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementIconSet
name|DomResourceIcon
modifier|*
name|DomProperty
operator|::
name|takeElementIconSet
parameter_list|()
block|{
name|DomResourceIcon
modifier|*
name|a
init|=
name|m_iconSet
decl_stmt|;
name|m_iconSet
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementIconSet
name|void
name|DomProperty
operator|::
name|setElementIconSet
parameter_list|(
name|DomResourceIcon
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|IconSet
expr_stmt|;
name|m_iconSet
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementPixmap
name|DomResourcePixmap
modifier|*
name|DomProperty
operator|::
name|takeElementPixmap
parameter_list|()
block|{
name|DomResourcePixmap
modifier|*
name|a
init|=
name|m_pixmap
decl_stmt|;
name|m_pixmap
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementPixmap
name|void
name|DomProperty
operator|::
name|setElementPixmap
parameter_list|(
name|DomResourcePixmap
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Pixmap
expr_stmt|;
name|m_pixmap
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementPalette
name|DomPalette
modifier|*
name|DomProperty
operator|::
name|takeElementPalette
parameter_list|()
block|{
name|DomPalette
modifier|*
name|a
init|=
name|m_palette
decl_stmt|;
name|m_palette
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementPalette
name|void
name|DomProperty
operator|::
name|setElementPalette
parameter_list|(
name|DomPalette
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Palette
expr_stmt|;
name|m_palette
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementPoint
name|DomPoint
modifier|*
name|DomProperty
operator|::
name|takeElementPoint
parameter_list|()
block|{
name|DomPoint
modifier|*
name|a
init|=
name|m_point
decl_stmt|;
name|m_point
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementPoint
name|void
name|DomProperty
operator|::
name|setElementPoint
parameter_list|(
name|DomPoint
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Point
expr_stmt|;
name|m_point
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementRect
name|DomRect
modifier|*
name|DomProperty
operator|::
name|takeElementRect
parameter_list|()
block|{
name|DomRect
modifier|*
name|a
init|=
name|m_rect
decl_stmt|;
name|m_rect
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementRect
name|void
name|DomProperty
operator|::
name|setElementRect
parameter_list|(
name|DomRect
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Rect
expr_stmt|;
name|m_rect
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementSet
name|void
name|DomProperty
operator|::
name|setElementSet
parameter_list|(
specifier|const
name|QString
modifier|&
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Set
expr_stmt|;
name|m_set
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementLocale
name|DomLocale
modifier|*
name|DomProperty
operator|::
name|takeElementLocale
parameter_list|()
block|{
name|DomLocale
modifier|*
name|a
init|=
name|m_locale
decl_stmt|;
name|m_locale
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementLocale
name|void
name|DomProperty
operator|::
name|setElementLocale
parameter_list|(
name|DomLocale
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Locale
expr_stmt|;
name|m_locale
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementSizePolicy
name|DomSizePolicy
modifier|*
name|DomProperty
operator|::
name|takeElementSizePolicy
parameter_list|()
block|{
name|DomSizePolicy
modifier|*
name|a
init|=
name|m_sizePolicy
decl_stmt|;
name|m_sizePolicy
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementSizePolicy
name|void
name|DomProperty
operator|::
name|setElementSizePolicy
parameter_list|(
name|DomSizePolicy
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|SizePolicy
expr_stmt|;
name|m_sizePolicy
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementSize
name|DomSize
modifier|*
name|DomProperty
operator|::
name|takeElementSize
parameter_list|()
block|{
name|DomSize
modifier|*
name|a
init|=
name|m_size
decl_stmt|;
name|m_size
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementSize
name|void
name|DomProperty
operator|::
name|setElementSize
parameter_list|(
name|DomSize
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Size
expr_stmt|;
name|m_size
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementString
name|DomString
modifier|*
name|DomProperty
operator|::
name|takeElementString
parameter_list|()
block|{
name|DomString
modifier|*
name|a
init|=
name|m_string
decl_stmt|;
name|m_string
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementString
name|void
name|DomProperty
operator|::
name|setElementString
parameter_list|(
name|DomString
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|String
expr_stmt|;
name|m_string
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementStringList
name|DomStringList
modifier|*
name|DomProperty
operator|::
name|takeElementStringList
parameter_list|()
block|{
name|DomStringList
modifier|*
name|a
init|=
name|m_stringList
decl_stmt|;
name|m_stringList
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementStringList
name|void
name|DomProperty
operator|::
name|setElementStringList
parameter_list|(
name|DomStringList
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|StringList
expr_stmt|;
name|m_stringList
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementNumber
name|void
name|DomProperty
operator|::
name|setElementNumber
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Number
expr_stmt|;
name|m_number
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementFloat
name|void
name|DomProperty
operator|::
name|setElementFloat
parameter_list|(
name|float
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Float
expr_stmt|;
name|m_float
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementDouble
name|void
name|DomProperty
operator|::
name|setElementDouble
parameter_list|(
name|double
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Double
expr_stmt|;
name|m_double
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementDate
name|DomDate
modifier|*
name|DomProperty
operator|::
name|takeElementDate
parameter_list|()
block|{
name|DomDate
modifier|*
name|a
init|=
name|m_date
decl_stmt|;
name|m_date
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementDate
name|void
name|DomProperty
operator|::
name|setElementDate
parameter_list|(
name|DomDate
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Date
expr_stmt|;
name|m_date
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementTime
name|DomTime
modifier|*
name|DomProperty
operator|::
name|takeElementTime
parameter_list|()
block|{
name|DomTime
modifier|*
name|a
init|=
name|m_time
decl_stmt|;
name|m_time
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementTime
name|void
name|DomProperty
operator|::
name|setElementTime
parameter_list|(
name|DomTime
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Time
expr_stmt|;
name|m_time
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementDateTime
name|DomDateTime
modifier|*
name|DomProperty
operator|::
name|takeElementDateTime
parameter_list|()
block|{
name|DomDateTime
modifier|*
name|a
init|=
name|m_dateTime
decl_stmt|;
name|m_dateTime
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementDateTime
name|void
name|DomProperty
operator|::
name|setElementDateTime
parameter_list|(
name|DomDateTime
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|DateTime
expr_stmt|;
name|m_dateTime
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementPointF
name|DomPointF
modifier|*
name|DomProperty
operator|::
name|takeElementPointF
parameter_list|()
block|{
name|DomPointF
modifier|*
name|a
init|=
name|m_pointF
decl_stmt|;
name|m_pointF
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementPointF
name|void
name|DomProperty
operator|::
name|setElementPointF
parameter_list|(
name|DomPointF
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|PointF
expr_stmt|;
name|m_pointF
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementRectF
name|DomRectF
modifier|*
name|DomProperty
operator|::
name|takeElementRectF
parameter_list|()
block|{
name|DomRectF
modifier|*
name|a
init|=
name|m_rectF
decl_stmt|;
name|m_rectF
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementRectF
name|void
name|DomProperty
operator|::
name|setElementRectF
parameter_list|(
name|DomRectF
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|RectF
expr_stmt|;
name|m_rectF
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementSizeF
name|DomSizeF
modifier|*
name|DomProperty
operator|::
name|takeElementSizeF
parameter_list|()
block|{
name|DomSizeF
modifier|*
name|a
init|=
name|m_sizeF
decl_stmt|;
name|m_sizeF
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementSizeF
name|void
name|DomProperty
operator|::
name|setElementSizeF
parameter_list|(
name|DomSizeF
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|SizeF
expr_stmt|;
name|m_sizeF
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementLongLong
name|void
name|DomProperty
operator|::
name|setElementLongLong
parameter_list|(
name|qlonglong
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|LongLong
expr_stmt|;
name|m_longLong
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementChar
name|DomChar
modifier|*
name|DomProperty
operator|::
name|takeElementChar
parameter_list|()
block|{
name|DomChar
modifier|*
name|a
init|=
name|m_char
decl_stmt|;
name|m_char
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementChar
name|void
name|DomProperty
operator|::
name|setElementChar
parameter_list|(
name|DomChar
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Char
expr_stmt|;
name|m_char
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementUrl
name|DomUrl
modifier|*
name|DomProperty
operator|::
name|takeElementUrl
parameter_list|()
block|{
name|DomUrl
modifier|*
name|a
init|=
name|m_url
decl_stmt|;
name|m_url
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementUrl
name|void
name|DomProperty
operator|::
name|setElementUrl
parameter_list|(
name|DomUrl
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Url
expr_stmt|;
name|m_url
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementUInt
name|void
name|DomProperty
operator|::
name|setElementUInt
parameter_list|(
name|uint
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|UInt
expr_stmt|;
name|m_UInt
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementULongLong
name|void
name|DomProperty
operator|::
name|setElementULongLong
parameter_list|(
name|qulonglong
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|ULongLong
expr_stmt|;
name|m_uLongLong
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementBrush
name|DomBrush
modifier|*
name|DomProperty
operator|::
name|takeElementBrush
parameter_list|()
block|{
name|DomBrush
modifier|*
name|a
init|=
name|m_brush
decl_stmt|;
name|m_brush
operator|=
literal|0
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementBrush
name|void
name|DomProperty
operator|::
name|setElementBrush
parameter_list|(
name|DomBrush
modifier|*
name|a
parameter_list|)
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_kind
operator|=
name|Brush
expr_stmt|;
name|m_brush
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomConnections
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|qDeleteAll
argument_list|(
name|m_connection
argument_list|)
expr_stmt|;
name|m_connection
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomConnections
name|DomConnections
operator|::
name|DomConnections
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomConnections
name|DomConnections
operator|::
name|~
name|DomConnections
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_connection
argument_list|)
expr_stmt|;
name|m_connection
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomConnections
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"connection"
argument_list|)
condition|)
block|{
name|DomConnection
modifier|*
name|v
init|=
operator|new
name|DomConnection
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_connection
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomConnections
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"connections"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_connection
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomConnection
modifier|*
name|v
init|=
name|m_connection
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"connection"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementConnection
name|void
name|DomConnections
operator|::
name|setElementConnection
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomConnection
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Connection
expr_stmt|;
name|m_connection
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomConnection
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
operator|delete
name|m_hints
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_hints
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomConnection
name|DomConnection
operator|::
name|DomConnection
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_hints
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomConnection
name|DomConnection
operator|::
name|~
name|DomConnection
parameter_list|()
block|{
operator|delete
name|m_hints
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomConnection
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"sender"
argument_list|)
condition|)
block|{
name|setElementSender
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"signal"
argument_list|)
condition|)
block|{
name|setElementSignal
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"receiver"
argument_list|)
condition|)
block|{
name|setElementReceiver
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"slot"
argument_list|)
condition|)
block|{
name|setElementSlot
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"hints"
argument_list|)
condition|)
block|{
name|DomConnectionHints
modifier|*
name|v
init|=
operator|new
name|DomConnectionHints
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|setElementHints
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomConnection
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"connection"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|Sender
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"sender"
argument_list|)
argument_list|,
name|m_sender
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Signal
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"signal"
argument_list|)
argument_list|,
name|m_signal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Receiver
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"receiver"
argument_list|)
argument_list|,
name|m_receiver
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Slot
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"slot"
argument_list|)
argument_list|,
name|m_slot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Hints
condition|)
block|{
name|m_hints
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"hints"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementSender
name|void
name|DomConnection
operator|::
name|setElementSender
parameter_list|(
specifier|const
name|QString
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Sender
expr_stmt|;
name|m_sender
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementSignal
name|void
name|DomConnection
operator|::
name|setElementSignal
parameter_list|(
specifier|const
name|QString
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Signal
expr_stmt|;
name|m_signal
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementReceiver
name|void
name|DomConnection
operator|::
name|setElementReceiver
parameter_list|(
specifier|const
name|QString
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Receiver
expr_stmt|;
name|m_receiver
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementSlot
name|void
name|DomConnection
operator|::
name|setElementSlot
parameter_list|(
specifier|const
name|QString
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Slot
expr_stmt|;
name|m_slot
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeElementHints
name|DomConnectionHints
modifier|*
name|DomConnection
operator|::
name|takeElementHints
parameter_list|()
block|{
name|DomConnectionHints
modifier|*
name|a
init|=
name|m_hints
decl_stmt|;
name|m_hints
operator|=
literal|0
expr_stmt|;
name|m_children
operator|^=
name|Hints
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|setElementHints
name|void
name|DomConnection
operator|::
name|setElementHints
parameter_list|(
name|DomConnectionHints
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|m_hints
expr_stmt|;
name|m_children
operator||=
name|Hints
expr_stmt|;
name|m_hints
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementSender
name|void
name|DomConnection
operator|::
name|clearElementSender
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Sender
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementSignal
name|void
name|DomConnection
operator|::
name|clearElementSignal
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Signal
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementReceiver
name|void
name|DomConnection
operator|::
name|clearElementReceiver
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Receiver
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementSlot
name|void
name|DomConnection
operator|::
name|clearElementSlot
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Slot
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementHints
name|void
name|DomConnection
operator|::
name|clearElementHints
parameter_list|()
block|{
operator|delete
name|m_hints
expr_stmt|;
name|m_hints
operator|=
literal|0
expr_stmt|;
name|m_children
operator|&=
operator|~
name|Hints
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomConnectionHints
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|qDeleteAll
argument_list|(
name|m_hint
argument_list|)
expr_stmt|;
name|m_hint
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomConnectionHints
name|DomConnectionHints
operator|::
name|DomConnectionHints
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomConnectionHints
name|DomConnectionHints
operator|::
name|~
name|DomConnectionHints
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_hint
argument_list|)
expr_stmt|;
name|m_hint
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomConnectionHints
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"hint"
argument_list|)
condition|)
block|{
name|DomConnectionHint
modifier|*
name|v
init|=
operator|new
name|DomConnectionHint
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_hint
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomConnectionHints
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"connectionhints"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_hint
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomConnectionHint
modifier|*
name|v
init|=
name|m_hint
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"hint"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementHint
name|void
name|DomConnectionHints
operator|::
name|setElementHint
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomConnectionHint
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Hint
expr_stmt|;
name|m_hint
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomConnectionHint
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_type
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_x
operator|=
literal|0
expr_stmt|;
name|m_y
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomConnectionHint
name|DomConnectionHint
operator|::
name|DomConnectionHint
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_type
operator|=
literal|false
expr_stmt|;
name|m_x
operator|=
literal|0
expr_stmt|;
name|m_y
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomConnectionHint
name|DomConnectionHint
operator|::
name|~
name|DomConnectionHint
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomConnectionHint
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
name|setAttributeType
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"x"
argument_list|)
condition|)
block|{
name|setElementX
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"y"
argument_list|)
condition|)
block|{
name|setElementY
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomConnectionHint
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"connectionhint"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeType
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|attributeType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_children
operator|&
name|X
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_x
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_children
operator|&
name|Y
condition|)
block|{
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'y'
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|m_y
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementX
name|void
name|DomConnectionHint
operator|::
name|setElementX
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|X
expr_stmt|;
name|m_x
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementY
name|void
name|DomConnectionHint
operator|::
name|setElementY
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Y
expr_stmt|;
name|m_y
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementX
name|void
name|DomConnectionHint
operator|::
name|clearElementX
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|X
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearElementY
name|void
name|DomConnectionHint
operator|::
name|clearElementY
parameter_list|()
block|{
name|m_children
operator|&=
operator|~
name|Y
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomScript
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_source
operator|=
literal|false
expr_stmt|;
name|m_has_attr_language
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomScript
name|DomScript
operator|::
name|DomScript
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_source
operator|=
literal|false
expr_stmt|;
name|m_has_attr_language
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomScript
name|DomScript
operator|::
name|~
name|DomScript
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomScript
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"source"
argument_list|)
condition|)
block|{
name|setAttributeSource
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"language"
argument_list|)
condition|)
block|{
name|setAttributeLanguage
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomScript
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"script"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeSource
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"source"
argument_list|)
argument_list|,
name|attributeSource
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeLanguage
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"language"
argument_list|)
argument_list|,
name|attributeLanguage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomWidgetData
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomWidgetData
name|DomWidgetData
operator|::
name|DomWidgetData
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomWidgetData
name|DomWidgetData
operator|::
name|~
name|DomWidgetData
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomWidgetData
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"property"
argument_list|)
condition|)
block|{
name|DomProperty
modifier|*
name|v
init|=
operator|new
name|DomProperty
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomWidgetData
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"widgetdata"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_property
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomProperty
modifier|*
name|v
init|=
name|m_property
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"property"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementProperty
name|void
name|DomWidgetData
operator|::
name|setElementProperty
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Property
expr_stmt|;
name|m_property
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomDesignerData
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomDesignerData
name|DomDesignerData
operator|::
name|DomDesignerData
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomDesignerData
name|DomDesignerData
operator|::
name|~
name|DomDesignerData
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_property
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomDesignerData
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"property"
argument_list|)
condition|)
block|{
name|DomProperty
modifier|*
name|v
init|=
operator|new
name|DomProperty
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_property
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomDesignerData
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"designerdata"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_property
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomProperty
modifier|*
name|v
init|=
name|m_property
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"property"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementProperty
name|void
name|DomDesignerData
operator|::
name|setElementProperty
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Property
expr_stmt|;
name|m_property
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomSlots
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|m_signal
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_slot
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomSlots
name|DomSlots
operator|::
name|DomSlots
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomSlots
name|DomSlots
operator|::
name|~
name|DomSlots
parameter_list|()
block|{
name|m_signal
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_slot
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomSlots
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"signal"
argument_list|)
condition|)
block|{
name|m_signal
operator|.
name|append
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"slot"
argument_list|)
condition|)
block|{
name|m_slot
operator|.
name|append
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomSlots
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"slots"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_signal
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|v
init|=
name|m_signal
index|[
name|i
index|]
decl_stmt|;
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"signal"
argument_list|)
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_slot
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|v
init|=
name|m_slot
index|[
name|i
index|]
decl_stmt|;
name|writer
operator|.
name|writeTextElement
argument_list|(
name|QStringLiteral
argument_list|(
literal|"slot"
argument_list|)
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementSignal
name|void
name|DomSlots
operator|::
name|setElementSignal
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Signal
expr_stmt|;
name|m_signal
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementSlot
name|void
name|DomSlots
operator|::
name|setElementSlot
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Slot
expr_stmt|;
name|m_slot
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomPropertySpecifications
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
name|qDeleteAll
argument_list|(
name|m_tooltip
argument_list|)
expr_stmt|;
name|m_tooltip
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_stringpropertyspecification
argument_list|)
expr_stmt|;
name|m_stringpropertyspecification
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomPropertySpecifications
name|DomPropertySpecifications
operator|::
name|DomPropertySpecifications
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomPropertySpecifications
name|DomPropertySpecifications
operator|::
name|~
name|DomPropertySpecifications
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_tooltip
argument_list|)
expr_stmt|;
name|m_tooltip
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|m_stringpropertyspecification
argument_list|)
expr_stmt|;
name|m_stringpropertyspecification
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|read
name|void
name|DomPropertySpecifications
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"tooltip"
argument_list|)
condition|)
block|{
name|DomPropertyToolTip
modifier|*
name|v
init|=
operator|new
name|DomPropertyToolTip
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_tooltip
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"stringpropertyspecification"
argument_list|)
condition|)
block|{
name|DomStringPropertySpecification
modifier|*
name|v
init|=
operator|new
name|DomStringPropertySpecification
argument_list|()
decl_stmt|;
name|v
operator|->
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|m_stringpropertyspecification
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomPropertySpecifications
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"propertyspecifications"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_tooltip
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomPropertyToolTip
modifier|*
name|v
init|=
name|m_tooltip
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"tooltip"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_stringpropertyspecification
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DomStringPropertySpecification
modifier|*
name|v
init|=
name|m_stringpropertyspecification
index|[
name|i
index|]
decl_stmt|;
name|v
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|QStringLiteral
argument_list|(
literal|"stringpropertyspecification"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementTooltip
name|void
name|DomPropertySpecifications
operator|::
name|setElementTooltip
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomPropertyToolTip
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Tooltip
expr_stmt|;
name|m_tooltip
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setElementStringpropertyspecification
name|void
name|DomPropertySpecifications
operator|::
name|setElementStringpropertyspecification
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomStringPropertySpecification
modifier|*
argument_list|>
modifier|&
name|a
parameter_list|)
block|{
name|m_children
operator||=
name|Stringpropertyspecification
expr_stmt|;
name|m_stringpropertyspecification
operator|=
name|a
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomPropertyToolTip
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomPropertyToolTip
name|DomPropertyToolTip
operator|::
name|DomPropertyToolTip
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomPropertyToolTip
name|DomPropertyToolTip
operator|::
name|~
name|DomPropertyToolTip
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomPropertyToolTip
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
name|setAttributeName
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomPropertyToolTip
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"propertytooltip"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeName
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|attributeName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DomStringPropertySpecification
operator|::
name|clear
parameter_list|(
name|bool
name|clear_all
parameter_list|)
block|{
if|if
condition|(
name|clear_all
condition|)
block|{
name|m_text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
name|m_has_attr_type
operator|=
literal|false
expr_stmt|;
name|m_has_attr_notr
operator|=
literal|false
expr_stmt|;
block|}
name|m_children
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DomStringPropertySpecification
name|DomStringPropertySpecification
operator|::
name|DomStringPropertySpecification
parameter_list|()
block|{
name|m_children
operator|=
literal|0
expr_stmt|;
name|m_has_attr_name
operator|=
literal|false
expr_stmt|;
name|m_has_attr_type
operator|=
literal|false
expr_stmt|;
name|m_has_attr_notr
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DomStringPropertySpecification
name|DomStringPropertySpecification
operator|::
name|~
name|DomStringPropertySpecification
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|read
name|void
name|DomStringPropertySpecification
operator|::
name|read
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QXmlStreamAttribute
modifier|&
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|QStringRef
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
name|setAttributeName
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
name|setAttributeType
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"notr"
argument_list|)
condition|)
block|{
name|setAttributeNotr
argument_list|(
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected attribute "
argument_list|)
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|bool
name|finished
init|=
literal|false
init|;
operator|!
name|finished
operator|&&
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
specifier|const
name|QString
name|tag
init|=
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|reader
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unexpected element "
argument_list|)
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
if|if
condition|(
operator|!
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|m_text
operator|.
name|append
argument_list|(
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|DomStringPropertySpecification
operator|::
name|write
parameter_list|(
name|QXmlStreamWriter
modifier|&
name|writer
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|)
specifier|const
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"stringpropertyspecification"
argument_list|)
else|:
name|tagName
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeName
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|attributeName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeType
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|attributeType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAttributeNotr
argument_list|()
condition|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|QStringLiteral
argument_list|(
literal|"notr"
argument_list|)
argument_list|,
name|attributeNotr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|.
name|writeCharacters
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
