begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"customwidgetsinfo.h"
end_include
begin_include
include|#
directive|include
file|"driver.h"
end_include
begin_include
include|#
directive|include
file|"ui4.h"
end_include
begin_include
include|#
directive|include
file|"utils.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|CustomWidgetsInfo
name|CustomWidgetsInfo
operator|::
name|CustomWidgetsInfo
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|acceptUI
name|void
name|CustomWidgetsInfo
operator|::
name|acceptUI
parameter_list|(
name|DomUI
modifier|*
name|node
parameter_list|)
block|{
name|m_customWidgets
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|node
operator|->
name|elementCustomWidgets
argument_list|()
condition|)
name|acceptCustomWidgets
argument_list|(
name|node
operator|->
name|elementCustomWidgets
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|acceptCustomWidgets
name|void
name|CustomWidgetsInfo
operator|::
name|acceptCustomWidgets
parameter_list|(
name|DomCustomWidgets
modifier|*
name|node
parameter_list|)
block|{
name|TreeWalker
operator|::
name|acceptCustomWidgets
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|acceptCustomWidget
name|void
name|CustomWidgetsInfo
operator|::
name|acceptCustomWidget
parameter_list|(
name|DomCustomWidget
modifier|*
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|->
name|elementClass
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|m_customWidgets
operator|.
name|insert
argument_list|(
name|node
operator|->
name|elementClass
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|extends
name|bool
name|CustomWidgetsInfo
operator|::
name|extends
parameter_list|(
specifier|const
name|QString
modifier|&
name|classNameIn
parameter_list|,
name|QLatin1String
name|baseClassName
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|classNameIn
operator|==
name|baseClassName
condition|)
return|return
literal|true
return|;
name|QString
name|className
init|=
name|classNameIn
decl_stmt|;
while|while
condition|(
specifier|const
name|DomCustomWidget
modifier|*
name|c
init|=
name|customWidget
argument_list|(
name|className
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|extends
init|=
name|c
operator|->
name|elementExtends
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|==
name|extends
condition|)
comment|// Faulty legacy custom widget entries exist.
return|return
literal|false
return|;
if|if
condition|(
name|extends
operator|==
name|baseClassName
condition|)
return|return
literal|true
return|;
name|className
operator|=
name|extends
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|isCustomWidgetContainer
name|bool
name|CustomWidgetsInfo
operator|::
name|isCustomWidgetContainer
parameter_list|(
specifier|const
name|QString
modifier|&
name|className
parameter_list|)
specifier|const
block|{
if|if
condition|(
specifier|const
name|DomCustomWidget
modifier|*
name|dcw
init|=
name|m_customWidgets
operator|.
name|value
argument_list|(
name|className
argument_list|,
literal|0
argument_list|)
condition|)
if|if
condition|(
name|dcw
operator|->
name|hasElementContainer
argument_list|()
condition|)
return|return
name|dcw
operator|->
name|elementContainer
argument_list|()
operator|!=
literal|0
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|realClassName
name|QString
name|CustomWidgetsInfo
operator|::
name|realClassName
parameter_list|(
specifier|const
name|QString
modifier|&
name|className
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|className
operator|==
name|QLatin1String
argument_list|(
literal|"Line"
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"QFrame"
argument_list|)
return|;
return|return
name|className
return|;
block|}
end_function
begin_function
DECL|function|customWidgetScript
name|DomScript
modifier|*
name|CustomWidgetsInfo
operator|::
name|customWidgetScript
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|m_customWidgets
operator|.
name|empty
argument_list|()
condition|)
return|return
literal|0
return|;
specifier|const
name|NameCustomWidgetMap
operator|::
name|const_iterator
name|it
init|=
name|m_customWidgets
operator|.
name|constFind
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|m_customWidgets
operator|.
name|constEnd
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|it
operator|.
name|value
argument_list|()
operator|->
name|elementScript
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|customWidgetAddPageMethod
name|QString
name|CustomWidgetsInfo
operator|::
name|customWidgetAddPageMethod
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|DomCustomWidget
modifier|*
name|dcw
init|=
name|m_customWidgets
operator|.
name|value
argument_list|(
name|name
argument_list|,
literal|0
argument_list|)
condition|)
return|return
name|dcw
operator|->
name|elementAddPageMethod
argument_list|()
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
