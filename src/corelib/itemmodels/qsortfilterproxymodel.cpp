begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsortfilterproxymodel.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SORTFILTERPROXYMODEL
end_ifndef
begin_include
include|#
directive|include
file|"qitemselectionmodel.h"
end_include
begin_include
include|#
directive|include
file|<qsize.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qpair.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<private/qabstractitemmodel_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qabstractproxymodel_p.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_typedef
DECL|typedef|QModelIndexPairList
typedef|typedef
name|QList
argument_list|<
name|QPair
argument_list|<
name|QModelIndex
argument_list|,
name|QPersistentModelIndex
argument_list|>
argument_list|>
name|QModelIndexPairList
typedef|;
end_typedef
begin_function
DECL|function|qVectorToSet
specifier|static
specifier|inline
name|QSet
argument_list|<
name|int
argument_list|>
name|qVectorToSet
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|vector
parameter_list|)
block|{
name|QSet
argument_list|<
name|int
argument_list|>
name|set
decl_stmt|;
name|set
operator|.
name|reserve
argument_list|(
name|vector
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|set
operator|<<
name|vector
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
end_function
begin_class
DECL|class|QSortFilterProxyModelLessThan
class|class
name|QSortFilterProxyModelLessThan
block|{
public|public:
DECL|function|QSortFilterProxyModelLessThan
specifier|inline
name|QSortFilterProxyModelLessThan
parameter_list|(
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
specifier|const
name|QAbstractItemModel
modifier|*
name|source
parameter_list|,
specifier|const
name|QSortFilterProxyModel
modifier|*
name|proxy
parameter_list|)
member_init_list|:
name|sort_column
argument_list|(
name|column
argument_list|)
member_init_list|,
name|source_parent
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|source_model
argument_list|(
name|source
argument_list|)
member_init_list|,
name|proxy_model
argument_list|(
name|proxy
argument_list|)
block|{}
DECL|function|operator ()
specifier|inline
name|bool
name|operator
name|()
parameter_list|(
name|int
name|r1
parameter_list|,
name|int
name|r2
parameter_list|)
specifier|const
block|{
name|QModelIndex
name|i1
init|=
name|source_model
operator|->
name|index
argument_list|(
name|r1
argument_list|,
name|sort_column
argument_list|,
name|source_parent
argument_list|)
decl_stmt|;
name|QModelIndex
name|i2
init|=
name|source_model
operator|->
name|index
argument_list|(
name|r2
argument_list|,
name|sort_column
argument_list|,
name|source_parent
argument_list|)
decl_stmt|;
return|return
name|proxy_model
operator|->
name|lessThan
argument_list|(
name|i1
argument_list|,
name|i2
argument_list|)
return|;
block|}
private|private:
DECL|member|sort_column
name|int
name|sort_column
decl_stmt|;
DECL|member|source_parent
name|QModelIndex
name|source_parent
decl_stmt|;
DECL|member|source_model
specifier|const
name|QAbstractItemModel
modifier|*
name|source_model
decl_stmt|;
DECL|member|proxy_model
specifier|const
name|QSortFilterProxyModel
modifier|*
name|proxy_model
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QSortFilterProxyModelGreaterThan
class|class
name|QSortFilterProxyModelGreaterThan
block|{
public|public:
DECL|function|QSortFilterProxyModelGreaterThan
specifier|inline
name|QSortFilterProxyModelGreaterThan
parameter_list|(
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
specifier|const
name|QAbstractItemModel
modifier|*
name|source
parameter_list|,
specifier|const
name|QSortFilterProxyModel
modifier|*
name|proxy
parameter_list|)
member_init_list|:
name|sort_column
argument_list|(
name|column
argument_list|)
member_init_list|,
name|source_parent
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|source_model
argument_list|(
name|source
argument_list|)
member_init_list|,
name|proxy_model
argument_list|(
name|proxy
argument_list|)
block|{}
DECL|function|operator ()
specifier|inline
name|bool
name|operator
name|()
parameter_list|(
name|int
name|r1
parameter_list|,
name|int
name|r2
parameter_list|)
specifier|const
block|{
name|QModelIndex
name|i1
init|=
name|source_model
operator|->
name|index
argument_list|(
name|r1
argument_list|,
name|sort_column
argument_list|,
name|source_parent
argument_list|)
decl_stmt|;
name|QModelIndex
name|i2
init|=
name|source_model
operator|->
name|index
argument_list|(
name|r2
argument_list|,
name|sort_column
argument_list|,
name|source_parent
argument_list|)
decl_stmt|;
return|return
name|proxy_model
operator|->
name|lessThan
argument_list|(
name|i2
argument_list|,
name|i1
argument_list|)
return|;
block|}
private|private:
DECL|member|sort_column
name|int
name|sort_column
decl_stmt|;
DECL|member|source_parent
name|QModelIndex
name|source_parent
decl_stmt|;
DECL|member|source_model
specifier|const
name|QAbstractItemModel
modifier|*
name|source_model
decl_stmt|;
DECL|member|proxy_model
specifier|const
name|QSortFilterProxyModel
modifier|*
name|proxy_model
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|//this struct is used to store what are the rows that are removed
end_comment
begin_comment
comment|//between a call to rowsAboutToBeRemoved and rowsRemoved
end_comment
begin_comment
comment|//it avoids readding rows to the mapping that are currently being removed
end_comment
begin_struct
DECL|struct|QRowsRemoval
struct|struct
name|QRowsRemoval
block|{
DECL|function|QRowsRemoval
name|QRowsRemoval
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent_source
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
member_init_list|:
name|parent_source
argument_list|(
name|parent_source
argument_list|)
member_init_list|,
name|start
argument_list|(
name|start
argument_list|)
member_init_list|,
name|end
argument_list|(
name|end
argument_list|)
block|{     }
DECL|function|QRowsRemoval
name|QRowsRemoval
parameter_list|()
member_init_list|:
name|start
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|end
argument_list|(
operator|-
literal|1
argument_list|)
block|{     }
DECL|function|contains
name|bool
name|contains
parameter_list|(
name|QModelIndex
name|parent
parameter_list|,
name|int
name|row
parameter_list|)
block|{
do|do
block|{
if|if
condition|(
name|parent
operator|==
name|parent_source
condition|)
return|return
name|row
operator|>=
name|start
operator|&&
name|row
operator|<=
name|end
return|;
name|row
operator|=
name|parent
operator|.
name|row
argument_list|()
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|parent
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|row
operator|>=
literal|0
condition|)
do|;
return|return
literal|false
return|;
block|}
private|private:
DECL|member|parent_source
name|QModelIndex
name|parent_source
decl_stmt|;
DECL|member|start
name|int
name|start
decl_stmt|;
DECL|member|end
name|int
name|end
decl_stmt|;
block|}
struct|;
end_struct
begin_class
DECL|class|QSortFilterProxyModelPrivate
class|class
name|QSortFilterProxyModelPrivate
super|:
specifier|public
name|QAbstractProxyModelPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QSortFilterProxyModel
parameter_list|)
specifier|public
private|:
DECL|struct|Mapping
struct|struct
name|Mapping
block|{
DECL|member|source_rows
name|QVector
argument_list|<
name|int
argument_list|>
name|source_rows
decl_stmt|;
DECL|member|source_columns
name|QVector
argument_list|<
name|int
argument_list|>
name|source_columns
decl_stmt|;
DECL|member|proxy_rows
name|QVector
argument_list|<
name|int
argument_list|>
name|proxy_rows
decl_stmt|;
DECL|member|proxy_columns
name|QVector
argument_list|<
name|int
argument_list|>
name|proxy_columns
decl_stmt|;
DECL|member|mapped_children
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
name|mapped_children
decl_stmt|;
DECL|member|map_iter
name|QHash
argument_list|<
name|QModelIndex
argument_list|,
name|Mapping
modifier|*
argument_list|>
operator|::
name|const_iterator
name|map_iter
decl_stmt|;
block|}
struct|;
DECL|member|source_index_mapping
specifier|mutable
name|QHash
argument_list|<
name|QModelIndex
argument_list|,
name|Mapping
modifier|*
argument_list|>
name|source_index_mapping
decl_stmt|;
DECL|member|source_sort_column
name|int
name|source_sort_column
decl_stmt|;
DECL|member|proxy_sort_column
name|int
name|proxy_sort_column
decl_stmt|;
DECL|member|sort_order
name|Qt
operator|::
name|SortOrder
name|sort_order
decl_stmt|;
DECL|member|sort_casesensitivity
name|Qt
operator|::
name|CaseSensitivity
name|sort_casesensitivity
decl_stmt|;
DECL|member|sort_role
name|int
name|sort_role
decl_stmt|;
DECL|member|sort_localeaware
name|bool
name|sort_localeaware
decl_stmt|;
DECL|member|filter_column
name|int
name|filter_column
decl_stmt|;
DECL|member|filter_regexp
name|QRegExp
name|filter_regexp
decl_stmt|;
DECL|member|filter_role
name|int
name|filter_role
decl_stmt|;
DECL|member|dynamic_sortfilter
name|bool
name|dynamic_sortfilter
decl_stmt|;
DECL|member|itemsBeingRemoved
name|QRowsRemoval
name|itemsBeingRemoved
decl_stmt|;
DECL|member|saved_persistent_indexes
name|QModelIndexPairList
name|saved_persistent_indexes
decl_stmt|;
name|QHash
argument_list|<
name|QModelIndex
argument_list|,
name|Mapping
modifier|*
argument_list|>
operator|::
name|const_iterator
name|create_mapping
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|)
specifier|const
function_decl|;
name|QModelIndex
name|proxy_to_source
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|proxyIndex
parameter_list|)
specifier|const
function_decl|;
name|QModelIndex
name|source_to_proxy
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|sourceIndex
parameter_list|)
specifier|const
function_decl|;
name|bool
name|can_create_mapping
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|)
specifier|const
function_decl|;
name|void
name|remove_from_mapping
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|)
function_decl|;
DECL|function|index_to_iterator
specifier|inline
name|QHash
argument_list|<
name|QModelIndex
argument_list|,
name|Mapping
modifier|*
argument_list|>
operator|::
name|const_iterator
name|index_to_iterator
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|proxy_index
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|proxy_index
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|proxy_index
operator|.
name|model
argument_list|()
operator|==
name|q_func
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|void
modifier|*
name|p
init|=
name|proxy_index
operator|.
name|internalPointer
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|QModelIndex
argument_list|,
name|Mapping
modifier|*
argument_list|>
operator|::
name|const_iterator
name|it
init|=
cast|static_cast
argument_list|<
specifier|const
name|Mapping
operator|*
argument_list|>
argument_list|(
name|p
argument_list|)
operator|->
name|map_iter
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|it
operator|!=
name|source_index_mapping
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|it
return|;
block|}
DECL|function|create_index
specifier|inline
name|QModelIndex
name|create_index
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
name|QHash
argument_list|<
name|QModelIndex
argument_list|,
name|Mapping
modifier|*
argument_list|>
operator|::
name|const_iterator
name|it
parameter_list|)
specifier|const
block|{
return|return
name|q_func
argument_list|()
operator|->
name|createIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
operator|*
name|it
argument_list|)
return|;
block|}
name|void
name|_q_sourceDataChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_top_left
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|source_bottom_right
parameter_list|)
function_decl|;
name|void
name|_q_sourceHeaderDataChanged
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
function_decl|;
name|void
name|_q_sourceAboutToBeReset
parameter_list|()
function_decl|;
name|void
name|_q_sourceReset
parameter_list|()
function_decl|;
name|void
name|_q_sourceLayoutAboutToBeChanged
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
modifier|&
name|sourceParents
parameter_list|,
name|QAbstractItemModel
operator|::
name|LayoutChangeHint
name|hint
parameter_list|)
function_decl|;
name|void
name|_q_sourceLayoutChanged
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
modifier|&
name|sourceParents
parameter_list|,
name|QAbstractItemModel
operator|::
name|LayoutChangeHint
name|hint
parameter_list|)
function_decl|;
name|void
name|_q_sourceRowsAboutToBeInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
function_decl|;
name|void
name|_q_sourceRowsInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
function_decl|;
name|void
name|_q_sourceRowsAboutToBeRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
function_decl|;
name|void
name|_q_sourceRowsRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
function_decl|;
name|void
name|_q_sourceRowsAboutToBeMoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|sourceParent
parameter_list|,
name|int
name|sourceStart
parameter_list|,
name|int
name|sourceEnd
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|destParent
parameter_list|,
name|int
name|dest
parameter_list|)
function_decl|;
name|void
name|_q_sourceRowsMoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|sourceParent
parameter_list|,
name|int
name|sourceStart
parameter_list|,
name|int
name|sourceEnd
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|destParent
parameter_list|,
name|int
name|dest
parameter_list|)
function_decl|;
name|void
name|_q_sourceColumnsAboutToBeInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
function_decl|;
name|void
name|_q_sourceColumnsInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
function_decl|;
name|void
name|_q_sourceColumnsAboutToBeRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
function_decl|;
name|void
name|_q_sourceColumnsRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
function_decl|;
name|void
name|_q_sourceColumnsAboutToBeMoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|sourceParent
parameter_list|,
name|int
name|sourceStart
parameter_list|,
name|int
name|sourceEnd
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|destParent
parameter_list|,
name|int
name|dest
parameter_list|)
function_decl|;
name|void
name|_q_sourceColumnsMoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|sourceParent
parameter_list|,
name|int
name|sourceStart
parameter_list|,
name|int
name|sourceEnd
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|destParent
parameter_list|,
name|int
name|dest
parameter_list|)
function_decl|;
name|void
name|_q_clearMapping
parameter_list|()
function_decl|;
name|void
name|sort
parameter_list|()
function_decl|;
name|bool
name|update_source_sort_column
parameter_list|()
function_decl|;
name|void
name|sort_source_rows
parameter_list|(
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_rows
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|)
specifier|const
function_decl|;
name|QVector
argument_list|<
name|QPair
argument_list|<
name|int
argument_list|,
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|>
name|proxy_intervals_for_source_items_to_add
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|proxy_to_source
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_items
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|)
specifier|const
function_decl|;
name|QVector
argument_list|<
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|>
name|proxy_intervals_for_source_items
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_to_proxy
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_items
parameter_list|)
specifier|const
function_decl|;
name|void
name|insert_source_items
parameter_list|(
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_to_proxy
parameter_list|,
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|proxy_to_source
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_items
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|,
name|bool
name|emit_signal
init|=
literal|true
parameter_list|)
function_decl|;
name|void
name|remove_source_items
parameter_list|(
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_to_proxy
parameter_list|,
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|proxy_to_source
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_items
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|,
name|bool
name|emit_signal
init|=
literal|true
parameter_list|)
function_decl|;
name|void
name|remove_proxy_interval
parameter_list|(
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_to_proxy
parameter_list|,
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|proxy_to_source
parameter_list|,
name|int
name|proxy_start
parameter_list|,
name|int
name|proxy_end
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|proxy_parent
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|,
name|bool
name|emit_signal
init|=
literal|true
parameter_list|)
function_decl|;
name|void
name|build_source_to_proxy_mapping
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|proxy_to_source
parameter_list|,
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_to_proxy
parameter_list|)
specifier|const
function_decl|;
name|void
name|source_items_inserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|)
function_decl|;
name|void
name|source_items_about_to_be_removed
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|)
function_decl|;
name|void
name|source_items_removed
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|)
function_decl|;
name|void
name|proxy_item_range
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_to_proxy
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_items
parameter_list|,
name|int
modifier|&
name|proxy_low
parameter_list|,
name|int
modifier|&
name|proxy_high
parameter_list|)
specifier|const
function_decl|;
name|QModelIndexPairList
name|store_persistent_indexes
parameter_list|()
function_decl|;
name|void
name|update_persistent_indexes
parameter_list|(
specifier|const
name|QModelIndexPairList
modifier|&
name|source_indexes
parameter_list|)
function_decl|;
name|void
name|filter_changed
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
init|=
name|QModelIndex
argument_list|()
parameter_list|)
function_decl|;
name|QSet
argument_list|<
name|int
argument_list|>
name|handle_filter_changed
parameter_list|(
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_to_proxy
parameter_list|,
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|proxy_to_source
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|)
function_decl|;
name|void
name|updateChildrenMapping
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|Mapping
modifier|*
name|parent_mapping
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|delta_item_count
parameter_list|,
name|bool
name|remove
parameter_list|)
function_decl|;
specifier|virtual
name|void
name|_q_sourceModelDestroyed
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_typedef
DECL|typedef|IndexMap
typedef|typedef
name|QHash
argument_list|<
name|QModelIndex
argument_list|,
name|QSortFilterProxyModelPrivate
operator|::
name|Mapping
operator|*
argument_list|>
name|IndexMap
typedef|;
end_typedef
begin_function
DECL|function|_q_sourceModelDestroyed
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|_q_sourceModelDestroyed
parameter_list|()
block|{
name|QAbstractProxyModelPrivate
operator|::
name|_q_sourceModelDestroyed
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|source_index_mapping
argument_list|)
expr_stmt|;
name|source_index_mapping
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remove_from_mapping
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|remove_from_mapping
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|)
block|{
if|if
condition|(
name|Mapping
modifier|*
name|m
init|=
name|source_index_mapping
operator|.
name|take
argument_list|(
name|source_parent
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m
operator|->
name|mapped_children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|remove_from_mapping
argument_list|(
name|m
operator|->
name|mapped_children
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|m
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_clearMapping
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|_q_clearMapping
parameter_list|()
block|{
comment|// store the persistent indexes
name|QModelIndexPairList
name|source_indexes
init|=
name|store_persistent_indexes
argument_list|()
decl_stmt|;
name|qDeleteAll
argument_list|(
name|source_index_mapping
argument_list|)
expr_stmt|;
name|source_index_mapping
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|dynamic_sortfilter
operator|&&
name|update_source_sort_column
argument_list|()
condition|)
block|{
comment|//update_source_sort_column might have created wrong mapping so we have to clear it again
name|qDeleteAll
argument_list|(
name|source_index_mapping
argument_list|)
expr_stmt|;
name|source_index_mapping
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// update the persistent indexes
name|update_persistent_indexes
argument_list|(
name|source_indexes
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|create_mapping
name|IndexMap
operator|::
name|const_iterator
name|QSortFilterProxyModelPrivate
operator|::
name|create_mapping
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|IndexMap
operator|::
name|const_iterator
name|it
init|=
name|source_index_mapping
operator|.
name|constFind
argument_list|(
name|source_parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|source_index_mapping
operator|.
name|constEnd
argument_list|()
condition|)
comment|// was mapped already
return|return
name|it
return|;
name|Mapping
modifier|*
name|m
init|=
operator|new
name|Mapping
decl_stmt|;
name|int
name|source_rows
init|=
name|model
operator|->
name|rowCount
argument_list|(
name|source_parent
argument_list|)
decl_stmt|;
name|m
operator|->
name|source_rows
operator|.
name|reserve
argument_list|(
name|source_rows
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|source_rows
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|q
operator|->
name|filterAcceptsRow
argument_list|(
name|i
argument_list|,
name|source_parent
argument_list|)
condition|)
name|m
operator|->
name|source_rows
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|int
name|source_cols
init|=
name|model
operator|->
name|columnCount
argument_list|(
name|source_parent
argument_list|)
decl_stmt|;
name|m
operator|->
name|source_columns
operator|.
name|reserve
argument_list|(
name|source_cols
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|source_cols
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|q
operator|->
name|filterAcceptsColumn
argument_list|(
name|i
argument_list|,
name|source_parent
argument_list|)
condition|)
name|m
operator|->
name|source_columns
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|sort_source_rows
argument_list|(
name|m
operator|->
name|source_rows
argument_list|,
name|source_parent
argument_list|)
expr_stmt|;
name|m
operator|->
name|proxy_rows
operator|.
name|resize
argument_list|(
name|source_rows
argument_list|)
expr_stmt|;
name|build_source_to_proxy_mapping
argument_list|(
name|m
operator|->
name|source_rows
argument_list|,
name|m
operator|->
name|proxy_rows
argument_list|)
expr_stmt|;
name|m
operator|->
name|proxy_columns
operator|.
name|resize
argument_list|(
name|source_cols
argument_list|)
expr_stmt|;
name|build_source_to_proxy_mapping
argument_list|(
name|m
operator|->
name|source_columns
argument_list|,
name|m
operator|->
name|proxy_columns
argument_list|)
expr_stmt|;
name|it
operator|=
name|IndexMap
operator|::
name|const_iterator
argument_list|(
name|source_index_mapping
operator|.
name|insert
argument_list|(
name|source_parent
argument_list|,
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|->
name|map_iter
operator|=
name|it
expr_stmt|;
if|if
condition|(
name|source_parent
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QModelIndex
name|source_grand_parent
init|=
name|source_parent
operator|.
name|parent
argument_list|()
decl_stmt|;
name|IndexMap
operator|::
name|const_iterator
name|it2
init|=
name|create_mapping
argument_list|(
name|source_grand_parent
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|it2
operator|!=
name|source_index_mapping
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|it2
operator|.
name|value
argument_list|()
operator|->
name|mapped_children
operator|.
name|append
argument_list|(
name|source_parent
argument_list|)
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|it
operator|!=
name|source_index_mapping
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|it
return|;
block|}
end_function
begin_function
DECL|function|proxy_to_source
name|QModelIndex
name|QSortFilterProxyModelPrivate
operator|::
name|proxy_to_source
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|proxy_index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|proxy_index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
comment|// for now; we may want to be able to set a root index later
if|if
condition|(
name|proxy_index
operator|.
name|model
argument_list|()
operator|!=
name|q_func
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QSortFilterProxyModel: index from wrong model passed to mapToSource"
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
literal|"QSortFilterProxyModel: index from wrong model passed to mapToSource"
argument_list|)
expr_stmt|;
return|return
name|QModelIndex
argument_list|()
return|;
block|}
name|IndexMap
operator|::
name|const_iterator
name|it
init|=
name|index_to_iterator
argument_list|(
name|proxy_index
argument_list|)
decl_stmt|;
name|Mapping
modifier|*
name|m
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|proxy_index
operator|.
name|row
argument_list|()
operator|>=
name|m
operator|->
name|source_rows
operator|.
name|size
argument_list|()
operator|)
operator|||
operator|(
name|proxy_index
operator|.
name|column
argument_list|()
operator|>=
name|m
operator|->
name|source_columns
operator|.
name|size
argument_list|()
operator|)
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|int
name|source_row
init|=
name|m
operator|->
name|source_rows
operator|.
name|at
argument_list|(
name|proxy_index
operator|.
name|row
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|source_col
init|=
name|m
operator|->
name|source_columns
operator|.
name|at
argument_list|(
name|proxy_index
operator|.
name|column
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|model
operator|->
name|index
argument_list|(
name|source_row
argument_list|,
name|source_col
argument_list|,
name|it
operator|.
name|key
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|source_to_proxy
name|QModelIndex
name|QSortFilterProxyModelPrivate
operator|::
name|source_to_proxy
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|source_index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
comment|// for now; we may want to be able to set a root index later
if|if
condition|(
name|source_index
operator|.
name|model
argument_list|()
operator|!=
name|model
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QSortFilterProxyModel: index from wrong model passed to mapFromSource"
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
literal|"QSortFilterProxyModel: index from wrong model passed to mapFromSource"
argument_list|)
expr_stmt|;
return|return
name|QModelIndex
argument_list|()
return|;
block|}
name|QModelIndex
name|source_parent
init|=
name|source_index
operator|.
name|parent
argument_list|()
decl_stmt|;
name|IndexMap
operator|::
name|const_iterator
name|it
init|=
name|create_mapping
argument_list|(
name|source_parent
argument_list|)
decl_stmt|;
name|Mapping
modifier|*
name|m
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|source_index
operator|.
name|row
argument_list|()
operator|>=
name|m
operator|->
name|proxy_rows
operator|.
name|size
argument_list|()
operator|)
operator|||
operator|(
name|source_index
operator|.
name|column
argument_list|()
operator|>=
name|m
operator|->
name|proxy_columns
operator|.
name|size
argument_list|()
operator|)
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|int
name|proxy_row
init|=
name|m
operator|->
name|proxy_rows
operator|.
name|at
argument_list|(
name|source_index
operator|.
name|row
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|proxy_column
init|=
name|m
operator|->
name|proxy_columns
operator|.
name|at
argument_list|(
name|source_index
operator|.
name|column
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy_row
operator|==
operator|-
literal|1
operator|||
name|proxy_column
operator|==
operator|-
literal|1
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
return|return
name|create_index
argument_list|(
name|proxy_row
argument_list|,
name|proxy_column
argument_list|,
name|it
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|can_create_mapping
name|bool
name|QSortFilterProxyModelPrivate
operator|::
name|can_create_mapping
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|source_parent
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QModelIndex
name|source_grand_parent
init|=
name|source_parent
operator|.
name|parent
argument_list|()
decl_stmt|;
name|IndexMap
operator|::
name|const_iterator
name|it
init|=
name|source_index_mapping
operator|.
name|constFind
argument_list|(
name|source_grand_parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|source_index_mapping
operator|.
name|constEnd
argument_list|()
condition|)
block|{
comment|// Don't care, since we don't have mapping for the grand parent
return|return
literal|false
return|;
block|}
name|Mapping
modifier|*
name|gm
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|gm
operator|->
name|proxy_rows
operator|.
name|at
argument_list|(
name|source_parent
operator|.
name|row
argument_list|()
argument_list|)
operator|==
operator|-
literal|1
operator|||
name|gm
operator|->
name|proxy_columns
operator|.
name|at
argument_list|(
name|source_parent
operator|.
name|column
argument_list|()
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
comment|// Don't care, since parent is filtered
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!   \internal    Sorts the existing mappings. */
end_comment
begin_function
DECL|function|sort
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|sort
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|layoutAboutToBeChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|()
argument_list|,
name|QAbstractItemModel
operator|::
name|VerticalSortHint
argument_list|)
emit|;
name|QModelIndexPairList
name|source_indexes
init|=
name|store_persistent_indexes
argument_list|()
decl_stmt|;
name|IndexMap
operator|::
name|const_iterator
name|it
init|=
name|source_index_mapping
operator|.
name|constBegin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|source_index_mapping
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QModelIndex
name|source_parent
init|=
name|it
operator|.
name|key
argument_list|()
decl_stmt|;
name|Mapping
modifier|*
name|m
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
name|sort_source_rows
argument_list|(
name|m
operator|->
name|source_rows
argument_list|,
name|source_parent
argument_list|)
expr_stmt|;
name|build_source_to_proxy_mapping
argument_list|(
name|m
operator|->
name|source_rows
argument_list|,
name|m
operator|->
name|proxy_rows
argument_list|)
expr_stmt|;
block|}
name|update_persistent_indexes
argument_list|(
name|source_indexes
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|layoutChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|()
argument_list|,
name|QAbstractItemModel
operator|::
name|VerticalSortHint
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!   \internal      update the source_sort_column according to the proxy_sort_column     return true if the column was changed */
end_comment
begin_function
DECL|function|update_source_sort_column
name|bool
name|QSortFilterProxyModelPrivate
operator|::
name|update_source_sort_column
parameter_list|()
block|{
name|int
name|old_source_sort_column
init|=
name|source_sort_column
decl_stmt|;
if|if
condition|(
name|proxy_sort_column
operator|==
operator|-
literal|1
condition|)
block|{
name|source_sort_column
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// We cannot use index mapping here because in case of a still-empty
comment|// proxy model there's no valid proxy index we could map to source.
comment|// So always use the root mapping directly instead.
name|Mapping
modifier|*
name|m
init|=
name|create_mapping
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|proxy_sort_column
operator|<
name|m
operator|->
name|source_columns
operator|.
name|size
argument_list|()
condition|)
name|source_sort_column
operator|=
name|m
operator|->
name|source_columns
operator|.
name|at
argument_list|(
name|proxy_sort_column
argument_list|)
expr_stmt|;
else|else
name|source_sort_column
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|old_source_sort_column
operator|!=
name|source_sort_column
return|;
block|}
end_function
begin_comment
comment|/*!   \internal    Sorts the given \a source_rows according to current sort column and order. */
end_comment
begin_function
DECL|function|sort_source_rows
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|sort_source_rows
parameter_list|(
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_rows
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|source_sort_column
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|sort_order
operator|==
name|Qt
operator|::
name|AscendingOrder
condition|)
block|{
name|QSortFilterProxyModelLessThan
name|lt
argument_list|(
name|source_sort_column
argument_list|,
name|source_parent
argument_list|,
name|model
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|std
operator|::
name|stable_sort
argument_list|(
name|source_rows
operator|.
name|begin
argument_list|()
argument_list|,
name|source_rows
operator|.
name|end
argument_list|()
argument_list|,
name|lt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSortFilterProxyModelGreaterThan
name|gt
argument_list|(
name|source_sort_column
argument_list|,
name|source_parent
argument_list|,
name|model
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|std
operator|::
name|stable_sort
argument_list|(
name|source_rows
operator|.
name|begin
argument_list|()
argument_list|,
name|source_rows
operator|.
name|end
argument_list|()
argument_list|,
name|gt
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// restore the source model order
name|std
operator|::
name|stable_sort
argument_list|(
name|source_rows
operator|.
name|begin
argument_list|()
argument_list|,
name|source_rows
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \internal    Given source-to-proxy mapping \a source_to_proxy and the set of   source items \a source_items (which are part of that mapping),   determines the corresponding proxy item intervals that should   be removed from the proxy model.    The result is a vector of pairs, where each pair represents a   (start, end) tuple, sorted in ascending order. */
end_comment
begin_function
DECL|function|proxy_intervals_for_source_items
name|QVector
argument_list|<
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|>
name|QSortFilterProxyModelPrivate
operator|::
name|proxy_intervals_for_source_items
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_to_proxy
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_items
parameter_list|)
specifier|const
block|{
name|QVector
argument_list|<
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|>
name|proxy_intervals
decl_stmt|;
if|if
condition|(
name|source_items
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|proxy_intervals
return|;
name|int
name|source_items_index
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|source_items_index
operator|<
name|source_items
operator|.
name|size
argument_list|()
condition|)
block|{
name|int
name|first_proxy_item
init|=
name|source_to_proxy
operator|.
name|at
argument_list|(
name|source_items
operator|.
name|at
argument_list|(
name|source_items_index
argument_list|)
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|first_proxy_item
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|last_proxy_item
init|=
name|first_proxy_item
decl_stmt|;
operator|++
name|source_items_index
expr_stmt|;
comment|// Find end of interval
while|while
condition|(
operator|(
name|source_items_index
operator|<
name|source_items
operator|.
name|size
argument_list|()
operator|)
operator|&&
operator|(
name|source_to_proxy
operator|.
name|at
argument_list|(
name|source_items
operator|.
name|at
argument_list|(
name|source_items_index
argument_list|)
argument_list|)
operator|==
name|last_proxy_item
operator|+
literal|1
operator|)
condition|)
block|{
operator|++
name|last_proxy_item
expr_stmt|;
operator|++
name|source_items_index
expr_stmt|;
block|}
comment|// Add interval to result
name|proxy_intervals
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|(
name|first_proxy_item
argument_list|,
name|last_proxy_item
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|std
operator|::
name|stable_sort
argument_list|(
name|proxy_intervals
operator|.
name|begin
argument_list|()
argument_list|,
name|proxy_intervals
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|proxy_intervals
return|;
block|}
end_function
begin_comment
comment|/*!   \internal    Given source-to-proxy mapping \a src_to_proxy and proxy-to-source mapping   \a proxy_to_source, removes \a source_items from this proxy model.   The corresponding proxy items are removed in intervals, so that the proper   rows/columnsRemoved(start, end) signals will be generated. */
end_comment
begin_function
DECL|function|remove_source_items
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|remove_source_items
parameter_list|(
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_to_proxy
parameter_list|,
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|proxy_to_source
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_items
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|,
name|bool
name|emit_signal
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|QModelIndex
name|proxy_parent
init|=
name|q
operator|->
name|mapFromSource
argument_list|(
name|source_parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|proxy_parent
operator|.
name|isValid
argument_list|()
operator|&&
name|source_parent
operator|.
name|isValid
argument_list|()
condition|)
return|return;
comment|// nothing to do (already removed)
name|QVector
argument_list|<
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|>
name|proxy_intervals
decl_stmt|;
name|proxy_intervals
operator|=
name|proxy_intervals_for_source_items
argument_list|(
name|source_to_proxy
argument_list|,
name|source_items
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|proxy_intervals
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|interval
init|=
name|proxy_intervals
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|proxy_start
init|=
name|interval
operator|.
name|first
decl_stmt|;
name|int
name|proxy_end
init|=
name|interval
operator|.
name|second
decl_stmt|;
name|remove_proxy_interval
argument_list|(
name|source_to_proxy
argument_list|,
name|proxy_to_source
argument_list|,
name|proxy_start
argument_list|,
name|proxy_end
argument_list|,
name|proxy_parent
argument_list|,
name|orient
argument_list|,
name|emit_signal
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \internal    Given source-to-proxy mapping \a source_to_proxy and proxy-to-source mapping   \a proxy_to_source, removes items from \a proxy_start to \a proxy_end   (inclusive) from this proxy model. */
end_comment
begin_function
DECL|function|remove_proxy_interval
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|remove_proxy_interval
parameter_list|(
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_to_proxy
parameter_list|,
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|proxy_to_source
parameter_list|,
name|int
name|proxy_start
parameter_list|,
name|int
name|proxy_end
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|proxy_parent
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|,
name|bool
name|emit_signal
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|emit_signal
condition|)
block|{
if|if
condition|(
name|orient
operator|==
name|Qt
operator|::
name|Vertical
condition|)
name|q
operator|->
name|beginRemoveRows
argument_list|(
name|proxy_parent
argument_list|,
name|proxy_start
argument_list|,
name|proxy_end
argument_list|)
expr_stmt|;
else|else
name|q
operator|->
name|beginRemoveColumns
argument_list|(
name|proxy_parent
argument_list|,
name|proxy_start
argument_list|,
name|proxy_end
argument_list|)
expr_stmt|;
block|}
comment|// Remove items from proxy-to-source mapping
name|proxy_to_source
operator|.
name|remove
argument_list|(
name|proxy_start
argument_list|,
name|proxy_end
operator|-
name|proxy_start
operator|+
literal|1
argument_list|)
expr_stmt|;
name|build_source_to_proxy_mapping
argument_list|(
name|proxy_to_source
argument_list|,
name|source_to_proxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|emit_signal
condition|)
block|{
if|if
condition|(
name|orient
operator|==
name|Qt
operator|::
name|Vertical
condition|)
name|q
operator|->
name|endRemoveRows
argument_list|()
expr_stmt|;
else|else
name|q
operator|->
name|endRemoveColumns
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \internal    Given proxy-to-source mapping \a proxy_to_source and a set of   unmapped source items \a source_items, determines the proxy item   intervals at which the subsets of source items should be inserted   (but does not actually add them to the mapping).    The result is a vector of pairs, each pair representing a tuple (start,   items), where items is a vector containing the (sorted) source items that   should be inserted at that proxy model location. */
end_comment
begin_function
DECL|function|proxy_intervals_for_source_items_to_add
name|QVector
argument_list|<
name|QPair
argument_list|<
name|int
argument_list|,
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|>
name|QSortFilterProxyModelPrivate
operator|::
name|proxy_intervals_for_source_items_to_add
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|proxy_to_source
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_items
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QPair
argument_list|<
name|int
argument_list|,
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|>
name|proxy_intervals
decl_stmt|;
if|if
condition|(
name|source_items
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|proxy_intervals
return|;
name|int
name|proxy_low
init|=
literal|0
decl_stmt|;
name|int
name|proxy_item
init|=
literal|0
decl_stmt|;
name|int
name|source_items_index
init|=
literal|0
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|source_items_in_interval
decl_stmt|;
name|bool
name|compare
init|=
operator|(
name|orient
operator|==
name|Qt
operator|::
name|Vertical
operator|&&
name|source_sort_column
operator|>=
literal|0
operator|&&
name|dynamic_sortfilter
operator|)
decl_stmt|;
while|while
condition|(
name|source_items_index
operator|<
name|source_items
operator|.
name|size
argument_list|()
condition|)
block|{
name|source_items_in_interval
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|first_new_source_item
init|=
name|source_items
operator|.
name|at
argument_list|(
name|source_items_index
argument_list|)
decl_stmt|;
name|source_items_in_interval
operator|.
name|append
argument_list|(
name|first_new_source_item
argument_list|)
expr_stmt|;
operator|++
name|source_items_index
expr_stmt|;
comment|// Find proxy item at which insertion should be started
name|int
name|proxy_high
init|=
name|proxy_to_source
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|QModelIndex
name|i1
init|=
name|compare
condition|?
name|model
operator|->
name|index
argument_list|(
name|first_new_source_item
argument_list|,
name|source_sort_column
argument_list|,
name|source_parent
argument_list|)
else|:
name|QModelIndex
argument_list|()
decl_stmt|;
while|while
condition|(
name|proxy_low
operator|<=
name|proxy_high
condition|)
block|{
name|proxy_item
operator|=
operator|(
name|proxy_low
operator|+
name|proxy_high
operator|)
operator|/
literal|2
expr_stmt|;
if|if
condition|(
name|compare
condition|)
block|{
name|QModelIndex
name|i2
init|=
name|model
operator|->
name|index
argument_list|(
name|proxy_to_source
operator|.
name|at
argument_list|(
name|proxy_item
argument_list|)
argument_list|,
name|source_sort_column
argument_list|,
name|source_parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|sort_order
operator|==
name|Qt
operator|::
name|AscendingOrder
operator|)
condition|?
name|q
operator|->
name|lessThan
argument_list|(
name|i1
argument_list|,
name|i2
argument_list|)
else|:
name|q
operator|->
name|lessThan
argument_list|(
name|i2
argument_list|,
name|i1
argument_list|)
condition|)
name|proxy_high
operator|=
name|proxy_item
operator|-
literal|1
expr_stmt|;
else|else
name|proxy_low
operator|=
name|proxy_item
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|first_new_source_item
operator|<
name|proxy_to_source
operator|.
name|at
argument_list|(
name|proxy_item
argument_list|)
condition|)
name|proxy_high
operator|=
name|proxy_item
operator|-
literal|1
expr_stmt|;
else|else
name|proxy_low
operator|=
name|proxy_item
operator|+
literal|1
expr_stmt|;
block|}
block|}
name|proxy_item
operator|=
name|proxy_low
expr_stmt|;
comment|// Find the sequence of new source items that should be inserted here
if|if
condition|(
name|proxy_item
operator|>=
name|proxy_to_source
operator|.
name|size
argument_list|()
condition|)
block|{
for|for
control|(
init|;
name|source_items_index
operator|<
name|source_items
operator|.
name|size
argument_list|()
condition|;
operator|++
name|source_items_index
control|)
name|source_items_in_interval
operator|.
name|append
argument_list|(
name|source_items
operator|.
name|at
argument_list|(
name|source_items_index
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|i1
operator|=
name|compare
condition|?
name|model
operator|->
name|index
argument_list|(
name|proxy_to_source
operator|.
name|at
argument_list|(
name|proxy_item
argument_list|)
argument_list|,
name|source_sort_column
argument_list|,
name|source_parent
argument_list|)
else|:
name|QModelIndex
argument_list|()
expr_stmt|;
for|for
control|(
init|;
name|source_items_index
operator|<
name|source_items
operator|.
name|size
argument_list|()
condition|;
operator|++
name|source_items_index
control|)
block|{
name|int
name|new_source_item
init|=
name|source_items
operator|.
name|at
argument_list|(
name|source_items_index
argument_list|)
decl_stmt|;
if|if
condition|(
name|compare
condition|)
block|{
name|QModelIndex
name|i2
init|=
name|model
operator|->
name|index
argument_list|(
name|new_source_item
argument_list|,
name|source_sort_column
argument_list|,
name|source_parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|sort_order
operator|==
name|Qt
operator|::
name|AscendingOrder
operator|)
condition|?
name|q
operator|->
name|lessThan
argument_list|(
name|i1
argument_list|,
name|i2
argument_list|)
else|:
name|q
operator|->
name|lessThan
argument_list|(
name|i2
argument_list|,
name|i1
argument_list|)
condition|)
break|break;
block|}
else|else
block|{
if|if
condition|(
name|proxy_to_source
operator|.
name|at
argument_list|(
name|proxy_item
argument_list|)
operator|<
name|new_source_item
condition|)
break|break;
block|}
name|source_items_in_interval
operator|.
name|append
argument_list|(
name|new_source_item
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add interval to result
name|proxy_intervals
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|int
argument_list|,
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
name|proxy_item
argument_list|,
name|source_items_in_interval
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|proxy_intervals
return|;
block|}
end_function
begin_comment
comment|/*!   \internal    Given source-to-proxy mapping \a source_to_proxy and proxy-to-source mapping   \a proxy_to_source, inserts the given \a source_items into this proxy model.   The source items are inserted in intervals (based on some sorted order), so   that the proper rows/columnsInserted(start, end) signals will be generated. */
end_comment
begin_function
DECL|function|insert_source_items
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|insert_source_items
parameter_list|(
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_to_proxy
parameter_list|,
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|proxy_to_source
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_items
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|,
name|bool
name|emit_signal
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|QModelIndex
name|proxy_parent
init|=
name|q
operator|->
name|mapFromSource
argument_list|(
name|source_parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|proxy_parent
operator|.
name|isValid
argument_list|()
operator|&&
name|source_parent
operator|.
name|isValid
argument_list|()
condition|)
return|return;
comment|// nothing to do (source_parent is not mapped)
name|QVector
argument_list|<
name|QPair
argument_list|<
name|int
argument_list|,
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|>
name|proxy_intervals
decl_stmt|;
name|proxy_intervals
operator|=
name|proxy_intervals_for_source_items_to_add
argument_list|(
name|proxy_to_source
argument_list|,
name|source_items
argument_list|,
name|source_parent
argument_list|,
name|orient
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|proxy_intervals
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QPair
argument_list|<
name|int
argument_list|,
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|>
name|interval
init|=
name|proxy_intervals
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|proxy_start
init|=
name|interval
operator|.
name|first
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|source_items
init|=
name|interval
operator|.
name|second
decl_stmt|;
name|int
name|proxy_end
init|=
name|proxy_start
operator|+
name|source_items
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|emit_signal
condition|)
block|{
if|if
condition|(
name|orient
operator|==
name|Qt
operator|::
name|Vertical
condition|)
name|q
operator|->
name|beginInsertRows
argument_list|(
name|proxy_parent
argument_list|,
name|proxy_start
argument_list|,
name|proxy_end
argument_list|)
expr_stmt|;
else|else
name|q
operator|->
name|beginInsertColumns
argument_list|(
name|proxy_parent
argument_list|,
name|proxy_start
argument_list|,
name|proxy_end
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|source_items
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|proxy_to_source
operator|.
name|insert
argument_list|(
name|proxy_start
operator|+
name|i
argument_list|,
name|source_items
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|build_source_to_proxy_mapping
argument_list|(
name|proxy_to_source
argument_list|,
name|source_to_proxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|emit_signal
condition|)
block|{
if|if
condition|(
name|orient
operator|==
name|Qt
operator|::
name|Vertical
condition|)
name|q
operator|->
name|endInsertRows
argument_list|()
expr_stmt|;
else|else
name|q
operator|->
name|endInsertColumns
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!   \internal    Handles source model items insertion (columnsInserted(), rowsInserted()).   Determines   1) which of the inserted items to also insert into proxy model (filtering),   2) where to insert the items into the proxy model (sorting),   then inserts those items.   The items are inserted into the proxy model in intervals (based on   sorted order), so that the proper rows/columnsInserted(start, end)   signals will be generated. */
end_comment
begin_function
DECL|function|source_items_inserted
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|source_items_inserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|start
operator|<
literal|0
operator|)
operator|||
operator|(
name|end
operator|<
literal|0
operator|)
condition|)
return|return;
name|IndexMap
operator|::
name|const_iterator
name|it
init|=
name|source_index_mapping
operator|.
name|constFind
argument_list|(
name|source_parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|source_index_mapping
operator|.
name|constEnd
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|can_create_mapping
argument_list|(
name|source_parent
argument_list|)
condition|)
return|return;
name|it
operator|=
name|create_mapping
argument_list|(
name|source_parent
argument_list|)
expr_stmt|;
name|Mapping
modifier|*
name|m
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
name|QModelIndex
name|proxy_parent
init|=
name|q
operator|->
name|mapFromSource
argument_list|(
name|source_parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|->
name|source_rows
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|q
operator|->
name|beginInsertRows
argument_list|(
name|proxy_parent
argument_list|,
literal|0
argument_list|,
name|m
operator|->
name|source_rows
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|q
operator|->
name|endInsertRows
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|m
operator|->
name|source_columns
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|q
operator|->
name|beginInsertColumns
argument_list|(
name|proxy_parent
argument_list|,
literal|0
argument_list|,
name|m
operator|->
name|source_columns
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|q
operator|->
name|endInsertColumns
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
name|Mapping
modifier|*
name|m
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_to_proxy
init|=
operator|(
name|orient
operator|==
name|Qt
operator|::
name|Vertical
operator|)
condition|?
name|m
operator|->
name|proxy_rows
else|:
name|m
operator|->
name|proxy_columns
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|proxy_to_source
init|=
operator|(
name|orient
operator|==
name|Qt
operator|::
name|Vertical
operator|)
condition|?
name|m
operator|->
name|source_rows
else|:
name|m
operator|->
name|source_columns
decl_stmt|;
name|int
name|delta_item_count
init|=
name|end
operator|-
name|start
operator|+
literal|1
decl_stmt|;
name|int
name|old_item_count
init|=
name|source_to_proxy
operator|.
name|size
argument_list|()
decl_stmt|;
name|updateChildrenMapping
argument_list|(
name|source_parent
argument_list|,
name|m
argument_list|,
name|orient
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|delta_item_count
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Expand source-to-proxy mapping to account for new items
if|if
condition|(
name|start
argument_list|<
literal|0
operator|||
name|start
argument_list|>
name|source_to_proxy
operator|.
name|size
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QSortFilterProxyModel: invalid inserted rows reported by source model"
argument_list|)
expr_stmt|;
name|remove_from_mapping
argument_list|(
name|source_parent
argument_list|)
expr_stmt|;
return|return;
block|}
name|source_to_proxy
operator|.
name|insert
argument_list|(
name|start
argument_list|,
name|delta_item_count
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|start
operator|<
name|old_item_count
condition|)
block|{
comment|// Adjust existing "stale" indexes in proxy-to-source mapping
name|int
name|proxy_count
init|=
name|proxy_to_source
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|proxy_item
init|=
literal|0
init|;
name|proxy_item
operator|<
name|proxy_count
condition|;
operator|++
name|proxy_item
control|)
block|{
name|int
name|source_item
init|=
name|proxy_to_source
operator|.
name|at
argument_list|(
name|proxy_item
argument_list|)
decl_stmt|;
if|if
condition|(
name|source_item
operator|>=
name|start
condition|)
name|proxy_to_source
operator|.
name|replace
argument_list|(
name|proxy_item
argument_list|,
name|source_item
operator|+
name|delta_item_count
argument_list|)
expr_stmt|;
block|}
name|build_source_to_proxy_mapping
argument_list|(
name|proxy_to_source
argument_list|,
name|source_to_proxy
argument_list|)
expr_stmt|;
block|}
comment|// Figure out which items to add to mapping based on filter
name|QVector
argument_list|<
name|int
argument_list|>
name|source_items
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<=
name|end
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
name|orient
operator|==
name|Qt
operator|::
name|Vertical
operator|)
condition|?
name|q
operator|->
name|filterAcceptsRow
argument_list|(
name|i
argument_list|,
name|source_parent
argument_list|)
else|:
name|q
operator|->
name|filterAcceptsColumn
argument_list|(
name|i
argument_list|,
name|source_parent
argument_list|)
condition|)
block|{
name|source_items
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|model
operator|->
name|rowCount
argument_list|(
name|source_parent
argument_list|)
operator|==
name|delta_item_count
condition|)
block|{
comment|// Items were inserted where there were none before.
comment|// If it was new rows make sure to create mappings for columns so that a
comment|// valid mapping can be retrieved later and vice-versa.
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|orthogonal_proxy_to_source
init|=
operator|(
name|orient
operator|==
name|Qt
operator|::
name|Horizontal
operator|)
condition|?
name|m
operator|->
name|source_rows
else|:
name|m
operator|->
name|source_columns
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|orthogonal_source_to_proxy
init|=
operator|(
name|orient
operator|==
name|Qt
operator|::
name|Horizontal
operator|)
condition|?
name|m
operator|->
name|proxy_rows
else|:
name|m
operator|->
name|proxy_columns
decl_stmt|;
if|if
condition|(
name|orthogonal_source_to_proxy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|int
name|ortho_end
init|=
operator|(
name|orient
operator|==
name|Qt
operator|::
name|Horizontal
operator|)
condition|?
name|model
operator|->
name|rowCount
argument_list|(
name|source_parent
argument_list|)
else|:
name|model
operator|->
name|columnCount
argument_list|(
name|source_parent
argument_list|)
decl_stmt|;
name|orthogonal_source_to_proxy
operator|.
name|resize
argument_list|(
name|ortho_end
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|ortho_item
init|=
literal|0
init|;
name|ortho_item
operator|<
name|ortho_end
condition|;
operator|++
name|ortho_item
control|)
block|{
if|if
condition|(
operator|(
name|orient
operator|==
name|Qt
operator|::
name|Horizontal
operator|)
condition|?
name|q
operator|->
name|filterAcceptsRow
argument_list|(
name|ortho_item
argument_list|,
name|source_parent
argument_list|)
else|:
name|q
operator|->
name|filterAcceptsColumn
argument_list|(
name|ortho_item
argument_list|,
name|source_parent
argument_list|)
condition|)
block|{
name|orthogonal_proxy_to_source
operator|.
name|append
argument_list|(
name|ortho_item
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|orient
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
comment|// We're reacting to columnsInserted, but we've just inserted new rows. Sort them.
name|sort_source_rows
argument_list|(
name|orthogonal_proxy_to_source
argument_list|,
name|source_parent
argument_list|)
expr_stmt|;
block|}
name|build_source_to_proxy_mapping
argument_list|(
name|orthogonal_proxy_to_source
argument_list|,
name|orthogonal_source_to_proxy
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Sort and insert the items
if|if
condition|(
name|orient
operator|==
name|Qt
operator|::
name|Vertical
condition|)
comment|// Only sort rows
name|sort_source_rows
argument_list|(
name|source_items
argument_list|,
name|source_parent
argument_list|)
expr_stmt|;
name|insert_source_items
argument_list|(
name|source_to_proxy
argument_list|,
name|proxy_to_source
argument_list|,
name|source_items
argument_list|,
name|source_parent
argument_list|,
name|orient
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal    Handles source model items removal   (columnsAboutToBeRemoved(), rowsAboutToBeRemoved()). */
end_comment
begin_function
DECL|function|source_items_about_to_be_removed
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|source_items_about_to_be_removed
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|)
block|{
if|if
condition|(
operator|(
name|start
operator|<
literal|0
operator|)
operator|||
operator|(
name|end
operator|<
literal|0
operator|)
condition|)
return|return;
name|IndexMap
operator|::
name|const_iterator
name|it
init|=
name|source_index_mapping
operator|.
name|constFind
argument_list|(
name|source_parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|source_index_mapping
operator|.
name|constEnd
argument_list|()
condition|)
block|{
comment|// Don't care, since we don't have mapping for this index
return|return;
block|}
name|Mapping
modifier|*
name|m
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_to_proxy
init|=
operator|(
name|orient
operator|==
name|Qt
operator|::
name|Vertical
operator|)
condition|?
name|m
operator|->
name|proxy_rows
else|:
name|m
operator|->
name|proxy_columns
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|proxy_to_source
init|=
operator|(
name|orient
operator|==
name|Qt
operator|::
name|Vertical
operator|)
condition|?
name|m
operator|->
name|source_rows
else|:
name|m
operator|->
name|source_columns
decl_stmt|;
comment|// figure out which items to remove
name|QVector
argument_list|<
name|int
argument_list|>
name|source_items_to_remove
decl_stmt|;
name|int
name|proxy_count
init|=
name|proxy_to_source
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|proxy_item
init|=
literal|0
init|;
name|proxy_item
operator|<
name|proxy_count
condition|;
operator|++
name|proxy_item
control|)
block|{
name|int
name|source_item
init|=
name|proxy_to_source
operator|.
name|at
argument_list|(
name|proxy_item
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|source_item
operator|>=
name|start
operator|)
operator|&&
operator|(
name|source_item
operator|<=
name|end
operator|)
condition|)
name|source_items_to_remove
operator|.
name|append
argument_list|(
name|source_item
argument_list|)
expr_stmt|;
block|}
name|remove_source_items
argument_list|(
name|source_to_proxy
argument_list|,
name|proxy_to_source
argument_list|,
name|source_items_to_remove
argument_list|,
name|source_parent
argument_list|,
name|orient
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal    Handles source model items removal (columnsRemoved(), rowsRemoved()). */
end_comment
begin_function
DECL|function|source_items_removed
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|source_items_removed
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|)
block|{
if|if
condition|(
operator|(
name|start
operator|<
literal|0
operator|)
operator|||
operator|(
name|end
operator|<
literal|0
operator|)
condition|)
return|return;
name|IndexMap
operator|::
name|const_iterator
name|it
init|=
name|source_index_mapping
operator|.
name|constFind
argument_list|(
name|source_parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|source_index_mapping
operator|.
name|constEnd
argument_list|()
condition|)
block|{
comment|// Don't care, since we don't have mapping for this index
return|return;
block|}
name|Mapping
modifier|*
name|m
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_to_proxy
init|=
operator|(
name|orient
operator|==
name|Qt
operator|::
name|Vertical
operator|)
condition|?
name|m
operator|->
name|proxy_rows
else|:
name|m
operator|->
name|proxy_columns
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|proxy_to_source
init|=
operator|(
name|orient
operator|==
name|Qt
operator|::
name|Vertical
operator|)
condition|?
name|m
operator|->
name|source_rows
else|:
name|m
operator|->
name|source_columns
decl_stmt|;
if|if
condition|(
name|end
operator|>=
name|source_to_proxy
operator|.
name|size
argument_list|()
condition|)
name|end
operator|=
name|source_to_proxy
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
comment|// Shrink the source-to-proxy mapping to reflect the new item count
name|int
name|delta_item_count
init|=
name|end
operator|-
name|start
operator|+
literal|1
decl_stmt|;
name|source_to_proxy
operator|.
name|remove
argument_list|(
name|start
argument_list|,
name|delta_item_count
argument_list|)
expr_stmt|;
name|int
name|proxy_count
init|=
name|proxy_to_source
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|proxy_count
operator|>
name|source_to_proxy
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// mapping is in an inconsistent state -- redo the whole mapping
name|qWarning
argument_list|(
literal|"QSortFilterProxyModel: inconsistent changes reported by source model"
argument_list|)
expr_stmt|;
name|Q_Q
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|q
operator|->
name|beginResetModel
argument_list|()
expr_stmt|;
name|remove_from_mapping
argument_list|(
name|source_parent
argument_list|)
expr_stmt|;
name|q
operator|->
name|endResetModel
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// Adjust "stale" indexes in proxy-to-source mapping
for|for
control|(
name|int
name|proxy_item
init|=
literal|0
init|;
name|proxy_item
operator|<
name|proxy_count
condition|;
operator|++
name|proxy_item
control|)
block|{
name|int
name|source_item
init|=
name|proxy_to_source
operator|.
name|at
argument_list|(
name|proxy_item
argument_list|)
decl_stmt|;
if|if
condition|(
name|source_item
operator|>=
name|start
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|source_item
operator|-
name|delta_item_count
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|proxy_to_source
operator|.
name|replace
argument_list|(
name|proxy_item
argument_list|,
name|source_item
operator|-
name|delta_item_count
argument_list|)
expr_stmt|;
block|}
block|}
name|build_source_to_proxy_mapping
argument_list|(
name|proxy_to_source
argument_list|,
name|source_to_proxy
argument_list|)
expr_stmt|;
name|updateChildrenMapping
argument_list|(
name|source_parent
argument_list|,
name|m
argument_list|,
name|orient
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|delta_item_count
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal   updates the mapping of the children when inserting or removing items */
end_comment
begin_function
DECL|function|updateChildrenMapping
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|updateChildrenMapping
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|Mapping
modifier|*
name|parent_mapping
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|delta_item_count
parameter_list|,
name|bool
name|remove
parameter_list|)
block|{
comment|// see if any mapped children should be (re)moved
name|QVector
argument_list|<
name|QPair
argument_list|<
name|QModelIndex
argument_list|,
name|Mapping
modifier|*
argument_list|>
argument_list|>
name|moved_source_index_mappings
decl_stmt|;
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
operator|::
name|iterator
name|it2
init|=
name|parent_mapping
operator|->
name|mapped_children
operator|.
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it2
operator|!=
name|parent_mapping
operator|->
name|mapped_children
operator|.
name|end
argument_list|()
condition|;
control|)
block|{
specifier|const
name|QModelIndex
name|source_child_index
init|=
operator|*
name|it2
decl_stmt|;
specifier|const
name|int
name|pos
init|=
operator|(
name|orient
operator|==
name|Qt
operator|::
name|Vertical
operator|)
condition|?
name|source_child_index
operator|.
name|row
argument_list|()
else|:
name|source_child_index
operator|.
name|column
argument_list|()
decl_stmt|;
if|if
condition|(
name|pos
operator|<
name|start
condition|)
block|{
comment|// not affected
operator|++
name|it2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|remove
operator|&&
name|pos
operator|<=
name|end
condition|)
block|{
comment|// in the removed interval
name|it2
operator|=
name|parent_mapping
operator|->
name|mapped_children
operator|.
name|erase
argument_list|(
name|it2
argument_list|)
expr_stmt|;
name|remove_from_mapping
argument_list|(
name|source_child_index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// below the removed items -- recompute the index
name|QModelIndex
name|new_index
decl_stmt|;
specifier|const
name|int
name|newpos
init|=
name|remove
condition|?
name|pos
operator|-
name|delta_item_count
else|:
name|pos
operator|+
name|delta_item_count
decl_stmt|;
if|if
condition|(
name|orient
operator|==
name|Qt
operator|::
name|Vertical
condition|)
block|{
name|new_index
operator|=
name|model
operator|->
name|index
argument_list|(
name|newpos
argument_list|,
name|source_child_index
operator|.
name|column
argument_list|()
argument_list|,
name|source_parent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|new_index
operator|=
name|model
operator|->
name|index
argument_list|(
name|source_child_index
operator|.
name|row
argument_list|()
argument_list|,
name|newpos
argument_list|,
name|source_parent
argument_list|)
expr_stmt|;
block|}
operator|*
name|it2
operator|=
name|new_index
expr_stmt|;
operator|++
name|it2
expr_stmt|;
comment|// update mapping
name|Mapping
modifier|*
name|cm
init|=
name|source_index_mapping
operator|.
name|take
argument_list|(
name|source_child_index
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|cm
argument_list|)
expr_stmt|;
comment|// we do not reinsert right away, because the new index might be identical with another, old index
name|moved_source_index_mappings
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QModelIndex
argument_list|,
name|Mapping
operator|*
argument_list|>
argument_list|(
name|new_index
argument_list|,
name|cm
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// reinsert moved, mapped indexes
name|QVector
argument_list|<
name|QPair
argument_list|<
name|QModelIndex
argument_list|,
name|Mapping
modifier|*
argument_list|>
argument_list|>
operator|::
name|iterator
name|it
init|=
name|moved_source_index_mappings
operator|.
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|moved_source_index_mappings
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
ifdef|#
directive|ifdef
name|QT_STRICT_ITERATORS
name|source_index_mapping
operator|.
name|insert
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|first
argument_list|,
operator|(
operator|*
name|it
operator|)
operator|.
name|second
argument_list|)
expr_stmt|;
operator|(
operator|*
name|it
operator|)
operator|.
name|second
operator|->
name|map_iter
operator|=
name|source_index_mapping
operator|.
name|constFind
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|first
argument_list|)
expr_stmt|;
else|#
directive|else
operator|(
operator|*
name|it
operator|)
operator|.
name|second
operator|->
name|map_iter
operator|=
name|source_index_mapping
operator|.
name|insert
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|first
argument_list|,
operator|(
operator|*
name|it
operator|)
operator|.
name|second
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|proxy_item_range
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|proxy_item_range
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_to_proxy
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_items
parameter_list|,
name|int
modifier|&
name|proxy_low
parameter_list|,
name|int
modifier|&
name|proxy_high
parameter_list|)
specifier|const
block|{
name|proxy_low
operator|=
name|INT_MAX
expr_stmt|;
name|proxy_high
operator|=
name|INT_MIN
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|source_items
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|proxy_item
init|=
name|source_to_proxy
operator|.
name|at
argument_list|(
name|source_items
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|proxy_item
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxy_item
operator|<
name|proxy_low
condition|)
name|proxy_low
operator|=
name|proxy_item
expr_stmt|;
if|if
condition|(
name|proxy_item
operator|>
name|proxy_high
condition|)
name|proxy_high
operator|=
name|proxy_item
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|build_source_to_proxy_mapping
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|build_source_to_proxy_mapping
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|proxy_to_source
parameter_list|,
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_to_proxy
parameter_list|)
specifier|const
block|{
name|source_to_proxy
operator|.
name|fill
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|proxy_count
init|=
name|proxy_to_source
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|proxy_count
condition|;
operator|++
name|i
control|)
name|source_to_proxy
index|[
name|proxy_to_source
operator|.
name|at
argument_list|(
name|i
argument_list|)
index|]
operator|=
name|i
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal    Maps the persistent proxy indexes to source indexes and   returns the list of source indexes. */
end_comment
begin_function
DECL|function|store_persistent_indexes
name|QModelIndexPairList
name|QSortFilterProxyModelPrivate
operator|::
name|store_persistent_indexes
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|QModelIndexPairList
name|source_indexes
decl_stmt|;
foreach|foreach
control|(
name|QPersistentModelIndexData
modifier|*
name|data
decl|,
name|persistent
operator|.
name|indexes
control|)
block|{
name|QModelIndex
name|proxy_index
init|=
name|data
operator|->
name|index
decl_stmt|;
name|QModelIndex
name|source_index
init|=
name|q
operator|->
name|mapToSource
argument_list|(
name|proxy_index
argument_list|)
decl_stmt|;
name|source_indexes
operator|.
name|append
argument_list|(
name|qMakePair
argument_list|(
name|proxy_index
argument_list|,
name|QPersistentModelIndex
argument_list|(
name|source_index
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|source_indexes
return|;
block|}
end_function
begin_comment
comment|/*!   \internal    Maps \a source_indexes to proxy indexes and stores those   as persistent indexes. */
end_comment
begin_function
DECL|function|update_persistent_indexes
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|update_persistent_indexes
parameter_list|(
specifier|const
name|QModelIndexPairList
modifier|&
name|source_indexes
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|QModelIndexList
name|from
decl_stmt|,
name|to
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|source_indexes
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|source_index
init|=
name|source_indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
decl_stmt|;
name|QModelIndex
name|old_proxy_index
init|=
name|source_indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|first
decl_stmt|;
name|create_mapping
argument_list|(
name|source_index
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|QModelIndex
name|proxy_index
init|=
name|q
operator|->
name|mapFromSource
argument_list|(
name|source_index
argument_list|)
decl_stmt|;
name|from
operator|<<
name|old_proxy_index
expr_stmt|;
name|to
operator|<<
name|proxy_index
expr_stmt|;
block|}
name|q
operator|->
name|changePersistentIndexList
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal    Updates the proxy model (adds/removes rows) based on the   new filter. */
end_comment
begin_function
DECL|function|filter_changed
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|filter_changed
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|)
block|{
name|IndexMap
operator|::
name|const_iterator
name|it
init|=
name|source_index_mapping
operator|.
name|constFind
argument_list|(
name|source_parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|source_index_mapping
operator|.
name|constEnd
argument_list|()
condition|)
return|return;
name|Mapping
modifier|*
name|m
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
name|rows_removed
init|=
name|handle_filter_changed
argument_list|(
name|m
operator|->
name|proxy_rows
argument_list|,
name|m
operator|->
name|source_rows
argument_list|,
name|source_parent
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
name|columns_removed
init|=
name|handle_filter_changed
argument_list|(
name|m
operator|->
name|proxy_columns
argument_list|,
name|m
operator|->
name|source_columns
argument_list|,
name|source_parent
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
decl_stmt|;
comment|// We need to iterate over a copy of m->mapped_children because otherwise it may be changed by other code, invalidating
comment|// the iterator it2.
comment|// The m->mapped_children vector can be appended to with indexes which are no longer filtered
comment|// out (in create_mapping) when this function recurses for child indexes.
specifier|const
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
name|mappedChildren
init|=
name|m
operator|->
name|mapped_children
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|indexesToRemove
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mappedChildren
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QModelIndex
name|source_child_index
init|=
name|mappedChildren
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|rows_removed
operator|.
name|contains
argument_list|(
name|source_child_index
operator|.
name|row
argument_list|()
argument_list|)
operator|||
name|columns_removed
operator|.
name|contains
argument_list|(
name|source_child_index
operator|.
name|column
argument_list|()
argument_list|)
condition|)
block|{
name|indexesToRemove
operator|.
name|push_back
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|remove_from_mapping
argument_list|(
name|source_child_index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filter_changed
argument_list|(
name|source_child_index
argument_list|)
expr_stmt|;
block|}
block|}
name|QVector
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|removeIt
init|=
name|indexesToRemove
operator|.
name|constEnd
argument_list|()
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|removeBegin
init|=
name|indexesToRemove
operator|.
name|constBegin
argument_list|()
decl_stmt|;
comment|// We can't just remove these items from mappedChildren while iterating above and then
comment|// do something like m->mapped_children = mappedChildren, because mapped_children might
comment|// be appended to in create_mapping, and we would lose those new items.
comment|// Because they are always appended in create_mapping, we can still remove them by
comment|// position here.
while|while
condition|(
name|removeIt
operator|!=
name|removeBegin
condition|)
block|{
operator|--
name|removeIt
expr_stmt|;
name|m
operator|->
name|mapped_children
operator|.
name|remove
argument_list|(
operator|*
name|removeIt
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \internal   returns the removed items indexes */
end_comment
begin_function
DECL|function|handle_filter_changed
name|QSet
argument_list|<
name|int
argument_list|>
name|QSortFilterProxyModelPrivate
operator|::
name|handle_filter_changed
parameter_list|(
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_to_proxy
parameter_list|,
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|proxy_to_source
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
comment|// Figure out which mapped items to remove
name|QVector
argument_list|<
name|int
argument_list|>
name|source_items_remove
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|proxy_to_source
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|source_item
init|=
name|proxy_to_source
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|orient
operator|==
name|Qt
operator|::
name|Vertical
operator|)
condition|?
operator|!
name|q
operator|->
name|filterAcceptsRow
argument_list|(
name|source_item
argument_list|,
name|source_parent
argument_list|)
else|:
operator|!
name|q
operator|->
name|filterAcceptsColumn
argument_list|(
name|source_item
argument_list|,
name|source_parent
argument_list|)
condition|)
block|{
comment|// This source item does not satisfy the filter, so it must be removed
name|source_items_remove
operator|.
name|append
argument_list|(
name|source_item
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Figure out which non-mapped items to insert
name|QVector
argument_list|<
name|int
argument_list|>
name|source_items_insert
decl_stmt|;
name|int
name|source_count
init|=
name|source_to_proxy
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|source_item
init|=
literal|0
init|;
name|source_item
operator|<
name|source_count
condition|;
operator|++
name|source_item
control|)
block|{
if|if
condition|(
name|source_to_proxy
operator|.
name|at
argument_list|(
name|source_item
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|(
name|orient
operator|==
name|Qt
operator|::
name|Vertical
operator|)
condition|?
name|q
operator|->
name|filterAcceptsRow
argument_list|(
name|source_item
argument_list|,
name|source_parent
argument_list|)
else|:
name|q
operator|->
name|filterAcceptsColumn
argument_list|(
name|source_item
argument_list|,
name|source_parent
argument_list|)
condition|)
block|{
comment|// This source item satisfies the filter, so it must be added
name|source_items_insert
operator|.
name|append
argument_list|(
name|source_item
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|source_items_remove
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|source_items_insert
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Do item removal and insertion
name|remove_source_items
argument_list|(
name|source_to_proxy
argument_list|,
name|proxy_to_source
argument_list|,
name|source_items_remove
argument_list|,
name|source_parent
argument_list|,
name|orient
argument_list|)
expr_stmt|;
if|if
condition|(
name|orient
operator|==
name|Qt
operator|::
name|Vertical
condition|)
name|sort_source_rows
argument_list|(
name|source_items_insert
argument_list|,
name|source_parent
argument_list|)
expr_stmt|;
name|insert_source_items
argument_list|(
name|source_to_proxy
argument_list|,
name|proxy_to_source
argument_list|,
name|source_items_insert
argument_list|,
name|source_parent
argument_list|,
name|orient
argument_list|)
expr_stmt|;
block|}
return|return
name|qVectorToSet
argument_list|(
name|source_items_remove
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|_q_sourceDataChanged
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|_q_sourceDataChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_top_left
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|source_bottom_right
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|source_top_left
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|source_bottom_right
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QModelIndex
name|source_parent
init|=
name|source_top_left
operator|.
name|parent
argument_list|()
decl_stmt|;
name|IndexMap
operator|::
name|const_iterator
name|it
init|=
name|source_index_mapping
operator|.
name|constFind
argument_list|(
name|source_parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|source_index_mapping
operator|.
name|constEnd
argument_list|()
condition|)
block|{
comment|// Don't care, since we don't have mapping for this index
return|return;
block|}
name|Mapping
modifier|*
name|m
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
comment|// Figure out how the source changes affect us
name|QVector
argument_list|<
name|int
argument_list|>
name|source_rows_remove
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|source_rows_insert
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|source_rows_change
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|source_rows_resort
decl_stmt|;
name|int
name|end
init|=
name|qMin
argument_list|(
name|source_bottom_right
operator|.
name|row
argument_list|()
argument_list|,
name|m
operator|->
name|proxy_rows
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|source_row
init|=
name|source_top_left
operator|.
name|row
argument_list|()
init|;
name|source_row
operator|<=
name|end
condition|;
operator|++
name|source_row
control|)
block|{
if|if
condition|(
name|dynamic_sortfilter
condition|)
block|{
if|if
condition|(
name|m
operator|->
name|proxy_rows
operator|.
name|at
argument_list|(
name|source_row
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|q
operator|->
name|filterAcceptsRow
argument_list|(
name|source_row
argument_list|,
name|source_parent
argument_list|)
condition|)
block|{
comment|// This source row no longer satisfies the filter, so it must be removed
name|source_rows_remove
operator|.
name|append
argument_list|(
name|source_row
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source_sort_column
operator|>=
name|source_top_left
operator|.
name|column
argument_list|()
operator|&&
name|source_sort_column
operator|<=
name|source_bottom_right
operator|.
name|column
argument_list|()
condition|)
block|{
comment|// This source row has changed in a way that may affect sorted order
name|source_rows_resort
operator|.
name|append
argument_list|(
name|source_row
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// This row has simply changed, without affecting filtering nor sorting
name|source_rows_change
operator|.
name|append
argument_list|(
name|source_row
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|itemsBeingRemoved
operator|.
name|contains
argument_list|(
name|source_parent
argument_list|,
name|source_row
argument_list|)
operator|&&
name|q
operator|->
name|filterAcceptsRow
argument_list|(
name|source_row
argument_list|,
name|source_parent
argument_list|)
condition|)
block|{
comment|// This source row now satisfies the filter, so it must be added
name|source_rows_insert
operator|.
name|append
argument_list|(
name|source_row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|m
operator|->
name|proxy_rows
operator|.
name|at
argument_list|(
name|source_row
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|source_rows_change
operator|.
name|append
argument_list|(
name|source_row
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|source_rows_remove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|remove_source_items
argument_list|(
name|m
operator|->
name|proxy_rows
argument_list|,
name|m
operator|->
name|source_rows
argument_list|,
name|source_rows_remove
argument_list|,
name|source_parent
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
name|source_rows_remove_set
init|=
name|qVectorToSet
argument_list|(
name|source_rows_remove
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
operator|::
name|iterator
name|childIt
init|=
name|m
operator|->
name|mapped_children
operator|.
name|end
argument_list|()
decl_stmt|;
while|while
condition|(
name|childIt
operator|!=
name|m
operator|->
name|mapped_children
operator|.
name|begin
argument_list|()
condition|)
block|{
operator|--
name|childIt
expr_stmt|;
specifier|const
name|QModelIndex
name|source_child_index
init|=
operator|*
name|childIt
decl_stmt|;
if|if
condition|(
name|source_rows_remove_set
operator|.
name|contains
argument_list|(
name|source_child_index
operator|.
name|row
argument_list|()
argument_list|)
condition|)
block|{
name|childIt
operator|=
name|m
operator|->
name|mapped_children
operator|.
name|erase
argument_list|(
name|childIt
argument_list|)
expr_stmt|;
name|remove_from_mapping
argument_list|(
name|source_child_index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|source_rows_resort
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Re-sort the rows of this level
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|parents
decl_stmt|;
name|parents
operator|<<
name|q
operator|->
name|mapFromSource
argument_list|(
name|source_parent
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|layoutAboutToBeChanged
argument_list|(
name|parents
argument_list|,
name|QAbstractItemModel
operator|::
name|VerticalSortHint
argument_list|)
emit|;
name|QModelIndexPairList
name|source_indexes
init|=
name|store_persistent_indexes
argument_list|()
decl_stmt|;
name|remove_source_items
argument_list|(
name|m
operator|->
name|proxy_rows
argument_list|,
name|m
operator|->
name|source_rows
argument_list|,
name|source_rows_resort
argument_list|,
name|source_parent
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sort_source_rows
argument_list|(
name|source_rows_resort
argument_list|,
name|source_parent
argument_list|)
expr_stmt|;
name|insert_source_items
argument_list|(
name|m
operator|->
name|proxy_rows
argument_list|,
name|m
operator|->
name|source_rows
argument_list|,
name|source_rows_resort
argument_list|,
name|source_parent
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|update_persistent_indexes
argument_list|(
name|source_indexes
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|layoutChanged
argument_list|(
name|parents
argument_list|,
name|QAbstractItemModel
operator|::
name|VerticalSortHint
argument_list|)
emit|;
comment|// Make sure we also emit dataChanged for the rows
name|source_rows_change
operator|+=
name|source_rows_resort
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|source_rows_change
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Find the proxy row range
name|int
name|proxy_start_row
decl_stmt|;
name|int
name|proxy_end_row
decl_stmt|;
name|proxy_item_range
argument_list|(
name|m
operator|->
name|proxy_rows
argument_list|,
name|source_rows_change
argument_list|,
name|proxy_start_row
argument_list|,
name|proxy_end_row
argument_list|)
expr_stmt|;
comment|// ### Find the proxy column range also
if|if
condition|(
name|proxy_end_row
operator|>=
literal|0
condition|)
block|{
comment|// the row was accepted, but some columns might still be filtered out
name|int
name|source_left_column
init|=
name|source_top_left
operator|.
name|column
argument_list|()
decl_stmt|;
while|while
condition|(
name|source_left_column
operator|<
name|source_bottom_right
operator|.
name|column
argument_list|()
operator|&&
name|m
operator|->
name|proxy_columns
operator|.
name|at
argument_list|(
name|source_left_column
argument_list|)
operator|==
operator|-
literal|1
condition|)
operator|++
name|source_left_column
expr_stmt|;
specifier|const
name|QModelIndex
name|proxy_top_left
init|=
name|create_index
argument_list|(
name|proxy_start_row
argument_list|,
name|m
operator|->
name|proxy_columns
operator|.
name|at
argument_list|(
name|source_left_column
argument_list|)
argument_list|,
name|it
argument_list|)
decl_stmt|;
name|int
name|source_right_column
init|=
name|source_bottom_right
operator|.
name|column
argument_list|()
decl_stmt|;
while|while
condition|(
name|source_right_column
operator|>
name|source_top_left
operator|.
name|column
argument_list|()
operator|&&
name|m
operator|->
name|proxy_columns
operator|.
name|at
argument_list|(
name|source_right_column
argument_list|)
operator|==
operator|-
literal|1
condition|)
operator|--
name|source_right_column
expr_stmt|;
specifier|const
name|QModelIndex
name|proxy_bottom_right
init|=
name|create_index
argument_list|(
name|proxy_end_row
argument_list|,
name|m
operator|->
name|proxy_columns
operator|.
name|at
argument_list|(
name|source_right_column
argument_list|)
argument_list|,
name|it
argument_list|)
decl_stmt|;
emit|emit
name|q
operator|->
name|dataChanged
argument_list|(
name|proxy_top_left
argument_list|,
name|proxy_bottom_right
argument_list|)
emit|;
block|}
block|}
if|if
condition|(
operator|!
name|source_rows_insert
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sort_source_rows
argument_list|(
name|source_rows_insert
argument_list|,
name|source_parent
argument_list|)
expr_stmt|;
name|insert_source_items
argument_list|(
name|m
operator|->
name|proxy_rows
argument_list|,
name|m
operator|->
name|source_rows
argument_list|,
name|source_rows_insert
argument_list|,
name|source_parent
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_sourceHeaderDataChanged
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|_q_sourceHeaderDataChanged
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|start
operator|<=
name|end
argument_list|)
expr_stmt|;
name|Q_Q
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|Mapping
modifier|*
name|m
init|=
name|create_mapping
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|source_to_proxy
init|=
operator|(
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
operator|)
condition|?
name|m
operator|->
name|proxy_rows
else|:
name|m
operator|->
name|proxy_columns
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|proxy_positions
decl_stmt|;
name|proxy_positions
operator|.
name|reserve
argument_list|(
name|end
operator|-
name|start
operator|+
literal|1
argument_list|)
expr_stmt|;
block|{
name|Q_ASSERT
argument_list|(
name|source_to_proxy
operator|.
name|size
argument_list|()
operator|>
name|end
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|source_to_proxy
operator|.
name|constBegin
argument_list|()
operator|+
name|start
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|endIt
init|=
name|source_to_proxy
operator|.
name|constBegin
argument_list|()
operator|+
name|end
operator|+
literal|1
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|endIt
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|*
name|it
operator|!=
operator|-
literal|1
condition|)
name|proxy_positions
operator|.
name|push_back
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
block|}
block|}
name|std
operator|::
name|sort
argument_list|(
name|proxy_positions
operator|.
name|begin
argument_list|()
argument_list|,
name|proxy_positions
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|last_index
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|numItems
init|=
name|proxy_positions
operator|.
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
name|last_index
operator|<
name|numItems
condition|)
block|{
specifier|const
name|int
name|proxyStart
init|=
name|proxy_positions
operator|.
name|at
argument_list|(
name|last_index
argument_list|)
decl_stmt|;
name|int
name|proxyEnd
init|=
name|proxyStart
decl_stmt|;
operator|++
name|last_index
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|last_index
init|;
name|i
operator|<
name|numItems
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|proxy_positions
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|proxyEnd
operator|+
literal|1
condition|)
block|{
operator|++
name|last_index
expr_stmt|;
operator|++
name|proxyEnd
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
emit|emit
name|q
operator|->
name|headerDataChanged
argument_list|(
name|orientation
argument_list|,
name|proxyStart
argument_list|,
name|proxyEnd
argument_list|)
emit|;
block|}
block|}
end_function
begin_function
DECL|function|_q_sourceAboutToBeReset
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|_q_sourceAboutToBeReset
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|q
operator|->
name|beginResetModel
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_sourceReset
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|_q_sourceReset
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|invalidatePersistentIndexes
argument_list|()
expr_stmt|;
name|_q_clearMapping
argument_list|()
expr_stmt|;
comment|// All internal structures are deleted in clear()
name|q
operator|->
name|endResetModel
argument_list|()
expr_stmt|;
name|update_source_sort_column
argument_list|()
expr_stmt|;
if|if
condition|(
name|dynamic_sortfilter
condition|)
name|sort
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_sourceLayoutAboutToBeChanged
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|_q_sourceLayoutAboutToBeChanged
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
modifier|&
name|sourceParents
parameter_list|,
name|QAbstractItemModel
operator|::
name|LayoutChangeHint
name|hint
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|saved_persistent_indexes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|parents
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QPersistentModelIndex
modifier|&
name|parent
decl|,
name|sourceParents
control|)
block|{
if|if
condition|(
operator|!
name|parent
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|parents
operator|<<
name|QPersistentModelIndex
argument_list|()
expr_stmt|;
continue|continue;
block|}
specifier|const
name|QModelIndex
name|mappedParent
init|=
name|q
operator|->
name|mapFromSource
argument_list|(
name|parent
argument_list|)
decl_stmt|;
comment|// Might be filtered out.
if|if
condition|(
name|mappedParent
operator|.
name|isValid
argument_list|()
condition|)
name|parents
operator|<<
name|mappedParent
expr_stmt|;
block|}
comment|// All parents filtered out.
if|if
condition|(
operator|!
name|sourceParents
operator|.
name|isEmpty
argument_list|()
operator|&&
name|parents
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
emit|emit
name|q
operator|->
name|layoutAboutToBeChanged
argument_list|(
name|parents
argument_list|,
name|hint
argument_list|)
emit|;
if|if
condition|(
name|persistent
operator|.
name|indexes
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|saved_persistent_indexes
operator|=
name|store_persistent_indexes
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_sourceLayoutChanged
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|_q_sourceLayoutChanged
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
modifier|&
name|sourceParents
parameter_list|,
name|QAbstractItemModel
operator|::
name|LayoutChangeHint
name|hint
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
comment|// Optimize: We only actually have to clear the mapping related to the contents of
comment|// sourceParents, not everything.
name|qDeleteAll
argument_list|(
name|source_index_mapping
argument_list|)
expr_stmt|;
name|source_index_mapping
operator|.
name|clear
argument_list|()
expr_stmt|;
name|update_persistent_indexes
argument_list|(
name|saved_persistent_indexes
argument_list|)
expr_stmt|;
name|saved_persistent_indexes
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|dynamic_sortfilter
operator|&&
name|update_source_sort_column
argument_list|()
condition|)
block|{
comment|//update_source_sort_column might have created wrong mapping so we have to clear it again
name|qDeleteAll
argument_list|(
name|source_index_mapping
argument_list|)
expr_stmt|;
name|source_index_mapping
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|parents
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QPersistentModelIndex
modifier|&
name|parent
decl|,
name|sourceParents
control|)
block|{
if|if
condition|(
operator|!
name|parent
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|parents
operator|<<
name|QPersistentModelIndex
argument_list|()
expr_stmt|;
continue|continue;
block|}
specifier|const
name|QModelIndex
name|mappedParent
init|=
name|q
operator|->
name|mapFromSource
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappedParent
operator|.
name|isValid
argument_list|()
condition|)
name|parents
operator|<<
name|mappedParent
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|sourceParents
operator|.
name|isEmpty
argument_list|()
operator|&&
name|parents
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
emit|emit
name|q
operator|->
name|layoutChanged
argument_list|(
name|parents
argument_list|,
name|hint
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_sourceRowsAboutToBeInserted
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|_q_sourceRowsAboutToBeInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|end
argument_list|)
expr_stmt|;
comment|//Force the creation of a mapping now, even if its empty.
comment|//We need it because the proxy can be acessed at the moment it emits rowsAboutToBeInserted in insert_source_items
if|if
condition|(
name|can_create_mapping
argument_list|(
name|source_parent
argument_list|)
condition|)
name|create_mapping
argument_list|(
name|source_parent
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_sourceRowsInserted
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|_q_sourceRowsInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|source_items_inserted
argument_list|(
name|source_parent
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
if|if
condition|(
name|update_source_sort_column
argument_list|()
operator|&&
name|dynamic_sortfilter
condition|)
comment|//previous call to update_source_sort_column may fail if the model has no column.
name|sort
argument_list|()
expr_stmt|;
comment|// now it should succeed so we need to make sure to sort again
block|}
end_function
begin_function
DECL|function|_q_sourceRowsAboutToBeRemoved
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|_q_sourceRowsAboutToBeRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|itemsBeingRemoved
operator|=
name|QRowsRemoval
argument_list|(
name|source_parent
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|source_items_about_to_be_removed
argument_list|(
name|source_parent
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_sourceRowsRemoved
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|_q_sourceRowsRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|itemsBeingRemoved
operator|=
name|QRowsRemoval
argument_list|()
expr_stmt|;
name|source_items_removed
argument_list|(
name|source_parent
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_sourceRowsAboutToBeMoved
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|_q_sourceRowsAboutToBeMoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|sourceParent
parameter_list|,
name|int
comment|/* sourceStart */
parameter_list|,
name|int
comment|/* sourceEnd */
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|destParent
parameter_list|,
name|int
comment|/* dest */
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
comment|// Because rows which are contiguous in the source model might not be contiguous
comment|// in the proxy due to sorting, the best thing we can do here is be specific about what
comment|// parents are having their children changed.
comment|// Optimize: Emit move signals if the proxy is not sorted. Will need to account for rows
comment|// being filtered out though.
name|saved_persistent_indexes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|parents
decl_stmt|;
name|parents
operator|<<
name|q
operator|->
name|mapFromSource
argument_list|(
name|sourceParent
argument_list|)
expr_stmt|;
if|if
condition|(
name|sourceParent
operator|!=
name|destParent
condition|)
name|parents
operator|<<
name|q
operator|->
name|mapFromSource
argument_list|(
name|destParent
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|layoutAboutToBeChanged
argument_list|(
name|parents
argument_list|)
emit|;
if|if
condition|(
name|persistent
operator|.
name|indexes
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|saved_persistent_indexes
operator|=
name|store_persistent_indexes
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_sourceRowsMoved
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|_q_sourceRowsMoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|sourceParent
parameter_list|,
name|int
comment|/* sourceStart */
parameter_list|,
name|int
comment|/* sourceEnd */
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|destParent
parameter_list|,
name|int
comment|/* dest */
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
comment|// Optimize: We only need to clear and update the persistent indexes which are children of
comment|// sourceParent or destParent
name|qDeleteAll
argument_list|(
name|source_index_mapping
argument_list|)
expr_stmt|;
name|source_index_mapping
operator|.
name|clear
argument_list|()
expr_stmt|;
name|update_persistent_indexes
argument_list|(
name|saved_persistent_indexes
argument_list|)
expr_stmt|;
name|saved_persistent_indexes
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|dynamic_sortfilter
operator|&&
name|update_source_sort_column
argument_list|()
condition|)
block|{
comment|//update_source_sort_column might have created wrong mapping so we have to clear it again
name|qDeleteAll
argument_list|(
name|source_index_mapping
argument_list|)
expr_stmt|;
name|source_index_mapping
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|parents
decl_stmt|;
name|parents
operator|<<
name|q
operator|->
name|mapFromSource
argument_list|(
name|sourceParent
argument_list|)
expr_stmt|;
if|if
condition|(
name|sourceParent
operator|!=
name|destParent
condition|)
name|parents
operator|<<
name|q
operator|->
name|mapFromSource
argument_list|(
name|destParent
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|layoutChanged
argument_list|(
name|parents
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_sourceColumnsAboutToBeInserted
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|_q_sourceColumnsAboutToBeInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|end
argument_list|)
expr_stmt|;
comment|//Force the creation of a mapping now, even if its empty.
comment|//We need it because the proxy can be acessed at the moment it emits columnsAboutToBeInserted in insert_source_items
if|if
condition|(
name|can_create_mapping
argument_list|(
name|source_parent
argument_list|)
condition|)
name|create_mapping
argument_list|(
name|source_parent
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_sourceColumnsInserted
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|_q_sourceColumnsInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|Q_Q
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|source_items_inserted
argument_list|(
name|source_parent
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
if|if
condition|(
name|source_parent
operator|.
name|isValid
argument_list|()
condition|)
return|return;
comment|//we sort according to the root column only
if|if
condition|(
name|source_sort_column
operator|==
operator|-
literal|1
condition|)
block|{
comment|//we update the source_sort_column depending on the proxy_sort_column
if|if
condition|(
name|update_source_sort_column
argument_list|()
operator|&&
name|dynamic_sortfilter
condition|)
name|sort
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|start
operator|<=
name|source_sort_column
condition|)
name|source_sort_column
operator|+=
name|end
operator|-
name|start
operator|+
literal|1
expr_stmt|;
name|proxy_sort_column
operator|=
name|q
operator|->
name|mapFromSource
argument_list|(
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
name|source_sort_column
argument_list|,
name|source_parent
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_sourceColumnsAboutToBeRemoved
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|_q_sourceColumnsAboutToBeRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|source_items_about_to_be_removed
argument_list|(
name|source_parent
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_sourceColumnsRemoved
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|_q_sourceColumnsRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|Q_Q
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|source_items_removed
argument_list|(
name|source_parent
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
if|if
condition|(
name|source_parent
operator|.
name|isValid
argument_list|()
condition|)
return|return;
comment|//we sort according to the root column only
if|if
condition|(
name|start
operator|<=
name|source_sort_column
condition|)
block|{
if|if
condition|(
name|end
operator|<
name|source_sort_column
condition|)
name|source_sort_column
operator|-=
name|end
operator|-
name|start
operator|+
literal|1
expr_stmt|;
else|else
name|source_sort_column
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|proxy_sort_column
operator|=
name|q
operator|->
name|mapFromSource
argument_list|(
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
name|source_sort_column
argument_list|,
name|source_parent
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_sourceColumnsAboutToBeMoved
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|_q_sourceColumnsAboutToBeMoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|sourceParent
parameter_list|,
name|int
comment|/* sourceStart */
parameter_list|,
name|int
comment|/* sourceEnd */
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|destParent
parameter_list|,
name|int
comment|/* dest */
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|saved_persistent_indexes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|parents
decl_stmt|;
name|parents
operator|<<
name|q
operator|->
name|mapFromSource
argument_list|(
name|sourceParent
argument_list|)
expr_stmt|;
if|if
condition|(
name|sourceParent
operator|!=
name|destParent
condition|)
name|parents
operator|<<
name|q
operator|->
name|mapFromSource
argument_list|(
name|destParent
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|layoutAboutToBeChanged
argument_list|(
name|parents
argument_list|)
emit|;
if|if
condition|(
name|persistent
operator|.
name|indexes
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|saved_persistent_indexes
operator|=
name|store_persistent_indexes
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_sourceColumnsMoved
name|void
name|QSortFilterProxyModelPrivate
operator|::
name|_q_sourceColumnsMoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|sourceParent
parameter_list|,
name|int
comment|/* sourceStart */
parameter_list|,
name|int
comment|/* sourceEnd */
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|destParent
parameter_list|,
name|int
comment|/* dest */
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|source_index_mapping
argument_list|)
expr_stmt|;
name|source_index_mapping
operator|.
name|clear
argument_list|()
expr_stmt|;
name|update_persistent_indexes
argument_list|(
name|saved_persistent_indexes
argument_list|)
expr_stmt|;
name|saved_persistent_indexes
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|dynamic_sortfilter
operator|&&
name|update_source_sort_column
argument_list|()
condition|)
block|{
name|qDeleteAll
argument_list|(
name|source_index_mapping
argument_list|)
expr_stmt|;
name|source_index_mapping
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|parents
decl_stmt|;
name|parents
operator|<<
name|q
operator|->
name|mapFromSource
argument_list|(
name|sourceParent
argument_list|)
expr_stmt|;
if|if
condition|(
name|sourceParent
operator|!=
name|destParent
condition|)
name|parents
operator|<<
name|q
operator|->
name|mapFromSource
argument_list|(
name|destParent
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|layoutChanged
argument_list|(
name|parents
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1     \class QSortFilterProxyModel     \inmodule QtCore     \brief The QSortFilterProxyModel class provides support for sorting and     filtering data passed between another model and a view.      \ingroup model-view      QSortFilterProxyModel can be used for sorting items, filtering out items,     or both. The model transforms the structure of a source model by mapping     the model indexes it supplies to new indexes, corresponding to different     locations, for views to use. This approach allows a given source model to     be restructured as far as views are concerned without requiring any     transformations on the underlying data, and without duplicating the data in     memory.      Let's assume that we want to sort and filter the items provided by a custom     model. The code to set up the model and the view, \e without sorting and     filtering, would look like this:      \snippet qsortfilterproxymodel-details/main.cpp 1      To add sorting and filtering support to \c MyItemModel, we need to create     a QSortFilterProxyModel, call setSourceModel() with the \c MyItemModel as     argument, and install the QSortFilterProxyModel on the view:      \snippet qsortfilterproxymodel-details/main.cpp 0     \snippet qsortfilterproxymodel-details/main.cpp 2      At this point, neither sorting nor filtering is enabled; the original data     is displayed in the view. Any changes made through the     QSortFilterProxyModel are applied to the original model.      The QSortFilterProxyModel acts as a wrapper for the original model. If you     need to convert source \l{QModelIndex}es to sorted/filtered model indexes     or vice versa, use mapToSource(), mapFromSource(), mapSelectionToSource(),     and mapSelectionFromSource().      \note By default, the model dynamically re-sorts and re-filters data     whenever the original model changes. This behavior can be changed by     setting the \l{QSortFilterProxyModel::dynamicSortFilter}{dynamicSortFilter}     property.      The \l{itemviews/basicsortfiltermodel}{Basic Sort/Filter Model} and     \l{itemviews/customsortfiltermodel}{Custom Sort/Filter Model} examples     illustrate how to use QSortFilterProxyModel to perform basic sorting and     filtering and how to subclass it to implement custom behavior.      \section1 Sorting      QTableView and QTreeView have a     \l{QTreeView::sortingEnabled}{sortingEnabled} property that controls     whether the user can sort the view by clicking the view's horizontal     header. For example:      \snippet qsortfilterproxymodel-details/main.cpp 3      When this feature is on (the default is off), clicking on a header section     sorts the items according to that column. By clicking repeatedly, the user     can alternate between ascending and descending order.      \image qsortfilterproxymodel-sorting.png A sorted QTreeView      Behind the scene, the view calls the sort() virtual function on the model     to reorder the data in the model. To make your data sortable, you can     either implement sort() in your model, or use a QSortFilterProxyModel to     wrap your model -- QSortFilterProxyModel provides a generic sort()     reimplementation that operates on the sortRole() (Qt::DisplayRole by     default) of the items and that understands several data types, including     \c int, QString, and QDateTime. For hierarchical models, sorting is applied     recursively to all child items. String comparisons are case sensitive by     default; this can be changed by setting the \l{QSortFilterProxyModel::}     {sortCaseSensitivity} property.      Custom sorting behavior is achieved by subclassing     QSortFilterProxyModel and reimplementing lessThan(), which is     used to compare items. For example:      \snippet ../widgets/itemviews/customsortfiltermodel/mysortfilterproxymodel.cpp 5      (This code snippet comes from the     \l{itemviews/customsortfiltermodel}{Custom Sort/Filter Model}     example.)      An alternative approach to sorting is to disable sorting on the view and to     impose a certain order to the user. This is done by explicitly calling     sort() with the desired column and order as arguments on the     QSortFilterProxyModel (or on the original model if it implements sort()).     For example:      \snippet qsortfilterproxymodel-details/main.cpp 4      QSortFilterProxyModel can be sorted by column -1, in which case it returns     to the sort order of the underlying source model.      \section1 Filtering      In addition to sorting, QSortFilterProxyModel can be used to hide items     that do not match a certain filter. The filter is specified using a QRegExp     object and is applied to the filterRole() (Qt::DisplayRole by default) of     each item, for a given column. The QRegExp object can be used to match a     regular expression, a wildcard pattern, or a fixed string. For example:      \snippet qsortfilterproxymodel-details/main.cpp 5      For hierarchical models, the filter is applied recursively to all children.     If a parent item doesn't match the filter, none of its children will be     shown.      A common use case is to let the user specify the filter regexp, wildcard     pattern, or fixed string in a QLineEdit and to connect the     \l{QLineEdit::textChanged()}{textChanged()} signal to setFilterRegExp(),     setFilterWildcard(), or setFilterFixedString() to reapply the filter.      Custom filtering behavior can be achieved by reimplementing the     filterAcceptsRow() and filterAcceptsColumn() functions. For     example (from the \l{itemviews/customsortfiltermodel}     {Custom Sort/Filter Model} example), the following implementation ignores     the \l{QSortFilterProxyModel::filterKeyColumn}{filterKeyColumn} property     and performs filtering on columns 0, 1, and 2:      \snippet ../widgets/itemviews/customsortfiltermodel/mysortfilterproxymodel.cpp 3      (This code snippet comes from the     \l{itemviews/customsortfiltermodel}{Custom Sort/Filter Model}     example.)      If you are working with large amounts of filtering and have to invoke     invalidateFilter() repeatedly, using reset() may be more efficient,     depending on the implementation of your model. However, reset() returns the     proxy model to its original state, losing selection information, and will     cause the proxy model to be repopulated.      \section1 Subclassing      Since QAbstractProxyModel and its subclasses are derived from     QAbstractItemModel, much of the same advice about subclassing normal models     also applies to proxy models. In addition, it is worth noting that many of     the default implementations of functions in this class are written so that     they call the equivalent functions in the relevant source model. This     simple proxying mechanism may need to be overridden for source models with     more complex behavior; for example, if the source model provides a custom     hasChildren() implementation, you should also provide one in the proxy     model.      \note Some general guidelines for subclassing models are available in the     \l{Model Subclassing Reference}.      \sa QAbstractProxyModel, QAbstractItemModel, {Model/View Programming},     {Basic Sort/Filter Model Example}, {Custom Sort/Filter Model Example}, QIdentityProxyModel */
end_comment
begin_comment
comment|/*!     Constructs a sorting filter model with the given \a parent. */
end_comment
begin_constructor
DECL|function|QSortFilterProxyModel
name|QSortFilterProxyModel
operator|::
name|QSortFilterProxyModel
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractProxyModel
argument_list|(
operator|*
operator|new
name|QSortFilterProxyModelPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|proxy_sort_column
operator|=
name|d
operator|->
name|source_sort_column
operator|=
operator|-
literal|1
expr_stmt|;
name|d
operator|->
name|sort_order
operator|=
name|Qt
operator|::
name|AscendingOrder
expr_stmt|;
name|d
operator|->
name|sort_casesensitivity
operator|=
name|Qt
operator|::
name|CaseSensitive
expr_stmt|;
name|d
operator|->
name|sort_role
operator|=
name|Qt
operator|::
name|DisplayRole
expr_stmt|;
name|d
operator|->
name|sort_localeaware
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|filter_column
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|filter_role
operator|=
name|Qt
operator|::
name|DisplayRole
expr_stmt|;
name|d
operator|->
name|dynamic_sortfilter
operator|=
literal|true
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|modelReset
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_clearMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys this sorting filter model. */
end_comment
begin_destructor
DECL|function|~QSortFilterProxyModel
name|QSortFilterProxyModel
operator|::
name|~
name|QSortFilterProxyModel
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|d
operator|->
name|source_index_mapping
argument_list|)
expr_stmt|;
name|d
operator|->
name|source_index_mapping
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|setSourceModel
name|void
name|QSortFilterProxyModel
operator|::
name|setSourceModel
parameter_list|(
name|QAbstractItemModel
modifier|*
name|sourceModel
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|beginResetModel
argument_list|()
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceDataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Orientation
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceHeaderDataChanged
argument_list|(
name|Qt
operator|::
name|Orientation
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceRowsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceRowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceColumnsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceColumnsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceRowsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceRowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceColumnsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceColumnsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceRowsAboutToBeMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceRowsMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsAboutToBeMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceColumnsAboutToBeMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceColumnsMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|,
name|QAbstractItemModel
operator|::
name|LayoutChangeHint
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceLayoutAboutToBeChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|,
name|QAbstractItemModel
operator|::
name|LayoutChangeHint
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|,
name|QAbstractItemModel
operator|::
name|LayoutChangeHint
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceLayoutChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|,
name|QAbstractItemModel
operator|::
name|LayoutChangeHint
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|modelAboutToBeReset
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceAboutToBeReset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|modelReset
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceReset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QAbstractProxyModel
operator|::
name|setSourceModel
argument_list|(
name|sourceModel
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceDataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Orientation
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceHeaderDataChanged
argument_list|(
name|Qt
operator|::
name|Orientation
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceRowsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceRowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceColumnsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceColumnsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceRowsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceRowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceColumnsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceColumnsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceRowsAboutToBeMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceRowsMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsAboutToBeMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceColumnsAboutToBeMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceColumnsMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|,
name|QAbstractItemModel
operator|::
name|LayoutChangeHint
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceLayoutAboutToBeChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|,
name|QAbstractItemModel
operator|::
name|LayoutChangeHint
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|,
name|QAbstractItemModel
operator|::
name|LayoutChangeHint
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceLayoutChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|,
name|QAbstractItemModel
operator|::
name|LayoutChangeHint
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|modelAboutToBeReset
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceAboutToBeReset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|modelReset
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sourceReset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|_q_clearMapping
argument_list|()
expr_stmt|;
name|endResetModel
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|update_source_sort_column
argument_list|()
operator|&&
name|d
operator|->
name|dynamic_sortfilter
condition|)
name|d
operator|->
name|sort
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|index
name|QModelIndex
name|QSortFilterProxyModel
operator|::
name|index
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|<
literal|0
operator|||
name|column
operator|<
literal|0
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|QModelIndex
name|source_parent
init|=
name|mapToSource
argument_list|(
name|parent
argument_list|)
decl_stmt|;
comment|// parent is already mapped at this point
name|IndexMap
operator|::
name|const_iterator
name|it
init|=
name|d
operator|->
name|create_mapping
argument_list|(
name|source_parent
argument_list|)
decl_stmt|;
comment|// but make sure that the children are mapped
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|->
name|source_rows
operator|.
name|count
argument_list|()
operator|<=
name|row
operator|||
name|it
operator|.
name|value
argument_list|()
operator|->
name|source_columns
operator|.
name|count
argument_list|()
operator|<=
name|column
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
return|return
name|d
operator|->
name|create_index
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|it
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|parent
name|QModelIndex
name|QSortFilterProxyModel
operator|::
name|parent
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|child
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|indexValid
argument_list|(
name|child
argument_list|)
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|IndexMap
operator|::
name|const_iterator
name|it
init|=
name|d
operator|->
name|index_to_iterator
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|it
operator|!=
name|d
operator|->
name|source_index_mapping
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QModelIndex
name|source_parent
init|=
name|it
operator|.
name|key
argument_list|()
decl_stmt|;
name|QModelIndex
name|proxy_parent
init|=
name|mapFromSource
argument_list|(
name|source_parent
argument_list|)
decl_stmt|;
return|return
name|proxy_parent
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|sibling
name|QModelIndex
name|QSortFilterProxyModel
operator|::
name|sibling
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|idx
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|indexValid
argument_list|(
name|idx
argument_list|)
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
specifier|const
name|IndexMap
operator|::
name|const_iterator
name|it
init|=
name|d
operator|->
name|index_to_iterator
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|->
name|source_rows
operator|.
name|count
argument_list|()
operator|<=
name|row
operator|||
name|it
operator|.
name|value
argument_list|()
operator|->
name|source_columns
operator|.
name|count
argument_list|()
operator|<=
name|column
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
return|return
name|d
operator|->
name|create_index
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|it
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|rowCount
name|int
name|QSortFilterProxyModel
operator|::
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|QModelIndex
name|source_parent
init|=
name|mapToSource
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|source_parent
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|0
return|;
name|IndexMap
operator|::
name|const_iterator
name|it
init|=
name|d
operator|->
name|create_mapping
argument_list|(
name|source_parent
argument_list|)
decl_stmt|;
return|return
name|it
operator|.
name|value
argument_list|()
operator|->
name|source_rows
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|columnCount
name|int
name|QSortFilterProxyModel
operator|::
name|columnCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|QModelIndex
name|source_parent
init|=
name|mapToSource
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|source_parent
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|0
return|;
name|IndexMap
operator|::
name|const_iterator
name|it
init|=
name|d
operator|->
name|create_mapping
argument_list|(
name|source_parent
argument_list|)
decl_stmt|;
return|return
name|it
operator|.
name|value
argument_list|()
operator|->
name|source_columns
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|hasChildren
name|bool
name|QSortFilterProxyModel
operator|::
name|hasChildren
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|QModelIndex
name|source_parent
init|=
name|mapToSource
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|source_parent
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|d
operator|->
name|model
operator|->
name|hasChildren
argument_list|(
name|source_parent
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|model
operator|->
name|canFetchMore
argument_list|(
name|source_parent
argument_list|)
condition|)
return|return
literal|true
return|;
comment|//we assume we might have children that can be fetched
name|QSortFilterProxyModelPrivate
operator|::
name|Mapping
modifier|*
name|m
init|=
name|d
operator|->
name|create_mapping
argument_list|(
name|source_parent
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
return|return
name|m
operator|->
name|source_rows
operator|.
name|count
argument_list|()
operator|!=
literal|0
operator|&&
name|m
operator|->
name|source_columns
operator|.
name|count
argument_list|()
operator|!=
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|data
name|QVariant
name|QSortFilterProxyModel
operator|::
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|QModelIndex
name|source_index
init|=
name|mapToSource
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|source_index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QVariant
argument_list|()
return|;
return|return
name|d
operator|->
name|model
operator|->
name|data
argument_list|(
name|source_index
argument_list|,
name|role
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|setData
name|bool
name|QSortFilterProxyModel
operator|::
name|setData
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|role
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|QModelIndex
name|source_index
init|=
name|mapToSource
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|source_index
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
name|d
operator|->
name|model
operator|->
name|setData
argument_list|(
name|source_index
argument_list|,
name|value
argument_list|,
name|role
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|headerData
name|QVariant
name|QSortFilterProxyModel
operator|::
name|headerData
parameter_list|(
name|int
name|section
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|IndexMap
operator|::
name|const_iterator
name|it
init|=
name|d
operator|->
name|create_mapping
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|->
name|source_rows
operator|.
name|count
argument_list|()
operator|*
name|it
operator|.
name|value
argument_list|()
operator|->
name|source_columns
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
return|return
name|QAbstractProxyModel
operator|::
name|headerData
argument_list|(
name|section
argument_list|,
name|orientation
argument_list|,
name|role
argument_list|)
return|;
name|int
name|source_section
decl_stmt|;
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
condition|)
block|{
if|if
condition|(
name|section
operator|<
literal|0
operator|||
name|section
operator|>=
name|it
operator|.
name|value
argument_list|()
operator|->
name|source_rows
operator|.
name|count
argument_list|()
condition|)
return|return
name|QVariant
argument_list|()
return|;
name|source_section
operator|=
name|it
operator|.
name|value
argument_list|()
operator|->
name|source_rows
operator|.
name|at
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|section
operator|<
literal|0
operator|||
name|section
operator|>=
name|it
operator|.
name|value
argument_list|()
operator|->
name|source_columns
operator|.
name|count
argument_list|()
condition|)
return|return
name|QVariant
argument_list|()
return|;
name|source_section
operator|=
name|it
operator|.
name|value
argument_list|()
operator|->
name|source_columns
operator|.
name|at
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
return|return
name|d
operator|->
name|model
operator|->
name|headerData
argument_list|(
name|source_section
argument_list|,
name|orientation
argument_list|,
name|role
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|setHeaderData
name|bool
name|QSortFilterProxyModel
operator|::
name|setHeaderData
parameter_list|(
name|int
name|section
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|role
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|IndexMap
operator|::
name|const_iterator
name|it
init|=
name|d
operator|->
name|create_mapping
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|->
name|source_rows
operator|.
name|count
argument_list|()
operator|*
name|it
operator|.
name|value
argument_list|()
operator|->
name|source_columns
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
return|return
name|QAbstractProxyModel
operator|::
name|setHeaderData
argument_list|(
name|section
argument_list|,
name|orientation
argument_list|,
name|value
argument_list|,
name|role
argument_list|)
return|;
name|int
name|source_section
decl_stmt|;
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
condition|)
block|{
if|if
condition|(
name|section
operator|<
literal|0
operator|||
name|section
operator|>=
name|it
operator|.
name|value
argument_list|()
operator|->
name|source_rows
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
name|source_section
operator|=
name|it
operator|.
name|value
argument_list|()
operator|->
name|source_rows
operator|.
name|at
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|section
operator|<
literal|0
operator|||
name|section
operator|>=
name|it
operator|.
name|value
argument_list|()
operator|->
name|source_columns
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
name|source_section
operator|=
name|it
operator|.
name|value
argument_list|()
operator|->
name|source_columns
operator|.
name|at
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
return|return
name|d
operator|->
name|model
operator|->
name|setHeaderData
argument_list|(
name|source_section
argument_list|,
name|orientation
argument_list|,
name|value
argument_list|,
name|role
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|mimeData
name|QMimeData
modifier|*
name|QSortFilterProxyModel
operator|::
name|mimeData
parameter_list|(
specifier|const
name|QModelIndexList
modifier|&
name|indexes
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|QModelIndexList
name|source_indexes
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|source_indexes
operator|<<
name|mapToSource
argument_list|(
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|mimeData
argument_list|(
name|source_indexes
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|mimeTypes
name|QStringList
name|QSortFilterProxyModel
operator|::
name|mimeTypes
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|mimeTypes
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|supportedDropActions
name|Qt
operator|::
name|DropActions
name|QSortFilterProxyModel
operator|::
name|supportedDropActions
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|supportedDropActions
argument_list|()
return|;
block|}
end_function
begin_comment
comment|// Qt6: remove unnecessary reimplementation
end_comment
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|dropMimeData
name|bool
name|QSortFilterProxyModel
operator|::
name|dropMimeData
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|DropAction
name|action
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
return|return
name|QAbstractProxyModel
operator|::
name|dropMimeData
argument_list|(
name|data
argument_list|,
name|action
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|parent
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|insertRows
name|bool
name|QSortFilterProxyModel
operator|::
name|insertRows
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|<
literal|0
operator|||
name|count
operator|<=
literal|0
condition|)
return|return
literal|false
return|;
name|QModelIndex
name|source_parent
init|=
name|mapToSource
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|source_parent
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|QSortFilterProxyModelPrivate
operator|::
name|Mapping
modifier|*
name|m
init|=
name|d
operator|->
name|create_mapping
argument_list|(
name|source_parent
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|>
name|m
operator|->
name|source_rows
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
name|int
name|source_row
init|=
operator|(
name|row
operator|>=
name|m
operator|->
name|source_rows
operator|.
name|count
argument_list|()
condition|?
name|m
operator|->
name|source_rows
operator|.
name|count
argument_list|()
else|:
name|m
operator|->
name|source_rows
operator|.
name|at
argument_list|(
name|row
argument_list|)
operator|)
decl_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|insertRows
argument_list|(
name|source_row
argument_list|,
name|count
argument_list|,
name|source_parent
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|insertColumns
name|bool
name|QSortFilterProxyModel
operator|::
name|insertColumns
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|column
operator|<
literal|0
operator|||
name|count
operator|<=
literal|0
condition|)
return|return
literal|false
return|;
name|QModelIndex
name|source_parent
init|=
name|mapToSource
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|source_parent
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|QSortFilterProxyModelPrivate
operator|::
name|Mapping
modifier|*
name|m
init|=
name|d
operator|->
name|create_mapping
argument_list|(
name|source_parent
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|>
name|m
operator|->
name|source_columns
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
name|int
name|source_column
init|=
operator|(
name|column
operator|>=
name|m
operator|->
name|source_columns
operator|.
name|count
argument_list|()
condition|?
name|m
operator|->
name|source_columns
operator|.
name|count
argument_list|()
else|:
name|m
operator|->
name|source_columns
operator|.
name|at
argument_list|(
name|column
argument_list|)
operator|)
decl_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|insertColumns
argument_list|(
name|source_column
argument_list|,
name|count
argument_list|,
name|source_parent
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|removeRows
name|bool
name|QSortFilterProxyModel
operator|::
name|removeRows
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|<
literal|0
operator|||
name|count
operator|<=
literal|0
condition|)
return|return
literal|false
return|;
name|QModelIndex
name|source_parent
init|=
name|mapToSource
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|source_parent
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|QSortFilterProxyModelPrivate
operator|::
name|Mapping
modifier|*
name|m
init|=
name|d
operator|->
name|create_mapping
argument_list|(
name|source_parent
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|+
name|count
operator|>
name|m
operator|->
name|source_rows
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|(
name|count
operator|==
literal|1
operator|)
operator|||
operator|(
operator|(
name|d
operator|->
name|source_sort_column
operator|<
literal|0
operator|)
operator|&&
operator|(
name|m
operator|->
name|proxy_rows
operator|.
name|count
argument_list|()
operator|==
name|m
operator|->
name|source_rows
operator|.
name|count
argument_list|()
operator|)
operator|)
condition|)
block|{
name|int
name|source_row
init|=
name|m
operator|->
name|source_rows
operator|.
name|at
argument_list|(
name|row
argument_list|)
decl_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|removeRows
argument_list|(
name|source_row
argument_list|,
name|count
argument_list|,
name|source_parent
argument_list|)
return|;
block|}
comment|// remove corresponding source intervals
comment|// ### if this proves to be slow, we can switch to single-row removal
name|QVector
argument_list|<
name|int
argument_list|>
name|rows
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|row
init|;
name|i
operator|<
name|row
operator|+
name|count
condition|;
operator|++
name|i
control|)
name|rows
operator|.
name|append
argument_list|(
name|m
operator|->
name|source_rows
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|std
operator|::
name|sort
argument_list|(
name|rows
operator|.
name|begin
argument_list|()
argument_list|,
name|rows
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|rows
operator|.
name|count
argument_list|()
operator|-
literal|1
decl_stmt|;
name|bool
name|ok
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
specifier|const
name|int
name|source_end
init|=
name|rows
operator|.
name|at
argument_list|(
name|pos
operator|--
argument_list|)
decl_stmt|;
name|int
name|source_start
init|=
name|source_end
decl_stmt|;
while|while
condition|(
operator|(
name|pos
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|rows
operator|.
name|at
argument_list|(
name|pos
argument_list|)
operator|==
operator|(
name|source_start
operator|-
literal|1
operator|)
operator|)
condition|)
block|{
operator|--
name|source_start
expr_stmt|;
operator|--
name|pos
expr_stmt|;
block|}
name|ok
operator|=
name|ok
operator|&&
name|d
operator|->
name|model
operator|->
name|removeRows
argument_list|(
name|source_start
argument_list|,
name|source_end
operator|-
name|source_start
operator|+
literal|1
argument_list|,
name|source_parent
argument_list|)
expr_stmt|;
block|}
return|return
name|ok
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|removeColumns
name|bool
name|QSortFilterProxyModel
operator|::
name|removeColumns
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|column
operator|<
literal|0
operator|||
name|count
operator|<=
literal|0
condition|)
return|return
literal|false
return|;
name|QModelIndex
name|source_parent
init|=
name|mapToSource
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|source_parent
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|QSortFilterProxyModelPrivate
operator|::
name|Mapping
modifier|*
name|m
init|=
name|d
operator|->
name|create_mapping
argument_list|(
name|source_parent
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|+
name|count
operator|>
name|m
operator|->
name|source_columns
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|(
name|count
operator|==
literal|1
operator|)
operator|||
operator|(
name|m
operator|->
name|proxy_columns
operator|.
name|count
argument_list|()
operator|==
name|m
operator|->
name|source_columns
operator|.
name|count
argument_list|()
operator|)
condition|)
block|{
name|int
name|source_column
init|=
name|m
operator|->
name|source_columns
operator|.
name|at
argument_list|(
name|column
argument_list|)
decl_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|removeColumns
argument_list|(
name|source_column
argument_list|,
name|count
argument_list|,
name|source_parent
argument_list|)
return|;
block|}
comment|// remove corresponding source intervals
name|QVector
argument_list|<
name|int
argument_list|>
name|columns
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|column
init|;
name|i
operator|<
name|column
operator|+
name|count
condition|;
operator|++
name|i
control|)
name|columns
operator|.
name|append
argument_list|(
name|m
operator|->
name|source_columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|columns
operator|.
name|count
argument_list|()
operator|-
literal|1
decl_stmt|;
name|bool
name|ok
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
specifier|const
name|int
name|source_end
init|=
name|columns
operator|.
name|at
argument_list|(
name|pos
operator|--
argument_list|)
decl_stmt|;
name|int
name|source_start
init|=
name|source_end
decl_stmt|;
while|while
condition|(
operator|(
name|pos
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|columns
operator|.
name|at
argument_list|(
name|pos
argument_list|)
operator|==
operator|(
name|source_start
operator|-
literal|1
operator|)
operator|)
condition|)
block|{
operator|--
name|source_start
expr_stmt|;
operator|--
name|pos
expr_stmt|;
block|}
name|ok
operator|=
name|ok
operator|&&
name|d
operator|->
name|model
operator|->
name|removeColumns
argument_list|(
name|source_start
argument_list|,
name|source_end
operator|-
name|source_start
operator|+
literal|1
argument_list|,
name|source_parent
argument_list|)
expr_stmt|;
block|}
return|return
name|ok
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|fetchMore
name|void
name|QSortFilterProxyModel
operator|::
name|fetchMore
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|QModelIndex
name|source_parent
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|indexValid
argument_list|(
name|parent
argument_list|)
condition|)
name|source_parent
operator|=
name|mapToSource
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|d
operator|->
name|model
operator|->
name|fetchMore
argument_list|(
name|source_parent
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|canFetchMore
name|bool
name|QSortFilterProxyModel
operator|::
name|canFetchMore
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|QModelIndex
name|source_parent
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|indexValid
argument_list|(
name|parent
argument_list|)
condition|)
name|source_parent
operator|=
name|mapToSource
argument_list|(
name|parent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|canFetchMore
argument_list|(
name|source_parent
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|flags
name|Qt
operator|::
name|ItemFlags
name|QSortFilterProxyModel
operator|::
name|flags
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|QModelIndex
name|source_index
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|indexValid
argument_list|(
name|index
argument_list|)
condition|)
name|source_index
operator|=
name|mapToSource
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|flags
argument_list|(
name|source_index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|buddy
name|QModelIndex
name|QSortFilterProxyModel
operator|::
name|buddy
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|indexValid
argument_list|(
name|index
argument_list|)
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|QModelIndex
name|source_index
init|=
name|mapToSource
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|QModelIndex
name|source_buddy
init|=
name|d
operator|->
name|model
operator|->
name|buddy
argument_list|(
name|source_index
argument_list|)
decl_stmt|;
if|if
condition|(
name|source_index
operator|==
name|source_buddy
condition|)
return|return
name|index
return|;
return|return
name|mapFromSource
argument_list|(
name|source_buddy
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|match
name|QModelIndexList
name|QSortFilterProxyModel
operator|::
name|match
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|start
parameter_list|,
name|int
name|role
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|hits
parameter_list|,
name|Qt
operator|::
name|MatchFlags
name|flags
parameter_list|)
specifier|const
block|{
return|return
name|QAbstractProxyModel
operator|::
name|match
argument_list|(
name|start
argument_list|,
name|role
argument_list|,
name|value
argument_list|,
name|hits
argument_list|,
name|flags
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|span
name|QSize
name|QSortFilterProxyModel
operator|::
name|span
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|QModelIndex
name|source_index
init|=
name|mapToSource
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|source_index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QSize
argument_list|()
return|;
return|return
name|d
operator|->
name|model
operator|->
name|span
argument_list|(
name|source_index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|sort
name|void
name|QSortFilterProxyModel
operator|::
name|sort
parameter_list|(
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|dynamic_sortfilter
operator|&&
name|d
operator|->
name|proxy_sort_column
operator|==
name|column
operator|&&
name|d
operator|->
name|sort_order
operator|==
name|order
condition|)
return|return;
name|d
operator|->
name|sort_order
operator|=
name|order
expr_stmt|;
name|d
operator|->
name|proxy_sort_column
operator|=
name|column
expr_stmt|;
name|d
operator|->
name|update_source_sort_column
argument_list|()
expr_stmt|;
name|d
operator|->
name|sort
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5     \brief the column currently used for sorting      This returns the most recently used sort column. */
end_comment
begin_function
DECL|function|sortColumn
name|int
name|QSortFilterProxyModel
operator|::
name|sortColumn
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|proxy_sort_column
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5     \brief the order currently used for sorting      This returns the most recently used sort order. */
end_comment
begin_function
DECL|function|sortOrder
name|Qt
operator|::
name|SortOrder
name|QSortFilterProxyModel
operator|::
name|sortOrder
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|sort_order
return|;
block|}
end_function
begin_comment
comment|/*!     \property QSortFilterProxyModel::filterRegExp     \brief the QRegExp used to filter the contents of the source model      Setting this property overwrites the current     \l{QSortFilterProxyModel::filterCaseSensitivity}{filterCaseSensitivity}.     By default, the QRegExp is an empty string matching all contents.      If no QRegExp or an empty string is set, everything in the source model     will be accepted.      \sa filterCaseSensitivity, setFilterWildcard(), setFilterFixedString() */
end_comment
begin_function
DECL|function|filterRegExp
name|QRegExp
name|QSortFilterProxyModel
operator|::
name|filterRegExp
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|filter_regexp
return|;
block|}
end_function
begin_function
DECL|function|setFilterRegExp
name|void
name|QSortFilterProxyModel
operator|::
name|setFilterRegExp
parameter_list|(
specifier|const
name|QRegExp
modifier|&
name|regExp
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|filter_regexp
operator|=
name|regExp
expr_stmt|;
name|d
operator|->
name|filter_changed
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QSortFilterProxyModel::filterKeyColumn     \brief the column where the key used to filter the contents of the     source model is read from.      The default value is 0. If the value is -1, the keys will be read     from all columns. */
end_comment
begin_function
DECL|function|filterKeyColumn
name|int
name|QSortFilterProxyModel
operator|::
name|filterKeyColumn
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|filter_column
return|;
block|}
end_function
begin_function
DECL|function|setFilterKeyColumn
name|void
name|QSortFilterProxyModel
operator|::
name|setFilterKeyColumn
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|filter_column
operator|=
name|column
expr_stmt|;
name|d
operator|->
name|filter_changed
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QSortFilterProxyModel::filterCaseSensitivity      \brief the case sensitivity of the QRegExp pattern used to filter the     contents of the source model      By default, the filter is case sensitive.      \sa filterRegExp, sortCaseSensitivity */
end_comment
begin_function
DECL|function|filterCaseSensitivity
name|Qt
operator|::
name|CaseSensitivity
name|QSortFilterProxyModel
operator|::
name|filterCaseSensitivity
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|filter_regexp
operator|.
name|caseSensitivity
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setFilterCaseSensitivity
name|void
name|QSortFilterProxyModel
operator|::
name|setFilterCaseSensitivity
parameter_list|(
name|Qt
operator|::
name|CaseSensitivity
name|cs
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|cs
operator|==
name|d
operator|->
name|filter_regexp
operator|.
name|caseSensitivity
argument_list|()
condition|)
return|return;
name|d
operator|->
name|filter_regexp
operator|.
name|setCaseSensitivity
argument_list|(
name|cs
argument_list|)
expr_stmt|;
name|d
operator|->
name|filter_changed
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2     \property QSortFilterProxyModel::sortCaseSensitivity     \brief the case sensitivity setting used for comparing strings when sorting      By default, sorting is case sensitive.      \sa filterCaseSensitivity, lessThan() */
end_comment
begin_function
DECL|function|sortCaseSensitivity
name|Qt
operator|::
name|CaseSensitivity
name|QSortFilterProxyModel
operator|::
name|sortCaseSensitivity
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|sort_casesensitivity
return|;
block|}
end_function
begin_function
DECL|function|setSortCaseSensitivity
name|void
name|QSortFilterProxyModel
operator|::
name|setSortCaseSensitivity
parameter_list|(
name|Qt
operator|::
name|CaseSensitivity
name|cs
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|sort_casesensitivity
operator|==
name|cs
condition|)
return|return;
name|d
operator|->
name|sort_casesensitivity
operator|=
name|cs
expr_stmt|;
name|d
operator|->
name|sort
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.3     \property QSortFilterProxyModel::isSortLocaleAware     \brief the local aware setting used for comparing strings when sorting      By default, sorting is not local aware.      \sa sortCaseSensitivity, lessThan() */
end_comment
begin_function
DECL|function|isSortLocaleAware
name|bool
name|QSortFilterProxyModel
operator|::
name|isSortLocaleAware
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|sort_localeaware
return|;
block|}
end_function
begin_function
DECL|function|setSortLocaleAware
name|void
name|QSortFilterProxyModel
operator|::
name|setSortLocaleAware
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|sort_localeaware
operator|==
name|on
condition|)
return|return;
name|d
operator|->
name|sort_localeaware
operator|=
name|on
expr_stmt|;
name|d
operator|->
name|sort
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the regular expression used to filter the contents     of the source model to \a pattern.      \sa setFilterCaseSensitivity(), setFilterWildcard(), setFilterFixedString(), filterRegExp() */
end_comment
begin_function
DECL|function|setFilterRegExp
name|void
name|QSortFilterProxyModel
operator|::
name|setFilterRegExp
parameter_list|(
specifier|const
name|QString
modifier|&
name|pattern
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|filter_regexp
operator|.
name|setPatternSyntax
argument_list|(
name|QRegExp
operator|::
name|RegExp
argument_list|)
expr_stmt|;
name|d
operator|->
name|filter_regexp
operator|.
name|setPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|d
operator|->
name|filter_changed
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the wildcard expression used to filter the contents     of the source model to the given \a pattern.      \sa setFilterCaseSensitivity(), setFilterRegExp(), setFilterFixedString(), filterRegExp() */
end_comment
begin_function
DECL|function|setFilterWildcard
name|void
name|QSortFilterProxyModel
operator|::
name|setFilterWildcard
parameter_list|(
specifier|const
name|QString
modifier|&
name|pattern
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|filter_regexp
operator|.
name|setPatternSyntax
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
expr_stmt|;
name|d
operator|->
name|filter_regexp
operator|.
name|setPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|d
operator|->
name|filter_changed
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the fixed string used to filter the contents     of the source model to the given \a pattern.      \sa setFilterCaseSensitivity(), setFilterRegExp(), setFilterWildcard(), filterRegExp() */
end_comment
begin_function
DECL|function|setFilterFixedString
name|void
name|QSortFilterProxyModel
operator|::
name|setFilterFixedString
parameter_list|(
specifier|const
name|QString
modifier|&
name|pattern
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|filter_regexp
operator|.
name|setPatternSyntax
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
expr_stmt|;
name|d
operator|->
name|filter_regexp
operator|.
name|setPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|d
operator|->
name|filter_changed
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2     \property QSortFilterProxyModel::dynamicSortFilter     \brief whether the proxy model is dynamically sorted and filtered     whenever the contents of the source model change      Note that you should not update the source model through the proxy     model when dynamicSortFilter is true. For instance, if you set the     proxy model on a QComboBox, then using functions that update the     model, e.g., \l{QComboBox::}{addItem()}, will not work as     expected. An alternative is to set dynamicSortFilter to false and     call \l{QSortFilterProxyModel::}{sort()} after adding items to the     QComboBox.      The default value is true. */
end_comment
begin_function
DECL|function|dynamicSortFilter
name|bool
name|QSortFilterProxyModel
operator|::
name|dynamicSortFilter
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|dynamic_sortfilter
return|;
block|}
end_function
begin_function
DECL|function|setDynamicSortFilter
name|void
name|QSortFilterProxyModel
operator|::
name|setDynamicSortFilter
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|dynamic_sortfilter
operator|=
name|enable
expr_stmt|;
if|if
condition|(
name|enable
condition|)
name|d
operator|->
name|sort
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2     \property QSortFilterProxyModel::sortRole     \brief the item role that is used to query the source model's data when sorting items      The default value is Qt::DisplayRole.      \sa lessThan() */
end_comment
begin_function
DECL|function|sortRole
name|int
name|QSortFilterProxyModel
operator|::
name|sortRole
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|sort_role
return|;
block|}
end_function
begin_function
DECL|function|setSortRole
name|void
name|QSortFilterProxyModel
operator|::
name|setSortRole
parameter_list|(
name|int
name|role
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|sort_role
operator|==
name|role
condition|)
return|return;
name|d
operator|->
name|sort_role
operator|=
name|role
expr_stmt|;
name|d
operator|->
name|sort
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2     \property QSortFilterProxyModel::filterRole     \brief the item role that is used to query the source model's data when filtering items      The default value is Qt::DisplayRole.      \sa filterAcceptsRow() */
end_comment
begin_function
DECL|function|filterRole
name|int
name|QSortFilterProxyModel
operator|::
name|filterRole
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|filter_role
return|;
block|}
end_function
begin_function
DECL|function|setFilterRole
name|void
name|QSortFilterProxyModel
operator|::
name|setFilterRole
parameter_list|(
name|int
name|role
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|filter_role
operator|==
name|role
condition|)
return|return;
name|d
operator|->
name|filter_role
operator|=
name|role
expr_stmt|;
name|d
operator|->
name|filter_changed
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \obsolete      This function is obsolete. Use invalidate() instead. */
end_comment
begin_function
DECL|function|clear
name|void
name|QSortFilterProxyModel
operator|::
name|clear
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
emit|emit
name|layoutAboutToBeChanged
argument_list|()
emit|;
name|d
operator|->
name|_q_clearMapping
argument_list|()
expr_stmt|;
emit|emit
name|layoutChanged
argument_list|()
emit|;
block|}
end_function
begin_comment
comment|/*!    \since 4.3      Invalidates the current sorting and filtering.      \sa invalidateFilter() */
end_comment
begin_function
DECL|function|invalidate
name|void
name|QSortFilterProxyModel
operator|::
name|invalidate
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
emit|emit
name|layoutAboutToBeChanged
argument_list|()
emit|;
name|d
operator|->
name|_q_clearMapping
argument_list|()
expr_stmt|;
emit|emit
name|layoutChanged
argument_list|()
emit|;
block|}
end_function
begin_comment
comment|/*!    \obsolete      This function is obsolete. Use invalidateFilter() instead. */
end_comment
begin_function
DECL|function|filterChanged
name|void
name|QSortFilterProxyModel
operator|::
name|filterChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|filter_changed
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!    \since 4.3     Invalidates the current filtering.     This function should be called if you are implementing custom filtering    (e.g. filterAcceptsRow()), and your filter parameters have changed.     \sa invalidate() */
end_comment
begin_function
DECL|function|invalidateFilter
name|void
name|QSortFilterProxyModel
operator|::
name|invalidateFilter
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|filter_changed
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the value of the item referred to by the given     index \a left is less than the value of the item referred to by     the given index \a right, otherwise returns \c false.      This function is used as the< operator when sorting, and handles     the following QVariant types:      \list     \li QMetaType::Int     \li QMetaType::UInt     \li QMetaType::LongLong     \li QMetaType::ULongLong     \li QMetaType::Float     \li QMetaType::Double     \li QMetaType::QChar     \li QMetaType::QDate     \li QMetaType::QTime     \li QMetaType::QDateTime     \li QMetaType::QString     \endlist      Any other type will be converted to a QString using     QVariant::toString().      Comparison of \l{QString}s is case sensitive by default; this can     be changed using the \l {QSortFilterProxyModel::sortCaseSensitivity}     {sortCaseSensitivity} property.      By default, the Qt::DisplayRole associated with the     \l{QModelIndex}es is used for comparisons. This can be changed by     setting the \l {QSortFilterProxyModel::sortRole} {sortRole} property.      \note The indices passed in correspond to the source model.      \sa sortRole, sortCaseSensitivity, dynamicSortFilter */
end_comment
begin_function
DECL|function|lessThan
name|bool
name|QSortFilterProxyModel
operator|::
name|lessThan
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|left
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|right
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
name|QVariant
name|l
init|=
operator|(
name|left
operator|.
name|model
argument_list|()
condition|?
name|left
operator|.
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|left
argument_list|,
name|d
operator|->
name|sort_role
argument_list|)
else|:
name|QVariant
argument_list|()
operator|)
decl_stmt|;
name|QVariant
name|r
init|=
operator|(
name|right
operator|.
name|model
argument_list|()
condition|?
name|right
operator|.
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|right
argument_list|,
name|d
operator|->
name|sort_role
argument_list|)
else|:
name|QVariant
argument_list|()
operator|)
decl_stmt|;
switch|switch
condition|(
name|l
operator|.
name|userType
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Invalid
case|:
return|return
operator|(
name|r
operator|.
name|type
argument_list|()
operator|!=
name|QVariant
operator|::
name|Invalid
operator|)
return|;
case|case
name|QVariant
operator|::
name|Int
case|:
return|return
name|l
operator|.
name|toInt
argument_list|()
operator|<
name|r
operator|.
name|toInt
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|UInt
case|:
return|return
name|l
operator|.
name|toUInt
argument_list|()
operator|<
name|r
operator|.
name|toUInt
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|LongLong
case|:
return|return
name|l
operator|.
name|toLongLong
argument_list|()
operator|<
name|r
operator|.
name|toLongLong
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|ULongLong
case|:
return|return
name|l
operator|.
name|toULongLong
argument_list|()
operator|<
name|r
operator|.
name|toULongLong
argument_list|()
return|;
case|case
name|QMetaType
operator|::
name|Float
case|:
return|return
name|l
operator|.
name|toFloat
argument_list|()
operator|<
name|r
operator|.
name|toFloat
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|Double
case|:
return|return
name|l
operator|.
name|toDouble
argument_list|()
operator|<
name|r
operator|.
name|toDouble
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|Char
case|:
return|return
name|l
operator|.
name|toChar
argument_list|()
operator|<
name|r
operator|.
name|toChar
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|Date
case|:
return|return
name|l
operator|.
name|toDate
argument_list|()
operator|<
name|r
operator|.
name|toDate
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|Time
case|:
return|return
name|l
operator|.
name|toTime
argument_list|()
operator|<
name|r
operator|.
name|toTime
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|DateTime
case|:
return|return
name|l
operator|.
name|toDateTime
argument_list|()
operator|<
name|r
operator|.
name|toDateTime
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|String
case|:
default|default:
if|if
condition|(
name|d
operator|->
name|sort_localeaware
condition|)
return|return
name|l
operator|.
name|toString
argument_list|()
operator|.
name|localeAwareCompare
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
operator|<
literal|0
return|;
else|else
return|return
name|l
operator|.
name|toString
argument_list|()
operator|.
name|compare
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|,
name|d
operator|->
name|sort_casesensitivity
argument_list|)
operator|<
literal|0
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the item in the row indicated by the given \a source_row     and \a source_parent should be included in the model; otherwise returns     false.      The default implementation returns \c true if the value held by the relevant item     matches the filter string, wildcard string or regular expression.      \note By default, the Qt::DisplayRole is used to determine if the row     should be accepted or not. This can be changed by setting the     \l{QSortFilterProxyModel::filterRole}{filterRole} property.      \sa filterAcceptsColumn(), setFilterFixedString(), setFilterRegExp(), setFilterWildcard() */
end_comment
begin_function
DECL|function|filterAcceptsRow
name|bool
name|QSortFilterProxyModel
operator|::
name|filterAcceptsRow
parameter_list|(
name|int
name|source_row
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|filter_regexp
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|d
operator|->
name|filter_column
operator|==
operator|-
literal|1
condition|)
block|{
name|int
name|column_count
init|=
name|d
operator|->
name|model
operator|->
name|columnCount
argument_list|(
name|source_parent
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|column_count
condition|;
operator|++
name|column
control|)
block|{
name|QModelIndex
name|source_index
init|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|source_row
argument_list|,
name|column
argument_list|,
name|source_parent
argument_list|)
decl_stmt|;
name|QString
name|key
init|=
name|d
operator|->
name|model
operator|->
name|data
argument_list|(
name|source_index
argument_list|,
name|d
operator|->
name|filter_role
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|contains
argument_list|(
name|d
operator|->
name|filter_regexp
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
name|QModelIndex
name|source_index
init|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|source_row
argument_list|,
name|d
operator|->
name|filter_column
argument_list|,
name|source_parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|source_index
operator|.
name|isValid
argument_list|()
condition|)
comment|// the column may not exist
return|return
literal|true
return|;
name|QString
name|key
init|=
name|d
operator|->
name|model
operator|->
name|data
argument_list|(
name|source_index
argument_list|,
name|d
operator|->
name|filter_role
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|key
operator|.
name|contains
argument_list|(
name|d
operator|->
name|filter_regexp
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the item in the column indicated by the given \a source_column     and \a source_parent should be included in the model; otherwise returns \c false.      The default implementation returns \c true if the value held by the relevant item     matches the filter string, wildcard string or regular expression.      \note By default, the Qt::DisplayRole is used to determine if the row     should be accepted or not. This can be changed by setting the \l     filterRole property.      \sa filterAcceptsRow(), setFilterFixedString(), setFilterRegExp(), setFilterWildcard() */
end_comment
begin_function
DECL|function|filterAcceptsColumn
name|bool
name|QSortFilterProxyModel
operator|::
name|filterAcceptsColumn
parameter_list|(
name|int
name|source_column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|source_column
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|source_parent
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!    Returns the source model index corresponding to the given \a    proxyIndex from the sorting filter model.     \sa mapFromSource() */
end_comment
begin_function
DECL|function|mapToSource
name|QModelIndex
name|QSortFilterProxyModel
operator|::
name|mapToSource
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|proxyIndex
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|proxy_to_source
argument_list|(
name|proxyIndex
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the model index in the QSortFilterProxyModel given the \a     sourceIndex from the source model.      \sa mapToSource() */
end_comment
begin_function
DECL|function|mapFromSource
name|QModelIndex
name|QSortFilterProxyModel
operator|::
name|mapFromSource
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|sourceIndex
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSortFilterProxyModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|source_to_proxy
argument_list|(
name|sourceIndex
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|mapSelectionToSource
name|QItemSelection
name|QSortFilterProxyModel
operator|::
name|mapSelectionToSource
parameter_list|(
specifier|const
name|QItemSelection
modifier|&
name|proxySelection
parameter_list|)
specifier|const
block|{
return|return
name|QAbstractProxyModel
operator|::
name|mapSelectionToSource
argument_list|(
name|proxySelection
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|mapSelectionFromSource
name|QItemSelection
name|QSortFilterProxyModel
operator|::
name|mapSelectionFromSource
parameter_list|(
specifier|const
name|QItemSelection
modifier|&
name|sourceSelection
parameter_list|)
specifier|const
block|{
return|return
name|QAbstractProxyModel
operator|::
name|mapSelectionFromSource
argument_list|(
name|sourceSelection
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \fn QObject *QSortFilterProxyModel::parent() const   \internal */
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qsortfilterproxymodel.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SORTFILTERPROXYMODEL
end_comment
end_unit
