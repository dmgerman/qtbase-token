begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QABSTRACTITEMMODEL_H
end_ifndef
begin_define
DECL|macro|QABSTRACTITEMMODEL_H
define|#
directive|define
name|QABSTRACTITEMMODEL_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qvariant.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qobject.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qhash.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvector.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|variable|QAbstractItemModel
name|class
name|QAbstractItemModel
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPersistentModelIndex
name|class
name|QPersistentModelIndex
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QModelIndex
block|{
name|friend
name|class
name|QAbstractItemModel
decl_stmt|;
name|friend
name|class
name|QProxyModel
decl_stmt|;
name|public
label|:
specifier|inline
name|QModelIndex
argument_list|()
operator|:
name|r
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|c
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|p
argument_list|(
literal|0
argument_list|)
operator|,
name|m
argument_list|(
literal|0
argument_list|)
block|{}
specifier|inline
name|QModelIndex
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|other
argument_list|)
operator|:
name|r
argument_list|(
name|other
operator|.
name|r
argument_list|)
operator|,
name|c
argument_list|(
name|other
operator|.
name|c
argument_list|)
operator|,
name|p
argument_list|(
name|other
operator|.
name|p
argument_list|)
operator|,
name|m
argument_list|(
argument|other.m
argument_list|)
block|{}
specifier|inline
operator|~
name|QModelIndex
argument_list|()
block|{
name|p
operator|=
literal|0
block|;
name|m
operator|=
literal|0
block|; }
specifier|inline
name|int
name|row
argument_list|()
specifier|const
block|{
return|return
name|r
return|;
block|}
specifier|inline
name|int
name|column
argument_list|()
specifier|const
block|{
return|return
name|c
return|;
block|}
specifier|inline
name|void
operator|*
name|internalPointer
argument_list|()
specifier|const
block|{
return|return
name|p
return|;
block|}
specifier|inline
name|qint64
name|internalId
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
name|qint64
operator|>
operator|(
name|p
operator|)
return|;
block|}
specifier|inline
name|QModelIndex
name|parent
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QModelIndex
name|sibling
argument_list|(
name|int
name|row
argument_list|,
name|int
name|column
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|QModelIndex
name|child
argument_list|(
name|int
name|row
argument_list|,
name|int
name|column
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|QVariant
name|data
argument_list|(
name|int
name|role
operator|=
name|Qt
operator|::
name|DisplayRole
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|Qt
operator|::
name|ItemFlags
name|flags
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
specifier|const
name|QAbstractItemModel
operator|*
name|model
argument_list|()
specifier|const
block|{
return|return
name|m
return|;
block|}
specifier|inline
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
operator|(
name|r
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|c
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|m
operator|!=
literal|0
operator|)
return|;
block|}
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QModelIndex
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|(
name|other
operator|.
name|r
operator|==
name|r
operator|)
operator|&&
operator|(
name|other
operator|.
name|p
operator|==
name|p
operator|)
operator|&&
operator|(
name|other
operator|.
name|c
operator|==
name|c
operator|)
operator|&&
operator|(
name|other
operator|.
name|m
operator|==
name|m
operator|)
return|;
block|}
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QModelIndex
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|QModelIndex
operator|&
name|other
operator|)
specifier|const
block|{
if|if
condition|(
name|r
operator|<
name|other
operator|.
name|r
condition|)
return|return
name|true
return|;
if|if
condition|(
name|r
operator|==
name|other
operator|.
name|r
condition|)
block|{
if|if
condition|(
name|c
operator|<
name|other
operator|.
name|c
condition|)
return|return
name|true
return|;
if|if
condition|(
name|c
operator|==
name|other
operator|.
name|c
condition|)
block|{
if|if
condition|(
name|p
operator|<
name|other
operator|.
name|p
condition|)
return|return
name|true
return|;
if|if
condition|(
name|p
operator|==
name|other
operator|.
name|p
condition|)
return|return
name|m
operator|<
name|other
operator|.
name|m
return|;
block|}
block|}
return|return
name|false
return|;
block|}
end_decl_stmt
begin_label
name|private
label|:
end_label
begin_expr_stmt
specifier|inline
name|QModelIndex
argument_list|(
argument|int row
argument_list|,
argument|int column
argument_list|,
argument|void *ptr
argument_list|,
argument|const QAbstractItemModel *model
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|int
name|r
decl_stmt|,
name|c
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|void
modifier|*
name|p
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|const
name|QAbstractItemModel
modifier|*
name|m
decl_stmt|;
end_decl_stmt
begin_expr_stmt
unit|};
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QModelIndex
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
operator|,
specifier|const
name|QModelIndex
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|QPersistentModelIndexData
name|class
name|QPersistentModelIndexData
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QPersistentModelIndex
block|{
name|public
label|:
name|QPersistentModelIndex
argument_list|()
expr_stmt|;
name|QPersistentModelIndex
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|index
argument_list|)
expr_stmt|;
name|QPersistentModelIndex
argument_list|(
specifier|const
name|QPersistentModelIndex
operator|&
name|other
argument_list|)
expr_stmt|;
operator|~
name|QPersistentModelIndex
argument_list|()
expr_stmt|;
name|bool
name|operator
operator|<
operator|(
specifier|const
name|QPersistentModelIndex
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QPersistentModelIndex
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QPersistentModelIndex
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
name|operator
operator|==
operator|(
name|other
operator|)
return|;
block|}
name|QPersistentModelIndex
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QPersistentModelIndex
operator|&
name|other
operator|)
decl_stmt|;
specifier|inline
name|void
name|swap
parameter_list|(
name|QPersistentModelIndex
modifier|&
name|other
parameter_list|)
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
expr_stmt|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QModelIndex
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QModelIndex
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
name|QPersistentModelIndex
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QModelIndex
operator|&
name|other
operator|)
decl_stmt|;
name|operator
specifier|const
name|QModelIndex
operator|&
operator|(
operator|)
specifier|const
expr_stmt|;
name|int
name|row
argument_list|()
specifier|const
expr_stmt|;
name|int
name|column
argument_list|()
specifier|const
expr_stmt|;
name|void
operator|*
name|internalPointer
argument_list|()
specifier|const
expr_stmt|;
name|qint64
name|internalId
argument_list|()
specifier|const
expr_stmt|;
name|QModelIndex
name|parent
argument_list|()
specifier|const
expr_stmt|;
name|QModelIndex
name|sibling
argument_list|(
name|int
name|row
argument_list|,
name|int
name|column
argument_list|)
decl|const
decl_stmt|;
name|QModelIndex
name|child
argument_list|(
name|int
name|row
argument_list|,
name|int
name|column
argument_list|)
decl|const
decl_stmt|;
name|QVariant
name|data
argument_list|(
name|int
name|role
operator|=
name|Qt
operator|::
name|DisplayRole
argument_list|)
decl|const
decl_stmt|;
name|Qt
operator|::
name|ItemFlags
name|flags
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|QAbstractItemModel
operator|*
name|model
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isValid
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|QPersistentModelIndexData
modifier|*
name|d
decl_stmt|;
name|friend
name|uint
name|qHash
parameter_list|(
specifier|const
name|QPersistentModelIndex
modifier|&
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
name|friend
name|Q_CORE_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
operator|,
specifier|const
name|QPersistentModelIndex
operator|&
operator|)
expr_stmt|;
endif|#
directive|endif
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QPersistentModelIndex
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|qHash
specifier|inline
name|uint
name|qHash
parameter_list|(
specifier|const
name|QPersistentModelIndex
modifier|&
name|index
parameter_list|)
block|{
return|return
name|qHash
argument_list|(
name|index
operator|.
name|d
argument_list|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
operator|,
specifier|const
name|QPersistentModelIndex
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
DECL|variable|QList
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|QList
expr_stmt|;
end_expr_stmt
begin_typedef
DECL|typedef|QModelIndexList
typedef|typedef
name|QList
operator|<
name|QModelIndex
operator|>
name|QModelIndexList
expr_stmt|;
end_typedef
begin_decl_stmt
DECL|variable|QMimeData
name|class
name|QMimeData
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QAbstractItemModelPrivate
name|class
name|QAbstractItemModelPrivate
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|variable|Key
DECL|variable|QMap
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|class
name|QMap
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QAbstractItemModel
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|friend
name|class
name|QPersistentModelIndexData
block|;
name|friend
name|class
name|QAbstractItemViewPrivate
block|;
name|friend
name|class
name|QIdentityProxyModel
block|;
name|public
operator|:
name|explicit
name|QAbstractItemModel
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|virtual
operator|~
name|QAbstractItemModel
argument_list|()
block|;
name|bool
name|hasIndex
argument_list|(
argument|int row
argument_list|,
argument|int column
argument_list|,
argument|const QModelIndex&parent = QModelIndex()
argument_list|)
specifier|const
block|;
name|virtual
name|QModelIndex
name|index
argument_list|(
argument|int row
argument_list|,
argument|int column
argument_list|,
argument|const QModelIndex&parent = QModelIndex()
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|QModelIndex
name|parent
argument_list|(
argument|const QModelIndex&child
argument_list|)
specifier|const
operator|=
literal|0
block|;
specifier|inline
name|QModelIndex
name|sibling
argument_list|(
argument|int row
argument_list|,
argument|int column
argument_list|,
argument|const QModelIndex&idx
argument_list|)
specifier|const
block|{
return|return
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|parent
argument_list|(
name|idx
argument_list|)
argument_list|)
return|;
block|}
name|virtual
name|int
name|rowCount
argument_list|(
argument|const QModelIndex&parent = QModelIndex()
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|int
name|columnCount
argument_list|(
argument|const QModelIndex&parent = QModelIndex()
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|bool
name|hasChildren
argument_list|(
argument|const QModelIndex&parent = QModelIndex()
argument_list|)
specifier|const
block|;
name|virtual
name|QVariant
name|data
argument_list|(
argument|const QModelIndex&index
argument_list|,
argument|int role = Qt::DisplayRole
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|bool
name|setData
argument_list|(
argument|const QModelIndex&index
argument_list|,
argument|const QVariant&value
argument_list|,
argument|int role = Qt::EditRole
argument_list|)
block|;
name|virtual
name|QVariant
name|headerData
argument_list|(
argument|int section
argument_list|,
argument|Qt::Orientation orientation
argument_list|,
argument|int role = Qt::DisplayRole
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|setHeaderData
argument_list|(
argument|int section
argument_list|,
argument|Qt::Orientation orientation
argument_list|,
argument|const QVariant&value
argument_list|,
argument|int role = Qt::EditRole
argument_list|)
block|;
name|virtual
name|QMap
operator|<
name|int
block|,
name|QVariant
operator|>
name|itemData
argument_list|(
argument|const QModelIndex&index
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|setItemData
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|index
argument_list|,
specifier|const
name|QMap
operator|<
name|int
argument_list|,
name|QVariant
operator|>
operator|&
name|roles
argument_list|)
block|;
name|virtual
name|QStringList
name|mimeTypes
argument_list|()
specifier|const
block|;
name|virtual
name|QMimeData
operator|*
name|mimeData
argument_list|(
argument|const QModelIndexList&indexes
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|canDropMimeData
argument_list|(
argument|const QMimeData *data
argument_list|,
argument|Qt::DropAction action
argument_list|,
argument|int row
argument_list|,
argument|int column
argument_list|,
argument|const QModelIndex&parent
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|dropMimeData
argument_list|(
argument|const QMimeData *data
argument_list|,
argument|Qt::DropAction action
argument_list|,
argument|int row
argument_list|,
argument|int column
argument_list|,
argument|const QModelIndex&parent
argument_list|)
block|;
name|virtual
name|Qt
operator|::
name|DropActions
name|supportedDropActions
argument_list|()
specifier|const
block|;
name|virtual
name|Qt
operator|::
name|DropActions
name|supportedDragActions
argument_list|()
specifier|const
block|;
if|#
directive|if
name|QT_DEPRECATED_SINCE
argument_list|(
literal|5
operator|,
literal|0
argument_list|)
name|QT_DEPRECATED
name|void
name|setSupportedDragActions
argument_list|(
argument|Qt::DropActions actions
argument_list|)
block|{
name|doSetSupportedDragActions
argument_list|(
name|actions
argument_list|)
block|; }
endif|#
directive|endif
name|virtual
name|bool
name|insertRows
argument_list|(
argument|int row
argument_list|,
argument|int count
argument_list|,
argument|const QModelIndex&parent = QModelIndex()
argument_list|)
block|;
name|virtual
name|bool
name|insertColumns
argument_list|(
argument|int column
argument_list|,
argument|int count
argument_list|,
argument|const QModelIndex&parent = QModelIndex()
argument_list|)
block|;
name|virtual
name|bool
name|removeRows
argument_list|(
argument|int row
argument_list|,
argument|int count
argument_list|,
argument|const QModelIndex&parent = QModelIndex()
argument_list|)
block|;
name|virtual
name|bool
name|removeColumns
argument_list|(
argument|int column
argument_list|,
argument|int count
argument_list|,
argument|const QModelIndex&parent = QModelIndex()
argument_list|)
block|;
name|virtual
name|bool
name|moveRows
argument_list|(
argument|const QModelIndex&sourceParent
argument_list|,
argument|int sourceRow
argument_list|,
argument|int count
argument_list|,
argument|const QModelIndex&destinationParent
argument_list|,
argument|int destinationChild
argument_list|)
block|;
name|virtual
name|bool
name|moveColumns
argument_list|(
argument|const QModelIndex&sourceParent
argument_list|,
argument|int sourceColumn
argument_list|,
argument|int count
argument_list|,
argument|const QModelIndex&destinationParent
argument_list|,
argument|int destinationChild
argument_list|)
block|;
specifier|inline
name|bool
name|insertRow
argument_list|(
argument|int row
argument_list|,
argument|const QModelIndex&parent = QModelIndex()
argument_list|)
block|;
specifier|inline
name|bool
name|insertColumn
argument_list|(
argument|int column
argument_list|,
argument|const QModelIndex&parent = QModelIndex()
argument_list|)
block|;
specifier|inline
name|bool
name|removeRow
argument_list|(
argument|int row
argument_list|,
argument|const QModelIndex&parent = QModelIndex()
argument_list|)
block|;
specifier|inline
name|bool
name|removeColumn
argument_list|(
argument|int column
argument_list|,
argument|const QModelIndex&parent = QModelIndex()
argument_list|)
block|;
specifier|inline
name|bool
name|moveRow
argument_list|(
argument|const QModelIndex&sourceParent
argument_list|,
argument|int sourceRow
argument_list|,
argument|const QModelIndex&destinationParent
argument_list|,
argument|int destinationChild
argument_list|)
block|;
specifier|inline
name|bool
name|moveColumn
argument_list|(
argument|const QModelIndex&sourceParent
argument_list|,
argument|int sourceColumn
argument_list|,
argument|const QModelIndex&destinationParent
argument_list|,
argument|int destinationChild
argument_list|)
block|;
name|virtual
name|void
name|fetchMore
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|parent
argument_list|)
block|;
name|virtual
name|bool
name|canFetchMore
argument_list|(
argument|const QModelIndex&parent
argument_list|)
specifier|const
block|;
name|virtual
name|Qt
operator|::
name|ItemFlags
name|flags
argument_list|(
argument|const QModelIndex&index
argument_list|)
specifier|const
block|;
name|virtual
name|void
name|sort
argument_list|(
argument|int column
argument_list|,
argument|Qt::SortOrder order = Qt::AscendingOrder
argument_list|)
block|;
name|virtual
name|QModelIndex
name|buddy
argument_list|(
argument|const QModelIndex&index
argument_list|)
specifier|const
block|;
name|virtual
name|QModelIndexList
name|match
argument_list|(
argument|const QModelIndex&start
argument_list|,
argument|int role
argument_list|,
argument|const QVariant&value
argument_list|,
argument|int hits =
literal|1
argument_list|,
argument|Qt::MatchFlags flags =                                   Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)
argument_list|)
specifier|const
block|;
name|virtual
name|QSize
name|span
argument_list|(
argument|const QModelIndex&index
argument_list|)
specifier|const
block|;
name|virtual
name|QHash
operator|<
name|int
block|,
name|QByteArray
operator|>
name|roleNames
argument_list|()
specifier|const
block|;
ifdef|#
directive|ifdef
name|Q_NO_USING_KEYWORD
specifier|inline
name|QObject
operator|*
name|parent
argument_list|()
specifier|const
block|{
return|return
name|QObject
operator|::
name|parent
argument_list|()
return|;
block|}
else|#
directive|else
name|using
name|QObject
operator|::
name|parent
block|;
endif|#
directive|endif
name|Q_SIGNALS
operator|:
name|void
name|dataChanged
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|topLeft
argument_list|,
specifier|const
name|QModelIndex
operator|&
name|bottomRight
argument_list|,
specifier|const
name|QVector
operator|<
name|int
operator|>
operator|&
name|roles
operator|=
name|QVector
operator|<
name|int
operator|>
operator|(
operator|)
argument_list|)
block|;
name|void
name|headerDataChanged
argument_list|(
argument|Qt::Orientation orientation
argument_list|,
argument|int first
argument_list|,
argument|int last
argument_list|)
block|;
name|void
name|layoutChanged
argument_list|(
specifier|const
name|QList
operator|<
name|QPersistentModelIndex
operator|>
operator|&
name|parents
operator|=
name|QList
operator|<
name|QPersistentModelIndex
operator|>
operator|(
operator|)
argument_list|)
block|;
name|void
name|layoutAboutToBeChanged
argument_list|(
specifier|const
name|QList
operator|<
name|QPersistentModelIndex
operator|>
operator|&
name|parents
operator|=
name|QList
operator|<
name|QPersistentModelIndex
operator|>
operator|(
operator|)
argument_list|)
block|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_MOC_RUN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|qdoc
argument_list|)
name|private
operator|:
comment|// can only be emitted by QAbstractItemModel
endif|#
directive|endif
name|void
name|rowsAboutToBeInserted
argument_list|(
argument|const QModelIndex&parent
argument_list|,
argument|int first
argument_list|,
argument|int last
argument_list|)
block|;
name|void
name|rowsInserted
argument_list|(
argument|const QModelIndex&parent
argument_list|,
argument|int first
argument_list|,
argument|int last
argument_list|)
block|;
name|void
name|rowsAboutToBeRemoved
argument_list|(
argument|const QModelIndex&parent
argument_list|,
argument|int first
argument_list|,
argument|int last
argument_list|)
block|;
name|void
name|rowsRemoved
argument_list|(
argument|const QModelIndex&parent
argument_list|,
argument|int first
argument_list|,
argument|int last
argument_list|)
block|;
name|void
name|columnsAboutToBeInserted
argument_list|(
argument|const QModelIndex&parent
argument_list|,
argument|int first
argument_list|,
argument|int last
argument_list|)
block|;
name|void
name|columnsInserted
argument_list|(
argument|const QModelIndex&parent
argument_list|,
argument|int first
argument_list|,
argument|int last
argument_list|)
block|;
name|void
name|columnsAboutToBeRemoved
argument_list|(
argument|const QModelIndex&parent
argument_list|,
argument|int first
argument_list|,
argument|int last
argument_list|)
block|;
name|void
name|columnsRemoved
argument_list|(
argument|const QModelIndex&parent
argument_list|,
argument|int first
argument_list|,
argument|int last
argument_list|)
block|;
name|void
name|modelAboutToBeReset
argument_list|()
block|;
name|void
name|modelReset
argument_list|()
block|;
name|void
name|rowsAboutToBeMoved
argument_list|(
argument|const QModelIndex&sourceParent
argument_list|,
argument|int sourceStart
argument_list|,
argument|int sourceEnd
argument_list|,
argument|const QModelIndex&destinationParent
argument_list|,
argument|int destinationRow
argument_list|)
block|;
name|void
name|rowsMoved
argument_list|(
argument|const QModelIndex&parent
argument_list|,
argument|int start
argument_list|,
argument|int end
argument_list|,
argument|const QModelIndex&destination
argument_list|,
argument|int row
argument_list|)
block|;
name|void
name|columnsAboutToBeMoved
argument_list|(
argument|const QModelIndex&sourceParent
argument_list|,
argument|int sourceStart
argument_list|,
argument|int sourceEnd
argument_list|,
argument|const QModelIndex&destinationParent
argument_list|,
argument|int destinationColumn
argument_list|)
block|;
name|void
name|columnsMoved
argument_list|(
argument|const QModelIndex&parent
argument_list|,
argument|int start
argument_list|,
argument|int end
argument_list|,
argument|const QModelIndex&destination
argument_list|,
argument|int column
argument_list|)
block|;
name|public
name|Q_SLOTS
operator|:
name|virtual
name|bool
name|submit
argument_list|()
block|;
name|virtual
name|void
name|revert
argument_list|()
block|;
name|protected
operator|:
name|QAbstractItemModel
argument_list|(
name|QAbstractItemModelPrivate
operator|&
name|dd
argument_list|,
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
specifier|inline
name|QModelIndex
name|createIndex
argument_list|(
argument|int row
argument_list|,
argument|int column
argument_list|,
argument|void *data =
literal|0
argument_list|)
specifier|const
block|;
specifier|inline
name|QModelIndex
name|createIndex
argument_list|(
argument|int row
argument_list|,
argument|int column
argument_list|,
argument|int id
argument_list|)
specifier|const
block|;
specifier|inline
name|QModelIndex
name|createIndex
argument_list|(
argument|int row
argument_list|,
argument|int column
argument_list|,
argument|quint32 id
argument_list|)
specifier|const
block|;
name|void
name|encodeData
argument_list|(
argument|const QModelIndexList&indexes
argument_list|,
argument|QDataStream&stream
argument_list|)
specifier|const
block|;
name|bool
name|decodeData
argument_list|(
argument|int row
argument_list|,
argument|int column
argument_list|,
argument|const QModelIndex&parent
argument_list|,
argument|QDataStream&stream
argument_list|)
block|;
name|void
name|beginInsertRows
argument_list|(
argument|const QModelIndex&parent
argument_list|,
argument|int first
argument_list|,
argument|int last
argument_list|)
block|;
name|void
name|endInsertRows
argument_list|()
block|;
name|void
name|beginRemoveRows
argument_list|(
argument|const QModelIndex&parent
argument_list|,
argument|int first
argument_list|,
argument|int last
argument_list|)
block|;
name|void
name|endRemoveRows
argument_list|()
block|;
name|bool
name|beginMoveRows
argument_list|(
argument|const QModelIndex&sourceParent
argument_list|,
argument|int sourceFirst
argument_list|,
argument|int sourceLast
argument_list|,
argument|const QModelIndex&destinationParent
argument_list|,
argument|int destinationRow
argument_list|)
block|;
name|void
name|endMoveRows
argument_list|()
block|;
name|void
name|beginInsertColumns
argument_list|(
argument|const QModelIndex&parent
argument_list|,
argument|int first
argument_list|,
argument|int last
argument_list|)
block|;
name|void
name|endInsertColumns
argument_list|()
block|;
name|void
name|beginRemoveColumns
argument_list|(
argument|const QModelIndex&parent
argument_list|,
argument|int first
argument_list|,
argument|int last
argument_list|)
block|;
name|void
name|endRemoveColumns
argument_list|()
block|;
name|bool
name|beginMoveColumns
argument_list|(
argument|const QModelIndex&sourceParent
argument_list|,
argument|int sourceFirst
argument_list|,
argument|int sourceLast
argument_list|,
argument|const QModelIndex&destinationParent
argument_list|,
argument|int destinationColumn
argument_list|)
block|;
name|void
name|endMoveColumns
argument_list|()
block|;
if|#
directive|if
name|QT_DEPRECATED_SINCE
argument_list|(
literal|5
operator|,
literal|0
argument_list|)
name|QT_DEPRECATED
name|void
name|reset
argument_list|()
block|{
name|beginResetModel
argument_list|()
block|;
name|endResetModel
argument_list|()
block|;     }
endif|#
directive|endif
name|void
name|beginResetModel
argument_list|()
block|;
name|void
name|endResetModel
argument_list|()
block|;
name|void
name|changePersistentIndex
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|from
argument_list|,
specifier|const
name|QModelIndex
operator|&
name|to
argument_list|)
block|;
name|void
name|changePersistentIndexList
argument_list|(
specifier|const
name|QModelIndexList
operator|&
name|from
argument_list|,
specifier|const
name|QModelIndexList
operator|&
name|to
argument_list|)
block|;
name|QModelIndexList
name|persistentIndexList
argument_list|()
specifier|const
block|;
if|#
directive|if
name|QT_DEPRECATED_SINCE
argument_list|(
literal|5
operator|,
literal|0
argument_list|)
name|QT_DEPRECATED
name|void
name|setRoleNames
argument_list|(
argument|const QHash<int
argument_list|,
argument|QByteArray>&theRoleNames
argument_list|)
block|{
name|doSetRoleNames
argument_list|(
name|theRoleNames
argument_list|)
block|;     }
endif|#
directive|endif
name|private
operator|:
name|void
name|doSetRoleNames
argument_list|(
specifier|const
name|QHash
operator|<
name|int
argument_list|,
name|QByteArray
operator|>
operator|&
name|roleNames
argument_list|)
block|;
name|void
name|doSetSupportedDragActions
argument_list|(
argument|Qt::DropActions actions
argument_list|)
block|;
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QAbstractItemModel
argument_list|)
name|Q_DISABLE_COPY
argument_list|(
argument|QAbstractItemModel
argument_list|)
block|}
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|function|insertRow
specifier|inline
name|bool
name|QAbstractItemModel
operator|::
name|insertRow
argument_list|(
argument|int arow
argument_list|,
argument|const QModelIndex&aparent
argument_list|)
block|{
return|return
name|insertRows
argument_list|(
name|arow
argument_list|,
literal|1
argument_list|,
name|aparent
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|insertColumn
specifier|inline
name|bool
name|QAbstractItemModel
operator|::
name|insertColumn
argument_list|(
argument|int acolumn
argument_list|,
argument|const QModelIndex&aparent
argument_list|)
block|{
return|return
name|insertColumns
argument_list|(
name|acolumn
argument_list|,
literal|1
argument_list|,
name|aparent
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|removeRow
specifier|inline
name|bool
name|QAbstractItemModel
operator|::
name|removeRow
argument_list|(
argument|int arow
argument_list|,
argument|const QModelIndex&aparent
argument_list|)
block|{
return|return
name|removeRows
argument_list|(
name|arow
argument_list|,
literal|1
argument_list|,
name|aparent
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|removeColumn
specifier|inline
name|bool
name|QAbstractItemModel
operator|::
name|removeColumn
argument_list|(
argument|int acolumn
argument_list|,
argument|const QModelIndex&aparent
argument_list|)
block|{
return|return
name|removeColumns
argument_list|(
name|acolumn
argument_list|,
literal|1
argument_list|,
name|aparent
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|moveRow
specifier|inline
name|bool
name|QAbstractItemModel
operator|::
name|moveRow
argument_list|(
argument|const QModelIndex&sourceParent
argument_list|,
argument|int sourceRow
argument_list|,
argument|const QModelIndex&destinationParent
argument_list|,
argument|int destinationChild
argument_list|)
block|{
return|return
name|moveRows
argument_list|(
name|sourceParent
argument_list|,
name|sourceRow
argument_list|,
literal|1
argument_list|,
name|destinationParent
argument_list|,
name|destinationChild
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|moveColumn
specifier|inline
name|bool
name|QAbstractItemModel
operator|::
name|moveColumn
argument_list|(
argument|const QModelIndex&sourceParent
argument_list|,
argument|int sourceColumn
argument_list|,
argument|const QModelIndex&destinationParent
argument_list|,
argument|int destinationChild
argument_list|)
block|{
return|return
name|moveRows
argument_list|(
name|sourceParent
argument_list|,
name|sourceColumn
argument_list|,
literal|1
argument_list|,
name|destinationParent
argument_list|,
name|destinationChild
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|createIndex
specifier|inline
name|QModelIndex
name|QAbstractItemModel
operator|::
name|createIndex
argument_list|(
argument|int arow
argument_list|,
argument|int acolumn
argument_list|,
argument|void *adata
argument_list|)
specifier|const
block|{
return|return
name|QModelIndex
argument_list|(
name|arow
argument_list|,
name|acolumn
argument_list|,
name|adata
argument_list|,
name|this
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|createIndex
specifier|inline
name|QModelIndex
name|QAbstractItemModel
operator|::
name|createIndex
argument_list|(
argument|int arow
argument_list|,
argument|int acolumn
argument_list|,
argument|int aid
argument_list|)
specifier|const
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
pragma|#
directive|pragma
name|warning
name|(
name|push
name|)
pragma|#
directive|pragma
name|warning
name|(
name|disable
name|:
name|4312
name|)
comment|// avoid conversion warning on 64-bit
endif|#
directive|endif
block|{
return|return
name|QModelIndex
argument_list|(
name|arow
argument_list|,
name|acolumn
argument_list|,
name|reinterpret_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|aid
operator|)
argument_list|,
name|this
argument_list|)
return|;
block|}
end_expr_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
end_if
begin_pragma
pragma|#
directive|pragma
name|warning
name|(
name|pop
name|)
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
DECL|function|createIndex
specifier|inline
name|QModelIndex
name|QAbstractItemModel
operator|::
name|createIndex
argument_list|(
argument|int arow
argument_list|,
argument|int acolumn
argument_list|,
argument|quint32 aid
argument_list|)
specifier|const
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
pragma|#
directive|pragma
name|warning
name|(
name|push
name|)
pragma|#
directive|pragma
name|warning
name|(
name|disable
name|:
name|4312
name|)
comment|// avoid conversion warning on 64-bit
endif|#
directive|endif
block|{
return|return
name|QModelIndex
argument_list|(
name|arow
argument_list|,
name|acolumn
argument_list|,
name|reinterpret_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|aid
operator|)
argument_list|,
name|this
argument_list|)
return|;
block|}
end_expr_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
end_if
begin_pragma
pragma|#
directive|pragma
name|warning
name|(
name|pop
name|)
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QAbstractTableModel
range|:
name|public
name|QAbstractItemModel
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|QAbstractTableModel
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QAbstractTableModel
argument_list|()
block|;
name|QModelIndex
name|index
argument_list|(
argument|int row
argument_list|,
argument|int column
argument_list|,
argument|const QModelIndex&parent = QModelIndex()
argument_list|)
specifier|const
block|;
name|bool
name|dropMimeData
argument_list|(
argument|const QMimeData *data
argument_list|,
argument|Qt::DropAction action
argument_list|,
argument|int row
argument_list|,
argument|int column
argument_list|,
argument|const QModelIndex&parent
argument_list|)
block|;
name|protected
operator|:
name|QAbstractTableModel
argument_list|(
name|QAbstractItemModelPrivate
operator|&
name|dd
argument_list|,
name|QObject
operator|*
name|parent
argument_list|)
block|;
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
argument|QAbstractTableModel
argument_list|)
name|QModelIndex
name|parent
argument_list|(
argument|const QModelIndex&child
argument_list|)
specifier|const
block|;
name|bool
name|hasChildren
argument_list|(
argument|const QModelIndex&parent
argument_list|)
specifier|const
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QAbstractListModel
range|:
name|public
name|QAbstractItemModel
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|QAbstractListModel
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QAbstractListModel
argument_list|()
block|;
name|QModelIndex
name|index
argument_list|(
argument|int row
argument_list|,
argument|int column =
literal|0
argument_list|,
argument|const QModelIndex&parent = QModelIndex()
argument_list|)
specifier|const
block|;
name|bool
name|dropMimeData
argument_list|(
argument|const QMimeData *data
argument_list|,
argument|Qt::DropAction action
argument_list|,
argument|int row
argument_list|,
argument|int column
argument_list|,
argument|const QModelIndex&parent
argument_list|)
block|;
name|protected
operator|:
name|QAbstractListModel
argument_list|(
name|QAbstractItemModelPrivate
operator|&
name|dd
argument_list|,
name|QObject
operator|*
name|parent
argument_list|)
block|;
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
argument|QAbstractListModel
argument_list|)
name|QModelIndex
name|parent
argument_list|(
argument|const QModelIndex&child
argument_list|)
specifier|const
block|;
name|int
name|columnCount
argument_list|(
argument|const QModelIndex&parent
argument_list|)
specifier|const
block|;
name|bool
name|hasChildren
argument_list|(
argument|const QModelIndex&parent
argument_list|)
specifier|const
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|// inline implementations
end_comment
begin_expr_stmt
DECL|function|QModelIndex
specifier|inline
name|QModelIndex
operator|::
name|QModelIndex
argument_list|(
argument|int arow
argument_list|,
argument|int acolumn
argument_list|,
argument|void *adata
argument_list|,
argument|const QAbstractItemModel *amodel
argument_list|)
operator|:
name|r
argument_list|(
name|arow
argument_list|)
operator|,
name|c
argument_list|(
name|acolumn
argument_list|)
operator|,
name|p
argument_list|(
name|adata
argument_list|)
operator|,
name|m
argument_list|(
argument|amodel
argument_list|)
block|{}
DECL|function|parent
specifier|inline
name|QModelIndex
name|QModelIndex
operator|::
name|parent
argument_list|()
specifier|const
block|{
return|return
name|m
operator|?
name|m
operator|->
name|parent
argument_list|(
operator|*
name|this
argument_list|)
operator|:
name|QModelIndex
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|sibling
specifier|inline
name|QModelIndex
name|QModelIndex
operator|::
name|sibling
argument_list|(
argument|int arow
argument_list|,
argument|int acolumn
argument_list|)
specifier|const
block|{
return|return
name|m
operator|?
operator|(
name|r
operator|==
name|arow
operator|&&
name|c
operator|==
name|acolumn
operator|)
operator|?
operator|*
name|this
operator|:
name|m
operator|->
name|index
argument_list|(
name|arow
argument_list|,
name|acolumn
argument_list|,
name|m
operator|->
name|parent
argument_list|(
operator|*
name|this
argument_list|)
argument_list|)
operator|:
name|QModelIndex
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|child
specifier|inline
name|QModelIndex
name|QModelIndex
operator|::
name|child
argument_list|(
argument|int arow
argument_list|,
argument|int acolumn
argument_list|)
specifier|const
block|{
return|return
name|m
operator|?
name|m
operator|->
name|index
argument_list|(
name|arow
argument_list|,
name|acolumn
argument_list|,
operator|*
name|this
argument_list|)
operator|:
name|QModelIndex
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|data
specifier|inline
name|QVariant
name|QModelIndex
operator|::
name|data
argument_list|(
argument|int arole
argument_list|)
specifier|const
block|{
return|return
name|m
operator|?
name|m
operator|->
name|data
argument_list|(
operator|*
name|this
argument_list|,
name|arole
argument_list|)
operator|:
name|QVariant
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|flags
specifier|inline
name|Qt
operator|::
name|ItemFlags
name|QModelIndex
operator|::
name|flags
argument_list|()
specifier|const
block|{
return|return
name|m
operator|?
name|m
operator|->
name|flags
argument_list|(
operator|*
name|this
argument_list|)
operator|:
name|Qt
operator|::
name|ItemFlags
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
DECL|function|qHash
specifier|inline
name|uint
name|qHash
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
return|return
name|uint
argument_list|(
operator|(
name|index
operator|.
name|row
argument_list|()
operator|<<
literal|4
operator|)
operator|+
name|index
operator|.
name|column
argument_list|()
operator|+
name|index
operator|.
name|internalId
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QABSTRACTITEMMODEL_H
end_comment
end_unit
