begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qutfcodec_p.h"
end_include
begin_include
include|#
directive|include
file|"qlist.h"
end_include
begin_include
include|#
directive|include
file|"qendian.h"
end_include
begin_include
include|#
directive|include
file|"qchar.h"
end_include
begin_include
include|#
directive|include
file|<private/qunicodetables_p.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|enumerator|Endian
DECL|enumerator|Data
name|enum
type|{
name|Endian
init|=
literal|0
decl_stmt|,
name|Data
init|=
literal|1
end_decl_stmt
begin_function
DECL|enumerator|Endian
DECL|enumerator|Data
unit|};
DECL|function|convertFromUnicode
name|QByteArray
name|QUtf8
operator|::
name|convertFromUnicode
parameter_list|(
specifier|const
name|QChar
modifier|*
name|uc
parameter_list|,
name|int
name|len
parameter_list|,
name|QTextCodec
operator|::
name|ConverterState
modifier|*
name|state
parameter_list|)
block|{
name|uchar
name|replacement
init|=
literal|'?'
decl_stmt|;
name|int
name|rlen
init|=
literal|3
operator|*
name|len
decl_stmt|;
name|int
name|surrogate_high
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|state
condition|)
block|{
if|if
condition|(
name|state
operator|->
name|flags
operator|&
name|QTextCodec
operator|::
name|ConvertInvalidToNull
condition|)
name|replacement
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|state
operator|->
name|flags
operator|&
name|QTextCodec
operator|::
name|IgnoreHeader
operator|)
condition|)
name|rlen
operator|+=
literal|3
expr_stmt|;
if|if
condition|(
name|state
operator|->
name|remainingChars
condition|)
name|surrogate_high
operator|=
name|state
operator|->
name|state_data
index|[
literal|0
index|]
expr_stmt|;
block|}
name|QByteArray
name|rstr
decl_stmt|;
name|rstr
operator|.
name|resize
argument_list|(
name|rlen
argument_list|)
expr_stmt|;
name|uchar
modifier|*
name|cursor
init|=
operator|(
name|uchar
operator|*
operator|)
name|rstr
operator|.
name|data
argument_list|()
decl_stmt|;
specifier|const
name|QChar
modifier|*
name|ch
init|=
name|uc
decl_stmt|;
name|int
name|invalid
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|state
operator|&&
operator|!
operator|(
name|state
operator|->
name|flags
operator|&
name|QTextCodec
operator|::
name|IgnoreHeader
operator|)
condition|)
block|{
operator|*
name|cursor
operator|++
operator|=
literal|0xef
expr_stmt|;
operator|*
name|cursor
operator|++
operator|=
literal|0xbb
expr_stmt|;
operator|*
name|cursor
operator|++
operator|=
literal|0xbf
expr_stmt|;
block|}
specifier|const
name|QChar
modifier|*
name|end
init|=
name|ch
operator|+
name|len
decl_stmt|;
while|while
condition|(
name|ch
operator|<
name|end
condition|)
block|{
name|uint
name|u
init|=
name|ch
operator|->
name|unicode
argument_list|()
decl_stmt|;
if|if
condition|(
name|surrogate_high
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|ch
operator|->
name|isLowSurrogate
argument_list|()
condition|)
block|{
name|u
operator|=
name|QChar
operator|::
name|surrogateToUcs4
argument_list|(
name|surrogate_high
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|surrogate_high
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// high surrogate without low
operator|*
name|cursor
operator|=
name|replacement
expr_stmt|;
operator|++
name|ch
expr_stmt|;
operator|++
name|invalid
expr_stmt|;
name|surrogate_high
operator|=
operator|-
literal|1
expr_stmt|;
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
name|ch
operator|->
name|isLowSurrogate
argument_list|()
condition|)
block|{
comment|// low surrogate without high
operator|*
name|cursor
operator|=
name|replacement
expr_stmt|;
operator|++
name|ch
expr_stmt|;
operator|++
name|invalid
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|ch
operator|->
name|isHighSurrogate
argument_list|()
condition|)
block|{
name|surrogate_high
operator|=
name|u
expr_stmt|;
operator|++
name|ch
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|u
operator|<
literal|0x80
condition|)
block|{
operator|*
name|cursor
operator|++
operator|=
operator|(
name|uchar
operator|)
name|u
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|u
operator|<
literal|0x0800
condition|)
block|{
operator|*
name|cursor
operator|++
operator|=
literal|0xc0
operator||
operator|(
call|(
name|uchar
call|)
argument_list|(
name|u
operator|>>
literal|6
argument_list|)
operator|)
expr_stmt|;
block|}
else|else
block|{
comment|// is it one of the Unicode non-characters?
if|if
condition|(
name|QUnicodeTables
operator|::
name|isNonCharacter
argument_list|(
name|u
argument_list|)
condition|)
block|{
operator|*
name|cursor
operator|++
operator|=
name|replacement
expr_stmt|;
operator|++
name|ch
expr_stmt|;
operator|++
name|invalid
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|QChar
operator|::
name|requiresSurrogates
argument_list|(
name|u
argument_list|)
condition|)
block|{
operator|*
name|cursor
operator|++
operator|=
literal|0xf0
operator||
operator|(
call|(
name|uchar
call|)
argument_list|(
name|u
operator|>>
literal|18
argument_list|)
operator|)
expr_stmt|;
operator|*
name|cursor
operator|++
operator|=
literal|0x80
operator||
operator|(
operator|(
call|(
name|uchar
call|)
argument_list|(
name|u
operator|>>
literal|12
argument_list|)
operator|)
operator|&
literal|0x3f
operator|)
expr_stmt|;
block|}
else|else
block|{
operator|*
name|cursor
operator|++
operator|=
literal|0xe0
operator||
operator|(
operator|(
call|(
name|uchar
call|)
argument_list|(
name|u
operator|>>
literal|12
argument_list|)
operator|)
operator|&
literal|0x3f
operator|)
expr_stmt|;
block|}
operator|*
name|cursor
operator|++
operator|=
literal|0x80
operator||
operator|(
operator|(
call|(
name|uchar
call|)
argument_list|(
name|u
operator|>>
literal|6
argument_list|)
operator|)
operator|&
literal|0x3f
operator|)
expr_stmt|;
block|}
operator|*
name|cursor
operator|++
operator|=
literal|0x80
operator||
operator|(
call|(
name|uchar
call|)
argument_list|(
name|u
operator|&
literal|0x3f
argument_list|)
operator|)
expr_stmt|;
block|}
operator|++
name|ch
expr_stmt|;
block|}
name|rstr
operator|.
name|resize
argument_list|(
name|cursor
operator|-
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|rstr
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
condition|)
block|{
name|state
operator|->
name|invalidChars
operator|+=
name|invalid
expr_stmt|;
name|state
operator|->
name|flags
operator||=
name|QTextCodec
operator|::
name|IgnoreHeader
expr_stmt|;
name|state
operator|->
name|remainingChars
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|surrogate_high
operator|>=
literal|0
condition|)
block|{
name|state
operator|->
name|remainingChars
operator|=
literal|1
expr_stmt|;
name|state
operator|->
name|state_data
index|[
literal|0
index|]
operator|=
name|surrogate_high
expr_stmt|;
block|}
block|}
return|return
name|rstr
return|;
block|}
end_function
begin_function
DECL|function|convertToUnicode
name|QString
name|QUtf8
operator|::
name|convertToUnicode
parameter_list|(
specifier|const
name|char
modifier|*
name|chars
parameter_list|,
name|int
name|len
parameter_list|,
name|QTextCodec
operator|::
name|ConverterState
modifier|*
name|state
parameter_list|)
block|{
name|bool
name|headerdone
init|=
literal|false
decl_stmt|;
name|ushort
name|replacement
init|=
name|QChar
operator|::
name|ReplacementCharacter
decl_stmt|;
name|int
name|need
init|=
literal|0
decl_stmt|;
name|int
name|error
init|=
operator|-
literal|1
decl_stmt|;
name|uint
name|uc
init|=
literal|0
decl_stmt|;
name|uint
name|min_uc
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|state
condition|)
block|{
if|if
condition|(
name|state
operator|->
name|flags
operator|&
name|QTextCodec
operator|::
name|IgnoreHeader
condition|)
name|headerdone
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|state
operator|->
name|flags
operator|&
name|QTextCodec
operator|::
name|ConvertInvalidToNull
condition|)
name|replacement
operator|=
name|QChar
operator|::
name|Null
expr_stmt|;
name|need
operator|=
name|state
operator|->
name|remainingChars
expr_stmt|;
if|if
condition|(
name|need
condition|)
block|{
name|uc
operator|=
name|state
operator|->
name|state_data
index|[
literal|0
index|]
expr_stmt|;
name|min_uc
operator|=
name|state
operator|->
name|state_data
index|[
literal|1
index|]
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|headerdone
operator|&&
name|len
operator|>
literal|3
operator|&&
operator|(
name|uchar
operator|)
name|chars
index|[
literal|0
index|]
operator|==
literal|0xef
operator|&&
operator|(
name|uchar
operator|)
name|chars
index|[
literal|1
index|]
operator|==
literal|0xbb
operator|&&
operator|(
name|uchar
operator|)
name|chars
index|[
literal|2
index|]
operator|==
literal|0xbf
condition|)
block|{
comment|// starts with a byte order mark
name|chars
operator|+=
literal|3
expr_stmt|;
name|len
operator|-=
literal|3
expr_stmt|;
name|headerdone
operator|=
literal|true
expr_stmt|;
block|}
name|QString
name|result
argument_list|(
name|need
operator|+
name|len
operator|+
literal|1
argument_list|,
name|Qt
operator|::
name|Uninitialized
argument_list|)
decl_stmt|;
comment|// worst case
name|ushort
modifier|*
name|qch
init|=
operator|(
name|ushort
operator|*
operator|)
name|result
operator|.
name|unicode
argument_list|()
decl_stmt|;
name|uchar
name|ch
decl_stmt|;
name|int
name|invalid
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|ch
operator|=
name|chars
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|need
condition|)
block|{
if|if
condition|(
operator|(
name|ch
operator|&
literal|0xc0
operator|)
operator|==
literal|0x80
condition|)
block|{
name|uc
operator|=
operator|(
name|uc
operator|<<
literal|6
operator|)
operator||
operator|(
name|ch
operator|&
literal|0x3f
operator|)
expr_stmt|;
operator|--
name|need
expr_stmt|;
if|if
condition|(
operator|!
name|need
condition|)
block|{
comment|// utf-8 bom composes into 0xfeff code point
name|bool
name|nonCharacter
decl_stmt|;
if|if
condition|(
operator|!
name|headerdone
operator|&&
name|uc
operator|==
literal|0xfeff
condition|)
block|{
comment|// don't do anything, just skip the BOM
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|nonCharacter
operator|=
name|QUnicodeTables
operator|::
name|isNonCharacter
argument_list|(
name|uc
argument_list|)
operator|)
operator|&&
name|QChar
operator|::
name|requiresSurrogates
argument_list|(
name|uc
argument_list|)
operator|&&
name|uc
operator|<
literal|0x110000
condition|)
block|{
comment|// surrogate pair
name|Q_ASSERT
argument_list|(
operator|(
name|qch
operator|-
operator|(
name|ushort
operator|*
operator|)
name|result
operator|.
name|unicode
argument_list|()
operator|)
operator|+
literal|2
operator|<
name|result
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
operator|*
name|qch
operator|++
operator|=
name|QChar
operator|::
name|highSurrogate
argument_list|(
name|uc
argument_list|)
expr_stmt|;
operator|*
name|qch
operator|++
operator|=
name|QChar
operator|::
name|lowSurrogate
argument_list|(
name|uc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|uc
operator|<
name|min_uc
operator|)
operator|||
operator|(
name|uc
operator|>=
literal|0xd800
operator|&&
name|uc
operator|<=
literal|0xdfff
operator|)
operator|||
name|nonCharacter
operator|||
name|uc
operator|>=
literal|0x110000
condition|)
block|{
comment|// error: overlong sequence, UTF16 surrogate or non-character
operator|*
name|qch
operator|++
operator|=
name|replacement
expr_stmt|;
operator|++
name|invalid
expr_stmt|;
block|}
else|else
block|{
operator|*
name|qch
operator|++
operator|=
name|uc
expr_stmt|;
block|}
name|headerdone
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// error
name|i
operator|=
name|error
expr_stmt|;
operator|*
name|qch
operator|++
operator|=
name|replacement
expr_stmt|;
operator|++
name|invalid
expr_stmt|;
name|need
operator|=
literal|0
expr_stmt|;
name|headerdone
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|ch
operator|<
literal|128
condition|)
block|{
operator|*
name|qch
operator|++
operator|=
name|ushort
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|headerdone
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|ch
operator|&
literal|0xe0
operator|)
operator|==
literal|0xc0
condition|)
block|{
name|uc
operator|=
name|ch
operator|&
literal|0x1f
expr_stmt|;
name|need
operator|=
literal|1
expr_stmt|;
name|error
operator|=
name|i
expr_stmt|;
name|min_uc
operator|=
literal|0x80
expr_stmt|;
name|headerdone
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|ch
operator|&
literal|0xf0
operator|)
operator|==
literal|0xe0
condition|)
block|{
name|uc
operator|=
name|ch
operator|&
literal|0x0f
expr_stmt|;
name|need
operator|=
literal|2
expr_stmt|;
name|error
operator|=
name|i
expr_stmt|;
name|min_uc
operator|=
literal|0x800
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|ch
operator|&
literal|0xf8
operator|)
operator|==
literal|0xf0
condition|)
block|{
name|uc
operator|=
name|ch
operator|&
literal|0x07
expr_stmt|;
name|need
operator|=
literal|3
expr_stmt|;
name|error
operator|=
name|i
expr_stmt|;
name|min_uc
operator|=
literal|0x10000
expr_stmt|;
name|headerdone
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// error
operator|*
name|qch
operator|++
operator|=
name|replacement
expr_stmt|;
operator|++
name|invalid
expr_stmt|;
name|headerdone
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|state
operator|&&
name|need
operator|>
literal|0
condition|)
block|{
comment|// unterminated UTF sequence
for|for
control|(
name|int
name|i
init|=
name|error
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
operator|*
name|qch
operator|++
operator|=
name|replacement
expr_stmt|;
operator|++
name|invalid
expr_stmt|;
block|}
block|}
name|result
operator|.
name|truncate
argument_list|(
name|qch
operator|-
operator|(
name|ushort
operator|*
operator|)
name|result
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
condition|)
block|{
name|state
operator|->
name|invalidChars
operator|+=
name|invalid
expr_stmt|;
name|state
operator|->
name|remainingChars
operator|=
name|need
expr_stmt|;
if|if
condition|(
name|headerdone
condition|)
name|state
operator|->
name|flags
operator||=
name|QTextCodec
operator|::
name|IgnoreHeader
expr_stmt|;
name|state
operator|->
name|state_data
index|[
literal|0
index|]
operator|=
name|need
condition|?
name|uc
else|:
literal|0
expr_stmt|;
name|state
operator|->
name|state_data
index|[
literal|1
index|]
operator|=
name|need
condition|?
name|min_uc
else|:
literal|0
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|convertFromUnicode
name|QByteArray
name|QUtf16
operator|::
name|convertFromUnicode
parameter_list|(
specifier|const
name|QChar
modifier|*
name|uc
parameter_list|,
name|int
name|len
parameter_list|,
name|QTextCodec
operator|::
name|ConverterState
modifier|*
name|state
parameter_list|,
name|DataEndianness
name|e
parameter_list|)
block|{
name|DataEndianness
name|endian
init|=
name|e
decl_stmt|;
name|int
name|length
init|=
literal|2
operator|*
name|len
decl_stmt|;
if|if
condition|(
operator|!
name|state
operator|||
operator|(
operator|!
operator|(
name|state
operator|->
name|flags
operator|&
name|QTextCodec
operator|::
name|IgnoreHeader
operator|)
operator|)
condition|)
block|{
name|length
operator|+=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|==
name|DetectEndianness
condition|)
block|{
name|endian
operator|=
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
operator|)
condition|?
name|BigEndianness
else|:
name|LittleEndianness
expr_stmt|;
block|}
name|QByteArray
name|d
decl_stmt|;
name|d
operator|.
name|resize
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|char
modifier|*
name|data
init|=
name|d
operator|.
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|state
operator|||
operator|!
operator|(
name|state
operator|->
name|flags
operator|&
name|QTextCodec
operator|::
name|IgnoreHeader
operator|)
condition|)
block|{
name|QChar
name|bom
argument_list|(
name|QChar
operator|::
name|ByteOrderMark
argument_list|)
decl_stmt|;
if|if
condition|(
name|endian
operator|==
name|BigEndianness
condition|)
block|{
name|data
index|[
literal|0
index|]
operator|=
name|bom
operator|.
name|row
argument_list|()
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
name|bom
operator|.
name|cell
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|data
index|[
literal|0
index|]
operator|=
name|bom
operator|.
name|cell
argument_list|()
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
name|bom
operator|.
name|row
argument_list|()
expr_stmt|;
block|}
name|data
operator|+=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|endian
operator|==
name|BigEndianness
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
operator|*
operator|(
name|data
operator|++
operator|)
operator|=
name|uc
index|[
name|i
index|]
operator|.
name|row
argument_list|()
expr_stmt|;
operator|*
operator|(
name|data
operator|++
operator|)
operator|=
name|uc
index|[
name|i
index|]
operator|.
name|cell
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
operator|*
operator|(
name|data
operator|++
operator|)
operator|=
name|uc
index|[
name|i
index|]
operator|.
name|cell
argument_list|()
expr_stmt|;
operator|*
operator|(
name|data
operator|++
operator|)
operator|=
name|uc
index|[
name|i
index|]
operator|.
name|row
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|state
condition|)
block|{
name|state
operator|->
name|remainingChars
operator|=
literal|0
expr_stmt|;
name|state
operator|->
name|flags
operator||=
name|QTextCodec
operator|::
name|IgnoreHeader
expr_stmt|;
block|}
return|return
name|d
return|;
block|}
end_function
begin_function
DECL|function|convertToUnicode
name|QString
name|QUtf16
operator|::
name|convertToUnicode
parameter_list|(
specifier|const
name|char
modifier|*
name|chars
parameter_list|,
name|int
name|len
parameter_list|,
name|QTextCodec
operator|::
name|ConverterState
modifier|*
name|state
parameter_list|,
name|DataEndianness
name|e
parameter_list|)
block|{
name|DataEndianness
name|endian
init|=
name|e
decl_stmt|;
name|bool
name|half
init|=
literal|false
decl_stmt|;
name|uchar
name|buf
init|=
literal|0
decl_stmt|;
name|bool
name|headerdone
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|state
condition|)
block|{
name|headerdone
operator|=
name|state
operator|->
name|flags
operator|&
name|QTextCodec
operator|::
name|IgnoreHeader
expr_stmt|;
if|if
condition|(
name|endian
operator|==
name|DetectEndianness
condition|)
name|endian
operator|=
operator|(
name|DataEndianness
operator|)
name|state
operator|->
name|state_data
index|[
name|Endian
index|]
expr_stmt|;
if|if
condition|(
name|state
operator|->
name|remainingChars
condition|)
block|{
name|half
operator|=
literal|true
expr_stmt|;
name|buf
operator|=
name|state
operator|->
name|state_data
index|[
name|Data
index|]
expr_stmt|;
block|}
block|}
if|if
condition|(
name|headerdone
operator|&&
name|endian
operator|==
name|DetectEndianness
condition|)
name|endian
operator|=
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
operator|)
condition|?
name|BigEndianness
else|:
name|LittleEndianness
expr_stmt|;
name|QString
name|result
argument_list|(
name|len
argument_list|,
name|Qt
operator|::
name|Uninitialized
argument_list|)
decl_stmt|;
comment|// worst case
name|QChar
modifier|*
name|qch
init|=
operator|(
name|QChar
operator|*
operator|)
name|result
operator|.
name|unicode
argument_list|()
decl_stmt|;
while|while
condition|(
name|len
operator|--
condition|)
block|{
if|if
condition|(
name|half
condition|)
block|{
name|QChar
name|ch
decl_stmt|;
if|if
condition|(
name|endian
operator|==
name|LittleEndianness
condition|)
block|{
name|ch
operator|.
name|setRow
argument_list|(
operator|*
name|chars
operator|++
argument_list|)
expr_stmt|;
name|ch
operator|.
name|setCell
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ch
operator|.
name|setRow
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|ch
operator|.
name|setCell
argument_list|(
operator|*
name|chars
operator|++
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|headerdone
condition|)
block|{
name|headerdone
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|endian
operator|==
name|DetectEndianness
condition|)
block|{
if|if
condition|(
name|ch
operator|==
name|QChar
operator|::
name|ByteOrderSwapped
condition|)
block|{
name|endian
operator|=
name|LittleEndianness
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
name|QChar
operator|::
name|ByteOrderMark
condition|)
block|{
name|endian
operator|=
name|BigEndianness
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|)
block|{
name|endian
operator|=
name|BigEndianness
expr_stmt|;
block|}
else|else
block|{
name|endian
operator|=
name|LittleEndianness
expr_stmt|;
name|ch
operator|=
name|QChar
argument_list|(
operator|(
name|ch
operator|.
name|unicode
argument_list|()
operator|>>
literal|8
operator|)
operator||
operator|(
operator|(
name|ch
operator|.
name|unicode
argument_list|()
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
argument_list|)
expr_stmt|;
block|}
operator|*
name|qch
operator|++
operator|=
name|ch
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ch
operator|!=
name|QChar
operator|::
name|ByteOrderMark
condition|)
block|{
operator|*
name|qch
operator|++
operator|=
name|ch
expr_stmt|;
block|}
block|}
else|else
block|{
operator|*
name|qch
operator|++
operator|=
name|ch
expr_stmt|;
block|}
name|half
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|=
operator|*
name|chars
operator|++
expr_stmt|;
name|half
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|result
operator|.
name|truncate
argument_list|(
name|qch
operator|-
name|result
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
condition|)
block|{
if|if
condition|(
name|headerdone
condition|)
name|state
operator|->
name|flags
operator||=
name|QTextCodec
operator|::
name|IgnoreHeader
expr_stmt|;
name|state
operator|->
name|state_data
index|[
name|Endian
index|]
operator|=
name|endian
expr_stmt|;
if|if
condition|(
name|half
condition|)
block|{
name|state
operator|->
name|remainingChars
operator|=
literal|1
expr_stmt|;
name|state
operator|->
name|state_data
index|[
name|Data
index|]
operator|=
name|buf
expr_stmt|;
block|}
else|else
block|{
name|state
operator|->
name|remainingChars
operator|=
literal|0
expr_stmt|;
name|state
operator|->
name|state_data
index|[
name|Data
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|convertFromUnicode
name|QByteArray
name|QUtf32
operator|::
name|convertFromUnicode
parameter_list|(
specifier|const
name|QChar
modifier|*
name|uc
parameter_list|,
name|int
name|len
parameter_list|,
name|QTextCodec
operator|::
name|ConverterState
modifier|*
name|state
parameter_list|,
name|DataEndianness
name|e
parameter_list|)
block|{
name|DataEndianness
name|endian
init|=
name|e
decl_stmt|;
name|int
name|length
init|=
literal|4
operator|*
name|len
decl_stmt|;
if|if
condition|(
operator|!
name|state
operator|||
operator|(
operator|!
operator|(
name|state
operator|->
name|flags
operator|&
name|QTextCodec
operator|::
name|IgnoreHeader
operator|)
operator|)
condition|)
block|{
name|length
operator|+=
literal|4
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|==
name|DetectEndianness
condition|)
block|{
name|endian
operator|=
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
operator|)
condition|?
name|BigEndianness
else|:
name|LittleEndianness
expr_stmt|;
block|}
name|QByteArray
name|d
argument_list|(
name|length
argument_list|,
name|Qt
operator|::
name|Uninitialized
argument_list|)
decl_stmt|;
name|char
modifier|*
name|data
init|=
name|d
operator|.
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|state
operator|||
operator|!
operator|(
name|state
operator|->
name|flags
operator|&
name|QTextCodec
operator|::
name|IgnoreHeader
operator|)
condition|)
block|{
if|if
condition|(
name|endian
operator|==
name|BigEndianness
condition|)
block|{
name|data
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|data
index|[
literal|2
index|]
operator|=
operator|(
name|char
operator|)
literal|0xfe
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
operator|(
name|char
operator|)
literal|0xff
expr_stmt|;
block|}
else|else
block|{
name|data
index|[
literal|0
index|]
operator|=
operator|(
name|char
operator|)
literal|0xff
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|(
name|char
operator|)
literal|0xfe
expr_stmt|;
name|data
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|data
operator|+=
literal|4
expr_stmt|;
block|}
if|if
condition|(
name|endian
operator|==
name|BigEndianness
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|uint
name|cp
init|=
name|uc
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
decl_stmt|;
if|if
condition|(
name|uc
index|[
name|i
index|]
operator|.
name|isHighSurrogate
argument_list|()
operator|&&
name|i
operator|<
name|len
operator|-
literal|1
condition|)
name|cp
operator|=
name|QChar
operator|::
name|surrogateToUcs4
argument_list|(
name|cp
argument_list|,
name|uc
index|[
operator|++
name|i
index|]
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
operator|*
operator|(
name|data
operator|++
operator|)
operator|=
name|cp
operator|>>
literal|24
expr_stmt|;
operator|*
operator|(
name|data
operator|++
operator|)
operator|=
operator|(
name|cp
operator|>>
literal|16
operator|)
operator|&
literal|0xff
expr_stmt|;
operator|*
operator|(
name|data
operator|++
operator|)
operator|=
operator|(
name|cp
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
operator|*
operator|(
name|data
operator|++
operator|)
operator|=
name|cp
operator|&
literal|0xff
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|uint
name|cp
init|=
name|uc
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
decl_stmt|;
if|if
condition|(
name|uc
index|[
name|i
index|]
operator|.
name|isHighSurrogate
argument_list|()
operator|&&
name|i
operator|<
name|len
operator|-
literal|1
condition|)
name|cp
operator|=
name|QChar
operator|::
name|surrogateToUcs4
argument_list|(
name|cp
argument_list|,
name|uc
index|[
operator|++
name|i
index|]
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
operator|*
operator|(
name|data
operator|++
operator|)
operator|=
name|cp
operator|&
literal|0xff
expr_stmt|;
operator|*
operator|(
name|data
operator|++
operator|)
operator|=
operator|(
name|cp
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
operator|*
operator|(
name|data
operator|++
operator|)
operator|=
operator|(
name|cp
operator|>>
literal|16
operator|)
operator|&
literal|0xff
expr_stmt|;
operator|*
operator|(
name|data
operator|++
operator|)
operator|=
name|cp
operator|>>
literal|24
expr_stmt|;
block|}
block|}
if|if
condition|(
name|state
condition|)
block|{
name|state
operator|->
name|remainingChars
operator|=
literal|0
expr_stmt|;
name|state
operator|->
name|flags
operator||=
name|QTextCodec
operator|::
name|IgnoreHeader
expr_stmt|;
block|}
return|return
name|d
return|;
block|}
end_function
begin_function
DECL|function|convertToUnicode
name|QString
name|QUtf32
operator|::
name|convertToUnicode
parameter_list|(
specifier|const
name|char
modifier|*
name|chars
parameter_list|,
name|int
name|len
parameter_list|,
name|QTextCodec
operator|::
name|ConverterState
modifier|*
name|state
parameter_list|,
name|DataEndianness
name|e
parameter_list|)
block|{
name|DataEndianness
name|endian
init|=
name|e
decl_stmt|;
name|uchar
name|tuple
index|[
literal|4
index|]
decl_stmt|;
name|int
name|num
init|=
literal|0
decl_stmt|;
name|bool
name|headerdone
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|state
condition|)
block|{
name|headerdone
operator|=
name|state
operator|->
name|flags
operator|&
name|QTextCodec
operator|::
name|IgnoreHeader
expr_stmt|;
if|if
condition|(
name|endian
operator|==
name|DetectEndianness
condition|)
block|{
name|endian
operator|=
operator|(
name|DataEndianness
operator|)
name|state
operator|->
name|state_data
index|[
name|Endian
index|]
expr_stmt|;
block|}
name|num
operator|=
name|state
operator|->
name|remainingChars
expr_stmt|;
name|memcpy
argument_list|(
name|tuple
argument_list|,
operator|&
name|state
operator|->
name|state_data
index|[
name|Data
index|]
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|headerdone
operator|&&
name|endian
operator|==
name|DetectEndianness
condition|)
name|endian
operator|=
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
operator|)
condition|?
name|BigEndianness
else|:
name|LittleEndianness
expr_stmt|;
name|QString
name|result
decl_stmt|;
name|result
operator|.
name|resize
argument_list|(
operator|(
name|num
operator|+
name|len
operator|)
operator|>>
literal|2
operator|<<
literal|1
argument_list|)
expr_stmt|;
comment|// worst case
name|QChar
modifier|*
name|qch
init|=
operator|(
name|QChar
operator|*
operator|)
name|result
operator|.
name|unicode
argument_list|()
decl_stmt|;
specifier|const
name|char
modifier|*
name|end
init|=
name|chars
operator|+
name|len
decl_stmt|;
while|while
condition|(
name|chars
operator|<
name|end
condition|)
block|{
name|tuple
index|[
name|num
operator|++
index|]
operator|=
operator|*
name|chars
operator|++
expr_stmt|;
if|if
condition|(
name|num
operator|==
literal|4
condition|)
block|{
if|if
condition|(
operator|!
name|headerdone
condition|)
block|{
if|if
condition|(
name|endian
operator|==
name|DetectEndianness
condition|)
block|{
if|if
condition|(
name|tuple
index|[
literal|0
index|]
operator|==
literal|0xff
operator|&&
name|tuple
index|[
literal|1
index|]
operator|==
literal|0xfe
operator|&&
name|tuple
index|[
literal|2
index|]
operator|==
literal|0
operator|&&
name|tuple
index|[
literal|3
index|]
operator|==
literal|0
operator|&&
name|endian
operator|!=
name|BigEndianness
condition|)
block|{
name|endian
operator|=
name|LittleEndianness
expr_stmt|;
name|num
operator|=
literal|0
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|tuple
index|[
literal|0
index|]
operator|==
literal|0
operator|&&
name|tuple
index|[
literal|1
index|]
operator|==
literal|0
operator|&&
name|tuple
index|[
literal|2
index|]
operator|==
literal|0xfe
operator|&&
name|tuple
index|[
literal|3
index|]
operator|==
literal|0xff
operator|&&
name|endian
operator|!=
name|LittleEndianness
condition|)
block|{
name|endian
operator|=
name|BigEndianness
expr_stmt|;
name|num
operator|=
literal|0
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|)
block|{
name|endian
operator|=
name|BigEndianness
expr_stmt|;
block|}
else|else
block|{
name|endian
operator|=
name|LittleEndianness
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|endian
operator|==
name|BigEndianness
operator|)
condition|?
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tuple
argument_list|)
else|:
name|qFromLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tuple
argument_list|)
operator|)
operator|==
name|QChar
operator|::
name|ByteOrderMark
condition|)
block|{
name|num
operator|=
literal|0
expr_stmt|;
continue|continue;
block|}
block|}
name|uint
name|code
init|=
operator|(
name|endian
operator|==
name|BigEndianness
operator|)
condition|?
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tuple
argument_list|)
else|:
name|qFromLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tuple
argument_list|)
decl_stmt|;
if|if
condition|(
name|QChar
operator|::
name|requiresSurrogates
argument_list|(
name|code
argument_list|)
condition|)
block|{
operator|*
name|qch
operator|++
operator|=
name|QChar
operator|::
name|highSurrogate
argument_list|(
name|code
argument_list|)
expr_stmt|;
operator|*
name|qch
operator|++
operator|=
name|QChar
operator|::
name|lowSurrogate
argument_list|(
name|code
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|*
name|qch
operator|++
operator|=
name|code
expr_stmt|;
block|}
name|num
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|result
operator|.
name|truncate
argument_list|(
name|qch
operator|-
name|result
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
condition|)
block|{
if|if
condition|(
name|headerdone
condition|)
name|state
operator|->
name|flags
operator||=
name|QTextCodec
operator|::
name|IgnoreHeader
expr_stmt|;
name|state
operator|->
name|state_data
index|[
name|Endian
index|]
operator|=
name|endian
expr_stmt|;
name|state
operator|->
name|remainingChars
operator|=
name|num
expr_stmt|;
name|memcpy
argument_list|(
operator|&
name|state
operator|->
name|state_data
index|[
name|Data
index|]
argument_list|,
name|tuple
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TEXTCODEC
end_ifndef
begin_destructor
DECL|function|~QUtf8Codec
name|QUtf8Codec
operator|::
name|~
name|QUtf8Codec
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|convertFromUnicode
name|QByteArray
name|QUtf8Codec
operator|::
name|convertFromUnicode
parameter_list|(
specifier|const
name|QChar
modifier|*
name|uc
parameter_list|,
name|int
name|len
parameter_list|,
name|ConverterState
modifier|*
name|state
parameter_list|)
specifier|const
block|{
return|return
name|QUtf8
operator|::
name|convertFromUnicode
argument_list|(
name|uc
argument_list|,
name|len
argument_list|,
name|state
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|convertToUnicode
name|void
name|QUtf8Codec
operator|::
name|convertToUnicode
parameter_list|(
name|QString
modifier|*
name|target
parameter_list|,
specifier|const
name|char
modifier|*
name|chars
parameter_list|,
name|int
name|len
parameter_list|,
name|ConverterState
modifier|*
name|state
parameter_list|)
specifier|const
block|{
operator|*
name|target
operator|+=
name|QUtf8
operator|::
name|convertToUnicode
argument_list|(
name|chars
argument_list|,
name|len
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convertToUnicode
name|QString
name|QUtf8Codec
operator|::
name|convertToUnicode
parameter_list|(
specifier|const
name|char
modifier|*
name|chars
parameter_list|,
name|int
name|len
parameter_list|,
name|ConverterState
modifier|*
name|state
parameter_list|)
specifier|const
block|{
return|return
name|QUtf8
operator|::
name|convertToUnicode
argument_list|(
name|chars
argument_list|,
name|len
argument_list|,
name|state
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|name
name|QByteArray
name|QUtf8Codec
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
literal|"UTF-8"
return|;
block|}
end_function
begin_function
DECL|function|mibEnum
name|int
name|QUtf8Codec
operator|::
name|mibEnum
parameter_list|()
specifier|const
block|{
return|return
literal|106
return|;
block|}
end_function
begin_destructor
DECL|function|~QUtf16Codec
name|QUtf16Codec
operator|::
name|~
name|QUtf16Codec
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|convertFromUnicode
name|QByteArray
name|QUtf16Codec
operator|::
name|convertFromUnicode
parameter_list|(
specifier|const
name|QChar
modifier|*
name|uc
parameter_list|,
name|int
name|len
parameter_list|,
name|ConverterState
modifier|*
name|state
parameter_list|)
specifier|const
block|{
return|return
name|QUtf16
operator|::
name|convertFromUnicode
argument_list|(
name|uc
argument_list|,
name|len
argument_list|,
name|state
argument_list|,
name|e
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|convertToUnicode
name|QString
name|QUtf16Codec
operator|::
name|convertToUnicode
parameter_list|(
specifier|const
name|char
modifier|*
name|chars
parameter_list|,
name|int
name|len
parameter_list|,
name|ConverterState
modifier|*
name|state
parameter_list|)
specifier|const
block|{
return|return
name|QUtf16
operator|::
name|convertToUnicode
argument_list|(
name|chars
argument_list|,
name|len
argument_list|,
name|state
argument_list|,
name|e
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mibEnum
name|int
name|QUtf16Codec
operator|::
name|mibEnum
parameter_list|()
specifier|const
block|{
return|return
literal|1015
return|;
block|}
end_function
begin_function
DECL|function|name
name|QByteArray
name|QUtf16Codec
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
literal|"UTF-16"
return|;
block|}
end_function
begin_function
DECL|function|aliases
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QUtf16Codec
operator|::
name|aliases
parameter_list|()
specifier|const
block|{
return|return
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|mibEnum
name|int
name|QUtf16BECodec
operator|::
name|mibEnum
parameter_list|()
specifier|const
block|{
return|return
literal|1013
return|;
block|}
end_function
begin_function
DECL|function|name
name|QByteArray
name|QUtf16BECodec
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
literal|"UTF-16BE"
return|;
block|}
end_function
begin_function
DECL|function|aliases
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QUtf16BECodec
operator|::
name|aliases
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|list
decl_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_function
DECL|function|mibEnum
name|int
name|QUtf16LECodec
operator|::
name|mibEnum
parameter_list|()
specifier|const
block|{
return|return
literal|1014
return|;
block|}
end_function
begin_function
DECL|function|name
name|QByteArray
name|QUtf16LECodec
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
literal|"UTF-16LE"
return|;
block|}
end_function
begin_function
DECL|function|aliases
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QUtf16LECodec
operator|::
name|aliases
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|list
decl_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_destructor
DECL|function|~QUtf32Codec
name|QUtf32Codec
operator|::
name|~
name|QUtf32Codec
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|convertFromUnicode
name|QByteArray
name|QUtf32Codec
operator|::
name|convertFromUnicode
parameter_list|(
specifier|const
name|QChar
modifier|*
name|uc
parameter_list|,
name|int
name|len
parameter_list|,
name|ConverterState
modifier|*
name|state
parameter_list|)
specifier|const
block|{
return|return
name|QUtf32
operator|::
name|convertFromUnicode
argument_list|(
name|uc
argument_list|,
name|len
argument_list|,
name|state
argument_list|,
name|e
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|convertToUnicode
name|QString
name|QUtf32Codec
operator|::
name|convertToUnicode
parameter_list|(
specifier|const
name|char
modifier|*
name|chars
parameter_list|,
name|int
name|len
parameter_list|,
name|ConverterState
modifier|*
name|state
parameter_list|)
specifier|const
block|{
return|return
name|QUtf32
operator|::
name|convertToUnicode
argument_list|(
name|chars
argument_list|,
name|len
argument_list|,
name|state
argument_list|,
name|e
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mibEnum
name|int
name|QUtf32Codec
operator|::
name|mibEnum
parameter_list|()
specifier|const
block|{
return|return
literal|1017
return|;
block|}
end_function
begin_function
DECL|function|name
name|QByteArray
name|QUtf32Codec
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
literal|"UTF-32"
return|;
block|}
end_function
begin_function
DECL|function|aliases
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QUtf32Codec
operator|::
name|aliases
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|list
decl_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_function
DECL|function|mibEnum
name|int
name|QUtf32BECodec
operator|::
name|mibEnum
parameter_list|()
specifier|const
block|{
return|return
literal|1018
return|;
block|}
end_function
begin_function
DECL|function|name
name|QByteArray
name|QUtf32BECodec
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
literal|"UTF-32BE"
return|;
block|}
end_function
begin_function
DECL|function|aliases
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QUtf32BECodec
operator|::
name|aliases
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|list
decl_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_function
DECL|function|mibEnum
name|int
name|QUtf32LECodec
operator|::
name|mibEnum
parameter_list|()
specifier|const
block|{
return|return
literal|1019
return|;
block|}
end_function
begin_function
DECL|function|name
name|QByteArray
name|QUtf32LECodec
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
literal|"UTF-32LE"
return|;
block|}
end_function
begin_function
DECL|function|aliases
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QUtf32LECodec
operator|::
name|aliases
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|list
decl_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_TEXTCODEC
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
