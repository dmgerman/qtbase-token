begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qtextcodecplugin.h"
end_include
begin_include
include|#
directive|include
file|"qstringlist.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TEXTCODECPLUGIN
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QTextCodecPlugin     \brief The QTextCodecPlugin class provides an abstract base for custom QTextCodec plugins.     \reentrant     \ingroup plugins      The text codec plugin is a simple plugin interface that makes it     easy to create custom text codecs that can be loaded dynamically     into applications.      Writing a text codec plugin is achieved by subclassing this base     class, reimplementing the pure virtual functions names(),     aliases(), createForName(), mibEnums() and createForMib(), and     exporting the class with the Q_EXPORT_PLUGIN2() macro. See \l{How     to Create Qt Plugins} for details.      See the \l{http://www.iana.org/assignments/character-sets}{IANA     character-sets encoding file} for more information on mime     names and mib enums. */
end_comment
begin_comment
comment|/*!     \fn QStringList QTextCodecPlugin::names() const      Returns the list of MIME names supported by this plugin.      If a codec has several names, the extra names are returned by aliases().      \sa createForName(), aliases() */
end_comment
begin_comment
comment|/*!     \fn QList<QByteArray> QTextCodecPlugin::aliases() const      Returns the list of aliases supported by this plugin. */
end_comment
begin_comment
comment|/*!     \fn QTextCodec *QTextCodecPlugin::createForName(const QByteArray&name)      Creates a QTextCodec object for the codec called \a name. The \a name     must come from the list of encodings returned by names(). Encoding     names are case sensitive.      Example:      \snippet doc/src/snippets/code/src_corelib_codecs_qtextcodecplugin.cpp 0      \sa names() */
end_comment
begin_comment
comment|/*!     \fn QList<int> QTextCodecPlugin::mibEnums() const      Returns the list of mib enums supported by this plugin.      \sa createForMib() */
end_comment
begin_comment
comment|/*!     \fn QTextCodec *QTextCodecPlugin::createForMib(int mib);      Creates a QTextCodec object for the mib enum \a mib.      See \l{http://www.iana.org/assignments/character-sets}{the     IANA character-sets encoding file} for more information.      \sa mibEnums() */
end_comment
begin_comment
comment|/*!     Constructs a text codec plugin with the given \a parent. This is     invoked automatically by the Q_EXPORT_PLUGIN2() macro. */
end_comment
begin_constructor
DECL|function|QTextCodecPlugin
name|QTextCodecPlugin
operator|::
name|QTextCodecPlugin
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the text codec plugin.      You never have to call this explicitly. Qt destroys a plugin     automatically when it is no longer used. */
end_comment
begin_destructor
DECL|function|~QTextCodecPlugin
name|QTextCodecPlugin
operator|::
name|~
name|QTextCodecPlugin
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|keys
name|QStringList
name|QTextCodecPlugin
operator|::
name|keys
parameter_list|()
specifier|const
block|{
name|QStringList
name|keys
decl_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|list
init|=
name|names
argument_list|()
decl_stmt|;
name|list
operator|+=
name|aliases
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|keys
operator|+=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|mibs
init|=
name|mibEnums
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mibs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|keys
operator|+=
name|QLatin1String
argument_list|(
literal|"MIB: "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|mibs
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|keys
return|;
block|}
end_function
begin_function
DECL|function|create
name|QTextCodec
modifier|*
name|QTextCodecPlugin
operator|::
name|create
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"MIB: "
argument_list|)
argument_list|)
condition|)
return|return
name|createForMib
argument_list|(
name|name
operator|.
name|mid
argument_list|(
literal|4
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
return|return
name|createForName
argument_list|(
name|name
operator|.
name|toLatin1
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TEXTCODECPLUGIN
end_comment
end_unit
