begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qisciicodec_p.h"
end_include
begin_include
include|#
directive|include
file|"qtextcodec_p.h"
end_include
begin_include
include|#
directive|include
file|"qlist.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CODECS
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QIsciiCodec     \inmodule QtCore     \brief The QIsciiCodec class provides conversion to and from the ISCII encoding.      \internal */
end_comment
begin_struct
DECL|struct|Codecs
struct|struct
name|Codecs
block|{
DECL|member|name
specifier|const
name|char
name|name
index|[
literal|10
index|]
decl_stmt|;
DECL|member|base
name|ushort
name|base
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|codecs
specifier|static
specifier|const
name|Codecs
name|codecs
index|[]
init|=
block|{
block|{
literal|"iscii-dev"
block|,
literal|0x900
block|}
block|,
block|{
literal|"iscii-bng"
block|,
literal|0x980
block|}
block|,
block|{
literal|"iscii-pnj"
block|,
literal|0xa00
block|}
block|,
block|{
literal|"iscii-gjr"
block|,
literal|0xa80
block|}
block|,
block|{
literal|"iscii-ori"
block|,
literal|0xb00
block|}
block|,
block|{
literal|"iscii-tml"
block|,
literal|0xb80
block|}
block|,
block|{
literal|"iscii-tlg"
block|,
literal|0xc00
block|}
block|,
block|{
literal|"iscii-knd"
block|,
literal|0xc80
block|}
block|,
block|{
literal|"iscii-mlm"
block|,
literal|0xd00
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|create
name|QTextCodec
modifier|*
name|QIsciiCodec
operator|::
name|create
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|9
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|qTextCodecNameMatch
argument_list|(
name|name
argument_list|,
name|codecs
index|[
name|i
index|]
operator|.
name|name
argument_list|)
condition|)
return|return
operator|new
name|QIsciiCodec
argument_list|(
name|i
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_destructor
DECL|function|~QIsciiCodec
name|QIsciiCodec
operator|::
name|~
name|QIsciiCodec
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|name
name|QByteArray
name|QIsciiCodec
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
name|codecs
index|[
name|idx
index|]
operator|.
name|name
return|;
block|}
end_function
begin_function
DECL|function|mibEnum
name|int
name|QIsciiCodec
operator|::
name|mibEnum
parameter_list|()
specifier|const
block|{
comment|/* There is no MIBEnum for Iscii */
return|return
operator|-
literal|3000
operator|-
name|idx
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|inv
specifier|static
specifier|const
name|uchar
name|inv
init|=
literal|0xFF
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* iscii range from 0xa0 - 0xff */
end_comment
begin_decl_stmt
DECL|variable|iscii_to_uni_table
specifier|static
specifier|const
name|uchar
name|iscii_to_uni_table
index|[
literal|0x60
index|]
init|=
block|{
literal|0x00
block|,
literal|0x01
block|,
literal|0x02
block|,
literal|0x03
block|,
literal|0x05
block|,
literal|0x06
block|,
literal|0x07
block|,
literal|0x08
block|,
literal|0x09
block|,
literal|0x0a
block|,
literal|0x0b
block|,
literal|0x0e
block|,
literal|0x0f
block|,
literal|0x20
block|,
literal|0x0d
block|,
literal|0x12
block|,
literal|0x13
block|,
literal|0x14
block|,
literal|0x11
block|,
literal|0x15
block|,
literal|0x16
block|,
literal|0x17
block|,
literal|0x18
block|,
literal|0x19
block|,
literal|0x1a
block|,
literal|0x1b
block|,
literal|0x1c
block|,
literal|0x1d
block|,
literal|0x1e
block|,
literal|0x1f
block|,
literal|0x20
block|,
literal|0x21
block|,
literal|0x22
block|,
literal|0x23
block|,
literal|0x24
block|,
literal|0x25
block|,
literal|0x26
block|,
literal|0x27
block|,
literal|0x28
block|,
literal|0x29
block|,
literal|0x2a
block|,
literal|0x2b
block|,
literal|0x2c
block|,
literal|0x2d
block|,
literal|0x2e
block|,
literal|0x2f
block|,
literal|0x5f
block|,
literal|0x30
block|,
literal|0x31
block|,
literal|0x32
block|,
literal|0x33
block|,
literal|0x34
block|,
literal|0x35
block|,
literal|0x36
block|,
literal|0x37
block|,
literal|0x38
block|,
literal|0x39
block|,
name|inv
block|,
literal|0x3e
block|,
literal|0x3f
block|,
literal|0x40
block|,
literal|0x41
block|,
literal|0x42
block|,
literal|0x43
block|,
literal|0x46
block|,
literal|0x47
block|,
literal|0x48
block|,
literal|0x45
block|,
literal|0x4a
block|,
literal|0x4b
block|,
literal|0x4c
block|,
literal|0x49
block|,
literal|0x4d
block|,
literal|0x3c
block|,
literal|0x64
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x66
block|,
literal|0x67
block|,
literal|0x68
block|,
literal|0x69
block|,
literal|0x6a
block|,
literal|0x6b
block|,
literal|0x6c
block|,
literal|0x6d
block|,
literal|0x6e
block|,
literal|0x6f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|uni_to_iscii_table
specifier|static
specifier|const
name|uchar
name|uni_to_iscii_table
index|[
literal|0x80
index|]
init|=
block|{
literal|0x00
block|,
literal|0xa1
block|,
literal|0xa2
block|,
literal|0xa3
block|,
literal|0x00
block|,
literal|0xa4
block|,
literal|0xa5
block|,
literal|0xa6
block|,
literal|0xa7
block|,
literal|0xa8
block|,
literal|0xa9
block|,
literal|0xaa
block|,
literal|0x00
block|,
literal|0xae
block|,
literal|0xab
block|,
literal|0xac
block|,
literal|0xad
block|,
literal|0xb2
block|,
literal|0xaf
block|,
literal|0xb0
block|,
literal|0xb1
block|,
literal|0xb3
block|,
literal|0xb4
block|,
literal|0xb5
block|,
literal|0xb6
block|,
literal|0xb7
block|,
literal|0xb8
block|,
literal|0xb9
block|,
literal|0xba
block|,
literal|0xbb
block|,
literal|0xbc
block|,
literal|0xbd
block|,
literal|0xbe
block|,
literal|0xbf
block|,
literal|0xc0
block|,
literal|0xc1
block|,
literal|0xc2
block|,
literal|0xc3
block|,
literal|0xc4
block|,
literal|0xc5
block|,
literal|0xc6
block|,
literal|0xc7
block|,
literal|0xc8
block|,
literal|0xc9
block|,
literal|0xca
block|,
literal|0xcb
block|,
literal|0xcc
block|,
literal|0xcd
block|,
literal|0xcf
block|,
literal|0xd0
block|,
literal|0xd1
block|,
literal|0xd2
block|,
literal|0xd3
block|,
literal|0xd4
block|,
literal|0xd5
block|,
literal|0xd6
block|,
literal|0xd7
block|,
literal|0xd8
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe9
block|,
literal|0x00
block|,
literal|0xda
block|,
literal|0xdb
block|,
literal|0xdc
block|,
literal|0xdd
block|,
literal|0xde
block|,
literal|0xdf
block|,
literal|0x00
block|,
literal|0xe3
block|,
literal|0xe0
block|,
literal|0xe1
block|,
literal|0xe2
block|,
literal|0xe7
block|,
literal|0xe4
block|,
literal|0xe5
block|,
literal|0xe6
block|,
literal|0xe8
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x01
block|,
literal|0x02
block|,
literal|0x03
block|,
literal|0x04
block|,
comment|// decomposable into the uc codes listed here + nukta
literal|0x05
block|,
literal|0x06
block|,
literal|0x07
block|,
literal|0xce
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xea
block|,
literal|0x08
block|,
literal|0xf1
block|,
literal|0xf2
block|,
literal|0xf3
block|,
literal|0xf4
block|,
literal|0xf5
block|,
literal|0xf6
block|,
literal|0xf7
block|,
literal|0xf8
block|,
literal|0xf9
block|,
literal|0xfa
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|uni_to_iscii_pairs
specifier|static
specifier|const
name|uchar
name|uni_to_iscii_pairs
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x15
block|,
literal|0x3c
block|,
comment|// 0x958
literal|0x16
block|,
literal|0x3c
block|,
comment|// 0x959
literal|0x17
block|,
literal|0x3c
block|,
comment|// 0x95a
literal|0x1c
block|,
literal|0x3c
block|,
comment|// 0x95b
literal|0x21
block|,
literal|0x3c
block|,
comment|// 0x95c
literal|0x22
block|,
literal|0x3c
block|,
comment|// 0x95d
literal|0x2b
block|,
literal|0x3c
block|,
comment|// 0x95e
literal|0x64
block|,
literal|0x64
comment|// 0x965
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|convertFromUnicode
name|QByteArray
name|QIsciiCodec
operator|::
name|convertFromUnicode
parameter_list|(
specifier|const
name|QChar
modifier|*
name|uc
parameter_list|,
name|int
name|len
parameter_list|,
name|ConverterState
modifier|*
name|state
parameter_list|)
specifier|const
block|{
name|char
name|replacement
init|=
literal|'?'
decl_stmt|;
name|bool
name|halant
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|state
condition|)
block|{
if|if
condition|(
name|state
operator|->
name|flags
operator|&
name|ConvertInvalidToNull
condition|)
name|replacement
operator|=
literal|0
expr_stmt|;
name|halant
operator|=
name|state
operator|->
name|state_data
index|[
literal|0
index|]
expr_stmt|;
block|}
name|int
name|invalid
init|=
literal|0
decl_stmt|;
name|QByteArray
name|result
argument_list|(
literal|2
operator|*
name|len
argument_list|,
name|Qt
operator|::
name|Uninitialized
argument_list|)
decl_stmt|;
comment|//worst case
name|uchar
modifier|*
name|ch
init|=
cast|reinterpret_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|result
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|base
init|=
name|codecs
index|[
name|idx
index|]
operator|.
name|base
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|ushort
name|codePoint
init|=
name|uc
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
decl_stmt|;
comment|/* The low 7 bits of ISCII is plain ASCII. However, we go all the          * way up to 0xA0 such that we can roundtrip with convertToUnicode()'s          * behavior. */
if|if
condition|(
name|codePoint
operator|<
literal|0xA0
condition|)
block|{
operator|*
name|ch
operator|++
operator|=
cast|static_cast
argument_list|<
name|uchar
argument_list|>
argument_list|(
name|codePoint
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|const
name|int
name|pos
init|=
name|codePoint
operator|-
name|base
decl_stmt|;
if|if
condition|(
name|pos
operator|>
literal|0
operator|&&
name|pos
operator|<
literal|0x80
condition|)
block|{
name|uchar
name|iscii
init|=
name|uni_to_iscii_table
index|[
name|pos
index|]
decl_stmt|;
if|if
condition|(
name|iscii
operator|>
literal|0x80
condition|)
block|{
operator|*
name|ch
operator|++
operator|=
name|iscii
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|iscii
condition|)
block|{
name|Q_ASSERT
argument_list|(
operator|(
literal|2
operator|*
name|iscii
operator|)
operator|<
operator|(
sizeof|sizeof
argument_list|(
name|uni_to_iscii_pairs
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|uni_to_iscii_pairs
index|[
literal|0
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|pair
init|=
name|uni_to_iscii_pairs
operator|+
literal|2
operator|*
name|iscii
decl_stmt|;
operator|*
name|ch
operator|++
operator|=
operator|*
name|pair
operator|++
expr_stmt|;
operator|*
name|ch
operator|++
operator|=
operator|*
name|pair
operator|++
expr_stmt|;
block|}
else|else
block|{
operator|*
name|ch
operator|++
operator|=
name|replacement
expr_stmt|;
operator|++
name|invalid
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|uc
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|0x200c
condition|)
block|{
comment|// ZWNJ
if|if
condition|(
name|halant
condition|)
comment|// Consonant Halant ZWNJ -> Consonant Halant Halant
operator|*
name|ch
operator|++
operator|=
literal|0xe8
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|uc
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
operator|==
literal|0x200d
condition|)
block|{
comment|// ZWJ
if|if
condition|(
name|halant
condition|)
comment|// Consonant Halant ZWJ -> Consonant Halant Nukta
operator|*
name|ch
operator|++
operator|=
literal|0xe9
expr_stmt|;
block|}
else|else
block|{
operator|*
name|ch
operator|++
operator|=
name|replacement
expr_stmt|;
operator|++
name|invalid
expr_stmt|;
block|}
block|}
name|halant
operator|=
operator|(
name|pos
operator|==
literal|0x4d
operator|)
expr_stmt|;
block|}
name|result
operator|.
name|truncate
argument_list|(
name|ch
operator|-
operator|(
name|uchar
operator|*
operator|)
name|result
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
condition|)
block|{
name|state
operator|->
name|invalidChars
operator|+=
name|invalid
expr_stmt|;
name|state
operator|->
name|state_data
index|[
literal|0
index|]
operator|=
name|halant
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|convertToUnicode
name|QString
name|QIsciiCodec
operator|::
name|convertToUnicode
parameter_list|(
specifier|const
name|char
modifier|*
name|chars
parameter_list|,
name|int
name|len
parameter_list|,
name|ConverterState
modifier|*
name|state
parameter_list|)
specifier|const
block|{
name|bool
name|halant
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|state
condition|)
block|{
name|halant
operator|=
name|state
operator|->
name|state_data
index|[
literal|0
index|]
expr_stmt|;
block|}
name|QString
name|result
argument_list|(
name|len
argument_list|,
name|Qt
operator|::
name|Uninitialized
argument_list|)
decl_stmt|;
name|QChar
modifier|*
name|uc
init|=
name|result
operator|.
name|data
argument_list|()
decl_stmt|;
specifier|const
name|int
name|base
init|=
name|codecs
index|[
name|idx
index|]
operator|.
name|base
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|ushort
name|ch
init|=
operator|(
name|uchar
operator|)
name|chars
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|ch
operator|<
literal|0xa0
condition|)
operator|*
name|uc
operator|++
operator|=
name|ch
expr_stmt|;
else|else
block|{
name|ushort
name|c
init|=
name|iscii_to_uni_table
index|[
name|ch
operator|-
literal|0xa0
index|]
decl_stmt|;
if|if
condition|(
name|halant
operator|&&
operator|(
name|c
operator|==
name|inv
operator|||
name|c
operator|==
literal|0xe9
operator|)
condition|)
block|{
comment|// Consonant Halant inv -> Consonant Halant ZWJ
comment|// Consonant Halant Nukta -> Consonant Halant ZWJ
operator|*
name|uc
operator|++
operator|=
name|QChar
argument_list|(
literal|0x200d
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|halant
operator|&&
name|c
operator|==
literal|0xe8
condition|)
block|{
comment|// Consonant Halant Halant -> Consonant Halant ZWNJ
operator|*
name|uc
operator|++
operator|=
name|QChar
argument_list|(
literal|0x200c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|*
name|uc
operator|++
operator|=
name|QChar
argument_list|(
name|c
operator|+
name|base
argument_list|)
expr_stmt|;
block|}
block|}
name|halant
operator|=
operator|(
operator|(
name|uchar
operator|)
name|chars
index|[
name|i
index|]
operator|==
literal|0xe8
operator|)
expr_stmt|;
block|}
name|result
operator|.
name|resize
argument_list|(
name|uc
operator|-
name|result
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
condition|)
block|{
name|state
operator|->
name|state_data
index|[
literal|0
index|]
operator|=
name|halant
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CODECS
end_comment
end_unit
