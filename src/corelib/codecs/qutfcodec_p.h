begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QUTFCODEC_P_H
end_ifndef
begin_define
DECL|macro|QUTFCODEC_P_H
define|#
directive|define
name|QUTFCODEC_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtCore/qtextcodec.h"
end_include
begin_include
include|#
directive|include
file|"private/qtextcodec_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|enum|DataEndianness
name|enum
name|DataEndianness
block|{
DECL|enumerator|DetectEndianness
name|DetectEndianness
operator|,
DECL|enumerator|BigEndianness
name|BigEndianness
operator|,
DECL|enumerator|LittleEndianness
name|LittleEndianness
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_struct
DECL|struct|QUtf8
struct|struct
name|QUtf8
block|{
specifier|static
name|QString
name|convertToUnicode
argument_list|(
specifier|const
name|char
operator|*
argument_list|,
name|int
argument_list|,
name|QTextCodec
operator|::
name|ConverterState
operator|*
argument_list|)
decl_stmt|;
specifier|static
name|QByteArray
name|convertFromUnicode
argument_list|(
specifier|const
name|QChar
operator|*
argument_list|,
name|int
argument_list|,
name|QTextCodec
operator|::
name|ConverterState
operator|*
argument_list|)
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|QUtf16
struct|struct
name|QUtf16
block|{
specifier|static
name|QString
name|convertToUnicode
argument_list|(
specifier|const
name|char
operator|*
argument_list|,
name|int
argument_list|,
name|QTextCodec
operator|::
name|ConverterState
operator|*
argument_list|,
name|DataEndianness
operator|=
name|DetectEndianness
argument_list|)
decl_stmt|;
specifier|static
name|QByteArray
name|convertFromUnicode
argument_list|(
specifier|const
name|QChar
operator|*
argument_list|,
name|int
argument_list|,
name|QTextCodec
operator|::
name|ConverterState
operator|*
argument_list|,
name|DataEndianness
operator|=
name|DetectEndianness
argument_list|)
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|QUtf32
struct|struct
name|QUtf32
block|{
specifier|static
name|QString
name|convertToUnicode
argument_list|(
specifier|const
name|char
operator|*
argument_list|,
name|int
argument_list|,
name|QTextCodec
operator|::
name|ConverterState
operator|*
argument_list|,
name|DataEndianness
operator|=
name|DetectEndianness
argument_list|)
decl_stmt|;
specifier|static
name|QByteArray
name|convertFromUnicode
argument_list|(
specifier|const
name|QChar
operator|*
argument_list|,
name|int
argument_list|,
name|QTextCodec
operator|::
name|ConverterState
operator|*
argument_list|,
name|DataEndianness
operator|=
name|DetectEndianness
argument_list|)
decl_stmt|;
block|}
struct|;
end_struct
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TEXTCODEC
end_ifndef
begin_decl_stmt
name|class
name|QUtf8Codec
range|:
name|public
name|QTextCodec
block|{
name|public
operator|:
operator|~
name|QUtf8Codec
argument_list|()
block|;
name|QByteArray
name|name
argument_list|()
specifier|const
block|;
name|int
name|mibEnum
argument_list|()
specifier|const
block|;
name|QString
name|convertToUnicode
argument_list|(
argument|const char *
argument_list|,
argument|int
argument_list|,
argument|ConverterState *
argument_list|)
specifier|const
block|;
name|QByteArray
name|convertFromUnicode
argument_list|(
argument|const QChar *
argument_list|,
argument|int
argument_list|,
argument|ConverterState *
argument_list|)
specifier|const
block|;
name|void
name|convertToUnicode
argument_list|(
argument|QString *target
argument_list|,
argument|const char *
argument_list|,
argument|int
argument_list|,
argument|ConverterState *
argument_list|)
specifier|const
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QUtf16Codec
range|:
name|public
name|QTextCodec
block|{
name|protected
operator|:
name|public
operator|:
name|QUtf16Codec
argument_list|()
block|{
name|e
operator|=
name|DetectEndianness
block|; }
operator|~
name|QUtf16Codec
argument_list|()
block|;
name|QByteArray
name|name
argument_list|()
specifier|const
block|;
name|QList
operator|<
name|QByteArray
operator|>
name|aliases
argument_list|()
specifier|const
block|;
name|int
name|mibEnum
argument_list|()
specifier|const
block|;
name|QString
name|convertToUnicode
argument_list|(
argument|const char *
argument_list|,
argument|int
argument_list|,
argument|ConverterState *
argument_list|)
specifier|const
block|;
name|QByteArray
name|convertFromUnicode
argument_list|(
argument|const QChar *
argument_list|,
argument|int
argument_list|,
argument|ConverterState *
argument_list|)
specifier|const
block|;
name|protected
operator|:
name|DataEndianness
name|e
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QUtf16BECodec
range|:
name|public
name|QUtf16Codec
block|{
name|public
operator|:
name|QUtf16BECodec
argument_list|()
operator|:
name|QUtf16Codec
argument_list|()
block|{
name|e
operator|=
name|BigEndianness
block|; }
name|QByteArray
name|name
argument_list|()
specifier|const
block|;
name|QList
operator|<
name|QByteArray
operator|>
name|aliases
argument_list|()
specifier|const
block|;
name|int
name|mibEnum
argument_list|()
specifier|const
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QUtf16LECodec
range|:
name|public
name|QUtf16Codec
block|{
name|public
operator|:
name|QUtf16LECodec
argument_list|()
operator|:
name|QUtf16Codec
argument_list|()
block|{
name|e
operator|=
name|LittleEndianness
block|; }
name|QByteArray
name|name
argument_list|()
specifier|const
block|;
name|QList
operator|<
name|QByteArray
operator|>
name|aliases
argument_list|()
specifier|const
block|;
name|int
name|mibEnum
argument_list|()
specifier|const
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QUtf32Codec
range|:
name|public
name|QTextCodec
block|{
name|public
operator|:
name|QUtf32Codec
argument_list|()
block|{
name|e
operator|=
name|DetectEndianness
block|; }
operator|~
name|QUtf32Codec
argument_list|()
block|;
name|QByteArray
name|name
argument_list|()
specifier|const
block|;
name|QList
operator|<
name|QByteArray
operator|>
name|aliases
argument_list|()
specifier|const
block|;
name|int
name|mibEnum
argument_list|()
specifier|const
block|;
name|QString
name|convertToUnicode
argument_list|(
argument|const char *
argument_list|,
argument|int
argument_list|,
argument|ConverterState *
argument_list|)
specifier|const
block|;
name|QByteArray
name|convertFromUnicode
argument_list|(
argument|const QChar *
argument_list|,
argument|int
argument_list|,
argument|ConverterState *
argument_list|)
specifier|const
block|;
name|protected
operator|:
name|DataEndianness
name|e
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QUtf32BECodec
range|:
name|public
name|QUtf32Codec
block|{
name|public
operator|:
name|QUtf32BECodec
argument_list|()
operator|:
name|QUtf32Codec
argument_list|()
block|{
name|e
operator|=
name|BigEndianness
block|; }
name|QByteArray
name|name
argument_list|()
specifier|const
block|;
name|QList
operator|<
name|QByteArray
operator|>
name|aliases
argument_list|()
specifier|const
block|;
name|int
name|mibEnum
argument_list|()
specifier|const
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QUtf32LECodec
range|:
name|public
name|QUtf32Codec
block|{
name|public
operator|:
name|QUtf32LECodec
argument_list|()
operator|:
name|QUtf32Codec
argument_list|()
block|{
name|e
operator|=
name|LittleEndianness
block|; }
name|QByteArray
name|name
argument_list|()
specifier|const
block|;
name|QList
operator|<
name|QByteArray
operator|>
name|aliases
argument_list|()
specifier|const
block|;
name|int
name|mibEnum
argument_list|()
specifier|const
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TEXTCODEC
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QUTFCODEC_P_H
end_comment
end_unit
