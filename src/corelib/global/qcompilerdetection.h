begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Copyright (C) 2014 Intel Corporation ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QGLOBAL_H
end_ifndef
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QCOMPILERDETECTION_H
end_ifndef
begin_define
DECL|macro|QCOMPILERDETECTION_H
define|#
directive|define
name|QCOMPILERDETECTION_H
end_define
begin_comment
comment|/*    The compiler, must be one of: (Q_CC_x)       SYM      - Digital Mars C/C++ (used to be Symantec C++)      MSVC     - Microsoft Visual C/C++, Intel C++ for Windows      BOR      - Borland/Turbo C++      WAT      - Watcom C++      GNU      - GNU C++      COMEAU   - Comeau C++      EDG      - Edison Design Group C++      OC       - CenterLine C++      SUN      - Forte Developer, or Sun Studio C++      MIPS     - MIPSpro C++      DEC      - DEC C++      HPACC    - HP aC++      USLC     - SCO OUDK and UDK      CDS      - Reliant C++      KAI      - KAI C++      INTEL    - Intel C++ for Linux, Intel C++ for Windows      HIGHC    - MetaWare High C/C++      PGI      - Portland Group C++      GHS      - Green Hills Optimizing C++ Compilers      RVCT     - ARM Realview Compiler Suite      CLANG    - C++ front-end for the LLVM compiler      Should be sorted most to least authoritative. */
end_comment
begin_comment
comment|/* Symantec C++ is now Digital Mars */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__DMC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__SC__
argument_list|)
end_if
begin_define
DECL|macro|Q_CC_SYM
define|#
directive|define
name|Q_CC_SYM
end_define
begin_comment
comment|/* "explicit" semantics implemented in 8.1e but keyword recognized since 7.5 */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__SC__
argument_list|)
operator|&&
name|__SC__
operator|<
literal|0x750
end_if
begin_error
error|#
directive|error
literal|"Compiler not supported"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|Q_NO_USING_KEYWORD
define|#
directive|define
name|Q_NO_USING_KEYWORD
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
end_elif
begin_define
DECL|macro|Q_CC_MSVC
define|#
directive|define
name|Q_CC_MSVC
value|(_MSC_VER)
end_define
begin_define
DECL|macro|Q_CC_MSVC_NET
define|#
directive|define
name|Q_CC_MSVC_NET
end_define
begin_define
DECL|macro|Q_OUTOFLINE_TEMPLATE
define|#
directive|define
name|Q_OUTOFLINE_TEMPLATE
value|inline
end_define
begin_if
if|#
directive|if
name|_MSC_VER
operator|<
literal|1600
end_if
begin_define
DECL|macro|Q_NO_TEMPLATE_FRIENDS
define|#
directive|define
name|Q_NO_TEMPLATE_FRIENDS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|Q_COMPILER_MANGLES_RETURN_TYPE
define|#
directive|define
name|Q_COMPILER_MANGLES_RETURN_TYPE
end_define
begin_define
DECL|macro|Q_FUNC_INFO
define|#
directive|define
name|Q_FUNC_INFO
value|__FUNCSIG__
end_define
begin_define
DECL|macro|Q_ALIGNOF
define|#
directive|define
name|Q_ALIGNOF
parameter_list|(
name|type
parameter_list|)
value|__alignof(type)
end_define
begin_define
DECL|macro|Q_DECL_ALIGN
define|#
directive|define
name|Q_DECL_ALIGN
parameter_list|(
name|n
parameter_list|)
value|__declspec(align(n))
end_define
begin_define
DECL|macro|Q_ASSUME_IMPL
define|#
directive|define
name|Q_ASSUME_IMPL
parameter_list|(
name|expr
parameter_list|)
value|__assume(expr)
end_define
begin_define
DECL|macro|Q_UNREACHABLE_IMPL
define|#
directive|define
name|Q_UNREACHABLE_IMPL
parameter_list|()
value|__assume(0)
end_define
begin_define
DECL|macro|Q_NORETURN
define|#
directive|define
name|Q_NORETURN
value|__declspec(noreturn)
end_define
begin_define
DECL|macro|Q_DECL_DEPRECATED
define|#
directive|define
name|Q_DECL_DEPRECATED
value|__declspec(deprecated)
end_define
begin_define
DECL|macro|Q_DECL_DEPRECATED_X
define|#
directive|define
name|Q_DECL_DEPRECATED_X
parameter_list|(
name|text
parameter_list|)
value|__declspec(deprecated(text))
end_define
begin_define
DECL|macro|Q_DECL_EXPORT
define|#
directive|define
name|Q_DECL_EXPORT
value|__declspec(dllexport)
end_define
begin_define
DECL|macro|Q_DECL_IMPORT
define|#
directive|define
name|Q_DECL_IMPORT
value|__declspec(dllimport)
end_define
begin_comment
comment|/* Intel C++ disguising as Visual C++: the `using' keyword avoids warnings */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__INTEL_COMPILER
argument_list|)
end_if
begin_define
DECL|macro|Q_DECL_VARIABLE_DEPRECATED
define|#
directive|define
name|Q_DECL_VARIABLE_DEPRECATED
end_define
begin_define
DECL|macro|Q_CC_INTEL
define|#
directive|define
name|Q_CC_INTEL
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* only defined for MSVC since that's the only compiler that actually optimizes for this */
end_comment
begin_comment
comment|/* might get overridden further down when Q_COMPILER_NOEXCEPT is detected */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef
begin_define
DECL|macro|Q_DECL_NOTHROW
define|#
directive|define
name|Q_DECL_NOTHROW
value|throw()
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__BORLANDC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__TURBOC__
argument_list|)
end_elif
begin_define
DECL|macro|Q_CC_BOR
define|#
directive|define
name|Q_CC_BOR
end_define
begin_define
DECL|macro|Q_INLINE_TEMPLATE
define|#
directive|define
name|Q_INLINE_TEMPLATE
end_define
begin_if
if|#
directive|if
name|__BORLANDC__
operator|<
literal|0x502
end_if
begin_error
error|#
directive|error
literal|"Compiler not supported"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|Q_NO_USING_KEYWORD
define|#
directive|define
name|Q_NO_USING_KEYWORD
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__WATCOMC__
argument_list|)
end_elif
begin_define
DECL|macro|Q_CC_WAT
define|#
directive|define
name|Q_CC_WAT
end_define
begin_comment
comment|/* ARM Realview Compiler Suite    RVCT compiler also defines __EDG__ and __GNUC__ (if --gnu flag is given),    so check for it before that */
end_comment
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__ARMCC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__CC_ARM
argument_list|)
end_elif
begin_define
DECL|macro|Q_CC_RVCT
define|#
directive|define
name|Q_CC_RVCT
end_define
begin_comment
comment|/* work-around for missing compiler intrinsics */
end_comment
begin_define
DECL|macro|__is_empty
define|#
directive|define
name|__is_empty
parameter_list|(
name|X
parameter_list|)
value|false
end_define
begin_define
DECL|macro|__is_pod
define|#
directive|define
name|__is_pod
parameter_list|(
name|X
parameter_list|)
value|false
end_define
begin_define
DECL|macro|Q_DECL_DEPRECATED
define|#
directive|define
name|Q_DECL_DEPRECATED
value|__attribute__ ((__deprecated__))
end_define
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_LINUX
end_ifdef
begin_define
DECL|macro|Q_DECL_EXPORT
define|#
directive|define
name|Q_DECL_EXPORT
value|__attribute__((visibility("default")))
end_define
begin_define
DECL|macro|Q_DECL_IMPORT
define|#
directive|define
name|Q_DECL_IMPORT
value|__attribute__((visibility("default")))
end_define
begin_define
DECL|macro|Q_DECL_HIDDEN
define|#
directive|define
name|Q_DECL_HIDDEN
value|__attribute__((visibility("hidden")))
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|Q_DECL_EXPORT
define|#
directive|define
name|Q_DECL_EXPORT
value|__declspec(dllexport)
end_define
begin_define
DECL|macro|Q_DECL_IMPORT
define|#
directive|define
name|Q_DECL_IMPORT
value|__declspec(dllimport)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__GNUC__
argument_list|)
end_elif
begin_define
DECL|macro|Q_CC_GNU
define|#
directive|define
name|Q_CC_GNU
value|(__GNUC__ * 100 + __GNUC_MINOR__)
end_define
begin_define
DECL|macro|Q_C_CALLBACKS
define|#
directive|define
name|Q_C_CALLBACKS
end_define
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__MINGW32__
argument_list|)
end_if
begin_define
DECL|macro|Q_CC_MINGW
define|#
directive|define
name|Q_CC_MINGW
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__INTEL_COMPILER
argument_list|)
end_if
begin_comment
comment|/* Intel C++ also masquerades as GCC */
end_comment
begin_define
DECL|macro|Q_CC_INTEL
define|#
directive|define
name|Q_CC_INTEL
value|(__INTEL_COMPILER)
end_define
begin_define
DECL|macro|Q_ASSUME_IMPL
define|#
directive|define
name|Q_ASSUME_IMPL
parameter_list|(
name|expr
parameter_list|)
value|__assume(expr)
end_define
begin_define
DECL|macro|Q_UNREACHABLE_IMPL
define|#
directive|define
name|Q_UNREACHABLE_IMPL
parameter_list|()
value|__builtin_unreachable()
end_define
begin_if
if|#
directive|if
name|__INTEL_COMPILER
operator|>=
literal|1300
operator|&&
operator|!
name|defined
argument_list|(
name|__APPLE__
argument_list|)
end_if
begin_define
DECL|macro|Q_DECL_DEPRECATED_X
define|#
directive|define
name|Q_DECL_DEPRECATED_X
parameter_list|(
name|text
parameter_list|)
value|__attribute__ ((__deprecated__(text)))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__clang__
argument_list|)
end_elif
begin_comment
comment|/* Clang also masquerades as GCC */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__apple_build_version__
argument_list|)
end_if
begin_empty
empty|#
comment|/* http://en.wikipedia.org/wiki/Xcode#Toolchain_Versions */
end_empty
begin_if
if|#
directive|if
name|__apple_build_version__
operator|>=
literal|600051
end_if
begin_define
DECL|macro|Q_CC_CLANG
define|#
directive|define
name|Q_CC_CLANG
value|305
end_define
begin_elif
elif|#
directive|elif
name|__apple_build_version__
operator|>=
literal|503038
end_elif
begin_define
DECL|macro|Q_CC_CLANG
define|#
directive|define
name|Q_CC_CLANG
value|304
end_define
begin_elif
elif|#
directive|elif
name|__apple_build_version__
operator|>=
literal|500275
end_elif
begin_define
DECL|macro|Q_CC_CLANG
define|#
directive|define
name|Q_CC_CLANG
value|303
end_define
begin_elif
elif|#
directive|elif
name|__apple_build_version__
operator|>=
literal|425024
end_elif
begin_define
DECL|macro|Q_CC_CLANG
define|#
directive|define
name|Q_CC_CLANG
value|302
end_define
begin_elif
elif|#
directive|elif
name|__apple_build_version__
operator|>=
literal|318045
end_elif
begin_define
DECL|macro|Q_CC_CLANG
define|#
directive|define
name|Q_CC_CLANG
value|301
end_define
begin_elif
elif|#
directive|elif
name|__apple_build_version__
operator|>=
literal|211101
end_elif
begin_define
DECL|macro|Q_CC_CLANG
define|#
directive|define
name|Q_CC_CLANG
value|300
end_define
begin_else
else|#
directive|else
end_else
begin_error
error|#
directive|error
literal|"Unknown Apple Clang version"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|Q_CC_CLANG
define|#
directive|define
name|Q_CC_CLANG
value|((__clang_major__ * 100) + __clang_minor__)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|Q_ASSUME_IMPL
define|#
directive|define
name|Q_ASSUME_IMPL
parameter_list|(
name|expr
parameter_list|)
value|if (expr){} else __builtin_unreachable()
end_define
begin_define
DECL|macro|Q_UNREACHABLE_IMPL
define|#
directive|define
name|Q_UNREACHABLE_IMPL
parameter_list|()
value|__builtin_unreachable()
end_define
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__has_extension
argument_list|)
end_if
begin_empty
empty|#
comment|/* Compatibility with older Clang versions */
end_empty
begin_define
DECL|macro|__has_extension
define|#
directive|define
name|__has_extension
value|__has_feature
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__APPLE__
argument_list|)
end_if
begin_comment
comment|/* Apple/clang specific features */
end_comment
begin_define
DECL|macro|Q_DECL_CF_RETURNS_RETAINED
define|#
directive|define
name|Q_DECL_CF_RETURNS_RETAINED
value|__attribute__((cf_returns_retained))
end_define
begin_ifdef
ifdef|#
directive|ifdef
name|__OBJC__
end_ifdef
begin_define
DECL|macro|Q_DECL_NS_RETURNS_AUTORELEASED
define|#
directive|define
name|Q_DECL_NS_RETURNS_AUTORELEASED
value|__attribute__((ns_returns_autoreleased))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_else
else|#
directive|else
end_else
begin_comment
comment|/* Plain GCC */
end_comment
begin_if
if|#
directive|if
name|Q_CC_GNU
operator|>=
literal|405
end_if
begin_define
DECL|macro|Q_ASSUME_IMPL
define|#
directive|define
name|Q_ASSUME_IMPL
parameter_list|(
name|expr
parameter_list|)
value|if (expr){} else __builtin_unreachable()
end_define
begin_define
DECL|macro|Q_UNREACHABLE_IMPL
define|#
directive|define
name|Q_UNREACHABLE_IMPL
parameter_list|()
value|__builtin_unreachable()
end_define
begin_define
DECL|macro|Q_DECL_DEPRECATED_X
define|#
directive|define
name|Q_DECL_DEPRECATED_X
parameter_list|(
name|text
parameter_list|)
value|__attribute__ ((__deprecated__(text)))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_define
DECL|macro|Q_DECL_EXPORT
define|#
directive|define
name|Q_DECL_EXPORT
value|__declspec(dllexport)
end_define
begin_define
DECL|macro|Q_DECL_IMPORT
define|#
directive|define
name|Q_DECL_IMPORT
value|__declspec(dllimport)
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|QT_VISIBILITY_AVAILABLE
argument_list|)
end_elif
begin_define
DECL|macro|Q_DECL_EXPORT
define|#
directive|define
name|Q_DECL_EXPORT
value|__attribute__((visibility("default")))
end_define
begin_define
DECL|macro|Q_DECL_IMPORT
define|#
directive|define
name|Q_DECL_IMPORT
value|__attribute__((visibility("default")))
end_define
begin_define
DECL|macro|Q_DECL_HIDDEN
define|#
directive|define
name|Q_DECL_HIDDEN
value|__attribute__((visibility("hidden")))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|Q_FUNC_INFO
define|#
directive|define
name|Q_FUNC_INFO
value|__PRETTY_FUNCTION__
end_define
begin_define
DECL|macro|Q_ALIGNOF
define|#
directive|define
name|Q_ALIGNOF
parameter_list|(
name|type
parameter_list|)
value|__alignof__(type)
end_define
begin_define
DECL|macro|Q_TYPEOF
define|#
directive|define
name|Q_TYPEOF
parameter_list|(
name|expr
parameter_list|)
value|__typeof__(expr)
end_define
begin_define
DECL|macro|Q_DECL_DEPRECATED
define|#
directive|define
name|Q_DECL_DEPRECATED
value|__attribute__ ((__deprecated__))
end_define
begin_define
DECL|macro|Q_DECL_ALIGN
define|#
directive|define
name|Q_DECL_ALIGN
parameter_list|(
name|n
parameter_list|)
value|__attribute__((__aligned__(n)))
end_define
begin_define
DECL|macro|Q_DECL_UNUSED
define|#
directive|define
name|Q_DECL_UNUSED
value|__attribute__((__unused__))
end_define
begin_define
DECL|macro|Q_LIKELY
define|#
directive|define
name|Q_LIKELY
parameter_list|(
name|expr
parameter_list|)
value|__builtin_expect(!!(expr), true)
end_define
begin_define
DECL|macro|Q_UNLIKELY
define|#
directive|define
name|Q_UNLIKELY
parameter_list|(
name|expr
parameter_list|)
value|__builtin_expect(!!(expr), false)
end_define
begin_define
DECL|macro|Q_NORETURN
define|#
directive|define
name|Q_NORETURN
value|__attribute__((__noreturn__))
end_define
begin_define
DECL|macro|Q_REQUIRED_RESULT
define|#
directive|define
name|Q_REQUIRED_RESULT
value|__attribute__ ((__warn_unused_result__))
end_define
begin_define
DECL|macro|Q_DECL_PURE_FUNCTION
define|#
directive|define
name|Q_DECL_PURE_FUNCTION
value|__attribute__((pure))
end_define
begin_define
DECL|macro|Q_DECL_CONST_FUNCTION
define|#
directive|define
name|Q_DECL_CONST_FUNCTION
value|__attribute__((const))
end_define
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_MOC_CPP
argument_list|)
end_if
begin_define
DECL|macro|Q_PACKED
define|#
directive|define
name|Q_PACKED
value|__attribute__ ((__packed__))
end_define
begin_ifndef
ifndef|#
directive|ifndef
name|__ARM_EABI__
end_ifndef
begin_define
DECL|macro|QT_NO_ARM_EABI
define|#
directive|define
name|QT_NO_ARM_EABI
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|Q_CC_GNU
operator|>=
literal|403
operator|&&
operator|!
name|defined
argument_list|(
name|Q_CC_CLANG
argument_list|)
end_if
begin_define
DECL|macro|Q_ALLOC_SIZE
define|#
directive|define
name|Q_ALLOC_SIZE
parameter_list|(
name|x
parameter_list|)
value|__attribute__((alloc_size(x)))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* IBM compiler versions are a bit messy. There are actually two products:    the C product, and the C++ product. The C++ compiler is always packaged    with the latest version of the C compiler. Version numbers do not always    match. This little table (I'm not sure it's accurate) should be helpful:     C++ product                C product     C Set 3.1                  C Compiler 3.0    ...                        ...    C++ Compiler 3.6.6         C Compiler 4.3    ...                        ...    Visual Age C++ 4.0         ...    ...                        ...    Visual Age C++ 5.0         C Compiler 5.0    ...                        ...    Visual Age C++ 6.0         C Compiler 6.0     Now:    __xlC__    is the version of the C compiler in hexadecimal notation               is only an approximation of the C++ compiler version    __IBMCPP__ is the version of the C++ compiler in decimal notation               but it is not defined on older compilers like C Set 3.1 */
end_comment
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__xlC__
argument_list|)
end_elif
begin_define
DECL|macro|Q_CC_XLC
define|#
directive|define
name|Q_CC_XLC
end_define
begin_define
DECL|macro|Q_FULL_TEMPLATE_INSTANTIATION
define|#
directive|define
name|Q_FULL_TEMPLATE_INSTANTIATION
end_define
begin_if
if|#
directive|if
name|__xlC__
operator|<
literal|0x400
end_if
begin_error
error|#
directive|error
literal|"Compiler not supported"
end_error
begin_elif
elif|#
directive|elif
name|__xlC__
operator|>=
literal|0x0600
end_elif
begin_define
DECL|macro|Q_ALIGNOF
define|#
directive|define
name|Q_ALIGNOF
parameter_list|(
name|type
parameter_list|)
value|__alignof__(type)
end_define
begin_define
DECL|macro|Q_TYPEOF
define|#
directive|define
name|Q_TYPEOF
parameter_list|(
name|expr
parameter_list|)
value|__typeof__(expr)
end_define
begin_define
DECL|macro|Q_DECL_ALIGN
define|#
directive|define
name|Q_DECL_ALIGN
parameter_list|(
name|n
parameter_list|)
value|__attribute__((__aligned__(n)))
end_define
begin_define
DECL|macro|Q_PACKED
define|#
directive|define
name|Q_PACKED
value|__attribute__((__packed__))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* Older versions of DEC C++ do not define __EDG__ or __EDG - observed    on DEC C++ V5.5-004. New versions do define  __EDG__ - observed on    Compaq C++ V6.3-002.    This compiler is different enough from other EDG compilers to handle    it separately anyway. */
end_comment
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__DECCXX
argument_list|)
operator|||
name|defined
argument_list|(
name|__DECC
argument_list|)
end_elif
begin_define
DECL|macro|Q_CC_DEC
define|#
directive|define
name|Q_CC_DEC
end_define
begin_comment
comment|/* Compaq C++ V6 compilers are EDG-based but I'm not sure about older    DEC C++ V5 compilers. */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__EDG__
argument_list|)
end_if
begin_define
DECL|macro|Q_CC_EDG
define|#
directive|define
name|Q_CC_EDG
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* Compaq has disabled EDG's _BOOL macro and uses _BOOL_EXISTS instead    - observed on Compaq C++ V6.3-002.    In any case versions prior to Compaq C++ V6.0-005 do not have bool. */
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_BOOL_EXISTS
argument_list|)
end_if
begin_error
error|#
directive|error
literal|"Compiler not supported"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* Spurious (?) error messages observed on Compaq C++ V6.5-014. */
end_comment
begin_define
DECL|macro|Q_NO_USING_KEYWORD
define|#
directive|define
name|Q_NO_USING_KEYWORD
end_define
begin_comment
comment|/* Apply to all versions prior to Compaq C++ V6.0-000 - observed on    DEC C++ V5.5-004. */
end_comment
begin_if
if|#
directive|if
name|__DECCXX_VER
operator|<
literal|60060000
end_if
begin_define
DECL|macro|Q_BROKEN_TEMPLATE_SPECIALIZATION
define|#
directive|define
name|Q_BROKEN_TEMPLATE_SPECIALIZATION
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* avoid undefined symbol problems with out-of-line template members */
end_comment
begin_define
DECL|macro|Q_OUTOFLINE_TEMPLATE
define|#
directive|define
name|Q_OUTOFLINE_TEMPLATE
value|inline
end_define
begin_comment
comment|/* The Portland Group C++ compiler is based on EDG and does define __EDG__    but the C compiler does not */
end_comment
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__PGI
argument_list|)
end_elif
begin_define
DECL|macro|Q_CC_PGI
define|#
directive|define
name|Q_CC_PGI
end_define
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__EDG__
argument_list|)
end_if
begin_define
DECL|macro|Q_CC_EDG
define|#
directive|define
name|Q_CC_EDG
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* Compilers with EDG front end are similar. To detect them we test:    __EDG documented by SGI, observed on MIPSpro 7.3.1.1 and KAI C++ 4.0b    __EDG__ documented in EDG online docs, observed on Compaq C++ V6.3-002    and PGI C++ 5.2-4 */
end_comment
begin_elif
elif|#
directive|elif
operator|!
name|defined
argument_list|(
name|Q_OS_HPUX
argument_list|)
operator|&&
operator|(
name|defined
argument_list|(
name|__EDG
argument_list|)
operator|||
name|defined
argument_list|(
name|__EDG__
argument_list|)
operator|)
end_elif
begin_define
DECL|macro|Q_CC_EDG
define|#
directive|define
name|Q_CC_EDG
end_define
begin_comment
comment|/* From the EDG documentation (does not seem to apply to Compaq C++):    _BOOL         Defined in C++ mode when bool is a keyword. The name of this         predefined macro is specified by a configuration flag. _BOOL         is the default.    __BOOL_DEFINED         Defined in Microsoft C++ mode when bool is a keyword. */
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_BOOL
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__BOOL_DEFINED
argument_list|)
end_if
begin_error
error|#
directive|error
literal|"Compiler not supported"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* The Comeau compiler is based on EDG and does define __EDG__ */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__COMO__
argument_list|)
end_if
begin_define
DECL|macro|Q_CC_COMEAU
define|#
directive|define
name|Q_CC_COMEAU
end_define
begin_define
DECL|macro|Q_C_CALLBACKS
define|#
directive|define
name|Q_C_CALLBACKS
end_define
begin_comment
comment|/* The `using' keyword was introduced to avoid KAI C++ warnings    but it's now causing KAI C++ errors instead. The standard is    unclear about the use of this keyword, and in practice every    compiler is using its own set of rules. Forget it. */
end_comment
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__KCC
argument_list|)
end_elif
begin_define
DECL|macro|Q_CC_KAI
define|#
directive|define
name|Q_CC_KAI
end_define
begin_define
DECL|macro|Q_NO_USING_KEYWORD
define|#
directive|define
name|Q_NO_USING_KEYWORD
end_define
begin_comment
comment|/* Using the `using' keyword avoids Intel C++ for Linux warnings */
end_comment
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__INTEL_COMPILER
argument_list|)
end_elif
begin_define
DECL|macro|Q_CC_INTEL
define|#
directive|define
name|Q_CC_INTEL
value|(__INTEL_COMPILER)
end_define
begin_comment
comment|/* Uses CFront, make sure to read the manual how to tweak templates. */
end_comment
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__ghs
argument_list|)
end_elif
begin_define
DECL|macro|Q_CC_GHS
define|#
directive|define
name|Q_CC_GHS
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__DCC__
argument_list|)
end_elif
begin_define
DECL|macro|Q_CC_DIAB
define|#
directive|define
name|Q_CC_DIAB
end_define
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__bool
argument_list|)
end_if
begin_error
error|#
directive|error
literal|"Compiler not supported"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* The UnixWare 7 UDK compiler is based on EDG and does define __EDG__ */
end_comment
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__USLC__
argument_list|)
operator|&&
name|defined
argument_list|(
name|__SCO_VERSION__
argument_list|)
end_elif
begin_define
DECL|macro|Q_CC_USLC
define|#
directive|define
name|Q_CC_USLC
end_define
begin_comment
comment|/* The latest UDK 7.1.1b does not need this, but previous versions do */
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__SCO_VERSION__
argument_list|)
operator|||
operator|(
name|__SCO_VERSION__
operator|<
literal|302200010
operator|)
end_if
begin_define
DECL|macro|Q_OUTOFLINE_TEMPLATE
define|#
directive|define
name|Q_OUTOFLINE_TEMPLATE
value|inline
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|Q_NO_USING_KEYWORD
define|#
directive|define
name|Q_NO_USING_KEYWORD
end_define
begin_comment
DECL|macro|Q_NO_USING_KEYWORD
comment|/* ### check "using" status */
end_comment
begin_comment
comment|/* Never tested! */
end_comment
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|CENTERLINE_CLPP
argument_list|)
operator|||
name|defined
argument_list|(
name|OBJECTCENTER
argument_list|)
end_elif
begin_define
DECL|macro|Q_CC_OC
define|#
directive|define
name|Q_CC_OC
end_define
begin_define
DECL|macro|Q_NO_USING_KEYWORD
define|#
directive|define
name|Q_NO_USING_KEYWORD
end_define
begin_comment
comment|/* CDS++ defines __EDG__ although this is not documented in the Reliant    documentation. It also follows conventions like _BOOL and this documented */
end_comment
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|sinix
argument_list|)
end_elif
begin_define
DECL|macro|Q_CC_CDS
define|#
directive|define
name|Q_CC_CDS
end_define
begin_define
DECL|macro|Q_NO_USING_KEYWORD
define|#
directive|define
name|Q_NO_USING_KEYWORD
end_define
begin_comment
comment|/* The MIPSpro compiler defines __EDG */
end_comment
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__sgi
argument_list|)
end_elif
begin_define
DECL|macro|Q_CC_MIPS
define|#
directive|define
name|Q_CC_MIPS
end_define
begin_define
DECL|macro|Q_NO_USING_KEYWORD
define|#
directive|define
name|Q_NO_USING_KEYWORD
end_define
begin_comment
DECL|macro|Q_NO_USING_KEYWORD
comment|/* ### check "using" status */
end_comment
begin_define
DECL|macro|Q_NO_TEMPLATE_FRIENDS
define|#
directive|define
name|Q_NO_TEMPLATE_FRIENDS
end_define
begin_if
if|#
directive|if
name|defined
argument_list|(
name|_COMPILER_VERSION
argument_list|)
operator|&&
operator|(
name|_COMPILER_VERSION
operator|>=
literal|740
operator|)
end_if
begin_define
DECL|macro|Q_OUTOFLINE_TEMPLATE
define|#
directive|define
name|Q_OUTOFLINE_TEMPLATE
value|inline
end_define
begin_pragma
pragma|#
directive|pragma
name|set
name|woff
name|3624
name|,
name|3625
name|,
name|3649
end_pragma
begin_comment
comment|/* turn off some harmless warnings */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* VxWorks' DIAB toolchain has an additional EDG type C++ compiler    (see __DCC__ above). This one is for C mode files (__EDG is not defined) */
end_comment
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|_DIAB_TOOL
argument_list|)
end_elif
begin_define
DECL|macro|Q_CC_DIAB
define|#
directive|define
name|Q_CC_DIAB
end_define
begin_define
DECL|macro|Q_FUNC_INFO
define|#
directive|define
name|Q_FUNC_INFO
value|__PRETTY_FUNCTION__
end_define
begin_comment
comment|/* Never tested! */
end_comment
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__HIGHC__
argument_list|)
end_elif
begin_define
DECL|macro|Q_CC_HIGHC
define|#
directive|define
name|Q_CC_HIGHC
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__SUNPRO_CC
argument_list|)
operator|||
name|defined
argument_list|(
name|__SUNPRO_C
argument_list|)
end_elif
begin_define
DECL|macro|Q_CC_SUN
define|#
directive|define
name|Q_CC_SUN
end_define
begin_define
DECL|macro|Q_COMPILER_MANGLES_RETURN_TYPE
define|#
directive|define
name|Q_COMPILER_MANGLES_RETURN_TYPE
end_define
begin_comment
comment|/* 5.0 compiler or better     'bool' is enabled by default but can be disabled using -features=nobool     in which case _BOOL is not defined         this is the default in 4.2 compatibility mode triggered by -compat=4 */
end_comment
begin_if
if|#
directive|if
name|__SUNPRO_CC
operator|>=
literal|0x500
end_if
begin_define
DECL|macro|QT_NO_TEMPLATE_TEMPLATE_PARAMETERS
define|#
directive|define
name|QT_NO_TEMPLATE_TEMPLATE_PARAMETERS
end_define
begin_comment
comment|/* see http://developers.sun.com/sunstudio/support/Ccompare.html */
end_comment
begin_if
if|#
directive|if
name|__SUNPRO_CC
operator|>=
literal|0x590
end_if
begin_define
DECL|macro|Q_ALIGNOF
define|#
directive|define
name|Q_ALIGNOF
parameter_list|(
name|type
parameter_list|)
value|__alignof__(type)
end_define
begin_define
DECL|macro|Q_TYPEOF
define|#
directive|define
name|Q_TYPEOF
parameter_list|(
name|expr
parameter_list|)
value|__typeof__(expr)
end_define
begin_define
DECL|macro|Q_DECL_ALIGN
define|#
directive|define
name|Q_DECL_ALIGN
parameter_list|(
name|n
parameter_list|)
value|__attribute__((__aligned__(n)))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__SUNPRO_CC
operator|>=
literal|0x550
end_if
begin_define
DECL|macro|Q_DECL_EXPORT
define|#
directive|define
name|Q_DECL_EXPORT
value|__global
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__SUNPRO_CC
operator|<
literal|0x5a0
end_if
begin_define
DECL|macro|Q_NO_TEMPLATE_FRIENDS
define|#
directive|define
name|Q_NO_TEMPLATE_FRIENDS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_BOOL
argument_list|)
end_if
begin_error
error|#
directive|error
literal|"Compiler not supported"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__SUNPRO_CC_COMPAT
argument_list|)
operator|&&
operator|(
name|__SUNPRO_CC_COMPAT
operator|<=
literal|4
operator|)
end_if
begin_define
DECL|macro|Q_NO_USING_KEYWORD
define|#
directive|define
name|Q_NO_USING_KEYWORD
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|Q_C_CALLBACKS
define|#
directive|define
name|Q_C_CALLBACKS
end_define
begin_comment
comment|/* 4.2 compiler or older */
end_comment
begin_else
else|#
directive|else
end_else
begin_error
error|#
directive|error
literal|"Compiler not supported"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* CDS++ does not seem to define __EDG__ or __EDG according to Reliant    documentation but nevertheless uses EDG conventions like _BOOL */
end_comment
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|sinix
argument_list|)
end_elif
begin_define
DECL|macro|Q_CC_EDG
define|#
directive|define
name|Q_CC_EDG
end_define
begin_define
DECL|macro|Q_CC_CDS
define|#
directive|define
name|Q_CC_CDS
end_define
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_BOOL
argument_list|)
end_if
begin_error
error|#
directive|error
literal|"Compiler not supported"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|Q_BROKEN_TEMPLATE_SPECIALIZATION
define|#
directive|define
name|Q_BROKEN_TEMPLATE_SPECIALIZATION
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_HPUX
argument_list|)
end_elif
begin_comment
comment|/* __HP_aCC was not defined in first aCC releases */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__HP_aCC
argument_list|)
operator|||
name|__cplusplus
operator|>=
literal|199707L
end_if
begin_define
DECL|macro|Q_NO_TEMPLATE_FRIENDS
define|#
directive|define
name|Q_NO_TEMPLATE_FRIENDS
end_define
begin_define
DECL|macro|Q_CC_HPACC
define|#
directive|define
name|Q_CC_HPACC
end_define
begin_define
DECL|macro|Q_FUNC_INFO
define|#
directive|define
name|Q_FUNC_INFO
value|__PRETTY_FUNCTION__
end_define
begin_if
if|#
directive|if
name|__HP_aCC
operator|-
literal|0
operator|<
literal|060000
end_if
begin_define
DECL|macro|QT_NO_TEMPLATE_TEMPLATE_PARAMETERS
define|#
directive|define
name|QT_NO_TEMPLATE_TEMPLATE_PARAMETERS
end_define
begin_define
DECL|macro|Q_DECL_EXPORT
define|#
directive|define
name|Q_DECL_EXPORT
value|__declspec(dllexport)
end_define
begin_define
DECL|macro|Q_DECL_IMPORT
define|#
directive|define
name|Q_DECL_IMPORT
value|__declspec(dllimport)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__HP_aCC
operator|-
literal|0
operator|>=
literal|061200
end_if
begin_define
DECL|macro|Q_DECL_ALIGN
define|#
directive|define
name|Q_DECL_ALIGN
parameter_list|(
name|n
parameter_list|)
value|__attribute__((aligned(n)))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__HP_aCC
operator|-
literal|0
operator|>=
literal|062000
end_if
begin_define
DECL|macro|Q_DECL_EXPORT
define|#
directive|define
name|Q_DECL_EXPORT
value|__attribute__((visibility("default")))
end_define
begin_define
DECL|macro|Q_DECL_HIDDEN
define|#
directive|define
name|Q_DECL_HIDDEN
value|__attribute__((visibility("hidden")))
end_define
begin_define
DECL|macro|Q_DECL_IMPORT
define|#
directive|define
name|Q_DECL_IMPORT
value|Q_DECL_EXPORT
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_else
else|#
directive|else
end_else
begin_error
error|#
directive|error
literal|"Compiler not supported"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|Q_NO_USING_KEYWORD
define|#
directive|define
name|Q_NO_USING_KEYWORD
end_define
begin_comment
DECL|macro|Q_NO_USING_KEYWORD
comment|/* ### check "using" status */
end_comment
begin_else
else|#
directive|else
end_else
begin_error
error|#
directive|error
literal|"Qt has not been tested with this compiler - see http://www.qt-project.org/"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*  * C++11 support  *  *  Paper           Macro                               SD-6 macro  *  N2341           Q_COMPILER_ALIGNAS  *  N2341           Q_COMPILER_ALIGNOF  *  N2427           Q_COMPILER_ATOMICS  *  N2761           Q_COMPILER_ATTRIBUTES               __cpp_attributes = 200809  *  N2541           Q_COMPILER_AUTO_FUNCTION  *  N1984 N2546     Q_COMPILER_AUTO_TYPE  *  N2437           Q_COMPILER_CLASS_ENUM  *  N2235           Q_COMPILER_CONSTEXPR                __cpp_constexpr = 200704  *  N2343 N3276     Q_COMPILER_DECLTYPE                 __cpp_decltype = 200707  *  N2346           Q_COMPILER_DEFAULT_MEMBERS  *  N2346           Q_COMPILER_DELETE_MEMBERS  *  N1986           Q_COMPILER_DELEGATING_CONSTRUCTORS  *  N2437           Q_COMPILER_EXPLICIT_CONVERSIONS  *  N3206 N3272     Q_COMPILER_EXPLICIT_OVERRIDES  *  N1987           Q_COMPILER_EXTERN_TEMPLATES  *  N2540           Q_COMPILER_INHERITING_CONSTRUCTORS  *  N2672           Q_COMPILER_INITIALIZER_LISTS  *  N2658 N2927     Q_COMPILER_LAMBDA                   __cpp_lambdas = 200907  *  N2756           Q_COMPILER_NONSTATIC_MEMBER_INIT  *  N2855 N3050     Q_COMPILER_NOEXCEPT  *  N2431           Q_COMPILER_NULLPTR  *  N2930           Q_COMPILER_RANGE_FOR  *  N2442           Q_COMPILER_RAW_STRINGS              __cpp_raw_strings = 200710  *  N2439           Q_COMPILER_REF_QUALIFIERS  *  N2118 N2844 N3053 Q_COMPILER_RVALUE_REFS            __cpp_rvalue_references = 200610  *  N1720           Q_COMPILER_STATIC_ASSERT            __cpp_static_assert = 200410  *  N2258           Q_COMPILER_TEMPLATE_ALIAS  *  N2659           Q_COMPILER_THREAD_LOCAL  *  N2660           Q_COMPILER_THREADSAFE_STATICS  *  N2765           Q_COMPILER_UDL                      __cpp_user_defined_literals = 200809  *  N2442           Q_COMPILER_UNICODE_STRINGS          __cpp_unicode_literals = 200710  *  N2640           Q_COMPILER_UNIFORM_INIT  *  N2544           Q_COMPILER_UNRESTRICTED_UNIONS  *  N1653           Q_COMPILER_VARIADIC_MACROS  *  N2242 N2555     Q_COMPILER_VARIADIC_TEMPLATES       __cpp_variadic_templates = 200704  *  * For any future version of the C++ standard, we use only the SD-6 macro.  * For full listing, see  *  http://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations  *  * C++ extensions:  *  Q_COMPILER_RESTRICTED_VLA       variable-length arrays, prior to __cpp_runtime_arrays  */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_CC_INTEL
end_ifdef
begin_define
DECL|macro|Q_COMPILER_RESTRICTED_VLA
define|#
directive|define
name|Q_COMPILER_RESTRICTED_VLA
end_define
begin_define
DECL|macro|Q_COMPILER_VARIADIC_MACROS
define|#
directive|define
name|Q_COMPILER_VARIADIC_MACROS
end_define
begin_comment
DECL|macro|Q_COMPILER_VARIADIC_MACROS
comment|// C++11 feature supported as an extension in other modes, too
end_comment
begin_define
DECL|macro|Q_COMPILER_THREADSAFE_STATICS
define|#
directive|define
name|Q_COMPILER_THREADSAFE_STATICS
end_define
begin_if
if|#
directive|if
name|__INTEL_COMPILER
operator|<
literal|1200
end_if
begin_define
DECL|macro|Q_NO_TEMPLATE_FRIENDS
define|#
directive|define
name|Q_NO_TEMPLATE_FRIENDS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__INTEL_COMPILER
operator|>=
literal|1310
operator|&&
operator|!
name|defined
argument_list|(
name|_WIN32
argument_list|)
end_if
begin_comment
comment|//    ICC supports C++14 binary literals in C, C++98, and C++11 modes
end_comment
begin_comment
comment|//    at least since 13.1, but I can't test further back
end_comment
begin_define
DECL|macro|Q_COMPILER_BINARY_LITERALS
define|#
directive|define
name|Q_COMPILER_BINARY_LITERALS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__cplusplus
operator|>=
literal|201103L
end_if
begin_if
if|#
directive|if
name|__INTEL_COMPILER
operator|>=
literal|1200
end_if
begin_define
DECL|macro|Q_COMPILER_AUTO_TYPE
define|#
directive|define
name|Q_COMPILER_AUTO_TYPE
end_define
begin_define
DECL|macro|Q_COMPILER_CLASS_ENUM
define|#
directive|define
name|Q_COMPILER_CLASS_ENUM
end_define
begin_define
DECL|macro|Q_COMPILER_DECLTYPE
define|#
directive|define
name|Q_COMPILER_DECLTYPE
end_define
begin_define
DECL|macro|Q_COMPILER_DEFAULT_MEMBERS
define|#
directive|define
name|Q_COMPILER_DEFAULT_MEMBERS
end_define
begin_define
DECL|macro|Q_COMPILER_DELETE_MEMBERS
define|#
directive|define
name|Q_COMPILER_DELETE_MEMBERS
end_define
begin_define
DECL|macro|Q_COMPILER_EXTERN_TEMPLATES
define|#
directive|define
name|Q_COMPILER_EXTERN_TEMPLATES
end_define
begin_define
DECL|macro|Q_COMPILER_LAMBDA
define|#
directive|define
name|Q_COMPILER_LAMBDA
end_define
begin_define
DECL|macro|Q_COMPILER_RVALUE_REFS
define|#
directive|define
name|Q_COMPILER_RVALUE_REFS
end_define
begin_define
DECL|macro|Q_COMPILER_STATIC_ASSERT
define|#
directive|define
name|Q_COMPILER_STATIC_ASSERT
end_define
begin_define
DECL|macro|Q_COMPILER_VARIADIC_MACROS
define|#
directive|define
name|Q_COMPILER_VARIADIC_MACROS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__INTEL_COMPILER
operator|>=
literal|1210
end_if
begin_define
DECL|macro|Q_COMPILER_ATTRIBUTES
define|#
directive|define
name|Q_COMPILER_ATTRIBUTES
end_define
begin_define
DECL|macro|Q_COMPILER_AUTO_FUNCTION
define|#
directive|define
name|Q_COMPILER_AUTO_FUNCTION
end_define
begin_define
DECL|macro|Q_COMPILER_NULLPTR
define|#
directive|define
name|Q_COMPILER_NULLPTR
end_define
begin_define
DECL|macro|Q_COMPILER_TEMPLATE_ALIAS
define|#
directive|define
name|Q_COMPILER_TEMPLATE_ALIAS
end_define
begin_define
DECL|macro|Q_COMPILER_UNICODE_STRINGS
define|#
directive|define
name|Q_COMPILER_UNICODE_STRINGS
end_define
begin_define
DECL|macro|Q_COMPILER_VARIADIC_TEMPLATES
define|#
directive|define
name|Q_COMPILER_VARIADIC_TEMPLATES
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__INTEL_COMPILER
operator|>=
literal|1300
end_if
begin_define
DECL|macro|Q_COMPILER_ATOMICS
define|#
directive|define
name|Q_COMPILER_ATOMICS
end_define
begin_comment
comment|//       constexpr support is only partial
end_comment
begin_comment
comment|//#      define Q_COMPILER_CONSTEXPR
end_comment
begin_define
DECL|macro|Q_COMPILER_INITIALIZER_LISTS
define|#
directive|define
name|Q_COMPILER_INITIALIZER_LISTS
end_define
begin_define
DECL|macro|Q_COMPILER_UNIFORM_INIT
define|#
directive|define
name|Q_COMPILER_UNIFORM_INIT
end_define
begin_define
DECL|macro|Q_COMPILER_NOEXCEPT
define|#
directive|define
name|Q_COMPILER_NOEXCEPT
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__INTEL_COMPILER
operator|>=
literal|1400
end_if
begin_comment
comment|//       causes issues with QArrayData and QtPrivate::RefCount - Intel issue ID 6000056211, bug DPD200534796
end_comment
begin_comment
comment|//#      define Q_COMPILER_CONSTEXPR
end_comment
begin_define
DECL|macro|Q_COMPILER_DELEGATING_CONSTRUCTORS
define|#
directive|define
name|Q_COMPILER_DELEGATING_CONSTRUCTORS
end_define
begin_define
DECL|macro|Q_COMPILER_EXPLICIT_CONVERSIONS
define|#
directive|define
name|Q_COMPILER_EXPLICIT_CONVERSIONS
end_define
begin_define
DECL|macro|Q_COMPILER_EXPLICIT_OVERRIDES
define|#
directive|define
name|Q_COMPILER_EXPLICIT_OVERRIDES
end_define
begin_define
DECL|macro|Q_COMPILER_NONSTATIC_MEMBER_INIT
define|#
directive|define
name|Q_COMPILER_NONSTATIC_MEMBER_INIT
end_define
begin_define
DECL|macro|Q_COMPILER_RANGE_FOR
define|#
directive|define
name|Q_COMPILER_RANGE_FOR
end_define
begin_define
DECL|macro|Q_COMPILER_RAW_STRINGS
define|#
directive|define
name|Q_COMPILER_RAW_STRINGS
end_define
begin_define
DECL|macro|Q_COMPILER_REF_QUALIFIERS
define|#
directive|define
name|Q_COMPILER_REF_QUALIFIERS
end_define
begin_define
DECL|macro|Q_COMPILER_UNRESTRICTED_UNIONS
define|#
directive|define
name|Q_COMPILER_UNRESTRICTED_UNIONS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__INTEL_COMPILER
operator|>=
literal|1500
end_if
begin_define
DECL|macro|Q_COMPILER_ALIGNAS
define|#
directive|define
name|Q_COMPILER_ALIGNAS
end_define
begin_define
DECL|macro|Q_COMPILER_ALIGNOF
define|#
directive|define
name|Q_COMPILER_ALIGNOF
end_define
begin_define
DECL|macro|Q_COMPILER_INHERITING_CONSTRUCTORS
define|#
directive|define
name|Q_COMPILER_INHERITING_CONSTRUCTORS
end_define
begin_define
DECL|macro|Q_COMPILER_THREAD_LOCAL
define|#
directive|define
name|Q_COMPILER_THREAD_LOCAL
end_define
begin_define
DECL|macro|Q_COMPILER_UDL
define|#
directive|define
name|Q_COMPILER_UDL
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_CLANG
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_CC_INTEL
argument_list|)
end_if
begin_comment
comment|/* General C++ features */
end_comment
begin_define
DECL|macro|Q_COMPILER_RESTRICTED_VLA
define|#
directive|define
name|Q_COMPILER_RESTRICTED_VLA
end_define
begin_define
DECL|macro|Q_COMPILER_THREADSAFE_STATICS
define|#
directive|define
name|Q_COMPILER_THREADSAFE_STATICS
end_define
begin_if
if|#
directive|if
operator|!
name|__has_feature
argument_list|(
name|cxx_exceptions
argument_list|)
end_if
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_EXCEPTIONS
end_ifndef
begin_define
DECL|macro|QT_NO_EXCEPTIONS
define|#
directive|define
name|QT_NO_EXCEPTIONS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|__has_feature
argument_list|(
name|cxx_rtti
argument_list|)
end_if
begin_define
DECL|macro|QT_NO_RTTI
define|#
directive|define
name|QT_NO_RTTI
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|attribute_deprecated_with_message
argument_list|)
end_if
begin_define
DECL|macro|Q_DECL_DEPRECATED_X
define|#
directive|define
name|Q_DECL_DEPRECATED_X
parameter_list|(
name|text
parameter_list|)
value|__attribute__ ((__deprecated__(text)))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Clang supports binary literals in C, C++98 and C++11 modes
end_comment
begin_comment
comment|// It's been supported "since the dawn of time itself" (cf. commit 179883)
end_comment
begin_if
if|#
directive|if
name|__has_extension
argument_list|(
name|cxx_binary_literals
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_BINARY_LITERALS
define|#
directive|define
name|Q_COMPILER_BINARY_LITERALS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Variadic macros are supported for gnu++98, c++11, c99 ... since 2.9
end_comment
begin_if
if|#
directive|if
name|Q_CC_CLANG
operator|>=
literal|209
end_if
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__STRICT_ANSI__
argument_list|)
operator|||
name|defined
argument_list|(
name|__GXX_EXPERIMENTAL_CXX0X__
argument_list|)
expr|\
operator|||
operator|(
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|&&
operator|(
name|__cplusplus
operator|>=
literal|201103L
operator|)
operator|)
expr|\
operator|||
operator|(
name|defined
argument_list|(
name|__STDC_VERSION__
argument_list|)
operator|&&
operator|(
name|__STDC_VERSION__
operator|>=
literal|199901L
operator|)
operator|)
end_if
begin_define
DECL|macro|Q_COMPILER_VARIADIC_MACROS
define|#
directive|define
name|Q_COMPILER_VARIADIC_MACROS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* C++11 features, see http://clang.llvm.org/cxx_status.html */
end_comment
begin_if
if|#
directive|if
name|__cplusplus
operator|>=
literal|201103L
operator|||
name|defined
argument_list|(
name|__GXX_EXPERIMENTAL_CXX0X__
argument_list|)
end_if
begin_comment
comment|/* Detect C++ features using __has_feature(), see http://clang.llvm.org/docs/LanguageExtensions.html#cxx11 */
end_comment
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_alignas
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_ALIGNAS
define|#
directive|define
name|Q_COMPILER_ALIGNAS
end_define
begin_define
DECL|macro|Q_COMPILER_ALIGNOF
define|#
directive|define
name|Q_COMPILER_ALIGNOF
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_atomic
argument_list|)
operator|&&
name|__has_include
argument_list|(
operator|<
name|atomic
operator|>
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_ATOMICS
define|#
directive|define
name|Q_COMPILER_ATOMICS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_attributes
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_ATTRIBUTES
define|#
directive|define
name|Q_COMPILER_ATTRIBUTES
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_auto_type
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_AUTO_FUNCTION
define|#
directive|define
name|Q_COMPILER_AUTO_FUNCTION
end_define
begin_define
DECL|macro|Q_COMPILER_AUTO_TYPE
define|#
directive|define
name|Q_COMPILER_AUTO_TYPE
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_strong_enums
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_CLASS_ENUM
define|#
directive|define
name|Q_COMPILER_CLASS_ENUM
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_constexpr
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_CONSTEXPR
define|#
directive|define
name|Q_COMPILER_CONSTEXPR
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_decltype
argument_list|)
end_if
begin_comment
comment|/*&& __has_feature(cxx_decltype_incomplete_return_types) */
end_comment
begin_define
DECL|macro|Q_COMPILER_DECLTYPE
define|#
directive|define
name|Q_COMPILER_DECLTYPE
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_defaulted_functions
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_DEFAULT_MEMBERS
define|#
directive|define
name|Q_COMPILER_DEFAULT_MEMBERS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_deleted_functions
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_DELETE_MEMBERS
define|#
directive|define
name|Q_COMPILER_DELETE_MEMBERS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_delegating_constructors
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_DELEGATING_CONSTRUCTORS
define|#
directive|define
name|Q_COMPILER_DELEGATING_CONSTRUCTORS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_explicit_conversions
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_EXPLICIT_CONVERSIONS
define|#
directive|define
name|Q_COMPILER_EXPLICIT_CONVERSIONS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_override_control
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_EXPLICIT_OVERRIDES
define|#
directive|define
name|Q_COMPILER_EXPLICIT_OVERRIDES
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_inheriting_constructors
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_INHERITING_CONSTRUCTORS
define|#
directive|define
name|Q_COMPILER_INHERITING_CONSTRUCTORS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_generalized_initializers
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_INITIALIZER_LISTS
define|#
directive|define
name|Q_COMPILER_INITIALIZER_LISTS
end_define
begin_define
DECL|macro|Q_COMPILER_UNIFORM_INIT
define|#
directive|define
name|Q_COMPILER_UNIFORM_INIT
end_define
begin_comment
DECL|macro|Q_COMPILER_UNIFORM_INIT
comment|/* both covered by this feature macro, according to docs */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_lambdas
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_LAMBDA
define|#
directive|define
name|Q_COMPILER_LAMBDA
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_noexcept
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_NOEXCEPT
define|#
directive|define
name|Q_COMPILER_NOEXCEPT
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_nonstatic_member_init
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_NONSTATIC_MEMBER_INIT
define|#
directive|define
name|Q_COMPILER_NONSTATIC_MEMBER_INIT
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_nullptr
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_NULLPTR
define|#
directive|define
name|Q_COMPILER_NULLPTR
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_range_for
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_RANGE_FOR
define|#
directive|define
name|Q_COMPILER_RANGE_FOR
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_raw_string_literals
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_RAW_STRINGS
define|#
directive|define
name|Q_COMPILER_RAW_STRINGS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_reference_qualified_functions
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_REF_QUALIFIERS
define|#
directive|define
name|Q_COMPILER_REF_QUALIFIERS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_rvalue_references
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_RVALUE_REFS
define|#
directive|define
name|Q_COMPILER_RVALUE_REFS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_static_assert
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_STATIC_ASSERT
define|#
directive|define
name|Q_COMPILER_STATIC_ASSERT
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_alias_templates
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_TEMPLATE_ALIAS
define|#
directive|define
name|Q_COMPILER_TEMPLATE_ALIAS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_thread_local
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_THREAD_LOCAL
define|#
directive|define
name|Q_COMPILER_THREAD_LOCAL
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_user_literals
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_UDL
define|#
directive|define
name|Q_COMPILER_UDL
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_unicode_literals
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_UNICODE_STRINGS
define|#
directive|define
name|Q_COMPILER_UNICODE_STRINGS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_unrestricted_unions
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_UNRESTRICTED_UNIONS
define|#
directive|define
name|Q_COMPILER_UNRESTRICTED_UNIONS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_variadic_templates
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_VARIADIC_TEMPLATES
define|#
directive|define
name|Q_COMPILER_VARIADIC_TEMPLATES
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* Features that have no __has_feature() check */
end_comment
begin_if
if|#
directive|if
name|Q_CC_CLANG
operator|>=
literal|209
end_if
begin_comment
comment|/* since clang 2.9 */
end_comment
begin_define
DECL|macro|Q_COMPILER_EXTERN_TEMPLATES
define|#
directive|define
name|Q_COMPILER_EXTERN_TEMPLATES
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* C++1y features, deprecated macros. Do not update this list. */
end_comment
begin_if
if|#
directive|if
name|__cplusplus
operator|>
literal|201103L
end_if
begin_comment
comment|//#    if __has_feature(cxx_binary_literals)
end_comment
begin_comment
comment|//#      define Q_COMPILER_BINARY_LITERALS  // see above
end_comment
begin_comment
comment|//#    endif
end_comment
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_generic_lambda
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_GENERIC_LAMBDA
define|#
directive|define
name|Q_COMPILER_GENERIC_LAMBDA
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_init_capture
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_LAMBDA_CAPTURES
define|#
directive|define
name|Q_COMPILER_LAMBDA_CAPTURES
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_relaxed_constexpr
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_RELAXED_CONSTEXPR_FUNCTIONS
define|#
directive|define
name|Q_COMPILER_RELAXED_CONSTEXPR_FUNCTIONS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_decltype_auto
argument_list|)
operator|&&
name|__has_feature
argument_list|(
name|cxx_return_type_deduction
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_RETURN_TYPE_DEDUCTION
define|#
directive|define
name|Q_COMPILER_RETURN_TYPE_DEDUCTION
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_variable_templates
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_VARIABLE_TEMPLATES
define|#
directive|define
name|Q_COMPILER_VARIABLE_TEMPLATES
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__has_feature
argument_list|(
name|cxx_runtime_array
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_VLA
define|#
directive|define
name|Q_COMPILER_VLA
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__has_warning
argument_list|)
end_if
begin_if
if|#
directive|if
name|__has_warning
argument_list|(
literal|"-Wunused-private-field"
argument_list|)
end_if
begin_define
DECL|macro|Q_DECL_UNUSED_MEMBER
define|#
directive|define
name|Q_DECL_UNUSED_MEMBER
value|Q_DECL_UNUSED
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_CC_CLANG
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_CC_INTEL
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_CC_CLANG
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_RESTRICTED_VLA
define|#
directive|define
name|Q_COMPILER_RESTRICTED_VLA
end_define
begin_define
DECL|macro|Q_COMPILER_THREADSAFE_STATICS
define|#
directive|define
name|Q_COMPILER_THREADSAFE_STATICS
end_define
begin_if
if|#
directive|if
name|Q_CC_GNU
operator|>=
literal|403
end_if
begin_comment
comment|//   GCC supports binary literals in C, C++98 and C++11 modes
end_comment
begin_define
DECL|macro|Q_COMPILER_BINARY_LITERALS
define|#
directive|define
name|Q_COMPILER_BINARY_LITERALS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__STRICT_ANSI__
argument_list|)
operator|||
name|defined
argument_list|(
name|__GXX_EXPERIMENTAL_CXX0X__
argument_list|)
expr|\
operator|||
operator|(
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|&&
operator|(
name|__cplusplus
operator|>=
literal|201103L
operator|)
operator|)
expr|\
operator|||
operator|(
name|defined
argument_list|(
name|__STDC_VERSION__
argument_list|)
operator|&&
operator|(
name|__STDC_VERSION__
operator|>=
literal|199901L
operator|)
operator|)
end_if
begin_comment
comment|// Variadic macros are supported for gnu++98, c++11, C99 ... since forever (gcc 2.97)
end_comment
begin_define
DECL|macro|Q_COMPILER_VARIADIC_MACROS
define|#
directive|define
name|Q_COMPILER_VARIADIC_MACROS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__GXX_EXPERIMENTAL_CXX0X__
argument_list|)
operator|||
name|__cplusplus
operator|>=
literal|201103L
end_if
begin_if
if|#
directive|if
name|Q_CC_GNU
operator|>=
literal|403
end_if
begin_comment
comment|/* C++11 features supported in GCC 4.3: */
end_comment
begin_define
DECL|macro|Q_COMPILER_DECLTYPE
define|#
directive|define
name|Q_COMPILER_DECLTYPE
end_define
begin_define
DECL|macro|Q_COMPILER_RVALUE_REFS
define|#
directive|define
name|Q_COMPILER_RVALUE_REFS
end_define
begin_define
DECL|macro|Q_COMPILER_STATIC_ASSERT
define|#
directive|define
name|Q_COMPILER_STATIC_ASSERT
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|Q_CC_GNU
operator|>=
literal|404
end_if
begin_comment
comment|/* C++11 features supported in GCC 4.4: */
end_comment
begin_define
DECL|macro|Q_COMPILER_AUTO_FUNCTION
define|#
directive|define
name|Q_COMPILER_AUTO_FUNCTION
end_define
begin_define
DECL|macro|Q_COMPILER_AUTO_TYPE
define|#
directive|define
name|Q_COMPILER_AUTO_TYPE
end_define
begin_define
DECL|macro|Q_COMPILER_EXTERN_TEMPLATES
define|#
directive|define
name|Q_COMPILER_EXTERN_TEMPLATES
end_define
begin_define
DECL|macro|Q_COMPILER_UNIFORM_INIT
define|#
directive|define
name|Q_COMPILER_UNIFORM_INIT
end_define
begin_define
DECL|macro|Q_COMPILER_UNICODE_STRINGS
define|#
directive|define
name|Q_COMPILER_UNICODE_STRINGS
end_define
begin_define
DECL|macro|Q_COMPILER_VARIADIC_TEMPLATES
define|#
directive|define
name|Q_COMPILER_VARIADIC_TEMPLATES
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|Q_CC_GNU
operator|>=
literal|405
end_if
begin_comment
comment|/* C++11 features supported in GCC 4.5: */
end_comment
begin_define
DECL|macro|Q_COMPILER_EXPLICIT_CONVERSIONS
define|#
directive|define
name|Q_COMPILER_EXPLICIT_CONVERSIONS
end_define
begin_comment
comment|/* GCC 4.4 implements initializer_list but does not define typedefs required         * by the standard. */
end_comment
begin_define
DECL|macro|Q_COMPILER_INITIALIZER_LISTS
define|#
directive|define
name|Q_COMPILER_INITIALIZER_LISTS
end_define
begin_define
DECL|macro|Q_COMPILER_LAMBDA
define|#
directive|define
name|Q_COMPILER_LAMBDA
end_define
begin_define
DECL|macro|Q_COMPILER_RAW_STRINGS
define|#
directive|define
name|Q_COMPILER_RAW_STRINGS
end_define
begin_define
DECL|macro|Q_COMPILER_CLASS_ENUM
define|#
directive|define
name|Q_COMPILER_CLASS_ENUM
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|Q_CC_GNU
operator|>=
literal|406
end_if
begin_comment
comment|/* Pre-4.6 compilers implement a non-final snapshot of N2346, hence default and delete         * functions are supported only if they are public. Starting from 4.6, GCC handles         * final version - the access modifier is not relevant. */
end_comment
begin_define
DECL|macro|Q_COMPILER_DEFAULT_MEMBERS
define|#
directive|define
name|Q_COMPILER_DEFAULT_MEMBERS
end_define
begin_define
DECL|macro|Q_COMPILER_DELETE_MEMBERS
define|#
directive|define
name|Q_COMPILER_DELETE_MEMBERS
end_define
begin_comment
comment|/* C++11 features supported in GCC 4.6: */
end_comment
begin_define
DECL|macro|Q_COMPILER_CONSTEXPR
define|#
directive|define
name|Q_COMPILER_CONSTEXPR
end_define
begin_define
DECL|macro|Q_COMPILER_NULLPTR
define|#
directive|define
name|Q_COMPILER_NULLPTR
end_define
begin_define
DECL|macro|Q_COMPILER_UNRESTRICTED_UNIONS
define|#
directive|define
name|Q_COMPILER_UNRESTRICTED_UNIONS
end_define
begin_define
DECL|macro|Q_COMPILER_RANGE_FOR
define|#
directive|define
name|Q_COMPILER_RANGE_FOR
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|Q_CC_GNU
operator|>=
literal|407
end_if
begin_comment
comment|/* GCC 4.4 implemented<atomic> and std::atomic using its old intrinsics.         * However, the implementation is incomplete for most platforms until GCC 4.7:         * instead, std::atomic would use an external lock. Since we need an std::atomic         * that is behavior-compatible with QBasicAtomic, we only enable it here */
end_comment
begin_define
DECL|macro|Q_COMPILER_ATOMICS
define|#
directive|define
name|Q_COMPILER_ATOMICS
end_define
begin_comment
comment|/* GCC 4.6.x has problems dealing with noexcept expressions,         * so turn the feature on for 4.7 and above, only */
end_comment
begin_define
DECL|macro|Q_COMPILER_NOEXCEPT
define|#
directive|define
name|Q_COMPILER_NOEXCEPT
end_define
begin_comment
comment|/* C++11 features supported in GCC 4.7: */
end_comment
begin_define
DECL|macro|Q_COMPILER_NONSTATIC_MEMBER_INIT
define|#
directive|define
name|Q_COMPILER_NONSTATIC_MEMBER_INIT
end_define
begin_define
DECL|macro|Q_COMPILER_DELEGATING_CONSTRUCTORS
define|#
directive|define
name|Q_COMPILER_DELEGATING_CONSTRUCTORS
end_define
begin_define
DECL|macro|Q_COMPILER_EXPLICIT_OVERRIDES
define|#
directive|define
name|Q_COMPILER_EXPLICIT_OVERRIDES
end_define
begin_define
DECL|macro|Q_COMPILER_TEMPLATE_ALIAS
define|#
directive|define
name|Q_COMPILER_TEMPLATE_ALIAS
end_define
begin_define
DECL|macro|Q_COMPILER_UDL
define|#
directive|define
name|Q_COMPILER_UDL
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|Q_CC_GNU
operator|>=
literal|408
end_if
begin_define
DECL|macro|Q_COMPILER_ATTRIBUTES
define|#
directive|define
name|Q_COMPILER_ATTRIBUTES
end_define
begin_define
DECL|macro|Q_COMPILER_ALIGNAS
define|#
directive|define
name|Q_COMPILER_ALIGNAS
end_define
begin_define
DECL|macro|Q_COMPILER_ALIGNOF
define|#
directive|define
name|Q_COMPILER_ALIGNOF
end_define
begin_define
DECL|macro|Q_COMPILER_INHERITING_CONSTRUCTORS
define|#
directive|define
name|Q_COMPILER_INHERITING_CONSTRUCTORS
end_define
begin_define
DECL|macro|Q_COMPILER_THREAD_LOCAL
define|#
directive|define
name|Q_COMPILER_THREAD_LOCAL
end_define
begin_if
if|#
directive|if
name|Q_CC_GNU
operator|>
literal|408
operator|||
name|__GNUC_PATCHLEVEL__
operator|>=
literal|1
end_if
begin_define
DECL|macro|Q_COMPILER_REF_QUALIFIERS
define|#
directive|define
name|Q_COMPILER_REF_QUALIFIERS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* C++11 features are complete as of GCC 4.8.1 */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|__cplusplus
operator|>
literal|201103L
end_if
begin_if
if|#
directive|if
name|Q_CC_GNU
operator|>=
literal|409
end_if
begin_comment
comment|/* C++1y features in GCC 4.9 - deprecated, do not update this list */
end_comment
begin_comment
comment|//#    define Q_COMPILER_BINARY_LITERALS   // already supported since GCC 4.3 as an extension
end_comment
begin_define
DECL|macro|Q_COMPILER_LAMBDA_CAPTURES
define|#
directive|define
name|Q_COMPILER_LAMBDA_CAPTURES
end_define
begin_define
DECL|macro|Q_COMPILER_RETURN_TYPE_DEDUCTION
define|#
directive|define
name|Q_COMPILER_RETURN_TYPE_DEDUCTION
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_CC_INTEL
argument_list|)
end_if
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if
begin_if
if|#
directive|if
name|_MSC_VER
operator|>=
literal|1400
end_if
begin_comment
comment|/* C++11 features supported in VC8 = VC2005: */
end_comment
begin_define
DECL|macro|Q_COMPILER_VARIADIC_MACROS
define|#
directive|define
name|Q_COMPILER_VARIADIC_MACROS
end_define
begin_ifndef
ifndef|#
directive|ifndef
name|__cplusplus_cli
end_ifndef
begin_comment
comment|/* 2005 supports the override and final contextual keywords, in         the same positions as the C++11 variants, but 'final' is         called 'sealed' instead:         http://msdn.microsoft.com/en-us/library/0w2w91tf%28v=vs.80%29.aspx         The behavior is slightly different in C++/CLI, which requires the         "virtual" keyword to be present too, so don't define for that.         So don't define Q_COMPILER_EXPLICIT_OVERRIDES (since it's not         the same as the C++11 version), but define the Q_DECL_* flags         accordingly: */
end_comment
begin_define
DECL|macro|Q_DECL_OVERRIDE
define|#
directive|define
name|Q_DECL_OVERRIDE
value|override
end_define
begin_define
DECL|macro|Q_DECL_FINAL
define|#
directive|define
name|Q_DECL_FINAL
value|sealed
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|_MSC_VER
operator|>=
literal|1600
end_if
begin_comment
comment|/* C++11 features supported in VC10 = VC2010: */
end_comment
begin_define
DECL|macro|Q_COMPILER_AUTO_FUNCTION
define|#
directive|define
name|Q_COMPILER_AUTO_FUNCTION
end_define
begin_define
DECL|macro|Q_COMPILER_AUTO_TYPE
define|#
directive|define
name|Q_COMPILER_AUTO_TYPE
end_define
begin_define
DECL|macro|Q_COMPILER_DECLTYPE
define|#
directive|define
name|Q_COMPILER_DECLTYPE
end_define
begin_define
DECL|macro|Q_COMPILER_EXTERN_TEMPLATES
define|#
directive|define
name|Q_COMPILER_EXTERN_TEMPLATES
end_define
begin_define
DECL|macro|Q_COMPILER_LAMBDA
define|#
directive|define
name|Q_COMPILER_LAMBDA
end_define
begin_define
DECL|macro|Q_COMPILER_NULLPTR
define|#
directive|define
name|Q_COMPILER_NULLPTR
end_define
begin_define
DECL|macro|Q_COMPILER_RVALUE_REFS
define|#
directive|define
name|Q_COMPILER_RVALUE_REFS
end_define
begin_define
DECL|macro|Q_COMPILER_STATIC_ASSERT
define|#
directive|define
name|Q_COMPILER_STATIC_ASSERT
end_define
begin_comment
comment|//  MSVC's library has std::initializer_list, but the compiler does not support the braces initialization
end_comment
begin_comment
comment|//#      define Q_COMPILER_INITIALIZER_LISTS
end_comment
begin_comment
comment|//#      define Q_COMPILER_UNIFORM_INIT
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|_MSC_VER
operator|>=
literal|1700
end_if
begin_comment
comment|/* C++11 features supported in VC11 = VC2012: */
end_comment
begin_undef
DECL|macro|Q_DECL_OVERRIDE
undef|#
directive|undef
name|Q_DECL_OVERRIDE
end_undef
begin_comment
DECL|macro|Q_DECL_OVERRIDE
comment|/* undo 2005/2008 settings... */
end_comment
begin_undef
DECL|macro|Q_DECL_FINAL
undef|#
directive|undef
name|Q_DECL_FINAL
end_undef
begin_comment
DECL|macro|Q_DECL_FINAL
comment|/* undo 2005/2008 settings... */
end_comment
begin_define
DECL|macro|Q_COMPILER_EXPLICIT_OVERRIDES
define|#
directive|define
name|Q_COMPILER_EXPLICIT_OVERRIDES
end_define
begin_comment
DECL|macro|Q_COMPILER_EXPLICIT_OVERRIDES
comment|/* ...and use std C++11 now   */
end_comment
begin_define
DECL|macro|Q_COMPILER_CLASS_ENUM
define|#
directive|define
name|Q_COMPILER_CLASS_ENUM
end_define
begin_define
DECL|macro|Q_COMPILER_ATOMICS
define|#
directive|define
name|Q_COMPILER_ATOMICS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* VC 11 */
end_comment
begin_if
if|#
directive|if
name|_MSC_VER
operator|>=
literal|1800
end_if
begin_comment
comment|/* C++11 features in VC12 = VC2013 */
end_comment
begin_define
DECL|macro|Q_COMPILER_DEFAULT_MEMBERS
define|#
directive|define
name|Q_COMPILER_DEFAULT_MEMBERS
end_define
begin_define
DECL|macro|Q_COMPILER_DELETE_MEMBERS
define|#
directive|define
name|Q_COMPILER_DELETE_MEMBERS
end_define
begin_define
DECL|macro|Q_COMPILER_DELEGATING_CONSTRUCTORS
define|#
directive|define
name|Q_COMPILER_DELEGATING_CONSTRUCTORS
end_define
begin_define
DECL|macro|Q_COMPILER_EXPLICIT_CONVERSIONS
define|#
directive|define
name|Q_COMPILER_EXPLICIT_CONVERSIONS
end_define
begin_define
DECL|macro|Q_COMPILER_NONSTATIC_MEMBER_INIT
define|#
directive|define
name|Q_COMPILER_NONSTATIC_MEMBER_INIT
end_define
begin_comment
comment|// implemented, but nested initialization fails (eg tst_qvector): http://connect.microsoft.com/VisualStudio/feedback/details/800364/initializer-list-calls-object-destructor-twice
end_comment
begin_comment
comment|//      #define Q_COMPILER_INITIALIZER_LISTS
end_comment
begin_comment
comment|// implemented in principle, but has a bug that makes it unusable: http://connect.microsoft.com/VisualStudio/feedback/details/802058/c-11-unified-initialization-fails-with-c-style-arrays
end_comment
begin_comment
comment|//      #define Q_COMPILER_UNIFORM_INIT
end_comment
begin_define
DECL|macro|Q_COMPILER_RAW_STRINGS
define|#
directive|define
name|Q_COMPILER_RAW_STRINGS
end_define
begin_define
DECL|macro|Q_COMPILER_TEMPLATE_ALIAS
define|#
directive|define
name|Q_COMPILER_TEMPLATE_ALIAS
end_define
begin_define
DECL|macro|Q_COMPILER_VARIADIC_TEMPLATES
define|#
directive|define
name|Q_COMPILER_VARIADIC_TEMPLATES
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* VC 12 */
end_comment
begin_if
if|#
directive|if
name|_MSC_FULL_VER
operator|>=
literal|180030324
end_if
begin_comment
comment|// VC 12 SP 2 RC
end_comment
begin_define
DECL|macro|Q_COMPILER_INITIALIZER_LISTS
define|#
directive|define
name|Q_COMPILER_INITIALIZER_LISTS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* VC 12 SP 2 RC */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* __cplusplus */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* Q_CC_MSVC */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef
begin_include
include|#
directive|include
file|<utility>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
end_if
begin_if
if|#
directive|if
name|defined
argument_list|(
name|_YVALS
argument_list|)
operator|||
name|defined
argument_list|(
name|_LIBCPP_VER
argument_list|)
end_if
begin_comment
comment|// QNX: libcpp (Dinkumware-based) doesn't have the<initializer_list>
end_comment
begin_comment
comment|// header, so the feature is useless, even if the compiler supports
end_comment
begin_comment
comment|// it. Disable.
end_comment
begin_undef
DECL|macro|Q_COMPILER_INITIALIZER_LISTS
undef|#
directive|undef
name|Q_COMPILER_INITIALIZER_LISTS
end_undef
begin_comment
comment|// That libcpp doesn't have std::move either, so disable everything
end_comment
begin_comment
comment|// related to rvalue refs.
end_comment
begin_undef
DECL|macro|Q_COMPILER_RVALUE_REFS
undef|#
directive|undef
name|Q_COMPILER_RVALUE_REFS
end_undef
begin_undef
DECL|macro|Q_COMPILER_REF_QUALIFIERS
undef|#
directive|undef
name|Q_COMPILER_REF_QUALIFIERS
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_QNX
end_comment
begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_CC_CLANG
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_CC_INTEL
argument_list|)
operator|)
operator|&&
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
name|defined
argument_list|(
name|__GNUC_LIBSTD__
argument_list|)
expr|\
operator|&&
operator|(
operator|(
name|__GNUC_LIBSTD__
operator|-
literal|0
operator|)
operator|*
literal|100
operator|+
name|__GNUC_LIBSTD_MINOR__
operator|-
literal|0
operator|<=
literal|402
operator|)
end_if
begin_comment
comment|// Mac OS X: Apple has not updated libstdc++ since 2007, which means it does not have
end_comment
begin_comment
comment|//<initializer_list> or std::move. Let's disable these features
end_comment
begin_undef
DECL|macro|Q_COMPILER_INITIALIZER_LISTS
undef|#
directive|undef
name|Q_COMPILER_INITIALIZER_LISTS
end_undef
begin_undef
DECL|macro|Q_COMPILER_RVALUE_REFS
undef|#
directive|undef
name|Q_COMPILER_RVALUE_REFS
end_undef
begin_undef
DECL|macro|Q_COMPILER_REF_QUALIFIERS
undef|#
directive|undef
name|Q_COMPILER_REF_QUALIFIERS
end_undef
begin_comment
comment|// Also disable<atomic>, since it's clearly not there
end_comment
begin_undef
DECL|macro|Q_COMPILER_ATOMICS
undef|#
directive|undef
name|Q_COMPILER_ATOMICS
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|_LIBCPP_VERSION
argument_list|)
end_if
begin_comment
comment|// libc++ uses __has_feature(cxx_atomic), so disable the feature if the compiler
end_comment
begin_comment
comment|// doesn't support it. That's required for the Intel compiler on OS X, for example.
end_comment
begin_if
if|#
directive|if
operator|!
name|__has_feature
argument_list|(
name|cxx_atomic
argument_list|)
end_if
begin_undef
DECL|macro|Q_COMPILER_ATOMICS
undef|#
directive|undef
name|Q_COMPILER_ATOMICS
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_COMPILER_THREADSAFE_STATICS
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
end_if
begin_comment
comment|// Mac OS X: Apple's low-level implementation of the C++ support library
end_comment
begin_comment
comment|// (libc++abi.dylib, shared between libstdc++ and libc++) has deadlocks. The
end_comment
begin_comment
comment|// C++11 standard requires the deadlocks to be removed, so this will eventually
end_comment
begin_comment
comment|// be fixed; for now, let's disable this.
end_comment
begin_undef
DECL|macro|Q_COMPILER_THREADSAFE_STATICS
undef|#
directive|undef
name|Q_COMPILER_THREADSAFE_STATICS
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*  * C++11 keywords and expressions  */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_NULLPTR
end_ifdef
begin_define
DECL|macro|Q_NULLPTR
define|#
directive|define
name|Q_NULLPTR
value|nullptr
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|Q_NULLPTR
define|#
directive|define
name|Q_NULLPTR
value|NULL
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_DEFAULT_MEMBERS
end_ifdef
begin_define
DECL|macro|Q_DECL_EQ_DEFAULT
define|#
directive|define
name|Q_DECL_EQ_DEFAULT
value|= default
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|Q_DECL_EQ_DEFAULT
define|#
directive|define
name|Q_DECL_EQ_DEFAULT
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_DELETE_MEMBERS
end_ifdef
begin_define
DECL|macro|Q_DECL_EQ_DELETE
define|#
directive|define
name|Q_DECL_EQ_DELETE
value|= delete
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|Q_DECL_EQ_DELETE
define|#
directive|define
name|Q_DECL_EQ_DELETE
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Don't break code that is already using Q_COMPILER_DEFAULT_DELETE_MEMBERS
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_COMPILER_DEFAULT_MEMBERS
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_COMPILER_DELETE_MEMBERS
argument_list|)
end_if
begin_define
DECL|macro|Q_COMPILER_DEFAULT_DELETE_MEMBERS
define|#
directive|define
name|Q_COMPILER_DEFAULT_DELETE_MEMBERS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cpp_constexpr
argument_list|)
operator|&&
name|__cpp_constexpr
operator|-
literal|0
operator|>=
literal|201304
end_if
begin_define
DECL|macro|Q_DECL_CONSTEXPR
define|#
directive|define
name|Q_DECL_CONSTEXPR
value|constexpr
end_define
begin_define
DECL|macro|Q_DECL_RELAXED_CONSTEXPR
define|#
directive|define
name|Q_DECL_RELAXED_CONSTEXPR
value|constexpr
end_define
begin_define
DECL|macro|Q_CONSTEXPR
define|#
directive|define
name|Q_CONSTEXPR
value|constexpr
end_define
begin_define
DECL|macro|Q_RELAXED_CONSTEXPR
define|#
directive|define
name|Q_RELAXED_CONSTEXPR
value|constexpr
end_define
begin_elif
elif|#
directive|elif
name|defined
name|Q_COMPILER_CONSTEXPR
end_elif
begin_define
DECL|macro|Q_DECL_CONSTEXPR
define|#
directive|define
name|Q_DECL_CONSTEXPR
value|constexpr
end_define
begin_define
DECL|macro|Q_DECL_RELAXED_CONSTEXPR
define|#
directive|define
name|Q_DECL_RELAXED_CONSTEXPR
end_define
begin_define
DECL|macro|Q_CONSTEXPR
define|#
directive|define
name|Q_CONSTEXPR
value|constexpr
end_define
begin_define
DECL|macro|Q_RELAXED_CONSTEXPR
define|#
directive|define
name|Q_RELAXED_CONSTEXPR
value|const
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|Q_DECL_CONSTEXPR
define|#
directive|define
name|Q_DECL_CONSTEXPR
end_define
begin_define
DECL|macro|Q_DECL_RELAXED_CONSTEXPR
define|#
directive|define
name|Q_DECL_RELAXED_CONSTEXPR
end_define
begin_define
DECL|macro|Q_CONSTEXPR
define|#
directive|define
name|Q_CONSTEXPR
value|const
end_define
begin_define
DECL|macro|Q_RELAXED_CONSTEXPR
define|#
directive|define
name|Q_RELAXED_CONSTEXPR
value|const
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_EXPLICIT_OVERRIDES
end_ifdef
begin_define
DECL|macro|Q_DECL_OVERRIDE
define|#
directive|define
name|Q_DECL_OVERRIDE
value|override
end_define
begin_define
DECL|macro|Q_DECL_FINAL
define|#
directive|define
name|Q_DECL_FINAL
value|final
end_define
begin_else
else|#
directive|else
end_else
begin_ifndef
ifndef|#
directive|ifndef
name|Q_DECL_OVERRIDE
end_ifndef
begin_define
DECL|macro|Q_DECL_OVERRIDE
define|#
directive|define
name|Q_DECL_OVERRIDE
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_DECL_FINAL
end_ifndef
begin_define
DECL|macro|Q_DECL_FINAL
define|#
directive|define
name|Q_DECL_FINAL
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_NOEXCEPT
end_ifdef
begin_define
DECL|macro|Q_DECL_NOEXCEPT
define|#
directive|define
name|Q_DECL_NOEXCEPT
value|noexcept
end_define
begin_define
DECL|macro|Q_DECL_NOEXCEPT_EXPR
define|#
directive|define
name|Q_DECL_NOEXCEPT_EXPR
parameter_list|(
name|x
parameter_list|)
value|noexcept(x)
end_define
begin_ifdef
ifdef|#
directive|ifdef
name|Q_DECL_NOTHROW
end_ifdef
begin_undef
DECL|macro|Q_DECL_NOTHROW
undef|#
directive|undef
name|Q_DECL_NOTHROW
end_undef
begin_comment
DECL|macro|Q_DECL_NOTHROW
comment|/* override with C++11 noexcept if available */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|Q_DECL_NOEXCEPT
define|#
directive|define
name|Q_DECL_NOEXCEPT
end_define
begin_define
DECL|macro|Q_DECL_NOEXCEPT_EXPR
define|#
directive|define
name|Q_DECL_NOEXCEPT_EXPR
parameter_list|(
name|x
parameter_list|)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_DECL_NOTHROW
end_ifndef
begin_define
DECL|macro|Q_DECL_NOTHROW
define|#
directive|define
name|Q_DECL_NOTHROW
value|Q_DECL_NOEXCEPT
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_COMPILER_ALIGNOF
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_ALIGNOF
argument_list|)
end_if
begin_define
DECL|macro|Q_ALIGNOF
define|#
directive|define
name|Q_ALIGNOF
parameter_list|(
name|x
parameter_list|)
value|alignof(x)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*  * Fallback macros to certain compiler features  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_NORETURN
end_ifndef
begin_define
DECL|macro|Q_NORETURN
define|#
directive|define
name|Q_NORETURN
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_LIKELY
end_ifndef
begin_define
DECL|macro|Q_LIKELY
define|#
directive|define
name|Q_LIKELY
parameter_list|(
name|x
parameter_list|)
value|(x)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_UNLIKELY
end_ifndef
begin_define
DECL|macro|Q_UNLIKELY
define|#
directive|define
name|Q_UNLIKELY
parameter_list|(
name|x
parameter_list|)
value|(x)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_ASSUME_IMPL
end_ifndef
begin_define
DECL|macro|Q_ASSUME_IMPL
define|#
directive|define
name|Q_ASSUME_IMPL
parameter_list|(
name|expr
parameter_list|)
value|qt_noop()
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_UNREACHABLE_IMPL
end_ifndef
begin_define
DECL|macro|Q_UNREACHABLE_IMPL
define|#
directive|define
name|Q_UNREACHABLE_IMPL
parameter_list|()
value|qt_noop()
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_ALLOC_SIZE
end_ifndef
begin_define
DECL|macro|Q_ALLOC_SIZE
define|#
directive|define
name|Q_ALLOC_SIZE
parameter_list|(
name|x
parameter_list|)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_REQUIRED_RESULT
end_ifndef
begin_define
DECL|macro|Q_REQUIRED_RESULT
define|#
directive|define
name|Q_REQUIRED_RESULT
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_DECL_DEPRECATED
end_ifndef
begin_define
DECL|macro|Q_DECL_DEPRECATED
define|#
directive|define
name|Q_DECL_DEPRECATED
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_DECL_VARIABLE_DEPRECATED
end_ifndef
begin_define
DECL|macro|Q_DECL_VARIABLE_DEPRECATED
define|#
directive|define
name|Q_DECL_VARIABLE_DEPRECATED
value|Q_DECL_DEPRECATED
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_DECL_DEPRECATED_X
end_ifndef
begin_define
DECL|macro|Q_DECL_DEPRECATED_X
define|#
directive|define
name|Q_DECL_DEPRECATED_X
parameter_list|(
name|text
parameter_list|)
value|Q_DECL_DEPRECATED
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_DECL_EXPORT
end_ifndef
begin_define
DECL|macro|Q_DECL_EXPORT
define|#
directive|define
name|Q_DECL_EXPORT
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_DECL_IMPORT
end_ifndef
begin_define
DECL|macro|Q_DECL_IMPORT
define|#
directive|define
name|Q_DECL_IMPORT
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_DECL_HIDDEN
end_ifndef
begin_define
DECL|macro|Q_DECL_HIDDEN
define|#
directive|define
name|Q_DECL_HIDDEN
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_DECL_UNUSED
end_ifndef
begin_define
DECL|macro|Q_DECL_UNUSED
define|#
directive|define
name|Q_DECL_UNUSED
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_DECL_UNUSED_MEMBER
end_ifndef
begin_define
DECL|macro|Q_DECL_UNUSED_MEMBER
define|#
directive|define
name|Q_DECL_UNUSED_MEMBER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_FUNC_INFO
end_ifndef
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SOLARIS
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_CC_XLC
argument_list|)
end_if
begin_define
DECL|macro|Q_FUNC_INFO
define|#
directive|define
name|Q_FUNC_INFO
value|__FILE__ "(line number unavailable)"
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|Q_FUNC_INFO
define|#
directive|define
name|Q_FUNC_INFO
value|__FILE__ ":" QT_STRINGIFY(__LINE__)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_DECL_CF_RETURNS_RETAINED
end_ifndef
begin_define
DECL|macro|Q_DECL_CF_RETURNS_RETAINED
define|#
directive|define
name|Q_DECL_CF_RETURNS_RETAINED
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_DECL_NS_RETURNS_AUTORELEASED
end_ifndef
begin_define
DECL|macro|Q_DECL_NS_RETURNS_AUTORELEASED
define|#
directive|define
name|Q_DECL_NS_RETURNS_AUTORELEASED
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_DECL_PURE_FUNCTION
end_ifndef
begin_define
DECL|macro|Q_DECL_PURE_FUNCTION
define|#
directive|define
name|Q_DECL_PURE_FUNCTION
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_DECL_CONST_FUNCTION
end_ifndef
begin_define
DECL|macro|Q_DECL_CONST_FUNCTION
define|#
directive|define
name|Q_DECL_CONST_FUNCTION
value|Q_DECL_PURE_FUNCTION
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*  * Warning/diagnostic handling  */
end_comment
begin_define
DECL|macro|QT_DO_PRAGMA
define|#
directive|define
name|QT_DO_PRAGMA
parameter_list|(
name|text
parameter_list|)
value|_Pragma(#text)
end_define
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_INTEL
argument_list|)
end_if
begin_define
DECL|macro|QT_WARNING_PUSH
define|#
directive|define
name|QT_WARNING_PUSH
value|QT_DO_PRAGMA(warning(push))
end_define
begin_define
DECL|macro|QT_WARNING_POP
define|#
directive|define
name|QT_WARNING_POP
value|QT_DO_PRAGMA(warning(pop))
end_define
begin_define
DECL|macro|QT_WARNING_DISABLE_INTEL
define|#
directive|define
name|QT_WARNING_DISABLE_INTEL
parameter_list|(
name|number
parameter_list|)
value|QT_DO_PRAGMA(warning(disable: number))
end_define
begin_define
DECL|macro|QT_WARNING_DISABLE_MSVC
define|#
directive|define
name|QT_WARNING_DISABLE_MSVC
parameter_list|(
name|number
parameter_list|)
end_define
begin_define
DECL|macro|QT_WARNING_DISABLE_CLANG
define|#
directive|define
name|QT_WARNING_DISABLE_CLANG
parameter_list|(
name|text
parameter_list|)
end_define
begin_define
DECL|macro|QT_WARNING_DISABLE_GCC
define|#
directive|define
name|QT_WARNING_DISABLE_GCC
parameter_list|(
name|text
parameter_list|)
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
operator|&&
name|_MSC_VER
operator|>=
literal|1500
end_elif
begin_undef
DECL|macro|QT_DO_PRAGMA
undef|#
directive|undef
name|QT_DO_PRAGMA
end_undef
begin_comment
DECL|macro|QT_DO_PRAGMA
comment|/* not needed */
end_comment
begin_define
DECL|macro|QT_WARNING_PUSH
define|#
directive|define
name|QT_WARNING_PUSH
value|__pragma(warning(push))
end_define
begin_define
DECL|macro|QT_WARNING_POP
define|#
directive|define
name|QT_WARNING_POP
value|__pragma(warning(pop))
end_define
begin_define
DECL|macro|QT_WARNING_DISABLE_MSVC
define|#
directive|define
name|QT_WARNING_DISABLE_MSVC
parameter_list|(
name|number
parameter_list|)
value|__pragma(warning(disable: number))
end_define
begin_define
DECL|macro|QT_WARNING_DISABLE_INTEL
define|#
directive|define
name|QT_WARNING_DISABLE_INTEL
parameter_list|(
name|number
parameter_list|)
end_define
begin_define
DECL|macro|QT_WARNING_DISABLE_CLANG
define|#
directive|define
name|QT_WARNING_DISABLE_CLANG
parameter_list|(
name|text
parameter_list|)
end_define
begin_define
DECL|macro|QT_WARNING_DISABLE_GCC
define|#
directive|define
name|QT_WARNING_DISABLE_GCC
parameter_list|(
name|text
parameter_list|)
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_CC_CLANG
argument_list|)
end_elif
begin_define
DECL|macro|QT_WARNING_PUSH
define|#
directive|define
name|QT_WARNING_PUSH
value|QT_DO_PRAGMA(clang diagnostic push)
end_define
begin_define
DECL|macro|QT_WARNING_POP
define|#
directive|define
name|QT_WARNING_POP
value|QT_DO_PRAGMA(clang diagnostic pop)
end_define
begin_define
DECL|macro|QT_WARNING_DISABLE_CLANG
define|#
directive|define
name|QT_WARNING_DISABLE_CLANG
parameter_list|(
name|text
parameter_list|)
value|QT_DO_PRAGMA(clang diagnostic ignored text)
end_define
begin_define
DECL|macro|QT_WARNING_DISABLE_GCC
define|#
directive|define
name|QT_WARNING_DISABLE_GCC
parameter_list|(
name|text
parameter_list|)
value|QT_DO_PRAGMA(GCC diagnostic ignored text)
end_define
begin_comment
DECL|macro|QT_WARNING_DISABLE_GCC
comment|// GCC directives work in Clang too
end_comment
begin_define
DECL|macro|QT_WARNING_DISABLE_INTEL
define|#
directive|define
name|QT_WARNING_DISABLE_INTEL
parameter_list|(
name|number
parameter_list|)
end_define
begin_define
DECL|macro|QT_WARNING_DISABLE_MSVC
define|#
directive|define
name|QT_WARNING_DISABLE_MSVC
parameter_list|(
name|number
parameter_list|)
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
operator|(
name|__GNUC__
operator|*
literal|100
operator|+
name|__GNUC_MINOR__
operator|>=
literal|405
operator|)
end_elif
begin_define
DECL|macro|QT_WARNING_PUSH
define|#
directive|define
name|QT_WARNING_PUSH
value|QT_DO_PRAGMA(GCC diagnostic push)
end_define
begin_define
DECL|macro|QT_WARNING_POP
define|#
directive|define
name|QT_WARNING_POP
value|QT_DO_PRAGMA(GCC diagnostic pop)
end_define
begin_define
DECL|macro|QT_WARNING_DISABLE_GCC
define|#
directive|define
name|QT_WARNING_DISABLE_GCC
parameter_list|(
name|text
parameter_list|)
value|QT_DO_PRAGMA(GCC diagnostic ignored text)
end_define
begin_define
DECL|macro|QT_WARNING_DISABLE_CLANG
define|#
directive|define
name|QT_WARNING_DISABLE_CLANG
parameter_list|(
name|text
parameter_list|)
end_define
begin_define
DECL|macro|QT_WARNING_DISABLE_INTEL
define|#
directive|define
name|QT_WARNING_DISABLE_INTEL
parameter_list|(
name|number
parameter_list|)
end_define
begin_define
DECL|macro|QT_WARNING_DISABLE_MSVC
define|#
directive|define
name|QT_WARNING_DISABLE_MSVC
parameter_list|(
name|number
parameter_list|)
end_define
begin_else
else|#
directive|else
end_else
begin_comment
comment|// All other compilers, GCC< 4.6 and MSVC< 2008
end_comment
begin_define
DECL|macro|QT_WARNING_DISABLE_GCC
define|#
directive|define
name|QT_WARNING_DISABLE_GCC
parameter_list|(
name|text
parameter_list|)
end_define
begin_define
DECL|macro|QT_WARNING_PUSH
define|#
directive|define
name|QT_WARNING_PUSH
end_define
begin_define
DECL|macro|QT_WARNING_POP
define|#
directive|define
name|QT_WARNING_POP
end_define
begin_define
DECL|macro|QT_WARNING_DISABLE_INTEL
define|#
directive|define
name|QT_WARNING_DISABLE_INTEL
parameter_list|(
name|number
parameter_list|)
end_define
begin_define
DECL|macro|QT_WARNING_DISABLE_MSVC
define|#
directive|define
name|QT_WARNING_DISABLE_MSVC
parameter_list|(
name|number
parameter_list|)
end_define
begin_define
DECL|macro|QT_WARNING_DISABLE_CLANG
define|#
directive|define
name|QT_WARNING_DISABLE_CLANG
parameter_list|(
name|text
parameter_list|)
end_define
begin_define
DECL|macro|QT_WARNING_DISABLE_GCC
define|#
directive|define
name|QT_WARNING_DISABLE_GCC
parameter_list|(
name|text
parameter_list|)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*    Proper for-scoping in MIPSpro CC */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_KEYWORDS
end_ifndef
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MIPS
argument_list|)
operator|||
operator|(
name|defined
argument_list|(
name|Q_CC_HPACC
argument_list|)
operator|&&
name|defined
argument_list|(
name|__ia64
argument_list|)
operator|)
end_if
begin_define
DECL|macro|for
define|#
directive|define
name|for
value|if (0) {} else for
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
end_ifdef
begin_define
DECL|macro|qMove
define|#
directive|define
name|qMove
parameter_list|(
name|x
parameter_list|)
value|std::move(x)
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|qMove
define|#
directive|define
name|qMove
parameter_list|(
name|x
parameter_list|)
value|(x)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|Q_UNREACHABLE
define|#
directive|define
name|Q_UNREACHABLE
parameter_list|()
define|\
value|do {\         Q_ASSERT_X(false, "Q_UNREACHABLE()", "Q_UNREACHABLE was reached");\         Q_UNREACHABLE_IMPL();\     } while (0)
end_define
begin_define
DECL|macro|Q_ASSUME
define|#
directive|define
name|Q_ASSUME
parameter_list|(
name|Expr
parameter_list|)
define|\
value|do {\         const bool valueOfExpression = Expr;\         Q_ASSERT_X(valueOfExpression, "Q_ASSUME()", "Assumption in Q_ASSUME(\"" #Expr "\") was not correct");\         Q_ASSUME_IMPL(valueOfExpression);\         Q_UNUSED(valueOfExpression);
comment|/* the value may not be used if Q_ASSERT_X and Q_ASSUME_IMPL are noop */
value|\     } while (0)
end_define
begin_comment
comment|/*     Sanitize compiler feature availability */
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_PROCESSOR_X86
argument_list|)
end_if
begin_undef
DECL|macro|QT_COMPILER_SUPPORTS_SSE2
undef|#
directive|undef
name|QT_COMPILER_SUPPORTS_SSE2
end_undef
begin_undef
DECL|macro|QT_COMPILER_SUPPORTS_SSE3
undef|#
directive|undef
name|QT_COMPILER_SUPPORTS_SSE3
end_undef
begin_undef
DECL|macro|QT_COMPILER_SUPPORTS_SSSE3
undef|#
directive|undef
name|QT_COMPILER_SUPPORTS_SSSE3
end_undef
begin_undef
DECL|macro|QT_COMPILER_SUPPORTS_SSE4_1
undef|#
directive|undef
name|QT_COMPILER_SUPPORTS_SSE4_1
end_undef
begin_undef
DECL|macro|QT_COMPILER_SUPPORTS_SSE4_2
undef|#
directive|undef
name|QT_COMPILER_SUPPORTS_SSE4_2
end_undef
begin_undef
DECL|macro|QT_COMPILER_SUPPORTS_AVX
undef|#
directive|undef
name|QT_COMPILER_SUPPORTS_AVX
end_undef
begin_undef
DECL|macro|QT_COMPILER_SUPPORTS_AVX2
undef|#
directive|undef
name|QT_COMPILER_SUPPORTS_AVX2
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_PROCESSOR_ARM
argument_list|)
end_if
begin_undef
DECL|macro|QT_COMPILER_SUPPORTS_NEON
undef|#
directive|undef
name|QT_COMPILER_SUPPORTS_NEON
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_PROCESSOR_MIPS
argument_list|)
end_if
begin_undef
DECL|macro|QT_COMPILER_SUPPORTS_MIPS_DSP
undef|#
directive|undef
name|QT_COMPILER_SUPPORTS_MIPS_DSP
end_undef
begin_undef
DECL|macro|QT_COMPILER_SUPPORTS_MIPS_DSPR2
undef|#
directive|undef
name|QT_COMPILER_SUPPORTS_MIPS_DSPR2
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QCOMPILERDETECTION_H
end_comment
end_unit
