begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QNAMESPACE_H
end_ifndef
begin_define
DECL|macro|QNAMESPACE_H
define|#
directive|define
name|QNAMESPACE_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|Q_MOC_RUN
name|namespace
else|#
directive|else
name|class
name|Q_CORE_EXPORT
endif|#
directive|endif
name|Qt
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_MOC_RUN
argument_list|)
name|Q_OBJECT
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_MOC_RUN
argument_list|)
comment|// NOTE: Generally, do not add Q_ENUMS if a corresponding Q_FLAGS exists.
name|Q_ENUMS
argument_list|(
name|ScrollBarPolicy
name|FocusPolicy
name|ContextMenuPolicy
argument_list|)
name|Q_ENUMS
argument_list|(
name|ArrowType
name|ToolButtonStyle
name|PenStyle
name|PenCapStyle
name|PenJoinStyle
name|BrushStyle
argument_list|)
name|Q_ENUMS
argument_list|(
name|FillRule
name|MaskMode
name|BGMode
name|ClipOperation
name|SizeMode
argument_list|)
name|Q_ENUMS
argument_list|(
name|Axis
name|Corner
name|Edge
name|LayoutDirection
name|SizeHint
name|Orientation
name|DropAction
argument_list|)
name|Q_FLAGS
argument_list|(
name|Alignment
name|Orientations
name|DropActions
name|Edges
argument_list|)
name|Q_FLAGS
argument_list|(
name|DockWidgetAreas
name|ToolBarAreas
argument_list|)
name|Q_ENUMS
argument_list|(
name|DockWidgetArea
name|ToolBarArea
argument_list|)
name|Q_ENUMS
argument_list|(
name|TextFormat
argument_list|)
name|Q_ENUMS
argument_list|(
name|TextElideMode
argument_list|)
name|Q_ENUMS
argument_list|(
name|DateFormat
name|TimeSpec
name|DayOfWeek
argument_list|)
name|Q_ENUMS
argument_list|(
name|CursorShape
name|GlobalColor
argument_list|)
name|Q_ENUMS
argument_list|(
name|AspectRatioMode
name|TransformationMode
argument_list|)
name|Q_FLAGS
argument_list|(
name|ImageConversionFlags
argument_list|)
name|Q_ENUMS
argument_list|(
name|Key
name|ShortcutContext
argument_list|)
name|Q_ENUMS
argument_list|(
name|TextInteractionFlag
argument_list|)
name|Q_FLAGS
argument_list|(
name|TextInteractionFlags
argument_list|)
name|Q_ENUMS
argument_list|(
name|ItemSelectionMode
argument_list|)
name|Q_FLAGS
argument_list|(
name|ItemFlags
argument_list|)
name|Q_ENUMS
argument_list|(
name|CheckState
argument_list|)
name|Q_ENUMS
argument_list|(
name|SortOrder
name|CaseSensitivity
argument_list|)
name|Q_FLAGS
argument_list|(
name|MatchFlags
argument_list|)
name|Q_FLAGS
argument_list|(
name|KeyboardModifiers
name|MouseButtons
argument_list|)
name|Q_ENUMS
argument_list|(
name|WindowType
name|WindowState
name|WindowModality
name|WidgetAttribute
name|ApplicationAttribute
argument_list|)
name|Q_FLAGS
argument_list|(
name|WindowFlags
name|WindowStates
argument_list|)
name|Q_ENUMS
argument_list|(
name|InputMethodHint
name|InputMethodQuery
argument_list|)
name|Q_FLAGS
argument_list|(
name|InputMethodHints
name|InputMethodQueries
argument_list|)
name|Q_ENUMS
argument_list|(
name|ScreenOrientation
argument_list|)
name|Q_FLAGS
argument_list|(
name|ScreenOrientations
argument_list|)
name|Q_ENUMS
argument_list|(
name|ConnectionType
argument_list|)
name|Q_ENUMS
argument_list|(
name|ApplicationState
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
name|Q_ENUMS
argument_list|(
name|GestureState
argument_list|)
name|Q_ENUMS
argument_list|(
name|GestureType
argument_list|)
endif|#
directive|endif
name|Q_ENUMS
argument_list|(
name|CursorMoveStyle
argument_list|)
name|Q_ENUMS
argument_list|(
name|TimerType
argument_list|)
name|Q_ENUMS
argument_list|(
name|ScrollPhase
argument_list|)
endif|#
directive|endif
comment|// defined(Q_MOC_RUN)
if|#
directive|if
name|defined
argument_list|(
name|Q_MOC_RUN
argument_list|)
name|public
range|:
endif|#
directive|endif
range|enum
name|GlobalColor
block|{
name|color0
block|,
name|color1
block|,
name|black
block|,
name|white
block|,
name|darkGray
block|,
name|gray
block|,
name|lightGray
block|,
name|red
block|,
name|green
block|,
name|blue
block|,
name|cyan
block|,
name|magenta
block|,
name|yellow
block|,
name|darkRed
block|,
name|darkGreen
block|,
name|darkBlue
block|,
name|darkCyan
block|,
name|darkMagenta
block|,
name|darkYellow
block|,
name|transparent
block|}
decl_stmt|;
enum|enum
name|KeyboardModifier
block|{
name|NoModifier
init|=
literal|0x00000000
block|,
name|ShiftModifier
init|=
literal|0x02000000
block|,
name|ControlModifier
init|=
literal|0x04000000
block|,
name|AltModifier
init|=
literal|0x08000000
block|,
name|MetaModifier
init|=
literal|0x10000000
block|,
name|KeypadModifier
init|=
literal|0x20000000
block|,
name|GroupSwitchModifier
init|=
literal|0x40000000
block|,
comment|// Do not extend the mask to include 0x01000000
name|KeyboardModifierMask
init|=
literal|0xfe000000
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
name|KeyboardModifiers
argument_list|,
name|KeyboardModifier
argument_list|)
comment|//shorter names for shortcuts
comment|// The use of all-caps identifiers has the potential for clashing with
comment|// user-defined or third-party macros. More so when the identifiers are not
comment|// "namespace"-prefixed. This is considered bad practice and is why
comment|// KeypadModifier was not added to the Modifier enum.
expr|enum
name|Modifier
block|{
name|META
operator|=
name|Qt
operator|::
name|MetaModifier
block|,
name|SHIFT
operator|=
name|Qt
operator|::
name|ShiftModifier
block|,
name|CTRL
operator|=
name|Qt
operator|::
name|ControlModifier
block|,
name|ALT
operator|=
name|Qt
operator|::
name|AltModifier
block|,
name|MODIFIER_MASK
operator|=
name|KeyboardModifierMask
block|,
name|UNICODE_ACCEL
operator|=
literal|0x00000000
block|}
expr_stmt|;
enum|enum
name|MouseButton
block|{
name|NoButton
init|=
literal|0x00000000
block|,
name|LeftButton
init|=
literal|0x00000001
block|,
name|RightButton
init|=
literal|0x00000002
block|,
name|MidButton
init|=
literal|0x00000004
block|,
comment|// ### Qt 6: remove me
name|MiddleButton
init|=
name|MidButton
block|,
name|BackButton
init|=
literal|0x00000008
block|,
name|XButton1
init|=
name|BackButton
block|,
name|ExtraButton1
init|=
name|XButton1
block|,
name|ForwardButton
init|=
literal|0x00000010
block|,
name|XButton2
init|=
name|ForwardButton
block|,
name|ExtraButton2
init|=
name|ForwardButton
block|,
name|TaskButton
init|=
literal|0x00000020
block|,
name|ExtraButton3
init|=
name|TaskButton
block|,
name|ExtraButton4
init|=
literal|0x00000040
block|,
name|ExtraButton5
init|=
literal|0x00000080
block|,
name|ExtraButton6
init|=
literal|0x00000100
block|,
name|ExtraButton7
init|=
literal|0x00000200
block|,
name|ExtraButton8
init|=
literal|0x00000400
block|,
name|ExtraButton9
init|=
literal|0x00000800
block|,
name|ExtraButton10
init|=
literal|0x00001000
block|,
name|ExtraButton11
init|=
literal|0x00002000
block|,
name|ExtraButton12
init|=
literal|0x00004000
block|,
name|ExtraButton13
init|=
literal|0x00008000
block|,
name|ExtraButton14
init|=
literal|0x00010000
block|,
name|ExtraButton15
init|=
literal|0x00020000
block|,
name|ExtraButton16
init|=
literal|0x00040000
block|,
name|ExtraButton17
init|=
literal|0x00080000
block|,
name|ExtraButton18
init|=
literal|0x00100000
block|,
name|ExtraButton19
init|=
literal|0x00200000
block|,
name|ExtraButton20
init|=
literal|0x00400000
block|,
name|ExtraButton21
init|=
literal|0x00800000
block|,
name|ExtraButton22
init|=
literal|0x01000000
block|,
name|ExtraButton23
init|=
literal|0x02000000
block|,
name|ExtraButton24
init|=
literal|0x04000000
block|,
name|AllButtons
init|=
literal|0x07ffffff
block|,
name|MaxMouseButton
init|=
name|ExtraButton24
block|,
comment|// 4 high-order bits remain available for future use (0x08000000 through 0x40000000).
name|MouseButtonMask
init|=
literal|0xffffffff
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
name|MouseButtons
argument_list|,
name|MouseButton
argument_list|)
expr|enum
name|Orientation
block|{
name|Horizontal
operator|=
literal|0x1
block|,
name|Vertical
operator|=
literal|0x2
block|}
expr_stmt|;
name|Q_DECLARE_FLAGS
argument_list|(
name|Orientations
argument_list|,
name|Orientation
argument_list|)
expr|enum
name|FocusPolicy
block|{
name|NoFocus
operator|=
literal|0
block|,
name|TabFocus
operator|=
literal|0x1
block|,
name|ClickFocus
operator|=
literal|0x2
block|,
name|StrongFocus
operator|=
name|TabFocus
operator||
name|ClickFocus
operator||
literal|0x8
block|,
name|WheelFocus
operator|=
name|StrongFocus
operator||
literal|0x4
block|}
expr_stmt|;
enum|enum
name|SortOrder
block|{
name|AscendingOrder
block|,
name|DescendingOrder
block|}
enum|;
enum|enum
name|TileRule
block|{
name|StretchTile
block|,
name|RepeatTile
block|,
name|RoundTile
block|}
enum|;
comment|// Text formatting flags for QPainter::drawText and QLabel.
comment|// The following two enums can be combined to one integer which
comment|// is passed as 'flags' to QPainter::drawText, QFontMetrics::boundingRect and qt_format_text.
enum|enum
name|AlignmentFlag
block|{
name|AlignLeft
init|=
literal|0x0001
block|,
name|AlignLeading
init|=
name|AlignLeft
block|,
name|AlignRight
init|=
literal|0x0002
block|,
name|AlignTrailing
init|=
name|AlignRight
block|,
name|AlignHCenter
init|=
literal|0x0004
block|,
name|AlignJustify
init|=
literal|0x0008
block|,
name|AlignAbsolute
init|=
literal|0x0010
block|,
name|AlignHorizontal_Mask
init|=
name|AlignLeft
operator||
name|AlignRight
operator||
name|AlignHCenter
operator||
name|AlignJustify
operator||
name|AlignAbsolute
block|,
name|AlignTop
init|=
literal|0x0020
block|,
name|AlignBottom
init|=
literal|0x0040
block|,
name|AlignVCenter
init|=
literal|0x0080
block|,
name|AlignBaseline
init|=
literal|0x0100
block|,
comment|// Note that 0x100 will clash with Qt::TextSingleLine = 0x100 due to what the comment above
comment|// this enum declaration states. However, since Qt::AlignBaseline is only used by layouts,
comment|// it doesn't make sense to pass Qt::AlignBaseline to QPainter::drawText(), so there
comment|// shouldn't really be any ambiguity between the two overlapping enum values.
name|AlignVertical_Mask
init|=
name|AlignTop
operator||
name|AlignBottom
operator||
name|AlignVCenter
operator||
name|AlignBaseline
block|,
name|AlignCenter
init|=
name|AlignVCenter
operator||
name|AlignHCenter
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
name|Alignment
argument_list|,
name|AlignmentFlag
argument_list|)
expr|enum
name|TextFlag
block|{
name|TextSingleLine
operator|=
literal|0x0100
block|,
name|TextDontClip
operator|=
literal|0x0200
block|,
name|TextExpandTabs
operator|=
literal|0x0400
block|,
name|TextShowMnemonic
operator|=
literal|0x0800
block|,
name|TextWordWrap
operator|=
literal|0x1000
block|,
name|TextWrapAnywhere
operator|=
literal|0x2000
block|,
name|TextDontPrint
operator|=
literal|0x4000
block|,
name|TextIncludeTrailingSpaces
operator|=
literal|0x08000000
block|,
name|TextHideMnemonic
operator|=
literal|0x8000
block|,
name|TextJustificationForced
operator|=
literal|0x10000
block|,
name|TextForceLeftToRight
operator|=
literal|0x20000
block|,
name|TextForceRightToLeft
operator|=
literal|0x40000
block|,
name|TextLongestVariant
operator|=
literal|0x80000
block|,
name|TextBypassShaping
operator|=
literal|0x100000
block|}
expr_stmt|;
enum|enum
name|TextElideMode
block|{
name|ElideLeft
block|,
name|ElideRight
block|,
name|ElideMiddle
block|,
name|ElideNone
block|}
enum|;
enum|enum
name|WhiteSpaceMode
block|{
name|WhiteSpaceNormal
block|,
name|WhiteSpacePre
block|,
name|WhiteSpaceNoWrap
block|,
name|WhiteSpaceModeUndefined
init|=
operator|-
literal|1
block|}
enum|;
enum|enum
name|HitTestAccuracy
block|{
name|ExactHit
block|,
name|FuzzyHit
block|}
enum|;
enum|enum
name|WindowType
block|{
name|Widget
init|=
literal|0x00000000
block|,
name|Window
init|=
literal|0x00000001
block|,
name|Dialog
init|=
literal|0x00000002
operator||
name|Window
block|,
name|Sheet
init|=
literal|0x00000004
operator||
name|Window
block|,
name|Drawer
init|=
name|Sheet
operator||
name|Dialog
block|,
name|Popup
init|=
literal|0x00000008
operator||
name|Window
block|,
name|Tool
init|=
name|Popup
operator||
name|Dialog
block|,
name|ToolTip
init|=
name|Popup
operator||
name|Sheet
block|,
name|SplashScreen
init|=
name|ToolTip
operator||
name|Dialog
block|,
name|Desktop
init|=
literal|0x00000010
operator||
name|Window
block|,
name|SubWindow
init|=
literal|0x00000012
block|,
name|ForeignWindow
init|=
literal|0x00000020
operator||
name|Window
block|,
name|CoverWindow
init|=
literal|0x00000040
operator||
name|Window
block|,
name|WindowType_Mask
init|=
literal|0x000000ff
block|,
name|MSWindowsFixedSizeDialogHint
init|=
literal|0x00000100
block|,
name|MSWindowsOwnDC
init|=
literal|0x00000200
block|,
name|BypassWindowManagerHint
init|=
literal|0x00000400
block|,
name|X11BypassWindowManagerHint
init|=
name|BypassWindowManagerHint
block|,
name|FramelessWindowHint
init|=
literal|0x00000800
block|,
name|WindowTitleHint
init|=
literal|0x00001000
block|,
name|WindowSystemMenuHint
init|=
literal|0x00002000
block|,
name|WindowMinimizeButtonHint
init|=
literal|0x00004000
block|,
name|WindowMaximizeButtonHint
init|=
literal|0x00008000
block|,
name|WindowMinMaxButtonsHint
init|=
name|WindowMinimizeButtonHint
operator||
name|WindowMaximizeButtonHint
block|,
name|WindowContextHelpButtonHint
init|=
literal|0x00010000
block|,
name|WindowShadeButtonHint
init|=
literal|0x00020000
block|,
name|WindowStaysOnTopHint
init|=
literal|0x00040000
block|,
name|WindowTransparentForInput
init|=
literal|0x00080000
block|,
name|WindowOverridesSystemGestures
init|=
literal|0x00100000
block|,
name|WindowDoesNotAcceptFocus
init|=
literal|0x00200000
block|,
name|CustomizeWindowHint
init|=
literal|0x02000000
block|,
name|WindowStaysOnBottomHint
init|=
literal|0x04000000
block|,
name|WindowCloseButtonHint
init|=
literal|0x08000000
block|,
name|MacWindowToolBarButtonHint
init|=
literal|0x10000000
block|,
name|BypassGraphicsProxyWidget
init|=
literal|0x20000000
block|,
name|WindowOkButtonHint
init|=
literal|0x00080000
block|,
name|WindowCancelButtonHint
init|=
literal|0x00100000
block|,
name|NoDropShadowWindowHint
init|=
literal|0x40000000
block|,
name|WindowFullscreenButtonHint
init|=
literal|0x80000000
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
name|WindowFlags
argument_list|,
name|WindowType
argument_list|)
expr|enum
name|WindowState
block|{
name|WindowNoState
operator|=
literal|0x00000000
block|,
name|WindowMinimized
operator|=
literal|0x00000001
block|,
name|WindowMaximized
operator|=
literal|0x00000002
block|,
name|WindowFullScreen
operator|=
literal|0x00000004
block|,
name|WindowActive
operator|=
literal|0x00000008
block|}
expr_stmt|;
name|Q_DECLARE_FLAGS
argument_list|(
name|WindowStates
argument_list|,
name|WindowState
argument_list|)
expr|enum
name|ApplicationState
block|{
name|ApplicationSuspended
operator|=
literal|0x00000000
block|,
name|ApplicationHidden
operator|=
literal|0x00000001
block|,
name|ApplicationInactive
operator|=
literal|0x00000002
block|,
name|ApplicationActive
operator|=
literal|0x00000004
block|}
expr_stmt|;
name|Q_DECLARE_FLAGS
argument_list|(
name|ApplicationStates
argument_list|,
name|ApplicationState
argument_list|)
expr|enum
name|ScreenOrientation
block|{
name|PrimaryOrientation
operator|=
literal|0x00000000
block|,
name|PortraitOrientation
operator|=
literal|0x00000001
block|,
name|LandscapeOrientation
operator|=
literal|0x00000002
block|,
name|InvertedPortraitOrientation
operator|=
literal|0x00000004
block|,
name|InvertedLandscapeOrientation
operator|=
literal|0x00000008
block|}
expr_stmt|;
name|Q_DECLARE_FLAGS
argument_list|(
name|ScreenOrientations
argument_list|,
name|ScreenOrientation
argument_list|)
expr|enum
name|WidgetAttribute
block|{
name|WA_Disabled
operator|=
literal|0
block|,
name|WA_UnderMouse
operator|=
literal|1
block|,
name|WA_MouseTracking
operator|=
literal|2
block|,
name|WA_ContentsPropagated
operator|=
literal|3
block|,
comment|// ## deprecated
name|WA_OpaquePaintEvent
operator|=
literal|4
block|,
name|WA_NoBackground
operator|=
name|WA_OpaquePaintEvent
block|,
comment|// ## deprecated
name|WA_StaticContents
operator|=
literal|5
block|,
name|WA_LaidOut
operator|=
literal|7
block|,
name|WA_PaintOnScreen
operator|=
literal|8
block|,
name|WA_NoSystemBackground
operator|=
literal|9
block|,
name|WA_UpdatesDisabled
operator|=
literal|10
block|,
name|WA_Mapped
operator|=
literal|11
block|,
name|WA_MacNoClickThrough
operator|=
literal|12
block|,
comment|// Mac only
name|WA_InputMethodEnabled
operator|=
literal|14
block|,
name|WA_WState_Visible
operator|=
literal|15
block|,
name|WA_WState_Hidden
operator|=
literal|16
block|,
name|WA_ForceDisabled
operator|=
literal|32
block|,
name|WA_KeyCompression
operator|=
literal|33
block|,
name|WA_PendingMoveEvent
operator|=
literal|34
block|,
name|WA_PendingResizeEvent
operator|=
literal|35
block|,
name|WA_SetPalette
operator|=
literal|36
block|,
name|WA_SetFont
operator|=
literal|37
block|,
name|WA_SetCursor
operator|=
literal|38
block|,
name|WA_NoChildEventsFromChildren
operator|=
literal|39
block|,
name|WA_WindowModified
operator|=
literal|41
block|,
name|WA_Resized
operator|=
literal|42
block|,
name|WA_Moved
operator|=
literal|43
block|,
name|WA_PendingUpdate
operator|=
literal|44
block|,
name|WA_InvalidSize
operator|=
literal|45
block|,
name|WA_MacBrushedMetal
operator|=
literal|46
block|,
comment|// Mac only
name|WA_MacMetalStyle
operator|=
name|WA_MacBrushedMetal
block|,
comment|// obsolete
name|WA_CustomWhatsThis
operator|=
literal|47
block|,
name|WA_LayoutOnEntireRect
operator|=
literal|48
block|,
name|WA_OutsideWSRange
operator|=
literal|49
block|,
name|WA_GrabbedShortcut
operator|=
literal|50
block|,
name|WA_TransparentForMouseEvents
operator|=
literal|51
block|,
name|WA_PaintUnclipped
operator|=
literal|52
block|,
name|WA_SetWindowIcon
operator|=
literal|53
block|,
name|WA_NoMouseReplay
operator|=
literal|54
block|,
name|WA_DeleteOnClose
operator|=
literal|55
block|,
name|WA_RightToLeft
operator|=
literal|56
block|,
name|WA_SetLayoutDirection
operator|=
literal|57
block|,
name|WA_NoChildEventsForParent
operator|=
literal|58
block|,
name|WA_ForceUpdatesDisabled
operator|=
literal|59
block|,
name|WA_WState_Created
operator|=
literal|60
block|,
name|WA_WState_CompressKeys
operator|=
literal|61
block|,
name|WA_WState_InPaintEvent
operator|=
literal|62
block|,
name|WA_WState_Reparented
operator|=
literal|63
block|,
name|WA_WState_ConfigPending
operator|=
literal|64
block|,
name|WA_WState_Polished
operator|=
literal|66
block|,
name|WA_WState_DND
operator|=
literal|67
block|,
comment|// ## deprecated
name|WA_WState_OwnSizePolicy
operator|=
literal|68
block|,
name|WA_WState_ExplicitShowHide
operator|=
literal|69
block|,
name|WA_ShowModal
operator|=
literal|70
block|,
comment|// ## deprecated
name|WA_MouseNoMask
operator|=
literal|71
block|,
name|WA_GroupLeader
operator|=
literal|72
block|,
comment|// ## deprecated
name|WA_NoMousePropagation
operator|=
literal|73
block|,
comment|// ## for now, might go away.
name|WA_Hover
operator|=
literal|74
block|,
name|WA_InputMethodTransparent
operator|=
literal|75
block|,
comment|// Don't reset IM when user clicks on this (for virtual keyboards on embedded)
name|WA_QuitOnClose
operator|=
literal|76
block|,
name|WA_KeyboardFocusChange
operator|=
literal|77
block|,
name|WA_AcceptDrops
operator|=
literal|78
block|,
name|WA_DropSiteRegistered
operator|=
literal|79
block|,
comment|// internal
name|WA_ForceAcceptDrops
operator|=
name|WA_DropSiteRegistered
block|,
comment|// ## deprecated
name|WA_WindowPropagation
operator|=
literal|80
block|,
name|WA_NoX11EventCompression
operator|=
literal|81
block|,
name|WA_TintedBackground
operator|=
literal|82
block|,
name|WA_X11OpenGLOverlay
operator|=
literal|83
block|,
name|WA_AlwaysShowToolTips
operator|=
literal|84
block|,
name|WA_MacOpaqueSizeGrip
operator|=
literal|85
block|,
name|WA_SetStyle
operator|=
literal|86
block|,
name|WA_SetLocale
operator|=
literal|87
block|,
name|WA_MacShowFocusRect
operator|=
literal|88
block|,
name|WA_MacNormalSize
operator|=
literal|89
block|,
comment|// Mac only
name|WA_MacSmallSize
operator|=
literal|90
block|,
comment|// Mac only
name|WA_MacMiniSize
operator|=
literal|91
block|,
comment|// Mac only
name|WA_LayoutUsesWidgetRect
operator|=
literal|92
block|,
name|WA_StyledBackground
operator|=
literal|93
block|,
comment|// internal
name|WA_MSWindowsUseDirect3D
operator|=
literal|94
block|,
comment|// Win only
name|WA_CanHostQMdiSubWindowTitleBar
operator|=
literal|95
block|,
comment|// Internal
name|WA_MacAlwaysShowToolWindow
operator|=
literal|96
block|,
comment|// Mac only
name|WA_StyleSheet
operator|=
literal|97
block|,
comment|// internal
name|WA_ShowWithoutActivating
operator|=
literal|98
block|,
name|WA_X11BypassTransientForHint
operator|=
literal|99
block|,
name|WA_NativeWindow
operator|=
literal|100
block|,
name|WA_DontCreateNativeAncestors
operator|=
literal|101
block|,
name|WA_MacVariableSize
operator|=
literal|102
block|,
comment|// Mac only
name|WA_DontShowOnScreen
operator|=
literal|103
block|,
comment|// window types from http://standards.freedesktop.org/wm-spec/
name|WA_X11NetWmWindowTypeDesktop
operator|=
literal|104
block|,
name|WA_X11NetWmWindowTypeDock
operator|=
literal|105
block|,
name|WA_X11NetWmWindowTypeToolBar
operator|=
literal|106
block|,
name|WA_X11NetWmWindowTypeMenu
operator|=
literal|107
block|,
name|WA_X11NetWmWindowTypeUtility
operator|=
literal|108
block|,
name|WA_X11NetWmWindowTypeSplash
operator|=
literal|109
block|,
name|WA_X11NetWmWindowTypeDialog
operator|=
literal|110
block|,
name|WA_X11NetWmWindowTypeDropDownMenu
operator|=
literal|111
block|,
name|WA_X11NetWmWindowTypePopupMenu
operator|=
literal|112
block|,
name|WA_X11NetWmWindowTypeToolTip
operator|=
literal|113
block|,
name|WA_X11NetWmWindowTypeNotification
operator|=
literal|114
block|,
name|WA_X11NetWmWindowTypeCombo
operator|=
literal|115
block|,
name|WA_X11NetWmWindowTypeDND
operator|=
literal|116
block|,
name|WA_MacFrameworkScaled
operator|=
literal|117
block|,
name|WA_SetWindowModality
operator|=
literal|118
block|,
name|WA_WState_WindowOpacitySet
operator|=
literal|119
block|,
comment|// internal
name|WA_TranslucentBackground
operator|=
literal|120
block|,
name|WA_AcceptTouchEvents
operator|=
literal|121
block|,
name|WA_WState_AcceptedTouchBeginEvent
operator|=
literal|122
block|,
name|WA_TouchPadAcceptSingleTouchEvents
operator|=
literal|123
block|,
name|WA_X11DoNotAcceptFocus
operator|=
literal|126
block|,
name|WA_MacNoShadow
operator|=
literal|127
block|,
comment|// Add new attributes before this line
name|WA_AttributeCount
block|}
expr_stmt|;
enum|enum
name|ApplicationAttribute
block|{
name|AA_ImmediateWidgetCreation
init|=
literal|0
block|,
name|AA_MSWindowsUseDirect3DByDefault
init|=
literal|1
block|,
comment|// Win only
name|AA_DontShowIconsInMenus
init|=
literal|2
block|,
name|AA_NativeWindows
init|=
literal|3
block|,
name|AA_DontCreateNativeWidgetSiblings
init|=
literal|4
block|,
name|AA_MacPluginApplication
init|=
literal|5
block|,
name|AA_DontUseNativeMenuBar
init|=
literal|6
block|,
name|AA_MacDontSwapCtrlAndMeta
init|=
literal|7
block|,
name|AA_Use96Dpi
init|=
literal|8
block|,
name|AA_X11InitThreads
init|=
literal|10
block|,
name|AA_SynthesizeTouchForUnhandledMouseEvents
init|=
literal|11
block|,
name|AA_SynthesizeMouseForUnhandledTouchEvents
init|=
literal|12
block|,
name|AA_UseHighDpiPixmaps
init|=
literal|13
block|,
comment|// Add new attributes before this line
name|AA_AttributeCount
block|}
enum|;
comment|// Image conversion flags.  The unusual ordering is caused by
comment|// compatibility and default requirements.
enum|enum
name|ImageConversionFlag
block|{
name|ColorMode_Mask
init|=
literal|0x00000003
block|,
name|AutoColor
init|=
literal|0x00000000
block|,
name|ColorOnly
init|=
literal|0x00000003
block|,
name|MonoOnly
init|=
literal|0x00000002
block|,
comment|// Reserved             = 0x00000001,
name|AlphaDither_Mask
init|=
literal|0x0000000c
block|,
name|ThresholdAlphaDither
init|=
literal|0x00000000
block|,
name|OrderedAlphaDither
init|=
literal|0x00000004
block|,
name|DiffuseAlphaDither
init|=
literal|0x00000008
block|,
name|NoAlpha
init|=
literal|0x0000000c
block|,
comment|// Not supported
name|Dither_Mask
init|=
literal|0x00000030
block|,
name|DiffuseDither
init|=
literal|0x00000000
block|,
name|OrderedDither
init|=
literal|0x00000010
block|,
name|ThresholdDither
init|=
literal|0x00000020
block|,
comment|// ReservedDither       = 0x00000030,
name|DitherMode_Mask
init|=
literal|0x000000c0
block|,
name|AutoDither
init|=
literal|0x00000000
block|,
name|PreferDither
init|=
literal|0x00000040
block|,
name|AvoidDither
init|=
literal|0x00000080
block|,
name|NoOpaqueDetection
init|=
literal|0x00000100
block|,
name|NoFormatConversion
init|=
literal|0x00000200
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
name|ImageConversionFlags
argument_list|,
name|ImageConversionFlag
argument_list|)
expr|enum
name|BGMode
block|{
name|TransparentMode
block|,
name|OpaqueMode
block|}
expr_stmt|;
enum|enum
name|Key
block|{
name|Key_Escape
init|=
literal|0x01000000
block|,
comment|// misc keys
name|Key_Tab
init|=
literal|0x01000001
block|,
name|Key_Backtab
init|=
literal|0x01000002
block|,
name|Key_Backspace
init|=
literal|0x01000003
block|,
name|Key_Return
init|=
literal|0x01000004
block|,
name|Key_Enter
init|=
literal|0x01000005
block|,
name|Key_Insert
init|=
literal|0x01000006
block|,
name|Key_Delete
init|=
literal|0x01000007
block|,
name|Key_Pause
init|=
literal|0x01000008
block|,
name|Key_Print
init|=
literal|0x01000009
block|,
name|Key_SysReq
init|=
literal|0x0100000a
block|,
name|Key_Clear
init|=
literal|0x0100000b
block|,
name|Key_Home
init|=
literal|0x01000010
block|,
comment|// cursor movement
name|Key_End
init|=
literal|0x01000011
block|,
name|Key_Left
init|=
literal|0x01000012
block|,
name|Key_Up
init|=
literal|0x01000013
block|,
name|Key_Right
init|=
literal|0x01000014
block|,
name|Key_Down
init|=
literal|0x01000015
block|,
name|Key_PageUp
init|=
literal|0x01000016
block|,
name|Key_PageDown
init|=
literal|0x01000017
block|,
name|Key_Shift
init|=
literal|0x01000020
block|,
comment|// modifiers
name|Key_Control
init|=
literal|0x01000021
block|,
name|Key_Meta
init|=
literal|0x01000022
block|,
name|Key_Alt
init|=
literal|0x01000023
block|,
name|Key_CapsLock
init|=
literal|0x01000024
block|,
name|Key_NumLock
init|=
literal|0x01000025
block|,
name|Key_ScrollLock
init|=
literal|0x01000026
block|,
name|Key_F1
init|=
literal|0x01000030
block|,
comment|// function keys
name|Key_F2
init|=
literal|0x01000031
block|,
name|Key_F3
init|=
literal|0x01000032
block|,
name|Key_F4
init|=
literal|0x01000033
block|,
name|Key_F5
init|=
literal|0x01000034
block|,
name|Key_F6
init|=
literal|0x01000035
block|,
name|Key_F7
init|=
literal|0x01000036
block|,
name|Key_F8
init|=
literal|0x01000037
block|,
name|Key_F9
init|=
literal|0x01000038
block|,
name|Key_F10
init|=
literal|0x01000039
block|,
name|Key_F11
init|=
literal|0x0100003a
block|,
name|Key_F12
init|=
literal|0x0100003b
block|,
name|Key_F13
init|=
literal|0x0100003c
block|,
name|Key_F14
init|=
literal|0x0100003d
block|,
name|Key_F15
init|=
literal|0x0100003e
block|,
name|Key_F16
init|=
literal|0x0100003f
block|,
name|Key_F17
init|=
literal|0x01000040
block|,
name|Key_F18
init|=
literal|0x01000041
block|,
name|Key_F19
init|=
literal|0x01000042
block|,
name|Key_F20
init|=
literal|0x01000043
block|,
name|Key_F21
init|=
literal|0x01000044
block|,
name|Key_F22
init|=
literal|0x01000045
block|,
name|Key_F23
init|=
literal|0x01000046
block|,
name|Key_F24
init|=
literal|0x01000047
block|,
name|Key_F25
init|=
literal|0x01000048
block|,
comment|// F25 .. F35 only on X11
name|Key_F26
init|=
literal|0x01000049
block|,
name|Key_F27
init|=
literal|0x0100004a
block|,
name|Key_F28
init|=
literal|0x0100004b
block|,
name|Key_F29
init|=
literal|0x0100004c
block|,
name|Key_F30
init|=
literal|0x0100004d
block|,
name|Key_F31
init|=
literal|0x0100004e
block|,
name|Key_F32
init|=
literal|0x0100004f
block|,
name|Key_F33
init|=
literal|0x01000050
block|,
name|Key_F34
init|=
literal|0x01000051
block|,
name|Key_F35
init|=
literal|0x01000052
block|,
name|Key_Super_L
init|=
literal|0x01000053
block|,
comment|// extra keys
name|Key_Super_R
init|=
literal|0x01000054
block|,
name|Key_Menu
init|=
literal|0x01000055
block|,
name|Key_Hyper_L
init|=
literal|0x01000056
block|,
name|Key_Hyper_R
init|=
literal|0x01000057
block|,
name|Key_Help
init|=
literal|0x01000058
block|,
name|Key_Direction_L
init|=
literal|0x01000059
block|,
name|Key_Direction_R
init|=
literal|0x01000060
block|,
name|Key_Space
init|=
literal|0x20
block|,
comment|// 7 bit printable ASCII
name|Key_Any
init|=
name|Key_Space
block|,
name|Key_Exclam
init|=
literal|0x21
block|,
name|Key_QuoteDbl
init|=
literal|0x22
block|,
name|Key_NumberSign
init|=
literal|0x23
block|,
name|Key_Dollar
init|=
literal|0x24
block|,
name|Key_Percent
init|=
literal|0x25
block|,
name|Key_Ampersand
init|=
literal|0x26
block|,
name|Key_Apostrophe
init|=
literal|0x27
block|,
name|Key_ParenLeft
init|=
literal|0x28
block|,
name|Key_ParenRight
init|=
literal|0x29
block|,
name|Key_Asterisk
init|=
literal|0x2a
block|,
name|Key_Plus
init|=
literal|0x2b
block|,
name|Key_Comma
init|=
literal|0x2c
block|,
name|Key_Minus
init|=
literal|0x2d
block|,
name|Key_Period
init|=
literal|0x2e
block|,
name|Key_Slash
init|=
literal|0x2f
block|,
name|Key_0
init|=
literal|0x30
block|,
name|Key_1
init|=
literal|0x31
block|,
name|Key_2
init|=
literal|0x32
block|,
name|Key_3
init|=
literal|0x33
block|,
name|Key_4
init|=
literal|0x34
block|,
name|Key_5
init|=
literal|0x35
block|,
name|Key_6
init|=
literal|0x36
block|,
name|Key_7
init|=
literal|0x37
block|,
name|Key_8
init|=
literal|0x38
block|,
name|Key_9
init|=
literal|0x39
block|,
name|Key_Colon
init|=
literal|0x3a
block|,
name|Key_Semicolon
init|=
literal|0x3b
block|,
name|Key_Less
init|=
literal|0x3c
block|,
name|Key_Equal
init|=
literal|0x3d
block|,
name|Key_Greater
init|=
literal|0x3e
block|,
name|Key_Question
init|=
literal|0x3f
block|,
name|Key_At
init|=
literal|0x40
block|,
name|Key_A
init|=
literal|0x41
block|,
name|Key_B
init|=
literal|0x42
block|,
name|Key_C
init|=
literal|0x43
block|,
name|Key_D
init|=
literal|0x44
block|,
name|Key_E
init|=
literal|0x45
block|,
name|Key_F
init|=
literal|0x46
block|,
name|Key_G
init|=
literal|0x47
block|,
name|Key_H
init|=
literal|0x48
block|,
name|Key_I
init|=
literal|0x49
block|,
name|Key_J
init|=
literal|0x4a
block|,
name|Key_K
init|=
literal|0x4b
block|,
name|Key_L
init|=
literal|0x4c
block|,
name|Key_M
init|=
literal|0x4d
block|,
name|Key_N
init|=
literal|0x4e
block|,
name|Key_O
init|=
literal|0x4f
block|,
name|Key_P
init|=
literal|0x50
block|,
name|Key_Q
init|=
literal|0x51
block|,
name|Key_R
init|=
literal|0x52
block|,
name|Key_S
init|=
literal|0x53
block|,
name|Key_T
init|=
literal|0x54
block|,
name|Key_U
init|=
literal|0x55
block|,
name|Key_V
init|=
literal|0x56
block|,
name|Key_W
init|=
literal|0x57
block|,
name|Key_X
init|=
literal|0x58
block|,
name|Key_Y
init|=
literal|0x59
block|,
name|Key_Z
init|=
literal|0x5a
block|,
name|Key_BracketLeft
init|=
literal|0x5b
block|,
name|Key_Backslash
init|=
literal|0x5c
block|,
name|Key_BracketRight
init|=
literal|0x5d
block|,
name|Key_AsciiCircum
init|=
literal|0x5e
block|,
name|Key_Underscore
init|=
literal|0x5f
block|,
name|Key_QuoteLeft
init|=
literal|0x60
block|,
name|Key_BraceLeft
init|=
literal|0x7b
block|,
name|Key_Bar
init|=
literal|0x7c
block|,
name|Key_BraceRight
init|=
literal|0x7d
block|,
name|Key_AsciiTilde
init|=
literal|0x7e
block|,
name|Key_nobreakspace
init|=
literal|0x0a0
block|,
name|Key_exclamdown
init|=
literal|0x0a1
block|,
name|Key_cent
init|=
literal|0x0a2
block|,
name|Key_sterling
init|=
literal|0x0a3
block|,
name|Key_currency
init|=
literal|0x0a4
block|,
name|Key_yen
init|=
literal|0x0a5
block|,
name|Key_brokenbar
init|=
literal|0x0a6
block|,
name|Key_section
init|=
literal|0x0a7
block|,
name|Key_diaeresis
init|=
literal|0x0a8
block|,
name|Key_copyright
init|=
literal|0x0a9
block|,
name|Key_ordfeminine
init|=
literal|0x0aa
block|,
name|Key_guillemotleft
init|=
literal|0x0ab
block|,
comment|// left angle quotation mark
name|Key_notsign
init|=
literal|0x0ac
block|,
name|Key_hyphen
init|=
literal|0x0ad
block|,
name|Key_registered
init|=
literal|0x0ae
block|,
name|Key_macron
init|=
literal|0x0af
block|,
name|Key_degree
init|=
literal|0x0b0
block|,
name|Key_plusminus
init|=
literal|0x0b1
block|,
name|Key_twosuperior
init|=
literal|0x0b2
block|,
name|Key_threesuperior
init|=
literal|0x0b3
block|,
name|Key_acute
init|=
literal|0x0b4
block|,
name|Key_mu
init|=
literal|0x0b5
block|,
name|Key_paragraph
init|=
literal|0x0b6
block|,
name|Key_periodcentered
init|=
literal|0x0b7
block|,
name|Key_cedilla
init|=
literal|0x0b8
block|,
name|Key_onesuperior
init|=
literal|0x0b9
block|,
name|Key_masculine
init|=
literal|0x0ba
block|,
name|Key_guillemotright
init|=
literal|0x0bb
block|,
comment|// right angle quotation mark
name|Key_onequarter
init|=
literal|0x0bc
block|,
name|Key_onehalf
init|=
literal|0x0bd
block|,
name|Key_threequarters
init|=
literal|0x0be
block|,
name|Key_questiondown
init|=
literal|0x0bf
block|,
name|Key_Agrave
init|=
literal|0x0c0
block|,
name|Key_Aacute
init|=
literal|0x0c1
block|,
name|Key_Acircumflex
init|=
literal|0x0c2
block|,
name|Key_Atilde
init|=
literal|0x0c3
block|,
name|Key_Adiaeresis
init|=
literal|0x0c4
block|,
name|Key_Aring
init|=
literal|0x0c5
block|,
name|Key_AE
init|=
literal|0x0c6
block|,
name|Key_Ccedilla
init|=
literal|0x0c7
block|,
name|Key_Egrave
init|=
literal|0x0c8
block|,
name|Key_Eacute
init|=
literal|0x0c9
block|,
name|Key_Ecircumflex
init|=
literal|0x0ca
block|,
name|Key_Ediaeresis
init|=
literal|0x0cb
block|,
name|Key_Igrave
init|=
literal|0x0cc
block|,
name|Key_Iacute
init|=
literal|0x0cd
block|,
name|Key_Icircumflex
init|=
literal|0x0ce
block|,
name|Key_Idiaeresis
init|=
literal|0x0cf
block|,
name|Key_ETH
init|=
literal|0x0d0
block|,
name|Key_Ntilde
init|=
literal|0x0d1
block|,
name|Key_Ograve
init|=
literal|0x0d2
block|,
name|Key_Oacute
init|=
literal|0x0d3
block|,
name|Key_Ocircumflex
init|=
literal|0x0d4
block|,
name|Key_Otilde
init|=
literal|0x0d5
block|,
name|Key_Odiaeresis
init|=
literal|0x0d6
block|,
name|Key_multiply
init|=
literal|0x0d7
block|,
name|Key_Ooblique
init|=
literal|0x0d8
block|,
name|Key_Ugrave
init|=
literal|0x0d9
block|,
name|Key_Uacute
init|=
literal|0x0da
block|,
name|Key_Ucircumflex
init|=
literal|0x0db
block|,
name|Key_Udiaeresis
init|=
literal|0x0dc
block|,
name|Key_Yacute
init|=
literal|0x0dd
block|,
name|Key_THORN
init|=
literal|0x0de
block|,
name|Key_ssharp
init|=
literal|0x0df
block|,
name|Key_division
init|=
literal|0x0f7
block|,
name|Key_ydiaeresis
init|=
literal|0x0ff
block|,
comment|// International input method support (X keycode - 0xEE00, the
comment|// definition follows Qt/Embedded 2.3.7) Only interesting if
comment|// you are writing your own input method
comment|// International& multi-key character composition
name|Key_AltGr
init|=
literal|0x01001103
block|,
name|Key_Multi_key
init|=
literal|0x01001120
block|,
comment|// Multi-key character compose
name|Key_Codeinput
init|=
literal|0x01001137
block|,
name|Key_SingleCandidate
init|=
literal|0x0100113c
block|,
name|Key_MultipleCandidate
init|=
literal|0x0100113d
block|,
name|Key_PreviousCandidate
init|=
literal|0x0100113e
block|,
comment|// Misc Functions
name|Key_Mode_switch
init|=
literal|0x0100117e
block|,
comment|// Character set switch
comment|//Key_script_switch       = 0x0100117e,  // Alias for mode_switch
comment|// Japanese keyboard support
name|Key_Kanji
init|=
literal|0x01001121
block|,
comment|// Kanji, Kanji convert
name|Key_Muhenkan
init|=
literal|0x01001122
block|,
comment|// Cancel Conversion
comment|//Key_Henkan_Mode         = 0x01001123,  // Start/Stop Conversion
name|Key_Henkan
init|=
literal|0x01001123
block|,
comment|// Alias for Henkan_Mode
name|Key_Romaji
init|=
literal|0x01001124
block|,
comment|// to Romaji
name|Key_Hiragana
init|=
literal|0x01001125
block|,
comment|// to Hiragana
name|Key_Katakana
init|=
literal|0x01001126
block|,
comment|// to Katakana
name|Key_Hiragana_Katakana
init|=
literal|0x01001127
block|,
comment|// Hiragana/Katakana toggle
name|Key_Zenkaku
init|=
literal|0x01001128
block|,
comment|// to Zenkaku
name|Key_Hankaku
init|=
literal|0x01001129
block|,
comment|// to Hankaku
name|Key_Zenkaku_Hankaku
init|=
literal|0x0100112a
block|,
comment|// Zenkaku/Hankaku toggle
name|Key_Touroku
init|=
literal|0x0100112b
block|,
comment|// Add to Dictionary
name|Key_Massyo
init|=
literal|0x0100112c
block|,
comment|// Delete from Dictionary
name|Key_Kana_Lock
init|=
literal|0x0100112d
block|,
comment|// Kana Lock
name|Key_Kana_Shift
init|=
literal|0x0100112e
block|,
comment|// Kana Shift
name|Key_Eisu_Shift
init|=
literal|0x0100112f
block|,
comment|// Alphanumeric Shift
name|Key_Eisu_toggle
init|=
literal|0x01001130
block|,
comment|// Alphanumeric toggle
comment|//Key_Kanji_Bangou        = 0x01001137,  // Codeinput
comment|//Key_Zen_Koho            = 0x0100113d,  // Multiple/All Candidate(s)
comment|//Key_Mae_Koho            = 0x0100113e,  // Previous Candidate
comment|// Korean keyboard support
comment|//
comment|// In fact, many Korean users need only 2 keys, Key_Hangul and
comment|// Key_Hangul_Hanja. But rest of the keys are good for future.
name|Key_Hangul
init|=
literal|0x01001131
block|,
comment|// Hangul start/stop(toggle)
name|Key_Hangul_Start
init|=
literal|0x01001132
block|,
comment|// Hangul start
name|Key_Hangul_End
init|=
literal|0x01001133
block|,
comment|// Hangul end, English start
name|Key_Hangul_Hanja
init|=
literal|0x01001134
block|,
comment|// Start Hangul->Hanja Conversion
name|Key_Hangul_Jamo
init|=
literal|0x01001135
block|,
comment|// Hangul Jamo mode
name|Key_Hangul_Romaja
init|=
literal|0x01001136
block|,
comment|// Hangul Romaja mode
comment|//Key_Hangul_Codeinput    = 0x01001137,  // Hangul code input mode
name|Key_Hangul_Jeonja
init|=
literal|0x01001138
block|,
comment|// Jeonja mode
name|Key_Hangul_Banja
init|=
literal|0x01001139
block|,
comment|// Banja mode
name|Key_Hangul_PreHanja
init|=
literal|0x0100113a
block|,
comment|// Pre Hanja conversion
name|Key_Hangul_PostHanja
init|=
literal|0x0100113b
block|,
comment|// Post Hanja conversion
comment|//Key_Hangul_SingleCandidate   = 0x0100113c,  // Single candidate
comment|//Key_Hangul_MultipleCandidate = 0x0100113d,  // Multiple candidate
comment|//Key_Hangul_PreviousCandidate = 0x0100113e,  // Previous candidate
name|Key_Hangul_Special
init|=
literal|0x0100113f
block|,
comment|// Special symbols
comment|//Key_Hangul_switch       = 0x0100117e,  // Alias for mode_switch
comment|// dead keys (X keycode - 0xED00 to avoid the conflict)
name|Key_Dead_Grave
init|=
literal|0x01001250
block|,
name|Key_Dead_Acute
init|=
literal|0x01001251
block|,
name|Key_Dead_Circumflex
init|=
literal|0x01001252
block|,
name|Key_Dead_Tilde
init|=
literal|0x01001253
block|,
name|Key_Dead_Macron
init|=
literal|0x01001254
block|,
name|Key_Dead_Breve
init|=
literal|0x01001255
block|,
name|Key_Dead_Abovedot
init|=
literal|0x01001256
block|,
name|Key_Dead_Diaeresis
init|=
literal|0x01001257
block|,
name|Key_Dead_Abovering
init|=
literal|0x01001258
block|,
name|Key_Dead_Doubleacute
init|=
literal|0x01001259
block|,
name|Key_Dead_Caron
init|=
literal|0x0100125a
block|,
name|Key_Dead_Cedilla
init|=
literal|0x0100125b
block|,
name|Key_Dead_Ogonek
init|=
literal|0x0100125c
block|,
name|Key_Dead_Iota
init|=
literal|0x0100125d
block|,
name|Key_Dead_Voiced_Sound
init|=
literal|0x0100125e
block|,
name|Key_Dead_Semivoiced_Sound
init|=
literal|0x0100125f
block|,
name|Key_Dead_Belowdot
init|=
literal|0x01001260
block|,
name|Key_Dead_Hook
init|=
literal|0x01001261
block|,
name|Key_Dead_Horn
init|=
literal|0x01001262
block|,
comment|// multimedia/internet keys - ignored by default - see QKeyEvent c'tor
name|Key_Back
init|=
literal|0x01000061
block|,
name|Key_Forward
init|=
literal|0x01000062
block|,
name|Key_Stop
init|=
literal|0x01000063
block|,
name|Key_Refresh
init|=
literal|0x01000064
block|,
name|Key_VolumeDown
init|=
literal|0x01000070
block|,
name|Key_VolumeMute
init|=
literal|0x01000071
block|,
name|Key_VolumeUp
init|=
literal|0x01000072
block|,
name|Key_BassBoost
init|=
literal|0x01000073
block|,
name|Key_BassUp
init|=
literal|0x01000074
block|,
name|Key_BassDown
init|=
literal|0x01000075
block|,
name|Key_TrebleUp
init|=
literal|0x01000076
block|,
name|Key_TrebleDown
init|=
literal|0x01000077
block|,
name|Key_MediaPlay
init|=
literal|0x01000080
block|,
name|Key_MediaStop
init|=
literal|0x01000081
block|,
name|Key_MediaPrevious
init|=
literal|0x01000082
block|,
name|Key_MediaNext
init|=
literal|0x01000083
block|,
name|Key_MediaRecord
init|=
literal|0x01000084
block|,
name|Key_MediaPause
init|=
literal|0x1000085
block|,
name|Key_MediaTogglePlayPause
init|=
literal|0x1000086
block|,
name|Key_HomePage
init|=
literal|0x01000090
block|,
name|Key_Favorites
init|=
literal|0x01000091
block|,
name|Key_Search
init|=
literal|0x01000092
block|,
name|Key_Standby
init|=
literal|0x01000093
block|,
name|Key_OpenUrl
init|=
literal|0x01000094
block|,
name|Key_LaunchMail
init|=
literal|0x010000a0
block|,
name|Key_LaunchMedia
init|=
literal|0x010000a1
block|,
name|Key_Launch0
init|=
literal|0x010000a2
block|,
name|Key_Launch1
init|=
literal|0x010000a3
block|,
name|Key_Launch2
init|=
literal|0x010000a4
block|,
name|Key_Launch3
init|=
literal|0x010000a5
block|,
name|Key_Launch4
init|=
literal|0x010000a6
block|,
name|Key_Launch5
init|=
literal|0x010000a7
block|,
name|Key_Launch6
init|=
literal|0x010000a8
block|,
name|Key_Launch7
init|=
literal|0x010000a9
block|,
name|Key_Launch8
init|=
literal|0x010000aa
block|,
name|Key_Launch9
init|=
literal|0x010000ab
block|,
name|Key_LaunchA
init|=
literal|0x010000ac
block|,
name|Key_LaunchB
init|=
literal|0x010000ad
block|,
name|Key_LaunchC
init|=
literal|0x010000ae
block|,
name|Key_LaunchD
init|=
literal|0x010000af
block|,
name|Key_LaunchE
init|=
literal|0x010000b0
block|,
name|Key_LaunchF
init|=
literal|0x010000b1
block|,
name|Key_MonBrightnessUp
init|=
literal|0x010000b2
block|,
name|Key_MonBrightnessDown
init|=
literal|0x010000b3
block|,
name|Key_KeyboardLightOnOff
init|=
literal|0x010000b4
block|,
name|Key_KeyboardBrightnessUp
init|=
literal|0x010000b5
block|,
name|Key_KeyboardBrightnessDown
init|=
literal|0x010000b6
block|,
name|Key_PowerOff
init|=
literal|0x010000b7
block|,
name|Key_WakeUp
init|=
literal|0x010000b8
block|,
name|Key_Eject
init|=
literal|0x010000b9
block|,
name|Key_ScreenSaver
init|=
literal|0x010000ba
block|,
name|Key_WWW
init|=
literal|0x010000bb
block|,
name|Key_Memo
init|=
literal|0x010000bc
block|,
name|Key_LightBulb
init|=
literal|0x010000bd
block|,
name|Key_Shop
init|=
literal|0x010000be
block|,
name|Key_History
init|=
literal|0x010000bf
block|,
name|Key_AddFavorite
init|=
literal|0x010000c0
block|,
name|Key_HotLinks
init|=
literal|0x010000c1
block|,
name|Key_BrightnessAdjust
init|=
literal|0x010000c2
block|,
name|Key_Finance
init|=
literal|0x010000c3
block|,
name|Key_Community
init|=
literal|0x010000c4
block|,
name|Key_AudioRewind
init|=
literal|0x010000c5
block|,
comment|// Media rewind
name|Key_BackForward
init|=
literal|0x010000c6
block|,
name|Key_ApplicationLeft
init|=
literal|0x010000c7
block|,
name|Key_ApplicationRight
init|=
literal|0x010000c8
block|,
name|Key_Book
init|=
literal|0x010000c9
block|,
name|Key_CD
init|=
literal|0x010000ca
block|,
name|Key_Calculator
init|=
literal|0x010000cb
block|,
name|Key_ToDoList
init|=
literal|0x010000cc
block|,
name|Key_ClearGrab
init|=
literal|0x010000cd
block|,
name|Key_Close
init|=
literal|0x010000ce
block|,
name|Key_Copy
init|=
literal|0x010000cf
block|,
name|Key_Cut
init|=
literal|0x010000d0
block|,
name|Key_Display
init|=
literal|0x010000d1
block|,
comment|// Output switch key
name|Key_DOS
init|=
literal|0x010000d2
block|,
name|Key_Documents
init|=
literal|0x010000d3
block|,
name|Key_Excel
init|=
literal|0x010000d4
block|,
name|Key_Explorer
init|=
literal|0x010000d5
block|,
name|Key_Game
init|=
literal|0x010000d6
block|,
name|Key_Go
init|=
literal|0x010000d7
block|,
name|Key_iTouch
init|=
literal|0x010000d8
block|,
name|Key_LogOff
init|=
literal|0x010000d9
block|,
name|Key_Market
init|=
literal|0x010000da
block|,
name|Key_Meeting
init|=
literal|0x010000db
block|,
name|Key_MenuKB
init|=
literal|0x010000dc
block|,
name|Key_MenuPB
init|=
literal|0x010000dd
block|,
name|Key_MySites
init|=
literal|0x010000de
block|,
name|Key_News
init|=
literal|0x010000df
block|,
name|Key_OfficeHome
init|=
literal|0x010000e0
block|,
name|Key_Option
init|=
literal|0x010000e1
block|,
name|Key_Paste
init|=
literal|0x010000e2
block|,
name|Key_Phone
init|=
literal|0x010000e3
block|,
name|Key_Calendar
init|=
literal|0x010000e4
block|,
name|Key_Reply
init|=
literal|0x010000e5
block|,
name|Key_Reload
init|=
literal|0x010000e6
block|,
name|Key_RotateWindows
init|=
literal|0x010000e7
block|,
name|Key_RotationPB
init|=
literal|0x010000e8
block|,
name|Key_RotationKB
init|=
literal|0x010000e9
block|,
name|Key_Save
init|=
literal|0x010000ea
block|,
name|Key_Send
init|=
literal|0x010000eb
block|,
name|Key_Spell
init|=
literal|0x010000ec
block|,
name|Key_SplitScreen
init|=
literal|0x010000ed
block|,
name|Key_Support
init|=
literal|0x010000ee
block|,
name|Key_TaskPane
init|=
literal|0x010000ef
block|,
name|Key_Terminal
init|=
literal|0x010000f0
block|,
name|Key_Tools
init|=
literal|0x010000f1
block|,
name|Key_Travel
init|=
literal|0x010000f2
block|,
name|Key_Video
init|=
literal|0x010000f3
block|,
name|Key_Word
init|=
literal|0x010000f4
block|,
name|Key_Xfer
init|=
literal|0x010000f5
block|,
name|Key_ZoomIn
init|=
literal|0x010000f6
block|,
name|Key_ZoomOut
init|=
literal|0x010000f7
block|,
name|Key_Away
init|=
literal|0x010000f8
block|,
name|Key_Messenger
init|=
literal|0x010000f9
block|,
name|Key_WebCam
init|=
literal|0x010000fa
block|,
name|Key_MailForward
init|=
literal|0x010000fb
block|,
name|Key_Pictures
init|=
literal|0x010000fc
block|,
name|Key_Music
init|=
literal|0x010000fd
block|,
name|Key_Battery
init|=
literal|0x010000fe
block|,
name|Key_Bluetooth
init|=
literal|0x010000ff
block|,
name|Key_WLAN
init|=
literal|0x01000100
block|,
name|Key_UWB
init|=
literal|0x01000101
block|,
name|Key_AudioForward
init|=
literal|0x01000102
block|,
comment|// Media fast-forward
name|Key_AudioRepeat
init|=
literal|0x01000103
block|,
comment|// Toggle repeat mode
name|Key_AudioRandomPlay
init|=
literal|0x01000104
block|,
comment|// Toggle shuffle mode
name|Key_Subtitle
init|=
literal|0x01000105
block|,
name|Key_AudioCycleTrack
init|=
literal|0x01000106
block|,
name|Key_Time
init|=
literal|0x01000107
block|,
name|Key_Hibernate
init|=
literal|0x01000108
block|,
name|Key_View
init|=
literal|0x01000109
block|,
name|Key_TopMenu
init|=
literal|0x0100010a
block|,
name|Key_PowerDown
init|=
literal|0x0100010b
block|,
name|Key_Suspend
init|=
literal|0x0100010c
block|,
name|Key_ContrastAdjust
init|=
literal|0x0100010d
block|,
name|Key_LaunchG
init|=
literal|0x0100010e
block|,
name|Key_LaunchH
init|=
literal|0x0100010f
block|,
name|Key_TouchpadToggle
init|=
literal|0x01000110
block|,
name|Key_TouchpadOn
init|=
literal|0x01000111
block|,
name|Key_TouchpadOff
init|=
literal|0x01000112
block|,
name|Key_MicMute
init|=
literal|0x01000113
block|,
name|Key_Red
init|=
literal|0x01000114
block|,
name|Key_Green
init|=
literal|0x01000115
block|,
name|Key_Yellow
init|=
literal|0x01000116
block|,
name|Key_Blue
init|=
literal|0x01000117
block|,
name|Key_ChannelUp
init|=
literal|0x01000118
block|,
name|Key_ChannelDown
init|=
literal|0x01000119
block|,
name|Key_Guide
init|=
literal|0x0100011a
block|,
name|Key_Info
init|=
literal|0x0100011b
block|,
name|Key_Settings
init|=
literal|0x0100011c
block|,
name|Key_MediaLast
init|=
literal|0x0100ffff
block|,
comment|// Keypad navigation keys
name|Key_Select
init|=
literal|0x01010000
block|,
name|Key_Yes
init|=
literal|0x01010001
block|,
name|Key_No
init|=
literal|0x01010002
block|,
comment|// Newer misc keys
name|Key_Cancel
init|=
literal|0x01020001
block|,
name|Key_Printer
init|=
literal|0x01020002
block|,
name|Key_Execute
init|=
literal|0x01020003
block|,
name|Key_Sleep
init|=
literal|0x01020004
block|,
name|Key_Play
init|=
literal|0x01020005
block|,
comment|// Not the same as Key_MediaPlay
name|Key_Zoom
init|=
literal|0x01020006
block|,
comment|//Key_Jisho   = 0x01020007, // IME: Dictionary key
comment|//Key_Oyayubi_Left = 0x01020008, // IME: Left Oyayubi key
comment|//Key_Oyayubi_Right = 0x01020009, // IME: Right Oyayubi key
name|Key_Exit
init|=
literal|0x0102000a
block|,
comment|// Device keys
name|Key_Context1
init|=
literal|0x01100000
block|,
name|Key_Context2
init|=
literal|0x01100001
block|,
name|Key_Context3
init|=
literal|0x01100002
block|,
name|Key_Context4
init|=
literal|0x01100003
block|,
name|Key_Call
init|=
literal|0x01100004
block|,
comment|// set absolute state to in a call (do not toggle state)
name|Key_Hangup
init|=
literal|0x01100005
block|,
comment|// set absolute state to hang up (do not toggle state)
name|Key_Flip
init|=
literal|0x01100006
block|,
name|Key_ToggleCallHangup
init|=
literal|0x01100007
block|,
comment|// a toggle key for answering, or hanging up, based on current call state
name|Key_VoiceDial
init|=
literal|0x01100008
block|,
name|Key_LastNumberRedial
init|=
literal|0x01100009
block|,
name|Key_Camera
init|=
literal|0x01100020
block|,
name|Key_CameraFocus
init|=
literal|0x01100021
block|,
name|Key_unknown
init|=
literal|0x01ffffff
block|}
enum|;
enum|enum
name|ArrowType
block|{
name|NoArrow
block|,
name|UpArrow
block|,
name|DownArrow
block|,
name|LeftArrow
block|,
name|RightArrow
block|}
enum|;
enum|enum
name|PenStyle
block|{
comment|// pen style
name|NoPen
block|,
name|SolidLine
block|,
name|DashLine
block|,
name|DotLine
block|,
name|DashDotLine
block|,
name|DashDotDotLine
block|,
name|CustomDashLine
ifndef|#
directive|ifndef
name|Q_MOC_RUN
block|,
name|MPenStyle
init|=
literal|0x0f
endif|#
directive|endif
block|}
enum|;
enum|enum
name|PenCapStyle
block|{
comment|// line endcap style
name|FlatCap
init|=
literal|0x00
block|,
name|SquareCap
init|=
literal|0x10
block|,
name|RoundCap
init|=
literal|0x20
block|,
name|MPenCapStyle
init|=
literal|0x30
block|}
enum|;
enum|enum
name|PenJoinStyle
block|{
comment|// line join style
name|MiterJoin
init|=
literal|0x00
block|,
name|BevelJoin
init|=
literal|0x40
block|,
name|RoundJoin
init|=
literal|0x80
block|,
name|SvgMiterJoin
init|=
literal|0x100
block|,
name|MPenJoinStyle
init|=
literal|0x1c0
block|}
enum|;
enum|enum
name|BrushStyle
block|{
comment|// brush style
name|NoBrush
block|,
name|SolidPattern
block|,
name|Dense1Pattern
block|,
name|Dense2Pattern
block|,
name|Dense3Pattern
block|,
name|Dense4Pattern
block|,
name|Dense5Pattern
block|,
name|Dense6Pattern
block|,
name|Dense7Pattern
block|,
name|HorPattern
block|,
name|VerPattern
block|,
name|CrossPattern
block|,
name|BDiagPattern
block|,
name|FDiagPattern
block|,
name|DiagCrossPattern
block|,
name|LinearGradientPattern
block|,
name|RadialGradientPattern
block|,
name|ConicalGradientPattern
block|,
name|TexturePattern
init|=
literal|24
block|}
enum|;
enum|enum
name|SizeMode
block|{
name|AbsoluteSize
block|,
name|RelativeSize
block|}
enum|;
enum|enum
name|UIEffect
block|{
name|UI_General
block|,
name|UI_AnimateMenu
block|,
name|UI_FadeMenu
block|,
name|UI_AnimateCombo
block|,
name|UI_AnimateTooltip
block|,
name|UI_FadeTooltip
block|,
name|UI_AnimateToolBox
block|}
enum|;
enum|enum
name|CursorShape
block|{
name|ArrowCursor
block|,
name|UpArrowCursor
block|,
name|CrossCursor
block|,
name|WaitCursor
block|,
name|IBeamCursor
block|,
name|SizeVerCursor
block|,
name|SizeHorCursor
block|,
name|SizeBDiagCursor
block|,
name|SizeFDiagCursor
block|,
name|SizeAllCursor
block|,
name|BlankCursor
block|,
name|SplitVCursor
block|,
name|SplitHCursor
block|,
name|PointingHandCursor
block|,
name|ForbiddenCursor
block|,
name|WhatsThisCursor
block|,
name|BusyCursor
block|,
name|OpenHandCursor
block|,
name|ClosedHandCursor
block|,
name|DragCopyCursor
block|,
name|DragMoveCursor
block|,
name|DragLinkCursor
block|,
name|LastCursor
init|=
name|DragLinkCursor
block|,
name|BitmapCursor
init|=
literal|24
block|,
name|CustomCursor
init|=
literal|25
block|}
enum|;
enum|enum
name|TextFormat
block|{
name|PlainText
block|,
name|RichText
block|,
name|AutoText
block|}
enum|;
enum|enum
name|AspectRatioMode
block|{
name|IgnoreAspectRatio
block|,
name|KeepAspectRatio
block|,
name|KeepAspectRatioByExpanding
block|}
enum|;
enum|enum
name|DockWidgetArea
block|{
name|LeftDockWidgetArea
init|=
literal|0x1
block|,
name|RightDockWidgetArea
init|=
literal|0x2
block|,
name|TopDockWidgetArea
init|=
literal|0x4
block|,
name|BottomDockWidgetArea
init|=
literal|0x8
block|,
name|DockWidgetArea_Mask
init|=
literal|0xf
block|,
name|AllDockWidgetAreas
init|=
name|DockWidgetArea_Mask
block|,
name|NoDockWidgetArea
init|=
literal|0
block|}
enum|;
enum|enum
name|DockWidgetAreaSizes
block|{
name|NDockWidgetAreas
init|=
literal|4
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
name|DockWidgetAreas
argument_list|,
name|DockWidgetArea
argument_list|)
expr|enum
name|ToolBarArea
block|{
name|LeftToolBarArea
operator|=
literal|0x1
block|,
name|RightToolBarArea
operator|=
literal|0x2
block|,
name|TopToolBarArea
operator|=
literal|0x4
block|,
name|BottomToolBarArea
operator|=
literal|0x8
block|,
name|ToolBarArea_Mask
operator|=
literal|0xf
block|,
name|AllToolBarAreas
operator|=
name|ToolBarArea_Mask
block|,
name|NoToolBarArea
operator|=
literal|0
block|}
expr_stmt|;
enum|enum
name|ToolBarAreaSizes
block|{
name|NToolBarAreas
init|=
literal|4
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
name|ToolBarAreas
argument_list|,
name|ToolBarArea
argument_list|)
expr|enum
name|DateFormat
block|{
name|TextDate
block|,
comment|// default Qt
name|ISODate
block|,
comment|// ISO 8601
name|SystemLocaleDate
block|,
comment|// deprecated
name|LocalDate
operator|=
name|SystemLocaleDate
block|,
comment|// deprecated
name|LocaleDate
block|,
comment|// deprecated
name|SystemLocaleShortDate
block|,
name|SystemLocaleLongDate
block|,
name|DefaultLocaleShortDate
block|,
name|DefaultLocaleLongDate
block|,
name|RFC2822Date
comment|// RFC 2822 (+ 850 and 1036 during parsing)
block|}
expr_stmt|;
enum|enum
name|TimeSpec
block|{
name|LocalTime
block|,
name|UTC
block|,
name|OffsetFromUTC
block|,
name|TimeZone
block|}
enum|;
enum|enum
name|DayOfWeek
block|{
name|Monday
init|=
literal|1
block|,
name|Tuesday
init|=
literal|2
block|,
name|Wednesday
init|=
literal|3
block|,
name|Thursday
init|=
literal|4
block|,
name|Friday
init|=
literal|5
block|,
name|Saturday
init|=
literal|6
block|,
name|Sunday
init|=
literal|7
block|}
enum|;
enum|enum
name|ScrollBarPolicy
block|{
name|ScrollBarAsNeeded
block|,
name|ScrollBarAlwaysOff
block|,
name|ScrollBarAlwaysOn
block|}
enum|;
enum|enum
name|CaseSensitivity
block|{
name|CaseInsensitive
block|,
name|CaseSensitive
block|}
enum|;
enum|enum
name|Corner
block|{
name|TopLeftCorner
init|=
literal|0x00000
block|,
name|TopRightCorner
init|=
literal|0x00001
block|,
name|BottomLeftCorner
init|=
literal|0x00002
block|,
name|BottomRightCorner
init|=
literal|0x00003
block|}
enum|;
enum|enum
name|Edge
block|{
name|TopEdge
init|=
literal|0x00001
block|,
name|LeftEdge
init|=
literal|0x00002
block|,
name|RightEdge
init|=
literal|0x00004
block|,
name|BottomEdge
init|=
literal|0x00008
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
name|Edges
argument_list|,
name|Edge
argument_list|)
expr|enum
name|ConnectionType
block|{
name|AutoConnection
block|,
name|DirectConnection
block|,
name|QueuedConnection
block|,
name|BlockingQueuedConnection
block|,
name|UniqueConnection
operator|=
literal|0x80
block|}
expr_stmt|;
enum|enum
name|ShortcutContext
block|{
name|WidgetShortcut
block|,
name|WindowShortcut
block|,
name|ApplicationShortcut
block|,
name|WidgetWithChildrenShortcut
block|}
enum|;
enum|enum
name|FillRule
block|{
name|OddEvenFill
block|,
name|WindingFill
block|}
enum|;
enum|enum
name|MaskMode
block|{
name|MaskInColor
block|,
name|MaskOutColor
block|}
enum|;
enum|enum
name|ClipOperation
block|{
name|NoClip
block|,
name|ReplaceClip
block|,
name|IntersectClip
block|}
enum|;
comment|// Shape = 0x1, BoundingRect = 0x2
enum|enum
name|ItemSelectionMode
block|{
name|ContainsItemShape
init|=
literal|0x0
block|,
name|IntersectsItemShape
init|=
literal|0x1
block|,
name|ContainsItemBoundingRect
init|=
literal|0x2
block|,
name|IntersectsItemBoundingRect
init|=
literal|0x3
block|}
enum|;
enum|enum
name|TransformationMode
block|{
name|FastTransformation
block|,
name|SmoothTransformation
block|}
enum|;
enum|enum
name|Axis
block|{
name|XAxis
block|,
name|YAxis
block|,
name|ZAxis
block|}
enum|;
enum|enum
name|FocusReason
block|{
name|MouseFocusReason
block|,
name|TabFocusReason
block|,
name|BacktabFocusReason
block|,
name|ActiveWindowFocusReason
block|,
name|PopupFocusReason
block|,
name|ShortcutFocusReason
block|,
name|MenuBarFocusReason
block|,
name|OtherFocusReason
block|,
name|NoFocusReason
block|}
enum|;
enum|enum
name|ContextMenuPolicy
block|{
name|NoContextMenu
block|,
name|DefaultContextMenu
block|,
name|ActionsContextMenu
block|,
name|CustomContextMenu
block|,
name|PreventContextMenu
block|}
enum|;
enum|enum
name|InputMethodQuery
block|{
name|ImEnabled
init|=
literal|0x1
block|,
name|ImCursorRectangle
init|=
literal|0x2
block|,
name|ImMicroFocus
init|=
literal|0x2
block|,
comment|// deprecated
name|ImFont
init|=
literal|0x4
block|,
name|ImCursorPosition
init|=
literal|0x8
block|,
name|ImSurroundingText
init|=
literal|0x10
block|,
name|ImCurrentSelection
init|=
literal|0x20
block|,
name|ImMaximumTextLength
init|=
literal|0x40
block|,
name|ImAnchorPosition
init|=
literal|0x80
block|,
name|ImHints
init|=
literal|0x100
block|,
name|ImPreferredLanguage
init|=
literal|0x200
block|,
name|ImPlatformData
init|=
literal|0x80000000
block|,
name|ImQueryInput
init|=
name|ImCursorRectangle
operator||
name|ImCursorPosition
operator||
name|ImSurroundingText
operator||
name|ImCurrentSelection
operator||
name|ImAnchorPosition
block|,
name|ImQueryAll
init|=
literal|0xffffffff
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
name|InputMethodQueries
argument_list|,
name|InputMethodQuery
argument_list|)
expr|enum
name|InputMethodHint
block|{
name|ImhNone
operator|=
literal|0x0
block|,
name|ImhHiddenText
operator|=
literal|0x1
block|,
name|ImhSensitiveData
operator|=
literal|0x2
block|,
name|ImhNoAutoUppercase
operator|=
literal|0x4
block|,
name|ImhPreferNumbers
operator|=
literal|0x8
block|,
name|ImhPreferUppercase
operator|=
literal|0x10
block|,
name|ImhPreferLowercase
operator|=
literal|0x20
block|,
name|ImhNoPredictiveText
operator|=
literal|0x40
block|,
name|ImhDate
operator|=
literal|0x80
block|,
name|ImhTime
operator|=
literal|0x100
block|,
name|ImhPreferLatin
operator|=
literal|0x200
block|,
name|ImhMultiLine
operator|=
literal|0x400
block|,
name|ImhDigitsOnly
operator|=
literal|0x10000
block|,
name|ImhFormattedNumbersOnly
operator|=
literal|0x20000
block|,
name|ImhUppercaseOnly
operator|=
literal|0x40000
block|,
name|ImhLowercaseOnly
operator|=
literal|0x80000
block|,
name|ImhDialableCharactersOnly
operator|=
literal|0x100000
block|,
name|ImhEmailCharactersOnly
operator|=
literal|0x200000
block|,
name|ImhUrlCharactersOnly
operator|=
literal|0x400000
block|,
name|ImhLatinOnly
operator|=
literal|0x800000
block|,
name|ImhExclusiveInputMask
operator|=
literal|0xffff0000
block|}
expr_stmt|;
name|Q_DECLARE_FLAGS
argument_list|(
name|InputMethodHints
argument_list|,
name|InputMethodHint
argument_list|)
expr|enum
name|ToolButtonStyle
block|{
name|ToolButtonIconOnly
block|,
name|ToolButtonTextOnly
block|,
name|ToolButtonTextBesideIcon
block|,
name|ToolButtonTextUnderIcon
block|,
name|ToolButtonFollowStyle
block|}
expr_stmt|;
enum|enum
name|LayoutDirection
block|{
name|LeftToRight
block|,
name|RightToLeft
block|,
name|LayoutDirectionAuto
block|}
enum|;
enum|enum
name|AnchorPoint
block|{
name|AnchorLeft
init|=
literal|0
block|,
name|AnchorHorizontalCenter
block|,
name|AnchorRight
block|,
name|AnchorTop
block|,
name|AnchorVerticalCenter
block|,
name|AnchorBottom
block|}
enum|;
enum|enum
name|FindChildOption
block|{
name|FindDirectChildrenOnly
init|=
literal|0x0
block|,
name|FindChildrenRecursively
init|=
literal|0x1
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
name|FindChildOptions
argument_list|,
name|FindChildOption
argument_list|)
expr|enum
name|DropAction
block|{
name|CopyAction
operator|=
literal|0x1
block|,
name|MoveAction
operator|=
literal|0x2
block|,
name|LinkAction
operator|=
literal|0x4
block|,
name|ActionMask
operator|=
literal|0xff
block|,
name|TargetMoveAction
operator|=
literal|0x8002
block|,
name|IgnoreAction
operator|=
literal|0x0
block|}
expr_stmt|;
name|Q_DECLARE_FLAGS
argument_list|(
name|DropActions
argument_list|,
name|DropAction
argument_list|)
expr|enum
name|CheckState
block|{
name|Unchecked
block|,
name|PartiallyChecked
block|,
name|Checked
block|}
expr_stmt|;
enum|enum
name|ItemDataRole
block|{
name|DisplayRole
init|=
literal|0
block|,
name|DecorationRole
init|=
literal|1
block|,
name|EditRole
init|=
literal|2
block|,
name|ToolTipRole
init|=
literal|3
block|,
name|StatusTipRole
init|=
literal|4
block|,
name|WhatsThisRole
init|=
literal|5
block|,
comment|// Metadata
name|FontRole
init|=
literal|6
block|,
name|TextAlignmentRole
init|=
literal|7
block|,
name|BackgroundColorRole
init|=
literal|8
block|,
name|BackgroundRole
init|=
literal|8
block|,
name|TextColorRole
init|=
literal|9
block|,
name|ForegroundRole
init|=
literal|9
block|,
name|CheckStateRole
init|=
literal|10
block|,
comment|// Accessibility
name|AccessibleTextRole
init|=
literal|11
block|,
name|AccessibleDescriptionRole
init|=
literal|12
block|,
comment|// More general purpose
name|SizeHintRole
init|=
literal|13
block|,
name|InitialSortOrderRole
init|=
literal|14
block|,
comment|// Internal UiLib roles. Start worrying when public roles go that high.
name|DisplayPropertyRole
init|=
literal|27
block|,
name|DecorationPropertyRole
init|=
literal|28
block|,
name|ToolTipPropertyRole
init|=
literal|29
block|,
name|StatusTipPropertyRole
init|=
literal|30
block|,
name|WhatsThisPropertyRole
init|=
literal|31
block|,
comment|// Reserved
name|UserRole
init|=
literal|0x0100
block|}
enum|;
enum|enum
name|ItemFlag
block|{
name|NoItemFlags
init|=
literal|0
block|,
name|ItemIsSelectable
init|=
literal|1
block|,
name|ItemIsEditable
init|=
literal|2
block|,
name|ItemIsDragEnabled
init|=
literal|4
block|,
name|ItemIsDropEnabled
init|=
literal|8
block|,
name|ItemIsUserCheckable
init|=
literal|16
block|,
name|ItemIsEnabled
init|=
literal|32
block|,
name|ItemIsTristate
init|=
literal|64
block|,
name|ItemNeverHasChildren
init|=
literal|128
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
name|ItemFlags
argument_list|,
name|ItemFlag
argument_list|)
expr|enum
name|MatchFlag
block|{
name|MatchExactly
operator|=
literal|0
block|,
name|MatchContains
operator|=
literal|1
block|,
name|MatchStartsWith
operator|=
literal|2
block|,
name|MatchEndsWith
operator|=
literal|3
block|,
name|MatchRegExp
operator|=
literal|4
block|,
name|MatchWildcard
operator|=
literal|5
block|,
name|MatchFixedString
operator|=
literal|8
block|,
name|MatchCaseSensitive
operator|=
literal|16
block|,
name|MatchWrap
operator|=
literal|32
block|,
name|MatchRecursive
operator|=
literal|64
block|}
expr_stmt|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|MatchFlags
argument_list|,
argument|MatchFlag
argument_list|)
typedef|typedef
name|void
modifier|*
name|HANDLE
typedef|;
if|#
directive|if
name|QT_DEPRECATED_SINCE
argument_list|(
literal|5
operator|,
literal|0
argument_list|)
typedef|typedef
name|WindowFlags
name|WFlags
typedef|;
endif|#
directive|endif
enum|enum
name|WindowModality
block|{
name|NonModal
block|,
name|WindowModal
block|,
name|ApplicationModal
block|}
enum|;
enum|enum
name|TextInteractionFlag
block|{
name|NoTextInteraction
init|=
literal|0
block|,
name|TextSelectableByMouse
init|=
literal|1
block|,
name|TextSelectableByKeyboard
init|=
literal|2
block|,
name|LinksAccessibleByMouse
init|=
literal|4
block|,
name|LinksAccessibleByKeyboard
init|=
literal|8
block|,
name|TextEditable
init|=
literal|16
block|,
name|TextEditorInteraction
init|=
name|TextSelectableByMouse
operator||
name|TextSelectableByKeyboard
operator||
name|TextEditable
block|,
name|TextBrowserInteraction
init|=
name|TextSelectableByMouse
operator||
name|LinksAccessibleByMouse
operator||
name|LinksAccessibleByKeyboard
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
name|TextInteractionFlags
argument_list|,
name|TextInteractionFlag
argument_list|)
expr|enum
name|EventPriority
block|{
name|HighEventPriority
operator|=
literal|1
block|,
name|NormalEventPriority
operator|=
literal|0
block|,
name|LowEventPriority
operator|=
operator|-
literal|1
block|}
expr_stmt|;
enum|enum
name|SizeHint
block|{
name|MinimumSize
block|,
name|PreferredSize
block|,
name|MaximumSize
block|,
name|MinimumDescent
block|,
name|NSizeHints
block|}
enum|;
enum|enum
name|WindowFrameSection
block|{
name|NoSection
block|,
name|LeftSection
block|,
comment|// For resize
name|TopLeftSection
block|,
name|TopSection
block|,
name|TopRightSection
block|,
name|RightSection
block|,
name|BottomRightSection
block|,
name|BottomSection
block|,
name|BottomLeftSection
block|,
name|TitleBarArea
comment|// For move
block|}
enum|;
enum|enum
name|Initialization
block|{
name|Uninitialized
block|}
enum|;
enum|enum
name|CoordinateSystem
block|{
name|DeviceCoordinates
block|,
name|LogicalCoordinates
block|}
enum|;
enum|enum
name|TouchPointState
block|{
name|TouchPointPressed
init|=
literal|0x01
block|,
name|TouchPointMoved
init|=
literal|0x02
block|,
name|TouchPointStationary
init|=
literal|0x04
block|,
name|TouchPointReleased
init|=
literal|0x08
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
name|TouchPointStates
argument_list|,
name|TouchPointState
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
expr|enum
name|GestureState
block|{
name|NoGesture
block|,
name|GestureStarted
operator|=
literal|1
block|,
name|GestureUpdated
operator|=
literal|2
block|,
name|GestureFinished
operator|=
literal|3
block|,
name|GestureCanceled
operator|=
literal|4
block|}
expr_stmt|;
enum|enum
name|GestureType
block|{
name|TapGesture
init|=
literal|1
block|,
name|TapAndHoldGesture
init|=
literal|2
block|,
name|PanGesture
init|=
literal|3
block|,
name|PinchGesture
init|=
literal|4
block|,
name|SwipeGesture
init|=
literal|5
block|,
name|CustomGesture
init|=
literal|0x0100
block|,
name|LastGestureType
init|=
operator|~
literal|0u
block|}
enum|;
enum|enum
name|GestureFlag
block|{
name|DontStartGestureOnChildren
init|=
literal|0x01
block|,
name|ReceivePartialGestures
init|=
literal|0x02
block|,
name|IgnoredGesturesPropagateToParent
init|=
literal|0x04
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
name|GestureFlags
argument_list|,
name|GestureFlag
argument_list|)
expr|enum
name|NativeGestureType
block|{
name|BeginNativeGesture
block|,
name|EndNativeGesture
block|,
name|PanNativeGesture
block|,
name|ZoomNativeGesture
block|,
name|SmartZoomNativeGesture
block|,
name|RotateNativeGesture
block|,
name|SwipeNativeGesture
block|}
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_GESTURES
enum|enum
name|NavigationMode
block|{
name|NavigationModeNone
block|,
name|NavigationModeKeypadTabOrder
block|,
name|NavigationModeKeypadDirectional
block|,
name|NavigationModeCursorAuto
block|,
name|NavigationModeCursorForceVisible
block|}
enum|;
enum|enum
name|CursorMoveStyle
block|{
name|LogicalMoveStyle
block|,
name|VisualMoveStyle
block|}
enum|;
enum|enum
name|TimerType
block|{
name|PreciseTimer
block|,
name|CoarseTimer
block|,
name|VeryCoarseTimer
block|}
enum|;
enum|enum
name|ScrollPhase
block|{
name|ScrollBegin
init|=
literal|1
block|,
name|ScrollUpdate
block|,
name|ScrollEnd
block|}
enum|;
enum|enum
name|MouseEventSource
block|{
name|MouseEventNotSynthesized
block|,
name|MouseEventSynthesizedBySystem
block|,
name|MouseEventSynthesizedByQt
block|}
enum|;
enum|enum
name|MouseEventFlag
block|{
name|MouseEventCreatedDoubleClick
init|=
literal|0x01
block|,
name|MouseEventFlagMask
init|=
literal|0xFF
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|MouseEventFlags
argument_list|,
argument|MouseEventFlag
argument_list|)
block|}
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_MOC_RUN
end_ifdef
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|Qt::MouseButtons
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|Qt::Orientations
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|Qt::KeyboardModifiers
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|Qt::WindowFlags
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|Qt::Alignment
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|Qt::Edges
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|Qt::ImageConversionFlags
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|Qt::DockWidgetAreas
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|Qt::ToolBarAreas
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|Qt::WindowStates
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|Qt::ScreenOrientations
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|Qt::DropActions
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|Qt::ItemFlags
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|Qt::MatchFlags
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|Qt::TextInteractionFlags
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|Qt::InputMethodQueries
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|Qt::InputMethodHints
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|Qt::TouchPointStates
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|Qt::MouseEventFlags
argument_list|)
end_macro
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
end_ifndef
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|Qt::GestureFlags
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|qInternalCallback
typedef|typedef
name|bool
function_decl|(
modifier|*
name|qInternalCallback
function_decl|)
parameter_list|(
name|void
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QInternal
block|{
name|public
label|:
enum|enum
name|PaintDeviceFlags
block|{
name|UnknownDevice
init|=
literal|0x00
block|,
name|Widget
init|=
literal|0x01
block|,
name|Pixmap
init|=
literal|0x02
block|,
name|Image
init|=
literal|0x03
block|,
name|Printer
init|=
literal|0x04
block|,
name|Picture
init|=
literal|0x05
block|,
name|Pbuffer
init|=
literal|0x06
block|,
comment|// GL pbuffer
name|FramebufferObject
init|=
literal|0x07
block|,
comment|// GL framebuffer object
name|CustomRaster
init|=
literal|0x08
block|,
name|MacQuartz
init|=
literal|0x09
block|,
name|PaintBuffer
init|=
literal|0x0a
block|,
name|OpenGL
init|=
literal|0x0b
block|}
enum|;
enum|enum
name|RelayoutType
block|{
name|RelayoutNormal
block|,
name|RelayoutDragging
block|,
name|RelayoutDropped
block|}
enum|;
enum|enum
name|DockPosition
block|{
name|LeftDock
block|,
name|RightDock
block|,
name|TopDock
block|,
name|BottomDock
block|,
name|DockCount
block|}
enum|;
enum|enum
name|Callback
block|{
name|EventNotifyCallback
block|,
name|LastCallback
block|}
enum|;
specifier|static
name|bool
name|registerCallback
parameter_list|(
name|Callback
parameter_list|,
name|qInternalCallback
parameter_list|)
function_decl|;
specifier|static
name|bool
name|unregisterCallback
parameter_list|(
name|Callback
parameter_list|,
name|qInternalCallback
parameter_list|)
function_decl|;
specifier|static
name|bool
name|activateCallbacks
parameter_list|(
name|Callback
parameter_list|,
name|void
modifier|*
modifier|*
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QNAMESPACE_H
end_comment
end_unit
