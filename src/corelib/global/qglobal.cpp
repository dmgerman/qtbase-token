begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qstring.h"
end_include
begin_include
include|#
directive|include
file|"qvector.h"
end_include
begin_include
include|#
directive|include
file|"qlist.h"
end_include
begin_include
include|#
directive|include
file|"qthreadstorage.h"
end_include
begin_include
include|#
directive|include
file|"qdir.h"
end_include
begin_include
include|#
directive|include
file|"qstringlist.h"
end_include
begin_include
include|#
directive|include
file|"qdatetime.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
end_ifndef
begin_include
include|#
directive|include
file|<private/qthread_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<stdarg.h>
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_EXCEPTIONS
end_ifndef
begin_include
include|#
directive|include
file|<string>
end_include
begin_include
include|#
directive|include
file|<exception>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
end_if
begin_include
include|#
directive|include
file|<crtdbg.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
end_if
begin_include
include|#
directive|include
file|<envLib.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MACX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_CORESERVICES
argument_list|)
end_if
begin_include
include|#
directive|include
file|<CoreServices/CoreServices.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
end_if
begin_include
include|#
directive|include
file|<e32def.h>
end_include
begin_include
include|#
directive|include
file|<e32debug.h>
end_include
begin_include
include|#
directive|include
file|<f32file.h>
end_include
begin_include
include|#
directive|include
file|<e32math.h>
end_include
begin_include
include|#
directive|include
file|"private/qcore_symbian_p.h"
end_include
begin_expr_stmt
name|_LIT
argument_list|(
name|qt_S60Filter
argument_list|,
literal|"Series60v?.*.sis"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|_LIT
argument_list|(
name|qt_symbianSystemInstallDir
argument_list|,
literal|"z:\\system\\install\\"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*!     \class QFlag     \brief The QFlag class is a helper data type for QFlags.      It is equivalent to a plain \c int, except with respect to     function overloading and type conversions. You should never need     to use this class in your applications.      \sa QFlags */
comment|/*!     \fn QFlag::QFlag(int value)      Constructs a QFlag object that stores the given \a value. */
comment|/*!     \fn QFlag::operator int() const      Returns the value stored by the QFlag object. */
comment|/*!     \class QFlags     \brief The QFlags class provides a type-safe way of storing     OR-combinations of enum values.       \ingroup tools      The QFlags<Enum> class is a template class, where Enum is an enum     type. QFlags is used throughout Qt for storing combinations of     enum values.      The traditional C++ approach for storing OR-combinations of enum     values is to use an \c int or \c uint variable. The inconvenience     with this approach is that there's no type checking at all; any     enum value can be OR'd with any other enum value and passed on to     a function that takes an \c int or \c uint.      Qt uses QFlags to provide type safety. For example, the     Qt::Alignment type is simply a typedef for     QFlags<Qt::AlignmentFlag>. QLabel::setAlignment() takes a     Qt::Alignment parameter, which means that any combination of     Qt::AlignmentFlag values,or 0, is legal:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 0      If you try to pass a value from another enum or just a plain     integer other than 0, the compiler will report an error. If you     need to cast integer values to flags in a untyped fashion, you can     use the explicit QFlags constructor as cast operator.      If you want to use QFlags for your own enum types, use     the Q_DECLARE_FLAGS() and Q_DECLARE_OPERATORS_FOR_FLAGS().      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 1      You can then use the \c MyClass::Options type to store     combinations of \c MyClass::Option values.      \section1 Flags and the Meta-Object System      The Q_DECLARE_FLAGS() macro does not expose the flags to the meta-object     system, so they cannot be used by Qt Script or edited in Qt Designer.     To make the flags available for these purposes, the Q_FLAGS() macro must     be used:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp meta-object flags      \section1 Naming Convention      A sensible naming convention for enum types and associated QFlags     types is to give a singular name to the enum type (e.g., \c     Option) and a plural name to the QFlags type (e.g., \c Options).     When a singular name is desired for the QFlags type (e.g., \c     Alignment), you can use \c Flag as the suffix for the enum type     (e.g., \c AlignmentFlag).      \sa QFlag */
comment|/*!     \typedef QFlags::enum_type      Typedef for the Enum template type. */
comment|/*!     \fn QFlags::QFlags(const QFlags&other)      Constructs a copy of \a other. */
comment|/*!     \fn QFlags::QFlags(Enum flag)      Constructs a QFlags object storing the given \a flag. */
comment|/*!     \fn QFlags::QFlags(Zero zero)      Constructs a QFlags object with no flags set. \a zero must be a     literal 0 value. */
comment|/*!     \fn QFlags::QFlags(QFlag value)      Constructs a QFlags object initialized with the given integer \a     value.      The QFlag type is a helper type. By using it here instead of \c     int, we effectively ensure that arbitrary enum values cannot be     cast to a QFlags, whereas untyped enum values (i.e., \c int     values) can. */
comment|/*!     \fn QFlags&QFlags::operator=(const QFlags&other)      Assigns \a other to this object and returns a reference to this     object. */
comment|/*!     \fn QFlags&QFlags::operator&=(int mask)      Performs a bitwise AND operation with \a mask and stores the     result in this QFlags object. Returns a reference to this object.      \sa operator&(), operator|=(), operator^=() */
comment|/*!     \fn QFlags&QFlags::operator&=(uint mask)      \overload */
comment|/*!     \fn QFlags&QFlags::operator|=(QFlags other)      Performs a bitwise OR operation with \a other and stores the     result in this QFlags object. Returns a reference to this object.      \sa operator|(), operator&=(), operator^=() */
comment|/*!     \fn QFlags&QFlags::operator|=(Enum other)      \overload */
comment|/*!     \fn QFlags&QFlags::operator^=(QFlags other)      Performs a bitwise XOR operation with \a other and stores the     result in this QFlags object. Returns a reference to this object.      \sa operator^(), operator&=(), operator|=() */
comment|/*!     \fn QFlags&QFlags::operator^=(Enum other)      \overload */
comment|/*!     \fn QFlags::operator int() const      Returns the value stored in the QFlags object as an integer. */
comment|/*!     \fn QFlags QFlags::operator|(QFlags other) const      Returns a QFlags object containing the result of the bitwise OR     operation on this object and \a other.      \sa operator|=(), operator^(), operator&(), operator~() */
comment|/*!     \fn QFlags QFlags::operator|(Enum other) const      \overload */
comment|/*!     \fn QFlags QFlags::operator^(QFlags other) const      Returns a QFlags object containing the result of the bitwise XOR     operation on this object and \a other.      \sa operator^=(), operator&(), operator|(), operator~() */
comment|/*!     \fn QFlags QFlags::operator^(Enum other) const      \overload */
comment|/*!     \fn QFlags QFlags::operator&(int mask) const      Returns a QFlags object containing the result of the bitwise AND     operation on this object and \a mask.      \sa operator&=(), operator|(), operator^(), operator~() */
comment|/*!     \fn QFlags QFlags::operator&(uint mask) const      \overload */
comment|/*!     \fn QFlags QFlags::operator&(Enum mask) const      \overload */
comment|/*!     \fn QFlags QFlags::operator~() const      Returns a QFlags object that contains the bitwise negation of     this object.      \sa operator&(), operator|(), operator^() */
comment|/*!     \fn bool QFlags::operator!() const      Returns true if no flag is set (i.e., if the value stored by the     QFlags object is 0); otherwise returns false. */
comment|/*!     \fn bool QFlags::testFlag(Enum flag) const     \since 4.2      Returns true if the \a flag is set, otherwise false. */
comment|/*!   \macro Q_DISABLE_COPY(Class)   \relates QObject    Disables the use of copy constructors and assignment operators   for the given \a Class.    Instances of subclasses of QObject should not be thought of as   values that can be copied or assigned, but as unique identities.   This means that when you create your own subclass of QObject   (director or indirect), you should \e not give it a copy constructor   or an assignment operator.  However, it may not enough to simply   omit them from your class, because, if you mistakenly write some code   that requires a copy constructor or an assignment operator (it's easy   to do), your compiler will thoughtfully create it for you. You must   do more.    The curious user will have seen that the Qt classes derived   from QObject typically include this macro in a private section:    \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 43    It declares a copy constructor and an assignment operator in the   private section, so that if you use them by mistake, the compiler   will report an error.    \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 44    But even this might not catch absolutely every case. You might be   tempted to do something like this:    \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 45    First of all, don't do that. Most compilers will generate code that   uses the copy constructor, so the privacy violation error will be   reported, but your C++ compiler is not required to generate code for   this statement in a specific way. It could generate code using   \e{neither} the copy constructor \e{nor} the assignment operator we   made private. In that case, no error would be reported, but your   application would probably crash when you called a member function   of \c{w}. */
comment|/*!     \macro Q_DECLARE_FLAGS(Flags, Enum)     \relates QFlags      The Q_DECLARE_FLAGS() macro expands to      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 2      \a Enum is the name of an existing enum type, whereas \a Flags is     the name of the QFlags<\e{Enum}> typedef.      See the QFlags documentation for details.      \sa Q_DECLARE_OPERATORS_FOR_FLAGS() */
comment|/*!     \macro Q_DECLARE_OPERATORS_FOR_FLAGS(Flags)     \relates QFlags      The Q_DECLARE_OPERATORS_FOR_FLAGS() macro declares global \c     operator|() functions for \a Flags, which is of type QFlags<T>.      See the QFlags documentation for details.      \sa Q_DECLARE_FLAGS() */
comment|/*!     \headerfile<QtGlobal>     \title Global Qt Declarations     \ingroup funclists      \brief The<QtGlobal> header file includes the fundamental global     declarations. It is included by most other Qt header files.      The global declarations include \l{types}, \l{functions} and     \l{macros}.      The type definitions are partly convenience definitions for basic     types (some of which guarantee certain bit-sizes on all platforms     supported by Qt), partly types related to Qt message handling. The     functions are related to generating messages, Qt version handling     and comparing and adjusting object values. And finally, some of     the declared macros enable programmers to add compiler or platform     specific code to their applications, while others are convenience     macros for larger operations.      \section1 Types      The header file declares several type definitions that guarantee a     specified bit-size on all platforms supported by Qt for various     basic types, for example \l qint8 which is a signed char     guaranteed to be 8-bit on all platforms supported by Qt. The     header file also declares the \l qlonglong type definition for \c     {long long int } (\c __int64 on Windows).      Several convenience type definitions are declared: \l qreal for \c     double, \l uchar for \c unsigned char, \l uint for \c unsigned     int, \l ulong for \c unsigned long and \l ushort for \c unsigned     short.      Finally, the QtMsgType definition identifies the various messages     that can be generated and sent to a Qt message handler;     QtMsgHandler is a type definition for a pointer to a function with     the signature \c {void myMsgHandler(QtMsgType, const char *)}.      \section1 Functions      The<QtGlobal> header file contains several functions comparing     and adjusting an object's value. These functions take a template     type as argument: You can retrieve the absolute value of an object     using the qAbs() function, and you can bound a given object's     value by given minimum and maximum values using the qBound()     function. You can retrieve the minimum and maximum of two given     objects using qMin() and qMax() respectively. All these functions     return a corresponding template type; the template types can be     replaced by any other type.      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 3<QtGlobal> also contains functions that generate messages from the     given string argument: qCritical(), qDebug(), qFatal() and     qWarning(). These functions call the message handler with the     given message.      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 4      The remaining functions are qRound() and qRound64(), which both     accept a \l qreal value as their argument returning the value     rounded up to the nearest integer and 64-bit integer respectively,     the qInstallMsgHandler() function which installs the given     QtMsgHandler, and the qVersion() function which returns the     version number of Qt at run-time as a string.      \section1 Macros      The<QtGlobal> header file provides a range of macros (Q_CC_*)     that are defined if the application is compiled using the     specified platforms. For example, the Q_CC_SUN macro is defined if     the application is compiled using Forte Developer, or Sun Studio     C++.  The header file also declares a range of macros (Q_OS_*)     that are defined for the specified platforms. For example,     Q_OS_X11 which is defined for the X Window System.      The purpose of these macros is to enable programmers to add     compiler or platform specific code to their application.      The remaining macros are convenience macros for larger operations:     The QT_TRANSLATE_NOOP() and QT_TR_NOOP() macros provide the     possibility of marking text for dynamic translation,     i.e. translation without changing the stored source text. The     Q_ASSERT() and Q_ASSERT_X() enables warning messages of various     level of refinement. The Q_FOREACH() and foreach() macros     implement Qt's foreach loop.      The Q_INT64_C() and Q_UINT64_C() macros wrap signed and unsigned     64-bit integer literals in a platform-independent way. The     Q_CHECK_PTR() macro prints a warning containing the source code's     file name and line number, saying that the program ran out of     memory, if the pointer is 0. The qPrintable() macro represent an     easy way of printing text.      Finally, the QT_POINTER_SIZE macro expands to the size of a     pointer in bytes, and the QT_VERSION and QT_VERSION_STR macros     expand to a numeric value or a string, respectively, specifying     Qt's version number, i.e the version the application is compiled     against.      \sa<QtAlgorithms>, QSysInfo */
comment|/*!     \typedef qreal     \relates<QtGlobal>      Typedef for \c double on all platforms except for those using CPUs with     ARM architectures.     On ARM-based platforms, \c qreal is a typedef for \c float for performance     reasons. */
comment|/*! \typedef uchar     \relates<QtGlobal>      Convenience typedef for \c{unsigned char}. */
comment|/*!     \fn qt_set_sequence_auto_mnemonic(bool on)     \relates<QtGlobal>      Enables automatic mnemonics on Mac if \a on is true; otherwise     this feature is disabled.      Note that this function is only available on Mac where mnemonics     are disabled by default.      To access to this function, use an extern declaration:     extern void qt_set_sequence_auto_mnemonic(bool b);      \sa {QShortcut#mnemonic}{QShortcut} */
comment|/*! \typedef ushort     \relates<QtGlobal>      Convenience typedef for \c{unsigned short}. */
comment|/*! \typedef uint     \relates<QtGlobal>      Convenience typedef for \c{unsigned int}. */
comment|/*! \typedef ulong     \relates<QtGlobal>      Convenience typedef for \c{unsigned long}. */
comment|/*! \typedef qint8     \relates<QtGlobal>      Typedef for \c{signed char}. This type is guaranteed to be 8-bit     on all platforms supported by Qt. */
comment|/*!     \typedef quint8     \relates<QtGlobal>      Typedef for \c{unsigned char}. This type is guaranteed to     be 8-bit on all platforms supported by Qt. */
comment|/*! \typedef qint16     \relates<QtGlobal>      Typedef for \c{signed short}. This type is guaranteed to be     16-bit on all platforms supported by Qt. */
comment|/*!     \typedef quint16     \relates<QtGlobal>      Typedef for \c{unsigned short}. This type is guaranteed to     be 16-bit on all platforms supported by Qt. */
comment|/*! \typedef qint32     \relates<QtGlobal>      Typedef for \c{signed int}. This type is guaranteed to be 32-bit     on all platforms supported by Qt. */
comment|/*!     \typedef quint32     \relates<QtGlobal>      Typedef for \c{unsigned int}. This type is guaranteed to     be 32-bit on all platforms supported by Qt. */
comment|/*! \typedef qint64     \relates<QtGlobal>      Typedef for \c{long long int} (\c __int64 on Windows). This type     is guaranteed to be 64-bit on all platforms supported by Qt.      Literals of this type can be created using the Q_INT64_C() macro:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 5      \sa Q_INT64_C(), quint64, qlonglong */
comment|/*!     \typedef quint64     \relates<QtGlobal>      Typedef for \c{unsigned long long int} (\c{unsigned __int64} on     Windows). This type is guaranteed to be 64-bit on all platforms     supported by Qt.      Literals of this type can be created using the Q_UINT64_C()     macro:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 6      \sa Q_UINT64_C(), qint64, qulonglong */
comment|/*!     \typedef quintptr     \relates<QtGlobal>      Integral type for representing a pointers (useful for hashing,     etc.).      Typedef for either quint32 or quint64. This type is guaranteed to     be the same size as a pointer on all platforms supported by Qt. On     a system with 32-bit pointers, quintptr is a typedef for quint32;     on a system with 64-bit pointers, quintptr is a typedef for     quint64.      Note that quintptr is unsigned. Use qptrdiff for signed values.      \sa qptrdiff, quint32, quint64 */
comment|/*!     \typedef qptrdiff     \relates<QtGlobal>      Integral type for representing pointer differences.      Typedef for either qint32 or qint64. This type is guaranteed to be     the same size as a pointer on all platforms supported by Qt. On a     system with 32-bit pointers, quintptr is a typedef for quint32; on     a system with 64-bit pointers, quintptr is a typedef for quint64.      Note that qptrdiff is signed. Use quintptr for unsigned values.      \sa quintptr, qint32, qint64 */
comment|/*!     \typedef QtMsgHandler     \relates<QtGlobal>      This is a typedef for a pointer to a function with the following     signature:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 7      \sa QtMsgType, qInstallMsgHandler() */
comment|/*!     \enum QtMsgType     \relates<QtGlobal>      This enum describes the messages that can be sent to a message     handler (QtMsgHandler). You can use the enum to identify and     associate the various message types with the appropriate     actions.      \value QtDebugMsg            A message generated by the qDebug() function.     \value QtWarningMsg            A message generated by the qWarning() function.     \value QtCriticalMsg            A message generated by the qCritical() function.     \value QtFatalMsg            A message generated by the qFatal() function.     \value QtSystemMsg       \sa QtMsgHandler, qInstallMsgHandler() */
comment|/*! \macro qint64 Q_INT64_C(literal)     \relates<QtGlobal>      Wraps the signed 64-bit integer \a literal in a     platform-independent way.      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 8      \sa qint64, Q_UINT64_C() */
comment|/*! \macro quint64 Q_UINT64_C(literal)     \relates<QtGlobal>      Wraps the unsigned 64-bit integer \a literal in a     platform-independent way.      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 9      \sa quint64, Q_INT64_C() */
comment|/*! \typedef qlonglong     \relates<QtGlobal>      Typedef for \c{long long int} (\c __int64 on Windows). This is     the same as \l qint64.      \sa qulonglong, qint64 */
comment|/*!     \typedef qulonglong     \relates<QtGlobal>      Typedef for \c{unsigned long long int} (\c{unsigned __int64} on     Windows). This is the same as \l quint64.      \sa quint64, qlonglong */
comment|/*! \fn const T&qAbs(const T&value)     \relates<QtGlobal>      Compares \a value to the 0 of type T and returns the absolute     value. Thus if T is \e {double}, then \a value is compared to     \e{(double) 0}.      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 10 */
comment|/*! \fn int qRound(qreal value)     \relates<QtGlobal>      Rounds \a value to the nearest integer.      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 11 */
comment|/*! \fn qint64 qRound64(qreal value)     \relates<QtGlobal>      Rounds \a value to the nearest 64-bit integer.      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 12 */
comment|/*! \fn const T&qMin(const T&value1, const T&value2)     \relates<QtGlobal>      Returns the minimum of \a value1 and \a value2.      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 13      \sa qMax(), qBound() */
comment|/*! \fn const T&qMax(const T&value1, const T&value2)     \relates<QtGlobal>      Returns the maximum of \a value1 and \a value2.      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 14      \sa qMin(), qBound() */
comment|/*! \fn const T&qBound(const T&min, const T&value, const T&max)     \relates<QtGlobal>      Returns \a value bounded by \a min and \a max. This is equivalent     to qMax(\a min, qMin(\a value, \a max)).      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 15      \sa qMin(), qMax() */
comment|/*!     \fn int qMacVersion()     \relates<QtGlobal>      Use QSysInfo::MacintoshVersion instead.      \sa QSysInfo */
comment|/*!     \macro QT_VERSION_CHECK     \relates<QtGlobal>      Turns the major, minor and patch numbers of a version into an     integer, 0xMMNNPP (MM = major, NN = minor, PP = patch). This can     be compared with another similarly processed version id.      \sa QT_VERSION */
comment|/*!     \macro QT_VERSION     \relates<QtGlobal>      This macro expands a numeric value of the form 0xMMNNPP (MM =     major, NN = minor, PP = patch) that specifies Qt's version     number. For example, if you compile your application against Qt     4.1.2, the QT_VERSION macro will expand to 0x040102.      You can use QT_VERSION to use the latest Qt features where     available.      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 16      \sa QT_VERSION_STR, qVersion() */
comment|/*!     \macro QT_VERSION_STR     \relates<QtGlobal>      This macro expands to a string that specifies Qt's version number     (for example, "4.1.2"). This is the version against which the     application is compiled.      \sa qVersion(), QT_VERSION */
comment|/*!     \relates<QtGlobal>      Returns the version number of Qt at run-time as a string (for     example, "4.1.2"). This may be a different version than the     version the application was compiled against.      \sa QT_VERSION_STR */
DECL|function|qVersion
specifier|const
name|char
modifier|*
name|qVersion
parameter_list|()
block|{
return|return
name|QT_VERSION_STR
return|;
block|}
end_function
begin_function
DECL|function|qSharedBuild
name|bool
name|qSharedBuild
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_SHARED
return|return
literal|true
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*****************************************************************************   System detection routines  *****************************************************************************/
end_comment
begin_comment
comment|/*!     \class QSysInfo     \brief The QSysInfo class provides information about the system.      \list     \o \l WordSize specifies the size of a pointer for the platform        on which the application is compiled.     \o \l ByteOrder specifies whether the platform is big-endian or        little-endian.     \o \l WindowsVersion specifies the version of the Windows operating        system on which the application is run (Windows only)     \o \l MacintoshVersion specifies the version of the Macintosh        operating system on which the application is run (Mac only).     \endlist      Some constants are defined only on certain platforms. You can use     the preprocessor symbols Q_WS_WIN and Q_WS_MAC to test that     the application is compiled under Windows or Mac.      \sa QLibraryInfo */
end_comment
begin_comment
comment|/*!     \enum QSysInfo::Sizes      This enum provides platform-specific information about the sizes of data     structures used by the underlying architecture.      \value WordSize The size in bits of a pointer for the platform on which            the application is compiled (32 or 64). */
end_comment
begin_comment
comment|/*!     \variable QSysInfo::WindowsVersion     \brief the version of the Windows operating system on which the            application is run (Windows only) */
end_comment
begin_comment
comment|/*!     \fn QSysInfo::WindowsVersion QSysInfo::windowsVersion()     \since 4.4      Returns the version of the Windows operating system on which the     application is run (Windows only). */
end_comment
begin_comment
comment|/*!     \variable QSysInfo::MacintoshVersion     \brief the version of the Macintosh operating system on which            the application is run (Mac only). */
end_comment
begin_comment
comment|/*!     \fn QSysInfo::SymbianVersion QSysInfo::symbianVersion()     \since 4.6      Returns the version of the Symbian operating system on which the     application is run (Symbian only). */
end_comment
begin_comment
comment|/*!     \fn QSysInfo::S60Version QSysInfo::s60Version()     \since 4.6      Returns the version of the S60 SDK system on which the     application is run (S60 only). */
end_comment
begin_comment
comment|/*!     \enum QSysInfo::Endian      \value BigEndian  Big-endian byte order (also called Network byte order)     \value LittleEndian  Little-endian byte order     \value ByteOrder  Equals BigEndian or LittleEndian, depending on                       the platform's byte order. */
end_comment
begin_comment
comment|/*!     \enum QSysInfo::WinVersion      This enum provides symbolic names for the various versions of the     Windows operating system. On Windows, the     QSysInfo::WindowsVersion variable gives the version of the system     on which the application is run.      MS-DOS-based versions:      \value WV_32s   Windows 3.1 with Win 32s     \value WV_95    Windows 95     \value WV_98    Windows 98     \value WV_Me    Windows Me      NT-based versions (note that each operating system version is only represented once rather than each Windows edition):      \value WV_NT    Windows NT (operating system version 4.0)     \value WV_2000  Windows 2000 (operating system version 5.0)     \value WV_XP    Windows XP (operating system version 5.1)     \value WV_2003  Windows Server 2003, Windows Server 2003 R2, Windows Home Server, Windows XP Professional x64 Edition (operating system version 5.2)     \value WV_VISTA Windows Vista, Windows Server 2008 (operating system version 6.0)     \value WV_WINDOWS7 Windows 7, Windows Server 2008 R2 (operating system version 6.1)      Alternatively, you may use the following macros which correspond directly to the Windows operating system version number:      \value WV_4_0   Operating system version 4.0, corresponds to Windows NT     \value WV_5_0   Operating system version 5.0, corresponds to Windows 2000     \value WV_5_1   Operating system version 5.1, corresponds to Windows XP     \value WV_5_2   Operating system version 5.2, corresponds to Windows Server 2003, Windows Server 2003 R2, Windows Home Server, and Windows XP Professional x64 Edition     \value WV_6_0   Operating system version 6.0, corresponds to Windows Vista and Windows Server 2008     \value WV_6_1   Operating system version 6.1, corresponds to Windows 7 and Windows Server 2008 R2      CE-based versions:      \value WV_CE    Windows CE     \value WV_CENET Windows CE .NET     \value WV_CE_5  Windows CE 5.x     \value WV_CE_6  Windows CE 6.x      The following masks can be used for testing whether a Windows     version is MS-DOS-based, NT-based, or CE-based:      \value WV_DOS_based MS-DOS-based version of Windows     \value WV_NT_based  NT-based version of Windows     \value WV_CE_based  CE-based version of Windows      \sa MacVersion, SymbianVersion */
end_comment
begin_comment
comment|/*!     \enum QSysInfo::MacVersion      This enum provides symbolic names for the various versions of the     Macintosh operating system. On Mac, the     QSysInfo::MacintoshVersion variable gives the version of the     system on which the application is run.      \value MV_9        Mac OS 9 (unsupported)     \value MV_10_0     Mac OS X 10.0 (unsupported)     \value MV_10_1     Mac OS X 10.1 (unsupported)     \value MV_10_2     Mac OS X 10.2 (unsupported)     \value MV_10_3     Mac OS X 10.3     \value MV_10_4     Mac OS X 10.4     \value MV_10_5     Mac OS X 10.5     \value MV_10_6     Mac OS X 10.6     \value MV_10_7     Mac OS X 10.7     \value MV_Unknown  An unknown and currently unsupported platform      \value MV_CHEETAH  Apple codename for MV_10_0     \value MV_PUMA     Apple codename for MV_10_1     \value MV_JAGUAR   Apple codename for MV_10_2     \value MV_PANTHER  Apple codename for MV_10_3     \value MV_TIGER    Apple codename for MV_10_4     \value MV_LEOPARD  Apple codename for MV_10_5     \value MV_SNOWLEOPARD  Apple codename for MV_10_6     \value MV_LION     Apple codename for MV_10_7      \sa WinVersion, SymbianVersion */
end_comment
begin_comment
comment|/*!     \enum QSysInfo::SymbianVersion      This enum provides symbolic names for the various versions of the     Symbian operating system. On Symbian, the     QSysInfo::symbianVersion() function gives the version of the     system on which the application is run.      \value SV_9_2 Symbian OS v9.2     \value SV_9_3 Symbian OS v9.3     \value SV_9_4 Symbian OS v9.4     \value SV_SF_1 S60 5th Edition (Symbian^1)     \value SV_SF_2 Symbian^2     \value SV_SF_3 Symbian^3 or Symbian Anna     \value SV_SF_4 \e{This enum value is deprecated.}     \value SV_API_5_3 Symbian/S60 API version 5.3 release     \value SV_API_5_4 Symbian/S60 API version 5.4 release     \value SV_Unknown An unknown and currently unsupported platform      \sa S60Version, WinVersion, MacVersion */
end_comment
begin_comment
comment|/*!     \enum QSysInfo::S60Version      This enum provides symbolic names for the various versions of the     S60 SDK. On S60, the     QSysInfo::s60Version() function gives the version of the     SDK on which the application is run.      \value SV_S60_3_1 S60 3rd Edition Feature Pack 1     \value SV_S60_3_2 S60 3rd Edition Feature Pack 2     \value SV_S60_5_0 S60 5th Edition     \value SV_S60_5_1 \e{This enum value is deprecated.}     \value SV_S60_5_2 Symbian^3 and Symbian Anna     \value SV_S60_5_3 Symbian/S60 API version 5.3 release     \value SV_S60_5_4 Symbian/S60 API version 5.4 release     \value SV_S60_Unknown An unknown and currently unsupported platform     \omitvalue SV_S60_None      \sa SymbianVersion, WinVersion, MacVersion */
end_comment
begin_comment
comment|/*!     \macro Q_WS_MAC     \relates<QtGlobal>      Defined on Mac OS X.      \sa Q_WS_WIN, Q_WS_X11, Q_WS_QWS, Q_WS_QPA, Q_WS_S60 */
end_comment
begin_comment
comment|/*!     \macro Q_WS_WIN     \relates<QtGlobal>      Defined on Windows.      \sa Q_WS_MAC, Q_WS_X11, Q_WS_QWS, Q_WS_QPA, Q_WS_S60 */
end_comment
begin_comment
comment|/*!     \macro Q_WS_X11     \relates<QtGlobal>      Defined on X11.      \sa Q_WS_MAC, Q_WS_WIN, Q_WS_QWS, Q_WS_QPA, Q_WS_S60 */
end_comment
begin_comment
comment|/*!     \macro Q_WS_QWS     \relates<QtGlobal>      Defined on Qt for Embedded Linux.      \sa Q_WS_MAC, Q_WS_WIN, Q_WS_X11, Q_WS_QPA, Q_WS_S60 */
end_comment
begin_comment
comment|/*!     \macro Q_WS_QPA     \relates<QtGlobal>      Defined on Qt for Embedded Linux, Lite version.      \sa Q_WS_MAC, Q_WS_WIN, Q_WS_X11, Q_WS_QWS, Q_WS_S60 */
end_comment
begin_comment
comment|/*!     \macro Q_OS_DARWIN     \relates<QtGlobal>      Defined on Darwin OS (synonym for Q_OS_MAC). */
end_comment
begin_comment
comment|/*!     \macro Q_OS_MSDOS     \relates<QtGlobal>      Defined on MS-DOS and Windows. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_OS2     \relates<QtGlobal>      Defined on OS/2. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_OS2EMX     \relates<QtGlobal>      Defined on XFree86 on OS/2 (not PM). */
end_comment
begin_comment
comment|/*!     \macro Q_OS_WIN32     \relates<QtGlobal>      Defined on all supported versions of Windows. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_WINCE     \relates<QtGlobal>      Defined on Windows CE. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_CYGWIN     \relates<QtGlobal>      Defined on Cygwin. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_SOLARIS     \relates<QtGlobal>      Defined on Sun Solaris. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_HPUX     \relates<QtGlobal>      Defined on HP-UX. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_ULTRIX     \relates<QtGlobal>      Defined on DEC Ultrix. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_LINUX     \relates<QtGlobal>      Defined on Linux. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_FREEBSD     \relates<QtGlobal>      Defined on FreeBSD. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_NETBSD     \relates<QtGlobal>      Defined on NetBSD. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_OPENBSD     \relates<QtGlobal>      Defined on OpenBSD. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_BSDI     \relates<QtGlobal>      Defined on BSD/OS. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_IRIX     \relates<QtGlobal>      Defined on SGI Irix. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_OSF     \relates<QtGlobal>      Defined on HP Tru64 UNIX. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_SCO     \relates<QtGlobal>      Defined on SCO OpenServer 5. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_UNIXWARE     \relates<QtGlobal>      Defined on UnixWare 7, Open UNIX 8. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_AIX     \relates<QtGlobal>      Defined on AIX. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_HURD     \relates<QtGlobal>      Defined on GNU Hurd. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_DGUX     \relates<QtGlobal>      Defined on DG/UX. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_RELIANT     \relates<QtGlobal>      Defined on Reliant UNIX. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_DYNIX     \relates<QtGlobal>      Defined on DYNIX/ptx. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_QNX     \relates<QtGlobal>      Defined on QNX Neutrino. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_LYNX     \relates<QtGlobal>      Defined on LynxOS. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_BSD4     \relates<QtGlobal>      Defined on Any BSD 4.4 system. */
end_comment
begin_comment
comment|/*!     \macro Q_OS_UNIX     \relates<QtGlobal>      Defined on Any UNIX BSD/SYSV system. */
end_comment
begin_comment
comment|/*!     \macro Q_CC_SYM     \relates<QtGlobal>      Defined if the application is compiled using Digital Mars C/C++     (used to be Symantec C++). */
end_comment
begin_comment
comment|/*!     \macro Q_CC_MWERKS     \relates<QtGlobal>      Defined if the application is compiled using Metrowerks     CodeWarrior. */
end_comment
begin_comment
comment|/*!     \macro Q_CC_MSVC     \relates<QtGlobal>      Defined if the application is compiled using Microsoft Visual     C/C++, Intel C++ for Windows. */
end_comment
begin_comment
comment|/*!     \macro Q_CC_BOR     \relates<QtGlobal>      Defined if the application is compiled using Borland/Turbo C++. */
end_comment
begin_comment
comment|/*!     \macro Q_CC_WAT     \relates<QtGlobal>      Defined if the application is compiled using Watcom C++. */
end_comment
begin_comment
comment|/*!     \macro Q_CC_GNU     \relates<QtGlobal>      Defined if the application is compiled using GNU C++. */
end_comment
begin_comment
comment|/*!     \macro Q_CC_COMEAU     \relates<QtGlobal>      Defined if the application is compiled using Comeau C++. */
end_comment
begin_comment
comment|/*!     \macro Q_CC_EDG     \relates<QtGlobal>      Defined if the application is compiled using Edison Design Group     C++. */
end_comment
begin_comment
comment|/*!     \macro Q_CC_OC     \relates<QtGlobal>      Defined if the application is compiled using CenterLine C++. */
end_comment
begin_comment
comment|/*!     \macro Q_CC_SUN     \relates<QtGlobal>      Defined if the application is compiled using Forte Developer, or     Sun Studio C++. */
end_comment
begin_comment
comment|/*!     \macro Q_CC_MIPS     \relates<QtGlobal>      Defined if the application is compiled using MIPSpro C++. */
end_comment
begin_comment
comment|/*!     \macro Q_CC_DEC     \relates<QtGlobal>      Defined if the application is compiled using DEC C++. */
end_comment
begin_comment
comment|/*!     \macro Q_CC_HPACC     \relates<QtGlobal>      Defined if the application is compiled using HP aC++. */
end_comment
begin_comment
comment|/*!     \macro Q_CC_USLC     \relates<QtGlobal>      Defined if the application is compiled using SCO OUDK and UDK. */
end_comment
begin_comment
comment|/*!     \macro Q_CC_CDS     \relates<QtGlobal>      Defined if the application is compiled using Reliant C++. */
end_comment
begin_comment
comment|/*!     \macro Q_CC_KAI     \relates<QtGlobal>      Defined if the application is compiled using KAI C++. */
end_comment
begin_comment
comment|/*!     \macro Q_CC_INTEL     \relates<QtGlobal>      Defined if the application is compiled using Intel C++ for Linux,     Intel C++ for Windows. */
end_comment
begin_comment
comment|/*!     \macro Q_CC_HIGHC     \relates<QtGlobal>      Defined if the application is compiled using MetaWare High C/C++. */
end_comment
begin_comment
comment|/*!     \macro Q_CC_PGI     \relates<QtGlobal>      Defined if the application is compiled using Portland Group C++. */
end_comment
begin_comment
comment|/*!     \macro Q_CC_GHS     \relates<QtGlobal>      Defined if the application is compiled using Green Hills     Optimizing C++ Compilers. */
end_comment
begin_comment
comment|/*!   \macro Q_OS_MAC   \relates<QtGlobal>    Defined on MAC OS (synonym for Darwin).  */
end_comment
begin_comment
comment|/*!   \macro Q_OS_SYMBIAN   \relates<QtGlobal>    Defined on Symbian.  */
end_comment
begin_comment
comment|/*!   \macro Q_WS_S60   \relates<QtGlobal>    Defined on S60 with the Avkon UI framework.    \sa Q_WS_MAC, Q_WS_WIN, Q_WS_X11, Q_WS_QWS  */
end_comment
begin_comment
comment|/*!   \macro QT_DISABLE_DEPRECATED_BEFORE   \relates<QtGlobal>    This macro can be defined in the project file to disable functions deprecated in   a specified version of Qt or any earlier version. The default version number is 5.0,   meaning that functions deprecated in or before Qt 5.0 will not be included.    Examples:   When using a future release of Qt 5, set QT_DISABLE_DEPRECATED_BEFORE=0x050100 to   disable functions deprecated in Qt 5.1 and earlier. In any release, set   QT_DISABLE_DEPRECATED_BEFORE=0x000000 to enable any functions, including the ones   deprecated in Qt 5.0  */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_BUILD_QMAKE
argument_list|)
end_if
begin_comment
comment|// needed to bootstrap qmake
end_comment
begin_decl_stmt
DECL|variable|qt_one
specifier|static
specifier|const
name|unsigned
name|int
name|qt_one
init|=
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|ByteOrder
specifier|const
name|int
name|QSysInfo
operator|::
name|ByteOrder
init|=
operator|(
operator|(
operator|*
operator|(
operator|(
name|unsigned
name|char
operator|*
operator|)
operator|&
name|qt_one
operator|)
operator|==
literal|0
operator|)
condition|?
name|BigEndian
else|:
name|LittleEndian
operator|)
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QWS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_WS_QPA
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
end_if
begin_function
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|"private/qcore_mac_p.h"
include|#
directive|include
file|"qnamespace.h"
name|QT_END_INCLUDE_NAMESPACE
DECL|function|qt_mac_create_fsref
name|Q_CORE_EXPORT
name|OSErr
name|qt_mac_create_fsref
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|,
name|FSRef
modifier|*
name|fsref
parameter_list|)
block|{
return|return
name|FSPathMakeRef
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|UInt8
operator|*
argument_list|>
argument_list|(
name|file
operator|.
name|toUtf8
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|fsref
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Don't use this function, it won't work in 10.5 (Leopard) and up
end_comment
begin_function
DECL|function|qt_mac_create_fsspec
name|Q_CORE_EXPORT
name|OSErr
name|qt_mac_create_fsspec
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|,
name|FSSpec
modifier|*
name|spec
parameter_list|)
block|{
name|FSRef
name|fsref
decl_stmt|;
name|OSErr
name|ret
init|=
name|qt_mac_create_fsref
argument_list|(
name|file
argument_list|,
operator|&
name|fsref
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
name|noErr
condition|)
name|ret
operator|=
name|FSGetCatalogInfo
argument_list|(
operator|&
name|fsref
argument_list|,
name|kFSCatInfoNone
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|spec
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|qt_mac_to_pascal_string
name|Q_CORE_EXPORT
name|void
name|qt_mac_to_pascal_string
parameter_list|(
name|QString
name|s
parameter_list|,
name|Str255
name|str
parameter_list|,
name|TextEncoding
name|encoding
init|=
literal|0
parameter_list|,
name|int
name|len
init|=
operator|-
literal|1
parameter_list|)
block|{
if|if
condition|(
name|len
operator|==
operator|-
literal|1
condition|)
name|len
operator|=
name|s
operator|.
name|length
argument_list|()
expr_stmt|;
if|#
directive|if
literal|0
block|UnicodeMapping mapping;     mapping.unicodeEncoding = CreateTextEncoding(kTextEncodingUnicodeDefault,                                                  kTextEncodingDefaultVariant,                                                  kUnicode16BitFormat);     mapping.otherEncoding = (encoding ? encoding : );     mapping.mappingVersion = kUnicodeUseLatestMapping;      UnicodeToTextInfo info;     OSStatus err = CreateUnicodeToTextInfo(&mapping,&info);     if(err != noErr) {         qDebug("Qt: internal: Unable to create pascal string '%s'::%d [%ld]",                s.left(len).latin1(), (int)encoding, err);         return;     }     const int unilen = len * 2;     const UniChar *unibuf = (UniChar *)s.unicode();     ConvertFromUnicodeToPString(info, unilen, unibuf, str);     DisposeUnicodeToTextInfo(&info);
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|CFStringGetPascalString
argument_list|(
name|QCFString
argument_list|(
name|s
argument_list|)
argument_list|,
name|str
argument_list|,
literal|256
argument_list|,
name|CFStringGetSystemEncoding
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|qt_mac_from_pascal_string
name|Q_CORE_EXPORT
name|QString
name|qt_mac_from_pascal_string
parameter_list|(
specifier|const
name|Str255
name|pstr
parameter_list|)
block|{
return|return
name|QCFString
argument_list|(
name|CFStringCreateWithPascalString
argument_list|(
literal|0
argument_list|,
name|pstr
argument_list|,
name|CFStringGetSystemEncoding
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//!defined(QWS)&& !defined(Q_WS_QPA)&& defined(Q_OS_MAC)
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QWS
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
end_if
begin_function
DECL|function|macVersion
specifier|static
name|QSysInfo
operator|::
name|MacVersion
name|macVersion
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_CORESERVICES
name|SInt32
name|gestalt_version
decl_stmt|;
if|if
condition|(
name|Gestalt
argument_list|(
name|gestaltSystemVersion
argument_list|,
operator|&
name|gestalt_version
argument_list|)
operator|==
name|noErr
condition|)
block|{
return|return
name|QSysInfo
operator|::
name|MacVersion
argument_list|(
operator|(
operator|(
name|gestalt_version
operator|&
literal|0x00F0
operator|)
operator|>>
literal|4
operator|)
operator|+
literal|2
argument_list|)
return|;
block|}
endif|#
directive|endif
return|return
name|QSysInfo
operator|::
name|MV_Unknown
return|;
block|}
end_function
begin_decl_stmt
DECL|member|MacintoshVersion
specifier|const
name|QSysInfo
operator|::
name|MacVersion
name|QSysInfo
operator|::
name|MacintoshVersion
init|=
name|macVersion
argument_list|()
decl_stmt|;
end_decl_stmt
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_CYGWIN
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_elif
begin_function
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|"qt_windows.h"
name|QT_END_INCLUDE_NAMESPACE
DECL|function|windowsVersion
name|QSysInfo
operator|::
name|WinVersion
name|QSysInfo
operator|::
name|windowsVersion
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|VER_PLATFORM_WIN32s
DECL|macro|VER_PLATFORM_WIN32s
define|#
directive|define
name|VER_PLATFORM_WIN32s
value|0
endif|#
directive|endif
ifndef|#
directive|ifndef
name|VER_PLATFORM_WIN32_WINDOWS
DECL|macro|VER_PLATFORM_WIN32_WINDOWS
define|#
directive|define
name|VER_PLATFORM_WIN32_WINDOWS
value|1
endif|#
directive|endif
ifndef|#
directive|ifndef
name|VER_PLATFORM_WIN32_NT
DECL|macro|VER_PLATFORM_WIN32_NT
define|#
directive|define
name|VER_PLATFORM_WIN32_NT
value|2
endif|#
directive|endif
ifndef|#
directive|ifndef
name|VER_PLATFORM_WIN32_CE
DECL|macro|VER_PLATFORM_WIN32_CE
define|#
directive|define
name|VER_PLATFORM_WIN32_CE
value|3
endif|#
directive|endif
specifier|static
name|QSysInfo
operator|::
name|WinVersion
name|winver
decl_stmt|;
if|if
condition|(
name|winver
condition|)
return|return
name|winver
return|;
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_NT
expr_stmt|;
name|OSVERSIONINFO
name|osver
decl_stmt|;
name|osver
operator|.
name|dwOSVersionInfoSize
operator|=
sizeof|sizeof
argument_list|(
name|osver
argument_list|)
expr_stmt|;
name|GetVersionEx
argument_list|(
operator|&
name|osver
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|DWORD
name|qt_cever
init|=
literal|0
decl_stmt|;
name|qt_cever
operator|=
name|osver
operator|.
name|dwMajorVersion
operator|*
literal|100
expr_stmt|;
name|qt_cever
operator|+=
name|osver
operator|.
name|dwMinorVersion
operator|*
literal|10
expr_stmt|;
endif|#
directive|endif
switch|switch
condition|(
name|osver
operator|.
name|dwPlatformId
condition|)
block|{
case|case
name|VER_PLATFORM_WIN32s
case|:
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_32s
expr_stmt|;
break|break;
case|case
name|VER_PLATFORM_WIN32_WINDOWS
case|:
comment|// We treat Windows Me (minor 90) the same as Windows 98
if|if
condition|(
name|osver
operator|.
name|dwMinorVersion
operator|==
literal|90
condition|)
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_Me
expr_stmt|;
elseif|else
if|if
condition|(
name|osver
operator|.
name|dwMinorVersion
operator|==
literal|10
condition|)
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_98
expr_stmt|;
else|else
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_95
expr_stmt|;
break|break;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
case|case
name|VER_PLATFORM_WIN32_CE
case|:
if|if
condition|(
name|qt_cever
operator|>=
literal|600
condition|)
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_CE_6
expr_stmt|;
if|if
condition|(
name|qt_cever
operator|>=
literal|500
condition|)
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_CE_5
expr_stmt|;
elseif|else
if|if
condition|(
name|qt_cever
operator|>=
literal|400
condition|)
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_CENET
expr_stmt|;
else|else
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_CE
expr_stmt|;
break|break;
endif|#
directive|endif
default|default:
comment|// VER_PLATFORM_WIN32_NT
if|if
condition|(
name|osver
operator|.
name|dwMajorVersion
operator|<
literal|5
condition|)
block|{
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_NT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osver
operator|.
name|dwMajorVersion
operator|==
literal|5
operator|&&
name|osver
operator|.
name|dwMinorVersion
operator|==
literal|0
condition|)
block|{
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_2000
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osver
operator|.
name|dwMajorVersion
operator|==
literal|5
operator|&&
name|osver
operator|.
name|dwMinorVersion
operator|==
literal|1
condition|)
block|{
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_XP
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osver
operator|.
name|dwMajorVersion
operator|==
literal|5
operator|&&
name|osver
operator|.
name|dwMinorVersion
operator|==
literal|2
condition|)
block|{
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_2003
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osver
operator|.
name|dwMajorVersion
operator|==
literal|6
operator|&&
name|osver
operator|.
name|dwMinorVersion
operator|==
literal|0
condition|)
block|{
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_VISTA
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osver
operator|.
name|dwMajorVersion
operator|==
literal|6
operator|&&
name|osver
operator|.
name|dwMinorVersion
operator|==
literal|1
condition|)
block|{
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_WINDOWS7
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Qt: Untested Windows version %d.%d detected!"
argument_list|,
name|int
argument_list|(
name|osver
operator|.
name|dwMajorVersion
argument_list|)
argument_list|,
name|int
argument_list|(
name|osver
operator|.
name|dwMinorVersion
argument_list|)
argument_list|)
expr_stmt|;
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_NT_based
expr_stmt|;
block|}
block|}
ifdef|#
directive|ifdef
name|QT_DEBUG
block|{
name|QByteArray
name|override
init|=
name|qgetenv
argument_list|(
literal|"QT_WINVER_OVERRIDE"
argument_list|)
decl_stmt|;
if|if
condition|(
name|override
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|winver
return|;
if|if
condition|(
name|override
operator|==
literal|"Me"
condition|)
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_Me
expr_stmt|;
if|if
condition|(
name|override
operator|==
literal|"95"
condition|)
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_95
expr_stmt|;
elseif|else
if|if
condition|(
name|override
operator|==
literal|"98"
condition|)
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_98
expr_stmt|;
elseif|else
if|if
condition|(
name|override
operator|==
literal|"NT"
condition|)
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_NT
expr_stmt|;
elseif|else
if|if
condition|(
name|override
operator|==
literal|"2000"
condition|)
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_2000
expr_stmt|;
elseif|else
if|if
condition|(
name|override
operator|==
literal|"2003"
condition|)
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_2003
expr_stmt|;
elseif|else
if|if
condition|(
name|override
operator|==
literal|"XP"
condition|)
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_XP
expr_stmt|;
elseif|else
if|if
condition|(
name|override
operator|==
literal|"VISTA"
condition|)
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_VISTA
expr_stmt|;
elseif|else
if|if
condition|(
name|override
operator|==
literal|"WINDOWS7"
condition|)
name|winver
operator|=
name|QSysInfo
operator|::
name|WV_WINDOWS7
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|winver
return|;
block|}
end_function
begin_decl_stmt
DECL|member|WindowsVersion
specifier|const
name|QSysInfo
operator|::
name|WinVersion
name|QSysInfo
operator|::
name|WindowsVersion
init|=
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
end_ifdef
begin_decl_stmt
DECL|variable|cachedSymbianVersion
specifier|static
name|QSysInfo
operator|::
name|SymbianVersion
name|cachedSymbianVersion
init|=
name|QSysInfo
operator|::
name|SymbianVersion
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cachedS60Version
specifier|static
name|QSysInfo
operator|::
name|S60Version
name|cachedS60Version
init|=
name|QSysInfo
operator|::
name|S60Version
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|symbianInitVersions
specifier|static
name|void
name|symbianInitVersions
parameter_list|()
block|{
comment|// Use pure Symbian code, because if done using QDir, there will be a call back
comment|// to this method, resulting doing this expensive operation twice before the cache kicks in.
comment|// Pure Symbian code also makes this method ~10x faster, speeding up the application launch.
name|RFs
name|rfs
init|=
name|qt_s60GetRFs
argument_list|()
decl_stmt|;
name|TFindFile
name|fileFinder
argument_list|(
name|rfs
argument_list|)
decl_stmt|;
name|CDir
modifier|*
name|contents
decl_stmt|;
comment|// Check for platform version
name|TInt
name|err
init|=
name|fileFinder
operator|.
name|FindWildByDir
argument_list|(
name|qt_S60Filter
argument_list|,
name|qt_symbianSystemInstallDir
argument_list|,
name|contents
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|==
name|KErrNone
condition|)
block|{
name|QScopedPointer
argument_list|<
name|CDir
argument_list|>
name|contentsDeleter
argument_list|(
name|contents
argument_list|)
decl_stmt|;
name|err
operator|=
name|contents
operator|->
name|Sort
argument_list|(
name|EDescending
operator||
name|ESortByName
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|==
name|KErrNone
operator|&&
name|contents
operator|->
name|Count
argument_list|()
operator|>
literal|0
operator|&&
operator|(
operator|*
name|contents
operator|)
index|[
literal|0
index|]
operator|.
name|iName
operator|.
name|Length
argument_list|()
operator|>=
literal|12
condition|)
block|{
name|TInt
name|major
init|=
operator|(
operator|*
name|contents
operator|)
index|[
literal|0
index|]
operator|.
name|iName
index|[
literal|9
index|]
operator|-
literal|'0'
decl_stmt|;
name|TInt
name|minor
init|=
operator|(
operator|*
name|contents
operator|)
index|[
literal|0
index|]
operator|.
name|iName
index|[
literal|11
index|]
operator|-
literal|'0'
decl_stmt|;
if|if
condition|(
name|major
operator|==
literal|3
condition|)
block|{
if|if
condition|(
name|minor
operator|==
literal|1
condition|)
block|{
name|cachedS60Version
operator|=
name|QSysInfo
operator|::
name|SV_S60_3_1
expr_stmt|;
name|cachedSymbianVersion
operator|=
name|QSysInfo
operator|::
name|SV_9_2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|minor
operator|==
literal|2
condition|)
block|{
name|cachedS60Version
operator|=
name|QSysInfo
operator|::
name|SV_S60_3_2
expr_stmt|;
name|cachedSymbianVersion
operator|=
name|QSysInfo
operator|::
name|SV_9_3
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|major
operator|==
literal|5
condition|)
block|{
if|if
condition|(
name|minor
operator|==
literal|0
condition|)
block|{
name|cachedS60Version
operator|=
name|QSysInfo
operator|::
name|SV_S60_5_0
expr_stmt|;
name|cachedSymbianVersion
operator|=
name|QSysInfo
operator|::
name|SV_9_4
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|minor
operator|==
literal|1
condition|)
block|{
name|cachedS60Version
operator|=
name|QSysInfo
operator|::
name|SV_S60_5_1
expr_stmt|;
name|cachedSymbianVersion
operator|=
name|QSysInfo
operator|::
name|SV_SF_2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|minor
operator|==
literal|2
condition|)
block|{
name|cachedS60Version
operator|=
name|QSysInfo
operator|::
name|SV_S60_5_2
expr_stmt|;
name|cachedSymbianVersion
operator|=
name|QSysInfo
operator|::
name|SV_SF_3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|minor
operator|==
literal|3
condition|)
block|{
name|cachedS60Version
operator|=
name|QSysInfo
operator|::
name|SV_S60_5_3
expr_stmt|;
name|cachedSymbianVersion
operator|=
name|QSysInfo
operator|::
name|SV_API_5_3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|minor
operator|>=
literal|4
condition|)
block|{
name|cachedS60Version
operator|=
name|QSysInfo
operator|::
name|SV_S60_5_4
expr_stmt|;
name|cachedSymbianVersion
operator|=
name|QSysInfo
operator|::
name|SV_API_5_4
expr_stmt|;
block|}
block|}
block|}
block|}
ifdef|#
directive|ifdef
name|Q_CC_NOKIAX86
if|if
condition|(
name|cachedS60Version
operator|==
operator|-
literal|1
condition|)
block|{
comment|// Some emulator environments may not contain the version specific .sis files, so
comment|// simply hardcode the version on those environments. Note that can't use
comment|// S60_VERSION_* defines for S60 3.x/5.0 platforms, as they do not define them
comment|// right anyway in case .sis files are not found.
if|#
directive|if
name|defined
argument_list|(
name|__SERIES60_31__
argument_list|)
name|cachedS60Version
operator|=
name|QSysInfo
operator|::
name|SV_S60_3_1
expr_stmt|;
name|cachedSymbianVersion
operator|=
name|QSysInfo
operator|::
name|SV_9_2
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__S60_32__
argument_list|)
name|cachedS60Version
operator|=
name|QSysInfo
operator|::
name|SV_S60_3_2
expr_stmt|;
name|cachedSymbianVersion
operator|=
name|QSysInfo
operator|::
name|SV_9_3
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__S60_50__
argument_list|)
name|cachedS60Version
operator|=
name|QSysInfo
operator|::
name|SV_S60_5_0
expr_stmt|;
name|cachedSymbianVersion
operator|=
name|QSysInfo
operator|::
name|SV_9_4
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|S60_VERSION_5_2
argument_list|)
name|cachedS60Version
operator|=
name|QSysInfo
operator|::
name|SV_S60_5_2
expr_stmt|;
name|cachedSymbianVersion
operator|=
name|QSysInfo
operator|::
name|SV_SF_3
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|S60_VERSION_5_3
argument_list|)
name|cachedS60Version
operator|=
name|QSysInfo
operator|::
name|SV_S60_5_3
expr_stmt|;
name|cachedSymbianVersion
operator|=
name|QSysInfo
operator|::
name|SV_API_5_3
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|S60_VERSION_5_4
argument_list|)
name|cachedS60Version
operator|=
name|QSysInfo
operator|::
name|SV_S60_5_4
expr_stmt|;
name|cachedSymbianVersion
operator|=
name|QSysInfo
operator|::
name|SV_API_5_4
expr_stmt|;
endif|#
directive|endif
block|}
endif|#
directive|endif
if|if
condition|(
name|cachedS60Version
operator|==
operator|-
literal|1
condition|)
block|{
comment|//If reaching here, it was not possible to determine the version
name|cachedS60Version
operator|=
name|QSysInfo
operator|::
name|SV_S60_Unknown
expr_stmt|;
name|cachedSymbianVersion
operator|=
name|QSysInfo
operator|::
name|SV_Unknown
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|symbianVersion
name|QSysInfo
operator|::
name|SymbianVersion
name|QSysInfo
operator|::
name|symbianVersion
parameter_list|()
block|{
if|if
condition|(
name|cachedSymbianVersion
operator|==
operator|-
literal|1
condition|)
name|symbianInitVersions
argument_list|()
expr_stmt|;
return|return
name|cachedSymbianVersion
return|;
block|}
end_function
begin_function
DECL|function|s60Version
name|QSysInfo
operator|::
name|S60Version
name|QSysInfo
operator|::
name|s60Version
parameter_list|()
block|{
if|if
condition|(
name|cachedS60Version
operator|==
operator|-
literal|1
condition|)
name|symbianInitVersions
argument_list|()
expr_stmt|;
return|return
name|cachedS60Version
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// ifdef Q_OS_SYMBIAN
end_comment
begin_comment
comment|/*!     \macro void Q_ASSERT(bool test)     \relates<QtGlobal>      Prints a warning message containing the source code file name and     line number if \a test is false.      Q_ASSERT() is useful for testing pre- and post-conditions     during development. It does nothing if \c QT_NO_DEBUG was defined     during compilation.      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 17      If \c b is zero, the Q_ASSERT statement will output the following     message using the qFatal() function:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 18      \sa Q_ASSERT_X(), qFatal(), {Debugging Techniques} */
end_comment
begin_comment
comment|/*!     \macro void Q_ASSERT_X(bool test, const char *where, const char *what)     \relates<QtGlobal>      Prints the message \a what together with the location \a where,     the source file name and line number if \a test is false.      Q_ASSERT_X is useful for testing pre- and post-conditions during     development. It does nothing if \c QT_NO_DEBUG was defined during     compilation.      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 19      If \c b is zero, the Q_ASSERT_X statement will output the following     message using the qFatal() function:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 20      \sa Q_ASSERT(), qFatal(), {Debugging Techniques} */
end_comment
begin_comment
comment|/*!     \macro void Q_CHECK_PTR(void *pointer)     \relates<QtGlobal>      If \a pointer is 0, prints a warning message containing the source     code's file name and line number, saying that the program ran out     of memory.      Q_CHECK_PTR does nothing if \c QT_NO_DEBUG was defined during     compilation.      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 21      \sa qWarning(), {Debugging Techniques} */
end_comment
begin_comment
comment|/*!     \fn T *q_check_ptr(T *pointer)     \relates<QtGlobal>      Users Q_CHECK_PTR on \a pointer, then returns \a pointer.      This can be used as an inline version of Q_CHECK_PTR. */
end_comment
begin_comment
comment|/*!     \macro const char* Q_FUNC_INFO()     \relates<QtGlobal>      Expands to a string that describe the function the macro resides in. How this string looks     more specifically is compiler dependent. With GNU GCC it is typically the function signature,     while with other compilers it might be the line and column number.      Q_FUNC_INFO can be conveniently used with qDebug(). For example, this function:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 22      when instantiated with the integer type, will with the GCC compiler produce:      \tt{const TInputType& myMin(const TInputType&, const TInputType&) [with TInputType = int] was called with value1: 3 value2: 4}      If this macro is used outside a function, the behavior is undefined.  */
end_comment
begin_comment
comment|/*   The Q_CHECK_PTR macro calls this function if an allocation check   fails. */
end_comment
begin_function
DECL|function|qt_check_pointer
name|void
name|qt_check_pointer
parameter_list|(
specifier|const
name|char
modifier|*
name|n
parameter_list|,
name|int
name|l
parameter_list|)
block|{
name|qFatal
argument_list|(
literal|"In file %s, line %d: Out of memory"
argument_list|,
name|n
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/* \internal    Allows you to throw an exception without including<new>    Called internally from Q_CHECK_PTR on certain OS combinations */
end_comment
begin_function
DECL|function|qBadAlloc
name|void
name|qBadAlloc
parameter_list|()
block|{
name|QT_THROW
argument_list|(
name|std
operator|::
name|bad_alloc
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*   The Q_ASSERT macro calls this function when the test fails. */
end_comment
begin_function
DECL|function|qt_assert
name|void
name|qt_assert
parameter_list|(
specifier|const
name|char
modifier|*
name|assertion
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
block|{
name|qFatal
argument_list|(
literal|"ASSERT: \"%s\" in file %s, line %d"
argument_list|,
name|assertion
argument_list|,
name|file
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*   The Q_ASSERT_X macro calls this function when the test fails. */
end_comment
begin_function
DECL|function|qt_assert_x
name|void
name|qt_assert_x
parameter_list|(
specifier|const
name|char
modifier|*
name|where
parameter_list|,
specifier|const
name|char
modifier|*
name|what
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
block|{
name|qFatal
argument_list|(
literal|"ASSERT failure in %s: \"%s\", file %s, line %d"
argument_list|,
name|where
argument_list|,
name|what
argument_list|,
name|file
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Dijkstra's bisection algorithm to find the square root of an integer.     Deliberately not exported as part of the Qt API, but used in both     qsimplerichtext.cpp and qgfxraster_qws.cpp */
end_comment
begin_function
DECL|function|qt_int_sqrt
name|Q_CORE_EXPORT
name|unsigned
name|int
name|qt_int_sqrt
parameter_list|(
name|unsigned
name|int
name|n
parameter_list|)
block|{
comment|// n must be in the range 0...UINT_MAX/2-1
if|if
condition|(
name|n
operator|>=
operator|(
name|UINT_MAX
operator|>>
literal|2
operator|)
condition|)
block|{
name|unsigned
name|int
name|r
init|=
literal|2
operator|*
name|qt_int_sqrt
argument_list|(
name|n
operator|/
literal|4
argument_list|)
decl_stmt|;
name|unsigned
name|int
name|r2
init|=
name|r
operator|+
literal|1
decl_stmt|;
return|return
operator|(
name|n
operator|>=
name|r2
operator|*
name|r2
operator|)
condition|?
name|r2
else|:
name|r
return|;
block|}
name|uint
name|h
decl_stmt|,
name|p
init|=
literal|0
decl_stmt|,
name|q
init|=
literal|1
decl_stmt|,
name|r
init|=
name|n
decl_stmt|;
while|while
condition|(
name|q
operator|<=
name|n
condition|)
name|q
operator|<<=
literal|2
expr_stmt|;
while|while
condition|(
name|q
operator|!=
literal|1
condition|)
block|{
name|q
operator|>>=
literal|2
expr_stmt|;
name|h
operator|=
name|p
operator|+
name|q
expr_stmt|;
name|p
operator|>>=
literal|1
expr_stmt|;
if|if
condition|(
name|r
operator|>=
name|h
condition|)
block|{
name|p
operator|+=
name|q
expr_stmt|;
name|r
operator|-=
name|h
expr_stmt|;
block|}
block|}
return|return
name|p
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|qMemCopy
argument_list|)
end_if
begin_undef
DECL|macro|qMemCopy
undef|#
directive|undef
name|qMemCopy
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|qMemSet
argument_list|)
end_if
begin_undef
DECL|macro|qMemSet
undef|#
directive|undef
name|qMemSet
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qMemCopy
name|void
modifier|*
name|qMemCopy
parameter_list|(
name|void
modifier|*
name|dest
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|n
parameter_list|)
block|{
return|return
name|memcpy
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|n
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qMemSet
name|void
modifier|*
name|qMemSet
parameter_list|(
name|void
modifier|*
name|dest
parameter_list|,
name|int
name|c
parameter_list|,
name|size_t
name|n
parameter_list|)
block|{
return|return
name|memset
argument_list|(
name|dest
argument_list|,
name|c
argument_list|,
name|n
argument_list|)
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|handler
specifier|static
name|QtMsgHandler
name|handler
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|handler
comment|// pointer to debug handler
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MWERKS
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_OS_MACX
argument_list|)
end_if
begin_decl_stmt
specifier|extern
name|bool
name|qt_is_gui_used
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|mac_default_handler
specifier|static
name|void
name|mac_default_handler
parameter_list|(
specifier|const
name|char
modifier|*
name|msg
parameter_list|)
block|{
if|if
condition|(
name|qt_is_gui_used
condition|)
block|{
name|Str255
name|pmsg
decl_stmt|;
name|qt_mac_to_pascal_string
argument_list|(
name|msg
argument_list|,
name|pmsg
argument_list|)
expr_stmt|;
name|DebugStr
argument_list|(
name|pmsg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_CC_MWERKS&& Q_OS_MACX
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_THREAD
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_INTEGRITY
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
operator|&&
expr|\
name|defined
argument_list|(
name|_POSIX_THREAD_SAFE_FUNCTIONS
argument_list|)
operator|&&
name|_POSIX_VERSION
operator|>=
literal|200112L
end_if
begin_namespace
namespace|namespace
block|{
comment|// There are two incompatible versions of strerror_r:
comment|// a) the XSI/POSIX.1 version, which returns an int,
comment|//    indicating success or not
comment|// b) the GNU version, which returns a char*, which may or may not
comment|//    be the beginning of the buffer we used
comment|// The GNU libc manpage for strerror_r says you should use the the XSI
comment|// version in portable code. However, it's impossible to do that if
comment|// _GNU_SOURCE is defined so we use C++ overloading to decide what to do
comment|// depending on the return type
DECL|function|fromstrerror_helper
specifier|static
specifier|inline
name|QString
name|fromstrerror_helper
parameter_list|(
name|int
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|buf
parameter_list|)
block|{
return|return
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|buf
argument_list|)
return|;
block|}
DECL|function|fromstrerror_helper
specifier|static
specifier|inline
name|QString
name|fromstrerror_helper
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
specifier|const
name|QByteArray
modifier|&
parameter_list|)
block|{
return|return
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|str
argument_list|)
return|;
block|}
block|}
end_namespace
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qt_error_string
name|QString
name|qt_error_string
parameter_list|(
name|int
name|errorCode
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|s
init|=
literal|0
decl_stmt|;
name|QString
name|ret
decl_stmt|;
if|if
condition|(
name|errorCode
operator|==
operator|-
literal|1
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|errorCode
operator|=
name|GetLastError
argument_list|()
expr_stmt|;
else|#
directive|else
name|errorCode
operator|=
name|errno
expr_stmt|;
endif|#
directive|endif
block|}
switch|switch
condition|(
name|errorCode
condition|)
block|{
case|case
literal|0
case|:
break|break;
case|case
name|EACCES
case|:
name|s
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIODevice"
argument_list|,
literal|"Permission denied"
argument_list|)
expr_stmt|;
break|break;
case|case
name|EMFILE
case|:
name|s
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIODevice"
argument_list|,
literal|"Too many open files"
argument_list|)
expr_stmt|;
break|break;
case|case
name|ENOENT
case|:
name|s
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIODevice"
argument_list|,
literal|"No such file or directory"
argument_list|)
expr_stmt|;
break|break;
case|case
name|ENOSPC
case|:
name|s
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIODevice"
argument_list|,
literal|"No space left on device"
argument_list|)
expr_stmt|;
break|break;
default|default:
block|{
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|wchar_t
modifier|*
name|string
init|=
literal|0
decl_stmt|;
name|FormatMessage
argument_list|(
name|FORMAT_MESSAGE_ALLOCATE_BUFFER
operator||
name|FORMAT_MESSAGE_FROM_SYSTEM
argument_list|,
name|NULL
argument_list|,
name|errorCode
argument_list|,
name|MAKELANGID
argument_list|(
name|LANG_NEUTRAL
argument_list|,
name|SUBLANG_DEFAULT
argument_list|)
argument_list|,
operator|(
name|LPWSTR
operator|)
operator|&
name|string
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|ret
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|string
argument_list|)
expr_stmt|;
name|LocalFree
argument_list|(
operator|(
name|HLOCAL
operator|)
name|string
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
operator|&&
name|errorCode
operator|==
name|ERROR_MOD_NOT_FOUND
condition|)
name|ret
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"The specified module could not be found."
argument_list|)
expr_stmt|;
elif|#
directive|elif
operator|!
name|defined
argument_list|(
name|QT_NO_THREAD
argument_list|)
operator|&&
name|defined
argument_list|(
name|_POSIX_THREAD_SAFE_FUNCTIONS
argument_list|)
operator|&&
name|_POSIX_VERSION
operator|>=
literal|200112L
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_INTEGRITY
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
name|QByteArray
name|buf
argument_list|(
literal|1024
argument_list|,
literal|'\0'
argument_list|)
decl_stmt|;
name|ret
operator|=
name|fromstrerror_helper
argument_list|(
name|strerror_r
argument_list|(
name|errorCode
argument_list|,
name|buf
operator|.
name|data
argument_list|()
argument_list|,
name|buf
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|buf
argument_list|)
expr_stmt|;
else|#
directive|else
name|ret
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|strerror
argument_list|(
name|errorCode
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
break|break;
block|}
block|}
if|if
condition|(
name|s
condition|)
comment|// ######## this breaks moc build currently
comment|//         ret = QCoreApplication::translate("QIODevice", s);
name|ret
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|ret
operator|.
name|trimmed
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QtMsgHandler qInstallMsgHandler(QtMsgHandler handler)     \relates<QtGlobal>      Installs a Qt message \a handler which has been defined     previously. Returns a pointer to the previous message handler     (which may be 0).      The message handler is a function that prints out debug messages,     warnings, critical and fatal error messages. The Qt library (debug     mode) contains hundreds of warning messages that are printed     when internal errors (usually invalid function arguments)     occur. Qt built in release mode also contains such warnings unless     QT_NO_WARNING_OUTPUT and/or QT_NO_DEBUG_OUTPUT have been set during     compilation. If you implement your own message handler, you get total     control of these messages.      The default message handler prints the message to the standard     output under X11 or to the debugger under Windows. If it is a     fatal message, the application aborts immediately.      Only one message handler can be defined, since this is usually     done on an application-wide basis to control debug output.      To restore the message handler, call \c qInstallMsgHandler(0).      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 23      \sa qDebug(), qWarning(), qCritical(), qFatal(), QtMsgType,     {Debugging Techniques} */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_BUILD_CORE_LIB
argument_list|)
end_if
begin_decl_stmt
specifier|extern
name|bool
name|usingWinMain
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|extern
name|Q_CORE_EXPORT
name|void
name|qWinMsgHandler
parameter_list|(
name|QtMsgType
name|t
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qInstallMsgHandler
name|QtMsgHandler
name|qInstallMsgHandler
parameter_list|(
name|QtMsgHandler
name|h
parameter_list|)
block|{
name|QtMsgHandler
name|old
init|=
name|handler
decl_stmt|;
name|handler
operator|=
name|h
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_BUILD_CORE_LIB
argument_list|)
if|if
condition|(
operator|!
name|handler
operator|&&
name|usingWinMain
condition|)
name|handler
operator|=
name|qWinMsgHandler
expr_stmt|;
endif|#
directive|endif
return|return
name|old
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|qt_message_output
name|void
name|qt_message_output
parameter_list|(
name|QtMsgType
name|msgType
parameter_list|,
specifier|const
name|char
modifier|*
name|buf
parameter_list|)
block|{
if|if
condition|(
name|handler
condition|)
block|{
call|(
modifier|*
name|handler
call|)
argument_list|(
name|msgType
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MWERKS
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_OS_MACX
argument_list|)
name|mac_default_handler
argument_list|(
name|buf
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QString
name|fstr
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|fstr
operator|+=
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|OutputDebugString
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|fstr
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
comment|// RDebug::Print has a cap of 256 characters so break it up
name|_LIT
argument_list|(
name|format
argument_list|,
literal|"[Qt Message] %S"
argument_list|)
expr_stmt|;
specifier|const
name|int
name|maxBlockSize
init|=
literal|256
operator|-
operator|(
operator|(
specifier|const
name|TDesC
operator|&
operator|)
name|format
operator|)
operator|.
name|Length
argument_list|()
decl_stmt|;
specifier|const
name|TPtrC8
name|ptr
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|TUint8
operator|*
argument_list|>
argument_list|(
name|buf
argument_list|)
argument_list|)
decl_stmt|;
name|HBufC
modifier|*
name|hbuffer
init|=
name|HBufC
operator|::
name|New
argument_list|(
name|qMin
argument_list|(
name|maxBlockSize
argument_list|,
name|ptr
operator|.
name|Length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|hbuffer
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ptr
operator|.
name|Length
argument_list|()
condition|;
name|i
operator|+=
name|hbuffer
operator|->
name|Length
argument_list|()
control|)
block|{
name|hbuffer
operator|->
name|Des
argument_list|()
operator|.
name|Copy
argument_list|(
name|ptr
operator|.
name|Mid
argument_list|(
name|i
argument_list|,
name|qMin
argument_list|(
name|maxBlockSize
argument_list|,
name|ptr
operator|.
name|Length
argument_list|()
operator|-
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RDebug
operator|::
name|Print
argument_list|(
name|format
argument_list|,
name|hbuffer
argument_list|)
expr_stmt|;
block|}
operator|delete
name|hbuffer
expr_stmt|;
else|#
directive|else
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%s\n"
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|fflush
argument_list|(
name|stderr
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
if|if
condition|(
name|msgType
operator|==
name|QtFatalMsg
operator|||
operator|(
name|msgType
operator|==
name|QtWarningMsg
operator|&&
operator|(
operator|!
name|qgetenv
argument_list|(
literal|"QT_FATAL_WARNINGS"
argument_list|)
operator|.
name|isNull
argument_list|()
operator|)
operator|)
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_DEBUG
argument_list|)
operator|&&
name|defined
argument_list|(
name|_DEBUG
argument_list|)
operator|&&
name|defined
argument_list|(
name|_CRT_ERROR
argument_list|)
comment|// get the current report mode
name|int
name|reportMode
init|=
name|_CrtSetReportMode
argument_list|(
name|_CRT_ERROR
argument_list|,
name|_CRTDBG_MODE_WNDW
argument_list|)
decl_stmt|;
name|_CrtSetReportMode
argument_list|(
name|_CRT_ERROR
argument_list|,
name|reportMode
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|int
name|ret
init|=
name|_CrtDbgReport
argument_list|(
name|_CRT_ERROR
argument_list|,
name|__FILE__
argument_list|,
name|__LINE__
argument_list|,
name|QT_VERSION_STR
argument_list|,
name|buf
argument_list|)
decl_stmt|;
else|#
directive|else
name|int
name|ret
init|=
name|_CrtDbgReportW
argument_list|(
name|_CRT_ERROR
argument_list|,
name|_CRT_WIDE
argument_list|(
name|__FILE__
argument_list|)
argument_list|,
name|__LINE__
argument_list|,
name|_CRT_WIDE
argument_list|(
name|QT_VERSION_STR
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|buf
argument_list|)
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|ret
operator|==
literal|0
operator|&&
name|reportMode
operator|&
name|_CRTDBG_MODE_WNDW
condition|)
return|return;
comment|// ignore
elseif|else
if|if
condition|(
name|ret
operator|==
literal|1
condition|)
name|_CrtDbgBreak
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|__DEBUGGER
argument_list|()
expr_stmt|;
comment|// on the emulator, get the debugger to kick in if there's one around
name|TBuf
argument_list|<
literal|256
argument_list|>
name|tmp
decl_stmt|;
name|TPtrC8
name|ptr
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|TUint8
operator|*
argument_list|>
argument_list|(
name|buf
argument_list|)
argument_list|)
decl_stmt|;
name|TInt
name|len
init|=
name|Min
argument_list|(
name|tmp
operator|.
name|MaxLength
argument_list|()
argument_list|,
name|ptr
operator|.
name|Length
argument_list|()
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|Copy
argument_list|(
name|ptr
operator|.
name|Left
argument_list|(
name|len
argument_list|)
argument_list|)
expr_stmt|;
comment|// Panic the current thread. We don't use real panic codes, so 0 has no special meaning.
name|User
operator|::
name|Panic
argument_list|(
name|tmp
argument_list|,
literal|0
argument_list|)
expr_stmt|;
elif|#
directive|elif
operator|(
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_CC_MINGW
argument_list|)
operator|)
name|abort
argument_list|()
expr_stmt|;
comment|// trap; generates core dump
else|#
directive|else
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// goodbye cruel world
endif|#
directive|endif
block|}
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_EXCEPTIONS
argument_list|)
end_if
begin_comment
comment|/*!     \internal     Uses a local buffer to output the message. Not locale safe + cuts off     everything after character 255, but will work in out of memory situations. */
end_comment
begin_function
DECL|function|qEmergencyOut
specifier|static
name|void
name|qEmergencyOut
parameter_list|(
name|QtMsgType
name|msgType
parameter_list|,
specifier|const
name|char
modifier|*
name|msg
parameter_list|,
name|va_list
name|ap
parameter_list|)
block|{
name|char
name|emergency_buf
index|[
literal|256
index|]
init|=
block|{
literal|'\0'
block|}
decl_stmt|;
name|emergency_buf
index|[
literal|255
index|]
operator|=
literal|'\0'
expr_stmt|;
if|if
condition|(
name|msg
condition|)
name|qvsnprintf
argument_list|(
name|emergency_buf
argument_list|,
literal|255
argument_list|,
name|msg
argument_list|,
name|ap
argument_list|)
expr_stmt|;
name|qt_message_output
argument_list|(
name|msgType
argument_list|,
name|emergency_buf
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|qt_message
specifier|static
name|void
name|qt_message
parameter_list|(
name|QtMsgType
name|msgType
parameter_list|,
specifier|const
name|char
modifier|*
name|msg
parameter_list|,
name|va_list
name|ap
parameter_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_EXCEPTIONS
argument_list|)
if|if
condition|(
name|std
operator|::
name|uncaught_exception
argument_list|()
condition|)
block|{
name|qEmergencyOut
argument_list|(
name|msgType
argument_list|,
name|msg
argument_list|,
name|ap
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
name|QByteArray
name|buf
decl_stmt|;
if|if
condition|(
name|msg
condition|)
block|{
name|QT_TRY
block|{
name|buf
operator|=
name|QString
argument_list|()
operator|.
name|vsprintf
argument_list|(
name|msg
argument_list|,
name|ap
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|const std::bad_alloc&
argument_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_EXCEPTIONS
argument_list|)
name|qEmergencyOut
argument_list|(
name|msgType
argument_list|,
name|msg
argument_list|,
name|ap
argument_list|)
expr_stmt|;
comment|// don't rethrow - we use qWarning and friends in destructors.
return|return;
endif|#
directive|endif
block|}
block|}
name|qt_message_output
argument_list|(
name|msgType
argument_list|,
name|buf
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_undef
DECL|macro|qDebug
undef|#
directive|undef
name|qDebug
end_undef
begin_comment
comment|/*!     \relates<QtGlobal>      Calls the message handler with the debug message \a msg. If no     message handler has been installed, the message is printed to     stderr. Under Windows, the message is sent to the console, if it is a     console application; otherwise, it is sent to the debugger. This     function does nothing if \c QT_NO_DEBUG_OUTPUT was defined     during compilation.      If you pass the function a format string and a list of arguments,     it works in similar way to the C printf() function. The format     should be a Latin-1 string.      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 24      If you include \c<QtDebug>, a more convenient syntax is also     available:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 25      With this syntax, the function returns a QDebug object that is     configured to use the QtDebugMsg message type. It automatically     puts a single space between each item, and outputs a newline at     the end. It supports many C++ and Qt types.      To suppress the output at run-time, install your own message handler     with qInstallMsgHandler().      \sa qWarning(), qCritical(), qFatal(), qInstallMsgHandler(),         {Debugging Techniques} */
end_comment
begin_function
DECL|function|qDebug
name|void
name|qDebug
parameter_list|(
specifier|const
name|char
modifier|*
name|msg
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|ap
decl_stmt|;
name|va_start
argument_list|(
name|ap
argument_list|,
name|msg
argument_list|)
expr_stmt|;
comment|// use variable arg list
name|qt_message
argument_list|(
name|QtDebugMsg
argument_list|,
name|msg
argument_list|,
name|ap
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|ap
argument_list|)
expr_stmt|;
block|}
end_function
begin_undef
DECL|macro|qWarning
undef|#
directive|undef
name|qWarning
end_undef
begin_comment
comment|/*!     \relates<QtGlobal>      Calls the message handler with the warning message \a msg. If no     message handler has been installed, the message is printed to     stderr. Under Windows, the message is sent to the debugger. This     function does nothing if \c QT_NO_WARNING_OUTPUT was defined     during compilation; it exits if the environment variable \c     QT_FATAL_WARNINGS is defined.      This function takes a format string and a list of arguments,     similar to the C printf() function. The format should be a Latin-1     string.      Example:     \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 26      If you include<QtDebug>, a more convenient syntax is     also available:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 27      This syntax inserts a space between each item, and     appends a newline at the end.      To suppress the output at runtime, install your own message handler     with qInstallMsgHandler().      \sa qDebug(), qCritical(), qFatal(), qInstallMsgHandler(),         {Debugging Techniques} */
end_comment
begin_function
DECL|function|qWarning
name|void
name|qWarning
parameter_list|(
specifier|const
name|char
modifier|*
name|msg
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|ap
decl_stmt|;
name|va_start
argument_list|(
name|ap
argument_list|,
name|msg
argument_list|)
expr_stmt|;
comment|// use variable arg list
name|qt_message
argument_list|(
name|QtWarningMsg
argument_list|,
name|msg
argument_list|,
name|ap
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|ap
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \relates<QtGlobal>      Calls the message handler with the critical message \a msg. If no     message handler has been installed, the message is printed to     stderr. Under Windows, the message is sent to the debugger.      This function takes a format string and a list of arguments,     similar to the C printf() function. The format should be a Latin-1     string.      Example:     \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 28      If you include<QtDebug>, a more convenient syntax is     also available:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 29      A space is inserted between the items, and a newline is     appended at the end.      To suppress the output at runtime, install your own message handler     with qInstallMsgHandler().      \sa qDebug(), qWarning(), qFatal(), qInstallMsgHandler(),         {Debugging Techniques} */
end_comment
begin_function
DECL|function|qCritical
name|void
name|qCritical
parameter_list|(
specifier|const
name|char
modifier|*
name|msg
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|ap
decl_stmt|;
name|va_start
argument_list|(
name|ap
argument_list|,
name|msg
argument_list|)
expr_stmt|;
comment|// use variable arg list
name|qt_message
argument_list|(
name|QtCriticalMsg
argument_list|,
name|msg
argument_list|,
name|ap
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|ap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qErrnoWarning
name|void
name|qErrnoWarning
parameter_list|(
specifier|const
name|char
modifier|*
name|msg
parameter_list|,
modifier|...
parameter_list|)
block|{
comment|// qt_error_string() will allocate anyway, so we don't have
comment|// to be careful here (like we do in plain qWarning())
name|QString
name|buf
decl_stmt|;
name|va_list
name|ap
decl_stmt|;
name|va_start
argument_list|(
name|ap
argument_list|,
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|msg
condition|)
name|buf
operator|.
name|vsprintf
argument_list|(
name|msg
argument_list|,
name|ap
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|ap
argument_list|)
expr_stmt|;
name|qCritical
argument_list|(
literal|"%s (%s)"
argument_list|,
name|buf
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|qt_error_string
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qErrnoWarning
name|void
name|qErrnoWarning
parameter_list|(
name|int
name|code
parameter_list|,
specifier|const
name|char
modifier|*
name|msg
parameter_list|,
modifier|...
parameter_list|)
block|{
comment|// qt_error_string() will allocate anyway, so we don't have
comment|// to be careful here (like we do in plain qWarning())
name|QString
name|buf
decl_stmt|;
name|va_list
name|ap
decl_stmt|;
name|va_start
argument_list|(
name|ap
argument_list|,
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|msg
condition|)
name|buf
operator|.
name|vsprintf
argument_list|(
name|msg
argument_list|,
name|ap
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|ap
argument_list|)
expr_stmt|;
name|qCritical
argument_list|(
literal|"%s (%s)"
argument_list|,
name|buf
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|qt_error_string
argument_list|(
name|code
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \relates<QtGlobal>      Calls the message handler with the fatal message \a msg. If no     message handler has been installed, the message is printed to     stderr. Under Windows, the message is sent to the debugger.      If you are using the \bold{default message handler} this function will     abort on Unix systems to create a core dump. On Windows, for debug builds,     this function will report a _CRT_ERROR enabling you to connect a debugger     to the application.      This function takes a format string and a list of arguments,     similar to the C printf() function.      Example:     \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 30      To suppress the output at runtime, install your own message handler     with qInstallMsgHandler().      \sa qDebug(), qCritical(), qWarning(), qInstallMsgHandler(),         {Debugging Techniques} */
end_comment
begin_function
DECL|function|qFatal
name|void
name|qFatal
parameter_list|(
specifier|const
name|char
modifier|*
name|msg
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|ap
decl_stmt|;
name|va_start
argument_list|(
name|ap
argument_list|,
name|msg
argument_list|)
expr_stmt|;
comment|// use variable arg list
name|qt_message
argument_list|(
name|QtFatalMsg
argument_list|,
name|msg
argument_list|,
name|ap
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|ap
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// getenv is declared as deprecated in VS2005. This function
end_comment
begin_comment
comment|// makes use of the new secure getenv function.
end_comment
begin_comment
comment|/*!     \relates<QtGlobal>      Returns the value of the environment variable with name \a     varName. To get the variable string, use QByteArray::constData().      \note qgetenv() was introduced because getenv() from the standard     C library was deprecated in VC2005 (and later versions). qgetenv()     uses the new replacement function in VC, and calls the standard C     library's implementation on all other platforms.      \sa qputenv() */
end_comment
begin_function
DECL|function|qgetenv
name|QByteArray
name|qgetenv
parameter_list|(
specifier|const
name|char
modifier|*
name|varName
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|_MSC_VER
operator|>=
literal|1400
name|size_t
name|requiredSize
init|=
literal|0
decl_stmt|;
name|QByteArray
name|buffer
decl_stmt|;
name|getenv_s
argument_list|(
operator|&
name|requiredSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|varName
argument_list|)
expr_stmt|;
if|if
condition|(
name|requiredSize
operator|==
literal|0
condition|)
return|return
name|buffer
return|;
name|buffer
operator|.
name|resize
argument_list|(
name|int
argument_list|(
name|requiredSize
argument_list|)
argument_list|)
expr_stmt|;
name|getenv_s
argument_list|(
operator|&
name|requiredSize
argument_list|,
name|buffer
operator|.
name|data
argument_list|()
argument_list|,
name|requiredSize
argument_list|,
name|varName
argument_list|)
expr_stmt|;
comment|// requiredSize includes the terminating null, which we don't want.
name|Q_ASSERT
argument_list|(
name|buffer
operator|.
name|endsWith
argument_list|(
literal|'\0'
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
else|#
directive|else
return|return
name|QByteArray
argument_list|(
operator|::
name|getenv
argument_list|(
name|varName
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \relates<QtGlobal>      This function sets the \a value of the environment variable named     \a varName. It will create the variable if it does not exist. It     returns 0 if the variable could not be set.      \note qputenv() was introduced because putenv() from the standard     C library was deprecated in VC2005 (and later versions). qputenv()     uses the replacement function in VC, and calls the standard C     library's implementation on all other platforms.      \sa qgetenv() */
end_comment
begin_function
DECL|function|qputenv
name|bool
name|qputenv
parameter_list|(
specifier|const
name|char
modifier|*
name|varName
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|value
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|_MSC_VER
operator|>=
literal|1400
return|return
name|_putenv_s
argument_list|(
name|varName
argument_list|,
name|value
operator|.
name|constData
argument_list|()
argument_list|)
operator|==
literal|0
return|;
else|#
directive|else
name|QByteArray
name|buffer
argument_list|(
name|varName
argument_list|)
decl_stmt|;
name|buffer
operator|+=
literal|'='
expr_stmt|;
name|buffer
operator|+=
name|value
expr_stmt|;
name|char
modifier|*
name|envVar
init|=
name|qstrdup
argument_list|(
name|buffer
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|putenv
argument_list|(
name|envVar
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
comment|// error. we have to delete the string.
operator|delete
index|[]
name|envVar
expr_stmt|;
return|return
name|result
operator|==
literal|0
return|;
endif|#
directive|endif
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_THREAD
argument_list|)
end_if
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_INTEGRITY
argument_list|)
operator|&&
name|defined
argument_list|(
name|__GHS_VERSION_NUMBER
argument_list|)
operator|&&
operator|(
name|__GHS_VERSION_NUMBER
operator|<
literal|500
operator|)
end_if
begin_comment
comment|// older versions of INTEGRITY used a long instead of a uint for the seed.
end_comment
begin_typedef
DECL|typedef|SeedStorageType
typedef|typedef
name|long
name|SeedStorageType
typedef|;
end_typedef
begin_else
else|#
directive|else
end_else
begin_typedef
DECL|typedef|SeedStorageType
typedef|typedef
name|uint
name|SeedStorageType
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|SeedStorage
typedef|typedef
name|QThreadStorage
argument_list|<
name|SeedStorageType
modifier|*
argument_list|>
name|SeedStorage
typedef|;
end_typedef
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|SeedStorage
argument_list|,
argument|randTLS
argument_list|)
end_macro
begin_comment
comment|// Thread Local Storage for seed value
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \relates<QtGlobal>     \since 4.2      Thread-safe version of the standard C++ \c srand() function.      Sets the argument \a seed to be used to generate a new random number sequence of     pseudo random integers to be returned by qrand().      The sequence of random numbers generated is deterministic per thread. For example,     if two threads call qsrand(1) and subsequently calls qrand(), the threads will get     the same random number sequence.      \sa qrand() */
end_comment
begin_function
DECL|function|qsrand
name|void
name|qsrand
parameter_list|(
name|uint
name|seed
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_THREAD
argument_list|)
name|SeedStorage
modifier|*
name|seedStorage
init|=
name|randTLS
argument_list|()
decl_stmt|;
if|if
condition|(
name|seedStorage
condition|)
block|{
name|SeedStorageType
modifier|*
name|pseed
init|=
name|seedStorage
operator|->
name|localData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pseed
condition|)
name|seedStorage
operator|->
name|setLocalData
argument_list|(
name|pseed
operator|=
operator|new
name|SeedStorageType
argument_list|)
expr_stmt|;
operator|*
name|pseed
operator|=
name|seed
expr_stmt|;
block|}
else|else
block|{
comment|//global static seed storage should always exist,
comment|//except after being deleted by QGlobalStaticDeleter.
comment|//But since it still can be called from destructor of another
comment|//global static object, fallback to srand(seed)
name|srand
argument_list|(
name|seed
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
comment|// On Windows and Symbian srand() and rand() already use Thread-Local-Storage
comment|// to store the seed between calls
comment|// this is also valid for QT_NO_THREAD
name|srand
argument_list|(
name|seed
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \relates<QtGlobal>     \since 4.2      Thread-safe version of the standard C++ \c rand() function.      Returns a value between 0 and \c RAND_MAX (defined in \c<cstdlib> and     \c<stdlib.h>), the next number in the current sequence of pseudo-random     integers.      Use \c qsrand() to initialize the pseudo-random number generator with     a seed value.      \sa qsrand() */
end_comment
begin_function
DECL|function|qrand
name|int
name|qrand
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_THREAD
argument_list|)
name|SeedStorage
modifier|*
name|seedStorage
init|=
name|randTLS
argument_list|()
decl_stmt|;
if|if
condition|(
name|seedStorage
condition|)
block|{
name|SeedStorageType
modifier|*
name|pseed
init|=
name|seedStorage
operator|->
name|localData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pseed
condition|)
block|{
name|seedStorage
operator|->
name|setLocalData
argument_list|(
name|pseed
operator|=
operator|new
name|SeedStorageType
argument_list|)
expr_stmt|;
operator|*
name|pseed
operator|=
literal|1
expr_stmt|;
block|}
return|return
name|rand_r
argument_list|(
name|pseed
argument_list|)
return|;
block|}
else|else
block|{
comment|//global static seed storage should always exist,
comment|//except after being deleted by QGlobalStaticDeleter.
comment|//But since it still can be called from destructor of another
comment|//global static object, fallback to rand()
return|return
name|rand
argument_list|()
return|;
block|}
else|#
directive|else
comment|// On Windows and Symbian srand() and rand() already use Thread-Local-Storage
comment|// to store the seed between calls
comment|// this is also valid for QT_NO_THREAD
return|return
name|rand
argument_list|()
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \macro forever     \relates<QtGlobal>      This macro is provided for convenience for writing infinite     loops.      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 31      It is equivalent to \c{for (;;)}.      If you're worried about namespace pollution, you can disable this     macro by adding the following line to your \c .pro file:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 32      \sa Q_FOREVER */
end_comment
begin_comment
comment|/*!     \macro Q_FOREVER     \relates<QtGlobal>      Same as \l{forever}.      This macro is available even when \c no_keywords is specified     using the \c .pro file's \c CONFIG variable.      \sa foreach() */
end_comment
begin_comment
comment|/*!     \macro foreach(variable, container)     \relates<QtGlobal>      This macro is used to implement Qt's \c foreach loop. The \a     variable parameter is a variable name or variable definition; the     \a container parameter is a Qt container whose value type     corresponds to the type of the variable. See \l{The foreach     Keyword} for details.      If you're worried about namespace pollution, you can disable this     macro by adding the following line to your \c .pro file:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 33      \sa Q_FOREACH() */
end_comment
begin_comment
comment|/*!     \macro Q_FOREACH(variable, container)     \relates<QtGlobal>      Same as foreach(\a variable, \a container).      This macro is available even when \c no_keywords is specified     using the \c .pro file's \c CONFIG variable.      \sa foreach() */
end_comment
begin_comment
comment|/*!     \macro QT_TR_NOOP(sourceText)     \relates<QtGlobal>      Marks the string literal \a sourceText for dynamic translation in     the current context (class), i.e the stored \a sourceText will not     be altered.      The macro expands to \a sourceText.      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 34      The macro QT_TR_NOOP_UTF8() is identical except that it tells lupdate     that the source string is encoded in UTF-8. Corresponding variants     exist in the QT_TRANSLATE_NOOP() family of macros, too. Note that     using these macros is not required if \c CODECFORTR is already set to     UTF-8 in the qmake project file.      \sa QT_TRANSLATE_NOOP(), {Internationalization with Qt} */
end_comment
begin_comment
comment|/*!     \macro QT_TRANSLATE_NOOP(context, sourceText)     \relates<QtGlobal>      Marks the string literal \a sourceText for dynamic translation in     the given \a context; i.e, the stored \a sourceText will not be     altered. The \a context is typically a class and also needs to     be specified as string literal.      The macro expands to \a sourceText.      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 35      \sa QT_TR_NOOP(), QT_TRANSLATE_NOOP3(), {Internationalization with Qt} */
end_comment
begin_comment
comment|/*!     \macro QT_TRANSLATE_NOOP3(context, sourceText, comment)     \relates<QtGlobal>     \since 4.4      Marks the string literal \a sourceText for dynamic translation in the     given \a context and with \a comment, i.e the stored \a sourceText will     not be altered. The \a context is typically a class and also needs to     be specified as string literal. The string literal \a comment     will be available for translators using e.g. Qt Linguist.      The macro expands to anonymous struct of the two string     literals passed as \a sourceText and \a comment.      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 36      \sa QT_TR_NOOP(), QT_TRANSLATE_NOOP(), {Internationalization with Qt} */
end_comment
begin_comment
comment|/*!     \fn QString qtTrId(const char *id, int n = -1)     \relates<QtGlobal>     \reentrant     \since 4.6      \brief The qtTrId function finds and returns a translated string.      Returns a translated string identified by \a id.     If no matching string is found, the id itself is returned. This     should not happen under normal conditions.      If \a n>= 0, all occurrences of \c %n in the resulting string     are replaced with a decimal representation of \a n. In addition,     depending on \a n's value, the translation text may vary.      Meta data and comments can be passed as documented for QObject::tr().     In addition, it is possible to supply a source string template like that:      \tt{//%<C string>}      or      \tt{\begincomment%<C string> \endcomment}      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp qttrid      Creating QM files suitable for use with this function requires passing     the \c -idbased option to the \c lrelease tool.      \warning This method is reentrant only if all translators are     installed \e before calling this method. Installing or removing     translators while performing translations is not supported. Doing     so will probably result in crashes or other undesirable behavior.      \sa QObject::tr(), QCoreApplication::translate(), {Internationalization with Qt} */
end_comment
begin_comment
comment|/*!     \macro QT_TRID_NOOP(id)     \relates<QtGlobal>     \since 4.6      \brief The QT_TRID_NOOP macro marks an id for dynamic translation.      The only purpose of this macro is to provide an anchor for attaching     meta data like to qtTrId().      The macro expands to \a id.      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp qttrid_noop      \sa qtTrId(), {Internationalization with Qt} */
end_comment
begin_comment
comment|/*!     \macro Q_LIKELY(expr)     \relates<QtGlobal>     \since 4.8      \brief Hints to the compiler that the enclosed condition, \a expr, is     likely to evaluate to \c true.      Use of this macro can help the compiler to optimize the code.      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp qlikely      \sa Q_UNLIKELY() */
end_comment
begin_comment
comment|/*!     \macro Q_UNLIKELY(expr)     \relates<QtGlobal>     \since 4.8      \brief Hints to the compiler that the enclosed condition, \a expr, is     likely to evaluate to \c false.      Use of this macro can help the compiler to optimize the code.      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp qunlikely      \sa Q_LIKELY() */
end_comment
begin_comment
comment|/*!     \macro QT_POINTER_SIZE     \relates<QtGlobal>      Expands to the size of a pointer in bytes (4 or 8). This is     equivalent to \c sizeof(void *) but can be used in a preprocessor     directive. */
end_comment
begin_comment
comment|/*!     \macro TRUE     \relates<QtGlobal>     \obsolete      Synonym for \c true.      \sa FALSE */
end_comment
begin_comment
comment|/*!     \macro FALSE     \relates<QtGlobal>     \obsolete      Synonym for \c false.      \sa TRUE */
end_comment
begin_comment
comment|/*!     \macro QABS(n)     \relates<QtGlobal>     \obsolete      Use qAbs(\a n) instead.      \sa QMIN(), QMAX() */
end_comment
begin_comment
comment|/*!     \macro QMIN(x, y)     \relates<QtGlobal>     \obsolete      Use qMin(\a x, \a y) instead.      \sa QMAX(), QABS() */
end_comment
begin_comment
comment|/*!     \macro QMAX(x, y)     \relates<QtGlobal>     \obsolete      Use qMax(\a x, \a y) instead.      \sa QMIN(), QABS() */
end_comment
begin_comment
comment|/*!     \macro const char *qPrintable(const QString&str)     \relates<QtGlobal>      Returns \a str as a \c{const char *}. This is equivalent to     \a{str}.toLocal8Bit().constData().      The char pointer will be invalid after the statement in which     qPrintable() is used. This is because the array returned by     toLocal8Bit() will fall out of scope.      Example:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 37       \sa qDebug(), qWarning(), qCritical(), qFatal() */
end_comment
begin_comment
comment|/*!     \macro Q_DECLARE_TYPEINFO(Type, Flags)     \relates<QtGlobal>      You can use this macro to specify information about a custom type     \a Type. With accurate type information, Qt's \l{Container Classes}     {generic containers} can choose appropriate storage methods and     algorithms.      \a Flags can be one of the following:      \list     \o \c Q_PRIMITIVE_TYPE specifies that \a Type is a POD (plain old        data) type with no constructor or destructor.     \o \c Q_MOVABLE_TYPE specifies that \a Type has a constructor        and/or a destructor but can be moved in memory using \c        memcpy().     \o \c Q_COMPLEX_TYPE (the default) specifies that \a Type has        constructors and/or a destructor and that it may not be moved        in memory.     \endlist      Example of a "primitive" type:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 38      Example of a movable type:      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 39 */
end_comment
begin_comment
comment|/*!     \macro Q_UNUSED(name)     \relates<QtGlobal>      Indicates to the compiler that the parameter with the specified     \a name is not used in the body of a function. This can be used to     suppress compiler warnings while allowing functions to be defined     with meaningful parameter names in their signatures. */
end_comment
begin_struct
DECL|struct|QInternal_CallBackTable
struct|struct
name|QInternal_CallBackTable
block|{
DECL|member|callbacks
name|QVector
argument_list|<
name|QList
argument_list|<
name|qInternalCallback
argument_list|>
argument_list|>
name|callbacks
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QInternal_CallBackTable
argument_list|,
argument|global_callback_table
argument_list|)
end_macro
begin_function
DECL|function|registerCallback
name|bool
name|QInternal
operator|::
name|registerCallback
parameter_list|(
name|Callback
name|cb
parameter_list|,
name|qInternalCallback
name|callback
parameter_list|)
block|{
if|if
condition|(
name|cb
operator|>=
literal|0
operator|&&
name|cb
operator|<
name|QInternal
operator|::
name|LastCallback
condition|)
block|{
name|QInternal_CallBackTable
modifier|*
name|cbt
init|=
name|global_callback_table
argument_list|()
decl_stmt|;
name|cbt
operator|->
name|callbacks
operator|.
name|resize
argument_list|(
name|cb
operator|+
literal|1
argument_list|)
expr_stmt|;
name|cbt
operator|->
name|callbacks
index|[
name|cb
index|]
operator|.
name|append
argument_list|(
name|callback
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|unregisterCallback
name|bool
name|QInternal
operator|::
name|unregisterCallback
parameter_list|(
name|Callback
name|cb
parameter_list|,
name|qInternalCallback
name|callback
parameter_list|)
block|{
if|if
condition|(
name|cb
operator|>=
literal|0
operator|&&
name|cb
operator|<
name|QInternal
operator|::
name|LastCallback
condition|)
block|{
name|QInternal_CallBackTable
modifier|*
name|cbt
init|=
name|global_callback_table
argument_list|()
decl_stmt|;
return|return
operator|(
name|bool
operator|)
name|cbt
operator|->
name|callbacks
index|[
name|cb
index|]
operator|.
name|removeAll
argument_list|(
name|callback
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|activateCallbacks
name|bool
name|QInternal
operator|::
name|activateCallbacks
parameter_list|(
name|Callback
name|cb
parameter_list|,
name|void
modifier|*
modifier|*
name|parameters
parameter_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|cb
operator|>=
literal|0
argument_list|,
literal|"QInternal::activateCallback()"
argument_list|,
literal|"Callback id must be a valid id"
argument_list|)
expr_stmt|;
name|QInternal_CallBackTable
modifier|*
name|cbt
init|=
name|global_callback_table
argument_list|()
decl_stmt|;
if|if
condition|(
name|cbt
operator|&&
name|cb
operator|<
name|cbt
operator|->
name|callbacks
operator|.
name|size
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|qInternalCallback
argument_list|>
name|callbacks
init|=
name|cbt
operator|->
name|callbacks
index|[
name|cb
index|]
decl_stmt|;
name|bool
name|ret
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callbacks
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|ret
operator||=
operator|(
name|callbacks
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|)
operator|(
name|parameters
operator|)
expr_stmt|;
return|return
name|ret
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function_decl
specifier|extern
name|void
name|qt_set_current_thread_to_main_thread
parameter_list|()
function_decl|;
end_function_decl
begin_function
DECL|function|callFunction
name|bool
name|QInternal
operator|::
name|callFunction
parameter_list|(
name|InternalFunction
name|func
parameter_list|,
name|void
modifier|*
modifier|*
name|args
parameter_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|func
operator|>=
literal|0
argument_list|,
literal|"QInternal::callFunction()"
argument_list|,
literal|"Callback id must be a valid id"
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
switch|switch
condition|(
name|func
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_THREAD
case|case
name|QInternal
operator|::
name|CreateThreadForAdoption
case|:
operator|*
name|args
operator|=
name|QAdoptedThread
operator|::
name|createThreadForAdoption
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
endif|#
directive|endif
case|case
name|QInternal
operator|::
name|RefAdoptedThread
case|:
name|QThreadData
operator|::
name|get2
argument_list|(
operator|(
name|QThread
operator|*
operator|)
operator|*
name|args
argument_list|)
operator|->
name|ref
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QInternal
operator|::
name|DerefAdoptedThread
case|:
name|QThreadData
operator|::
name|get2
argument_list|(
operator|(
name|QThread
operator|*
operator|)
operator|*
name|args
argument_list|)
operator|->
name|deref
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QInternal
operator|::
name|SetCurrentThreadToMainThread
case|:
name|qt_set_current_thread_to_main_thread
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QInternal
operator|::
name|SetQObjectSender
case|:
block|{
name|QObject
modifier|*
name|receiver
init|=
operator|(
name|QObject
operator|*
operator|)
name|args
index|[
literal|0
index|]
decl_stmt|;
name|QObjectPrivate
operator|::
name|Sender
modifier|*
name|sender
init|=
operator|new
name|QObjectPrivate
operator|::
name|Sender
decl_stmt|;
name|sender
operator|->
name|sender
operator|=
operator|(
name|QObject
operator|*
operator|)
name|args
index|[
literal|1
index|]
expr_stmt|;
name|sender
operator|->
name|signal
operator|=
operator|*
operator|(
name|int
operator|*
operator|)
name|args
index|[
literal|2
index|]
expr_stmt|;
name|sender
operator|->
name|ref
operator|=
literal|1
expr_stmt|;
comment|// Store the old sender as "return value"
name|args
index|[
literal|3
index|]
operator|=
name|QObjectPrivate
operator|::
name|setCurrentSender
argument_list|(
name|receiver
argument_list|,
name|sender
argument_list|)
expr_stmt|;
name|args
index|[
literal|4
index|]
operator|=
name|sender
expr_stmt|;
return|return
literal|true
return|;
block|}
case|case
name|QInternal
operator|::
name|GetQObjectSender
case|:
block|{
name|QObject
modifier|*
name|receiver
init|=
operator|(
name|QObject
operator|*
operator|)
name|args
index|[
literal|0
index|]
decl_stmt|;
name|QObjectPrivate
modifier|*
name|d
init|=
name|QObjectPrivate
operator|::
name|get
argument_list|(
name|receiver
argument_list|)
decl_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|d
operator|->
name|currentSender
condition|?
name|d
operator|->
name|currentSender
operator|->
name|sender
else|:
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
case|case
name|QInternal
operator|::
name|ResetQObjectSender
case|:
block|{
name|QObject
modifier|*
name|receiver
init|=
operator|(
name|QObject
operator|*
operator|)
name|args
index|[
literal|0
index|]
decl_stmt|;
name|QObjectPrivate
operator|::
name|Sender
modifier|*
name|oldSender
init|=
operator|(
name|QObjectPrivate
operator|::
name|Sender
operator|*
operator|)
name|args
index|[
literal|1
index|]
decl_stmt|;
name|QObjectPrivate
operator|::
name|Sender
modifier|*
name|sender
init|=
operator|(
name|QObjectPrivate
operator|::
name|Sender
operator|*
operator|)
name|args
index|[
literal|2
index|]
decl_stmt|;
name|QObjectPrivate
operator|::
name|resetCurrentSender
argument_list|(
name|receiver
argument_list|,
name|sender
argument_list|,
name|oldSender
argument_list|)
expr_stmt|;
operator|delete
name|sender
expr_stmt|;
return|return
literal|true
return|;
block|}
default|default:
break|break;
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|func
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     \macro Q_BYTE_ORDER     \relates<QtGlobal>      This macro can be used to determine the byte order your system     uses for storing data in memory. i.e., whether your system is     little-endian or big-endian. It is set by Qt to one of the macros     Q_LITTLE_ENDIAN or Q_BIG_ENDIAN. You normally won't need to worry     about endian-ness, but you might, for example if you need to know     which byte of an integer or UTF-16 character is stored in the     lowest address. Endian-ness is important in networking, where     computers with different values for Q_BYTE_ORDER must pass data     back and forth.      Use this macro as in the following examples.      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 40      \sa Q_BIG_ENDIAN, Q_LITTLE_ENDIAN */
end_comment
begin_comment
comment|/*!     \macro Q_LITTLE_ENDIAN     \relates<QtGlobal>      This macro represents a value you can compare to the macro     Q_BYTE_ORDER to determine the endian-ness of your system.  In a     little-endian system, the least significant byte is stored at the     lowest address. The other bytes follow in increasing order of     significance.      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 41      \sa Q_BYTE_ORDER, Q_BIG_ENDIAN */
end_comment
begin_comment
comment|/*!     \macro Q_BIG_ENDIAN     \relates<QtGlobal>      This macro represents a value you can compare to the macro     Q_BYTE_ORDER to determine the endian-ness of your system.  In a     big-endian system, the most significant byte is stored at the     lowest address. The other bytes follow in decreasing order of     significance.      \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 42      \sa Q_BYTE_ORDER, Q_LITTLE_ENDIAN */
end_comment
begin_comment
comment|/*!     \macro Q_GLOBAL_STATIC(type, name)     \internal      Declares a global static variable with the given \a type and \a name.      Use this macro to instantiate an object in a thread-safe way, creating     a global pointer that can be used to refer to it.      \warning This macro is subject to a race condition that can cause the object     to be constructed twice. However, if this occurs, the second instance will     be immediately deleted.      See also     \l{http://www.aristeia.com/publications.html}{"C++ and the perils of Double-Checked Locking"}     by Scott Meyers and Andrei Alexandrescu. */
end_comment
begin_comment
comment|/*!     \macro Q_GLOBAL_STATIC_WITH_ARGS(type, name, arguments)     \internal      Declares a global static variable with the specified \a type and \a name.      Use this macro to instantiate an object using the \a arguments specified     in a thread-safe way, creating a global pointer that can be used to refer     to it.      \warning This macro is subject to a race condition that can cause the object     to be constructed twice. However, if this occurs, the second instance will     be immediately deleted.      See also     \l{http://www.aristeia.com/publications.html}{"C++ and the perils of Double-Checked Locking"}     by Scott Meyers and Andrei Alexandrescu. */
end_comment
begin_comment
comment|/*!     \macro QT_NAMESPACE     \internal      If this macro is defined to \c ns all Qt classes are put in a namespace     called \c ns. Also, moc will output code putting metaobjects etc.     into namespace \c ns.      \sa QT_BEGIN_NAMESPACE, QT_END_NAMESPACE,     QT_PREPEND_NAMESPACE, QT_USE_NAMESPACE,     QT_BEGIN_INCLUDE_NAMESPACE, QT_END_INCLUDE_NAMESPACE,     QT_BEGIN_MOC_NAMESPACE, QT_END_MOC_NAMESPACE, */
end_comment
begin_comment
comment|/*!     \macro QT_PREPEND_NAMESPACE(identifier)     \internal      This macro qualifies \a identifier with the full namespace.     It expands to \c{::QT_NAMESPACE::identifier} if \c QT_NAMESPACE is defined     and only \a identifier otherwise.      \sa QT_NAMESPACE */
end_comment
begin_comment
comment|/*!     \macro QT_USE_NAMESPACE     \internal      This macro expands to using QT_NAMESPACE if QT_NAMESPACE is defined     and nothing otherwise.      \sa QT_NAMESPACE */
end_comment
begin_comment
comment|/*!     \macro QT_BEGIN_NAMESPACE     \internal      This macro expands to      \snippet snippets/code/src_corelib_global_qglobal.cpp begin namespace macro      if \c QT_NAMESPACE is defined and nothing otherwise. If should always     appear in the file-level scope and be followed by \c QT_END_NAMESPACE     at the same logical level with respect to preprocessor conditionals     in the same file.      As a rule of thumb, \c QT_BEGIN_NAMESPACE should appear in all Qt header     and Qt source files after the last \c{#include} line and before the first     declaration. In Qt headers using \c QT_BEGIN_HEADER, \c QT_BEGIN_NAMESPACE     follows \c QT_BEGIN_HEADER immediately.      If that rule can't be followed because, e.g., \c{#include} lines and     declarations are wildly mixed, place \c QT_BEGIN_NAMESPACE before     the first declaration and wrap the \c{#include} lines in     \c QT_BEGIN_INCLUDE_NAMESPACE and \c QT_END_INCLUDE_NAMESPACE.      When using the \c QT_NAMESPACE feature in user code     (e.g., when building plugins statically linked to Qt) where     the user code is not intended to go into the \c QT_NAMESPACE     namespace, all forward declarations of Qt classes need to     be wrapped in \c QT_BEGIN_NAMESPACE and \c QT_END_NAMESPACE.     After that, a \c QT_USE_NAMESPACE should follow.     No further changes should be needed.      \sa QT_NAMESPACE */
end_comment
begin_comment
comment|/*!     \macro QT_END_NAMESPACE     \internal      This macro expands to      \snippet snippets/code/src_corelib_global_qglobal.cpp end namespace macro      if \c QT_NAMESPACE is defined and nothing otherwise. It is used to cancel     the effect of \c QT_BEGIN_NAMESPACE.      If a source file ends with a \c{#include} directive that includes a moc file,     \c QT_END_NAMESPACE should be placed before that \c{#include}.      \sa QT_NAMESPACE */
end_comment
begin_comment
comment|/*!     \macro QT_BEGIN_INCLUDE_NAMESPACE     \internal      This macro is equivalent to \c QT_END_NAMESPACE.     It only serves as syntactic sugar and is intended     to be used before #include lines within a     \c QT_BEGIN_NAMESPACE ... \c QT_END_NAMESPACE block.      \sa QT_NAMESPACE */
end_comment
begin_comment
comment|/*!     \macro QT_END_INCLUDE_NAMESPACE     \internal      This macro is equivalent to \c QT_BEGIN_NAMESPACE.     It only serves as syntactic sugar and is intended     to be used after #include lines within a     \c QT_BEGIN_NAMESPACE ... \c QT_END_NAMESPACE block.      \sa QT_NAMESPACE */
end_comment
begin_comment
comment|/*!     \macro QT_BEGIN_MOC_NAMESPACE     \internal      This macro is output by moc at the beginning of     moc files. It is equivalent to \c QT_USE_NAMESPACE.      \sa QT_NAMESPACE */
end_comment
begin_comment
comment|/*!     \macro QT_END_MOC_NAMESPACE     \internal      This macro is output by moc at the beginning of     moc files. It expands to nothing.      \sa QT_NAMESPACE */
end_comment
begin_comment
comment|/*!  \fn bool qFuzzyCompare(double p1, double p2)  \relates<QtGlobal>  \since 4.4  \threadsafe   Compares the floating point value \a p1 and \a p2 and  returns \c true if they are considered equal, otherwise \c false.   Note that comparing values where either \a p1 or \a p2 is 0.0 will not work.  The solution to this is to compare against values greater than or equal to 1.0.   \snippet doc/src/snippets/code/src_corelib_global_qglobal.cpp 46   The two numbers are compared in a relative way, where the  exactness is stronger the smaller the numbers are.  */
end_comment
begin_comment
comment|/*!  \fn bool qFuzzyCompare(float p1, float p2)  \relates<QtGlobal>  \since 4.4  \threadsafe   Compares the floating point value \a p1 and \a p2 and  returns \c true if they are considered equal, otherwise \c false.   The two numbers are compared in a relative way, where the  exactness is stronger the smaller the numbers are.  */
end_comment
begin_comment
comment|/*!     \macro QT_REQUIRE_VERSION(int argc, char **argv, const char *version)     \relates<QtGlobal>      This macro can be used to ensure that the application is run     against a recent enough version of Qt. This is especially useful     if your application depends on a specific bug fix introduced in a     bug-fix release (e.g., 4.0.2).      The \a argc and \a argv parameters are the \c main() function's     \c argc and \c argv parameters. The \a version parameter is a     string literal that specifies which version of Qt the application     requires (e.g., "4.0.2").      Example:      \snippet doc/src/snippets/code/src_gui_dialogs_qmessagebox.cpp 4 */
end_comment
begin_comment
comment|/*!     \macro Q_DECL_EXPORT     \relates<QtGlobal>      This macro marks a symbol for shared library export (see      \l{sharedlibrary.html}{Creating Shared Libraries}).      \sa Q_DECL_IMPORT */
end_comment
begin_comment
comment|/*!     \macro Q_DECL_IMPORT     \relates<QtGlobal>      This macro declares a symbol to be an import from a shared library (see     \l{sharedlibrary.html}{Creating Shared Libraries}).      \sa Q_DECL_EXPORT */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
end_if
begin_include
include|#
directive|include
file|<typeinfo>
end_include
begin_comment
comment|/*! \macro QT_TRAP_THROWING(function)     \relates<QtGlobal>     \ingroup qts60      TRAP leaves from Symbian \a function and throws an appropriate     standard C++ exception instead.     This must be used when calling Symbian OS leaving functions     from inside Qt or standard C++ code, so that the code can respond     correctly to the exception.      \warning This macro is only available on Symbian.      Example:      \code     // A Symbian leaving function is being called within a Qt function.     // Any leave must be converted to an exception     CAknTitlePane* titlePane = S60->titlePane();     if (titlePane) {         TPtrC captionPtr(qt_QString2TPtrC(caption));         QT_TRAP_THROWING(titlePane->SetTextL(captionPtr));     }     \endcode      \sa QT_TRYCATCH_ERROR(), QT_TRYCATCH_LEAVING() */
end_comment
begin_comment
comment|/*! \macro QT_TRYCATCH_ERROR(error, function)     \relates<QtGlobal>     \ingroup qts60      Catch standard C++ exceptions from a \a function and convert them to a Symbian OS     \a error code, or \c KErrNone if there is no exception.     This must be used inside Qt or standard C++ code when using exception throwing     code (practically anything) and returning an error code to Symbian OS.      \warning This macro is only available on Symbian.      Example:      \code     // An exception might be thrown in this Symbian TInt error returning function.     // It is caught and translated to an error code     TInt QServerApp::Connect(const QString&serverName)     {         TPtrC name;         TInt err;         QT_TRYCATCH_ERROR(err, name.Set(qt_QString2TPtrC(serverName)));         if (err != KErrNone)             return err;         return iServer.Connect(name);     }     \endcode }      \sa QT_TRYCATCH_LEAVING(), QT_TRAP_THROWING() */
end_comment
begin_comment
comment|/*! \macro QT_TRYCATCH_LEAVING(function)     \relates<QtGlobal>     \ingroup qts60      Catch standard C++ exceptions from \a function and convert them to Symbian OS     leaves. This must be used inside Qt or standard C++ code when using exception     throwing code (practically anything) and returning to Symbian OS from a leaving function.     For example inside a Symbian active object's \c RunL function implemented with Qt code.      \warning This macro is only available on Symbian.      Example:      \code     // This active object signals Qt code     // Exceptions from the Qt code must be converted to Symbian OS leaves for the active scheduler     void QWakeUpActiveObject::RunL()     {         iStatus = KRequestPending;         SetActive();         QT_TRYCATCH_LEAVING(m_dispatcher->wakeUpWasCalled());     }     \endcode      \sa QT_TRAP_THROWING(), QT_TRYCATCH_ERROR() */
end_comment
begin_include
include|#
directive|include
file|<stdexcept>
end_include
begin_class
DECL|class|QSymbianLeaveException
class|class
name|QSymbianLeaveException
super|:
specifier|public
name|std
operator|::
name|exception
block|{
public|public:
DECL|function|QSymbianLeaveException
specifier|inline
name|QSymbianLeaveException
parameter_list|(
name|int
name|err
parameter_list|)
member_init_list|:
name|error
argument_list|(
name|err
argument_list|)
block|{}
DECL|function|what
specifier|inline
specifier|const
name|char
modifier|*
name|what
parameter_list|()
specifier|const
throw|throw
argument_list|()
block|{
return|return
literal|"Symbian leave exception"
return|;
block|}
public|public:
DECL|member|error
name|int
name|error
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*! \relates<QtGlobal>     \ingroup qts60      Throws an exception if the \a error parameter is a symbian error code.     This is the exception throwing equivalent of Symbian's User::LeaveIfError.      \warning This function is only available on Symbian.      \sa qt_symbian_exception2LeaveL(), qt_symbian_exception2Error() */
end_comment
begin_function
DECL|function|qt_symbian_throwIfError
name|void
name|qt_symbian_throwIfError
parameter_list|(
name|int
name|error
parameter_list|)
block|{
if|if
condition|(
name|error
operator|>=
name|KErrNone
condition|)
return|return;
comment|// do nothing - not an exception
switch|switch
condition|(
name|error
condition|)
block|{
case|case
name|KErrNoMemory
case|:
throw|throw
name|std
operator|::
name|bad_alloc
argument_list|()
throw|;
case|case
name|KErrArgument
case|:
throw|throw
name|std
operator|::
name|invalid_argument
argument_list|(
literal|"from Symbian error"
argument_list|)
throw|;
case|case
name|KErrOverflow
case|:
throw|throw
name|std
operator|::
name|overflow_error
argument_list|(
literal|"from Symbian error"
argument_list|)
throw|;
case|case
name|KErrUnderflow
case|:
throw|throw
name|std
operator|::
name|underflow_error
argument_list|(
literal|"from Symbian error"
argument_list|)
throw|;
default|default:
throw|throw
name|QSymbianLeaveException
argument_list|(
name|error
argument_list|)
throw|;
block|}
block|}
end_function
begin_comment
comment|/*! \relates<QtGlobal>     \ingroup qts60      Convert a caught standard C++ exception \a aThrow to a Symbian leave      \warning This function is only available on Symbian.      \sa qt_symbian_throwIfError(), qt_symbian_exception2Error() */
end_comment
begin_function
DECL|function|qt_symbian_exception2LeaveL
name|void
name|qt_symbian_exception2LeaveL
parameter_list|(
specifier|const
name|std
operator|::
name|exception
modifier|&
name|aThrow
parameter_list|)
block|{
name|User
operator|::
name|Leave
argument_list|(
name|qt_symbian_exception2Error
argument_list|(
name|aThrow
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \relates<QtGlobal>     \ingroup qts60      Convert a caught standard C++ exception \a aThrow to a Symbian error code      \warning This function is only available on Symbian.      \sa qt_symbian_throwIfError(), qt_symbian_exception2LeaveL() */
end_comment
begin_function
DECL|function|qt_symbian_exception2Error
name|int
name|qt_symbian_exception2Error
parameter_list|(
specifier|const
name|std
operator|::
name|exception
modifier|&
name|aThrow
parameter_list|)
block|{
specifier|const
name|std
operator|::
name|type_info
modifier|&
name|atype
init|=
typeid|typeid
argument_list|(
name|aThrow
argument_list|)
decl_stmt|;
name|int
name|err
init|=
name|KErrGeneral
decl_stmt|;
if|if
condition|(
name|atype
operator|==
typeid|typeid
argument_list|(
name|std
operator|::
name|bad_alloc
argument_list|)
condition|)
name|err
operator|=
name|KErrNoMemory
expr_stmt|;
elseif|else
if|if
condition|(
name|atype
operator|==
typeid|typeid
argument_list|(
name|QSymbianLeaveException
argument_list|)
condition|)
name|err
operator|=
cast|static_cast
argument_list|<
specifier|const
name|QSymbianLeaveException
operator|&
argument_list|>
argument_list|(
name|aThrow
argument_list|)
operator|.
name|error
expr_stmt|;
else|else
block|{
if|if
condition|(
name|atype
operator|==
typeid|typeid
argument_list|(
name|std
operator|::
name|invalid_argument
argument_list|)
condition|)
name|err
operator|=
name|KErrArgument
expr_stmt|;
elseif|else
if|if
condition|(
name|atype
operator|==
typeid|typeid
argument_list|(
name|std
operator|::
name|out_of_range
argument_list|)
condition|)
comment|// std::out_of_range is of type logic_error which by definition means that it is
comment|// "presumably detectable before the program executes".
comment|// std::out_of_range is used to report an argument is not within the expected range.
comment|// The description of KErrArgument says an argument is out of range. Hence the mapping.
name|err
operator|=
name|KErrArgument
expr_stmt|;
elseif|else
if|if
condition|(
name|atype
operator|==
typeid|typeid
argument_list|(
name|std
operator|::
name|overflow_error
argument_list|)
condition|)
name|err
operator|=
name|KErrOverflow
expr_stmt|;
elseif|else
if|if
condition|(
name|atype
operator|==
typeid|typeid
argument_list|(
name|std
operator|::
name|underflow_error
argument_list|)
condition|)
name|err
operator|=
name|KErrUnderflow
expr_stmt|;
name|qWarning
argument_list|(
literal|"translation from std exception \"%s\" to %d"
argument_list|,
name|aThrow
operator|.
name|what
argument_list|()
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
return|return
name|err
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
