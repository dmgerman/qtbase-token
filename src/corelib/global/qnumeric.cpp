begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qnumeric.h"
end_include
begin_include
include|#
directive|include
file|"qnumeric_p.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*!     Returns true if the double \a {d} is equivalent to infinity. */
DECL|function|qIsInf
name|Q_CORE_EXPORT
name|bool
name|qIsInf
parameter_list|(
name|double
name|d
parameter_list|)
block|{
return|return
name|qt_is_inf
argument_list|(
name|d
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the double \a {d} is not a number (NaN). */
end_comment
begin_function
DECL|function|qIsNaN
name|Q_CORE_EXPORT
name|bool
name|qIsNaN
parameter_list|(
name|double
name|d
parameter_list|)
block|{
return|return
name|qt_is_nan
argument_list|(
name|d
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the double \a {d} is a finite number. */
end_comment
begin_function
DECL|function|qIsFinite
name|Q_CORE_EXPORT
name|bool
name|qIsFinite
parameter_list|(
name|double
name|d
parameter_list|)
block|{
return|return
name|qt_is_finite
argument_list|(
name|d
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the float \a {f} is equivalent to infinity. */
end_comment
begin_function
DECL|function|qIsInf
name|Q_CORE_EXPORT
name|bool
name|qIsInf
parameter_list|(
name|float
name|f
parameter_list|)
block|{
return|return
name|qt_is_inf
argument_list|(
name|f
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the float \a {f} is not a number (NaN). */
end_comment
begin_function
DECL|function|qIsNaN
name|Q_CORE_EXPORT
name|bool
name|qIsNaN
parameter_list|(
name|float
name|f
parameter_list|)
block|{
return|return
name|qt_is_nan
argument_list|(
name|f
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the float \a {f} is a finite number. */
end_comment
begin_function
DECL|function|qIsFinite
name|Q_CORE_EXPORT
name|bool
name|qIsFinite
parameter_list|(
name|float
name|f
parameter_list|)
block|{
return|return
name|qt_is_finite
argument_list|(
name|f
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the bit pattern of a signalling NaN as a double. */
end_comment
begin_function
DECL|function|qSNaN
name|Q_CORE_EXPORT
name|double
name|qSNaN
parameter_list|()
block|{
return|return
name|qt_snan
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the bit pattern of a quiet NaN as a double. */
end_comment
begin_function
DECL|function|qQNaN
name|Q_CORE_EXPORT
name|double
name|qQNaN
parameter_list|()
block|{
return|return
name|qt_qnan
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the bit pattern for an infinite number as a double. */
end_comment
begin_function
DECL|function|qInf
name|Q_CORE_EXPORT
name|double
name|qInf
parameter_list|()
block|{
return|return
name|qt_inf
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
