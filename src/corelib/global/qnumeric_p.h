begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QNUMERIC_P_H
end_ifndef
begin_define
DECL|macro|QNUMERIC_P_H
define|#
directive|define
name|QNUMERIC_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtCore/qglobal.h"
end_include
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_CC_MIPS
argument_list|)
DECL|member|c
DECL|member|d
DECL|variable|qt_be_inf_bytes
specifier|static
specifier|const
expr|union
block|{
name|unsigned
name|char
name|c
index|[
literal|8
index|]
block|;
name|double
name|d
block|; }
name|qt_be_inf_bytes
operator|=
block|{
block|{
literal|0x7f
block|,
literal|0xf0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
expr_stmt|;
end_expr_stmt
begin_union
DECL|member|c
DECL|member|d
DECL|variable|qt_le_inf_bytes
specifier|static
specifier|const
union|union
block|{
name|unsigned
name|char
name|c
index|[
literal|8
index|]
decl_stmt|;
name|double
name|d
decl_stmt|;
block|}
name|qt_le_inf_bytes
init|=
block|{
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0xf0
block|,
literal|0x7f
block|}
block|}
union|;
end_union
begin_union
DECL|member|c
DECL|member|d
DECL|variable|qt_armfpa_inf_bytes
specifier|static
specifier|const
union|union
block|{
name|unsigned
name|char
name|c
index|[
literal|8
index|]
decl_stmt|;
name|double
name|d
decl_stmt|;
block|}
name|qt_armfpa_inf_bytes
init|=
block|{
block|{
literal|0
block|,
literal|0
block|,
literal|0xf0
block|,
literal|0x7f
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
union|;
end_union
begin_function
DECL|function|qt_inf
specifier|static
specifier|inline
name|double
name|qt_inf
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_ARMFPA
return|return
name|qt_armfpa_inf_bytes
operator|.
name|d
return|;
else|#
directive|else
return|return
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|?
name|qt_be_inf_bytes
operator|.
name|d
else|:
name|qt_le_inf_bytes
operator|.
name|d
operator|)
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|// Signaling NAN
end_comment
begin_union
DECL|member|c
DECL|member|d
DECL|variable|qt_be_snan_bytes
specifier|static
specifier|const
union|union
block|{
name|unsigned
name|char
name|c
index|[
literal|8
index|]
decl_stmt|;
name|double
name|d
decl_stmt|;
block|}
name|qt_be_snan_bytes
init|=
block|{
block|{
literal|0x7f
block|,
literal|0xf8
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
union|;
end_union
begin_union
DECL|member|c
DECL|member|d
DECL|variable|qt_le_snan_bytes
specifier|static
specifier|const
union|union
block|{
name|unsigned
name|char
name|c
index|[
literal|8
index|]
decl_stmt|;
name|double
name|d
decl_stmt|;
block|}
name|qt_le_snan_bytes
init|=
block|{
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0xf8
block|,
literal|0x7f
block|}
block|}
union|;
end_union
begin_union
DECL|member|c
DECL|member|d
DECL|variable|qt_armfpa_snan_bytes
specifier|static
specifier|const
union|union
block|{
name|unsigned
name|char
name|c
index|[
literal|8
index|]
decl_stmt|;
name|double
name|d
decl_stmt|;
block|}
name|qt_armfpa_snan_bytes
init|=
block|{
block|{
literal|0
block|,
literal|0
block|,
literal|0xf8
block|,
literal|0x7f
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
union|;
end_union
begin_function
DECL|function|qt_snan
specifier|static
specifier|inline
name|double
name|qt_snan
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_ARMFPA
return|return
name|qt_armfpa_snan_bytes
operator|.
name|d
return|;
else|#
directive|else
return|return
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|?
name|qt_be_snan_bytes
operator|.
name|d
else|:
name|qt_le_snan_bytes
operator|.
name|d
operator|)
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|// Quiet NAN
end_comment
begin_union
DECL|member|c
DECL|member|d
DECL|variable|qt_be_qnan_bytes
specifier|static
specifier|const
union|union
block|{
name|unsigned
name|char
name|c
index|[
literal|8
index|]
decl_stmt|;
name|double
name|d
decl_stmt|;
block|}
name|qt_be_qnan_bytes
init|=
block|{
block|{
literal|0xff
block|,
literal|0xf8
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
union|;
end_union
begin_union
DECL|member|c
DECL|member|d
DECL|variable|qt_le_qnan_bytes
specifier|static
specifier|const
union|union
block|{
name|unsigned
name|char
name|c
index|[
literal|8
index|]
decl_stmt|;
name|double
name|d
decl_stmt|;
block|}
name|qt_le_qnan_bytes
init|=
block|{
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0xf8
block|,
literal|0xff
block|}
block|}
union|;
end_union
begin_union
DECL|member|c
DECL|member|d
DECL|variable|qt_armfpa_qnan_bytes
specifier|static
specifier|const
union|union
block|{
name|unsigned
name|char
name|c
index|[
literal|8
index|]
decl_stmt|;
name|double
name|d
decl_stmt|;
block|}
name|qt_armfpa_qnan_bytes
init|=
block|{
block|{
literal|0
block|,
literal|0
block|,
literal|0xf8
block|,
literal|0xff
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
union|;
end_union
begin_function
DECL|function|qt_qnan
specifier|static
specifier|inline
name|double
name|qt_qnan
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_ARMFPA
return|return
name|qt_armfpa_qnan_bytes
operator|.
name|d
return|;
else|#
directive|else
return|return
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|?
name|qt_be_qnan_bytes
operator|.
name|d
else|:
name|qt_le_qnan_bytes
operator|.
name|d
operator|)
return|;
endif|#
directive|endif
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_comment
comment|// Q_CC_MIPS
end_comment
begin_decl_stmt
specifier|static
specifier|const
name|unsigned
name|char
name|qt_be_inf_bytes
index|[]
init|=
block|{
literal|0x7f
block|,
literal|0xf0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
specifier|const
name|unsigned
name|char
name|qt_le_inf_bytes
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0xf0
block|,
literal|0x7f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
specifier|const
name|unsigned
name|char
name|qt_armfpa_inf_bytes
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0xf0
block|,
literal|0x7f
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_function
specifier|static
specifier|inline
name|double
name|qt_inf
parameter_list|()
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|bytes
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_ARMFPA
name|bytes
operator|=
name|qt_armfpa_inf_bytes
expr_stmt|;
else|#
directive|else
name|bytes
operator|=
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|?
name|qt_be_inf_bytes
else|:
name|qt_le_inf_bytes
operator|)
expr_stmt|;
endif|#
directive|endif
union|union
block|{
name|unsigned
name|char
name|c
index|[
literal|8
index|]
decl_stmt|;
name|double
name|d
decl_stmt|;
block|}
name|returnValue
union|;
name|qMemCopy
argument_list|(
name|returnValue
operator|.
name|c
argument_list|,
name|bytes
argument_list|,
sizeof|sizeof
argument_list|(
name|returnValue
operator|.
name|c
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|returnValue
operator|.
name|d
return|;
block|}
end_function
begin_comment
comment|// Signaling NAN
end_comment
begin_decl_stmt
specifier|static
specifier|const
name|unsigned
name|char
name|qt_be_snan_bytes
index|[]
init|=
block|{
literal|0x7f
block|,
literal|0xf8
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
specifier|const
name|unsigned
name|char
name|qt_le_snan_bytes
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0xf8
block|,
literal|0x7f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
specifier|const
name|unsigned
name|char
name|qt_armfpa_snan_bytes
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0xf8
block|,
literal|0x7f
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_function
specifier|static
specifier|inline
name|double
name|qt_snan
parameter_list|()
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|bytes
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_ARMFPA
name|bytes
operator|=
name|qt_armfpa_snan_bytes
expr_stmt|;
else|#
directive|else
name|bytes
operator|=
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|?
name|qt_be_snan_bytes
else|:
name|qt_le_snan_bytes
operator|)
expr_stmt|;
endif|#
directive|endif
union|union
block|{
name|unsigned
name|char
name|c
index|[
literal|8
index|]
decl_stmt|;
name|double
name|d
decl_stmt|;
block|}
name|returnValue
union|;
name|qMemCopy
argument_list|(
name|returnValue
operator|.
name|c
argument_list|,
name|bytes
argument_list|,
sizeof|sizeof
argument_list|(
name|returnValue
operator|.
name|c
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|returnValue
operator|.
name|d
return|;
block|}
end_function
begin_comment
comment|// Quiet NAN
end_comment
begin_decl_stmt
specifier|static
specifier|const
name|unsigned
name|char
name|qt_be_qnan_bytes
index|[]
init|=
block|{
literal|0xff
block|,
literal|0xf8
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
specifier|const
name|unsigned
name|char
name|qt_le_qnan_bytes
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0xf8
block|,
literal|0xff
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
specifier|const
name|unsigned
name|char
name|qt_armfpa_qnan_bytes
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0xf8
block|,
literal|0xff
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_function
specifier|static
specifier|inline
name|double
name|qt_qnan
parameter_list|()
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|bytes
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_ARMFPA
name|bytes
operator|=
name|qt_armfpa_qnan_bytes
expr_stmt|;
else|#
directive|else
name|bytes
operator|=
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|?
name|qt_be_qnan_bytes
else|:
name|qt_le_qnan_bytes
operator|)
expr_stmt|;
endif|#
directive|endif
union|union
block|{
name|unsigned
name|char
name|c
index|[
literal|8
index|]
decl_stmt|;
name|double
name|d
decl_stmt|;
block|}
name|returnValue
union|;
name|qMemCopy
argument_list|(
name|returnValue
operator|.
name|c
argument_list|,
name|bytes
argument_list|,
sizeof|sizeof
argument_list|(
name|returnValue
operator|.
name|c
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|returnValue
operator|.
name|d
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_CC_MIPS
end_comment
begin_function
DECL|function|qt_is_inf
specifier|static
specifier|inline
name|bool
name|qt_is_inf
parameter_list|(
name|double
name|d
parameter_list|)
block|{
name|uchar
modifier|*
name|ch
init|=
operator|(
name|uchar
operator|*
operator|)
operator|&
name|d
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_ARMFPA
return|return
operator|(
name|ch
index|[
literal|3
index|]
operator|&
literal|0x7f
operator|)
operator|==
literal|0x7f
operator|&&
name|ch
index|[
literal|2
index|]
operator|==
literal|0xf0
return|;
else|#
directive|else
if|if
condition|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|)
block|{
return|return
operator|(
name|ch
index|[
literal|0
index|]
operator|&
literal|0x7f
operator|)
operator|==
literal|0x7f
operator|&&
name|ch
index|[
literal|1
index|]
operator|==
literal|0xf0
return|;
block|}
else|else
block|{
return|return
operator|(
name|ch
index|[
literal|7
index|]
operator|&
literal|0x7f
operator|)
operator|==
literal|0x7f
operator|&&
name|ch
index|[
literal|6
index|]
operator|==
literal|0xf0
return|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|qt_is_nan
specifier|static
specifier|inline
name|bool
name|qt_is_nan
parameter_list|(
name|double
name|d
parameter_list|)
block|{
name|uchar
modifier|*
name|ch
init|=
operator|(
name|uchar
operator|*
operator|)
operator|&
name|d
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_ARMFPA
return|return
operator|(
name|ch
index|[
literal|3
index|]
operator|&
literal|0x7f
operator|)
operator|==
literal|0x7f
operator|&&
name|ch
index|[
literal|2
index|]
operator|>
literal|0xf0
return|;
else|#
directive|else
if|if
condition|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|)
block|{
return|return
operator|(
name|ch
index|[
literal|0
index|]
operator|&
literal|0x7f
operator|)
operator|==
literal|0x7f
operator|&&
name|ch
index|[
literal|1
index|]
operator|>
literal|0xf0
return|;
block|}
else|else
block|{
return|return
operator|(
name|ch
index|[
literal|7
index|]
operator|&
literal|0x7f
operator|)
operator|==
literal|0x7f
operator|&&
name|ch
index|[
literal|6
index|]
operator|>
literal|0xf0
return|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|qt_is_finite
specifier|static
specifier|inline
name|bool
name|qt_is_finite
parameter_list|(
name|double
name|d
parameter_list|)
block|{
name|uchar
modifier|*
name|ch
init|=
operator|(
name|uchar
operator|*
operator|)
operator|&
name|d
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_ARMFPA
return|return
operator|(
name|ch
index|[
literal|3
index|]
operator|&
literal|0x7f
operator|)
operator|!=
literal|0x7f
operator|||
operator|(
name|ch
index|[
literal|2
index|]
operator|&
literal|0xf0
operator|)
operator|!=
literal|0xf0
return|;
else|#
directive|else
if|if
condition|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|)
block|{
return|return
operator|(
name|ch
index|[
literal|0
index|]
operator|&
literal|0x7f
operator|)
operator|!=
literal|0x7f
operator|||
operator|(
name|ch
index|[
literal|1
index|]
operator|&
literal|0xf0
operator|)
operator|!=
literal|0xf0
return|;
block|}
else|else
block|{
return|return
operator|(
name|ch
index|[
literal|7
index|]
operator|&
literal|0x7f
operator|)
operator|!=
literal|0x7f
operator|||
operator|(
name|ch
index|[
literal|6
index|]
operator|&
literal|0xf0
operator|)
operator|!=
literal|0xf0
return|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|qt_is_inf
specifier|static
specifier|inline
name|bool
name|qt_is_inf
parameter_list|(
name|float
name|d
parameter_list|)
block|{
name|uchar
modifier|*
name|ch
init|=
operator|(
name|uchar
operator|*
operator|)
operator|&
name|d
decl_stmt|;
if|if
condition|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|)
block|{
return|return
operator|(
name|ch
index|[
literal|0
index|]
operator|&
literal|0x7f
operator|)
operator|==
literal|0x7f
operator|&&
name|ch
index|[
literal|1
index|]
operator|==
literal|0x80
return|;
block|}
else|else
block|{
return|return
operator|(
name|ch
index|[
literal|3
index|]
operator|&
literal|0x7f
operator|)
operator|==
literal|0x7f
operator|&&
name|ch
index|[
literal|2
index|]
operator|==
literal|0x80
return|;
block|}
block|}
end_function
begin_function
DECL|function|qt_is_nan
specifier|static
specifier|inline
name|bool
name|qt_is_nan
parameter_list|(
name|float
name|d
parameter_list|)
block|{
name|uchar
modifier|*
name|ch
init|=
operator|(
name|uchar
operator|*
operator|)
operator|&
name|d
decl_stmt|;
if|if
condition|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|)
block|{
return|return
operator|(
name|ch
index|[
literal|0
index|]
operator|&
literal|0x7f
operator|)
operator|==
literal|0x7f
operator|&&
name|ch
index|[
literal|1
index|]
operator|>
literal|0x80
return|;
block|}
else|else
block|{
return|return
operator|(
name|ch
index|[
literal|3
index|]
operator|&
literal|0x7f
operator|)
operator|==
literal|0x7f
operator|&&
name|ch
index|[
literal|2
index|]
operator|>
literal|0x80
return|;
block|}
block|}
end_function
begin_function
DECL|function|qt_is_finite
specifier|static
specifier|inline
name|bool
name|qt_is_finite
parameter_list|(
name|float
name|d
parameter_list|)
block|{
name|uchar
modifier|*
name|ch
init|=
operator|(
name|uchar
operator|*
operator|)
operator|&
name|d
decl_stmt|;
if|if
condition|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|)
block|{
return|return
operator|(
name|ch
index|[
literal|0
index|]
operator|&
literal|0x7f
operator|)
operator|!=
literal|0x7f
operator|||
operator|(
name|ch
index|[
literal|1
index|]
operator|&
literal|0x80
operator|)
operator|!=
literal|0x80
return|;
block|}
else|else
block|{
return|return
operator|(
name|ch
index|[
literal|3
index|]
operator|&
literal|0x7f
operator|)
operator|!=
literal|0x7f
operator|||
operator|(
name|ch
index|[
literal|2
index|]
operator|&
literal|0x80
operator|)
operator|!=
literal|0x80
return|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QNUMERIC_P_H
end_comment
end_unit
