begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui>
end_include
begin_comment
comment|//![0]
end_comment
begin_struct
DECL|struct|StringEvent
struct|struct
name|StringEvent
super|:
specifier|public
name|QEvent
block|{
DECL|function|StringEvent
name|StringEvent
parameter_list|(
specifier|const
name|QString
modifier|&
name|val
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1
argument_list|)
argument_list|)
member_init_list|,
name|value
argument_list|(
name|val
argument_list|)
block|{}
DECL|member|value
name|QString
name|value
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|//![0]
end_comment
begin_comment
comment|//![1]
end_comment
begin_class
DECL|class|StringTransition
class|class
name|StringTransition
super|:
specifier|public
name|QAbstractTransition
block|{
name|Q_OBJECT
public|public:
DECL|function|StringTransition
name|StringTransition
parameter_list|(
specifier|const
name|QString
modifier|&
name|value
parameter_list|)
member_init_list|:
name|m_value
argument_list|(
name|value
argument_list|)
block|{}
protected|protected:
DECL|function|eventTest
specifier|virtual
name|bool
name|eventTest
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|!=
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1
argument_list|)
condition|)
comment|// StringEvent
return|return
literal|false
return|;
name|StringEvent
modifier|*
name|se
init|=
cast|static_cast
argument_list|<
name|StringEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
return|return
operator|(
name|m_value
operator|==
name|se
operator|->
name|value
operator|)
return|;
block|}
DECL|function|onTransition
specifier|virtual
name|void
name|onTransition
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
block|{}
private|private:
DECL|member|m_value
name|QString
name|m_value
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|//![1]
end_comment
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argv
parameter_list|,
name|char
modifier|*
modifier|*
name|args
parameter_list|)
block|{
name|QApplication
name|app
argument_list|(
name|argv
argument_list|,
name|args
argument_list|)
decl_stmt|;
comment|//![2]
name|QStateMachine
name|machine
decl_stmt|;
name|QState
modifier|*
name|s1
init|=
operator|new
name|QState
argument_list|()
decl_stmt|;
name|QState
modifier|*
name|s2
init|=
operator|new
name|QState
argument_list|()
decl_stmt|;
name|QFinalState
modifier|*
name|done
init|=
operator|new
name|QFinalState
argument_list|()
decl_stmt|;
name|StringTransition
modifier|*
name|t1
init|=
operator|new
name|StringTransition
argument_list|(
literal|"Hello"
argument_list|)
decl_stmt|;
name|t1
operator|->
name|setTargetState
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|s1
operator|->
name|addTransition
argument_list|(
name|t1
argument_list|)
expr_stmt|;
name|StringTransition
modifier|*
name|t2
init|=
operator|new
name|StringTransition
argument_list|(
literal|"world"
argument_list|)
decl_stmt|;
name|t2
operator|->
name|setTargetState
argument_list|(
name|done
argument_list|)
expr_stmt|;
name|s2
operator|->
name|addTransition
argument_list|(
name|t2
argument_list|)
expr_stmt|;
name|machine
operator|.
name|addState
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|machine
operator|.
name|addState
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|machine
operator|.
name|addState
argument_list|(
name|done
argument_list|)
expr_stmt|;
name|machine
operator|.
name|setInitialState
argument_list|(
name|s1
argument_list|)
expr_stmt|;
comment|//![2]
comment|//![3]
name|machine
operator|.
name|postEvent
argument_list|(
operator|new
name|StringEvent
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|machine
operator|.
name|postEvent
argument_list|(
operator|new
name|StringEvent
argument_list|(
literal|"world"
argument_list|)
argument_list|)
expr_stmt|;
comment|//![3]
return|return
name|app
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"main4.moc"
end_include
end_unit
