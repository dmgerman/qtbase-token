begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Copyright (C) 2014 Keith Gardner<kreios4004@gmail.com> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QVersionNumber>
end_include
begin_class
DECL|class|Object
class|class
name|Object
block|{
public|public:
specifier|static
name|void
name|genericExample
parameter_list|()
function_decl|;
specifier|static
name|void
name|equalityExample
parameter_list|()
function_decl|;
specifier|static
name|void
name|isPrefixOf
parameter_list|()
function_decl|;
specifier|static
name|void
name|parse
parameter_list|()
function_decl|;
specifier|static
name|void
name|equivalent
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|genericExample
name|void
name|Object
operator|::
name|genericExample
parameter_list|()
block|{
comment|//! [0]
name|QVersionNumber
name|version
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|// 1.2.3
comment|//! [0]
block|}
end_function
begin_function
DECL|function|equalityExample
name|void
name|Object
operator|::
name|equalityExample
parameter_list|()
block|{
comment|//! [1]
name|QVersionNumber
name|v1
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QVersionNumber
name|v2
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|compare
init|=
name|QVersionNumber
operator|::
name|compare
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
decl_stmt|;
comment|// compare == -1
comment|//! [1]
block|}
end_function
begin_function
DECL|function|isPrefixOf
name|void
name|Object
operator|::
name|isPrefixOf
parameter_list|()
block|{
comment|//! [2]
name|QVersionNumber
name|v1
argument_list|(
literal|5
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QVersionNumber
name|v2
argument_list|(
literal|5
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|bool
name|value
init|=
name|v1
operator|.
name|isPrefixOf
argument_list|(
name|v2
argument_list|)
decl_stmt|;
comment|// true
comment|//! [2]
block|}
end_function
begin_function
DECL|function|parse
name|void
name|QObject
operator|::
name|parse
parameter_list|()
block|{
comment|//! [3]
name|QString
name|string
argument_list|(
literal|"5.4.0-alpha"
argument_list|)
decl_stmt|;
name|int
name|suffixIndex
decl_stmt|;
name|QVersionNumber
name|version
init|=
name|QVersionNumber
operator|::
name|fromString
argument_list|(
name|string
argument_list|,
operator|&
name|suffixIndex
argument_list|)
decl_stmt|;
comment|// version is 5.4.0
comment|// suffixIndex is 5
comment|//! [3]
block|}
end_function
begin_function
DECL|function|equivalent
name|void
name|Object
operator|::
name|equivalent
parameter_list|()
block|{
comment|//! [4]
name|QVersionNumber
name|v1
argument_list|(
literal|5
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|QVersionNumber
name|v2
argument_list|(
literal|5
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|bool
name|equivalent
init|=
name|v1
operator|.
name|normalized
argument_list|()
operator|==
name|v2
operator|.
name|normalized
argument_list|()
decl_stmt|;
name|bool
name|equal
init|=
name|v1
operator|==
name|v2
decl_stmt|;
comment|// equivalent is true
comment|// equal is false
comment|//! [4]
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|()
block|{
name|Object
operator|::
name|genericExample
argument_list|()
expr_stmt|;
name|Object
operator|::
name|equalityExample
argument_list|()
expr_stmt|;
name|Object
operator|::
name|isPrefixOf
argument_list|()
expr_stmt|;
name|Object
operator|::
name|parse
argument_list|()
expr_stmt|;
name|Object
operator|::
name|equivalent
argument_list|()
expr_stmt|;
block|}
end_function
end_unit
