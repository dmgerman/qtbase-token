begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 David Faure<faure@kde.org> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd and its Subsidiary(-ies) nor the **     names of its contributors may be used to endorse or promote products **     derived from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qcommandlineparser.h>
end_include
begin_comment
comment|//! [0]
end_comment
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|setApplicationName
argument_list|(
literal|"my-copy-program"
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|setApplicationVersion
argument_list|(
literal|"1.0"
argument_list|)
expr_stmt|;
name|QCommandLineParser
name|parser
decl_stmt|;
name|parser
operator|.
name|setApplicationDescription
argument_list|(
literal|"Test helper"
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addHelpOption
argument_list|()
expr_stmt|;
name|parser
operator|.
name|addVersionOption
argument_list|()
expr_stmt|;
name|parser
operator|.
name|addPositionalArgument
argument_list|(
literal|"source"
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"main"
argument_list|,
literal|"Source file to copy."
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addPositionalArgument
argument_list|(
literal|"destination"
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"main"
argument_list|,
literal|"Destination directory."
argument_list|)
argument_list|)
expr_stmt|;
comment|// A boolean option with a single name (-p)
name|QCommandLineOption
name|showProgressOption
argument_list|(
literal|"p"
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"main"
argument_list|,
literal|"Show progress during copy"
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|showProgressOption
argument_list|)
expr_stmt|;
comment|// A boolean option with multiple names (-f, --force)
name|QCommandLineOption
name|forceOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"f"
operator|<<
literal|"force"
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"main"
argument_list|,
literal|"Overwrite existing files."
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|forceOption
argument_list|)
expr_stmt|;
comment|// An option with a value
name|QCommandLineOption
name|targetDirectoryOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"t"
operator|<<
literal|"target-directory"
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"main"
argument_list|,
literal|"Copy all source files into<directory>."
argument_list|)
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"main"
argument_list|,
literal|"directory"
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|targetDirectoryOption
argument_list|)
expr_stmt|;
comment|// Process the actual command line arguments given by the user
name|parser
operator|.
name|process
argument_list|(
name|app
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|args
init|=
name|parser
operator|.
name|positionalArguments
argument_list|()
decl_stmt|;
comment|// source is args.at(0), destination is args.at(1)
name|bool
name|showProgress
init|=
name|parser
operator|.
name|isSet
argument_list|(
name|showProgressOption
argument_list|)
decl_stmt|;
name|bool
name|force
init|=
name|parser
operator|.
name|isSet
argument_list|(
name|forceOption
argument_list|)
decl_stmt|;
name|QString
name|targetDir
init|=
name|parser
operator|.
name|value
argument_list|(
name|targetDirectoryOption
argument_list|)
decl_stmt|;
comment|// ...
block|}
end_function
begin_comment
comment|//! [0]
end_comment
begin_function
DECL|function|f
name|void
name|f
parameter_list|()
block|{
comment|//! [cxx11]
name|parser
operator|.
name|addOptions
argument_list|(
block|{
comment|// A boolean option with a single name (-p)
block|{
literal|"p"
block|,
name|QCoreApplication
operator|::
name|translate
operator|(
literal|"main"
operator|,
literal|"Show progress during copy"
operator|)
block|}
block|,
comment|// A boolean option with multiple names (-f, --force)
block|{
block|{
literal|"f"
block|,
literal|"force"
block|}
block|,
name|QCoreApplication
operator|::
name|translate
operator|(
literal|"main"
operator|,
literal|"Overwrite existing files."
operator|)
block|}
block|,
comment|// An option with a value
block|{
block|{
literal|"t"
block|,
literal|"target-directory"
block|}
block|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"main"
argument_list|,
literal|"Copy all source files into<directory>."
argument_list|)
block|,
name|QCoreApplication
operator|::
name|translate
operator|(
literal|"main"
operator|,
literal|"directory"
operator|)
block|}
block|,     }
argument_list|)
expr_stmt|;
comment|//! [cxx11]
block|}
end_function
end_unit
