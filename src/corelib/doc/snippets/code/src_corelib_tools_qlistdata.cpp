begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd and its Subsidiary(-ies) nor the **     names of its contributors may be used to endorse or promote products **     derived from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//! [0]
end_comment
begin_decl_stmt
DECL|variable|integerList
name|QList
argument_list|<
name|int
argument_list|>
name|integerList
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|dateList
name|QList
argument_list|<
name|QDate
argument_list|>
name|dateList
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_decl_stmt
DECL|variable|list
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|list
operator|<<
literal|"one"
operator|<<
literal|"two"
operator|<<
literal|"three"
expr_stmt|;
end_expr_stmt
begin_comment
comment|// list: ["one", "two", "three"]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_if
if|if
condition|(
name|list
index|[
literal|0
index|]
operator|==
literal|"Bob"
condition|)
name|list
index|[
literal|0
index|]
operator|=
literal|"Robert"
expr_stmt|;
end_if
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_for
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"Jane"
condition|)
name|cout
operator|<<
literal|"Found Jane at position "
operator|<<
name|i
operator|<<
name|endl
expr_stmt|;
block|}
end_for
begin_comment
comment|//! [3]
end_comment
begin_comment
comment|//! [4]
end_comment
begin_decl_stmt
DECL|variable|list
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|list
decl_stmt|;
end_decl_stmt
begin_expr_stmt
operator|...
end_expr_stmt
begin_while
while|while
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
operator|delete
name|list
operator|.
name|takeFirst
argument_list|()
expr_stmt|;
end_while
begin_comment
comment|//! [4]
end_comment
begin_comment
comment|//! [5]
end_comment
begin_decl_stmt
DECL|variable|i
name|int
name|i
init|=
name|list
operator|.
name|indexOf
argument_list|(
literal|"Jane"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
name|i
operator|!=
operator|-
literal|1
condition|)
DECL|variable|endl
name|cout
operator|<<
literal|"First occurrence of Jane is at position "
operator|<<
name|i
operator|<<
name|endl
expr_stmt|;
end_if
begin_comment
comment|//! [5]
end_comment
begin_comment
comment|//! [6]
end_comment
begin_decl_stmt
DECL|variable|list
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|list
operator|.
name|append
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|list
operator|.
name|append
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|list
operator|.
name|append
argument_list|(
literal|"three"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// list: ["one", "two", "three"]
end_comment
begin_comment
comment|//! [6]
end_comment
begin_comment
comment|//! [7]
end_comment
begin_decl_stmt
DECL|variable|list
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|list
operator|.
name|prepend
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|list
operator|.
name|prepend
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|list
operator|.
name|prepend
argument_list|(
literal|"three"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// list: ["three", "two", "one"]
end_comment
begin_comment
comment|//! [7]
end_comment
begin_comment
comment|//! [8]
end_comment
begin_decl_stmt
DECL|variable|list
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|list
operator|<<
literal|"alpha"
operator|<<
literal|"beta"
operator|<<
literal|"delta"
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|list
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"gamma"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// list: ["alpha", "beta", "gamma", "delta"]
end_comment
begin_comment
comment|//! [8]
end_comment
begin_comment
comment|//! [9]
end_comment
begin_decl_stmt
DECL|variable|list
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|list
operator|<<
literal|"sun"
operator|<<
literal|"cloud"
operator|<<
literal|"sun"
operator|<<
literal|"rain"
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|list
operator|.
name|removeAll
argument_list|(
literal|"sun"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// list: ["cloud", "rain"]
end_comment
begin_comment
comment|//! [9]
end_comment
begin_comment
comment|//! [10]
end_comment
begin_decl_stmt
DECL|variable|list
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|list
operator|<<
literal|"sun"
operator|<<
literal|"cloud"
operator|<<
literal|"sun"
operator|<<
literal|"rain"
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|list
operator|.
name|removeOne
argument_list|(
literal|"sun"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// list: ["cloud", ,"sun", "rain"]
end_comment
begin_comment
comment|//! [10]
end_comment
begin_comment
comment|//! [11]
end_comment
begin_decl_stmt
DECL|variable|list
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|list
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
operator|<<
literal|"D"
operator|<<
literal|"E"
operator|<<
literal|"F"
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|list
operator|.
name|move
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// list: ["A", "C", "D", "E", "B", "F"]
end_comment
begin_comment
comment|//! [11]
end_comment
begin_comment
comment|//! [12]
end_comment
begin_decl_stmt
DECL|variable|list
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|list
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
operator|<<
literal|"D"
operator|<<
literal|"E"
operator|<<
literal|"F"
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|list
operator|.
name|swap
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// list: ["A", "E", "C", "D", "B", "F"]
end_comment
begin_comment
comment|//! [12]
end_comment
begin_comment
comment|//! [13]
end_comment
begin_decl_stmt
DECL|variable|list
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|list
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
operator|<<
literal|"B"
operator|<<
literal|"A"
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|list
operator|.
name|indexOf
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns 1
end_comment
begin_expr_stmt
name|list
operator|.
name|indexOf
argument_list|(
literal|"B"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns 1
end_comment
begin_expr_stmt
name|list
operator|.
name|indexOf
argument_list|(
literal|"B"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns 3
end_comment
begin_expr_stmt
name|list
operator|.
name|indexOf
argument_list|(
literal|"X"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns -1
end_comment
begin_comment
comment|//! [13]
end_comment
begin_comment
comment|//! [14]
end_comment
begin_decl_stmt
DECL|variable|list
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|list
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
operator|<<
literal|"B"
operator|<<
literal|"A"
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|list
operator|.
name|lastIndexOf
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns 3
end_comment
begin_expr_stmt
name|list
operator|.
name|lastIndexOf
argument_list|(
literal|"B"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns 3
end_comment
begin_expr_stmt
name|list
operator|.
name|lastIndexOf
argument_list|(
literal|"B"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns 1
end_comment
begin_expr_stmt
name|list
operator|.
name|lastIndexOf
argument_list|(
literal|"X"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns -1
end_comment
begin_comment
comment|//! [14]
end_comment
begin_comment
comment|//! [15]
end_comment
begin_decl_stmt
DECL|variable|list
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|list
operator|.
name|append
argument_list|(
literal|"January"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|list
operator|.
name|append
argument_list|(
literal|"February"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
operator|...
name|list
operator|.
name|append
argument_list|(
literal|"December"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|i
name|QList
argument_list|<
name|QString
argument_list|>
operator|::
name|iterator
name|i
decl_stmt|;
end_decl_stmt
begin_for
for|for
control|(
name|i
operator|=
name|list
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|list
operator|.
name|end
argument_list|()
condition|;
operator|++
name|i
control|)
DECL|variable|endl
name|cout
operator|<<
operator|*
name|i
operator|<<
name|endl
expr_stmt|;
end_for
begin_comment
comment|//! [15]
end_comment
begin_comment
comment|//! [16]
end_comment
begin_decl_stmt
DECL|variable|i
name|QList
argument_list|<
name|int
argument_list|>
operator|::
name|iterator
name|i
decl_stmt|;
end_decl_stmt
begin_for
for|for
control|(
name|i
operator|=
name|list
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|list
operator|.
name|end
argument_list|()
condition|;
operator|++
name|i
control|)
operator|*
name|i
operator|+=
literal|2
expr_stmt|;
end_for
begin_comment
comment|//! [16]
end_comment
begin_comment
comment|//! [17]
end_comment
begin_decl_stmt
DECL|variable|list
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|list
decl_stmt|;
end_decl_stmt
begin_expr_stmt
operator|...
name|qDeleteAll
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [17]
end_comment
begin_comment
comment|//! [18]
end_comment
begin_if
if|if
condition|(
operator|*
name|it
operator|==
literal|"Hello"
condition|)
operator|*
name|it
operator|=
literal|"Bonjour"
expr_stmt|;
end_if
begin_comment
comment|//! [18]
end_comment
begin_comment
comment|//! [19]
end_comment
begin_decl_stmt
DECL|variable|list
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|list
operator|.
name|append
argument_list|(
literal|"January"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|list
operator|.
name|append
argument_list|(
literal|"February"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
operator|...
name|list
operator|.
name|append
argument_list|(
literal|"December"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|i
name|QList
argument_list|<
name|QString
argument_list|>
operator|::
name|const_iterator
name|i
decl_stmt|;
end_decl_stmt
begin_for
for|for
control|(
name|i
operator|=
name|list
operator|.
name|constBegin
argument_list|()
init|;
name|i
operator|!=
name|list
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|i
control|)
DECL|variable|endl
name|cout
operator|<<
operator|*
name|i
operator|<<
name|endl
expr_stmt|;
end_for
begin_comment
comment|//! [19]
end_comment
begin_comment
comment|//! [20]
end_comment
begin_decl_stmt
DECL|variable|list
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|list
decl_stmt|;
end_decl_stmt
begin_expr_stmt
operator|...
name|qDeleteAll
argument_list|(
name|list
operator|.
name|constBegin
argument_list|()
argument_list|,
name|list
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [20]
end_comment
begin_comment
comment|//! [21]
end_comment
begin_decl_stmt
DECL|variable|vect
name|QVector
argument_list|<
name|double
argument_list|>
name|vect
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|vect
operator|<<
literal|20.0
operator|<<
literal|30.0
operator|<<
literal|40.0
operator|<<
literal|50.0
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|list
name|QList
argument_list|<
name|double
argument_list|>
name|list
init|=
name|QVector
argument_list|<
name|T
argument_list|>
operator|::
name|fromVector
argument_list|(
name|vect
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|// list: [20.0, 30.0, 40.0, 50.0]
end_comment
begin_comment
comment|//! [21]
end_comment
begin_comment
comment|//! [22]
end_comment
begin_decl_stmt
DECL|variable|list
name|QStringList
name|list
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|list
operator|<<
literal|"Sven"
operator|<<
literal|"Kim"
operator|<<
literal|"Ola"
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|vect
name|QVector
argument_list|<
name|QString
argument_list|>
name|vect
init|=
name|list
operator|.
name|toVector
argument_list|()
decl_stmt|;
end_decl_stmt
begin_comment
comment|// vect: ["Sven", "Kim", "Ola"]
end_comment
begin_comment
comment|//! [22]
end_comment
begin_comment
comment|//! [23]
end_comment
begin_decl_stmt
DECL|variable|set
name|QSet
argument_list|<
name|int
argument_list|>
name|set
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|set
operator|<<
literal|20
operator|<<
literal|30
operator|<<
literal|40
operator|<<
operator|...
operator|<<
literal|70
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|list
name|QList
argument_list|<
name|int
argument_list|>
name|list
init|=
name|QList
argument_list|<
name|int
argument_list|>
operator|::
name|fromSet
argument_list|(
name|set
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|variable|list
name|qSort
argument_list|(
name|list
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [23]
end_comment
begin_comment
comment|//! [24]
end_comment
begin_decl_stmt
DECL|variable|list
name|QStringList
name|list
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|list
operator|<<
literal|"Julia"
operator|<<
literal|"Mike"
operator|<<
literal|"Mike"
operator|<<
literal|"Julia"
operator|<<
literal|"Julia"
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|set
name|QSet
argument_list|<
name|QString
argument_list|>
name|set
init|=
name|list
operator|.
name|toSet
argument_list|()
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|set
operator|.
name|contains
argument_list|(
literal|"Julia"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns true
end_comment
begin_expr_stmt
name|set
operator|.
name|contains
argument_list|(
literal|"Mike"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns true
end_comment
begin_expr_stmt
name|set
operator|.
name|size
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns 2
end_comment
begin_comment
comment|//! [24]
end_comment
begin_comment
comment|//! [25]
end_comment
begin_decl_stmt
DECL|variable|stdlist
name|std
operator|::
name|list
argument_list|<
name|double
argument_list|>
name|stdlist
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|list
operator|.
name|push_back
argument_list|(
literal|1.2
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|list
operator|.
name|push_back
argument_list|(
literal|0.5
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|list
operator|.
name|push_back
argument_list|(
literal|3.14
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|list
name|QList
argument_list|<
name|double
argument_list|>
name|list
init|=
name|QList
argument_list|<
name|double
argument_list|>
operator|::
name|fromStdList
argument_list|(
name|stdlist
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [25]
end_comment
begin_comment
comment|//! [26]
end_comment
begin_decl_stmt
DECL|variable|list
name|QList
argument_list|<
name|double
argument_list|>
name|list
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|list
operator|<<
literal|1.2
operator|<<
literal|0.5
operator|<<
literal|3.14
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|stdlist
name|std
operator|::
name|list
argument_list|<
name|double
argument_list|>
name|stdlist
init|=
name|list
operator|.
name|toStdList
argument_list|()
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [26]
end_comment
end_unit
