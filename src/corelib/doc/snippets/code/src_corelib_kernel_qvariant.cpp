begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//! [0]
end_comment
begin_function_decl
name|QDataStream
name|out
parameter_list|(
modifier|...
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|QVariant
name|v
argument_list|(
literal|123
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|// The variant now contains an int
end_comment
begin_decl_stmt
DECL|variable|x
name|int
name|x
init|=
name|v
operator|.
name|toInt
argument_list|()
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|x
comment|// x = 123
end_comment
begin_expr_stmt
DECL|variable|v
name|out
operator|<<
name|v
expr_stmt|;
end_expr_stmt
begin_comment
DECL|variable|v
comment|// Writes a type tag and an int to out
end_comment
begin_expr_stmt
name|v
operator|=
name|QVariant
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// The variant now contains a QByteArray
end_comment
begin_expr_stmt
name|v
operator|=
name|QVariant
argument_list|(
name|tr
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// The variant now contains a QString
end_comment
begin_decl_stmt
DECL|variable|y
name|int
name|y
init|=
name|v
operator|.
name|toInt
argument_list|()
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|y
comment|// y = 0 since v cannot be converted to an int
end_comment
begin_decl_stmt
DECL|variable|s
name|QString
name|s
init|=
name|v
operator|.
name|toString
argument_list|()
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|s
comment|// s = tr("hello")  (see QObject::tr())
end_comment
begin_expr_stmt
DECL|variable|v
name|out
operator|<<
name|v
expr_stmt|;
end_expr_stmt
begin_comment
DECL|variable|v
comment|// Writes a type tag and a QString to out
end_comment
begin_expr_stmt
operator|...
name|QDataStream
name|in
argument_list|(
operator|...
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// (opening the previously written stream)
end_comment
begin_expr_stmt
DECL|variable|v
name|in
operator|>>
name|v
expr_stmt|;
end_expr_stmt
begin_comment
DECL|variable|v
comment|// Reads an Int variant
end_comment
begin_decl_stmt
DECL|variable|z
name|int
name|z
init|=
name|v
operator|.
name|toInt
argument_list|()
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|z
comment|// z = 123
end_comment
begin_expr_stmt
name|qDebug
argument_list|(
literal|"Type is %s"
argument_list|,
comment|// prints "Type is int"
name|v
operator|.
name|typeName
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|v
operator|=
name|v
operator|.
name|toInt
argument_list|()
operator|+
literal|100
expr_stmt|;
end_expr_stmt
begin_comment
comment|// The variant now hold the value 223
end_comment
begin_expr_stmt
name|v
operator|=
name|QVariant
argument_list|(
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_decl_stmt
DECL|variable|x
name|QVariant
name|x
decl_stmt|,
name|y
argument_list|(
name|QString
argument_list|()
argument_list|)
decl_stmt|,
name|z
argument_list|(
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|x
operator|.
name|convert
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// x.isNull() == true
end_comment
begin_comment
comment|// y.isNull() == true, z.isNull() == false
end_comment
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_decl_stmt
DECL|variable|variant
name|QVariant
name|variant
decl_stmt|;
end_decl_stmt
begin_expr_stmt
operator|...
name|QColor
name|color
operator|=
name|variant
operator|.
name|value
argument_list|<
name|QColor
argument_list|>
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_decl_stmt
DECL|variable|color
name|QColor
name|color
init|=
name|palette
argument_list|()
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|variant
name|QVariant
name|variant
init|=
name|color
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [3]
end_comment
begin_comment
comment|//! [4]
end_comment
begin_decl_stmt
DECL|variable|v
name|QVariant
name|v
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|v
operator|.
name|setValue
argument_list|(
literal|5
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|i
name|int
name|i
init|=
name|v
operator|.
name|toInt
argument_list|()
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|i
comment|// i is now 5
end_comment
begin_decl_stmt
DECL|variable|s
name|QString
name|s
init|=
name|v
operator|.
name|toString
argument_list|()
comment|// s is now "5"
name|MyCustomStruct
name|c
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|v
operator|.
name|setValue
argument_list|(
name|c
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
operator|...
name|MyCustomStruct
name|c2
operator|=
name|v
operator|.
name|value
argument_list|<
name|MyCustomStruct
argument_list|>
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [4]
end_comment
begin_comment
comment|//! [5]
end_comment
begin_decl_stmt
DECL|variable|v
name|QVariant
name|v
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|c
name|MyCustomStruct
name|c
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
name|v
operator|.
name|canConvert
argument_list|<
name|MyCustomStruct
argument_list|>
argument_list|()
condition|)
name|c
operator|=
name|v
operator|.
name|value
argument_list|<
name|MyCustomStruct
argument_list|>
argument_list|()
expr_stmt|;
end_if
begin_expr_stmt
name|v
operator|=
literal|7
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|i
name|int
name|i
init|=
name|v
operator|.
name|value
argument_list|<
name|int
argument_list|>
argument_list|()
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|i
comment|// same as v.toInt()
end_comment
begin_decl_stmt
DECL|variable|s
name|QString
name|s
init|=
name|v
operator|.
name|value
argument_list|<
name|QString
argument_list|>
argument_list|()
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|s
comment|// same as v.toString(), s is now "7"
end_comment
begin_decl_stmt
DECL|variable|c2
name|MyCustomStruct
name|c2
init|=
name|v
operator|.
name|value
argument_list|<
name|MyCustomStruct
argument_list|>
argument_list|()
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|c2
comment|// conversion failed, c2 is empty
end_comment
begin_comment
comment|//! [5]
end_comment
begin_comment
comment|//! [6]
end_comment
begin_decl_stmt
DECL|variable|v
name|QVariant
name|v
init|=
literal|42
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|v
operator|.
name|canConvert
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns true
end_comment
begin_expr_stmt
name|v
operator|.
name|canConvert
argument_list|<
name|QString
argument_list|>
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns true
end_comment
begin_decl_stmt
DECL|variable|s
name|MyCustomStruct
name|s
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|v
operator|.
name|setValue
argument_list|(
name|s
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|v
operator|.
name|canConvert
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns false
end_comment
begin_expr_stmt
name|v
operator|.
name|canConvert
argument_list|<
name|MyCustomStruct
argument_list|>
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns true
end_comment
begin_comment
comment|//! [6]
end_comment
begin_comment
comment|//! [7]
end_comment
begin_decl_stmt
DECL|variable|s
name|MyCustomStruct
name|s
decl_stmt|;
end_decl_stmt
begin_return
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|s
argument_list|)
return|;
end_return
begin_comment
comment|//! [7]
end_comment
begin_comment
comment|//! [8]
end_comment
begin_decl_stmt
name|QObject
modifier|*
name|object
init|=
name|getObjectFromSomewhere
argument_list|()
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|data
name|QVariant
name|data
init|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|object
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [8]
end_comment
end_unit
