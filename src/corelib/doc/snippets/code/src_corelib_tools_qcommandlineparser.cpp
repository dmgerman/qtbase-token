begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 David Faure<faure@kde.org> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//! [0]
end_comment
begin_decl_stmt
DECL|variable|verbose
name|bool
name|verbose
init|=
name|parser
operator|.
name|isSet
argument_list|(
literal|"verbose"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|// Usage: image-editor file
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Arguments:
end_comment
begin_comment
comment|//   file                  The file to open.
end_comment
begin_expr_stmt
name|parser
operator|.
name|addPositionalArgument
argument_list|(
literal|"file"
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"main"
argument_list|,
literal|"The file to open."
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// Usage: web-browser [urls...]
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Arguments:
end_comment
begin_comment
comment|//   urls                URLs to open, optionally.
end_comment
begin_expr_stmt
name|parser
operator|.
name|addPositionalArgument
argument_list|(
literal|"urls"
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"main"
argument_list|,
literal|"URLs to open, optionally."
argument_list|)
argument_list|,
literal|"[urls...]"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// Usage: cp source destination
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Arguments:
end_comment
begin_comment
comment|//   source                Source file to copy.
end_comment
begin_comment
comment|//   destination           Destination directory.
end_comment
begin_expr_stmt
name|parser
operator|.
name|addPositionalArgument
argument_list|(
literal|"source"
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"main"
argument_list|,
literal|"Source file to copy."
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|parser
operator|.
name|addPositionalArgument
argument_list|(
literal|"destination"
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"main"
argument_list|,
literal|"Destination directory."
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_expr_stmt
name|parser
operator|.
name|addPositionalArgument
argument_list|(
literal|"command"
argument_list|,
literal|"The command to execute."
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// Call parse() to find out the positional arguments.
end_comment
begin_expr_stmt
name|parser
operator|.
name|parse
argument_list|(
name|QCoreApplication
operator|::
name|arguments
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|args
specifier|const
name|QStringList
name|args
init|=
name|parser
operator|.
name|positionalArguments
argument_list|()
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|command
specifier|const
name|QString
name|command
init|=
name|args
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
argument_list|()
else|:
name|args
operator|.
name|first
argument_list|()
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
name|command
operator|==
literal|"resize"
condition|)
block|{
name|parser
operator|.
name|clearPositionalArguments
argument_list|()
expr_stmt|;
name|parser
operator|.
name|addPositionalArgument
argument_list|(
literal|"resize"
argument_list|,
literal|"Resize the object to a new size."
argument_list|,
literal|"resize [resize_options]"
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|QCommandLineOption
argument_list|(
literal|"size"
argument_list|,
literal|"New size."
argument_list|,
literal|"new_size"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|process
argument_list|(
name|app
argument_list|)
expr_stmt|;
comment|// ...
block|}
end_if
begin_expr_stmt
name|This
name|code
name|results
name|in
name|context
operator|-
name|dependent
name|help
operator|:
name|$
name|tool
operator|--
name|help
name|Usage
operator|:
name|tool
name|command
name|Arguments
operator|:
name|command
name|The
name|command
name|to
name|execute
operator|.
name|$
name|tool
name|resize
operator|--
name|help
name|Usage
operator|:
name|tool
name|resize
index|[
name|resize_options
index|]
name|Options
operator|:
operator|--
name|size
argument_list|<
name|size
argument_list|>
name|New
name|size
operator|.
name|Arguments
operator|:
name|resize
name|Resize
name|the
name|object
name|to
name|a
operator|new
name|size
operator|.
comment|//! [2]
comment|//! [3]
DECL|function|main
name|int
expr|main
operator|(
name|int
name|argc
operator|,
name|char
operator|*
name|argv
index|[]
operator|)
block|{
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
block|;
name|app
operator|.
name|setApplicationName
argument_list|(
literal|"my-copy-program"
argument_list|)
block|;
name|app
operator|.
name|setApplicationVersion
argument_list|(
literal|"1.0"
argument_list|)
block|;
name|QCommandLineParser
name|parser
block|;
name|parser
operator|.
name|addHelpOption
argument_list|(
literal|"Test helper"
argument_list|)
block|;
name|parser
operator|.
name|addVersionOption
argument_list|()
block|;
name|parser
operator|.
name|addRemainingArgument
argument_list|(
literal|"source"
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"main"
argument_list|,
literal|"Source file to copy."
argument_list|)
argument_list|)
block|;
name|parser
operator|.
name|addRemainingArgument
argument_list|(
literal|"destination"
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"main"
argument_list|,
literal|"Destination directory."
argument_list|)
argument_list|)
block|;
comment|// A boolean option with a single name (-p)
name|QCommandLineOption
name|showProgressOption
argument_list|(
literal|"p"
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"main"
argument_list|,
literal|"Show progress during copy"
argument_list|)
argument_list|)
block|;
name|parser
operator|.
name|addOption
argument_list|(
name|showProgressOption
argument_list|)
block|;
comment|// A boolean option with multiple names (-f, --force)
name|QCommandLineOption
name|forceOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"f"
operator|<<
literal|"force"
argument_list|,
literal|"Overwrite existing files."
argument_list|)
block|;
name|parser
operator|.
name|addOption
argument_list|(
name|forceOption
argument_list|)
block|;
comment|// An option with a value
name|QCommandLineOption
name|targetDirectoryOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"t"
operator|<<
literal|"target-directory"
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"main"
argument_list|,
literal|"Copy all source files into<directory>."
argument_list|)
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"main"
argument_list|,
literal|"directory"
argument_list|)
argument_list|)
block|;
name|parser
operator|.
name|addOption
argument_list|(
name|targetDirectoryOption
argument_list|)
block|;
comment|// Process the actual command line arguments given by the user
name|parser
operator|.
name|process
argument_list|(
name|app
argument_list|)
block|;
specifier|const
name|QStringList
name|args
operator|=
name|parser
operator|.
name|remainingArguments
argument_list|()
block|;
comment|// source is args.at(0), destination is args.at(1)
name|bool
name|showProgress
operator|=
name|parser
operator|.
name|isSet
argument_list|(
name|showProgressOption
argument_list|)
block|;
name|bool
name|force
operator|=
name|parser
operator|.
name|isSet
argument_list|(
name|forceOption
argument_list|)
block|;
name|QString
name|targetDir
operator|=
name|parser
operator|.
name|value
argument_list|(
name|targetDirectoryOption
argument_list|)
block|;
comment|// ...
block|}
end_expr_stmt
begin_comment
comment|//! [3]
end_comment
end_unit
