begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Olivier Goffart<ogoffart@woboq.com> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QThread>
end_include
begin_class_decl
class_decl|class
name|MyObject
class_decl|;
end_class_decl
begin_comment
comment|//! [reimpl-run]
end_comment
begin_class
DECL|class|WorkerThread
class|class
name|WorkerThread
super|:
specifier|public
name|QThread
block|{
name|Q_OBJECT
name|void
name|run
parameter_list|()
name|Q_DECL_OVERRIDE
block|{
name|QString
name|result
decl_stmt|;
comment|/* expensive or blocking operation  */
emit|emit
name|resultReady
argument_list|(
name|result
argument_list|)
emit|;
block|}
signals|signals:
name|void
name|resultReady
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|startWorkInAThread
name|void
name|MyObject
operator|::
name|startWorkInAThread
parameter_list|()
block|{
name|WorkerThread
modifier|*
name|workerThread
init|=
operator|new
name|WorkerThread
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|workerThread
argument_list|,
operator|&
name|WorkerThread
operator|::
name|resultReady
argument_list|,
name|this
argument_list|,
operator|&
name|MyObject
operator|::
name|handleResults
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|workerThread
argument_list|,
operator|&
name|WorkerThread
operator|::
name|finished
argument_list|,
name|workerThread
argument_list|,
operator|&
name|QObject
operator|::
name|deleteLater
argument_list|)
expr_stmt|;
name|workerThread
operator|->
name|start
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [reimpl-run]
end_comment
begin_comment
comment|//! [worker]
end_comment
begin_class
DECL|class|Worker
class|class
name|Worker
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|doWork
name|void
name|doWork
parameter_list|(
specifier|const
name|QString
modifier|&
name|parameter
parameter_list|)
block|{
comment|// ...
emit|emit
name|resultReady
argument_list|(
name|result
argument_list|)
emit|;
block|}
signals|signals:
name|void
name|resultReady
parameter_list|(
specifier|const
name|QString
modifier|&
name|result
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_class
DECL|class|Controller
class|class
name|Controller
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
DECL|member|workerThread
name|QThread
name|workerThread
decl_stmt|;
public|public:
DECL|function|Controller
name|Controller
parameter_list|()
block|{
name|Worker
modifier|*
name|worker
init|=
operator|new
name|Worker
decl_stmt|;
name|worker
operator|->
name|moveToThread
argument_list|(
operator|&
name|workerThread
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|workerThread
argument_list|,
operator|&
name|QThread
operator|::
name|finished
argument_list|,
name|worker
argument_list|,
operator|&
name|QObject
operator|::
name|deleteLater
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
operator|&
name|Controller
operator|::
name|operate
argument_list|,
name|worker
argument_list|,
operator|&
name|Worker
operator|::
name|doWork
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|worker
argument_list|,
operator|&
name|Worker
operator|::
name|resultReady
argument_list|,
name|this
argument_list|,
operator|&
name|Controller
operator|::
name|handleResults
argument_list|)
expr_stmt|;
name|workerThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|function|~Controller
name|~
name|Controller
parameter_list|()
block|{
name|workerThread
operator|.
name|quit
argument_list|()
expr_stmt|;
name|workerThread
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
public|public
name|slots
public|:
name|void
name|handleResults
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
signals|signals:
name|void
name|operate
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_comment
comment|//! [worker]
end_comment
end_unit
