begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//! [0]
end_comment
begin_class
DECL|class|Worker
class|class
name|Worker
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|doWork
name|void
name|doWork
parameter_list|()
block|{
operator|...
block|}
block|}
class|;
end_class
begin_function
DECL|function|putWorkerInAThread
name|void
name|MyObject
operator|::
name|putWorkerInAThread
parameter_list|()
block|{
name|Worker
modifier|*
name|worker
init|=
operator|new
name|Worker
decl_stmt|;
name|QThread
modifier|*
name|workerThread
init|=
operator|new
name|QThread
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|workerThread
argument_list|,
operator|&
name|QThread
operator|::
name|started
argument_list|,
name|worker
argument_list|,
operator|&
name|Worker
operator|::
name|doWork
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|workerThread
argument_list|,
operator|&
name|QThread
operator|::
name|finished
argument_list|,
name|worker
argument_list|,
operator|&
name|Worker
operator|::
name|deleteLater
argument_list|)
expr_stmt|;
name|worker
operator|->
name|moveToThread
argument_list|(
name|workerThread
argument_list|)
expr_stmt|;
comment|// Starts an event loop, and emits workerThread->started()
name|workerThread
operator|->
name|start
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_class
DECL|class|AdvancedThreadManager
class|class
name|AdvancedThreadManager
super|:
specifier|public
name|QThread
block|{
protected|protected:
DECL|function|run
name|void
name|run
parameter_list|()
block|{
comment|/* ... other code to initialize thread... */
comment|// Begin event handling
name|exec
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_comment
comment|//! [1]
end_comment
end_unit
