begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** BSD License Usage ** Alternatively, you may use this file under the terms of the BSD license ** as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//! [0]
end_comment
begin_macro
name|Q_PROPERTY
argument_list|(
argument|type name            (READ getFunction [WRITE setFunction] |             MEMBER memberName [(READ getFunction | WRITE setFunction)])            [RESET resetFunction]            [NOTIFY notifySignal]            [REVISION int]            [DESIGNABLE bool]            [SCRIPTABLE bool]            [STORED bool]            [USER bool]            [CONSTANT]            [FINAL]
argument_list|)
end_macro
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_macro
name|Q_PROPERTY
argument_list|(
argument|bool focus READ hasFocus
argument_list|)
end_macro
begin_macro
name|Q_PROPERTY
argument_list|(
argument|bool enabled READ isEnabled WRITE setEnabled
argument_list|)
end_macro
begin_macro
name|Q_PROPERTY
argument_list|(
argument|QCursor cursor READ cursor WRITE setCursor RESET unsetCursor
argument_list|)
end_macro
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_macro
name|Q_PROPERTY
argument_list|(
argument|QDate date READ getDate WRITE setDate
argument_list|)
end_macro
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_decl_stmt
DECL|variable|button
name|QPushButton
modifier|*
name|button
init|=
operator|new
name|QPushButton
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|object
name|QObject
modifier|*
name|object
init|=
name|button
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|button
operator|->
name|setDown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|object
operator|->
name|setProperty
argument_list|(
literal|"down"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [3]
end_comment
begin_comment
comment|//! [4]
end_comment
begin_decl_stmt
DECL|variable|object
name|QObject
modifier|*
name|object
init|=
operator|...
specifier|const
name|QMetaObject
operator|*
name|metaobject
operator|=
name|object
operator|->
name|metaObject
argument_list|()
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|count
name|int
name|count
init|=
name|metaobject
operator|->
name|propertyCount
argument_list|()
decl_stmt|;
end_decl_stmt
begin_for
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QMetaProperty
name|metaproperty
init|=
name|metaobject
operator|->
name|property
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
init|=
name|metaproperty
operator|.
name|name
argument_list|()
decl_stmt|;
name|QVariant
name|value
init|=
name|object
operator|->
name|property
argument_list|(
name|name
argument_list|)
decl_stmt|;
operator|...
block|}
end_for
begin_comment
comment|//! [4]
end_comment
begin_comment
comment|//! [5]
end_comment
begin_class
DECL|class|MyClass
class|class
name|MyClass
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
parameter_list|(
name|Priority
name|priority
name|READ
name|priority
name|WRITE
name|setPriority
name|NOTIFY
name|priorityChanged
parameter_list|)
specifier|public
private|:
name|MyClass
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
constructor_decl|;
name|~
name|MyClass
parameter_list|()
destructor_decl|;
DECL|enum|Priority
DECL|enumerator|High
DECL|enumerator|Low
DECL|enumerator|VeryHigh
DECL|enumerator|VeryLow
enum|enum
name|Priority
block|{
name|High
block|,
name|Low
block|,
name|VeryHigh
block|,
name|VeryLow
block|}
enum|;
name|Q_ENUM
argument_list|(
argument|Priority
argument_list|)
DECL|function|setPriority
name|void
name|setPriority
parameter_list|(
name|Priority
name|priority
parameter_list|)
block|{
name|m_priority
operator|=
name|priority
expr_stmt|;
emit|emit
name|priorityChanged
argument_list|(
name|priority
argument_list|)
emit|;
block|}
DECL|function|priority
name|Priority
name|priority
parameter_list|()
specifier|const
block|{
return|return
name|m_priority
return|;
block|}
signals|signals:
name|void
name|priorityChanged
parameter_list|(
name|Priority
parameter_list|)
function_decl|;
private|private:
DECL|member|m_priority
name|Priority
name|m_priority
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|//! [5]
end_comment
begin_comment
comment|//! [6]
end_comment
begin_decl_stmt
DECL|variable|myinstance
name|MyClass
modifier|*
name|myinstance
init|=
operator|new
name|MyClass
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|object
name|QObject
modifier|*
name|object
init|=
name|myinstance
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|myinstance
operator|->
name|setPriority
argument_list|(
name|MyClass
operator|::
name|VeryHigh
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|object
operator|->
name|setProperty
argument_list|(
literal|"priority"
argument_list|,
literal|"VeryHigh"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [6]
end_comment
begin_comment
comment|//! [7]
end_comment
begin_macro
name|Q_CLASSINFO
argument_list|(
literal|"Version"
argument_list|,
literal|"3.0.0"
argument_list|)
end_macro
begin_comment
comment|//! [7]
end_comment
begin_comment
comment|//! [8]
end_comment
begin_macro
name|Q_PROPERTY
argument_list|(
argument|QColor color MEMBER m_color NOTIFY colorChanged
argument_list|)
end_macro
begin_macro
name|Q_PROPERTY
argument_list|(
argument|qreal spacing MEMBER m_spacing NOTIFY spacingChanged
argument_list|)
end_macro
begin_macro
name|Q_PROPERTY
argument_list|(
argument|QString text MEMBER m_text NOTIFY textChanged
argument_list|)
end_macro
begin_expr_stmt
operator|...
name|signals
operator|:
name|void
name|colorChanged
argument_list|()
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|spacingChanged
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|textChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|newText
parameter_list|)
function_decl|;
end_function_decl
begin_private
private|private:
DECL|variable|m_color
name|QColor
name|m_color
decl_stmt|;
DECL|variable|m_spacing
name|qreal
name|m_spacing
decl_stmt|;
DECL|variable|m_text
name|QString
name|m_text
decl_stmt|;
end_private
begin_comment
comment|//! [8]
end_comment
end_unit
