begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//! [0]
end_comment
begin_function_decl
name|QLocale
name|egyptian
parameter_list|(
name|QLocale
operator|::
name|Arabic
parameter_list|,
name|QLocale
operator|::
name|Egypt
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|s1
name|QString
name|s1
init|=
name|egyptian
operator|.
name|toString
argument_list|(
literal|1.571429E
operator|+
literal|07
argument_list|,
literal|'e'
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|s2
name|QString
name|s2
init|=
name|egyptian
operator|.
name|toString
argument_list|(
literal|10
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|d
name|double
name|d
init|=
name|egyptian
operator|.
name|toDouble
argument_list|(
name|s1
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|i
name|int
name|i
init|=
name|egyptian
operator|.
name|toInt
argument_list|(
name|s2
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_expr_stmt
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QLocale
argument_list|(
name|QLocale
operator|::
name|Hebrew
argument_list|,
name|QLocale
operator|::
name|Israel
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|hebrew
name|QLocale
name|hebrew
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|hebrew
comment|// Constructs a default QLocale
end_comment
begin_decl_stmt
DECL|variable|s1
name|QString
name|s1
init|=
name|hebrew
operator|.
name|toString
argument_list|(
literal|15714.3
argument_list|,
literal|'e'
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ok
name|bool
name|ok
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|d
name|double
name|d
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|d
operator|=
name|QString
argument_list|(
literal|"1234,56"
argument_list|)
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// ok == false
end_comment
begin_expr_stmt
name|d
operator|=
name|QString
argument_list|(
literal|"1234.56"
argument_list|)
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// ok == true, d == 1234.56
end_comment
begin_expr_stmt
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QLocale
operator|::
name|German
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|d
operator|=
name|QString
argument_list|(
literal|"1234,56"
argument_list|)
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// ok == true, d == 1234.56
end_comment
begin_expr_stmt
name|d
operator|=
name|QString
argument_list|(
literal|"1234.56"
argument_list|)
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// ok == true, d == 1234.56
end_comment
begin_expr_stmt
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QLocale
argument_list|(
name|QLocale
operator|::
name|English
argument_list|,
name|QLocale
operator|::
name|UnitedStates
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|str
operator|=
name|QString
argument_list|(
literal|"%1 %L2 %L3"
argument_list|)
operator|.
name|arg
argument_list|(
literal|12345
argument_list|)
operator|.
name|arg
argument_list|(
literal|12345
argument_list|)
operator|.
name|arg
argument_list|(
literal|12345
argument_list|,
literal|0
argument_list|,
literal|16
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// str == "12345 12,345 3039"
end_comment
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_decl_stmt
name|QLocale
name|korean
argument_list|(
literal|"ko"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QLocale
name|swiss
argument_list|(
literal|"de_CH"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_decl_stmt
DECL|variable|ok
name|bool
name|ok
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|d
name|double
name|d
decl_stmt|;
end_decl_stmt
begin_function_decl
name|QLocale
name|c
parameter_list|(
name|QLocale
operator|::
name|C
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|d
operator|=
name|c
operator|.
name|toDouble
argument_list|(
literal|"1234.56"
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// ok == true, d == 1234.56
end_comment
begin_expr_stmt
name|d
operator|=
name|c
operator|.
name|toDouble
argument_list|(
literal|"1,234.56"
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// ok == true, d == 1234.56
end_comment
begin_expr_stmt
name|d
operator|=
name|c
operator|.
name|toDouble
argument_list|(
literal|"1234,56"
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// ok == false
end_comment
begin_function_decl
name|QLocale
name|german
parameter_list|(
name|QLocale
operator|::
name|German
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|d
operator|=
name|german
operator|.
name|toDouble
argument_list|(
literal|"1234,56"
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// ok == true, d == 1234.56
end_comment
begin_expr_stmt
name|d
operator|=
name|german
operator|.
name|toDouble
argument_list|(
literal|"1.234,56"
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// ok == true, d == 1234.56
end_comment
begin_expr_stmt
name|d
operator|=
name|german
operator|.
name|toDouble
argument_list|(
literal|"1234.56"
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// ok == false
end_comment
begin_expr_stmt
name|d
operator|=
name|german
operator|.
name|toDouble
argument_list|(
literal|"1.234"
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// ok == true, d == 1234.0
end_comment
begin_comment
comment|//! [3]
end_comment
end_unit
