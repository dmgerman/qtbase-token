begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QFACTORYLOADER_P_H
end_ifndef
begin_define
DECL|macro|QFACTORYLOADER_P_H
define|#
directive|define
name|QFACTORYLOADER_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtCore/qglobal.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
end_ifndef
begin_include
include|#
directive|include
file|"QtCore/qobject.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qstringlist.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qjsonobject.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qmap.h"
end_include
begin_include
include|#
directive|include
file|"private/qlibrary_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QFactoryLoaderPrivate
name|class
name|QFactoryLoaderPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QFactoryLoader
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QFactoryLoader
argument_list|)
name|public
operator|:
name|explicit
name|QFactoryLoader
argument_list|(
specifier|const
name|char
operator|*
name|iid
argument_list|,
specifier|const
name|QString
operator|&
name|suffix
operator|=
name|QString
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
block|;
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
operator|~
name|QFactoryLoader
argument_list|()
block|;
name|void
name|update
argument_list|()
block|;
specifier|static
name|void
name|refreshAll
argument_list|()
block|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|QLibraryPrivate
operator|*
name|library
argument_list|(
argument|const QString&key
argument_list|)
specifier|const
block|;
endif|#
directive|endif
comment|// Q_OS_UNIX&& !Q_OS_MAC
endif|#
directive|endif
comment|// !QT_NO_LIBRARY
name|QMultiMap
operator|<
name|int
block|,
name|QString
operator|>
name|keyMap
argument_list|()
specifier|const
block|;
name|int
name|indexOf
argument_list|(
argument|const QString&needle
argument_list|)
specifier|const
block|;
name|QList
operator|<
name|QJsonObject
operator|>
name|metaData
argument_list|()
specifier|const
block|;
name|QObject
operator|*
name|instance
argument_list|(
argument|int index
argument_list|)
specifier|const
block|; }
decl_stmt|;
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_VARIADIC_TEMPLATES
end_ifdef
begin_expr_stmt
DECL|variable|PluginInterface
DECL|variable|FactoryInterface
name|template
operator|<
name|class
name|PluginInterface
operator|,
name|class
name|FactoryInterface
operator|,
name|typename
operator|...
name|Args
operator|>
DECL|function|qLoadPlugin
name|PluginInterface
operator|*
name|qLoadPlugin
argument_list|(
argument|const QFactoryLoader *loader
argument_list|,
argument|const QString&key
argument_list|,
argument|Args&&...args
argument_list|)
block|{
specifier|const
name|int
name|index
operator|=
name|loader
operator|->
name|indexOf
argument_list|(
name|key
argument_list|)
block|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|QObject
modifier|*
name|factoryObject
init|=
name|loader
operator|->
name|instance
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|FactoryInterface
modifier|*
name|factory
init|=
name|qobject_cast
operator|<
name|FactoryInterface
operator|*
operator|>
operator|(
name|factoryObject
operator|)
condition|)
if|if
condition|(
name|PluginInterface
modifier|*
name|result
init|=
name|factory
operator|->
name|create
argument_list|(
name|key
argument_list|,
name|std
operator|::
name|forward
operator|<
name|Args
operator|>
operator|(
name|args
operator|)
operator|...
argument_list|)
condition|)
return|return
name|result
return|;
block|}
end_expr_stmt
begin_return
return|return
name|nullptr
return|;
end_return
begin_else
unit|}
else|#
directive|else
end_else
begin_expr_stmt
unit|template
DECL|variable|PluginInterface
operator|<
name|class
name|PluginInterface
operator|,
name|class
name|FactoryInterface
operator|>
DECL|function|qLoadPlugin
name|PluginInterface
operator|*
name|qLoadPlugin
argument_list|(
argument|const QFactoryLoader *loader
argument_list|,
argument|const QString&key
argument_list|)
block|{
specifier|const
name|int
name|index
operator|=
name|loader
operator|->
name|indexOf
argument_list|(
name|key
argument_list|)
block|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|QObject
modifier|*
name|factoryObject
init|=
name|loader
operator|->
name|instance
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|FactoryInterface
modifier|*
name|factory
init|=
name|qobject_cast
operator|<
name|FactoryInterface
operator|*
operator|>
operator|(
name|factoryObject
operator|)
condition|)
if|if
condition|(
name|PluginInterface
modifier|*
name|result
init|=
name|factory
operator|->
name|create
argument_list|(
name|key
argument_list|)
condition|)
return|return
name|result
return|;
block|}
end_expr_stmt
begin_return
return|return
literal|0
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|PluginInterface
DECL|variable|FactoryInterface
operator|<
name|class
name|PluginInterface
operator|,
name|class
name|FactoryInterface
operator|,
name|class
name|P1
operator|>
DECL|function|qLoadPlugin
name|PluginInterface
operator|*
name|qLoadPlugin
argument_list|(
argument|const QFactoryLoader *loader
argument_list|,
argument|const QString&key
argument_list|,
argument|P1&&p1
argument_list|)
block|{
specifier|const
name|int
name|index
operator|=
name|loader
operator|->
name|indexOf
argument_list|(
name|key
argument_list|)
block|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|QObject
modifier|*
name|factoryObject
init|=
name|loader
operator|->
name|instance
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|FactoryInterface
modifier|*
name|factory
init|=
name|qobject_cast
operator|<
name|FactoryInterface
operator|*
operator|>
operator|(
name|factoryObject
operator|)
condition|)
if|if
condition|(
name|PluginInterface
modifier|*
name|result
init|=
name|factory
operator|->
name|create
argument_list|(
name|key
argument_list|,
name|std
operator|::
name|forward
operator|<
name|P1
operator|>
operator|(
name|p1
operator|)
argument_list|)
condition|)
return|return
name|result
return|;
block|}
end_expr_stmt
begin_return
return|return
literal|0
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|PluginInterface
DECL|variable|FactoryInterface
DECL|variable|P1
operator|<
name|class
name|PluginInterface
operator|,
name|class
name|FactoryInterface
operator|,
name|class
name|P1
operator|,
name|class
name|P2
operator|>
DECL|function|qLoadPlugin
name|PluginInterface
operator|*
name|qLoadPlugin
argument_list|(
argument|const QFactoryLoader *loader
argument_list|,
argument|const QString&key
argument_list|,
argument|P1&&p1
argument_list|,
argument|P2&&p2
argument_list|)
block|{
specifier|const
name|int
name|index
operator|=
name|loader
operator|->
name|indexOf
argument_list|(
name|key
argument_list|)
block|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|QObject
modifier|*
name|factoryObject
init|=
name|loader
operator|->
name|instance
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|FactoryInterface
modifier|*
name|factory
init|=
name|qobject_cast
operator|<
name|FactoryInterface
operator|*
operator|>
operator|(
name|factoryObject
operator|)
condition|)
if|if
condition|(
name|PluginInterface
modifier|*
name|result
init|=
name|factory
operator|->
name|create
argument_list|(
name|key
argument_list|,
name|std
operator|::
name|forward
operator|<
name|P1
operator|>
operator|(
name|p1
operator|)
argument_list|,
name|std
operator|::
name|forward
operator|<
name|P2
operator|>
operator|(
name|p2
operator|)
argument_list|)
condition|)
return|return
name|result
return|;
block|}
end_expr_stmt
begin_return
return|return
literal|0
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|PluginInterface
DECL|variable|FactoryInterface
DECL|variable|P1
DECL|variable|P2
operator|<
name|class
name|PluginInterface
operator|,
name|class
name|FactoryInterface
operator|,
name|class
name|P1
operator|,
name|class
name|P2
operator|,
name|class
name|P3
operator|>
DECL|function|qLoadPlugin
name|PluginInterface
operator|*
name|qLoadPlugin
argument_list|(
argument|const QFactoryLoader *loader
argument_list|,
argument|const QString&key
argument_list|,
argument|P1&&p1
argument_list|,
argument|P2&&p2
argument_list|,
argument|P3&&p3
argument_list|)
block|{
specifier|const
name|int
name|index
operator|=
name|loader
operator|->
name|indexOf
argument_list|(
name|key
argument_list|)
block|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|QObject
modifier|*
name|factoryObject
init|=
name|loader
operator|->
name|instance
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|FactoryInterface
modifier|*
name|factory
init|=
name|qobject_cast
operator|<
name|FactoryInterface
operator|*
operator|>
operator|(
name|factoryObject
operator|)
condition|)
if|if
condition|(
name|PluginInterface
modifier|*
name|result
init|=
name|factory
operator|->
name|create
argument_list|(
name|key
argument_list|,
name|std
operator|::
name|forward
operator|<
name|P1
operator|>
operator|(
name|p1
operator|)
argument_list|,
name|std
operator|::
name|forward
operator|<
name|P2
operator|>
operator|(
name|p2
operator|)
argument_list|,
name|std
operator|::
name|forward
operator|<
name|P3
operator|>
operator|(
name|p3
operator|)
argument_list|)
condition|)
return|return
name|result
return|;
block|}
end_expr_stmt
begin_return
return|return
literal|0
return|;
end_return
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|template
DECL|variable|PluginInterface
DECL|variable|FactoryInterface
operator|<
name|class
name|PluginInterface
operator|,
name|class
name|FactoryInterface
operator|,
name|typename
name|Arg
operator|>
DECL|function|qLoadPlugin1
name|Q_DECL_DEPRECATED
name|PluginInterface
operator|*
name|qLoadPlugin1
argument_list|(
argument|const QFactoryLoader *loader
argument_list|,
argument|const QString&key
argument_list|,
argument|Arg&&arg
argument_list|)
block|{
return|return
name|qLoadPlugin
argument_list|(
name|loader
argument_list|,
name|key
argument_list|,
name|std
operator|::
name|forward
operator|<
name|Arg
operator|>
operator|(
name|arg
operator|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QOBJECT
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QFACTORYLOADER_P_H
end_comment
end_unit
