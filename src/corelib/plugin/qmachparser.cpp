begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Intel Corporation ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qmachparser_p.h"
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OF_MACH_O
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
end_if
begin_include
include|#
directive|include
file|<qendian.h>
end_include
begin_include
include|#
directive|include
file|"qlibrary_p.h"
end_include
begin_include
include|#
directive|include
file|<mach-o/loader.h>
end_include
begin_include
include|#
directive|include
file|<mach-o/fat.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|Q_PROCESSOR_X86_64
argument_list|)
DECL|macro|MACHO64
define|#
directive|define
name|MACHO64
DECL|variable|my_cputype
specifier|static
specifier|const
name|cpu_type_t
name|my_cputype
init|=
name|CPU_TYPE_X86_64
decl_stmt|;
end_decl_stmt
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_PROCESSOR_X86_32
argument_list|)
end_elif
begin_decl_stmt
specifier|static
specifier|const
name|cpu_type_t
name|my_cputype
init|=
name|CPU_TYPE_X86
decl_stmt|;
end_decl_stmt
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_PROCESSOR_POWER_64
argument_list|)
end_elif
begin_define
define|#
directive|define
name|MACHO64
end_define
begin_decl_stmt
specifier|static
specifier|const
name|cpu_type_t
name|my_cputype
init|=
name|CPU_TYPE_POWERPC64
decl_stmt|;
end_decl_stmt
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_PROCESSOR_POWER_32
argument_list|)
end_elif
begin_decl_stmt
specifier|static
specifier|const
name|cpu_type_t
name|my_cputype
init|=
name|CPU_TYPE_POWERPC
decl_stmt|;
end_decl_stmt
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_PROCESSOR_ARM
argument_list|)
end_elif
begin_decl_stmt
specifier|static
specifier|const
name|cpu_type_t
name|my_cputype
init|=
name|CPU_TYPE_ARM
decl_stmt|;
end_decl_stmt
begin_else
else|#
directive|else
end_else
begin_error
error|#
directive|error
literal|"Unknown CPU type"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|MACHO64
end_ifdef
begin_undef
DECL|macro|MACHO64
undef|#
directive|undef
name|MACHO64
end_undef
begin_typedef
DECL|typedef|my_mach_header
typedef|typedef
name|mach_header_64
name|my_mach_header
typedef|;
end_typedef
begin_typedef
DECL|typedef|my_segment_command
typedef|typedef
name|segment_command_64
name|my_segment_command
typedef|;
end_typedef
begin_typedef
DECL|typedef|my_section
typedef|typedef
name|section_64
name|my_section
typedef|;
end_typedef
begin_decl_stmt
DECL|variable|my_magic
specifier|static
specifier|const
name|uint32_t
name|my_magic
init|=
name|MH_MAGIC_64
decl_stmt|;
end_decl_stmt
begin_else
else|#
directive|else
end_else
begin_typedef
DECL|typedef|my_mach_header
typedef|typedef
name|mach_header
name|my_mach_header
typedef|;
end_typedef
begin_typedef
DECL|typedef|my_segment_command
typedef|typedef
name|segment_command
name|my_segment_command
typedef|;
end_typedef
begin_typedef
DECL|typedef|my_section
typedef|typedef
name|section
name|my_section
typedef|;
end_typedef
begin_decl_stmt
DECL|variable|my_magic
specifier|static
specifier|const
name|uint32_t
name|my_magic
init|=
name|MH_MAGIC
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|ns
specifier|static
name|int
name|ns
parameter_list|(
specifier|const
name|QString
modifier|&
name|reason
parameter_list|,
specifier|const
name|QString
modifier|&
name|library
parameter_list|,
name|QString
modifier|*
name|errorString
parameter_list|)
block|{
if|if
condition|(
name|errorString
condition|)
operator|*
name|errorString
operator|=
name|QLibrary
operator|::
name|tr
argument_list|(
literal|"'%1' is not a valid Mach-O binary (%2)"
argument_list|)
operator|.
name|arg
argument_list|(
name|library
argument_list|,
name|reason
operator|.
name|isEmpty
argument_list|()
condition|?
name|QLibrary
operator|::
name|tr
argument_list|(
literal|"file is corrupt"
argument_list|)
else|:
name|reason
argument_list|)
expr_stmt|;
return|return
name|QMachOParser
operator|::
name|NotSuitable
return|;
block|}
end_function
begin_function
DECL|function|parse
name|int
name|QMachOParser
operator|::
name|parse
parameter_list|(
specifier|const
name|char
modifier|*
name|m_s
parameter_list|,
name|ulong
name|fdlen
parameter_list|,
specifier|const
name|QString
modifier|&
name|library
parameter_list|,
name|QString
modifier|*
name|errorString
parameter_list|,
name|long
modifier|*
name|pos
parameter_list|,
name|ulong
modifier|*
name|sectionlen
parameter_list|)
block|{
comment|// The minimum size of a Mach-O binary we're interested in.
comment|// It must have a full Mach header, at least one segment and at least one
comment|// section. It's probably useless with just the "qtmetadata" section, but
comment|// it's valid nonetheless.
comment|// A fat binary must have this plus the fat header, of course.
specifier|static
specifier|const
name|size_t
name|MinFileSize
init|=
sizeof|sizeof
argument_list|(
name|my_mach_header
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|my_segment_command
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|my_section
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|size_t
name|MinFatHeaderSize
init|=
sizeof|sizeof
argument_list|(
name|fat_header
argument_list|)
operator|+
literal|2
operator|*
sizeof|sizeof
argument_list|(
name|fat_arch
argument_list|)
decl_stmt|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|fdlen
operator|<
name|MinFileSize
argument_list|)
condition|)
return|return
name|ns
argument_list|(
name|QLibrary
operator|::
name|tr
argument_list|(
literal|"file too small"
argument_list|)
argument_list|,
name|library
argument_list|,
name|errorString
argument_list|)
return|;
comment|// find out if this is a fat Mach-O binary first
specifier|const
name|my_mach_header
modifier|*
name|header
init|=
literal|0
decl_stmt|;
specifier|const
name|fat_header
modifier|*
name|fat
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|fat_header
operator|*
argument_list|>
argument_list|(
name|m_s
argument_list|)
decl_stmt|;
if|if
condition|(
name|fat
operator|->
name|magic
operator|==
name|qToBigEndian
argument_list|(
name|FAT_MAGIC
argument_list|)
condition|)
block|{
comment|// find our architecture in the binary
specifier|const
name|fat_arch
modifier|*
name|arch
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|fat_arch
operator|*
argument_list|>
argument_list|(
name|fat
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|fdlen
operator|<
name|MinFatHeaderSize
argument_list|)
condition|)
block|{
return|return
name|ns
argument_list|(
name|QLibrary
operator|::
name|tr
argument_list|(
literal|"file too small"
argument_list|)
argument_list|,
name|library
argument_list|,
name|errorString
argument_list|)
return|;
block|}
name|int
name|count
init|=
name|qFromBigEndian
argument_list|(
name|fat
operator|->
name|nfat_arch
argument_list|)
decl_stmt|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|fdlen
operator|<
sizeof|sizeof
argument_list|(
operator|*
name|fat
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
operator|*
name|arch
argument_list|)
operator|*
name|count
argument_list|)
condition|)
return|return
name|ns
argument_list|(
name|QString
argument_list|()
argument_list|,
name|library
argument_list|,
name|errorString
argument_list|)
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|arch
index|[
name|i
index|]
operator|.
name|cputype
operator|==
name|qToBigEndian
argument_list|(
name|my_cputype
argument_list|)
condition|)
block|{
comment|// ### should we check the CPU subtype? Maybe on ARM?
name|uint32_t
name|size
init|=
name|qFromBigEndian
argument_list|(
name|arch
index|[
name|i
index|]
operator|.
name|size
argument_list|)
decl_stmt|;
name|uint32_t
name|offset
init|=
name|qFromBigEndian
argument_list|(
name|arch
index|[
name|i
index|]
operator|.
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|size
operator|>
name|fdlen
argument_list|)
operator|||
name|Q_UNLIKELY
argument_list|(
name|offset
operator|>
name|fdlen
argument_list|)
operator|||
name|Q_UNLIKELY
argument_list|(
name|size
operator|+
name|offset
operator|>
name|fdlen
argument_list|)
operator|||
name|Q_UNLIKELY
argument_list|(
name|size
operator|<
name|MinFileSize
argument_list|)
condition|)
return|return
name|ns
argument_list|(
name|QString
argument_list|()
argument_list|,
name|library
argument_list|,
name|errorString
argument_list|)
return|;
name|header
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|my_mach_header
operator|*
argument_list|>
argument_list|(
name|m_s
operator|+
name|offset
argument_list|)
expr_stmt|;
name|fdlen
operator|=
name|size
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|header
condition|)
return|return
name|ns
argument_list|(
name|QLibrary
operator|::
name|tr
argument_list|(
literal|"no suitable architecture in fat binary"
argument_list|)
argument_list|,
name|library
argument_list|,
name|errorString
argument_list|)
return|;
comment|// check the magic again
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|header
operator|->
name|magic
operator|!=
name|my_magic
argument_list|)
condition|)
return|return
name|ns
argument_list|(
name|QString
argument_list|()
argument_list|,
name|library
argument_list|,
name|errorString
argument_list|)
return|;
block|}
else|else
block|{
name|header
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|my_mach_header
operator|*
argument_list|>
argument_list|(
name|m_s
argument_list|)
expr_stmt|;
name|fat
operator|=
literal|0
expr_stmt|;
comment|// check magic
if|if
condition|(
name|header
operator|->
name|magic
operator|!=
name|my_magic
condition|)
return|return
name|ns
argument_list|(
name|QLibrary
operator|::
name|tr
argument_list|(
literal|"invalid magic %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|qFromBigEndian
argument_list|(
name|header
operator|->
name|magic
argument_list|)
argument_list|,
literal|8
argument_list|,
literal|16
argument_list|,
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|)
argument_list|,
name|library
argument_list|,
name|errorString
argument_list|)
return|;
block|}
comment|// from this point on, fdlen is specific to this architecture
comment|// from this point on, everything is in host byte order
operator|*
name|pos
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|header
argument_list|)
operator|-
name|m_s
expr_stmt|;
comment|// (re-)check the CPU type
comment|// ### should we check the CPU subtype? Maybe on ARM?
if|if
condition|(
name|header
operator|->
name|cputype
operator|!=
name|my_cputype
condition|)
block|{
if|if
condition|(
name|fat
condition|)
return|return
name|ns
argument_list|(
name|QString
argument_list|()
argument_list|,
name|library
argument_list|,
name|errorString
argument_list|)
return|;
return|return
name|ns
argument_list|(
name|QLibrary
operator|::
name|tr
argument_list|(
literal|"wrong architecture"
argument_list|)
argument_list|,
name|library
argument_list|,
name|errorString
argument_list|)
return|;
block|}
comment|// check the file type
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|header
operator|->
name|filetype
operator|!=
name|MH_BUNDLE
operator|&&
name|header
operator|->
name|filetype
operator|!=
name|MH_DYLIB
argument_list|)
condition|)
return|return
name|ns
argument_list|(
name|QLibrary
operator|::
name|tr
argument_list|(
literal|"not a dynamic library"
argument_list|)
argument_list|,
name|library
argument_list|,
name|errorString
argument_list|)
return|;
comment|// find the __TEXT segment, "qtmetadata" section
specifier|const
name|my_segment_command
modifier|*
name|seg
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|my_segment_command
operator|*
argument_list|>
argument_list|(
name|header
operator|+
literal|1
argument_list|)
decl_stmt|;
name|ulong
name|minsize
init|=
sizeof|sizeof
argument_list|(
operator|*
name|header
argument_list|)
decl_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
name|header
operator|->
name|ncmds
condition|;
operator|++
name|i
operator|,
name|seg
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|my_segment_command
operator|*
argument_list|>
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|seg
argument_list|)
operator|+
name|seg
operator|->
name|cmdsize
argument_list|)
control|)
block|{
comment|// We're sure that the file size includes at least one load command
comment|// but we have to check anyway if we're past the first
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|fdlen
operator|<
name|minsize
operator|+
sizeof|sizeof
argument_list|(
name|load_command
argument_list|)
argument_list|)
condition|)
return|return
name|ns
argument_list|(
name|QString
argument_list|()
argument_list|,
name|library
argument_list|,
name|errorString
argument_list|)
return|;
comment|// cmdsize can't be trusted until validated
comment|// so check it against fdlen anyway
comment|// (these are unsigned operations, with overflow behavior specified in the standard)
name|minsize
operator|+=
name|seg
operator|->
name|cmdsize
expr_stmt|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|fdlen
operator|<
name|minsize
argument_list|)
operator|||
name|Q_UNLIKELY
argument_list|(
name|fdlen
operator|<
name|seg
operator|->
name|cmdsize
argument_list|)
condition|)
return|return
name|ns
argument_list|(
name|QString
argument_list|()
argument_list|,
name|library
argument_list|,
name|errorString
argument_list|)
return|;
specifier|const
name|uint32_t
name|MyLoadCommand
init|=
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
operator|>
literal|4
condition|?
name|LC_SEGMENT_64
else|:
name|LC_SEGMENT
decl_stmt|;
if|if
condition|(
name|seg
operator|->
name|cmd
operator|!=
name|MyLoadCommand
condition|)
continue|continue;
comment|// is this the __TEXT segment?
if|if
condition|(
name|strcmp
argument_list|(
name|seg
operator|->
name|segname
argument_list|,
literal|"__TEXT"
argument_list|)
operator|==
literal|0
condition|)
block|{
specifier|const
name|my_section
modifier|*
name|sect
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|my_section
operator|*
argument_list|>
argument_list|(
name|seg
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|uint
name|j
init|=
literal|0
init|;
name|j
operator|<
name|seg
operator|->
name|nsects
condition|;
operator|++
name|j
control|)
block|{
comment|// is this the "qtmetadata" section?
if|if
condition|(
name|strcmp
argument_list|(
name|sect
index|[
name|j
index|]
operator|.
name|sectname
argument_list|,
literal|"qtmetadata"
argument_list|)
operator|!=
literal|0
condition|)
continue|continue;
comment|// found it!
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|fdlen
operator|<
name|sect
index|[
name|j
index|]
operator|.
name|offset
argument_list|)
operator|||
name|Q_UNLIKELY
argument_list|(
name|fdlen
operator|<
name|sect
index|[
name|j
index|]
operator|.
name|size
argument_list|)
operator|||
name|Q_UNLIKELY
argument_list|(
name|fdlen
operator|<
name|sect
index|[
name|j
index|]
operator|.
name|offset
operator|+
name|sect
index|[
name|j
index|]
operator|.
name|size
argument_list|)
condition|)
return|return
name|ns
argument_list|(
name|QString
argument_list|()
argument_list|,
name|library
argument_list|,
name|errorString
argument_list|)
return|;
operator|*
name|pos
operator|+=
name|sect
index|[
name|j
index|]
operator|.
name|offset
expr_stmt|;
operator|*
name|sectionlen
operator|=
name|sect
index|[
name|j
index|]
operator|.
name|size
expr_stmt|;
return|return
name|QtMetaDataSection
return|;
block|}
block|}
comment|// other type of segment
name|seg
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|my_segment_command
operator|*
argument_list|>
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|seg
argument_list|)
operator|+
name|seg
operator|->
name|cmdsize
argument_list|)
expr_stmt|;
block|}
comment|//    // No Qt section was found, but at least we know that where the proper architecture's boundaries are
comment|//    return NoQtSection;
if|if
condition|(
name|errorString
condition|)
operator|*
name|errorString
operator|=
name|QLibrary
operator|::
name|tr
argument_list|(
literal|"'%1' is not a Qt plugin"
argument_list|)
operator|.
name|arg
argument_list|(
name|library
argument_list|)
expr_stmt|;
return|return
name|NotSuitable
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
