begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QPLUGIN_H
end_ifndef
begin_define
DECL|macro|QPLUGIN_H
define|#
directive|define
name|QPLUGIN_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qobject.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpointer.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Core
argument_list|)
ifndef|#
directive|ifndef
name|Q_EXTERN_C
ifdef|#
directive|ifdef
name|__cplusplus
DECL|macro|Q_EXTERN_C
define|#
directive|define
name|Q_EXTERN_C
value|extern "C"
else|#
directive|else
define|#
directive|define
name|Q_EXTERN_C
value|extern
endif|#
directive|endif
endif|#
directive|endif
decl|typedef
DECL|typedef|QtPluginInstanceFunction
name|QObject
modifier|*
argument_list|(
operator|*
name|QtPluginInstanceFunction
argument_list|)
argument_list|()
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|Q_CORE_EXPORT
name|qRegisterStaticPluginInstanceFunction
parameter_list|(
name|QtPluginInstanceFunction
name|function
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|Q_IMPORT_PLUGIN
define|#
directive|define
name|Q_IMPORT_PLUGIN
parameter_list|(
name|PLUGIN
parameter_list|)
define|\
value|extern QT_PREPEND_NAMESPACE(QObject) *qt_plugin_instance_##PLUGIN(); \         class Static##PLUGIN##PluginInstance{ \         public: \                 Static##PLUGIN##PluginInstance() { \                 qRegisterStaticPluginInstanceFunction(qt_plugin_instance_##PLUGIN); \                 } \         }; \        static Static##PLUGIN##PluginInstance static##PLUGIN##Instance;
end_define
begin_define
DECL|macro|Q_PLUGIN_INSTANCE
define|#
directive|define
name|Q_PLUGIN_INSTANCE
parameter_list|(
name|IMPLEMENTATION
parameter_list|)
define|\
value|{ \             static QT_PREPEND_NAMESPACE(QPointer)<QT_PREPEND_NAMESPACE(QObject)> _instance; \             if (!_instance)      \                 _instance = new IMPLEMENTATION; \             return _instance; \         }
end_define
begin_define
DECL|macro|Q_EXPORT_PLUGIN
define|#
directive|define
name|Q_EXPORT_PLUGIN
parameter_list|(
name|PLUGIN
parameter_list|)
define|\
value|Q_EXPORT_PLUGIN2(PLUGIN, PLUGIN)
end_define
begin_define
DECL|macro|Q_EXPORT_STATIC_PLUGIN
define|#
directive|define
name|Q_EXPORT_STATIC_PLUGIN
parameter_list|(
name|PLUGIN
parameter_list|)
define|\
value|Q_EXPORT_STATIC_PLUGIN2(PLUGIN, PLUGIN)
end_define
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_STATICPLUGIN
argument_list|)
end_if
begin_define
DECL|macro|Q_EXPORT_PLUGIN2
define|#
directive|define
name|Q_EXPORT_PLUGIN2
parameter_list|(
name|PLUGIN
parameter_list|,
name|PLUGINCLASS
parameter_list|)
define|\
value|QT_PREPEND_NAMESPACE(QObject) \                 *qt_plugin_instance_##PLUGIN() \             Q_PLUGIN_INSTANCE(PLUGINCLASS)
end_define
begin_define
DECL|macro|Q_EXPORT_STATIC_PLUGIN2
define|#
directive|define
name|Q_EXPORT_STATIC_PLUGIN2
parameter_list|(
name|PLUGIN
parameter_list|,
name|PLUGINCLASS
parameter_list|)
define|\
value|Q_EXPORT_PLUGIN2(PLUGIN, PLUGINCLASS)
end_define
begin_else
else|#
directive|else
end_else
begin_comment
comment|// NOTE: if you change pattern, you MUST change the pattern in
end_comment
begin_comment
comment|// qlibrary.cpp as well.  changing the pattern will break all
end_comment
begin_comment
comment|// backwards compatibility as well (no old plugins will be loaded).
end_comment
begin_comment
comment|// QT5: should probably remove the entire pattern thing and do the section
end_comment
begin_comment
comment|//      trick for all platforms. for now, keep it and fallback to scan for it.
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QPLUGIN_DEBUG_STR
end_ifdef
begin_undef
DECL|macro|QPLUGIN_DEBUG_STR
undef|#
directive|undef
name|QPLUGIN_DEBUG_STR
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_DEBUG
end_ifdef
begin_define
DECL|macro|QPLUGIN_DEBUG_STR
define|#
directive|define
name|QPLUGIN_DEBUG_STR
value|"false"
end_define
begin_define
DECL|macro|QPLUGIN_SECTION_DEBUG_STR
define|#
directive|define
name|QPLUGIN_SECTION_DEBUG_STR
value|""
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|QPLUGIN_DEBUG_STR
define|#
directive|define
name|QPLUGIN_DEBUG_STR
value|"true"
end_define
begin_define
DECL|macro|QPLUGIN_SECTION_DEBUG_STR
define|#
directive|define
name|QPLUGIN_SECTION_DEBUG_STR
value|".debug"
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|Q_PLUGIN_VERIFICATION_DATA
define|#
directive|define
name|Q_PLUGIN_VERIFICATION_DATA
define|\
value|static const char qt_plugin_verification_data[] = \       "pattern=""QT_PLUGIN_VERIFICATION_DATA""\n" \       "version="QT_VERSION_STR"\n" \       "debug="QPLUGIN_DEBUG_STR;
end_define
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OF_ELF
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
end_if
begin_define
DECL|macro|Q_PLUGIN_VERIFICATION_SECTION
define|#
directive|define
name|Q_PLUGIN_VERIFICATION_SECTION
define|\
value|__attribute__ ((section (".qtplugin"))) __attribute__((used))
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|Q_PLUGIN_VERIFICATION_SECTION
define|#
directive|define
name|Q_PLUGIN_VERIFICATION_SECTION
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN32
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_BOR
argument_list|)
end_if
begin_define
DECL|macro|Q_STANDARD_CALL
define|#
directive|define
name|Q_STANDARD_CALL
value|__stdcall
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|Q_STANDARD_CALL
define|#
directive|define
name|Q_STANDARD_CALL
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|Q_EXPORT_PLUGIN2
define|#
directive|define
name|Q_EXPORT_PLUGIN2
parameter_list|(
name|PLUGIN
parameter_list|,
name|PLUGINCLASS
parameter_list|)
define|\
value|Q_PLUGIN_VERIFICATION_SECTION Q_PLUGIN_VERIFICATION_DATA \             Q_EXTERN_C Q_DECL_EXPORT \             const char * Q_STANDARD_CALL qt_plugin_query_verification_data() \             { return qt_plugin_verification_data; } \             Q_EXTERN_C Q_DECL_EXPORT QT_PREPEND_NAMESPACE(QObject) * Q_STANDARD_CALL qt_plugin_instance() \             Q_PLUGIN_INSTANCE(PLUGINCLASS)
end_define
begin_define
DECL|macro|Q_EXPORT_STATIC_PLUGIN2
define|#
directive|define
name|Q_EXPORT_STATIC_PLUGIN2
parameter_list|(
name|PLUGIN
parameter_list|,
name|PLUGINCLASS
parameter_list|)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_PLUGIN_H
end_comment
end_unit
