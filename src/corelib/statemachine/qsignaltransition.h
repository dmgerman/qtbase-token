begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSIGNALTRANSITION_H
end_ifndef
begin_define
DECL|macro|QSIGNALTRANSITION_H
define|#
directive|define
name|QSIGNALTRANSITION_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qabstracttransition.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmetaobject.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_STATEMACHINE
DECL|variable|QSignalTransitionPrivate
name|class
name|QSignalTransitionPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QSignalTransition
range|:
name|public
name|QAbstractTransition
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
argument|QObject* senderObject READ senderObject WRITE setSenderObject NOTIFY senderObjectChanged
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QByteArray signal READ signal WRITE setSignal NOTIFY signalChanged
argument_list|)
name|public
operator|:
name|QSignalTransition
argument_list|(
name|QState
operator|*
name|sourceState
operator|=
name|Q_NULLPTR
argument_list|)
block|;
name|QSignalTransition
argument_list|(
specifier|const
name|QObject
operator|*
name|sender
argument_list|,
specifier|const
name|char
operator|*
name|signal
argument_list|,
name|QState
operator|*
name|sourceState
operator|=
name|Q_NULLPTR
argument_list|)
block|;
ifdef|#
directive|ifdef
name|Q_QDOC
name|QSignalTransition
argument_list|(
argument|const QObject *object
argument_list|,
argument|PointerToMemberFunction signal
argument_list|,
argument|QState *sourceState = Q_NULLPTR
argument_list|)
block|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_COMPILER_DELEGATING_CONSTRUCTORS
argument_list|)
name|template
operator|<
name|typename
name|Func
operator|>
name|QSignalTransition
argument_list|(
argument|const typename QtPrivate::FunctionPointer<Func>::Object *obj
argument_list|,
argument|Func sig
argument_list|,
argument|QState *srcState = Q_NULLPTR
argument_list|)
operator|:
name|QSignalTransition
argument_list|(
argument|obj
argument_list|,
argument|QMetaMethod::fromSignal(sig).methodSignature().constData()
argument_list|,
argument|srcState
argument_list|)
block|{     }
endif|#
directive|endif
operator|~
name|QSignalTransition
argument_list|()
block|;
name|QObject
operator|*
name|senderObject
argument_list|()
specifier|const
block|;
name|void
name|setSenderObject
argument_list|(
specifier|const
name|QObject
operator|*
name|sender
argument_list|)
block|;
name|QByteArray
name|signal
argument_list|()
specifier|const
block|;
name|void
name|setSignal
argument_list|(
specifier|const
name|QByteArray
operator|&
name|signal
argument_list|)
block|;
name|protected
operator|:
name|bool
name|eventTest
argument_list|(
argument|QEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|onTransition
argument_list|(
argument|QEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|bool
name|event
argument_list|(
argument|QEvent *e
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|Q_SIGNALS
operator|:
name|void
name|senderObjectChanged
argument_list|(
name|QPrivateSignal
argument_list|)
block|;
name|void
name|signalChanged
argument_list|(
name|QPrivateSignal
argument_list|)
block|;
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
argument|QSignalTransition
argument_list|)
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QSignalTransition
argument_list|)
block|}
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_STATEMACHINE
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
