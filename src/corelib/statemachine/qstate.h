begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSTATE_H
end_ifndef
begin_define
DECL|macro|QSTATE_H
define|#
directive|define
name|QSTATE_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qabstractstate.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Core
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_STATEMACHINE
name|class
name|QAbstractTransition
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QSignalTransition
name|class
name|QSignalTransition
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QStatePrivate
name|class
name|QStatePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QState
range|:
name|public
name|QAbstractState
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
argument|QAbstractState* initialState READ initialState WRITE setInitialState
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QAbstractState* errorState READ errorState WRITE setErrorState
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|ChildMode childMode READ childMode WRITE setChildMode
argument_list|)
name|Q_ENUMS
argument_list|(
argument|ChildMode
argument_list|)
name|public
operator|:
expr|enum
name|ChildMode
block|{
name|ExclusiveStates
block|,
name|ParallelStates
block|}
block|;
name|QState
argument_list|(
name|QState
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|QState
argument_list|(
argument|ChildMode childMode
argument_list|,
argument|QState *parent =
literal|0
argument_list|)
block|;
operator|~
name|QState
argument_list|()
block|;
name|QAbstractState
operator|*
name|errorState
argument_list|()
specifier|const
block|;
name|void
name|setErrorState
argument_list|(
name|QAbstractState
operator|*
name|state
argument_list|)
block|;
name|void
name|addTransition
argument_list|(
name|QAbstractTransition
operator|*
name|transition
argument_list|)
block|;
name|QSignalTransition
operator|*
name|addTransition
argument_list|(
name|QObject
operator|*
name|sender
argument_list|,
specifier|const
name|char
operator|*
name|signal
argument_list|,
name|QAbstractState
operator|*
name|target
argument_list|)
block|;
name|QAbstractTransition
operator|*
name|addTransition
argument_list|(
name|QAbstractState
operator|*
name|target
argument_list|)
block|;
name|void
name|removeTransition
argument_list|(
name|QAbstractTransition
operator|*
name|transition
argument_list|)
block|;
name|QList
operator|<
name|QAbstractTransition
operator|*
operator|>
name|transitions
argument_list|()
specifier|const
block|;
name|QAbstractState
operator|*
name|initialState
argument_list|()
specifier|const
block|;
name|void
name|setInitialState
argument_list|(
name|QAbstractState
operator|*
name|state
argument_list|)
block|;
name|ChildMode
name|childMode
argument_list|()
specifier|const
block|;
name|void
name|setChildMode
argument_list|(
argument|ChildMode mode
argument_list|)
block|;
ifndef|#
directive|ifndef
name|QT_NO_PROPERTIES
name|void
name|assignProperty
argument_list|(
name|QObject
operator|*
name|object
argument_list|,
specifier|const
name|char
operator|*
name|name
argument_list|,
specifier|const
name|QVariant
operator|&
name|value
argument_list|)
block|;
endif|#
directive|endif
name|Q_SIGNALS
operator|:
name|void
name|finished
argument_list|()
block|;
name|void
name|propertiesAssigned
argument_list|()
block|;
name|protected
operator|:
name|void
name|onEntry
argument_list|(
name|QEvent
operator|*
name|event
argument_list|)
block|;
name|void
name|onExit
argument_list|(
name|QEvent
operator|*
name|event
argument_list|)
block|;
name|bool
name|event
argument_list|(
name|QEvent
operator|*
name|e
argument_list|)
block|;
name|protected
operator|:
name|QState
argument_list|(
name|QStatePrivate
operator|&
name|dd
argument_list|,
name|QState
operator|*
name|parent
argument_list|)
block|;
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
argument|QState
argument_list|)
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QState
argument_list|)
block|}
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_STATEMACHINE
end_comment
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
end_unit
