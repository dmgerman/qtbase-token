begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qfinalstate.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STATEMACHINE
end_ifndef
begin_include
include|#
directive|include
file|"qabstractstate_p.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!   \class QFinalState    \brief The QFinalState class provides a final state.    \since 4.6   \ingroup statemachine    A final state is used to communicate that (part of) a QStateMachine has   finished its work. When a final top-level state is entered, the state   machine's \l{QStateMachine::finished()}{finished}() signal is emitted. In   general, when a final substate (a child of a QState) is entered, the parent   state's \l{QState::finished()}{finished}() signal is emitted.  QFinalState   is part of \l{The State Machine Framework}.    To use a final state, you create a QFinalState object and add a transition   to it from another state. Example:    \code   QPushButton button;    QStateMachine machine;   QState *s1 = new QState();   QFinalState *s2 = new QFinalState();   s1->addTransition(&button, SIGNAL(clicked()), s2);   machine.addState(s1);   machine.addState(s2);    QObject::connect(&machine, SIGNAL(finished()), QApplication::instance(), SLOT(quit()));   machine.setInitialState(s1);   machine.start();   \endcode    \sa QState::finished() */
end_comment
begin_class
DECL|class|QFinalStatePrivate
class|class
name|QFinalStatePrivate
super|:
specifier|public
name|QAbstractStatePrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QFinalState
parameter_list|)
specifier|public
private|:
name|QFinalStatePrivate
parameter_list|()
constructor_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|QFinalStatePrivate
name|QFinalStatePrivate
operator|::
name|QFinalStatePrivate
parameter_list|()
member_init_list|:
name|QAbstractStatePrivate
argument_list|(
name|FinalState
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!   Constructs a new QFinalState object with the given \a parent state. */
end_comment
begin_constructor
DECL|function|QFinalState
name|QFinalState
operator|::
name|QFinalState
parameter_list|(
name|QState
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractState
argument_list|(
operator|*
operator|new
name|QFinalStatePrivate
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!   Destroys this final state. */
end_comment
begin_destructor
DECL|function|~QFinalState
name|QFinalState
operator|::
name|~
name|QFinalState
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|onEntry
name|void
name|QFinalState
operator|::
name|onEntry
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|onExit
name|void
name|QFinalState
operator|::
name|onExit
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QFinalState
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
return|return
name|QAbstractState
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_STATEMACHINE
end_comment
end_unit
