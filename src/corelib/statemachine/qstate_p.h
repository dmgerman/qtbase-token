begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSTATE_P_H
end_ifndef
begin_define
DECL|macro|QSTATE_P_H
define|#
directive|define
name|QSTATE_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"private/qabstractstate_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpointer.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvariant.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PROPERTIES
end_ifndef
begin_struct
DECL|struct|QPropertyAssignment
struct|struct
name|QPropertyAssignment
block|{
DECL|function|QPropertyAssignment
name|QPropertyAssignment
argument_list|()
operator|:
name|object
argument_list|(
literal|0
argument_list|)
operator|,
name|explicitlySet
argument_list|(
argument|true
argument_list|)
block|{}
DECL|function|QPropertyAssignment
name|QPropertyAssignment
argument_list|(
argument|QObject *o
argument_list|,
argument|const QByteArray&n
argument_list|,
argument|const QVariant&v
argument_list|,
argument|bool es = true
argument_list|)
operator|:
name|object
argument_list|(
name|o
argument_list|)
operator|,
name|propertyName
argument_list|(
name|n
argument_list|)
operator|,
name|value
argument_list|(
name|v
argument_list|)
operator|,
name|explicitlySet
argument_list|(
argument|es
argument_list|)
block|{}
DECL|function|objectDeleted
name|bool
name|objectDeleted
argument_list|()
specifier|const
block|{
return|return
operator|!
name|object
return|;
block|}
DECL|function|write
name|void
name|write
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|object
operator|!=
literal|0
argument_list|)
block|;
name|object
operator|->
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|value
argument_list|)
block|; }
DECL|function|hasTarget
name|bool
name|hasTarget
argument_list|(
argument|QObject *o
argument_list|,
argument|const QByteArray&pn
argument_list|)
specifier|const
block|{
return|return
name|object
operator|==
name|o
operator|&&
name|propertyName
operator|==
name|pn
return|;
block|}
DECL|member|object
name|QPointer
operator|<
name|QObject
operator|>
name|object
expr_stmt|;
DECL|member|propertyName
name|QByteArray
name|propertyName
decl_stmt|;
DECL|member|value
name|QVariant
name|value
decl_stmt|;
DECL|member|explicitlySet
name|bool
name|explicitlySet
decl_stmt|;
comment|// false means the property is being restored to its old value
block|}
struct|;
end_struct
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PROPERTIES
end_comment
begin_decl_stmt
DECL|variable|QAbstractTransition
name|class
name|QAbstractTransition
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QHistoryState
name|class
name|QHistoryState
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QState
name|class
name|QState
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_AUTOTEST_EXPORT
name|QStatePrivate
range|:
name|public
name|QAbstractStatePrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QState
argument_list|)
name|public
operator|:
name|QStatePrivate
argument_list|()
block|;
operator|~
name|QStatePrivate
argument_list|()
block|;
specifier|static
name|QStatePrivate
operator|*
name|get
argument_list|(
argument|QState *q
argument_list|)
block|{
return|return
name|q
operator|?
name|q
operator|->
name|d_func
argument_list|()
operator|:
literal|0
return|;
block|}
specifier|static
specifier|const
name|QStatePrivate
operator|*
name|get
argument_list|(
argument|const QState *q
argument_list|)
block|{
return|return
name|q
condition|?
name|q
operator|->
name|d_func
argument_list|()
else|:
literal|0
return|;
block|}
name|QList
operator|<
name|QAbstractState
operator|*
operator|>
name|childStates
argument_list|()
specifier|const
block|;
name|QList
operator|<
name|QHistoryState
operator|*
operator|>
name|historyStates
argument_list|()
specifier|const
block|;
name|QList
operator|<
name|QAbstractTransition
operator|*
operator|>
name|transitions
argument_list|()
specifier|const
block|;
name|void
name|emitFinished
argument_list|()
block|;
name|void
name|emitPropertiesAssigned
argument_list|()
block|;
name|QAbstractState
operator|*
name|errorState
block|;
name|QAbstractState
operator|*
name|initialState
block|;
name|QState
operator|::
name|ChildMode
name|childMode
block|;
name|mutable
name|bool
name|childStatesListNeedsRefresh
block|;
name|mutable
name|QList
operator|<
name|QAbstractState
operator|*
operator|>
name|childStatesList
block|;
name|mutable
name|bool
name|transitionsListNeedsRefresh
block|;
name|mutable
name|QList
operator|<
name|QAbstractTransition
operator|*
operator|>
name|transitionsList
block|;
ifndef|#
directive|ifndef
name|QT_NO_PROPERTIES
name|QList
operator|<
name|QPropertyAssignment
operator|>
name|propertyAssignments
block|;
endif|#
directive|endif
block|}
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
