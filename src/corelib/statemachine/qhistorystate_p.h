begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QHISTORYSTATE_P_H
end_ifndef
begin_define
DECL|macro|QHISTORYSTATE_P_H
define|#
directive|define
name|QHISTORYSTATE_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"private/qabstractstate_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qabstracttransition.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qhistorystate.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|QHistoryStatePrivate
range|:
name|public
name|QAbstractStatePrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QHistoryState
argument_list|)
name|public
operator|:
name|QHistoryStatePrivate
argument_list|()
block|;
specifier|static
name|QHistoryStatePrivate
operator|*
name|get
argument_list|(
argument|QHistoryState *q
argument_list|)
block|{
return|return
name|q
operator|->
name|d_func
argument_list|()
return|;
block|}
name|QAbstractTransition
operator|*
name|defaultTransition
block|;
name|QHistoryState
operator|::
name|HistoryType
name|historyType
block|;
name|QList
operator|<
name|QAbstractState
operator|*
operator|>
name|configuration
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|DefaultStateTransition
range|:
name|public
name|QAbstractTransition
block|{
name|Q_OBJECT
name|public
operator|:
name|DefaultStateTransition
argument_list|(
name|QHistoryState
operator|*
name|source
argument_list|,
name|QAbstractState
operator|*
name|target
argument_list|)
block|;
name|protected
operator|:
comment|// It doesn't matter whether this transition matches any event or not. It is always associated
comment|// with a QHistoryState, and as soon as the state-machine detects that it enters a history
comment|// state, it will handle this transition as a special case. The history state itself is never
comment|// entered either: either the stored configuration will be used, or the target(s) of this
comment|// transition are used.
name|virtual
name|bool
name|eventTest
argument_list|(
argument|QEvent *event
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
block|;
return|return
name|false
return|;
block|}
name|virtual
name|void
name|onTransition
argument_list|(
argument|QEvent *event
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
block|; }
expr|}
block|;
name|QT_END_NAMESPACE
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
end_unit
