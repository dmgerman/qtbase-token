begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qfilesystemwatcher.h"
end_include
begin_include
include|#
directive|include
file|"qfilesystemwatcher_inotify_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
end_ifndef
begin_include
include|#
directive|include
file|"private/qcore_unix_p.h"
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<qsocketnotifier.h>
end_include
begin_include
include|#
directive|include
file|<qvarlengtharray.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
end_if
begin_include
include|#
directive|include
file|<sys/syscall.h>
end_include
begin_include
include|#
directive|include
file|<sys/ioctl.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_INOTIFY
argument_list|)
end_if
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
end_if
begin_comment
comment|// These files should only be compiled on QNX if the inotify headers are found
end_comment
begin_error
error|#
directive|error
literal|"Should not get here."
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<linux/types.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__i386__
argument_list|)
end_if
begin_define
DECL|macro|__NR_inotify_init
define|#
directive|define
name|__NR_inotify_init
value|291
end_define
begin_define
DECL|macro|__NR_inotify_add_watch
define|#
directive|define
name|__NR_inotify_add_watch
value|292
end_define
begin_define
DECL|macro|__NR_inotify_rm_watch
define|#
directive|define
name|__NR_inotify_rm_watch
value|293
end_define
begin_define
DECL|macro|__NR_inotify_init1
define|#
directive|define
name|__NR_inotify_init1
value|332
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__x86_64__
argument_list|)
end_elif
begin_define
DECL|macro|__NR_inotify_init
define|#
directive|define
name|__NR_inotify_init
value|253
end_define
begin_define
DECL|macro|__NR_inotify_add_watch
define|#
directive|define
name|__NR_inotify_add_watch
value|254
end_define
begin_define
DECL|macro|__NR_inotify_rm_watch
define|#
directive|define
name|__NR_inotify_rm_watch
value|255
end_define
begin_define
DECL|macro|__NR_inotify_init1
define|#
directive|define
name|__NR_inotify_init1
value|294
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__powerpc__
argument_list|)
operator|||
name|defined
argument_list|(
name|__powerpc64__
argument_list|)
end_elif
begin_define
DECL|macro|__NR_inotify_init
define|#
directive|define
name|__NR_inotify_init
value|275
end_define
begin_define
DECL|macro|__NR_inotify_add_watch
define|#
directive|define
name|__NR_inotify_add_watch
value|276
end_define
begin_define
DECL|macro|__NR_inotify_rm_watch
define|#
directive|define
name|__NR_inotify_rm_watch
value|277
end_define
begin_define
DECL|macro|__NR_inotify_init1
define|#
directive|define
name|__NR_inotify_init1
value|318
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__ia64__
argument_list|)
end_elif
begin_define
DECL|macro|__NR_inotify_init
define|#
directive|define
name|__NR_inotify_init
value|1277
end_define
begin_define
DECL|macro|__NR_inotify_add_watch
define|#
directive|define
name|__NR_inotify_add_watch
value|1278
end_define
begin_define
DECL|macro|__NR_inotify_rm_watch
define|#
directive|define
name|__NR_inotify_rm_watch
value|1279
end_define
begin_define
DECL|macro|__NR_inotify_init1
define|#
directive|define
name|__NR_inotify_init1
value|1318
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__s390__
argument_list|)
operator|||
name|defined
argument_list|(
name|__s390x__
argument_list|)
end_elif
begin_define
DECL|macro|__NR_inotify_init
define|#
directive|define
name|__NR_inotify_init
value|284
end_define
begin_define
DECL|macro|__NR_inotify_add_watch
define|#
directive|define
name|__NR_inotify_add_watch
value|285
end_define
begin_define
DECL|macro|__NR_inotify_rm_watch
define|#
directive|define
name|__NR_inotify_rm_watch
value|286
end_define
begin_define
DECL|macro|__NR_inotify_init1
define|#
directive|define
name|__NR_inotify_init1
value|324
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__alpha__
argument_list|)
end_elif
begin_define
DECL|macro|__NR_inotify_init
define|#
directive|define
name|__NR_inotify_init
value|444
end_define
begin_define
DECL|macro|__NR_inotify_add_watch
define|#
directive|define
name|__NR_inotify_add_watch
value|445
end_define
begin_define
DECL|macro|__NR_inotify_rm_watch
define|#
directive|define
name|__NR_inotify_rm_watch
value|446
end_define
begin_comment
comment|// no inotify_init1 for the Alpha
end_comment
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__sparc__
argument_list|)
operator|||
name|defined
argument_list|(
name|__sparc64__
argument_list|)
end_elif
begin_define
DECL|macro|__NR_inotify_init
define|#
directive|define
name|__NR_inotify_init
value|151
end_define
begin_define
DECL|macro|__NR_inotify_add_watch
define|#
directive|define
name|__NR_inotify_add_watch
value|152
end_define
begin_define
DECL|macro|__NR_inotify_rm_watch
define|#
directive|define
name|__NR_inotify_rm_watch
value|156
end_define
begin_define
DECL|macro|__NR_inotify_init1
define|#
directive|define
name|__NR_inotify_init1
value|322
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__arm__
argument_list|)
end_elif
begin_define
DECL|macro|__NR_inotify_init
define|#
directive|define
name|__NR_inotify_init
value|316
end_define
begin_define
DECL|macro|__NR_inotify_add_watch
define|#
directive|define
name|__NR_inotify_add_watch
value|317
end_define
begin_define
DECL|macro|__NR_inotify_rm_watch
define|#
directive|define
name|__NR_inotify_rm_watch
value|318
end_define
begin_define
DECL|macro|__NR_inotify_init1
define|#
directive|define
name|__NR_inotify_init1
value|360
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__sh__
argument_list|)
end_elif
begin_define
DECL|macro|__NR_inotify_init
define|#
directive|define
name|__NR_inotify_init
value|290
end_define
begin_define
DECL|macro|__NR_inotify_add_watch
define|#
directive|define
name|__NR_inotify_add_watch
value|291
end_define
begin_define
DECL|macro|__NR_inotify_rm_watch
define|#
directive|define
name|__NR_inotify_rm_watch
value|292
end_define
begin_define
DECL|macro|__NR_inotify_init1
define|#
directive|define
name|__NR_inotify_init1
value|332
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__sh64__
argument_list|)
end_elif
begin_define
DECL|macro|__NR_inotify_init
define|#
directive|define
name|__NR_inotify_init
value|318
end_define
begin_define
DECL|macro|__NR_inotify_add_watch
define|#
directive|define
name|__NR_inotify_add_watch
value|319
end_define
begin_define
DECL|macro|__NR_inotify_rm_watch
define|#
directive|define
name|__NR_inotify_rm_watch
value|320
end_define
begin_define
DECL|macro|__NR_inotify_init1
define|#
directive|define
name|__NR_inotify_init1
value|360
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__mips__
argument_list|)
end_elif
begin_define
DECL|macro|__NR_inotify_init
define|#
directive|define
name|__NR_inotify_init
value|284
end_define
begin_define
DECL|macro|__NR_inotify_add_watch
define|#
directive|define
name|__NR_inotify_add_watch
value|285
end_define
begin_define
DECL|macro|__NR_inotify_rm_watch
define|#
directive|define
name|__NR_inotify_rm_watch
value|286
end_define
begin_define
DECL|macro|__NR_inotify_init1
define|#
directive|define
name|__NR_inotify_init1
value|329
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__hppa__
argument_list|)
end_elif
begin_define
DECL|macro|__NR_inotify_init
define|#
directive|define
name|__NR_inotify_init
value|269
end_define
begin_define
DECL|macro|__NR_inotify_add_watch
define|#
directive|define
name|__NR_inotify_add_watch
value|270
end_define
begin_define
DECL|macro|__NR_inotify_rm_watch
define|#
directive|define
name|__NR_inotify_rm_watch
value|271
end_define
begin_define
DECL|macro|__NR_inotify_init1
define|#
directive|define
name|__NR_inotify_init1
value|314
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__avr32__
argument_list|)
end_elif
begin_define
DECL|macro|__NR_inotify_init
define|#
directive|define
name|__NR_inotify_init
value|240
end_define
begin_define
DECL|macro|__NR_inotify_add_watch
define|#
directive|define
name|__NR_inotify_add_watch
value|241
end_define
begin_define
DECL|macro|__NR_inotify_rm_watch
define|#
directive|define
name|__NR_inotify_rm_watch
value|242
end_define
begin_comment
comment|// no inotify_init1 for AVR32
end_comment
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__mc68000__
argument_list|)
end_elif
begin_define
DECL|macro|__NR_inotify_init
define|#
directive|define
name|__NR_inotify_init
value|284
end_define
begin_define
DECL|macro|__NR_inotify_add_watch
define|#
directive|define
name|__NR_inotify_add_watch
value|285
end_define
begin_define
DECL|macro|__NR_inotify_rm_watch
define|#
directive|define
name|__NR_inotify_rm_watch
value|286
end_define
begin_define
DECL|macro|__NR_inotify_init1
define|#
directive|define
name|__NR_inotify_init1
value|328
end_define
begin_else
else|#
directive|else
end_else
begin_error
error|#
directive|error
literal|"This architecture is not supported. Please see http://www.qt-project.org/"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|IN_CLOEXEC
argument_list|)
operator|&&
name|defined
argument_list|(
name|O_CLOEXEC
argument_list|)
operator|&&
name|defined
argument_list|(
name|__NR_inotify_init1
argument_list|)
end_if
begin_define
DECL|macro|IN_CLOEXEC
define|#
directive|define
name|IN_CLOEXEC
value|O_CLOEXEC
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
ifdef|#
directive|ifdef
name|QT_LINUXBASE
comment|// ### the LSB doesn't standardize syscall, need to wait until glib2.4 is standardized
DECL|function|syscall
specifier|static
specifier|inline
name|int
name|syscall
parameter_list|(
modifier|...
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|inotify_init
specifier|static
specifier|inline
name|int
name|inotify_init
parameter_list|()
block|{
return|return
name|syscall
argument_list|(
name|__NR_inotify_init
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|inotify_add_watch
specifier|static
specifier|inline
name|int
name|inotify_add_watch
parameter_list|(
name|int
name|fd
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|__u32
name|mask
parameter_list|)
block|{
return|return
name|syscall
argument_list|(
name|__NR_inotify_add_watch
argument_list|,
name|fd
argument_list|,
name|name
argument_list|,
name|mask
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|inotify_rm_watch
specifier|static
specifier|inline
name|int
name|inotify_rm_watch
parameter_list|(
name|int
name|fd
parameter_list|,
name|__u32
name|wd
parameter_list|)
block|{
return|return
name|syscall
argument_list|(
name|__NR_inotify_rm_watch
argument_list|,
name|fd
argument_list|,
name|wd
argument_list|)
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|IN_CLOEXEC
end_ifdef
begin_function
DECL|function|inotify_init1
specifier|static
specifier|inline
name|int
name|inotify_init1
parameter_list|(
name|int
name|flags
parameter_list|)
block|{
return|return
name|syscall
argument_list|(
name|__NR_inotify_init1
argument_list|,
name|flags
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// the following struct and values are documented in linux/inotify.h
end_comment
begin_extern
extern|extern
literal|"C"
block|{
DECL|struct|inotify_event
struct|struct
name|inotify_event
block|{
DECL|member|wd
name|__s32
name|wd
decl_stmt|;
DECL|member|mask
name|__u32
name|mask
decl_stmt|;
DECL|member|cookie
name|__u32
name|cookie
decl_stmt|;
DECL|member|len
name|__u32
name|len
decl_stmt|;
DECL|member|name
name|char
name|name
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
DECL|macro|IN_ACCESS
define|#
directive|define
name|IN_ACCESS
value|0x00000001
DECL|macro|IN_MODIFY
define|#
directive|define
name|IN_MODIFY
value|0x00000002
DECL|macro|IN_ATTRIB
define|#
directive|define
name|IN_ATTRIB
value|0x00000004
DECL|macro|IN_CLOSE_WRITE
define|#
directive|define
name|IN_CLOSE_WRITE
value|0x00000008
DECL|macro|IN_CLOSE_NOWRITE
define|#
directive|define
name|IN_CLOSE_NOWRITE
value|0x00000010
DECL|macro|IN_OPEN
define|#
directive|define
name|IN_OPEN
value|0x00000020
DECL|macro|IN_MOVED_FROM
define|#
directive|define
name|IN_MOVED_FROM
value|0x00000040
DECL|macro|IN_MOVED_TO
define|#
directive|define
name|IN_MOVED_TO
value|0x00000080
DECL|macro|IN_CREATE
define|#
directive|define
name|IN_CREATE
value|0x00000100
DECL|macro|IN_DELETE
define|#
directive|define
name|IN_DELETE
value|0x00000200
DECL|macro|IN_DELETE_SELF
define|#
directive|define
name|IN_DELETE_SELF
value|0x00000400
DECL|macro|IN_MOVE_SELF
define|#
directive|define
name|IN_MOVE_SELF
value|0x00000800
DECL|macro|IN_UNMOUNT
define|#
directive|define
name|IN_UNMOUNT
value|0x00002000
DECL|macro|IN_Q_OVERFLOW
define|#
directive|define
name|IN_Q_OVERFLOW
value|0x00004000
DECL|macro|IN_IGNORED
define|#
directive|define
name|IN_IGNORED
value|0x00008000
DECL|macro|IN_CLOSE
define|#
directive|define
name|IN_CLOSE
value|(IN_CLOSE_WRITE | IN_CLOSE_NOWRITE)
DECL|macro|IN_MOVE
define|#
directive|define
name|IN_MOVE
value|(IN_MOVED_FROM | IN_MOVED_TO)
block|}
end_extern
begin_function
name|QT_END_NAMESPACE
comment|// --------- inotify.h end ----------
else|#
directive|else
comment|/* QT_NO_INOTIFY */
include|#
directive|include
file|<sys/inotify.h>
endif|#
directive|endif
name|QT_BEGIN_NAMESPACE
DECL|function|create
name|QInotifyFileSystemWatcherEngine
modifier|*
name|QInotifyFileSystemWatcherEngine
operator|::
name|create
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
block|{
specifier|register
name|int
name|fd
init|=
operator|-
literal|1
decl_stmt|;
ifdef|#
directive|ifdef
name|IN_CLOEXEC
name|fd
operator|=
name|inotify_init1
argument_list|(
name|IN_CLOEXEC
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|fd
operator|==
operator|-
literal|1
condition|)
block|{
name|fd
operator|=
name|inotify_init
argument_list|()
expr_stmt|;
if|if
condition|(
name|fd
operator|==
operator|-
literal|1
condition|)
return|return
literal|0
return|;
block|}
return|return
operator|new
name|QInotifyFileSystemWatcherEngine
argument_list|(
name|fd
argument_list|,
name|parent
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QInotifyFileSystemWatcherEngine
name|QInotifyFileSystemWatcherEngine
operator|::
name|QInotifyFileSystemWatcherEngine
parameter_list|(
name|int
name|fd
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QFileSystemWatcherEngine
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|inotifyFd
argument_list|(
name|fd
argument_list|)
member_init_list|,
name|notifier
argument_list|(
name|fd
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
block|{
name|fcntl
argument_list|(
name|inotifyFd
argument_list|,
name|F_SETFD
argument_list|,
name|FD_CLOEXEC
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|notifier
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|readFromInotify
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QInotifyFileSystemWatcherEngine
name|QInotifyFileSystemWatcherEngine
operator|::
name|~
name|QInotifyFileSystemWatcherEngine
parameter_list|()
block|{
name|notifier
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|int
name|id
decl|,
name|pathToID
control|)
name|inotify_rm_watch
argument_list|(
name|inotifyFd
argument_list|,
name|id
operator|<
literal|0
condition|?
operator|-
name|id
else|:
name|id
argument_list|)
expr_stmt|;
operator|::
name|close
argument_list|(
name|inotifyFd
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|addPaths
name|QStringList
name|QInotifyFileSystemWatcherEngine
operator|::
name|addPaths
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|paths
parameter_list|,
name|QStringList
modifier|*
name|files
parameter_list|,
name|QStringList
modifier|*
name|directories
parameter_list|)
block|{
name|QStringList
name|p
init|=
name|paths
decl_stmt|;
name|QMutableListIterator
argument_list|<
name|QString
argument_list|>
name|it
argument_list|(
name|p
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QString
name|path
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|bool
name|isDir
init|=
name|fi
operator|.
name|isDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|isDir
condition|)
block|{
if|if
condition|(
name|directories
operator|->
name|contains
argument_list|(
name|path
argument_list|)
condition|)
continue|continue;
block|}
else|else
block|{
if|if
condition|(
name|files
operator|->
name|contains
argument_list|(
name|path
argument_list|)
condition|)
continue|continue;
block|}
name|int
name|wd
init|=
name|inotify_add_watch
argument_list|(
name|inotifyFd
argument_list|,
name|QFile
operator|::
name|encodeName
argument_list|(
name|path
argument_list|)
argument_list|,
operator|(
name|isDir
condition|?
operator|(
literal|0
operator||
name|IN_ATTRIB
operator||
name|IN_MOVE
operator||
name|IN_CREATE
operator||
name|IN_DELETE
operator||
name|IN_DELETE_SELF
operator|)
else|:
operator|(
literal|0
operator||
name|IN_ATTRIB
operator||
name|IN_MODIFY
operator||
name|IN_MOVE
operator||
name|IN_MOVE_SELF
operator||
name|IN_DELETE_SELF
operator|)
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|wd
operator|<
literal|0
condition|)
block|{
name|perror
argument_list|(
literal|"QInotifyFileSystemWatcherEngine::addPaths: inotify_add_watch failed"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|int
name|id
init|=
name|isDir
condition|?
operator|-
name|wd
else|:
name|wd
decl_stmt|;
if|if
condition|(
name|id
operator|<
literal|0
condition|)
block|{
name|directories
operator|->
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|files
operator|->
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|pathToID
operator|.
name|insert
argument_list|(
name|path
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|idToPath
operator|.
name|insert
argument_list|(
name|id
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|p
return|;
block|}
end_function
begin_function
DECL|function|removePaths
name|QStringList
name|QInotifyFileSystemWatcherEngine
operator|::
name|removePaths
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|paths
parameter_list|,
name|QStringList
modifier|*
name|files
parameter_list|,
name|QStringList
modifier|*
name|directories
parameter_list|)
block|{
name|QStringList
name|p
init|=
name|paths
decl_stmt|;
name|QMutableListIterator
argument_list|<
name|QString
argument_list|>
name|it
argument_list|(
name|p
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QString
name|path
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|id
init|=
name|pathToID
operator|.
name|take
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QString
name|x
init|=
name|idToPath
operator|.
name|take
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|isEmpty
argument_list|()
operator|||
name|x
operator|!=
name|path
condition|)
continue|continue;
name|int
name|wd
init|=
name|id
operator|<
literal|0
condition|?
operator|-
name|id
else|:
name|id
decl_stmt|;
comment|// qDebug()<< "removing watch for path"<< path<< "wd"<< wd;
name|inotify_rm_watch
argument_list|(
name|inotifyFd
argument_list|,
name|wd
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|id
operator|<
literal|0
condition|)
block|{
name|directories
operator|->
name|removeAll
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|files
operator|->
name|removeAll
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|p
return|;
block|}
end_function
begin_function
DECL|function|readFromInotify
name|void
name|QInotifyFileSystemWatcherEngine
operator|::
name|readFromInotify
parameter_list|()
block|{
comment|// qDebug()<< "QInotifyFileSystemWatcherEngine::readFromInotify";
name|int
name|buffSize
init|=
literal|0
decl_stmt|;
name|ioctl
argument_list|(
name|inotifyFd
argument_list|,
name|FIONREAD
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|buffSize
argument_list|)
expr_stmt|;
name|QVarLengthArray
argument_list|<
name|char
argument_list|,
literal|4096
argument_list|>
name|buffer
argument_list|(
name|buffSize
argument_list|)
decl_stmt|;
name|buffSize
operator|=
name|read
argument_list|(
name|inotifyFd
argument_list|,
name|buffer
operator|.
name|data
argument_list|()
argument_list|,
name|buffSize
argument_list|)
expr_stmt|;
name|char
modifier|*
name|at
init|=
name|buffer
operator|.
name|data
argument_list|()
decl_stmt|;
name|char
modifier|*
specifier|const
name|end
init|=
name|at
operator|+
name|buffSize
decl_stmt|;
name|QHash
argument_list|<
name|int
argument_list|,
name|inotify_event
modifier|*
argument_list|>
name|eventForId
decl_stmt|;
while|while
condition|(
name|at
operator|<
name|end
condition|)
block|{
name|inotify_event
modifier|*
name|event
init|=
cast|reinterpret_cast
argument_list|<
name|inotify_event
operator|*
argument_list|>
argument_list|(
name|at
argument_list|)
decl_stmt|;
if|if
condition|(
name|eventForId
operator|.
name|contains
argument_list|(
name|event
operator|->
name|wd
argument_list|)
condition|)
name|eventForId
index|[
name|event
operator|->
name|wd
index|]
operator|->
name|mask
operator||=
name|event
operator|->
name|mask
expr_stmt|;
else|else
name|eventForId
operator|.
name|insert
argument_list|(
name|event
operator|->
name|wd
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|at
operator|+=
sizeof|sizeof
argument_list|(
name|inotify_event
argument_list|)
operator|+
name|event
operator|->
name|len
expr_stmt|;
block|}
name|QHash
argument_list|<
name|int
argument_list|,
name|inotify_event
modifier|*
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|eventForId
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|eventForId
operator|.
name|constEnd
argument_list|()
condition|)
block|{
specifier|const
name|inotify_event
modifier|&
name|event
init|=
operator|*
operator|*
name|it
decl_stmt|;
operator|++
name|it
expr_stmt|;
comment|// qDebug()<< "inotify event, wd"<< event.wd<< "mask"<< hex<< event.mask;
name|int
name|id
init|=
name|event
operator|.
name|wd
decl_stmt|;
name|QString
name|path
init|=
name|idToPath
operator|.
name|value
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// perhaps a directory?
name|id
operator|=
operator|-
name|id
expr_stmt|;
name|path
operator|=
name|idToPath
operator|.
name|value
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
block|}
comment|// qDebug()<< "event for path"<< path;
if|if
condition|(
operator|(
name|event
operator|.
name|mask
operator|&
operator|(
name|IN_DELETE_SELF
operator||
name|IN_MOVE_SELF
operator||
name|IN_UNMOUNT
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|pathToID
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|idToPath
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|inotify_rm_watch
argument_list|(
name|inotifyFd
argument_list|,
name|event
operator|.
name|wd
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|<
literal|0
condition|)
emit|emit
name|directoryChanged
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
emit|;
else|else
emit|emit
name|fileChanged
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
emit|;
block|}
else|else
block|{
if|if
condition|(
name|id
operator|<
literal|0
condition|)
emit|emit
name|directoryChanged
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
emit|;
else|else
emit|emit
name|fileChanged
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
emit|;
block|}
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_FILESYSTEMWATCHER
end_comment
end_unit
