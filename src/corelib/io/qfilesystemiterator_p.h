begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QFILESYSTEMITERATOR_P_H
end_ifndef
begin_define
DECL|macro|QFILESYSTEMITERATOR_P_H
define|#
directive|define
name|QFILESYSTEMITERATOR_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMITERATOR
end_ifndef
begin_include
include|#
directive|include
file|<QtCore/qdir.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdiriterator.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qfilesystementry_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qfilesystemmetadata_p.h>
end_include
begin_comment
comment|// Platform-specific headers
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QtCore/qscopedpointer.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|QFileSystemIterator
block|{
name|public
label|:
name|QFileSystemIterator
argument_list|(
argument|const QFileSystemEntry&entry
argument_list|,
argument|QDir::Filters filters
argument_list|,
argument|const QStringList&nameFilters
argument_list|,
argument|QDirIterator::IteratorFlags flags                 = QDirIterator::FollowSymlinks | QDirIterator::Subdirectories
argument_list|)
empty_stmt|;
operator|~
name|QFileSystemIterator
argument_list|()
expr_stmt|;
name|bool
name|advance
parameter_list|(
name|QFileSystemEntry
modifier|&
name|fileEntry
parameter_list|,
name|QFileSystemMetaData
modifier|&
name|metaData
parameter_list|)
function_decl|;
name|private
label|:
name|QFileSystemEntry
operator|::
name|NativePath
name|nativePath
expr_stmt|;
comment|// Platform-specific data
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QString
name|dirPath
decl_stmt|;
name|HANDLE
name|findFileHandle
decl_stmt|;
name|QStringList
name|uncShares
decl_stmt|;
name|bool
name|uncFallback
decl_stmt|;
name|int
name|uncShareIndex
decl_stmt|;
name|bool
name|onlyDirs
decl_stmt|;
else|#
directive|else
name|QT_DIR
modifier|*
name|dir
decl_stmt|;
name|QT_DIRENT
modifier|*
name|dirEntry
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|_POSIX_THREAD_SAFE_FUNCTIONS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_CYGWIN
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_EXT_QNX_READDIR_R
argument_list|)
comment|// for readdir_r
name|QScopedPointer
operator|<
name|QT_DIRENT
operator|,
name|QScopedPointerPodDeleter
operator|>
name|mt_file
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_EXT_QNX_READDIR_R
argument_list|)
comment|// for _readdir_r
name|size_t
name|direntSize
decl_stmt|;
endif|#
directive|endif
endif|#
directive|endif
name|int
name|lastError
decl_stmt|;
endif|#
directive|endif
name|Q_DISABLE_COPY
argument_list|(
argument|QFileSystemIterator
argument_list|)
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_FILESYSTEMITERATOR
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// include guard
end_comment
end_unit
