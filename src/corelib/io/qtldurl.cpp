begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qurl.h"
end_include
begin_include
include|#
directive|include
file|"private/qurltlds_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qtldurl_p.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qstringlist.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|containsTLDEntry
specifier|static
name|bool
name|containsTLDEntry
parameter_list|(
specifier|const
name|QString
modifier|&
name|entry
parameter_list|)
block|{
name|int
name|index
init|=
name|qHash
argument_list|(
name|entry
argument_list|)
operator|%
name|tldCount
decl_stmt|;
name|int
name|currentDomainIndex
init|=
name|tldIndices
index|[
name|index
index|]
decl_stmt|;
while|while
condition|(
name|currentDomainIndex
operator|<
name|tldIndices
index|[
name|index
operator|+
literal|1
index|]
condition|)
block|{
name|QString
name|currentEntry
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|tldData
operator|+
name|currentDomainIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentEntry
operator|==
name|entry
condition|)
return|return
literal|true
return|;
name|currentDomainIndex
operator|+=
name|qstrlen
argument_list|(
name|tldData
operator|+
name|currentDomainIndex
argument_list|)
operator|+
literal|1
expr_stmt|;
comment|// +1 for the ending \0
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Return the top-level-domain per Qt's copy of the Mozilla public suffix list of     \a domain. */
end_comment
begin_function
DECL|function|qTopLevelDomain
name|Q_CORE_EXPORT
name|QString
name|qTopLevelDomain
parameter_list|(
specifier|const
name|QString
modifier|&
name|domain
parameter_list|)
block|{
name|QStringList
name|sections
init|=
name|domain
operator|.
name|toLower
argument_list|()
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
if|if
condition|(
name|sections
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
name|QString
name|level
decl_stmt|,
name|tld
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|sections
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|j
operator|>=
literal|0
condition|;
operator|--
name|j
control|)
block|{
name|level
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|+
name|sections
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|qIsEffectiveTLD
argument_list|(
name|level
operator|.
name|right
argument_list|(
name|level
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
condition|)
name|tld
operator|=
name|level
expr_stmt|;
block|}
return|return
name|tld
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Return true if \a domain is a top-level-domain per Qt's copy of the Mozilla public suffix list. */
end_comment
begin_function
DECL|function|qIsEffectiveTLD
name|Q_CORE_EXPORT
name|bool
name|qIsEffectiveTLD
parameter_list|(
specifier|const
name|QString
modifier|&
name|domain
parameter_list|)
block|{
comment|// for domain 'foo.bar.com':
comment|// 1. return if TLD table contains 'foo.bar.com'
if|if
condition|(
name|containsTLDEntry
argument_list|(
name|domain
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|domain
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
condition|)
block|{
name|int
name|count
init|=
name|domain
operator|.
name|size
argument_list|()
operator|-
name|domain
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|wildCardDomain
decl_stmt|;
name|wildCardDomain
operator|.
name|reserve
argument_list|(
name|count
operator|+
literal|1
argument_list|)
expr_stmt|;
name|wildCardDomain
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'*'
argument_list|)
argument_list|)
expr_stmt|;
name|wildCardDomain
operator|.
name|append
argument_list|(
name|domain
operator|.
name|right
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2. if table contains '*.bar.com',
comment|// test if table contains '!foo.bar.com'
if|if
condition|(
name|containsTLDEntry
argument_list|(
name|wildCardDomain
argument_list|)
condition|)
block|{
name|QString
name|exceptionDomain
decl_stmt|;
name|exceptionDomain
operator|.
name|reserve
argument_list|(
name|domain
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|exceptionDomain
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'!'
argument_list|)
argument_list|)
expr_stmt|;
name|exceptionDomain
operator|.
name|append
argument_list|(
name|domain
argument_list|)
expr_stmt|;
return|return
operator|(
operator|!
name|containsTLDEntry
argument_list|(
name|exceptionDomain
argument_list|)
operator|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
