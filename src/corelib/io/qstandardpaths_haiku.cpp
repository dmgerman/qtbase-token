begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2015 KlarÃ¤lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Tobias Koenig<tobias.koenig@kdab.com> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qstandardpaths.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STANDARDPATHS
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
end_ifndef
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<FindDirectory.h>
end_include
begin_include
include|#
directive|include
file|<Path.h>
end_include
begin_include
include|#
directive|include
file|<PathFinder.h>
end_include
begin_include
include|#
directive|include
file|<StringList.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_namespace
namespace|namespace
block|{
DECL|function|appendOrganizationAndApp
name|void
name|appendOrganizationAndApp
parameter_list|(
name|QString
modifier|&
name|path
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
specifier|const
name|QString
name|org
init|=
name|QCoreApplication
operator|::
name|organizationName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|org
operator|.
name|isEmpty
argument_list|()
condition|)
name|path
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|org
expr_stmt|;
specifier|const
name|QString
name|appName
init|=
name|QCoreApplication
operator|::
name|applicationName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|appName
operator|.
name|isEmpty
argument_list|()
condition|)
name|path
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|appName
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|path
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
comment|/*  * Returns the generic standard path for given directory type.  */
DECL|function|haikuStandardPath
name|QString
name|haikuStandardPath
parameter_list|(
name|directory_which
name|which
parameter_list|)
block|{
name|BPath
name|standardPath
decl_stmt|;
if|if
condition|(
name|find_directory
argument_list|(
name|which
argument_list|,
operator|&
name|standardPath
argument_list|,
literal|false
argument_list|)
operator|!=
name|B_OK
condition|)
return|return
name|QString
argument_list|()
return|;
return|return
name|QFile
operator|::
name|decodeName
argument_list|(
name|standardPath
operator|.
name|Path
argument_list|()
argument_list|)
return|;
block|}
comment|/*  * Returns the generic standard paths for given path type.  */
DECL|function|haikuStandardPaths
name|QStringList
name|haikuStandardPaths
parameter_list|(
name|path_base_directory
name|baseDirectory
parameter_list|)
block|{
name|BStringList
name|paths
decl_stmt|;
if|if
condition|(
name|BPathFinder
operator|::
name|FindPaths
argument_list|(
name|baseDirectory
argument_list|,
name|paths
argument_list|)
operator|!=
name|B_OK
condition|)
return|return
name|QStringList
argument_list|()
return|;
name|QStringList
name|standardPaths
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|CountStrings
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|standardPaths
operator|<<
name|QFile
operator|::
name|decodeName
argument_list|(
name|paths
operator|.
name|StringAt
argument_list|(
name|i
argument_list|)
operator|.
name|String
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|standardPaths
return|;
block|}
comment|/*  * Returns the application specific standard path for given directory type.  */
DECL|function|haikuAppStandardPath
name|QString
name|haikuAppStandardPath
parameter_list|(
name|directory_which
name|which
parameter_list|)
block|{
name|QString
name|path
init|=
name|haikuStandardPath
argument_list|(
name|which
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
name|appendOrganizationAndApp
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
comment|/*  * Returns the application specific standard paths for given path type.  */
DECL|function|haikuAppStandardPaths
name|QStringList
name|haikuAppStandardPaths
parameter_list|(
name|path_base_directory
name|baseDirectory
parameter_list|)
block|{
name|QStringList
name|paths
init|=
name|haikuStandardPaths
argument_list|(
name|baseDirectory
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|appendOrganizationAndApp
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|paths
return|;
block|}
block|}
end_namespace
begin_comment
comment|// namespace
end_comment
begin_function
DECL|function|writableLocation
name|QString
name|QStandardPaths
operator|::
name|writableLocation
parameter_list|(
name|StandardLocation
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DesktopLocation
case|:
return|return
name|haikuStandardPath
argument_list|(
name|B_DESKTOP_DIRECTORY
argument_list|)
return|;
case|case
name|DocumentsLocation
case|:
comment|// fall through
case|case
name|PicturesLocation
case|:
case|case
name|MusicLocation
case|:
case|case
name|MoviesLocation
case|:
case|case
name|DownloadLocation
case|:
case|case
name|HomeLocation
case|:
return|return
name|haikuStandardPath
argument_list|(
name|B_USER_DIRECTORY
argument_list|)
return|;
case|case
name|FontsLocation
case|:
return|return
name|haikuStandardPath
argument_list|(
name|B_USER_NONPACKAGED_FONTS_DIRECTORY
argument_list|)
return|;
case|case
name|ApplicationsLocation
case|:
return|return
name|haikuStandardPath
argument_list|(
name|B_USER_NONPACKAGED_BIN_DIRECTORY
argument_list|)
return|;
case|case
name|TempLocation
case|:
return|return
name|haikuStandardPath
argument_list|(
name|B_SYSTEM_TEMP_DIRECTORY
argument_list|)
return|;
case|case
name|AppDataLocation
case|:
comment|// fall through
case|case
name|AppLocalDataLocation
case|:
return|return
name|haikuAppStandardPath
argument_list|(
name|B_USER_NONPACKAGED_DATA_DIRECTORY
argument_list|)
return|;
case|case
name|GenericDataLocation
case|:
return|return
name|haikuStandardPath
argument_list|(
name|B_USER_NONPACKAGED_DATA_DIRECTORY
argument_list|)
return|;
case|case
name|CacheLocation
case|:
return|return
name|haikuAppStandardPath
argument_list|(
name|B_USER_CACHE_DIRECTORY
argument_list|)
return|;
case|case
name|GenericCacheLocation
case|:
return|return
name|haikuStandardPath
argument_list|(
name|B_USER_CACHE_DIRECTORY
argument_list|)
return|;
case|case
name|ConfigLocation
case|:
comment|// fall through
case|case
name|AppConfigLocation
case|:
return|return
name|haikuAppStandardPath
argument_list|(
name|B_USER_SETTINGS_DIRECTORY
argument_list|)
return|;
case|case
name|GenericConfigLocation
case|:
return|return
name|haikuStandardPath
argument_list|(
name|B_USER_SETTINGS_DIRECTORY
argument_list|)
return|;
default|default:
return|return
name|QString
argument_list|()
return|;
block|}
block|}
end_function
begin_function
DECL|function|standardLocations
name|QStringList
name|QStandardPaths
operator|::
name|standardLocations
parameter_list|(
name|StandardLocation
name|type
parameter_list|)
block|{
name|QStringList
name|paths
decl_stmt|;
specifier|const
name|QString
name|writablePath
init|=
name|writableLocation
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|writablePath
operator|.
name|isEmpty
argument_list|()
condition|)
name|paths
operator|+=
name|writablePath
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DocumentsLocation
case|:
comment|// fall through
case|case
name|PicturesLocation
case|:
case|case
name|MusicLocation
case|:
case|case
name|MoviesLocation
case|:
case|case
name|DownloadLocation
case|:
case|case
name|HomeLocation
case|:
name|paths
operator|+=
name|haikuStandardPath
argument_list|(
name|B_USER_NONPACKAGED_DIRECTORY
argument_list|)
expr_stmt|;
break|break;
case|case
name|FontsLocation
case|:
name|paths
operator|+=
name|haikuStandardPaths
argument_list|(
name|B_FIND_PATH_FONTS_DIRECTORY
argument_list|)
expr_stmt|;
break|break;
case|case
name|ApplicationsLocation
case|:
name|paths
operator|+=
name|haikuStandardPaths
argument_list|(
name|B_FIND_PATH_BIN_DIRECTORY
argument_list|)
expr_stmt|;
name|paths
operator|+=
name|haikuStandardPaths
argument_list|(
name|B_FIND_PATH_APPS_DIRECTORY
argument_list|)
expr_stmt|;
break|break;
case|case
name|AppDataLocation
case|:
comment|// fall through
case|case
name|AppLocalDataLocation
case|:
name|paths
operator|+=
name|haikuAppStandardPaths
argument_list|(
name|B_FIND_PATH_DATA_DIRECTORY
argument_list|)
expr_stmt|;
break|break;
case|case
name|GenericDataLocation
case|:
name|paths
operator|+=
name|haikuStandardPaths
argument_list|(
name|B_FIND_PATH_DATA_DIRECTORY
argument_list|)
expr_stmt|;
break|break;
case|case
name|CacheLocation
case|:
name|paths
operator|+=
name|haikuAppStandardPath
argument_list|(
name|B_SYSTEM_CACHE_DIRECTORY
argument_list|)
expr_stmt|;
break|break;
case|case
name|GenericCacheLocation
case|:
name|paths
operator|+=
name|haikuStandardPath
argument_list|(
name|B_SYSTEM_CACHE_DIRECTORY
argument_list|)
expr_stmt|;
break|break;
case|case
name|ConfigLocation
case|:
comment|// fall through
case|case
name|AppConfigLocation
case|:
name|paths
operator|+=
name|haikuAppStandardPath
argument_list|(
name|B_SYSTEM_SETTINGS_DIRECTORY
argument_list|)
expr_stmt|;
break|break;
case|case
name|GenericConfigLocation
case|:
name|paths
operator|+=
name|haikuStandardPath
argument_list|(
name|B_SYSTEM_SETTINGS_DIRECTORY
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|paths
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_STANDARDPATHS
end_comment
end_unit
