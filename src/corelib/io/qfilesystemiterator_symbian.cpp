begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qfilesystemiterator_p.h"
end_include
begin_include
include|#
directive|include
file|"qfilesystemengine_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qcore_symbian_p.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QFileSystemIterator
name|QFileSystemIterator
operator|::
name|QFileSystemIterator
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|path
parameter_list|,
name|QDir
operator|::
name|Filters
name|filters
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|nameFilters
parameter_list|,
name|QDirIterator
operator|::
name|IteratorFlags
name|iteratorFlags
parameter_list|)
member_init_list|:
name|lastError
argument_list|(
name|KErrNone
argument_list|)
member_init_list|,
name|entryIndex
argument_list|(
operator|-
literal|1
argument_list|)
block|{
name|RFs
modifier|&
name|fs
init|=
name|qt_s60GetRFs
argument_list|()
decl_stmt|;
name|nativePath
operator|=
name|path
operator|.
name|nativeFilePath
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|nativePath
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
condition|)
name|nativePath
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|absPath
init|=
name|QFileSystemEngine
operator|::
name|absoluteName
argument_list|(
name|path
argument_list|)
operator|.
name|nativeFilePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|absPath
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
condition|)
name|absPath
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|pathLen
init|=
name|absPath
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|pathLen
operator|>
name|KMaxFileName
condition|)
block|{
name|lastError
operator|=
name|KErrBadName
expr_stmt|;
return|return;
block|}
comment|//set up server side filtering to reduce IPCs
comment|//RDir won't accept all valid name filters e.g. "*. bar"
if|if
condition|(
name|nameFilters
operator|.
name|count
argument_list|()
operator|==
literal|1
operator|&&
operator|!
operator|(
name|filters
operator|&
name|QDir
operator|::
name|AllDirs
operator|)
operator|&&
name|iteratorFlags
operator|==
name|QDirIterator
operator|::
name|NoIteratorFlags
operator|&&
name|pathLen
operator|+
name|nameFilters
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
operator|<=
name|KMaxFileName
condition|)
block|{
comment|//server side supports one mask - skip this for recursive mode or if only files should be filtered
name|absPath
operator|.
name|append
argument_list|(
name|nameFilters
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|TUint
name|symbianMask
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
name|filters
operator|&
name|QDir
operator|::
name|Dirs
operator|)
operator|||
operator|(
name|filters
operator|&
name|QDir
operator|::
name|AllDirs
operator|)
operator|||
operator|(
name|iteratorFlags
operator|&
name|QDirIterator
operator|::
name|Subdirectories
operator|)
condition|)
name|symbianMask
operator||=
name|KEntryAttDir
expr_stmt|;
comment|//include directories
if|if
condition|(
name|filters
operator|&
name|QDir
operator|::
name|Hidden
condition|)
name|symbianMask
operator||=
name|KEntryAttHidden
expr_stmt|;
if|if
condition|(
name|filters
operator|&
name|QDir
operator|::
name|System
condition|)
name|symbianMask
operator||=
name|KEntryAttSystem
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|filters
operator|&
name|QDir
operator|::
name|Files
operator|)
operator|==
literal|0
operator|)
operator|&&
name|symbianMask
operator|==
name|KEntryAttDir
condition|)
name|symbianMask
operator||=
name|KEntryAttMatchExclusive
expr_stmt|;
comment|//exclude non-directories
elseif|else
if|if
condition|(
name|symbianMask
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|(
name|filters
operator|&
name|QDir
operator|::
name|PermissionMask
operator|)
operator|==
name|QDir
operator|::
name|Writable
condition|)
name|symbianMask
operator|=
name|KEntryAttMatchExclude
operator||
name|KEntryAttReadOnly
expr_stmt|;
block|}
name|lastError
operator|=
name|dirHandle
operator|.
name|Open
argument_list|(
name|fs
argument_list|,
name|qt_QString2TPtrC
argument_list|(
name|absPath
argument_list|)
argument_list|,
name|symbianMask
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QFileSystemIterator
name|QFileSystemIterator
operator|::
name|~
name|QFileSystemIterator
parameter_list|()
block|{
name|dirHandle
operator|.
name|Close
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|advance
name|bool
name|QFileSystemIterator
operator|::
name|advance
parameter_list|(
name|QFileSystemEntry
modifier|&
name|fileEntry
parameter_list|,
name|QFileSystemMetaData
modifier|&
name|metaData
parameter_list|)
block|{
comment|//1st time, lastError is result of dirHandle.Open(), entries.Count() is 0 and entryIndex is -1 so initial read is triggered
comment|//subsequent times, read is triggered each time we reach the end of the entry list
comment|//final time, lastError is KErrEof so we don't need to read anymore.
operator|++
name|entryIndex
expr_stmt|;
if|if
condition|(
name|lastError
operator|==
name|KErrNone
operator|&&
name|entryIndex
operator|>=
name|entries
operator|.
name|Count
argument_list|()
condition|)
block|{
name|lastError
operator|=
name|dirHandle
operator|.
name|Read
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|entryIndex
operator|=
literal|0
expr_stmt|;
block|}
comment|//each call to advance() gets the next entry from the entry list.
comment|//from the final (or only) read call, KErrEof is returned together with a full buffer so we still need to go through the list
if|if
condition|(
operator|(
name|lastError
operator|==
name|KErrNone
operator|||
name|lastError
operator|==
name|KErrEof
operator|)
operator|&&
name|entryIndex
operator|<
name|entries
operator|.
name|Count
argument_list|()
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|entryIndex
operator|>=
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|TEntry
modifier|&
name|entry
argument_list|(
name|entries
index|[
name|entryIndex
index|]
argument_list|)
decl_stmt|;
name|fileEntry
operator|=
name|QFileSystemEntry
argument_list|(
name|nativePath
operator|+
name|qt_TDesC2QString
argument_list|(
name|entry
operator|.
name|iName
argument_list|)
argument_list|,
name|QFileSystemEntry
operator|::
name|FromNativePath
argument_list|()
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|fillFromTEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|//TODO: error reporting, to allow user to distinguish empty directory from error condition.
return|return
literal|false
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
