begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qfilesystemwatcher.h"
end_include
begin_include
include|#
directive|include
file|"qfilesystemwatcher_dnotify_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
end_ifndef
begin_include
include|#
directive|include
file|<qsocketnotifier.h>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<qtimer.h>
end_include
begin_include
include|#
directive|include
file|<qwaitcondition.h>
end_include
begin_include
include|#
directive|include
file|<qmutex.h>
end_include
begin_include
include|#
directive|include
file|<dirent.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_include
include|#
directive|include
file|<signal.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<time.h>
end_include
begin_include
include|#
directive|include
file|"private/qcore_unix_p.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_LINUXBASE
end_ifdef
begin_comment
comment|/* LSB doesn't standardize these */
end_comment
begin_define
DECL|macro|F_NOTIFY
define|#
directive|define
name|F_NOTIFY
value|1026
end_define
begin_define
DECL|macro|DN_ACCESS
define|#
directive|define
name|DN_ACCESS
value|0x00000001
end_define
begin_define
DECL|macro|DN_MODIFY
define|#
directive|define
name|DN_MODIFY
value|0x00000002
end_define
begin_define
DECL|macro|DN_CREATE
define|#
directive|define
name|DN_CREATE
value|0x00000004
end_define
begin_define
DECL|macro|DN_DELETE
define|#
directive|define
name|DN_DELETE
value|0x00000008
end_define
begin_define
DECL|macro|DN_RENAME
define|#
directive|define
name|DN_RENAME
value|0x00000010
end_define
begin_define
DECL|macro|DN_ATTRIB
define|#
directive|define
name|DN_ATTRIB
value|0x00000020
end_define
begin_define
DECL|macro|DN_MULTISHOT
define|#
directive|define
name|DN_MULTISHOT
value|0x80000000
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|qfswd_fileChanged_pipe
specifier|static
name|int
name|qfswd_fileChanged_pipe
index|[
literal|2
index|]
decl_stmt|;
end_decl_stmt
begin_function_decl
DECL|variable|qfswd_old_sigio_handler
specifier|static
name|void
function_decl|(
modifier|*
name|qfswd_old_sigio_handler
function_decl|)
parameter_list|(
name|int
parameter_list|)
function_decl|=
literal|0
function_decl|;
end_function_decl
begin_function_decl
DECL|variable|qfswd_old_sigio_action
specifier|static
name|void
function_decl|(
modifier|*
name|qfswd_old_sigio_action
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|siginfo_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|=
literal|0
function_decl|;
end_function_decl
begin_function
DECL|function|qfswd_sigio_monitor
specifier|static
name|void
name|qfswd_sigio_monitor
parameter_list|(
name|int
name|signum
parameter_list|,
name|siginfo_t
modifier|*
name|i
parameter_list|,
name|void
modifier|*
name|v
parameter_list|)
block|{
name|qt_safe_write
argument_list|(
name|qfswd_fileChanged_pipe
index|[
literal|1
index|]
argument_list|,
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
operator|&
name|i
operator|->
name|si_fd
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|int
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|qfswd_old_sigio_handler
operator|&&
name|qfswd_old_sigio_handler
operator|!=
name|SIG_IGN
condition|)
name|qfswd_old_sigio_handler
argument_list|(
name|signum
argument_list|)
expr_stmt|;
if|if
condition|(
name|qfswd_old_sigio_action
condition|)
name|qfswd_old_sigio_action
argument_list|(
name|signum
argument_list|,
name|i
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QDnotifySignalThread
class|class
name|QDnotifySignalThread
super|:
specifier|public
name|QThread
block|{
name|Q_OBJECT
public|public:
name|QDnotifySignalThread
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|QDnotifySignalThread
parameter_list|()
destructor_decl|;
name|void
name|startNotify
parameter_list|()
function_decl|;
specifier|virtual
name|void
name|run
parameter_list|()
function_decl|;
signals|signals:
name|void
name|fdChanged
parameter_list|(
name|int
parameter_list|)
function_decl|;
protected|protected:
specifier|virtual
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
function_decl|;
private|private
name|slots
private|:
name|void
name|readFromDnotify
parameter_list|()
function_decl|;
private|private:
DECL|member|mutex
name|QMutex
name|mutex
decl_stmt|;
DECL|member|wait
name|QWaitCondition
name|wait
decl_stmt|;
DECL|member|isExecing
name|bool
name|isExecing
decl_stmt|;
block|}
class|;
end_class
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QDnotifySignalThread
argument_list|,
argument|dnotifySignal
argument_list|)
end_macro
begin_constructor
DECL|function|QDnotifySignalThread
name|QDnotifySignalThread
operator|::
name|QDnotifySignalThread
parameter_list|()
member_init_list|:
name|isExecing
argument_list|(
literal|false
argument_list|)
block|{
name|moveToThread
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|qt_safe_pipe
argument_list|(
name|qfswd_fileChanged_pipe
argument_list|,
name|O_NONBLOCK
argument_list|)
expr_stmt|;
name|struct
name|sigaction
name|oldAction
decl_stmt|;
name|struct
name|sigaction
name|action
decl_stmt|;
name|memset
argument_list|(
operator|&
name|action
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|action
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|sa_sigaction
operator|=
name|qfswd_sigio_monitor
expr_stmt|;
name|action
operator|.
name|sa_flags
operator|=
name|SA_SIGINFO
expr_stmt|;
operator|::
name|sigaction
argument_list|(
name|SIGIO
argument_list|,
operator|&
name|action
argument_list|,
operator|&
name|oldAction
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|oldAction
operator|.
name|sa_flags
operator|&
name|SA_SIGINFO
operator|)
condition|)
name|qfswd_old_sigio_handler
operator|=
name|oldAction
operator|.
name|sa_handler
expr_stmt|;
else|else
name|qfswd_old_sigio_action
operator|=
name|oldAction
operator|.
name|sa_sigaction
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QDnotifySignalThread
name|QDnotifySignalThread
operator|::
name|~
name|QDnotifySignalThread
parameter_list|()
block|{
if|if
condition|(
name|isRunning
argument_list|()
condition|)
block|{
name|quit
argument_list|()
expr_stmt|;
name|QThread
operator|::
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|event
name|bool
name|QDnotifySignalThread
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|User
condition|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|isExecing
operator|=
literal|true
expr_stmt|;
name|wait
operator|.
name|wakeAll
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|QThread
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|startNotify
name|void
name|QDnotifySignalThread
operator|::
name|startNotify
parameter_list|()
block|{
comment|// Note: All this fancy waiting for the thread to enter its event
comment|// loop is to avoid nasty messages at app shutdown when the
comment|// QDnotifySignalThread singleton is deleted
name|start
argument_list|()
expr_stmt|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|isExecing
condition|)
name|wait
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|)
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|run
name|void
name|QDnotifySignalThread
operator|::
name|run
parameter_list|()
block|{
name|QSocketNotifier
name|sn
argument_list|(
name|qfswd_fileChanged_pipe
index|[
literal|0
index|]
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|connect
argument_list|(
operator|&
name|sn
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|readFromDnotify
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|postEvent
argument_list|(
name|this
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|exec
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readFromDnotify
name|void
name|QDnotifySignalThread
operator|::
name|readFromDnotify
parameter_list|()
block|{
name|int
name|fd
decl_stmt|;
name|int
name|readrv
init|=
name|qt_safe_read
argument_list|(
name|qfswd_fileChanged_pipe
index|[
literal|0
index|]
argument_list|,
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|int
argument_list|)
argument_list|)
decl_stmt|;
comment|// Only expect EAGAIN or EINTR.  Other errors are assumed to be impossible.
if|if
condition|(
name|readrv
operator|!=
operator|-
literal|1
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|readrv
operator|==
sizeof|sizeof
argument_list|(
name|int
argument_list|)
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|readrv
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|==
name|fd
condition|)
name|quit
argument_list|()
expr_stmt|;
else|else
emit|emit
name|fdChanged
argument_list|(
name|fd
argument_list|)
emit|;
block|}
block|}
end_function
begin_constructor
DECL|function|QDnotifyFileSystemWatcherEngine
name|QDnotifyFileSystemWatcherEngine
operator|::
name|QDnotifyFileSystemWatcherEngine
parameter_list|()
block|{
name|QObject
operator|::
name|connect
argument_list|(
name|dnotifySignal
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|fdChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|refresh
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QDnotifyFileSystemWatcherEngine
name|QDnotifyFileSystemWatcherEngine
operator|::
name|~
name|QDnotifyFileSystemWatcherEngine
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
for|for
control|(
name|QHash
argument_list|<
name|int
argument_list|,
name|Directory
argument_list|>
operator|::
name|ConstIterator
name|iter
init|=
name|fdToDirectory
operator|.
name|constBegin
argument_list|()
init|;
name|iter
operator|!=
name|fdToDirectory
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|iter
control|)
block|{
name|qt_safe_close
argument_list|(
name|iter
operator|->
name|fd
argument_list|)
expr_stmt|;
if|if
condition|(
name|iter
operator|->
name|parentFd
condition|)
name|qt_safe_close
argument_list|(
name|iter
operator|->
name|parentFd
argument_list|)
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|create
name|QDnotifyFileSystemWatcherEngine
modifier|*
name|QDnotifyFileSystemWatcherEngine
operator|::
name|create
parameter_list|()
block|{
return|return
operator|new
name|QDnotifyFileSystemWatcherEngine
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|run
name|void
name|QDnotifyFileSystemWatcherEngine
operator|::
name|run
parameter_list|()
block|{
name|qFatal
argument_list|(
literal|"QDnotifyFileSystemWatcherEngine thread should not be run"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addPaths
name|QStringList
name|QDnotifyFileSystemWatcherEngine
operator|::
name|addPaths
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|paths
parameter_list|,
name|QStringList
modifier|*
name|files
parameter_list|,
name|QStringList
modifier|*
name|directories
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QStringList
name|p
init|=
name|paths
decl_stmt|;
name|QMutableListIterator
argument_list|<
name|QString
argument_list|>
name|it
argument_list|(
name|p
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QString
name|path
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fi
operator|.
name|exists
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|bool
name|isDir
init|=
name|fi
operator|.
name|isDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|isDir
operator|&&
name|directories
operator|->
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
continue|continue;
comment|// Skip monitored directories
block|}
elseif|else
if|if
condition|(
operator|!
name|isDir
operator|&&
name|files
operator|->
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
continue|continue;
comment|// Skip monitored files
block|}
if|if
condition|(
operator|!
name|isDir
condition|)
name|path
operator|=
name|fi
operator|.
name|canonicalPath
argument_list|()
expr_stmt|;
comment|// Locate the directory entry (creating if needed)
name|int
name|fd
init|=
name|pathToFD
index|[
name|path
index|]
decl_stmt|;
if|if
condition|(
name|fd
operator|==
literal|0
condition|)
block|{
name|QT_DIR
modifier|*
name|d
init|=
name|QT_OPENDIR
argument_list|(
name|path
operator|.
name|toUtf8
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
condition|)
continue|continue;
comment|// Could not open directory
name|QT_DIR
modifier|*
name|parent
init|=
literal|0
decl_stmt|;
name|QDir
name|parentDir
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parentDir
operator|.
name|isRoot
argument_list|()
condition|)
block|{
name|parentDir
operator|.
name|cdUp
argument_list|()
expr_stmt|;
name|parent
operator|=
name|QT_OPENDIR
argument_list|(
name|parentDir
operator|.
name|path
argument_list|()
operator|.
name|toUtf8
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parent
condition|)
block|{
name|QT_CLOSEDIR
argument_list|(
name|d
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|fd
operator|=
name|qt_safe_dup
argument_list|(
operator|::
name|dirfd
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|parentFd
init|=
name|parent
condition|?
name|qt_safe_dup
argument_list|(
operator|::
name|dirfd
argument_list|(
name|parent
argument_list|)
argument_list|)
else|:
literal|0
decl_stmt|;
name|QT_CLOSEDIR
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
condition|)
name|QT_CLOSEDIR
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|fd
argument_list|)
expr_stmt|;
if|if
condition|(
operator|::
name|fcntl
argument_list|(
name|fd
argument_list|,
name|F_SETSIG
argument_list|,
name|SIGIO
argument_list|)
operator|||
operator|::
name|fcntl
argument_list|(
name|fd
argument_list|,
name|F_NOTIFY
argument_list|,
name|DN_MODIFY
operator||
name|DN_CREATE
operator||
name|DN_DELETE
operator||
name|DN_RENAME
operator||
name|DN_ATTRIB
operator||
name|DN_MULTISHOT
argument_list|)
operator|||
operator|(
name|parent
operator|&&
operator|::
name|fcntl
argument_list|(
name|parentFd
argument_list|,
name|F_SETSIG
argument_list|,
name|SIGIO
argument_list|)
operator|)
operator|||
operator|(
name|parent
operator|&&
operator|::
name|fcntl
argument_list|(
name|parentFd
argument_list|,
name|F_NOTIFY
argument_list|,
name|DN_DELETE
operator||
name|DN_RENAME
operator||
name|DN_MULTISHOT
argument_list|)
operator|)
condition|)
block|{
continue|continue;
comment|// Could not set appropriate flags
block|}
name|Directory
name|dir
decl_stmt|;
name|dir
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|dir
operator|.
name|fd
operator|=
name|fd
expr_stmt|;
name|dir
operator|.
name|parentFd
operator|=
name|parentFd
expr_stmt|;
name|fdToDirectory
operator|.
name|insert
argument_list|(
name|fd
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|pathToFD
operator|.
name|insert
argument_list|(
name|path
argument_list|,
name|fd
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentFd
condition|)
name|parentToFD
operator|.
name|insert
argument_list|(
name|parentFd
argument_list|,
name|fd
argument_list|)
expr_stmt|;
block|}
name|Directory
modifier|&
name|directory
init|=
name|fdToDirectory
index|[
name|fd
index|]
decl_stmt|;
if|if
condition|(
name|isDir
condition|)
block|{
name|directory
operator|.
name|isMonitored
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|Directory
operator|::
name|File
name|file
decl_stmt|;
name|file
operator|.
name|path
operator|=
name|fi
operator|.
name|filePath
argument_list|()
expr_stmt|;
name|file
operator|.
name|lastWrite
operator|=
name|fi
operator|.
name|lastModified
argument_list|()
expr_stmt|;
name|directory
operator|.
name|files
operator|.
name|append
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|pathToFD
operator|.
name|insert
argument_list|(
name|fi
operator|.
name|filePath
argument_list|()
argument_list|,
name|fd
argument_list|)
expr_stmt|;
block|}
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|isDir
condition|)
block|{
name|directories
operator|->
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|files
operator|->
name|append
argument_list|(
name|fi
operator|.
name|filePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|dnotifySignal
argument_list|()
operator|->
name|startNotify
argument_list|()
expr_stmt|;
return|return
name|p
return|;
block|}
end_function
begin_function
DECL|function|removePaths
name|QStringList
name|QDnotifyFileSystemWatcherEngine
operator|::
name|removePaths
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|paths
parameter_list|,
name|QStringList
modifier|*
name|files
parameter_list|,
name|QStringList
modifier|*
name|directories
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QStringList
name|p
init|=
name|paths
decl_stmt|;
name|QMutableListIterator
argument_list|<
name|QString
argument_list|>
name|it
argument_list|(
name|p
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QString
name|path
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|fd
init|=
name|pathToFD
operator|.
name|take
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fd
condition|)
continue|continue;
name|Directory
modifier|&
name|directory
init|=
name|fdToDirectory
index|[
name|fd
index|]
decl_stmt|;
name|bool
name|isDir
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|directory
operator|.
name|path
operator|==
name|path
condition|)
block|{
name|isDir
operator|=
literal|true
expr_stmt|;
name|directory
operator|.
name|isMonitored
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|directory
operator|.
name|files
operator|.
name|count
argument_list|()
condition|;
operator|++
name|ii
control|)
block|{
if|if
condition|(
name|directory
operator|.
name|files
operator|.
name|at
argument_list|(
name|ii
argument_list|)
operator|.
name|path
operator|==
name|path
condition|)
block|{
name|directory
operator|.
name|files
operator|.
name|removeAt
argument_list|(
name|ii
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|directory
operator|.
name|isMonitored
operator|&&
name|directory
operator|.
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// No longer needed
name|qt_safe_close
argument_list|(
name|directory
operator|.
name|fd
argument_list|)
expr_stmt|;
name|pathToFD
operator|.
name|remove
argument_list|(
name|directory
operator|.
name|path
argument_list|)
expr_stmt|;
name|fdToDirectory
operator|.
name|remove
argument_list|(
name|fd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isDir
condition|)
block|{
name|directories
operator|->
name|removeAll
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|files
operator|->
name|removeAll
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
return|return
name|p
return|;
block|}
end_function
begin_function
DECL|function|refresh
name|void
name|QDnotifyFileSystemWatcherEngine
operator|::
name|refresh
parameter_list|(
name|int
name|fd
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|bool
name|wasParent
init|=
literal|false
decl_stmt|;
name|QHash
argument_list|<
name|int
argument_list|,
name|Directory
argument_list|>
operator|::
name|Iterator
name|iter
init|=
name|fdToDirectory
operator|.
name|find
argument_list|(
name|fd
argument_list|)
decl_stmt|;
if|if
condition|(
name|iter
operator|==
name|fdToDirectory
operator|.
name|end
argument_list|()
condition|)
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|Iterator
name|pIter
init|=
name|parentToFD
operator|.
name|find
argument_list|(
name|fd
argument_list|)
decl_stmt|;
if|if
condition|(
name|pIter
operator|==
name|parentToFD
operator|.
name|end
argument_list|()
condition|)
return|return;
name|iter
operator|=
name|fdToDirectory
operator|.
name|find
argument_list|(
operator|*
name|pIter
argument_list|)
expr_stmt|;
if|if
condition|(
name|iter
operator|==
name|fdToDirectory
operator|.
name|end
argument_list|()
condition|)
return|return;
name|wasParent
operator|=
literal|true
expr_stmt|;
block|}
name|Directory
modifier|&
name|directory
init|=
operator|*
name|iter
decl_stmt|;
if|if
condition|(
operator|!
name|wasParent
condition|)
block|{
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|directory
operator|.
name|files
operator|.
name|count
argument_list|()
condition|;
operator|++
name|ii
control|)
block|{
name|Directory
operator|::
name|File
modifier|&
name|file
init|=
name|directory
operator|.
name|files
index|[
name|ii
index|]
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|updateInfo
argument_list|()
condition|)
block|{
comment|// Emit signal
name|QString
name|filePath
init|=
name|file
operator|.
name|path
decl_stmt|;
name|bool
name|removed
init|=
operator|!
name|QFileInfo
argument_list|(
name|filePath
argument_list|)
operator|.
name|exists
argument_list|()
decl_stmt|;
if|if
condition|(
name|removed
condition|)
block|{
name|directory
operator|.
name|files
operator|.
name|removeAt
argument_list|(
name|ii
argument_list|)
expr_stmt|;
operator|--
name|ii
expr_stmt|;
block|}
emit|emit
name|fileChanged
argument_list|(
name|filePath
argument_list|,
name|removed
argument_list|)
emit|;
block|}
block|}
block|}
if|if
condition|(
name|directory
operator|.
name|isMonitored
condition|)
block|{
comment|// Emit signal
name|bool
name|removed
init|=
operator|!
name|QFileInfo
argument_list|(
name|directory
operator|.
name|path
argument_list|)
operator|.
name|exists
argument_list|()
decl_stmt|;
name|QString
name|path
init|=
name|directory
operator|.
name|path
decl_stmt|;
if|if
condition|(
name|removed
condition|)
name|directory
operator|.
name|isMonitored
operator|=
literal|false
expr_stmt|;
emit|emit
name|directoryChanged
argument_list|(
name|path
argument_list|,
name|removed
argument_list|)
emit|;
block|}
if|if
condition|(
operator|!
name|directory
operator|.
name|isMonitored
operator|&&
name|directory
operator|.
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qt_safe_close
argument_list|(
name|directory
operator|.
name|fd
argument_list|)
expr_stmt|;
if|if
condition|(
name|directory
operator|.
name|parentFd
condition|)
block|{
name|qt_safe_close
argument_list|(
name|directory
operator|.
name|parentFd
argument_list|)
expr_stmt|;
name|parentToFD
operator|.
name|remove
argument_list|(
name|directory
operator|.
name|parentFd
argument_list|)
expr_stmt|;
block|}
name|fdToDirectory
operator|.
name|erase
argument_list|(
name|iter
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|stop
name|void
name|QDnotifyFileSystemWatcherEngine
operator|::
name|stop
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|updateInfo
name|bool
name|QDnotifyFileSystemWatcherEngine
operator|::
name|Directory
operator|::
name|File
operator|::
name|updateInfo
parameter_list|()
block|{
name|QFileInfo
name|fi
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QDateTime
name|nLastWrite
init|=
name|fi
operator|.
name|lastModified
argument_list|()
decl_stmt|;
name|uint
name|nOwnerId
init|=
name|fi
operator|.
name|ownerId
argument_list|()
decl_stmt|;
name|uint
name|nGroupId
init|=
name|fi
operator|.
name|groupId
argument_list|()
decl_stmt|;
name|QFile
operator|::
name|Permissions
name|nPermissions
init|=
name|fi
operator|.
name|permissions
argument_list|()
decl_stmt|;
if|if
condition|(
name|nLastWrite
operator|!=
name|lastWrite
operator|||
name|nOwnerId
operator|!=
name|ownerId
operator|||
name|nGroupId
operator|!=
name|groupId
operator|||
name|nPermissions
operator|!=
name|permissions
condition|)
block|{
name|ownerId
operator|=
name|nOwnerId
expr_stmt|;
name|groupId
operator|=
name|nGroupId
expr_stmt|;
name|permissions
operator|=
name|nPermissions
expr_stmt|;
name|lastWrite
operator|=
name|nLastWrite
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qfilesystemwatcher_dnotify.moc"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_FILESYSTEMWATCHER
end_comment
end_unit
