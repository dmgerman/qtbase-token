begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"private/qabstractfileengine_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qfsfileengine_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qcore_unix_p.h"
end_include
begin_include
include|#
directive|include
file|"qfilesystementry_p.h"
end_include
begin_include
include|#
directive|include
file|"qfilesystemengine_p.h"
end_include
begin_include
include|#
directive|include
file|"qcoreapplication.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FSFILEENGINE
end_ifndef
begin_include
include|#
directive|include
file|"qfile.h"
end_include
begin_include
include|#
directive|include
file|"qdir.h"
end_include
begin_include
include|#
directive|include
file|"qdatetime.h"
end_include
begin_include
include|#
directive|include
file|"qvarlengtharray.h"
end_include
begin_include
include|#
directive|include
file|<sys/mman.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QWS
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
end_if
begin_include
include|#
directive|include
file|<private/qcore_mac_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*!     \internal      Returns the stdlib open string corresponding to a QIODevice::OpenMode. */
DECL|function|openModeToFopenMode
specifier|static
specifier|inline
name|QByteArray
name|openModeToFopenMode
parameter_list|(
name|QIODevice
operator|::
name|OpenMode
name|flags
parameter_list|,
specifier|const
name|QFileSystemEntry
modifier|&
name|fileEntry
parameter_list|,
name|QFileSystemMetaData
modifier|&
name|metaData
parameter_list|)
block|{
name|QByteArray
name|mode
decl_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
name|QIODevice
operator|::
name|ReadOnly
operator|)
operator|&&
operator|!
operator|(
name|flags
operator|&
name|QIODevice
operator|::
name|Truncate
operator|)
condition|)
block|{
name|mode
operator|=
literal|"rb"
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|QIODevice
operator|::
name|WriteOnly
condition|)
block|{
name|metaData
operator|.
name|clearFlags
argument_list|(
name|QFileSystemMetaData
operator|::
name|FileType
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fileEntry
operator|.
name|isEmpty
argument_list|()
operator|&&
name|QFileSystemEngine
operator|::
name|fillMetaData
argument_list|(
name|fileEntry
argument_list|,
name|metaData
argument_list|,
name|QFileSystemMetaData
operator|::
name|FileType
argument_list|)
operator|&&
name|metaData
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|mode
operator|+=
literal|'+'
expr_stmt|;
block|}
else|else
block|{
name|mode
operator|=
literal|"wb+"
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|flags
operator|&
name|QIODevice
operator|::
name|WriteOnly
condition|)
block|{
name|mode
operator|=
literal|"wb"
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|QIODevice
operator|::
name|ReadOnly
condition|)
name|mode
operator|+=
literal|'+'
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|QIODevice
operator|::
name|Append
condition|)
block|{
name|mode
operator|=
literal|"ab"
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|QIODevice
operator|::
name|ReadOnly
condition|)
name|mode
operator|+=
literal|'+'
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|__GLIBC__
argument_list|)
operator|&&
operator|(
name|__GLIBC__
operator|*
literal|0x100
operator|+
name|__GLIBC_MINOR__
operator|)
operator|>=
literal|0x0207
comment|// must be glibc>= 2.7
name|mode
operator|+=
literal|'e'
expr_stmt|;
endif|#
directive|endif
return|return
name|mode
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Returns the stdio open flags corresponding to a QIODevice::OpenMode. */
end_comment
begin_function
DECL|function|openModeToOpenFlags
specifier|static
specifier|inline
name|int
name|openModeToOpenFlags
parameter_list|(
name|QIODevice
operator|::
name|OpenMode
name|mode
parameter_list|)
block|{
name|int
name|oflags
init|=
name|QT_OPEN_RDONLY
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_LARGEFILE_SUPPORT
name|oflags
operator||=
name|QT_OPEN_LARGEFILE
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|(
name|mode
operator|&
name|QFile
operator|::
name|ReadWrite
operator|)
operator|==
name|QFile
operator|::
name|ReadWrite
condition|)
block|{
name|oflags
operator|=
name|QT_OPEN_RDWR
operator||
name|QT_OPEN_CREAT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|&
name|QFile
operator|::
name|WriteOnly
condition|)
block|{
name|oflags
operator|=
name|QT_OPEN_WRONLY
operator||
name|QT_OPEN_CREAT
expr_stmt|;
block|}
if|if
condition|(
name|mode
operator|&
name|QFile
operator|::
name|Append
condition|)
block|{
name|oflags
operator||=
name|QT_OPEN_APPEND
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|&
name|QFile
operator|::
name|WriteOnly
condition|)
block|{
if|if
condition|(
operator|(
name|mode
operator|&
name|QFile
operator|::
name|Truncate
operator|)
operator|||
operator|!
operator|(
name|mode
operator|&
name|QFile
operator|::
name|ReadOnly
operator|)
condition|)
name|oflags
operator||=
name|QT_OPEN_TRUNC
expr_stmt|;
block|}
return|return
name|oflags
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Sets the file descriptor to close on exec. That is, the file     descriptor is not inherited by child processes. */
end_comment
begin_function
DECL|function|setCloseOnExec
specifier|static
specifier|inline
name|bool
name|setCloseOnExec
parameter_list|(
name|int
name|fd
parameter_list|)
block|{
return|return
name|fd
operator|!=
operator|-
literal|1
operator|&&
name|fcntl
argument_list|(
name|fd
argument_list|,
name|F_SETFD
argument_list|,
name|FD_CLOEXEC
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|msgOpenDirectory
specifier|static
specifier|inline
name|QString
name|msgOpenDirectory
parameter_list|()
block|{
specifier|const
name|char
name|message
index|[]
init|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIODevice"
argument_list|,
literal|"file to open is a directory"
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
return|return
name|QIODevice
operator|::
name|tr
argument_list|(
name|message
argument_list|)
return|;
else|#
directive|else
return|return
name|QLatin1String
argument_list|(
name|message
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|nativeOpen
name|bool
name|QFSFileEnginePrivate
operator|::
name|nativeOpen
parameter_list|(
name|QIODevice
operator|::
name|OpenMode
name|openMode
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QFSFileEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|openMode
operator|&
name|QIODevice
operator|::
name|Unbuffered
condition|)
block|{
name|int
name|flags
init|=
name|openModeToOpenFlags
argument_list|(
name|openMode
argument_list|)
decl_stmt|;
comment|// Try to open the file in unbuffered mode.
do|do
block|{
name|fd
operator|=
name|QT_OPEN
argument_list|(
name|fileEntry
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|flags
argument_list|,
literal|0666
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|fd
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|==
name|EINTR
condition|)
do|;
comment|// On failure, return and report the error.
if|if
condition|(
name|fd
operator|==
operator|-
literal|1
condition|)
block|{
name|q
operator|->
name|setError
argument_list|(
name|errno
operator|==
name|EMFILE
condition|?
name|QFile
operator|::
name|ResourceError
else|:
name|QFile
operator|::
name|OpenError
argument_list|,
name|qt_error_string
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|openMode
operator|&
name|QIODevice
operator|::
name|WriteOnly
operator|)
condition|)
block|{
comment|// we don't need this check if we tried to open for writing because then
comment|// we had received EISDIR anyway.
if|if
condition|(
name|QFileSystemEngine
operator|::
name|fillMetaData
argument_list|(
name|fd
argument_list|,
name|metaData
argument_list|)
operator|&&
name|metaData
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|q
operator|->
name|setError
argument_list|(
name|QFile
operator|::
name|OpenError
argument_list|,
name|msgOpenDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|QT_CLOSE
argument_list|(
name|fd
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// Seek to the end when in Append mode.
if|if
condition|(
name|flags
operator|&
name|QFile
operator|::
name|Append
condition|)
block|{
name|int
name|ret
decl_stmt|;
do|do
block|{
name|ret
operator|=
name|QT_LSEEK
argument_list|(
name|fd
argument_list|,
literal|0
argument_list|,
name|SEEK_END
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|ret
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|==
name|EINTR
condition|)
do|;
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
condition|)
block|{
name|q
operator|->
name|setError
argument_list|(
name|errno
operator|==
name|EMFILE
condition|?
name|QFile
operator|::
name|ResourceError
else|:
name|QFile
operator|::
name|OpenError
argument_list|,
name|qt_error_string
argument_list|(
name|int
argument_list|(
name|errno
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|fh
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|QByteArray
name|fopenMode
init|=
name|openModeToFopenMode
argument_list|(
name|openMode
argument_list|,
name|fileEntry
argument_list|,
name|metaData
argument_list|)
decl_stmt|;
comment|// Try to open the file in buffered mode.
do|do
block|{
name|fh
operator|=
name|QT_FOPEN
argument_list|(
name|fileEntry
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|fopenMode
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|fh
operator|&&
name|errno
operator|==
name|EINTR
condition|)
do|;
comment|// On failure, return and report the error.
if|if
condition|(
operator|!
name|fh
condition|)
block|{
name|q
operator|->
name|setError
argument_list|(
name|errno
operator|==
name|EMFILE
condition|?
name|QFile
operator|::
name|ResourceError
else|:
name|QFile
operator|::
name|OpenError
argument_list|,
name|qt_error_string
argument_list|(
name|int
argument_list|(
name|errno
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|openMode
operator|&
name|QIODevice
operator|::
name|WriteOnly
operator|)
condition|)
block|{
comment|// we don't need this check if we tried to open for writing because then
comment|// we had received EISDIR anyway.
if|if
condition|(
name|QFileSystemEngine
operator|::
name|fillMetaData
argument_list|(
name|QT_FILENO
argument_list|(
name|fh
argument_list|)
argument_list|,
name|metaData
argument_list|)
operator|&&
name|metaData
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|q
operator|->
name|setError
argument_list|(
name|QFile
operator|::
name|OpenError
argument_list|,
name|msgOpenDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|fclose
argument_list|(
name|fh
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|setCloseOnExec
argument_list|(
name|fileno
argument_list|(
name|fh
argument_list|)
argument_list|)
expr_stmt|;
comment|// ignore failure
comment|// Seek to the end when in Append mode.
if|if
condition|(
name|openMode
operator|&
name|QIODevice
operator|::
name|Append
condition|)
block|{
name|int
name|ret
decl_stmt|;
do|do
block|{
name|ret
operator|=
name|QT_FSEEK
argument_list|(
name|fh
argument_list|,
literal|0
argument_list|,
name|SEEK_END
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|ret
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|==
name|EINTR
condition|)
do|;
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
condition|)
block|{
name|q
operator|->
name|setError
argument_list|(
name|errno
operator|==
name|EMFILE
condition|?
name|QFile
operator|::
name|ResourceError
else|:
name|QFile
operator|::
name|OpenError
argument_list|,
name|qt_error_string
argument_list|(
name|int
argument_list|(
name|errno
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|fd
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|closeFileHandle
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|nativeClose
name|bool
name|QFSFileEnginePrivate
operator|::
name|nativeClose
parameter_list|()
block|{
return|return
name|closeFdFh
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \internal  */
end_comment
begin_function
DECL|function|nativeFlush
name|bool
name|QFSFileEnginePrivate
operator|::
name|nativeFlush
parameter_list|()
block|{
return|return
name|fh
condition|?
name|flushFh
argument_list|()
else|:
name|fd
operator|!=
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     \since 5.1 */
end_comment
begin_function
DECL|function|nativeSyncToDisk
name|bool
name|QFSFileEnginePrivate
operator|::
name|nativeSyncToDisk
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QFSFileEngine
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|_POSIX_SYNCHRONIZED_IO
argument_list|)
operator|&&
name|_POSIX_SYNCHRONIZED_IO
operator|>
literal|0
specifier|const
name|int
name|ret
init|=
name|fdatasync
argument_list|(
name|nativeHandle
argument_list|()
argument_list|)
decl_stmt|;
else|#
directive|else
specifier|const
name|int
name|ret
init|=
name|fsync
argument_list|(
name|nativeHandle
argument_list|()
argument_list|)
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
name|q
operator|->
name|setError
argument_list|(
name|QFile
operator|::
name|WriteError
argument_list|,
name|qt_error_string
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
operator|==
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|nativeRead
name|qint64
name|QFSFileEnginePrivate
operator|::
name|nativeRead
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|len
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QFSFileEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|fh
operator|&&
name|nativeIsSequential
argument_list|()
condition|)
block|{
name|size_t
name|readBytes
init|=
literal|0
decl_stmt|;
name|int
name|oldFlags
init|=
name|fcntl
argument_list|(
name|QT_FILENO
argument_list|(
name|fh
argument_list|)
argument_list|,
name|F_GETFL
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
comment|// Unix: Make the underlying file descriptor non-blocking
if|if
condition|(
operator|(
name|oldFlags
operator|&
name|O_NONBLOCK
operator|)
operator|==
literal|0
condition|)
name|fcntl
argument_list|(
name|QT_FILENO
argument_list|(
name|fh
argument_list|)
argument_list|,
name|F_SETFL
argument_list|,
name|oldFlags
operator||
name|O_NONBLOCK
argument_list|)
expr_stmt|;
comment|// Cross platform stdlib read
name|size_t
name|read
init|=
literal|0
decl_stmt|;
do|do
block|{
name|read
operator|=
name|fread
argument_list|(
name|data
operator|+
name|readBytes
argument_list|,
literal|1
argument_list|,
name|size_t
argument_list|(
name|len
operator|-
name|readBytes
argument_list|)
argument_list|,
name|fh
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|read
operator|==
literal|0
operator|&&
operator|!
name|feof
argument_list|(
name|fh
argument_list|)
operator|&&
name|errno
operator|==
name|EINTR
condition|)
do|;
if|if
condition|(
name|read
operator|>
literal|0
condition|)
block|{
name|readBytes
operator|+=
name|read
expr_stmt|;
break|break;
block|}
else|else
block|{
if|if
condition|(
name|readBytes
condition|)
break|break;
name|readBytes
operator|=
name|read
expr_stmt|;
block|}
comment|// Unix: Restore the blocking state of the underlying socket
if|if
condition|(
operator|(
name|oldFlags
operator|&
name|O_NONBLOCK
operator|)
operator|==
literal|0
condition|)
block|{
name|fcntl
argument_list|(
name|QT_FILENO
argument_list|(
name|fh
argument_list|)
argument_list|,
name|F_SETFL
argument_list|,
name|oldFlags
argument_list|)
expr_stmt|;
if|if
condition|(
name|readBytes
operator|==
literal|0
condition|)
block|{
name|int
name|readByte
init|=
literal|0
decl_stmt|;
do|do
block|{
name|readByte
operator|=
name|fgetc
argument_list|(
name|fh
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|readByte
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|==
name|EINTR
condition|)
do|;
if|if
condition|(
name|readByte
operator|!=
operator|-
literal|1
condition|)
block|{
operator|*
name|data
operator|=
name|uchar
argument_list|(
name|readByte
argument_list|)
expr_stmt|;
name|readBytes
operator|+=
literal|1
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
block|}
comment|// Unix: Restore the blocking state of the underlying socket
if|if
condition|(
operator|(
name|oldFlags
operator|&
name|O_NONBLOCK
operator|)
operator|==
literal|0
condition|)
block|{
name|fcntl
argument_list|(
name|QT_FILENO
argument_list|(
name|fh
argument_list|)
argument_list|,
name|F_SETFL
argument_list|,
name|oldFlags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|readBytes
operator|==
literal|0
operator|&&
operator|!
name|feof
argument_list|(
name|fh
argument_list|)
condition|)
block|{
comment|// if we didn't read anything and we're not at EOF, it must be an error
name|q
operator|->
name|setError
argument_list|(
name|QFile
operator|::
name|ReadError
argument_list|,
name|qt_error_string
argument_list|(
name|int
argument_list|(
name|errno
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|readBytes
return|;
block|}
return|return
name|readFdFh
argument_list|(
name|data
argument_list|,
name|len
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|nativeReadLine
name|qint64
name|QFSFileEnginePrivate
operator|::
name|nativeReadLine
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxlen
parameter_list|)
block|{
return|return
name|readLineFdFh
argument_list|(
name|data
argument_list|,
name|maxlen
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|nativeWrite
name|qint64
name|QFSFileEnginePrivate
operator|::
name|nativeWrite
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|len
parameter_list|)
block|{
return|return
name|writeFdFh
argument_list|(
name|data
argument_list|,
name|len
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|nativePos
name|qint64
name|QFSFileEnginePrivate
operator|::
name|nativePos
parameter_list|()
specifier|const
block|{
return|return
name|posFdFh
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|nativeSeek
name|bool
name|QFSFileEnginePrivate
operator|::
name|nativeSeek
parameter_list|(
name|qint64
name|pos
parameter_list|)
block|{
return|return
name|seekFdFh
argument_list|(
name|pos
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|nativeHandle
name|int
name|QFSFileEnginePrivate
operator|::
name|nativeHandle
parameter_list|()
specifier|const
block|{
return|return
name|fh
condition|?
name|fileno
argument_list|(
name|fh
argument_list|)
else|:
name|fd
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|nativeIsSequential
name|bool
name|QFSFileEnginePrivate
operator|::
name|nativeIsSequential
parameter_list|()
specifier|const
block|{
return|return
name|isSequentialFdFh
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|remove
name|bool
name|QFSFileEngine
operator|::
name|remove
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QFSFileEngine
argument_list|)
expr_stmt|;
name|QSystemError
name|error
decl_stmt|;
name|bool
name|ret
init|=
name|QFileSystemEngine
operator|::
name|removeFile
argument_list|(
name|d
operator|->
name|fileEntry
argument_list|,
name|error
argument_list|)
decl_stmt|;
name|d
operator|->
name|metaData
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|ret
condition|)
block|{
name|setError
argument_list|(
name|QFile
operator|::
name|RemoveError
argument_list|,
name|error
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|copy
name|bool
name|QFSFileEngine
operator|::
name|copy
parameter_list|(
specifier|const
name|QString
modifier|&
name|newName
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFSFileEngine
argument_list|)
expr_stmt|;
name|QSystemError
name|error
decl_stmt|;
name|bool
name|ret
init|=
name|QFileSystemEngine
operator|::
name|copyFile
argument_list|(
name|d
operator|->
name|fileEntry
argument_list|,
name|QFileSystemEntry
argument_list|(
name|newName
argument_list|)
argument_list|,
name|error
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ret
condition|)
block|{
name|setError
argument_list|(
name|QFile
operator|::
name|CopyError
argument_list|,
name|error
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|renameOverwrite
name|bool
name|QFSFileEngine
operator|::
name|renameOverwrite
parameter_list|(
specifier|const
name|QString
modifier|&
name|newName
parameter_list|)
block|{
comment|// On Unix, rename() overwrites.
return|return
name|rename
argument_list|(
name|newName
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|rename
name|bool
name|QFSFileEngine
operator|::
name|rename
parameter_list|(
specifier|const
name|QString
modifier|&
name|newName
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFSFileEngine
argument_list|)
expr_stmt|;
name|QSystemError
name|error
decl_stmt|;
name|bool
name|ret
init|=
name|QFileSystemEngine
operator|::
name|renameFile
argument_list|(
name|d
operator|->
name|fileEntry
argument_list|,
name|QFileSystemEntry
argument_list|(
name|newName
argument_list|)
argument_list|,
name|error
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ret
condition|)
block|{
name|setError
argument_list|(
name|QFile
operator|::
name|RenameError
argument_list|,
name|error
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|link
name|bool
name|QFSFileEngine
operator|::
name|link
parameter_list|(
specifier|const
name|QString
modifier|&
name|newName
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFSFileEngine
argument_list|)
expr_stmt|;
name|QSystemError
name|error
decl_stmt|;
name|bool
name|ret
init|=
name|QFileSystemEngine
operator|::
name|createLink
argument_list|(
name|d
operator|->
name|fileEntry
argument_list|,
name|QFileSystemEntry
argument_list|(
name|newName
argument_list|)
argument_list|,
name|error
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ret
condition|)
block|{
name|setError
argument_list|(
name|QFile
operator|::
name|RenameError
argument_list|,
name|error
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|nativeSize
name|qint64
name|QFSFileEnginePrivate
operator|::
name|nativeSize
parameter_list|()
specifier|const
block|{
return|return
name|sizeFdFh
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|mkdir
name|bool
name|QFSFileEngine
operator|::
name|mkdir
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|bool
name|createParentDirectories
parameter_list|)
specifier|const
block|{
return|return
name|QFileSystemEngine
operator|::
name|createDirectory
argument_list|(
name|QFileSystemEntry
argument_list|(
name|name
argument_list|)
argument_list|,
name|createParentDirectories
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|rmdir
name|bool
name|QFSFileEngine
operator|::
name|rmdir
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|bool
name|recurseParentDirectories
parameter_list|)
specifier|const
block|{
return|return
name|QFileSystemEngine
operator|::
name|removeDirectory
argument_list|(
name|QFileSystemEntry
argument_list|(
name|name
argument_list|)
argument_list|,
name|recurseParentDirectories
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|caseSensitive
name|bool
name|QFSFileEngine
operator|::
name|caseSensitive
parameter_list|()
specifier|const
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setCurrentPath
name|bool
name|QFSFileEngine
operator|::
name|setCurrentPath
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
return|return
name|QFileSystemEngine
operator|::
name|setCurrentPath
argument_list|(
name|QFileSystemEntry
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|currentPath
name|QString
name|QFSFileEngine
operator|::
name|currentPath
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
block|{
return|return
name|QFileSystemEngine
operator|::
name|currentPath
argument_list|()
operator|.
name|filePath
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|homePath
name|QString
name|QFSFileEngine
operator|::
name|homePath
parameter_list|()
block|{
return|return
name|QFileSystemEngine
operator|::
name|homePath
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|rootPath
name|QString
name|QFSFileEngine
operator|::
name|rootPath
parameter_list|()
block|{
return|return
name|QFileSystemEngine
operator|::
name|rootPath
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|tempPath
name|QString
name|QFSFileEngine
operator|::
name|tempPath
parameter_list|()
block|{
return|return
name|QFileSystemEngine
operator|::
name|tempPath
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|drives
name|QFileInfoList
name|QFSFileEngine
operator|::
name|drives
parameter_list|()
block|{
name|QFileInfoList
name|ret
decl_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|QFileInfo
argument_list|(
name|rootPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|doStat
name|bool
name|QFSFileEnginePrivate
operator|::
name|doStat
parameter_list|(
name|QFileSystemMetaData
operator|::
name|MetaDataFlags
name|flags
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|tried_stat
operator|||
operator|!
name|metaData
operator|.
name|hasFlags
argument_list|(
name|flags
argument_list|)
condition|)
block|{
name|tried_stat
operator|=
literal|1
expr_stmt|;
name|int
name|localFd
init|=
name|fd
decl_stmt|;
if|if
condition|(
name|fh
operator|&&
name|fileEntry
operator|.
name|isEmpty
argument_list|()
condition|)
name|localFd
operator|=
name|QT_FILENO
argument_list|(
name|fh
argument_list|)
expr_stmt|;
if|if
condition|(
name|localFd
operator|!=
operator|-
literal|1
condition|)
name|QFileSystemEngine
operator|::
name|fillMetaData
argument_list|(
name|localFd
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
if|if
condition|(
name|metaData
operator|.
name|missingFlags
argument_list|(
name|flags
argument_list|)
operator|&&
operator|!
name|fileEntry
operator|.
name|isEmpty
argument_list|()
condition|)
name|QFileSystemEngine
operator|::
name|fillMetaData
argument_list|(
name|fileEntry
argument_list|,
name|metaData
argument_list|,
name|metaData
operator|.
name|missingFlags
argument_list|(
name|flags
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|metaData
operator|.
name|exists
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|isSymlink
name|bool
name|QFSFileEnginePrivate
operator|::
name|isSymlink
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|metaData
operator|.
name|hasFlags
argument_list|(
name|QFileSystemMetaData
operator|::
name|LinkType
argument_list|)
condition|)
name|QFileSystemEngine
operator|::
name|fillMetaData
argument_list|(
name|fileEntry
argument_list|,
name|metaData
argument_list|,
name|QFileSystemMetaData
operator|::
name|LinkType
argument_list|)
expr_stmt|;
return|return
name|metaData
operator|.
name|isLink
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|fileFlags
name|QAbstractFileEngine
operator|::
name|FileFlags
name|QFSFileEngine
operator|::
name|fileFlags
parameter_list|(
name|FileFlags
name|type
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFSFileEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|Refresh
condition|)
name|d
operator|->
name|metaData
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QAbstractFileEngine
operator|::
name|FileFlags
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|type
operator|&
name|FlagsMask
condition|)
name|ret
operator||=
name|LocalDiskFlag
expr_stmt|;
name|bool
name|exists
decl_stmt|;
block|{
name|QFileSystemMetaData
operator|::
name|MetaDataFlags
name|queryFlags
init|=
literal|0
decl_stmt|;
name|queryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|MetaDataFlags
argument_list|(
name|uint
argument_list|(
name|type
argument_list|)
argument_list|)
operator|&
name|QFileSystemMetaData
operator|::
name|Permissions
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|TypesMask
condition|)
name|queryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|AliasType
operator||
name|QFileSystemMetaData
operator|::
name|LinkType
operator||
name|QFileSystemMetaData
operator|::
name|FileType
operator||
name|QFileSystemMetaData
operator|::
name|DirectoryType
operator||
name|QFileSystemMetaData
operator|::
name|BundleType
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|FlagsMask
condition|)
name|queryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|HiddenAttribute
operator||
name|QFileSystemMetaData
operator|::
name|ExistsAttribute
expr_stmt|;
name|queryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|LinkType
expr_stmt|;
name|exists
operator|=
name|d
operator|->
name|doStat
argument_list|(
name|queryFlags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|exists
operator|&&
operator|!
name|d
operator|->
name|metaData
operator|.
name|isLink
argument_list|()
condition|)
return|return
name|ret
return|;
if|if
condition|(
name|exists
operator|&&
operator|(
name|type
operator|&
name|PermsMask
operator|)
condition|)
name|ret
operator||=
name|FileFlags
argument_list|(
name|uint
argument_list|(
name|d
operator|->
name|metaData
operator|.
name|permissions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|TypesMask
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|metaData
operator|.
name|isAlias
argument_list|()
condition|)
block|{
name|ret
operator||=
name|LinkType
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|type
operator|&
name|LinkType
operator|)
operator|&&
name|d
operator|->
name|metaData
operator|.
name|isLink
argument_list|()
condition|)
name|ret
operator||=
name|LinkType
expr_stmt|;
if|if
condition|(
name|exists
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|metaData
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|ret
operator||=
name|FileType
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|metaData
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|ret
operator||=
name|DirectoryType
expr_stmt|;
if|if
condition|(
operator|(
name|type
operator|&
name|BundleType
operator|)
operator|&&
name|d
operator|->
name|metaData
operator|.
name|isBundle
argument_list|()
condition|)
name|ret
operator||=
name|BundleType
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|type
operator|&
name|FlagsMask
condition|)
block|{
if|if
condition|(
name|exists
condition|)
name|ret
operator||=
name|ExistsFlag
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|fileEntry
operator|.
name|isRoot
argument_list|()
condition|)
name|ret
operator||=
name|RootFlag
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|metaData
operator|.
name|isHidden
argument_list|()
condition|)
name|ret
operator||=
name|HiddenFlag
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|fileName
name|QString
name|QFSFileEngine
operator|::
name|fileName
parameter_list|(
name|FileName
name|file
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFSFileEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|==
name|BundleName
condition|)
block|{
return|return
name|QFileSystemEngine
operator|::
name|bundleName
argument_list|(
name|d
operator|->
name|fileEntry
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|file
operator|==
name|BaseName
condition|)
block|{
return|return
name|d
operator|->
name|fileEntry
operator|.
name|fileName
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|file
operator|==
name|PathName
condition|)
block|{
return|return
name|d
operator|->
name|fileEntry
operator|.
name|path
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|file
operator|==
name|AbsoluteName
operator|||
name|file
operator|==
name|AbsolutePathName
condition|)
block|{
name|QFileSystemEntry
name|entry
argument_list|(
name|QFileSystemEngine
operator|::
name|absoluteName
argument_list|(
name|d
operator|->
name|fileEntry
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|==
name|AbsolutePathName
condition|)
block|{
return|return
name|entry
operator|.
name|path
argument_list|()
return|;
block|}
return|return
name|entry
operator|.
name|filePath
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|file
operator|==
name|CanonicalName
operator|||
name|file
operator|==
name|CanonicalPathName
condition|)
block|{
name|QFileSystemEntry
name|entry
argument_list|(
name|QFileSystemEngine
operator|::
name|canonicalName
argument_list|(
name|d
operator|->
name|fileEntry
argument_list|,
name|d
operator|->
name|metaData
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|==
name|CanonicalPathName
condition|)
return|return
name|entry
operator|.
name|path
argument_list|()
return|;
return|return
name|entry
operator|.
name|filePath
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|file
operator|==
name|LinkName
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|isSymlink
argument_list|()
condition|)
block|{
name|QFileSystemEntry
name|entry
init|=
name|QFileSystemEngine
operator|::
name|getLinkTarget
argument_list|(
name|d
operator|->
name|fileEntry
argument_list|,
name|d
operator|->
name|metaData
argument_list|)
decl_stmt|;
return|return
name|entry
operator|.
name|filePath
argument_list|()
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
return|return
name|d
operator|->
name|fileEntry
operator|.
name|filePath
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|isRelativePath
name|bool
name|QFSFileEngine
operator|::
name|isRelativePath
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFSFileEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|fileEntry
operator|.
name|filePath
argument_list|()
operator|.
name|length
argument_list|()
condition|?
name|d
operator|->
name|fileEntry
operator|.
name|filePath
argument_list|()
index|[
literal|0
index|]
operator|!=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
else|:
literal|true
return|;
block|}
end_function
begin_function
DECL|function|ownerId
name|uint
name|QFSFileEngine
operator|::
name|ownerId
parameter_list|(
name|FileOwner
name|own
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFSFileEngine
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|uint
name|nobodyID
init|=
operator|(
name|uint
operator|)
operator|-
literal|2
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|doStat
argument_list|(
name|QFileSystemMetaData
operator|::
name|OwnerIds
argument_list|)
condition|)
return|return
name|d
operator|->
name|metaData
operator|.
name|ownerId
argument_list|(
name|own
argument_list|)
return|;
return|return
name|nobodyID
return|;
block|}
end_function
begin_function
DECL|function|owner
name|QString
name|QFSFileEngine
operator|::
name|owner
parameter_list|(
name|FileOwner
name|own
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|own
operator|==
name|OwnerUser
condition|)
return|return
name|QFileSystemEngine
operator|::
name|resolveUserName
argument_list|(
name|ownerId
argument_list|(
name|own
argument_list|)
argument_list|)
return|;
return|return
name|QFileSystemEngine
operator|::
name|resolveGroupName
argument_list|(
name|ownerId
argument_list|(
name|own
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setPermissions
name|bool
name|QFSFileEngine
operator|::
name|setPermissions
parameter_list|(
name|uint
name|perms
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFSFileEngine
argument_list|)
expr_stmt|;
name|QSystemError
name|error
decl_stmt|;
if|if
condition|(
operator|!
name|QFileSystemEngine
operator|::
name|setPermissions
argument_list|(
name|d
operator|->
name|fileEntry
argument_list|,
name|QFile
operator|::
name|Permissions
argument_list|(
name|perms
argument_list|)
argument_list|,
name|error
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|setError
argument_list|(
name|QFile
operator|::
name|PermissionsError
argument_list|,
name|error
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setSize
name|bool
name|QFSFileEngine
operator|::
name|setSize
parameter_list|(
name|qint64
name|size
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFSFileEngine
argument_list|)
expr_stmt|;
name|bool
name|ret
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|fd
operator|!=
operator|-
literal|1
condition|)
name|ret
operator|=
name|QT_FTRUNCATE
argument_list|(
name|d
operator|->
name|fd
argument_list|,
name|size
argument_list|)
operator|==
literal|0
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|fh
condition|)
name|ret
operator|=
name|QT_FTRUNCATE
argument_list|(
name|QT_FILENO
argument_list|(
name|d
operator|->
name|fh
argument_list|)
argument_list|,
name|size
argument_list|)
operator|==
literal|0
expr_stmt|;
else|else
name|ret
operator|=
name|QT_TRUNCATE
argument_list|(
name|d
operator|->
name|fileEntry
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|size
argument_list|)
operator|==
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|ret
condition|)
name|setError
argument_list|(
name|QFile
operator|::
name|ResizeError
argument_list|,
name|qt_error_string
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|fileTime
name|QDateTime
name|QFSFileEngine
operator|::
name|fileTime
parameter_list|(
name|FileTime
name|time
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFSFileEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|doStat
argument_list|(
name|QFileSystemMetaData
operator|::
name|Times
argument_list|)
condition|)
return|return
name|d
operator|->
name|metaData
operator|.
name|fileTime
argument_list|(
name|time
argument_list|)
return|;
return|return
name|QDateTime
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|map
name|uchar
modifier|*
name|QFSFileEnginePrivate
operator|::
name|map
parameter_list|(
name|qint64
name|offset
parameter_list|,
name|qint64
name|size
parameter_list|,
name|QFile
operator|::
name|MemoryMapFlags
name|flags
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QFSFileEngine
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
if|if
condition|(
name|openMode
operator|==
name|QIODevice
operator|::
name|NotOpen
condition|)
block|{
name|q
operator|->
name|setError
argument_list|(
name|QFile
operator|::
name|PermissionsError
argument_list|,
name|qt_error_string
argument_list|(
name|int
argument_list|(
name|EACCES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
name|offset
operator|<
literal|0
operator|||
name|offset
operator|!=
name|qint64
argument_list|(
name|QT_OFF_T
argument_list|(
name|offset
argument_list|)
argument_list|)
operator|||
name|size
argument_list|<
literal|0
operator|||
name|quint64
operator|(
name|size
operator|)
argument_list|>
name|quint64
argument_list|(
name|size_t
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|q
operator|->
name|setError
argument_list|(
name|QFile
operator|::
name|UnspecifiedError
argument_list|,
name|qt_error_string
argument_list|(
name|int
argument_list|(
name|EINVAL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// If we know the mapping will extend beyond EOF, fail early to avoid
comment|// undefined behavior. Otherwise, let mmap have its say.
if|if
condition|(
name|doStat
argument_list|(
name|QFileSystemMetaData
operator|::
name|SizeAttribute
argument_list|)
operator|&&
operator|(
name|QT_OFF_T
argument_list|(
name|size
argument_list|)
operator|>
name|metaData
operator|.
name|size
argument_list|()
operator|-
name|QT_OFF_T
argument_list|(
name|offset
argument_list|)
operator|)
condition|)
name|qWarning
argument_list|(
literal|"QFSFileEngine::map: Mapping a file beyond its size is not portable"
argument_list|)
expr_stmt|;
name|int
name|access
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|openMode
operator|&
name|QIODevice
operator|::
name|ReadOnly
condition|)
name|access
operator||=
name|PROT_READ
expr_stmt|;
if|if
condition|(
name|openMode
operator|&
name|QIODevice
operator|::
name|WriteOnly
condition|)
name|access
operator||=
name|PROT_WRITE
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_INTEGRITY
argument_list|)
name|int
name|pageSize
init|=
name|sysconf
argument_list|(
name|_SC_PAGESIZE
argument_list|)
decl_stmt|;
else|#
directive|else
name|int
name|pageSize
init|=
name|getpagesize
argument_list|()
decl_stmt|;
endif|#
directive|endif
name|int
name|extra
init|=
name|offset
operator|%
name|pageSize
decl_stmt|;
if|if
condition|(
name|quint64
argument_list|(
name|size
operator|+
name|extra
argument_list|)
operator|>
name|quint64
argument_list|(
operator|(
name|size_t
operator|)
operator|-
literal|1
argument_list|)
condition|)
block|{
name|q
operator|->
name|setError
argument_list|(
name|QFile
operator|::
name|UnspecifiedError
argument_list|,
name|qt_error_string
argument_list|(
name|int
argument_list|(
name|EINVAL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|size_t
name|realSize
init|=
operator|(
name|size_t
operator|)
name|size
operator|+
name|extra
decl_stmt|;
name|QT_OFF_T
name|realOffset
init|=
name|QT_OFF_T
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|realOffset
operator|&=
operator|~
operator|(
name|QT_OFF_T
argument_list|(
name|pageSize
operator|-
literal|1
argument_list|)
operator|)
expr_stmt|;
name|void
modifier|*
name|mapAddress
init|=
name|QT_MMAP
argument_list|(
operator|(
name|void
operator|*
operator|)
literal|0
argument_list|,
name|realSize
argument_list|,
name|access
argument_list|,
name|MAP_SHARED
argument_list|,
name|nativeHandle
argument_list|()
argument_list|,
name|realOffset
argument_list|)
decl_stmt|;
if|if
condition|(
name|MAP_FAILED
operator|!=
name|mapAddress
condition|)
block|{
name|uchar
modifier|*
name|address
init|=
name|extra
operator|+
cast|static_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|mapAddress
argument_list|)
decl_stmt|;
name|maps
index|[
name|address
index|]
operator|=
name|QPair
argument_list|<
name|int
argument_list|,
name|size_t
argument_list|>
argument_list|(
name|extra
argument_list|,
name|realSize
argument_list|)
expr_stmt|;
return|return
name|address
return|;
block|}
switch|switch
condition|(
name|errno
condition|)
block|{
case|case
name|EBADF
case|:
name|q
operator|->
name|setError
argument_list|(
name|QFile
operator|::
name|PermissionsError
argument_list|,
name|qt_error_string
argument_list|(
name|int
argument_list|(
name|EACCES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|ENFILE
case|:
case|case
name|ENOMEM
case|:
name|q
operator|->
name|setError
argument_list|(
name|QFile
operator|::
name|ResourceError
argument_list|,
name|qt_error_string
argument_list|(
name|int
argument_list|(
name|errno
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|EINVAL
case|:
comment|// size are out of bounds
default|default:
name|q
operator|->
name|setError
argument_list|(
name|QFile
operator|::
name|UnspecifiedError
argument_list|,
name|qt_error_string
argument_list|(
name|int
argument_list|(
name|errno
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|unmap
name|bool
name|QFSFileEnginePrivate
operator|::
name|unmap
parameter_list|(
name|uchar
modifier|*
name|ptr
parameter_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_INTEGRITY
argument_list|)
name|Q_Q
argument_list|(
name|QFSFileEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|maps
operator|.
name|contains
argument_list|(
name|ptr
argument_list|)
condition|)
block|{
name|q
operator|->
name|setError
argument_list|(
name|QFile
operator|::
name|PermissionsError
argument_list|,
name|qt_error_string
argument_list|(
name|EACCES
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|uchar
modifier|*
name|start
init|=
name|ptr
operator|-
name|maps
index|[
name|ptr
index|]
operator|.
name|first
decl_stmt|;
name|size_t
name|len
init|=
name|maps
index|[
name|ptr
index|]
operator|.
name|second
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|==
name|munmap
argument_list|(
name|start
argument_list|,
name|len
argument_list|)
condition|)
block|{
name|q
operator|->
name|setError
argument_list|(
name|QFile
operator|::
name|UnspecifiedError
argument_list|,
name|qt_error_string
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|maps
operator|.
name|remove
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_FSFILEENGINE
end_comment
end_unit
