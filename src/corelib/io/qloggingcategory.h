begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QLOGGINGCATEGORY_H
end_ifndef
begin_define
DECL|macro|QLOGGINGCATEGORY_H
define|#
directive|define
name|QLOGGINGCATEGORY_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|Q_CORE_EXPORT
name|QLoggingCategory
block|{
name|Q_DISABLE_COPY
argument_list|(
argument|QLoggingCategory
argument_list|)
name|public
label|:
comment|// ### Qt 6: Merge constructors
name|explicit
name|QLoggingCategory
parameter_list|(
specifier|const
name|char
modifier|*
name|category
parameter_list|)
function_decl|;
name|QLoggingCategory
argument_list|(
argument|const char *category
argument_list|,
argument|QtMsgType severityLevel
argument_list|)
empty_stmt|;
operator|~
name|QLoggingCategory
argument_list|()
expr_stmt|;
name|bool
name|isEnabled
argument_list|(
name|QtMsgType
name|type
argument_list|)
decl|const
decl_stmt|;
name|void
name|setEnabled
parameter_list|(
name|QtMsgType
name|type
parameter_list|,
name|bool
name|enable
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|Q_ATOMIC_INT8_IS_SUPPORTED
name|bool
name|isDebugEnabled
argument_list|()
specifier|const
block|{
return|return
name|bools
operator|.
name|enabledDebug
operator|.
name|load
argument_list|()
return|;
block|}
name|bool
name|isInfoEnabled
argument_list|()
specifier|const
block|{
return|return
name|bools
operator|.
name|enabledInfo
operator|.
name|load
argument_list|()
return|;
block|}
name|bool
name|isWarningEnabled
argument_list|()
specifier|const
block|{
return|return
name|bools
operator|.
name|enabledWarning
operator|.
name|load
argument_list|()
return|;
block|}
name|bool
name|isCriticalEnabled
argument_list|()
specifier|const
block|{
return|return
name|bools
operator|.
name|enabledCritical
operator|.
name|load
argument_list|()
return|;
block|}
else|#
directive|else
name|bool
name|isDebugEnabled
argument_list|()
specifier|const
block|{
return|return
name|enabled
operator|.
name|load
argument_list|()
operator|>>
name|DebugShift
operator|&
literal|1
return|;
block|}
name|bool
name|isInfoEnabled
argument_list|()
specifier|const
block|{
return|return
name|enabled
operator|.
name|load
argument_list|()
operator|>>
name|InfoShift
operator|&
literal|1
return|;
block|}
name|bool
name|isWarningEnabled
argument_list|()
specifier|const
block|{
return|return
name|enabled
operator|.
name|load
argument_list|()
operator|>>
name|WarningShift
operator|&
literal|1
return|;
block|}
name|bool
name|isCriticalEnabled
argument_list|()
specifier|const
block|{
return|return
name|enabled
operator|.
name|load
argument_list|()
operator|>>
name|CriticalShift
operator|&
literal|1
return|;
block|}
endif|#
directive|endif
specifier|const
name|char
operator|*
name|categoryName
argument_list|()
specifier|const
block|{
return|return
name|name
return|;
block|}
comment|// allows usage of both factory method and variable in qCX macros
name|QLoggingCategory
operator|&
name|operator
argument_list|()
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
specifier|const
name|QLoggingCategory
operator|&
name|operator
argument_list|()
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|this
return|;
block|}
specifier|static
name|QLoggingCategory
modifier|*
name|defaultCategory
parameter_list|()
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|CategoryFilter
function_decl|)
parameter_list|(
name|QLoggingCategory
modifier|*
parameter_list|)
function_decl|;
specifier|static
name|CategoryFilter
name|installFilter
parameter_list|(
name|CategoryFilter
parameter_list|)
function_decl|;
specifier|static
name|void
name|setFilterRules
parameter_list|(
specifier|const
name|QString
modifier|&
name|rules
parameter_list|)
function_decl|;
name|private
label|:
name|void
name|init
parameter_list|(
specifier|const
name|char
modifier|*
name|category
parameter_list|,
name|QtMsgType
name|severityLevel
parameter_list|)
function_decl|;
name|Q_DECL_UNUSED_MEMBER
name|void
modifier|*
name|d
decl_stmt|;
comment|// reserved for future use
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_BIG_ENDIAN
enum|enum
block|{
name|DebugShift
init|=
literal|0
block|,
name|WarningShift
init|=
literal|8
block|,
name|CriticalShift
init|=
literal|16
block|,
name|InfoShift
init|=
literal|24
block|}
enum|;
else|#
directive|else
enum|enum
block|{
name|DebugShift
init|=
literal|24
block|,
name|WarningShift
init|=
literal|16
block|,
name|CriticalShift
init|=
literal|8
block|,
name|InfoShift
init|=
literal|0
block|}
enum|;
endif|#
directive|endif
struct|struct
name|AtomicBools
block|{
ifdef|#
directive|ifdef
name|Q_ATOMIC_INT8_IS_SUPPORTED
name|QBasicAtomicInteger
operator|<
name|bool
operator|>
name|enabledDebug
expr_stmt|;
name|QBasicAtomicInteger
operator|<
name|bool
operator|>
name|enabledWarning
expr_stmt|;
name|QBasicAtomicInteger
operator|<
name|bool
operator|>
name|enabledCritical
expr_stmt|;
name|QBasicAtomicInteger
operator|<
name|bool
operator|>
name|enabledInfo
expr_stmt|;
endif|#
directive|endif
block|}
struct|;
union|union
block|{
name|AtomicBools
name|bools
decl_stmt|;
name|QBasicAtomicInt
name|enabled
decl_stmt|;
block|}
union|;
name|Q_DECL_UNUSED_MEMBER
name|bool
name|placeholder
index|[
literal|4
index|]
decl_stmt|;
comment|// reserved for future use
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_define
DECL|macro|Q_DECLARE_LOGGING_CATEGORY
define|#
directive|define
name|Q_DECLARE_LOGGING_CATEGORY
parameter_list|(
name|name
parameter_list|)
define|\
value|extern const QLoggingCategory&name();
end_define
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_COMPILER_VARIADIC_MACROS
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_MOC_RUN
argument_list|)
end_if
begin_define
DECL|macro|Q_LOGGING_CATEGORY
define|#
directive|define
name|Q_LOGGING_CATEGORY
parameter_list|(
name|name
parameter_list|,
modifier|...
parameter_list|)
define|\
value|const QLoggingCategory&name() \     { \         static const QLoggingCategory category(__VA_ARGS__); \         return category; \     }
end_define
begin_define
DECL|macro|qCDebug
define|#
directive|define
name|qCDebug
parameter_list|(
name|category
parameter_list|,
modifier|...
parameter_list|)
define|\
value|for (bool qt_category_enabled = category().isDebugEnabled(); qt_category_enabled; qt_category_enabled = false) \         QMessageLogger(QT_MESSAGELOG_FILE, QT_MESSAGELOG_LINE, QT_MESSAGELOG_FUNC, category().categoryName()).debug(__VA_ARGS__)
end_define
begin_define
DECL|macro|qCInfo
define|#
directive|define
name|qCInfo
parameter_list|(
name|category
parameter_list|,
modifier|...
parameter_list|)
define|\
value|for (bool qt_category_enabled = category().isInfoEnabled(); qt_category_enabled; qt_category_enabled = false) \         QMessageLogger(QT_MESSAGELOG_FILE, QT_MESSAGELOG_LINE, QT_MESSAGELOG_FUNC, category().categoryName()).info(__VA_ARGS__)
end_define
begin_define
DECL|macro|qCWarning
define|#
directive|define
name|qCWarning
parameter_list|(
name|category
parameter_list|,
modifier|...
parameter_list|)
define|\
value|for (bool qt_category_enabled = category().isWarningEnabled(); qt_category_enabled; qt_category_enabled = false) \         QMessageLogger(QT_MESSAGELOG_FILE, QT_MESSAGELOG_LINE, QT_MESSAGELOG_FUNC, category().categoryName()).warning(__VA_ARGS__)
end_define
begin_define
DECL|macro|qCCritical
define|#
directive|define
name|qCCritical
parameter_list|(
name|category
parameter_list|,
modifier|...
parameter_list|)
define|\
value|for (bool qt_category_enabled = category().isCriticalEnabled(); qt_category_enabled; qt_category_enabled = false) \         QMessageLogger(QT_MESSAGELOG_FILE, QT_MESSAGELOG_LINE, QT_MESSAGELOG_FUNC, category().categoryName()).critical(__VA_ARGS__)
end_define
begin_else
else|#
directive|else
end_else
begin_comment
comment|// defined(Q_COMPILER_VARIADIC_MACROS) || defined(Q_MOC_RUN)
end_comment
begin_comment
comment|// Optional msgType argument not supported
end_comment
begin_define
DECL|macro|Q_LOGGING_CATEGORY
define|#
directive|define
name|Q_LOGGING_CATEGORY
parameter_list|(
name|name
parameter_list|,
name|string
parameter_list|)
define|\
value|const QLoggingCategory&name() \     { \         static const QLoggingCategory category(string); \         return category; \     }
end_define
begin_comment
comment|// check for enabled category inside QMessageLogger.
end_comment
begin_define
DECL|macro|qCDebug
define|#
directive|define
name|qCDebug
value|qDebug
end_define
begin_define
DECL|macro|qCInfo
define|#
directive|define
name|qCInfo
value|qInfo
end_define
begin_define
DECL|macro|qCWarning
define|#
directive|define
name|qCWarning
value|qWarning
end_define
begin_define
DECL|macro|qCCritical
define|#
directive|define
name|qCCritical
value|qCritical
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_COMPILER_VARIADIC_MACROS || defined(Q_MOC_RUN)
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_DEBUG_OUTPUT
argument_list|)
end_if
begin_undef
DECL|macro|qCDebug
undef|#
directive|undef
name|qCDebug
end_undef
begin_define
DECL|macro|qCDebug
define|#
directive|define
name|qCDebug
parameter_list|(
name|category
parameter_list|)
value|QT_NO_QDEBUG_MACRO()
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_INFO_OUTPUT
argument_list|)
end_if
begin_undef
DECL|macro|qCInfo
undef|#
directive|undef
name|qCInfo
end_undef
begin_define
DECL|macro|qCInfo
define|#
directive|define
name|qCInfo
parameter_list|(
name|category
parameter_list|)
value|QT_NO_QDEBUG_MACRO()
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_WARNING_OUTPUT
argument_list|)
end_if
begin_undef
DECL|macro|qCWarning
undef|#
directive|undef
name|qCWarning
end_undef
begin_define
DECL|macro|qCWarning
define|#
directive|define
name|qCWarning
parameter_list|(
name|category
parameter_list|)
value|QT_NO_QDEBUG_MACRO()
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QLOGGINGCATEGORY_H
end_comment
end_unit
