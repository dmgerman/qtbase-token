begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QLOGGINGCATEGORY_H
end_ifndef
begin_define
DECL|macro|QLOGGINGCATEGORY_H
define|#
directive|define
name|QLOGGINGCATEGORY_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|Q_CORE_EXPORT
name|QLoggingCategory
block|{
name|Q_DISABLE_COPY
argument_list|(
argument|QLoggingCategory
argument_list|)
name|public
label|:
name|explicit
name|QLoggingCategory
parameter_list|(
specifier|const
name|char
modifier|*
name|category
parameter_list|)
function_decl|;
operator|~
name|QLoggingCategory
argument_list|()
expr_stmt|;
name|bool
name|isEnabled
argument_list|(
name|QtMsgType
name|type
argument_list|)
decl|const
decl_stmt|;
name|void
name|setEnabled
parameter_list|(
name|QtMsgType
name|type
parameter_list|,
name|bool
name|enable
parameter_list|)
function_decl|;
name|bool
name|isDebugEnabled
argument_list|()
specifier|const
block|{
return|return
name|enabledDebug
return|;
block|}
name|bool
name|isWarningEnabled
argument_list|()
specifier|const
block|{
return|return
name|enabledWarning
return|;
block|}
name|bool
name|isCriticalEnabled
argument_list|()
specifier|const
block|{
return|return
name|enabledCritical
return|;
block|}
specifier|const
name|char
operator|*
name|categoryName
argument_list|()
specifier|const
block|{
return|return
name|name
return|;
block|}
comment|// allows usage of both factory method and variable in qCX macros
name|QLoggingCategory
operator|&
name|operator
argument_list|()
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
specifier|static
name|QLoggingCategory
modifier|*
name|defaultCategory
parameter_list|()
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|CategoryFilter
function_decl|)
parameter_list|(
name|QLoggingCategory
modifier|*
parameter_list|)
function_decl|;
specifier|static
name|CategoryFilter
name|installFilter
parameter_list|(
name|CategoryFilter
parameter_list|)
function_decl|;
specifier|static
name|void
name|setFilterRules
parameter_list|(
specifier|const
name|QString
modifier|&
name|rules
parameter_list|)
function_decl|;
name|private
label|:
name|void
modifier|*
name|d
decl_stmt|;
comment|// reserved for future use
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|bool
name|enabledDebug
decl_stmt|;
name|bool
name|enabledWarning
decl_stmt|;
name|bool
name|enabledCritical
decl_stmt|;
name|bool
name|placeholder
index|[
literal|5
index|]
decl_stmt|;
comment|// reserve for future use
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_define
DECL|macro|Q_DECLARE_LOGGING_CATEGORY
define|#
directive|define
name|Q_DECLARE_LOGGING_CATEGORY
parameter_list|(
name|name
parameter_list|)
define|\
value|extern const QLoggingCategory&name();
end_define
begin_comment
comment|// relies on QLoggingCategory(QString) being thread safe!
end_comment
begin_define
DECL|macro|Q_LOGGING_CATEGORY
define|#
directive|define
name|Q_LOGGING_CATEGORY
parameter_list|(
name|name
parameter_list|,
name|string
parameter_list|)
define|\
value|const QLoggingCategory&name() \     { \         static const QLoggingCategory category(string); \         return category; \     }
end_define
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_VARIADIC_MACROS
end_ifdef
begin_define
DECL|macro|qCDebug
define|#
directive|define
name|qCDebug
parameter_list|(
name|category
parameter_list|,
modifier|...
parameter_list|)
define|\
value|for (bool qt_category_enabled = category().isDebugEnabled(); qt_category_enabled; qt_category_enabled = false) \         QMessageLogger(__FILE__, __LINE__, Q_FUNC_INFO, category().categoryName()).debug(__VA_ARGS__)
end_define
begin_define
DECL|macro|qCWarning
define|#
directive|define
name|qCWarning
parameter_list|(
name|category
parameter_list|,
modifier|...
parameter_list|)
define|\
value|for (bool qt_category_enabled = category().isWarningEnabled(); qt_category_enabled; qt_category_enabled = false) \         QMessageLogger(__FILE__, __LINE__, Q_FUNC_INFO, category().categoryName()).warning(__VA_ARGS__)
end_define
begin_define
DECL|macro|qCCritical
define|#
directive|define
name|qCCritical
parameter_list|(
name|category
parameter_list|,
modifier|...
parameter_list|)
define|\
value|for (bool qt_category_enabled = category().isCriticalEnabled(); qt_category_enabled; qt_category_enabled = false) \         QMessageLogger(__FILE__, __LINE__, Q_FUNC_INFO, category().categoryName()).critical(__VA_ARGS__)
end_define
begin_else
else|#
directive|else
end_else
begin_comment
comment|// check for enabled category inside QMessageLogger.
end_comment
begin_define
DECL|macro|qCDebug
define|#
directive|define
name|qCDebug
value|qDebug
end_define
begin_define
DECL|macro|qCWarning
define|#
directive|define
name|qCWarning
value|qWarning
end_define
begin_define
DECL|macro|qCCritical
define|#
directive|define
name|qCCritical
value|qCritical
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_COMPILER_VARIADIC_MACROS
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_DEBUG_OUTPUT
argument_list|)
end_if
begin_undef
DECL|macro|qCDebug
undef|#
directive|undef
name|qCDebug
end_undef
begin_define
DECL|macro|qCDebug
define|#
directive|define
name|qCDebug
parameter_list|(
name|category
parameter_list|)
value|QT_NO_QDEBUG_MACRO()
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_WARNING_OUTPUT
argument_list|)
end_if
begin_undef
DECL|macro|qCWarning
undef|#
directive|undef
name|qCWarning
end_undef
begin_define
DECL|macro|qCWarning
define|#
directive|define
name|qCWarning
parameter_list|(
name|category
parameter_list|)
value|QT_NO_QWARNING_MACRO()
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QLOGGINGCATEGORY_H
end_comment
end_unit
