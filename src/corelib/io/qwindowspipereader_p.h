begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QWINDOWSPIPEREADER_P_H
end_ifndef
begin_define
DECL|macro|QWINDOWSPIPEREADER_P_H
define|#
directive|define
name|QWINDOWSPIPEREADER_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<qobject.h>
end_include
begin_include
include|#
directive|include
file|<qtimer.h>
end_include
begin_include
include|#
directive|include
file|<private/qringbuffer_p.h>
end_include
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|variable|QWinOverlappedIoNotifier
name|class
name|QWinOverlappedIoNotifier
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QWindowsPipeReader
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|QWindowsPipeReader
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QWindowsPipeReader
argument_list|()
block|;
name|void
name|setHandle
argument_list|(
argument|HANDLE hPipeReadEnd
argument_list|)
block|;
name|void
name|stop
argument_list|()
block|;
name|void
name|setMaxReadBufferSize
argument_list|(
argument|qint64 size
argument_list|)
block|{
name|readBufferMaxSize
operator|=
name|size
block|; }
name|qint64
name|maxReadBufferSize
argument_list|()
specifier|const
block|{
return|return
name|readBufferMaxSize
return|;
block|}
name|bool
name|isPipeClosed
argument_list|()
specifier|const
block|{
return|return
name|pipeBroken
return|;
block|}
name|qint64
name|bytesAvailable
argument_list|()
specifier|const
block|;
name|qint64
name|read
argument_list|(
argument|char *data
argument_list|,
argument|qint64 maxlen
argument_list|)
block|;
name|bool
name|canReadLine
argument_list|()
specifier|const
block|;
name|bool
name|waitForReadyRead
argument_list|(
argument|int msecs
argument_list|)
block|;
name|bool
name|waitForPipeClosed
argument_list|(
argument|int msecs
argument_list|)
block|;
name|void
name|startAsyncRead
argument_list|()
block|;
name|bool
name|isReadOperationActive
argument_list|()
specifier|const
block|{
return|return
name|readSequenceStarted
return|;
block|}
name|Q_SIGNALS
operator|:
name|void
name|winError
argument_list|(
name|ulong
argument_list|,
specifier|const
name|QString
operator|&
argument_list|)
block|;
name|void
name|readyRead
argument_list|()
block|;
name|void
name|pipeClosed
argument_list|()
block|;
name|private
name|Q_SLOTS
operator|:
name|void
name|notified
argument_list|(
argument|DWORD numberOfBytesRead
argument_list|,
argument|DWORD errorCode
argument_list|)
block|;
name|private
operator|:
name|bool
name|completeAsyncRead
argument_list|(
argument|DWORD bytesRead
argument_list|,
argument|DWORD errorCode
argument_list|)
block|;
name|DWORD
name|checkPipeState
argument_list|()
block|;
name|private
operator|:
name|HANDLE
name|handle
block|;
name|OVERLAPPED
name|overlapped
block|;
name|QWinOverlappedIoNotifier
operator|*
name|dataReadNotifier
block|;
name|qint64
name|readBufferMaxSize
block|;
name|QRingBuffer
name|readBuffer
block|;
name|int
name|actualReadBufferSize
block|;
name|bool
name|readSequenceStarted
block|;
name|QTimer
operator|*
name|emitReadyReadTimer
block|;
name|bool
name|pipeBroken
block|;
name|bool
name|readyReadEmitted
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QWINDOWSPIPEREADER_P_H
end_comment
end_unit
