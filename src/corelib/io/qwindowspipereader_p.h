begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QWINDOWSPIPEREADER_P_H
end_ifndef
begin_define
DECL|macro|QWINDOWSPIPEREADER_P_H
define|#
directive|define
name|QWINDOWSPIPEREADER_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<qobject.h>
end_include
begin_include
include|#
directive|include
file|<private/qringbuffer_p.h>
end_include
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|Q_CORE_EXPORT
name|QWindowsPipeReader
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|QWindowsPipeReader
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QWindowsPipeReader
argument_list|()
block|;
name|void
name|setHandle
argument_list|(
argument|HANDLE hPipeReadEnd
argument_list|)
block|;
name|void
name|startAsyncRead
argument_list|()
block|;
name|void
name|stop
argument_list|()
block|;
name|void
name|setMaxReadBufferSize
argument_list|(
argument|qint64 size
argument_list|)
block|{
name|readBufferMaxSize
operator|=
name|size
block|; }
name|qint64
name|maxReadBufferSize
argument_list|()
specifier|const
block|{
return|return
name|readBufferMaxSize
return|;
block|}
name|bool
name|isPipeClosed
argument_list|()
specifier|const
block|{
return|return
name|pipeBroken
return|;
block|}
name|qint64
name|bytesAvailable
argument_list|()
specifier|const
block|;
name|qint64
name|read
argument_list|(
argument|char *data
argument_list|,
argument|qint64 maxlen
argument_list|)
block|;
name|bool
name|canReadLine
argument_list|()
specifier|const
block|;
name|bool
name|waitForReadyRead
argument_list|(
argument|int msecs
argument_list|)
block|;
name|bool
name|waitForPipeClosed
argument_list|(
argument|int msecs
argument_list|)
block|;
name|bool
name|isReadOperationActive
argument_list|()
specifier|const
block|{
return|return
name|readSequenceStarted
return|;
block|}
name|Q_SIGNALS
operator|:
name|void
name|winError
argument_list|(
name|ulong
argument_list|,
specifier|const
name|QString
operator|&
argument_list|)
block|;
name|void
name|readyRead
argument_list|()
block|;
name|void
name|pipeClosed
argument_list|()
block|;
name|void
name|_q_queueReadyRead
argument_list|(
name|QPrivateSignal
argument_list|)
block|;
name|private
operator|:
specifier|static
name|void
name|CALLBACK
name|readFileCompleted
argument_list|(
argument|DWORD errorCode
argument_list|,
argument|DWORD numberOfBytesTransfered
argument_list|,
argument|OVERLAPPED *overlappedBase
argument_list|)
block|;
name|void
name|notified
argument_list|(
argument|DWORD errorCode
argument_list|,
argument|DWORD numberOfBytesRead
argument_list|)
block|;
name|DWORD
name|checkPipeState
argument_list|()
block|;
name|bool
name|waitForNotification
argument_list|(
argument|int timeout
argument_list|)
block|;
name|void
name|emitPendingReadyRead
argument_list|()
block|;
name|class
name|Overlapped
operator|:
name|public
name|OVERLAPPED
block|{
name|Q_DISABLE_COPY
argument_list|(
argument|Overlapped
argument_list|)
name|public
operator|:
name|explicit
name|Overlapped
argument_list|(
name|QWindowsPipeReader
operator|*
name|reader
argument_list|)
block|;
name|void
name|clear
argument_list|()
block|;
name|QWindowsPipeReader
operator|*
name|pipeReader
block|;     }
block|;
name|HANDLE
name|handle
block|;
name|Overlapped
name|overlapped
block|;
name|qint64
name|readBufferMaxSize
block|;
name|QRingBuffer
name|readBuffer
block|;
name|qint64
name|actualReadBufferSize
block|;
name|bool
name|stopped
block|;
name|bool
name|readSequenceStarted
block|;
name|bool
name|notifiedCalled
block|;
name|bool
name|pipeBroken
block|;
name|bool
name|readyReadPending
block|;
name|bool
name|inReadyRead
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QWINDOWSPIPEREADER_P_H
end_comment
end_unit
