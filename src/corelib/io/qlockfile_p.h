begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 David Faure<faure+bluesystems@kde.org> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QLOCKFILE_P_H
end_ifndef
begin_define
DECL|macro|QLOCKFILE_P_H
define|#
directive|define
name|QLOCKFILE_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtCore/qlockfile.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qfile.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|QLockFilePrivate
block|{
name|public
label|:
name|QLockFilePrivate
argument_list|(
specifier|const
name|QString
operator|&
name|fn
argument_list|)
operator|:
name|fileName
argument_list|(
name|fn
argument_list|)
operator|,
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|fileHandle
argument_list|(
name|INVALID_HANDLE_VALUE
argument_list|)
operator|,
else|#
directive|else
name|fileHandle
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
endif|#
directive|endif
name|staleLockTime
argument_list|(
literal|30
operator|*
literal|1000
argument_list|)
operator|,
comment|// 30 seconds
name|lockError
argument_list|(
name|QLockFile
operator|::
name|NoError
argument_list|)
operator|,
name|isLocked
argument_list|(
argument|false
argument_list|)
block|{     }
name|QLockFile
operator|::
name|LockError
name|tryLock_sys
argument_list|()
expr_stmt|;
name|bool
name|removeStaleLock
parameter_list|()
function_decl|;
name|bool
name|getLockInfo
argument_list|(
name|qint64
operator|*
name|pid
argument_list|,
name|QString
operator|*
name|hostname
argument_list|,
name|QString
operator|*
name|appname
argument_list|)
decl|const
decl_stmt|;
comment|// Returns true if the lock belongs to dead PID, or is old.
comment|// The attempt to delete it will tell us if it was really stale or not, though.
name|bool
name|isApparentlyStale
argument_list|()
specifier|const
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_UNIX
specifier|static
name|int
name|checkFcntlWorksAfterFlock
parameter_list|()
function_decl|;
endif|#
directive|endif
name|QString
name|fileName
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|Qt
operator|::
name|HANDLE
name|fileHandle
expr_stmt|;
else|#
directive|else
name|int
name|fileHandle
decl_stmt|;
endif|#
directive|endif
name|int
name|staleLockTime
decl_stmt|;
comment|// "int milliseconds" is big enough for 24 days
name|QLockFile
operator|::
name|LockError
name|lockError
expr_stmt|;
name|bool
name|isLocked
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* QLOCKFILE_P_H */
end_comment
end_unit
