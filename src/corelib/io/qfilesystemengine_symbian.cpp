begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qfilesystemengine_p.h"
end_include
begin_include
include|#
directive|include
file|"qfsfileengine.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qcore_symbian_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<f32file.h>
end_include
begin_include
include|#
directive|include
file|<pathinfo.h>
end_include
begin_include
include|#
directive|include
file|<wchar.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|isCaseSensitive
name|bool
name|QFileSystemEngine
operator|::
name|isCaseSensitive
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|//TODO: resolve this with QDir::cleanPath, without breaking the behaviour of that
end_comment
begin_comment
comment|//function which is documented only by autotest
end_comment
begin_comment
comment|//input: a dirty absolute path, e.g. c:/../../foo/./
end_comment
begin_comment
comment|//output: a clean absolute path, e.g. c:/foo/
end_comment
begin_function
DECL|function|symbianCleanAbsolutePath
specifier|static
name|QString
name|symbianCleanAbsolutePath
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
name|bool
name|isDir
init|=
name|path
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
decl_stmt|;
comment|//using SkipEmptyParts flag to eliminate duplicated slashes
name|QStringList
name|components
init|=
name|path
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
name|int
name|cdups
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|components
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
name|components
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
name|components
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|cdups
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|components
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|components
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cdups
operator|&&
name|i
operator|>
literal|0
condition|)
block|{
operator|--
name|cdups
expr_stmt|;
name|components
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|QString
name|result
init|=
name|components
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|isDir
operator|&&
operator|!
name|result
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
operator|)
operator|||
operator|(
name|result
operator|.
name|length
argument_list|()
operator|==
literal|2
operator|&&
name|result
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|unicode
argument_list|()
operator|==
literal|':'
operator|)
condition|)
name|result
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|getLinkTarget
name|QFileSystemEntry
name|QFileSystemEngine
operator|::
name|getLinkTarget
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|link
parameter_list|,
name|QFileSystemMetaData
modifier|&
name|data
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|link
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|canonicalName
name|QFileSystemEntry
name|QFileSystemEngine
operator|::
name|canonicalName
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|,
name|QFileSystemMetaData
modifier|&
name|data
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|.
name|isEmpty
argument_list|()
operator|||
name|entry
operator|.
name|isRoot
argument_list|()
condition|)
return|return
name|entry
return|;
name|QFileSystemEntry
name|result
init|=
name|absoluteName
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|hasFlags
argument_list|(
name|QFileSystemMetaData
operator|::
name|ExistsAttribute
argument_list|)
condition|)
name|fillMetaData
argument_list|(
name|result
argument_list|,
name|data
argument_list|,
name|QFileSystemMetaData
operator|::
name|ExistsAttribute
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// file doesn't exist
return|return
name|QFileSystemEntry
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|result
return|;
block|}
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|absoluteName
name|QFileSystemEntry
name|QFileSystemEngine
operator|::
name|absoluteName
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|)
block|{
name|QString
name|orig
init|=
name|entry
operator|.
name|filePath
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|isAbsolute
init|=
name|entry
operator|.
name|isAbsolute
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|isDirty
init|=
operator|(
name|orig
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"/../"
argument_list|)
argument_list|)
operator|||
name|orig
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"/./"
argument_list|)
argument_list|)
operator|||
name|orig
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"//"
argument_list|)
argument_list|)
operator|||
name|orig
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"/.."
argument_list|)
argument_list|)
operator|||
name|orig
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"/."
argument_list|)
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|isAbsolute
operator|&&
operator|!
name|isDirty
condition|)
return|return
name|entry
return|;
specifier|const
name|bool
name|isRelative
init|=
name|entry
operator|.
name|isRelative
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|needsDrive
init|=
operator|(
operator|!
name|orig
operator|.
name|isEmpty
argument_list|()
operator|&&
name|orig
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
operator|==
literal|'/'
operator|)
decl_stmt|;
specifier|const
name|bool
name|isDriveLetter
init|=
operator|!
name|needsDrive
operator|&&
operator|!
name|isAbsolute
operator|&&
operator|!
name|isRelative
operator|&&
name|orig
operator|.
name|length
argument_list|()
operator|==
literal|2
decl_stmt|;
specifier|const
name|bool
name|isDriveRelative
init|=
operator|!
name|needsDrive
operator|&&
operator|!
name|isAbsolute
operator|&&
operator|!
name|isRelative
operator|&&
name|orig
operator|.
name|length
argument_list|()
operator|>
literal|2
decl_stmt|;
name|QString
name|result
decl_stmt|;
if|if
condition|(
name|needsDrive
operator|||
name|isDriveLetter
operator|||
name|isDriveRelative
operator|||
operator|!
name|isAbsolute
operator|||
name|orig
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QFileSystemEntry
name|cur
argument_list|(
name|currentPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|needsDrive
condition|)
name|result
operator|=
name|cur
operator|.
name|filePath
argument_list|()
operator|.
name|left
argument_list|(
literal|2
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|isDriveRelative
operator|&&
name|cur
operator|.
name|filePath
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|!=
name|orig
operator|.
name|at
argument_list|(
literal|0
argument_list|)
condition|)
name|result
operator|=
name|orig
operator|.
name|left
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// for BC, see tst_QFileInfo::absolutePath(<not current drive>:my.dll)
else|else
name|result
operator|=
name|cur
operator|.
name|filePath
argument_list|()
expr_stmt|;
if|if
condition|(
name|isDriveLetter
condition|)
block|{
name|result
index|[
literal|0
index|]
operator|=
name|orig
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//copy drive letter
name|orig
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isDriveRelative
condition|)
block|{
name|orig
operator|=
name|orig
operator|.
name|mid
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|//discard the drive specifier from orig
block|}
block|}
if|if
condition|(
operator|!
name|orig
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
operator|(
name|orig
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
name|orig
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
operator|==
literal|'.'
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|result
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
name|result
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|orig
argument_list|)
expr_stmt|;
block|}
return|return
name|QFileSystemEntry
argument_list|(
name|symbianCleanAbsolutePath
argument_list|(
name|result
argument_list|)
argument_list|,
name|QFileSystemEntry
operator|::
name|FromInternalPath
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fillFromTEntry
name|void
name|QFileSystemMetaData
operator|::
name|fillFromTEntry
parameter_list|(
specifier|const
name|TEntry
modifier|&
name|entry
parameter_list|)
block|{
name|entryFlags
operator|&=
operator|~
operator|(
name|QFileSystemMetaData
operator|::
name|SymbianTEntryFlags
operator|)
expr_stmt|;
name|knownFlagsMask
operator||=
name|QFileSystemMetaData
operator|::
name|SymbianTEntryFlags
expr_stmt|;
comment|//Symbian doesn't have unix type file permissions
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|ReadPermissions
expr_stmt|;
if|if
condition|(
operator|!
name|entry
operator|.
name|IsReadOnly
argument_list|()
condition|)
block|{
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|WritePermissions
expr_stmt|;
block|}
comment|//set the type
if|if
condition|(
name|entry
operator|.
name|IsDir
argument_list|()
condition|)
name|entryFlags
operator||=
operator|(
name|QFileSystemMetaData
operator|::
name|DirectoryType
operator||
name|QFileSystemMetaData
operator|::
name|ExecutePermissions
operator|)
expr_stmt|;
else|else
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|FileType
expr_stmt|;
comment|//set the attributes
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|ExistsAttribute
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|IsHidden
argument_list|()
condition|)
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|HiddenAttribute
expr_stmt|;
ifdef|#
directive|ifdef
name|SYMBIAN_ENABLE_64_BIT_FILE_SERVER_API
name|size_
operator|=
name|entry
operator|.
name|FileSize
argument_list|()
expr_stmt|;
else|#
directive|else
name|size_
operator|=
call|(
name|TUint
call|)
argument_list|(
name|entry
operator|.
name|iSize
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|modificationTime_
operator|=
name|entry
operator|.
name|iModified
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillFromVolumeInfo
name|void
name|QFileSystemMetaData
operator|::
name|fillFromVolumeInfo
parameter_list|(
specifier|const
name|TVolumeInfo
modifier|&
name|info
parameter_list|)
block|{
name|entryFlags
operator|&=
operator|~
operator|(
name|QFileSystemMetaData
operator|::
name|SymbianTEntryFlags
operator|)
expr_stmt|;
name|knownFlagsMask
operator||=
name|QFileSystemMetaData
operator|::
name|SymbianTEntryFlags
expr_stmt|;
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|ExistsAttribute
expr_stmt|;
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|Permissions
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|iDrive
operator|.
name|iDriveAtt
operator|&
name|KDriveAttRom
condition|)
block|{
name|entryFlags
operator|&=
operator|~
operator|(
name|QFileSystemMetaData
operator|::
name|WritePermissions
operator|)
expr_stmt|;
block|}
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|DirectoryType
expr_stmt|;
name|size_
operator|=
name|info
operator|.
name|iSize
expr_stmt|;
name|modificationTime_
operator|=
name|qt_symbian_time_t_To_TTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|fillMetaData
name|bool
name|QFileSystemEngine
operator|::
name|fillMetaData
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|,
name|QFileSystemMetaData
modifier|&
name|data
parameter_list|,
name|QFileSystemMetaData
operator|::
name|MetaDataFlags
name|what
parameter_list|)
block|{
if|if
condition|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|SymbianTEntryFlags
condition|)
block|{
name|RFs
modifier|&
name|fs
argument_list|(
name|qt_s60GetRFs
argument_list|()
argument_list|)
decl_stmt|;
name|TInt
name|err
decl_stmt|;
name|QFileSystemEntry
name|absentry
argument_list|(
name|absoluteName
argument_list|(
name|entry
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|err
operator|=
name|KErrNotFound
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|absentry
operator|.
name|isRoot
argument_list|()
condition|)
block|{
comment|//Root directories don't have an entry, and Entry() returns KErrBadName.
comment|//Therefore get information about the volume instead.
name|TInt
name|drive
decl_stmt|;
name|err
operator|=
name|RFs
operator|::
name|CharToDrive
argument_list|(
name|TChar
argument_list|(
name|absentry
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
argument_list|)
argument_list|,
name|drive
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|err
condition|)
block|{
name|TVolumeInfo
name|info
decl_stmt|;
name|err
operator|=
name|fs
operator|.
name|Volume
argument_list|(
name|info
argument_list|,
name|drive
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|err
condition|)
name|data
operator|.
name|fillFromVolumeInfo
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|TEntry
name|ent
decl_stmt|;
name|err
operator|=
name|fs
operator|.
name|Entry
argument_list|(
name|qt_QString2TPtrC
argument_list|(
name|absentry
operator|.
name|nativeFilePath
argument_list|()
argument_list|)
argument_list|,
name|ent
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|err
condition|)
name|data
operator|.
name|fillFromTEntry
argument_list|(
name|ent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|err
condition|)
block|{
name|data
operator|.
name|size_
operator|=
literal|0
expr_stmt|;
name|data
operator|.
name|modificationTime_
operator|=
name|TTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|data
operator|.
name|entryFlags
operator|&=
operator|~
operator|(
name|QFileSystemMetaData
operator|::
name|SymbianTEntryFlags
operator|)
expr_stmt|;
block|}
comment|//files in /sys/bin on any drive are executable, even though we don't normally have permission to check whether they exist or not
if|if
condition|(
name|absentry
operator|.
name|filePath
argument_list|()
operator|.
name|midRef
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|":/sys/bin/"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|ExecutePermissions
expr_stmt|;
block|}
return|return
name|data
operator|.
name|hasFlags
argument_list|(
name|what
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|createDirectory
name|bool
name|QFileSystemEngine
operator|::
name|createDirectory
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|,
name|bool
name|createParents
parameter_list|)
block|{
name|QString
name|abspath
init|=
name|absoluteName
argument_list|(
name|entry
argument_list|)
operator|.
name|nativeFilePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|abspath
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
condition|)
name|abspath
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
expr_stmt|;
name|TInt
name|r
decl_stmt|;
if|if
condition|(
name|createParents
condition|)
name|r
operator|=
name|qt_s60GetRFs
argument_list|()
operator|.
name|MkDirAll
argument_list|(
name|qt_QString2TPtrC
argument_list|(
name|abspath
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|r
operator|=
name|qt_s60GetRFs
argument_list|()
operator|.
name|MkDir
argument_list|(
name|qt_QString2TPtrC
argument_list|(
name|abspath
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|createParents
operator|&&
name|r
operator|==
name|KErrAlreadyExists
condition|)
return|return
literal|true
return|;
comment|//# Qt5 - QDir::mkdir returns false for existing dir, QDir::mkpath returns true (should be made consistent in Qt 5)
return|return
operator|(
name|r
operator|==
name|KErrNone
operator|)
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|removeDirectory
name|bool
name|QFileSystemEngine
operator|::
name|removeDirectory
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|,
name|bool
name|removeEmptyParents
parameter_list|)
block|{
name|QString
name|abspath
init|=
name|absoluteName
argument_list|(
name|entry
argument_list|)
operator|.
name|nativeFilePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|abspath
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
condition|)
name|abspath
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
expr_stmt|;
name|TPtrC
name|dir
argument_list|(
name|qt_QString2TPtrC
argument_list|(
name|abspath
argument_list|)
argument_list|)
decl_stmt|;
name|RFs
modifier|&
name|fs
init|=
name|qt_s60GetRFs
argument_list|()
decl_stmt|;
name|bool
name|ok
init|=
literal|false
decl_stmt|;
comment|//behaviour of FS file engine:
comment|//returns true if the directory could be removed
comment|//success/failure of removing parent directories does not matter
while|while
condition|(
name|KErrNone
operator|==
name|fs
operator|.
name|RmDir
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|removeEmptyParents
condition|)
break|break;
comment|//RFs::RmDir treats "c:\foo\bar" and "c:\foo\" the same, so it is sufficient to remove the last \ to the end
name|dir
operator|.
name|Set
argument_list|(
name|dir
operator|.
name|Left
argument_list|(
name|dir
operator|.
name|LocateReverse
argument_list|(
name|TChar
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ok
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|createLink
name|bool
name|QFileSystemEngine
operator|::
name|createLink
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|source
parameter_list|,
specifier|const
name|QFileSystemEntry
modifier|&
name|target
parameter_list|,
name|QSystemError
modifier|&
name|error
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|source
argument_list|)
name|Q_UNUSED
argument_list|(
name|target
argument_list|)
name|error
operator|=
name|QSystemError
argument_list|(
name|KErrNotSupported
argument_list|,
name|QSystemError
operator|::
name|NativeError
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|copyFile
name|bool
name|QFileSystemEngine
operator|::
name|copyFile
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|source
parameter_list|,
specifier|const
name|QFileSystemEntry
modifier|&
name|target
parameter_list|,
name|QSystemError
modifier|&
name|error
parameter_list|)
block|{
comment|//CFileMan is allocated each time because it is not thread-safe
name|CFileMan
modifier|*
name|fm
init|=
literal|0
decl_stmt|;
name|TRAPD
argument_list|(
name|err
argument_list|,
name|fm
operator|=
name|CFileMan
operator|::
name|NewL
argument_list|(
name|qt_s60GetRFs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|==
name|KErrNone
condition|)
block|{
name|err
operator|=
name|fm
operator|->
name|Copy
argument_list|(
name|qt_QString2TPtrC
argument_list|(
name|absoluteName
argument_list|(
name|source
argument_list|)
operator|.
name|nativeFilePath
argument_list|()
argument_list|)
argument_list|,
name|qt_QString2TPtrC
argument_list|(
name|absoluteName
argument_list|(
name|target
argument_list|)
operator|.
name|nativeFilePath
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|fm
expr_stmt|;
block|}
if|if
condition|(
name|err
operator|==
name|KErrNone
condition|)
return|return
literal|true
return|;
name|error
operator|=
name|QSystemError
argument_list|(
name|err
argument_list|,
name|QSystemError
operator|::
name|NativeError
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|renameFile
name|bool
name|QFileSystemEngine
operator|::
name|renameFile
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|source
parameter_list|,
specifier|const
name|QFileSystemEntry
modifier|&
name|target
parameter_list|,
name|QSystemError
modifier|&
name|error
parameter_list|)
block|{
name|QString
name|sourcepath
init|=
name|absoluteName
argument_list|(
name|source
argument_list|)
operator|.
name|nativeFilePath
argument_list|()
decl_stmt|;
name|QString
name|targetpath
init|=
name|absoluteName
argument_list|(
name|target
argument_list|)
operator|.
name|nativeFilePath
argument_list|()
decl_stmt|;
name|RFs
modifier|&
name|fs
argument_list|(
name|qt_s60GetRFs
argument_list|()
argument_list|)
decl_stmt|;
name|TInt
name|err
init|=
name|fs
operator|.
name|Rename
argument_list|(
name|qt_QString2TPtrC
argument_list|(
name|sourcepath
argument_list|)
argument_list|,
name|qt_QString2TPtrC
argument_list|(
name|targetpath
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|==
name|KErrNone
condition|)
return|return
literal|true
return|;
name|error
operator|=
name|QSystemError
argument_list|(
name|err
argument_list|,
name|QSystemError
operator|::
name|NativeError
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|removeFile
name|bool
name|QFileSystemEngine
operator|::
name|removeFile
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|,
name|QSystemError
modifier|&
name|error
parameter_list|)
block|{
name|QString
name|targetpath
init|=
name|absoluteName
argument_list|(
name|entry
argument_list|)
operator|.
name|nativeFilePath
argument_list|()
decl_stmt|;
name|RFs
modifier|&
name|fs
argument_list|(
name|qt_s60GetRFs
argument_list|()
argument_list|)
decl_stmt|;
name|TInt
name|err
init|=
name|fs
operator|.
name|Delete
argument_list|(
name|qt_QString2TPtrC
argument_list|(
name|targetpath
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|==
name|KErrNone
condition|)
return|return
literal|true
return|;
name|error
operator|=
name|QSystemError
argument_list|(
name|err
argument_list|,
name|QSystemError
operator|::
name|NativeError
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|setPermissions
name|bool
name|QFileSystemEngine
operator|::
name|setPermissions
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|,
name|QFile
operator|::
name|Permissions
name|permissions
parameter_list|,
name|QSystemError
modifier|&
name|error
parameter_list|,
name|QFileSystemMetaData
modifier|*
name|data
parameter_list|)
block|{
name|QString
name|targetpath
init|=
name|absoluteName
argument_list|(
name|entry
argument_list|)
operator|.
name|nativeFilePath
argument_list|()
decl_stmt|;
name|TUint
name|setmask
init|=
literal|0
decl_stmt|;
name|TUint
name|clearmask
init|=
literal|0
decl_stmt|;
name|RFs
modifier|&
name|fs
argument_list|(
name|qt_s60GetRFs
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|permissions
operator|&
operator|(
name|QFile
operator|::
name|WriteOwner
operator||
name|QFile
operator|::
name|WriteUser
operator||
name|QFile
operator|::
name|WriteGroup
operator||
name|QFile
operator|::
name|WriteOther
operator|)
condition|)
name|clearmask
operator|=
name|KEntryAttReadOnly
expr_stmt|;
comment|//if anyone can write, it's not read-only
else|else
name|setmask
operator|=
name|KEntryAttReadOnly
expr_stmt|;
name|TInt
name|err
init|=
name|fs
operator|.
name|SetAtt
argument_list|(
name|qt_QString2TPtrC
argument_list|(
name|targetpath
argument_list|)
argument_list|,
name|setmask
argument_list|,
name|clearmask
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|&&
operator|!
name|err
condition|)
block|{
name|data
operator|->
name|entryFlags
operator|&=
operator|~
name|QFileSystemMetaData
operator|::
name|Permissions
expr_stmt|;
name|data
operator|->
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|MetaDataFlag
argument_list|(
name|uint
argument_list|(
name|permissions
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|->
name|knownFlagsMask
operator||=
name|QFileSystemMetaData
operator|::
name|Permissions
expr_stmt|;
block|}
if|if
condition|(
name|err
operator|==
name|KErrNone
condition|)
return|return
literal|true
return|;
name|error
operator|=
name|QSystemError
argument_list|(
name|err
argument_list|,
name|QSystemError
operator|::
name|NativeError
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|homePath
name|QString
name|QFileSystemEngine
operator|::
name|homePath
parameter_list|()
block|{
name|QString
name|home
init|=
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|qt_TDesC2QString
argument_list|(
name|PathInfo
operator|::
name|PhoneMemoryRootPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|home
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
name|home
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|home
return|;
block|}
end_function
begin_function
DECL|function|rootPath
name|QString
name|QFileSystemEngine
operator|::
name|rootPath
parameter_list|()
block|{
name|TChar
name|drive
decl_stmt|;
name|TInt
name|err
init|=
name|RFs
operator|::
name|DriveToChar
argument_list|(
name|RFs
operator|::
name|GetSystemDrive
argument_list|()
argument_list|,
name|drive
argument_list|)
decl_stmt|;
comment|//RFs::GetSystemDriveChar not supported on S60 3.1
name|Q_ASSERT
argument_list|(
name|err
operator|==
name|KErrNone
argument_list|)
expr_stmt|;
comment|//RFs::GetSystemDrive() shall always return a convertible drive number on a valid OS configuration
return|return
name|QString
argument_list|(
name|QChar
argument_list|(
name|drive
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|":/"
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|tempPath
name|QString
name|QFileSystemEngine
operator|::
name|tempPath
parameter_list|()
block|{
return|return
name|rootPath
argument_list|()
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"system/temp"
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|setCurrentPath
name|bool
name|QFileSystemEngine
operator|::
name|setCurrentPath
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|)
block|{
name|QFileSystemMetaData
name|meta
decl_stmt|;
name|QFileSystemEntry
name|absname
init|=
name|absoluteName
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|fillMetaData
argument_list|(
name|absname
argument_list|,
name|meta
argument_list|,
name|QFileSystemMetaData
operator|::
name|ExistsAttribute
operator||
name|QFileSystemMetaData
operator|::
name|DirectoryType
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|meta
operator|.
name|exists
argument_list|()
operator|&&
name|meta
operator|.
name|isDirectory
argument_list|()
operator|)
condition|)
return|return
literal|false
return|;
name|RFs
modifier|&
name|fs
init|=
name|qt_s60GetRFs
argument_list|()
decl_stmt|;
name|QString
name|abspath
init|=
name|absname
operator|.
name|nativeFilePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|abspath
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
condition|)
name|abspath
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
expr_stmt|;
name|TInt
name|r
init|=
name|fs
operator|.
name|SetSessionPath
argument_list|(
name|qt_QString2TPtrC
argument_list|(
name|abspath
argument_list|)
argument_list|)
decl_stmt|;
comment|//SetSessionPath succeeds for non existent directory, which is why it's checked above
if|if
condition|(
name|r
operator|==
name|KErrNone
condition|)
block|{
name|__ASSERT_COMPILE
argument_list|(
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
operator|==
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
argument_list|)
expr_stmt|;
comment|//attempt to set open C to the same path
name|r
operator|=
operator|::
name|wchdir
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|absname
operator|.
name|filePath
argument_list|()
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|<
literal|0
condition|)
name|qWarning
argument_list|(
literal|"failed to sync path to open C"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|currentPath
name|QFileSystemEntry
name|QFileSystemEngine
operator|::
name|currentPath
parameter_list|()
block|{
name|TFileName
name|fn
decl_stmt|;
name|QFileSystemEntry
name|ret
decl_stmt|;
name|TInt
name|r
init|=
name|qt_s60GetRFs
argument_list|()
operator|.
name|SessionPath
argument_list|(
name|fn
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|KErrNone
condition|)
block|{
comment|//remove terminating slash from non root paths (session path is clean, absolute and always ends in a \)
if|if
condition|(
name|fn
operator|.
name|Length
argument_list|()
operator|>
literal|3
operator|&&
name|fn
index|[
name|fn
operator|.
name|Length
argument_list|()
operator|-
literal|1
index|]
operator|==
literal|'\\'
condition|)
name|fn
operator|.
name|SetLength
argument_list|(
name|fn
operator|.
name|Length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ret
operator|=
name|QFileSystemEntry
argument_list|(
name|qt_TDesC2QString
argument_list|(
name|fn
argument_list|)
argument_list|,
name|QFileSystemEntry
operator|::
name|FromNativePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
