begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//#define QPROCESS_DEBUG
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QPROCESS_DEBUG
end_ifdef
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_define
DECL|macro|QPROCESS_DEBUG_PRINT
define|#
directive|define
name|QPROCESS_DEBUG_PRINT
parameter_list|(
name|args
modifier|...
parameter_list|)
value|qDebug(args);
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|QPROCESS_DEBUG_PRINT
define|#
directive|define
name|QPROCESS_DEBUG_PRINT
parameter_list|(
name|args
modifier|...
parameter_list|)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PROCESS
end_ifndef
begin_define
DECL|macro|QPROCESS_ASSERT
define|#
directive|define
name|QPROCESS_ASSERT
parameter_list|(
name|check
parameter_list|,
name|panicReason
parameter_list|,
name|args
modifier|...
parameter_list|)
define|\
value|if (!(check)) { \         qWarning(args); \         User::Panic(KQProcessPanic, panicReason); \     }
end_define
begin_include
include|#
directive|include
file|<exception>
end_include
begin_include
include|#
directive|include
file|<e32base.h>
end_include
begin_include
include|#
directive|include
file|<e32std.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qdir.h"
end_include
begin_include
include|#
directive|include
file|"qstring.h"
end_include
begin_include
include|#
directive|include
file|"qprocess.h"
end_include
begin_include
include|#
directive|include
file|"qprocess_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qeventdispatcher_symbian_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qthread_p.h>
end_include
begin_include
include|#
directive|include
file|<qmutex.h>
end_include
begin_include
include|#
directive|include
file|<qmap.h>
end_include
begin_include
include|#
directive|include
file|<qsocketnotifier.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|_LIT
argument_list|(
name|KQProcessManagerThreadName
argument_list|,
literal|"QProcManThread"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|_LIT
argument_list|(
name|KQProcessPanic
argument_list|,
literal|"QPROCESS"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_enum
DECL|enum|TQProcessPanic
enum|enum
name|TQProcessPanic
block|{
DECL|enumerator|EProcessManagerMediatorRunError
name|EProcessManagerMediatorRunError
init|=
literal|1
block|,
DECL|enumerator|EProcessManagerMediatorInactive
name|EProcessManagerMediatorInactive
init|=
literal|2
block|,
DECL|enumerator|EProcessManagerMediatorNotPending
name|EProcessManagerMediatorNotPending
init|=
literal|3
block|,
DECL|enumerator|EProcessManagerMediatorInvalidCmd
name|EProcessManagerMediatorInvalidCmd
init|=
literal|4
block|,
DECL|enumerator|EProcessManagerMediatorCreationFailed
name|EProcessManagerMediatorCreationFailed
init|=
literal|5
block|,
DECL|enumerator|EProcessManagerMediatorThreadOpenFailed
name|EProcessManagerMediatorThreadOpenFailed
init|=
literal|6
block|,
DECL|enumerator|EProcessManagerMediatorNullObserver
name|EProcessManagerMediatorNullObserver
init|=
literal|7
block|,
DECL|enumerator|EProcessActiveRunError
name|EProcessActiveRunError
init|=
literal|10
block|,
DECL|enumerator|EProcessActiveNullParameter
name|EProcessActiveNullParameter
init|=
literal|11
block|,
DECL|enumerator|EProcessManagerMutexCreationFail
name|EProcessManagerMutexCreationFail
init|=
literal|20
block|,
DECL|enumerator|EProcessManagerThreadCreationFail
name|EProcessManagerThreadCreationFail
init|=
literal|21
block|,
DECL|enumerator|EProcessManagerSchedulerCreationFail
name|EProcessManagerSchedulerCreationFail
init|=
literal|22
block|,
DECL|enumerator|EProcessManagerNullParam
name|EProcessManagerNullParam
init|=
literal|23
block|}
enum|;
end_enum
begin_comment
comment|// Forward declarations
end_comment
begin_class_decl
class_decl|class
name|QProcessManager
class_decl|;
end_class_decl
begin_comment
comment|// Active object to listen for child process death
end_comment
begin_class
DECL|class|QProcessActive
class|class
name|QProcessActive
super|:
specifier|public
name|CActive
block|{
public|public:
specifier|static
name|QProcessActive
modifier|*
name|construct
parameter_list|(
name|QProcess
modifier|*
name|process
parameter_list|,
name|RProcess
modifier|*
modifier|*
name|proc
parameter_list|,
name|int
name|serial
parameter_list|,
name|int
name|deathPipe
parameter_list|)
function_decl|;
specifier|virtual
name|~
name|QProcessActive
parameter_list|()
destructor_decl|;
name|void
name|start
parameter_list|()
function_decl|;
name|void
name|stop
parameter_list|()
function_decl|;
name|bool
name|error
parameter_list|()
function_decl|;
protected|protected:
comment|// Inherited from CActive
name|void
name|RunL
parameter_list|()
function_decl|;
name|TInt
name|RunError
parameter_list|(
name|TInt
name|aError
parameter_list|)
function_decl|;
name|void
name|DoCancel
parameter_list|()
function_decl|;
name|QProcessActive
parameter_list|()
constructor_decl|;
private|private:
DECL|member|process
name|QProcess
modifier|*
name|process
decl_stmt|;
DECL|member|pproc
name|RProcess
modifier|*
modifier|*
name|pproc
decl_stmt|;
DECL|member|serial
name|int
name|serial
decl_stmt|;
DECL|member|deathPipe
name|int
name|deathPipe
decl_stmt|;
DECL|member|errorValue
name|bool
name|errorValue
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// Active object to communicate synchronously with process manager thread
end_comment
begin_class
DECL|class|QProcessManagerMediator
class|class
name|QProcessManagerMediator
super|:
specifier|public
name|CActive
block|{
public|public:
specifier|static
name|QProcessManagerMediator
modifier|*
name|construct
parameter_list|()
function_decl|;
specifier|virtual
name|~
name|QProcessManagerMediator
parameter_list|()
destructor_decl|;
name|bool
name|add
parameter_list|(
name|QProcessActive
modifier|*
name|processObserver
parameter_list|)
function_decl|;
name|void
name|remove
parameter_list|(
name|QProcessActive
modifier|*
name|processObserver
parameter_list|)
function_decl|;
name|void
name|terminate
parameter_list|()
function_decl|;
protected|protected:
DECL|enum|Commands
enum|enum
name|Commands
block|{
DECL|enumerator|ENoCommand
name|ENoCommand
block|,
DECL|enumerator|EAdd
name|EAdd
block|,
DECL|enumerator|ERemove
name|ERemove
block|,
DECL|enumerator|ETerminate
name|ETerminate
block|}
enum|;
comment|// Inherited from CActive
name|void
name|RunL
parameter_list|()
function_decl|;
name|TInt
name|RunError
parameter_list|(
name|TInt
name|aError
parameter_list|)
function_decl|;
name|void
name|DoCancel
parameter_list|()
function_decl|;
name|QProcessManagerMediator
parameter_list|()
constructor_decl|;
name|bool
name|notify
parameter_list|(
name|QProcessActive
modifier|*
name|processObserver
parameter_list|,
name|Commands
name|command
parameter_list|)
function_decl|;
private|private:
DECL|member|currentObserver
name|QProcessActive
modifier|*
name|currentObserver
decl_stmt|;
DECL|member|currentCommand
name|Commands
name|currentCommand
decl_stmt|;
DECL|member|processManagerThread
name|RThread
name|processManagerThread
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// Process manager manages child process death listeners.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Note: Because QProcess can be used outside event loop, we cannot be guaranteed
end_comment
begin_comment
comment|// an active scheduler exists for us to add our process death listener objects.
end_comment
begin_comment
comment|// We can't just install active scheduler on the calling thread, as that would block it
end_comment
begin_comment
comment|// if we want to actually use it, so a separate manager thread is required.
end_comment
begin_class
DECL|class|QProcessManager
class|class
name|QProcessManager
block|{
public|public:
name|QProcessManager
parameter_list|()
constructor_decl|;
name|~
name|QProcessManager
parameter_list|()
destructor_decl|;
name|void
name|startThread
parameter_list|()
function_decl|;
name|TInt
name|run
parameter_list|(
name|void
modifier|*
name|param
parameter_list|)
function_decl|;
name|bool
name|add
parameter_list|(
name|QProcess
modifier|*
name|process
parameter_list|)
function_decl|;
name|void
name|remove
parameter_list|(
name|QProcess
modifier|*
name|process
parameter_list|)
function_decl|;
DECL|function|setMediator
specifier|inline
name|void
name|setMediator
parameter_list|(
name|QProcessManagerMediator
modifier|*
name|newMediator
parameter_list|)
block|{
name|mediator
operator|=
name|newMediator
expr_stmt|;
block|}
empty_stmt|;
private|private:
DECL|function|lock
specifier|inline
name|void
name|lock
parameter_list|()
block|{
name|managerMutex
operator|.
name|Wait
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
DECL|function|unlock
specifier|inline
name|void
name|unlock
parameter_list|()
block|{
name|managerMutex
operator|.
name|Signal
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
DECL|member|children
name|QMap
argument_list|<
name|int
argument_list|,
name|QProcessActive
modifier|*
argument_list|>
name|children
decl_stmt|;
DECL|member|mediator
name|QProcessManagerMediator
modifier|*
name|mediator
decl_stmt|;
DECL|member|managerMutex
name|RMutex
name|managerMutex
decl_stmt|;
DECL|member|threadStarted
name|bool
name|threadStarted
decl_stmt|;
DECL|member|managerThread
name|RThread
name|managerThread
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|qt_rprocess_running
specifier|static
name|bool
name|qt_rprocess_running
parameter_list|(
name|RProcess
modifier|*
name|proc
parameter_list|)
block|{
if|if
condition|(
name|proc
operator|&&
name|proc
operator|->
name|Handle
argument_list|()
condition|)
block|{
name|TExitType
name|et
init|=
name|proc
operator|->
name|ExitType
argument_list|()
decl_stmt|;
if|if
condition|(
name|et
operator|==
name|EExitPending
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|qt_create_symbian_commandline
specifier|static
name|void
name|qt_create_symbian_commandline
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|arguments
parameter_list|,
specifier|const
name|QString
modifier|&
name|nativeArguments
parameter_list|,
name|QString
modifier|&
name|commandLine
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|tmp
init|=
name|arguments
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// in the case of \" already being in the string the \ must also be escaped
name|tmp
operator|.
name|replace
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\\""
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"\\\\\""
argument_list|)
argument_list|)
expr_stmt|;
comment|// escape a single " because the arguments will be parsed
name|tmp
operator|.
name|replace
argument_list|(
name|QLatin1String
argument_list|(
literal|"\""
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"\\\""
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmp
operator|.
name|isEmpty
argument_list|()
operator|||
name|tmp
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|||
name|tmp
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\t'
argument_list|)
argument_list|)
condition|)
block|{
comment|// The argument must not end with a \ since this would be interpreted
comment|// as escaping the quote -- rather put the \ behind the quote: e.g.
comment|// rather use "foo"\ than "foo\"
name|QString
name|endQuote
argument_list|(
name|QLatin1String
argument_list|(
literal|"\""
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|i
init|=
name|tmp
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|>
literal|0
operator|&&
name|tmp
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
condition|)
block|{
operator|--
name|i
expr_stmt|;
name|endQuote
operator|+=
name|QLatin1String
argument_list|(
literal|"\\"
argument_list|)
expr_stmt|;
block|}
name|commandLine
operator|+=
name|QLatin1String
argument_list|(
literal|"\""
argument_list|)
operator|+
name|tmp
operator|.
name|left
argument_list|(
name|i
argument_list|)
operator|+
name|endQuote
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commandLine
operator|+=
name|tmp
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|nativeArguments
operator|.
name|isEmpty
argument_list|()
condition|)
name|commandLine
operator|+=
name|nativeArguments
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|commandLine
operator|.
name|isEmpty
argument_list|()
condition|)
comment|// Chop the extra trailing space if any arguments were appended
name|commandLine
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_create_symbian_process
specifier|static
name|TInt
name|qt_create_symbian_process
parameter_list|(
name|RProcess
modifier|*
modifier|*
name|proc
parameter_list|,
specifier|const
name|QString
modifier|&
name|programName
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|arguments
parameter_list|,
specifier|const
name|QString
modifier|&
name|nativeArguments
parameter_list|)
block|{
name|RProcess
modifier|*
name|newProc
init|=
name|NULL
decl_stmt|;
name|newProc
operator|=
operator|new
name|RProcess
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|newProc
condition|)
return|return
name|KErrNoMemory
return|;
name|QString
name|commandLine
decl_stmt|;
name|qt_create_symbian_commandline
argument_list|(
name|arguments
argument_list|,
name|nativeArguments
argument_list|,
name|commandLine
argument_list|)
expr_stmt|;
name|TPtrC
name|program_ptr
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|TText
operator|*
argument_list|>
argument_list|(
name|programName
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TPtrC
name|cmdline_ptr
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|TText
operator|*
argument_list|>
argument_list|(
name|commandLine
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TInt
name|err
init|=
name|newProc
operator|->
name|Create
argument_list|(
name|program_ptr
argument_list|,
name|cmdline_ptr
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|==
name|KErrNotFound
condition|)
block|{
comment|// Strip path from program name and try again (i.e. try from default location "\sys\bin")
name|int
name|index
init|=
name|programName
operator|.
name|lastIndexOf
argument_list|(
name|QDir
operator|::
name|separator
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|index2
init|=
name|programName
operator|.
name|lastIndexOf
argument_list|(
name|QChar
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|index
operator|=
name|qMax
argument_list|(
name|index
argument_list|,
name|index2
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
operator|&&
name|programName
operator|.
name|length
argument_list|()
operator|>=
name|index
condition|)
block|{
name|QString
name|strippedName
decl_stmt|;
name|strippedName
operator|=
name|programName
operator|.
name|mid
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"qt_create_symbian_process() Executable '%s' not found, trying stripped version '%s'"
argument_list|,
name|qPrintable
argument_list|(
name|programName
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|strippedName
argument_list|)
argument_list|)
expr_stmt|;
name|TPtrC
name|stripped_ptr
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|TText
operator|*
argument_list|>
argument_list|(
name|strippedName
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|err
operator|=
name|newProc
operator|->
name|Create
argument_list|(
name|stripped_ptr
argument_list|,
name|cmdline_ptr
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|!=
name|KErrNone
condition|)
block|{
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"qt_create_symbian_process() Unable to create process '%s': %d"
argument_list|,
name|qPrintable
argument_list|(
name|strippedName
argument_list|)
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|err
operator|==
name|KErrNone
condition|)
operator|*
name|proc
operator|=
name|newProc
expr_stmt|;
else|else
operator|delete
name|newProc
expr_stmt|;
return|return
name|err
return|;
block|}
end_function
begin_function
DECL|function|qt_native_read
specifier|static
name|qint64
name|qt_native_read
parameter_list|(
name|int
name|fd
parameter_list|,
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxlen
parameter_list|)
block|{
name|qint64
name|ret
init|=
literal|0
decl_stmt|;
do|do
block|{
name|ret
operator|=
operator|::
name|read
argument_list|(
name|fd
argument_list|,
name|data
argument_list|,
name|maxlen
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|ret
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|==
name|EINTR
condition|)
do|;
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"qt_native_read(): fd: %d, result: %d, errno = %d"
argument_list|,
name|fd
argument_list|,
operator|(
name|int
operator|)
name|ret
argument_list|,
name|errno
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|qt_native_write
specifier|static
name|qint64
name|qt_native_write
parameter_list|(
name|int
name|fd
parameter_list|,
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|len
parameter_list|)
block|{
name|qint64
name|ret
init|=
literal|0
decl_stmt|;
do|do
block|{
name|ret
operator|=
operator|::
name|write
argument_list|(
name|fd
argument_list|,
name|data
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|ret
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|==
name|EINTR
condition|)
do|;
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"qt_native_write(): fd: %d, result: %d, errno = %d"
argument_list|,
name|fd
argument_list|,
operator|(
name|int
operator|)
name|ret
argument_list|,
name|errno
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|qt_native_close
specifier|static
name|void
name|qt_native_close
parameter_list|(
name|int
name|fd
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
do|do
block|{
name|ret
operator|=
operator|::
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|ret
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|==
name|EINTR
condition|)
do|;
block|}
end_function
begin_function
DECL|function|qt_create_pipe
specifier|static
name|void
name|qt_create_pipe
parameter_list|(
name|int
modifier|*
name|pipe
parameter_list|)
block|{
if|if
condition|(
name|pipe
index|[
literal|0
index|]
operator|!=
operator|-
literal|1
condition|)
name|qt_native_close
argument_list|(
name|pipe
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|pipe
index|[
literal|1
index|]
operator|!=
operator|-
literal|1
condition|)
name|qt_native_close
argument_list|(
name|pipe
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|::
name|pipe
argument_list|(
name|pipe
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QProcessPrivate::createPipe: Cannot create pipe %p: %s"
argument_list|,
name|pipe
argument_list|,
name|qPrintable
argument_list|(
name|qt_error_string
argument_list|(
name|errno
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"qt_create_pipe(): Created pipe %d - %d"
argument_list|,
name|pipe
index|[
literal|0
index|]
argument_list|,
name|pipe
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Called from ProcessManagerThread
end_comment
begin_function
DECL|function|construct
name|QProcessActive
modifier|*
name|QProcessActive
operator|::
name|construct
parameter_list|(
name|QProcess
modifier|*
name|process
parameter_list|,
name|RProcess
modifier|*
modifier|*
name|proc
parameter_list|,
name|int
name|serial
parameter_list|,
name|int
name|deathPipe
parameter_list|)
block|{
name|QPROCESS_ASSERT
argument_list|(
argument|(process || proc || *proc)
argument_list|,
argument|EProcessActiveNullParameter
argument_list|,
literal|"QProcessActive::construct(): process (0x%x), proc (0x%x) or *proc == NULL, not creating an instance"
argument_list|,
argument|process
argument_list|,
argument|proc
argument_list|)
name|QProcessActive
modifier|*
name|newInstance
init|=
operator|new
name|QProcessActive
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|newInstance
condition|)
block|{
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessActive::construct(): Failed to create new instance"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newInstance
operator|->
name|process
operator|=
name|process
expr_stmt|;
name|newInstance
operator|->
name|pproc
operator|=
name|proc
expr_stmt|;
name|newInstance
operator|->
name|serial
operator|=
name|serial
expr_stmt|;
name|newInstance
operator|->
name|deathPipe
operator|=
name|deathPipe
expr_stmt|;
name|newInstance
operator|->
name|errorValue
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|newInstance
return|;
block|}
end_function
begin_comment
comment|// Called from ProcessManagerThread
end_comment
begin_constructor
DECL|function|QProcessActive
name|QProcessActive
operator|::
name|QProcessActive
parameter_list|()
member_init_list|:
name|CActive
argument_list|(
name|CActive
operator|::
name|EPriorityStandard
argument_list|)
block|{
comment|// Nothing to do
block|}
end_constructor
begin_comment
comment|// Called from main thread
end_comment
begin_destructor
DECL|function|~QProcessActive
name|QProcessActive
operator|::
name|~
name|QProcessActive
parameter_list|()
block|{
name|process
operator|=
name|NULL
expr_stmt|;
name|pproc
operator|=
name|NULL
expr_stmt|;
block|}
end_destructor
begin_comment
comment|// Called from ProcessManagerThread
end_comment
begin_function
DECL|function|start
name|void
name|QProcessActive
operator|::
name|start
parameter_list|()
block|{
if|if
condition|(
name|qt_rprocess_running
argument_list|(
operator|*
name|pproc
argument_list|)
condition|)
block|{
name|CActiveScheduler
operator|::
name|Add
argument_list|(
name|this
argument_list|)
expr_stmt|;
operator|(
operator|*
name|pproc
operator|)
operator|->
name|Logon
argument_list|(
name|iStatus
argument_list|)
expr_stmt|;
name|SetActive
argument_list|()
expr_stmt|;
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessActive::start(): Started monitoring for process exit."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessActive::start(): Process doesn't exist or is already dead"
argument_list|)
expr_stmt|;
comment|// Assume process has already died
name|qt_native_write
argument_list|(
name|deathPipe
argument_list|,
literal|""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|errorValue
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Called from ProcessManagerThread
end_comment
begin_function
DECL|function|stop
name|void
name|QProcessActive
operator|::
name|stop
parameter_list|()
block|{
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessActive::stop()"
argument_list|)
expr_stmt|;
comment|// Remove this from scheduler (also cancels the request)
name|Deque
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|error
name|bool
name|QProcessActive
operator|::
name|error
parameter_list|()
block|{
return|return
name|errorValue
return|;
block|}
end_function
begin_comment
comment|// Called from ProcessManagerThread
end_comment
begin_function
DECL|function|RunL
name|void
name|QProcessActive
operator|::
name|RunL
parameter_list|()
block|{
comment|// If this method gets executed, the monitored process has died
comment|// Notify main thread
name|qt_native_write
argument_list|(
name|deathPipe
argument_list|,
literal|""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessActive::RunL() sending death notice to %d"
argument_list|,
name|deathPipe
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Called from ProcessManagerThread
end_comment
begin_function
DECL|function|RunError
name|TInt
name|QProcessActive
operator|::
name|RunError
parameter_list|(
name|TInt
name|aError
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|aError
argument_list|)
expr_stmt|;
comment|// Handle RunL leave (should never happen)
name|QPROCESS_ASSERT
argument_list|(
literal|0
argument_list|,
argument|EProcessActiveRunError
argument_list|,
literal|"QProcessActive::RunError(): Should never get here!"
argument_list|)
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|// Called from ProcessManagerThread
end_comment
begin_function
DECL|function|DoCancel
name|void
name|QProcessActive
operator|::
name|DoCancel
parameter_list|()
block|{
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessActive::DoCancel()"
argument_list|)
expr_stmt|;
if|if
condition|(
name|qt_rprocess_running
argument_list|(
operator|*
name|pproc
argument_list|)
condition|)
block|{
operator|(
operator|*
name|pproc
operator|)
operator|->
name|LogonCancel
argument_list|(
name|iStatus
argument_list|)
expr_stmt|;
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessActive::DoCancel(): Stopped monitoring for process exit."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessActive::DoCancel(): Process doesn't exist"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Called from ProcessManagerThread
end_comment
begin_function
DECL|function|construct
name|QProcessManagerMediator
modifier|*
name|QProcessManagerMediator
operator|::
name|construct
parameter_list|()
block|{
name|QProcessManagerMediator
modifier|*
name|newInstance
init|=
operator|new
name|QProcessManagerMediator
decl_stmt|;
name|TInt
name|err
argument_list|(
name|KErrNone
argument_list|)
decl_stmt|;
name|newInstance
operator|->
name|currentCommand
operator|=
name|ENoCommand
expr_stmt|;
name|newInstance
operator|->
name|currentObserver
operator|=
name|NULL
expr_stmt|;
if|if
condition|(
name|newInstance
condition|)
block|{
name|err
operator|=
name|newInstance
operator|->
name|processManagerThread
operator|.
name|Open
argument_list|(
name|newInstance
operator|->
name|processManagerThread
operator|.
name|Id
argument_list|()
argument_list|)
expr_stmt|;
name|QPROCESS_ASSERT
argument_list|(
argument|(err == KErrNone)
argument_list|,
argument|EProcessManagerMediatorThreadOpenFailed
argument_list|,
literal|"QProcessManagerMediator::construct(): Failed to open processManagerThread (err:%d)"
argument_list|,
argument|err
argument_list|)
block|}
else|else
block|{
name|QPROCESS_ASSERT
argument_list|(
literal|0
argument_list|,
argument|EProcessManagerMediatorCreationFailed
argument_list|,
literal|"QProcessManagerMediator::construct(): Failed to open construct mediator"
argument_list|)
block|}
comment|// Activate mediator
name|CActiveScheduler
operator|::
name|Add
argument_list|(
name|newInstance
argument_list|)
expr_stmt|;
name|newInstance
operator|->
name|iStatus
operator|=
name|KRequestPending
expr_stmt|;
name|newInstance
operator|->
name|SetActive
argument_list|()
expr_stmt|;
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessManagerMediator::construct(): new instance successfully created and activated"
argument_list|)
expr_stmt|;
return|return
name|newInstance
return|;
block|}
end_function
begin_comment
comment|// Called from ProcessManagerThread
end_comment
begin_constructor
DECL|function|QProcessManagerMediator
name|QProcessManagerMediator
operator|::
name|QProcessManagerMediator
parameter_list|()
member_init_list|:
name|CActive
argument_list|(
name|CActive
operator|::
name|EPriorityStandard
argument_list|)
block|{
comment|// Nothing to do
block|}
end_constructor
begin_comment
comment|// Called from main thread
end_comment
begin_destructor
DECL|function|~QProcessManagerMediator
name|QProcessManagerMediator
operator|::
name|~
name|QProcessManagerMediator
parameter_list|()
block|{
name|processManagerThread
operator|.
name|Close
argument_list|()
expr_stmt|;
name|currentCommand
operator|=
name|ENoCommand
expr_stmt|;
name|currentObserver
operator|=
name|NULL
expr_stmt|;
block|}
end_destructor
begin_comment
comment|// Called from main thread
end_comment
begin_function
DECL|function|add
name|bool
name|QProcessManagerMediator
operator|::
name|add
parameter_list|(
name|QProcessActive
modifier|*
name|processObserver
parameter_list|)
block|{
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessManagerMediator::add()"
argument_list|)
expr_stmt|;
return|return
name|notify
argument_list|(
name|processObserver
argument_list|,
name|EAdd
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Called from main thread
end_comment
begin_function
DECL|function|remove
name|void
name|QProcessManagerMediator
operator|::
name|remove
parameter_list|(
name|QProcessActive
modifier|*
name|processObserver
parameter_list|)
block|{
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessManagerMediator::remove()"
argument_list|)
expr_stmt|;
name|notify
argument_list|(
name|processObserver
argument_list|,
name|ERemove
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Called from main thread
end_comment
begin_function
DECL|function|terminate
name|void
name|QProcessManagerMediator
operator|::
name|terminate
parameter_list|()
block|{
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessManagerMediator::terminate()"
argument_list|)
expr_stmt|;
name|notify
argument_list|(
name|NULL
argument_list|,
name|ETerminate
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Called from main thread
end_comment
begin_function
DECL|function|notify
name|bool
name|QProcessManagerMediator
operator|::
name|notify
parameter_list|(
name|QProcessActive
modifier|*
name|processObserver
parameter_list|,
name|Commands
name|command
parameter_list|)
block|{
name|bool
name|success
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessManagerMediator::Notify(): Command: %d, processObserver: 0x%x"
argument_list|,
name|command
argument_list|,
name|processObserver
argument_list|)
expr_stmt|;
name|QPROCESS_ASSERT
argument_list|(
argument|(command == ETerminate || processObserver)
argument_list|,
argument|EProcessManagerMediatorNullObserver
argument_list|,
literal|"QProcessManagerMediator::Notify(): NULL processObserver not allowed for command: %d"
argument_list|,
argument|command
argument_list|)
name|QPROCESS_ASSERT
argument_list|(
argument|IsActive()
argument_list|,
argument|EProcessManagerMediatorInactive
argument_list|,
literal|"QProcessManagerMediator::Notify(): Mediator is not active!"
argument_list|)
name|QPROCESS_ASSERT
argument_list|(
argument|iStatus == KRequestPending
argument_list|,
argument|EProcessManagerMediatorNotPending
argument_list|,
literal|"QProcessManagerMediator::Notify(): Mediator request not pending!"
argument_list|)
name|currentObserver
operator|=
name|processObserver
expr_stmt|;
name|currentCommand
operator|=
name|command
expr_stmt|;
comment|// Sync with process manager thread
name|TRequestStatus
name|pmStatus
decl_stmt|;
name|processManagerThread
operator|.
name|Rendezvous
argument_list|(
name|pmStatus
argument_list|)
expr_stmt|;
comment|// Complete request -> RunL will run in the process manager thread
name|TRequestStatus
modifier|*
name|status
init|=
operator|&
name|iStatus
decl_stmt|;
name|processManagerThread
operator|.
name|RequestComplete
argument_list|(
name|status
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessManagerMediator::Notify(): Waiting process manager to complete..."
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|pmStatus
argument_list|)
expr_stmt|;
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessManagerMediator::Notify(): Wait over"
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentObserver
condition|)
block|{
name|success
operator|=
operator|!
operator|(
name|currentObserver
operator|->
name|error
argument_list|()
operator|)
expr_stmt|;
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessManagerMediator::Notify(): success = %d"
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
name|currentObserver
operator|=
name|NULL
expr_stmt|;
name|currentCommand
operator|=
name|ENoCommand
expr_stmt|;
return|return
name|success
return|;
block|}
end_function
begin_comment
comment|// Called from ProcessManagerThread
end_comment
begin_function
DECL|function|RunL
name|void
name|QProcessManagerMediator
operator|::
name|RunL
parameter_list|()
block|{
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessManagerMediator::RunL(): currentCommand: %d, iStatus: %d"
argument_list|,
name|currentCommand
argument_list|,
name|iStatus
operator|.
name|Int
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|currentCommand
condition|)
block|{
case|case
name|EAdd
case|:
name|currentObserver
operator|->
name|start
argument_list|()
expr_stmt|;
break|break;
case|case
name|ERemove
case|:
name|currentObserver
operator|->
name|stop
argument_list|()
expr_stmt|;
break|break;
case|case
name|ETerminate
case|:
name|Deque
argument_list|()
expr_stmt|;
name|CActiveScheduler
operator|::
name|Stop
argument_list|()
expr_stmt|;
return|return;
default|default:
name|QPROCESS_ASSERT
argument_list|(
literal|0
argument_list|,
argument|EProcessManagerMediatorInvalidCmd
argument_list|,
literal|"QProcessManagerMediator::RunL(): Invalid command!"
argument_list|)
break|break;
block|}
name|iStatus
operator|=
name|KRequestPending
expr_stmt|;
name|SetActive
argument_list|()
expr_stmt|;
comment|// Notify main thread that we are done
name|RThread
operator|::
name|Rendezvous
argument_list|(
name|KErrNone
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Called from ProcessManagerThread
end_comment
begin_function
DECL|function|RunError
name|TInt
name|QProcessManagerMediator
operator|::
name|RunError
parameter_list|(
name|TInt
name|aError
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|aError
argument_list|)
expr_stmt|;
comment|// Handle RunL leave (should never happen)
name|QPROCESS_ASSERT
argument_list|(
literal|0
argument_list|,
argument|EProcessManagerMediatorRunError
argument_list|,
literal|"QProcessManagerMediator::RunError(): Should never get here!"
argument_list|)
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|// Called from ProcessManagerThread
end_comment
begin_function
DECL|function|DoCancel
name|void
name|QProcessManagerMediator
operator|::
name|DoCancel
parameter_list|()
block|{
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessManagerMediator::DoCancel()"
argument_list|)
expr_stmt|;
name|TRequestStatus
modifier|*
name|status
init|=
operator|&
name|iStatus
decl_stmt|;
name|processManagerThread
operator|.
name|RequestComplete
argument_list|(
name|status
argument_list|,
name|KErrCancel
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QProcessManager
argument_list|,
argument|processManager
argument_list|)
end_macro
begin_function
DECL|function|processManagerThreadFunction
name|TInt
name|processManagerThreadFunction
parameter_list|(
name|TAny
modifier|*
name|param
parameter_list|)
block|{
name|QPROCESS_ASSERT
argument_list|(
argument|param
argument_list|,
argument|EProcessManagerNullParam
argument_list|,
literal|"processManagerThreadFunction(): NULL param"
argument_list|)
name|QProcessManager
modifier|*
name|manager
init|=
cast|reinterpret_cast
argument_list|<
name|QProcessManager
operator|*
argument_list|>
argument_list|(
name|param
argument_list|)
decl_stmt|;
name|CActiveScheduler
modifier|*
name|scheduler
init|=
operator|new
name|CQtActiveScheduler
argument_list|()
decl_stmt|;
name|QPROCESS_ASSERT
argument_list|(
argument|scheduler
argument_list|,
argument|EProcessManagerSchedulerCreationFail
argument_list|,
literal|"processManagerThreadFunction(): Scheduler creation failed"
argument_list|)
name|CActiveScheduler
operator|::
name|Install
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
comment|//Creating mediator also adds it to scheduler and activates it. Failure will panic.
name|manager
operator|->
name|setMediator
argument_list|(
name|QProcessManagerMediator
operator|::
name|construct
argument_list|()
argument_list|)
expr_stmt|;
name|RThread
operator|::
name|Rendezvous
argument_list|(
name|KErrNone
argument_list|)
expr_stmt|;
name|CActiveScheduler
operator|::
name|Start
argument_list|()
expr_stmt|;
name|CActiveScheduler
operator|::
name|Install
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
operator|delete
name|scheduler
expr_stmt|;
return|return
name|KErrNone
return|;
block|}
end_function
begin_constructor
DECL|function|QProcessManager
name|QProcessManager
operator|::
name|QProcessManager
parameter_list|()
member_init_list|:
name|mediator
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|threadStarted
argument_list|(
literal|false
argument_list|)
block|{
name|TInt
name|err
init|=
name|managerMutex
operator|.
name|CreateLocal
argument_list|()
decl_stmt|;
name|QPROCESS_ASSERT
argument_list|(
argument|err == KErrNone
argument_list|,
argument|EProcessManagerMutexCreationFail
argument_list|,
literal|"QProcessManager::QProcessManager(): Failed to create new managerMutex (err: %d)"
argument_list|,
argument|err
argument_list|)
block|}
end_constructor
begin_destructor
DECL|function|~QProcessManager
name|QProcessManager
operator|::
name|~
name|QProcessManager
parameter_list|()
block|{
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessManager::~QProcessManager()"
argument_list|)
expr_stmt|;
comment|// Check if manager thread is still alive. If this destructor is ran as part of global
comment|// static cleanup, manager thread will most likely be terminated by kernel at this point,
comment|// so trying to delete QProcessActives and QProcessMediators will panic as they
comment|// will still be active. They can also no longer be canceled as the thread is already gone.
comment|// In case manager thread has already died, we simply do nothing and let the deletion of
comment|// the main heap at process exit take care of stray objects.
if|if
condition|(
name|managerThread
operator|.
name|Handle
argument_list|()
operator|&&
name|managerThread
operator|.
name|ExitType
argument_list|()
operator|==
name|EExitPending
condition|)
block|{
comment|// Cancel death listening for all child processes
if|if
condition|(
name|mediator
condition|)
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QProcessActive
modifier|*
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|children
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|children
operator|.
name|end
argument_list|()
condition|)
block|{
comment|// Remove all monitors
name|QProcessActive
modifier|*
name|active
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
name|mediator
operator|->
name|remove
argument_list|(
name|active
argument_list|)
expr_stmt|;
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessManager::~QProcessManager() removed listening for a process"
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
comment|// Terminate process manager thread.
name|mediator
operator|->
name|terminate
argument_list|()
expr_stmt|;
operator|delete
name|mediator
expr_stmt|;
block|}
name|qDeleteAll
argument_list|(
name|children
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|children
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|managerThread
operator|.
name|Close
argument_list|()
expr_stmt|;
name|managerMutex
operator|.
name|Close
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|startThread
name|void
name|QProcessManager
operator|::
name|startThread
parameter_list|()
block|{
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|threadStarted
condition|)
block|{
name|TInt
name|err
init|=
name|managerThread
operator|.
name|Create
argument_list|(
name|KQProcessManagerThreadName
argument_list|,
name|processManagerThreadFunction
argument_list|,
literal|0x5000
argument_list|,
operator|(
name|RAllocator
operator|*
operator|)
name|NULL
argument_list|,
operator|(
name|TAny
operator|*
operator|)
name|this
argument_list|,
name|EOwnerProcess
argument_list|)
decl_stmt|;
name|QPROCESS_ASSERT
argument_list|(
argument|err == KErrNone
argument_list|,
argument|EProcessManagerThreadCreationFail
argument_list|,
literal|"QProcessManager::startThread(): Failed to create new managerThread (err:%d)"
argument_list|,
argument|err
argument_list|)
name|threadStarted
operator|=
literal|true
expr_stmt|;
comment|// Manager thread must start running before we continue, so sync with rendezvous
name|TRequestStatus
name|status
decl_stmt|;
name|managerThread
operator|.
name|Rendezvous
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|managerThread
operator|.
name|Resume
argument_list|()
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
name|unlock
argument_list|()
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|idCounter
specifier|static
name|QBasicAtomicInt
name|idCounter
init|=
name|Q_BASIC_ATOMIC_INITIALIZER
argument_list|(
literal|1
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|add
name|bool
name|QProcessManager
operator|::
name|add
parameter_list|(
name|QProcess
modifier|*
name|process
parameter_list|)
block|{
name|QPROCESS_ASSERT
argument_list|(
argument|process
argument_list|,
argument|EProcessManagerNullParam
argument_list|,
literal|"QProcessManager::add(): Failed to add QProcessActive to ProcessManager - NULL process"
argument_list|)
name|lock
argument_list|()
expr_stmt|;
name|int
name|serial
init|=
name|idCounter
operator|.
name|fetchAndAddRelaxed
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|process
operator|->
name|d_func
argument_list|()
operator|->
name|serial
operator|=
name|serial
expr_stmt|;
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessManager::add(): serial: %d, deathPipe: %d - %d, symbianProcess: 0x%x"
argument_list|,
name|serial
argument_list|,
name|process
operator|->
name|d_func
argument_list|()
operator|->
name|deathPipe
index|[
literal|0
index|]
argument_list|,
name|process
operator|->
name|d_func
argument_list|()
operator|->
name|deathPipe
index|[
literal|1
index|]
argument_list|,
name|process
operator|->
name|d_func
argument_list|()
operator|->
name|symbianProcess
argument_list|)
expr_stmt|;
name|QProcessActive
modifier|*
name|newActive
init|=
name|QProcessActive
operator|::
name|construct
argument_list|(
name|process
argument_list|,
operator|&
operator|(
name|process
operator|->
name|d_func
argument_list|()
operator|->
name|symbianProcess
operator|)
argument_list|,
name|serial
argument_list|,
name|process
operator|->
name|d_func
argument_list|()
operator|->
name|deathPipe
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|newActive
condition|)
block|{
if|if
condition|(
name|mediator
operator|->
name|add
argument_list|(
name|newActive
argument_list|)
condition|)
block|{
name|children
operator|.
name|insert
argument_list|(
name|serial
argument_list|,
name|newActive
argument_list|)
expr_stmt|;
name|unlock
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessManager::add(): Failed to add QProcessActive to ProcessManager"
argument_list|)
expr_stmt|;
operator|delete
name|newActive
expr_stmt|;
block|}
block|}
name|unlock
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|remove
name|void
name|QProcessManager
operator|::
name|remove
parameter_list|(
name|QProcess
modifier|*
name|process
parameter_list|)
block|{
name|QPROCESS_ASSERT
argument_list|(
argument|process
argument_list|,
argument|EProcessManagerNullParam
argument_list|,
literal|"QProcessManager::remove(): Failed to remove QProcessActive from ProcessManager - NULL process"
argument_list|)
name|lock
argument_list|()
expr_stmt|;
name|int
name|serial
init|=
name|process
operator|->
name|d_func
argument_list|()
operator|->
name|serial
decl_stmt|;
name|QProcessActive
modifier|*
name|active
init|=
name|children
operator|.
name|value
argument_list|(
name|serial
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|active
condition|)
block|{
name|unlock
argument_list|()
expr_stmt|;
return|return;
block|}
name|mediator
operator|->
name|remove
argument_list|(
name|active
argument_list|)
expr_stmt|;
name|children
operator|.
name|remove
argument_list|(
name|serial
argument_list|)
expr_stmt|;
operator|delete
name|active
expr_stmt|;
name|unlock
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|destroyPipe
name|void
name|QProcessPrivate
operator|::
name|destroyPipe
parameter_list|(
name|int
modifier|*
name|pipe
parameter_list|)
block|{
if|if
condition|(
name|pipe
index|[
literal|1
index|]
operator|!=
operator|-
literal|1
condition|)
block|{
name|qt_native_close
argument_list|(
name|pipe
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|pipe
index|[
literal|1
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|pipe
index|[
literal|0
index|]
operator|!=
operator|-
literal|1
condition|)
block|{
name|qt_native_close
argument_list|(
name|pipe
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|pipe
index|[
literal|0
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|createChannel
name|bool
name|QProcessPrivate
operator|::
name|createChannel
parameter_list|(
name|Channel
modifier|&
name|channel
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|channel
argument_list|)
expr_stmt|;
comment|// No channels used
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|startProcess
name|void
name|QProcessPrivate
operator|::
name|startProcess
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QProcess
argument_list|)
expr_stmt|;
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessPrivate::startProcess()"
argument_list|)
expr_stmt|;
comment|// Start the process (platform dependent)
name|q
operator|->
name|setProcessState
argument_list|(
name|QProcess
operator|::
name|Starting
argument_list|)
expr_stmt|;
name|processManager
argument_list|()
operator|->
name|startThread
argument_list|()
expr_stmt|;
name|qt_create_pipe
argument_list|(
name|deathPipe
argument_list|)
expr_stmt|;
if|if
condition|(
name|threadData
operator|->
name|eventDispatcher
condition|)
block|{
name|deathNotifier
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|deathPipe
index|[
literal|0
index|]
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|deathNotifier
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_processDied
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TInt
name|err
init|=
name|qt_create_symbian_process
argument_list|(
operator|&
name|symbianProcess
argument_list|,
name|program
argument_list|,
name|arguments
argument_list|,
name|nativeArguments
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|==
name|KErrNone
condition|)
block|{
name|pid
operator|=
name|symbianProcess
operator|->
name|Id
argument_list|()
operator|.
name|Id
argument_list|()
expr_stmt|;
operator|::
name|fcntl
argument_list|(
name|deathPipe
index|[
literal|0
index|]
argument_list|,
name|F_SETFL
argument_list|,
operator|::
name|fcntl
argument_list|(
name|deathPipe
index|[
literal|0
index|]
argument_list|,
name|F_GETFL
argument_list|)
operator||
name|O_NONBLOCK
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|processManager
argument_list|()
operator|->
name|add
argument_list|(
name|q
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QProcessPrivate::startProcess(): Failed to start monitoring for process death."
argument_list|)
expr_stmt|;
name|err
operator|=
name|KErrNoMemory
expr_stmt|;
block|}
block|}
if|if
condition|(
name|err
operator|!=
name|KErrNone
condition|)
block|{
comment|// Cleanup, report error and return
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessPrivate::startProcess() Process open failed, err: %d, '%s'"
argument_list|,
name|err
argument_list|,
name|qPrintable
argument_list|(
name|program
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|setProcessState
argument_list|(
name|QProcess
operator|::
name|NotRunning
argument_list|)
expr_stmt|;
name|processError
operator|=
name|QProcess
operator|::
name|FailedToStart
expr_stmt|;
name|q
operator|->
name|setErrorString
argument_list|(
name|QLatin1String
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
name|QProcess
argument_list|,
literal|"Resource error (qt_create_symbian_process failure)"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|error
argument_list|(
name|processError
argument_list|)
emit|;
name|cleanup
argument_list|()
expr_stmt|;
return|return;
block|}
name|processLaunched
operator|=
literal|true
expr_stmt|;
name|symbianProcess
operator|->
name|Resume
argument_list|()
expr_stmt|;
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessPrivate::startProcess(): this: 0x%x, pid: %ld"
argument_list|,
name|this
argument_list|,
name|pid
argument_list|)
expr_stmt|;
comment|// Notify child start
name|_q_startupNotification
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|processStarted
name|bool
name|QProcessPrivate
operator|::
name|processStarted
parameter_list|()
block|{
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessPrivate::processStarted() == %s"
argument_list|,
name|processLaunched
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
comment|// Since we cannot get information whether process has actually been launched
comment|// or not in Symbian, we need to fake it. Assume process is started if launch was
comment|// successful.
return|return
name|processLaunched
return|;
block|}
end_function
begin_function
DECL|function|bytesAvailableFromStdout
name|qint64
name|QProcessPrivate
operator|::
name|bytesAvailableFromStdout
parameter_list|()
specifier|const
block|{
comment|// In Symbian, stdout is not supported
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|bytesAvailableFromStderr
name|qint64
name|QProcessPrivate
operator|::
name|bytesAvailableFromStderr
parameter_list|()
specifier|const
block|{
comment|// In Symbian, stderr is not supported
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|readFromStdout
name|qint64
name|QProcessPrivate
operator|::
name|readFromStdout
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxlen
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|maxlen
argument_list|)
expr_stmt|;
comment|// In Symbian, stdout is not supported
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|readFromStderr
name|qint64
name|QProcessPrivate
operator|::
name|readFromStderr
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxlen
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|maxlen
argument_list|)
expr_stmt|;
comment|// In Symbian, stderr is not supported
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|writeToStdin
name|qint64
name|QProcessPrivate
operator|::
name|writeToStdin
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxlen
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|maxlen
argument_list|)
expr_stmt|;
comment|// In Symbian, stdin is not supported
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|terminateProcess
name|void
name|QProcessPrivate
operator|::
name|terminateProcess
parameter_list|()
block|{
comment|// Needs PowerMgmt capability if process has been started; will panic kern-exec 46 otherwise.
comment|// Always works if process is not yet started.
if|if
condition|(
name|qt_rprocess_running
argument_list|(
name|symbianProcess
argument_list|)
condition|)
block|{
name|symbianProcess
operator|->
name|Terminate
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessPrivate::terminateProcess(), Process not running"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|killProcess
name|void
name|QProcessPrivate
operator|::
name|killProcess
parameter_list|()
block|{
comment|// Needs PowerMgmt capability if process has been started; will panic kern-exec 46 otherwise.
comment|// Always works if process is not yet started.
if|if
condition|(
name|qt_rprocess_running
argument_list|(
name|symbianProcess
argument_list|)
condition|)
block|{
name|symbianProcess
operator|->
name|Kill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessPrivate::killProcess(), Process not running"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|waitForStarted
name|bool
name|QProcessPrivate
operator|::
name|waitForStarted
parameter_list|(
name|int
name|msecs
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|msecs
argument_list|)
expr_stmt|;
comment|// Since we can get no actual feedback from process beyond its death,
comment|// assume that started has already been emitted if process has been launched
return|return
name|processLaunched
return|;
block|}
end_function
begin_function
DECL|function|waitForReadyRead
name|bool
name|QProcessPrivate
operator|::
name|waitForReadyRead
parameter_list|(
name|int
name|msecs
parameter_list|)
block|{
comment|// Functionality not supported in Symbian
name|Q_UNUSED
argument_list|(
name|msecs
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|waitForBytesWritten
name|bool
name|QProcessPrivate
operator|::
name|waitForBytesWritten
parameter_list|(
name|int
name|msecs
parameter_list|)
block|{
comment|// Functionality not supported in Symbian
name|Q_UNUSED
argument_list|(
name|msecs
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|waitForFinished
name|bool
name|QProcessPrivate
operator|::
name|waitForFinished
parameter_list|(
name|int
name|msecs
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QProcess
argument_list|)
expr_stmt|;
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessPrivate::waitForFinished(%d)"
argument_list|,
name|msecs
argument_list|)
expr_stmt|;
name|TRequestStatus
name|timerStatus
init|=
name|KErrNone
decl_stmt|;
name|TRequestStatus
name|logonStatus
init|=
name|KErrNone
decl_stmt|;
name|bool
name|timeoutOccurred
init|=
literal|false
decl_stmt|;
comment|// Logon to process to observe its death
if|if
condition|(
name|qt_rprocess_running
argument_list|(
name|symbianProcess
argument_list|)
condition|)
block|{
name|symbianProcess
operator|->
name|Logon
argument_list|(
name|logonStatus
argument_list|)
expr_stmt|;
if|if
condition|(
name|msecs
operator|<
literal|0
condition|)
block|{
comment|// If timeout is negative, there is no timeout
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessPrivate::waitForFinished() - Waiting (just logon)..."
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|logonStatus
argument_list|)
expr_stmt|;
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessPrivate::waitForFinished() - Wait completed"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Create timer
name|RTimer
name|timer
decl_stmt|;
name|timer
operator|.
name|CreateLocal
argument_list|()
expr_stmt|;
name|TTimeIntervalMicroSeconds32
name|interval
argument_list|(
name|msecs
operator|*
literal|1000
argument_list|)
decl_stmt|;
name|timer
operator|.
name|After
argument_list|(
name|timerStatus
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessPrivate::waitForFinished() - Waiting (logon + timer)..."
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|logonStatus
argument_list|,
name|timerStatus
argument_list|)
expr_stmt|;
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessPrivate::waitForFinished() - Wait completed"
argument_list|)
expr_stmt|;
if|if
condition|(
name|logonStatus
operator|!=
name|KRequestPending
condition|)
block|{
name|timer
operator|.
name|Cancel
argument_list|()
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|timerStatus
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|timeoutOccurred
operator|=
literal|true
expr_stmt|;
name|symbianProcess
operator|->
name|LogonCancel
argument_list|(
name|logonStatus
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|logonStatus
argument_list|)
expr_stmt|;
block|}
name|timer
operator|.
name|Close
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessPrivate::waitForFinished(), qt_rprocess_running returned false"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timeoutOccurred
condition|)
block|{
name|processError
operator|=
name|QProcess
operator|::
name|Timedout
expr_stmt|;
name|q
operator|->
name|setErrorString
argument_list|(
name|QLatin1String
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
name|QProcess
argument_list|,
literal|"Process operation timed out"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|_q_processDied
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|waitForWrite
name|bool
name|QProcessPrivate
operator|::
name|waitForWrite
parameter_list|(
name|int
name|msecs
parameter_list|)
block|{
comment|// Functionality not supported in Symbian
name|Q_UNUSED
argument_list|(
name|msecs
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|// Deceptively named function. Exit code is actually got in waitForDeadChild().
end_comment
begin_function
DECL|function|findExitCode
name|void
name|QProcessPrivate
operator|::
name|findExitCode
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QProcess
argument_list|)
expr_stmt|;
name|processManager
argument_list|()
operator|->
name|remove
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|waitForDeadChild
name|bool
name|QProcessPrivate
operator|::
name|waitForDeadChild
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QProcess
argument_list|)
expr_stmt|;
comment|// read a byte from the death pipe
name|char
name|c
decl_stmt|;
name|qt_native_read
argument_list|(
name|deathPipe
index|[
literal|0
index|]
argument_list|,
operator|&
name|c
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|symbianProcess
operator|&&
name|symbianProcess
operator|->
name|Handle
argument_list|()
condition|)
block|{
name|TExitType
name|et
init|=
name|symbianProcess
operator|->
name|ExitType
argument_list|()
decl_stmt|;
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessPrivate::waitForDeadChild() symbianProcess->ExitType: %d"
argument_list|,
name|et
argument_list|)
expr_stmt|;
if|if
condition|(
name|et
operator|!=
name|EExitPending
condition|)
block|{
name|processManager
argument_list|()
operator|->
name|remove
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|symbianProcess
operator|->
name|ExitReason
argument_list|()
expr_stmt|;
name|crashed
operator|=
operator|(
name|et
operator|==
name|EExitPanic
operator|)
expr_stmt|;
if|#
directive|if
name|defined
name|QPROCESS_DEBUG
name|TExitCategoryName
name|catName
init|=
name|symbianProcess
operator|->
name|ExitCategory
argument_list|()
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"QProcessPrivate::waitForDeadChild() dead with exitCode"
operator|<<
name|exitCode
operator|<<
literal|", crashed:"
operator|<<
name|crashed
operator|<<
literal|", category:"
operator|<<
name|QString
argument_list|(
operator|(
specifier|const
name|QChar
operator|*
operator|)
name|catName
operator|.
name|Ptr
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessPrivate::waitForDeadChild() not dead!"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|_q_notified
name|void
name|QProcessPrivate
operator|::
name|_q_notified
parameter_list|()
block|{
comment|// Nothing to do in Symbian
block|}
end_function
begin_function
DECL|function|startDetached
name|bool
name|QProcessPrivate
operator|::
name|startDetached
parameter_list|(
specifier|const
name|QString
modifier|&
name|program
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|arguments
parameter_list|,
specifier|const
name|QString
modifier|&
name|workingDirectory
parameter_list|,
name|qint64
modifier|*
name|pid
parameter_list|)
block|{
name|QPROCESS_DEBUG_PRINT
argument_list|(
literal|"QProcessPrivate::startDetached()"
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|workingDirectory
argument_list|)
expr_stmt|;
name|RProcess
modifier|*
name|newProc
init|=
name|NULL
decl_stmt|;
name|TInt
name|err
init|=
name|qt_create_symbian_process
argument_list|(
operator|&
name|newProc
argument_list|,
name|program
argument_list|,
name|arguments
argument_list|,
name|QString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|==
name|KErrNone
condition|)
block|{
if|if
condition|(
name|pid
condition|)
operator|*
name|pid
operator|=
name|newProc
operator|->
name|Id
argument_list|()
operator|.
name|Id
argument_list|()
expr_stmt|;
name|newProc
operator|->
name|Resume
argument_list|()
expr_stmt|;
name|newProc
operator|->
name|Close
argument_list|()
expr_stmt|;
operator|delete
name|newProc
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|initializeProcessManager
name|void
name|QProcessPrivate
operator|::
name|initializeProcessManager
parameter_list|()
block|{
operator|(
name|void
operator|)
name|processManager
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PROCESS
end_comment
end_unit
