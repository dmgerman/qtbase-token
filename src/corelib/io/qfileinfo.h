begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QFILEINFO_H
end_ifndef
begin_define
DECL|macro|QFILEINFO_H
define|#
directive|define
name|QFILEINFO_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qfile.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qshareddata.h>
end_include
begin_function
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
parameter_list|(
name|Core
parameter_list|)
name|class
name|QDir
decl_stmt|;
DECL|variable|QDirIteratorPrivate
name|class
name|QDirIteratorPrivate
decl_stmt|;
DECL|variable|QDateTime
name|class
name|QDateTime
decl_stmt|;
DECL|variable|QFileInfoPrivate
name|class
name|QFileInfoPrivate
decl_stmt|;
name|class
name|Q_CORE_EXPORT
name|QFileInfo
decl_stmt|{     friend class QDirIteratorPrivate;
end_function
begin_label
name|public
label|:
end_label
begin_function_decl
name|explicit
name|QFileInfo
parameter_list|(
name|QFileInfoPrivate
modifier|*
name|d
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|QFileInfo
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QFileInfo
argument_list|(
specifier|const
name|QString
operator|&
name|file
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QFileInfo
argument_list|(
specifier|const
name|QFile
operator|&
name|file
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QFileInfo
argument_list|(
specifier|const
name|QDir
operator|&
name|dir
argument_list|,
specifier|const
name|QString
operator|&
name|file
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QFileInfo
argument_list|(
specifier|const
name|QFileInfo
operator|&
name|fileinfo
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
operator|~
name|QFileInfo
argument_list|()
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QFileInfo
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QFileInfo
operator|&
name|fileinfo
operator|)
decl_stmt|;
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
end_ifdef
begin_decl_stmt
specifier|inline
name|QFileInfo
modifier|&
name|operator
init|=
operator|(
name|QFileInfo
operator|&&
name|other
operator|)
block|{
name|qSwap
argument_list|(
name|d_ptr
argument_list|,
name|other
operator|.
name|d_ptr
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QFileInfo
operator|&
name|fileinfo
operator|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// 5.0 - remove me
end_comment
begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QFileInfo
operator|&
name|fileinfo
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QFileInfo
operator|&
name|fileinfo
operator|)
block|{
return|return
operator|!
operator|(
name|operator
operator|==
operator|(
name|fileinfo
operator|)
operator|)
return|;
block|}
end_expr_stmt
begin_comment
comment|// 5.0 - remove me
end_comment
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QFileInfo
operator|&
name|fileinfo
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
name|operator
operator|==
operator|(
name|fileinfo
operator|)
operator|)
return|;
block|}
end_expr_stmt
begin_function_decl
name|void
name|setFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setFile
parameter_list|(
specifier|const
name|QFile
modifier|&
name|file
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setFile
parameter_list|(
specifier|const
name|QDir
modifier|&
name|dir
parameter_list|,
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|bool
name|exists
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|refresh
parameter_list|()
function_decl|;
end_function_decl
begin_expr_stmt
name|QString
name|filePath
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|absoluteFilePath
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|canonicalFilePath
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|fileName
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|baseName
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|completeBaseName
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|suffix
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|bundleName
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|completeSuffix
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|path
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|absolutePath
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|canonicalPath
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QDir
name|dir
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QDir
name|absoluteDir
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|bool
name|isReadable
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|bool
name|isWritable
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|bool
name|isExecutable
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|bool
name|isHidden
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|bool
name|isRelative
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isAbsolute
argument_list|()
specifier|const
block|{
return|return
operator|!
name|isRelative
argument_list|()
return|;
block|}
end_expr_stmt
begin_function_decl
name|bool
name|makeAbsolute
parameter_list|()
function_decl|;
end_function_decl
begin_expr_stmt
name|bool
name|isFile
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|bool
name|isDir
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|bool
name|isSymLink
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|bool
name|isRoot
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|bool
name|isBundle
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|readLink
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
name|symLinkTarget
argument_list|()
specifier|const
block|{
return|return
name|readLink
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QString
name|owner
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|uint
name|ownerId
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|group
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|uint
name|groupId
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|bool
name|permission
argument_list|(
name|QFile
operator|::
name|Permissions
name|permissions
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QFile
operator|::
name|Permissions
name|permissions
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|qint64
name|size
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QDateTime
name|created
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QDateTime
name|lastModified
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QDateTime
name|lastRead
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|detach
parameter_list|()
function_decl|;
end_function_decl
begin_expr_stmt
name|bool
name|caching
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setCaching
parameter_list|(
name|bool
name|on
parameter_list|)
function_decl|;
end_function_decl
begin_ifdef
ifdef|#
directive|ifdef
name|QT3_SUPPORT
end_ifdef
begin_enum
enum|enum
name|Permission
block|{
name|ReadOwner
init|=
name|QFile
operator|::
name|ReadOwner
block|,
name|WriteOwner
init|=
name|QFile
operator|::
name|WriteOwner
block|,
name|ExeOwner
init|=
name|QFile
operator|::
name|ExeOwner
block|,
name|ReadUser
init|=
name|QFile
operator|::
name|ReadUser
block|,
name|WriteUser
init|=
name|QFile
operator|::
name|WriteUser
block|,
name|ExeUser
init|=
name|QFile
operator|::
name|ExeUser
block|,
name|ReadGroup
init|=
name|QFile
operator|::
name|ReadGroup
block|,
name|WriteGroup
init|=
name|QFile
operator|::
name|WriteGroup
block|,
name|ExeGroup
init|=
name|QFile
operator|::
name|ExeGroup
block|,
name|ReadOther
init|=
name|QFile
operator|::
name|ReadOther
block|,
name|WriteOther
init|=
name|QFile
operator|::
name|WriteOther
block|,
name|ExeOther
init|=
name|QFile
operator|::
name|ExeOther
block|}
enum|;
end_enum
begin_macro
name|Q_DECLARE_FLAGS
argument_list|(
argument|PermissionSpec
argument_list|,
argument|Permission
argument_list|)
end_macro
begin_function
specifier|inline
name|QT3_SUPPORT
name|QString
name|baseName
parameter_list|(
name|bool
name|complete
parameter_list|)
block|{
if|if
condition|(
name|complete
condition|)
return|return
name|completeBaseName
argument_list|()
return|;
return|return
name|baseName
argument_list|()
return|;
block|}
end_function
begin_decl_stmt
specifier|inline
name|QT3_SUPPORT
name|QString
name|extension
argument_list|(
name|bool
name|complete
operator|=
name|true
argument_list|)
decl|const
block|{
if|if
condition|(
name|complete
condition|)
return|return
name|completeSuffix
argument_list|()
return|;
return|return
name|suffix
argument_list|()
return|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|QT3_SUPPORT
name|QString
name|absFilePath
argument_list|()
specifier|const
block|{
return|return
name|absoluteFilePath
argument_list|()
return|;
block|}
end_expr_stmt
begin_decl_stmt
specifier|inline
name|QT3_SUPPORT
name|QString
name|dirPath
argument_list|(
name|bool
name|absPath
operator|=
name|false
argument_list|)
decl|const
block|{
if|if
condition|(
name|absPath
condition|)
return|return
name|absolutePath
argument_list|()
return|;
return|return
name|path
argument_list|()
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|QT3_SUPPORT
name|QDir
name|dir
argument_list|(
name|bool
name|absPath
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function
specifier|inline
name|QT3_SUPPORT
name|bool
name|convertToAbs
parameter_list|()
block|{
return|return
name|makeAbsolute
argument_list|()
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_NO_TYPESAFE_FLAGS
argument_list|)
end_if
begin_decl_stmt
specifier|inline
name|QT3_SUPPORT
name|bool
name|permission
argument_list|(
name|PermissionSpec
name|permissions
argument_list|)
decl|const
block|{
return|return
name|permission
argument_list|(
name|QFile
operator|::
name|Permissions
argument_list|(
name|static_cast
operator|<
name|int
operator|>
operator|(
name|permissions
operator|)
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_label
name|protected
label|:
end_label
begin_expr_stmt
name|QSharedDataPointer
operator|<
name|QFileInfoPrivate
operator|>
name|d_ptr
expr_stmt|;
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_function
specifier|inline
name|QFileInfoPrivate
modifier|*
name|d_func
parameter_list|()
block|{
name|detach
argument_list|()
expr_stmt|;
return|return
name|const_cast
operator|<
name|QFileInfoPrivate
operator|*
operator|>
operator|(
name|d_ptr
operator|.
name|constData
argument_list|()
operator|)
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
specifier|const
name|QFileInfoPrivate
operator|*
name|d_func
argument_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|.
name|constData
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QFileInfo
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|QT3_SUPPORT
end_ifdef
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QFileInfo::PermissionSpec
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|QFileInfoList
typedef|typedef
name|QList
operator|<
name|QFileInfo
operator|>
name|QFileInfoList
expr_stmt|;
end_typedef
begin_ifdef
ifdef|#
directive|ifdef
name|QT3_SUPPORT
end_ifdef
begin_typedef
DECL|typedef|QFileInfoListIterator
typedef|typedef
name|QList
operator|<
name|QFileInfo
operator|>
operator|::
name|Iterator
name|QFileInfoListIterator
expr_stmt|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QFILEINFO_H
end_comment
end_unit
