begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qplatformdefs.h>
end_include
begin_include
include|#
directive|include
file|"qfilesystemwatcher.h"
end_include
begin_include
include|#
directive|include
file|"qfilesystemwatcher_kqueue_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qcore_unix_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
end_ifndef
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qsocketnotifier.h>
end_include
begin_include
include|#
directive|include
file|<qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/event.h>
end_include
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_include
include|#
directive|include
file|<sys/time.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|// #define KEVENT_DEBUG
ifdef|#
directive|ifdef
name|KEVENT_DEBUG
DECL|macro|DEBUG
define|#
directive|define
name|DEBUG
value|qDebug
else|#
directive|else
define|#
directive|define
name|DEBUG
value|if(false)qDebug
endif|#
directive|endif
DECL|function|create
name|QKqueueFileSystemWatcherEngine
modifier|*
name|QKqueueFileSystemWatcherEngine
operator|::
name|create
parameter_list|()
block|{
name|int
name|kqfd
init|=
name|kqueue
argument_list|()
decl_stmt|;
if|if
condition|(
name|kqfd
operator|==
operator|-
literal|1
condition|)
return|return
literal|0
return|;
return|return
operator|new
name|QKqueueFileSystemWatcherEngine
argument_list|(
name|kqfd
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QKqueueFileSystemWatcherEngine
name|QKqueueFileSystemWatcherEngine
operator|::
name|QKqueueFileSystemWatcherEngine
parameter_list|(
name|int
name|kqfd
parameter_list|)
member_init_list|:
name|kqfd
argument_list|(
name|kqfd
argument_list|)
block|{
name|fcntl
argument_list|(
name|kqfd
argument_list|,
name|F_SETFD
argument_list|,
name|FD_CLOEXEC
argument_list|)
expr_stmt|;
if|if
condition|(
name|pipe
argument_list|(
name|kqpipe
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|perror
argument_list|(
literal|"QKqueueFileSystemWatcherEngine: cannot create pipe"
argument_list|)
expr_stmt|;
name|kqpipe
index|[
literal|0
index|]
operator|=
name|kqpipe
index|[
literal|1
index|]
operator|=
operator|-
literal|1
expr_stmt|;
return|return;
block|}
name|fcntl
argument_list|(
name|kqpipe
index|[
literal|0
index|]
argument_list|,
name|F_SETFD
argument_list|,
name|FD_CLOEXEC
argument_list|)
expr_stmt|;
name|fcntl
argument_list|(
name|kqpipe
index|[
literal|1
index|]
argument_list|,
name|F_SETFD
argument_list|,
name|FD_CLOEXEC
argument_list|)
expr_stmt|;
name|struct
name|kevent
name|kev
decl_stmt|;
name|EV_SET
argument_list|(
operator|&
name|kev
argument_list|,
name|kqpipe
index|[
literal|0
index|]
argument_list|,
name|EVFILT_READ
argument_list|,
name|EV_ADD
operator||
name|EV_ENABLE
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|kevent
argument_list|(
name|kqfd
argument_list|,
operator|&
name|kev
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|perror
argument_list|(
literal|"QKqueueFileSystemWatcherEngine: cannot watch pipe, kevent returned"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QKqueueFileSystemWatcherEngine
name|QKqueueFileSystemWatcherEngine
operator|::
name|~
name|QKqueueFileSystemWatcherEngine
parameter_list|()
block|{
name|stop
argument_list|()
expr_stmt|;
name|wait
argument_list|()
expr_stmt|;
name|close
argument_list|(
name|kqfd
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|kqpipe
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|kqpipe
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|int
name|id
decl|,
name|pathToID
control|)
operator|::
name|close
argument_list|(
name|id
operator|<
literal|0
condition|?
operator|-
name|id
else|:
name|id
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|addPaths
name|QStringList
name|QKqueueFileSystemWatcherEngine
operator|::
name|addPaths
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|paths
parameter_list|,
name|QStringList
modifier|*
name|files
parameter_list|,
name|QStringList
modifier|*
name|directories
parameter_list|)
block|{
name|QStringList
name|p
init|=
name|paths
decl_stmt|;
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QMutableListIterator
argument_list|<
name|QString
argument_list|>
name|it
argument_list|(
name|p
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QString
name|path
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|fd
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|O_EVTONLY
argument_list|)
name|fd
operator|=
name|qt_safe_open
argument_list|(
name|QFile
operator|::
name|encodeName
argument_list|(
name|path
argument_list|)
argument_list|,
name|O_EVTONLY
argument_list|)
expr_stmt|;
else|#
directive|else
name|fd
operator|=
name|qt_safe_open
argument_list|(
name|QFile
operator|::
name|encodeName
argument_list|(
name|path
argument_list|)
argument_list|,
name|O_RDONLY
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|fd
operator|==
operator|-
literal|1
condition|)
block|{
name|perror
argument_list|(
literal|"QKqueueFileSystemWatcherEngine::addPaths: open"
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|fd
operator|>=
operator|(
name|int
operator|)
name|FD_SETSIZE
operator|/
literal|2
operator|&&
name|fd
operator|<
operator|(
name|int
operator|)
name|FD_SETSIZE
condition|)
block|{
name|int
name|fddup
init|=
name|fcntl
argument_list|(
name|fd
argument_list|,
name|F_DUPFD
argument_list|,
name|FD_SETSIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|fddup
operator|!=
operator|-
literal|1
condition|)
block|{
operator|::
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
name|fd
operator|=
name|fddup
expr_stmt|;
block|}
block|}
name|fcntl
argument_list|(
name|fd
argument_list|,
name|F_SETFD
argument_list|,
name|FD_CLOEXEC
argument_list|)
expr_stmt|;
name|QT_STATBUF
name|st
decl_stmt|;
if|if
condition|(
name|QT_FSTAT
argument_list|(
name|fd
argument_list|,
operator|&
name|st
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|perror
argument_list|(
literal|"QKqueueFileSystemWatcherEngine::addPaths: fstat"
argument_list|)
expr_stmt|;
operator|::
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|int
name|id
init|=
operator|(
name|S_ISDIR
argument_list|(
name|st
operator|.
name|st_mode
argument_list|)
operator|)
condition|?
operator|-
name|fd
else|:
name|fd
decl_stmt|;
if|if
condition|(
name|id
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|directories
operator|->
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
operator|::
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
else|else
block|{
if|if
condition|(
name|files
operator|->
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
operator|::
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|struct
name|kevent
name|kev
decl_stmt|;
name|EV_SET
argument_list|(
operator|&
name|kev
argument_list|,
name|fd
argument_list|,
name|EVFILT_VNODE
argument_list|,
name|EV_ADD
operator||
name|EV_ENABLE
operator||
name|EV_CLEAR
argument_list|,
name|NOTE_DELETE
operator||
name|NOTE_WRITE
operator||
name|NOTE_EXTEND
operator||
name|NOTE_ATTRIB
operator||
name|NOTE_RENAME
operator||
name|NOTE_REVOKE
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|kevent
argument_list|(
name|kqfd
argument_list|,
operator|&
name|kev
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|perror
argument_list|(
literal|"QKqueueFileSystemWatcherEngine::addPaths: kevent"
argument_list|)
expr_stmt|;
operator|::
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|id
operator|<
literal|0
condition|)
block|{
name|DEBUG
argument_list|()
operator|<<
literal|"QKqueueFileSystemWatcherEngine: added directory path"
operator|<<
name|path
expr_stmt|;
name|directories
operator|->
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DEBUG
argument_list|()
operator|<<
literal|"QKqueueFileSystemWatcherEngine: added file path"
operator|<<
name|path
expr_stmt|;
name|files
operator|->
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|pathToID
operator|.
name|insert
argument_list|(
name|path
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|idToPath
operator|.
name|insert
argument_list|(
name|id
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isRunning
argument_list|()
condition|)
name|start
argument_list|()
expr_stmt|;
else|else
name|write
argument_list|(
name|kqpipe
index|[
literal|1
index|]
argument_list|,
literal|"@"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
end_function
begin_function
DECL|function|removePaths
name|QStringList
name|QKqueueFileSystemWatcherEngine
operator|::
name|removePaths
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|paths
parameter_list|,
name|QStringList
modifier|*
name|files
parameter_list|,
name|QStringList
modifier|*
name|directories
parameter_list|)
block|{
name|bool
name|isEmpty
decl_stmt|;
name|QStringList
name|p
init|=
name|paths
decl_stmt|;
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathToID
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|p
return|;
name|QMutableListIterator
argument_list|<
name|QString
argument_list|>
name|it
argument_list|(
name|p
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QString
name|path
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|id
init|=
name|pathToID
operator|.
name|take
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QString
name|x
init|=
name|idToPath
operator|.
name|take
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|isEmpty
argument_list|()
operator|||
name|x
operator|!=
name|path
condition|)
continue|continue;
operator|::
name|close
argument_list|(
name|id
operator|<
literal|0
condition|?
operator|-
name|id
else|:
name|id
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|id
operator|<
literal|0
condition|)
name|directories
operator|->
name|removeAll
argument_list|(
name|path
argument_list|)
expr_stmt|;
else|else
name|files
operator|->
name|removeAll
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|isEmpty
operator|=
name|pathToID
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isEmpty
condition|)
block|{
name|stop
argument_list|()
expr_stmt|;
name|wait
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|write
argument_list|(
name|kqpipe
index|[
literal|1
index|]
argument_list|,
literal|"@"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|p
return|;
block|}
end_function
begin_function
DECL|function|stop
name|void
name|QKqueueFileSystemWatcherEngine
operator|::
name|stop
parameter_list|()
block|{
name|write
argument_list|(
name|kqpipe
index|[
literal|1
index|]
argument_list|,
literal|"q"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|run
name|void
name|QKqueueFileSystemWatcherEngine
operator|::
name|run
parameter_list|()
block|{
forever|forever
block|{
name|int
name|r
decl_stmt|;
name|struct
name|kevent
name|kev
decl_stmt|;
name|DEBUG
argument_list|()
operator|<<
literal|"QKqueueFileSystemWatcherEngine: waiting for kevents..."
expr_stmt|;
name|EINTR_LOOP
argument_list|(
name|r
argument_list|,
name|kevent
argument_list|(
name|kqfd
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|kev
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|<
literal|0
condition|)
block|{
name|perror
argument_list|(
literal|"QKqueueFileSystemWatcherEngine: error during kevent wait"
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|int
name|fd
init|=
name|kev
operator|.
name|ident
decl_stmt|;
name|DEBUG
argument_list|()
operator|<<
literal|"QKqueueFileSystemWatcherEngine: processing kevent"
operator|<<
name|kev
operator|.
name|ident
operator|<<
name|kev
operator|.
name|filter
expr_stmt|;
if|if
condition|(
name|fd
operator|==
name|kqpipe
index|[
literal|0
index|]
condition|)
block|{
comment|// read all pending data from the pipe
name|QByteArray
name|ba
decl_stmt|;
name|ba
operator|.
name|resize
argument_list|(
name|kev
operator|.
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|read
argument_list|(
name|kqpipe
index|[
literal|0
index|]
argument_list|,
name|ba
operator|.
name|data
argument_list|()
argument_list|,
name|ba
operator|.
name|size
argument_list|()
argument_list|)
operator|!=
name|ba
operator|.
name|size
argument_list|()
condition|)
block|{
name|perror
argument_list|(
literal|"QKqueueFileSystemWatcherEngine: error reading from pipe"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// read the command from the buffer (but break and return on 'q')
name|char
name|cmd
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ba
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|cmd
operator|=
name|ba
operator|.
name|constData
argument_list|()
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|cmd
operator|==
literal|'q'
condition|)
break|break;
block|}
comment|// handle the command
switch|switch
condition|(
name|cmd
condition|)
block|{
case|case
literal|'q'
case|:
name|DEBUG
argument_list|()
operator|<<
literal|"QKqueueFileSystemWatcherEngine: thread received 'q', exiting..."
expr_stmt|;
return|return;
case|case
literal|'@'
case|:
name|DEBUG
argument_list|()
operator|<<
literal|"QKqueueFileSystemWatcherEngine: thread received '@', continuing..."
expr_stmt|;
break|break;
default|default:
name|DEBUG
argument_list|()
operator|<<
literal|"QKqueueFileSystemWatcherEngine: thread received unknow message"
operator|<<
name|cmd
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|int
name|id
init|=
name|fd
decl_stmt|;
name|QString
name|path
init|=
name|idToPath
operator|.
name|value
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// perhaps a directory?
name|id
operator|=
operator|-
name|id
expr_stmt|;
name|path
operator|=
name|idToPath
operator|.
name|value
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DEBUG
argument_list|()
operator|<<
literal|"QKqueueFileSystemWatcherEngine: received a kevent for a file we're not watching"
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|kev
operator|.
name|filter
operator|!=
name|EVFILT_VNODE
condition|)
block|{
name|DEBUG
argument_list|()
operator|<<
literal|"QKqueueFileSystemWatcherEngine: received a kevent with the wrong filter"
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|(
name|kev
operator|.
name|fflags
operator|&
operator|(
name|NOTE_DELETE
operator||
name|NOTE_REVOKE
operator||
name|NOTE_RENAME
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|DEBUG
argument_list|()
operator|<<
name|path
operator|<<
literal|"removed, removing watch also"
expr_stmt|;
name|pathToID
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|idToPath
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
operator|::
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|<
literal|0
condition|)
emit|emit
name|directoryChanged
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
emit|;
else|else
emit|emit
name|fileChanged
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
emit|;
block|}
else|else
block|{
name|DEBUG
argument_list|()
operator|<<
name|path
operator|<<
literal|"changed"
expr_stmt|;
if|if
condition|(
name|id
operator|<
literal|0
condition|)
emit|emit
name|directoryChanged
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
emit|;
else|else
emit|emit
name|fileChanged
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
emit|;
block|}
block|}
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_FILESYSTEMWATCHER
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
