begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qresource.h"
end_include
begin_include
include|#
directive|include
file|"qresource_p.h"
end_include
begin_include
include|#
directive|include
file|"qresource_iterator_p.h"
end_include
begin_include
include|#
directive|include
file|"qset.h"
end_include
begin_include
include|#
directive|include
file|"qmutex.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qlocale.h"
end_include
begin_include
include|#
directive|include
file|"qglobal.h"
end_include
begin_include
include|#
directive|include
file|"qvector.h"
end_include
begin_include
include|#
directive|include
file|"qdatetime.h"
end_include
begin_include
include|#
directive|include
file|"qbytearray.h"
end_include
begin_include
include|#
directive|include
file|"qstringlist.h"
end_include
begin_include
include|#
directive|include
file|<qshareddata.h>
end_include
begin_include
include|#
directive|include
file|<qplatformdefs.h>
end_include
begin_include
include|#
directive|include
file|"private/qabstractfileengine_p.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_UNIX
end_ifdef
begin_include
include|#
directive|include
file|"private/qcore_unix_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//#define DEBUG_RESOURCE_MATCH
end_comment
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QStringSplitter
class|class
name|QStringSplitter
block|{
public|public:
DECL|function|QStringSplitter
name|QStringSplitter
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
member_init_list|:
name|m_string
argument_list|(
name|s
argument_list|)
member_init_list|,
name|m_data
argument_list|(
name|m_string
operator|.
name|constData
argument_list|()
argument_list|)
member_init_list|,
name|m_len
argument_list|(
name|s
operator|.
name|length
argument_list|()
argument_list|)
member_init_list|,
name|m_pos
argument_list|(
literal|0
argument_list|)
block|{
name|m_splitChar
operator|=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
DECL|function|hasNext
specifier|inline
name|bool
name|hasNext
parameter_list|()
block|{
while|while
condition|(
name|m_pos
operator|<
name|m_len
operator|&&
name|m_data
index|[
name|m_pos
index|]
operator|==
name|m_splitChar
condition|)
operator|++
name|m_pos
expr_stmt|;
return|return
name|m_pos
operator|<
name|m_len
return|;
block|}
DECL|function|next
specifier|inline
name|QStringRef
name|next
parameter_list|()
block|{
name|int
name|start
init|=
name|m_pos
decl_stmt|;
while|while
condition|(
name|m_pos
operator|<
name|m_len
operator|&&
name|m_data
index|[
name|m_pos
index|]
operator|!=
name|m_splitChar
condition|)
operator|++
name|m_pos
expr_stmt|;
return|return
name|QStringRef
argument_list|(
operator|&
name|m_string
argument_list|,
name|start
argument_list|,
name|m_pos
operator|-
name|start
argument_list|)
return|;
block|}
DECL|member|m_string
name|QString
name|m_string
decl_stmt|;
DECL|member|m_data
specifier|const
name|QChar
modifier|*
name|m_data
decl_stmt|;
DECL|member|m_splitChar
name|QChar
name|m_splitChar
decl_stmt|;
DECL|member|m_len
name|int
name|m_len
decl_stmt|;
DECL|member|m_pos
name|int
name|m_pos
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|//resource glue
end_comment
begin_class
DECL|class|QResourceRoot
class|class
name|QResourceRoot
block|{
DECL|enum|Flags
enum|enum
name|Flags
block|{
DECL|enumerator|Compressed
name|Compressed
init|=
literal|0x01
block|,
DECL|enumerator|Directory
name|Directory
init|=
literal|0x02
block|}
enum|;
DECL|member|tree
DECL|member|names
DECL|member|payloads
specifier|const
name|uchar
modifier|*
name|tree
decl_stmt|,
modifier|*
name|names
decl_stmt|,
modifier|*
name|payloads
decl_stmt|;
DECL|function|findOffset
specifier|inline
name|int
name|findOffset
parameter_list|(
name|int
name|node
parameter_list|)
specifier|const
block|{
return|return
name|node
operator|*
literal|14
return|;
block|}
comment|//sizeof each tree element
name|uint
name|hash
parameter_list|(
name|int
name|node
parameter_list|)
specifier|const
function_decl|;
name|QString
name|name
parameter_list|(
name|int
name|node
parameter_list|)
specifier|const
function_decl|;
name|short
name|flags
parameter_list|(
name|int
name|node
parameter_list|)
specifier|const
function_decl|;
public|public:
DECL|member|ref
specifier|mutable
name|QAtomicInt
name|ref
decl_stmt|;
DECL|function|QResourceRoot
specifier|inline
name|QResourceRoot
parameter_list|()
member_init_list|:
name|tree
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|names
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|payloads
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|QResourceRoot
specifier|inline
name|QResourceRoot
parameter_list|(
specifier|const
name|uchar
modifier|*
name|t
parameter_list|,
specifier|const
name|uchar
modifier|*
name|n
parameter_list|,
specifier|const
name|uchar
modifier|*
name|d
parameter_list|)
block|{
name|setSource
argument_list|(
name|t
argument_list|,
name|n
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
DECL|function|~QResourceRoot
specifier|virtual
name|~
name|QResourceRoot
parameter_list|()
block|{ }
name|int
name|findNode
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
specifier|const
name|QLocale
modifier|&
name|locale
init|=
name|QLocale
argument_list|()
parameter_list|)
specifier|const
function_decl|;
DECL|function|isContainer
specifier|inline
name|bool
name|isContainer
parameter_list|(
name|int
name|node
parameter_list|)
specifier|const
block|{
return|return
name|flags
argument_list|(
name|node
argument_list|)
operator|&
name|Directory
return|;
block|}
DECL|function|isCompressed
specifier|inline
name|bool
name|isCompressed
parameter_list|(
name|int
name|node
parameter_list|)
specifier|const
block|{
return|return
name|flags
argument_list|(
name|node
argument_list|)
operator|&
name|Compressed
return|;
block|}
specifier|const
name|uchar
modifier|*
name|data
parameter_list|(
name|int
name|node
parameter_list|,
name|qint64
modifier|*
name|size
parameter_list|)
specifier|const
function_decl|;
name|QStringList
name|children
parameter_list|(
name|int
name|node
parameter_list|)
specifier|const
function_decl|;
DECL|function|mappingRoot
specifier|virtual
name|QString
name|mappingRoot
parameter_list|()
specifier|const
block|{
return|return
name|QString
argument_list|()
return|;
block|}
name|bool
name|mappingRootSubdir
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
name|QString
modifier|*
name|match
init|=
literal|0
parameter_list|)
specifier|const
function_decl|;
DECL|function|operator ==
specifier|inline
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|QResourceRoot
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|tree
operator|==
name|other
operator|.
name|tree
operator|&&
name|names
operator|==
name|other
operator|.
name|names
operator|&&
name|payloads
operator|==
name|other
operator|.
name|payloads
return|;
block|}
DECL|function|operator !=
specifier|inline
name|bool
name|operator
name|!=
parameter_list|(
specifier|const
name|QResourceRoot
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
operator|!
name|operator
name|==
argument_list|(
name|other
argument_list|)
return|;
block|}
DECL|enum|ResourceRootType
DECL|enumerator|Resource_Builtin
DECL|enumerator|Resource_File
DECL|enumerator|Resource_Buffer
enum|enum
name|ResourceRootType
block|{
name|Resource_Builtin
block|,
name|Resource_File
block|,
name|Resource_Buffer
block|}
enum|;
DECL|function|type
specifier|virtual
name|ResourceRootType
name|type
parameter_list|()
specifier|const
block|{
return|return
name|Resource_Builtin
return|;
block|}
protected|protected:
DECL|function|setSource
specifier|inline
name|void
name|setSource
parameter_list|(
specifier|const
name|uchar
modifier|*
name|t
parameter_list|,
specifier|const
name|uchar
modifier|*
name|n
parameter_list|,
specifier|const
name|uchar
modifier|*
name|d
parameter_list|)
block|{
name|tree
operator|=
name|t
expr_stmt|;
name|names
operator|=
name|n
expr_stmt|;
name|payloads
operator|=
name|d
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|cleanPath
specifier|static
name|QString
name|cleanPath
parameter_list|(
specifier|const
name|QString
modifier|&
name|_path
parameter_list|)
block|{
name|QString
name|path
init|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|_path
argument_list|)
decl_stmt|;
comment|// QDir::cleanPath does not remove two trailing slashes under _Windows_
comment|// due to support for UNC paths. Remove those manually.
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"//"
argument_list|)
argument_list|)
condition|)
name|path
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
end_function
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QResourceRoot
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_macro
name|Q_GLOBAL_STATIC_WITH_ARGS
argument_list|(
argument|QMutex
argument_list|,
argument|resourceMutex
argument_list|,
argument|(QMutex::Recursive)
argument_list|)
end_macro
begin_typedef
DECL|typedef|ResourceList
typedef|typedef
name|QList
argument_list|<
name|QResourceRoot
modifier|*
argument_list|>
name|ResourceList
typedef|;
end_typedef
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|ResourceList
argument_list|,
argument|resourceList
argument_list|)
end_macro
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QStringList
argument_list|,
argument|resourceSearchPaths
argument_list|)
end_macro
begin_comment
comment|/*!     \class QResource     \inmodule QtCore     \brief The QResource class provides an interface for reading directly from resources.      \ingroup io      \reentrant     \since 4.2      QResource is an object that represents a set of data (and possibly     children) relating to a single resource entity. QResource gives direct     access to the bytes in their raw format. In this way direct access     allows reading data without buffer copying or indirection. Indirection     is often useful when interacting with the resource entity as if it is a     file, this can be achieved with QFile. The data and children behind a     QResource are normally compiled into an application/library, but it is     also possible to load a resource at runtime. When loaded at run time     the resource file will be loaded as one big set of data and then given     out in pieces via references into the resource tree.      A QResource can either be loaded with an absolute path, either treated     as a file system rooted with a \c{/} character, or in resource notation     rooted with a \c{:} character. A relative resource can also be opened     which will be found in the list of paths returned by QDir::searchPaths().      A QResource that is representing a file will have data backing it, this     data can possibly be compressed, in which case qUncompress() must be     used to access the real data; this happens implicitly when accessed     through a QFile. A QResource that is representing a directory will have     only children and no data.      \section1 Dynamic Resource Loading      A resource can be left out of an application's binary and loaded when     it is needed at run-time by using the registerResource() function. The     resource file passed into registerResource() must be a binary resource     as created by rcc. Further information about binary resources can be     found in \l{The Qt Resource System} documentation.      This can often be useful when loading a large set of application icons     that may change based on a setting, or that can be edited by a user and     later recreated. The resource is immediately loaded into memory, either     as a result of a single file read operation, or as a memory mapped file.      This approach can prove to be a significant performance gain as only a     single file will be loaded, and pieces of data will be given out via the     path requested in setFileName().      The unregisterResource() function removes a reference to a particular     file. If there are QResource objects that currently reference resources related     to the unregistered file, they will continue to be valid but the resource     file itself will be removed from the resource roots, and thus no further     QResource can be created pointing into this resource data. The resource     itself will be unmapped from memory when the last QResource that points     to it is destroyed.      \sa {The Qt Resource System}, QFile, QDir, QFileInfo */
end_comment
begin_class
DECL|class|QResourcePrivate
class|class
name|QResourcePrivate
block|{
public|public:
DECL|function|QResourcePrivate
specifier|inline
name|QResourcePrivate
parameter_list|(
name|QResource
modifier|*
name|_q
parameter_list|)
member_init_list|:
name|q_ptr
argument_list|(
name|_q
argument_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|~QResourcePrivate
specifier|inline
name|~
name|QResourcePrivate
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
name|void
name|ensureInitialized
parameter_list|()
specifier|const
function_decl|;
name|void
name|ensureChildren
parameter_list|()
specifier|const
function_decl|;
name|bool
name|load
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
DECL|member|locale
name|QLocale
name|locale
decl_stmt|;
DECL|member|fileName
DECL|member|absoluteFilePath
name|QString
name|fileName
decl_stmt|,
name|absoluteFilePath
decl_stmt|;
DECL|member|related
name|QList
argument_list|<
name|QResourceRoot
modifier|*
argument_list|>
name|related
decl_stmt|;
name|uint
name|container
range|:
literal|1
decl_stmt|;
specifier|mutable
name|uint
name|compressed
range|:
literal|1
decl_stmt|;
DECL|member|size
specifier|mutable
name|qint64
name|size
decl_stmt|;
DECL|member|data
specifier|mutable
specifier|const
name|uchar
modifier|*
name|data
decl_stmt|;
DECL|member|children
specifier|mutable
name|QStringList
name|children
decl_stmt|;
DECL|member|q_ptr
name|QResource
modifier|*
name|q_ptr
decl_stmt|;
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QResource
argument_list|)
block|}
class|;
end_class
begin_function
name|void
DECL|function|clear
name|QResourcePrivate
operator|::
name|clear
parameter_list|()
block|{
name|absoluteFilePath
operator|.
name|clear
argument_list|()
expr_stmt|;
name|compressed
operator|=
literal|0
expr_stmt|;
name|data
operator|=
literal|0
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
name|children
operator|.
name|clear
argument_list|()
expr_stmt|;
name|container
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|related
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QResourceRoot
modifier|*
name|root
init|=
name|related
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|root
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|root
expr_stmt|;
block|}
name|related
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
name|bool
DECL|function|load
name|QResourcePrivate
operator|::
name|load
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
name|related
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QMutexLocker
name|lock
argument_list|(
name|resourceMutex
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|ResourceList
modifier|*
name|list
init|=
name|resourceList
argument_list|()
decl_stmt|;
name|QString
name|cleaned
init|=
name|cleanPath
argument_list|(
name|file
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|->
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QResourceRoot
modifier|*
name|res
init|=
name|list
operator|->
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|int
name|node
init|=
name|res
operator|->
name|findNode
argument_list|(
name|cleaned
argument_list|,
name|locale
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|related
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|container
operator|=
name|res
operator|->
name|isContainer
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|container
condition|)
block|{
name|data
operator|=
name|res
operator|->
name|data
argument_list|(
name|node
argument_list|,
operator|&
name|size
argument_list|)
expr_stmt|;
name|compressed
operator|=
name|res
operator|->
name|isCompressed
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|data
operator|=
literal|0
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
name|compressed
operator|=
literal|0
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|res
operator|->
name|isContainer
argument_list|(
name|node
argument_list|)
operator|!=
name|container
condition|)
block|{
name|qWarning
argument_list|(
literal|"QResourceInfo: Resource [%s] has both data and children!"
argument_list|,
name|file
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|res
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|related
operator|.
name|append
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|res
operator|->
name|mappingRootSubdir
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|container
operator|=
literal|true
expr_stmt|;
name|data
operator|=
literal|0
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
name|compressed
operator|=
literal|0
expr_stmt|;
name|res
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|related
operator|.
name|append
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|!
name|related
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_function
name|void
DECL|function|ensureInitialized
name|QResourcePrivate
operator|::
name|ensureInitialized
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|related
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QResourcePrivate
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QResourcePrivate
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileName
operator|==
name|QLatin1String
argument_list|(
literal|":"
argument_list|)
condition|)
name|that
operator|->
name|fileName
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|that
operator|->
name|absoluteFilePath
operator|=
name|fileName
expr_stmt|;
if|if
condition|(
operator|!
name|that
operator|->
name|absoluteFilePath
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
condition|)
name|that
operator|->
name|absoluteFilePath
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|path
init|=
name|fileName
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
condition|)
name|path
operator|=
name|path
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
block|{
name|that
operator|->
name|load
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QMutexLocker
name|lock
argument_list|(
name|resourceMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QStringList
name|searchPaths
init|=
operator|*
name|resourceSearchPaths
argument_list|()
decl_stmt|;
name|searchPaths
operator|<<
name|QLatin1String
argument_list|(
literal|""
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|searchPaths
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|searchPath
argument_list|(
name|searchPaths
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|that
operator|->
name|load
argument_list|(
name|searchPath
argument_list|)
condition|)
block|{
name|that
operator|->
name|absoluteFilePath
operator|=
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
operator|+
name|searchPath
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
end_function
begin_function
name|void
DECL|function|ensureChildren
name|QResourcePrivate
operator|::
name|ensureChildren
parameter_list|()
specifier|const
block|{
name|ensureInitialized
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|container
operator|||
name|related
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QString
name|path
init|=
name|absoluteFilePath
decl_stmt|,
name|k
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
condition|)
name|path
operator|=
name|path
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|kids
decl_stmt|;
name|QString
name|cleaned
init|=
name|cleanPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|related
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QResourceRoot
modifier|*
name|res
init|=
name|related
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|->
name|mappingRootSubdir
argument_list|(
name|path
argument_list|,
operator|&
name|k
argument_list|)
operator|&&
operator|!
name|k
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|kids
operator|.
name|contains
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|children
operator|+=
name|k
expr_stmt|;
name|kids
operator|.
name|insert
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|const
name|int
name|node
init|=
name|res
operator|->
name|findNode
argument_list|(
name|cleaned
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
operator|-
literal|1
condition|)
block|{
name|QStringList
name|related_children
init|=
name|res
operator|->
name|children
argument_list|(
name|node
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|kid
init|=
literal|0
init|;
name|kid
operator|<
name|related_children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|kid
control|)
block|{
name|k
operator|=
name|related_children
operator|.
name|at
argument_list|(
name|kid
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|kids
operator|.
name|contains
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|children
operator|+=
name|k
expr_stmt|;
name|kids
operator|.
name|insert
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     Constructs a QResource pointing to \a file. \a locale is used to     load a specific localization of a resource data.      \sa QFileInfo, QDir::searchPaths(), setFileName(), setLocale() */
end_comment
begin_constructor
DECL|function|QResource
name|QResource
operator|::
name|QResource
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|,
specifier|const
name|QLocale
modifier|&
name|locale
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QResourcePrivate
argument_list|(
name|this
argument_list|)
argument_list|)
block|{
name|Q_D
argument_list|(
name|QResource
argument_list|)
expr_stmt|;
name|d
operator|->
name|fileName
operator|=
name|file
expr_stmt|;
name|d
operator|->
name|locale
operator|=
name|locale
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Releases the resources of the QResource object. */
end_comment
begin_destructor
DECL|function|~QResource
name|QResource
operator|::
name|~
name|QResource
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Sets a QResource to only load the localization of resource to for \a     locale. If a resource for the specific locale is not found then the     C locale is used.      \sa setFileName() */
end_comment
begin_function
DECL|function|setLocale
name|void
name|QResource
operator|::
name|setLocale
parameter_list|(
specifier|const
name|QLocale
modifier|&
name|locale
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QResource
argument_list|)
expr_stmt|;
name|d
operator|->
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|locale
operator|=
name|locale
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the locale used to locate the data for the QResource. */
end_comment
begin_function
DECL|function|locale
name|QLocale
name|QResource
operator|::
name|locale
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QResource
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|locale
return|;
block|}
end_function
begin_comment
comment|/*!     Sets a QResource to point to \a file. \a file can either be absolute,     in which case it is opened directly, if relative then the file will be     tried to be found in QDir::searchPaths().      \sa absoluteFilePath() */
end_comment
begin_function
DECL|function|setFileName
name|void
name|QResource
operator|::
name|setFileName
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QResource
argument_list|)
expr_stmt|;
name|d
operator|->
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|fileName
operator|=
name|file
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the full path to the file that this QResource represents as it     was passed.      \sa absoluteFilePath() */
end_comment
begin_function
DECL|function|fileName
name|QString
name|QResource
operator|::
name|fileName
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QResource
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureInitialized
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|fileName
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the real path that this QResource represents, if the resource     was found via the QDir::searchPaths() it will be indicated in the path.      \sa fileName() */
end_comment
begin_function
DECL|function|absoluteFilePath
name|QString
name|QResource
operator|::
name|absoluteFilePath
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QResource
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureInitialized
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|absoluteFilePath
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the resource really exists in the resource hierarchy,     false otherwise.  */
end_comment
begin_function
DECL|function|isValid
name|bool
name|QResource
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QResource
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureInitialized
argument_list|()
expr_stmt|;
return|return
operator|!
name|d
operator|->
name|related
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QResource::isFile() const      Returns \c true if the resource represents a file and thus has data     backing it, false if it represents a directory.      \sa isDir() */
end_comment
begin_comment
comment|/*!     Returns \c true if the resource represents a file and the data backing it     is in a compressed format, false otherwise.      \sa data(), isFile() */
end_comment
begin_function
DECL|function|isCompressed
name|bool
name|QResource
operator|::
name|isCompressed
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QResource
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureInitialized
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|compressed
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the size of the data backing the resource.      \sa data(), isFile() */
end_comment
begin_function
DECL|function|size
name|qint64
name|QResource
operator|::
name|size
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QResource
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureInitialized
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|size
return|;
block|}
end_function
begin_comment
comment|/*!     Returns direct access to a read only segment of data that this resource     represents. If the resource is compressed the data returns is     compressed and qUncompress() must be used to access the data. If the     resource is a directory 0 is returned.      \sa size(), isCompressed(), isFile() */
end_comment
begin_function
DECL|function|data
specifier|const
name|uchar
modifier|*
name|QResource
operator|::
name|data
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QResource
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureInitialized
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|data
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the resource represents a directory and thus may have     children() in it, false if it represents a file.      \sa isFile() */
end_comment
begin_function
DECL|function|isDir
name|bool
name|QResource
operator|::
name|isDir
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QResource
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureInitialized
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|container
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of all resources in this directory, if the resource     represents a file the list will be empty.      \sa isDir() */
end_comment
begin_function
DECL|function|children
name|QStringList
name|QResource
operator|::
name|children
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QResource
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureChildren
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|children
return|;
block|}
end_function
begin_comment
comment|/*!   \obsolete    Use QDir::addSearchPath() with a prefix instead.    Adds \a path to the search paths searched in to find resources that are   not specified with an absolute path. The \a path must be an absolute   path (start with \c{/}).    The default search path is to search only in the root (\c{:/}). The last   path added will be consulted first upon next QResource creation. */
end_comment
begin_function
name|void
DECL|function|addSearchPath
name|QResource
operator|::
name|addSearchPath
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QResource::addResourceSearchPath: Search paths must be absolute (start with /) [%s]"
argument_list|,
name|path
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|QMutexLocker
name|lock
argument_list|(
name|resourceMutex
argument_list|()
argument_list|)
decl_stmt|;
name|resourceSearchPaths
argument_list|()
operator|->
name|prepend
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \obsolete    Use QDir::searchPaths() instead.    Returns the current search path list. This list is consulted when   creating a relative resource.    \sa QDir::addSearchPath(), QDir::setSearchPaths() */
end_comment
begin_function
name|QStringList
DECL|function|searchPaths
name|QResource
operator|::
name|searchPaths
parameter_list|()
block|{
name|QMutexLocker
name|lock
argument_list|(
name|resourceMutex
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|*
name|resourceSearchPaths
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|hash
specifier|inline
name|uint
name|QResourceRoot
operator|::
name|hash
parameter_list|(
name|int
name|node
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|node
condition|)
comment|//root
return|return
literal|0
return|;
specifier|const
name|int
name|offset
init|=
name|findOffset
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|int
name|name_offset
init|=
operator|(
name|tree
index|[
name|offset
operator|+
literal|0
index|]
operator|<<
literal|24
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|1
index|]
operator|<<
literal|16
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|2
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|3
index|]
operator|<<
literal|0
operator|)
decl_stmt|;
name|name_offset
operator|+=
literal|2
expr_stmt|;
comment|//jump past name length
return|return
operator|(
name|names
index|[
name|name_offset
operator|+
literal|0
index|]
operator|<<
literal|24
operator|)
operator|+
operator|(
name|names
index|[
name|name_offset
operator|+
literal|1
index|]
operator|<<
literal|16
operator|)
operator|+
operator|(
name|names
index|[
name|name_offset
operator|+
literal|2
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
name|names
index|[
name|name_offset
operator|+
literal|3
index|]
operator|<<
literal|0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|name
specifier|inline
name|QString
name|QResourceRoot
operator|::
name|name
parameter_list|(
name|int
name|node
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|node
condition|)
comment|// root
return|return
name|QString
argument_list|()
return|;
specifier|const
name|int
name|offset
init|=
name|findOffset
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|QString
name|ret
decl_stmt|;
name|int
name|name_offset
init|=
operator|(
name|tree
index|[
name|offset
operator|+
literal|0
index|]
operator|<<
literal|24
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|1
index|]
operator|<<
literal|16
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|2
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|3
index|]
operator|<<
literal|0
operator|)
decl_stmt|;
specifier|const
name|short
name|name_length
init|=
operator|(
name|names
index|[
name|name_offset
operator|+
literal|0
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
name|names
index|[
name|name_offset
operator|+
literal|1
index|]
operator|<<
literal|0
operator|)
decl_stmt|;
name|name_offset
operator|+=
literal|2
expr_stmt|;
name|name_offset
operator|+=
literal|4
expr_stmt|;
comment|//jump past hash
name|ret
operator|.
name|resize
argument_list|(
name|name_length
argument_list|)
expr_stmt|;
name|QChar
modifier|*
name|strData
init|=
name|ret
operator|.
name|data
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name_length
operator|*
literal|2
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|QChar
name|c
argument_list|(
name|names
index|[
name|name_offset
operator|+
name|i
operator|+
literal|1
index|]
argument_list|,
name|names
index|[
name|name_offset
operator|+
name|i
index|]
argument_list|)
decl_stmt|;
operator|*
name|strData
operator|=
name|c
expr_stmt|;
operator|++
name|strData
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|findNode
name|int
name|QResourceRoot
operator|::
name|findNode
parameter_list|(
specifier|const
name|QString
modifier|&
name|_path
parameter_list|,
specifier|const
name|QLocale
modifier|&
name|locale
parameter_list|)
specifier|const
block|{
name|QString
name|path
init|=
name|_path
decl_stmt|;
block|{
name|QString
name|root
init|=
name|mappingRoot
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|root
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|root
operator|==
name|path
condition|)
block|{
name|path
operator|=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|root
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
name|root
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|size
argument_list|()
operator|>=
name|root
operator|.
name|size
argument_list|()
operator|&&
name|path
operator|.
name|startsWith
argument_list|(
name|root
argument_list|)
condition|)
name|path
operator|=
name|path
operator|.
name|mid
argument_list|(
name|root
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
name|path
operator|=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
ifdef|#
directive|ifdef
name|DEBUG_RESOURCE_MATCH
name|qDebug
argument_list|()
operator|<<
literal|"!!!!"
operator|<<
literal|"START"
operator|<<
name|path
operator|<<
name|locale
operator|.
name|country
argument_list|()
operator|<<
name|locale
operator|.
name|language
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|path
operator|==
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
condition|)
return|return
literal|0
return|;
comment|//the root node is always first
name|int
name|child_count
init|=
operator|(
name|tree
index|[
literal|6
index|]
operator|<<
literal|24
operator|)
operator|+
operator|(
name|tree
index|[
literal|7
index|]
operator|<<
literal|16
operator|)
operator|+
operator|(
name|tree
index|[
literal|8
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
name|tree
index|[
literal|9
index|]
operator|<<
literal|0
operator|)
decl_stmt|;
name|int
name|child
init|=
operator|(
name|tree
index|[
literal|10
index|]
operator|<<
literal|24
operator|)
operator|+
operator|(
name|tree
index|[
literal|11
index|]
operator|<<
literal|16
operator|)
operator|+
operator|(
name|tree
index|[
literal|12
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
name|tree
index|[
literal|13
index|]
operator|<<
literal|0
operator|)
decl_stmt|;
comment|//now iterate up the tree
name|int
name|node
init|=
operator|-
literal|1
decl_stmt|;
name|QStringSplitter
name|splitter
argument_list|(
name|path
argument_list|)
decl_stmt|;
while|while
condition|(
name|child_count
operator|&&
name|splitter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QStringRef
name|segment
init|=
name|splitter
operator|.
name|next
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_RESOURCE_MATCH
name|qDebug
argument_list|()
operator|<<
literal|"  CHILDREN"
operator|<<
name|segment
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|child_count
condition|;
operator|++
name|j
control|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"   "
operator|<<
name|child
operator|+
name|j
operator|<<
literal|" :: "
operator|<<
name|name
argument_list|(
name|child
operator|+
name|j
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
specifier|const
name|uint
name|h
init|=
name|qt_hash
argument_list|(
name|segment
argument_list|)
decl_stmt|;
comment|//do the binary search for the hash
name|int
name|l
init|=
literal|0
decl_stmt|,
name|r
init|=
name|child_count
operator|-
literal|1
decl_stmt|;
name|int
name|sub_node
init|=
operator|(
name|l
operator|+
name|r
operator|+
literal|1
operator|)
operator|/
literal|2
decl_stmt|;
while|while
condition|(
name|r
operator|!=
name|l
condition|)
block|{
specifier|const
name|uint
name|sub_node_hash
init|=
name|hash
argument_list|(
name|child
operator|+
name|sub_node
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|==
name|sub_node_hash
condition|)
break|break;
elseif|else
if|if
condition|(
name|h
operator|<
name|sub_node_hash
condition|)
name|r
operator|=
name|sub_node
operator|-
literal|1
expr_stmt|;
else|else
name|l
operator|=
name|sub_node
expr_stmt|;
name|sub_node
operator|=
operator|(
name|l
operator|+
name|r
operator|+
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
block|}
name|sub_node
operator|+=
name|child
expr_stmt|;
comment|//now do the "harder" compares
name|bool
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|hash
argument_list|(
name|sub_node
argument_list|)
operator|==
name|h
condition|)
block|{
while|while
condition|(
name|sub_node
operator|>
name|child
operator|&&
name|hash
argument_list|(
name|sub_node
operator|-
literal|1
argument_list|)
operator|==
name|h
condition|)
comment|//backup for collisions
operator|--
name|sub_node
expr_stmt|;
for|for
control|(
init|;
name|sub_node
operator|<
name|child
operator|+
name|child_count
operator|&&
name|hash
argument_list|(
name|sub_node
argument_list|)
operator|==
name|h
condition|;
operator|++
name|sub_node
control|)
block|{
comment|//here we go...
if|if
condition|(
name|name
argument_list|(
name|sub_node
argument_list|)
operator|==
name|segment
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|int
name|offset
init|=
name|findOffset
argument_list|(
name|sub_node
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_RESOURCE_MATCH
name|qDebug
argument_list|()
operator|<<
literal|"  TRY"
operator|<<
name|sub_node
operator|<<
name|name
argument_list|(
name|sub_node
argument_list|)
operator|<<
name|offset
expr_stmt|;
endif|#
directive|endif
name|offset
operator|+=
literal|4
expr_stmt|;
comment|//jump past name
specifier|const
name|short
name|flags
init|=
operator|(
name|tree
index|[
name|offset
operator|+
literal|0
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|1
index|]
operator|<<
literal|0
operator|)
decl_stmt|;
name|offset
operator|+=
literal|2
expr_stmt|;
if|if
condition|(
operator|!
name|splitter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|Directory
operator|)
condition|)
block|{
specifier|const
name|short
name|country
init|=
operator|(
name|tree
index|[
name|offset
operator|+
literal|0
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|1
index|]
operator|<<
literal|0
operator|)
decl_stmt|;
name|offset
operator|+=
literal|2
expr_stmt|;
specifier|const
name|short
name|language
init|=
operator|(
name|tree
index|[
name|offset
operator|+
literal|0
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|1
index|]
operator|<<
literal|0
operator|)
decl_stmt|;
name|offset
operator|+=
literal|2
expr_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_RESOURCE_MATCH
name|qDebug
argument_list|()
operator|<<
literal|"    "
operator|<<
literal|"LOCALE"
operator|<<
name|country
operator|<<
name|language
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|country
operator|==
name|locale
operator|.
name|country
argument_list|()
operator|&&
name|language
operator|==
name|locale
operator|.
name|language
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|DEBUG_RESOURCE_MATCH
name|qDebug
argument_list|()
operator|<<
literal|"!!!!"
operator|<<
literal|"FINISHED"
operator|<<
name|__LINE__
operator|<<
name|sub_node
expr_stmt|;
endif|#
directive|endif
return|return
name|sub_node
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|country
operator|==
name|QLocale
operator|::
name|AnyCountry
operator|&&
name|language
operator|==
name|locale
operator|.
name|language
argument_list|()
operator|)
operator|||
operator|(
name|country
operator|==
name|QLocale
operator|::
name|AnyCountry
operator|&&
name|language
operator|==
name|QLocale
operator|::
name|C
operator|&&
name|node
operator|==
operator|-
literal|1
operator|)
condition|)
block|{
name|node
operator|=
name|sub_node
expr_stmt|;
block|}
continue|continue;
block|}
else|else
block|{
ifdef|#
directive|ifdef
name|DEBUG_RESOURCE_MATCH
name|qDebug
argument_list|()
operator|<<
literal|"!!!!"
operator|<<
literal|"FINISHED"
operator|<<
name|__LINE__
operator|<<
name|sub_node
expr_stmt|;
endif|#
directive|endif
return|return
name|sub_node
return|;
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|Directory
operator|)
condition|)
return|return
operator|-
literal|1
return|;
name|child_count
operator|=
operator|(
name|tree
index|[
name|offset
operator|+
literal|0
index|]
operator|<<
literal|24
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|1
index|]
operator|<<
literal|16
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|2
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|3
index|]
operator|<<
literal|0
operator|)
expr_stmt|;
name|offset
operator|+=
literal|4
expr_stmt|;
name|child
operator|=
operator|(
name|tree
index|[
name|offset
operator|+
literal|0
index|]
operator|<<
literal|24
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|1
index|]
operator|<<
literal|16
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|2
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|3
index|]
operator|<<
literal|0
operator|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
break|break;
block|}
ifdef|#
directive|ifdef
name|DEBUG_RESOURCE_MATCH
name|qDebug
argument_list|()
operator|<<
literal|"!!!!"
operator|<<
literal|"FINISHED"
operator|<<
name|__LINE__
operator|<<
name|node
expr_stmt|;
endif|#
directive|endif
return|return
name|node
return|;
block|}
end_function
begin_function
DECL|function|flags
name|short
name|QResourceRoot
operator|::
name|flags
parameter_list|(
name|int
name|node
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|node
operator|==
operator|-
literal|1
condition|)
return|return
literal|0
return|;
specifier|const
name|int
name|offset
init|=
name|findOffset
argument_list|(
name|node
argument_list|)
operator|+
literal|4
decl_stmt|;
comment|//jump past name
return|return
operator|(
name|tree
index|[
name|offset
operator|+
literal|0
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|1
index|]
operator|<<
literal|0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|data
specifier|const
name|uchar
modifier|*
name|QResourceRoot
operator|::
name|data
parameter_list|(
name|int
name|node
parameter_list|,
name|qint64
modifier|*
name|size
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|node
operator|==
operator|-
literal|1
condition|)
block|{
operator|*
name|size
operator|=
literal|0
expr_stmt|;
return|return
literal|0
return|;
block|}
name|int
name|offset
init|=
name|findOffset
argument_list|(
name|node
argument_list|)
operator|+
literal|4
decl_stmt|;
comment|//jump past name
specifier|const
name|short
name|flags
init|=
operator|(
name|tree
index|[
name|offset
operator|+
literal|0
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|1
index|]
operator|<<
literal|0
operator|)
decl_stmt|;
name|offset
operator|+=
literal|2
expr_stmt|;
name|offset
operator|+=
literal|4
expr_stmt|;
comment|//jump past locale
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|Directory
operator|)
condition|)
block|{
specifier|const
name|int
name|data_offset
init|=
operator|(
name|tree
index|[
name|offset
operator|+
literal|0
index|]
operator|<<
literal|24
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|1
index|]
operator|<<
literal|16
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|2
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|3
index|]
operator|<<
literal|0
operator|)
decl_stmt|;
specifier|const
name|uint
name|data_length
init|=
operator|(
name|payloads
index|[
name|data_offset
operator|+
literal|0
index|]
operator|<<
literal|24
operator|)
operator|+
operator|(
name|payloads
index|[
name|data_offset
operator|+
literal|1
index|]
operator|<<
literal|16
operator|)
operator|+
operator|(
name|payloads
index|[
name|data_offset
operator|+
literal|2
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
name|payloads
index|[
name|data_offset
operator|+
literal|3
index|]
operator|<<
literal|0
operator|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|ret
init|=
name|payloads
operator|+
name|data_offset
operator|+
literal|4
decl_stmt|;
operator|*
name|size
operator|=
name|data_length
expr_stmt|;
return|return
name|ret
return|;
block|}
operator|*
name|size
operator|=
literal|0
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|children
name|QStringList
name|QResourceRoot
operator|::
name|children
parameter_list|(
name|int
name|node
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|node
operator|==
operator|-
literal|1
condition|)
return|return
name|QStringList
argument_list|()
return|;
name|int
name|offset
init|=
name|findOffset
argument_list|(
name|node
argument_list|)
operator|+
literal|4
decl_stmt|;
comment|//jump past name
specifier|const
name|short
name|flags
init|=
operator|(
name|tree
index|[
name|offset
operator|+
literal|0
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|1
index|]
operator|<<
literal|0
operator|)
decl_stmt|;
name|offset
operator|+=
literal|2
expr_stmt|;
name|QStringList
name|ret
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|Directory
condition|)
block|{
specifier|const
name|int
name|child_count
init|=
operator|(
name|tree
index|[
name|offset
operator|+
literal|0
index|]
operator|<<
literal|24
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|1
index|]
operator|<<
literal|16
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|2
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|3
index|]
operator|<<
literal|0
operator|)
decl_stmt|;
name|offset
operator|+=
literal|4
expr_stmt|;
specifier|const
name|int
name|child_off
init|=
operator|(
name|tree
index|[
name|offset
operator|+
literal|0
index|]
operator|<<
literal|24
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|1
index|]
operator|<<
literal|16
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|2
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
name|tree
index|[
name|offset
operator|+
literal|3
index|]
operator|<<
literal|0
operator|)
decl_stmt|;
name|ret
operator|.
name|reserve
argument_list|(
name|child_count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|child_off
init|;
name|i
operator|<
name|child_off
operator|+
name|child_count
condition|;
operator|++
name|i
control|)
name|ret
operator|<<
name|name
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|mappingRootSubdir
name|bool
name|QResourceRoot
operator|::
name|mappingRootSubdir
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
name|QString
modifier|*
name|match
parameter_list|)
specifier|const
block|{
specifier|const
name|QString
name|root
init|=
name|mappingRoot
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|root
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QStringList
name|root_segments
init|=
name|root
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|,
name|path_segments
init|=
name|path
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
if|if
condition|(
name|path_segments
operator|.
name|size
argument_list|()
operator|<=
name|root_segments
operator|.
name|size
argument_list|()
condition|)
block|{
name|int
name|matched
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path_segments
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|root_segments
index|[
name|i
index|]
operator|!=
name|path_segments
index|[
name|i
index|]
condition|)
break|break;
operator|++
name|matched
expr_stmt|;
block|}
if|if
condition|(
name|matched
operator|==
name|path_segments
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|match
operator|&&
name|root_segments
operator|.
name|size
argument_list|()
operator|>
name|matched
condition|)
operator|*
name|match
operator|=
name|root_segments
operator|.
name|at
argument_list|(
name|matched
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|qRegisterResourceData
name|Q_CORE_EXPORT
name|bool
name|qRegisterResourceData
parameter_list|(
name|int
name|version
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|tree
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|data
parameter_list|)
block|{
name|QMutexLocker
name|lock
argument_list|(
name|resourceMutex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|0x01
operator|&&
name|resourceList
argument_list|()
condition|)
block|{
name|bool
name|found
init|=
literal|false
decl_stmt|;
name|QResourceRoot
name|res
argument_list|(
name|tree
argument_list|,
name|name
argument_list|,
name|data
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resourceList
argument_list|()
operator|->
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|*
name|resourceList
argument_list|()
operator|->
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|res
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|QResourceRoot
modifier|*
name|root
init|=
operator|new
name|QResourceRoot
argument_list|(
name|tree
argument_list|,
name|name
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|root
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|resourceList
argument_list|()
operator|->
name|append
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|qUnregisterResourceData
name|Q_CORE_EXPORT
name|bool
name|qUnregisterResourceData
parameter_list|(
name|int
name|version
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|tree
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|data
parameter_list|)
block|{
name|QMutexLocker
name|lock
argument_list|(
name|resourceMutex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|0x01
operator|&&
name|resourceList
argument_list|()
condition|)
block|{
name|QResourceRoot
name|res
argument_list|(
name|tree
argument_list|,
name|name
argument_list|,
name|data
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resourceList
argument_list|()
operator|->
name|size
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|*
name|resourceList
argument_list|()
operator|->
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|res
condition|)
block|{
name|QResourceRoot
modifier|*
name|root
init|=
name|resourceList
argument_list|()
operator|->
name|takeAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|root
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|root
expr_stmt|;
block|}
else|else
block|{
operator|++
name|i
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|//run time resource creation
end_comment
begin_class
DECL|class|QDynamicBufferResourceRoot
class|class
name|QDynamicBufferResourceRoot
super|:
specifier|public
name|QResourceRoot
block|{
DECL|member|root
name|QString
name|root
decl_stmt|;
DECL|member|buffer
specifier|const
name|uchar
modifier|*
name|buffer
decl_stmt|;
public|public:
DECL|function|QDynamicBufferResourceRoot
specifier|inline
name|QDynamicBufferResourceRoot
parameter_list|(
specifier|const
name|QString
modifier|&
name|_root
parameter_list|)
member_init_list|:
name|root
argument_list|(
name|_root
argument_list|)
member_init_list|,
name|buffer
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|~QDynamicBufferResourceRoot
specifier|inline
name|~
name|QDynamicBufferResourceRoot
parameter_list|()
block|{ }
DECL|function|mappingBuffer
specifier|inline
specifier|const
name|uchar
modifier|*
name|mappingBuffer
parameter_list|()
specifier|const
block|{
return|return
name|buffer
return|;
block|}
specifier|virtual
name|QString
name|mappingRoot
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|root
return|;
block|}
specifier|virtual
name|ResourceRootType
name|type
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|Resource_Buffer
return|;
block|}
comment|// size == -1 means "unknown"
DECL|function|registerSelf
name|bool
name|registerSelf
parameter_list|(
specifier|const
name|uchar
modifier|*
name|b
parameter_list|,
name|int
name|size
parameter_list|)
block|{
comment|// 5 int "pointers"
if|if
condition|(
name|size
operator|>=
literal|0
operator|&&
name|size
operator|<
literal|20
condition|)
return|return
literal|false
return|;
comment|//setup the data now
name|int
name|offset
init|=
literal|0
decl_stmt|;
comment|//magic number
if|if
condition|(
name|b
index|[
name|offset
operator|+
literal|0
index|]
operator|!=
literal|'q'
operator|||
name|b
index|[
name|offset
operator|+
literal|1
index|]
operator|!=
literal|'r'
operator|||
name|b
index|[
name|offset
operator|+
literal|2
index|]
operator|!=
literal|'e'
operator|||
name|b
index|[
name|offset
operator|+
literal|3
index|]
operator|!=
literal|'s'
condition|)
block|{
return|return
literal|false
return|;
block|}
name|offset
operator|+=
literal|4
expr_stmt|;
specifier|const
name|int
name|version
init|=
operator|(
name|b
index|[
name|offset
operator|+
literal|0
index|]
operator|<<
literal|24
operator|)
operator|+
operator|(
name|b
index|[
name|offset
operator|+
literal|1
index|]
operator|<<
literal|16
operator|)
operator|+
operator|(
name|b
index|[
name|offset
operator|+
literal|2
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
name|b
index|[
name|offset
operator|+
literal|3
index|]
operator|<<
literal|0
operator|)
decl_stmt|;
name|offset
operator|+=
literal|4
expr_stmt|;
specifier|const
name|int
name|tree_offset
init|=
operator|(
name|b
index|[
name|offset
operator|+
literal|0
index|]
operator|<<
literal|24
operator|)
operator|+
operator|(
name|b
index|[
name|offset
operator|+
literal|1
index|]
operator|<<
literal|16
operator|)
operator|+
operator|(
name|b
index|[
name|offset
operator|+
literal|2
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
name|b
index|[
name|offset
operator|+
literal|3
index|]
operator|<<
literal|0
operator|)
decl_stmt|;
name|offset
operator|+=
literal|4
expr_stmt|;
specifier|const
name|int
name|data_offset
init|=
operator|(
name|b
index|[
name|offset
operator|+
literal|0
index|]
operator|<<
literal|24
operator|)
operator|+
operator|(
name|b
index|[
name|offset
operator|+
literal|1
index|]
operator|<<
literal|16
operator|)
operator|+
operator|(
name|b
index|[
name|offset
operator|+
literal|2
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
name|b
index|[
name|offset
operator|+
literal|3
index|]
operator|<<
literal|0
operator|)
decl_stmt|;
name|offset
operator|+=
literal|4
expr_stmt|;
specifier|const
name|int
name|name_offset
init|=
operator|(
name|b
index|[
name|offset
operator|+
literal|0
index|]
operator|<<
literal|24
operator|)
operator|+
operator|(
name|b
index|[
name|offset
operator|+
literal|1
index|]
operator|<<
literal|16
operator|)
operator|+
operator|(
name|b
index|[
name|offset
operator|+
literal|2
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
name|b
index|[
name|offset
operator|+
literal|3
index|]
operator|<<
literal|0
operator|)
decl_stmt|;
name|offset
operator|+=
literal|4
expr_stmt|;
comment|// Some sanity checking for sizes. This is _not_ a security measure.
if|if
condition|(
name|size
operator|>=
literal|0
operator|&&
operator|(
name|tree_offset
operator|>=
name|size
operator|||
name|data_offset
operator|>=
name|size
operator|||
name|name_offset
operator|>=
name|size
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|version
operator|==
literal|0x01
condition|)
block|{
name|buffer
operator|=
name|b
expr_stmt|;
name|setSource
argument_list|(
name|b
operator|+
name|tree_offset
argument_list|,
name|b
operator|+
name|name_offset
argument_list|,
name|b
operator|+
name|data_offset
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
class|;
end_class
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_NACL
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_INTEGRITY
argument_list|)
end_if
begin_define
DECL|macro|QT_USE_MMAP
define|#
directive|define
name|QT_USE_MMAP
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// most of the headers below are already included in qplatformdefs.h
end_comment
begin_comment
comment|// also this lacks Large File support but that's probably irrelevant
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_USE_MMAP
argument_list|)
end_if
begin_comment
comment|// for mmap
end_comment
begin_expr_stmt
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|<sys/mman.h>
include|#
directive|include
file|<errno.h>
name|QT_END_INCLUDE_NAMESPACE
endif|#
directive|endif
DECL|class|QDynamicFileResourceRoot
name|class
name|QDynamicFileResourceRoot
operator|:
specifier|public
name|QDynamicBufferResourceRoot
block|{
DECL|member|fileName
name|QString
name|fileName
block|;
comment|// for mmap'ed files, this is what needs to be unmapped.
DECL|member|unmapPointer
name|uchar
operator|*
name|unmapPointer
block|;
DECL|member|unmapLength
name|unsigned
name|int
name|unmapLength
block|;
specifier|public
operator|:
DECL|function|QDynamicFileResourceRoot
specifier|inline
name|QDynamicFileResourceRoot
argument_list|(
specifier|const
name|QString
operator|&
name|_root
argument_list|)
operator|:
name|QDynamicBufferResourceRoot
argument_list|(
name|_root
argument_list|)
block|,
name|unmapPointer
argument_list|(
literal|0
argument_list|)
block|,
name|unmapLength
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|~QDynamicFileResourceRoot
operator|~
name|QDynamicFileResourceRoot
argument_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_USE_MMAP
argument_list|)
if|if
condition|(
name|unmapPointer
condition|)
block|{
name|munmap
argument_list|(
operator|(
name|char
operator|*
operator|)
name|unmapPointer
argument_list|,
name|unmapLength
argument_list|)
expr_stmt|;
name|unmapPointer
operator|=
literal|0
expr_stmt|;
name|unmapLength
operator|=
literal|0
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
operator|delete
index|[]
name|mappingBuffer
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_macro
unit|}     QString
DECL|function|mappingFile
name|mappingFile
argument_list|()
end_macro
begin_expr_stmt
DECL|function|mappingFile
specifier|const
block|{
return|return
name|fileName
return|;
block|}
end_expr_stmt
begin_function
specifier|virtual
name|ResourceRootType
name|type
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|Resource_File
return|;
block|}
end_function
begin_function
DECL|function|registerSelf
name|bool
name|registerSelf
parameter_list|(
specifier|const
name|QString
modifier|&
name|f
parameter_list|)
block|{
name|bool
name|fromMM
init|=
literal|false
decl_stmt|;
name|uchar
modifier|*
name|data
init|=
literal|0
decl_stmt|;
name|unsigned
name|int
name|data_len
init|=
literal|0
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_USE_MMAP
ifndef|#
directive|ifndef
name|MAP_FILE
DECL|macro|MAP_FILE
define|#
directive|define
name|MAP_FILE
value|0
endif|#
directive|endif
ifndef|#
directive|ifndef
name|MAP_FAILED
DECL|macro|MAP_FAILED
define|#
directive|define
name|MAP_FAILED
value|-1
endif|#
directive|endif
name|int
name|fd
init|=
name|QT_OPEN
argument_list|(
name|QFile
operator|::
name|encodeName
argument_list|(
name|f
argument_list|)
argument_list|,
name|O_RDONLY
argument_list|,
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|_S_IREAD
operator||
name|_S_IWRITE
else|#
directive|else
literal|0666
endif|#
directive|endif
argument_list|)
decl_stmt|;
if|if
condition|(
name|fd
operator|>=
literal|0
condition|)
block|{
name|QT_STATBUF
name|st
decl_stmt|;
if|if
condition|(
operator|!
name|QT_FSTAT
argument_list|(
name|fd
argument_list|,
operator|&
name|st
argument_list|)
condition|)
block|{
name|uchar
modifier|*
name|ptr
decl_stmt|;
name|ptr
operator|=
cast|reinterpret_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|mmap
argument_list|(
literal|0
argument_list|,
name|st
operator|.
name|st_size
argument_list|,
comment|// any address, whole file
name|PROT_READ
argument_list|,
comment|// read-only memory
name|MAP_FILE
operator||
name|MAP_PRIVATE
argument_list|,
comment|// swap-backed map from file
name|fd
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// from offset 0 of fd
if|if
condition|(
name|ptr
operator|&&
name|ptr
operator|!=
cast|reinterpret_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|MAP_FAILED
argument_list|)
condition|)
block|{
name|data
operator|=
name|ptr
expr_stmt|;
name|data_len
operator|=
name|st
operator|.
name|st_size
expr_stmt|;
name|fromMM
operator|=
literal|true
expr_stmt|;
block|}
block|}
operator|::
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_USE_MMAP
if|if
condition|(
operator|!
name|data
condition|)
block|{
name|QFile
name|file
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
return|return
literal|false
return|;
name|data_len
operator|=
name|file
operator|.
name|size
argument_list|()
expr_stmt|;
name|data
operator|=
operator|new
name|uchar
index|[
name|data_len
index|]
expr_stmt|;
name|bool
name|ok
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
name|ok
operator|=
operator|(
name|data_len
operator|==
operator|(
name|uint
operator|)
name|file
operator|.
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
name|data
argument_list|,
name|data_len
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
block|{
operator|delete
index|[]
name|data
expr_stmt|;
name|data
operator|=
literal|0
expr_stmt|;
name|data_len
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
name|fromMM
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|&&
name|QDynamicBufferResourceRoot
operator|::
name|registerSelf
argument_list|(
name|data
argument_list|,
name|data_len
argument_list|)
condition|)
block|{
if|if
condition|(
name|fromMM
condition|)
block|{
name|unmapPointer
operator|=
name|data
expr_stmt|;
name|unmapLength
operator|=
name|data_len
expr_stmt|;
block|}
name|fileName
operator|=
name|f
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
unit|};
DECL|function|qt_resource_fixResourceRoot
specifier|static
name|QString
name|qt_resource_fixResourceRoot
parameter_list|(
name|QString
name|r
parameter_list|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
condition|)
name|r
operator|=
name|r
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
name|r
operator|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
end_function
begin_comment
comment|/*!    \fn bool QResource::registerResource(const QString&rccFileName, const QString&mapRoot)     Registers the resource with the given \a rccFileName at the location in the    resource tree specified by \a mapRoot, and returns \c true if the file is    successfully opened; otherwise returns \c false.     \sa unregisterResource() */
end_comment
begin_function
name|bool
DECL|function|registerResource
name|QResource
operator|::
name|registerResource
parameter_list|(
specifier|const
name|QString
modifier|&
name|rccFilename
parameter_list|,
specifier|const
name|QString
modifier|&
name|resourceRoot
parameter_list|)
block|{
name|QString
name|r
init|=
name|qt_resource_fixResourceRoot
argument_list|(
name|resourceRoot
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
operator|&&
name|r
index|[
literal|0
index|]
operator|!=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDir::registerResource: Registering a resource [%s] must be rooted in an absolute path (start with /) [%s]"
argument_list|,
name|rccFilename
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|resourceRoot
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QDynamicFileResourceRoot
modifier|*
name|root
init|=
operator|new
name|QDynamicFileResourceRoot
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|->
name|registerSelf
argument_list|(
name|rccFilename
argument_list|)
condition|)
block|{
name|root
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|QMutexLocker
name|lock
argument_list|(
name|resourceMutex
argument_list|()
argument_list|)
decl_stmt|;
name|resourceList
argument_list|()
operator|->
name|append
argument_list|(
name|root
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
operator|delete
name|root
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!   \fn bool QResource::unregisterResource(const QString&rccFileName, const QString&mapRoot)    Unregisters the resource with the given \a rccFileName at the location in   the resource tree specified by \a mapRoot, and returns \c true if the   resource is successfully unloaded and no references exist for the   resource; otherwise returns \c false.    \sa registerResource() */
end_comment
begin_function
name|bool
DECL|function|unregisterResource
name|QResource
operator|::
name|unregisterResource
parameter_list|(
specifier|const
name|QString
modifier|&
name|rccFilename
parameter_list|,
specifier|const
name|QString
modifier|&
name|resourceRoot
parameter_list|)
block|{
name|QString
name|r
init|=
name|qt_resource_fixResourceRoot
argument_list|(
name|resourceRoot
argument_list|)
decl_stmt|;
name|QMutexLocker
name|lock
argument_list|(
name|resourceMutex
argument_list|()
argument_list|)
decl_stmt|;
name|ResourceList
modifier|*
name|list
init|=
name|resourceList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|->
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QResourceRoot
modifier|*
name|res
init|=
name|list
operator|->
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|->
name|type
argument_list|()
operator|==
name|QResourceRoot
operator|::
name|Resource_File
condition|)
block|{
name|QDynamicFileResourceRoot
modifier|*
name|root
init|=
cast|reinterpret_cast
argument_list|<
name|QDynamicFileResourceRoot
operator|*
argument_list|>
argument_list|(
name|res
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|->
name|mappingFile
argument_list|()
operator|==
name|rccFilename
operator|&&
name|root
operator|->
name|mappingRoot
argument_list|()
operator|==
name|r
condition|)
block|{
name|resourceList
argument_list|()
operator|->
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|root
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
block|{
operator|delete
name|root
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!    \fn bool QResource::registerResource(const uchar *rccData, const QString&mapRoot)    \since 4.3     Registers the resource with the given \a rccData at the location in the    resource tree specified by \a mapRoot, and returns \c true if the file is    successfully opened; otherwise returns \c false.     \warning The data must remain valid throughout the life of any QFile    that may reference the resource data.     \sa unregisterResource() */
end_comment
begin_function
name|bool
DECL|function|registerResource
name|QResource
operator|::
name|registerResource
parameter_list|(
specifier|const
name|uchar
modifier|*
name|rccData
parameter_list|,
specifier|const
name|QString
modifier|&
name|resourceRoot
parameter_list|)
block|{
name|QString
name|r
init|=
name|qt_resource_fixResourceRoot
argument_list|(
name|resourceRoot
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
operator|&&
name|r
index|[
literal|0
index|]
operator|!=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDir::registerResource: Registering a resource [%p] must be rooted in an absolute path (start with /) [%s]"
argument_list|,
name|rccData
argument_list|,
name|resourceRoot
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QDynamicBufferResourceRoot
modifier|*
name|root
init|=
operator|new
name|QDynamicBufferResourceRoot
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|->
name|registerSelf
argument_list|(
name|rccData
argument_list|,
operator|-
literal|1
argument_list|)
condition|)
block|{
name|root
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|QMutexLocker
name|lock
argument_list|(
name|resourceMutex
argument_list|()
argument_list|)
decl_stmt|;
name|resourceList
argument_list|()
operator|->
name|append
argument_list|(
name|root
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
operator|delete
name|root
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!   \fn bool QResource::unregisterResource(const uchar *rccData, const QString&mapRoot)   \since 4.3    Unregisters the resource with the given \a rccData at the location in the   resource tree specified by \a mapRoot, and returns \c true if the resource is   successfully unloaded and no references exist into the resource; otherwise returns \c false.    \sa registerResource() */
end_comment
begin_function
name|bool
DECL|function|unregisterResource
name|QResource
operator|::
name|unregisterResource
parameter_list|(
specifier|const
name|uchar
modifier|*
name|rccData
parameter_list|,
specifier|const
name|QString
modifier|&
name|resourceRoot
parameter_list|)
block|{
name|QString
name|r
init|=
name|qt_resource_fixResourceRoot
argument_list|(
name|resourceRoot
argument_list|)
decl_stmt|;
name|QMutexLocker
name|lock
argument_list|(
name|resourceMutex
argument_list|()
argument_list|)
decl_stmt|;
name|ResourceList
modifier|*
name|list
init|=
name|resourceList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|->
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QResourceRoot
modifier|*
name|res
init|=
name|list
operator|->
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|->
name|type
argument_list|()
operator|==
name|QResourceRoot
operator|::
name|Resource_Buffer
condition|)
block|{
name|QDynamicBufferResourceRoot
modifier|*
name|root
init|=
cast|reinterpret_cast
argument_list|<
name|QDynamicBufferResourceRoot
operator|*
argument_list|>
argument_list|(
name|res
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|->
name|mappingBuffer
argument_list|()
operator|==
name|rccData
operator|&&
name|root
operator|->
name|mappingRoot
argument_list|()
operator|==
name|r
condition|)
block|{
name|resourceList
argument_list|()
operator|->
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|root
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
block|{
operator|delete
name|root
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|//resource engine
end_comment
begin_class
DECL|class|QResourceFileEnginePrivate
class|class
name|QResourceFileEnginePrivate
super|:
specifier|public
name|QAbstractFileEnginePrivate
block|{
protected|protected:
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QResourceFileEngine
parameter_list|)
specifier|private
protected|:
name|uchar
modifier|*
name|map
parameter_list|(
name|qint64
name|offset
parameter_list|,
name|qint64
name|size
parameter_list|,
name|QFile
operator|::
name|MemoryMapFlags
name|flags
parameter_list|)
function_decl|;
name|bool
name|unmap
parameter_list|(
name|uchar
modifier|*
name|ptr
parameter_list|)
function_decl|;
DECL|member|offset
name|qint64
name|offset
decl_stmt|;
DECL|member|resource
name|QResource
name|resource
decl_stmt|;
DECL|member|uncompressed
name|QByteArray
name|uncompressed
decl_stmt|;
protected|protected:
DECL|function|QResourceFileEnginePrivate
name|QResourceFileEnginePrivate
parameter_list|()
member_init_list|:
name|offset
argument_list|(
literal|0
argument_list|)
block|{ }
block|}
class|;
end_class
begin_function
DECL|function|mkdir
name|bool
name|QResourceFileEngine
operator|::
name|mkdir
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
name|bool
parameter_list|)
specifier|const
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|rmdir
name|bool
name|QResourceFileEngine
operator|::
name|rmdir
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
name|bool
parameter_list|)
specifier|const
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|setSize
name|bool
name|QResourceFileEngine
operator|::
name|setSize
parameter_list|(
name|qint64
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|entryList
name|QStringList
name|QResourceFileEngine
operator|::
name|entryList
parameter_list|(
name|QDir
operator|::
name|Filters
name|filters
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|filterNames
parameter_list|)
specifier|const
block|{
return|return
name|QAbstractFileEngine
operator|::
name|entryList
argument_list|(
name|filters
argument_list|,
name|filterNames
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|caseSensitive
name|bool
name|QResourceFileEngine
operator|::
name|caseSensitive
parameter_list|()
specifier|const
block|{
return|return
literal|true
return|;
block|}
end_function
begin_constructor
DECL|function|QResourceFileEngine
name|QResourceFileEngine
operator|::
name|QResourceFileEngine
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
member_init_list|:
name|QAbstractFileEngine
argument_list|(
operator|*
operator|new
name|QResourceFileEnginePrivate
argument_list|)
block|{
name|Q_D
argument_list|(
name|QResourceFileEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|resource
operator|.
name|setFileName
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|resource
operator|.
name|isCompressed
argument_list|()
operator|&&
name|d
operator|->
name|resource
operator|.
name|size
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_COMPRESS
name|d
operator|->
name|uncompressed
operator|=
name|qUncompress
argument_list|(
name|d
operator|->
name|resource
operator|.
name|data
argument_list|()
argument_list|,
name|d
operator|->
name|resource
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
operator|!
literal|"QResourceFileEngine::open: Qt built without support for compression"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QResourceFileEngine
name|QResourceFileEngine
operator|::
name|~
name|QResourceFileEngine
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|setFileName
name|void
name|QResourceFileEngine
operator|::
name|setFileName
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QResourceFileEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|resource
operator|.
name|setFileName
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|open
name|bool
name|QResourceFileEngine
operator|::
name|open
parameter_list|(
name|QIODevice
operator|::
name|OpenMode
name|flags
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QResourceFileEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|resource
operator|.
name|fileName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QResourceFileEngine::open: Missing file name"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|flags
operator|&
name|QIODevice
operator|::
name|WriteOnly
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|d
operator|->
name|resource
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|close
name|bool
name|QResourceFileEngine
operator|::
name|close
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QResourceFileEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|offset
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|uncompressed
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|flush
name|bool
name|QResourceFileEngine
operator|::
name|flush
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|read
name|qint64
name|QResourceFileEngine
operator|::
name|read
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|len
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QResourceFileEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|len
operator|>
name|size
argument_list|()
operator|-
name|d
operator|->
name|offset
condition|)
name|len
operator|=
name|size
argument_list|()
operator|-
name|d
operator|->
name|offset
expr_stmt|;
if|if
condition|(
name|len
operator|<=
literal|0
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|d
operator|->
name|resource
operator|.
name|isCompressed
argument_list|()
condition|)
name|memcpy
argument_list|(
name|data
argument_list|,
name|d
operator|->
name|uncompressed
operator|.
name|constData
argument_list|()
operator|+
name|d
operator|->
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
else|else
name|memcpy
argument_list|(
name|data
argument_list|,
name|d
operator|->
name|resource
operator|.
name|data
argument_list|()
operator|+
name|d
operator|->
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|d
operator|->
name|offset
operator|+=
name|len
expr_stmt|;
return|return
name|len
return|;
block|}
end_function
begin_function
DECL|function|write
name|qint64
name|QResourceFileEngine
operator|::
name|write
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|qint64
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|remove
name|bool
name|QResourceFileEngine
operator|::
name|remove
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|copy
name|bool
name|QResourceFileEngine
operator|::
name|copy
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|rename
name|bool
name|QResourceFileEngine
operator|::
name|rename
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|link
name|bool
name|QResourceFileEngine
operator|::
name|link
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|size
name|qint64
name|QResourceFileEngine
operator|::
name|size
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QResourceFileEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|resource
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|d
operator|->
name|resource
operator|.
name|isCompressed
argument_list|()
condition|)
return|return
name|d
operator|->
name|uncompressed
operator|.
name|size
argument_list|()
return|;
return|return
name|d
operator|->
name|resource
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|pos
name|qint64
name|QResourceFileEngine
operator|::
name|pos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QResourceFileEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|offset
return|;
block|}
end_function
begin_function
DECL|function|atEnd
name|bool
name|QResourceFileEngine
operator|::
name|atEnd
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QResourceFileEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|resource
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
name|d
operator|->
name|offset
operator|==
name|size
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|seek
name|bool
name|QResourceFileEngine
operator|::
name|seek
parameter_list|(
name|qint64
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QResourceFileEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|resource
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|offset
operator|>
name|size
argument_list|()
condition|)
return|return
literal|false
return|;
name|d
operator|->
name|offset
operator|=
name|pos
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|isSequential
name|bool
name|QResourceFileEngine
operator|::
name|isSequential
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|fileFlags
name|QAbstractFileEngine
operator|::
name|FileFlags
name|QResourceFileEngine
operator|::
name|fileFlags
parameter_list|(
name|QAbstractFileEngine
operator|::
name|FileFlags
name|type
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QResourceFileEngine
argument_list|)
expr_stmt|;
name|QAbstractFileEngine
operator|::
name|FileFlags
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|resource
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|ret
return|;
if|if
condition|(
name|type
operator|&
name|PermsMask
condition|)
name|ret
operator||=
name|QAbstractFileEngine
operator|::
name|FileFlags
argument_list|(
name|ReadOwnerPerm
operator||
name|ReadUserPerm
operator||
name|ReadGroupPerm
operator||
name|ReadOtherPerm
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|TypesMask
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|resource
operator|.
name|isDir
argument_list|()
condition|)
name|ret
operator||=
name|DirectoryType
expr_stmt|;
else|else
name|ret
operator||=
name|FileType
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|&
name|FlagsMask
condition|)
block|{
name|ret
operator||=
name|ExistsFlag
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|resource
operator|.
name|absoluteFilePath
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|":/"
argument_list|)
condition|)
name|ret
operator||=
name|RootFlag
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|setPermissions
name|bool
name|QResourceFileEngine
operator|::
name|setPermissions
parameter_list|(
name|uint
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|fileName
name|QString
name|QResourceFileEngine
operator|::
name|fileName
parameter_list|(
name|FileName
name|file
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QResourceFileEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|==
name|BaseName
condition|)
block|{
name|int
name|slash
init|=
name|d
operator|->
name|resource
operator|.
name|fileName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|slash
operator|==
operator|-
literal|1
condition|)
return|return
name|d
operator|->
name|resource
operator|.
name|fileName
argument_list|()
return|;
return|return
name|d
operator|->
name|resource
operator|.
name|fileName
argument_list|()
operator|.
name|mid
argument_list|(
name|slash
operator|+
literal|1
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|file
operator|==
name|PathName
operator|||
name|file
operator|==
name|AbsolutePathName
condition|)
block|{
specifier|const
name|QString
name|path
init|=
operator|(
name|file
operator|==
name|AbsolutePathName
operator|)
condition|?
name|d
operator|->
name|resource
operator|.
name|absoluteFilePath
argument_list|()
else|:
name|d
operator|->
name|resource
operator|.
name|fileName
argument_list|()
decl_stmt|;
specifier|const
name|int
name|slash
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|slash
operator|==
operator|-
literal|1
condition|)
return|return
name|QLatin1String
argument_list|(
literal|":"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|slash
operator|<=
literal|1
condition|)
return|return
name|QLatin1String
argument_list|(
literal|":/"
argument_list|)
return|;
return|return
name|path
operator|.
name|left
argument_list|(
name|slash
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|file
operator|==
name|CanonicalName
operator|||
name|file
operator|==
name|CanonicalPathName
condition|)
block|{
specifier|const
name|QString
name|absoluteFilePath
init|=
name|d
operator|->
name|resource
operator|.
name|absoluteFilePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|==
name|CanonicalPathName
condition|)
block|{
specifier|const
name|int
name|slash
init|=
name|absoluteFilePath
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|slash
operator|!=
operator|-
literal|1
condition|)
return|return
name|absoluteFilePath
operator|.
name|left
argument_list|(
name|slash
argument_list|)
return|;
block|}
return|return
name|absoluteFilePath
return|;
block|}
return|return
name|d
operator|->
name|resource
operator|.
name|fileName
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|isRelativePath
name|bool
name|QResourceFileEngine
operator|::
name|isRelativePath
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|ownerId
name|uint
name|QResourceFileEngine
operator|::
name|ownerId
parameter_list|(
name|FileOwner
parameter_list|)
specifier|const
block|{
specifier|static
specifier|const
name|uint
name|nobodyID
init|=
operator|(
name|uint
operator|)
operator|-
literal|2
decl_stmt|;
return|return
name|nobodyID
return|;
block|}
end_function
begin_function
DECL|function|owner
name|QString
name|QResourceFileEngine
operator|::
name|owner
parameter_list|(
name|FileOwner
parameter_list|)
specifier|const
block|{
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|fileTime
name|QDateTime
name|QResourceFileEngine
operator|::
name|fileTime
parameter_list|(
name|FileTime
parameter_list|)
specifier|const
block|{
return|return
name|QDateTime
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|beginEntryList
name|QAbstractFileEngine
operator|::
name|Iterator
modifier|*
name|QResourceFileEngine
operator|::
name|beginEntryList
parameter_list|(
name|QDir
operator|::
name|Filters
name|filters
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|filterNames
parameter_list|)
block|{
return|return
operator|new
name|QResourceFileEngineIterator
argument_list|(
name|filters
argument_list|,
name|filterNames
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|endEntryList
name|QAbstractFileEngine
operator|::
name|Iterator
modifier|*
name|QResourceFileEngine
operator|::
name|endEntryList
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|extension
name|bool
name|QResourceFileEngine
operator|::
name|extension
parameter_list|(
name|Extension
name|extension
parameter_list|,
specifier|const
name|ExtensionOption
modifier|*
name|option
parameter_list|,
name|ExtensionReturn
modifier|*
name|output
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QResourceFileEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|extension
operator|==
name|MapExtension
condition|)
block|{
specifier|const
name|MapExtensionOption
modifier|*
name|options
init|=
operator|(
specifier|const
name|MapExtensionOption
operator|*
operator|)
operator|(
name|option
operator|)
decl_stmt|;
name|MapExtensionReturn
modifier|*
name|returnValue
init|=
cast|static_cast
argument_list|<
name|MapExtensionReturn
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
decl_stmt|;
name|returnValue
operator|->
name|address
operator|=
name|d
operator|->
name|map
argument_list|(
name|options
operator|->
name|offset
argument_list|,
name|options
operator|->
name|size
argument_list|,
name|options
operator|->
name|flags
argument_list|)
expr_stmt|;
return|return
operator|(
name|returnValue
operator|->
name|address
operator|!=
literal|0
operator|)
return|;
block|}
if|if
condition|(
name|extension
operator|==
name|UnMapExtension
condition|)
block|{
specifier|const
name|UnMapExtensionOption
modifier|*
name|options
init|=
operator|(
specifier|const
name|UnMapExtensionOption
operator|*
operator|)
name|option
decl_stmt|;
return|return
name|d
operator|->
name|unmap
argument_list|(
name|options
operator|->
name|address
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|supportsExtension
name|bool
name|QResourceFileEngine
operator|::
name|supportsExtension
parameter_list|(
name|Extension
name|extension
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|extension
operator|==
name|UnMapExtension
operator|||
name|extension
operator|==
name|MapExtension
operator|)
return|;
block|}
end_function
begin_function
DECL|function|map
name|uchar
modifier|*
name|QResourceFileEnginePrivate
operator|::
name|map
parameter_list|(
name|qint64
name|offset
parameter_list|,
name|qint64
name|size
parameter_list|,
name|QFile
operator|::
name|MemoryMapFlags
name|flags
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QResourceFileEngine
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
if|if
condition|(
name|offset
argument_list|<
literal|0
operator|||
name|size
operator|<=
literal|0
operator|||
operator|!
name|resource
operator|.
name|isValid
operator|(
operator|)
operator|||
name|offset
operator|+
name|size
argument_list|>
name|resource
operator|.
name|size
argument_list|()
condition|)
block|{
name|q
operator|->
name|setError
argument_list|(
name|QFile
operator|::
name|UnspecifiedError
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|uchar
modifier|*
name|address
init|=
cast|const_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|resource
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|address
operator|+
name|offset
operator|)
return|;
block|}
end_function
begin_function
DECL|function|unmap
name|bool
name|QResourceFileEnginePrivate
operator|::
name|unmap
parameter_list|(
name|uchar
modifier|*
name|ptr
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
