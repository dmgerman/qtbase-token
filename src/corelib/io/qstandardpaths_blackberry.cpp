begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2012 Research In Motion ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qstandardpaths.h"
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STANDARDPATHS
end_ifndef
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|testModeInsert
specifier|static
name|QString
name|testModeInsert
parameter_list|()
block|{
if|if
condition|(
name|QStandardPaths
operator|::
name|isTestModeEnabled
argument_list|()
condition|)
return|return
name|QStringLiteral
argument_list|(
literal|"/.qttest"
argument_list|)
return|;
else|else
return|return
name|QStringLiteral
argument_list|(
literal|""
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|writableLocation
name|QString
name|QStandardPaths
operator|::
name|writableLocation
parameter_list|(
name|StandardLocation
name|type
parameter_list|)
block|{
name|QDir
name|sharedDir
init|=
name|QDir
operator|::
name|home
argument_list|()
decl_stmt|;
name|sharedDir
operator|.
name|cd
argument_list|(
name|QLatin1String
argument_list|(
literal|"../shared"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|sharedRoot
init|=
name|sharedDir
operator|.
name|absolutePath
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DataLocation
case|:
return|return
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|testModeInsert
argument_list|()
return|;
case|case
name|DesktopLocation
case|:
case|case
name|HomeLocation
case|:
return|return
name|QDir
operator|::
name|homePath
argument_list|()
return|;
case|case
name|RuntimeLocation
case|:
case|case
name|TempLocation
case|:
return|return
name|QDir
operator|::
name|tempPath
argument_list|()
return|;
case|case
name|CacheLocation
case|:
case|case
name|GenericCacheLocation
case|:
return|return
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|testModeInsert
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/Cache"
argument_list|)
return|;
case|case
name|ConfigLocation
case|:
return|return
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|testModeInsert
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/Settings"
argument_list|)
return|;
case|case
name|GenericDataLocation
case|:
return|return
name|sharedRoot
operator|+
name|testModeInsert
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/misc"
argument_list|)
return|;
case|case
name|DocumentsLocation
case|:
return|return
name|sharedRoot
operator|+
name|QLatin1String
argument_list|(
literal|"/documents"
argument_list|)
return|;
case|case
name|PicturesLocation
case|:
return|return
name|sharedRoot
operator|+
name|QLatin1String
argument_list|(
literal|"/photos"
argument_list|)
return|;
case|case
name|FontsLocation
case|:
comment|// this is not a writable location
return|return
name|QString
argument_list|()
return|;
case|case
name|MusicLocation
case|:
return|return
name|sharedRoot
operator|+
name|QLatin1String
argument_list|(
literal|"/music"
argument_list|)
return|;
case|case
name|MoviesLocation
case|:
return|return
name|sharedRoot
operator|+
name|QLatin1String
argument_list|(
literal|"/videos"
argument_list|)
return|;
case|case
name|DownloadLocation
case|:
return|return
name|sharedRoot
operator|+
name|QLatin1String
argument_list|(
literal|"/downloads"
argument_list|)
return|;
case|case
name|ApplicationsLocation
case|:
return|return
name|QString
argument_list|()
return|;
default|default:
break|break;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|standardLocations
name|QStringList
name|QStandardPaths
operator|::
name|standardLocations
parameter_list|(
name|StandardLocation
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|FontsLocation
condition|)
return|return
name|QStringList
argument_list|(
name|QLatin1String
argument_list|(
literal|"/base/usr/fonts"
argument_list|)
argument_list|)
return|;
return|return
name|QStringList
argument_list|(
name|writableLocation
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_STANDARDPATHS
end_comment
end_unit
