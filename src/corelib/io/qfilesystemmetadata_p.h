begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QFILESYSTEMMETADATA_P_H
end_ifndef
begin_define
DECL|macro|QFILESYSTEMMETADATA_P_H
define|#
directive|define
name|QFILESYSTEMMETADATA_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qabstractfileengine_p.h>
end_include
begin_comment
comment|// Platform-specific includes
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_include
include|#
directive|include
file|<QtCore/qt_windows.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|IO_REPARSE_TAG_SYMLINK
end_ifndef
begin_define
DECL|macro|IO_REPARSE_TAG_SYMLINK
define|#
directive|define
name|IO_REPARSE_TAG_SYMLINK
value|(0xA000000CL)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QFileSystemEngine
name|class
name|QFileSystemEngine
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QFileSystemMetaData
block|{
name|public
label|:
name|QFileSystemMetaData
argument_list|()
operator|:
name|knownFlagsMask
argument_list|(
literal|0
argument_list|)
block|{     }
expr|enum
name|MetaDataFlag
block|{
comment|// Permissions, overlaps with QFile::Permissions
name|OtherReadPermission
operator|=
literal|0x00000004
block|,
name|OtherWritePermission
operator|=
literal|0x00000002
block|,
name|OtherExecutePermission
operator|=
literal|0x00000001
block|,
name|GroupReadPermission
operator|=
literal|0x00000040
block|,
name|GroupWritePermission
operator|=
literal|0x00000020
block|,
name|GroupExecutePermission
operator|=
literal|0x00000010
block|,
name|UserReadPermission
operator|=
literal|0x00000400
block|,
name|UserWritePermission
operator|=
literal|0x00000200
block|,
name|UserExecutePermission
operator|=
literal|0x00000100
block|,
name|OwnerReadPermission
operator|=
literal|0x00004000
block|,
name|OwnerWritePermission
operator|=
literal|0x00002000
block|,
name|OwnerExecutePermission
operator|=
literal|0x00001000
block|,
name|OtherPermissions
operator|=
name|OtherReadPermission
operator||
name|OtherWritePermission
operator||
name|OtherExecutePermission
block|,
name|GroupPermissions
operator|=
name|GroupReadPermission
operator||
name|GroupWritePermission
operator||
name|GroupExecutePermission
block|,
name|UserPermissions
operator|=
name|UserReadPermission
operator||
name|UserWritePermission
operator||
name|UserExecutePermission
block|,
name|OwnerPermissions
operator|=
name|OwnerReadPermission
operator||
name|OwnerWritePermission
operator||
name|OwnerExecutePermission
block|,
name|ReadPermissions
operator|=
name|OtherReadPermission
operator||
name|GroupReadPermission
operator||
name|UserReadPermission
operator||
name|OwnerReadPermission
block|,
name|WritePermissions
operator|=
name|OtherWritePermission
operator||
name|GroupWritePermission
operator||
name|UserWritePermission
operator||
name|OwnerWritePermission
block|,
name|ExecutePermissions
operator|=
name|OtherExecutePermission
operator||
name|GroupExecutePermission
operator||
name|UserExecutePermission
operator||
name|OwnerExecutePermission
block|,
name|Permissions
operator|=
name|OtherPermissions
operator||
name|GroupPermissions
operator||
name|UserPermissions
operator||
name|OwnerPermissions
block|,
comment|// Type
name|LinkType
operator|=
literal|0x00010000
block|,
name|FileType
operator|=
literal|0x00020000
block|,
name|DirectoryType
operator|=
literal|0x00040000
block|,
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MACX
argument_list|)
name|BundleType
operator|=
literal|0x00080000
block|,
name|AliasType
operator|=
literal|0x08000000
block|,
else|#
directive|else
name|BundleType
operator|=
literal|0x0
block|,
name|AliasType
operator|=
literal|0x0
block|,
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|WinLnkType
operator|=
literal|0x08000000
block|,
comment|// Note: Uses the same position for AliasType on Mac
else|#
directive|else
name|WinLnkType
operator|=
literal|0x0
block|,
endif|#
directive|endif
name|SequentialType
operator|=
literal|0x00800000
block|,
comment|// Note: overlaps with QAbstractFileEngine::RootFlag
name|LegacyLinkType
operator|=
name|LinkType
operator||
name|AliasType
operator||
name|WinLnkType
block|,
name|Type
operator|=
name|LinkType
operator||
name|FileType
operator||
name|DirectoryType
operator||
name|BundleType
operator||
name|SequentialType
operator||
name|AliasType
block|,
comment|// Attributes
name|HiddenAttribute
operator|=
literal|0x00100000
block|,
name|SizeAttribute
operator|=
literal|0x00200000
block|,
comment|// Note: overlaps with QAbstractFileEngine::LocalDiskFlag
name|ExistsAttribute
operator|=
literal|0x00400000
block|,
name|Attributes
operator|=
name|HiddenAttribute
operator||
name|SizeAttribute
operator||
name|ExistsAttribute
block|,
comment|// Times
name|CreationTime
operator|=
literal|0x01000000
block|,
comment|// Note: overlaps with QAbstractFileEngine::Refresh
name|ModificationTime
operator|=
literal|0x02000000
block|,
name|AccessTime
operator|=
literal|0x04000000
block|,
name|Times
operator|=
name|CreationTime
operator||
name|ModificationTime
operator||
name|AccessTime
block|,
comment|// Owner IDs
name|UserId
operator|=
literal|0x10000000
block|,
name|GroupId
operator|=
literal|0x20000000
block|,
name|OwnerIds
operator|=
name|UserId
operator||
name|GroupId
block|,
name|PosixStatFlags
operator|=
name|QFileSystemMetaData
operator|::
name|OtherPermissions
operator||
name|QFileSystemMetaData
operator|::
name|GroupPermissions
operator||
name|QFileSystemMetaData
operator|::
name|OwnerPermissions
operator||
name|QFileSystemMetaData
operator|::
name|FileType
operator||
name|QFileSystemMetaData
operator|::
name|DirectoryType
operator||
name|QFileSystemMetaData
operator|::
name|SequentialType
operator||
name|QFileSystemMetaData
operator|::
name|SizeAttribute
operator||
name|QFileSystemMetaData
operator|::
name|Times
operator||
name|QFileSystemMetaData
operator|::
name|OwnerIds
block|,
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|WinStatFlags
operator|=
name|QFileSystemMetaData
operator|::
name|FileType
operator||
name|QFileSystemMetaData
operator|::
name|DirectoryType
operator||
name|QFileSystemMetaData
operator|::
name|HiddenAttribute
operator||
name|QFileSystemMetaData
operator|::
name|ExistsAttribute
operator||
name|QFileSystemMetaData
operator|::
name|SizeAttribute
operator||
name|QFileSystemMetaData
operator|::
name|Times
block|,
endif|#
directive|endif
name|AllMetaDataFlags
operator|=
literal|0xFFFFFFFF
block|}
expr_stmt|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|MetaDataFlags
argument_list|,
argument|MetaDataFlag
argument_list|)
name|bool
name|hasFlags
argument_list|(
name|MetaDataFlags
name|flags
argument_list|)
decl|const
block|{
return|return
operator|(
operator|(
name|knownFlagsMask
operator|&
name|flags
operator|)
operator|==
name|flags
operator|)
return|;
block|}
name|MetaDataFlags
name|missingFlags
parameter_list|(
name|MetaDataFlags
name|flags
parameter_list|)
block|{
return|return
name|flags
operator|&
operator|~
name|knownFlagsMask
return|;
block|}
name|void
name|clear
parameter_list|()
block|{
name|knownFlagsMask
operator|=
literal|0
expr_stmt|;
block|}
name|void
name|clearFlags
parameter_list|(
name|MetaDataFlags
name|flags
init|=
name|AllMetaDataFlags
parameter_list|)
block|{
name|knownFlagsMask
operator|&=
operator|~
name|flags
expr_stmt|;
block|}
name|bool
name|exists
argument_list|()
specifier|const
block|{
return|return
operator|(
name|entryFlags
operator|&
name|ExistsAttribute
operator|)
return|;
block|}
name|bool
name|isLink
argument_list|()
specifier|const
block|{
return|return
operator|(
name|entryFlags
operator|&
name|LinkType
operator|)
return|;
block|}
name|bool
name|isFile
argument_list|()
specifier|const
block|{
return|return
operator|(
name|entryFlags
operator|&
name|FileType
operator|)
return|;
block|}
name|bool
name|isDirectory
argument_list|()
specifier|const
block|{
return|return
operator|(
name|entryFlags
operator|&
name|DirectoryType
operator|)
return|;
block|}
name|bool
name|isBundle
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isAlias
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isLegacyLink
argument_list|()
specifier|const
block|{
return|return
operator|(
name|entryFlags
operator|&
name|LegacyLinkType
operator|)
return|;
block|}
name|bool
name|isSequential
argument_list|()
specifier|const
block|{
return|return
operator|(
name|entryFlags
operator|&
name|SequentialType
operator|)
return|;
block|}
name|bool
name|isHidden
argument_list|()
specifier|const
block|{
return|return
operator|(
name|entryFlags
operator|&
name|HiddenAttribute
operator|)
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|bool
name|isLnkFile
argument_list|()
specifier|const
block|{
return|return
operator|(
name|entryFlags
operator|&
name|WinLnkType
operator|)
return|;
block|}
else|#
directive|else
name|bool
name|isLnkFile
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
endif|#
directive|endif
name|qint64
name|size
argument_list|()
specifier|const
block|{
return|return
name|size_
return|;
block|}
name|QFile
operator|::
name|Permissions
name|permissions
argument_list|()
specifier|const
block|{
return|return
name|QFile
operator|::
name|Permissions
argument_list|(
name|Permissions
operator|&
name|entryFlags
argument_list|)
return|;
block|}
name|QDateTime
name|creationTime
argument_list|()
specifier|const
expr_stmt|;
name|QDateTime
name|modificationTime
argument_list|()
specifier|const
expr_stmt|;
name|QDateTime
name|accessTime
argument_list|()
specifier|const
expr_stmt|;
name|QDateTime
name|fileTime
argument_list|(
name|QAbstractFileEngine
operator|::
name|FileTime
name|time
argument_list|)
decl|const
decl_stmt|;
name|uint
name|userId
argument_list|()
specifier|const
expr_stmt|;
name|uint
name|groupId
argument_list|()
specifier|const
expr_stmt|;
name|uint
name|ownerId
argument_list|(
name|QAbstractFileEngine
operator|::
name|FileOwner
name|owner
argument_list|)
decl|const
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_UNIX
name|void
name|fillFromStatBuf
parameter_list|(
specifier|const
name|QT_STATBUF
modifier|&
name|statBuffer
parameter_list|)
function_decl|;
name|void
name|fillFromDirEnt
parameter_list|(
specifier|const
name|QT_DIRENT
modifier|&
name|statBuffer
parameter_list|)
function_decl|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
specifier|inline
name|void
name|fillFromFileAttribute
parameter_list|(
name|DWORD
name|fileAttribute
parameter_list|,
name|bool
name|isDriveRoot
init|=
name|false
parameter_list|)
function_decl|;
specifier|inline
name|void
name|fillFromFindData
parameter_list|(
name|WIN32_FIND_DATA
modifier|&
name|findData
parameter_list|,
name|bool
name|setLinkType
init|=
name|false
parameter_list|,
name|bool
name|isDriveRoot
init|=
name|false
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|Q_OS_WINRT
specifier|inline
name|void
name|fillFromFindInfo
parameter_list|(
name|BY_HANDLE_FILE_INFORMATION
modifier|&
name|fileInfo
parameter_list|)
function_decl|;
endif|#
directive|endif
endif|#
directive|endif
name|private
label|:
name|friend
name|class
name|QFileSystemEngine
decl_stmt|;
name|MetaDataFlags
name|knownFlagsMask
decl_stmt|;
name|MetaDataFlags
name|entryFlags
decl_stmt|;
name|qint64
name|size_
decl_stmt|;
comment|// Platform-specific data goes here:
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|DWORD
name|fileAttribute_
decl_stmt|;
name|FILETIME
name|creationTime_
decl_stmt|;
name|FILETIME
name|lastAccessTime_
decl_stmt|;
name|FILETIME
name|lastWriteTime_
decl_stmt|;
else|#
directive|else
name|time_t
name|creationTime_
decl_stmt|;
name|time_t
name|modificationTime_
decl_stmt|;
name|time_t
name|accessTime_
decl_stmt|;
name|uint
name|userId_
decl_stmt|;
name|uint
name|groupId_
decl_stmt|;
endif|#
directive|endif
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QFileSystemMetaData::MetaDataFlags
argument_list|)
end_macro
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MACX
argument_list|)
end_if
begin_expr_stmt
DECL|function|isBundle
specifier|inline
name|bool
name|QFileSystemMetaData
operator|::
name|isBundle
argument_list|()
specifier|const
block|{
return|return
operator|(
name|entryFlags
operator|&
name|BundleType
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isAlias
specifier|inline
name|bool
name|QFileSystemMetaData
operator|::
name|isAlias
argument_list|()
specifier|const
block|{
return|return
operator|(
name|entryFlags
operator|&
name|AliasType
operator|)
return|;
block|}
end_expr_stmt
begin_else
else|#
directive|else
end_else
begin_expr_stmt
specifier|inline
name|bool
name|QFileSystemMetaData
operator|::
name|isBundle
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QFileSystemMetaData
operator|::
name|isAlias
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_if
begin_expr_stmt
DECL|function|fileTime
specifier|inline
name|QDateTime
name|QFileSystemMetaData
operator|::
name|fileTime
argument_list|(
argument|QAbstractFileEngine::FileTime time
argument_list|)
specifier|const
block|{
switch|switch
condition|(
name|time
condition|)
block|{
case|case
name|QAbstractFileEngine
operator|::
name|ModificationTime
case|:
return|return
name|modificationTime
argument_list|()
return|;
case|case
name|QAbstractFileEngine
operator|::
name|AccessTime
case|:
return|return
name|accessTime
argument_list|()
return|;
case|case
name|QAbstractFileEngine
operator|::
name|CreationTime
case|:
return|return
name|creationTime
argument_list|()
return|;
block|}
end_expr_stmt
begin_return
return|return
name|QDateTime
argument_list|()
return|;
end_return
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
end_if
begin_expr_stmt
unit|inline
DECL|function|creationTime
name|QDateTime
name|QFileSystemMetaData
operator|::
name|creationTime
argument_list|()
specifier|const
block|{
return|return
name|QDateTime
operator|::
name|fromTime_t
argument_list|(
name|creationTime_
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|modificationTime
specifier|inline
name|QDateTime
name|QFileSystemMetaData
operator|::
name|modificationTime
argument_list|()
specifier|const
block|{
return|return
name|QDateTime
operator|::
name|fromTime_t
argument_list|(
name|modificationTime_
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|accessTime
specifier|inline
name|QDateTime
name|QFileSystemMetaData
operator|::
name|accessTime
argument_list|()
specifier|const
block|{
return|return
name|QDateTime
operator|::
name|fromTime_t
argument_list|(
name|accessTime_
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|userId
specifier|inline
name|uint
name|QFileSystemMetaData
operator|::
name|userId
argument_list|()
specifier|const
block|{
return|return
name|userId_
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|groupId
specifier|inline
name|uint
name|QFileSystemMetaData
operator|::
name|groupId
argument_list|()
specifier|const
block|{
return|return
name|groupId_
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|ownerId
specifier|inline
name|uint
name|QFileSystemMetaData
operator|::
name|ownerId
argument_list|(
argument|QAbstractFileEngine::FileOwner owner
argument_list|)
specifier|const
block|{
if|if
condition|(
name|owner
operator|==
name|QAbstractFileEngine
operator|::
name|OwnerUser
condition|)
return|return
name|userId
argument_list|()
return|;
else|else
return|return
name|groupId
argument_list|()
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_if
begin_expr_stmt
DECL|function|userId
specifier|inline
name|uint
name|QFileSystemMetaData
operator|::
name|userId
argument_list|()
specifier|const
block|{
return|return
operator|(
name|uint
operator|)
operator|-
literal|2
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|groupId
specifier|inline
name|uint
name|QFileSystemMetaData
operator|::
name|groupId
argument_list|()
specifier|const
block|{
return|return
operator|(
name|uint
operator|)
operator|-
literal|2
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|ownerId
specifier|inline
name|uint
name|QFileSystemMetaData
operator|::
name|ownerId
argument_list|(
argument|QAbstractFileEngine::FileOwner owner
argument_list|)
specifier|const
block|{
if|if
condition|(
name|owner
operator|==
name|QAbstractFileEngine
operator|::
name|OwnerUser
condition|)
return|return
name|userId
argument_list|()
return|;
else|else
return|return
name|groupId
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fillFromFileAttribute
specifier|inline
name|void
name|QFileSystemMetaData
operator|::
name|fillFromFileAttribute
argument_list|(
argument|DWORD fileAttribute
argument_list|,
argument|bool isDriveRoot
argument_list|)
block|{
name|fileAttribute_
operator|=
name|fileAttribute
block|;
comment|// Ignore the hidden attribute for drives.
if|if
condition|(
operator|!
name|isDriveRoot
operator|&&
operator|(
name|fileAttribute_
operator|&
name|FILE_ATTRIBUTE_HIDDEN
operator|)
condition|)
name|entryFlags
operator||=
name|HiddenAttribute
expr_stmt|;
name|entryFlags
operator||=
operator|(
operator|(
name|fileAttribute
operator|&
name|FILE_ATTRIBUTE_DIRECTORY
operator|)
condition|?
name|DirectoryType
else|:
name|FileType
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|entryFlags
operator||=
name|ExistsAttribute
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|knownFlagsMask
operator||=
name|FileType
operator||
name|DirectoryType
operator||
name|HiddenAttribute
operator||
name|ExistsAttribute
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  inline
DECL|function|fillFromFindData
name|void
name|QFileSystemMetaData
operator|::
name|fillFromFindData
argument_list|(
argument|WIN32_FIND_DATA&findData
argument_list|,
argument|bool setLinkType
argument_list|,
argument|bool isDriveRoot
argument_list|)
block|{
name|fillFromFileAttribute
argument_list|(
name|findData
operator|.
name|dwFileAttributes
argument_list|,
name|isDriveRoot
argument_list|)
block|;
name|creationTime_
operator|=
name|findData
operator|.
name|ftCreationTime
block|;
name|lastAccessTime_
operator|=
name|findData
operator|.
name|ftLastAccessTime
block|;
name|lastWriteTime_
operator|=
name|findData
operator|.
name|ftLastWriteTime
block|;
if|if
condition|(
name|fileAttribute_
operator|&
name|FILE_ATTRIBUTE_DIRECTORY
condition|)
block|{
name|size_
operator|=
literal|0
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|size_
operator|=
name|findData
operator|.
name|nFileSizeHigh
expr_stmt|;
name|size_
operator|<<=
literal|32
expr_stmt|;
name|size_
operator|+=
name|findData
operator|.
name|nFileSizeLow
expr_stmt|;
block|}
end_else
begin_expr_stmt
name|knownFlagsMask
operator||=
name|Times
operator||
name|SizeAttribute
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|setLinkType
condition|)
block|{
name|knownFlagsMask
operator||=
name|LinkType
expr_stmt|;
name|entryFlags
operator|&=
operator|~
name|LinkType
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|if
condition|(
operator|(
name|fileAttribute_
operator|&
name|FILE_ATTRIBUTE_REPARSE_POINT
operator|)
operator|&&
operator|(
name|findData
operator|.
name|dwReserved0
operator|==
name|IO_REPARSE_TAG_SYMLINK
operator|)
condition|)
block|{
name|entryFlags
operator||=
name|LinkType
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_if
begin_ifndef
unit|}
ifndef|#
directive|ifndef
name|Q_OS_WINRT
end_ifndef
begin_expr_stmt
unit|inline
DECL|function|fillFromFindInfo
name|void
name|QFileSystemMetaData
operator|::
name|fillFromFindInfo
argument_list|(
argument|BY_HANDLE_FILE_INFORMATION&fileInfo
argument_list|)
block|{
name|fillFromFileAttribute
argument_list|(
name|fileInfo
operator|.
name|dwFileAttributes
argument_list|)
block|;
name|creationTime_
operator|=
name|fileInfo
operator|.
name|ftCreationTime
block|;
name|lastAccessTime_
operator|=
name|fileInfo
operator|.
name|ftLastAccessTime
block|;
name|lastWriteTime_
operator|=
name|fileInfo
operator|.
name|ftLastWriteTime
block|;
if|if
condition|(
name|fileAttribute_
operator|&
name|FILE_ATTRIBUTE_DIRECTORY
condition|)
block|{
name|size_
operator|=
literal|0
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|size_
operator|=
name|fileInfo
operator|.
name|nFileSizeHigh
expr_stmt|;
name|size_
operator|<<=
literal|32
expr_stmt|;
name|size_
operator|+=
name|fileInfo
operator|.
name|nFileSizeLow
expr_stmt|;
block|}
end_else
begin_expr_stmt
name|knownFlagsMask
operator||=
name|Times
operator||
name|SizeAttribute
expr_stmt|;
end_expr_stmt
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_comment
comment|// !Q_OS_WINRT
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_WIN
end_comment
begin_endif
unit|QT_END_NAMESPACE
endif|#
directive|endif
end_endif
begin_comment
comment|// include guard
end_comment
end_unit
