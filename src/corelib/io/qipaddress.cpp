begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Intel Corporation ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qipaddress_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qlocale_tools_p.h"
end_include
begin_include
include|#
directive|include
file|"qvarlengtharray.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_namespace
DECL|namespace|QIPAddressUtils
namespace|namespace
name|QIPAddressUtils
block|{
DECL|function|number
specifier|static
name|QString
name|number
parameter_list|(
name|quint8
name|val
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
block|{
name|QChar
name|zero
argument_list|(
literal|0x30
argument_list|)
decl_stmt|;
return|return
name|val
condition|?
name|qulltoa
argument_list|(
name|val
argument_list|,
name|base
argument_list|,
name|zero
argument_list|)
else|:
name|zero
return|;
block|}
DECL|typedef|Buffer
typedef|typedef
name|QVarLengthArray
argument_list|<
name|char
argument_list|,
literal|64
argument_list|>
name|Buffer
typedef|;
DECL|function|checkedToAscii
specifier|static
name|bool
name|checkedToAscii
parameter_list|(
name|Buffer
modifier|&
name|buffer
parameter_list|,
specifier|const
name|QChar
modifier|*
name|begin
parameter_list|,
specifier|const
name|QChar
modifier|*
name|end
parameter_list|)
block|{
specifier|const
name|ushort
modifier|*
specifier|const
name|ubegin
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|ushort
operator|*
argument_list|>
argument_list|(
name|begin
argument_list|)
decl_stmt|;
specifier|const
name|ushort
modifier|*
specifier|const
name|uend
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|ushort
operator|*
argument_list|>
argument_list|(
name|end
argument_list|)
decl_stmt|;
specifier|const
name|ushort
modifier|*
name|src
init|=
name|ubegin
decl_stmt|;
name|buffer
operator|.
name|resize
argument_list|(
name|uend
operator|-
name|ubegin
operator|+
literal|1
argument_list|)
expr_stmt|;
name|char
modifier|*
name|dst
init|=
name|buffer
operator|.
name|data
argument_list|()
decl_stmt|;
while|while
condition|(
name|src
operator|!=
name|uend
condition|)
block|{
if|if
condition|(
operator|*
name|src
operator|>=
literal|0x7f
condition|)
return|return
literal|false
return|;
operator|*
name|dst
operator|++
operator|=
operator|*
name|src
operator|++
expr_stmt|;
block|}
operator|*
name|dst
operator|=
literal|'\0'
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|parseIp4
name|bool
name|parseIp4
parameter_list|(
name|IPv4Address
modifier|&
name|address
parameter_list|,
specifier|const
name|QChar
modifier|*
name|begin
parameter_list|,
specifier|const
name|QChar
modifier|*
name|end
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|begin
operator|!=
name|end
argument_list|)
expr_stmt|;
name|Buffer
name|buffer
decl_stmt|;
if|if
condition|(
operator|!
name|checkedToAscii
argument_list|(
name|buffer
argument_list|,
name|begin
argument_list|,
name|end
argument_list|)
condition|)
return|return
literal|false
return|;
name|int
name|dotCount
init|=
literal|0
decl_stmt|;
name|address
operator|=
literal|0
expr_stmt|;
specifier|const
name|char
modifier|*
name|ptr
init|=
name|buffer
operator|.
name|data
argument_list|()
decl_stmt|;
while|while
condition|(
name|dotCount
operator|<
literal|4
condition|)
block|{
specifier|const
name|char
modifier|*
name|endptr
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|quint64
name|ll
init|=
name|qstrtoull
argument_list|(
name|ptr
argument_list|,
operator|&
name|endptr
argument_list|,
literal|0
argument_list|,
operator|&
name|ok
argument_list|)
decl_stmt|;
name|quint32
name|x
init|=
name|ll
decl_stmt|;
if|if
condition|(
operator|!
name|ok
operator|||
name|endptr
operator|==
name|ptr
operator|||
name|ll
operator|!=
name|x
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|*
name|endptr
operator|==
literal|'.'
operator|||
name|dotCount
operator|==
literal|3
condition|)
block|{
if|if
condition|(
name|x
operator|&
operator|~
literal|0xff
condition|)
return|return
literal|false
return|;
name|address
operator|<<=
literal|8
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dotCount
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|x
operator|&
operator|~
literal|0xffff
condition|)
return|return
literal|false
return|;
name|address
operator|<<=
literal|16
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dotCount
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|x
operator|&
operator|~
literal|0xffffff
condition|)
return|return
literal|false
return|;
name|address
operator|<<=
literal|24
expr_stmt|;
block|}
name|address
operator||=
name|x
expr_stmt|;
if|if
condition|(
name|dotCount
operator|==
literal|3
operator|&&
operator|*
name|endptr
operator|!=
literal|'\0'
condition|)
return|return
literal|false
return|;
elseif|else
if|if
condition|(
name|dotCount
operator|==
literal|3
operator|||
operator|*
name|endptr
operator|==
literal|'\0'
condition|)
return|return
literal|true
return|;
operator|++
name|dotCount
expr_stmt|;
name|ptr
operator|=
name|endptr
operator|+
literal|1
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|toString
name|void
name|toString
parameter_list|(
name|QString
modifier|&
name|appendTo
parameter_list|,
name|IPv4Address
name|address
parameter_list|)
block|{
comment|// reconstructing is easy
comment|// use the fast operator% that pre-calculates the size
name|appendTo
operator|+=
name|number
argument_list|(
name|address
operator|>>
literal|24
argument_list|)
operator|%
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|%
name|number
argument_list|(
name|address
operator|>>
literal|16
argument_list|)
operator|%
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|%
name|number
argument_list|(
name|address
operator|>>
literal|8
argument_list|)
operator|%
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|%
name|number
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
block|}
end_namespace
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
