begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QFILESYSTEMWATCHER_FSEVENTS_P_H
end_ifndef
begin_define
DECL|macro|QFILESYSTEMWATCHER_FSEVENTS_P_H
define|#
directive|define
name|QFILESYSTEMWATCHER_FSEVENTS_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of the QLibrary class.  This header file may change from
end_comment
begin_comment
comment|// version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"qfilesystemwatcher_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qmutex.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qhash.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qthread.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvector.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qsocketnotifier.h>
end_include
begin_include
include|#
directive|include
file|<dispatch/dispatch.h>
end_include
begin_include
include|#
directive|include
file|<CoreServices/CoreServices.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
end_ifndef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|QFseventsFileSystemWatcherEngine
range|:
name|public
name|QFileSystemWatcherEngine
block|{
name|Q_OBJECT
name|public
operator|:
operator|~
name|QFseventsFileSystemWatcherEngine
argument_list|()
block|;
specifier|static
name|QFseventsFileSystemWatcherEngine
operator|*
name|create
argument_list|(
name|QObject
operator|*
name|parent
argument_list|)
block|;
name|QStringList
name|addPaths
argument_list|(
specifier|const
name|QStringList
operator|&
name|paths
argument_list|,
name|QStringList
operator|*
name|files
argument_list|,
name|QStringList
operator|*
name|directories
argument_list|)
block|;
name|QStringList
name|removePaths
argument_list|(
specifier|const
name|QStringList
operator|&
name|paths
argument_list|,
name|QStringList
operator|*
name|files
argument_list|,
name|QStringList
operator|*
name|directories
argument_list|)
block|;
name|void
name|processEvent
argument_list|(
argument|ConstFSEventStreamRef streamRef
argument_list|,
argument|size_t numEvents
argument_list|,
argument|char **eventPaths
argument_list|,
argument|const FSEventStreamEventFlags eventFlags[]
argument_list|,
argument|const FSEventStreamEventId eventIds[]
argument_list|)
block|;
name|Q_SIGNALS
operator|:
name|void
name|emitFileChanged
argument_list|(
argument|const QString&path
argument_list|,
argument|bool removed
argument_list|)
block|;
name|void
name|emitDirectoryChanged
argument_list|(
argument|const QString&path
argument_list|,
argument|bool removed
argument_list|)
block|;
name|void
name|scheduleStreamRestart
argument_list|()
block|;
name|private
name|slots
operator|:
name|void
name|doEmitFileChanged
argument_list|(
argument|const QString&path
argument_list|,
argument|bool removed
argument_list|)
block|;
name|void
name|doEmitDirectoryChanged
argument_list|(
argument|const QString&path
argument_list|,
argument|bool removed
argument_list|)
block|;
name|void
name|restartStream
argument_list|()
block|;
name|private
operator|:
expr|struct
name|Info
block|{
name|QString
name|origPath
block|;
name|timespec
name|ctime
block|;
name|mode_t
name|mode
block|;
name|QString
name|watchedPath
block|;
name|Info
argument_list|()
operator|:
name|mode
argument_list|(
literal|0
argument_list|)
block|{
name|ctime
operator|.
name|tv_sec
operator|=
literal|0
block|;
name|ctime
operator|.
name|tv_nsec
operator|=
literal|0
block|;         }
name|Info
argument_list|(
argument|const QString&origPath
argument_list|,
argument|const timespec&ctime
argument_list|,
argument|mode_t mode
argument_list|,
argument|const QString&watchedPath
argument_list|)
operator|:
name|origPath
argument_list|(
name|origPath
argument_list|)
block|,
name|ctime
argument_list|(
name|ctime
argument_list|)
block|,
name|mode
argument_list|(
name|mode
argument_list|)
block|,
name|watchedPath
argument_list|(
argument|watchedPath
argument_list|)
block|{}
block|}
block|;
typedef|typedef
name|QHash
operator|<
name|QString
operator|,
name|Info
operator|>
name|InfoByName
expr_stmt|;
end_decl_stmt
begin_typedef
typedef|typedef
name|QHash
operator|<
name|QString
operator|,
name|InfoByName
operator|>
name|FilesByPath
expr_stmt|;
end_typedef
begin_struct
struct|struct
name|DirInfo
block|{
name|Info
name|dirInfo
decl_stmt|;
name|InfoByName
name|entries
decl_stmt|;
block|}
struct|;
end_struct
begin_typedef
typedef|typedef
name|QHash
operator|<
name|QString
operator|,
name|DirInfo
operator|>
name|DirsByName
expr_stmt|;
end_typedef
begin_typedef
typedef|typedef
name|QHash
operator|<
name|QString
operator|,
name|qint64
operator|>
name|PathRefCounts
expr_stmt|;
end_typedef
begin_expr_stmt
name|QFseventsFileSystemWatcherEngine
argument_list|(
name|QObject
operator|*
name|parent
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function_decl
name|bool
name|startStream
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|stopStream
parameter_list|(
name|bool
name|isStopped
init|=
name|false
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|InfoByName
name|scanForDirEntries
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|derefPath
parameter_list|(
specifier|const
name|QString
modifier|&
name|watchedPath
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|bool
name|checkDir
argument_list|(
name|DirsByName
operator|::
name|iterator
operator|&
name|it
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function_decl
name|bool
name|rescanDirs
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|rescanFiles
parameter_list|(
name|InfoByName
modifier|&
name|filesInPath
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|rescanFiles
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|QMutex
name|lock
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|dispatch_queue_t
name|queue
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|FSEventStreamRef
name|stream
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|FilesByPath
name|watchedFiles
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|DirsByName
name|watchedDirectories
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|PathRefCounts
name|watchedPaths
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|FSEventStreamEventId
name|lastReceivedEvent
decl_stmt|;
end_decl_stmt
begin_macro
unit|};
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_FILESYSTEMWATCHER
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QFILESYSTEMWATCHER_FSEVENTS_P_H
end_comment
end_unit
