begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qfilesystemengine_p.h"
end_include
begin_define
DECL|macro|_POSIX_
define|#
directive|define
name|_POSIX_
end_define
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qabstractfileengine.h"
end_include
begin_include
include|#
directive|include
file|"private/qfsfileengine_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qsystemlibrary_p.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|"qfile.h"
end_include
begin_include
include|#
directive|include
file|"qdir.h"
end_include
begin_include
include|#
directive|include
file|"private/qmutexpool_p.h"
end_include
begin_include
include|#
directive|include
file|"qvarlengtharray.h"
end_include
begin_include
include|#
directive|include
file|"qdatetime.h"
end_include
begin_include
include|#
directive|include
file|"qt_windows.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<direct.h>
end_include
begin_include
include|#
directive|include
file|<winioctl.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<types.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<objbase.h>
end_include
begin_include
include|#
directive|include
file|<shlobj.h>
end_include
begin_include
include|#
directive|include
file|<initguid.h>
end_include
begin_include
include|#
directive|include
file|<accctrl.h>
end_include
begin_include
include|#
directive|include
file|<ctype.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_define
DECL|macro|SECURITY_WIN32
define|#
directive|define
name|SECURITY_WIN32
end_define
begin_include
include|#
directive|include
file|<security.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|SPI_GETPLATFORMTYPE
end_ifndef
begin_define
DECL|macro|SPI_GETPLATFORMTYPE
define|#
directive|define
name|SPI_GETPLATFORMTYPE
value|257
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|PATH_MAX
end_ifndef
begin_define
DECL|macro|PATH_MAX
define|#
directive|define
name|PATH_MAX
value|FILENAME_MAX
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|_INTPTR_T_DEFINED
end_ifndef
begin_ifdef
ifdef|#
directive|ifdef
name|_WIN64
end_ifdef
begin_typedef
DECL|typedef|intptr_t
typedef|typedef
name|__int64
name|intptr_t
typedef|;
end_typedef
begin_else
else|#
directive|else
end_else
begin_ifdef
ifdef|#
directive|ifdef
name|_W64
end_ifdef
begin_typedef
DECL|typedef|intptr_t
typedef|typedef
name|_W64
name|int
name|intptr_t
typedef|;
end_typedef
begin_else
else|#
directive|else
end_else
begin_typedef
DECL|typedef|intptr_t
typedef|typedef
name|INT_PTR
name|intptr_t
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|_INTPTR_T_DEFINED
define|#
directive|define
name|_INTPTR_T_DEFINED
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|INVALID_FILE_ATTRIBUTES
end_ifndef
begin_define
DECL|macro|INVALID_FILE_ATTRIBUTES
define|#
directive|define
name|INVALID_FILE_ATTRIBUTES
value|(DWORD (-1))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|REPARSE_DATA_BUFFER_HEADER_SIZE
argument_list|)
end_if
begin_typedef
DECL|struct|_REPARSE_DATA_BUFFER
typedef|typedef
struct|struct
name|_REPARSE_DATA_BUFFER
block|{
DECL|member|ReparseTag
name|ULONG
name|ReparseTag
decl_stmt|;
DECL|member|ReparseDataLength
name|USHORT
name|ReparseDataLength
decl_stmt|;
DECL|member|Reserved
name|USHORT
name|Reserved
decl_stmt|;
union|union
block|{
struct|struct
block|{
DECL|member|SubstituteNameOffset
name|USHORT
name|SubstituteNameOffset
decl_stmt|;
DECL|member|SubstituteNameLength
name|USHORT
name|SubstituteNameLength
decl_stmt|;
DECL|member|PrintNameOffset
name|USHORT
name|PrintNameOffset
decl_stmt|;
DECL|member|PrintNameLength
name|USHORT
name|PrintNameLength
decl_stmt|;
DECL|member|Flags
name|ULONG
name|Flags
decl_stmt|;
DECL|member|PathBuffer
name|WCHAR
name|PathBuffer
index|[
literal|1
index|]
decl_stmt|;
DECL|member|SymbolicLinkReparseBuffer
block|}
name|SymbolicLinkReparseBuffer
struct|;
struct|struct
block|{
DECL|member|SubstituteNameOffset
name|USHORT
name|SubstituteNameOffset
decl_stmt|;
DECL|member|SubstituteNameLength
name|USHORT
name|SubstituteNameLength
decl_stmt|;
DECL|member|PrintNameOffset
name|USHORT
name|PrintNameOffset
decl_stmt|;
DECL|member|PrintNameLength
name|USHORT
name|PrintNameLength
decl_stmt|;
DECL|member|PathBuffer
name|WCHAR
name|PathBuffer
index|[
literal|1
index|]
decl_stmt|;
DECL|member|MountPointReparseBuffer
block|}
name|MountPointReparseBuffer
struct|;
struct|struct
block|{
DECL|member|DataBuffer
name|UCHAR
name|DataBuffer
index|[
literal|1
index|]
decl_stmt|;
DECL|member|GenericReparseBuffer
block|}
name|GenericReparseBuffer
struct|;
block|}
union|;
block|}
DECL|typedef|REPARSE_DATA_BUFFER
DECL|typedef|PREPARSE_DATA_BUFFER
name|REPARSE_DATA_BUFFER
operator|,
typedef|*
name|PREPARSE_DATA_BUFFER
typedef|;
end_typedef
begin_define
DECL|macro|REPARSE_DATA_BUFFER_HEADER_SIZE
define|#
directive|define
name|REPARSE_DATA_BUFFER_HEADER_SIZE
value|FIELD_OFFSET(REPARSE_DATA_BUFFER, GenericReparseBuffer)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !defined(REPARSE_DATA_BUFFER_HEADER_SIZE)
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|MAXIMUM_REPARSE_DATA_BUFFER_SIZE
end_ifndef
begin_define
DECL|macro|MAXIMUM_REPARSE_DATA_BUFFER_SIZE
define|#
directive|define
name|MAXIMUM_REPARSE_DATA_BUFFER_SIZE
value|16384
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|IO_REPARSE_TAG_SYMLINK
end_ifndef
begin_define
DECL|macro|IO_REPARSE_TAG_SYMLINK
define|#
directive|define
name|IO_REPARSE_TAG_SYMLINK
value|(0xA000000CL)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|FSCTL_GET_REPARSE_POINT
end_ifndef
begin_define
DECL|macro|FSCTL_GET_REPARSE_POINT
define|#
directive|define
name|FSCTL_GET_REPARSE_POINT
value|CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 42, METHOD_BUFFERED, FILE_ANY_ACCESS)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !defined(Q_OS_WINCE)
end_comment
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|qt_ntfs_permission_lookup
name|Q_CORE_EXPORT
name|int
name|qt_ntfs_permission_lookup
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_decl_stmt
DECL|variable|qfsPrivateCurrentDir
specifier|static
name|QString
name|qfsPrivateCurrentDir
init|=
name|QLatin1String
argument_list|(
literal|""
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|// As none of the functions we try to resolve do exist on Windows CE
end_comment
begin_comment
comment|// we use QT_NO_LIBRARY to shorten everything up a little bit.
end_comment
begin_define
DECL|macro|QT_NO_LIBRARY
define|#
directive|define
name|QT_NO_LIBRARY
value|1
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
end_if
begin_macro
name|QT_BEGIN_INCLUDE_NAMESPACE
end_macro
begin_typedef
DECL|typedef|PtrGetNamedSecurityInfoW
typedef|typedef
name|DWORD
function_decl|(
name|WINAPI
modifier|*
name|PtrGetNamedSecurityInfoW
function_decl|)
parameter_list|(
name|LPWSTR
parameter_list|,
name|SE_OBJECT_TYPE
parameter_list|,
name|SECURITY_INFORMATION
parameter_list|,
name|PSID
modifier|*
parameter_list|,
name|PSID
modifier|*
parameter_list|,
name|PACL
modifier|*
parameter_list|,
name|PACL
modifier|*
parameter_list|,
name|PSECURITY_DESCRIPTOR
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptrGetNamedSecurityInfoW
specifier|static
name|PtrGetNamedSecurityInfoW
name|ptrGetNamedSecurityInfoW
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|PtrLookupAccountSidW
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|PtrLookupAccountSidW
function_decl|)
parameter_list|(
name|LPCWSTR
parameter_list|,
name|PSID
parameter_list|,
name|LPWSTR
parameter_list|,
name|LPDWORD
parameter_list|,
name|LPWSTR
parameter_list|,
name|LPDWORD
parameter_list|,
name|PSID_NAME_USE
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptrLookupAccountSidW
specifier|static
name|PtrLookupAccountSidW
name|ptrLookupAccountSidW
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|PtrBuildTrusteeWithSidW
typedef|typedef
name|VOID
function_decl|(
name|WINAPI
modifier|*
name|PtrBuildTrusteeWithSidW
function_decl|)
parameter_list|(
name|PTRUSTEE_W
parameter_list|,
name|PSID
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptrBuildTrusteeWithSidW
specifier|static
name|PtrBuildTrusteeWithSidW
name|ptrBuildTrusteeWithSidW
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|PtrGetEffectiveRightsFromAclW
typedef|typedef
name|DWORD
function_decl|(
name|WINAPI
modifier|*
name|PtrGetEffectiveRightsFromAclW
function_decl|)
parameter_list|(
name|PACL
parameter_list|,
name|PTRUSTEE_W
parameter_list|,
name|OUT
name|PACCESS_MASK
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptrGetEffectiveRightsFromAclW
specifier|static
name|PtrGetEffectiveRightsFromAclW
name|ptrGetEffectiveRightsFromAclW
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|currentUserTrusteeW
specifier|static
name|TRUSTEE_W
name|currentUserTrusteeW
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|worldTrusteeW
specifier|static
name|TRUSTEE_W
name|worldTrusteeW
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|PtrGetUserProfileDirectoryW
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|PtrGetUserProfileDirectoryW
function_decl|)
parameter_list|(
name|HANDLE
parameter_list|,
name|LPWSTR
parameter_list|,
name|LPDWORD
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptrGetUserProfileDirectoryW
specifier|static
name|PtrGetUserProfileDirectoryW
name|ptrGetUserProfileDirectoryW
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|PtrGetVolumePathNamesForVolumeNameW
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|PtrGetVolumePathNamesForVolumeNameW
function_decl|)
parameter_list|(
name|LPCWSTR
parameter_list|,
name|LPWSTR
parameter_list|,
name|DWORD
parameter_list|,
name|PDWORD
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptrGetVolumePathNamesForVolumeNameW
specifier|static
name|PtrGetVolumePathNamesForVolumeNameW
name|ptrGetVolumePathNamesForVolumeNameW
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
name|QT_END_INCLUDE_NAMESPACE
DECL|function|resolveLibs
specifier|static
name|void
name|resolveLibs
parameter_list|()
block|{
specifier|static
name|bool
name|triedResolve
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|triedResolve
condition|)
block|{
comment|// need to resolve the security info functions
comment|// protect initialization
ifndef|#
directive|ifndef
name|QT_NO_THREAD
name|QMutexLocker
name|locker
argument_list|(
name|QMutexPool
operator|::
name|globalInstanceGet
argument_list|(
operator|&
name|triedResolve
argument_list|)
argument_list|)
decl_stmt|;
comment|// check triedResolve again, since another thread may have already
comment|// done the initialization
if|if
condition|(
name|triedResolve
condition|)
block|{
comment|// another thread did initialize the security function pointers,
comment|// so we shouldn't do it again.
return|return;
block|}
endif|#
directive|endif
name|triedResolve
operator|=
literal|true
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|HINSTANCE
name|advapiHnd
init|=
name|QSystemLibrary
operator|::
name|load
argument_list|(
literal|L"advapi32"
argument_list|)
decl_stmt|;
if|if
condition|(
name|advapiHnd
condition|)
block|{
name|ptrGetNamedSecurityInfoW
operator|=
operator|(
name|PtrGetNamedSecurityInfoW
operator|)
name|GetProcAddress
argument_list|(
name|advapiHnd
argument_list|,
literal|"GetNamedSecurityInfoW"
argument_list|)
expr_stmt|;
name|ptrLookupAccountSidW
operator|=
operator|(
name|PtrLookupAccountSidW
operator|)
name|GetProcAddress
argument_list|(
name|advapiHnd
argument_list|,
literal|"LookupAccountSidW"
argument_list|)
expr_stmt|;
name|ptrBuildTrusteeWithSidW
operator|=
operator|(
name|PtrBuildTrusteeWithSidW
operator|)
name|GetProcAddress
argument_list|(
name|advapiHnd
argument_list|,
literal|"BuildTrusteeWithSidW"
argument_list|)
expr_stmt|;
name|ptrGetEffectiveRightsFromAclW
operator|=
operator|(
name|PtrGetEffectiveRightsFromAclW
operator|)
name|GetProcAddress
argument_list|(
name|advapiHnd
argument_list|,
literal|"GetEffectiveRightsFromAclW"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ptrBuildTrusteeWithSidW
condition|)
block|{
comment|// Create TRUSTEE for current user
name|HANDLE
name|hnd
init|=
operator|::
name|GetCurrentProcess
argument_list|()
decl_stmt|;
name|HANDLE
name|token
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|::
name|OpenProcessToken
argument_list|(
name|hnd
argument_list|,
name|TOKEN_QUERY
argument_list|,
operator|&
name|token
argument_list|)
condition|)
block|{
name|TOKEN_USER
name|tu
decl_stmt|;
name|DWORD
name|retsize
decl_stmt|;
if|if
condition|(
operator|::
name|GetTokenInformation
argument_list|(
name|token
argument_list|,
name|TokenUser
argument_list|,
operator|&
name|tu
argument_list|,
sizeof|sizeof
argument_list|(
name|tu
argument_list|)
argument_list|,
operator|&
name|retsize
argument_list|)
condition|)
name|ptrBuildTrusteeWithSidW
argument_list|(
operator|&
name|currentUserTrusteeW
argument_list|,
name|tu
operator|.
name|User
operator|.
name|Sid
argument_list|)
expr_stmt|;
operator|::
name|CloseHandle
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|PtrAllocateAndInitializeSid
function_decl|)
parameter_list|(
name|PSID_IDENTIFIER_AUTHORITY
parameter_list|,
name|BYTE
parameter_list|,
name|DWORD
parameter_list|,
name|DWORD
parameter_list|,
name|DWORD
parameter_list|,
name|DWORD
parameter_list|,
name|DWORD
parameter_list|,
name|DWORD
parameter_list|,
name|DWORD
parameter_list|,
name|DWORD
parameter_list|,
name|PSID
modifier|*
parameter_list|)
function_decl|;
name|PtrAllocateAndInitializeSid
name|ptrAllocateAndInitializeSid
init|=
operator|(
name|PtrAllocateAndInitializeSid
operator|)
name|GetProcAddress
argument_list|(
name|advapiHnd
argument_list|,
literal|"AllocateAndInitializeSid"
argument_list|)
decl_stmt|;
typedef|typedef
name|PVOID
function_decl|(
name|WINAPI
modifier|*
name|PtrFreeSid
function_decl|)
parameter_list|(
name|PSID
parameter_list|)
function_decl|;
name|PtrFreeSid
name|ptrFreeSid
init|=
operator|(
name|PtrFreeSid
operator|)
name|GetProcAddress
argument_list|(
name|advapiHnd
argument_list|,
literal|"FreeSid"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptrAllocateAndInitializeSid
operator|&&
name|ptrFreeSid
condition|)
block|{
comment|// Create TRUSTEE for Everyone (World)
name|SID_IDENTIFIER_AUTHORITY
name|worldAuth
init|=
block|{
name|SECURITY_WORLD_SID_AUTHORITY
block|}
decl_stmt|;
name|PSID
name|pWorld
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|ptrAllocateAndInitializeSid
argument_list|(
operator|&
name|worldAuth
argument_list|,
literal|1
argument_list|,
name|SECURITY_WORLD_RID
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|pWorld
argument_list|)
condition|)
name|ptrBuildTrusteeWithSidW
argument_list|(
operator|&
name|worldTrusteeW
argument_list|,
name|pWorld
argument_list|)
expr_stmt|;
name|ptrFreeSid
argument_list|(
name|pWorld
argument_list|)
expr_stmt|;
block|}
block|}
name|HINSTANCE
name|userenvHnd
init|=
name|QSystemLibrary
operator|::
name|load
argument_list|(
literal|L"userenv"
argument_list|)
decl_stmt|;
if|if
condition|(
name|userenvHnd
condition|)
name|ptrGetUserProfileDirectoryW
operator|=
operator|(
name|PtrGetUserProfileDirectoryW
operator|)
name|GetProcAddress
argument_list|(
name|userenvHnd
argument_list|,
literal|"GetUserProfileDirectoryW"
argument_list|)
expr_stmt|;
name|HINSTANCE
name|kernel32
init|=
name|LoadLibrary
argument_list|(
literal|L"kernel32"
argument_list|)
decl_stmt|;
if|if
condition|(
name|kernel32
condition|)
name|ptrGetVolumePathNamesForVolumeNameW
operator|=
operator|(
name|PtrGetVolumePathNamesForVolumeNameW
operator|)
name|GetProcAddress
argument_list|(
name|kernel32
argument_list|,
literal|"GetVolumePathNamesForVolumeNameW"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_LIBRARY
end_comment
begin_typedef
DECL|typedef|PtrNetShareEnum
typedef|typedef
name|DWORD
function_decl|(
name|WINAPI
modifier|*
name|PtrNetShareEnum
function_decl|)
parameter_list|(
name|LPWSTR
parameter_list|,
name|DWORD
parameter_list|,
name|LPBYTE
modifier|*
parameter_list|,
name|DWORD
parameter_list|,
name|LPDWORD
parameter_list|,
name|LPDWORD
parameter_list|,
name|LPDWORD
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptrNetShareEnum
specifier|static
name|PtrNetShareEnum
name|ptrNetShareEnum
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|PtrNetApiBufferFree
typedef|typedef
name|DWORD
function_decl|(
name|WINAPI
modifier|*
name|PtrNetApiBufferFree
function_decl|)
parameter_list|(
name|LPVOID
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptrNetApiBufferFree
specifier|static
name|PtrNetApiBufferFree
name|ptrNetApiBufferFree
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|struct|_SHARE_INFO_1
typedef|typedef
struct|struct
name|_SHARE_INFO_1
block|{
DECL|member|shi1_netname
name|LPWSTR
name|shi1_netname
decl_stmt|;
DECL|member|shi1_type
name|DWORD
name|shi1_type
decl_stmt|;
DECL|member|shi1_remark
name|LPWSTR
name|shi1_remark
decl_stmt|;
block|}
DECL|typedef|SHARE_INFO_1
name|SHARE_INFO_1
typedef|;
end_typedef
begin_function
DECL|function|resolveUNCLibs
specifier|static
name|bool
name|resolveUNCLibs
parameter_list|()
block|{
specifier|static
name|bool
name|triedResolve
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|triedResolve
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_THREAD
name|QMutexLocker
name|locker
argument_list|(
name|QMutexPool
operator|::
name|globalInstanceGet
argument_list|(
operator|&
name|triedResolve
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|triedResolve
condition|)
block|{
return|return
name|ptrNetShareEnum
operator|&&
name|ptrNetApiBufferFree
return|;
block|}
endif|#
directive|endif
name|triedResolve
operator|=
literal|true
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|HINSTANCE
name|hLib
init|=
name|QSystemLibrary
operator|::
name|load
argument_list|(
literal|L"Netapi32"
argument_list|)
decl_stmt|;
if|if
condition|(
name|hLib
condition|)
block|{
name|ptrNetShareEnum
operator|=
operator|(
name|PtrNetShareEnum
operator|)
name|GetProcAddress
argument_list|(
name|hLib
argument_list|,
literal|"NetShareEnum"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ptrNetShareEnum
condition|)
name|ptrNetApiBufferFree
operator|=
operator|(
name|PtrNetApiBufferFree
operator|)
name|GetProcAddress
argument_list|(
name|hLib
argument_list|,
literal|"NetApiBufferFree"
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
return|return
name|ptrNetShareEnum
operator|&&
name|ptrNetApiBufferFree
return|;
block|}
end_function
begin_function
DECL|function|readSymLink
specifier|static
name|QString
name|readSymLink
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|link
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|HANDLE
name|handle
init|=
name|CreateFile
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|link
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|utf16
argument_list|()
argument_list|,
name|FILE_READ_EA
argument_list|,
name|FILE_SHARE_READ
operator||
name|FILE_SHARE_WRITE
operator||
name|FILE_SHARE_DELETE
argument_list|,
literal|0
argument_list|,
name|OPEN_EXISTING
argument_list|,
name|FILE_FLAG_BACKUP_SEMANTICS
operator||
name|FILE_FLAG_OPEN_REPARSE_POINT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|handle
operator|!=
name|INVALID_HANDLE_VALUE
condition|)
block|{
name|DWORD
name|bufsize
init|=
name|MAXIMUM_REPARSE_DATA_BUFFER_SIZE
decl_stmt|;
name|REPARSE_DATA_BUFFER
modifier|*
name|rdb
init|=
operator|(
name|REPARSE_DATA_BUFFER
operator|*
operator|)
name|qMalloc
argument_list|(
name|bufsize
argument_list|)
decl_stmt|;
name|DWORD
name|retsize
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|::
name|DeviceIoControl
argument_list|(
name|handle
argument_list|,
name|FSCTL_GET_REPARSE_POINT
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rdb
argument_list|,
name|bufsize
argument_list|,
operator|&
name|retsize
argument_list|,
literal|0
argument_list|)
condition|)
block|{
if|if
condition|(
name|rdb
operator|->
name|ReparseTag
operator|==
name|IO_REPARSE_TAG_MOUNT_POINT
condition|)
block|{
name|int
name|length
init|=
name|rdb
operator|->
name|MountPointReparseBuffer
operator|.
name|SubstituteNameLength
operator|/
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
name|rdb
operator|->
name|MountPointReparseBuffer
operator|.
name|SubstituteNameOffset
operator|/
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
decl_stmt|;
specifier|const
name|wchar_t
modifier|*
name|PathBuffer
init|=
operator|&
name|rdb
operator|->
name|MountPointReparseBuffer
operator|.
name|PathBuffer
index|[
name|offset
index|]
decl_stmt|;
name|result
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|PathBuffer
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rdb
operator|->
name|ReparseTag
operator|==
name|IO_REPARSE_TAG_SYMLINK
condition|)
block|{
name|int
name|length
init|=
name|rdb
operator|->
name|SymbolicLinkReparseBuffer
operator|.
name|SubstituteNameLength
operator|/
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
name|rdb
operator|->
name|SymbolicLinkReparseBuffer
operator|.
name|SubstituteNameOffset
operator|/
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
decl_stmt|;
specifier|const
name|wchar_t
modifier|*
name|PathBuffer
init|=
operator|&
name|rdb
operator|->
name|SymbolicLinkReparseBuffer
operator|.
name|PathBuffer
index|[
name|offset
index|]
decl_stmt|;
name|result
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|PathBuffer
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|// cut-off "//?/" and "/??/"
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|>
literal|4
operator|&&
name|result
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
operator|&&
name|result
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'?'
argument_list|)
operator|&&
name|result
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
condition|)
name|result
operator|=
name|result
operator|.
name|mid
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
name|qFree
argument_list|(
name|rdb
argument_list|)
expr_stmt|;
name|CloseHandle
argument_list|(
name|handle
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
name|resolveLibs
argument_list|()
expr_stmt|;
if|if
condition|(
name|ptrGetVolumePathNamesForVolumeNameW
condition|)
block|{
name|QRegExp
name|matchVolName
argument_list|(
name|QLatin1String
argument_list|(
literal|"^Volume\\{([a-z]|[0-9]|-)+\\}\\\\"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchVolName
operator|.
name|indexIn
argument_list|(
name|result
argument_list|)
operator|==
literal|0
condition|)
block|{
name|DWORD
name|len
decl_stmt|;
name|wchar_t
name|buffer
index|[
name|MAX_PATH
index|]
decl_stmt|;
name|QString
name|volumeName
init|=
name|result
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|matchVolName
operator|.
name|matchedLength
argument_list|()
argument_list|)
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\\\?\\"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptrGetVolumePathNamesForVolumeNameW
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|volumeName
operator|.
name|utf16
argument_list|()
argument_list|,
name|buffer
argument_list|,
name|MAX_PATH
argument_list|,
operator|&
name|len
argument_list|)
operator|!=
literal|0
condition|)
name|result
operator|.
name|replace
argument_list|(
literal|0
argument_list|,
name|matchVolName
operator|.
name|matchedLength
argument_list|()
argument_list|,
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|link
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_WINCE
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|readLink
specifier|static
name|QString
name|readLink
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|link
parameter_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_CC_MWERKS
argument_list|)
name|QString
name|ret
decl_stmt|;
name|bool
name|neededCoInit
init|=
literal|false
decl_stmt|;
name|IShellLink
modifier|*
name|psl
decl_stmt|;
comment|// pointer to IShellLink i/f
name|WIN32_FIND_DATA
name|wfd
decl_stmt|;
name|wchar_t
name|szGotPath
index|[
name|MAX_PATH
index|]
decl_stmt|;
comment|// Get pointer to the IShellLink interface.
name|HRESULT
name|hres
init|=
name|CoCreateInstance
argument_list|(
name|CLSID_ShellLink
argument_list|,
name|NULL
argument_list|,
name|CLSCTX_INPROC_SERVER
argument_list|,
name|IID_IShellLink
argument_list|,
operator|(
name|LPVOID
operator|*
operator|)
operator|&
name|psl
argument_list|)
decl_stmt|;
if|if
condition|(
name|hres
operator|==
name|CO_E_NOTINITIALIZED
condition|)
block|{
comment|// COM was not initialized
name|neededCoInit
operator|=
literal|true
expr_stmt|;
name|CoInitialize
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|hres
operator|=
name|CoCreateInstance
argument_list|(
name|CLSID_ShellLink
argument_list|,
name|NULL
argument_list|,
name|CLSCTX_INPROC_SERVER
argument_list|,
name|IID_IShellLink
argument_list|,
operator|(
name|LPVOID
operator|*
operator|)
operator|&
name|psl
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hres
argument_list|)
condition|)
block|{
comment|// Get pointer to the IPersistFile interface.
name|IPersistFile
modifier|*
name|ppf
decl_stmt|;
name|hres
operator|=
name|psl
operator|->
name|QueryInterface
argument_list|(
name|IID_IPersistFile
argument_list|,
operator|(
name|LPVOID
operator|*
operator|)
operator|&
name|ppf
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hres
argument_list|)
condition|)
block|{
name|hres
operator|=
name|ppf
operator|->
name|Load
argument_list|(
operator|(
name|LPOLESTR
operator|)
name|link
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|utf16
argument_list|()
argument_list|,
name|STGM_READ
argument_list|)
expr_stmt|;
comment|//The original path of the link is retrieved. If the file/folder
comment|//was moved, the return value still have the old path.
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hres
argument_list|)
condition|)
block|{
if|if
condition|(
name|psl
operator|->
name|GetPath
argument_list|(
name|szGotPath
argument_list|,
name|MAX_PATH
argument_list|,
operator|&
name|wfd
argument_list|,
name|SLGP_UNCPRIORITY
argument_list|)
operator|==
name|NOERROR
condition|)
name|ret
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|szGotPath
argument_list|)
expr_stmt|;
block|}
name|ppf
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
name|psl
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|neededCoInit
condition|)
name|CoUninitialize
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|link
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
endif|#
directive|endif
comment|// QT_NO_LIBRARY
else|#
directive|else
name|wchar_t
name|target
index|[
name|MAX_PATH
index|]
decl_stmt|;
name|QString
name|result
decl_stmt|;
if|if
condition|(
name|SHGetShortcutTarget
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|QFileInfo
argument_list|(
name|link
operator|.
name|filePath
argument_list|()
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
operator|.
name|utf16
argument_list|()
argument_list|,
name|target
argument_list|,
name|MAX_PATH
argument_list|)
condition|)
block|{
name|result
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
condition|)
name|result
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
condition|)
name|result
operator|.
name|remove
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
endif|#
directive|endif
comment|// Q_OS_WINCE
block|}
end_function
begin_function
DECL|function|uncShareExists
specifier|static
name|bool
name|uncShareExists
parameter_list|(
specifier|const
name|QString
modifier|&
name|server
parameter_list|)
block|{
comment|// This code assumes the UNC path is always like \\?\UNC\server...
name|QStringList
name|parts
init|=
name|server
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|count
argument_list|()
operator|>=
literal|3
condition|)
block|{
name|QStringList
name|shares
decl_stmt|;
if|if
condition|(
name|QFileSystemEngine
operator|::
name|uncListSharesOnServer
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\\\"
argument_list|)
operator|+
name|parts
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|&
name|shares
argument_list|)
condition|)
return|return
name|parts
operator|.
name|count
argument_list|()
operator|>=
literal|4
condition|?
name|shares
operator|.
name|contains
argument_list|(
name|parts
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
else|:
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|getFindData
specifier|static
specifier|inline
name|bool
name|getFindData
parameter_list|(
name|QString
name|path
parameter_list|,
name|WIN32_FIND_DATA
modifier|&
name|findData
parameter_list|)
block|{
comment|// path should not end with a trailing slash
while|while
condition|(
name|path
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
condition|)
name|path
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// can't handle drives
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
condition|)
block|{
name|HANDLE
name|hFind
init|=
operator|::
name|FindFirstFile
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|path
operator|.
name|utf16
argument_list|()
argument_list|,
operator|&
name|findData
argument_list|)
decl_stmt|;
if|if
condition|(
name|hFind
operator|!=
name|INVALID_HANDLE_VALUE
condition|)
block|{
operator|::
name|FindClose
argument_list|(
name|hFind
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|uncListSharesOnServer
name|bool
name|QFileSystemEngine
operator|::
name|uncListSharesOnServer
parameter_list|(
specifier|const
name|QString
modifier|&
name|server
parameter_list|,
name|QStringList
modifier|*
name|list
parameter_list|)
block|{
if|if
condition|(
name|resolveUNCLibs
argument_list|()
condition|)
block|{
name|SHARE_INFO_1
modifier|*
name|BufPtr
decl_stmt|,
modifier|*
name|p
decl_stmt|;
name|DWORD
name|res
decl_stmt|;
name|DWORD
name|er
init|=
literal|0
decl_stmt|,
name|tr
init|=
literal|0
decl_stmt|,
name|resume
init|=
literal|0
decl_stmt|,
name|i
decl_stmt|;
do|do
block|{
name|res
operator|=
name|ptrNetShareEnum
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|server
operator|.
name|utf16
argument_list|()
argument_list|,
literal|1
argument_list|,
operator|(
name|LPBYTE
operator|*
operator|)
operator|&
name|BufPtr
argument_list|,
name|DWORD
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
operator|&
name|er
argument_list|,
operator|&
name|tr
argument_list|,
operator|&
name|resume
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|==
name|ERROR_SUCCESS
operator|||
name|res
operator|==
name|ERROR_MORE_DATA
condition|)
block|{
name|p
operator|=
name|BufPtr
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<=
name|er
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|list
operator|&&
name|p
operator|->
name|shi1_type
operator|==
literal|0
condition|)
name|list
operator|->
name|append
argument_list|(
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|p
operator|->
name|shi1_netname
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|++
expr_stmt|;
block|}
block|}
name|ptrNetApiBufferFree
argument_list|(
name|BufPtr
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|res
operator|==
name|ERROR_MORE_DATA
condition|)
do|;
return|return
name|res
operator|==
name|ERROR_SUCCESS
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|clearWinStatData
name|void
name|QFileSystemEngine
operator|::
name|clearWinStatData
parameter_list|(
name|QFileSystemMetaData
modifier|&
name|data
parameter_list|)
block|{
name|data
operator|.
name|size_
operator|=
literal|0
expr_stmt|;
name|data
operator|.
name|fileAttribute_
operator|=
literal|0
expr_stmt|;
name|data
operator|.
name|creationTime_
operator|=
name|FILETIME
argument_list|()
expr_stmt|;
name|data
operator|.
name|lastAccessTime_
operator|=
name|FILETIME
argument_list|()
expr_stmt|;
name|data
operator|.
name|lastWriteTime_
operator|=
name|FILETIME
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isCaseSensitive
name|bool
name|QFileSystemEngine
operator|::
name|isCaseSensitive
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|getLinkTarget
name|QFileSystemEntry
name|QFileSystemEngine
operator|::
name|getLinkTarget
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|link
parameter_list|,
name|QFileSystemMetaData
modifier|&
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|missingFlags
argument_list|(
name|QFileSystemMetaData
operator|::
name|LinkType
argument_list|)
condition|)
name|QFileSystemEngine
operator|::
name|fillMetaData
argument_list|(
name|link
argument_list|,
name|data
argument_list|,
name|QFileSystemMetaData
operator|::
name|LinkType
argument_list|)
expr_stmt|;
name|QString
name|ret
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|isLnkFile
argument_list|()
condition|)
name|ret
operator|=
name|readLink
argument_list|(
name|link
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|data
operator|.
name|isLink
argument_list|()
condition|)
name|ret
operator|=
name|readSymLink
argument_list|(
name|link
argument_list|)
expr_stmt|;
return|return
name|QFileSystemEntry
argument_list|(
name|ret
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|canonicalName
name|QFileSystemEntry
name|QFileSystemEngine
operator|::
name|canonicalName
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|,
name|QFileSystemMetaData
modifier|&
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|missingFlags
argument_list|(
name|QFileSystemMetaData
operator|::
name|ExistsAttribute
argument_list|)
condition|)
name|QFileSystemEngine
operator|::
name|fillMetaData
argument_list|(
name|entry
argument_list|,
name|data
argument_list|,
name|QFileSystemMetaData
operator|::
name|ExistsAttribute
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|exists
argument_list|()
condition|)
return|return
name|QFileSystemEntry
argument_list|(
name|slowCanonicalized
argument_list|(
name|absoluteName
argument_list|(
name|entry
argument_list|)
operator|.
name|filePath
argument_list|()
argument_list|)
argument_list|)
return|;
else|else
return|return
name|QFileSystemEntry
argument_list|()
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|nativeAbsoluteFilePath
name|QString
name|QFileSystemEngine
operator|::
name|nativeAbsoluteFilePath
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
comment|// can be //server or //server/share
name|QString
name|absPath
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QVarLengthArray
argument_list|<
name|wchar_t
argument_list|,
name|MAX_PATH
argument_list|>
name|buf
argument_list|(
name|qMax
argument_list|(
name|MAX_PATH
argument_list|,
name|path
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|wchar_t
modifier|*
name|fileName
init|=
literal|0
decl_stmt|;
name|DWORD
name|retLen
init|=
name|GetFullPathName
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|path
operator|.
name|utf16
argument_list|()
argument_list|,
name|buf
operator|.
name|size
argument_list|()
argument_list|,
name|buf
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|retLen
operator|>
operator|(
name|DWORD
operator|)
name|buf
operator|.
name|size
argument_list|()
condition|)
block|{
name|buf
operator|.
name|resize
argument_list|(
name|retLen
argument_list|)
expr_stmt|;
name|retLen
operator|=
name|GetFullPathName
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|path
operator|.
name|utf16
argument_list|()
argument_list|,
name|buf
operator|.
name|size
argument_list|()
argument_list|,
name|buf
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|fileName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|retLen
operator|!=
literal|0
condition|)
name|absPath
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|buf
operator|.
name|data
argument_list|()
argument_list|,
name|retLen
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
operator|||
name|path
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
condition|)
name|absPath
operator|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|path
argument_list|)
expr_stmt|;
else|else
name|absPath
operator|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QDir
operator|::
name|cleanPath
argument_list|(
name|qfsPrivateCurrentDir
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|path
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// This is really ugly, but GetFullPathName strips off whitespace at the end.
comment|// If you for instance write ". " in the lineedit of QFileDialog,
comment|// (which is an invalid filename) this function will strip the space off and viola,
comment|// the file is later reported as existing. Therefore, we re-add the whitespace that
comment|// was at the end of path in order to keep the filename invalid.
if|if
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
operator|&&
name|path
operator|.
name|at
argument_list|(
name|path
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
condition|)
name|absPath
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|absPath
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|absoluteName
name|QFileSystemEntry
name|QFileSystemEngine
operator|::
name|absoluteName
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|)
block|{
name|QString
name|ret
decl_stmt|;
if|if
condition|(
operator|!
name|entry
operator|.
name|isRelative
argument_list|()
condition|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|if
condition|(
name|entry
operator|.
name|isAbsolute
argument_list|()
operator|&&
operator|!
name|entry
operator|.
name|filePath
argument_list|()
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"/../"
argument_list|)
argument_list|)
operator|&&
operator|!
name|entry
operator|.
name|filePath
argument_list|()
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"/./"
argument_list|)
argument_list|)
operator|&&
operator|!
name|entry
operator|.
name|filePath
argument_list|()
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"/.."
argument_list|)
argument_list|)
operator|&&
operator|!
name|entry
operator|.
name|filePath
argument_list|()
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"/."
argument_list|)
argument_list|)
condition|)
block|{
name|ret
operator|=
name|entry
operator|.
name|filePath
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|nativeAbsoluteFilePath
argument_list|(
name|entry
operator|.
name|filePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|ret
operator|=
name|entry
operator|.
name|filePath
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|ret
operator|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|entry
operator|.
name|filePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// The path should be absolute at this point.
comment|// From the docs :
comment|// Absolute paths begin with the directory separator "/"
comment|// (optionally preceded by a drive specification under Windows).
if|if
condition|(
name|ret
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|!=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|ret
operator|.
name|length
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|ret
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|isLetter
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|ret
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
expr_stmt|;
comment|// Force uppercase drive letters.
name|ret
index|[
literal|0
index|]
operator|=
name|ret
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toUpper
argument_list|()
expr_stmt|;
block|}
return|return
name|QFileSystemEntry
argument_list|(
name|ret
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|owner
name|QString
name|QFileSystemEngine
operator|::
name|owner
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|,
name|QAbstractFileEngine
operator|::
name|FileOwner
name|own
parameter_list|)
block|{
name|QString
name|name
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
specifier|extern
name|int
name|qt_ntfs_permission_lookup
decl_stmt|;
if|if
condition|(
operator|(
name|qt_ntfs_permission_lookup
operator|>
literal|0
operator|)
operator|&&
operator|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|&
name|QSysInfo
operator|::
name|WV_NT_based
operator|)
condition|)
block|{
name|resolveLibs
argument_list|()
expr_stmt|;
if|if
condition|(
name|ptrGetNamedSecurityInfoW
operator|&&
name|ptrLookupAccountSidW
condition|)
block|{
name|PSID
name|pOwner
init|=
literal|0
decl_stmt|;
name|PSECURITY_DESCRIPTOR
name|pSD
decl_stmt|;
if|if
condition|(
name|ptrGetNamedSecurityInfoW
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|entry
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|utf16
argument_list|()
argument_list|,
name|SE_FILE_OBJECT
argument_list|,
name|own
operator|==
name|QAbstractFileEngine
operator|::
name|OwnerGroup
condition|?
name|GROUP_SECURITY_INFORMATION
else|:
name|OWNER_SECURITY_INFORMATION
argument_list|,
name|own
operator|==
name|QAbstractFileEngine
operator|::
name|OwnerUser
condition|?
operator|&
name|pOwner
else|:
literal|0
argument_list|,
name|own
operator|==
name|QAbstractFileEngine
operator|::
name|OwnerGroup
condition|?
operator|&
name|pOwner
else|:
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|pSD
argument_list|)
operator|==
name|ERROR_SUCCESS
condition|)
block|{
name|DWORD
name|lowner
init|=
literal|64
decl_stmt|;
name|DWORD
name|ldomain
init|=
literal|64
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|wchar_t
argument_list|,
literal|64
argument_list|>
name|owner
argument_list|(
name|lowner
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|wchar_t
argument_list|,
literal|64
argument_list|>
name|domain
argument_list|(
name|ldomain
argument_list|)
decl_stmt|;
name|SID_NAME_USE
name|use
init|=
name|SidTypeUnknown
decl_stmt|;
comment|// First call, to determine size of the strings (with '\0').
if|if
condition|(
operator|!
name|ptrLookupAccountSidW
argument_list|(
name|NULL
argument_list|,
name|pOwner
argument_list|,
operator|(
name|LPWSTR
operator|)
name|owner
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|lowner
argument_list|,
operator|(
name|LPWSTR
operator|)
name|domain
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|ldomain
argument_list|,
operator|(
name|SID_NAME_USE
operator|*
operator|)
operator|&
name|use
argument_list|)
condition|)
block|{
if|if
condition|(
name|GetLastError
argument_list|()
operator|==
name|ERROR_INSUFFICIENT_BUFFER
condition|)
block|{
if|if
condition|(
name|lowner
operator|>
operator|(
name|DWORD
operator|)
name|owner
operator|.
name|size
argument_list|()
condition|)
name|owner
operator|.
name|resize
argument_list|(
name|lowner
argument_list|)
expr_stmt|;
if|if
condition|(
name|ldomain
operator|>
operator|(
name|DWORD
operator|)
name|domain
operator|.
name|size
argument_list|()
condition|)
name|domain
operator|.
name|resize
argument_list|(
name|ldomain
argument_list|)
expr_stmt|;
comment|// Second call, try on resized buf-s
if|if
condition|(
operator|!
name|ptrLookupAccountSidW
argument_list|(
name|NULL
argument_list|,
name|pOwner
argument_list|,
operator|(
name|LPWSTR
operator|)
name|owner
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|lowner
argument_list|,
operator|(
name|LPWSTR
operator|)
name|domain
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|ldomain
argument_list|,
operator|(
name|SID_NAME_USE
operator|*
operator|)
operator|&
name|use
argument_list|)
condition|)
block|{
name|lowner
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
name|lowner
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lowner
operator|!=
literal|0
condition|)
name|name
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|owner
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|LocalFree
argument_list|(
name|pSD
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|own
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|name
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|fillPermissions
name|bool
name|QFileSystemEngine
operator|::
name|fillPermissions
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|,
name|QFileSystemMetaData
modifier|&
name|data
parameter_list|,
name|QFileSystemMetaData
operator|::
name|MetaDataFlags
name|what
parameter_list|)
block|{
name|QAbstractFileEngine
operator|::
name|FileFlags
name|ret
init|=
literal|0
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
if|if
condition|(
operator|(
name|qt_ntfs_permission_lookup
operator|>
literal|0
operator|)
operator|&&
operator|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|&
name|QSysInfo
operator|::
name|WV_NT_based
operator|)
condition|)
block|{
name|resolveLibs
argument_list|()
expr_stmt|;
if|if
condition|(
name|ptrGetNamedSecurityInfoW
operator|&&
name|ptrBuildTrusteeWithSidW
operator|&&
name|ptrGetEffectiveRightsFromAclW
condition|)
block|{
enum|enum
block|{
name|ReadMask
init|=
literal|0x00000001
block|,
name|WriteMask
init|=
literal|0x00000002
block|,
name|ExecMask
init|=
literal|0x00000020
block|}
enum|;
name|QString
name|fname
init|=
name|entry
operator|.
name|filePath
argument_list|()
decl_stmt|;
name|PSID
name|pOwner
init|=
literal|0
decl_stmt|;
name|PSID
name|pGroup
init|=
literal|0
decl_stmt|;
name|PACL
name|pDacl
decl_stmt|;
name|PSECURITY_DESCRIPTOR
name|pSD
decl_stmt|;
name|DWORD
name|res
init|=
name|ptrGetNamedSecurityInfoW
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|fname
operator|.
name|utf16
argument_list|()
argument_list|,
name|SE_FILE_OBJECT
argument_list|,
name|OWNER_SECURITY_INFORMATION
operator||
name|GROUP_SECURITY_INFORMATION
operator||
name|DACL_SECURITY_INFORMATION
argument_list|,
operator|&
name|pOwner
argument_list|,
operator|&
name|pGroup
argument_list|,
operator|&
name|pDacl
argument_list|,
literal|0
argument_list|,
operator|&
name|pSD
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
name|ERROR_SUCCESS
condition|)
block|{
name|ACCESS_MASK
name|access_mask
decl_stmt|;
name|TRUSTEE_W
name|trustee
decl_stmt|;
if|if
condition|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|UserPermissions
condition|)
block|{
comment|// user
name|data
operator|.
name|knownFlagsMask
operator||=
name|QFileSystemMetaData
operator|::
name|UserPermissions
expr_stmt|;
if|if
condition|(
name|ptrGetEffectiveRightsFromAclW
argument_list|(
name|pDacl
argument_list|,
operator|&
name|currentUserTrusteeW
argument_list|,
operator|&
name|access_mask
argument_list|)
operator|!=
name|ERROR_SUCCESS
condition|)
name|access_mask
operator|=
operator|(
name|ACCESS_MASK
operator|)
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|access_mask
operator|&
name|ReadMask
condition|)
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|UserReadPermission
expr_stmt|;
if|if
condition|(
name|access_mask
operator|&
name|WriteMask
condition|)
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|UserWritePermission
expr_stmt|;
if|if
condition|(
name|access_mask
operator|&
name|ExecMask
condition|)
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|UserExecutePermission
expr_stmt|;
block|}
if|if
condition|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|OwnerPermissions
condition|)
block|{
comment|// owner
name|data
operator|.
name|knownFlagsMask
operator||=
name|QFileSystemMetaData
operator|::
name|OwnerPermissions
expr_stmt|;
name|ptrBuildTrusteeWithSidW
argument_list|(
operator|&
name|trustee
argument_list|,
name|pOwner
argument_list|)
expr_stmt|;
if|if
condition|(
name|ptrGetEffectiveRightsFromAclW
argument_list|(
name|pDacl
argument_list|,
operator|&
name|trustee
argument_list|,
operator|&
name|access_mask
argument_list|)
operator|!=
name|ERROR_SUCCESS
condition|)
name|access_mask
operator|=
operator|(
name|ACCESS_MASK
operator|)
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|access_mask
operator|&
name|ReadMask
condition|)
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|OwnerReadPermission
expr_stmt|;
if|if
condition|(
name|access_mask
operator|&
name|WriteMask
condition|)
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|OwnerWritePermission
expr_stmt|;
if|if
condition|(
name|access_mask
operator|&
name|ExecMask
condition|)
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|OwnerExecutePermission
expr_stmt|;
block|}
if|if
condition|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|GroupPermissions
condition|)
block|{
comment|// group
name|data
operator|.
name|knownFlagsMask
operator||=
name|QFileSystemMetaData
operator|::
name|GroupPermissions
expr_stmt|;
name|ptrBuildTrusteeWithSidW
argument_list|(
operator|&
name|trustee
argument_list|,
name|pGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|ptrGetEffectiveRightsFromAclW
argument_list|(
name|pDacl
argument_list|,
operator|&
name|trustee
argument_list|,
operator|&
name|access_mask
argument_list|)
operator|!=
name|ERROR_SUCCESS
condition|)
name|access_mask
operator|=
operator|(
name|ACCESS_MASK
operator|)
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|access_mask
operator|&
name|ReadMask
condition|)
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|GroupReadPermission
expr_stmt|;
if|if
condition|(
name|access_mask
operator|&
name|WriteMask
condition|)
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|GroupWritePermission
expr_stmt|;
if|if
condition|(
name|access_mask
operator|&
name|ExecMask
condition|)
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|GroupExecutePermission
expr_stmt|;
block|}
if|if
condition|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|OtherPermissions
condition|)
block|{
comment|// other (world)
name|data
operator|.
name|knownFlagsMask
operator||=
name|QFileSystemMetaData
operator|::
name|OtherPermissions
expr_stmt|;
if|if
condition|(
name|ptrGetEffectiveRightsFromAclW
argument_list|(
name|pDacl
argument_list|,
operator|&
name|worldTrusteeW
argument_list|,
operator|&
name|access_mask
argument_list|)
operator|!=
name|ERROR_SUCCESS
condition|)
name|access_mask
operator|=
operator|(
name|ACCESS_MASK
operator|)
operator|-
literal|1
expr_stmt|;
comment|// ###
if|if
condition|(
name|access_mask
operator|&
name|ReadMask
condition|)
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|OtherReadPermission
expr_stmt|;
if|if
condition|(
name|access_mask
operator|&
name|WriteMask
condition|)
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|OtherWritePermission
expr_stmt|;
if|if
condition|(
name|access_mask
operator|&
name|ExecMask
condition|)
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|OwnerExecutePermission
expr_stmt|;
block|}
name|LocalFree
argument_list|(
name|pSD
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
endif|#
directive|endif
block|{
comment|//### what to do with permissions if we don't use NTFS
comment|// for now just add all permissions and what about exe missions ??
comment|// also qt_ntfs_permission_lookup is now not set by default ... should it ?
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|OwnerReadPermission
operator||
name|QFileSystemMetaData
operator|::
name|GroupReadPermission
operator||
name|QFileSystemMetaData
operator|::
name|OtherReadPermission
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|data
operator|.
name|fileAttribute_
operator|&
name|FILE_ATTRIBUTE_READONLY
operator|)
condition|)
block|{
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|OwnerWritePermission
operator||
name|QFileSystemMetaData
operator|::
name|GroupWritePermission
operator||
name|QFileSystemMetaData
operator|::
name|OtherWritePermission
expr_stmt|;
block|}
name|QString
name|fname
init|=
name|entry
operator|.
name|filePath
argument_list|()
decl_stmt|;
name|QString
name|ext
init|=
name|fname
operator|.
name|right
argument_list|(
literal|4
argument_list|)
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|isDirectory
argument_list|()
operator|||
name|ext
operator|==
name|QLatin1String
argument_list|(
literal|".exe"
argument_list|)
operator|||
name|ext
operator|==
name|QLatin1String
argument_list|(
literal|".com"
argument_list|)
operator|||
name|ext
operator|==
name|QLatin1String
argument_list|(
literal|".bat"
argument_list|)
operator|||
name|ext
operator|==
name|QLatin1String
argument_list|(
literal|".pif"
argument_list|)
operator|||
name|ext
operator|==
name|QLatin1String
argument_list|(
literal|".cmd"
argument_list|)
condition|)
block|{
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|OwnerExecutePermission
operator||
name|QFileSystemMetaData
operator|::
name|GroupExecutePermission
operator||
name|QFileSystemMetaData
operator|::
name|OtherExecutePermission
operator||
name|QFileSystemMetaData
operator|::
name|UserExecutePermission
expr_stmt|;
block|}
name|data
operator|.
name|knownFlagsMask
operator||=
name|QFileSystemMetaData
operator|::
name|OwnerPermissions
operator||
name|QFileSystemMetaData
operator|::
name|GroupPermissions
operator||
name|QFileSystemMetaData
operator|::
name|OtherPermissions
operator||
name|QFileSystemMetaData
operator|::
name|UserExecutePermission
expr_stmt|;
comment|// calculate user permissions
if|if
condition|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|UserReadPermission
condition|)
block|{
if|if
condition|(
operator|::
name|_waccess
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|entry
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|utf16
argument_list|()
argument_list|,
name|R_OK
argument_list|)
operator|==
literal|0
condition|)
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|UserReadPermission
expr_stmt|;
name|data
operator|.
name|knownFlagsMask
operator||=
name|QFileSystemMetaData
operator|::
name|UserReadPermission
expr_stmt|;
block|}
if|if
condition|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|UserWritePermission
condition|)
block|{
if|if
condition|(
operator|::
name|_waccess
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|entry
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|utf16
argument_list|()
argument_list|,
name|W_OK
argument_list|)
operator|==
literal|0
condition|)
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|UserWritePermission
expr_stmt|;
name|data
operator|.
name|knownFlagsMask
operator||=
name|QFileSystemMetaData
operator|::
name|UserReadPermission
expr_stmt|;
block|}
block|}
return|return
name|data
operator|.
name|hasFlags
argument_list|(
name|what
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|tryDriveUNCFallback
specifier|static
name|bool
name|tryDriveUNCFallback
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|fname
parameter_list|,
name|QFileSystemMetaData
modifier|&
name|data
parameter_list|)
block|{
name|bool
name|entryExists
init|=
literal|false
decl_stmt|;
name|DWORD
name|fileAttrib
init|=
literal|0
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|if
condition|(
name|fname
operator|.
name|isDriveRoot
argument_list|()
condition|)
block|{
comment|// a valid drive ??
name|DWORD
name|drivesBitmask
init|=
operator|::
name|GetLogicalDrives
argument_list|()
decl_stmt|;
name|int
name|drivebit
init|=
literal|1
operator|<<
operator|(
name|fname
operator|.
name|filePath
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
operator|-
name|QLatin1Char
argument_list|(
literal|'A'
argument_list|)
operator|.
name|unicode
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|drivesBitmask
operator|&
name|drivebit
condition|)
block|{
name|fileAttrib
operator|=
name|FILE_ATTRIBUTE_DIRECTORY
operator||
name|FILE_ATTRIBUTE_SYSTEM
expr_stmt|;
name|entryExists
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
endif|#
directive|endif
specifier|const
name|QString
modifier|&
name|path
init|=
name|fname
operator|.
name|nativeFilePath
argument_list|()
decl_stmt|;
name|bool
name|is_dir
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\\\?\\UNC"
argument_list|)
argument_list|)
condition|)
block|{
comment|// UNC - stat doesn't work for all cases (Windows bug)
name|int
name|s
init|=
name|path
operator|.
name|indexOf
argument_list|(
name|path
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|>
literal|0
condition|)
block|{
comment|// "\\?\UNC\server\..."
name|s
operator|=
name|path
operator|.
name|indexOf
argument_list|(
name|path
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|s
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|>
literal|0
condition|)
block|{
comment|// "\\?\UNC\server\share\..."
if|if
condition|(
name|s
operator|==
name|path
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
comment|// "\\?\UNC\server\share\"
name|is_dir
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// "\\?\UNC\server\share\notfound"
block|}
block|}
else|else
block|{
comment|// "\\?\UNC\server\share"
name|is_dir
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// "\\?\UNC\server"
name|is_dir
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|is_dir
operator|&&
name|uncShareExists
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// looks like a UNC dir, is a dir.
name|fileAttrib
operator|=
name|FILE_ATTRIBUTE_DIRECTORY
expr_stmt|;
name|entryExists
operator|=
literal|true
expr_stmt|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
block|}
endif|#
directive|endif
if|if
condition|(
name|entryExists
condition|)
name|data
operator|.
name|fillFromFileAttribute
argument_list|(
name|fileAttrib
argument_list|)
expr_stmt|;
return|return
name|entryExists
return|;
block|}
end_function
begin_function
DECL|function|tryFindFallback
specifier|static
name|bool
name|tryFindFallback
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|fname
parameter_list|,
name|QFileSystemMetaData
modifier|&
name|data
parameter_list|)
block|{
name|bool
name|filledData
init|=
literal|false
decl_stmt|;
comment|// This assumes the last call to a Windows API failed.
name|int
name|errorCode
init|=
name|GetLastError
argument_list|()
decl_stmt|;
if|if
condition|(
name|errorCode
operator|==
name|ERROR_ACCESS_DENIED
operator|||
name|errorCode
operator|==
name|ERROR_SHARING_VIOLATION
condition|)
block|{
name|WIN32_FIND_DATA
name|findData
decl_stmt|;
if|if
condition|(
name|getFindData
argument_list|(
name|fname
operator|.
name|nativeFilePath
argument_list|()
argument_list|,
name|findData
argument_list|)
operator|&&
name|findData
operator|.
name|dwFileAttributes
operator|!=
name|INVALID_FILE_ATTRIBUTES
condition|)
block|{
name|data
operator|.
name|fillFromFindData
argument_list|(
name|findData
argument_list|,
literal|true
argument_list|,
name|fname
operator|.
name|isDriveRoot
argument_list|()
argument_list|)
expr_stmt|;
name|filledData
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|filledData
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_comment
comment|//static
end_comment
begin_function
DECL|function|fillMetaData
name|bool
name|QFileSystemEngine
operator|::
name|fillMetaData
parameter_list|(
name|int
name|fd
parameter_list|,
name|QFileSystemMetaData
modifier|&
name|data
parameter_list|,
name|QFileSystemMetaData
operator|::
name|MetaDataFlags
name|what
parameter_list|)
block|{
name|HANDLE
name|fHandle
init|=
operator|(
name|HANDLE
operator|)
name|_get_osfhandle
argument_list|(
name|fd
argument_list|)
decl_stmt|;
if|if
condition|(
name|fHandle
operator|!=
name|INVALID_HANDLE_VALUE
condition|)
block|{
return|return
name|fillMetaData
argument_list|(
name|fHandle
argument_list|,
name|data
argument_list|,
name|what
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//static
end_comment
begin_function
DECL|function|fillMetaData
name|bool
name|QFileSystemEngine
operator|::
name|fillMetaData
parameter_list|(
name|HANDLE
name|fHandle
parameter_list|,
name|QFileSystemMetaData
modifier|&
name|data
parameter_list|,
name|QFileSystemMetaData
operator|::
name|MetaDataFlags
name|what
parameter_list|)
block|{
name|data
operator|.
name|entryFlags
operator|&=
operator|~
name|what
expr_stmt|;
name|clearWinStatData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|BY_HANDLE_FILE_INFORMATION
name|fileInfo
decl_stmt|;
name|UINT
name|oldmode
init|=
name|SetErrorMode
argument_list|(
name|SEM_FAILCRITICALERRORS
operator||
name|SEM_NOOPENFILEERRORBOX
argument_list|)
decl_stmt|;
if|if
condition|(
name|GetFileInformationByHandle
argument_list|(
name|fHandle
argument_list|,
operator|&
name|fileInfo
argument_list|)
condition|)
block|{
name|data
operator|.
name|fillFromFindInfo
argument_list|(
name|fileInfo
argument_list|)
expr_stmt|;
block|}
name|SetErrorMode
argument_list|(
name|oldmode
argument_list|)
expr_stmt|;
return|return
name|data
operator|.
name|hasFlags
argument_list|(
name|what
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|fillMetaData
name|bool
name|QFileSystemEngine
operator|::
name|fillMetaData
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|,
name|QFileSystemMetaData
modifier|&
name|data
parameter_list|,
name|QFileSystemMetaData
operator|::
name|MetaDataFlags
name|what
parameter_list|)
block|{
name|what
operator||=
name|QFileSystemMetaData
operator|::
name|WinLnkType
operator||
name|QFileSystemMetaData
operator|::
name|WinStatFlags
expr_stmt|;
name|data
operator|.
name|entryFlags
operator|&=
operator|~
name|what
expr_stmt|;
name|QFileSystemEntry
name|fname
decl_stmt|;
name|data
operator|.
name|knownFlagsMask
operator||=
name|QFileSystemMetaData
operator|::
name|WinLnkType
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|filePath
argument_list|()
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|".lnk"
argument_list|)
argument_list|)
condition|)
block|{
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|WinLnkType
expr_stmt|;
name|fname
operator|=
name|QFileSystemEntry
argument_list|(
name|readLink
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fname
operator|=
name|entry
expr_stmt|;
block|}
if|if
condition|(
name|fname
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|data
operator|.
name|knownFlagsMask
operator||=
name|what
expr_stmt|;
name|clearWinStatData
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|WinStatFlags
condition|)
block|{
name|UINT
name|oldmode
init|=
name|SetErrorMode
argument_list|(
name|SEM_FAILCRITICALERRORS
operator||
name|SEM_NOOPENFILEERRORBOX
argument_list|)
decl_stmt|;
name|clearWinStatData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|WIN32_FIND_DATA
name|findData
decl_stmt|;
comment|// The memory structure for WIN32_FIND_DATA is same as WIN32_FILE_ATTRIBUTE_DATA
comment|// for all members used by fillFindData().
name|bool
name|ok
init|=
operator|::
name|GetFileAttributesEx
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|fname
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|utf16
argument_list|()
argument_list|,
name|GetFileExInfoStandard
argument_list|,
cast|reinterpret_cast
argument_list|<
name|WIN32_FILE_ATTRIBUTE_DATA
operator|*
argument_list|>
argument_list|(
operator|&
name|findData
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
name|data
operator|.
name|fillFromFindData
argument_list|(
name|findData
argument_list|,
literal|false
argument_list|,
name|fname
operator|.
name|isDriveRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|tryFindFallback
argument_list|(
name|fname
argument_list|,
name|data
argument_list|)
condition|)
name|tryDriveUNCFallback
argument_list|(
name|fname
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
name|SetErrorMode
argument_list|(
name|oldmode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|Permissions
condition|)
name|fillPermissions
argument_list|(
name|fname
argument_list|,
name|data
argument_list|,
name|what
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|LinkType
operator|)
operator|&&
name|data
operator|.
name|missingFlags
argument_list|(
name|QFileSystemMetaData
operator|::
name|LinkType
argument_list|)
condition|)
block|{
name|data
operator|.
name|knownFlagsMask
operator||=
name|QFileSystemMetaData
operator|::
name|LinkType
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|fileAttribute_
operator|&
name|FILE_ATTRIBUTE_REPARSE_POINT
condition|)
block|{
name|WIN32_FIND_DATA
name|findData
decl_stmt|;
if|if
condition|(
name|getFindData
argument_list|(
name|fname
operator|.
name|nativeFilePath
argument_list|()
argument_list|,
name|findData
argument_list|)
condition|)
name|data
operator|.
name|fillFromFindData
argument_list|(
name|findData
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|data
operator|.
name|knownFlagsMask
operator||=
name|what
expr_stmt|;
return|return
name|data
operator|.
name|hasFlags
argument_list|(
name|what
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mkDir
specifier|static
specifier|inline
name|bool
name|mkDir
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
comment|// Unfortunately CreateDirectory returns true for paths longer than
comment|// 256, but does not create a directory. It starts to fail, when
comment|// path length> MAX_PATH, which is 260 usually on CE.
comment|// This only happens on a Windows Mobile device. Windows CE seems
comment|// not to be affected by this.
specifier|static
name|int
name|platformId
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|platformId
operator|==
literal|0
condition|)
block|{
name|wchar_t
name|platformString
index|[
literal|64
index|]
decl_stmt|;
if|if
condition|(
name|SystemParametersInfo
argument_list|(
name|SPI_GETPLATFORMTYPE
argument_list|,
sizeof|sizeof
argument_list|(
name|platformString
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
operator|*
name|platformString
argument_list|)
argument_list|,
name|platformString
argument_list|,
literal|0
argument_list|)
condition|)
block|{
if|if
condition|(
literal|0
operator|==
name|wcscmp
argument_list|(
name|platformString
argument_list|,
literal|L"PocketPC"
argument_list|)
operator|||
literal|0
operator|==
name|wcscmp
argument_list|(
name|platformString
argument_list|,
literal|L"Smartphone"
argument_list|)
condition|)
name|platformId
operator|=
literal|1
expr_stmt|;
else|else
name|platformId
operator|=
literal|2
expr_stmt|;
block|}
block|}
if|if
condition|(
name|platformId
operator|==
literal|1
operator|&&
name|QFSFileEnginePrivate
operator|::
name|longFileName
argument_list|(
name|path
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|256
condition|)
return|return
literal|false
return|;
endif|#
directive|endif
return|return
operator|::
name|CreateDirectory
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|QFSFileEnginePrivate
operator|::
name|longFileName
argument_list|(
name|path
argument_list|)
operator|.
name|utf16
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|rmDir
specifier|static
specifier|inline
name|bool
name|rmDir
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
return|return
operator|::
name|RemoveDirectory
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|QFSFileEnginePrivate
operator|::
name|longFileName
argument_list|(
name|path
argument_list|)
operator|.
name|utf16
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isDirPath
specifier|static
name|bool
name|isDirPath
parameter_list|(
specifier|const
name|QString
modifier|&
name|dirPath
parameter_list|,
name|bool
modifier|*
name|existed
parameter_list|)
block|{
name|QString
name|path
init|=
name|dirPath
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|==
literal|2
operator|&&
name|path
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
condition|)
name|path
operator|+=
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|DWORD
name|fileAttrib
init|=
operator|::
name|GetFileAttributes
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|QFSFileEnginePrivate
operator|::
name|longFileName
argument_list|(
name|path
argument_list|)
operator|.
name|utf16
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileAttrib
operator|==
name|INVALID_FILE_ATTRIBUTES
condition|)
block|{
name|int
name|errorCode
init|=
name|GetLastError
argument_list|()
decl_stmt|;
if|if
condition|(
name|errorCode
operator|==
name|ERROR_ACCESS_DENIED
operator|||
name|errorCode
operator|==
name|ERROR_SHARING_VIOLATION
condition|)
block|{
name|WIN32_FIND_DATA
name|findData
decl_stmt|;
if|if
condition|(
name|getFindData
argument_list|(
name|QFSFileEnginePrivate
operator|::
name|longFileName
argument_list|(
name|path
argument_list|)
argument_list|,
name|findData
argument_list|)
condition|)
name|fileAttrib
operator|=
name|findData
operator|.
name|dwFileAttributes
expr_stmt|;
block|}
block|}
if|if
condition|(
name|existed
condition|)
operator|*
name|existed
operator|=
name|fileAttrib
operator|!=
name|INVALID_FILE_ATTRIBUTES
expr_stmt|;
if|if
condition|(
name|fileAttrib
operator|==
name|INVALID_FILE_ATTRIBUTES
condition|)
return|return
literal|false
return|;
return|return
name|fileAttrib
operator|&
name|FILE_ATTRIBUTE_DIRECTORY
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|createDirectory
name|bool
name|QFileSystemEngine
operator|::
name|createDirectory
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|,
name|bool
name|createParents
parameter_list|)
block|{
name|QString
name|dirName
init|=
name|entry
operator|.
name|filePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|createParents
condition|)
block|{
name|dirName
operator|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QDir
operator|::
name|cleanPath
argument_list|(
name|dirName
argument_list|)
argument_list|)
expr_stmt|;
comment|// We spefically search for / so \ would break it..
name|int
name|oldslash
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|dirName
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\\\"
argument_list|)
argument_list|)
condition|)
block|{
comment|// Don't try to create the root path of a UNC path;
comment|// CreateDirectory() will just return ERROR_INVALID_NAME.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirName
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|dirName
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|!=
name|QDir
operator|::
name|separator
argument_list|()
condition|)
block|{
name|oldslash
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|oldslash
operator|!=
operator|-
literal|1
condition|)
name|oldslash
operator|=
name|dirName
operator|.
name|indexOf
argument_list|(
name|QDir
operator|::
name|separator
argument_list|()
argument_list|,
name|oldslash
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|slash
init|=
literal|0
init|;
name|slash
operator|!=
operator|-
literal|1
condition|;
name|oldslash
operator|=
name|slash
control|)
block|{
name|slash
operator|=
name|dirName
operator|.
name|indexOf
argument_list|(
name|QDir
operator|::
name|separator
argument_list|()
argument_list|,
name|oldslash
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|slash
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|oldslash
operator|==
name|dirName
operator|.
name|length
argument_list|()
condition|)
break|break;
name|slash
operator|=
name|dirName
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|slash
condition|)
block|{
name|QString
name|chunk
init|=
name|dirName
operator|.
name|left
argument_list|(
name|slash
argument_list|)
decl_stmt|;
name|bool
name|existed
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|isDirPath
argument_list|(
name|chunk
argument_list|,
operator|&
name|existed
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|existed
condition|)
block|{
if|if
condition|(
operator|!
name|mkDir
argument_list|(
name|chunk
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
name|mkDir
argument_list|(
name|entry
operator|.
name|filePath
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|removeDirectory
name|bool
name|QFileSystemEngine
operator|::
name|removeDirectory
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|,
name|bool
name|removeEmptyParents
parameter_list|)
block|{
name|QString
name|dirName
init|=
name|entry
operator|.
name|filePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|removeEmptyParents
condition|)
block|{
name|dirName
operator|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QDir
operator|::
name|cleanPath
argument_list|(
name|dirName
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|oldslash
init|=
literal|0
init|,
name|slash
init|=
name|dirName
operator|.
name|length
argument_list|()
init|;
name|slash
operator|>
literal|0
condition|;
name|oldslash
operator|=
name|slash
control|)
block|{
name|QString
name|chunk
init|=
name|dirName
operator|.
name|left
argument_list|(
name|slash
argument_list|)
decl_stmt|;
if|if
condition|(
name|chunk
operator|.
name|length
argument_list|()
operator|==
literal|2
operator|&&
name|chunk
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|isLetter
argument_list|()
operator|&&
name|chunk
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
condition|)
break|break;
if|if
condition|(
operator|!
name|isDirPath
argument_list|(
name|chunk
argument_list|,
literal|0
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|rmDir
argument_list|(
name|chunk
argument_list|)
condition|)
return|return
name|oldslash
operator|!=
literal|0
return|;
name|slash
operator|=
name|dirName
operator|.
name|lastIndexOf
argument_list|(
name|QDir
operator|::
name|separator
argument_list|()
argument_list|,
name|oldslash
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
name|rmDir
argument_list|(
name|entry
operator|.
name|filePath
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|rootPath
name|QString
name|QFileSystemEngine
operator|::
name|rootPath
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QString
name|ret
init|=
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_FS_FAT
argument_list|)
name|QString
name|ret
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|qgetenv
argument_list|(
literal|"SystemDrive"
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|=
name|QLatin1String
argument_list|(
literal|"c:"
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_OS2EMX
argument_list|)
name|char
name|dir
index|[
literal|4
index|]
decl_stmt|;
name|_abspath
argument_list|(
name|dir
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|_MAX_PATH
argument_list|)
expr_stmt|;
name|QString
name|ret
argument_list|(
name|dir
argument_list|)
decl_stmt|;
endif|#
directive|endif
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|homePath
name|QString
name|QFileSystemEngine
operator|::
name|homePath
parameter_list|()
block|{
name|QString
name|ret
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
name|resolveLibs
argument_list|()
expr_stmt|;
if|if
condition|(
name|ptrGetUserProfileDirectoryW
condition|)
block|{
name|HANDLE
name|hnd
init|=
operator|::
name|GetCurrentProcess
argument_list|()
decl_stmt|;
name|HANDLE
name|token
init|=
literal|0
decl_stmt|;
name|BOOL
name|ok
init|=
operator|::
name|OpenProcessToken
argument_list|(
name|hnd
argument_list|,
name|TOKEN_QUERY
argument_list|,
operator|&
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
name|DWORD
name|dwBufferSize
init|=
literal|0
decl_stmt|;
comment|// First call, to determine size of the strings (with '\0').
name|ok
operator|=
name|ptrGetUserProfileDirectoryW
argument_list|(
name|token
argument_list|,
name|NULL
argument_list|,
operator|&
name|dwBufferSize
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ok
operator|&&
name|dwBufferSize
operator|!=
literal|0
condition|)
block|{
comment|// We got the required buffer size
name|wchar_t
modifier|*
name|userDirectory
init|=
operator|new
name|wchar_t
index|[
name|dwBufferSize
index|]
decl_stmt|;
comment|// Second call, now we can fill the allocated buffer.
name|ok
operator|=
name|ptrGetUserProfileDirectoryW
argument_list|(
name|token
argument_list|,
name|userDirectory
argument_list|,
operator|&
name|dwBufferSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok
condition|)
name|ret
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|userDirectory
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|userDirectory
expr_stmt|;
block|}
operator|::
name|CloseHandle
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|ret
argument_list|)
condition|)
block|{
name|ret
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"USERPROFILE"
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|ret
argument_list|)
condition|)
block|{
name|ret
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"HOMEDRIVE"
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
operator|+
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"HOMEPATH"
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|ret
argument_list|)
condition|)
block|{
name|ret
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"HOME"
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|ret
argument_list|)
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|ret
operator|=
name|QLatin1String
argument_list|(
literal|"\\My Documents"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|ret
argument_list|)
condition|)
endif|#
directive|endif
name|ret
operator|=
name|rootPath
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|ret
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|tempPath
name|QString
name|QFileSystemEngine
operator|::
name|tempPath
parameter_list|()
block|{
name|QString
name|ret
decl_stmt|;
name|wchar_t
name|tempPath
index|[
name|MAX_PATH
index|]
decl_stmt|;
name|DWORD
name|len
init|=
name|GetTempPath
argument_list|(
name|MAX_PATH
argument_list|,
name|tempPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
condition|)
name|ret
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|tempPath
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
while|while
condition|(
name|ret
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
condition|)
name|ret
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ret
operator|=
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|ret
operator|=
name|QLatin1String
argument_list|(
literal|"c:/tmp"
argument_list|)
expr_stmt|;
else|#
directive|else
name|ret
operator|=
name|QLatin1String
argument_list|(
literal|"/Temp"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|setCurrentPath
name|bool
name|QFileSystemEngine
operator|::
name|setCurrentPath
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|)
block|{
name|QFileSystemMetaData
name|meta
decl_stmt|;
name|fillMetaData
argument_list|(
name|entry
argument_list|,
name|meta
argument_list|,
name|QFileSystemMetaData
operator|::
name|ExistsAttribute
operator||
name|QFileSystemMetaData
operator|::
name|DirectoryType
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|meta
operator|.
name|exists
argument_list|()
operator|&&
name|meta
operator|.
name|isDirectory
argument_list|()
operator|)
condition|)
return|return
literal|false
return|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
comment|//TODO: this should really be using nativeFilePath(), but that returns a path in long format \\?\c:\foo
comment|//which causes many problems later on when it's returned through currentPath()
return|return
operator|::
name|SetCurrentDirectory
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|entry
operator|.
name|filePath
argument_list|()
argument_list|)
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
operator|!=
literal|0
return|;
else|#
directive|else
name|qfsPrivateCurrentDir
operator|=
name|entry
operator|.
name|filePath
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|currentPath
name|QFileSystemEntry
name|QFileSystemEngine
operator|::
name|currentPath
parameter_list|()
block|{
name|QString
name|ret
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|DWORD
name|size
init|=
literal|0
decl_stmt|;
name|wchar_t
name|currentName
index|[
name|PATH_MAX
index|]
decl_stmt|;
name|size
operator|=
operator|::
name|GetCurrentDirectory
argument_list|(
name|PATH_MAX
argument_list|,
name|currentName
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|size
operator|>
name|PATH_MAX
condition|)
block|{
name|wchar_t
modifier|*
name|newCurrentName
init|=
operator|new
name|wchar_t
index|[
name|size
index|]
decl_stmt|;
if|if
condition|(
operator|::
name|GetCurrentDirectory
argument_list|(
name|PATH_MAX
argument_list|,
name|newCurrentName
argument_list|)
operator|!=
literal|0
condition|)
name|ret
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|newCurrentName
argument_list|,
name|size
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|newCurrentName
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|currentName
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ret
operator|.
name|length
argument_list|()
operator|>=
literal|2
operator|&&
name|ret
index|[
literal|1
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
condition|)
name|ret
index|[
literal|0
index|]
operator|=
name|ret
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toUpper
argument_list|()
expr_stmt|;
comment|// Force uppercase drive letters.
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
comment|//TODO - a race condition exists when using currentPath / setCurrentPath from multiple threads
if|if
condition|(
name|qfsPrivateCurrentDir
operator|.
name|isEmpty
argument_list|()
condition|)
name|qfsPrivateCurrentDir
operator|=
name|QCoreApplication
operator|::
name|applicationDirPath
argument_list|()
expr_stmt|;
name|ret
operator|=
name|qfsPrivateCurrentDir
expr_stmt|;
endif|#
directive|endif
return|return
name|QFileSystemEntry
argument_list|(
name|ret
argument_list|,
name|QFileSystemEntry
operator|::
name|FromNativePath
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|createLink
name|bool
name|QFileSystemEngine
operator|::
name|createLink
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|source
parameter_list|,
specifier|const
name|QFileSystemEntry
modifier|&
name|target
parameter_list|,
name|QSystemError
modifier|&
name|error
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
argument|source
argument_list|)
name|Q_UNUSED
argument_list|(
argument|target
argument_list|)
name|Q_UNUSED
argument_list|(
argument|error
argument_list|)
return|return
literal|false
return|;
comment|// TODO implement; - code needs to be moved from qfsfileengine_win.cpp
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|copyFile
name|bool
name|QFileSystemEngine
operator|::
name|copyFile
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|source
parameter_list|,
specifier|const
name|QFileSystemEntry
modifier|&
name|target
parameter_list|,
name|QSystemError
modifier|&
name|error
parameter_list|)
block|{
name|bool
name|ret
init|=
operator|::
name|CopyFile
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|source
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|utf16
argument_list|()
argument_list|,
operator|(
name|wchar_t
operator|*
operator|)
name|target
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|utf16
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|!=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|ret
condition|)
name|error
operator|=
name|QSystemError
argument_list|(
operator|::
name|GetLastError
argument_list|()
argument_list|,
name|QSystemError
operator|::
name|NativeError
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|renameFile
name|bool
name|QFileSystemEngine
operator|::
name|renameFile
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|source
parameter_list|,
specifier|const
name|QFileSystemEntry
modifier|&
name|target
parameter_list|,
name|QSystemError
modifier|&
name|error
parameter_list|)
block|{
name|bool
name|ret
init|=
operator|::
name|MoveFile
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|source
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|utf16
argument_list|()
argument_list|,
operator|(
name|wchar_t
operator|*
operator|)
name|target
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|utf16
argument_list|()
argument_list|)
operator|!=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|ret
condition|)
name|error
operator|=
name|QSystemError
argument_list|(
operator|::
name|GetLastError
argument_list|()
argument_list|,
name|QSystemError
operator|::
name|NativeError
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|removeFile
name|bool
name|QFileSystemEngine
operator|::
name|removeFile
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|,
name|QSystemError
modifier|&
name|error
parameter_list|)
block|{
name|bool
name|ret
init|=
operator|::
name|DeleteFile
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|entry
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|utf16
argument_list|()
argument_list|)
operator|!=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|ret
condition|)
name|error
operator|=
name|QSystemError
argument_list|(
operator|::
name|GetLastError
argument_list|()
argument_list|,
name|QSystemError
operator|::
name|NativeError
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|setPermissions
name|bool
name|QFileSystemEngine
operator|::
name|setPermissions
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|,
name|QFile
operator|::
name|Permissions
name|permissions
parameter_list|,
name|QSystemError
modifier|&
name|error
parameter_list|,
name|QFileSystemMetaData
modifier|*
name|data
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|int
name|mode
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|permissions
operator|&
name|QFile
operator|::
name|ReadOwner
operator|||
name|permissions
operator|&
name|QFile
operator|::
name|ReadUser
operator|||
name|permissions
operator|&
name|QFile
operator|::
name|ReadGroup
operator|||
name|permissions
operator|&
name|QFile
operator|::
name|ReadOther
condition|)
name|mode
operator||=
name|_S_IREAD
expr_stmt|;
if|if
condition|(
name|permissions
operator|&
name|QFile
operator|::
name|WriteOwner
operator|||
name|permissions
operator|&
name|QFile
operator|::
name|WriteUser
operator|||
name|permissions
operator|&
name|QFile
operator|::
name|WriteGroup
operator|||
name|permissions
operator|&
name|QFile
operator|::
name|WriteOther
condition|)
name|mode
operator||=
name|_S_IWRITE
expr_stmt|;
if|if
condition|(
name|mode
operator|==
literal|0
condition|)
comment|// not supported
return|return
literal|false
return|;
name|bool
name|ret
init|=
operator|(
operator|::
name|_wchmod
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|entry
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|utf16
argument_list|()
argument_list|,
name|mode
argument_list|)
operator|==
literal|0
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|ret
condition|)
name|error
operator|=
name|QSystemError
argument_list|(
name|errno
argument_list|,
name|QSystemError
operator|::
name|StandardLibraryError
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|fileTimeToQDateTime
specifier|static
specifier|inline
name|QDateTime
name|fileTimeToQDateTime
parameter_list|(
specifier|const
name|FILETIME
modifier|*
name|time
parameter_list|)
block|{
name|QDateTime
name|ret
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|SYSTEMTIME
name|systime
decl_stmt|;
name|FILETIME
name|ftime
decl_stmt|;
name|systime
operator|.
name|wYear
operator|=
literal|1970
expr_stmt|;
name|systime
operator|.
name|wMonth
operator|=
literal|1
expr_stmt|;
name|systime
operator|.
name|wDay
operator|=
literal|1
expr_stmt|;
name|systime
operator|.
name|wHour
operator|=
literal|0
expr_stmt|;
name|systime
operator|.
name|wMinute
operator|=
literal|0
expr_stmt|;
name|systime
operator|.
name|wSecond
operator|=
literal|0
expr_stmt|;
name|systime
operator|.
name|wMilliseconds
operator|=
literal|0
expr_stmt|;
name|systime
operator|.
name|wDayOfWeek
operator|=
literal|4
expr_stmt|;
name|SystemTimeToFileTime
argument_list|(
operator|&
name|systime
argument_list|,
operator|&
name|ftime
argument_list|)
expr_stmt|;
name|unsigned
name|__int64
name|acttime
init|=
operator|(
name|unsigned
name|__int64
operator|)
name|time
operator|->
name|dwHighDateTime
operator|<<
literal|32
operator||
name|time
operator|->
name|dwLowDateTime
decl_stmt|;
name|FileTimeToSystemTime
argument_list|(
name|time
argument_list|,
operator|&
name|systime
argument_list|)
expr_stmt|;
name|unsigned
name|__int64
name|time1970
init|=
operator|(
name|unsigned
name|__int64
operator|)
name|ftime
operator|.
name|dwHighDateTime
operator|<<
literal|32
operator||
name|ftime
operator|.
name|dwLowDateTime
decl_stmt|;
name|unsigned
name|__int64
name|difftime
init|=
name|acttime
operator|-
name|time1970
decl_stmt|;
name|difftime
operator|/=
literal|10000000
expr_stmt|;
name|ret
operator|.
name|setTime_t
argument_list|(
operator|(
name|unsigned
name|int
operator|)
name|difftime
argument_list|)
expr_stmt|;
else|#
directive|else
name|SYSTEMTIME
name|sTime
decl_stmt|,
name|lTime
decl_stmt|;
name|FileTimeToSystemTime
argument_list|(
name|time
argument_list|,
operator|&
name|sTime
argument_list|)
expr_stmt|;
name|SystemTimeToTzSpecificLocalTime
argument_list|(
literal|0
argument_list|,
operator|&
name|sTime
argument_list|,
operator|&
name|lTime
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setDate
argument_list|(
name|QDate
argument_list|(
name|lTime
operator|.
name|wYear
argument_list|,
name|lTime
operator|.
name|wMonth
argument_list|,
name|lTime
operator|.
name|wDay
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setTime
argument_list|(
name|QTime
argument_list|(
name|lTime
operator|.
name|wHour
argument_list|,
name|lTime
operator|.
name|wMinute
argument_list|,
name|lTime
operator|.
name|wSecond
argument_list|,
name|lTime
operator|.
name|wMilliseconds
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|creationTime
name|QDateTime
name|QFileSystemMetaData
operator|::
name|creationTime
parameter_list|()
specifier|const
block|{
return|return
name|fileTimeToQDateTime
argument_list|(
operator|&
name|creationTime_
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|modificationTime
name|QDateTime
name|QFileSystemMetaData
operator|::
name|modificationTime
parameter_list|()
specifier|const
block|{
return|return
name|fileTimeToQDateTime
argument_list|(
operator|&
name|lastWriteTime_
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|accessTime
name|QDateTime
name|QFileSystemMetaData
operator|::
name|accessTime
parameter_list|()
specifier|const
block|{
return|return
name|fileTimeToQDateTime
argument_list|(
operator|&
name|lastAccessTime_
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
