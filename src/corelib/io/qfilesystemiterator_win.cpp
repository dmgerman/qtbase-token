begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|WINAPI_FAMILY
argument_list|)
end_if
begin_if
if|#
directive|if
name|_WIN32_WINNT
operator|<
literal|0x0500
end_if
begin_undef
DECL|macro|_WIN32_WINNT
undef|#
directive|undef
name|_WIN32_WINNT
end_undef
begin_define
DECL|macro|_WIN32_WINNT
define|#
directive|define
name|_WIN32_WINNT
value|0x0500
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// _WIN32_WINNT< 0x500
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !WINAPI_FAMILY
end_comment
begin_include
include|#
directive|include
file|"qfilesystemiterator_p.h"
end_include
begin_include
include|#
directive|include
file|"qfilesystemengine_p.h"
end_include
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qt_windows.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|done
name|bool
name|done
init|=
literal|true
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QFileSystemIterator
name|QFileSystemIterator
operator|::
name|QFileSystemIterator
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|,
name|QDir
operator|::
name|Filters
name|filters
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|nameFilters
parameter_list|,
name|QDirIterator
operator|::
name|IteratorFlags
name|flags
parameter_list|)
member_init_list|:
name|nativePath
argument_list|(
name|entry
operator|.
name|nativeFilePath
argument_list|()
argument_list|)
member_init_list|,
name|dirPath
argument_list|(
name|entry
operator|.
name|filePath
argument_list|()
argument_list|)
member_init_list|,
name|findFileHandle
argument_list|(
name|INVALID_HANDLE_VALUE
argument_list|)
member_init_list|,
name|uncFallback
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|uncShareIndex
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|onlyDirs
argument_list|(
literal|false
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|nameFilters
argument_list|)
name|Q_UNUSED
argument_list|(
argument|flags
argument_list|)
if|if
condition|(
name|nativePath
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|".lnk"
argument_list|)
argument_list|)
condition|)
block|{
name|QFileSystemMetaData
name|metaData
decl_stmt|;
name|QFileSystemEntry
name|link
init|=
name|QFileSystemEngine
operator|::
name|getLinkTarget
argument_list|(
name|entry
argument_list|,
name|metaData
argument_list|)
decl_stmt|;
name|nativePath
operator|=
name|link
operator|.
name|nativeFilePath
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|nativePath
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
condition|)
name|nativePath
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
expr_stmt|;
name|nativePath
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'*'
argument_list|)
argument_list|)
expr_stmt|;
comment|// In MSVC2015+ case we prepend //?/ for longer file-name support
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
operator|&&
name|_MSC_VER
operator|<
literal|1900
if|if
condition|(
name|nativePath
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
condition|)
name|nativePath
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|dirPath
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
name|dirPath
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|filters
operator|&
operator|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|Drives
operator|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|filters
operator|&
operator|(
name|QDir
operator|::
name|Files
operator|)
operator|)
operator|)
condition|)
name|onlyDirs
operator|=
literal|true
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QFileSystemIterator
name|QFileSystemIterator
operator|::
name|~
name|QFileSystemIterator
parameter_list|()
block|{
if|if
condition|(
name|findFileHandle
operator|!=
name|INVALID_HANDLE_VALUE
condition|)
name|FindClose
argument_list|(
name|findFileHandle
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|advance
name|bool
name|QFileSystemIterator
operator|::
name|advance
parameter_list|(
name|QFileSystemEntry
modifier|&
name|fileEntry
parameter_list|,
name|QFileSystemMetaData
modifier|&
name|metaData
parameter_list|)
block|{
name|bool
name|haveData
init|=
literal|false
decl_stmt|;
name|WIN32_FIND_DATA
name|findData
decl_stmt|;
if|if
condition|(
name|findFileHandle
operator|==
name|INVALID_HANDLE_VALUE
operator|&&
operator|!
name|uncFallback
condition|)
block|{
name|haveData
operator|=
literal|true
expr_stmt|;
name|int
name|infoLevel
init|=
literal|0
decl_stmt|;
comment|// FindExInfoStandard;
name|DWORD
name|dwAdditionalFlags
init|=
literal|0
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
if|if
condition|(
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|>=
name|QSysInfo
operator|::
name|WV_WINDOWS7
condition|)
block|{
name|dwAdditionalFlags
operator|=
literal|2
expr_stmt|;
comment|// FIND_FIRST_EX_LARGE_FETCH
name|infoLevel
operator|=
literal|1
expr_stmt|;
comment|// FindExInfoBasic;
block|}
endif|#
directive|endif
name|int
name|searchOps
init|=
literal|0
decl_stmt|;
comment|// FindExSearchNameMatch
if|if
condition|(
name|onlyDirs
condition|)
name|searchOps
operator|=
literal|1
expr_stmt|;
comment|// FindExSearchLimitToDirectories
name|findFileHandle
operator|=
name|FindFirstFileEx
argument_list|(
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|nativePath
operator|.
name|utf16
argument_list|()
argument_list|,
name|FINDEX_INFO_LEVELS
argument_list|(
name|infoLevel
argument_list|)
argument_list|,
operator|&
name|findData
argument_list|,
name|FINDEX_SEARCH_OPS
argument_list|(
name|searchOps
argument_list|)
argument_list|,
literal|0
argument_list|,
name|dwAdditionalFlags
argument_list|)
expr_stmt|;
if|if
condition|(
name|findFileHandle
operator|==
name|INVALID_HANDLE_VALUE
condition|)
block|{
if|if
condition|(
name|nativePath
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\\\?\\UNC\\"
argument_list|)
argument_list|)
condition|)
block|{
name|QStringList
name|parts
init|=
name|nativePath
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|count
argument_list|()
operator|==
literal|4
operator|&&
name|QFileSystemEngine
operator|::
name|uncListSharesOnServer
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\\\"
argument_list|)
operator|+
name|parts
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|&
name|uncShares
argument_list|)
condition|)
block|{
if|if
condition|(
name|uncShares
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// No shares found in the server
else|else
name|uncFallback
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|findFileHandle
operator|==
name|INVALID_HANDLE_VALUE
operator|&&
operator|!
name|uncFallback
condition|)
return|return
literal|false
return|;
comment|// Retrieve the new file information.
if|if
condition|(
operator|!
name|haveData
condition|)
block|{
if|if
condition|(
name|uncFallback
condition|)
block|{
if|if
condition|(
operator|++
name|uncShareIndex
operator|>=
name|uncShares
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|FindNextFile
argument_list|(
name|findFileHandle
argument_list|,
operator|&
name|findData
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
block|}
comment|// Create the new file system entry& meta data.
if|if
condition|(
name|uncFallback
condition|)
block|{
name|fileEntry
operator|=
name|QFileSystemEntry
argument_list|(
name|dirPath
operator|+
name|uncShares
operator|.
name|at
argument_list|(
name|uncShareIndex
argument_list|)
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|fillFromFileAttribute
argument_list|(
name|FILE_ATTRIBUTE_DIRECTORY
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|QString
name|fileName
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|findData
operator|.
name|cFileName
argument_list|)
decl_stmt|;
name|fileEntry
operator|=
name|QFileSystemEntry
argument_list|(
name|dirPath
operator|+
name|fileName
argument_list|)
expr_stmt|;
name|metaData
operator|=
name|QFileSystemMetaData
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|fileName
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|".lnk"
argument_list|)
argument_list|)
condition|)
block|{
name|metaData
operator|.
name|fillFromFindData
argument_list|(
name|findData
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
