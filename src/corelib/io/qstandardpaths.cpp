begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qstandardpaths.h"
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<qhash.h>
end_include
begin_include
include|#
directive|include
file|<qobject.h>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STANDARDPATHS
end_ifndef
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*!     \class QStandardPaths     \brief The QStandardPaths class provides methods for accessing standard paths.     \since 5.0      This class contains functions to query standard locations on the local     filesystem, for common tasks such as user-specific directories or system-wide     configuration directories. */
comment|/*!     \enum QStandardPaths::StandardLocation      This enum describes the different locations that can be queried using     methods such as QStandardPaths::storageLocation, QStandardPaths::standardLocations,     and QStandardPaths::displayName.      \value DesktopLocation Returns the user's desktop directory.     \value DocumentsLocation Returns the user's document.     \value FontsLocation Returns the user's fonts.     \value ApplicationsLocation Returns the user's applications.     \value MusicLocation Returns the users music.     \value MoviesLocation Returns the user's movies.     \value PicturesLocation Returns the user's pictures.     \value TempLocation Returns the system's temporary directory.     \value HomeLocation Returns the user's home directory.     \value DataLocation Returns a directory location where persistent            application data can be stored. QCoreApplication::organizationName            and QCoreApplication::applicationName are appended to the directory location            returned for GenericDataLocation.     \value CacheLocation Returns a directory location where user-specific            non-essential (cached) data should be written.     \value GenericDataLocation Returns a directory location where persistent            data shared across applications can be stored.     \value ConfigLocation Returns a directory location where user-specific            configuration files should be written.       \sa storageLocation() standardLocations() displayName() locate() locateAll() */
comment|/*!     \fn QString QStandardPaths::storageLocation(StandardLocation type)      Returns the directory where files of \a type should be written to, or an empty string     if the location cannot be determined.      \note The storage location returned can be a directory that does not exist; i.e., it     may need to be created by the system or the user.      \note On Symbian OS, ApplicationsLocation always point /sys/bin folder on the same drive     with executable. FontsLocation always points to folder on ROM drive. Symbian OS does not     have desktop concept, DesktopLocation returns same path as DocumentsLocation.     Rest of the standard locations point to folder on same drive with executable, except     that if executable is in ROM the folder from C drive is returned. */
comment|/*!    \fn QStringList QStandardPaths::standardLocations(StandardLocation type)     Returns all the directories where files of \a type belong.     Much like the PATH variable, it returns the directories in order of priority,    starting with the user-specific storageLocation() for the \a type.  */
comment|// TODO add XDG_RUNTIME_DIR?
comment|/*!     \enum QStandardPaths::LocateOption      This enum describes the different flags that can be used for     controlling the behavior of QStandardPaths::locate and     QStandardPaths::locateAll.      \value LocateFile return only files     \value LocateDirectory return only directories */
DECL|function|existsAsSpecified
specifier|static
name|bool
name|existsAsSpecified
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
name|QStandardPaths
operator|::
name|LocateOptions
name|options
parameter_list|)
block|{
if|if
condition|(
name|options
operator|&
name|QStandardPaths
operator|::
name|LocateDirectory
condition|)
return|return
name|QDir
argument_list|(
name|path
argument_list|)
operator|.
name|exists
argument_list|()
return|;
return|return
name|QFileInfo
argument_list|(
name|path
argument_list|)
operator|.
name|isFile
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!    Tries to find a file or directory called \a fileName in the standard locations    for \a type.     The full path to the first file or directory (depending on \a options) found is returned.    If no such file or directory can be found, an empty string is returned.  */
end_comment
begin_function
DECL|function|locate
name|QString
name|QStandardPaths
operator|::
name|locate
parameter_list|(
name|StandardLocation
name|type
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
name|LocateOptions
name|options
parameter_list|)
block|{
specifier|const
name|QStringList
modifier|&
name|dirs
init|=
name|standardLocations
argument_list|(
name|type
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|const_iterator
name|dir
init|=
name|dirs
operator|.
name|constBegin
argument_list|()
init|;
name|dir
operator|!=
name|dirs
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|dir
control|)
block|{
specifier|const
name|QString
name|path
init|=
operator|*
name|dir
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|fileName
decl_stmt|;
if|if
condition|(
name|existsAsSpecified
argument_list|(
name|path
argument_list|,
name|options
argument_list|)
condition|)
return|return
name|path
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!    Tries to find all files or directories called \a fileName in the standard locations    for \a type.     The \a options flag allows to specify whether to look for files or directories.     Returns the list of all the files that were found.  */
end_comment
begin_function
DECL|function|locateAll
name|QStringList
name|QStandardPaths
operator|::
name|locateAll
parameter_list|(
name|StandardLocation
name|type
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
name|LocateOptions
name|options
parameter_list|)
block|{
specifier|const
name|QStringList
modifier|&
name|dirs
init|=
name|standardLocations
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|QStringList
name|result
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|const_iterator
name|dir
init|=
name|dirs
operator|.
name|constBegin
argument_list|()
init|;
name|dir
operator|!=
name|dirs
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|dir
control|)
block|{
specifier|const
name|QString
name|path
init|=
operator|*
name|dir
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|fileName
decl_stmt|;
if|if
condition|(
name|existsAsSpecified
argument_list|(
name|path
argument_list|,
name|options
argument_list|)
condition|)
name|result
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QString QStandardPaths::displayName(StandardLocation type)      Returns a localized display name for the given location \a type or     an empty QString if no relevant location can be found. */
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_STANDARDPATHS
end_comment
end_unit
