begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qfilesystemiterator_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMITERATOR
end_ifndef
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QFileSystemIterator
name|QFileSystemIterator
operator|::
name|QFileSystemIterator
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|,
name|QDir
operator|::
name|Filters
name|filters
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|nameFilters
parameter_list|,
name|QDirIterator
operator|::
name|IteratorFlags
name|flags
parameter_list|)
member_init_list|:
name|nativePath
argument_list|(
name|entry
operator|.
name|nativeFilePath
argument_list|()
argument_list|)
member_init_list|,
name|dir
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|dirEntry
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|lastError
argument_list|(
literal|0
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|filters
argument_list|)
name|Q_UNUSED
argument_list|(
argument|nameFilters
argument_list|)
name|Q_UNUSED
argument_list|(
argument|flags
argument_list|)
if|if
condition|(
operator|(
name|dir
operator|=
name|QT_OPENDIR
argument_list|(
name|nativePath
operator|.
name|constData
argument_list|()
argument_list|)
operator|)
operator|==
literal|0
condition|)
block|{
name|lastError
operator|=
name|errno
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|nativePath
operator|.
name|endsWith
argument_list|(
literal|'/'
argument_list|)
condition|)
name|nativePath
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|_POSIX_THREAD_SAFE_FUNCTIONS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_CYGWIN
argument_list|)
comment|// ### Race condition; we should use fpathconf and dirfd().
name|size_t
name|maxPathName
init|=
operator|::
name|pathconf
argument_list|(
name|nativePath
operator|.
name|constData
argument_list|()
argument_list|,
name|_PC_NAME_MAX
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxPathName
operator|==
name|size_t
argument_list|(
operator|-
literal|1
argument_list|)
condition|)
name|maxPathName
operator|=
name|FILENAME_MAX
expr_stmt|;
name|maxPathName
operator|+=
sizeof|sizeof
argument_list|(
name|QT_DIRENT
argument_list|)
operator|+
literal|1
expr_stmt|;
name|QT_DIRENT
modifier|*
name|p
init|=
cast|reinterpret_cast
argument_list|<
name|QT_DIRENT
operator|*
argument_list|>
argument_list|(
operator|::
name|malloc
argument_list|(
name|maxPathName
argument_list|)
argument_list|)
decl_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|mt_file
operator|.
name|reset
argument_list|(
name|p
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QFileSystemIterator
name|QFileSystemIterator
operator|::
name|~
name|QFileSystemIterator
parameter_list|()
block|{
if|if
condition|(
name|dir
condition|)
name|QT_CLOSEDIR
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|advance
name|bool
name|QFileSystemIterator
operator|::
name|advance
parameter_list|(
name|QFileSystemEntry
modifier|&
name|fileEntry
parameter_list|,
name|QFileSystemMetaData
modifier|&
name|metaData
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dir
condition|)
return|return
literal|false
return|;
if|#
directive|if
name|defined
argument_list|(
name|_POSIX_THREAD_SAFE_FUNCTIONS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_CYGWIN
argument_list|)
name|lastError
operator|=
name|QT_READDIR_R
argument_list|(
name|dir
argument_list|,
name|mt_file
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|dirEntry
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastError
condition|)
return|return
literal|false
return|;
else|#
directive|else
comment|// ### add local lock to prevent breaking reentrancy
name|dirEntry
operator|=
name|QT_READDIR
argument_list|(
name|dir
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// _POSIX_THREAD_SAFE_FUNCTIONS
if|if
condition|(
name|dirEntry
condition|)
block|{
name|fileEntry
operator|=
name|QFileSystemEntry
argument_list|(
name|nativePath
operator|+
name|QByteArray
argument_list|(
name|dirEntry
operator|->
name|d_name
argument_list|)
argument_list|,
name|QFileSystemEntry
operator|::
name|FromNativePath
argument_list|()
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|fillFromDirEnt
argument_list|(
operator|*
name|dirEntry
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|lastError
operator|=
name|errno
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_FILESYSTEMITERATOR
end_comment
end_unit
