begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSETTINGS_H
end_ifndef
begin_define
DECL|macro|QSETTINGS_H
define|#
directive|define
name|QSETTINGS_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qobject.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvariant.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_END_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_SETTINGS
include|#
directive|include
file|<ctype.h>
name|QT_BEGIN_NAMESPACE
ifdef|#
directive|ifdef
name|Status
comment|// we seem to pick up a macro Status --> int somewhere
DECL|macro|Status
undef|#
directive|undef
name|Status
endif|#
directive|endif
DECL|variable|QIODevice
name|class
name|QIODevice
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QSettingsPrivate
name|class
name|QSettingsPrivate
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
end_ifndef
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QSettings
range|:
name|public
name|QObject
else|#
directive|else
name|class
name|Q_CORE_EXPORT
name|QSettings
endif|#
directive|endif
block|{
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
name|Q_OBJECT
else|#
directive|else
name|QScopedPointer
operator|<
name|QSettingsPrivate
operator|>
name|d_ptr
block|;
endif|#
directive|endif
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QSettings
argument_list|)
name|public
operator|:
expr|enum
name|Status
block|{
name|NoError
operator|=
literal|0
block|,
name|AccessError
block|,
name|FormatError
block|}
block|;      enum
name|Format
block|{
name|NativeFormat
block|,
name|IniFormat
block|,
name|InvalidFormat
operator|=
literal|16
block|,
name|CustomFormat1
block|,
name|CustomFormat2
block|,
name|CustomFormat3
block|,
name|CustomFormat4
block|,
name|CustomFormat5
block|,
name|CustomFormat6
block|,
name|CustomFormat7
block|,
name|CustomFormat8
block|,
name|CustomFormat9
block|,
name|CustomFormat10
block|,
name|CustomFormat11
block|,
name|CustomFormat12
block|,
name|CustomFormat13
block|,
name|CustomFormat14
block|,
name|CustomFormat15
block|,
name|CustomFormat16
block|}
block|;      enum
name|Scope
block|{
name|UserScope
block|,
name|SystemScope
block|}
block|;
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
name|explicit
name|QSettings
argument_list|(
specifier|const
name|QString
operator|&
name|organization
argument_list|,
specifier|const
name|QString
operator|&
name|application
operator|=
name|QString
argument_list|()
argument_list|,
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|QSettings
argument_list|(
argument|Scope scope
argument_list|,
argument|const QString&organization
argument_list|,
argument|const QString&application = QString()
argument_list|,
argument|QObject *parent =
literal|0
argument_list|)
block|;
name|QSettings
argument_list|(
argument|Format format
argument_list|,
argument|Scope scope
argument_list|,
argument|const QString&organization
argument_list|,
argument|const QString&application = QString()
argument_list|,
argument|QObject *parent =
literal|0
argument_list|)
block|;
name|QSettings
argument_list|(
argument|const QString&fileName
argument_list|,
argument|Format format
argument_list|,
argument|QObject *parent =
literal|0
argument_list|)
block|;
name|explicit
name|QSettings
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
else|#
directive|else
name|explicit
name|QSettings
argument_list|(
specifier|const
name|QString
operator|&
name|organization
argument_list|,
specifier|const
name|QString
operator|&
name|application
operator|=
name|QString
argument_list|()
argument_list|)
block|;
name|QSettings
argument_list|(
argument|Scope scope
argument_list|,
argument|const QString&organization
argument_list|,
argument|const QString&application = QString()
argument_list|)
block|;
name|QSettings
argument_list|(
argument|Format format
argument_list|,
argument|Scope scope
argument_list|,
argument|const QString&organization
argument_list|,
argument|const QString&application = QString()
argument_list|)
block|;
name|QSettings
argument_list|(
argument|const QString&fileName
argument_list|,
argument|Format format
argument_list|)
block|;
endif|#
directive|endif
operator|~
name|QSettings
argument_list|()
block|;
name|void
name|clear
argument_list|()
block|;
name|void
name|sync
argument_list|()
block|;
name|Status
name|status
argument_list|()
specifier|const
block|;
name|void
name|beginGroup
argument_list|(
specifier|const
name|QString
operator|&
name|prefix
argument_list|)
block|;
name|void
name|endGroup
argument_list|()
block|;
name|QString
name|group
argument_list|()
specifier|const
block|;
name|int
name|beginReadArray
argument_list|(
specifier|const
name|QString
operator|&
name|prefix
argument_list|)
block|;
name|void
name|beginWriteArray
argument_list|(
argument|const QString&prefix
argument_list|,
argument|int size = -
literal|1
argument_list|)
block|;
name|void
name|endArray
argument_list|()
block|;
name|void
name|setArrayIndex
argument_list|(
argument|int i
argument_list|)
block|;
name|QStringList
name|allKeys
argument_list|()
specifier|const
block|;
name|QStringList
name|childKeys
argument_list|()
specifier|const
block|;
name|QStringList
name|childGroups
argument_list|()
specifier|const
block|;
name|bool
name|isWritable
argument_list|()
specifier|const
block|;
name|void
name|setValue
argument_list|(
specifier|const
name|QString
operator|&
name|key
argument_list|,
specifier|const
name|QVariant
operator|&
name|value
argument_list|)
block|;
name|QVariant
name|value
argument_list|(
argument|const QString&key
argument_list|,
argument|const QVariant&defaultValue = QVariant()
argument_list|)
specifier|const
block|;
name|void
name|remove
argument_list|(
specifier|const
name|QString
operator|&
name|key
argument_list|)
block|;
name|bool
name|contains
argument_list|(
argument|const QString&key
argument_list|)
specifier|const
block|;
name|void
name|setFallbacksEnabled
argument_list|(
argument|bool b
argument_list|)
block|;
name|bool
name|fallbacksEnabled
argument_list|()
specifier|const
block|;
name|QString
name|fileName
argument_list|()
specifier|const
block|;
name|Format
name|format
argument_list|()
specifier|const
block|;
name|Scope
name|scope
argument_list|()
specifier|const
block|;
name|QString
name|organizationName
argument_list|()
specifier|const
block|;
name|QString
name|applicationName
argument_list|()
specifier|const
block|;
ifndef|#
directive|ifndef
name|QT_NO_TEXTCODEC
name|void
name|setIniCodec
argument_list|(
name|QTextCodec
operator|*
name|codec
argument_list|)
block|;
name|void
name|setIniCodec
argument_list|(
specifier|const
name|char
operator|*
name|codecName
argument_list|)
block|;
name|QTextCodec
operator|*
name|iniCodec
argument_list|()
specifier|const
block|;
endif|#
directive|endif
specifier|static
name|void
name|setDefaultFormat
argument_list|(
argument|Format format
argument_list|)
block|;
specifier|static
name|Format
name|defaultFormat
argument_list|()
block|;
specifier|static
name|void
name|setSystemIniPath
argument_list|(
specifier|const
name|QString
operator|&
name|dir
argument_list|)
block|;
comment|// ### Qt 6: remove (use setPath() instead)
specifier|static
name|void
name|setUserIniPath
argument_list|(
specifier|const
name|QString
operator|&
name|dir
argument_list|)
block|;
comment|// ### Qt 6: remove (use setPath() instead)
specifier|static
name|void
name|setPath
argument_list|(
argument|Format format
argument_list|,
argument|Scope scope
argument_list|,
argument|const QString&path
argument_list|)
block|;
typedef|typedef
name|QMap
operator|<
name|QString
operator|,
name|QVariant
operator|>
name|SettingsMap
expr_stmt|;
end_decl_stmt
begin_typedef
typedef|typedef
name|bool
function_decl|(
modifier|*
name|ReadFunc
function_decl|)
parameter_list|(
name|QIODevice
modifier|&
name|device
parameter_list|,
name|SettingsMap
modifier|&
name|map
parameter_list|)
function_decl|;
end_typedef
begin_typedef
typedef|typedef
name|bool
function_decl|(
modifier|*
name|WriteFunc
function_decl|)
parameter_list|(
name|QIODevice
modifier|&
name|device
parameter_list|,
specifier|const
name|SettingsMap
modifier|&
name|map
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
specifier|static
name|Format
name|registerFormat
argument_list|(
specifier|const
name|QString
operator|&
name|extension
argument_list|,
name|ReadFunc
name|readFunc
argument_list|,
name|WriteFunc
name|writeFunc
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|caseSensitivity
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl_stmt|;
end_decl_stmt
begin_label
name|protected
label|:
end_label
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
end_ifndef
begin_function_decl
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_label
name|private
label|:
end_label
begin_macro
name|Q_DISABLE_COPY
argument_list|(
argument|QSettings
argument_list|)
end_macro
begin_expr_stmt
unit|};
name|QT_END_NAMESPACE
endif|#
directive|endif
comment|// QT_NO_SETTINGS
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QSETTINGS_H
end_comment
end_unit
