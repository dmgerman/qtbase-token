begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsettings.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SETTINGS
end_ifndef
begin_include
include|#
directive|include
file|"qsettings_p.h"
end_include
begin_include
include|#
directive|include
file|"qdatetime.h"
end_include
begin_include
include|#
directive|include
file|"qdir.h"
end_include
begin_include
include|#
directive|include
file|"qvarlengtharray.h"
end_include
begin_include
include|#
directive|include
file|"private/qcore_mac_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
end_ifndef
begin_include
include|#
directive|include
file|"qcoreapplication.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QOBJECT
end_comment
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|hostNames
specifier|static
specifier|const
name|CFStringRef
name|hostNames
index|[
literal|2
index|]
init|=
block|{
name|kCFPreferencesCurrentHost
block|,
name|kCFPreferencesAnyHost
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|numHostNames
specifier|static
specifier|const
name|int
name|numHostNames
init|=
literal|2
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*     On the Mac, it is more natural to use '.' as the key separator     than '/'. Therefore, it makes sense to replace '/' with '.' in     keys. Then we replace '.' with middle dots (which we can't show     here) and middle dots with '/'. A key like "4.0/BrowserCommand"     becomes "4<middot>0.BrowserCommand". */
end_comment
begin_enum
DECL|enum|RotateShift
DECL|enumerator|Macify
DECL|enumerator|Qtify
enum|enum
name|RotateShift
block|{
name|Macify
init|=
literal|1
block|,
name|Qtify
init|=
literal|2
block|}
enum|;
end_enum
begin_function
DECL|function|rotateSlashesDotsAndMiddots
specifier|static
name|QString
name|rotateSlashesDotsAndMiddots
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
name|int
name|shift
parameter_list|)
block|{
specifier|static
specifier|const
name|int
name|NumKnights
init|=
literal|3
decl_stmt|;
specifier|static
specifier|const
name|char
name|knightsOfTheRoundTable
index|[
name|NumKnights
index|]
init|=
block|{
literal|'/'
block|,
literal|'.'
block|,
literal|'\xb7'
block|}
decl_stmt|;
name|QString
name|result
init|=
name|key
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NumKnights
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|result
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
name|knightsOfTheRoundTable
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|QLatin1Char
argument_list|(
name|knightsOfTheRoundTable
index|[
operator|(
name|j
operator|+
name|shift
operator|)
operator|%
name|NumKnights
index|]
argument_list|)
operator|.
name|unicode
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|macKey
specifier|static
name|QCFType
argument_list|<
name|CFStringRef
argument_list|>
name|macKey
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
block|{
return|return
name|QCFString
operator|::
name|toCFStringRef
argument_list|(
name|rotateSlashesDotsAndMiddots
argument_list|(
name|key
argument_list|,
name|Macify
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qtKey
specifier|static
name|QString
name|qtKey
parameter_list|(
name|CFStringRef
name|cfkey
parameter_list|)
block|{
return|return
name|rotateSlashesDotsAndMiddots
argument_list|(
name|QCFString
operator|::
name|toQString
argument_list|(
name|cfkey
argument_list|)
argument_list|,
name|Qtify
argument_list|)
return|;
block|}
end_function
begin_function_decl
specifier|static
name|QCFType
argument_list|<
name|CFPropertyListRef
argument_list|>
name|macValue
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|macList
specifier|static
name|CFArrayRef
name|macList
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|list
parameter_list|)
block|{
name|int
name|n
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|QCFType
argument_list|<
name|CFPropertyListRef
argument_list|>
argument_list|>
name|cfvalues
argument_list|(
name|n
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
name|cfvalues
index|[
name|i
index|]
operator|=
name|macValue
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|CFArrayCreate
argument_list|(
name|kCFAllocatorDefault
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|void
operator|*
operator|*
argument_list|>
argument_list|(
name|cfvalues
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|CFIndex
argument_list|(
name|n
argument_list|)
argument_list|,
operator|&
name|kCFTypeArrayCallBacks
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|macValue
specifier|static
name|QCFType
argument_list|<
name|CFPropertyListRef
argument_list|>
name|macValue
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
name|CFPropertyListRef
name|result
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|value
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|ByteArray
case|:
block|{
name|QByteArray
name|ba
init|=
name|value
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|result
operator|=
name|CFDataCreate
argument_list|(
name|kCFAllocatorDefault
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|UInt8
operator|*
argument_list|>
argument_list|(
name|ba
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|CFIndex
argument_list|(
name|ba
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
comment|// should be same as below (look for LIST)
case|case
name|QVariant
operator|::
name|List
case|:
case|case
name|QVariant
operator|::
name|StringList
case|:
case|case
name|QVariant
operator|::
name|Polygon
case|:
name|result
operator|=
name|macList
argument_list|(
name|value
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Map
case|:
block|{
comment|/*                 QMap<QString, QVariant> is potentially a multimap,                 whereas CFDictionary is a single-valued map. To allow                 for multiple values with the same key, we store                 multiple values in a CFArray. To avoid ambiguities,                 we also wrap lists in a CFArray singleton.             */
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map
init|=
name|value
operator|.
name|toMap
argument_list|()
decl_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|map
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|int
name|maxUniqueKeys
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numUniqueKeys
init|=
literal|0
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|QCFType
argument_list|<
name|CFPropertyListRef
argument_list|>
argument_list|>
name|cfkeys
argument_list|(
name|maxUniqueKeys
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|QCFType
argument_list|<
name|CFPropertyListRef
argument_list|>
argument_list|>
name|cfvalues
argument_list|(
name|maxUniqueKeys
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|map
operator|.
name|constEnd
argument_list|()
condition|)
block|{
specifier|const
name|QString
modifier|&
name|key
init|=
name|i
operator|.
name|key
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|values
decl_stmt|;
do|do
block|{
name|values
operator|<<
name|i
operator|.
name|value
argument_list|()
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
do|while
condition|(
name|i
operator|!=
name|map
operator|.
name|constEnd
argument_list|()
operator|&&
name|i
operator|.
name|key
argument_list|()
operator|==
name|key
condition|)
do|;
name|bool
name|singleton
init|=
operator|(
name|values
operator|.
name|count
argument_list|()
operator|==
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|singleton
condition|)
block|{
switch|switch
condition|(
name|values
operator|.
name|first
argument_list|()
operator|.
name|type
argument_list|()
condition|)
block|{
comment|// should be same as above (look for LIST)
case|case
name|QVariant
operator|::
name|List
case|:
case|case
name|QVariant
operator|::
name|StringList
case|:
case|case
name|QVariant
operator|::
name|Polygon
case|:
name|singleton
operator|=
literal|false
expr_stmt|;
default|default:
empty_stmt|;
block|}
block|}
name|cfkeys
index|[
name|numUniqueKeys
index|]
operator|=
name|QCFString
operator|::
name|toCFStringRef
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|cfvalues
index|[
name|numUniqueKeys
index|]
operator|=
name|singleton
condition|?
name|macValue
argument_list|(
name|values
operator|.
name|first
argument_list|()
argument_list|)
else|:
name|macList
argument_list|(
name|values
argument_list|)
expr_stmt|;
operator|++
name|numUniqueKeys
expr_stmt|;
block|}
name|result
operator|=
name|CFDictionaryCreate
argument_list|(
name|kCFAllocatorDefault
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|void
operator|*
operator|*
argument_list|>
argument_list|(
name|cfkeys
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|void
operator|*
operator|*
argument_list|>
argument_list|(
name|cfvalues
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|CFIndex
argument_list|(
name|numUniqueKeys
argument_list|)
argument_list|,
operator|&
name|kCFTypeDictionaryKeyCallBacks
argument_list|,
operator|&
name|kCFTypeDictionaryValueCallBacks
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QVariant
operator|::
name|DateTime
case|:
block|{
comment|/*                 CFDate, unlike QDateTime, doesn't store timezone information.             */
name|QDateTime
name|dt
init|=
name|value
operator|.
name|toDateTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|dt
operator|.
name|timeSpec
argument_list|()
operator|==
name|Qt
operator|::
name|LocalTime
condition|)
block|{
name|QDateTime
name|reference
decl_stmt|;
name|reference
operator|.
name|setTime_t
argument_list|(
operator|(
name|uint
operator|)
name|kCFAbsoluteTimeIntervalSince1970
argument_list|)
expr_stmt|;
name|result
operator|=
name|CFDateCreate
argument_list|(
name|kCFAllocatorDefault
argument_list|,
name|CFAbsoluteTime
argument_list|(
name|reference
operator|.
name|secsTo
argument_list|(
name|dt
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
goto|goto
name|string_case
goto|;
block|}
block|}
break|break;
case|case
name|QVariant
operator|::
name|Bool
case|:
name|result
operator|=
name|value
operator|.
name|toBool
argument_list|()
condition|?
name|kCFBooleanTrue
else|:
name|kCFBooleanFalse
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Int
case|:
case|case
name|QVariant
operator|::
name|UInt
case|:
block|{
name|int
name|n
init|=
name|value
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|result
operator|=
name|CFNumberCreate
argument_list|(
name|kCFAllocatorDefault
argument_list|,
name|kCFNumberIntType
argument_list|,
operator|&
name|n
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QVariant
operator|::
name|Double
case|:
block|{
name|double
name|n
init|=
name|value
operator|.
name|toDouble
argument_list|()
decl_stmt|;
name|result
operator|=
name|CFNumberCreate
argument_list|(
name|kCFAllocatorDefault
argument_list|,
name|kCFNumberDoubleType
argument_list|,
operator|&
name|n
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QVariant
operator|::
name|LongLong
case|:
case|case
name|QVariant
operator|::
name|ULongLong
case|:
block|{
name|qint64
name|n
init|=
name|value
operator|.
name|toLongLong
argument_list|()
decl_stmt|;
name|result
operator|=
name|CFNumberCreate
argument_list|(
literal|0
argument_list|,
name|kCFNumberLongLongType
argument_list|,
operator|&
name|n
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QVariant
operator|::
name|String
case|:
name|string_case
label|:
default|default:
name|result
operator|=
name|QCFString
operator|::
name|toCFStringRef
argument_list|(
name|QSettingsPrivate
operator|::
name|variantToString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|qtValue
specifier|static
name|QVariant
name|qtValue
parameter_list|(
name|CFPropertyListRef
name|cfvalue
parameter_list|)
block|{
if|if
condition|(
operator|!
name|cfvalue
condition|)
return|return
name|QVariant
argument_list|()
return|;
name|CFTypeID
name|typeId
init|=
name|CFGetTypeID
argument_list|(
name|cfvalue
argument_list|)
decl_stmt|;
comment|/*         Sorted grossly from most to least frequent type.     */
if|if
condition|(
name|typeId
operator|==
name|CFStringGetTypeID
argument_list|()
condition|)
block|{
return|return
name|QSettingsPrivate
operator|::
name|stringToVariant
argument_list|(
name|QCFString
operator|::
name|toQString
argument_list|(
cast|static_cast
argument_list|<
name|CFStringRef
argument_list|>
argument_list|(
name|cfvalue
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|typeId
operator|==
name|CFNumberGetTypeID
argument_list|()
condition|)
block|{
name|CFNumberRef
name|cfnumber
init|=
cast|static_cast
argument_list|<
name|CFNumberRef
argument_list|>
argument_list|(
name|cfvalue
argument_list|)
decl_stmt|;
if|if
condition|(
name|CFNumberIsFloatType
argument_list|(
name|cfnumber
argument_list|)
condition|)
block|{
name|double
name|d
decl_stmt|;
name|CFNumberGetValue
argument_list|(
name|cfnumber
argument_list|,
name|kCFNumberDoubleType
argument_list|,
operator|&
name|d
argument_list|)
expr_stmt|;
return|return
name|d
return|;
block|}
else|else
block|{
name|int
name|i
decl_stmt|;
name|qint64
name|ll
decl_stmt|;
if|if
condition|(
name|CFNumberGetValue
argument_list|(
name|cfnumber
argument_list|,
name|kCFNumberIntType
argument_list|,
operator|&
name|i
argument_list|)
condition|)
return|return
name|i
return|;
name|CFNumberGetValue
argument_list|(
name|cfnumber
argument_list|,
name|kCFNumberLongLongType
argument_list|,
operator|&
name|ll
argument_list|)
expr_stmt|;
return|return
name|ll
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|typeId
operator|==
name|CFArrayGetTypeID
argument_list|()
condition|)
block|{
name|CFArrayRef
name|cfarray
init|=
cast|static_cast
argument_list|<
name|CFArrayRef
argument_list|>
argument_list|(
name|cfvalue
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|list
decl_stmt|;
name|CFIndex
name|size
init|=
name|CFArrayGetCount
argument_list|(
name|cfarray
argument_list|)
decl_stmt|;
name|bool
name|metNonString
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CFIndex
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|QVariant
name|value
init|=
name|qtValue
argument_list|(
name|CFArrayGetValueAtIndex
argument_list|(
name|cfarray
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|type
argument_list|()
operator|!=
name|QVariant
operator|::
name|String
condition|)
name|metNonString
operator|=
literal|true
expr_stmt|;
name|list
operator|<<
name|value
expr_stmt|;
block|}
if|if
condition|(
name|metNonString
condition|)
return|return
name|list
return|;
else|else
return|return
name|QVariant
argument_list|(
name|list
argument_list|)
operator|.
name|toStringList
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|typeId
operator|==
name|CFBooleanGetTypeID
argument_list|()
condition|)
block|{
return|return
operator|(
name|bool
operator|)
name|CFBooleanGetValue
argument_list|(
cast|static_cast
argument_list|<
name|CFBooleanRef
argument_list|>
argument_list|(
name|cfvalue
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|typeId
operator|==
name|CFDataGetTypeID
argument_list|()
condition|)
block|{
name|CFDataRef
name|cfdata
init|=
cast|static_cast
argument_list|<
name|CFDataRef
argument_list|>
argument_list|(
name|cfvalue
argument_list|)
decl_stmt|;
return|return
name|QByteArray
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|CFDataGetBytePtr
argument_list|(
name|cfdata
argument_list|)
argument_list|)
argument_list|,
name|CFDataGetLength
argument_list|(
name|cfdata
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|typeId
operator|==
name|CFDictionaryGetTypeID
argument_list|()
condition|)
block|{
name|CFDictionaryRef
name|cfdict
init|=
cast|static_cast
argument_list|<
name|CFDictionaryRef
argument_list|>
argument_list|(
name|cfvalue
argument_list|)
decl_stmt|;
name|CFTypeID
name|arrayTypeId
init|=
name|CFArrayGetTypeID
argument_list|()
decl_stmt|;
name|int
name|size
init|=
operator|(
name|int
operator|)
name|CFDictionaryGetCount
argument_list|(
name|cfdict
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|CFPropertyListRef
argument_list|>
name|keys
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|CFPropertyListRef
argument_list|>
name|values
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|CFDictionaryGetKeysAndValues
argument_list|(
name|cfdict
argument_list|,
name|keys
operator|.
name|data
argument_list|()
argument_list|,
name|values
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QMultiMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|key
init|=
name|QCFString
operator|::
name|toQString
argument_list|(
cast|static_cast
argument_list|<
name|CFStringRef
argument_list|>
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|CFGetTypeID
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
operator|==
name|arrayTypeId
condition|)
block|{
name|CFArrayRef
name|cfarray
init|=
cast|static_cast
argument_list|<
name|CFArrayRef
argument_list|>
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|CFIndex
name|arraySize
init|=
name|CFArrayGetCount
argument_list|(
name|cfarray
argument_list|)
decl_stmt|;
for|for
control|(
name|CFIndex
name|j
init|=
name|arraySize
operator|-
literal|1
init|;
name|j
operator|>=
literal|0
condition|;
operator|--
name|j
control|)
name|map
operator|.
name|insert
argument_list|(
name|key
argument_list|,
name|qtValue
argument_list|(
name|CFArrayGetValueAtIndex
argument_list|(
name|cfarray
argument_list|,
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|insert
argument_list|(
name|key
argument_list|,
name|qtValue
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
elseif|else
if|if
condition|(
name|typeId
operator|==
name|CFDateGetTypeID
argument_list|()
condition|)
block|{
name|QDateTime
name|dt
decl_stmt|;
name|dt
operator|.
name|setTime_t
argument_list|(
operator|(
name|uint
operator|)
name|kCFAbsoluteTimeIntervalSince1970
argument_list|)
expr_stmt|;
return|return
name|dt
operator|.
name|addSecs
argument_list|(
operator|(
name|int
operator|)
name|CFDateGetAbsoluteTime
argument_list|(
cast|static_cast
argument_list|<
name|CFDateRef
argument_list|>
argument_list|(
name|cfvalue
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|comify
specifier|static
name|QString
name|comify
parameter_list|(
specifier|const
name|QString
modifier|&
name|organization
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|organization
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QChar
name|ch
init|=
name|organization
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|||
name|ch
operator|==
name|QChar
argument_list|(
literal|0x3002
argument_list|)
operator|||
name|ch
operator|==
name|QChar
argument_list|(
literal|0xff0e
argument_list|)
operator|||
name|ch
operator|==
name|QChar
argument_list|(
literal|0xff61
argument_list|)
condition|)
block|{
name|QString
name|suffix
init|=
name|organization
operator|.
name|mid
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|suffix
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|||
name|suffix
operator|==
name|QLatin1String
argument_list|(
literal|"com"
argument_list|)
operator|||
name|suffix
operator|==
name|QLatin1String
argument_list|(
literal|"org"
argument_list|)
operator|||
name|suffix
operator|==
name|QLatin1String
argument_list|(
literal|"net"
argument_list|)
operator|||
name|suffix
operator|==
name|QLatin1String
argument_list|(
literal|"edu"
argument_list|)
operator|||
name|suffix
operator|==
name|QLatin1String
argument_list|(
literal|"gov"
argument_list|)
operator|||
name|suffix
operator|==
name|QLatin1String
argument_list|(
literal|"mil"
argument_list|)
operator|||
name|suffix
operator|==
name|QLatin1String
argument_list|(
literal|"biz"
argument_list|)
operator|||
name|suffix
operator|==
name|QLatin1String
argument_list|(
literal|"info"
argument_list|)
operator|||
name|suffix
operator|==
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
operator|||
name|suffix
operator|==
name|QLatin1String
argument_list|(
literal|"pro"
argument_list|)
operator|||
name|suffix
operator|==
name|QLatin1String
argument_list|(
literal|"aero"
argument_list|)
operator|||
name|suffix
operator|==
name|QLatin1String
argument_list|(
literal|"coop"
argument_list|)
operator|||
name|suffix
operator|==
name|QLatin1String
argument_list|(
literal|"museum"
argument_list|)
condition|)
block|{
name|QString
name|result
init|=
name|organization
decl_stmt|;
name|result
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
break|break;
block|}
name|int
name|uc
init|=
name|ch
operator|.
name|unicode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|uc
argument_list|<
literal|'a'
operator|||
name|uc
argument_list|>
literal|'z'
operator|)
operator|&&
operator|(
name|uc
argument_list|<
literal|'A'
operator|||
name|uc
argument_list|>
literal|'Z'
operator|)
condition|)
break|break;
block|}
name|QString
name|domain
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|organization
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QChar
name|ch
init|=
name|organization
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|uc
init|=
name|ch
operator|.
name|unicode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|uc
operator|>=
literal|'a'
operator|&&
name|uc
operator|<=
literal|'z'
operator|)
operator|||
operator|(
name|uc
operator|>=
literal|'0'
operator|&&
name|uc
operator|<=
literal|'9'
operator|)
condition|)
block|{
name|domain
operator|+=
name|ch
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|uc
operator|>=
literal|'A'
operator|&&
name|uc
operator|<=
literal|'Z'
condition|)
block|{
name|domain
operator|+=
name|ch
operator|.
name|toLower
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|domain
operator|+=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
name|domain
operator|=
name|domain
operator|.
name|simplified
argument_list|()
expr_stmt|;
name|domain
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|domain
operator|.
name|isEmpty
argument_list|()
condition|)
name|domain
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|".com"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|domain
return|;
block|}
end_function
begin_class
DECL|class|QMacSettingsPrivate
class|class
name|QMacSettingsPrivate
super|:
specifier|public
name|QSettingsPrivate
block|{
public|public:
name|QMacSettingsPrivate
parameter_list|(
name|QSettings
operator|::
name|Scope
name|scope
parameter_list|,
specifier|const
name|QString
modifier|&
name|organization
parameter_list|,
specifier|const
name|QString
modifier|&
name|application
parameter_list|)
constructor_decl|;
name|~
name|QMacSettingsPrivate
parameter_list|()
destructor_decl|;
name|void
name|remove
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
function_decl|;
name|void
name|set
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
function_decl|;
name|bool
name|get
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
name|QVariant
modifier|*
name|value
parameter_list|)
specifier|const
function_decl|;
name|QStringList
name|children
parameter_list|(
specifier|const
name|QString
modifier|&
name|prefix
parameter_list|,
name|ChildSpec
name|spec
parameter_list|)
specifier|const
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
name|void
name|sync
parameter_list|()
function_decl|;
name|void
name|flush
parameter_list|()
function_decl|;
name|bool
name|isWritable
parameter_list|()
specifier|const
function_decl|;
name|QString
name|fileName
parameter_list|()
specifier|const
function_decl|;
private|private:
DECL|struct|SearchDomain
struct|struct
name|SearchDomain
block|{
DECL|member|userName
name|CFStringRef
name|userName
decl_stmt|;
DECL|member|applicationOrSuiteId
name|CFStringRef
name|applicationOrSuiteId
decl_stmt|;
block|}
struct|;
DECL|member|applicationId
name|QCFString
name|applicationId
decl_stmt|;
DECL|member|suiteId
name|QCFString
name|suiteId
decl_stmt|;
DECL|member|hostName
name|QCFString
name|hostName
decl_stmt|;
DECL|member|domains
name|SearchDomain
name|domains
index|[
literal|6
index|]
decl_stmt|;
DECL|member|numDomains
name|int
name|numDomains
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QMacSettingsPrivate
name|QMacSettingsPrivate
operator|::
name|QMacSettingsPrivate
parameter_list|(
name|QSettings
operator|::
name|Scope
name|scope
parameter_list|,
specifier|const
name|QString
modifier|&
name|organization
parameter_list|,
specifier|const
name|QString
modifier|&
name|application
parameter_list|)
member_init_list|:
name|QSettingsPrivate
argument_list|(
name|QSettings
operator|::
name|NativeFormat
argument_list|,
name|scope
argument_list|,
name|organization
argument_list|,
name|application
argument_list|)
block|{
name|QString
name|javaPackageName
decl_stmt|;
name|int
name|curPos
init|=
literal|0
decl_stmt|;
name|int
name|nextDot
decl_stmt|;
comment|// attempt to use the organization parameter
name|QString
name|domainName
init|=
name|comify
argument_list|(
name|organization
argument_list|)
decl_stmt|;
comment|// if not found, attempt to use the bundle identifier.
if|if
condition|(
name|domainName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CFBundleRef
name|main_bundle
init|=
name|CFBundleGetMainBundle
argument_list|()
decl_stmt|;
if|if
condition|(
name|main_bundle
operator|!=
name|NULL
condition|)
block|{
name|CFStringRef
name|main_bundle_identifier
init|=
name|CFBundleGetIdentifier
argument_list|(
name|main_bundle
argument_list|)
decl_stmt|;
if|if
condition|(
name|main_bundle_identifier
operator|!=
name|NULL
condition|)
block|{
name|QString
name|bundle_identifier
argument_list|(
name|qtKey
argument_list|(
name|main_bundle_identifier
argument_list|)
argument_list|)
decl_stmt|;
comment|// CFBundleGetIdentifier returns identifier separated by slashes rather than periods.
name|QStringList
name|bundle_identifier_components
init|=
name|bundle_identifier
operator|.
name|split
argument_list|(
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
comment|// pre-reverse them so that when they get reversed again below, they are in the com.company.product format.
name|QStringList
name|bundle_identifier_components_reversed
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bundle_identifier_components
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
modifier|&
name|bundle_identifier_component
init|=
name|bundle_identifier_components
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|bundle_identifier_components_reversed
operator|.
name|push_front
argument_list|(
name|bundle_identifier_component
argument_list|)
expr_stmt|;
block|}
name|domainName
operator|=
name|bundle_identifier_components_reversed
operator|.
name|join
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// if no bundle identifier yet. use a hard coded string.
if|if
condition|(
name|domainName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setStatus
argument_list|(
name|QSettings
operator|::
name|AccessError
argument_list|)
expr_stmt|;
name|domainName
operator|=
name|QLatin1String
argument_list|(
literal|"unknown-organization.trolltech.com"
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|(
name|nextDot
operator|=
name|domainName
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|,
name|curPos
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|javaPackageName
operator|.
name|prepend
argument_list|(
name|domainName
operator|.
name|mid
argument_list|(
name|curPos
argument_list|,
name|nextDot
operator|-
name|curPos
argument_list|)
argument_list|)
expr_stmt|;
name|javaPackageName
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
name|curPos
operator|=
name|nextDot
operator|+
literal|1
expr_stmt|;
block|}
name|javaPackageName
operator|.
name|prepend
argument_list|(
name|domainName
operator|.
name|mid
argument_list|(
name|curPos
argument_list|)
argument_list|)
expr_stmt|;
name|javaPackageName
operator|=
name|javaPackageName
operator|.
name|toLower
argument_list|()
expr_stmt|;
if|if
condition|(
name|curPos
operator|==
literal|0
condition|)
name|javaPackageName
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
literal|"com."
argument_list|)
argument_list|)
expr_stmt|;
name|suiteId
operator|=
name|javaPackageName
expr_stmt|;
if|if
condition|(
name|scope
operator|==
name|QSettings
operator|::
name|SystemScope
condition|)
name|spec
operator||=
name|F_System
expr_stmt|;
if|if
condition|(
name|application
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|spec
operator||=
name|F_Organization
expr_stmt|;
block|}
else|else
block|{
name|javaPackageName
operator|+=
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|javaPackageName
operator|+=
name|application
expr_stmt|;
name|applicationId
operator|=
name|javaPackageName
expr_stmt|;
block|}
name|numDomains
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|(
name|spec
operator|&
name|F_System
operator|)
condition|?
literal|1
else|:
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
operator|(
name|spec
operator|&
name|F_Organization
operator|)
condition|?
literal|1
else|:
literal|0
init|;
name|j
operator|<
literal|3
condition|;
operator|++
name|j
control|)
block|{
name|SearchDomain
modifier|&
name|domain
init|=
name|domains
index|[
name|numDomains
operator|++
index|]
decl_stmt|;
name|domain
operator|.
name|userName
operator|=
operator|(
name|i
operator|==
literal|0
operator|)
condition|?
name|kCFPreferencesCurrentUser
else|:
name|kCFPreferencesAnyUser
expr_stmt|;
if|if
condition|(
name|j
operator|==
literal|0
condition|)
name|domain
operator|.
name|applicationOrSuiteId
operator|=
name|applicationId
expr_stmt|;
elseif|else
if|if
condition|(
name|j
operator|==
literal|1
condition|)
name|domain
operator|.
name|applicationOrSuiteId
operator|=
name|suiteId
expr_stmt|;
else|else
name|domain
operator|.
name|applicationOrSuiteId
operator|=
name|kCFPreferencesAnyApplication
expr_stmt|;
block|}
block|}
name|hostName
operator|=
operator|(
name|scope
operator|==
name|QSettings
operator|::
name|SystemScope
operator|)
condition|?
name|kCFPreferencesCurrentHost
else|:
name|kCFPreferencesAnyHost
expr_stmt|;
name|sync
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QMacSettingsPrivate
name|QMacSettingsPrivate
operator|::
name|~
name|QMacSettingsPrivate
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|remove
name|void
name|QMacSettingsPrivate
operator|::
name|remove
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
block|{
name|QStringList
name|keys
init|=
name|children
argument_list|(
name|key
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|,
name|AllKeys
argument_list|)
decl_stmt|;
comment|// If i == -1, then delete "key" itself.
for|for
control|(
name|int
name|i
init|=
operator|-
literal|1
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|subKey
init|=
name|key
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|subKey
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|subKey
operator|+=
name|keys
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|CFPreferencesSetValue
argument_list|(
name|macKey
argument_list|(
name|subKey
argument_list|)
argument_list|,
literal|0
argument_list|,
name|domains
index|[
literal|0
index|]
operator|.
name|applicationOrSuiteId
argument_list|,
name|domains
index|[
literal|0
index|]
operator|.
name|userName
argument_list|,
name|hostName
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|set
name|void
name|QMacSettingsPrivate
operator|::
name|set
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
name|CFPreferencesSetValue
argument_list|(
name|macKey
argument_list|(
name|key
argument_list|)
argument_list|,
name|macValue
argument_list|(
name|value
argument_list|)
argument_list|,
name|domains
index|[
literal|0
index|]
operator|.
name|applicationOrSuiteId
argument_list|,
name|domains
index|[
literal|0
index|]
operator|.
name|userName
argument_list|,
name|hostName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|get
name|bool
name|QMacSettingsPrivate
operator|::
name|get
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
name|QVariant
modifier|*
name|value
parameter_list|)
specifier|const
block|{
name|QCFString
name|k
init|=
name|macKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDomains
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numHostNames
condition|;
operator|++
name|j
control|)
block|{
name|QCFType
argument_list|<
name|CFPropertyListRef
argument_list|>
name|ret
init|=
name|CFPreferencesCopyValue
argument_list|(
name|k
argument_list|,
name|domains
index|[
name|i
index|]
operator|.
name|applicationOrSuiteId
argument_list|,
name|domains
index|[
name|i
index|]
operator|.
name|userName
argument_list|,
name|hostNames
index|[
name|j
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
condition|)
block|{
if|if
condition|(
name|value
condition|)
operator|*
name|value
operator|=
name|qtValue
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
operator|!
name|fallbacks
condition|)
break|break;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|children
name|QStringList
name|QMacSettingsPrivate
operator|::
name|children
parameter_list|(
specifier|const
name|QString
modifier|&
name|prefix
parameter_list|,
name|ChildSpec
name|spec
parameter_list|)
specifier|const
block|{
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|result
decl_stmt|;
name|int
name|startPos
init|=
name|prefix
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDomains
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numHostNames
condition|;
operator|++
name|j
control|)
block|{
name|QCFType
argument_list|<
name|CFArrayRef
argument_list|>
name|cfarray
init|=
name|CFPreferencesCopyKeyList
argument_list|(
name|domains
index|[
name|i
index|]
operator|.
name|applicationOrSuiteId
argument_list|,
name|domains
index|[
name|i
index|]
operator|.
name|userName
argument_list|,
name|hostNames
index|[
name|j
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|cfarray
condition|)
block|{
name|CFIndex
name|size
init|=
name|CFArrayGetCount
argument_list|(
name|cfarray
argument_list|)
decl_stmt|;
for|for
control|(
name|CFIndex
name|k
init|=
literal|0
init|;
name|k
operator|<
name|size
condition|;
operator|++
name|k
control|)
block|{
name|QString
name|currentKey
init|=
name|qtKey
argument_list|(
cast|static_cast
argument_list|<
name|CFStringRef
argument_list|>
argument_list|(
name|CFArrayGetValueAtIndex
argument_list|(
name|cfarray
argument_list|,
name|k
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentKey
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
name|processChild
argument_list|(
name|currentKey
operator|.
name|mid
argument_list|(
name|startPos
argument_list|)
argument_list|,
name|spec
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|fallbacks
condition|)
break|break;
block|}
return|return
name|result
operator|.
name|keys
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|QMacSettingsPrivate
operator|::
name|clear
parameter_list|()
block|{
name|QCFType
argument_list|<
name|CFArrayRef
argument_list|>
name|cfarray
init|=
name|CFPreferencesCopyKeyList
argument_list|(
name|domains
index|[
literal|0
index|]
operator|.
name|applicationOrSuiteId
argument_list|,
name|domains
index|[
literal|0
index|]
operator|.
name|userName
argument_list|,
name|hostName
argument_list|)
decl_stmt|;
name|CFPreferencesSetMultiple
argument_list|(
literal|0
argument_list|,
name|cfarray
argument_list|,
name|domains
index|[
literal|0
index|]
operator|.
name|applicationOrSuiteId
argument_list|,
name|domains
index|[
literal|0
index|]
operator|.
name|userName
argument_list|,
name|hostName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sync
name|void
name|QMacSettingsPrivate
operator|::
name|sync
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDomains
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numHostNames
condition|;
operator|++
name|j
control|)
block|{
name|Boolean
name|ok
init|=
name|CFPreferencesSynchronize
argument_list|(
name|domains
index|[
name|i
index|]
operator|.
name|applicationOrSuiteId
argument_list|,
name|domains
index|[
name|i
index|]
operator|.
name|userName
argument_list|,
name|hostNames
index|[
name|j
index|]
argument_list|)
decl_stmt|;
comment|// only report failures for the primary file (the one we write to)
if|if
condition|(
operator|!
name|ok
operator|&&
name|i
operator|==
literal|0
operator|&&
name|hostNames
index|[
name|j
index|]
operator|==
name|hostName
operator|&&
name|status
operator|==
name|QSettings
operator|::
name|NoError
condition|)
block|{
if|#
directive|if
literal|1
comment|// work around what seems to be a bug in CFPreferences:
comment|// don't report an error if there are no preferences for the application
name|QCFType
argument_list|<
name|CFArrayRef
argument_list|>
name|appIds
init|=
name|CFPreferencesCopyApplicationList
argument_list|(
name|domains
index|[
name|i
index|]
operator|.
name|userName
argument_list|,
name|hostNames
index|[
name|j
index|]
argument_list|)
decl_stmt|;
comment|// iterate through all the applications and see if we're there
name|CFIndex
name|size
init|=
name|CFArrayGetCount
argument_list|(
name|appIds
argument_list|)
decl_stmt|;
for|for
control|(
name|CFIndex
name|k
init|=
literal|0
init|;
name|k
operator|<
name|size
condition|;
operator|++
name|k
control|)
block|{
specifier|const
name|void
modifier|*
name|cfvalue
init|=
name|CFArrayGetValueAtIndex
argument_list|(
name|appIds
argument_list|,
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|CFGetTypeID
argument_list|(
name|cfvalue
argument_list|)
operator|==
name|CFStringGetTypeID
argument_list|()
condition|)
block|{
if|if
condition|(
name|CFStringCompare
argument_list|(
cast|static_cast
argument_list|<
name|CFStringRef
argument_list|>
argument_list|(
name|cfvalue
argument_list|)
argument_list|,
name|domains
index|[
name|i
index|]
operator|.
name|applicationOrSuiteId
argument_list|,
name|kCFCompareCaseInsensitive
argument_list|)
operator|==
name|kCFCompareEqualTo
condition|)
block|{
name|setStatus
argument_list|(
name|QSettings
operator|::
name|AccessError
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
else|#
directive|else
name|setStatus
argument_list|(
name|QSettings
operator|::
name|AccessError
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|flush
name|void
name|QMacSettingsPrivate
operator|::
name|flush
parameter_list|()
block|{
name|sync
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isWritable
name|bool
name|QMacSettingsPrivate
operator|::
name|isWritable
parameter_list|()
specifier|const
block|{
name|QMacSettingsPrivate
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QMacSettingsPrivate
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QString
name|impossibleKey
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_internal/"
argument_list|)
argument_list|)
decl_stmt|;
name|QSettings
operator|::
name|Status
name|oldStatus
init|=
name|that
operator|->
name|status
decl_stmt|;
name|that
operator|->
name|status
operator|=
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|that
operator|->
name|set
argument_list|(
name|impossibleKey
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|that
operator|->
name|sync
argument_list|()
expr_stmt|;
name|bool
name|writable
init|=
operator|(
name|status
operator|==
name|QSettings
operator|::
name|NoError
operator|)
operator|&&
name|that
operator|->
name|get
argument_list|(
name|impossibleKey
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|that
operator|->
name|remove
argument_list|(
name|impossibleKey
argument_list|)
expr_stmt|;
name|that
operator|->
name|sync
argument_list|()
expr_stmt|;
name|that
operator|->
name|status
operator|=
name|oldStatus
expr_stmt|;
return|return
name|writable
return|;
block|}
end_function
begin_function
DECL|function|fileName
name|QString
name|QMacSettingsPrivate
operator|::
name|fileName
parameter_list|()
specifier|const
block|{
name|QString
name|result
decl_stmt|;
if|if
condition|(
operator|(
name|spec
operator|&
name|F_System
operator|)
operator|==
literal|0
condition|)
name|result
operator|=
name|QDir
operator|::
name|homePath
argument_list|()
expr_stmt|;
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"/Library/Preferences/"
argument_list|)
expr_stmt|;
name|result
operator|+=
name|QCFString
operator|::
name|toQString
argument_list|(
name|domains
index|[
literal|0
index|]
operator|.
name|applicationOrSuiteId
argument_list|)
expr_stmt|;
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|".plist"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|create
name|QSettingsPrivate
modifier|*
name|QSettingsPrivate
operator|::
name|create
parameter_list|(
name|QSettings
operator|::
name|Format
name|format
parameter_list|,
name|QSettings
operator|::
name|Scope
name|scope
parameter_list|,
specifier|const
name|QString
modifier|&
name|organization
parameter_list|,
specifier|const
name|QString
modifier|&
name|application
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
if|if
condition|(
name|organization
operator|==
name|QLatin1String
argument_list|(
literal|"Qt"
argument_list|)
condition|)
block|{
name|QString
name|organizationDomain
init|=
name|QCoreApplication
operator|::
name|organizationDomain
argument_list|()
decl_stmt|;
name|QString
name|applicationName
init|=
name|QCoreApplication
operator|::
name|applicationName
argument_list|()
decl_stmt|;
name|QSettingsPrivate
modifier|*
name|newSettings
decl_stmt|;
if|if
condition|(
name|format
operator|==
name|QSettings
operator|::
name|NativeFormat
condition|)
block|{
name|newSettings
operator|=
operator|new
name|QMacSettingsPrivate
argument_list|(
name|scope
argument_list|,
name|organizationDomain
argument_list|,
name|applicationName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newSettings
operator|=
operator|new
name|QConfFileSettingsPrivate
argument_list|(
name|format
argument_list|,
name|scope
argument_list|,
name|organizationDomain
argument_list|,
name|applicationName
argument_list|)
expr_stmt|;
block|}
name|newSettings
operator|->
name|beginGroupOrArray
argument_list|(
name|QSettingsGroup
argument_list|(
name|normalizedKey
argument_list|(
name|organization
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|application
operator|.
name|isEmpty
argument_list|()
condition|)
name|newSettings
operator|->
name|beginGroupOrArray
argument_list|(
name|QSettingsGroup
argument_list|(
name|normalizedKey
argument_list|(
name|application
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|newSettings
return|;
block|}
endif|#
directive|endif
if|if
condition|(
name|format
operator|==
name|QSettings
operator|::
name|NativeFormat
condition|)
block|{
return|return
operator|new
name|QMacSettingsPrivate
argument_list|(
name|scope
argument_list|,
name|organization
argument_list|,
name|application
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|QConfFileSettingsPrivate
argument_list|(
name|format
argument_list|,
name|scope
argument_list|,
name|organization
argument_list|,
name|application
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|urlFromFileName
specifier|static
name|QCFType
argument_list|<
name|CFURLRef
argument_list|>
name|urlFromFileName
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
return|return
name|CFURLCreateWithFileSystemPath
argument_list|(
name|kCFAllocatorDefault
argument_list|,
name|QCFString
argument_list|(
name|fileName
argument_list|)
argument_list|,
name|kCFURLPOSIXPathStyle
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|readPlistFile
name|bool
name|QConfFileSettingsPrivate
operator|::
name|readPlistFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
name|ParsedSettingsMap
modifier|*
name|map
parameter_list|)
specifier|const
block|{
name|QCFType
argument_list|<
name|CFDataRef
argument_list|>
name|resource
decl_stmt|;
name|SInt32
name|code
decl_stmt|;
if|if
condition|(
operator|!
name|CFURLCreateDataAndPropertiesFromResource
argument_list|(
name|kCFAllocatorDefault
argument_list|,
name|urlFromFileName
argument_list|(
name|fileName
argument_list|)
argument_list|,
operator|&
name|resource
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|code
argument_list|)
condition|)
return|return
literal|false
return|;
name|QCFString
name|errorStr
decl_stmt|;
name|QCFType
argument_list|<
name|CFPropertyListRef
argument_list|>
name|propertyList
init|=
name|CFPropertyListCreateFromXMLData
argument_list|(
name|kCFAllocatorDefault
argument_list|,
name|resource
argument_list|,
name|kCFPropertyListImmutable
argument_list|,
operator|&
name|errorStr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propertyList
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|CFGetTypeID
argument_list|(
name|propertyList
argument_list|)
operator|!=
name|CFDictionaryGetTypeID
argument_list|()
condition|)
return|return
literal|false
return|;
name|CFDictionaryRef
name|cfdict
init|=
cast|static_cast
argument_list|<
name|CFDictionaryRef
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
name|CFPropertyListRef
argument_list|>
argument_list|(
name|propertyList
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|size
init|=
operator|(
name|int
operator|)
name|CFDictionaryGetCount
argument_list|(
name|cfdict
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|CFPropertyListRef
argument_list|>
name|keys
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|CFPropertyListRef
argument_list|>
name|values
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|CFDictionaryGetKeysAndValues
argument_list|(
name|cfdict
argument_list|,
name|keys
operator|.
name|data
argument_list|()
argument_list|,
name|values
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|key
init|=
name|qtKey
argument_list|(
cast|static_cast
argument_list|<
name|CFStringRef
argument_list|>
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|->
name|insert
argument_list|(
name|QSettingsKey
argument_list|(
name|key
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|,
name|qtValue
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|writePlistFile
name|bool
name|QConfFileSettingsPrivate
operator|::
name|writePlistFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
specifier|const
name|ParsedSettingsMap
modifier|&
name|map
parameter_list|)
specifier|const
block|{
name|QVarLengthArray
argument_list|<
name|QCFType
argument_list|<
name|CFStringRef
argument_list|>
argument_list|>
name|cfkeys
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|QCFType
argument_list|<
name|CFPropertyListRef
argument_list|>
argument_list|>
name|cfvalues
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|ParsedSettingsMap
operator|::
name|const_iterator
name|j
decl_stmt|;
for|for
control|(
name|j
operator|=
name|map
operator|.
name|constBegin
argument_list|()
init|;
name|j
operator|!=
name|map
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|cfkeys
index|[
name|i
index|]
operator|=
name|macKey
argument_list|(
name|j
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
name|cfvalues
index|[
name|i
index|]
operator|=
name|macValue
argument_list|(
name|j
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|QCFType
argument_list|<
name|CFDictionaryRef
argument_list|>
name|propertyList
init|=
name|CFDictionaryCreate
argument_list|(
name|kCFAllocatorDefault
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|void
operator|*
operator|*
argument_list|>
argument_list|(
name|cfkeys
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|void
operator|*
operator|*
argument_list|>
argument_list|(
name|cfvalues
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|CFIndex
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
operator|&
name|kCFTypeDictionaryKeyCallBacks
argument_list|,
operator|&
name|kCFTypeDictionaryValueCallBacks
argument_list|)
decl_stmt|;
name|QCFType
argument_list|<
name|CFDataRef
argument_list|>
name|xmlData
init|=
name|CFPropertyListCreateData
argument_list|(
name|kCFAllocatorDefault
argument_list|,
name|propertyList
argument_list|,
name|kCFPropertyListXMLFormat_v1_0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SInt32
name|code
decl_stmt|;
return|return
name|CFURLWriteDataAndPropertiesToResource
argument_list|(
name|urlFromFileName
argument_list|(
name|fileName
argument_list|)
argument_list|,
name|xmlData
argument_list|,
literal|0
argument_list|,
operator|&
name|code
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_SETTINGS
end_comment
end_unit
