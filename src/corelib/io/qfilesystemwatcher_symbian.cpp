begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qfilesystemwatcher.h"
end_include
begin_include
include|#
directive|include
file|"qfilesystemwatcher_symbian_p.h"
end_include
begin_include
include|#
directive|include
file|"qfileinfo.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"private/qcore_symbian_p.h"
end_include
begin_include
include|#
directive|include
file|<QDir>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QNotifyChangeEvent
name|QNotifyChangeEvent
operator|::
name|QNotifyChangeEvent
parameter_list|(
name|RFs
modifier|&
name|fs
parameter_list|,
specifier|const
name|TDesC
modifier|&
name|file
parameter_list|,
name|QSymbianFileSystemWatcherEngine
modifier|*
name|e
parameter_list|,
name|bool
name|aIsDir
parameter_list|,
name|TInt
name|aPriority
parameter_list|)
member_init_list|:
name|CActive
argument_list|(
name|aPriority
argument_list|)
member_init_list|,
name|isDir
argument_list|(
name|aIsDir
argument_list|)
member_init_list|,
name|fsSession
argument_list|(
name|fs
argument_list|)
member_init_list|,
name|watchedPath
argument_list|(
name|file
argument_list|)
member_init_list|,
name|engine
argument_list|(
name|e
argument_list|)
member_init_list|,
name|failureCount
argument_list|(
literal|0
argument_list|)
block|{
if|if
condition|(
name|isDir
condition|)
block|{
name|fsSession
operator|.
name|NotifyChange
argument_list|(
name|ENotifyEntry
argument_list|,
name|iStatus
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fsSession
operator|.
name|NotifyChange
argument_list|(
name|ENotifyAll
argument_list|,
name|iStatus
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
name|CActiveScheduler
operator|::
name|Add
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|SetActive
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QNotifyChangeEvent
name|QNotifyChangeEvent
operator|::
name|~
name|QNotifyChangeEvent
parameter_list|()
block|{
name|Cancel
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|RunL
name|void
name|QNotifyChangeEvent
operator|::
name|RunL
parameter_list|()
block|{
if|if
condition|(
name|iStatus
operator|.
name|Int
argument_list|()
operator|==
name|KErrNone
condition|)
block|{
name|failureCount
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QNotifyChangeEvent::RunL() - Failed to order change notifications: %d"
argument_list|,
name|iStatus
operator|.
name|Int
argument_list|()
argument_list|)
expr_stmt|;
name|failureCount
operator|++
expr_stmt|;
block|}
comment|// Re-request failed notification once, but if it won't start working,
comment|// we can't do much besides just not request any more notifications.
if|if
condition|(
name|failureCount
operator|<
literal|2
condition|)
block|{
if|if
condition|(
name|isDir
condition|)
block|{
name|fsSession
operator|.
name|NotifyChange
argument_list|(
name|ENotifyEntry
argument_list|,
name|iStatus
argument_list|,
name|watchedPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fsSession
operator|.
name|NotifyChange
argument_list|(
name|ENotifyAll
argument_list|,
name|iStatus
argument_list|,
name|watchedPath
argument_list|)
expr_stmt|;
block|}
name|SetActive
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|failureCount
condition|)
block|{
name|int
name|err
decl_stmt|;
name|QT_TRYCATCH_ERROR
argument_list|(
name|err
argument_list|,
name|engine
operator|->
name|emitPathChanged
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|!=
name|KErrNone
condition|)
name|qWarning
argument_list|(
literal|"QNotifyChangeEvent::RunL() - emitPathChanged threw exception (Converted error code: %d)"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|DoCancel
name|void
name|QNotifyChangeEvent
operator|::
name|DoCancel
parameter_list|()
block|{
name|fsSession
operator|.
name|NotifyChangeCancel
argument_list|(
name|iStatus
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QSymbianFileSystemWatcherEngine
name|QSymbianFileSystemWatcherEngine
operator|::
name|QSymbianFileSystemWatcherEngine
parameter_list|()
member_init_list|:
name|watcherStarted
argument_list|(
literal|false
argument_list|)
block|{
name|moveToThread
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QSymbianFileSystemWatcherEngine
name|QSymbianFileSystemWatcherEngine
operator|::
name|~
name|QSymbianFileSystemWatcherEngine
parameter_list|()
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|addPaths
name|QStringList
name|QSymbianFileSystemWatcherEngine
operator|::
name|addPaths
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|paths
parameter_list|,
name|QStringList
modifier|*
name|files
parameter_list|,
name|QStringList
modifier|*
name|directories
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QStringList
name|p
init|=
name|paths
decl_stmt|;
name|startWatcher
argument_list|()
expr_stmt|;
name|QMutableListIterator
argument_list|<
name|QString
argument_list|>
name|it
argument_list|(
name|p
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QString
name|path
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fi
operator|.
name|exists
argument_list|()
condition|)
continue|continue;
name|bool
name|isDir
init|=
name|fi
operator|.
name|isDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|isDir
condition|)
block|{
if|if
condition|(
name|directories
operator|->
name|contains
argument_list|(
name|path
argument_list|)
condition|)
continue|continue;
block|}
else|else
block|{
if|if
condition|(
name|files
operator|->
name|contains
argument_list|(
name|path
argument_list|)
condition|)
continue|continue;
block|}
comment|// Use absolute filepath as relative paths seem to have some issues.
name|QString
name|filePath
init|=
name|fi
operator|.
name|absoluteFilePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|isDir
operator|&&
name|filePath
operator|.
name|at
argument_list|(
name|filePath
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
name|QChar
argument_list|(
literal|L'
expr|/'
argument_list|)
condition|)
block|{
name|filePath
operator|+=
name|QChar
argument_list|(
literal|L'
expr|/'
argument_list|)
expr_stmt|;
block|}
name|currentAddEvent
operator|=
name|NULL
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"addNativeListener"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|,
name|Q_ARG
argument_list|(
name|QString
argument_list|,
name|filePath
argument_list|)
argument_list|)
expr_stmt|;
name|syncCondition
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentAddEvent
condition|)
block|{
name|currentAddEvent
operator|->
name|isDir
operator|=
name|isDir
expr_stmt|;
name|activeObjectToPath
operator|.
name|insert
argument_list|(
name|currentAddEvent
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|isDir
condition|)
name|directories
operator|->
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
else|else
name|files
operator|->
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|p
return|;
block|}
end_function
begin_function
DECL|function|removePaths
name|QStringList
name|QSymbianFileSystemWatcherEngine
operator|::
name|removePaths
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|paths
parameter_list|,
name|QStringList
modifier|*
name|files
parameter_list|,
name|QStringList
modifier|*
name|directories
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QStringList
name|p
init|=
name|paths
decl_stmt|;
name|QMutableListIterator
argument_list|<
name|QString
argument_list|>
name|it
argument_list|(
name|p
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QString
name|path
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|currentRemoveEvent
operator|=
name|activeObjectToPath
operator|.
name|key
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|currentRemoveEvent
condition|)
continue|continue;
name|activeObjectToPath
operator|.
name|remove
argument_list|(
name|currentRemoveEvent
argument_list|)
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"removeNativeListener"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|syncCondition
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|files
operator|->
name|removeAll
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|directories
operator|->
name|removeAll
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|p
return|;
block|}
end_function
begin_function
DECL|function|emitPathChanged
name|void
name|QSymbianFileSystemWatcherEngine
operator|::
name|emitPathChanged
parameter_list|(
name|QNotifyChangeEvent
modifier|*
name|e
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QString
name|path
init|=
name|activeObjectToPath
operator|.
name|value
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|->
name|isDir
condition|)
emit|emit
name|directoryChanged
argument_list|(
name|path
argument_list|,
operator|!
name|fi
operator|.
name|exists
argument_list|()
argument_list|)
emit|;
else|else
emit|emit
name|fileChanged
argument_list|(
name|path
argument_list|,
operator|!
name|fi
operator|.
name|exists
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|stop
name|void
name|QSymbianFileSystemWatcherEngine
operator|::
name|stop
parameter_list|()
block|{
name|quit
argument_list|()
expr_stmt|;
name|wait
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// This method must be called inside mutex
end_comment
begin_function
DECL|function|startWatcher
name|void
name|QSymbianFileSystemWatcherEngine
operator|::
name|startWatcher
parameter_list|()
block|{
if|if
condition|(
operator|!
name|watcherStarted
condition|)
block|{
name|setStackSize
argument_list|(
literal|0x5000
argument_list|)
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
name|syncCondition
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|)
expr_stmt|;
name|watcherStarted
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|run
name|void
name|QSymbianFileSystemWatcherEngine
operator|::
name|run
parameter_list|()
block|{
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|syncCondition
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|exec
argument_list|()
expr_stmt|;
foreach|foreach
control|(
name|QNotifyChangeEvent
modifier|*
name|e
decl|,
name|activeObjectToPath
operator|.
name|keys
argument_list|()
control|)
block|{
name|e
operator|->
name|Cancel
argument_list|()
expr_stmt|;
operator|delete
name|e
expr_stmt|;
block|}
name|activeObjectToPath
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addNativeListener
name|void
name|QSymbianFileSystemWatcherEngine
operator|::
name|addNativeListener
parameter_list|(
specifier|const
name|QString
modifier|&
name|directoryPath
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QString
name|nativeDir
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|directoryPath
argument_list|)
argument_list|)
decl_stmt|;
name|TPtrC
name|ptr
argument_list|(
name|qt_QString2TPtrC
argument_list|(
name|nativeDir
argument_list|)
argument_list|)
decl_stmt|;
name|currentAddEvent
operator|=
operator|new
name|QNotifyChangeEvent
argument_list|(
name|qt_s60GetRFs
argument_list|()
argument_list|,
name|ptr
argument_list|,
name|this
argument_list|,
name|directoryPath
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|(
literal|L'
expr|/'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|syncCondition
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeNativeListener
name|void
name|QSymbianFileSystemWatcherEngine
operator|::
name|removeNativeListener
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|currentRemoveEvent
operator|->
name|Cancel
argument_list|()
expr_stmt|;
operator|delete
name|currentRemoveEvent
expr_stmt|;
name|currentRemoveEvent
operator|=
name|NULL
expr_stmt|;
name|syncCondition
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_FILESYSTEMWATCHER
end_comment
end_unit
