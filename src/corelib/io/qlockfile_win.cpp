begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 David Faure<faure+bluesystems@kde.org> ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"private/qlockfile_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qfilesystementry_p.h"
end_include
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_include
include|#
directive|include
file|"QtCore/qcoreapplication.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qfileinfo.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qdatetime.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qdebug.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qthread.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|localHostName
specifier|static
specifier|inline
name|QByteArray
name|localHostName
parameter_list|()
block|{
return|return
name|qgetenv
argument_list|(
literal|"COMPUTERNAME"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fileExists
specifier|static
specifier|inline
name|bool
name|fileExists
parameter_list|(
specifier|const
name|wchar_t
modifier|*
name|fileName
parameter_list|)
block|{
name|WIN32_FILE_ATTRIBUTE_DATA
name|data
decl_stmt|;
return|return
name|GetFileAttributesEx
argument_list|(
name|fileName
argument_list|,
name|GetFileExInfoStandard
argument_list|,
operator|&
name|data
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|tryLock_sys
name|QLockFile
operator|::
name|LockError
name|QLockFilePrivate
operator|::
name|tryLock_sys
parameter_list|()
block|{
specifier|const
name|QFileSystemEntry
name|fileEntry
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
comment|// When writing, allow others to read.
comment|// When reading, QFile will allow others to read and write, all good.
comment|// Adding FILE_SHARE_DELETE would allow forceful deletion of stale files,
comment|// but Windows doesn't allow recreating it while this handle is open anyway,
comment|// so this would only create confusion (can't lock, but no lock file to read from).
specifier|const
name|DWORD
name|dwShareMode
init|=
name|FILE_SHARE_READ
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINRT
name|SECURITY_ATTRIBUTES
name|securityAtts
init|=
block|{
sizeof|sizeof
argument_list|(
name|SECURITY_ATTRIBUTES
argument_list|)
block|,
name|NULL
block|,
name|FALSE
block|}
decl_stmt|;
name|HANDLE
name|fh
init|=
name|CreateFile
argument_list|(
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|fileEntry
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|utf16
argument_list|()
argument_list|,
name|GENERIC_WRITE
argument_list|,
name|dwShareMode
argument_list|,
operator|&
name|securityAtts
argument_list|,
name|CREATE_NEW
argument_list|,
comment|// error if already exists
name|FILE_ATTRIBUTE_NORMAL
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
else|#
directive|else
comment|// !Q_OS_WINRT
name|HANDLE
name|fh
init|=
name|CreateFile2
argument_list|(
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|fileEntry
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|utf16
argument_list|()
argument_list|,
name|GENERIC_WRITE
argument_list|,
name|dwShareMode
argument_list|,
name|CREATE_NEW
argument_list|,
comment|// error if already exists
name|NULL
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|// Q_OS_WINRT
if|if
condition|(
name|fh
operator|==
name|INVALID_HANDLE_VALUE
condition|)
block|{
specifier|const
name|DWORD
name|lastError
init|=
name|GetLastError
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|lastError
condition|)
block|{
case|case
name|ERROR_SHARING_VIOLATION
case|:
case|case
name|ERROR_ALREADY_EXISTS
case|:
case|case
name|ERROR_FILE_EXISTS
case|:
return|return
name|QLockFile
operator|::
name|LockFailedError
return|;
case|case
name|ERROR_ACCESS_DENIED
case|:
comment|// readonly file, or file still in use by another process.
comment|// Assume the latter if the file exists, since we don't create it readonly.
return|return
name|fileExists
argument_list|(
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|fileEntry
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|utf16
argument_list|()
argument_list|)
condition|?
name|QLockFile
operator|::
name|LockFailedError
else|:
name|QLockFile
operator|::
name|PermissionError
return|;
default|default:
name|qWarning
argument_list|()
operator|<<
literal|"Got unexpected locking error"
operator|<<
name|lastError
expr_stmt|;
return|return
name|QLockFile
operator|::
name|UnknownError
return|;
block|}
block|}
comment|// We hold the lock, continue.
name|fileHandle
operator|=
name|fh
expr_stmt|;
comment|// Assemble data, to write in a single call to write
comment|// (otherwise we'd have to check every write call)
name|QByteArray
name|fileData
decl_stmt|;
name|fileData
operator|+=
name|QByteArray
operator|::
name|number
argument_list|(
name|QCoreApplication
operator|::
name|applicationPid
argument_list|()
argument_list|)
expr_stmt|;
name|fileData
operator|+=
literal|'\n'
expr_stmt|;
name|fileData
operator|+=
name|QCoreApplication
operator|::
name|applicationName
argument_list|()
operator|.
name|toUtf8
argument_list|()
expr_stmt|;
name|fileData
operator|+=
literal|'\n'
expr_stmt|;
name|fileData
operator|+=
name|localHostName
argument_list|()
expr_stmt|;
name|fileData
operator|+=
literal|'\n'
expr_stmt|;
name|DWORD
name|bytesWritten
init|=
literal|0
decl_stmt|;
name|QLockFile
operator|::
name|LockError
name|error
init|=
name|QLockFile
operator|::
name|NoError
decl_stmt|;
if|if
condition|(
operator|!
name|WriteFile
argument_list|(
name|fh
argument_list|,
name|fileData
operator|.
name|constData
argument_list|()
argument_list|,
name|fileData
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|bytesWritten
argument_list|,
name|NULL
argument_list|)
operator|||
operator|!
name|FlushFileBuffers
argument_list|(
name|fh
argument_list|)
condition|)
name|error
operator|=
name|QLockFile
operator|::
name|UnknownError
expr_stmt|;
comment|// partition full
return|return
name|error
return|;
block|}
end_function
begin_function
DECL|function|removeStaleLock
name|bool
name|QLockFilePrivate
operator|::
name|removeStaleLock
parameter_list|()
block|{
comment|// QFile::remove fails on Windows if the other process is still using the file, so it's not stale.
return|return
name|QFile
operator|::
name|remove
argument_list|(
name|fileName
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isApparentlyStale
name|bool
name|QLockFilePrivate
operator|::
name|isApparentlyStale
parameter_list|()
specifier|const
block|{
name|qint64
name|pid
decl_stmt|;
name|QString
name|hostname
decl_stmt|,
name|appname
decl_stmt|;
comment|// On WinRT there seems to be no way of obtaining information about other
comment|// processes due to sandboxing
ifndef|#
directive|ifndef
name|Q_OS_WINRT
if|if
condition|(
name|getLockInfo
argument_list|(
operator|&
name|pid
argument_list|,
operator|&
name|hostname
argument_list|,
operator|&
name|appname
argument_list|)
condition|)
block|{
if|if
condition|(
name|hostname
operator|.
name|isEmpty
argument_list|()
operator|||
name|hostname
operator|==
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|localHostName
argument_list|()
argument_list|)
condition|)
block|{
name|HANDLE
name|procHandle
init|=
operator|::
name|OpenProcess
argument_list|(
name|PROCESS_QUERY_INFORMATION
argument_list|,
name|FALSE
argument_list|,
name|pid
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|procHandle
condition|)
return|return
literal|true
return|;
comment|// We got a handle but check if process is still alive
name|DWORD
name|dwR
init|=
operator|::
name|WaitForSingleObject
argument_list|(
name|procHandle
argument_list|,
literal|0
argument_list|)
decl_stmt|;
operator|::
name|CloseHandle
argument_list|(
name|procHandle
argument_list|)
expr_stmt|;
if|if
condition|(
name|dwR
operator|==
name|WAIT_TIMEOUT
condition|)
return|return
literal|true
return|;
specifier|const
name|QString
name|processName
init|=
name|processNameByPid
argument_list|(
name|pid
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|processName
operator|.
name|isEmpty
argument_list|()
operator|&&
name|processName
operator|!=
name|appname
condition|)
return|return
literal|true
return|;
comment|// PID got reused by a different application.
block|}
block|}
else|#
directive|else
comment|// !Q_OS_WINRT
name|Q_UNUSED
argument_list|(
name|pid
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|hostname
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|appname
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_WINRT
specifier|const
name|qint64
name|age
init|=
name|QFileInfo
argument_list|(
name|fileName
argument_list|)
operator|.
name|lastModified
argument_list|()
operator|.
name|msecsTo
argument_list|(
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|staleLockTime
operator|>
literal|0
operator|&&
name|age
operator|>
name|staleLockTime
return|;
block|}
end_function
begin_function
DECL|function|processNameByPid
name|QString
name|QLockFilePrivate
operator|::
name|processNameByPid
parameter_list|(
name|qint64
name|pid
parameter_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
typedef|typedef
name|DWORD
function_decl|(
name|WINAPI
modifier|*
name|GetModuleFileNameExFunc
function_decl|)
parameter_list|(
name|HANDLE
parameter_list|,
name|HMODULE
parameter_list|,
name|LPTSTR
parameter_list|,
name|DWORD
parameter_list|)
function_decl|;
name|HMODULE
name|hPsapi
init|=
name|LoadLibraryA
argument_list|(
literal|"psapi"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hPsapi
condition|)
return|return
name|QString
argument_list|()
return|;
name|GetModuleFileNameExFunc
name|qGetModuleFileNameEx
init|=
operator|(
name|GetModuleFileNameExFunc
operator|)
name|GetProcAddress
argument_list|(
name|hPsapi
argument_list|,
literal|"GetModuleFileNameExW"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|qGetModuleFileNameEx
condition|)
block|{
name|FreeLibrary
argument_list|(
name|hPsapi
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
name|HANDLE
name|hProcess
init|=
name|OpenProcess
argument_list|(
name|PROCESS_QUERY_INFORMATION
operator||
name|PROCESS_VM_READ
argument_list|,
name|FALSE
argument_list|,
name|DWORD
argument_list|(
name|pid
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hProcess
condition|)
block|{
name|FreeLibrary
argument_list|(
name|hPsapi
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
name|wchar_t
name|buf
index|[
name|MAX_PATH
index|]
decl_stmt|;
specifier|const
name|DWORD
name|length
init|=
name|qGetModuleFileNameEx
argument_list|(
name|hProcess
argument_list|,
name|NULL
argument_list|,
name|buf
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
argument_list|)
decl_stmt|;
name|CloseHandle
argument_list|(
name|hProcess
argument_list|)
expr_stmt|;
name|FreeLibrary
argument_list|(
name|hPsapi
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|length
condition|)
return|return
name|QString
argument_list|()
return|;
name|QString
name|name
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|buf
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|int
name|i
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
name|name
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|i
operator|=
name|name
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
name|name
operator|.
name|truncate
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|name
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|pid
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|unlock
name|void
name|QLockFile
operator|::
name|unlock
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QLockFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isLocked
condition|)
return|return;
name|CloseHandle
argument_list|(
name|d
operator|->
name|fileHandle
argument_list|)
expr_stmt|;
name|int
name|attempts
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|int
name|maxAttempts
init|=
literal|500
decl_stmt|;
comment|// 500ms
while|while
condition|(
operator|!
name|QFile
operator|::
name|remove
argument_list|(
name|d
operator|->
name|fileName
argument_list|)
operator|&&
operator|++
name|attempts
operator|<
name|maxAttempts
condition|)
block|{
comment|// Someone is reading the lock file right now (on Windows this prevents deleting it).
name|QThread
operator|::
name|msleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attempts
operator|==
name|maxAttempts
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Could not remove our own lock file"
operator|<<
name|d
operator|->
name|fileName
operator|<<
literal|". Either other users of the lock file are reading it constantly for 500 ms, or we (no longer) have permissions to delete the file"
expr_stmt|;
comment|// This is bad because other users of this lock file will now have to wait for the stale-lock-timeout...
block|}
name|d
operator|->
name|lockError
operator|=
name|QLockFile
operator|::
name|NoError
expr_stmt|;
name|d
operator|->
name|isLocked
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
