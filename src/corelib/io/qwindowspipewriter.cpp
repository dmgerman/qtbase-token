begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowspipewriter_p.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_THREAD
end_ifndef
begin_constructor
DECL|function|QWindowsPipeWriter
name|QWindowsPipeWriter
operator|::
name|QWindowsPipeWriter
parameter_list|(
name|HANDLE
name|pipe
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QThread
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|writePipe
argument_list|(
name|INVALID_HANDLE_VALUE
argument_list|)
member_init_list|,
name|quitNow
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|hasWritten
argument_list|(
literal|false
argument_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
operator|(
name|_WIN32_WCE
operator|>=
literal|0x600
operator|)
name|DuplicateHandle
argument_list|(
name|GetCurrentProcess
argument_list|()
argument_list|,
name|pipe
argument_list|,
name|GetCurrentProcess
argument_list|()
argument_list|,
operator|&
name|writePipe
argument_list|,
literal|0
argument_list|,
name|FALSE
argument_list|,
name|DUPLICATE_SAME_ACCESS
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|pipe
argument_list|)
expr_stmt|;
name|writePipe
operator|=
name|GetCurrentProcess
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsPipeWriter
name|QWindowsPipeWriter
operator|::
name|~
name|QWindowsPipeWriter
parameter_list|()
block|{
name|lock
operator|.
name|lock
parameter_list|()
constructor_decl|;
name|quitNow
operator|=
literal|true
expr_stmt|;
name|waitCondition
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|wait
argument_list|(
literal|30000
argument_list|)
condition|)
name|terminate
argument_list|()
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
operator|(
name|_WIN32_WCE
operator|>=
literal|0x600
operator|)
name|CloseHandle
argument_list|(
name|writePipe
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_function
DECL|function|waitForWrite
name|bool
name|QWindowsPipeWriter
operator|::
name|waitForWrite
parameter_list|(
name|int
name|msecs
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|lock
argument_list|)
decl_stmt|;
name|bool
name|hadWritten
init|=
name|hasWritten
decl_stmt|;
name|hasWritten
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|hadWritten
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|waitCondition
operator|.
name|wait
argument_list|(
operator|&
name|lock
argument_list|,
name|msecs
argument_list|)
condition|)
return|return
literal|false
return|;
name|hadWritten
operator|=
name|hasWritten
expr_stmt|;
name|hasWritten
operator|=
literal|false
expr_stmt|;
return|return
name|hadWritten
return|;
block|}
end_function
begin_function
DECL|function|write
name|qint64
name|QWindowsPipeWriter
operator|::
name|write
parameter_list|(
specifier|const
name|char
modifier|*
name|ptr
parameter_list|,
name|qint64
name|maxlen
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isRunning
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|lock
argument_list|)
decl_stmt|;
name|data
operator|.
name|append
argument_list|(
name|QByteArray
argument_list|(
name|ptr
argument_list|,
name|maxlen
argument_list|)
argument_list|)
expr_stmt|;
name|waitCondition
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
return|return
name|maxlen
return|;
block|}
end_function
begin_function
DECL|function|run
name|void
name|QWindowsPipeWriter
operator|::
name|run
parameter_list|()
block|{
name|OVERLAPPED
name|overl
decl_stmt|;
name|memset
argument_list|(
operator|&
name|overl
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
name|overl
argument_list|)
expr_stmt|;
name|overl
operator|.
name|hEvent
operator|=
name|CreateEvent
argument_list|(
name|NULL
argument_list|,
name|TRUE
argument_list|,
name|FALSE
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
forever|forever
block|{
name|lock
operator|.
name|lock
parameter_list|()
constructor_decl|;
while|while
condition|(
name|data
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
operator|!
name|quitNow
operator|)
condition|)
block|{
name|waitCondition
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|waitCondition
operator|.
name|wait
argument_list|(
operator|&
name|lock
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|quitNow
condition|)
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|quitNow
operator|=
literal|false
expr_stmt|;
break|break;
block|}
name|QByteArray
name|copy
init|=
name|data
decl_stmt|;
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
specifier|const
name|char
modifier|*
name|ptrData
init|=
name|copy
operator|.
name|data
argument_list|()
decl_stmt|;
name|qint64
name|maxlen
init|=
name|copy
operator|.
name|size
argument_list|()
decl_stmt|;
name|qint64
name|totalWritten
init|=
literal|0
decl_stmt|;
name|overl
operator|.
name|Offset
operator|=
literal|0
expr_stmt|;
name|overl
operator|.
name|OffsetHigh
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
operator|!
name|quitNow
operator|)
operator|&&
name|totalWritten
operator|<
name|maxlen
condition|)
block|{
name|DWORD
name|written
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|WriteFile
argument_list|(
name|writePipe
argument_list|,
name|ptrData
operator|+
name|totalWritten
argument_list|,
name|maxlen
operator|-
name|totalWritten
argument_list|,
operator|&
name|written
argument_list|,
operator|&
name|overl
argument_list|)
condition|)
block|{
if|if
condition|(
name|GetLastError
argument_list|()
operator|==
literal|0xE8
comment|/*NT_STATUS_INVALID_USER_BUFFER*/
condition|)
block|{
comment|// give the os a rest
name|msleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
continue|continue;
block|}
ifndef|#
directive|ifndef
name|Q_OS_WINCE
if|if
condition|(
name|GetLastError
argument_list|()
operator|==
name|ERROR_IO_PENDING
condition|)
block|{
if|if
condition|(
operator|!
name|GetOverlappedResult
argument_list|(
name|writePipe
argument_list|,
operator|&
name|overl
argument_list|,
operator|&
name|written
argument_list|,
name|TRUE
argument_list|)
condition|)
block|{
name|CloseHandle
argument_list|(
name|overl
operator|.
name|hEvent
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
name|CloseHandle
argument_list|(
name|overl
operator|.
name|hEvent
argument_list|)
expr_stmt|;
return|return;
block|}
else|#
directive|else
return|return;
endif|#
directive|endif
block|}
name|totalWritten
operator|+=
name|written
expr_stmt|;
if|#
directive|if
name|defined
name|QPIPEWRITER_DEBUG
name|qDebug
argument_list|(
literal|"QWindowsPipeWriter::run() wrote %d %d/%d bytes"
argument_list|,
name|written
argument_list|,
name|int
argument_list|(
name|totalWritten
argument_list|)
argument_list|,
name|int
argument_list|(
name|maxlen
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|lock
operator|.
name|lock
parameter_list|()
constructor_decl|;
name|data
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|written
argument_list|)
expr_stmt|;
name|hasWritten
operator|=
literal|true
expr_stmt|;
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
emit|emit
name|bytesWritten
argument_list|(
name|totalWritten
argument_list|)
emit|;
emit|emit
name|canWrite
argument_list|()
emit|;
block|}
name|CloseHandle
argument_list|(
name|overl
operator|.
name|hEvent
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_THREAD
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
