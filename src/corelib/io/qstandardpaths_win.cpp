begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qstandardpaths.h"
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<private/qsystemlibrary_p.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
end_ifndef
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_decl_stmt
DECL|variable|qCLSID_FOLDERID_Downloads
specifier|const
name|GUID
name|qCLSID_FOLDERID_Downloads
init|=
block|{
literal|0x374de290
block|,
literal|0x123f
block|,
literal|0x4565
block|,
block|{
literal|0x91
block|,
literal|0x64
block|,
literal|0x39
block|,
literal|0xc4
block|,
literal|0x92
block|,
literal|0x5e
block|,
literal|0x46
block|,
literal|0x7b
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_include
include|#
directive|include
file|<shlobj.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|<intshcut.h>
end_include
begin_else
else|#
directive|else
end_else
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|STANDARDSHELL_UI_MODEL
argument_list|)
end_if
begin_include
include|#
directive|include
file|<winx.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|CSIDL_MYMUSIC
end_ifndef
begin_define
DECL|macro|CSIDL_MYMUSIC
define|#
directive|define
name|CSIDL_MYMUSIC
value|13
end_define
begin_define
DECL|macro|CSIDL_MYVIDEO
define|#
directive|define
name|CSIDL_MYVIDEO
value|14
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STANDARDPATHS
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_typedef
DECL|typedef|GetKnownFolderPath
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|GetKnownFolderPath
function_decl|)
parameter_list|(
specifier|const
name|GUID
modifier|&
parameter_list|,
name|DWORD
parameter_list|,
name|HANDLE
parameter_list|,
name|LPWSTR
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|convertCharArray
specifier|static
name|QString
name|convertCharArray
parameter_list|(
specifier|const
name|wchar_t
modifier|*
name|path
parameter_list|)
block|{
return|return
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|clsidForAppDataLocation
specifier|static
specifier|inline
name|int
name|clsidForAppDataLocation
parameter_list|(
name|QStandardPaths
operator|::
name|StandardLocation
name|type
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
return|return
name|type
operator|==
name|QStandardPaths
operator|::
name|AppDataLocation
condition|?
name|CSIDL_APPDATA
else|:
comment|// "Roaming" path
name|CSIDL_LOCAL_APPDATA
return|;
comment|// Local path
else|#
directive|else
name|Q_UNUSED
argument_list|(
argument|type
argument_list|)
return|return
name|CSIDL_APPDATA
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|writableLocation
name|QString
name|QStandardPaths
operator|::
name|writableLocation
parameter_list|(
name|StandardLocation
name|type
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
specifier|static
name|GetKnownFolderPath
name|SHGetKnownFolderPath
init|=
operator|(
name|GetKnownFolderPath
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"shell32"
argument_list|)
argument_list|,
literal|"SHGetKnownFolderPath"
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|wchar_t
name|path
index|[
name|MAX_PATH
index|]
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|ConfigLocation
case|:
comment|// same as AppLocalDataLocation, on Windows
case|case
name|GenericConfigLocation
case|:
comment|// same as GenericDataLocation on Windows
case|case
name|AppConfigLocation
case|:
case|case
name|AppDataLocation
case|:
case|case
name|AppLocalDataLocation
case|:
case|case
name|GenericDataLocation
case|:
if|if
condition|(
name|SHGetSpecialFolderPath
argument_list|(
literal|0
argument_list|,
name|path
argument_list|,
name|clsidForAppDataLocation
argument_list|(
name|type
argument_list|)
argument_list|,
name|FALSE
argument_list|)
condition|)
name|result
operator|=
name|convertCharArray
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTestModeEnabled
argument_list|()
condition|)
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"/qttest"
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
if|if
condition|(
name|type
operator|!=
name|GenericDataLocation
operator|&&
name|type
operator|!=
name|GenericConfigLocation
condition|)
block|{
if|if
condition|(
operator|!
name|QCoreApplication
operator|::
name|organizationName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|QCoreApplication
operator|::
name|organizationName
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|QCoreApplication
operator|::
name|applicationName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|QCoreApplication
operator|::
name|applicationName
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
break|break;
case|case
name|DesktopLocation
case|:
if|if
condition|(
name|SHGetSpecialFolderPath
argument_list|(
literal|0
argument_list|,
name|path
argument_list|,
name|CSIDL_DESKTOPDIRECTORY
argument_list|,
name|FALSE
argument_list|)
condition|)
name|result
operator|=
name|convertCharArray
argument_list|(
name|path
argument_list|)
expr_stmt|;
break|break;
case|case
name|DownloadLocation
case|:
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|if
condition|(
name|SHGetKnownFolderPath
condition|)
block|{
name|LPWSTR
name|path
decl_stmt|;
if|if
condition|(
name|SHGetKnownFolderPath
argument_list|(
name|qCLSID_FOLDERID_Downloads
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|path
argument_list|)
operator|==
name|S_OK
condition|)
block|{
name|result
operator|=
name|convertCharArray
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|CoTaskMemFree
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
endif|#
directive|endif
comment|// fall through
case|case
name|DocumentsLocation
case|:
if|if
condition|(
name|SHGetSpecialFolderPath
argument_list|(
literal|0
argument_list|,
name|path
argument_list|,
name|CSIDL_PERSONAL
argument_list|,
name|FALSE
argument_list|)
condition|)
name|result
operator|=
name|convertCharArray
argument_list|(
name|path
argument_list|)
expr_stmt|;
break|break;
case|case
name|FontsLocation
case|:
if|if
condition|(
name|SHGetSpecialFolderPath
argument_list|(
literal|0
argument_list|,
name|path
argument_list|,
name|CSIDL_FONTS
argument_list|,
name|FALSE
argument_list|)
condition|)
name|result
operator|=
name|convertCharArray
argument_list|(
name|path
argument_list|)
expr_stmt|;
break|break;
case|case
name|ApplicationsLocation
case|:
if|if
condition|(
name|SHGetSpecialFolderPath
argument_list|(
literal|0
argument_list|,
name|path
argument_list|,
name|CSIDL_PROGRAMS
argument_list|,
name|FALSE
argument_list|)
condition|)
name|result
operator|=
name|convertCharArray
argument_list|(
name|path
argument_list|)
expr_stmt|;
break|break;
case|case
name|MusicLocation
case|:
if|if
condition|(
name|SHGetSpecialFolderPath
argument_list|(
literal|0
argument_list|,
name|path
argument_list|,
name|CSIDL_MYMUSIC
argument_list|,
name|FALSE
argument_list|)
condition|)
name|result
operator|=
name|convertCharArray
argument_list|(
name|path
argument_list|)
expr_stmt|;
break|break;
case|case
name|MoviesLocation
case|:
if|if
condition|(
name|SHGetSpecialFolderPath
argument_list|(
literal|0
argument_list|,
name|path
argument_list|,
name|CSIDL_MYVIDEO
argument_list|,
name|FALSE
argument_list|)
condition|)
name|result
operator|=
name|convertCharArray
argument_list|(
name|path
argument_list|)
expr_stmt|;
break|break;
case|case
name|PicturesLocation
case|:
if|if
condition|(
name|SHGetSpecialFolderPath
argument_list|(
literal|0
argument_list|,
name|path
argument_list|,
name|CSIDL_MYPICTURES
argument_list|,
name|FALSE
argument_list|)
condition|)
name|result
operator|=
name|convertCharArray
argument_list|(
name|path
argument_list|)
expr_stmt|;
break|break;
case|case
name|CacheLocation
case|:
comment|// Although Microsoft has a Cache key it is a pointer to IE's cache, not a cache
comment|// location for everyone.  Most applications seem to be using a
comment|// cache directory located in their AppData directory
return|return
name|writableLocation
argument_list|(
name|AppLocalDataLocation
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"/cache"
argument_list|)
return|;
case|case
name|GenericCacheLocation
case|:
return|return
name|writableLocation
argument_list|(
name|GenericDataLocation
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"/cache"
argument_list|)
return|;
case|case
name|RuntimeLocation
case|:
case|case
name|HomeLocation
case|:
name|result
operator|=
name|QDir
operator|::
name|homePath
argument_list|()
expr_stmt|;
break|break;
case|case
name|TempLocation
case|:
name|result
operator|=
name|QDir
operator|::
name|tempPath
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|standardLocations
name|QStringList
name|QStandardPaths
operator|::
name|standardLocations
parameter_list|(
name|StandardLocation
name|type
parameter_list|)
block|{
name|QStringList
name|dirs
decl_stmt|;
comment|// type-specific handling goes here
ifndef|#
directive|ifndef
name|Q_OS_WINCE
block|{
name|wchar_t
name|path
index|[
name|MAX_PATH
index|]
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|ConfigLocation
case|:
comment|// same as AppLocalDataLocation, on Windows (oversight, but too late to fix it)
case|case
name|GenericConfigLocation
case|:
comment|// same as GenericDataLocation, on Windows
case|case
name|AppConfigLocation
case|:
comment|// same as AppLocalDataLocation, that one on purpose
case|case
name|AppDataLocation
case|:
case|case
name|AppLocalDataLocation
case|:
case|case
name|GenericDataLocation
case|:
if|if
condition|(
name|SHGetSpecialFolderPath
argument_list|(
literal|0
argument_list|,
name|path
argument_list|,
name|clsidForAppDataLocation
argument_list|(
name|type
argument_list|)
argument_list|,
name|FALSE
argument_list|)
condition|)
block|{
name|QString
name|result
init|=
name|convertCharArray
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|GenericDataLocation
operator|&&
name|type
operator|!=
name|GenericConfigLocation
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
if|if
condition|(
operator|!
name|QCoreApplication
operator|::
name|organizationName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|QCoreApplication
operator|::
name|organizationName
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|QCoreApplication
operator|::
name|applicationName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|QCoreApplication
operator|::
name|applicationName
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
name|dirs
operator|.
name|append
argument_list|(
name|result
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
if|if
condition|(
name|type
operator|!=
name|GenericDataLocation
condition|)
block|{
name|dirs
operator|.
name|append
argument_list|(
name|QCoreApplication
operator|::
name|applicationDirPath
argument_list|()
argument_list|)
expr_stmt|;
name|dirs
operator|.
name|append
argument_list|(
name|QCoreApplication
operator|::
name|applicationDirPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/data"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
break|break;
default|default:
break|break;
block|}
block|}
endif|#
directive|endif
specifier|const
name|QString
name|localDir
init|=
name|writableLocation
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|dirs
operator|.
name|prepend
argument_list|(
name|localDir
argument_list|)
expr_stmt|;
return|return
name|dirs
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_STANDARDPATHS
end_comment
end_unit
