begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qstandardpaths.h"
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<private/qsystemlibrary_p.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
end_ifndef
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|qCLSID_FOLDERID_Downloads
specifier|const
name|GUID
name|qCLSID_FOLDERID_Downloads
init|=
block|{
literal|0x374de290
block|,
literal|0x123f
block|,
literal|0x4565
block|,
block|{
literal|0x91
block|,
literal|0x64
block|,
literal|0x39
block|,
literal|0xc4
block|,
literal|0x92
block|,
literal|0x5e
block|,
literal|0x46
block|,
literal|0x7b
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_include
include|#
directive|include
file|<shlobj.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|<intshcut.h>
end_include
begin_else
else|#
directive|else
end_else
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|STANDARDSHELL_UI_MODEL
argument_list|)
end_if
begin_include
include|#
directive|include
file|<winx.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|CSIDL_MYMUSIC
end_ifndef
begin_define
DECL|macro|CSIDL_MYMUSIC
define|#
directive|define
name|CSIDL_MYMUSIC
value|13
end_define
begin_define
DECL|macro|CSIDL_MYVIDEO
define|#
directive|define
name|CSIDL_MYVIDEO
value|14
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STANDARDPATHS
end_ifndef
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|convertCharArray
specifier|static
name|QString
name|convertCharArray
parameter_list|(
specifier|const
name|wchar_t
modifier|*
name|path
parameter_list|)
block|{
return|return
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isGenericConfigLocation
specifier|static
specifier|inline
name|bool
name|isGenericConfigLocation
parameter_list|(
name|QStandardPaths
operator|::
name|StandardLocation
name|type
parameter_list|)
block|{
return|return
name|type
operator|==
name|QStandardPaths
operator|::
name|GenericConfigLocation
operator|||
name|type
operator|==
name|QStandardPaths
operator|::
name|GenericDataLocation
return|;
block|}
end_function
begin_function
DECL|function|isConfigLocation
specifier|static
specifier|inline
name|bool
name|isConfigLocation
parameter_list|(
name|QStandardPaths
operator|::
name|StandardLocation
name|type
parameter_list|)
block|{
return|return
name|type
operator|==
name|QStandardPaths
operator|::
name|ConfigLocation
operator|||
name|type
operator|==
name|QStandardPaths
operator|::
name|AppConfigLocation
operator|||
name|type
operator|==
name|QStandardPaths
operator|::
name|AppDataLocation
operator|||
name|type
operator|==
name|QStandardPaths
operator|::
name|AppLocalDataLocation
operator|||
name|isGenericConfigLocation
argument_list|(
name|type
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|appendOrganizationAndApp
specifier|static
name|void
name|appendOrganizationAndApp
parameter_list|(
name|QString
modifier|&
name|path
parameter_list|)
comment|// Courtesy qstandardpaths_unix.cpp
block|{
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
specifier|const
name|QString
modifier|&
name|org
init|=
name|QCoreApplication
operator|::
name|organizationName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|org
operator|.
name|isEmpty
argument_list|()
condition|)
name|path
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|org
expr_stmt|;
specifier|const
name|QString
modifier|&
name|appName
init|=
name|QCoreApplication
operator|::
name|applicationName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|appName
operator|.
name|isEmpty
argument_list|()
condition|)
name|path
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|appName
expr_stmt|;
else|#
directive|else
comment|// !QT_BOOTSTRAPPED
name|Q_UNUSED
argument_list|(
argument|path
argument_list|)
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|displayName
specifier|static
specifier|inline
name|QString
name|displayName
parameter_list|(
name|QStandardPaths
operator|::
name|StandardLocation
name|type
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
return|return
name|QStandardPaths
operator|::
name|displayName
argument_list|(
name|type
argument_list|)
return|;
else|#
directive|else
return|return
name|QString
operator|::
name|number
argument_list|(
name|type
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|appendTestMode
specifier|static
specifier|inline
name|void
name|appendTestMode
parameter_list|(
name|QString
modifier|&
name|path
parameter_list|)
block|{
if|if
condition|(
name|QStandardPaths
operator|::
name|isTestModeEnabled
argument_list|()
condition|)
name|path
operator|+=
name|QLatin1String
argument_list|(
literal|"/qttest"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Map QStandardPaths::StandardLocation to CLSID of SHGetSpecialFolderPath()
end_comment
begin_function
DECL|function|writableSpecialFolderClsid
specifier|static
name|int
name|writableSpecialFolderClsid
parameter_list|(
name|QStandardPaths
operator|::
name|StandardLocation
name|type
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
specifier|static
specifier|const
name|int
name|clsids
index|[]
init|=
block|{
name|CSIDL_DESKTOPDIRECTORY
block|,
comment|// DesktopLocation
name|CSIDL_PERSONAL
block|,
comment|// DocumentsLocation
name|CSIDL_FONTS
block|,
comment|// FontsLocation
name|CSIDL_PROGRAMS
block|,
comment|// ApplicationsLocation
name|CSIDL_MYMUSIC
block|,
comment|// MusicLocation
name|CSIDL_MYVIDEO
block|,
comment|// MoviesLocation
name|CSIDL_MYPICTURES
block|,
comment|// PicturesLocation
operator|-
literal|1
block|,
operator|-
literal|1
block|,
comment|// TempLocation/HomeLocation
name|CSIDL_LOCAL_APPDATA
block|,
comment|// AppLocalDataLocation ("Local" path), AppLocalDataLocation = DataLocation
operator|-
literal|1
block|,
comment|// CacheLocation
name|CSIDL_LOCAL_APPDATA
block|,
comment|// GenericDataLocation ("Local" path)
operator|-
literal|1
block|,
comment|// RuntimeLocation
name|CSIDL_LOCAL_APPDATA
block|,
comment|// ConfigLocation ("Local" path)
operator|-
literal|1
block|,
operator|-
literal|1
block|,
comment|// DownloadLocation/GenericCacheLocation
name|CSIDL_LOCAL_APPDATA
block|,
comment|// GenericConfigLocation ("Local" path)
name|CSIDL_APPDATA
block|,
comment|// AppDataLocation ("Roaming" path)
name|CSIDL_LOCAL_APPDATA
block|,
comment|// AppConfigLocation ("Local" path)
block|}
decl_stmt|;
else|#
directive|else
comment|// !Q_OS_WINCE
specifier|static
specifier|const
name|int
name|clsids
index|[]
init|=
block|{
name|CSIDL_DESKTOPDIRECTORY
block|,
comment|// DesktopLocation
name|CSIDL_PERSONAL
block|,
comment|// DocumentsLocation
name|CSIDL_FONTS
block|,
comment|// FontsLocation
name|CSIDL_PROGRAMS
block|,
comment|// ApplicationsLocation
name|CSIDL_MYMUSIC
block|,
comment|// MusicLocation
name|CSIDL_MYVIDEO
block|,
comment|// MoviesLocation
name|CSIDL_MYPICTURES
block|,
comment|// PicturesLocation
operator|-
literal|1
block|,
operator|-
literal|1
block|,
comment|// TempLocation/HomeLocation
name|CSIDL_APPDATA
block|,
comment|// AppLocalDataLocation, AppLocalDataLocation = DataLocation
operator|-
literal|1
block|,
comment|// CacheLocation
name|CSIDL_APPDATA
block|,
comment|// GenericDataLocation
operator|-
literal|1
block|,
comment|// RuntimeLocation
name|CSIDL_APPDATA
block|,
comment|// ConfigLocation
operator|-
literal|1
block|,
operator|-
literal|1
block|,
comment|// DownloadLocation/GenericCacheLocation
name|CSIDL_APPDATA
block|,
comment|// GenericConfigLocation
name|CSIDL_APPDATA
block|,
comment|// AppDataLocation
name|CSIDL_APPDATA
block|,
comment|// AppConfigLocation
block|}
decl_stmt|;
endif|#
directive|endif
comment|// Q_OS_WINCE
name|Q_STATIC_ASSERT
argument_list|(
sizeof|sizeof
argument_list|(
name|clsids
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|clsids
index|[
literal|0
index|]
argument_list|)
operator|==
name|size_t
argument_list|(
name|QStandardPaths
operator|::
name|AppConfigLocation
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|size_t
argument_list|(
name|type
argument_list|)
operator|<
sizeof|sizeof
argument_list|(
name|clsids
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|clsids
index|[
literal|0
index|]
argument_list|)
condition|?
name|clsids
index|[
name|type
index|]
else|:
operator|-
literal|1
return|;
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|// Convenience for SHGetSpecialFolderPath().
end_comment
begin_function
DECL|function|sHGetSpecialFolderPath
specifier|static
name|QString
name|sHGetSpecialFolderPath
parameter_list|(
name|int
name|clsid
parameter_list|,
name|QStandardPaths
operator|::
name|StandardLocation
name|type
parameter_list|,
name|bool
name|warn
init|=
literal|false
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
name|wchar_t
name|path
index|[
name|MAX_PATH
index|]
decl_stmt|;
if|if
condition|(
name|Q_LIKELY
argument_list|(
name|clsid
operator|>=
literal|0
operator|&&
name|SHGetSpecialFolderPath
argument_list|(
literal|0
argument_list|,
name|path
argument_list|,
name|clsid
argument_list|,
name|FALSE
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|=
name|convertCharArray
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|warn
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"SHGetSpecialFolderPath() failed for standard location \"%s\", clsid=0x%x."
argument_list|,
name|qPrintable
argument_list|(
name|displayName
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|,
name|clsid
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|// Convenience for SHGetKnownFolderPath().
end_comment
begin_function
DECL|function|sHGetKnownFolderPath
specifier|static
name|QString
name|sHGetKnownFolderPath
parameter_list|(
specifier|const
name|GUID
modifier|&
name|clsid
parameter_list|,
name|QStandardPaths
operator|::
name|StandardLocation
name|type
parameter_list|,
name|bool
name|warn
init|=
literal|false
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|GetKnownFolderPath
function_decl|)
parameter_list|(
specifier|const
name|GUID
modifier|&
parameter_list|,
name|DWORD
parameter_list|,
name|HANDLE
parameter_list|,
name|LPWSTR
modifier|*
parameter_list|)
function_decl|;
specifier|static
specifier|const
name|GetKnownFolderPath
name|sHGetKnownFolderPath
init|=
comment|// Vista onwards.
cast|reinterpret_cast
argument_list|<
name|GetKnownFolderPath
argument_list|>
argument_list|(
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"shell32"
argument_list|)
argument_list|,
literal|"SHGetKnownFolderPath"
argument_list|)
argument_list|)
decl_stmt|;
name|LPWSTR
name|path
decl_stmt|;
if|if
condition|(
name|Q_LIKELY
argument_list|(
name|sHGetKnownFolderPath
operator|&&
name|SUCCEEDED
argument_list|(
name|sHGetKnownFolderPath
argument_list|(
name|clsid
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|path
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|=
name|convertCharArray
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|CoTaskMemFree
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|warn
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"SHGetKnownFolderPath() failed for standard location \"%s\"."
argument_list|,
name|qPrintable
argument_list|(
name|displayName
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|#
directive|else
comment|// !Q_OS_WINCE
name|Q_UNUSED
argument_list|(
argument|clsid
argument_list|)
name|Q_UNUSED
argument_list|(
argument|type
argument_list|)
name|Q_UNUSED
argument_list|(
argument|warn
argument_list|)
endif|#
directive|endif
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|writableLocation
name|QString
name|QStandardPaths
operator|::
name|writableLocation
parameter_list|(
name|StandardLocation
name|type
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DownloadLocation
case|:
name|result
operator|=
name|sHGetKnownFolderPath
argument_list|(
name|qCLSID_FOLDERID_Downloads
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|=
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|DocumentsLocation
argument_list|)
expr_stmt|;
break|break;
case|case
name|CacheLocation
case|:
comment|// Although Microsoft has a Cache key it is a pointer to IE's cache, not a cache
comment|// location for everyone.  Most applications seem to be using a
comment|// cache directory located in their AppData directory
name|result
operator|=
name|sHGetSpecialFolderPath
argument_list|(
name|writableSpecialFolderClsid
argument_list|(
name|AppLocalDataLocation
argument_list|)
argument_list|,
name|type
argument_list|,
comment|/* warn */
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|appendTestMode
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|appendOrganizationAndApp
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"/cache"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|GenericCacheLocation
case|:
name|result
operator|=
name|sHGetSpecialFolderPath
argument_list|(
name|writableSpecialFolderClsid
argument_list|(
name|GenericDataLocation
argument_list|)
argument_list|,
name|type
argument_list|,
comment|/* warn */
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|appendTestMode
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"/cache"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|RuntimeLocation
case|:
case|case
name|HomeLocation
case|:
name|result
operator|=
name|QDir
operator|::
name|homePath
argument_list|()
expr_stmt|;
break|break;
case|case
name|TempLocation
case|:
name|result
operator|=
name|QDir
operator|::
name|tempPath
argument_list|()
expr_stmt|;
break|break;
default|default:
name|result
operator|=
name|sHGetSpecialFolderPath
argument_list|(
name|writableSpecialFolderClsid
argument_list|(
name|type
argument_list|)
argument_list|,
name|type
argument_list|,
comment|/* warn */
name|isConfigLocation
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
operator|&&
name|isConfigLocation
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|appendTestMode
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isGenericConfigLocation
argument_list|(
name|type
argument_list|)
condition|)
name|appendOrganizationAndApp
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|standardLocations
name|QStringList
name|QStandardPaths
operator|::
name|standardLocations
parameter_list|(
name|StandardLocation
name|type
parameter_list|)
block|{
name|QStringList
name|dirs
decl_stmt|;
specifier|const
name|QString
name|localDir
init|=
name|writableLocation
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|localDir
operator|.
name|isEmpty
argument_list|()
condition|)
name|dirs
operator|.
name|append
argument_list|(
name|localDir
argument_list|)
expr_stmt|;
comment|// type-specific handling goes here
ifndef|#
directive|ifndef
name|Q_OS_WINCE
if|if
condition|(
name|isConfigLocation
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|QString
name|programData
init|=
name|sHGetSpecialFolderPath
argument_list|(
name|CSIDL_COMMON_APPDATA
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programData
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|isGenericConfigLocation
argument_list|(
name|type
argument_list|)
condition|)
name|appendOrganizationAndApp
argument_list|(
name|programData
argument_list|)
expr_stmt|;
name|dirs
operator|.
name|append
argument_list|(
name|programData
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
name|dirs
operator|.
name|append
argument_list|(
name|QCoreApplication
operator|::
name|applicationDirPath
argument_list|()
argument_list|)
expr_stmt|;
name|dirs
operator|.
name|append
argument_list|(
name|QCoreApplication
operator|::
name|applicationDirPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/data"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// !QT_BOOTSTRAPPED
block|}
comment|// isConfigLocation()
endif|#
directive|endif
comment|// !Q_OS_WINCE
return|return
name|dirs
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_STANDARDPATHS
end_comment
end_unit
