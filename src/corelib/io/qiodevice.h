begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QIODEVICE_H
end_ifndef
begin_define
DECL|macro|QIODEVICE_H
define|#
directive|define
name|QIODEVICE_H
end_define
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
end_ifndef
begin_include
include|#
directive|include
file|<QtCore/qobject.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<QtCore/qobjectdefs.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qscopedpointer.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|open
end_ifdef
begin_error
error|#
directive|error
error|qiodevice.h must be included before any header file that defines open
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Core
argument_list|)
name|class
name|QByteArray
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QIODevicePrivate
name|class
name|QIODevicePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QIODevice
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
range|:
name|public
name|QObject
endif|#
directive|endif
block|{
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
name|Q_OBJECT
endif|#
directive|endif
name|public
operator|:
expr|enum
name|OpenModeFlag
block|{
name|NotOpen
operator|=
literal|0x0000
block|,
name|ReadOnly
operator|=
literal|0x0001
block|,
name|WriteOnly
operator|=
literal|0x0002
block|,
name|ReadWrite
operator|=
name|ReadOnly
operator||
name|WriteOnly
block|,
name|Append
operator|=
literal|0x0004
block|,
name|Truncate
operator|=
literal|0x0008
block|,
name|Text
operator|=
literal|0x0010
block|,
name|Unbuffered
operator|=
literal|0x0020
block|}
block|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|OpenMode
argument_list|,
argument|OpenModeFlag
argument_list|)
name|QIODevice
argument_list|()
block|;
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
name|explicit
name|QIODevice
argument_list|(
name|QObject
operator|*
name|parent
argument_list|)
block|;
endif|#
directive|endif
name|virtual
operator|~
name|QIODevice
argument_list|()
block|;
name|OpenMode
name|openMode
argument_list|()
specifier|const
block|;
name|void
name|setTextModeEnabled
argument_list|(
argument|bool enabled
argument_list|)
block|;
name|bool
name|isTextModeEnabled
argument_list|()
specifier|const
block|;
name|bool
name|isOpen
argument_list|()
specifier|const
block|;
name|bool
name|isReadable
argument_list|()
specifier|const
block|;
name|bool
name|isWritable
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|isSequential
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|open
argument_list|(
argument|OpenMode mode
argument_list|)
block|;
name|virtual
name|void
name|close
argument_list|()
block|;
comment|// ### Qt 5: pos() and seek() should not be virtual, and
comment|// ### seek() should call a virtual seekData() function.
name|virtual
name|qint64
name|pos
argument_list|()
specifier|const
block|;
name|virtual
name|qint64
name|size
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|seek
argument_list|(
argument|qint64 pos
argument_list|)
block|;
name|virtual
name|bool
name|atEnd
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|reset
argument_list|()
block|;
name|virtual
name|qint64
name|bytesAvailable
argument_list|()
specifier|const
block|;
name|virtual
name|qint64
name|bytesToWrite
argument_list|()
specifier|const
block|;
name|qint64
name|read
argument_list|(
argument|char *data
argument_list|,
argument|qint64 maxlen
argument_list|)
block|;
name|QByteArray
name|read
argument_list|(
argument|qint64 maxlen
argument_list|)
block|;
name|QByteArray
name|readAll
argument_list|()
block|;
name|qint64
name|readLine
argument_list|(
argument|char *data
argument_list|,
argument|qint64 maxlen
argument_list|)
block|;
name|QByteArray
name|readLine
argument_list|(
argument|qint64 maxlen =
literal|0
argument_list|)
block|;
name|virtual
name|bool
name|canReadLine
argument_list|()
specifier|const
block|;
name|qint64
name|write
argument_list|(
argument|const char *data
argument_list|,
argument|qint64 len
argument_list|)
block|;
name|qint64
name|write
argument_list|(
specifier|const
name|char
operator|*
name|data
argument_list|)
block|;
specifier|inline
name|qint64
name|write
argument_list|(
argument|const QByteArray&data
argument_list|)
block|{
return|return
name|write
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
name|qint64
name|peek
argument_list|(
argument|char *data
argument_list|,
argument|qint64 maxlen
argument_list|)
block|;
name|QByteArray
name|peek
argument_list|(
argument|qint64 maxlen
argument_list|)
block|;
name|virtual
name|bool
name|waitForReadyRead
argument_list|(
argument|int msecs
argument_list|)
block|;
name|virtual
name|bool
name|waitForBytesWritten
argument_list|(
argument|int msecs
argument_list|)
block|;
name|void
name|ungetChar
argument_list|(
argument|char c
argument_list|)
block|;
name|bool
name|putChar
argument_list|(
argument|char c
argument_list|)
block|;
name|bool
name|getChar
argument_list|(
name|char
operator|*
name|c
argument_list|)
block|;
name|QString
name|errorString
argument_list|()
specifier|const
block|;
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
name|Q_SIGNALS
operator|:
name|void
name|readyRead
argument_list|()
block|;
name|void
name|bytesWritten
argument_list|(
argument|qint64 bytes
argument_list|)
block|;
name|void
name|aboutToClose
argument_list|()
block|;
name|void
name|readChannelFinished
argument_list|()
block|;
endif|#
directive|endif
name|protected
operator|:
ifdef|#
directive|ifdef
name|QT_NO_QOBJECT
name|QIODevice
argument_list|(
name|QIODevicePrivate
operator|&
name|dd
argument_list|)
block|;
else|#
directive|else
name|QIODevice
argument_list|(
name|QIODevicePrivate
operator|&
name|dd
argument_list|,
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
endif|#
directive|endif
name|virtual
name|qint64
name|readData
argument_list|(
argument|char *data
argument_list|,
argument|qint64 maxlen
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|qint64
name|readLineData
argument_list|(
argument|char *data
argument_list|,
argument|qint64 maxlen
argument_list|)
block|;
name|virtual
name|qint64
name|writeData
argument_list|(
argument|const char *data
argument_list|,
argument|qint64 len
argument_list|)
operator|=
literal|0
block|;
name|void
name|setOpenMode
argument_list|(
argument|OpenMode openMode
argument_list|)
block|;
name|void
name|setErrorString
argument_list|(
specifier|const
name|QString
operator|&
name|errorString
argument_list|)
block|;
ifdef|#
directive|ifdef
name|QT_NO_QOBJECT
name|QScopedPointer
operator|<
name|QIODevicePrivate
operator|>
name|d_ptr
block|;
endif|#
directive|endif
name|private
operator|:
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QIODevice
argument_list|)
name|Q_DISABLE_COPY
argument_list|(
argument|QIODevice
argument_list|)
ifdef|#
directive|ifdef
name|QT3_SUPPORT
name|public
operator|:
typedef|typedef
name|qint64
name|Offset
typedef|;
specifier|inline
name|QT3_SUPPORT
name|int
name|flags
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|int
operator|>
operator|(
name|openMode
argument_list|()
operator|)
return|;
block|}
specifier|inline
name|QT3_SUPPORT
name|int
name|mode
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|int
operator|>
operator|(
name|openMode
argument_list|()
operator|)
return|;
block|}
specifier|inline
name|QT3_SUPPORT
name|int
name|state
argument_list|()
specifier|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
specifier|inline
name|QT3_SUPPORT
name|bool
name|isDirectAccess
argument_list|()
specifier|const
block|{
return|return
operator|!
name|isSequential
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT3_SUPPORT
name|bool
name|isSequentialAccess
argument_list|()
specifier|const
block|{
return|return
name|isSequential
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT3_SUPPORT
name|bool
name|isCombinedAccess
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT3_SUPPORT
name|bool
name|isBuffered
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT3_SUPPORT
name|bool
name|isRaw
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT3_SUPPORT
name|bool
name|isSynchronous
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT3_SUPPORT
name|bool
name|isAsynchronous
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT3_SUPPORT
name|bool
name|isTranslated
argument_list|()
specifier|const
block|{
return|return
operator|(
name|openMode
argument_list|()
operator|&
name|Text
operator|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT3_SUPPORT
name|bool
name|isInactive
argument_list|()
specifier|const
block|{
return|return
operator|!
name|isOpen
argument_list|()
return|;
block|}
end_expr_stmt
begin_typedef
typedef|typedef
name|int
name|Status
typedef|;
end_typedef
begin_expr_stmt
name|QT3_SUPPORT
name|Status
name|status
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|QT3_SUPPORT
name|void
name|resetStatus
parameter_list|()
function_decl|;
end_function_decl
begin_expr_stmt
specifier|inline
name|QT3_SUPPORT
name|Offset
name|at
argument_list|()
specifier|const
block|{
return|return
name|pos
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|QT3_SUPPORT
name|bool
name|at
parameter_list|(
name|Offset
name|offset
parameter_list|)
block|{
return|return
name|seek
argument_list|(
name|offset
argument_list|)
return|;
block|}
end_function
begin_function
specifier|inline
name|QT3_SUPPORT
name|qint64
name|readBlock
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|quint64
name|maxlen
parameter_list|)
block|{
return|return
name|read
argument_list|(
name|data
argument_list|,
name|maxlen
argument_list|)
return|;
block|}
end_function
begin_function
specifier|inline
name|QT3_SUPPORT
name|qint64
name|writeBlock
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|quint64
name|len
parameter_list|)
block|{
return|return
name|write
argument_list|(
name|data
argument_list|,
name|len
argument_list|)
return|;
block|}
end_function
begin_function
specifier|inline
name|QT3_SUPPORT
name|qint64
name|writeBlock
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
block|{
return|return
name|write
argument_list|(
name|data
argument_list|)
return|;
block|}
end_function
begin_function
specifier|inline
name|QT3_SUPPORT
name|int
name|getch
parameter_list|()
block|{
name|char
name|c
decl_stmt|;
return|return
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
condition|?
name|int
argument_list|(
name|uchar
argument_list|(
name|c
argument_list|)
argument_list|)
else|:
operator|-
literal|1
return|;
block|}
end_function
begin_function
specifier|inline
name|QT3_SUPPORT
name|int
name|putch
parameter_list|(
name|int
name|c
parameter_list|)
block|{
return|return
name|putChar
argument_list|(
name|char
argument_list|(
name|c
argument_list|)
argument_list|)
condition|?
name|int
argument_list|(
name|uchar
argument_list|(
name|c
argument_list|)
argument_list|)
else|:
operator|-
literal|1
return|;
block|}
end_function
begin_function
specifier|inline
name|QT3_SUPPORT
name|int
name|ungetch
parameter_list|(
name|int
name|c
parameter_list|)
block|{
name|ungetChar
argument_list|(
name|uchar
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
unit|};
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QIODevice::OpenMode
argument_list|)
end_macro
begin_ifdef
ifdef|#
directive|ifdef
name|QT3_SUPPORT
end_ifdef
begin_decl_stmt
DECL|variable|IO_Direct
specifier|static
name|QT3_SUPPORT_VARIABLE
specifier|const
name|uint
name|IO_Direct
init|=
literal|0x0100
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|IO_Sequential
specifier|static
name|QT3_SUPPORT_VARIABLE
specifier|const
name|uint
name|IO_Sequential
init|=
literal|0x0200
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|IO_Combined
specifier|static
name|QT3_SUPPORT_VARIABLE
specifier|const
name|uint
name|IO_Combined
init|=
literal|0x0300
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|IO_TypeMask
specifier|static
name|QT3_SUPPORT_VARIABLE
specifier|const
name|uint
name|IO_TypeMask
init|=
literal|0x0300
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|IO_Raw
specifier|static
name|QT3_SUPPORT_VARIABLE
specifier|const
name|uint
name|IO_Raw
init|=
literal|0x0000
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|IO_Async
specifier|static
name|QT3_SUPPORT_VARIABLE
specifier|const
name|uint
name|IO_Async
init|=
literal|0x0000
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|IO_ReadOnly
define|#
directive|define
name|IO_ReadOnly
value|QIODevice::ReadOnly
end_define
begin_define
DECL|macro|IO_WriteOnly
define|#
directive|define
name|IO_WriteOnly
value|QIODevice::WriteOnly
end_define
begin_define
DECL|macro|IO_ReadWrite
define|#
directive|define
name|IO_ReadWrite
value|QIODevice::ReadWrite
end_define
begin_define
DECL|macro|IO_Append
define|#
directive|define
name|IO_Append
value|QIODevice::Append
end_define
begin_define
DECL|macro|IO_Truncate
define|#
directive|define
name|IO_Truncate
value|QIODevice::Truncate
end_define
begin_define
DECL|macro|IO_Translate
define|#
directive|define
name|IO_Translate
value|QIODevice::Text
end_define
begin_define
DECL|macro|IO_ModeMask
define|#
directive|define
name|IO_ModeMask
value|0x00ff
end_define
begin_decl_stmt
DECL|variable|IO_Open
specifier|static
name|QT3_SUPPORT_VARIABLE
specifier|const
name|uint
name|IO_Open
init|=
literal|0x1000
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|IO_StateMask
specifier|static
name|QT3_SUPPORT_VARIABLE
specifier|const
name|uint
name|IO_StateMask
init|=
literal|0xf000
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|IO_Ok
specifier|static
name|QT3_SUPPORT_VARIABLE
specifier|const
name|uint
name|IO_Ok
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|IO_ReadError
specifier|static
name|QT3_SUPPORT_VARIABLE
specifier|const
name|uint
name|IO_ReadError
init|=
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|IO_WriteError
specifier|static
name|QT3_SUPPORT_VARIABLE
specifier|const
name|uint
name|IO_WriteError
init|=
literal|2
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|IO_FatalError
specifier|static
name|QT3_SUPPORT_VARIABLE
specifier|const
name|uint
name|IO_FatalError
init|=
literal|3
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|IO_ResourceError
specifier|static
name|QT3_SUPPORT_VARIABLE
specifier|const
name|uint
name|IO_ResourceError
init|=
literal|4
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|IO_OpenError
specifier|static
name|QT3_SUPPORT_VARIABLE
specifier|const
name|uint
name|IO_OpenError
init|=
literal|5
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|IO_ConnectError
specifier|static
name|QT3_SUPPORT_VARIABLE
specifier|const
name|uint
name|IO_ConnectError
init|=
literal|5
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|IO_AbortError
specifier|static
name|QT3_SUPPORT_VARIABLE
specifier|const
name|uint
name|IO_AbortError
init|=
literal|6
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|IO_TimeOutError
specifier|static
name|QT3_SUPPORT_VARIABLE
specifier|const
name|uint
name|IO_TimeOutError
init|=
literal|7
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|IO_UnspecifiedError
specifier|static
name|QT3_SUPPORT_VARIABLE
specifier|const
name|uint
name|IO_UnspecifiedError
init|=
literal|8
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|function|state
specifier|inline
name|QT3_SUPPORT
name|int
name|QIODevice
operator|::
name|state
argument_list|()
specifier|const
block|{
return|return
name|isOpen
argument_list|()
operator|?
literal|0x1000
operator|:
literal|0
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DEBUG_STREAM
argument_list|)
end_if
begin_decl_stmt
DECL|variable|QDebug
name|class
name|QDebug
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
name|debug
operator|,
name|QIODevice
operator|::
name|OpenMode
name|modes
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QIODEVICE_H
end_comment
end_unit
