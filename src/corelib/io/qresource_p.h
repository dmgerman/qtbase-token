begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QRESOURCE_P_H
end_ifndef
begin_define
DECL|macro|QRESOURCE_P_H
define|#
directive|define
name|QRESOURCE_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"qabstractfileengine_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QResourceFileEnginePrivate
name|class
name|QResourceFileEnginePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QResourceFileEngine
range|:
name|public
name|QAbstractFileEngine
block|{
name|private
operator|:
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QResourceFileEngine
argument_list|)
name|public
operator|:
name|explicit
name|QResourceFileEngine
argument_list|(
specifier|const
name|QString
operator|&
name|path
argument_list|)
block|;
operator|~
name|QResourceFileEngine
argument_list|()
block|;
name|virtual
name|void
name|setFileName
argument_list|(
specifier|const
name|QString
operator|&
name|file
argument_list|)
block|;
name|virtual
name|bool
name|open
argument_list|(
argument|QIODevice::OpenMode flags
argument_list|)
block|;
name|virtual
name|bool
name|close
argument_list|()
block|;
name|virtual
name|bool
name|flush
argument_list|()
block|;
name|virtual
name|qint64
name|size
argument_list|()
specifier|const
block|;
name|virtual
name|qint64
name|pos
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|atEnd
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|seek
argument_list|(
name|qint64
argument_list|)
block|;
name|virtual
name|qint64
name|read
argument_list|(
argument|char *data
argument_list|,
argument|qint64 maxlen
argument_list|)
block|;
name|virtual
name|qint64
name|write
argument_list|(
argument|const char *data
argument_list|,
argument|qint64 len
argument_list|)
block|;
name|virtual
name|bool
name|remove
argument_list|()
block|;
name|virtual
name|bool
name|copy
argument_list|(
specifier|const
name|QString
operator|&
name|newName
argument_list|)
block|;
name|virtual
name|bool
name|rename
argument_list|(
specifier|const
name|QString
operator|&
name|newName
argument_list|)
block|;
name|virtual
name|bool
name|link
argument_list|(
specifier|const
name|QString
operator|&
name|newName
argument_list|)
block|;
name|virtual
name|bool
name|isSequential
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|isRelativePath
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|mkdir
argument_list|(
argument|const QString&dirName
argument_list|,
argument|bool createParentDirectories
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|rmdir
argument_list|(
argument|const QString&dirName
argument_list|,
argument|bool recurseParentDirectories
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|setSize
argument_list|(
argument|qint64 size
argument_list|)
block|;
name|virtual
name|QStringList
name|entryList
argument_list|(
argument|QDir::Filters filters
argument_list|,
argument|const QStringList&filterNames
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|caseSensitive
argument_list|()
specifier|const
block|;
name|virtual
name|FileFlags
name|fileFlags
argument_list|(
argument|FileFlags type
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|setPermissions
argument_list|(
argument|uint perms
argument_list|)
block|;
name|virtual
name|QString
name|fileName
argument_list|(
argument|QAbstractFileEngine::FileName file
argument_list|)
specifier|const
block|;
name|virtual
name|uint
name|ownerId
argument_list|(
argument|FileOwner
argument_list|)
specifier|const
block|;
name|virtual
name|QString
name|owner
argument_list|(
argument|FileOwner
argument_list|)
specifier|const
block|;
name|virtual
name|QDateTime
name|fileTime
argument_list|(
argument|FileTime time
argument_list|)
specifier|const
block|;
name|virtual
name|Iterator
operator|*
name|beginEntryList
argument_list|(
argument|QDir::Filters filters
argument_list|,
argument|const QStringList&filterNames
argument_list|)
block|;
name|virtual
name|Iterator
operator|*
name|endEntryList
argument_list|()
block|;
name|bool
name|extension
argument_list|(
argument|Extension extension
argument_list|,
argument|const ExtensionOption *option =
literal|0
argument_list|,
argument|ExtensionReturn *output =
literal|0
argument_list|)
block|;
name|bool
name|supportsExtension
argument_list|(
argument|Extension extension
argument_list|)
specifier|const
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QRESOURCE_P_H
end_comment
end_unit
